class <Module>
{
}

class Interop
{
    static /*0x7018e94*/ System.Exception GetExceptionForIoErrno(Interop.ErrorInfo errorInfo, string path, bool isDirectory);
    static /*0x70193f0*/ System.Exception GetIOException(Interop.ErrorInfo errorInfo);
    static /*0x7019544*/ void GetRandomBytes(byte* buffer, int length);

    enum Error
    {
        SUCCESS = 0,
        E2BIG = 65537,
        EACCES = 65538,
        EADDRINUSE = 65539,
        EADDRNOTAVAIL = 65540,
        EAFNOSUPPORT = 65541,
        EAGAIN = 65542,
        EALREADY = 65543,
        EBADF = 65544,
        EBADMSG = 65545,
        EBUSY = 65546,
        ECANCELED = 65547,
        ECHILD = 65548,
        ECONNABORTED = 65549,
        ECONNREFUSED = 65550,
        ECONNRESET = 65551,
        EDEADLK = 65552,
        EDESTADDRREQ = 65553,
        EDOM = 65554,
        EDQUOT = 65555,
        EEXIST = 65556,
        EFAULT = 65557,
        EFBIG = 65558,
        EHOSTUNREACH = 65559,
        EIDRM = 65560,
        EILSEQ = 65561,
        EINPROGRESS = 65562,
        EINTR = 65563,
        EINVAL = 65564,
        EIO = 65565,
        EISCONN = 65566,
        EISDIR = 65567,
        ELOOP = 65568,
        EMFILE = 65569,
        EMLINK = 65570,
        EMSGSIZE = 65571,
        EMULTIHOP = 65572,
        ENAMETOOLONG = 65573,
        ENETDOWN = 65574,
        ENETRESET = 65575,
        ENETUNREACH = 65576,
        ENFILE = 65577,
        ENOBUFS = 65578,
        ENODEV = 65580,
        ENOENT = 65581,
        ENOEXEC = 65582,
        ENOLCK = 65583,
        ENOLINK = 65584,
        ENOMEM = 65585,
        ENOMSG = 65586,
        ENOPROTOOPT = 65587,
        ENOSPC = 65588,
        ENOSYS = 65591,
        ENOTCONN = 65592,
        ENOTDIR = 65593,
        ENOTEMPTY = 65594,
        ENOTSOCK = 65596,
        ENOTSUP = 65597,
        ENOTTY = 65598,
        ENXIO = 65599,
        EOVERFLOW = 65600,
        EPERM = 65602,
        EPIPE = 65603,
        EPROTO = 65604,
        EPROTONOSUPPORT = 65605,
        EPROTOTYPE = 65606,
        ERANGE = 65607,
        EROFS = 65608,
        ESPIPE = 65609,
        ESRCH = 65610,
        ESTALE = 65611,
        ETIMEDOUT = 65613,
        ETXTBSY = 65614,
        EXDEV = 65615,
        ESOCKTNOSUPPORT = 65630,
        EPFNOSUPPORT = 65632,
        ESHUTDOWN = 65644,
        EHOSTDOWN = 65648,
        ENODATA = 65649,
        EOPNOTSUPP = 65597,
        EWOULDBLOCK = 65542,
    }

    struct ErrorInfo
    {
        /*0x10*/ Interop.Error _error;
        /*0x14*/ int _rawErrno;

        /*0x70195ac*/ ErrorInfo(int errno);
        /*0x7019618*/ ErrorInfo(Interop.Error error);
        /*0x7019624*/ Interop.Error get_Error();
        /*0x7019474*/ int get_RawErrno();
        /*0x70194e0*/ string GetErrorMessage();
        /*0x701972c*/ string ToString();
    }

    class Sys
    {
        static /*0x0*/ bool CanSetHiddenFlag;

        static /*0x7019eac*/ Sys();
        static /*0x70197ec*/ Interop.ErrorInfo GetLastErrorInfo();
        static /*0x7019630*/ string StrError(int platformErrno);
        static /*0x7019614*/ Interop.Error ConvertErrorPlatformToPal(int platformErrno);
        static /*0x701962c*/ int ConvertErrorPalToPlatform(Interop.Error error);
        static /*0x7019854*/ byte* StrErrorR(int platformErrno, byte* buffer, int bufferSize);
        static /*0x70195a8*/ void GetNonCryptographicallySecureRandomBytes(byte* buffer, int length);
        static /*0x7019858*/ nint OpenDir(string path);
        static /*0x701988c*/ int GetReadDirRBufferSize();
        static /*0x7019890*/ int ReadDirR(nint dir, byte* buffer, int bufferSize, ref Interop.Sys.DirectoryEntry outputEntry);
        static /*0x7019894*/ int CloseDir(nint dir);
        static /*0x70198b0*/ int ReadLink(string path, byte[] buffer, int bufferSize);
        static /*0x70198fc*/ string ReadLink(string path);
        static /*0x7019b14*/ int Stat(string path, ref Interop.Sys.FileStatus output);
        static /*0x7019b50*/ uint GetEGid();
        static /*0x7019b54*/ uint GetEUid();
        static /*0x7019b58*/ int LChflagsCanSetHiddenFlag();
        static /*0x7019b5c*/ int MkDir(string path, int mode);
        static /*0x7019b98*/ int RmDir(string path);
        static /*0x7019bcc*/ int Stat(ref byte path, ref Interop.Sys.FileStatus output);
        static /*0x7019be8*/ int Stat(System.ReadOnlySpan<char> path, ref Interop.Sys.FileStatus output);
        static /*0x7019d20*/ int LStat(ref byte path, ref Interop.Sys.FileStatus output);
        static /*0x7019d3c*/ int LStat(System.ReadOnlySpan<char> path, ref Interop.Sys.FileStatus output);
        static /*0x7019e74*/ int Unlink(string pathname);
        static /*0x7019ea8*/ int DoubleToString(double value, byte* format, byte* buffer, int bufferLength);

        enum NodeType
        {
            DT_UNKNOWN = 0,
            DT_FIFO = 1,
            DT_CHR = 2,
            DT_DIR = 4,
            DT_BLK = 6,
            DT_REG = 8,
            DT_LNK = 10,
            DT_SOCK = 12,
            DT_WHT = 14,
        }

        struct DirectoryEntry
        {
            /*0x10*/ byte* Name;
            /*0x18*/ int NameLength;
            /*0x1c*/ Interop.Sys.NodeType InodeType;

            /*0x7019f00*/ System.ReadOnlySpan<char> GetName(System.Span<char> buffer);
        }

        struct FileStatus
        {
            /*0x10*/ Interop.Sys.FileStatusFlags Flags;
            /*0x14*/ int Mode;
            /*0x18*/ uint Uid;
            /*0x1c*/ uint Gid;
            /*0x20*/ long Size;
            /*0x28*/ long ATime;
            /*0x30*/ long ATimeNsec;
            /*0x38*/ long MTime;
            /*0x40*/ long MTimeNsec;
            /*0x48*/ long CTime;
            /*0x50*/ long CTimeNsec;
            /*0x58*/ long BirthTime;
            /*0x60*/ long BirthTimeNsec;
            /*0x68*/ long Dev;
            /*0x70*/ long Ino;
            /*0x78*/ uint UserFlags;
        }

        enum FileStatusFlags
        {
            None = 0,
            HasBirthTime = 1,
        }

        enum Permissions
        {
            Mask = 511,
            S_IRWXU = 448,
            S_IRUSR = 256,
            S_IWUSR = 128,
            S_IXUSR = 64,
            S_IRWXG = 56,
            S_IRGRP = 32,
            S_IWGRP = 16,
            S_IXGRP = 8,
            S_IRWXO = 7,
            S_IROTH = 4,
            S_IWOTH = 2,
            S_IXOTH = 1,
        }
    }
}

class InteropErrorExtensions
{
    static /*0x701a024*/ Interop.ErrorInfo Info(Interop.Error error);
}

class Locale
{
    static /*0x701a02c*/ string GetText(string msg);
    static /*0x701a030*/ string GetText(string fmt, object[] args);
}

class SR
{
    static /*0x701a038*/ string GetString(string name, object[] args);
    static /*0x701a0a8*/ string GetString(System.Globalization.CultureInfo culture, string name, object[] args);
    static /*0x701a0b0*/ string GetString(string name);
    static /*0x7019380*/ string Format(string resourceFormat, object p1);
    static /*0x701a0b4*/ string Format(string resourceFormat, object p1, object p2);
    static /*0x701a12c*/ string Format(string resourceFormat, object p1, object p2, object p3);
    static /*0x701a1b4*/ string GetResourceString(string str);
}

namespace Mono
{
    enum CertificateImportFlags
    {
        None = 0,
        DisableNativeBackend = 1,
        DisableAutomaticFallback = 2,
    }

    class DependencyInjector
    {
        static /*0x0*/ object locker;
        static /*0x8*/ Mono.ISystemDependencyProvider systemDependency;

        static /*0x701a6a8*/ DependencyInjector();
        static /*0x701a1b8*/ Mono.ISystemDependencyProvider get_SystemProvider();
        static /*0x701a504*/ void Register(Mono.ISystemDependencyProvider provider);
        static /*0x701a3c4*/ Mono.ISystemDependencyProvider ReflectionLoad();
    }

    interface ISystemCertificateProvider
    {
        /*0x3814b48*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] data, Mono.CertificateImportFlags importFlags);
        System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] data, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, Mono.CertificateImportFlags importFlags);
        /*0x3814b48*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.CertificateImportFlags importFlags);
    }

    interface ISystemDependencyProvider
    {
        /*0x38148bc*/ Mono.ISystemCertificateProvider get_CertificateProvider();
    }

    class Runtime
    {
        static /*0x0*/ object dump;

        static /*0x701a724*/ Runtime();
    }

    struct RuntimeClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.MonoClass* value;

        static /*0x701a8f4*/ nint GetTypeFromClass(Mono.RuntimeStructs.MonoClass* klass);
        /*0x701a7a0*/ RuntimeClassHandle(Mono.RuntimeStructs.MonoClass* value);
        /*0x701a7a8*/ RuntimeClassHandle(nint ptr);
        /*0x701a7c8*/ Mono.RuntimeStructs.MonoClass* get_Value();
        /*0x701a7d0*/ bool Equals(object obj);
        /*0x701a8c8*/ int GetHashCode();
        /*0x701a8f8*/ System.RuntimeTypeHandle GetTypeHandle();
    }

    struct RuntimeRemoteClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.RemoteClass* value;

        /*0x701a900*/ Mono.RuntimeClassHandle get_ProxyClass();
    }

    struct RuntimeGenericParamInfoHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GenericParamInfo* value;

        /*0x701a91c*/ RuntimeGenericParamInfoHandle(nint ptr);
        /*0x701a93c*/ System.Type[] get_Constraints();
        /*0x701aa6c*/ System.Reflection.GenericParameterAttributes get_Attributes();
        /*0x701a940*/ System.Type[] GetConstraints();
        /*0x701aa88*/ int GetConstraintsCount();
    }

    struct RuntimeEventHandle
    {
        /*0x10*/ nint value;

        /*0x701aac8*/ RuntimeEventHandle(nint v);
        /*0x701aad0*/ nint get_Value();
        /*0x701aad8*/ bool Equals(object obj);
        /*0x701abd0*/ int GetHashCode();
    }

    struct RuntimePropertyHandle
    {
        /*0x10*/ nint value;

        /*0x701abd8*/ RuntimePropertyHandle(nint v);
        /*0x701abe0*/ nint get_Value();
        /*0x701abe8*/ bool Equals(object obj);
        /*0x701ace0*/ int GetHashCode();
    }

    struct RuntimeGPtrArrayHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GPtrArray* value;

        static /*0x701ad8c*/ void GPtrArrayFree(Mono.RuntimeStructs.GPtrArray* value);
        static /*0x701ad90*/ void DestroyAndFree(ref Mono.RuntimeGPtrArrayHandle h);
        /*0x701ace8*/ RuntimeGPtrArrayHandle(nint ptr);
        /*0x701ad08*/ int get_Length();
        /*0x701ad24*/ nint get_Item(int i);
        /*0x701ad28*/ nint Lookup(int i);
    }

    class RuntimeMarshal
    {
        static /*0x701adac*/ string PtrToUtf8String(nint ptr);
        static /*0x701ae40*/ Mono.SafeStringMarshal MarshalString(string str);
        static /*0x701ae8c*/ int DecodeBlobSize(nint in_ptr, ref nint out_ptr);
        static /*0x701af08*/ byte[] DecodeBlobArray(nint ptr);
        static /*0x701afc0*/ int AsciHexDigitValue(int c);
        static /*0x701afec*/ void FreeAssemblyName(ref Mono.MonoAssemblyName name, bool freeStruct);
    }

    class RuntimeStructs
    {
        struct RemoteClass
        {
            /*0x10*/ nint default_vtable;
            /*0x18*/ nint xdomain_vtable;
            /*0x20*/ Mono.RuntimeStructs.MonoClass* proxy_class;
            /*0x28*/ nint proxy_class_name;
            /*0x30*/ uint interface_count;
        }

        struct MonoClass
        {
        }

        struct GenericParamInfo
        {
            /*0x10*/ Mono.RuntimeStructs.MonoClass* pklass;
            /*0x18*/ nint name;
            /*0x20*/ ushort flags;
            /*0x24*/ uint token;
            /*0x28*/ Mono.RuntimeStructs.MonoClass** constraints;
        }

        struct GPtrArray
        {
            /*0x10*/ nint* data;
            /*0x18*/ int len;
        }
    }

    struct MonoAssemblyName
    {
        /*0x10*/ nint name;
        /*0x18*/ nint culture;
        /*0x20*/ nint hash_value;
        /*0x28*/ nint public_key;
        /*0x30*/ Mono.MonoAssemblyName.<public_key_token> public_key_token;
        /*0x44*/ uint hash_alg;
        /*0x48*/ uint hash_len;
        /*0x4c*/ uint flags;
        /*0x50*/ ushort major;
        /*0x52*/ ushort minor;
        /*0x54*/ ushort build;
        /*0x56*/ ushort revision;
        /*0x58*/ ushort arch;

        struct <public_key_token>e__FixedBuffer
        {
            /*0x10*/ byte FixedElementField;
        }
    }

    struct ValueTuple
    {
    }

    struct ValueTuple<T1>
    {
        /*0x0*/ T1 Item1;
    }

    struct ValueTuple<T1, T2>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
    }

    struct ValueTuple<T1, T2, T3>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
    }

    struct ValueTuple<T1, T2, T3, T4>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
    }

    struct ValueTuple<T1, T2, T3, T4, T5>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
    }

    struct SafeGPtrArrayHandle : System.IDisposable
    {
        /*0x10*/ Mono.RuntimeGPtrArrayHandle handle;

        /*0x701aff4*/ SafeGPtrArrayHandle(nint ptr);
        /*0x701b014*/ void Dispose();
        /*0x701b030*/ int get_Length();
        /*0x701b04c*/ nint get_Item(int i);
    }

    struct SafeStringMarshal : System.IDisposable
    {
        /*0x10*/ string str;
        /*0x18*/ nint marshaled_string;

        static /*0x701b050*/ nint StringToUtf8_icall(ref string str);
        static /*0x701b054*/ nint StringToUtf8(string str);
        static /*0x701b06c*/ void GFree(nint ptr);
        /*0x701ae70*/ SafeStringMarshal(string str);
        /*0x701b070*/ nint get_Value();
        /*0x701b0b0*/ void Dispose();
    }

    namespace Xml
    {
        class SecurityParser : Mono.Xml.SmallXmlParser, Mono.Xml.SmallXmlParser.IContentHandler
        {
            /*0x68*/ System.Security.SecurityElement root;
            /*0x70*/ System.Security.SecurityElement current;
            /*0x78*/ System.Collections.Stack stack;

            /*0x701b0d0*/ SecurityParser();
            /*0x701b280*/ void LoadXml(string xml);
            /*0x701b4fc*/ System.Security.SecurityElement ToXml();
            /*0x701b504*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
            /*0x701b508*/ void OnProcessingInstruction(string name, string text);
            /*0x701b50c*/ void OnIgnorableWhitespace(string s);
            /*0x701b510*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
            /*0x701b7b0*/ void OnEndElement(string name);
            /*0x701b848*/ void OnChars(string ch);
            /*0x701b8c8*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
        }

        class SmallXmlParser
        {
            /*0x10*/ Mono.Xml.SmallXmlParser.IContentHandler handler;
            /*0x18*/ System.IO.TextReader reader;
            /*0x20*/ System.Collections.Stack elementNames;
            /*0x28*/ System.Collections.Stack xmlSpaces;
            /*0x30*/ string xmlSpace;
            /*0x38*/ System.Text.StringBuilder buffer;
            /*0x40*/ char[] nameBuffer;
            /*0x48*/ bool isWhitespace;
            /*0x50*/ Mono.Xml.SmallXmlParser.AttrListImpl attributes;
            /*0x58*/ int line;
            /*0x5c*/ int column;
            /*0x60*/ bool resetColumn;

            /*0x701b138*/ SmallXmlParser();
            /*0x701b978*/ System.Exception Error(string msg);
            /*0x701baa8*/ System.Exception UnexpectedEndError();
            /*0x701bb94*/ bool IsNameChar(char c, bool start);
            /*0x701bc70*/ bool IsWhitespace(int c);
            /*0x701bc98*/ void SkipWhitespaces();
            /*0x701bd4c*/ void HandleWhitespaces();
            /*0x701bca0*/ void SkipWhitespaces(bool expected);
            /*0x701be74*/ int Peek();
            /*0x701be0c*/ int Read();
            /*0x701be94*/ void Expect(int c);
            /*0x701bf50*/ string ReadUntil(char until, bool handleReferences);
            /*0x701c1f4*/ string ReadName();
            /*0x701b318*/ void Parse(System.IO.TextReader input, Mono.Xml.SmallXmlParser.IContentHandler handler);
            /*0x701cbdc*/ void Cleanup();
            /*0x701c3ac*/ void ReadContent();
            /*0x701caa4*/ void HandleBufferedContent();
            /*0x701d014*/ void ReadCharacters();
            /*0x701c02c*/ void ReadReference();
            /*0x701d09c*/ int ReadCharacterReference();
            /*0x701cea4*/ void ReadAttribute(Mono.Xml.SmallXmlParser.AttrListImpl a);
            /*0x701cd24*/ void ReadCDATASection();
            /*0x701ce1c*/ void ReadComment();

            interface IContentHandler
            {
                /*0x3816710*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x3816710*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
                /*0x3816810*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x3816710*/ void OnEndElement(string name);
                /*0x3816810*/ void OnProcessingInstruction(string name, string text);
                /*0x3816710*/ void OnChars(string text);
                /*0x3816710*/ void OnIgnorableWhitespace(string text);
            }

            interface IAttrList
            {
                /*0x3814574*/ int get_Length();
                /*0x3814964*/ string GetName(int i);
                /*0x3814964*/ string GetValue(int i);
                /*0x3814a3c*/ string GetValue(string name);
                /*0x38148bc*/ string[] get_Names();
                /*0x38148bc*/ string[] get_Values();
            }

            class AttrListImpl : Mono.Xml.SmallXmlParser.IAttrList
            {
                /*0x10*/ System.Collections.Generic.List<string> attrNames;
                /*0x18*/ System.Collections.Generic.List<string> attrValues;

                /*0x701b8cc*/ AttrListImpl();
                /*0x701d278*/ int get_Length();
                /*0x701d2c0*/ string GetName(int i);
                /*0x701d318*/ string GetValue(int i);
                /*0x701d370*/ string GetValue(string name);
                /*0x701d430*/ string[] get_Names();
                /*0x701d480*/ string[] get_Values();
                /*0x701cc88*/ void Clear();
                /*0x701d158*/ void Add(string name, string value);
            }
        }

        class SmallXmlParserException : System.SystemException
        {
            /*0x8c*/ int line;
            /*0x90*/ int column;

            /*0x701b9e8*/ SmallXmlParserException(string msg, int line, int column);
        }
    }

    namespace Interop
    {
        class MonoPInvokeCallbackAttribute : System.Attribute
        {
            /*0x701d4d0*/ MonoPInvokeCallbackAttribute(System.Type t);
        }
    }

    namespace Globalization
    {
        namespace Unicode
        {
            class CodePointIndexer
            {
                /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer.TableRange[] ranges;
                /*0x18*/ int TotalCount;
                /*0x1c*/ int defaultIndex;
                /*0x20*/ int defaultCP;

                /*0x701d4d8*/ CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP);
                /*0x701d65c*/ int ToIndex(int cp);

                struct TableRange
                {
                    /*0x10*/ int Start;
                    /*0x14*/ int End;
                    /*0x18*/ int Count;
                    /*0x1c*/ int IndexStart;
                    /*0x20*/ int IndexEnd;

                    /*0x701d644*/ TableRange(int start, int end, int indexStart);
                }
            }

            class TailoringInfo
            {
                /*0x10*/ int LCID;
                /*0x14*/ int TailoringIndex;
                /*0x18*/ int TailoringCount;
                /*0x1c*/ bool FrenchSort;

                /*0x701d6e0*/ TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort);
            }

            class Contraction
            {
                /*0x10*/ int Index;
                /*0x18*/ char[] Source;
                /*0x20*/ string Replacement;
                /*0x28*/ byte[] SortKey;

                /*0x701d724*/ Contraction(int index, char[] source, string replacement, byte[] sortkey);
            }

            class ContractionComparer : System.Collections.Generic.IComparer<Mono.Globalization.Unicode.Contraction>
            {
                static /*0x0*/ Mono.Globalization.Unicode.ContractionComparer Instance;

                static /*0x701d828*/ ContractionComparer();
                /*0x701d820*/ ContractionComparer();
                /*0x701d78c*/ int Compare(Mono.Globalization.Unicode.Contraction c1, Mono.Globalization.Unicode.Contraction c2);
            }

            class Level2Map
            {
                /*0x10*/ byte Source;
                /*0x11*/ byte Replace;

                /*0x701d890*/ Level2Map(byte source, byte replace);
            }

            class MSCompatUnicodeTable
            {
                static /*0x0*/ int MaxExpansionLength;
                static /*0x8*/ byte* ignorableFlags;
                static /*0x10*/ byte* categories;
                static /*0x18*/ byte* level1;
                static /*0x20*/ byte* level2;
                static /*0x28*/ byte* level3;
                static /*0x30*/ byte* cjkCHScategory;
                static /*0x38*/ byte* cjkCHTcategory;
                static /*0x40*/ byte* cjkJAcategory;
                static /*0x48*/ byte* cjkKOcategory;
                static /*0x50*/ byte* cjkCHSlv1;
                static /*0x58*/ byte* cjkCHTlv1;
                static /*0x60*/ byte* cjkJAlv1;
                static /*0x68*/ byte* cjkKOlv1;
                static /*0x70*/ byte* cjkKOlv2;
                static /*0x78*/ char[] tailoringArr;
                static /*0x80*/ Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos;
                static /*0x88*/ object forLock;
                static /*0x90*/ bool isReady;

                static /*0x701ec24*/ MSCompatUnicodeTable();
                static /*0x701d8c0*/ Mono.Globalization.Unicode.TailoringInfo GetTailoringInfo(int lcid);
                static /*0x701d9c4*/ void BuildTailoringTables(System.Globalization.CultureInfo culture, Mono.Globalization.Unicode.TailoringInfo t, ref Mono.Globalization.Unicode.Contraction[] contractions, ref Mono.Globalization.Unicode.Level2Map[] diacriticals);
                static /*0x701e134*/ void SetCJKReferences(string name, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x701e3b8*/ byte Category(int cp);
                static /*0x701e45c*/ byte Level1(int cp);
                static /*0x701e500*/ byte Level2(int cp);
                static /*0x701e5a4*/ byte Level3(int cp);
                static /*0x701e648*/ bool IsIgnorable(int cp, byte flag);
                static /*0x701e754*/ bool IsIgnorableNonSpacing(int cp);
                static /*0x701e7ac*/ int ToKanaTypeInsensitive(int i);
                static /*0x701e7c4*/ int ToWidthCompat(int i);
                static /*0x701e950*/ bool HasSpecialWeight(char c);
                static /*0x701e9d0*/ bool IsHalfWidthKana(char c);
                static /*0x701e9e4*/ bool IsHiragana(char c);
                static /*0x701e9fc*/ bool IsJapaneseSmallLetter(char c);
                static /*0x701eae4*/ bool get_IsReady();
                static /*0x701eb3c*/ nint GetResource(string name);
                static /*0x701ebf4*/ uint UInt32FromBytePtr(byte* raw, uint idx);
                static /*0x701f060*/ void FillCJK(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x701f1c4*/ void FillCJKCore(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer, ref byte* lv2Table);

                class <>c
                {
                    static /*0x0*/ Mono.Globalization.Unicode.MSCompatUnicodeTable.<> <>9;
                    static /*0x8*/ System.Comparison<Mono.Globalization.Unicode.Level2Map> <>9__17_0;

                    static /*0x701f624*/ <>c();
                    /*0x701f68c*/ <>c();
                    /*0x701f694*/ int <BuildTailoringTables>b__17_0(Mono.Globalization.Unicode.Level2Map a, Mono.Globalization.Unicode.Level2Map b);
                }
            }

            class MSCompatUnicodeTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Ignorable;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Category;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Level1;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Level2;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Level3;
                static /*0x28*/ Mono.Globalization.Unicode.CodePointIndexer CjkCHS;
                static /*0x30*/ Mono.Globalization.Unicode.CodePointIndexer Cjk;

                static /*0x701f6b8*/ MSCompatUnicodeTableUtil();
            }

            class NormalizationTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Prop;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Map;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Combining;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Composite;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Helper;

                static /*0x701fb28*/ NormalizationTableUtil();
                static /*0x701fe9c*/ int PropIdx(int cp);
                static /*0x701ff04*/ int MapIdx(int cp);
            }

            class SimpleCollator : System.Globalization.ISimpleCollator
            {
                static /*0x0*/ Mono.Globalization.Unicode.SimpleCollator invariant;
                /*0x10*/ System.Globalization.TextInfo textInfo;
                /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer cjkIndexer;
                /*0x20*/ Mono.Globalization.Unicode.Contraction[] contractions;
                /*0x28*/ Mono.Globalization.Unicode.Level2Map[] level2Maps;
                /*0x30*/ byte[] unsafeFlags;
                /*0x38*/ byte* cjkCatTable;
                /*0x40*/ byte* cjkLv1Table;
                /*0x48*/ byte* cjkLv2Table;
                /*0x50*/ Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer;
                /*0x58*/ int lcid;
                /*0x5c*/ bool frenchSort;

                static /*0x70255e8*/ SimpleCollator();
                static /*0x7020394*/ System.Globalization.CultureInfo GetNeutralCulture(System.Globalization.CultureInfo info);
                static /*0x7020660*/ bool IsHalfKana(int cp, System.Globalization.CompareOptions opt);
                static /*0x7020d40*/ byte ToDashTypeValue(Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                static /*0x7020f70*/ bool IsIgnorable(int i, System.Globalization.CompareOptions opt);
                /*0x701ff6c*/ SimpleCollator(System.Globalization.CultureInfo culture);
                /*0x70202b8*/ void SetCJKTable(System.Globalization.CultureInfo culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                /*0x7020404*/ byte Category(int cp);
                /*0x7020498*/ byte Level1(int cp);
                /*0x702052c*/ byte Level2(int cp, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext);
                /*0x70206d4*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end);
                /*0x7020794*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x70208bc*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end);
                /*0x702097c*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x7020b5c*/ int FilterOptions(int i, System.Globalization.CompareOptions opt);
                /*0x7020c40*/ Mono.Globalization.Unicode.SimpleCollator.ExtenderType GetExtenderType(int i);
                /*0x7020d60*/ int FilterExtender(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                /*0x7020fec*/ bool IsSafe(int i);
                /*0x7021048*/ System.Globalization.SortKey GetSortKey(string s, System.Globalization.CompareOptions options);
                /*0x7021068*/ System.Globalization.SortKey GetSortKey(string s, int start, int length, System.Globalization.CompareOptions options);
                /*0x702134c*/ void GetSortKey(string s, int start, int end, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x7021764*/ void FillSortKeyRaw(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x7021cc8*/ void FillSurrogateSortKeyRaw(int i, Mono.Globalization.Unicode.SortKeyBuffer buf);
                /*0x7021e14*/ int System.Globalization.ISimpleCollator.Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x7021e18*/ int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x70216e8*/ void ClearBuffer(byte* buffer, int size);
                /*0x7021ecc*/ int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, ref bool targetConsumed, ref bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x70233a8*/ int CompareFlagPair(bool b1, bool b2);
                /*0x70233c4*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x70233e4*/ bool IsPrefix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x7023494*/ bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x70234fc*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x702351c*/ bool IsSuffix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x7023738*/ int QuickIndexOf(string s, string target, int start, int length, ref bool testWasUnable);
                /*0x70238a0*/ int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x7023f38*/ int IndexOfOrdinal(string s, string target, int start, int length);
                /*0x7024010*/ int IndexOfOrdinal(string s, char target, int start, int length);
                /*0x7024080*/ int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x7023a90*/ int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x70235b0*/ int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x7024814*/ int LastIndexOfOrdinal(string s, string target, int start, int length);
                /*0x7024948*/ int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x70242e8*/ int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x702411c*/ bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x7024bc4*/ bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x7024f20*/ bool MatchesPrimitive(System.Globalization.CompareOptions opt, byte* source, int si, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4);
                /*0x70249ec*/ bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x7025148*/ bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);

                struct Context
                {
                    /*0x10*/ System.Globalization.CompareOptions Option;
                    /*0x18*/ byte* NeverMatchFlags;
                    /*0x20*/ byte* AlwaysMatchFlags;
                    /*0x28*/ byte* Buffer1;
                    /*0x30*/ byte* Buffer2;
                    /*0x38*/ int PrevCode;
                    /*0x40*/ byte* PrevSortKey;

                    /*0x7021748*/ Context(System.Globalization.CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1);
                }

                struct PreviousInfo
                {
                    /*0x10*/ int Code;
                    /*0x18*/ byte* SortKey;

                    /*0x7023398*/ PreviousInfo(bool dummy);
                }

                struct Escape
                {
                    /*0x10*/ string Source;
                    /*0x18*/ int Index;
                    /*0x1c*/ int Start;
                    /*0x20*/ int End;
                    /*0x24*/ int Optional;
                }

                enum ExtenderType
                {
                    None = 0,
                    Simple = 1,
                    Voiced = 2,
                    Conditional = 3,
                    Buggy = 4,
                }
            }

            class SortKeyBuffer
            {
                /*0x10*/ byte[] l1b;
                /*0x18*/ byte[] l2b;
                /*0x20*/ byte[] l3b;
                /*0x28*/ byte[] l4sb;
                /*0x30*/ byte[] l4tb;
                /*0x38*/ byte[] l4kb;
                /*0x40*/ byte[] l4wb;
                /*0x48*/ byte[] l5b;
                /*0x50*/ string source;
                /*0x58*/ int l1;
                /*0x5c*/ int l2;
                /*0x60*/ int l3;
                /*0x64*/ int l4s;
                /*0x68*/ int l4t;
                /*0x6c*/ int l4k;
                /*0x70*/ int l4w;
                /*0x74*/ int l5;
                /*0x78*/ int lcid;
                /*0x7c*/ System.Globalization.CompareOptions options;
                /*0x80*/ bool processLevel2;
                /*0x81*/ bool frenchSort;
                /*0x82*/ bool frenchSorted;

                /*0x7021130*/ SortKeyBuffer(int lcid);
                /*0x7025684*/ void Reset();
                /*0x7021138*/ void Initialize(System.Globalization.CompareOptions options, int lcid, string s, bool frenchSort);
                /*0x7021c34*/ void AppendCJKExtension(byte lv1msb, byte lv1lsb);
                /*0x7021d80*/ void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth);
                /*0x7021af0*/ void AppendNormal(byte category, byte lv1, byte lv2, byte lv3);
                /*0x7025778*/ void AppendLevel5(byte category, byte lv1);
                /*0x7025698*/ void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx);
                /*0x70216c4*/ System.Globalization.SortKey GetResultAndReset();
                /*0x7025ce8*/ int GetOptimizedLength(byte[] data, int len, byte defaultValue);
                /*0x7025810*/ System.Globalization.SortKey GetResult();
            }
        }
    }

    namespace Security
    {
        class ASN1
        {
            /*0x10*/ byte m_nTag;
            /*0x18*/ byte[] m_aValue;
            /*0x20*/ System.Collections.ArrayList elist;

            /*0x7025d48*/ ASN1(byte tag);
            /*0x7025d7c*/ ASN1(byte tag, byte[] data);
            /*0x7025db4*/ ASN1(byte[] data);
            /*0x7026060*/ int get_Count();
            /*0x702607c*/ byte[] get_Value();
            /*0x702610c*/ Mono.Security.ASN1 Add(Mono.Security.ASN1 asn1);
            /*0x70261a4*/ byte[] GetBytes();
            /*0x7025f34*/ void Decode(byte[] asn1, ref int anPos, int anLength);
            /*0x7026834*/ void DecodeTLV(byte[] asn1, ref int pos, ref byte tag, ref int length, ref byte[] content);
            /*0x7026964*/ string ToString();
        }

        class BitConverterLE
        {
            static /*0x7026bec*/ byte[] GetUIntBytes(byte* bytes);
            static /*0x7026c84*/ byte[] GetULongBytes(byte* bytes);
            static /*0x7026d5c*/ byte[] GetBytes(float value);
            static /*0x7026d74*/ byte[] GetBytes(double value);
            static /*0x7026d8c*/ void UIntFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x7026e10*/ void ULongFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x7026e64*/ float ToSingle(byte[] value, int startIndex);
            static /*0x7026e88*/ double ToDouble(byte[] value, int startIndex);
        }

        namespace Cryptography
        {
            class KeyBuilder
            {
                static /*0x0*/ System.Security.Cryptography.RandomNumberGenerator rng;

                static /*0x7026eac*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
                static /*0x7026f24*/ byte[] Key(int size);
                static /*0x7026f94*/ byte[] IV(int size);
            }

            class KeyPairPersistence
            {
                static /*0x0*/ bool _userPathExists;
                static /*0x8*/ string _userPath;
                static /*0x10*/ bool _machinePathExists;
                static /*0x18*/ string _machinePath;
                static /*0x20*/ object lockobj;
                /*0x10*/ System.Security.Cryptography.CspParameters _params;
                /*0x18*/ string _keyvalue;
                /*0x20*/ string _filename;
                /*0x28*/ string _container;

                static /*0x7028938*/ KeyPairPersistence();
                static /*0x7027964*/ string get_UserPath();
                static /*0x7027418*/ string get_MachinePath();
                static /*0x7028864*/ bool _CanSecure(char* root);
                static /*0x7028868*/ bool _ProtectUser(char* path);
                static /*0x702886c*/ bool _ProtectMachine(char* path);
                static /*0x7028870*/ bool _IsUserProtected(char* path);
                static /*0x7028874*/ bool _IsMachineProtected(char* path);
                static /*0x7028878*/ bool CanSecure(string path);
                static /*0x70286a0*/ bool ProtectUser(string path);
                static /*0x7028610*/ bool ProtectMachine(string path);
                static /*0x7028744*/ bool IsUserProtected(string path);
                static /*0x70287d4*/ bool IsMachineProtected(string path);
                /*0x7027004*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters);
                /*0x702700c*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters, string keyPair);
                /*0x702713c*/ string get_Filename();
                /*0x7027eb0*/ string get_KeyValue();
                /*0x7027eb8*/ void set_KeyValue(string value);
                /*0x7027edc*/ bool Load();
                /*0x70281c4*/ void Save();
                /*0x7028730*/ void Remove();
                /*0x7027ecc*/ bool get_CanChange();
                /*0x7028918*/ bool get_UseDefaultKeyContainer();
                /*0x70273f8*/ bool get_UseMachineKeyStore();
                /*0x70272e0*/ string get_ContainerName();
                /*0x70270a4*/ System.Security.Cryptography.CspParameters Copy(System.Security.Cryptography.CspParameters p);
                /*0x7028090*/ void FromXml(string xml);
                /*0x7028408*/ string ToXml();
            }

            class MD2 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70289cc*/ Mono.Security.Cryptography.MD2 Create();
                /*0x70289ac*/ MD2();
            }

            class MD2Managed : Mono.Security.Cryptography.MD2
            {
                static /*0x0*/ byte[] PI_SUBST;
                /*0x28*/ byte[] state;
                /*0x30*/ byte[] checksum;
                /*0x38*/ byte[] buffer;
                /*0x40*/ int count;
                /*0x48*/ byte[] x;

                static /*0x702901c*/ MD2Managed();
                /*0x7028a1c*/ MD2Managed();
                /*0x7028af0*/ byte[] Padding(int nLength);
                /*0x7028b8c*/ void Initialize();
                /*0x7028bec*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x7028f2c*/ byte[] HashFinal();
                /*0x7028cc8*/ void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index);
            }

            class MD4 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70290dc*/ Mono.Security.Cryptography.MD4 Create();
                /*0x70290bc*/ MD4();
            }

            class MD4Managed : Mono.Security.Cryptography.MD4
            {
                /*0x28*/ uint[] state;
                /*0x30*/ byte[] buffer;
                /*0x38*/ uint[] count;
                /*0x40*/ uint[] x;
                /*0x48*/ byte[] digest;

                /*0x702912c*/ MD4Managed();
                /*0x7029238*/ void Initialize();
                /*0x70292ec*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x7029a88*/ byte[] HashFinal();
                /*0x7029c7c*/ byte[] Padding(int nLength);
                /*0x7029cf4*/ uint F(uint x, uint y, uint z);
                /*0x7029d04*/ uint G(uint x, uint y, uint z);
                /*0x7029d18*/ uint H(uint x, uint y, uint z);
                /*0x7029d24*/ uint ROL(uint x, byte n);
                /*0x7029d30*/ void FF(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x7029d58*/ void GG(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x7029d90*/ void HH(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x7029b84*/ void Encode(byte[] output, uint[] input);
                /*0x7029dc0*/ void Decode(uint[] output, byte[] input, int index);
                /*0x7029410*/ void MD4Transform(uint[] state, byte[] block, int index);
            }

            class PKCS1
            {
                static /*0x0*/ byte[] emptySHA1;
                static /*0x8*/ byte[] emptySHA256;
                static /*0x10*/ byte[] emptySHA384;
                static /*0x18*/ byte[] emptySHA512;

                static /*0x702ac00*/ PKCS1();
                static /*0x7029e88*/ bool Compare(byte[] array1, byte[] array2);
                static /*0x7029f14*/ byte[] I2OSP(byte[] x, int size);
                static /*0x7029fa0*/ byte[] OS2IP(byte[] x);
                static /*0x702a060*/ byte[] RSAVP1(System.Security.Cryptography.RSA rsa, byte[] s);
                static /*0x702a07c*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, byte[] signature);
                static /*0x702a2d4*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, string hashName, byte[] hashValue, byte[] signature);
                static /*0x702a0fc*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding);
                static /*0x702a8a0*/ byte[] Encode_v15(System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, int emLength);
                static /*0x702a4ac*/ System.Security.Cryptography.HashAlgorithm CreateFromName(string name);
            }

            class RSAManaged : System.Security.Cryptography.RSA
            {
                /*0x20*/ bool isCRTpossible;
                /*0x21*/ bool keyBlinding;
                /*0x22*/ bool keypairGenerated;
                /*0x23*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger d;
                /*0x30*/ Mono.Math.BigInteger p;
                /*0x38*/ Mono.Math.BigInteger q;
                /*0x40*/ Mono.Math.BigInteger dp;
                /*0x48*/ Mono.Math.BigInteger dq;
                /*0x50*/ Mono.Math.BigInteger qInv;
                /*0x58*/ Mono.Math.BigInteger n;
                /*0x60*/ Mono.Math.BigInteger e;
                /*0x68*/ Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x702aed4*/ RSAManaged(int keySize);
                /*0x702afbc*/ void Finalize();
                /*0x702b05c*/ void GenerateKeyPair();
                /*0x702b950*/ int get_KeySize();
                /*0x702b9ec*/ bool get_PublicOnly();
                /*0x702bb3c*/ byte[] EncryptValue(byte[] rgb);
                /*0x702bff4*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x702c4b4*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x702c9fc*/ void Dispose(bool disposing);
                /*0x702cc80*/ void add_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x702cd1c*/ void remove_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x702cdb8*/ string ToXmlString(bool includePrivateParameters);
                /*0x702bef4*/ byte[] GetPaddedValue(Mono.Math.BigInteger value, int length);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x702d440*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x702d54c*/ void Invoke(object sender, System.EventArgs e);
                }
            }

            class SymmetricTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x10*/ System.Security.Cryptography.SymmetricAlgorithm algo;
                /*0x18*/ bool encrypt;
                /*0x1c*/ int BlockSizeByte;
                /*0x20*/ byte[] temp;
                /*0x28*/ byte[] temp2;
                /*0x30*/ byte[] workBuff;
                /*0x38*/ byte[] workout;
                /*0x40*/ System.Security.Cryptography.PaddingMode padmode;
                /*0x44*/ int FeedBackByte;
                /*0x48*/ bool m_disposed;
                /*0x49*/ bool lastBlock;
                /*0x50*/ System.Security.Cryptography.RandomNumberGenerator _rng;

                /*0x702d560*/ SymmetricTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV);
                /*0x702d858*/ void Finalize();
                /*0x702d8f8*/ void System.IDisposable.Dispose();
                /*0x702d964*/ void Dispose(bool disposing);
                /*0x702d9e0*/ bool get_CanTransformMultipleBlocks();
                /*0x702d9e8*/ int get_InputBlockSize();
                /*0x702d9f0*/ int get_OutputBlockSize();
                /*0x702d9f8*/ void Transform(byte[] input, byte[] output);
                /*0x3816810*/ void ECB(byte[] input, byte[] output);
                /*0x702dc04*/ void CBC(byte[] input, byte[] output);
                /*0x702dd68*/ void CFB(byte[] input, byte[] output);
                /*0x702df30*/ void OFB(byte[] input, byte[] output);
                /*0x702df7c*/ void CTS(byte[] input, byte[] output);
                /*0x702dfc8*/ void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x702e10c*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x702e314*/ bool get_KeepLastBlock();
                /*0x702e338*/ int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x702e4f0*/ void Random(byte[] buffer, int start, int length);
                /*0x702e5ac*/ void ThrowBadPaddingException(System.Security.Cryptography.PaddingMode padding, int length, int position);
                /*0x702e788*/ byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x702ea1c*/ byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x702ecb4*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class DSAManaged : System.Security.Cryptography.DSA
            {
                /*0x20*/ bool keypairGenerated;
                /*0x21*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger p;
                /*0x30*/ Mono.Math.BigInteger q;
                /*0x38*/ Mono.Math.BigInteger g;
                /*0x40*/ Mono.Math.BigInteger x;
                /*0x48*/ Mono.Math.BigInteger y;
                /*0x50*/ Mono.Math.BigInteger j;
                /*0x58*/ Mono.Math.BigInteger seed;
                /*0x60*/ int counter;
                /*0x64*/ bool j_missing;
                /*0x68*/ System.Security.Cryptography.RandomNumberGenerator rng;
                /*0x70*/ Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x702ed64*/ DSAManaged(int dwKeySize);
                /*0x702ee34*/ void Finalize();
                /*0x702eed4*/ void Generate();
                /*0x702f4a8*/ void GenerateKeyPair();
                /*0x702f6d8*/ void add(byte[] a, byte[] b, int value);
                /*0x702ef20*/ void GenerateParams(int keyLength);
                /*0x702f774*/ System.Security.Cryptography.RandomNumberGenerator get_Random();
                /*0x702fab8*/ int get_KeySize();
                /*0x702fae4*/ bool get_PublicOnly();
                /*0x702fb58*/ byte[] NormalizeArray(byte[] array);
                /*0x702fbfc*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x702ff1c*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x7030228*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x70306b4*/ void Dispose(bool disposing);
                /*0x70308f4*/ void add_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);
                /*0x7030990*/ void remove_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x7030a2c*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x7030b38*/ void Invoke(object sender, System.EventArgs e);
                }
            }
        }
    }

    namespace Math
    {
        class BigInteger
        {
            static /*0x0*/ uint[] smallPrimes;
            static /*0x8*/ System.Security.Cryptography.RandomNumberGenerator rng;
            /*0x10*/ uint length;
            /*0x18*/ uint[] data;

            static /*0x7032ee8*/ BigInteger();
            static /*0x702b370*/ Mono.Math.BigInteger op_Implicit(uint value);
            static /*0x702b710*/ Mono.Math.BigInteger op_Implicit(int value);
            static /*0x702b7b4*/ Mono.Math.BigInteger op_Subtraction(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702b434*/ uint op_Modulus(Mono.Math.BigInteger bi, uint ui);
            static /*0x702b924*/ Mono.Math.BigInteger op_Modulus(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702fa78*/ Mono.Math.BigInteger op_Division(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702b4e8*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702f94c*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi, int i);
            static /*0x70318b0*/ Mono.Math.BigInteger op_LeftShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x7031a98*/ Mono.Math.BigInteger op_RightShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x7031c14*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
            static /*0x7031cc0*/ Mono.Math.BigInteger GenerateRandom(int bits, System.Security.Cryptography.RandomNumberGenerator rng);
            static /*0x702f59c*/ Mono.Math.BigInteger GenerateRandom(int bits);
            static /*0x702f654*/ bool op_Equality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x702feb0*/ bool op_Inequality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x702ba8c*/ bool op_Equality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702b438*/ bool op_Inequality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7032114*/ bool op_GreaterThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702b6fc*/ bool op_LessThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702f6c0*/ bool op_GreaterThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702faa0*/ bool op_LessThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x702b3c8*/ Mono.Math.BigInteger GeneratePseudoPrime(int bits);
            /*0x7030b4c*/ BigInteger(Mono.Math.BigInteger.Sign sign, uint len);
            /*0x7030bcc*/ BigInteger(Mono.Math.BigInteger bi);
            /*0x7030cb4*/ BigInteger(Mono.Math.BigInteger bi, uint len);
            /*0x702bc44*/ BigInteger(byte[] inData);
            /*0x7030df4*/ BigInteger(uint ui);
            /*0x7031e20*/ void Randomize(System.Security.Cryptography.RandomNumberGenerator rng);
            /*0x702f5f8*/ void Randomize();
            /*0x702b690*/ int BitCount();
            /*0x702fa3c*/ bool TestBit(uint bitNum);
            /*0x7031fa0*/ bool TestBit(int bitNum);
            /*0x7032034*/ void SetBit(uint bitNum);
            /*0x703203c*/ void SetBit(uint bitNum, bool value);
            /*0x7032098*/ int LowestSetBit();
            /*0x702c380*/ byte[] GetBytes();
            /*0x703212c*/ string ToString(uint radix);
            /*0x7032184*/ string ToString(uint radix, string characterSet);
            /*0x7030d9c*/ void Normalize();
            /*0x702bfa4*/ void Clear();
            /*0x7032468*/ int GetHashCode();
            /*0x70324c0*/ string ToString();
            /*0x70324c8*/ bool Equals(object o);
            /*0x702b920*/ Mono.Math.BigInteger ModInverse(Mono.Math.BigInteger modulus);
            /*0x702be7c*/ Mono.Math.BigInteger ModPow(Mono.Math.BigInteger exp, Mono.Math.BigInteger n);
            /*0x702f7a4*/ bool IsProbablePrime();
            /*0x7032e60*/ void Incr2();

            enum Sign
            {
                Negative = -1,
                Zero = 0,
                Positive = 1,
            }

            class ModulusRing
            {
                /*0x10*/ Mono.Math.BigInteger mod;
                /*0x18*/ Mono.Math.BigInteger constant;

                /*0x7032c08*/ ModulusRing(Mono.Math.BigInteger modulus);
                /*0x7032f88*/ void BarrettReduction(Mono.Math.BigInteger x);
                /*0x70335dc*/ Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x7033758*/ Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x7032d08*/ Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k);
                /*0x703390c*/ Mono.Math.BigInteger Pow(uint b, Mono.Math.BigInteger exp);
            }

            class Kernel
            {
                static /*0x7030fc8*/ Mono.Math.BigInteger Subtract(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x703331c*/ void MinusEq(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x703344c*/ void PlusEq(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x7030e84*/ Mono.Math.BigInteger.Sign Compare(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x70323b8*/ uint SingleByteDivideInPlace(Mono.Math.BigInteger n, uint d);
                static /*0x703118c*/ uint DwordMod(Mono.Math.BigInteger n, uint d);
                static /*0x703397c*/ Mono.Math.BigInteger[] DwordDivMod(Mono.Math.BigInteger n, uint d);
                static /*0x70311f0*/ Mono.Math.BigInteger[] multiByteDivide(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x70318b4*/ Mono.Math.BigInteger LeftShift(Mono.Math.BigInteger bi, int n);
                static /*0x7031a9c*/ Mono.Math.BigInteger RightShift(Mono.Math.BigInteger bi, int n);
                static /*0x70317c0*/ Mono.Math.BigInteger MultiplyByDword(Mono.Math.BigInteger n, uint f);
                static /*0x70316c4*/ void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset);
                static /*0x70331e0*/ void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod);
                static /*0x7033b1c*/ uint modInverse(Mono.Math.BigInteger bi, uint modulus);
                static /*0x70325f0*/ Mono.Math.BigInteger modInverse(Mono.Math.BigInteger bi, Mono.Math.BigInteger modulus);
            }
        }

        namespace Prime
        {
            enum ConfidenceFactor
            {
                ExtraLow = 0,
                Low = 1,
                Medium = 2,
                High = 3,
                ExtraHigh = 4,
                Provable = 5,
            }

            class PrimalityTest : System.MulticastDelegate
            {
                /*0x7033bdc*/ PrimalityTest(object object, nint method);
                /*0x7033ce8*/ bool Invoke(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            class PrimalityTests
            {
                static /*0x7033cfc*/ int GetSPPRounds(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x7032e0c*/ bool Test(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x7034060*/ bool RabinMillerTest(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x7033e88*/ bool SmallPrimeSppTest(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            namespace Generator
            {
                class PrimeGeneratorBase
                {
                    /*0x7034374*/ PrimeGeneratorBase();
                    /*0x70342f8*/ Mono.Math.Prime.ConfidenceFactor get_Confidence();
                    /*0x7034300*/ Mono.Math.Prime.PrimalityTest get_PrimalityTest();
                    /*0x703436c*/ int get_TrialDivisionBounds();
                    /*0x3814964*/ Mono.Math.BigInteger GenerateNewPrime(int bits);
                }

                class SequentialSearchPrimeGeneratorBase : Mono.Math.Prime.Generator.PrimeGeneratorBase
                {
                    /*0x7032e58*/ SequentialSearchPrimeGeneratorBase();
                    /*0x703437c*/ Mono.Math.BigInteger GenerateSearchBase(int bits, object context);
                    /*0x70343f0*/ Mono.Math.BigInteger GenerateNewPrime(int bits);
                    /*0x7034400*/ Mono.Math.BigInteger GenerateNewPrime(int bits, object context);
                    /*0x70346e4*/ bool IsPrimeAcceptable(Mono.Math.BigInteger bi, object context);
                }
            }
        }
    }
}

namespace Microsoft
{
    namespace Win32
    {
        class Win32Native
        {
            static /*0x70346ec*/ string GetMessage(int hr);
            static /*0x7034748*/ int MakeHRFromErrorCode(int errorCode);
        }

        namespace SafeHandles
        {
            class SafeHandleCache<T>
            {
                static /*0x0*/ T s_invalidHandle;

                static /*0x3823ae0*/ bool IsCachedInvalidHandle(System.Runtime.InteropServices.SafeHandle handle);
            }

            class SafePasswordHandle : System.Runtime.InteropServices.SafeHandle
            {
                /*0x7034808*/ SafePasswordHandle(string password);
                /*0x7034754*/ nint CreateHandle(string password);
                /*0x70347ac*/ void FreeHandle();
                /*0x7034844*/ bool ReleaseHandle();
                /*0x703487c*/ void Dispose(bool disposing);
                /*0x70348ec*/ bool get_IsInvalid();
                /*0x7034910*/ string Mono_DangerousGetString();
            }

            class SafeFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x703496c*/ SafeFileHandle(nint preexistingHandle, bool ownsHandle);
                /*0x70349ac*/ bool ReleaseHandle();
            }

            class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x7034a28*/ SafeWaitHandle(nint existingHandle, bool ownsHandle);
                /*0x7034a58*/ bool ReleaseHandle();
            }

            class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0x703499c*/ SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
                /*0x7034a74*/ bool get_IsInvalid();
            }

            class SafeHandleMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0x7034ac8*/ SafeHandleMinusOneIsInvalid(bool ownsHandle);
                /*0x7034b0c*/ bool get_IsInvalid();
            }
        }
    }
}

namespace Internal
{
    namespace Threading
    {
        namespace Tasks
        {
            namespace Tracing
            {
                class TaskTrace
                {
                    static /*0x0*/ Internal.Runtime.Augments.TaskTraceCallbacks s_callbacks;

                    static /*0x7034b44*/ bool get_Enabled();
                    static /*0x7034ba4*/ void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x7034c28*/ void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x7034cac*/ void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x7034d30*/ void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
                }
            }
        }
    }

    namespace Runtime
    {
        namespace Augments
        {
            enum AsyncStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            class TaskTraceCallbacks
            {
                /*0x3813ffc*/ bool get_Enabled();
                void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
            }

            class RuntimeAugments
            {
                static /*0x0*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks s_reflectionExecutionDomainCallbacks;

                static /*0x7034e48*/ RuntimeAugments();
                static /*0x7034dd0*/ void ReportUnhandledException(System.Exception exception);
                static /*0x7034df0*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks get_Callbacks();
            }

            class ReflectionExecutionDomainCallbacks
            {
                /*0x7034ec4*/ ReflectionExecutionDomainCallbacks();
                /*0x7034ecc*/ System.Exception CreateMissingMetadataException(System.Type attributeType);
            }

            class RuntimeThread
            {
                static /*0x0*/ int OptimalMaxSpinWaitsPerSpinIteration;
                /*0x10*/ System.Threading.Thread thread;

                static /*0x7035060*/ RuntimeThread();
                static /*0x7034f50*/ Internal.Runtime.Augments.RuntimeThread Create(System.Threading.ParameterizedThreadStart start, int maxStackSize);
                static /*0x7035030*/ void Sleep(int millisecondsTimeout);
                static /*0x7035038*/ bool Yield();
                static /*0x7035040*/ bool SpinWait(int iterations);
                static /*0x7035058*/ int GetCurrentProcessorId();
                /*0x7034f20*/ RuntimeThread(System.Threading.Thread t);
                /*0x7034ff4*/ void set_IsBackground(bool value);
                /*0x7035014*/ void Start(object state);
            }
        }
    }

    namespace Cryptography
    {
        class Helpers
        {
            static /*0x70350ac*/ byte[] CloneByteArray(byte[] src);
            static /*0x7035124*/ char[] ToHexArrayUpper(byte[] bytes);
            static /*0x703522c*/ string ToHexStringUpper(byte[] bytes);
            static /*0x7035210*/ char NibbleToHex(byte b);
        }
    }
}

namespace System
{
    class String : System.IComparable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<char>, System.IComparable<string>, System.IEquatable<string>, System.IConvertible, System.ICloneable
    {
        static int StackallocIntBufferSizeLimit = 128;
        static int PROBABILISTICMAP_BLOCK_INDEX_MASK = 7;
        static int PROBABILISTICMAP_BLOCK_INDEX_SHIFT = 3;
        static int PROBABILISTICMAP_SIZE = 8;
        static /*0x0*/ string Empty;
        /*0x10*/ int _stringLength;
        /*0x14*/ char _firstChar;

        static /*0x7035244*/ bool EqualsHelper(string strA, string strB);
        static /*0x7035278*/ int CompareOrdinalHelper(string strA, int indexA, int countA, string strB, int indexB, int countB);
        static /*0x70352b0*/ int CompareOrdinalHelper(string strA, string strB);
        static /*0x703546c*/ int Compare(string strA, string strB, bool ignoreCase);
        static /*0x7035474*/ int Compare(string strA, string strB, System.StringComparison comparisonType);
        static /*0x7035740*/ int Compare(string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        static /*0x70357d8*/ int Compare(string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);
        static /*0x70357e8*/ int Compare(string strA, int indexA, string strB, int indexB, int length);
        static /*0x70357f0*/ int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);
        static /*0x7035930*/ int Compare(string strA, int indexA, string strB, int indexB, int length, System.StringComparison comparisonType);
        static /*0x7035d50*/ int CompareOrdinal(string strA, string strB);
        static /*0x7035d94*/ int CompareOrdinal(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
        static /*0x7035e34*/ int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length);
        static /*0x703670c*/ bool Equals(string a, string b);
        static /*0x7036758*/ bool Equals(string a, string b, System.StringComparison comparisonType);
        static /*0x70369f0*/ bool op_Equality(string a, string b);
        static /*0x70369f4*/ bool op_Inequality(string a, string b);
        static /*0x7035724*/ void CheckStringComparison(System.StringComparison comparisonType);
        static /*0x7036dac*/ string Ctor(char[] value);
        static /*0x7036e30*/ string Ctor(char[] value, int startIndex, int length);
        static /*0x7036fc0*/ string Ctor(char* ptr, int startIndex, int length);
        static /*0x7037114*/ string Ctor(sbyte* value, int startIndex, int length);
        static /*0x7037254*/ string CreateStringForSByteConstructor(byte* pb, int numBytes);
        static /*0x70372b4*/ string Ctor(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        static /*0x703746c*/ string Ctor(char c, int count);
        static /*0x7037564*/ string Ctor(System.ReadOnlySpan<char> value);
        static /*0x3910ae8*/ string Create<TState>(int length, TState state, System.Buffers.SpanAction<char, TState> action);
        static /*0x7037618*/ System.ReadOnlySpan<char> op_Implicit(string value);
        static /*0x703766c*/ string Copy(string str);
        static /*0x7037960*/ bool IsNullOrEmpty(string value);
        static /*0x703797c*/ bool IsNullOrWhiteSpace(string value);
        static /*0x7037a0c*/ string CreateStringFromEncoding(byte* bytes, int byteLength, System.Text.Encoding encoding);
        static /*0x7037ab4*/ string CreateFromChar(char c);
        static /*0x7036e20*/ void wstrcpy(char* dmem, char* smem, int charCount);
        static /*0x7037b98*/ int wcslen(char* ptr);
        static /*0x7038330*/ void FillStringChecked(string dest, int destPos, string src);
        static /*0x70383a4*/ string Concat(object arg0, object arg1);
        static /*0x703842c*/ string Concat(object arg0, object arg1, object arg2);
        static /*0x70385b0*/ string Concat(System.Collections.Generic.IEnumerable<string> values);
        static /*0x702db54*/ string Concat(string str0, string str1);
        static /*0x70384f0*/ string Concat(string str0, string str1, string str2);
        static /*0x7038a58*/ string Concat(string str0, string str1, string str2, string str3);
        static /*0x7038b60*/ string Concat(string[] values);
        static /*0x702e744*/ string Format(string format, object arg0);
        static /*0x7038e60*/ string Format(string format, object arg0, object arg1);
        static /*0x7038ea4*/ string Format(string format, object arg0, object arg1, object arg2);
        static /*0x7038ee8*/ string Format(string format, object[] args);
        static /*0x7038f90*/ string Format(System.IFormatProvider provider, string format, object arg0);
        static /*0x7038fe4*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1);
        static /*0x703903c*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
        static /*0x7039098*/ string Format(System.IFormatProvider provider, string format, object[] args);
        static /*0x7038d5c*/ string FormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
        static /*0x7039284*/ string Join(string separator, string[] value);
        static /*0x7039324*/ string Join(string separator, object[] values);
        static /*0x38395d4*/ string Join<T>(string separator, System.Collections.Generic.IEnumerable<T> values);
        static /*0x70394e4*/ string Join(string separator, System.Collections.Generic.IEnumerable<string> values);
        static /*0x70392e4*/ string Join(string separator, string[] value, int startIndex, int count);
        static /*0x703935c*/ string JoinCore(char* separator, int separatorLength, object[] values);
        static /*0x3910ae8*/ string JoinCore<T>(char* separator, int separatorLength, System.Collections.Generic.IEnumerable<T> values);
        static /*0x70399a4*/ string JoinCore(char* separator, int separatorLength, string[] value, int startIndex, int count);
        static /*0x703c348*/ void InitializeProbabilisticMap(uint* charMap, System.ReadOnlySpan<char> anyOf);
        static /*0x703d0ac*/ bool ArrayContains(char searchChar, char[] anyOf);
        static /*0x703c428*/ bool IsCharBitSet(uint* charMap, byte value);
        static /*0x703d108*/ void SetCharBit(uint* charMap, byte value);
        static /*0x7036e1c*/ string FastAllocateString(int length);
        static /*0x703e16c*/ string InternalIntern(string str);
        static /*0x703e170*/ void memset(byte* dest, int val, int len);
        static /*0x703e218*/ void memcpy(byte* dest, byte* src, int size);
        static /*0x703e220*/ void bzero(byte* dest, int len);
        static /*0x703e22c*/ void bzero_aligned_1(byte* dest, int len);
        static /*0x703e234*/ void bzero_aligned_2(byte* dest, int len);
        static /*0x703e23c*/ void bzero_aligned_4(byte* dest, int len);
        static /*0x703e244*/ void bzero_aligned_8(byte* dest, int len);
        static /*0x703e24c*/ void memcpy_aligned_1(byte* dest, byte* src, int size);
        static /*0x703e258*/ void memcpy_aligned_2(byte* dest, byte* src, int size);
        static /*0x703e264*/ void memcpy_aligned_4(byte* dest, byte* src, int size);
        static /*0x703e270*/ void memcpy_aligned_8(byte* dest, byte* src, int size);
        static /*0x703e2c8*/ string Intern(string str);
        /*0x7036da8*/ String(char[] value);
        /*0x7036e2c*/ String(char[] value, int startIndex, int length);
        /*0x7036fbc*/ String(char* value, int startIndex, int length);
        /*0x7037110*/ String(sbyte* value, int startIndex, int length);
        /*0x70372b0*/ String(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x7037468*/ String(char c, int count);
        /*0x7037560*/ String(System.ReadOnlySpan<char> value);
        /*0x703602c*/ int CompareTo(object value);
        /*0x70360ac*/ int CompareTo(string strB);
        /*0x70360b4*/ bool EndsWith(string value);
        /*0x70360bc*/ bool EndsWith(string value, System.StringComparison comparisonType);
        /*0x7036374*/ bool EndsWith(char value);
        /*0x70363c4*/ bool Equals(object obj);
        /*0x7036434*/ bool Equals(string value);
        /*0x7036474*/ bool Equals(string value, System.StringComparison comparisonType);
        /*0x7036a0c*/ int GetHashCode();
        /*0x7036a10*/ int GetLegacyNonRandomizedHashCode();
        /*0x7036a60*/ bool StartsWith(string value);
        /*0x7036ab8*/ bool StartsWith(string value, System.StringComparison comparisonType);
        /*0x7036d88*/ bool StartsWith(char value);
        /*0x7037668*/ object Clone();
        /*0x7037700*/ void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);
        /*0x7037874*/ char[] ToCharArray();
        /*0x7035270*/ ref char GetRawStringData();
        /*0x7037ad8*/ string ToString();
        /*0x7037adc*/ string ToString(System.IFormatProvider provider);
        /*0x7037ae0*/ System.Collections.Generic.IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator();
        /*0x7037b3c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0x7037ca0*/ System.TypeCode GetTypeCode();
        /*0x7037ca8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x7037d10*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x7037d78*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x7037de0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7037e48*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7037eb0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7037f18*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x7037f80*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7037fe8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x7038050*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x70380b8*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x7038120*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x7038188*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x70381f0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x7038258*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x70382c8*/ string Normalize(System.Text.NormalizationForm normalizationForm);
        /*0x7039148*/ string Insert(int startIndex, string value);
        /*0x7039d34*/ string PadLeft(int totalWidth, char paddingChar);
        /*0x7039e54*/ string PadRight(int totalWidth, char paddingChar);
        /*0x7039f7c*/ string Remove(int startIndex, int count);
        /*0x703a0f8*/ string Remove(int startIndex);
        /*0x703a300*/ string Replace(char oldChar, char newChar);
        /*0x703a3d8*/ string Replace(string oldValue, string newValue);
        /*0x703a6e0*/ string ReplaceHelper(int oldValueLength, string newValue, System.ReadOnlySpan<int> indices);
        /*0x703aa20*/ string[] Split(char separator, System.StringSplitOptions options);
        /*0x703adac*/ string[] Split(char separator, int count, System.StringSplitOptions options);
        /*0x703ae10*/ string[] Split(char[] separator);
        /*0x703ae84*/ string[] Split(char[] separator, System.StringSplitOptions options);
        /*0x703aa80*/ string[] SplitInternal(System.ReadOnlySpan<char> separators, int count, System.StringSplitOptions options);
        /*0x703b874*/ string[] Split(string separator, System.StringSplitOptions options);
        /*0x703bc9c*/ string[] Split(string[] separator, System.StringSplitOptions options);
        /*0x703b8ac*/ string[] SplitInternal(string separator, string[] separators, int count, System.StringSplitOptions options);
        /*0x703bcb0*/ string[] SplitInternal(string separator, int count, System.StringSplitOptions options);
        /*0x703b3c4*/ string[] SplitKeepEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0x703b5c0*/ string[] SplitOmitEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0x703aefc*/ void MakeSeparatorList(System.ReadOnlySpan<char> separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0x703c144*/ void MakeSeparatorList(string separator, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0x703be6c*/ void MakeSeparatorList(string[] separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder, ref System.Collections.Generic.ValueListBuilder<int> lengthListBuilder);
        /*0x703c33c*/ string Substring(int startIndex);
        /*0x703a1b0*/ string Substring(int startIndex, int length);
        /*0x703c444*/ string InternalSubString(int startIndex, int length);
        /*0x703c49c*/ string ToLower();
        /*0x703c518*/ string ToLower(System.Globalization.CultureInfo culture);
        /*0x703c59c*/ string ToLowerInvariant();
        /*0x703c618*/ string ToUpper();
        /*0x703c694*/ string ToUpper(System.Globalization.CultureInfo culture);
        /*0x703c718*/ string ToUpperInvariant();
        /*0x703c794*/ string Trim();
        /*0x703c8b4*/ string Trim(char trimChar);
        /*0x703ca38*/ string Trim(char[] trimChars);
        /*0x703ca6c*/ string TrimStart();
        /*0x703ca74*/ string TrimStart(char trimChar);
        /*0x703ca94*/ string TrimStart(char[] trimChars);
        /*0x703cac8*/ string TrimEnd();
        /*0x703cad0*/ string TrimEnd(char trimChar);
        /*0x703caf0*/ string TrimEnd(char[] trimChars);
        /*0x703c79c*/ string TrimWhiteSpaceHelper(System.String.TrimType trimType);
        /*0x703c8d4*/ string TrimHelper(char* trimChars, int trimCharsLength, System.String.TrimType trimType);
        /*0x703cb24*/ string CreateTrimmedString(int start, int end);
        /*0x703cb58*/ bool Contains(string value);
        /*0x703cb8c*/ bool Contains(string value, System.StringComparison comparisonType);
        /*0x703cbb0*/ bool Contains(char value);
        /*0x703cbd4*/ int IndexOf(char value);
        /*0x703cbe4*/ int IndexOf(char value, int startIndex);
        /*0x703cbf0*/ int IndexOf(char value, int startIndex, int count);
        /*0x703ccc8*/ int IndexOfAny(char[] anyOf);
        /*0x703ce90*/ int IndexOfAny(char[] anyOf, int startIndex);
        /*0x703ccd4*/ int IndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x703ce9c*/ int IndexOfAny(char value1, char value2, int startIndex, int count);
        /*0x703cf24*/ int IndexOfAny(char value1, char value2, char value3, int startIndex, int count);
        /*0x703cf7c*/ int IndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0x703d12c*/ int IndexOf(string value);
        /*0x703d13c*/ int IndexOf(string value, int startIndex);
        /*0x703cb7c*/ int IndexOf(string value, System.StringComparison comparisonType);
        /*0x703d14c*/ int IndexOf(string value, int startIndex, System.StringComparison comparisonType);
        /*0x703d15c*/ int IndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x703d4ac*/ int LastIndexOf(char value);
        /*0x703d4bc*/ int LastIndexOf(char value, int startIndex);
        /*0x703d4c4*/ int LastIndexOf(char value, int startIndex, int count);
        /*0x703d5a8*/ int LastIndexOfAny(char[] anyOf);
        /*0x703d6e0*/ int LastIndexOfAny(char[] anyOf, int startIndex);
        /*0x703d5b4*/ int LastIndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x703d6e8*/ int LastIndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0x703d818*/ int LastIndexOf(string value);
        /*0x703dbd0*/ int LastIndexOf(string value, System.StringComparison comparisonType);
        /*0x703d828*/ int LastIndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x703dbe0*/ int get_Length();
        /*0x703dbe8*/ int IndexOfUnchecked(string value, int startIndex, int count);
        /*0x703dce8*/ int IndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0x703deb4*/ int LastIndexOfUnchecked(string value, int startIndex, int count);
        /*0x703df84*/ int LastIndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0x703e114*/ bool StartsWithOrdinalUnchecked(string value);
        /*0x7037458*/ string CreateString(sbyte* value, int startIndex, int length);
        /*0x703e27c*/ string CreateString(char* value, int startIndex, int length);
        /*0x703e28c*/ string CreateString(char[] val, int startIndex, int length);
        /*0x703523c*/ string CreateString(char[] val);
        /*0x703e29c*/ string CreateString(char c, int count);
        /*0x703e2a8*/ string CreateString(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x703e2bc*/ string CreateString(System.ReadOnlySpan<char> value);
        /*0x703242c*/ char get_Chars(int index);

        enum TrimType
        {
            Head = 0,
            Tail = 1,
            Both = 2,
        }

        struct ProbabilisticMap
        {
        }
    }

    class TimeZoneInfo : System.IEquatable<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
    {
        static /*0x0*/ System.TimeZoneInfo s_utcTimeZone;
        static /*0x8*/ System.TimeZoneInfo.CachedData s_cachedData;
        static /*0x10*/ System.DateTime s_maxDateOnly;
        static /*0x18*/ System.DateTime s_minDateOnly;
        static /*0x20*/ System.TimeSpan MaxOffset;
        static /*0x28*/ System.TimeSpan MinOffset;
        /*0x10*/ string _id;
        /*0x18*/ string _displayName;
        /*0x20*/ string _standardDisplayName;
        /*0x28*/ string _daylightDisplayName;
        /*0x30*/ System.TimeSpan _baseUtcOffset;
        /*0x38*/ bool _supportsDaylightSavingTime;
        /*0x40*/ System.TimeZoneInfo.AdjustmentRule[] _adjustmentRules;

        static /*0x711e7c4*/ TimeZoneInfo();
        static /*0x7114dc8*/ System.TimeZoneInfo GetLocalTimeZone(System.TimeZoneInfo.CachedData cachedData);
        static /*0x7114f78*/ bool TryGetLocalTzFile(ref byte[] rawData, ref string id);
        static /*0x7115154*/ string GetTzEnvironmentVariable();
        static /*0x71151ec*/ bool TryLoadTzFile(string tzFilePath, ref byte[] rawData, ref string id);
        static /*0x71154e0*/ string FindTimeZoneIdUsingReadLink(string tzFilePath);
        static /*0x71158ac*/ string GetDirectoryEntryFullPath(ref Interop.Sys.DirectoryEntry dirent, string currentPath);
        static /*0x7115a18*/ void EnumerateFilesRecursively(string path, System.Predicate<string> condition);
        static /*0x71155ec*/ string FindTimeZoneId(byte[] rawData);
        static /*0x7115fac*/ bool CompareTimeZoneFile(string filePath, byte[] buffer, byte[] rawData);
        static /*0x7114e14*/ System.TimeZoneInfo GetLocalTimeZoneFromTzFile();
        static /*0x711635c*/ System.TimeZoneInfo GetTimeZoneFromTzData(byte[] rawData, string id);
        static /*0x71153a4*/ string GetTimeZoneDirectory();
        static /*0x7116a00*/ System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, ref bool isAmbiguousLocalDst);
        static /*0x711431c*/ void TZif_GenerateAdjustmentRules(ref System.TimeZoneInfo.AdjustmentRule[] rules, System.TimeSpan baseUtcOffset, System.DateTime[] dts, byte[] typeOfLocalTime, System.TimeZoneInfo.TZifType[] transitionType, bool[] StandardTime, bool[] GmtTime, string futureTransitionsPosixFormat);
        static /*0x7116dc8*/ void TZif_GenerateAdjustmentRule(ref int index, System.TimeSpan timeZoneBaseUtcOffset, System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> rulesList, System.DateTime[] dts, byte[] typeOfLocalTime, System.TimeZoneInfo.TZifType[] transitionTypes, bool[] StandardTime, bool[] GmtTime, string futureTransitionsPosixFormat);
        static /*0x7117580*/ System.TimeSpan TZif_CalculateTransitionOffsetFromBase(System.TimeSpan transitionOffset, System.TimeSpan timeZoneBaseUtcOffset);
        static /*0x71174d0*/ System.TimeZoneInfo.TZifType TZif_GetEarlyDateTransitionType(System.TimeZoneInfo.TZifType[] transitionTypes);
        static /*0x71179fc*/ System.TimeZoneInfo.AdjustmentRule TZif_CreateAdjustmentRuleForPosixFormat(string posixFormat, System.DateTime startTransitionDate, System.TimeSpan timeZoneBaseUtcOffset);
        static /*0x711807c*/ System.Nullable<System.TimeSpan> TZif_ParseOffsetString(string offset);
        static /*0x71184e0*/ System.DateTime ParseTimeOfDay(string time);
        static /*0x7118290*/ System.Nullable<System.TimeZoneInfo.TransitionTime> TZif_CreateTransitionTimeFromPosixRule(string date, string time);
        static /*0x71189a0*/ void TZif_ParseJulianDay(string date, ref int month, ref int day);
        static /*0x711873c*/ bool TZif_ParseMDateRule(string dateRule, ref int month, ref int week, ref System.DayOfWeek dayOfWeek);
        static /*0x7117de8*/ bool TZif_ParsePosixFormat(string posixFormat, ref string standardName, ref string standardOffset, ref string daylightSavingsName, ref string daylightSavingsOffset, ref string start, ref string startTime, ref string end, ref string endTime);
        static /*0x7118b68*/ string TZif_ParsePosixName(string posixFormat, ref int index);
        static /*0x7118dac*/ string TZif_ParsePosixOffset(string posixFormat, ref int index);
        static /*0x7118ec0*/ void TZif_ParsePosixDateTime(string posixFormat, ref int index, ref string date, ref string time);
        static /*0x7119068*/ string TZif_ParsePosixDate(string posixFormat, ref int index);
        static /*0x711917c*/ string TZif_ParsePosixTime(string posixFormat, ref int index);
        static /*0x7118fd0*/ string TZif_ParsePosixString(string posixFormat, ref int index, System.Func<char, bool> breakCondition);
        static /*0x71142b8*/ string TZif_GetZoneAbbreviation(string zoneAbbreviations, int index);
        static /*0x7119290*/ int TZif_ToInt32(byte[] value, int startIndex);
        static /*0x71192c0*/ long TZif_ToInt64(byte[] value, int startIndex);
        static /*0x71192f0*/ long TZif_ToUnixTime(byte[] value, int startIndex, System.TimeZoneInfo.TZVersion version);
        static /*0x7119378*/ System.DateTime TZif_UnixTimeToDateTime(long unixTime);
        static /*0x7113d00*/ void TZif_ParseRaw(byte[] data, ref System.TimeZoneInfo.TZifHead t, ref System.DateTime[] dts, ref byte[] typeOfLocalTime, ref System.TimeZoneInfo.TZifType[] transitionType, ref string zoneAbbreviations, ref bool[] StandardTime, ref bool[] GmtTime, ref string futureTransitionsPosixFormat);
        static /*0x7119b08*/ System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x7119f90*/ System.DateTimeOffset ConvertTime(System.DateTimeOffset dateTimeOffset, System.TimeZoneInfo destinationTimeZone);
        static /*0x7119ce0*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags);
        static /*0x711a1fc*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        static /*0x711b314*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x7116a78*/ System.TimeZoneInfo get_Local();
        static /*0x711b848*/ System.TimeZoneInfo get_Utc();
        static /*0x711b9bc*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
        static /*0x711ba50*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        static /*0x711b10c*/ System.DateTime ConvertUtcToTimeZone(long ticks, System.TimeZoneInfo destinationTimeZone, ref bool isAmbiguousLocalDst);
        static /*0x711ad2c*/ bool GetIsDaylightSavings(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime, System.TimeZoneInfoOptions flags);
        static /*0x711d510*/ bool GetIsDaylightSavingsFromUtc(System.DateTime time, int year, System.TimeSpan utc, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex, ref bool isAmbiguousLocalDst, System.TimeZoneInfo zone);
        static /*0x711cde4*/ bool CheckIsDst(System.DateTime startTime, System.DateTime time, System.DateTime endTime, bool ignoreYearAdjustment, System.TimeZoneInfo.AdjustmentRule rule);
        static /*0x711d00c*/ bool GetIsAmbiguousTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0x711a960*/ bool GetIsInvalidTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0x7119dd8*/ System.TimeSpan GetUtcOffset(System.DateTime time, System.TimeZoneInfo zone, System.TimeZoneInfoOptions flags);
        static /*0x7119d68*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone);
        static /*0x711c85c*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings);
        static /*0x7116af8*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings, ref bool isAmbiguousLocalDst);
        static /*0x711c8dc*/ System.DateTime TransitionTimeToDateTime(int year, System.TimeZoneInfo.TransitionTime transitionTime);
        static /*0x7114490*/ void ValidateTimeZoneInfo(string id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, ref bool adjustmentRulesSupportDst);
        static /*0x711dcfc*/ bool UtcOffsetOutOfRange(System.TimeSpan offset);
        static /*0x711de30*/ System.TimeSpan GetUtcOffset(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x711773c*/ bool IsValidAdjustmentRuleOffest(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x71177b0*/ void NormalizeAdjustmentRuleOffset(System.TimeSpan baseUtcOffset, ref System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x711def8*/ string GetTimeZoneDirectoryUnity();
        static /*0x711df10*/ System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> CreateAdjustmentRule(int year, ref long[] data, ref string[] names);
        static /*0x7116504*/ System.TimeZoneInfo CreateLocalUnity();
        /*0x7113860*/ TimeZoneInfo(byte[] data, string id, bool dstDisabled);
        /*0x711b8a0*/ TimeZoneInfo(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        /*0x711bf00*/ TimeZoneInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x711e950*/ TimeZoneInfo();
        /*0x71147d8*/ System.TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules();
        /*0x711975c*/ string get_DisplayName();
        /*0x7119780*/ string get_StandardName();
        /*0x71197a4*/ string get_DaylightName();
        /*0x71197c8*/ System.TimeSpan get_BaseUtcOffset();
        /*0x71197d0*/ bool get_SupportsDaylightSavingTime();
        /*0x71197d8*/ System.TimeZoneInfo.AdjustmentRule GetPreviousAdjustmentRule(System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x71198fc*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime);
        /*0x7119bdc*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        /*0x7119970*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        /*0x711b408*/ bool Equals(System.TimeZoneInfo other);
        /*0x711b5bc*/ bool Equals(object obj);
        /*0x711b620*/ int GetHashCode();
        /*0x711b458*/ bool HasSameRules(System.TimeZoneInfo other);
        /*0x711b824*/ string ToString();
        /*0x711bb54*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x711bd28*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x711a6b0*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, ref System.Nullable<int> ruleIndex);
        /*0x711c344*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, bool dateTimeisUtc, ref System.Nullable<int> ruleIndex);
        /*0x711c4f8*/ int CompareAdjustmentRuleToDateTime(System.TimeZoneInfo.AdjustmentRule rule, System.TimeZoneInfo.AdjustmentRule previousRule, System.DateTime dateTime, System.DateTime dateOnly, bool dateTimeisUtc);
        /*0x711c6a8*/ System.DateTime ConvertToUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0x711c854*/ System.DateTime ConvertFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0x711c6b0*/ System.DateTime ConvertToFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta, bool convertToUtc);
        /*0x711a824*/ System.Globalization.DaylightTimeStruct GetDaylightTime(int year, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x711d3d0*/ System.TimeSpan GetDaylightSavingsStartOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x711d498*/ System.TimeSpan GetDaylightSavingsEndOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule);

        struct TZifType
        {
            /*0x10*/ System.TimeSpan UtcOffset;
            /*0x18*/ bool IsDst;
            /*0x19*/ byte AbbreviationIndex;

            /*0x7119620*/ TZifType(byte[] data, int index);
        }

        struct TZifHead
        {
            /*0x10*/ uint Magic;
            /*0x14*/ System.TimeZoneInfo.TZVersion Version;
            /*0x18*/ uint IsGmtCount;
            /*0x1c*/ uint IsStdCount;
            /*0x20*/ uint LeapCount;
            /*0x24*/ uint TimeCount;
            /*0x28*/ uint TypeCount;
            /*0x2c*/ uint CharCount;

            /*0x7119474*/ TZifHead(byte[] data, int index);
        }

        enum TZVersion
        {
            V1 = 0,
            V2 = 1,
            V3 = 2,
        }

        class AdjustmentRule : System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _dateStart;
            /*0x18*/ System.DateTime _dateEnd;
            /*0x20*/ System.TimeSpan _daylightDelta;
            /*0x28*/ System.TimeZoneInfo.TransitionTime _daylightTransitionStart;
            /*0x40*/ System.TimeZoneInfo.TransitionTime _daylightTransitionEnd;
            /*0x58*/ System.TimeSpan _baseUtcOffsetDelta;
            /*0x60*/ bool _noDaylightTransitions;

            static /*0x7114cc0*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd);
            static /*0x7117674*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            static /*0x711ec04*/ void ValidateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, bool noDaylightTransitions);
            /*0x711eb3c*/ AdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            /*0x711f4a4*/ AdjustmentRule(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x711f888*/ AdjustmentRule();
            /*0x711e988*/ System.DateTime get_DateStart();
            /*0x711e990*/ System.DateTime get_DateEnd();
            /*0x711e998*/ System.TimeSpan get_DaylightDelta();
            /*0x711e9a0*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionStart();
            /*0x711e9b4*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionEnd();
            /*0x711e9c8*/ System.TimeSpan get_BaseUtcOffsetDelta();
            /*0x711e9d0*/ bool get_NoDaylightTransitions();
            /*0x711a6bc*/ bool get_HasDaylightSaving();
            /*0x711b6c0*/ bool Equals(System.TimeZoneInfo.AdjustmentRule other);
            /*0x711eae4*/ int GetHashCode();
            /*0x711cbac*/ bool IsStartDateMarkerForBeginningOfYear();
            /*0x711ccc8*/ bool IsEndDateMarkerForEndOfYear();
            /*0x711f150*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x711f264*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct TransitionTime : System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _timeOfDay;
            /*0x18*/ byte _month;
            /*0x19*/ byte _week;
            /*0x1a*/ byte _day;
            /*0x1c*/ System.DayOfWeek _dayOfWeek;
            /*0x20*/ bool _isFixedDateRule;

            static /*0x711e9d8*/ bool op_Inequality(System.TimeZoneInfo.TransitionTime t1, System.TimeZoneInfo.TransitionTime t2);
            static /*0x7114c60*/ System.TimeZoneInfo.TransitionTime CreateFixedDateRule(System.DateTime timeOfDay, int month, int day);
            static /*0x7118938*/ System.TimeZoneInfo.TransitionTime CreateFloatingDateRule(System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek);
            static /*0x711f9f8*/ void ValidateTransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek);
            /*0x711f988*/ TransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek, bool isFixedDateRule);
            /*0x711ff38*/ TransitionTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x711f8c0*/ System.DateTime get_TimeOfDay();
            /*0x711f8c8*/ int get_Month();
            /*0x711f8d0*/ int get_Week();
            /*0x711f8d8*/ int get_Day();
            /*0x711f8e0*/ System.DayOfWeek get_DayOfWeek();
            /*0x711f8e8*/ bool get_IsFixedDateRule();
            /*0x711f8f0*/ bool Equals(object obj);
            /*0x711ea0c*/ bool Equals(System.TimeZoneInfo.TransitionTime other);
            /*0x711f980*/ int GetHashCode();
            /*0x711fca4*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x711fd90*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class CachedData
        {
            /*0x10*/ System.TimeZoneInfo _localTimeZone;

            /*0x711e948*/ CachedData();
            /*0x7120264*/ System.TimeZoneInfo CreateLocal();
            /*0x7119ba4*/ System.TimeZoneInfo get_Local();
            /*0x7119c54*/ System.DateTimeKind GetCorrespondingKind(System.TimeZoneInfo timeZone);
        }

        class <>c__DisplayClass16_0
        {
            /*0x10*/ string localtimeFilePath;
            /*0x18*/ string posixrulesFilePath;
            /*0x20*/ byte[] buffer;
            /*0x28*/ byte[] rawData;
            /*0x30*/ string id;
            /*0x38*/ string timeZoneDirectory;

            /*0x7115fa4*/ <>c__DisplayClass16_0();
            /*0x71203f0*/ bool <FindTimeZoneId>b__0(string filePath);
        }

        class <>c
        {
            static /*0x0*/ System.TimeZoneInfo.<> <>9;
            static /*0x8*/ System.Func<char, bool> <>9__34_1;
            static /*0x10*/ System.Func<char, bool> <>9__34_0;
            static /*0x18*/ System.Func<char, bool> <>9__35_0;
            static /*0x20*/ System.Func<char, bool> <>9__37_0;
            static /*0x28*/ System.Func<char, bool> <>9__38_0;
            static /*0x30*/ System.Comparison<System.TimeZoneInfo.AdjustmentRule> <>9__161_0;

            static /*0x7120500*/ <>c();
            /*0x7120568*/ <>c();
            /*0x7120570*/ bool <TZif_ParsePosixName>b__34_1(char c);
            /*0x7120580*/ bool <TZif_ParsePosixName>b__34_0(char c);
            /*0x7120628*/ bool <TZif_ParsePosixOffset>b__35_0(char c);
            /*0x7120680*/ bool <TZif_ParsePosixDate>b__37_0(char c);
            /*0x712069c*/ bool <TZif_ParsePosixTime>b__38_0(char c);
            /*0x71206ac*/ int <CreateLocalUnity>b__161_0(System.TimeZoneInfo.AdjustmentRule rule1, System.TimeZoneInfo.AdjustmentRule rule2);
        }
    }

    class AccessViolationException : System.SystemException
    {
        /*0x7120734*/ AccessViolationException();
        /*0x7120790*/ AccessViolationException(string message);
        /*0x71207b4*/ AccessViolationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Action : System.MulticastDelegate
    {
        /*0x71207bc*/ Action(object object, nint method);
        /*0x7120858*/ void Invoke();
    }

    class Action<T> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T obj);
    }

    class Action<T1, T2> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2);
    }

    class Action<T1, T2, T3> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Action<T1, T2, T3, T4> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Action<T1, T2, T3, T4, T5> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Action<T1, T2, T3, T4, T5, T6> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7, T8> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3910ae8*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Func<TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke();
    }

    class Func<T, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T arg);
    }

    class Func<T1, T2, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2);
    }

    class Func<T1, T2, T3, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Func<T1, T2, T3, T4, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Func<T1, T2, T3, T4, T5, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Func<T1, T2, T3, T4, T5, T6, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3910ae8*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Comparison<T> : System.MulticastDelegate
    {
        Comparison(object object, nint method);
        /*0x3910ae8*/ int Invoke(T x, T y);
    }

    class Converter<TInput, TOutput> : System.MulticastDelegate
    {
        Converter(object object, nint method);
        /*0x3910ae8*/ TOutput Invoke(TInput input);
    }

    class Predicate<T> : System.MulticastDelegate
    {
        Predicate(object object, nint method);
        /*0x3910ae8*/ bool Invoke(T obj);
    }

    class AggregateException : System.Exception
    {
        /*0x90*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> m_innerExceptions;

        /*0x712086c*/ AggregateException();
        /*0x7120998*/ AggregateException(System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x7120aac*/ AggregateException(System.Exception[] innerExceptions);
        /*0x71209f0*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x7120b04*/ AggregateException(string message, System.Exception[] innerExceptions);
        /*0x7120b08*/ AggregateException(string message, System.Collections.Generic.IList<System.Exception> innerExceptions);
        /*0x7120f10*/ AggregateException(System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x7120f68*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x7121024*/ AggregateException(string message, System.Collections.Generic.IList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x7121480*/ AggregateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7121654*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7121794*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> get_InnerExceptions();
        /*0x712179c*/ System.AggregateException Flatten();
        /*0x7121b5c*/ string get_Message();
        /*0x7121ce8*/ string ToString();
    }

    class ApplicationException : System.Exception
    {
        /*0x7121ef0*/ ApplicationException();
        /*0x7121f70*/ ApplicationException(string message);
        /*0x7121fe8*/ ApplicationException(string message, System.Exception innerException);
        /*0x7122068*/ ApplicationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentException : System.SystemException
    {
        /*0x90*/ string _paramName;

        /*0x71220e8*/ ArgumentException();
        /*0x7120eec*/ ArgumentException(string message);
        /*0x7122144*/ ArgumentException(string message, System.Exception innerException);
        /*0x7122168*/ ArgumentException(string message, string paramName, System.Exception innerException);
        /*0x711a670*/ ArgumentException(string message, string paramName);
        /*0x71221ac*/ ArgumentException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x712223c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71222f4*/ string get_Message();
        /*0x7122394*/ string get_ParamName();
    }

    class ArgumentNullException : System.ArgumentException
    {
        /*0x712239c*/ ArgumentNullException();
        /*0x711a184*/ ArgumentNullException(string paramName);
        /*0x71223f8*/ ArgumentNullException(string paramName, string message);
        /*0x712243c*/ ArgumentNullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentOutOfRangeException : System.ArgumentException
    {
        /*0x98*/ object _actualValue;

        /*0x7122440*/ ArgumentOutOfRangeException();
        /*0x712249c*/ ArgumentOutOfRangeException(string paramName);
        /*0x711ddec*/ ArgumentOutOfRangeException(string paramName, string message);
        /*0x711f0ec*/ ArgumentOutOfRangeException(string paramName, object actualValue, string message);
        /*0x7122514*/ ArgumentOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71225d0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7122684*/ string get_Message();
    }

    class ArithmeticException : System.SystemException
    {
        /*0x7122730*/ ArithmeticException();
        /*0x712278c*/ ArithmeticException(string message);
        /*0x71227b0*/ ArithmeticException(string message, System.Exception innerException);
        /*0x71227d4*/ ArithmeticException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ArraySegment<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
    {
        static /*0x0*/ System.ArraySegment<T> <Empty>k__BackingField;
        /*0x0*/ T[] _array;
        /*0x0*/ int _offset;
        /*0x0*/ int _count;

        static /*0x383e7a0*/ ArraySegment();
        static /*0x3910ae8*/ System.ArraySegment<T> get_Empty();
        /*0x3816710*/ ArraySegment(T[] array);
        ArraySegment(T[] array, int offset, int count);
        /*0x38148bc*/ T[] get_Array();
        /*0x3814574*/ int get_Offset();
        /*0x3814574*/ int get_Count();
        /*0x3910ae8*/ System.ArraySegment.Enumerator<T> GetEnumerator();
        /*0x3814574*/ int GetHashCode();
        /*0x381678c*/ void CopyTo(T[] destination, int destinationIndex);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ArraySegment<T> obj);
        /*0x3910ae8*/ T System.Collections.Generic.IList<T>.get_Item(int index);
        /*0x3910ae8*/ void System.Collections.Generic.IList<T>.set_Item(int index, T value);
        /*0x3910ae8*/ int System.Collections.Generic.IList<T>.IndexOf(T item);
        /*0x3910ae8*/ void System.Collections.Generic.IList<T>.Insert(int index, T item);
        /*0x3815ed0*/ void System.Collections.Generic.IList<T>.RemoveAt(int index);
        /*0x3910ae8*/ T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index);
        /*0x3813ffc*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
        /*0x3910ae8*/ void System.Collections.Generic.ICollection<T>.Add(T item);
        /*0x38159dc*/ void System.Collections.Generic.ICollection<T>.Clear();
        /*0x3910ae8*/ bool System.Collections.Generic.ICollection<T>.Contains(T item);
        /*0x3910ae8*/ bool System.Collections.Generic.ICollection<T>.Remove(T item);
        /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
        /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0x38159dc*/ void ThrowInvalidOperationIfDefault();

        struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ T[] _array;
            /*0x0*/ int _start;
            /*0x0*/ int _end;
            /*0x0*/ int _current;

            /*0x3910ae8*/ Enumerator(System.ArraySegment<T> arraySegment);
            /*0x3813ffc*/ bool MoveNext();
            /*0x3910ae8*/ T get_Current();
            /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
            /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
            /*0x38159dc*/ void Dispose();
        }
    }

    class ArrayTypeMismatchException : System.SystemException
    {
        /*0x71227dc*/ ArrayTypeMismatchException();
        /*0x7122838*/ ArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class AssemblyLoadEventArgs : System.EventArgs
    {
        /*0x10*/ System.Reflection.Assembly <LoadedAssembly>k__BackingField;

        /*0x7122840*/ AssemblyLoadEventArgs(System.Reflection.Assembly loadedAssembly);
    }

    class AssemblyLoadEventHandler : System.MulticastDelegate
    {
        /*0x71228b4*/ AssemblyLoadEventHandler(object object, nint method);
        /*0x71229c0*/ void Invoke(object sender, System.AssemblyLoadEventArgs args);
    }

    class AsyncCallback : System.MulticastDelegate
    {
        /*0x71229d4*/ AsyncCallback(object object, nint method);
        /*0x7122adc*/ void Invoke(System.IAsyncResult ar);
        /*0x7122af0*/ System.IAsyncResult BeginInvoke(System.IAsyncResult ar, System.AsyncCallback callback, object object);
        /*0x7122b10*/ void EndInvoke(System.IAsyncResult result);
    }

    enum AttributeTargets
    {
        Assembly = 1,
        Module = 2,
        Class = 4,
        Struct = 8,
        Enum = 16,
        Constructor = 32,
        Method = 64,
        Property = 128,
        Field = 256,
        Event = 512,
        Interface = 1024,
        Parameter = 2048,
        Delegate = 4096,
        ReturnValue = 8192,
        GenericParameter = 16384,
        All = 32767,
    }

    class AttributeUsageAttribute : System.Attribute
    {
        static /*0x0*/ System.AttributeUsageAttribute Default;
        /*0x10*/ System.AttributeTargets _attributeTarget;
        /*0x14*/ bool _allowMultiple;
        /*0x15*/ bool _inherited;

        static /*0x7122b7c*/ AttributeUsageAttribute();
        /*0x7122b1c*/ AttributeUsageAttribute(System.AttributeTargets validOn);
        /*0x7122b54*/ bool get_AllowMultiple();
        /*0x7122b5c*/ void set_AllowMultiple(bool value);
        /*0x7122b68*/ bool get_Inherited();
        /*0x7122b70*/ void set_Inherited(bool value);
    }

    class BadImageFormatException : System.SystemException
    {
        /*0x90*/ string _fileName;
        /*0x98*/ string _fusionLog;

        /*0x7122bf8*/ BadImageFormatException();
        /*0x7122c54*/ BadImageFormatException(string message);
        /*0x7122c78*/ BadImageFormatException(string message, System.Exception inner);
        /*0x7122c9c*/ BadImageFormatException(string message, string fileName);
        /*0x7122cd8*/ BadImageFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7122d9c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7122e94*/ string get_Message();
        /*0x7122eac*/ void SetMessageField();
        /*0x7122f3c*/ string ToString();
    }

    class BitConverter
    {
        static /*0x0*/ bool IsLittleEndian;

        static /*0x7123a68*/ BitConverter();
        static /*0x7123120*/ byte[] GetBytes(bool value);
        static /*0x7123188*/ byte[] GetBytes(char value);
        static /*0x71231ec*/ byte[] GetBytes(short value);
        static /*0x7123250*/ byte[] GetBytes(int value);
        static /*0x71232b4*/ byte[] GetBytes(long value);
        static /*0x7123318*/ byte[] GetBytes(ushort value);
        static /*0x712337c*/ byte[] GetBytes(uint value);
        static /*0x71233e0*/ bool TryWriteBytes(System.Span<byte> destination, uint value);
        static /*0x7123460*/ byte[] GetBytes(ulong value);
        static /*0x71234c4*/ byte[] GetBytes(float value);
        static /*0x7123530*/ byte[] GetBytes(double value);
        static /*0x712359c*/ short ToInt16(byte[] value, int startIndex);
        static /*0x7123620*/ int ToInt32(byte[] value, int startIndex);
        static /*0x71236a4*/ long ToInt64(byte[] value, int startIndex);
        static /*0x7123728*/ ushort ToUInt16(byte[] value, int startIndex);
        static /*0x712372c*/ uint ToUInt32(byte[] value, int startIndex);
        static /*0x7123730*/ ulong ToUInt64(byte[] value, int startIndex);
        static /*0x7123734*/ float ToSingle(byte[] value, int startIndex);
        static /*0x7123748*/ string ToString(byte[] value, int startIndex, int length);
        static /*0x7123a28*/ string ToString(byte[] value);
        static /*0x7123a50*/ long DoubleToInt64Bits(double value);
        static /*0x7123a58*/ int SingleToInt32Bits(float value);
        static /*0x7123a60*/ float Int32BitsToSingle(int value);

        class <>c
        {
            static /*0x0*/ System.BitConverter.<> <>9;
            static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<System.Byte[], int, int>> <>9__38_0;

            static /*0x7123ab4*/ <>c();
            /*0x7123b1c*/ <>c();
            /*0x7123b24*/ void <ToString>b__38_0(System.Span<char> dst, System.ValueTuple<System.Byte[], int, int> state);
        }
    }

    struct Boolean : System.IComparable, System.IConvertible, System.IComparable<bool>, System.IEquatable<bool>
    {
        static /*0x0*/ string TrueString;
        static /*0x8*/ string FalseString;
        /*0x10*/ bool m_value;

        static /*0x712592c*/ Boolean();
        static /*0x7123e9c*/ bool Parse(string value);
        static /*0x7123f54*/ bool Parse(System.ReadOnlySpan<char> value);
        static /*0x71242ec*/ bool TryParse(string value, ref bool result);
        static /*0x7123ff0*/ bool TryParse(System.ReadOnlySpan<char> value, ref bool result);
        static /*0x7124378*/ System.ReadOnlySpan<char> TrimWhiteSpaceAndNull(System.ReadOnlySpan<char> value);
        /*0x7123cbc*/ int GetHashCode();
        /*0x7123ccc*/ string ToString();
        /*0x7123d38*/ string ToString(System.IFormatProvider provider);
        /*0x7123d68*/ bool Equals(object obj);
        /*0x7123db0*/ bool Equals(bool obj);
        /*0x7123dc4*/ int CompareTo(object obj);
        /*0x7123e74*/ int CompareTo(bool value);
        /*0x712456c*/ System.TypeCode GetTypeCode();
        /*0x7124574*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x7124584*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x7124608*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x712466c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71246d0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7124734*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7124798*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71247fc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7124860*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71248c4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x7124928*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71249a0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x7124a18*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x7124acc*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x7124b50*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Byte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<byte>, System.IEquatable<byte>, System.ISpanFormattable
    {
        /*0x10*/ byte m_value;

        static /*0x7125aa0*/ byte Parse(string s, System.IFormatProvider provider);
        static /*0x7125cc0*/ byte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x7125b2c*/ byte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x7125d64*/ bool TryParse(string s, ref byte result);
        static /*0x7125ea0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref byte result);
        static /*0x7125de4*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref byte result);
        /*0x71259ac*/ int CompareTo(object value);
        /*0x7125a34*/ int CompareTo(byte value);
        /*0x7125a40*/ bool Equals(object obj);
        /*0x7125a88*/ bool Equals(byte obj);
        /*0x7125a98*/ int GetHashCode();
        /*0x7125f48*/ string ToString();
        /*0x7125fe0*/ string ToString(string format);
        /*0x7126094*/ string ToString(System.IFormatProvider provider);
        /*0x7126130*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71261e8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x712628c*/ System.TypeCode GetTypeCode();
        /*0x7126294*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71262fc*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x712635c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x7126408*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7126410*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7126470*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71264d0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x7126530*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7126590*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71265f0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x7126650*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71266b4*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x7126718*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71267c8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x712684c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CLSCompliantAttribute : System.Attribute
    {
        /*0x10*/ bool _compliant;

        /*0x71268e8*/ CLSCompliantAttribute(bool isCompliant);
    }

    struct Char : System.IComparable, System.IComparable<char>, System.IEquatable<char>, System.IConvertible
    {
        static /*0x0*/ byte[] s_categoryForLatin1;
        /*0x10*/ char m_value;

        static /*0x712838c*/ Char();
        static /*0x7126910*/ bool IsLatin1(char ch);
        static /*0x7126920*/ bool IsAscii(char ch);
        static /*0x7126930*/ System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(char ch);
        static /*0x7126a88*/ string ToString(char c);
        static /*0x7126ac4*/ char Parse(string s);
        static /*0x7126b60*/ bool TryParse(string s, ref char result);
        static /*0x71205c8*/ bool IsDigit(char c);
        static /*0x7126ba0*/ bool CheckLetter(System.Globalization.UnicodeCategory uc);
        static /*0x7126bac*/ bool IsLetter(char c);
        static /*0x7126c68*/ bool IsWhiteSpaceLatin1(char c);
        static /*0x71244d0*/ bool IsWhiteSpace(char c);
        static /*0x7126ca4*/ bool IsUpper(char c);
        static /*0x7126d44*/ bool IsLower(char c);
        static /*0x7126de4*/ bool CheckPunctuation(System.Globalization.UnicodeCategory uc);
        static /*0x7126df4*/ bool IsPunctuation(char c);
        static /*0x7126e84*/ bool CheckLetterOrDigit(System.Globalization.UnicodeCategory uc);
        static /*0x7126ea4*/ bool IsLetterOrDigit(char c);
        static /*0x7126f50*/ char ToUpper(char c, System.Globalization.CultureInfo culture);
        static /*0x7126fd0*/ char ToUpper(char c);
        static /*0x712704c*/ char ToUpperInvariant(char c);
        static /*0x71270c8*/ char ToLower(char c, System.Globalization.CultureInfo culture);
        static /*0x7127148*/ char ToLower(char c);
        static /*0x71271c4*/ char ToLowerInvariant(char c);
        static /*0x7127970*/ bool IsControl(char c);
        static /*0x71279e0*/ bool CheckNumber(System.Globalization.UnicodeCategory uc);
        static /*0x71279f0*/ bool IsNumber(char c);
        static /*0x7127aac*/ bool IsNumber(string s, int index);
        static /*0x7127c10*/ bool CheckSeparator(System.Globalization.UnicodeCategory uc);
        static /*0x7127c20*/ bool IsSeparatorLatin1(char c);
        static /*0x7127c34*/ bool IsSeparator(char c);
        static /*0x7127cc8*/ bool IsSurrogate(char c);
        static /*0x7127cd8*/ bool IsSurrogate(string s, int index);
        static /*0x7127d9c*/ bool IsWhiteSpace(string s, int index);
        static /*0x7127ef4*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char c);
        static /*0x7127f58*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
        static /*0x712807c*/ bool IsHighSurrogate(char c);
        static /*0x712808c*/ bool IsHighSurrogate(string s, int index);
        static /*0x7128154*/ bool IsLowSurrogate(char c);
        static /*0x7128164*/ bool IsSurrogatePair(char highSurrogate, char lowSurrogate);
        static /*0x7128184*/ string ConvertFromUtf32(int utf32);
        static /*0x712828c*/ int ConvertToUtf32(char highSurrogate, char lowSurrogate);
        /*0x7126990*/ int GetHashCode();
        /*0x712699c*/ bool Equals(object obj);
        /*0x71269e4*/ bool Equals(char obj);
        /*0x71269f4*/ int CompareTo(object value);
        /*0x7126a7c*/ int CompareTo(char value);
        /*0x71169cc*/ string ToString();
        /*0x7126a90*/ string ToString(System.IFormatProvider provider);
        /*0x7127240*/ System.TypeCode GetTypeCode();
        /*0x7127248*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71272cc*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71272d4*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x7127388*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x712743c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71274e8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7127544*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71275a4*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7127604*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x7127664*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71276c4*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x7127748*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71277cc*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x7127850*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71278d4*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CharEnumerator : System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<char>, System.IDisposable, System.ICloneable
    {
        /*0x10*/ string _str;
        /*0x18*/ int _index;
        /*0x1c*/ char _currentElement;

        /*0x7128410*/ CharEnumerator(string str);
        /*0x71285a8*/ CharEnumerator();
        /*0x712844c*/ object Clone();
        /*0x7128454*/ bool MoveNext();
        /*0x71284b0*/ void Dispose();
        /*0x71284d0*/ object System.Collections.IEnumerator.get_Current();
        /*0x71284fc*/ char get_Current();
        /*0x7128598*/ void Reset();
    }

    class Convert
    {
        static /*0x0*/ sbyte[] s_decodingMap;
        static /*0x8*/ System.Type[] ConvertTypes;
        static /*0x10*/ System.Type EnumType;
        static /*0x18*/ char[] base64Table;
        static /*0x20*/ object DBNull;

        static /*0x71304b8*/ Convert();
        static /*0x71285e0*/ bool TryDecodeFromUtf16(System.ReadOnlySpan<char> utf16, System.Span<byte> bytes, ref int consumed, ref int written);
        static /*0x712893c*/ int Decode(ref char encodedChars, ref sbyte decodingMap);
        static /*0x712898c*/ void WriteThreeLowOrderBytes(ref byte destination, int value);
        static /*0x71289a4*/ System.TypeCode GetTypeCode(object value);
        static /*0x7128a68*/ object ChangeType(object value, System.TypeCode typeCode, System.IFormatProvider provider);
        static /*0x7124bf4*/ object DefaultToType(System.IConvertible value, System.Type targetType, System.IFormatProvider provider);
        static /*0x71292e8*/ object ChangeType(object value, System.Type conversionType);
        static /*0x7129384*/ object ChangeType(object value, System.Type conversionType, System.IFormatProvider provider);
        static /*0x7129fb0*/ void ThrowCharOverflowException();
        static /*0x7129ffc*/ void ThrowByteOverflowException();
        static /*0x712a048*/ void ThrowSByteOverflowException();
        static /*0x712a094*/ void ThrowInt16OverflowException();
        static /*0x712a0e0*/ void ThrowUInt16OverflowException();
        static /*0x712a12c*/ void ThrowInt32OverflowException();
        static /*0x712a178*/ void ThrowUInt32OverflowException();
        static /*0x712a1c4*/ void ThrowInt64OverflowException();
        static /*0x712a210*/ void ThrowUInt64OverflowException();
        static /*0x712a25c*/ bool ToBoolean(object value);
        static /*0x712a350*/ bool ToBoolean(object value, System.IFormatProvider provider);
        static /*0x712a454*/ bool ToBoolean(sbyte value);
        static /*0x71262f0*/ bool ToBoolean(byte value);
        static /*0x712a460*/ bool ToBoolean(short value);
        static /*0x712a46c*/ bool ToBoolean(ushort value);
        static /*0x712a478*/ bool ToBoolean(int value);
        static /*0x712a484*/ bool ToBoolean(uint value);
        static /*0x712a490*/ bool ToBoolean(long value);
        static /*0x712a49c*/ bool ToBoolean(ulong value);
        static /*0x712a4a8*/ bool ToBoolean(string value);
        static /*0x712a4dc*/ bool ToBoolean(string value, System.IFormatProvider provider);
        static /*0x712a510*/ bool ToBoolean(float value);
        static /*0x712a51c*/ bool ToBoolean(double value);
        static /*0x712a528*/ bool ToBoolean(decimal value);
        static /*0x712a59c*/ char ToChar(object value);
        static /*0x712a690*/ char ToChar(object value, System.IFormatProvider provider);
        static /*0x712a794*/ char ToChar(sbyte value);
        static /*0x7126354*/ char ToChar(byte value);
        static /*0x712a7e8*/ char ToChar(short value);
        static /*0x712a83c*/ char ToChar(ushort value);
        static /*0x712a840*/ char ToChar(int value);
        static /*0x712a898*/ char ToChar(uint value);
        static /*0x712a8f0*/ char ToChar(long value);
        static /*0x712a948*/ char ToChar(ulong value);
        static /*0x712a9a0*/ char ToChar(string value);
        static /*0x712a9f4*/ char ToChar(string value, System.IFormatProvider provider);
        static /*0x712aa90*/ sbyte ToSByte(object value);
        static /*0x712ab84*/ sbyte ToSByte(object value, System.IFormatProvider provider);
        static /*0x7124664*/ sbyte ToSByte(bool value);
        static /*0x712732c*/ sbyte ToSByte(char value);
        static /*0x71263b4*/ sbyte ToSByte(byte value);
        static /*0x712ac88*/ sbyte ToSByte(short value);
        static /*0x712ace8*/ sbyte ToSByte(ushort value);
        static /*0x712ad44*/ sbyte ToSByte(int value);
        static /*0x712ad9c*/ sbyte ToSByte(uint value);
        static /*0x712adf4*/ sbyte ToSByte(long value);
        static /*0x712ae4c*/ sbyte ToSByte(ulong value);
        static /*0x712aea4*/ sbyte ToSByte(float value);
        static /*0x712af00*/ sbyte ToSByte(double value);
        static /*0x712b060*/ sbyte ToSByte(decimal value);
        static /*0x712b0d4*/ sbyte ToSByte(string value, System.IFormatProvider provider);
        static /*0x712b0e4*/ byte ToByte(object value);
        static /*0x712b1d8*/ byte ToByte(object value, System.IFormatProvider provider);
        static /*0x71246c8*/ byte ToByte(bool value);
        static /*0x71273e0*/ byte ToByte(char value);
        static /*0x712b2dc*/ byte ToByte(sbyte value);
        static /*0x712b330*/ byte ToByte(short value);
        static /*0x712b38c*/ byte ToByte(ushort value);
        static /*0x712b3e8*/ byte ToByte(int value);
        static /*0x712b440*/ byte ToByte(uint value);
        static /*0x712b498*/ byte ToByte(long value);
        static /*0x712b4f0*/ byte ToByte(ulong value);
        static /*0x712b548*/ byte ToByte(float value);
        static /*0x712b5a4*/ byte ToByte(double value);
        static /*0x712b604*/ byte ToByte(decimal value);
        static /*0x712b678*/ byte ToByte(string value);
        static /*0x712b6ec*/ byte ToByte(string value, System.IFormatProvider provider);
        static /*0x712b700*/ short ToInt16(object value);
        static /*0x712b7f4*/ short ToInt16(object value, System.IFormatProvider provider);
        static /*0x712472c*/ short ToInt16(bool value);
        static /*0x7127494*/ short ToInt16(char value);
        static /*0x712b8f8*/ short ToInt16(sbyte value);
        static /*0x7126468*/ short ToInt16(byte value);
        static /*0x712b900*/ short ToInt16(ushort value);
        static /*0x712b954*/ short ToInt16(int value);
        static /*0x712b9ac*/ short ToInt16(uint value);
        static /*0x712ba04*/ short ToInt16(long value);
        static /*0x712ba5c*/ short ToInt16(ulong value);
        static /*0x712bab4*/ short ToInt16(float value);
        static /*0x712bb10*/ short ToInt16(double value);
        static /*0x712bb70*/ short ToInt16(decimal value);
        static /*0x712bbe4*/ short ToInt16(string value, System.IFormatProvider provider);
        static /*0x712bbfc*/ ushort ToUInt16(object value);
        static /*0x712bcf0*/ ushort ToUInt16(object value, System.IFormatProvider provider);
        static /*0x7124790*/ ushort ToUInt16(bool value);
        static /*0x7127540*/ ushort ToUInt16(char value);
        static /*0x712bdf4*/ ushort ToUInt16(sbyte value);
        static /*0x71264c8*/ ushort ToUInt16(byte value);
        static /*0x712be48*/ ushort ToUInt16(short value);
        static /*0x712be9c*/ ushort ToUInt16(int value);
        static /*0x712bef4*/ ushort ToUInt16(uint value);
        static /*0x712bf4c*/ ushort ToUInt16(long value);
        static /*0x712bfa4*/ ushort ToUInt16(ulong value);
        static /*0x712bffc*/ ushort ToUInt16(float value);
        static /*0x712c058*/ ushort ToUInt16(double value);
        static /*0x712c0b8*/ ushort ToUInt16(decimal value);
        static /*0x712c12c*/ ushort ToUInt16(string value, System.IFormatProvider provider);
        static /*0x712c144*/ int ToInt32(object value);
        static /*0x712c238*/ int ToInt32(object value, System.IFormatProvider provider);
        static /*0x71247f4*/ int ToInt32(bool value);
        static /*0x712759c*/ int ToInt32(char value);
        static /*0x7126528*/ int ToInt32(byte value);
        static /*0x712c33c*/ int ToInt32(short value);
        static /*0x712c344*/ int ToInt32(ushort value);
        static /*0x712c34c*/ int ToInt32(uint value);
        static /*0x712c3a0*/ int ToInt32(long value);
        static /*0x712c3f8*/ int ToInt32(ulong value);
        static /*0x712c450*/ int ToInt32(float value);
        static /*0x712af60*/ int ToInt32(double value);
        static /*0x712c4ac*/ int ToInt32(decimal value);
        static /*0x712c520*/ int ToInt32(string value);
        static /*0x712c598*/ int ToInt32(string value, System.IFormatProvider provider);
        static /*0x712c5b0*/ uint ToUInt32(object value);
        static /*0x712c6a4*/ uint ToUInt32(object value, System.IFormatProvider provider);
        static /*0x7124858*/ uint ToUInt32(bool value);
        static /*0x71275fc*/ uint ToUInt32(char value);
        static /*0x712c7a8*/ uint ToUInt32(sbyte value);
        static /*0x7126588*/ uint ToUInt32(byte value);
        static /*0x712c7fc*/ uint ToUInt32(short value);
        static /*0x712c850*/ uint ToUInt32(ushort value);
        static /*0x712c858*/ uint ToUInt32(int value);
        static /*0x712c8ac*/ uint ToUInt32(long value);
        static /*0x712c904*/ uint ToUInt32(ulong value);
        static /*0x712c95c*/ uint ToUInt32(float value);
        static /*0x712c9b8*/ uint ToUInt32(double value);
        static /*0x712ca60*/ uint ToUInt32(decimal value);
        static /*0x712cad4*/ uint ToUInt32(string value, System.IFormatProvider provider);
        static /*0x712caec*/ long ToInt64(object value);
        static /*0x712cbe0*/ long ToInt64(object value, System.IFormatProvider provider);
        static /*0x71248bc*/ long ToInt64(bool value);
        static /*0x712765c*/ long ToInt64(char value);
        static /*0x712cce4*/ long ToInt64(sbyte value);
        static /*0x71265e8*/ long ToInt64(byte value);
        static /*0x712ccec*/ long ToInt64(short value);
        static /*0x712ccf4*/ long ToInt64(ushort value);
        static /*0x712ccfc*/ long ToInt64(int value);
        static /*0x712cd04*/ long ToInt64(uint value);
        static /*0x712cd0c*/ long ToInt64(ulong value);
        static /*0x712cd60*/ long ToInt64(float value);
        static /*0x712cdbc*/ long ToInt64(double value);
        static /*0x712cecc*/ long ToInt64(decimal value);
        static /*0x712cf40*/ long ToInt64(string value);
        static /*0x712cfb8*/ long ToInt64(string value, System.IFormatProvider provider);
        static /*0x712cfd0*/ ulong ToUInt64(object value);
        static /*0x712d0c4*/ ulong ToUInt64(object value, System.IFormatProvider provider);
        static /*0x7124920*/ ulong ToUInt64(bool value);
        static /*0x71276bc*/ ulong ToUInt64(char value);
        static /*0x712d1c8*/ ulong ToUInt64(sbyte value);
        static /*0x7126648*/ ulong ToUInt64(byte value);
        static /*0x712d21c*/ ulong ToUInt64(short value);
        static /*0x712d270*/ ulong ToUInt64(ushort value);
        static /*0x712d278*/ ulong ToUInt64(int value);
        static /*0x712d2cc*/ ulong ToUInt64(uint value);
        static /*0x712d2d4*/ ulong ToUInt64(long value);
        static /*0x712d328*/ ulong ToUInt64(float value);
        static /*0x712d384*/ ulong ToUInt64(double value);
        static /*0x712d480*/ ulong ToUInt64(decimal value);
        static /*0x712d4f4*/ ulong ToUInt64(string value, System.IFormatProvider provider);
        static /*0x712d50c*/ float ToSingle(object value);
        static /*0x712d600*/ float ToSingle(object value, System.IFormatProvider provider);
        static /*0x712d704*/ float ToSingle(sbyte value);
        static /*0x71266a8*/ float ToSingle(byte value);
        static /*0x712d710*/ float ToSingle(short value);
        static /*0x712d71c*/ float ToSingle(ushort value);
        static /*0x712d728*/ float ToSingle(int value);
        static /*0x712d730*/ float ToSingle(uint value);
        static /*0x712d738*/ float ToSingle(long value);
        static /*0x712d740*/ float ToSingle(ulong value);
        static /*0x712d74c*/ float ToSingle(double value);
        static /*0x712d754*/ float ToSingle(decimal value);
        static /*0x712d7bc*/ float ToSingle(string value);
        static /*0x712d834*/ float ToSingle(string value, System.IFormatProvider provider);
        static /*0x712498c*/ float ToSingle(bool value);
        static /*0x712d850*/ double ToDouble(object value);
        static /*0x712d944*/ double ToDouble(object value, System.IFormatProvider provider);
        static /*0x712da48*/ double ToDouble(sbyte value);
        static /*0x712670c*/ double ToDouble(byte value);
        static /*0x712da54*/ double ToDouble(short value);
        static /*0x712da60*/ double ToDouble(ushort value);
        static /*0x712da6c*/ double ToDouble(int value);
        static /*0x712da74*/ double ToDouble(uint value);
        static /*0x712da7c*/ double ToDouble(long value);
        static /*0x712da84*/ double ToDouble(ulong value);
        static /*0x712da8c*/ double ToDouble(float value);
        static /*0x712da94*/ double ToDouble(decimal value);
        static /*0x712dafc*/ double ToDouble(string value, System.IFormatProvider provider);
        static /*0x7124a04*/ double ToDouble(bool value);
        static /*0x712db18*/ decimal ToDecimal(object value);
        static /*0x712dc34*/ decimal ToDecimal(object value, System.IFormatProvider provider);
        static /*0x712dd5c*/ decimal ToDecimal(sbyte value);
        static /*0x7126770*/ decimal ToDecimal(byte value);
        static /*0x712ddb4*/ decimal ToDecimal(short value);
        static /*0x712de0c*/ decimal ToDecimal(ushort value);
        static /*0x712de64*/ decimal ToDecimal(int value);
        static /*0x712debc*/ decimal ToDecimal(uint value);
        static /*0x712df14*/ decimal ToDecimal(long value);
        static /*0x712df6c*/ decimal ToDecimal(ulong value);
        static /*0x712dfc4*/ decimal ToDecimal(float value);
        static /*0x712e024*/ decimal ToDecimal(double value);
        static /*0x712e084*/ decimal ToDecimal(string value, System.IFormatProvider provider);
        static /*0x712e10c*/ decimal ToDecimal(decimal value);
        static /*0x7124a74*/ decimal ToDecimal(bool value);
        static /*0x712e110*/ System.DateTime ToDateTime(object value, System.IFormatProvider provider);
        static /*0x712e240*/ System.DateTime ToDateTime(string value, System.IFormatProvider provider);
        static /*0x712e2d0*/ string ToString(object value);
        static /*0x712e328*/ string ToString(object value, System.IFormatProvider provider);
        static /*0x712e4bc*/ string ToString(bool value, System.IFormatProvider provider);
        static /*0x712e4f4*/ string ToString(char value, System.IFormatProvider provider);
        static /*0x712e528*/ string ToString(int value);
        static /*0x712e590*/ string ToString(int value, System.IFormatProvider provider);
        static /*0x712e5ac*/ byte ToByte(string value, int fromBase);
        static /*0x712e6b4*/ sbyte ToSByte(string value, int fromBase);
        static /*0x712e7cc*/ short ToInt16(string value, int fromBase);
        static /*0x712e8e4*/ ushort ToUInt16(string value, int fromBase);
        static /*0x712e9ec*/ int ToInt32(string value, int fromBase);
        static /*0x712eac0*/ uint ToUInt32(string value, int fromBase);
        static /*0x712eb94*/ long ToInt64(string value, int fromBase);
        static /*0x712ec68*/ ulong ToUInt64(string value, int fromBase);
        static /*0x712ed3c*/ string ToString(byte value, int toBase);
        static /*0x712edc0*/ string ToString(int value, int toBase);
        static /*0x712ee40*/ string ToString(long value, int toBase);
        static /*0x712eec0*/ string ToBase64String(byte[] inArray);
        static /*0x712f118*/ string ToBase64String(byte[] inArray, int offset, int length);
        static /*0x712f188*/ string ToBase64String(byte[] inArray, int offset, int length, System.Base64FormattingOptions options);
        static /*0x712ef74*/ string ToBase64String(System.ReadOnlySpan<byte> bytes, System.Base64FormattingOptions options);
        static /*0x712f618*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);
        static /*0x712f6a0*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, System.Base64FormattingOptions options);
        static /*0x712f3d4*/ int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks);
        static /*0x712f324*/ int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks);
        static /*0x712f9ac*/ byte[] FromBase64String(string s);
        static /*0x712fbe8*/ bool TryFromBase64Chars(System.ReadOnlySpan<char> chars, System.Span<byte> bytes, ref int bytesWritten);
        static /*0x71300bc*/ void CopyToTempBufferWithoutWhiteSpace(System.ReadOnlySpan<char> chars, System.Span<char> tempBuffer, ref int consumed, ref int charsWritten);
        static /*0x71301e0*/ bool IsSpace(char c);
        static /*0x713020c*/ byte[] FromBase64CharArray(char[] inArray, int offset, int length);
        static /*0x712fa60*/ byte[] FromBase64CharPtr(char* inputPtr, int inputLength);
        static /*0x71303fc*/ int FromBase64_ComputeResultLength(char* inputPtr, int inputLength);
    }

    enum Base64FormattingOptions
    {
        None = 0,
        InsertLineBreaks = 1,
    }

    class CurrentSystemTimeZone : System.TimeZone
    {
        /*0x10*/ long m_ticksOffset;
        /*0x18*/ string m_standardName;
        /*0x20*/ string m_daylightName;
        /*0x28*/ System.Collections.Hashtable m_CachedDaylightChanges;

        static /*0x71982fc*/ System.Globalization.DaylightTime CreateDaylightChanges(int year);
        static /*0x71986a0*/ bool GetTimeZoneData(int year, ref long[] data, ref string[] names, ref bool daylight_inverted);
        /*0x71976b0*/ CurrentSystemTimeZone();
        /*0x71977c0*/ long GetUtcOffsetFromUniversalTime(System.DateTime time, ref bool isAmbiguousLocalDst);
        /*0x7197d00*/ System.DateTime ToLocalTime(System.DateTime time);
        /*0x7198050*/ System.Globalization.DaylightTime GetDaylightChanges(int year);
        /*0x71985a0*/ System.TimeSpan GetUtcOffset(System.DateTime time);
        /*0x719811c*/ System.Globalization.DaylightTime GetCachedDaylightChanges(int year);
    }

    class DBNull : System.Runtime.Serialization.ISerializable, System.IConvertible
    {
        static /*0x0*/ System.DBNull Value;

        static /*0x7198be0*/ DBNull();
        /*0x71986a4*/ DBNull();
        /*0x71986ac*/ DBNull(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7198700*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7198710*/ string ToString();
        /*0x7198728*/ string ToString(System.IFormatProvider provider);
        /*0x7198740*/ System.TypeCode GetTypeCode();
        /*0x7198748*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x7198794*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71987e0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x719882c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7198878*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71988c4*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7198910*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x719895c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71989a8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71989f4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x7198a40*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x7198a8c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x7198ad8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x7198b24*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x7198b70*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct DateTime : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<System.DateTime>, System.IEquatable<System.DateTime>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable
    {
        static long TicksPerMillisecond = 10000;
        static long TicksPerSecond = 10000000;
        static long TicksPerMinute = 600000000;
        static long TicksPerHour = 36000000000;
        static long TicksPerDay = 864000000000;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static int DaysPerYear = 365;
        static int DaysPer4Years = 1461;
        static int DaysPer100Years = 36524;
        static int DaysPer400Years = 146097;
        static int DaysTo1601 = 584388;
        static int DaysTo1899 = 693593;
        static int DaysTo1970 = 719162;
        static int DaysTo10000 = 3652059;
        static long MinTicks = 0;
        static long MaxTicks = 3155378975999999999;
        static long MaxMillis = 315537897600000;
        static long UnixEpochTicks = 621355968000000000;
        static long FileTimeOffset = 504911232000000000;
        static long DoubleDateOffset = 599264352000000000;
        static long OADateMinAsTicks = 31241376000000000;
        static double OADateMinAsDouble = -657435;
        static double OADateMaxAsDouble = 2958466;
        static int DatePartYear = 0;
        static int DatePartDayOfYear = 1;
        static int DatePartMonth = 2;
        static int DatePartDay = 3;
        static ulong TicksMask = 4611686018427387903;
        static ulong FlagsMask = 13835058055282163712;
        static ulong LocalMask = 9223372036854775808;
        static long TicksCeiling = 4611686018427387904;
        static ulong KindUnspecified = 0;
        static ulong KindUtc = 4611686018427387904;
        static ulong KindLocal = 9223372036854775808;
        static ulong KindLocalAmbiguousDst = 13835058055282163712;
        static int KindShift = 62;
        static string TicksField = "ticks";
        static string DateDataField = "dateData";
        static /*0x0*/ int[] s_daysToMonth365;
        static /*0x8*/ int[] s_daysToMonth366;
        static /*0x10*/ System.DateTime MinValue;
        static /*0x18*/ System.DateTime MaxValue;
        static /*0x20*/ System.DateTime UnixEpoch;
        /*0x10*/ ulong _dateData;

        static /*0x719d9b8*/ DateTime();
        static /*0x719a584*/ int Compare(System.DateTime t1, System.DateTime t2);
        static /*0x7198d5c*/ long DateToTicks(int year, int month, int day);
        static /*0x7198fc0*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x719a320*/ int DaysInMonth(int year, int month);
        static /*0x719a93c*/ System.DateTime FromBinary(long dateData);
        static /*0x719aba8*/ System.DateTime FromBinaryRaw(long dateData);
        static /*0x719ac2c*/ System.DateTime FromFileTime(long fileTime);
        static /*0x719ac9c*/ System.DateTime FromFileTimeUtc(long fileTime);
        static /*0x719ae98*/ System.DateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind);
        static /*0x719b640*/ System.DateTime get_Now();
        static /*0x719a758*/ bool IsLeapYear(int year);
        static /*0x719b8d4*/ System.DateTime Parse(string s);
        static /*0x719baa8*/ System.DateTime Parse(string s, System.IFormatProvider provider);
        static /*0x719bb9c*/ System.DateTime Parse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles);
        static /*0x719bccc*/ System.DateTime ParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x719bf6c*/ System.DateTime ParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x719c7a4*/ bool TryParse(string s, ref System.DateTime result);
        static /*0x719c9ac*/ bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x719caf0*/ bool TryParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x719cda8*/ System.DateTime op_Addition(System.DateTime d, System.TimeSpan t);
        static /*0x7197ac4*/ System.DateTime op_Subtraction(System.DateTime d, System.TimeSpan t);
        static /*0x719cea8*/ System.TimeSpan op_Subtraction(System.DateTime d1, System.DateTime d2);
        static /*0x719cf10*/ bool op_Equality(System.DateTime d1, System.DateTime d2);
        static /*0x719cf78*/ bool op_Inequality(System.DateTime d1, System.DateTime d2);
        static /*0x7197c28*/ bool op_LessThan(System.DateTime t1, System.DateTime t2);
        static /*0x719cfe0*/ bool op_LessThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x7197bbc*/ bool op_GreaterThan(System.DateTime t1, System.DateTime t2);
        static /*0x7197c94*/ bool op_GreaterThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x719d7bc*/ bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, ref System.DateTime result);
        static /*0x719b768*/ System.DateTime get_UtcNow();
        static /*0x719d9ac*/ long GetSystemTimeAsFileTime();
        /*0x7198c48*/ DateTime(long ticks);
        /*0x7198cd4*/ DateTime(ulong dateData);
        /*0x7197ed0*/ DateTime(long ticks, System.DateTimeKind kind);
        /*0x7197fb0*/ DateTime(long ticks, System.DateTimeKind kind, bool isAmbiguousDst);
        /*0x7198cdc*/ DateTime(int year, int month, int day);
        /*0x7198f14*/ DateTime(int year, int month, int day, int hour, int minute, int second);
        /*0x7199094*/ DateTime(int year, int month, int day, int hour, int minute, int second, System.DateTimeKind kind);
        /*0x71991ac*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
        /*0x7199374*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.DateTimeKind kind);
        /*0x7199594*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);
        /*0x71997c0*/ DateTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7199a84*/ long get_InternalTicks();
        /*0x7199a90*/ ulong get_InternalKind();
        /*0x7199a9c*/ System.DateTime Add(System.TimeSpan value);
        /*0x7199c08*/ System.DateTime Add(double value, int scale);
        /*0x7199d30*/ System.DateTime AddDays(double value);
        /*0x7199d9c*/ System.DateTime AddHours(double value);
        /*0x7199e08*/ System.DateTime AddMilliseconds(double value);
        /*0x7199e70*/ System.DateTime AddMinutes(double value);
        /*0x7199ed8*/ System.DateTime AddMonths(int months);
        /*0x719a44c*/ System.DateTime AddSeconds(double value);
        /*0x7199b00*/ System.DateTime AddTicks(long value);
        /*0x719a4b4*/ System.DateTime AddYears(int value);
        /*0x719a5fc*/ int CompareTo(object value);
        /*0x719a6f0*/ int CompareTo(System.DateTime value);
        /*0x719a820*/ bool Equals(object value);
        /*0x719a8d0*/ bool Equals(System.DateTime value);
        /*0x719ada0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x719af0c*/ long ToBinary();
        /*0x719b014*/ System.DateTime get_Date();
        /*0x719b09c*/ int GetDatePart(int part);
        /*0x719a128*/ void GetDatePart(ref int year, ref int month, ref int day);
        /*0x719b298*/ int get_Day();
        /*0x719b2f0*/ System.DayOfWeek get_DayOfWeek();
        /*0x719b388*/ int GetHashCode();
        /*0x719b3e4*/ int get_Hour();
        /*0x719b46c*/ bool IsAmbiguousDaylightSavingTime();
        /*0x7197e04*/ System.DateTimeKind get_Kind();
        /*0x719b4cc*/ int get_Millisecond();
        /*0x719b560*/ int get_Minute();
        /*0x719b5e8*/ int get_Month();
        /*0x719b7cc*/ int get_Second();
        /*0x7197e78*/ long get_Ticks();
        /*0x719b854*/ System.TimeSpan get_TimeOfDay();
        /*0x7197a6c*/ int get_Year();
        /*0x719c1a4*/ System.TimeSpan Subtract(System.DateTime value);
        /*0x719ad48*/ System.DateTime ToLocalTime();
        /*0x719c210*/ System.DateTime ToLocalTime(bool throwOnOverflow);
        /*0x719c3cc*/ string ToString();
        /*0x719c4a4*/ string ToString(string format);
        /*0x719c510*/ string ToString(System.IFormatProvider provider);
        /*0x719c57c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x719c5ec*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x719c744*/ System.DateTime ToUniversalTime();
        /*0x719d04c*/ System.TypeCode GetTypeCode();
        /*0x719d054*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x719d0d8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x719d15c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x719d1e0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x719d264*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x719d2e8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x719d36c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x719d3f0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x719d474*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x719d4f8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x719d57c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x719d600*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x719d684*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x719d708*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x719d710*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x719d9b0*/ long ToBinaryRaw();
    }

    enum DateTimeKind
    {
        Unspecified = 0,
        Utc = 1,
        Local = 2,
    }

    struct DateTimeOffset : System.IComparable, System.IFormattable, System.IComparable<System.DateTimeOffset>, System.IEquatable<System.DateTimeOffset>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static /*0x0*/ System.DateTimeOffset MinValue;
        static /*0x10*/ System.DateTimeOffset MaxValue;
        static /*0x20*/ System.DateTimeOffset UnixEpoch;
        /*0x10*/ System.DateTime _dateTime;
        /*0x18*/ short _offsetMinutes;

        static /*0x71a1404*/ DateTimeOffset();
        static /*0x719e38c*/ System.DateTimeOffset get_Now();
        static /*0x719e3f8*/ System.DateTimeOffset get_UtcNow();
        static /*0x719ee60*/ int Compare(System.DateTimeOffset first, System.DateTimeOffset second);
        static /*0x719f2cc*/ System.DateTimeOffset FromFileTime(long fileTime);
        static /*0x719f340*/ System.DateTimeOffset FromUnixTimeSeconds(long seconds);
        static /*0x719f914*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider);
        static /*0x719f984*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x719fd04*/ System.DateTimeOffset ParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x71a0b68*/ bool TryParse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x71a0e7c*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x719db80*/ short ValidateOffset(System.TimeSpan offset);
        static /*0x719dcd8*/ System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset);
        static /*0x719fb30*/ System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
        static /*0x71a11f0*/ System.DateTimeOffset op_Implicit(System.DateTime dateTime);
        static /*0x71a1218*/ System.TimeSpan op_Subtraction(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x71a12bc*/ bool op_Equality(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x71a1360*/ bool op_Inequality(System.DateTimeOffset left, System.DateTimeOffset right);
        /*0x719dac8*/ DateTimeOffset(long ticks, System.TimeSpan offset);
        /*0x719ddf4*/ DateTimeOffset(System.DateTime dateTime);
        /*0x719df08*/ DateTimeOffset(System.DateTime dateTime, System.TimeSpan offset);
        /*0x719e100*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, System.TimeSpan offset);
        /*0x719e1cc*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.TimeSpan offset);
        /*0x719e2a8*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, System.TimeSpan offset);
        /*0x719f6f0*/ DateTimeOffset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x719e464*/ System.DateTime get_DateTime();
        /*0x719e58c*/ System.DateTime get_UtcDateTime();
        /*0x719e5e8*/ System.DateTime get_LocalDateTime();
        /*0x719e680*/ System.DateTimeOffset ToOffset(System.TimeSpan offset);
        /*0x719e4b8*/ System.DateTime get_ClockDateTime();
        /*0x719e748*/ int get_Day();
        /*0x719e7e0*/ int get_Hour();
        /*0x719e878*/ int get_Millisecond();
        /*0x719e910*/ int get_Minute();
        /*0x719e9a8*/ int get_Month();
        /*0x719e71c*/ System.TimeSpan get_Offset();
        /*0x719ea40*/ int get_Second();
        /*0x719ead8*/ long get_Ticks();
        /*0x719eb70*/ System.TimeSpan get_TimeOfDay();
        /*0x719ec08*/ int get_Year();
        /*0x719eca0*/ System.DateTimeOffset Add(System.TimeSpan timeSpan);
        /*0x719ed80*/ System.DateTimeOffset AddTicks(long ticks);
        /*0x719ef04*/ int System.IComparable.CompareTo(object obj);
        /*0x719f050*/ int CompareTo(System.DateTimeOffset other);
        /*0x719f124*/ bool Equals(object obj);
        /*0x719f21c*/ bool Equals(System.DateTimeOffset other);
        /*0x719f4a8*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x719f628*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x719f87c*/ int GetHashCode();
        /*0x71a0070*/ System.TimeSpan Subtract(System.DateTimeOffset value);
        /*0x71a011c*/ System.DateTimeOffset ToLocalTime();
        /*0x71a0174*/ System.DateTimeOffset ToLocalTime(bool throwOnOverflow);
        /*0x71a0230*/ string ToString();
        /*0x71a059c*/ string ToString(string format);
        /*0x71a065c*/ string ToString(System.IFormatProvider formatProvider);
        /*0x71a071c*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x71a07e8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
        /*0x71a0af4*/ System.DateTimeOffset ToUniversalTime();
    }

    enum DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    class DivideByZeroException : System.ArithmeticException
    {
        /*0x71a1508*/ DivideByZeroException();
        /*0x71a1564*/ DivideByZeroException(string message);
        /*0x71a1588*/ DivideByZeroException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class DllNotFoundException : System.TypeLoadException
    {
        /*0x71a1590*/ DllNotFoundException();
        /*0x71a15ec*/ DllNotFoundException(string message);
        /*0x71a1610*/ DllNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Double : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<double>, System.IEquatable<double>, System.ISpanFormattable
    {
        /*0x10*/ double m_value;

        static /*0x71a1618*/ bool IsFinite(double d);
        static /*0x71a162c*/ bool IsInfinity(double d);
        static /*0x71a1644*/ bool IsNaN(double d);
        static /*0x71a165c*/ bool IsNegative(double d);
        static /*0x71a1668*/ bool IsNegativeInfinity(double d);
        static /*0x71a167c*/ bool IsPositiveInfinity(double d);
        static /*0x71a1b90*/ double Parse(string s);
        static /*0x71a1c54*/ double Parse(string s, System.IFormatProvider provider);
        static /*0x71a1d28*/ double Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71a1e0c*/ bool TryParse(string s, ref double result);
        static /*0x71a2144*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref double result);
        static /*0x71a1e8c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref double result);
        /*0x71a1690*/ int CompareTo(object value);
        /*0x71a1768*/ int CompareTo(double value);
        /*0x71a17c4*/ bool Equals(object obj);
        /*0x71a1844*/ bool Equals(double obj);
        /*0x71a1890*/ int GetHashCode();
        /*0x71a18b0*/ string ToString();
        /*0x71a192c*/ string ToString(string format);
        /*0x71a19b4*/ string ToString(System.IFormatProvider provider);
        /*0x71a1a40*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71a1ad0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71a21ec*/ System.TypeCode GetTypeCode();
        /*0x71a21f4*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71a2258*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71a22dc*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71a2340*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71a23a4*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71a2408*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71a246c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71a24d0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71a2534*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71a2598*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71a25fc*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71a2660*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71a2668*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71a26cc*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71a2750*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class EntryPointNotFoundException : System.TypeLoadException
    {
        /*0x71a27f0*/ EntryPointNotFoundException();
        /*0x71a284c*/ EntryPointNotFoundException(string message);
        /*0x71a2870*/ EntryPointNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class EventArgs
    {
        static /*0x0*/ System.EventArgs Empty;

        static /*0x71a2880*/ EventArgs();
        /*0x71a2878*/ EventArgs();
    }

    class EventHandler : System.MulticastDelegate
    {
        /*0x71a28e8*/ EventHandler(object object, nint method);
        /*0x71a29f4*/ void Invoke(object sender, System.EventArgs e);
    }

    class EventHandler<TEventArgs> : System.MulticastDelegate
    {
        EventHandler(object object, nint method);
        /*0x3910ae8*/ void Invoke(object sender, TEventArgs e);
    }

    class ExecutionEngineException : System.SystemException
    {
        /*0x71a2a08*/ ExecutionEngineException();
        /*0x71a2a64*/ ExecutionEngineException(string message);
        /*0x71a2a88*/ ExecutionEngineException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FieldAccessException : System.MemberAccessException
    {
        /*0x71a2a90*/ FieldAccessException();
        /*0x71a2aec*/ FieldAccessException(string message);
        /*0x71a2b10*/ FieldAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FlagsAttribute : System.Attribute
    {
        /*0x71a2b18*/ FlagsAttribute();
    }

    class FormatException : System.SystemException
    {
        /*0x71a2b20*/ FormatException();
        /*0x71a2b7c*/ FormatException(string message);
        /*0x71a2ba0*/ FormatException(string message, System.Exception innerException);
        /*0x71a2bc4*/ FormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FormattableString : System.IFormattable
    {
        /*0x71a2c48*/ FormattableString();
        /*0x38148bc*/ string get_Format();
        /*0x38148bc*/ object[] GetArguments();
        /*0x3814574*/ int get_ArgumentCount();
        /*0x3814964*/ object GetArgument(int index);
        /*0x3814a3c*/ string ToString(System.IFormatProvider formatProvider);
        /*0x71a2bcc*/ string System.IFormattable.ToString(string ignored, System.IFormatProvider formatProvider);
        /*0x71a2be0*/ string ToString();
    }

    class Gen2GcCallback : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    {
        /*0x10*/ System.Func<object, bool> _callback;
        /*0x18*/ System.Runtime.InteropServices.GCHandle _weakTargetObj;

        static /*0x71a2c58*/ void Register(System.Func<object, bool> callback, object targetObj);
        /*0x71a2c50*/ Gen2GcCallback();
        /*0x71a2ce4*/ void Setup(System.Func<object, bool> callback, object targetObj);
        /*0x71a2d20*/ void Finalize();
    }

    class DateTimeFormat
    {
        static /*0x0*/ System.TimeSpan NullOffset;
        static /*0x8*/ char[] allStandardFormats;
        static /*0x10*/ System.Globalization.DateTimeFormatInfo InvariantFormatInfo;
        static /*0x18*/ string[] InvariantAbbreviatedMonthNames;
        static /*0x20*/ string[] InvariantAbbreviatedDayNames;
        static /*0x28*/ string[] fixedNumberFormats;

        static /*0x71a6118*/ DateTimeFormat();
        static /*0x71a2f30*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len);
        static /*0x71a2fa0*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit);
        static /*0x71a3098*/ void HebrewFormatDigits(System.Text.StringBuilder outputBuffer, int digits);
        static /*0x71a3114*/ int ParseRepeatPattern(System.ReadOnlySpan<char> format, int pos, char patternChar);
        static /*0x71a319c*/ string FormatDayOfWeek(int dayOfWeek, int repeat, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a31d0*/ string FormatMonth(int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a3204*/ string FormatHebrewMonthName(System.DateTime time, int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a32c4*/ int ParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result);
        static /*0x71a346c*/ int ParseNextChar(System.ReadOnlySpan<char> format, int pos);
        static /*0x71a34dc*/ bool IsUseGenitiveForm(System.ReadOnlySpan<char> format, int index, int tokenLen, char patternToMatch);
        static /*0x71a3634*/ System.Text.StringBuilder FormatCustomized(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x71a476c*/ void FormatCustomizedTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.ReadOnlySpan<char> format, int tokenLen, bool timeOnly, System.Text.StringBuilder result);
        static /*0x71a4b0c*/ void FormatCustomizedRoundripTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x71a4d5c*/ void Append2DigitNumber(System.Text.StringBuilder result, int val);
        static /*0x71a4db8*/ string GetRealFormat(System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a505c*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.DateTime dateTime, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.TimeSpan offset);
        static /*0x719c42c*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider);
        static /*0x71a02ec*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0x719c68c*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71a08e8*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0x71a5c54*/ System.Text.StringBuilder FormatStringBuilder(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset);
        static /*0x71a5414*/ bool TryFormatO(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0x71a58f0*/ bool TryFormatR(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0x71a5f80*/ void WriteTwoDecimalDigits(uint value, System.Span<char> destination, int offset);
        static /*0x71a5fcc*/ void WriteFourDecimalDigits(uint value, System.Span<char> buffer, int startingIndex);
        static /*0x71a606c*/ void WriteDigits(ulong value, System.Span<char> buffer);
        static /*0x71a5410*/ void InvalidFormatForLocal(System.ReadOnlySpan<char> format, System.DateTime dateTime);
    }

    class DateTimeParse
    {
        static /*0x0*/ System.DateTimeParse.MatchNumberDelegate m_hebrewNumberParser;
        static /*0x8*/ System.DateTimeParse.DS[][] dateParsingStates;

        static /*0x71af850*/ DateTimeParse();
        static /*0x719be64*/ System.DateTime ParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x719ff1c*/ System.DateTime ParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.TimeSpan offset);
        static /*0x719cc80*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x71a1074*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x71a644c*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x719c0ac*/ System.DateTime ParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x71a6f64*/ bool TryParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x71a71cc*/ bool MatchWord(ref System.__DTString str, string target);
        static /*0x71a7378*/ bool GetTimeZoneName(ref System.__DTString str);
        static /*0x71a7428*/ bool IsDigit(char ch);
        static /*0x71a743c*/ bool ParseFraction(ref System.__DTString str, ref double result);
        static /*0x71a7528*/ bool ParseTimeZone(ref System.__DTString str, ref System.TimeSpan result);
        static /*0x71a783c*/ bool HandleTimeZone(ref System.__DTString str, ref System.DateTimeResult result);
        static /*0x71a79c8*/ bool Lex(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeToken dtok, ref System.DateTimeRawInfo raw, ref System.DateTimeResult result, ref System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x71a8ad8*/ System.Globalization.Calendar GetJapaneseCalendarDefaultInstance();
        static /*0x71a8bc0*/ System.Globalization.Calendar GetTaiwanCalendarDefaultInstance();
        static /*0x71a8ca8*/ bool VerifyValidPunctuation(ref System.__DTString str);
        static /*0x71a8e68*/ bool GetYearMonthDayOrder(string datePattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x71a910c*/ bool GetYearMonthOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x71a92c8*/ bool GetMonthDayOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x71a94c4*/ bool TryAdjustYear(ref System.DateTimeResult result, int year, ref int adjustedYear);
        static /*0x71a9588*/ bool SetDateYMD(ref System.DateTimeResult result, int year, int month, int day);
        static /*0x71a95f8*/ bool SetDateMDY(ref System.DateTimeResult result, int month, int day, int year);
        static /*0x71a9674*/ bool SetDateDMY(ref System.DateTimeResult result, int day, int month, int year);
        static /*0x71a96f0*/ bool SetDateYDM(ref System.DateTimeResult result, int year, int day, int month);
        static /*0x71a976c*/ void GetDefaultYear(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x71a9908*/ bool GetDayOfNN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a9a7c*/ bool GetDayOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a9d30*/ bool GetDayOfMN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a9f54*/ bool GetHebrewDayOfNM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71aa0b0*/ bool GetDayOfNM(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71aa2d4*/ bool GetDayOfMNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71aa5b8*/ bool GetDayOfYNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71aa6f0*/ bool GetDayOfNNY(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71aa864*/ bool GetDayOfYMN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aa920*/ bool GetDayOfYN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aa9dc*/ bool GetDayOfYM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aaa78*/ void AdjustTimeMark(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeRawInfo raw);
        static /*0x71aab38*/ bool AdjustHour(ref int hour, System.DateTimeParse.TM timeMark);
        static /*0x71aab80*/ bool GetTimeOfN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aabdc*/ bool GetTimeOfNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aac4c*/ bool GetTimeOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aacd0*/ bool GetDateOfDSN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aad24*/ bool GetDateOfNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71aadd8*/ bool GetDateOfNNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71ab004*/ bool ProcessDateTimeSuffix(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, ref System.DateTimeToken dtok);
        static /*0x71ab0fc*/ bool ProcessHebrewTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71a875c*/ bool ProcessTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x719b9b8*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x719fbfc*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.TimeSpan offset);
        static /*0x719c89c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x71a0d18*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x71ab478*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x71ac4d0*/ bool DetermineTimeZoneAdjustments(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles, bool bTimeOnly);
        static /*0x71ac71c*/ bool DateTimeOffsetTimeZonePostProcessing(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles);
        static /*0x71ac954*/ bool AdjustTimeZoneToUniversal(ref System.DateTimeResult result);
        static /*0x71aca7c*/ bool AdjustTimeZoneToLocal(ref System.DateTimeResult result, bool bTimeOnly);
        static /*0x71abc38*/ bool ParseISO8601(ref System.DateTimeRawInfo raw, ref System.__DTString str, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x71acda0*/ bool MatchHebrewDigits(ref System.__DTString str, int digitLen, ref int number);
        static /*0x71acd18*/ bool ParseDigits(ref System.__DTString str, int digitLen, ref int result);
        static /*0x71aceb0*/ bool ParseDigits(ref System.__DTString str, int minDigitLen, int maxDigitLen, ref int result);
        static /*0x71ad054*/ bool ParseFractionExact(ref System.__DTString str, int maxDigitLen, ref double result);
        static /*0x71ad2bc*/ bool ParseSign(ref System.__DTString str, ref bool result);
        static /*0x71ad374*/ bool ParseTimeZoneOffset(ref System.__DTString str, int len, ref System.TimeSpan result);
        static /*0x71ad540*/ bool MatchAbbreviatedMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71ad71c*/ bool MatchMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71ad94c*/ bool MatchAbbreviatedDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71adab0*/ bool MatchDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71adc14*/ bool MatchEraName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71addb0*/ bool MatchTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x71adf48*/ bool MatchAbbreviatedTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x71ae098*/ bool CheckNewValue(ref int currentValue, int newValue, char patternChar, ref System.DateTimeResult result);
        static /*0x71a9808*/ System.DateTime GetDateTimeNow(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x71ac248*/ bool CheckDefaultDateTime(ref System.DateTimeResult result, ref System.Globalization.Calendar cal, System.Globalization.DateTimeStyles styles);
        static /*0x71ae148*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.ParsingInfo parseInfo, ref System.DateTimeResult result);
        static /*0x71ae51c*/ bool ParseJapaneseEraStart(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71ae624*/ bool ParseByFormat(ref System.__DTString str, ref System.__DTString format, ref System.ParsingInfo parseInfo, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x71af760*/ bool TryParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result, ref int returnValue);
        static /*0x71a6704*/ bool DoStrictParse(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> formatParam, System.Globalization.DateTimeStyles styles, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x71a6550*/ System.Exception GetDateTimeParseException(ref System.DateTimeResult result);

        class MatchNumberDelegate : System.MulticastDelegate
        {
            /*0x71b0134*/ MatchNumberDelegate(object object, nint method);
            /*0x71b01e8*/ bool Invoke(ref System.__DTString str, int digitLen, ref int result);
        }

        enum DTT
        {
            End = 0,
            NumEnd = 1,
            NumAmpm = 2,
            NumSpace = 3,
            NumDatesep = 4,
            NumTimesep = 5,
            MonthEnd = 6,
            MonthSpace = 7,
            MonthDatesep = 8,
            NumDatesuff = 9,
            NumTimesuff = 10,
            DayOfWeek = 11,
            YearSpace = 12,
            YearDateSep = 13,
            YearEnd = 14,
            TimeZone = 15,
            Era = 16,
            NumUTCTimeMark = 17,
            Unk = 18,
            NumLocalTimeMark = 19,
            Max = 20,
        }

        enum TM
        {
            NotSet = -1,
            AM = 0,
            PM = 1,
        }

        enum DS
        {
            BEGIN = 0,
            N = 1,
            NN = 2,
            D_Nd = 3,
            D_NN = 4,
            D_NNd = 5,
            D_M = 6,
            D_MN = 7,
            D_NM = 8,
            D_MNd = 9,
            D_NDS = 10,
            D_Y = 11,
            D_YN = 12,
            D_YNd = 13,
            D_YM = 14,
            D_YMd = 15,
            D_S = 16,
            T_S = 17,
            T_Nt = 18,
            T_NNt = 19,
            ERROR = 20,
            DX_NN = 21,
            DX_NNN = 22,
            DX_MN = 23,
            DX_NM = 24,
            DX_MNN = 25,
            DX_DS = 26,
            DX_DSN = 27,
            DX_NDS = 28,
            DX_NNDS = 29,
            DX_YNN = 30,
            DX_YMN = 31,
            DX_YN = 32,
            DX_YM = 33,
            TX_N = 34,
            TX_NN = 35,
            TX_NNN = 36,
            TX_TS = 37,
            DX_NNY = 38,
        }

        class <>c
        {
            static /*0x0*/ System.DateTimeParse.<> <>9;
            static /*0x8*/ System.Func<System.DateTimeParse.MatchNumberDelegate> <>9__98_0;

            static /*0x71b01fc*/ <>c();
            /*0x71b0264*/ <>c();
            /*0x71b026c*/ System.DateTimeParse.MatchNumberDelegate <DoStrictParse>b__98_0();
        }
    }

    struct __DTString
    {
        static /*0x0*/ char[] WhiteSpaceChecks;
        /*0x10*/ System.ReadOnlySpan<char> Value;
        /*0x20*/ int Index;
        /*0x24*/ char m_current;
        /*0x28*/ System.Globalization.CompareInfo m_info;
        /*0x30*/ bool m_checkDigitToken;

        static /*0x71b1f44*/ __DTString();
        /*0x71b0314*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi, bool checkDigitToken);
        /*0x71b03a0*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi);
        /*0x71b02d8*/ int get_Length();
        /*0x71b0464*/ System.Globalization.CompareInfo get_CompareInfo();
        /*0x71b046c*/ bool GetNext();
        /*0x71b0518*/ bool AtEnd();
        /*0x71b0598*/ bool Advance(int count);
        /*0x71b0650*/ void GetRegularToken(ref System.TokenType tokenType, ref int tokenValue, System.Globalization.DateTimeFormatInfo dtfi);
        /*0x71b0978*/ System.TokenType GetSeparatorToken(System.Globalization.DateTimeFormatInfo dtfi, ref int indexBeforeSeparator, ref char charBeforeSeparator);
        /*0x71b0bd8*/ bool MatchSpecifiedWord(string target);
        /*0x71b0cfc*/ bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength);
        /*0x71b1140*/ bool Match(string str);
        /*0x71b1290*/ bool Match(char ch);
        /*0x71b1364*/ int MatchLongestWords(string[] words, ref int maxMatchStrLen);
        /*0x71b1460*/ int GetRepeatCount();
        /*0x71b153c*/ bool GetNextDigit();
        /*0x71b1618*/ char GetChar();
        /*0x71b1640*/ int GetDigit();
        /*0x71b166c*/ void SkipWhiteSpaces();
        /*0x71b0a7c*/ bool SkipWhiteSpaceCurrent();
        /*0x71b1758*/ void TrimTail();
        /*0x71b1870*/ void RemoveTrailingInQuoteSpaces();
        /*0x71b1a90*/ void RemoveLeadingInQuoteSpaces();
        /*0x71b1d14*/ System.DTSubString GetSubString();
        /*0x71b1e94*/ void ConsumeSubString(System.DTSubString sub);
    }

    enum DTSubStringType
    {
        Unknown = 0,
        Invalid = 1,
        Number = 2,
        End = 3,
        Other = 4,
    }

    struct DTSubString
    {
        /*0x10*/ System.ReadOnlySpan<char> s;
        /*0x20*/ int index;
        /*0x24*/ int length;
        /*0x28*/ System.DTSubStringType type;
        /*0x2c*/ int value;

        /*0x71b1fd8*/ char get_Item(int relativeIndex);
    }

    struct DateTimeToken
    {
        /*0x10*/ System.DateTimeParse.DTT dtt;
        /*0x14*/ System.TokenType suffix;
        /*0x18*/ int num;
    }

    struct DateTimeRawInfo
    {
        /*0x10*/ int* num;
        /*0x18*/ int numCount;
        /*0x1c*/ int month;
        /*0x20*/ int year;
        /*0x24*/ int dayOfWeek;
        /*0x28*/ int era;
        /*0x2c*/ System.DateTimeParse.TM timeMark;
        /*0x30*/ double fraction;
        /*0x38*/ bool hasSameDateAndTimeSeparators;

        /*0x71b2004*/ void Init(int* numberBuffer);
        /*0x71b2024*/ void AddNumber(int value);
        /*0x71b203c*/ int GetNumber(int index);
    }

    enum ParseFailureKind
    {
        None = 0,
        ArgumentNull = 1,
        Format = 2,
        FormatWithParameter = 3,
        FormatWithOriginalDateTime = 4,
        FormatWithFormatSpecifier = 5,
        FormatWithOriginalDateTimeAndParameter = 6,
        FormatBadDateTimeCalendar = 7,
    }

    enum ParseFlags
    {
        HaveYear = 1,
        HaveMonth = 2,
        HaveDay = 4,
        HaveHour = 8,
        HaveMinute = 16,
        HaveSecond = 32,
        HaveTime = 64,
        HaveDate = 128,
        TimeZoneUsed = 256,
        TimeZoneUtc = 512,
        ParsedMonthName = 1024,
        CaptureOffset = 2048,
        YearDefault = 4096,
        Rfc1123Pattern = 8192,
        UtcSortPattern = 16384,
    }

    struct DateTimeResult
    {
        /*0x10*/ int Year;
        /*0x14*/ int Month;
        /*0x18*/ int Day;
        /*0x1c*/ int Hour;
        /*0x20*/ int Minute;
        /*0x24*/ int Second;
        /*0x28*/ double fraction;
        /*0x30*/ int era;
        /*0x34*/ System.ParseFlags flags;
        /*0x38*/ System.TimeSpan timeZoneOffset;
        /*0x40*/ System.Globalization.Calendar calendar;
        /*0x48*/ System.DateTime parsedDate;
        /*0x50*/ System.ParseFailureKind failure;
        /*0x58*/ string failureMessageID;
        /*0x60*/ object failureMessageFormatArgument;
        /*0x68*/ string failureArgumentName;
        /*0x70*/ System.ReadOnlySpan<char> originalDateTimeString;
        /*0x80*/ System.ReadOnlySpan<char> failedFormatSpecifier;

        /*0x71b2048*/ void Init(System.ReadOnlySpan<char> originalDateTimeString);
        /*0x71b206c*/ void SetDate(int year, int month, int day);
        /*0x71b2078*/ void SetBadFormatSpecifierFailure();
        /*0x71b210c*/ void SetBadFormatSpecifierFailure(System.ReadOnlySpan<char> failedFormatSpecifier);
        /*0x71b2170*/ void SetBadDateTimeFailure();
        /*0x71b21c0*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID);
        /*0x71b21cc*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
        /*0x71b21d8*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName);
    }

    struct ParsingInfo
    {
        /*0x10*/ System.Globalization.Calendar calendar;
        /*0x18*/ int dayOfWeek;
        /*0x1c*/ System.DateTimeParse.TM timeMark;
        /*0x20*/ bool fUseHour12;
        /*0x21*/ bool fUseTwoDigitYear;
        /*0x22*/ bool fAllowInnerWhite;
        /*0x23*/ bool fAllowTrailingWhite;
        /*0x24*/ bool fCustomNumberParser;
        /*0x28*/ System.DateTimeParse.MatchNumberDelegate parseNumberDelegate;

        /*0x71b21e8*/ void Init();
    }

    enum TokenType
    {
        NumberToken = 1,
        YearNumberToken = 2,
        Am = 3,
        Pm = 4,
        MonthToken = 5,
        EndOfString = 6,
        DayOfWeekToken = 7,
        TimeZoneToken = 8,
        EraToken = 9,
        DateWordToken = 10,
        UnknownToken = 11,
        HebrewNumber = 12,
        JapaneseEraToken = 13,
        TEraToken = 14,
        IgnorableSymbol = 15,
        SEP_Unk = 256,
        SEP_End = 512,
        SEP_Space = 768,
        SEP_Am = 1024,
        SEP_Pm = 1280,
        SEP_Date = 1536,
        SEP_Time = 1792,
        SEP_YearSuff = 2048,
        SEP_MonthSuff = 2304,
        SEP_DaySuff = 2560,
        SEP_HourSuff = 2816,
        SEP_MinuteSuff = 3072,
        SEP_SecondSuff = 3328,
        SEP_LocalTimeMark = 3584,
        SEP_DateOrOffset = 3840,
        RegularTokenMask = 255,
        SeparatorTokenMask = 65280,
    }

    struct Guid : System.IFormattable, System.IComparable, System.IComparable<System.Guid>, System.IEquatable<System.Guid>, System.ISpanFormattable
    {
        static /*0x0*/ System.Guid Empty;
        /*0x10*/ int _a;
        /*0x14*/ short _b;
        /*0x16*/ short _c;
        /*0x18*/ byte _d;
        /*0x19*/ byte _e;
        /*0x1a*/ byte _f;
        /*0x1b*/ byte _g;
        /*0x1c*/ byte _h;
        /*0x1d*/ byte _i;
        /*0x1e*/ byte _j;
        /*0x1f*/ byte _k;

        static /*0x71b21f4*/ System.Guid NewGuid();
        static /*0x71b28e0*/ System.Guid Parse(string input);
        static /*0x71b2974*/ System.Guid Parse(System.ReadOnlySpan<char> input);
        static /*0x71b29d8*/ bool TryParse(string input, ref System.Guid result);
        static /*0x71b2a64*/ bool TryParse(System.ReadOnlySpan<char> input, ref System.Guid result);
        static /*0x71b2ab0*/ bool TryParseExact(string input, string format, ref System.Guid result);
        static /*0x71b2b74*/ bool TryParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, ref System.Guid result);
        static /*0x71b2528*/ bool TryParseGuid(System.ReadOnlySpan<char> guidString, System.Guid.GuidStyles flags, ref System.Guid.GuidResult result);
        static /*0x71b2fcc*/ bool TryParseGuidWithHexPrefix(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x71b3608*/ bool TryParseGuidWithNoStyle(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x71b2ce0*/ bool TryParseGuidWithDashes(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x71b3ccc*/ bool StringToShort(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x71b4064*/ bool StringToShort(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x71b3ca0*/ bool StringToInt(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x71b3e6c*/ bool StringToInt(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x71b3d10*/ bool StringToLong(System.ReadOnlySpan<char> str, ref int parsePos, int flags, ref long result, ref System.Guid.GuidResult parseResult);
        static /*0x71b39a0*/ System.ReadOnlySpan<char> EatAllWhitespace(System.ReadOnlySpan<char> str);
        static /*0x71b3bd4*/ bool IsHexPrefix(System.ReadOnlySpan<char> str, int i);
        static /*0x71b480c*/ bool op_Equality(System.Guid a, System.Guid b);
        static /*0x71b4848*/ bool op_Inequality(System.Guid a, System.Guid b);
        static /*0x71b4888*/ char HexToChar(int a);
        static /*0x71b48a4*/ int HexsToChars(char* guidChars, int a, int b);
        static /*0x71b4920*/ int HexsToCharsHexOutput(char* guidChars, int a, int b);
        /*0x71b2240*/ Guid(byte[] b);
        /*0x71b22d4*/ Guid(System.ReadOnlySpan<byte> b);
        /*0x71b23f8*/ Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
        /*0x71b2438*/ Guid(string g);
        /*0x71b40a8*/ void WriteByteHelper(System.Span<byte> destination);
        /*0x71b41b8*/ byte[] ToByteArray();
        /*0x71b424c*/ string ToString();
        /*0x71b448c*/ int GetHashCode();
        /*0x71b44a4*/ bool Equals(object o);
        /*0x71b454c*/ bool Equals(System.Guid g);
        /*0x71b4590*/ int GetResult(uint me, uint them);
        /*0x71b45a0*/ int CompareTo(object value);
        /*0x71b4728*/ int CompareTo(System.Guid value);
        /*0x71b4884*/ string ToString(string format);
        /*0x71b4294*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71b49bc*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format);
        /*0x71b4df8*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);

        enum GuidStyles
        {
            None = 0,
            AllowParenthesis = 1,
            AllowBraces = 2,
            AllowDashes = 4,
            AllowHexPrefix = 8,
            RequireParenthesis = 16,
            RequireBraces = 32,
            RequireDashes = 64,
            RequireHexPrefix = 128,
            HexFormat = 160,
            NumberFormat = 0,
            DigitFormat = 64,
            BraceFormat = 96,
            ParenthesisFormat = 80,
            Any = 15,
        }

        enum GuidParseThrowStyle
        {
            None = 0,
            All = 1,
            AllButOverflow = 2,
        }

        enum ParseFailureKind
        {
            None = 0,
            ArgumentNull = 1,
            Format = 2,
            FormatWithParameter = 3,
            NativeException = 4,
            FormatWithInnerException = 5,
        }

        struct GuidResult
        {
            /*0x10*/ System.Guid _parsedGuid;
            /*0x20*/ System.Guid.GuidParseThrowStyle _throwStyle;
            /*0x24*/ System.Guid.ParseFailureKind _failure;
            /*0x28*/ string _failureMessageID;
            /*0x30*/ object _failureMessageFormatArgument;
            /*0x38*/ string _failureArgumentName;
            /*0x40*/ System.Exception _innerException;

            /*0x71b4dfc*/ void Init(System.Guid.GuidParseThrowStyle canThrow);
            /*0x71b4098*/ void SetFailure(System.Exception nativeException);
            /*0x71b2cd0*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID);
            /*0x71b3c94*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0x71b3904*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, System.Exception innerException);
            /*0x71b2768*/ System.Exception GetGuidParseException();
        }
    }

    struct HashCode
    {
        static /*0x0*/ uint s_seed;
        /*0x10*/ uint _v1;
        /*0x14*/ uint _v2;
        /*0x18*/ uint _v3;
        /*0x1c*/ uint _v4;
        /*0x20*/ uint _queue1;
        /*0x24*/ uint _queue2;
        /*0x28*/ uint _queue3;
        /*0x2c*/ uint _length;

        static /*0x71b5690*/ HashCode();
        static /*0x71b4e04*/ uint GenerateGlobalSeed();
        static /*0x3910ae8*/ int Combine<T1>(T1 value1);
        static /*0x3910ae8*/ int Combine<T1, T2>(T1 value1, T2 value2);
        static /*0x3910ae8*/ int Combine<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4);
        static /*0x3910ae8*/ int Combine<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
        static /*0x3910ae8*/ int Combine<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
        static /*0x3910ae8*/ int Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
        static /*0x71b4e28*/ uint Rol(uint value, int count);
        static /*0x71b4e34*/ void Initialize(ref uint v1, ref uint v2, ref uint v3, ref uint v4);
        static /*0x71b4eec*/ uint Round(uint hash, uint input);
        static /*0x71b4f64*/ uint QueueRound(uint hash, uint queuedValue);
        static /*0x71b4fdc*/ uint MixState(uint v1, uint v2, uint v3, uint v4);
        static /*0x71b5080*/ uint MixEmptyState();
        static /*0x71b50e4*/ uint MixFinal(uint hash);
        /*0x3910ae8*/ void Add<T>(T value);
        /*0x71b510c*/ void Add(int value);
        /*0x71b53a4*/ int ToHashCode();
        /*0x71b55dc*/ int GetHashCode();
        /*0x71b5648*/ bool Equals(object obj);
    }

    interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }

    interface IAsyncResult
    {
        /*0x3813ffc*/ bool get_IsCompleted();
        /*0x38148bc*/ System.Threading.WaitHandle get_AsyncWaitHandle();
        /*0x38148bc*/ object get_AsyncState();
        /*0x3813ffc*/ bool get_CompletedSynchronously();
    }

    interface ICloneable
    {
        /*0x38148bc*/ object Clone();
    }

    interface IComparable
    {
        /*0x381467c*/ int CompareTo(object obj);
    }

    interface IComparable<T>
    {
        /*0x3910ae8*/ int CompareTo(T other);
    }

    interface IConvertible
    {
        /*0x3814574*/ System.TypeCode GetTypeCode();
        /*0x38141c4*/ bool ToBoolean(System.IFormatProvider provider);
        char ToChar(System.IFormatProvider provider);
        sbyte ToSByte(System.IFormatProvider provider);
        /*0x38141c4*/ byte ToByte(System.IFormatProvider provider);
        short ToInt16(System.IFormatProvider provider);
        ushort ToUInt16(System.IFormatProvider provider);
        /*0x381467c*/ int ToInt32(System.IFormatProvider provider);
        /*0x38156f0*/ uint ToUInt32(System.IFormatProvider provider);
        long ToInt64(System.IFormatProvider provider);
        ulong ToUInt64(System.IFormatProvider provider);
        float ToSingle(System.IFormatProvider provider);
        double ToDouble(System.IFormatProvider provider);
        decimal ToDecimal(System.IFormatProvider provider);
        System.DateTime ToDateTime(System.IFormatProvider provider);
        /*0x3814a3c*/ string ToString(System.IFormatProvider provider);
        /*0x3814b90*/ object ToType(System.Type conversionType, System.IFormatProvider provider);
    }

    interface ICustomFormatter
    {
        /*0x3814c14*/ string Format(string format, object arg, System.IFormatProvider formatProvider);
    }

    interface IDisposable
    {
        /*0x38159dc*/ void Dispose();
    }

    interface IEquatable<T>
    {
        /*0x3910ae8*/ bool Equals(T other);
    }

    interface IFormatProvider
    {
        /*0x3814a3c*/ object GetFormat(System.Type formatType);
    }

    interface IFormattable
    {
        /*0x3814b90*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    interface IObservable<T>
    {
        /*0x3814a3c*/ System.IDisposable Subscribe(System.IObserver<T> observer);
    }

    interface IObserver<T>
    {
        /*0x3910ae8*/ void OnNext(T value);
        /*0x3816710*/ void OnError(System.Exception error);
        /*0x38159dc*/ void OnCompleted();
    }

    interface IProgress<T>
    {
        /*0x3910ae8*/ void Report(T value);
    }

    interface ISpanFormattable
    {
        bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
    }

    class IndexOutOfRangeException : System.SystemException
    {
        /*0x71b56f0*/ IndexOutOfRangeException();
        /*0x71b574c*/ IndexOutOfRangeException(string message);
        /*0x71b5770*/ IndexOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InsufficientExecutionStackException : System.SystemException
    {
        /*0x71b5778*/ InsufficientExecutionStackException();
        /*0x71b57d4*/ InsufficientExecutionStackException(string message);
        /*0x71b57f8*/ InsufficientExecutionStackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Int16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<short>, System.IEquatable<short>, System.ISpanFormattable
    {
        /*0x10*/ short m_value;

        static /*0x71b6730*/ short Parse(string s, System.IFormatProvider provider);
        static /*0x71b6958*/ short Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71b67bc*/ short Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x71b6bd0*/ bool TryParse(string s, ref short result);
        static /*0x71b6d14*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref short result);
        static /*0x71b6c50*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref short result);
        /*0x71b5800*/ int CompareTo(object value);
        /*0x71b588c*/ int CompareTo(short value);
        /*0x71b5898*/ bool Equals(object obj);
        /*0x71b58e0*/ bool Equals(short obj);
        /*0x71b58f0*/ int GetHashCode();
        /*0x71b58fc*/ string ToString();
        /*0x71b5c2c*/ string ToString(System.IFormatProvider provider);
        /*0x71b5cc4*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71b609c*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71b6f48*/ System.TypeCode GetTypeCode();
        /*0x71b6f50*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71b6fac*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71b7008*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71b7064*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71b70c0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71b70c8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71b7124*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71b7180*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71b71dc*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71b7238*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71b7294*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71b72f0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71b734c*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71b73a8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71b744c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<int>, System.IEquatable<int>, System.ISpanFormattable
    {
        /*0x10*/ int m_value;

        static /*0x71b7938*/ int Parse(string s);
        static /*0x71b79f8*/ int Parse(string s, System.Globalization.NumberStyles style);
        static /*0x71b7ad0*/ int Parse(string s, System.IFormatProvider provider);
        static /*0x71b7ba0*/ int Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71b7c80*/ int Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71b7d1c*/ bool TryParse(string s, ref int result);
        static /*0x71b7dec*/ bool TryParse(System.ReadOnlySpan<char> s, ref int result);
        static /*0x71b7e70*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        static /*0x71b7f64*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        /*0x71b74ec*/ int CompareTo(object value);
        /*0x71b758c*/ int CompareTo(int value);
        /*0x71b75a8*/ bool Equals(object obj);
        /*0x71b75f0*/ bool Equals(int obj);
        /*0x71b7600*/ int GetHashCode();
        /*0x71b7608*/ string ToString();
        /*0x71b769c*/ string ToString(string format);
        /*0x71b774c*/ string ToString(System.IFormatProvider provider);
        /*0x71b77e4*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71b7898*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71b8008*/ System.TypeCode GetTypeCode();
        /*0x71b8010*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71b806c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71b80c8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71b8124*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71b8180*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71b81dc*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71b8238*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71b8240*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71b829c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71b82f8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71b8354*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71b83b0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71b840c*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71b8468*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71b84e8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<long>, System.IEquatable<long>, System.ISpanFormattable
    {
        /*0x10*/ long m_value;

        static /*0x71b8f4c*/ long Parse(string s);
        static /*0x71b91ec*/ long Parse(string s, System.IFormatProvider provider);
        static /*0x71b92bc*/ long Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71b939c*/ bool TryParse(string s, ref long result);
        static /*0x71b95f8*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref long result);
        /*0x71b8588*/ int CompareTo(object value);
        /*0x71b8628*/ int CompareTo(long value);
        /*0x71b8644*/ bool Equals(object obj);
        /*0x71b868c*/ bool Equals(long obj);
        /*0x71b869c*/ int GetHashCode();
        /*0x71b86a8*/ string ToString();
        /*0x71b89d4*/ string ToString(System.IFormatProvider provider);
        /*0x71b8a6c*/ string ToString(string format);
        /*0x71b8b1c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71b8bd0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71b96ec*/ System.TypeCode GetTypeCode();
        /*0x71b96f4*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71b9750*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71b97ac*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71b9808*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71b9864*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71b98c0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71b991c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71b9978*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71b99d4*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71b99dc*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71b9a38*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71b9a94*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71b9af0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71b9b4c*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71b9bcc*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class InvalidCastException : System.SystemException
    {
        /*0x71b9c6c*/ InvalidCastException();
        /*0x71b7428*/ InvalidCastException(string message);
        /*0x71b9cc8*/ InvalidCastException(string message, System.Exception innerException);
        /*0x71b9cec*/ InvalidCastException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidOperationException : System.SystemException
    {
        /*0x71b9cf4*/ InvalidOperationException();
        /*0x71b9d50*/ InvalidOperationException(string message);
        /*0x71b9d74*/ InvalidOperationException(string message, System.Exception innerException);
        /*0x71b9d98*/ InvalidOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidProgramException : System.SystemException
    {
        /*0x71b9da0*/ InvalidProgramException();
        /*0x71b9dfc*/ InvalidProgramException(string message);
        /*0x71b9e20*/ InvalidProgramException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidTimeZoneException : System.Exception
    {
        /*0x71b9e28*/ InvalidTimeZoneException();
        /*0x71b9e80*/ InvalidTimeZoneException(string message);
        /*0x71b9ee8*/ InvalidTimeZoneException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum LazyState
    {
        NoneViaConstructor = 0,
        NoneViaFactory = 1,
        NoneException = 2,
        PublicationOnlyViaConstructor = 3,
        PublicationOnlyViaFactory = 4,
        PublicationOnlyWait = 5,
        PublicationOnlyException = 6,
        ExecutionAndPublicationViaConstructor = 7,
        ExecutionAndPublicationViaFactory = 8,
        ExecutionAndPublicationException = 9,
    }

    class LazyHelper
    {
        static /*0x0*/ System.LazyHelper NoneViaConstructor;
        static /*0x8*/ System.LazyHelper NoneViaFactory;
        static /*0x10*/ System.LazyHelper PublicationOnlyViaConstructor;
        static /*0x18*/ System.LazyHelper PublicationOnlyViaFactory;
        static /*0x20*/ System.LazyHelper PublicationOnlyWaitForOtherThreadToPublish;
        /*0x10*/ System.LazyState <State>k__BackingField;
        /*0x18*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionDispatch;

        static /*0x71ba218*/ LazyHelper();
        static /*0x71ba00c*/ System.LazyHelper Create(System.Threading.LazyThreadSafetyMode mode, bool useDefaultConstructor);
        static /*0x71ba150*/ object CreateViaDefaultConstructor(System.Type type);
        /*0x71b9f70*/ LazyHelper(System.LazyState state);
        /*0x71b9f98*/ LazyHelper(System.Threading.LazyThreadSafetyMode mode, System.Exception exception);
        /*0x71b9f68*/ System.LazyState get_State();
        /*0x71b9ff0*/ void ThrowException();
    }

    class Lazy<T>
    {
        /*0x0*/ System.LazyHelper _state;
        /*0x0*/ System.Func<T> _factory;
        /*0x0*/ T _value;

        static /*0x3910ae8*/ T CreateViaDefaultConstructor();
        /*0x38159dc*/ Lazy();
        /*0x3816710*/ Lazy(System.Func<T> valueFactory);
        Lazy(System.Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode, bool useDefaultConstructor);
        /*0x38159dc*/ void ViaConstructor();
        /*0x3815ed0*/ void ViaFactory(System.Threading.LazyThreadSafetyMode mode);
        void ExecutionAndPublication(System.LazyHelper executionAndPublication, bool useDefaultConstructor);
        /*0x3910ae8*/ void PublicationOnly(System.LazyHelper publicationOnly, T possibleValue);
        /*0x3816710*/ void PublicationOnlyViaConstructor(System.LazyHelper initializer);
        /*0x3816710*/ void PublicationOnlyViaFactory(System.LazyHelper initializer);
        /*0x38159dc*/ void PublicationOnlyWaitForOtherThreadToPublish();
        /*0x3910ae8*/ T CreateValue();
        /*0x38148bc*/ string ToString();
        /*0x3813ffc*/ bool get_IsValueCreated();
        /*0x3910ae8*/ T get_Value();
    }

    class LazyDebugView<T>
    {
    }

    class Marvin
    {
        static /*0x0*/ ulong <DefaultSeed>k__BackingField;

        static /*0x71ba8d8*/ Marvin();
        static /*0x71ba344*/ int ComputeHash32(System.ReadOnlySpan<byte> data, ulong seed);
        static /*0x71ba3f0*/ int ComputeHash32(ref byte data, int count, ulong seed);
        static /*0x71ba7e0*/ void Block(ref uint rp0, ref uint rp1);
        static /*0x71ba868*/ uint _rotl(uint value, int shift);
        static /*0x71ba874*/ ulong get_DefaultSeed();
        static /*0x71ba8cc*/ ulong GenerateSeed();
    }

    class Math
    {
        static /*0x0*/ double doubleRoundLimit;
        static /*0x8*/ double[] roundPower10Double;

        static /*0x71bbcd8*/ Math();
        static /*0x71ba928*/ int Abs(int value);
        static /*0x71ba9d0*/ long Abs(long value);
        static /*0x71baa2c*/ decimal Abs(decimal value);
        static /*0x71ba984*/ void ThrowAbsOverflow();
        static /*0x71baab0*/ int DivRem(int a, int b, ref int result);
        static /*0x71baac4*/ uint DivRem(uint a, uint b, ref uint result);
        static /*0x71baad8*/ byte Clamp(byte value, byte min, byte max);
        static /*0x71bab84*/ decimal Clamp(decimal value, decimal min, decimal max);
        static /*0x71bacd8*/ double Clamp(double value, double min, double max);
        static /*0x71bad80*/ short Clamp(short value, short min, short max);
        static /*0x71bae2c*/ int Clamp(int value, int min, int max);
        static /*0x71baed0*/ long Clamp(long value, long min, long max);
        static /*0x71baf74*/ sbyte Clamp(sbyte value, sbyte min, sbyte max);
        static /*0x71bb020*/ float Clamp(float value, float min, float max);
        static /*0x71bb0c8*/ ushort Clamp(ushort value, ushort min, ushort max);
        static /*0x71bb174*/ uint Clamp(uint value, uint min, uint max);
        static /*0x71bb218*/ ulong Clamp(ulong value, ulong min, ulong max);
        static /*0x71bb2bc*/ double Log(double a, double newBase);
        static /*0x71bb39c*/ byte Max(byte val1, byte val2);
        static /*0x71bb3ac*/ decimal Max(decimal val1, decimal val2);
        static /*0x71bb444*/ double Max(double val1, double val2);
        static /*0x71bb464*/ short Max(short val1, short val2);
        static /*0x71bb474*/ int Max(int val1, int val2);
        static /*0x71bb480*/ long Max(long val1, long val2);
        static /*0x71bb48c*/ sbyte Max(sbyte val1, sbyte val2);
        static /*0x71bb49c*/ float Max(float val1, float val2);
        static /*0x71bb4bc*/ ushort Max(ushort val1, ushort val2);
        static /*0x71bb4cc*/ uint Max(uint val1, uint val2);
        static /*0x71bb4d8*/ ulong Max(ulong val1, ulong val2);
        static /*0x71bb4e4*/ byte Min(byte val1, byte val2);
        static /*0x71bb4f4*/ decimal Min(decimal val1, decimal val2);
        static /*0x71bb58c*/ double Min(double val1, double val2);
        static /*0x71bb5ac*/ short Min(short val1, short val2);
        static /*0x71bb5bc*/ int Min(int val1, int val2);
        static /*0x71bb5c8*/ long Min(long val1, long val2);
        static /*0x71bb5d4*/ sbyte Min(sbyte val1, sbyte val2);
        static /*0x71bb5e4*/ float Min(float val1, float val2);
        static /*0x71bb604*/ ushort Min(ushort val1, ushort val2);
        static /*0x71bb614*/ uint Min(uint val1, uint val2);
        static /*0x71bb620*/ ulong Min(ulong val1, ulong val2);
        static /*0x71bb62c*/ decimal Round(decimal d);
        static /*0x71bb698*/ decimal Round(decimal d, int decimals, System.MidpointRounding mode);
        static /*0x71bb718*/ double Round(double a);
        static /*0x71bb79c*/ double Round(double value, int digits);
        static /*0x71bb804*/ double Round(double value, int digits, System.MidpointRounding mode);
        static /*0x71bbaac*/ int Sign(double value);
        static /*0x71bbb24*/ int Sign(long value);
        static /*0x71bbb38*/ int Sign(float value);
        static /*0x71bbbb0*/ decimal Truncate(decimal d);
        static /*0x71bbc18*/ double Truncate(double d);
        static /*0x3910ae8*/ void ThrowMinMaxException<T>(T min, T max);
        static /*0x71bbc84*/ double Abs(double value);
        static /*0x71bbc8c*/ float Abs(float value);
        static /*0x71bbc94*/ double Acos(double d);
        static /*0x71bbc98*/ double Asin(double d);
        static /*0x71bbc9c*/ double Atan(double d);
        static /*0x71bbca0*/ double Atan2(double y, double x);
        static /*0x71bbca4*/ double Ceiling(double a);
        static /*0x71bbcac*/ double Cos(double d);
        static /*0x71bbcb0*/ double Exp(double d);
        static /*0x71bbcb4*/ double Floor(double d);
        static /*0x71bbcbc*/ double Log(double d);
        static /*0x71bbcc0*/ double Log10(double d);
        static /*0x71bbcc4*/ double Pow(double x, double y);
        static /*0x71bbcc8*/ double Sin(double a);
        static /*0x71bbccc*/ double Sqrt(double d);
        static /*0x71bbcd4*/ double Tan(double a);
        static /*0x71bbaa8*/ double ModF(double x, double* intptr);
    }

    class MathF
    {
        static /*0x0*/ float[] roundPower10Single;
        static /*0x8*/ float singleRoundLimit;

        static /*0x71bc2b8*/ MathF();
        static /*0x71bbd8c*/ float Abs(float x);
        static /*0x71bbde8*/ float Round(float x);
        static /*0x71bbef0*/ float Round(float x, int digits);
        static /*0x71bbf58*/ float Round(float x, int digits, System.MidpointRounding mode);
        static /*0x71bc244*/ int Sign(float x);
        static /*0x71bbed4*/ float CopySign(float x, float y);
        static /*0x71bc2a0*/ float Ceiling(float x);
        static /*0x71bc2a8*/ float Floor(float x);
        static /*0x71bc2b0*/ float FMod(float x, float y);
        static /*0x71bc2b4*/ float ModF(float x, float* intptr);
    }

    class MemberAccessException : System.SystemException
    {
        /*0x71bc370*/ MemberAccessException();
        /*0x71bc3cc*/ MemberAccessException(string message);
        /*0x71bc3f0*/ MemberAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Memory<T> : System.IEquatable<System.Memory<T>>
    {
        /*0x0*/ object _object;
        /*0x0*/ int _index;
        /*0x0*/ int _length;

        static /*0x3910ae8*/ System.Memory<T> op_Implicit(T[] array);
        static /*0x3910ae8*/ System.Memory<T> op_Implicit(System.ArraySegment<T> segment);
        static /*0x3910ae8*/ System.ReadOnlyMemory<T> op_Implicit(System.Memory<T> memory);
        static /*0x3910ae8*/ System.Memory<T> get_Empty();
        static /*0x382d2b0*/ int CombineHashCodes(int left, int right);
        static int CombineHashCodes(int h1, int h2, int h3);
        /*0x3816710*/ Memory(T[] array);
        Memory(T[] array, int start, int length);
        /*0x381678c*/ Memory(System.Buffers.MemoryManager<T> manager, int length);
        Memory(object obj, int start, int length);
        /*0x3814574*/ int get_Length();
        /*0x3813ffc*/ bool get_IsEmpty();
        /*0x38148bc*/ string ToString();
        /*0x3910ae8*/ System.Memory<T> Slice(int start);
        /*0x3910ae8*/ System.Memory<T> Slice(int start, int length);
        /*0x3910ae8*/ System.Span<T> get_Span();
        /*0x3910ae8*/ System.Buffers.MemoryHandle Pin();
        /*0x38148bc*/ T[] ToArray();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.Memory<T> other);
        /*0x3814574*/ int GetHashCode();
    }

    class MemoryDebugView<T>
    {
    }

    class MemoryExtensions
    {
        static /*0x71bc3f8*/ bool EqualsOrdinal(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x71bc494*/ bool EqualsOrdinalIgnoreCase(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x71bc540*/ bool Contains(System.ReadOnlySpan<char> source, char value);
        static /*0x71bc5d4*/ int ToUpperInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
        static /*0x71bc72c*/ bool EndsWith(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.StringComparison comparisonType);
        static /*0x3910ae8*/ System.Span<T> AsSpan<T>(T[] array, int start);
        static /*0x71bc9a0*/ System.ReadOnlySpan<char> AsSpan(string text);
        static /*0x71bc9f8*/ System.ReadOnlySpan<char> AsSpan(string text, int start);
        static /*0x71bca84*/ System.ReadOnlySpan<char> AsSpan(string text, int start, int length);
        static /*0x71bcb24*/ System.ReadOnlyMemory<char> AsMemory(string text, int start, int length);
        static /*0x71b2cc0*/ System.ReadOnlySpan<char> Trim(System.ReadOnlySpan<char> span);
        static /*0x71bcbcc*/ System.ReadOnlySpan<char> TrimStart(System.ReadOnlySpan<char> span);
        static /*0x71bccb4*/ System.ReadOnlySpan<char> TrimEnd(System.ReadOnlySpan<char> span);
        static /*0x3910ae8*/ int IndexOf<T>(System.Span<T> span, T value);
        static /*0x3910ae8*/ int IndexOf<T>(System.Span<T> span, System.ReadOnlySpan<T> value);
        static /*0x3910ae8*/ int SequenceCompareTo<T>(System.Span<T> span, System.ReadOnlySpan<T> other);
        static /*0x3910ae8*/ int IndexOf<T>(System.ReadOnlySpan<T> span, T value);
        static /*0x3910ae8*/ int IndexOfAny<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> values);
        static /*0x3910ae8*/ bool SequenceEqual<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> other);
        static /*0x3910ae8*/ bool StartsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static /*0x3910ae8*/ bool EndsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static /*0x3910ae8*/ System.Span<T> AsSpan<T>(T[] array);
        static /*0x3910ae8*/ System.Span<T> AsSpan<T>(T[] array, int start, int length);
        static /*0x3910ae8*/ System.Span<T> AsSpan<T>(System.ArraySegment<T> segment);
        static /*0x3910ae8*/ System.Span<T> AsSpan<T>(System.ArraySegment<T> segment, int start, int length);
        static /*0x3910ae8*/ void CopyTo<T>(T[] source, System.Span<T> destination);
        static /*0x3823ae0*/ bool IsTypeComparableAsBytes<T>(ref ulong size);
    }

    class MethodAccessException : System.MemberAccessException
    {
        /*0x71bcd8c*/ MethodAccessException();
        /*0x71bcde8*/ MethodAccessException(string message);
        /*0x71bce0c*/ MethodAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum MidpointRounding
    {
        ToEven = 0,
        AwayFromZero = 1,
    }

    class MissingMethodException : System.MissingMemberException
    {
        /*0x71bce14*/ MissingMethodException();
        /*0x71bce70*/ MissingMethodException(string message);
        /*0x71bce94*/ MissingMethodException(string className, string methodName);
        /*0x71bced8*/ MissingMethodException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71bcee0*/ string get_Message();
    }

    class MulticastNotSupportedException : System.SystemException
    {
        /*0x71bcfc8*/ MulticastNotSupportedException();
        /*0x71bd024*/ MulticastNotSupportedException(string message);
        /*0x71bd048*/ MulticastNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NonSerializedAttribute : System.Attribute
    {
        /*0x71bd050*/ NonSerializedAttribute();
    }

    class NotImplementedException : System.SystemException
    {
        /*0x71bd058*/ NotImplementedException();
        /*0x71bd0b4*/ NotImplementedException(string message);
        /*0x71bd0d8*/ NotImplementedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NotSupportedException : System.SystemException
    {
        /*0x71bd0e0*/ NotSupportedException();
        /*0x71b5624*/ NotSupportedException(string message);
        /*0x71bd13c*/ NotSupportedException(string message, System.Exception innerException);
        /*0x71bd160*/ NotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NullReferenceException : System.SystemException
    {
        /*0x71bd168*/ NullReferenceException();
        /*0x71bd1c4*/ NullReferenceException(string message);
        /*0x71bd1e8*/ NullReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Nullable<T>
    {
        /*0x0*/ bool hasValue;
        /*0x0*/ T value;

        static /*0x3910ae8*/ object Box(System.Nullable<T> o);
        static /*0x3910ae8*/ System.Nullable<T> Unbox(object o);
        static /*0x3910ae8*/ System.Nullable<T> UnboxExact(object o);
        /*0x3910ae8*/ Nullable(T value);
        /*0x3813ffc*/ bool get_HasValue();
        /*0x3910ae8*/ T get_Value();
        /*0x3910ae8*/ T GetValueOrDefault();
        /*0x3910ae8*/ T GetValueOrDefault(T defaultValue);
        /*0x38141c4*/ bool Equals(object other);
        /*0x3814574*/ int GetHashCode();
        /*0x38148bc*/ string ToString();
    }

    class Nullable
    {
        static /*0x71bd1f0*/ System.Type GetUnderlyingType(System.Type nullableType);
    }

    class Number
    {
        static /*0x0*/ string[] s_posCurrencyFormats;
        static /*0x8*/ string[] s_negCurrencyFormats;
        static /*0x10*/ string[] s_posPercentFormats;
        static /*0x18*/ string[] s_negPercentFormats;
        static /*0x20*/ string[] s_negNumberFormats;
        static /*0x28*/ int[] s_charToHexLookup;
        static /*0x30*/ ulong[] s_rgval64Power10;
        static /*0x38*/ sbyte[] s_rgexp64Power10;
        static /*0x40*/ ulong[] s_rgval64Power10By16;
        static /*0x48*/ short[] s_rgexp64Power10By16;

        static /*0x71c8270*/ Number();
        static /*0x71bd330*/ string FormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71bef28*/ bool TryFormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x71bd624*/ void DecimalToNumber(decimal value, ref System.Number.NumberBuffer number);
        static /*0x71bf138*/ string FormatDouble(double value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x71bf564*/ bool TryFormatDouble(double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x71bf278*/ string FormatDouble(ref System.Text.ValueStringBuilder sb, double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71c0060*/ string FormatSingle(float value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x71c0498*/ bool TryFormatSingle(float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x71c01a0*/ string FormatSingle(ref System.Text.ValueStringBuilder sb, float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71bf6c0*/ bool TryCopyTo(string source, System.Span<char> destination, ref int charsWritten);
        static /*0x71b5990*/ string FormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71b6450*/ bool TryFormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71b5e38*/ string FormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71b61b0*/ bool TryFormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71b873c*/ string FormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71b8c70*/ bool TryFormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71c1f6c*/ string FormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71c2360*/ bool TryFormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71c25fc*/ void Int32ToNumber(int value, ref System.Number.NumberBuffer number);
        static /*0x71c0784*/ string NegativeInt32ToDecStr(int value, int digits, string sNegative);
        static /*0x71c0c2c*/ bool TryNegativeInt32ToDecStr(int value, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0x71c0930*/ string Int32ToHexStr(int value, char hexBase, int digits);
        static /*0x71c0e14*/ bool TryInt32ToHexStr(int value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71c2728*/ char* Int32ToHexChars(char* buffer, uint value, int hexBase, int digits);
        static /*0x71c2768*/ void UInt32ToNumber(uint value, ref System.Number.NumberBuffer number);
        static /*0x71bf0ec*/ char* UInt32ToDecChars(char* bufferEnd, uint value, int digits);
        static /*0x71c05f4*/ string UInt32ToDecStr(uint value, int digits);
        static /*0x71c0a68*/ bool TryUInt32ToDecStr(uint value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71c1670*/ void Int64ToNumber(long input, ref System.Number.NumberBuffer number);
        static /*0x71c11e0*/ string NegativeInt64ToDecStr(long input, int digits, string sNegative);
        static /*0x71c1a9c*/ bool TryNegativeInt64ToDecStr(long input, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0x71c1480*/ string Int64ToHexStr(long value, char hexBase, int digits);
        static /*0x71c1d68*/ bool TryInt64ToHexStr(long value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71c21cc*/ void UInt64ToNumber(ulong value, ref System.Number.NumberBuffer number);
        static /*0x71c0f88*/ string UInt64ToDecStr(ulong value, int digits);
        static /*0x71c1818*/ bool TryUInt64ToDecStr(ulong value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71bd4e0*/ char ParseFormatSpecifier(System.ReadOnlySpan<char> format, ref int digits);
        static /*0x71bd860*/ void NumberToString(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, char format, int nMaxDigits, System.Globalization.NumberFormatInfo info, bool isDecimal);
        static /*0x71bddf0*/ void NumberToStringFormat(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71c29c0*/ void FormatCurrency(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x71c2c28*/ void FormatFixed(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, int[] groupDigits, string sDecimal, string sGroup);
        static /*0x71c3158*/ void FormatNumber(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x71c33ac*/ void FormatScientific(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar);
        static /*0x71c3d70*/ void FormatExponent(ref System.Text.ValueStringBuilder sb, System.Globalization.NumberFormatInfo info, int value, char expChar, int minDigits, bool positiveSign);
        static /*0x71c3604*/ void FormatGeneral(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar, bool bSuppressScientific);
        static /*0x71c39bc*/ void FormatPercent(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x71c28c4*/ void RoundNumber(ref System.Number.NumberBuffer number, int pos);
        static /*0x71c3c24*/ int FindSection(System.ReadOnlySpan<char> format, int section);
        static /*0x71c28c0*/ uint Low32(ulong value);
        static /*0x71c28b8*/ uint High32(ulong value);
        static /*0x71c2880*/ uint Int64DivMod1E9(ref ulong value);
        static /*0x71c4018*/ bool NumberToInt32(ref System.Number.NumberBuffer number, ref int value);
        static /*0x71c40d4*/ bool NumberToInt64(ref System.Number.NumberBuffer number, ref long value);
        static /*0x71c418c*/ bool NumberToUInt32(ref System.Number.NumberBuffer number, ref uint value);
        static /*0x71c423c*/ bool NumberToUInt64(ref System.Number.NumberBuffer number, ref ulong value);
        static /*0x71b69fc*/ int ParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71b900c*/ long ParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71c571c*/ uint ParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71c5eac*/ ulong ParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71c6668*/ bool ParseNumber(ref char* str, char* strEnd, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x71b6dbc*/ bool TryParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result);
        static /*0x71c42ec*/ bool TryParseInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result, ref bool failureIsOverflow);
        static /*0x71c4de0*/ bool TryParseInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result, ref bool failureIsOverflow);
        static /*0x71b946c*/ bool TryParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result);
        static /*0x71c6fd8*/ bool TryParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result);
        static /*0x71c58d8*/ bool TryParseUInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0x71c4954*/ bool TryParseUInt32HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0x71c7164*/ bool TryParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result);
        static /*0x71c6068*/ bool TryParseUInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0x71c53cc*/ bool TryParseUInt64HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0x71c72f0*/ decimal ParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71c7400*/ bool NumberBufferToDecimal(ref System.Number.NumberBuffer number, ref decimal value);
        static /*0x71c76f8*/ double ParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71c7adc*/ float ParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71c7e48*/ bool TryParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref decimal result);
        static /*0x71c7f4c*/ bool TryParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref double result);
        static /*0x71c8050*/ bool TryParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref float result);
        static /*0x71c4ca4*/ void StringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x71c6e14*/ bool TryStringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x71c6f48*/ bool TrailingZeros(System.ReadOnlySpan<char> value, int index);
        static /*0x71c6d80*/ char* MatchChars(char* p, char* pEnd, string value);
        static /*0x71c6d64*/ bool IsWhite(int ch);
        static /*0x71c6e04*/ bool IsDigit(int ch);
        static /*0x71c48cc*/ void ThrowOverflowOrFormatException(bool overflow, string overflowResourceKey);
        static /*0x71c7a50*/ bool NumberBufferToDouble(ref System.Number.NumberBuffer number, ref double value);
        static /*0x71c8190*/ uint DigitsToInt(char* p, int count);
        static /*0x71c81c4*/ ulong Mul32x32To64(uint a, uint b);
        static /*0x71c81cc*/ ulong Mul64Lossy(ulong a, ulong b, ref int pexp);
        static /*0x71c8264*/ int abs(int value);
        static /*0x71bfb78*/ double NumberToDouble(ref System.Number.NumberBuffer number);
        static /*0x71bf798*/ void DoubleToNumber(double value, int precision, ref System.Number.NumberBuffer number);

        struct NumberBuffer
        {
            /*0x10*/ int precision;
            /*0x14*/ int scale;
            /*0x18*/ int _sign;
            /*0x1c*/ System.Number.NumberBuffer.DigitsAndNullTerminator _digits;
            /*0x82*/ char* _allDigits;

            /*0x71c944c*/ bool get_sign();
            /*0x71c945c*/ void set_sign(bool value);
            /*0x71c9468*/ char* get_digits();

            struct DigitsAndNullTerminator
            {
            }
        }
    }

    class ObjectDisposedException : System.InvalidOperationException
    {
        /*0x90*/ string _objectName;

        /*0x71c9470*/ ObjectDisposedException();
        /*0x71c9518*/ ObjectDisposedException(string objectName);
        /*0x71c94d8*/ ObjectDisposedException(string objectName, string message);
        /*0x71c958c*/ ObjectDisposedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c961c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c9734*/ string get_Message();
        /*0x71c96dc*/ string get_ObjectName();
    }

    class ObsoleteAttribute : System.Attribute
    {
        /*0x10*/ string _message;
        /*0x18*/ bool _error;

        /*0x71c97e8*/ ObsoleteAttribute();
        /*0x71c9814*/ ObsoleteAttribute(string message);
        /*0x71c984c*/ ObsoleteAttribute(string message, bool error);
        /*0x71c9888*/ string get_Message();
        /*0x71c9890*/ bool get_IsError();
    }

    class OperationCanceledException : System.SystemException
    {
        /*0x90*/ System.Threading.CancellationToken _cancellationToken;

        /*0x71c98ac*/ OperationCanceledException();
        /*0x71c997c*/ OperationCanceledException(string message);
        /*0x71c999c*/ OperationCanceledException(System.Threading.CancellationToken token);
        /*0x71c99c8*/ OperationCanceledException(string message, System.Threading.CancellationToken token);
        /*0x71c9a00*/ OperationCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c9898*/ System.Threading.CancellationToken get_CancellationToken();
        /*0x71c98a0*/ void set_CancellationToken(System.Threading.CancellationToken value);
    }

    class OverflowException : System.ArithmeticException
    {
        /*0x71c9a84*/ OverflowException();
        /*0x71c9ae0*/ OverflowException(string message);
        /*0x71c9b04*/ OverflowException(string message, System.Exception innerException);
        /*0x71c9b28*/ OverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ParamArrayAttribute : System.Attribute
    {
        /*0x71c9b30*/ ParamArrayAttribute();
    }

    struct ParamsArray
    {
        static /*0x0*/ object[] s_oneArgArray;
        static /*0x8*/ object[] s_twoArgArray;
        static /*0x10*/ object[] s_threeArgArray;
        /*0x10*/ object _arg0;
        /*0x18*/ object _arg1;
        /*0x20*/ object _arg2;
        /*0x28*/ object[] _args;

        static /*0x71c9ec4*/ ParamsArray();
        /*0x71c9b38*/ ParamsArray(object arg0);
        /*0x71c9bd8*/ ParamsArray(object arg0, object arg1);
        /*0x71c9c7c*/ ParamsArray(object arg0, object arg1, object arg2);
        /*0x71c9d2c*/ ParamsArray(object[] args);
        /*0x71c9de4*/ int get_Length();
        /*0x71c9e00*/ object get_Item(int index);
        /*0x71c9e70*/ object GetAtSlow(int index);
    }

    class ParseNumbers
    {
        static /*0x71c9f80*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags);
        static /*0x71c9f98*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0x71ca5b4*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags);
        static /*0x71ca5cc*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0x71cabac*/ string IntToString(int n, int radix, int width, char paddingChar, int flags);
        static /*0x71caed4*/ string LongToString(long n, int radix, int width, char paddingChar, int flags);
        static /*0x71ca300*/ void EatWhiteSpace(System.ReadOnlySpan<char> s, ref int i);
        static /*0x71ca3c0*/ long GrabLongs(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0x71ca98c*/ int GrabInts(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0x71cb304*/ void ThrowOverflowInt32Exception();
        static /*0x71cb274*/ void ThrowOverflowInt64Exception();
        static /*0x71cb34c*/ void ThrowOverflowUInt32Exception();
        static /*0x71cb2bc*/ void ThrowOverflowUInt64Exception();
        static /*0x71cb394*/ bool IsDigit(char c, int radix, ref int result);
    }

    class PlatformNotSupportedException : System.NotSupportedException
    {
        /*0x71cb3e8*/ PlatformNotSupportedException();
        /*0x71cb444*/ PlatformNotSupportedException(string message);
        /*0x71cb468*/ PlatformNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Random
    {
        static /*0x0*/ System.Random s_globalRandom;
        [ThreadStatic] static System.Random t_threadRandom;
        /*0x10*/ int _inext;
        /*0x14*/ int _inextp;
        /*0x18*/ int[] _seedArray;

        static /*0x71cbc78*/ Random();
        static /*0x71cb4cc*/ int GenerateSeed();
        static /*0x71cb900*/ int GenerateGlobalSeed();
        /*0x71cb470*/ Random();
        /*0x71cb694*/ Random(int Seed);
        /*0x71cb854*/ double Sample();
        /*0x71cb874*/ int InternalSample();
        /*0x71cb924*/ int Next();
        /*0x71cb928*/ double GetSampleForLargeRange();
        /*0x71cb974*/ int Next(int minValue, int maxValue);
        /*0x71cba8c*/ int Next(int maxValue);
        /*0x71cbb50*/ double NextDouble();
        /*0x71cbb5c*/ void NextBytes(byte[] buffer);
        /*0x71cbc08*/ void NextBytes(System.Span<byte> buffer);
    }

    class RankException : System.SystemException
    {
        /*0x71cbd04*/ RankException();
        /*0x71cbd5c*/ RankException(string message);
        /*0x71cbd7c*/ RankException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ReadOnlyMemory<T> : System.IEquatable<System.ReadOnlyMemory<T>>
    {
        /*0x0*/ object _object;
        /*0x0*/ int _index;
        /*0x0*/ int _length;

        static /*0x3910ae8*/ System.ReadOnlyMemory<T> op_Implicit(T[] array);
        static /*0x382d2b0*/ int CombineHashCodes(int left, int right);
        static int CombineHashCodes(int h1, int h2, int h3);
        /*0x3816710*/ ReadOnlyMemory(T[] array);
        ReadOnlyMemory(T[] array, int start, int length);
        ReadOnlyMemory(object obj, int start, int length);
        /*0x3814574*/ int get_Length();
        /*0x3813ffc*/ bool get_IsEmpty();
        /*0x38148bc*/ string ToString();
        /*0x3910ae8*/ System.ReadOnlyMemory<T> Slice(int start);
        /*0x3910ae8*/ System.ReadOnlyMemory<T> Slice(int start, int length);
        /*0x3910ae8*/ System.ReadOnlySpan<T> get_Span();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ReadOnlyMemory<T> other);
        /*0x3814574*/ int GetHashCode();
        /*0x3814b90*/ object GetObjectStartLength(ref int start, ref int length);
    }

    struct ReadOnlySpan<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static /*0x3910ae8*/ bool op_Equality(System.ReadOnlySpan<T> left, System.ReadOnlySpan<T> right);
        static /*0x3910ae8*/ System.ReadOnlySpan<T> op_Implicit(T[] array);
        static /*0x3910ae8*/ System.ReadOnlySpan<T> op_Implicit(System.ArraySegment<T> segment);
        static /*0x3910ae8*/ System.ReadOnlySpan<T> get_Empty();
        /*0x3816710*/ ReadOnlySpan(T[] array);
        ReadOnlySpan(T[] array, int start, int length);
        /*0x3910ae8*/ ReadOnlySpan(void* pointer, int length);
        /*0x381678c*/ ReadOnlySpan(ref T ptr, int length);
        /*0x3814964*/ ref T get_Item(int index);
        /*0x38148bc*/ ref T GetPinnableReference();
        /*0x3910ae8*/ void CopyTo(System.Span<T> destination);
        /*0x3910ae8*/ bool TryCopyTo(System.Span<T> destination);
        /*0x38148bc*/ string ToString();
        /*0x3910ae8*/ System.ReadOnlySpan<T> Slice(int start);
        /*0x3910ae8*/ System.ReadOnlySpan<T> Slice(int start, int length);
        /*0x38148bc*/ T[] ToArray();
        /*0x3814574*/ int get_Length();
        /*0x3813ffc*/ bool get_IsEmpty();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814574*/ int GetHashCode();
    }

    class ResolveEventArgs : System.EventArgs
    {
        /*0x10*/ string <Name>k__BackingField;
        /*0x18*/ System.Reflection.Assembly <RequestingAssembly>k__BackingField;

        /*0x71cbd80*/ ResolveEventArgs(string name);
        /*0x71cbdf4*/ ResolveEventArgs(string name, System.Reflection.Assembly requestingAssembly);
    }

    class ResolveEventHandler : System.MulticastDelegate
    {
        /*0x71cbe7c*/ ResolveEventHandler(object object, nint method);
        /*0x71cbf88*/ System.Reflection.Assembly Invoke(object sender, System.ResolveEventArgs args);
    }

    struct SByte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<sbyte>, System.IEquatable<sbyte>, System.ISpanFormattable
    {
        /*0x10*/ sbyte m_value;

        static /*0x71cc464*/ sbyte Parse(string s, System.IFormatProvider provider);
        static /*0x71cc698*/ sbyte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71cc500*/ sbyte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x71cc728*/ bool TryParse(string s, ref sbyte result);
        static /*0x71cc870*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref sbyte result);
        static /*0x71cc7a8*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref sbyte result);
        /*0x71cbf9c*/ int CompareTo(object obj);
        /*0x71cc028*/ int CompareTo(sbyte value);
        /*0x71cc034*/ bool Equals(object obj);
        /*0x71cc07c*/ bool Equals(sbyte obj);
        /*0x71cc08c*/ int GetHashCode();
        /*0x71cc098*/ string ToString();
        /*0x71cc130*/ string ToString(System.IFormatProvider provider);
        /*0x71cc1cc*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71cc348*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71cc918*/ System.TypeCode GetTypeCode();
        /*0x71cc920*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71cc97c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71cc9d8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71cc9e0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71cca3c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71cca98*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71ccaf4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71ccafc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71ccb58*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71ccbb4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71ccc10*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71ccc6c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71cccc8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71ccd24*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71ccda8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class SerializableAttribute : System.Attribute
    {
        /*0x71cce48*/ SerializableAttribute();
    }

    struct Single : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<float>, System.IEquatable<float>, System.ISpanFormattable
    {
        /*0x10*/ float m_value;

        static /*0x71cce50*/ bool IsFinite(float f);
        static /*0x71cce64*/ bool IsInfinity(float f);
        static /*0x71cce7c*/ bool IsNaN(float f);
        static /*0x71cce94*/ bool IsNegativeInfinity(float f);
        static /*0x71ccea8*/ bool IsPositiveInfinity(float f);
        static /*0x71cd3b4*/ float Parse(string s, System.IFormatProvider provider);
        static /*0x71cd478*/ float Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71cd54c*/ bool TryParse(string s, ref float result);
        static /*0x71cd884*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref float result);
        static /*0x71cd5cc*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref float result);
        /*0x71ccebc*/ int CompareTo(object value);
        /*0x71ccf94*/ int CompareTo(float value);
        /*0x71ccff0*/ bool Equals(object obj);
        /*0x71cd070*/ bool Equals(float obj);
        /*0x71cd0bc*/ int GetHashCode();
        /*0x71cd0d4*/ string ToString();
        /*0x71cd150*/ string ToString(System.IFormatProvider provider);
        /*0x71cd1dc*/ string ToString(string format);
        /*0x71cd264*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71cd2f4*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71cd92c*/ System.TypeCode GetTypeCode();
        /*0x71cd934*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71cd998*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71cda1c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71cda80*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71cdae4*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71cdb48*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71cdbac*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71cdc10*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71cdc74*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71cdcd8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71cdd3c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71cdd44*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71cdda8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71cde0c*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71cde90*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Span<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static /*0x3910ae8*/ System.ReadOnlySpan<T> op_Implicit(System.Span<T> span);
        static /*0x3910ae8*/ System.Span<T> op_Implicit(T[] array);
        static /*0x3910ae8*/ System.Span<T> get_Empty();
        /*0x3816710*/ Span(T[] array);
        Span(T[] array, int start, int length);
        /*0x3910ae8*/ Span(void* pointer, int length);
        /*0x381678c*/ Span(ref T ptr, int length);
        /*0x3814964*/ ref T get_Item(int index);
        /*0x38148bc*/ ref T GetPinnableReference();
        /*0x38159dc*/ void Clear();
        /*0x3910ae8*/ void Fill(T value);
        /*0x3910ae8*/ void CopyTo(System.Span<T> destination);
        /*0x3910ae8*/ bool TryCopyTo(System.Span<T> destination);
        /*0x38148bc*/ string ToString();
        /*0x3910ae8*/ System.Span<T> Slice(int start);
        /*0x3910ae8*/ System.Span<T> Slice(int start, int length);
        /*0x38148bc*/ T[] ToArray();
        /*0x3814574*/ int get_Length();
        /*0x3813ffc*/ bool get_IsEmpty();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814574*/ int GetHashCode();
    }

    class SpanDebugView<T>
    {
    }

    class SpanHelpers
    {
        static /*0x71cdf30*/ int IndexOf(ref byte searchSpace, int searchSpaceLength, ref byte value, int valueLength);
        static /*0x71ce2a4*/ int IndexOfAny(ref byte searchSpace, int searchSpaceLength, ref byte value, int valueLength);
        static /*0x71cdffc*/ int IndexOf(ref byte searchSpace, byte value, int length);
        static /*0x71ce324*/ bool SequenceEqual(ref byte first, ref byte second, ulong length);
        static /*0x71ce494*/ int SequenceCompareTo(ref byte first, int firstLength, ref byte second, int secondLength);
        static /*0x71ce5d8*/ int SequenceCompareTo(ref char first, int firstLength, ref char second, int secondLength);
        static /*0x71ceb0c*/ int IndexOf(ref char searchSpace, char value, int length);
        static /*0x71cf0fc*/ int LastIndexOf(ref char searchSpace, char value, int length);
        static /*0x71cf6a0*/ int LocateFirstFoundChar(System.Numerics.Vector<ushort> match);
        static /*0x71cf87c*/ int LocateFirstFoundChar(ulong match);
        static /*0x71cf89c*/ int LocateLastFoundChar(System.Numerics.Vector<ushort> match);
        static /*0x71cfa78*/ int LocateLastFoundChar(ulong match);
        static int IndexOf<T>(ref T searchSpace, int searchSpaceLength, ref T value, int valueLength);
        static /*0x3910ae8*/ int IndexOf<T>(ref T searchSpace, T value, int length);
        static int IndexOfAny<T>(ref T searchSpace, int searchSpaceLength, ref T value, int valueLength);
        static /*0x3825bb0*/ bool SequenceEqual<T>(ref T first, ref T second, int length);
        static int SequenceCompareTo<T>(ref T first, int firstLength, ref T second, int secondLength);
        static /*0x71cfaa4*/ bool EndsWithCultureHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0x71cfbdc*/ bool EndsWithCultureIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0x71cfcfc*/ bool EndsWithOrdinalIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x71cfde0*/ void ClearWithoutReferences(ref byte b, ulong byteLength);
        static /*0x71cffc8*/ void ClearWithReferences(ref nint ip, ulong pointerSizeLength);
    }

    class StackOverflowException : System.SystemException
    {
        /*0x71d0118*/ StackOverflowException();
        /*0x71d0170*/ StackOverflowException(string message);
        /*0x71d0190*/ StackOverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class StringComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
    {
        static /*0x0*/ System.CultureAwareComparer s_invariantCulture;
        static /*0x8*/ System.CultureAwareComparer s_invariantCultureIgnoreCase;
        static /*0x10*/ System.OrdinalCaseSensitiveComparer s_ordinal;
        static /*0x18*/ System.OrdinalIgnoreCaseComparer s_ordinalIgnoreCase;

        static /*0x71d060c*/ StringComparer();
        static /*0x71d0194*/ System.StringComparer get_InvariantCultureIgnoreCase();
        static /*0x71d01ec*/ System.StringComparer get_Ordinal();
        static /*0x71d0244*/ System.StringComparer get_OrdinalIgnoreCase();
        static /*0x71d029c*/ System.StringComparer Create(System.Globalization.CultureInfo culture, bool ignoreCase);
        /*0x71d0604*/ StringComparer();
        /*0x71d0390*/ int Compare(object x, object y);
        /*0x71d0510*/ bool Equals(object x, object y);
        /*0x71d0578*/ int GetHashCode(object obj);
        int Compare(string x, string y);
        /*0x3814200*/ bool Equals(string x, string y);
        /*0x381467c*/ int GetHashCode(string obj);
    }

    class CultureAwareComparer : System.StringComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ System.Globalization.CompareInfo _compareInfo;
        /*0x18*/ System.Globalization.CompareOptions _options;

        /*0x71d034c*/ CultureAwareComparer(System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        /*0x71d0794*/ CultureAwareComparer(System.Globalization.CompareInfo compareInfo, System.Globalization.CompareOptions options);
        /*0x71d0880*/ CultureAwareComparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71d0a98*/ int Compare(string x, string y);
        /*0x71d0aec*/ bool Equals(string x, string y);
        /*0x71d0b3c*/ int GetHashCode(string obj);
        /*0x71d0bac*/ bool Equals(object obj);
        /*0x71d0c44*/ int GetHashCode();
        /*0x71d0c78*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalComparer : System.StringComparer
    {
        /*0x10*/ bool _ignoreCase;

        /*0x71d0d64*/ OrdinalComparer(bool ignoreCase);
        /*0x71d0dd4*/ int Compare(string x, string y);
        /*0x71d0e2c*/ bool Equals(string x, string y);
        /*0x71d0eac*/ int GetHashCode(string obj);
        /*0x71d0f34*/ bool Equals(object obj);
        /*0x71d0fcc*/ int GetHashCode();
    }

    class OrdinalCaseSensitiveComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x71d0784*/ OrdinalCaseSensitiveComparer();
        /*0x71d1030*/ int Compare(string x, string y);
        /*0x71d1040*/ bool Equals(string x, string y);
        /*0x71d1050*/ int GetHashCode(string obj);
        /*0x71d1078*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalIgnoreCaseComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x71d078c*/ OrdinalIgnoreCaseComparer();
        /*0x71d1118*/ int Compare(string x, string y);
        /*0x71d1130*/ bool Equals(string x, string y);
        /*0x71d1148*/ int GetHashCode(string obj);
        /*0x71d11ac*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum StringComparison
    {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    }

    enum StringSplitOptions
    {
        None = 0,
        RemoveEmptyEntries = 1,
    }

    class SystemException : System.Exception
    {
        /*0x71d124c*/ SystemException();
        /*0x71c9904*/ SystemException(string message);
        /*0x71d12cc*/ SystemException(string message, System.Exception innerException);
        /*0x71c9a04*/ SystemException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class STAThreadAttribute : System.Attribute
    {
        /*0x71d134c*/ STAThreadAttribute();
    }

    class ThreadStaticAttribute : System.Attribute
    {
        /*0x71d1354*/ ThreadStaticAttribute();
    }

    struct TimeSpan : System.IComparable, System.IComparable<System.TimeSpan>, System.IEquatable<System.TimeSpan>, System.IFormattable, System.ISpanFormattable
    {
        static /*0x0*/ System.TimeSpan Zero;
        static /*0x8*/ System.TimeSpan MaxValue;
        static /*0x10*/ System.TimeSpan MinValue;
        /*0x10*/ long _ticks;

        static /*0x71d251c*/ TimeSpan();
        static /*0x71d1814*/ int Compare(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d190c*/ System.TimeSpan FromDays(double value);
        static /*0x71d1af8*/ System.TimeSpan FromHours(double value);
        static /*0x71d1970*/ System.TimeSpan Interval(double value, int scale);
        static /*0x71d1b5c*/ System.TimeSpan FromMilliseconds(double value);
        static /*0x71d1bbc*/ System.TimeSpan FromMinutes(double value);
        static /*0x71d1ccc*/ System.TimeSpan FromSeconds(double value);
        static /*0x71d1d94*/ System.TimeSpan FromTicks(long value);
        static /*0x71d13e4*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x71d1d98*/ System.TimeSpan Parse(string s);
        static /*0x71d1df4*/ System.TimeSpan Parse(string input, System.IFormatProvider formatProvider);
        static /*0x71d1e54*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, ref System.TimeSpan result);
        static /*0x71d2114*/ System.TimeSpan op_UnaryNegation(System.TimeSpan t);
        static /*0x71d21c0*/ System.TimeSpan op_Subtraction(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d2228*/ System.TimeSpan op_Addition(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d2290*/ System.TimeSpan op_Multiply(System.TimeSpan timeSpan, double factor);
        static /*0x71d246c*/ double op_Division(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d24d4*/ bool op_Equality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d24e0*/ bool op_Inequality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d24ec*/ bool op_LessThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d24f8*/ bool op_LessThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d2504*/ bool op_GreaterThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71d2510*/ bool op_GreaterThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        /*0x71d135c*/ TimeSpan(long ticks);
        /*0x71d1364*/ TimeSpan(int hours, int minutes, int seconds);
        /*0x71d147c*/ TimeSpan(int days, int hours, int minutes, int seconds);
        /*0x71d1504*/ TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
        /*0x71d15c0*/ long get_Ticks();
        /*0x71d15c8*/ int get_Days();
        /*0x71d15f4*/ int get_Hours();
        /*0x71d1638*/ int get_Milliseconds();
        /*0x71d1684*/ int get_Minutes();
        /*0x71d16cc*/ int get_Seconds();
        /*0x71d1718*/ double get_TotalDays();
        /*0x71d1730*/ double get_TotalHours();
        /*0x71d1748*/ double get_TotalMilliseconds();
        /*0x71d177c*/ double get_TotalMinutes();
        /*0x71d1794*/ double get_TotalSeconds();
        /*0x71d17ac*/ System.TimeSpan Add(System.TimeSpan ts);
        /*0x71d182c*/ int CompareTo(object value);
        /*0x71d18f0*/ int CompareTo(System.TimeSpan value);
        /*0x71d1a64*/ bool Equals(object value);
        /*0x71d1adc*/ bool Equals(System.TimeSpan obj);
        /*0x71d1aec*/ int GetHashCode();
        /*0x71d1c1c*/ System.TimeSpan Negate();
        /*0x71d1d2c*/ System.TimeSpan Subtract(System.TimeSpan ts);
        /*0x71d1f28*/ string ToString();
        /*0x71d1f8c*/ string ToString(string format);
        /*0x71d1ffc*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x71d2070*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
    }

    class TimeZone
    {
        static /*0x0*/ System.TimeZone currentTimeZone;
        static /*0x8*/ object s_InternalSyncObject;

        static /*0x71d2574*/ object get_InternalSyncObject();
        static /*0x71d2614*/ System.TimeZone get_CurrentTimeZone();
        static /*0x71d28a4*/ System.TimeSpan CalculateUtcOffset(System.DateTime time, System.Globalization.DaylightTime daylightTimes);
        /*0x71d260c*/ TimeZone();
        System.TimeSpan GetUtcOffset(System.DateTime time);
        /*0x71d2784*/ System.DateTime ToLocalTime(System.DateTime time);
        /*0x3814964*/ System.Globalization.DaylightTime GetDaylightChanges(int year);
    }

    enum TimeZoneInfoOptions
    {
        None = 1,
        NoThrowOnInvalidTime = 2,
    }

    class TimeoutException : System.SystemException
    {
        /*0x71d2b0c*/ TimeoutException();
        /*0x71d2b64*/ TimeoutException(string message);
        /*0x71d2b84*/ TimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    interface ITupleInternal : System.Runtime.CompilerServices.ITuple
    {
        /*0x3814a3c*/ string ToString(System.Text.StringBuilder sb);
        /*0x381467c*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
    }

    class Tuple
    {
        static /*0x3910ae8*/ System.Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static /*0x3910ae8*/ System.Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3);
        static /*0x3910ae8*/ System.Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4);
        static /*0x71d2b88*/ int CombineHashCodes(int h1, int h2);
        static /*0x71d2b94*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x71d2ba8*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x71d2bc4*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x71d2be8*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x71d2c14*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x71d2c48*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    }

    class Tuple<T1> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;

        /*0x3910ae8*/ Tuple(T1 item1);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2, T3 item3);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x3910ae8*/ T3 get_Item3();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x3910ae8*/ T3 get_Item3();
        /*0x3910ae8*/ T4 get_Item4();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x3910ae8*/ T3 get_Item3();
        /*0x3910ae8*/ T4 get_Item4();
        /*0x3910ae8*/ T5 get_Item5();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x3910ae8*/ T3 get_Item3();
        /*0x3910ae8*/ T4 get_Item4();
        /*0x3910ae8*/ T5 get_Item5();
        /*0x3910ae8*/ T6 get_Item6();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;
        /*0x0*/ T7 m_Item7;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x3910ae8*/ T3 get_Item3();
        /*0x3910ae8*/ T4 get_Item4();
        /*0x3910ae8*/ T5 get_Item5();
        /*0x3910ae8*/ T6 get_Item6();
        /*0x3910ae8*/ T7 get_Item7();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;
        /*0x0*/ T7 m_Item7;
        /*0x0*/ TRest m_Rest;

        /*0x3910ae8*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        /*0x3910ae8*/ T1 get_Item1();
        /*0x3910ae8*/ T2 get_Item2();
        /*0x3910ae8*/ T3 get_Item3();
        /*0x3910ae8*/ T4 get_Item4();
        /*0x3910ae8*/ T5 get_Item5();
        /*0x3910ae8*/ T6 get_Item6();
        /*0x3910ae8*/ T7 get_Item7();
        /*0x3910ae8*/ TRest get_Rest();
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x3814a3c*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Type : System.Reflection.MemberInfo
    {
        static /*0x0*/ System.Reflection.Binder s_defaultBinder;
        static /*0x8*/ char Delimiter;
        static /*0x10*/ System.Type[] EmptyTypes;
        static /*0x18*/ object Missing;
        static /*0x20*/ System.Reflection.MemberFilter FilterAttribute;
        static /*0x28*/ System.Reflection.MemberFilter FilterName;
        static /*0x30*/ System.Reflection.MemberFilter FilterNameIgnoreCase;
        /*0x10*/ System.RuntimeTypeHandle _impl;

        static /*0x71d63d8*/ Type();
        static /*0x71d31c8*/ int BinarySearch(System.Array array, object value);
        static /*0x71d2fec*/ bool IsIntegerType(System.Type t);
        static /*0x71d4424*/ bool FilterAttributeImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x71d4764*/ bool FilterNameImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x71d48bc*/ bool FilterNameIgnoreCaseImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x71d57c4*/ System.RuntimeTypeHandle GetTypeHandle(object o);
        static /*0x71d583c*/ System.TypeCode GetTypeCode(System.Type type);
        static /*0x71d5950*/ System.Type GetTypeFromCLSID(System.Guid clsid);
        static /*0x71d5d8c*/ System.Type MakeGenericSignatureType(System.Type genericTypeDefinition, System.Type[] typeArguments);
        static /*0x71d5f74*/ System.Reflection.Binder get_DefaultBinder();
        static /*0x71c9700*/ System.Type GetTypeFromHandle(System.RuntimeTypeHandle handle);
        static /*0x71d6038*/ System.Type internal_from_handle(nint handle);
        static /*0x71d6090*/ System.Type GetType(string typeName, bool throwOnError, bool ignoreCase);
        static /*0x71d611c*/ System.Type GetType(string typeName, bool throwOnError);
        static /*0x71d619c*/ System.Type GetType(string typeName);
        static /*0x71d6218*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError);
        static /*0x71d2fe0*/ bool op_Equality(System.Type left, System.Type right);
        static /*0x71d3ca0*/ bool op_Inequality(System.Type left, System.Type right);
        static /*0x71d5998*/ System.Type GetTypeFromCLSID(System.Guid clsid, string server, bool throwOnError);
        /*0x71d4a28*/ Type();
        /*0x71d2c84*/ bool IsEnumDefined(object value);
        /*0x71d32f8*/ string GetEnumName(object value);
        /*0x71d34c4*/ string[] GetEnumNames();
        /*0x71d31a4*/ System.Array GetEnumRawConstantValues();
        /*0x71d3568*/ void GetEnumData(ref string[] enumNames, ref System.Array enumValues);
        /*0x71d3af8*/ bool get_IsSerializable();
        /*0x71d3cac*/ bool get_ContainsGenericParameters();
        /*0x71d3dbc*/ System.Type GetRootElementType();
        /*0x71d3e0c*/ bool get_IsVisible();
        /*0x71d400c*/ bool IsSubclassOf(System.Type c);
        /*0x71d40a4*/ bool IsAssignableFrom(System.Type c);
        /*0x71d4300*/ bool ImplementInterface(System.Type ifaceType);
        /*0x71d4a30*/ System.Reflection.MemberTypes get_MemberType();
        /*0x71d4a38*/ System.Type GetType();
        /*0x38148bc*/ string get_Namespace();
        /*0x38148bc*/ string get_AssemblyQualifiedName();
        /*0x38148bc*/ string get_FullName();
        /*0x38148bc*/ System.Reflection.Assembly get_Assembly();
        /*0x38148bc*/ System.Reflection.Module get_Module();
        /*0x71d3fa4*/ bool get_IsNested();
        /*0x71d4a40*/ System.Type get_DeclaringType();
        /*0x71d4a48*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x71d4a50*/ System.Type get_ReflectedType();
        /*0x38148bc*/ System.Type get_UnderlyingSystemType();
        /*0x71d4a58*/ bool get_IsArray();
        /*0x3813ffc*/ bool IsArrayImpl();
        /*0x71d4a68*/ bool get_IsByRef();
        /*0x3813ffc*/ bool IsByRefImpl();
        /*0x71d4a78*/ bool get_IsPointer();
        /*0x3813ffc*/ bool IsPointerImpl();
        /*0x71d4a88*/ bool get_IsConstructedGenericType();
        /*0x71d4b00*/ bool get_IsGenericParameter();
        /*0x71d4b08*/ bool get_IsGenericMethodParameter();
        /*0x71d4b54*/ bool get_IsGenericType();
        /*0x71d4b5c*/ bool get_IsGenericTypeDefinition();
        /*0x71d4b64*/ bool get_IsSZArray();
        /*0x71d4b88*/ bool get_IsVariableBoundArray();
        /*0x71d3dac*/ bool get_HasElementType();
        /*0x3813ffc*/ bool HasElementTypeImpl();
        /*0x38148bc*/ System.Type GetElementType();
        /*0x71d4bd0*/ int GetArrayRank();
        /*0x71d4c1c*/ System.Type GetGenericTypeDefinition();
        /*0x71d4c68*/ System.Type[] get_GenericTypeArguments();
        /*0x71d4d44*/ System.Type[] GetGenericArguments();
        /*0x71d4d90*/ int get_GenericParameterPosition();
        /*0x71d4ddc*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x71d4e14*/ System.Type[] GetGenericParameterConstraints();
        /*0x71d4e8c*/ System.Reflection.TypeAttributes get_Attributes();
        /*0x3814574*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x71d4e9c*/ bool get_IsAbstract();
        /*0x71d4ebc*/ bool get_IsSealed();
        /*0x71d4edc*/ bool get_IsClass();
        /*0x71d4f34*/ bool get_IsNestedAssembly();
        /*0x71d3f7c*/ bool get_IsNestedPublic();
        /*0x71d4f5c*/ bool get_IsNotPublic();
        /*0x71d3fe4*/ bool get_IsPublic();
        /*0x71d4f80*/ bool get_IsExplicitLayout();
        /*0x71d4fa8*/ bool get_IsCOMObject();
        /*0x3813ffc*/ bool IsCOMObjectImpl();
        /*0x71d4fb8*/ bool get_IsContextful();
        /*0x71d4fc8*/ bool IsContextfulImpl();
        /*0x71d5044*/ bool get_IsCollectible();
        /*0x71d504c*/ bool get_IsEnum();
        /*0x71d50a0*/ bool get_IsMarshalByRef();
        /*0x71d50b0*/ bool IsMarshalByRefImpl();
        /*0x71d512c*/ bool get_IsPrimitive();
        /*0x3813ffc*/ bool IsPrimitiveImpl();
        /*0x71d4f24*/ bool get_IsValueType();
        /*0x71d513c*/ bool IsValueTypeImpl();
        /*0x71d5190*/ bool get_IsSignatureType();
        /*0x71d5198*/ System.Reflection.ConstructorInfo GetConstructor(System.Type[] types);
        /*0x71d51b0*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d51c0*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d52cc*/ System.Reflection.ConstructorInfo[] GetConstructors();
        /*0x3814964*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x3814b48*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71d52e0*/ System.Reflection.FieldInfo GetField(string name);
        /*0x3814b48*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x3814964*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x71d52f4*/ System.Reflection.MemberInfo[] GetMember(string name);
        /*0x71d5308*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71d5320*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x3814964*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
        /*0x71d536c*/ System.Reflection.MethodInfo GetMethod(string name);
        /*0x71d5374*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71d53e8*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types);
        /*0x71d5400*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d5418*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d5428*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d5560*/ System.Reflection.MethodInfo[] GetMethods();
        /*0x3814964*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0x3814b48*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71d5574*/ System.Reflection.PropertyInfo GetProperty(string name);
        /*0x71d557c*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71d55f0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType);
        /*0x71d56c0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types);
        /*0x71d56d8*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d56f0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d5778*/ System.Reflection.PropertyInfo[] GetProperties();
        /*0x3814964*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x71d578c*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x71d588c*/ System.TypeCode GetTypeCodeImpl();
        /*0x38144d4*/ System.Guid get_GUID();
        /*0x38148bc*/ System.Type get_BaseType();
        object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
        /*0x71d5a18*/ System.Type GetInterface(string name);
        /*0x3814a74*/ System.Type GetInterface(string name, bool ignoreCase);
        /*0x38148bc*/ System.Type[] GetInterfaces();
        /*0x71d5a2c*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType);
        /*0x71d5a78*/ bool IsInstanceOfType(object o);
        /*0x71d5ab4*/ bool IsEquivalentTo(System.Type other);
        /*0x71d5af4*/ System.Type GetEnumUnderlyingType();
        /*0x71d5bdc*/ System.Array GetEnumValues();
        /*0x71d5c60*/ System.Type MakeArrayType();
        /*0x71d5c98*/ System.Type MakeArrayType(int rank);
        /*0x71d5cd0*/ System.Type MakeByRefType();
        /*0x71d5d08*/ System.Type MakeGenericType(System.Type[] typeArguments);
        /*0x71d5d54*/ System.Type MakePointerType();
        /*0x71d5df8*/ string ToString();
        /*0x71d5e58*/ bool Equals(object o);
        /*0x71d5eb0*/ int GetHashCode();
        /*0x71d5ef8*/ bool Equals(System.Type o);
        /*0x71d603c*/ bool get_IsSzArray();
        /*0x71d6044*/ string FormatTypeName();
        /*0x71d6058*/ string FormatTypeName(bool serialization);
        /*0x71d423c*/ bool get_IsInterface();
        /*0x71d6240*/ string get_FullNameOrDefault();
        /*0x71d3c14*/ bool IsRuntimeImplemented();
        /*0x71d635c*/ string InternalGetNameIfAvailable(ref System.Type rootCauseForFailure);
        /*0x71d6338*/ string get_InternalNameIfAvailable();
        /*0x71d6368*/ string get_NameOrDefault();
    }

    class TypeAccessException : System.TypeLoadException
    {
        /*0x71d65b8*/ TypeAccessException();
        /*0x71d6614*/ TypeAccessException(string message);
        /*0x71d6638*/ TypeAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum TypeCode
    {
        Empty = 0,
        Object = 1,
        DBNull = 2,
        Boolean = 3,
        Char = 4,
        SByte = 5,
        Byte = 6,
        Int16 = 7,
        UInt16 = 8,
        Int32 = 9,
        UInt32 = 10,
        Int64 = 11,
        UInt64 = 12,
        Single = 13,
        Double = 14,
        Decimal = 15,
        DateTime = 16,
        String = 18,
    }

    class TypeInitializationException : System.SystemException
    {
        /*0x90*/ string _typeName;

        /*0x71d6640*/ TypeInitializationException();
        /*0x71d6698*/ TypeInitializationException(string fullTypeName, System.Exception innerException);
        /*0x71d6724*/ TypeInitializationException(string fullTypeName, string message, System.Exception innerException);
        /*0x71d6768*/ TypeInitializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71d67f4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71d68b4*/ string get_TypeName();
    }

    struct UInt16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ushort>, System.IEquatable<ushort>, System.ISpanFormattable
    {
        /*0x10*/ ushort m_value;

        static /*0x71d6c60*/ ushort Parse(string s, System.IFormatProvider provider);
        static /*0x71d6e64*/ ushort Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71d6cd8*/ ushort Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x71d6ef4*/ bool TryParse(string s, ref ushort result);
        static /*0x71d7030*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ushort result);
        static /*0x71d6f74*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref ushort result);
        /*0x71d68d8*/ int CompareTo(object value);
        /*0x71d6964*/ int CompareTo(ushort value);
        /*0x71d6970*/ bool Equals(object obj);
        /*0x71d69b8*/ bool Equals(ushort obj);
        /*0x71d69c8*/ int GetHashCode();
        /*0x71d69d0*/ string ToString();
        /*0x71d6a68*/ string ToString(System.IFormatProvider provider);
        /*0x71d6b04*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71d6bbc*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71d70d8*/ System.TypeCode GetTypeCode();
        /*0x71d70e0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71d713c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71d7198*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71d71f4*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71d7250*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71d72ac*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71d72b4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71d7310*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71d736c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71d73c8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71d7424*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71d7480*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71d74dc*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71d7538*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71d75bc*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<uint>, System.IEquatable<uint>, System.ISpanFormattable
    {
        /*0x10*/ uint m_value;

        static /*0x71d7abc*/ uint Parse(string s);
        static /*0x71d7b70*/ uint Parse(string s, System.IFormatProvider provider);
        static /*0x71d7c34*/ uint Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71d7d08*/ bool TryParse(string s, ref uint result);
        static /*0x71d7ddc*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref uint result);
        /*0x71d765c*/ int CompareTo(object value);
        /*0x71d76fc*/ int CompareTo(uint value);
        /*0x71d7718*/ bool Equals(object obj);
        /*0x71d7760*/ bool Equals(uint obj);
        /*0x71d7770*/ int GetHashCode();
        /*0x71d7778*/ string ToString();
        /*0x71d7810*/ string ToString(System.IFormatProvider provider);
        /*0x71d78ac*/ string ToString(string format);
        /*0x71d7960*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71d7a18*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71d7ed4*/ System.TypeCode GetTypeCode();
        /*0x71d7edc*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71d7f38*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71d7f94*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71d7ff0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71d804c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71d80a8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71d8104*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71d8160*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71d8168*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71d81c4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71d8220*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71d827c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71d82d8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71d8334*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71d83b8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ulong>, System.IEquatable<ulong>, System.ISpanFormattable
    {
        /*0x10*/ ulong m_value;

        static /*0x71d88bc*/ ulong Parse(string s);
        static /*0x71d8970*/ ulong Parse(string s, System.Globalization.NumberStyles style);
        static /*0x71d8a3c*/ ulong Parse(string s, System.IFormatProvider provider);
        static /*0x71d8b00*/ ulong Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71d8bd4*/ bool TryParse(string s, ref ulong result);
        static /*0x71d8ca8*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ulong result);
        /*0x71d8458*/ int CompareTo(object value);
        /*0x71d84f8*/ int CompareTo(ulong value);
        /*0x71d8514*/ bool Equals(object obj);
        /*0x71d855c*/ bool Equals(ulong obj);
        /*0x71d856c*/ int GetHashCode();
        /*0x71d8578*/ string ToString();
        /*0x71d8610*/ string ToString(System.IFormatProvider provider);
        /*0x71d86ac*/ string ToString(string format);
        /*0x71d8760*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71d8818*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71d8da0*/ System.TypeCode GetTypeCode();
        /*0x71d8da8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71d8e04*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71d8e60*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71d8ebc*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71d8f18*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71d8f74*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71d8fd0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71d902c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71d9088*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71d90e4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71d90ec*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71d9148*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71d91a4*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71d9200*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71d9284*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class UnauthorizedAccessException : System.SystemException
    {
        /*0x71d9324*/ UnauthorizedAccessException();
        /*0x71d937c*/ UnauthorizedAccessException(string message);
        /*0x71d939c*/ UnauthorizedAccessException(string message, System.Exception inner);
        /*0x71d93bc*/ UnauthorizedAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnhandledExceptionEventArgs : System.EventArgs
    {
        /*0x10*/ object _exception;
        /*0x18*/ bool _isTerminating;

        /*0x71d93c0*/ UnhandledExceptionEventArgs(object exception, bool isTerminating);
        /*0x71d9444*/ object get_ExceptionObject();
        /*0x71d944c*/ bool get_IsTerminating();
    }

    class UnhandledExceptionEventHandler : System.MulticastDelegate
    {
        /*0x71d9454*/ UnhandledExceptionEventHandler(object object, nint method);
        /*0x71d9560*/ void Invoke(object sender, System.UnhandledExceptionEventArgs e);
    }

    interface IValueTupleInternal : System.Runtime.CompilerServices.ITuple
    {
        /*0x381467c*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToStringEnd();
    }

    struct ValueTuple : System.IEquatable<System.ValueTuple>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        static /*0x3910ae8*/ System.ValueTuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static /*0x71d9904*/ int CombineHashCodes(int h1, int h2);
        static /*0x71d9980*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x71d9a00*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x71d9a90*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x71d9b28*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x71d9bd0*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x71d9c80*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
        /*0x71d9574*/ bool Equals(object obj);
        /*0x71d95d0*/ bool Equals(System.ValueTuple other);
        /*0x71d95d8*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x71d9634*/ int System.IComparable.CompareTo(object other);
        /*0x71d9748*/ int CompareTo(System.ValueTuple other);
        /*0x71d9750*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x71d9864*/ int GetHashCode();
        /*0x71d986c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x71d9874*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x71d987c*/ string ToString();
        /*0x71d98bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x71d98fc*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1> : System.IEquatable<System.ValueTuple<T1>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;

        /*0x3910ae8*/ ValueTuple(T1 item1);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2> : System.IEquatable<System.ValueTuple<T1, T2>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3> : System.IEquatable<System.ValueTuple<T1, T2, T3>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2, T3 item3);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2, T3> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2, T3> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2, T3, T4> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;
        /*0x0*/ TRest Rest;

        /*0x3910ae8*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        /*0x38141c4*/ bool Equals(object obj);
        /*0x3910ae8*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        /*0x3814200*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IComparable.CompareTo(object other);
        /*0x3910ae8*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x3814574*/ int GetHashCode();
        /*0x381467c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x381467c*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x38148bc*/ string ToString();
        /*0x38148bc*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x3814574*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Version : System.ICloneable, System.IComparable, System.IComparable<System.Version>, System.IEquatable<System.Version>, System.ISpanFormattable
    {
        /*0x10*/ int _Major;
        /*0x14*/ int _Minor;
        /*0x18*/ int _Build;
        /*0x1c*/ int _Revision;

        static /*0x71da03c*/ System.Version Parse(string input);
        static /*0x71dac70*/ bool TryParse(string input, ref System.Version result);
        static /*0x71da824*/ System.Version ParseVersion(System.ReadOnlySpan<char> input, bool throwOnFailure);
        static /*0x71dad24*/ bool TryParseComponent(System.ReadOnlySpan<char> component, string componentName, bool throwOnFailure, ref int parsedComponent);
        static /*0x71da264*/ bool op_Equality(System.Version v1, System.Version v2);
        static /*0x71dacfc*/ bool op_Inequality(System.Version v1, System.Version v2);
        static /*0x71dae38*/ bool op_LessThan(System.Version v1, System.Version v2);
        /*0x71d9d40*/ Version(int major, int minor, int build, int revision);
        /*0x71d9e54*/ Version(int major, int minor, int build);
        /*0x71d9f40*/ Version(int major, int minor);
        /*0x71d9ff8*/ Version(string version);
        /*0x71da0d4*/ Version();
        /*0x71da0f8*/ Version(System.Version version);
        /*0x71da134*/ object Clone();
        /*0x71da18c*/ int get_Major();
        /*0x71da194*/ int get_Minor();
        /*0x71da19c*/ int get_Build();
        /*0x71da1a4*/ int get_Revision();
        /*0x71da1ac*/ int CompareTo(object version);
        /*0x71da278*/ int CompareTo(System.Version value);
        /*0x71da2e0*/ bool Equals(object obj);
        /*0x71da344*/ bool Equals(System.Version obj);
        /*0x71da3a4*/ int GetHashCode();
        /*0x71da3c0*/ string ToString();
        /*0x71da410*/ string ToString(int fieldCount);
        /*0x71da6a4*/ bool TryFormat(System.Span<char> destination, ref int charsWritten);
        /*0x71da6d0*/ bool TryFormat(System.Span<char> destination, int fieldCount, ref int charsWritten);
        /*0x71da7f8*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71da3e8*/ int get_DefaultFormatFieldCount();
        /*0x71da45c*/ System.Text.StringBuilder ToCachedStringBuilder(int fieldCount);
    }

    struct Void
    {
    }

    struct MutableDecimal
    {
        /*0x10*/ uint Flags;
        /*0x14*/ uint High;
        /*0x18*/ uint Low;
        /*0x1c*/ uint Mid;

        /*0x71dae98*/ bool get_IsNegative();
        /*0x71daea4*/ void set_IsNegative(bool value);
        /*0x71daec0*/ int get_Scale();
        /*0x71daec8*/ void set_Scale(int value);
    }

    class NotImplemented
    {
        static /*0x71d4aac*/ System.Exception get_ByDesign();
    }

    interface IServiceProvider
    {
        /*0x3814a3c*/ object GetService(System.Type serviceType);
    }

    class ConsoleCancelEventHandler : System.MulticastDelegate
    {
        /*0x71daedc*/ ConsoleCancelEventHandler(object object, nint method);
        /*0x71dafe8*/ void Invoke(object sender, System.ConsoleCancelEventArgs e);
    }

    class ConsoleCancelEventArgs : System.EventArgs
    {
        /*0x10*/ System.ConsoleSpecialKey _type;
        /*0x14*/ bool <Cancel>k__BackingField;

        /*0x71daffc*/ ConsoleCancelEventArgs(System.ConsoleSpecialKey type);
        /*0x71db070*/ ConsoleCancelEventArgs();
        /*0x71db068*/ bool get_Cancel();
    }

    enum ConsoleColor
    {
        Black = 0,
        DarkBlue = 1,
        DarkGreen = 2,
        DarkCyan = 3,
        DarkRed = 4,
        DarkMagenta = 5,
        DarkYellow = 6,
        Gray = 7,
        DarkGray = 8,
        Blue = 9,
        Green = 10,
        Cyan = 11,
        Red = 12,
        Magenta = 13,
        Yellow = 14,
        White = 15,
    }

    enum ConsoleKey
    {
        Backspace = 8,
        Tab = 9,
        Clear = 12,
        Enter = 13,
        Pause = 19,
        Escape = 27,
        Spacebar = 32,
        PageUp = 33,
        PageDown = 34,
        End = 35,
        Home = 36,
        LeftArrow = 37,
        UpArrow = 38,
        RightArrow = 39,
        DownArrow = 40,
        Select = 41,
        Print = 42,
        Execute = 43,
        PrintScreen = 44,
        Insert = 45,
        Delete = 46,
        Help = 47,
        D0 = 48,
        D1 = 49,
        D2 = 50,
        D3 = 51,
        D4 = 52,
        D5 = 53,
        D6 = 54,
        D7 = 55,
        D8 = 56,
        D9 = 57,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        LeftWindows = 91,
        RightWindows = 92,
        Applications = 93,
        Sleep = 95,
        NumPad0 = 96,
        NumPad1 = 97,
        NumPad2 = 98,
        NumPad3 = 99,
        NumPad4 = 100,
        NumPad5 = 101,
        NumPad6 = 102,
        NumPad7 = 103,
        NumPad8 = 104,
        NumPad9 = 105,
        Multiply = 106,
        Add = 107,
        Separator = 108,
        Subtract = 109,
        Decimal = 110,
        Divide = 111,
        F1 = 112,
        F2 = 113,
        F3 = 114,
        F4 = 115,
        F5 = 116,
        F6 = 117,
        F7 = 118,
        F8 = 119,
        F9 = 120,
        F10 = 121,
        F11 = 122,
        F12 = 123,
        F13 = 124,
        F14 = 125,
        F15 = 126,
        F16 = 127,
        F17 = 128,
        F18 = 129,
        F19 = 130,
        F20 = 131,
        F21 = 132,
        F22 = 133,
        F23 = 134,
        F24 = 135,
        BrowserBack = 166,
        BrowserForward = 167,
        BrowserRefresh = 168,
        BrowserStop = 169,
        BrowserSearch = 170,
        BrowserFavorites = 171,
        BrowserHome = 172,
        VolumeMute = 173,
        VolumeDown = 174,
        VolumeUp = 175,
        MediaNext = 176,
        MediaPrevious = 177,
        MediaStop = 178,
        MediaPlay = 179,
        LaunchMail = 180,
        LaunchMediaSelect = 181,
        LaunchApp1 = 182,
        LaunchApp2 = 183,
        Oem1 = 186,
        OemPlus = 187,
        OemComma = 188,
        OemMinus = 189,
        OemPeriod = 190,
        Oem2 = 191,
        Oem3 = 192,
        Oem4 = 219,
        Oem5 = 220,
        Oem6 = 221,
        Oem7 = 222,
        Oem8 = 223,
        Oem102 = 226,
        Process = 229,
        Packet = 231,
        Attention = 246,
        CrSel = 247,
        ExSel = 248,
        EraseEndOfFile = 249,
        Play = 250,
        Zoom = 251,
        NoName = 252,
        Pa1 = 253,
        OemClear = 254,
    }

    struct ConsoleKeyInfo
    {
        /*0x10*/ char _keyChar;
        /*0x14*/ System.ConsoleKey _key;
        /*0x18*/ System.ConsoleModifiers _mods;

        /*0x71db0a8*/ ConsoleKeyInfo(char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control);
        /*0x71db144*/ char get_KeyChar();
        /*0x71db14c*/ System.ConsoleKey get_Key();
        /*0x71db154*/ bool Equals(object value);
        /*0x71db1ec*/ bool Equals(System.ConsoleKeyInfo obj);
        /*0x71db220*/ int GetHashCode();
    }

    enum ConsoleModifiers
    {
        Alt = 1,
        Shift = 2,
        Control = 4,
    }

    enum ConsoleSpecialKey
    {
        ControlC = 0,
        ControlBreak = 1,
    }

    class DecimalDecCalc
    {
        static /*0x71db234*/ uint D32DivMod1E9(uint hi32, ref uint lo32);
        static /*0x71db26c*/ uint DecDivMod1E9(ref System.MutableDecimal value);
        static /*0x71db2dc*/ void DecAddInt32(ref System.MutableDecimal value, uint i);
        static /*0x71db31c*/ bool D32AddCarry(ref uint value, uint i);
        static /*0x71db340*/ void DecMul10(ref System.MutableDecimal value);
        static /*0x71db39c*/ void DecShiftLeft(ref System.MutableDecimal value);
        static /*0x71db3bc*/ void DecAdd(ref System.MutableDecimal value, System.MutableDecimal d);
    }

    struct SequencePosition : System.IEquatable<System.SequencePosition>
    {
        /*0x10*/ object _object;
        /*0x18*/ int _integer;

        /*0x71db428*/ SequencePosition(object object, int integer);
        /*0x71db450*/ object GetObject();
        /*0x71db458*/ int GetInteger();
        /*0x71db460*/ bool Equals(System.SequencePosition other);
        /*0x71db480*/ bool Equals(object obj);
        /*0x71db50c*/ int GetHashCode();
    }

    class ThrowHelper
    {
        static /*0x71cc4dc*/ void ThrowArgumentNullException(System.ExceptionArgument argument);
        static /*0x71db58c*/ System.Exception CreateArgumentNullException(System.ExceptionArgument argument);
        static /*0x71db630*/ void ThrowArrayTypeMismatchException();
        static /*0x71db654*/ System.Exception CreateArrayTypeMismatchException();
        static /*0x71db6a8*/ void ThrowArgumentException_DestinationTooShort();
        static /*0x71db6cc*/ System.Exception CreateArgumentException_DestinationTooShort();
        static /*0x71db738*/ void ThrowIndexOutOfRangeException();
        static /*0x71db75c*/ System.Exception CreateIndexOutOfRangeException();
        static /*0x71db7b0*/ void ThrowArgumentOutOfRangeException();
        static /*0x71db7d4*/ System.Exception CreateArgumentOutOfRangeException();
        static /*0x71db828*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x71db84c*/ System.Exception CreateArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x71db8f0*/ void ThrowArgumentOutOfRangeException_PrecisionTooLarge();
        static /*0x71db914*/ System.Exception CreateArgumentOutOfRangeException_PrecisionTooLarge();
        static /*0x71db9d8*/ void ThrowArgumentOutOfRangeException_SymbolDoesNotFit();
        static /*0x71db9fc*/ System.Exception CreateArgumentOutOfRangeException_SymbolDoesNotFit();
        static /*0x71dba88*/ void ThrowInvalidOperationException();
        static /*0x71dbaac*/ System.Exception CreateInvalidOperationException();
        static /*0x71dbb00*/ void ThrowInvalidOperationException_EndPositionNotReached();
        static /*0x71dbb24*/ System.Exception CreateInvalidOperationException_EndPositionNotReached();
        static /*0x71dbb90*/ void ThrowArgumentOutOfRangeException_PositionOutOfRange();
        static /*0x71dbbb4*/ System.Exception CreateArgumentOutOfRangeException_PositionOutOfRange();
        static /*0x71dbc20*/ void ThrowArgumentOutOfRangeException_OffsetOutOfRange();
        static /*0x71dbc44*/ System.Exception CreateArgumentOutOfRangeException_OffsetOutOfRange();
        static /*0x71dbcb0*/ void ThrowObjectDisposedException_ArrayMemoryPoolBuffer();
        static /*0x71dbcd4*/ System.Exception CreateObjectDisposedException_ArrayMemoryPoolBuffer();
        static /*0x71dbd3c*/ void ThrowFormatException_BadFormatSpecifier();
        static /*0x71dbd60*/ System.Exception CreateFormatException_BadFormatSpecifier();
        static /*0x71dbdcc*/ void ThrowNotSupportedException();
        static /*0x71dbdf0*/ System.Exception CreateThrowNotSupportedException();
        static /*0x71dbe44*/ bool TryFormatThrowFormatException(ref int bytesWritten);
        static /*0x3825b78*/ bool TryParseThrowFormatException<T>(ref T value, ref int bytesConsumed);
        static /*0x3843070*/ void ThrowArgumentValidationException<T>(System.Buffers.ReadOnlySequenceSegment<T> startSegment, int startIndex, System.Buffers.ReadOnlySequenceSegment<T> endSegment);
        static /*0x38391e0*/ System.Exception CreateArgumentValidationException<T>(System.Buffers.ReadOnlySequenceSegment<T> startSegment, int startIndex, System.Buffers.ReadOnlySequenceSegment<T> endSegment);
        static /*0x71dbe50*/ void ThrowStartOrEndArgumentValidationException(long start);
        static /*0x71dbe74*/ System.Exception CreateStartOrEndArgumentValidationException(long start);
        static /*0x71dbe88*/ void ThrowWrongKeyTypeArgumentException(object key, System.Type targetType);
        static /*0x71dbf5c*/ void ThrowWrongValueTypeArgumentException(object value, System.Type targetType);
        static /*0x71dc030*/ void ThrowArgumentException(System.ExceptionResource resource);
        static /*0x71dc300*/ void ThrowArgumentException(System.ExceptionResource resource, System.ExceptionArgument argument);
        static /*0x71dc4dc*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x71dc578*/ void ThrowInvalidOperationException(System.ExceptionResource resource);
        static /*0x71dc5c8*/ void ThrowSerializationException(System.ExceptionResource resource);
        static /*0x71dc618*/ void ThrowNotSupportedException(System.ExceptionResource resource);
        static /*0x71dc668*/ void ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion();
        static /*0x71dc6b4*/ void ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen();
        static /*0x71dc700*/ void ThrowInvalidOperationException_InvalidOperation_EnumNotStarted();
        static /*0x71dc74c*/ void ThrowInvalidOperationException_InvalidOperation_EnumEnded();
        static /*0x71dc798*/ void ThrowInvalidOperationException_InvalidOperation_NoValue();
        static /*0x71dc7e4*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, string resource);
        static /*0x71dc860*/ void ThrowArgumentOutOfRange_IndexException();
        static /*0x71dc898*/ void ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
        static /*0x71dc8d0*/ void ThrowArgumentException_Argument_InvalidArrayType();
        static /*0x71dc91c*/ System.ArgumentException GetAddingDuplicateWithKeyArgumentException(object key);
        static /*0x71dc9ac*/ void ThrowAddingDuplicateWithKeyArgumentException(object key);
        static /*0x71dc9d0*/ System.Collections.Generic.KeyNotFoundException GetKeyNotFoundException(object key);
        static /*0x71dca48*/ void ThrowKeyNotFoundException(object key);
        static /*0x71dca50*/ void ThrowInvalidTypeWithPointersNotSupported(System.Type targetType);
        static /*0x71dcab0*/ void ThrowInvalidOperationException_ConcurrentOperationsNotSupported();
        static /*0x71dcae0*/ System.InvalidOperationException GetInvalidOperationException(string str);
        static /*0x71dcb3c*/ void ThrowArraySegmentCtorValidationFailedExceptions(System.Array array, int offset, int count);
        static /*0x71dcb60*/ System.Exception GetArraySegmentCtorValidationFailedException(System.Array array, int offset, int count);
        static /*0x71dccb4*/ System.ArgumentException GetArgumentException(System.ExceptionResource resource);
        static /*0x71dcb90*/ System.ArgumentNullException GetArgumentNullException(System.ExceptionArgument argument);
        static /*0x3842d2c*/ void IfNullAndNullsAreIllegalThenThrow<T>(object value, System.ExceptionArgument argName);
        static /*0x71dc364*/ string GetArgumentName(System.ExceptionArgument argument);
        static /*0x71dcbfc*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x71dcd58*/ void ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index();
        static /*0x71dcd84*/ void ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count();
        static /*0x71dc080*/ string GetResourceName(System.ExceptionResource resource);
    }

    class AppDomainUnloadedException : System.SystemException
    {
        /*0x71dcdb0*/ AppDomainUnloadedException();
        /*0x71dce08*/ AppDomainUnloadedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class CannotUnloadAppDomainException : System.SystemException
    {
        /*0x71dce0c*/ CannotUnloadAppDomainException();
        /*0x71dce64*/ CannotUnloadAppDomainException(string message);
        /*0x71dce84*/ CannotUnloadAppDomainException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OperatingSystem : System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        /*0x10*/ System.Version _version;
        /*0x18*/ System.PlatformID _platform;
        /*0x20*/ string _servicePack;
        /*0x28*/ string _versionString;

        /*0x71dce88*/ OperatingSystem(System.PlatformID platform, System.Version version);
        /*0x71dce90*/ OperatingSystem(System.PlatformID platform, System.Version version, string servicePack);
        /*0x71dcfdc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71dd010*/ System.PlatformID get_Platform();
        /*0x71dd018*/ System.Version get_Version();
        /*0x71dd020*/ object Clone();
        /*0x71dd094*/ string ToString();
        /*0x71dd098*/ string get_VersionString();
    }

    class InsufficientMemoryException : System.OutOfMemoryException
    {
        /*0x71dd280*/ InsufficientMemoryException();
        /*0x71dd2f8*/ InsufficientMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MissingFieldException : System.MissingMemberException, System.Runtime.Serialization.ISerializable
    {
        /*0x71dd300*/ MissingFieldException();
        /*0x71dd380*/ MissingFieldException(string message);
        /*0x71dd3a4*/ MissingFieldException(string className, string fieldName);
        /*0x71dd440*/ MissingFieldException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71dd5d0*/ string get_Message();
    }

    class MissingMemberException : System.MemberAccessException
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string MemberName;
        /*0xa0*/ byte[] Signature;

        static /*0x71dd8e4*/ string FormatSignature(byte[] signature);
        /*0x71dd3e4*/ MissingMemberException();
        /*0x71dd35c*/ MissingMemberException(string message);
        /*0x71dd444*/ MissingMemberException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71dd7a0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71dd6b8*/ string get_Message();
    }

    class OutOfMemoryException : System.SystemException
    {
        /*0x71dd8fc*/ OutOfMemoryException();
        /*0x71dd2d8*/ OutOfMemoryException(string message);
        /*0x71dd2fc*/ OutOfMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable
    {
        static /*0x71dd954*/ System.Array CreateInstance(System.Type elementType, long[] lengths);
        static /*0x38379c4*/ System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
        static /*0x3842d2c*/ void Resize<T>(ref T[] array, int newSize);
        static /*0x71deafc*/ int CombineHashCodes(int h1, int h2);
        static /*0x71dec78*/ int BinarySearch(System.Array array, object value);
        static /*0x38395d4*/ TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, System.Converter<TInput, TOutput> converter);
        static /*0x71df19c*/ void Copy(System.Array sourceArray, System.Array destinationArray, long length);
        static /*0x71df2d0*/ void Copy(System.Array sourceArray, long sourceIndex, System.Array destinationArray, long destinationIndex, long length);
        static /*0x3843dfc*/ void ForEach<T>(T[] array, System.Action<T> action);
        static /*0x71df92c*/ int BinarySearch(System.Array array, int index, int length, object value);
        static /*0x71df934*/ int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer);
        static /*0x71ded08*/ int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer);
        static /*0x71df9d0*/ int GetMedian(int low, int hi);
        static /*0x3910ae8*/ int BinarySearch<T>(T[] array, T value);
        static /*0x3910ae8*/ int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x3910ae8*/ int BinarySearch<T>(T[] array, int index, int length, T value);
        static /*0x3910ae8*/ int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x71ddf14*/ int IndexOf(System.Array array, object value);
        static /*0x71dfc74*/ int IndexOf(System.Array array, object value, int startIndex);
        static /*0x71df9dc*/ int IndexOf(System.Array array, object value, int startIndex, int count);
        static /*0x3910ae8*/ int IndexOf<T>(T[] array, T value);
        static /*0x3910ae8*/ int IndexOf<T>(T[] array, T value, int startIndex);
        static /*0x3910ae8*/ int IndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x71dfd10*/ int LastIndexOf(System.Array array, object value);
        static /*0x71e0040*/ int LastIndexOf(System.Array array, object value, int startIndex);
        static /*0x71dfd98*/ int LastIndexOf(System.Array array, object value, int startIndex, int count);
        static /*0x3910ae8*/ int LastIndexOf<T>(T[] array, T value);
        static /*0x3910ae8*/ int LastIndexOf<T>(T[] array, T value, int startIndex);
        static /*0x3910ae8*/ int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x71e0098*/ void Reverse(System.Array array);
        static /*0x71e011c*/ void Reverse(System.Array array, int index, int length);
        static /*0x3840c74*/ void Reverse<T>(T[] array);
        static /*0x3842e50*/ void Reverse<T>(T[] array, int index, int length);
        static /*0x71e0814*/ void Sort(System.Array array);
        static /*0x71e0adc*/ void Sort(System.Array array, int index, int length);
        static /*0x71e0af0*/ void Sort(System.Array array, System.Collections.IComparer comparer);
        static /*0x71e0b80*/ void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer);
        static /*0x71e0b94*/ void Sort(System.Array keys, System.Array items);
        static /*0x71e0c24*/ void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer);
        static /*0x71e0cc0*/ void Sort(System.Array keys, System.Array items, int index, int length);
        static /*0x71e08a0*/ void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static /*0x3840c74*/ void Sort<T>(T[] array);
        static /*0x3842e50*/ void Sort<T>(T[] array, int index, int length);
        static /*0x3843dfc*/ void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer);
        static /*0x3842ee0*/ void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
        static /*0x3843dfc*/ void Sort<T>(T[] array, System.Comparison<T> comparison);
        static /*0x3843dfc*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
        static /*0x3844414*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
        static /*0x3844b58*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
        static /*0x3844458*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
        static /*0x3825b78*/ bool Exists<T>(T[] array, System.Predicate<T> match);
        static /*0x3910ae8*/ void Fill<T>(T[] array, T value);
        static /*0x3910ae8*/ void Fill<T>(T[] array, T value, int startIndex, int count);
        static /*0x3910ae8*/ T Find<T>(T[] array, System.Predicate<T> match);
        static /*0x38395d4*/ T[] FindAll<T>(T[] array, System.Predicate<T> match);
        static /*0x3830044*/ int FindIndex<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static /*0x3910ae8*/ T FindLast<T>(T[] array, System.Predicate<T> match);
        static /*0x3830044*/ int FindLastIndex<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static /*0x3825b78*/ bool TrueForAll<T>(T[] array, System.Predicate<T> match);
        static /*0x71e0ef0*/ bool FastCopy(System.Array source, int source_idx, System.Array dest, int dest_idx, int length);
        static /*0x71e0ef4*/ System.Array CreateInstanceImpl(System.Type elementType, int[] lengths, int[] bounds);
        static /*0x71e0f30*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x71e12dc*/ System.Array UnsafeCreateInstance(System.Type elementType, int length1, int length2);
        static /*0x71e1368*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths);
        static /*0x71e136c*/ System.Array CreateInstance(System.Type elementType, int length);
        static /*0x71e12e0*/ System.Array CreateInstance(System.Type elementType, int length1, int length2);
        static /*0x71e13e4*/ System.Array CreateInstance(System.Type elementType, int length1, int length2, int length3);
        static /*0x71ddacc*/ System.Array CreateInstance(System.Type elementType, int[] lengths);
        static /*0x71e0f34*/ System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x71ddfdc*/ void Clear(System.Array array, int index, int length);
        static /*0x71e1484*/ void ClearInternal(System.Array a, int index, int count);
        static /*0x71df20c*/ void Copy(System.Array sourceArray, System.Array destinationArray, int length);
        static /*0x71de290*/ void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x71e1488*/ System.ArrayTypeMismatchException CreateArrayTypeMismatchException();
        static /*0x71e14dc*/ bool CanAssignArrayElement(System.Type source, System.Type target);
        static /*0x71e15b0*/ void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x3836db8*/ T[] Empty<T>();
        static /*0x3910ae8*/ int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x3910ae8*/ int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x71e0cc8*/ void SortImpl(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static /*0x3910ae8*/ T UnsafeLoad<T>(T[] array, int index);
        static /*0x3910ae8*/ void UnsafeStore<T>(T[] array, int index, T value);
        static /*0x3910ae8*/ R UnsafeMov<S, R>(S instance);
        /*0x71e0e20*/ Array();
        /*0x71ddd20*/ int System.Collections.ICollection.get_Count();
        /*0x71ddd24*/ bool System.Collections.IList.get_IsReadOnly();
        /*0x71ddd2c*/ object System.Collections.IList.get_Item(int index);
        /*0x71ddd30*/ void System.Collections.IList.set_Item(int index, object value);
        /*0x71ddeb0*/ int System.Collections.IList.Add(object value);
        /*0x71ddefc*/ bool System.Collections.IList.Contains(object value);
        /*0x71ddfa0*/ void System.Collections.IList.Clear();
        /*0x71de0f4*/ int System.Collections.IList.IndexOf(object value);
        /*0x71de0f8*/ void System.Collections.IList.Insert(int index, object value);
        /*0x71de144*/ void System.Collections.IList.Remove(object value);
        /*0x71de190*/ void System.Collections.IList.RemoveAt(int index);
        /*0x71de1dc*/ void CopyTo(System.Array array, int index);
        /*0x71de798*/ object Clone();
        /*0x71de7a0*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x71de974*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x71deb08*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x71df398*/ void CopyTo(System.Array array, long index);
        /*0x71df408*/ long get_LongLength();
        /*0x71df470*/ long GetLongLength(int dimension);
        /*0x71df484*/ object GetValue(long index);
        /*0x71df4f4*/ object GetValue(long index1, long index2);
        /*0x71df61c*/ object GetValue(long index1, long index2, long index3);
        /*0x71df784*/ object GetValue(long[] indices);
        /*0x71df910*/ bool get_IsFixedSize();
        /*0x71df918*/ bool get_IsReadOnly();
        /*0x71df920*/ bool get_IsSynchronized();
        /*0x71df928*/ object get_SyncRoot();
        /*0x71e0360*/ void SetValue(object value, long index);
        /*0x71e03d0*/ void SetValue(object value, long index1, long index2);
        /*0x71e0508*/ void SetValue(object value, long index1, long index2, long index3);
        /*0x71e0678*/ void SetValue(object value, long[] indices);
        /*0x71e0dc4*/ System.Collections.IEnumerator GetEnumerator();
        /*0x71e0e28*/ int InternalArray__ICollection_get_Count();
        /*0x71e0e2c*/ bool InternalArray__ICollection_get_IsReadOnly();
        /*0x71e0e34*/ ref byte GetRawSzArrayData();
        /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
        /*0x71e0e48*/ void InternalArray__ICollection_Clear();
        /*0x3910ae8*/ void InternalArray__ICollection_Add<T>(T item);
        /*0x3910ae8*/ bool InternalArray__ICollection_Remove<T>(T item);
        /*0x3910ae8*/ bool InternalArray__ICollection_Contains<T>(T item);
        /*0x381678c*/ void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
        /*0x3910ae8*/ T InternalArray__IReadOnlyList_get_Item<T>(int index);
        /*0x71e0e94*/ int InternalArray__IReadOnlyCollection_get_Count();
        /*0x3910ae8*/ void InternalArray__Insert<T>(int index, T item);
        /*0x71e0e98*/ void InternalArray__RemoveAt(int index);
        /*0x3910ae8*/ int InternalArray__IndexOf<T>(T item);
        /*0x3910ae8*/ T InternalArray__get_Item<T>(int index);
        /*0x3910ae8*/ void InternalArray__set_Item<T>(int index, T item);
        /*0x3816044*/ void GetGenericValueImpl<T>(int pos, ref T value);
        /*0x3816044*/ void SetGenericValueImpl<T>(int pos, ref T value);
        /*0x71d3930*/ int get_Length();
        /*0x71de28c*/ int get_Rank();
        /*0x71e0ee4*/ int GetRank();
        /*0x71df46c*/ int GetLength(int dimension);
        /*0x71ddfd8*/ int GetLowerBound(int dimension);
        /*0x71df90c*/ object GetValue(int[] indices);
        /*0x71e0810*/ void SetValue(object value, int[] indices);
        /*0x71e0ee8*/ object GetValueImpl(int pos);
        /*0x71e0eec*/ void SetValueImpl(object value, int pos);
        /*0x71e0ef8*/ int GetUpperBound(int dimension);
        /*0x71d3990*/ object GetValue(int index);
        /*0x71df594*/ object GetValue(int index1, int index2);
        /*0x71df6e4*/ object GetValue(int index1, int index2, int index3);
        /*0x71ddd40*/ void SetValue(object value, int index);
        /*0x71e0470*/ void SetValue(object value, int index1, int index2);
        /*0x71e05d0*/ void SetValue(object value, int index1, int index2, int index3);
        /*0x71e15b4*/ void Initialize();

        class ArrayEnumerator : System.Collections.IEnumerator, System.ICloneable
        {
            /*0x10*/ System.Array _array;
            /*0x18*/ int _index;
            /*0x1c*/ int _endIndex;

            /*0x71e1970*/ ArrayEnumerator(System.Array array);
            /*0x71e19c8*/ bool MoveNext();
            /*0x71e19f0*/ void Reset();
            /*0x71e19fc*/ object Clone();
            /*0x71e1a04*/ object get_Current();
        }

        class RawData
        {
            /*0x10*/ nint Bounds;
            /*0x18*/ nint Count;
            /*0x20*/ byte Data;
        }

        struct InternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ System.Array array;
            /*0x0*/ int idx;

            /*0x3816710*/ InternalEnumerator(System.Array array);
            /*0x38159dc*/ void Dispose();
            /*0x3813ffc*/ bool MoveNext();
            /*0x3910ae8*/ T get_Current();
            /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
            /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
        }

        class EmptyInternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            static /*0x0*/ System.Array.EmptyInternalEnumerator<T> Value;

            static /*0x383e7a0*/ EmptyInternalEnumerator();
            /*0x38159dc*/ EmptyInternalEnumerator();
            /*0x38159dc*/ void Dispose();
            /*0x3813ffc*/ bool MoveNext();
            /*0x3910ae8*/ T get_Current();
            /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
            /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
        }

        struct SorterObjectArray
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0x71e1b10*/ SorterObjectArray(object[] keys, object[] items, System.Collections.IComparer comparer);
            /*0x71e1bb0*/ void SwapIfGreaterWithItems(int a, int b);
            /*0x71e1e1c*/ void Swap(int i, int j);
            /*0x71e1fbc*/ void Sort(int left, int length);
            /*0x71e1fc0*/ void IntrospectiveSort(int left, int length);
            /*0x71e210c*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0x71e2588*/ int PickPivotAndPartition(int lo, int hi);
            /*0x71e24e8*/ void Heapsort(int lo, int hi);
            /*0x71e27b4*/ void DownHeap(int i, int n, int lo);
            /*0x71e2220*/ void InsertionSort(int lo, int hi);
        }

        struct SorterGenericArray
        {
            /*0x10*/ System.Array keys;
            /*0x18*/ System.Array items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0x71e2b4c*/ SorterGenericArray(System.Array keys, System.Array items, System.Collections.IComparer comparer);
            /*0x71e2bec*/ void SwapIfGreaterWithItems(int a, int b);
            /*0x71e2dbc*/ void Swap(int i, int j);
            /*0x71e2ea8*/ void Sort(int left, int length);
            /*0x71e2eac*/ void IntrospectiveSort(int left, int length);
            /*0x71e3000*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0x71e339c*/ int PickPivotAndPartition(int lo, int hi);
            /*0x71e32fc*/ void Heapsort(int lo, int hi);
            /*0x71e35b8*/ void DownHeap(int i, int n, int lo);
            /*0x71e3114*/ void InsertionSort(int lo, int hi);
        }
    }

    struct ByReference<T>
    {
        /*0x0*/ nint _value;

        /*0x3816710*/ ByReference(ref T value);
        /*0x38148bc*/ ref T get_Value();
    }

    class MonoTODOAttribute : System.Attribute
    {
        /*0x10*/ string comment;

        /*0x71e3888*/ MonoTODOAttribute();
        /*0x71e3898*/ MonoTODOAttribute(string comment);
    }

    class MonoLimitationAttribute : System.MonoTODOAttribute
    {
        /*0x71e38c8*/ MonoLimitationAttribute(string comment);
    }

    class AppContext
    {
        static /*0x0*/ System.Collections.Generic.Dictionary<string, System.AppContext.SwitchValueState> s_switchMap;
        static /*0x8*/ bool s_defaultsInitialized;

        static /*0x71e3e7c*/ AppContext();
        static /*0x71e38f8*/ void InitializeDefaultSwitchValues();
        static /*0x71e3a70*/ bool TryGetSwitch(string switchName, ref bool isEnabled);

        enum SwitchValueState
        {
            HasFalseValue = 1,
            HasTrueValue = 2,
            HasLookedForOverride = 4,
            UnknownValue = 8,
        }
    }

    class AppContextSwitches
    {
        static /*0x0*/ bool SetActorAsReferenceWhenCopyingClaimsIdentity;
        static /*0x1*/ bool NoAsyncCurrentCulture;
        static /*0x2*/ bool EnforceJapaneseEraYearRanges;
        static /*0x3*/ bool FormatJapaneseFirstYearAsANumber;
        static /*0x4*/ bool EnforceLegacyJapaneseDateParsing;
    }

    class LocalDataStoreHolder
    {
        /*0x10*/ System.LocalDataStore m_Store;

        /*0x71e3f28*/ LocalDataStoreHolder(System.LocalDataStore store);
        /*0x71e3f58*/ void Finalize();
        /*0x71e4010*/ System.LocalDataStore get_Store();
    }

    class LocalDataStoreElement
    {
        /*0x10*/ object m_value;
        /*0x18*/ long m_cookie;

        /*0x71e4018*/ LocalDataStoreElement(long cookie);
        /*0x71e4040*/ object get_Value();
        /*0x71e4048*/ void set_Value(object value);
        /*0x71e4050*/ long get_Cookie();
    }

    class LocalDataStore
    {
        /*0x10*/ System.LocalDataStoreElement[] m_DataTable;
        /*0x18*/ System.LocalDataStoreMgr m_Manager;

        /*0x71e4058*/ LocalDataStore(System.LocalDataStoreMgr mgr, int InitialCapacity);
        /*0x71e3ff4*/ void Dispose();
        /*0x71e41e0*/ object GetData(System.LocalDataStoreSlot slot);
        /*0x71e4324*/ void SetData(System.LocalDataStoreSlot slot, object data);
        /*0x71e46a4*/ void FreeData(int slot, long cookie);
        /*0x71e4404*/ System.LocalDataStoreElement PopulateElement(System.LocalDataStoreSlot slot);
    }

    class LocalDataStoreSlot
    {
        /*0x10*/ System.LocalDataStoreMgr m_mgr;
        /*0x18*/ int m_slot;
        /*0x20*/ long m_cookie;

        /*0x71e4714*/ LocalDataStoreSlot(System.LocalDataStoreMgr mgr, int slot, long cookie);
        /*0x71e4760*/ System.LocalDataStoreMgr get_Manager();
        /*0x71e4768*/ int get_Slot();
        /*0x71e4770*/ long get_Cookie();
        /*0x71e4778*/ void Finalize();
    }

    class LocalDataStoreMgr
    {
        /*0x10*/ bool[] m_SlotInfoTable;
        /*0x18*/ int m_FirstAvailableSlot;
        /*0x20*/ System.Collections.Generic.List<System.LocalDataStore> m_ManagedLocalDataStores;
        /*0x28*/ System.Collections.Generic.Dictionary<string, System.LocalDataStoreSlot> m_KeyToSlotMap;
        /*0x30*/ long m_CookieGenerator;

        /*0x71e5118*/ LocalDataStoreMgr();
        /*0x71e49bc*/ System.LocalDataStoreHolder CreateLocalDataStore();
        /*0x71e40dc*/ void DeleteLocalDataStore(System.LocalDataStore store);
        /*0x71e4b84*/ System.LocalDataStoreSlot AllocateDataSlot();
        /*0x71e4ddc*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
        /*0x71e4ef8*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
        /*0x71e5014*/ void FreeNamedDataSlot(string name);
        /*0x71e4824*/ void FreeDataSlot(int slot, long cookie);
        /*0x71e42b0*/ void ValidateSlot(System.LocalDataStoreSlot slot);
        /*0x71e46f8*/ int GetSlotTableLength();
    }

    class Activator
    {
        static /*0x71e5224*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
        static /*0x71e522c*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
        static /*0x71e5ddc*/ object CreateInstance(System.Type type, object[] args);
        static /*0x71e5df4*/ object CreateInstance(System.Type type, object[] args, object[] activationAttributes);
        static /*0x71e5e0c*/ object CreateInstance(System.Type type);
        static /*0x71e5e18*/ object CreateInstance(System.Type type, bool nonPublic);
        static /*0x71e5e24*/ object CreateInstance(System.Type type, bool nonPublic, bool wrapExceptions);
        static /*0x3910ae8*/ T CreateInstance<T>();
    }

    class Attribute
    {
        static /*0x71e60b4*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.PropertyInfo element, System.Type type, bool inherit);
        static /*0x71e6160*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.EventInfo element, System.Type type, bool inherit);
        static /*0x71e620c*/ System.Attribute[] InternalParamGetCustomAttributes(System.Reflection.ParameterInfo parameter, System.Type attributeType, bool inherit);
        static /*0x71e6728*/ bool InternalIsDefined(System.Reflection.PropertyInfo element, System.Type attributeType, bool inherit);
        static /*0x71e6798*/ bool InternalIsDefined(System.Reflection.EventInfo element, System.Type attributeType, bool inherit);
        static /*0x71e6808*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type);
        static /*0x71e6810*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type, bool inherit);
        static /*0x71e6af8*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element);
        static /*0x71e6b00*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, bool inherit);
        static /*0x71e6d34*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x71e6d3c*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x71e7004*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x71e700c*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x71e7098*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit);
        static /*0x71e7340*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, bool inherit);
        static /*0x71e74f8*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, bool inherit);
        static /*0x71e7648*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, System.Type attributeType, bool inherit);
        static /*0x71e788c*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x71e7894*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x71e7ab4*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element);
        static /*0x71e7abc*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, bool inherit);
        static /*0x71e7be0*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x71e7be8*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x71e7ec8*/ bool AreFieldValuesEqual(object thisValue, object thatValue);
        /*0x71e3890*/ Attribute();
        /*0x71e7c74*/ bool Equals(object obj);
        /*0x71e8094*/ int GetHashCode();
        /*0x71e81c8*/ object get_TypeId();
        /*0x71e81d0*/ bool Match(object obj);
        /*0x71e81dc*/ bool IsDefaultAttribute();
    }

    class Buffer
    {
        static /*0x71e81e4*/ bool InternalBlockCopy(System.Array src, int srcOffsetBytes, System.Array dst, int dstOffsetBytes, int byteCount);
        static /*0x71e81e8*/ int IndexOfByte(byte* src, byte value, int index, int count);
        static /*0x71e8300*/ int _ByteLength(System.Array array);
        static /*0x71e8304*/ void ZeroMemory(byte* src, long len);
        static /*0x71e8388*/ void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len);
        static /*0x71e849c*/ void InternalMemcpy(byte* dest, byte* src, int count);
        static /*0x71e84a0*/ int ByteLength(System.Array array);
        static /*0x71e8534*/ void BlockCopy(System.Array src, int srcOffset, System.Array dst, int dstOffset, int count);
        static /*0x71e86dc*/ void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);
        static /*0x71e8790*/ void memcpy4(byte* dest, byte* src, int size);
        static /*0x71e880c*/ void memcpy2(byte* dest, byte* src, int size);
        static /*0x71e8878*/ void memcpy1(byte* dest, byte* src, int size);
        static /*0x71e83b8*/ void Memcpy(byte* dest, byte* src, int len);
        static /*0x71e8768*/ void Memmove(byte* dest, byte* src, uint len);
        static /*0x3910ae8*/ void Memmove<T>(ref T destination, ref T source, ulong elementCount);
    }

    class ContextBoundObject : System.MarshalByRefObject
    {
        /*0x71e8914*/ ContextBoundObject();
    }

    class ContextStaticAttribute : System.Attribute
    {
        /*0x71e891c*/ ContextStaticAttribute();
    }

    class DefaultBinder : System.Reflection.Binder
    {
        static /*0x0*/ System.DefaultBinder.Primitives[] _primitiveConversions;

        static /*0x71ede44*/ DefaultBinder();
        static /*0x71eccdc*/ System.Reflection.MethodBase ExactBinding(System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x71ed08c*/ System.Reflection.PropertyInfo ExactPropertyBinding(System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x71ec484*/ int FindMostSpecific(System.Reflection.ParameterInfo[] p1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.ParameterInfo[] p2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x71ec0f4*/ int FindMostSpecificType(System.Type c1, System.Type c2, System.Type t);
        static /*0x71eae20*/ int FindMostSpecificMethod(System.Reflection.MethodBase m1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.MethodBase m2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x71eb428*/ int FindMostSpecificField(System.Reflection.FieldInfo cur1, System.Reflection.FieldInfo cur2);
        static /*0x71ec888*/ int FindMostSpecificProperty(System.Reflection.PropertyInfo cur1, System.Reflection.PropertyInfo cur2);
        static /*0x71ed304*/ bool CompareMethodSigAndName(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x71ed444*/ int GetHierarchyDepth(System.Type t);
        static /*0x71ecf44*/ System.Reflection.MethodBase FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[] match, int cMatches);
        static /*0x71eac9c*/ void ReorderParams(int[] paramOrder, object[] vars);
        static /*0x71ea914*/ bool CreateParamOrder(int[] paramOrder, System.Reflection.ParameterInfo[] pars, string[] names);
        static /*0x71ebefc*/ bool CanConvertPrimitive(System.RuntimeType source, System.RuntimeType target);
        static /*0x71eab4c*/ bool CanConvertPrimitiveObjectToType(object source, System.RuntimeType type);
        static /*0x71ed4b8*/ bool CompareMethodSig(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x71edd14*/ bool CanChangePrimitive(System.Type source, System.Type target);
        static /*0x71edd78*/ bool CanPrimitiveWiden(System.Type source, System.Type target);
        /*0x71ede3c*/ DefaultBinder();
        /*0x71e8924*/ System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo cultureInfo, string[] names, ref object state);
        /*0x71eafa0*/ System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo cultureInfo);
        /*0x71eb510*/ System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        /*0x71ec970*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo cultureInfo);
        /*0x71ec9c8*/ void ReorderArgumentArray(ref object[] args, object state);
        /*0x71ed5f8*/ System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);

        class BinderState
        {
            /*0x10*/ int[] m_argsMap;
            /*0x18*/ int m_originalSize;
            /*0x1c*/ bool m_isParamArray;

            /*0x71eac50*/ BinderState(int[] argsMap, int originalSize, bool isParamArray);
        }

        enum Primitives
        {
            Boolean = 8,
            Char = 16,
            SByte = 32,
            Byte = 64,
            Int16 = 128,
            UInt16 = 256,
            Int32 = 512,
            UInt32 = 1024,
            Int64 = 2048,
            UInt64 = 4096,
            Single = 8192,
            Double = 16384,
            Decimal = 32768,
            DateTime = 65536,
            String = 262144,
        }

        class <>c
        {
            static /*0x0*/ System.DefaultBinder.<> <>9;
            static /*0x8*/ System.Predicate<System.Type> <>9__2_0;

            static /*0x71edee4*/ <>c();
            /*0x71edf4c*/ <>c();
            /*0x71edf54*/ bool <SelectProperty>b__2_0(System.Type t);
        }
    }

    class Empty : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ System.Empty Value;

        static /*0x71ee010*/ Empty();
        /*0x71edf88*/ Empty();
        /*0x71edf90*/ string ToString();
        /*0x71edfa8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Enum : System.IComparable, System.IFormattable, System.IConvertible
    {
        static string enumSeperator = ", ";
        static /*0x0*/ char[] enumSeperatorCharArray;

        static /*0x71f2678*/ Enum();
        static /*0x71ee078*/ System.Enum.ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, bool getNames);
        static /*0x71ee210*/ string InternalFormattedHexString(object value);
        static /*0x71ee644*/ string InternalFormat(System.RuntimeType eT, object value);
        static /*0x71ee7e8*/ string InternalFlagsFormat(System.RuntimeType eT, object value);
        static /*0x71ee9e0*/ ulong ToUInt64(object value);
        static /*0x71eeb4c*/ int InternalCompareTo(object o1, object o2);
        static /*0x71eeb50*/ System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType);
        static /*0x71ee1c8*/ bool GetEnumValuesAndNames(System.RuntimeType enumType, ref ulong[] values, ref string[] names);
        static /*0x71eeb54*/ object InternalBoxEnum(System.RuntimeType enumType, long value);
        static /*0x3825b78*/ bool TryParse<TEnum>(string value, ref TEnum result);
        static /*0x3910ae8*/ bool TryParse<TEnum>(string value, bool ignoreCase, ref TEnum result);
        static /*0x71eeb58*/ object Parse(System.Type enumType, string value);
        static /*0x71eeb9c*/ object Parse(System.Type enumType, string value, bool ignoreCase);
        static /*0x71eeca0*/ bool TryParseEnum(System.Type enumType, string value, bool ignoreCase, ref System.Enum.EnumResult parseResult);
        static /*0x71ef524*/ System.Type GetUnderlyingType(System.Type enumType);
        static /*0x71efba0*/ System.Array GetValues(System.Type enumType);
        static /*0x71efc40*/ ulong[] InternalGetValues(System.RuntimeType enumType);
        static /*0x71ee738*/ string GetName(System.Type enumType, object value);
        static /*0x71efc84*/ string[] GetNames(System.Type enumType);
        static /*0x71efd24*/ string[] InternalGetNames(System.RuntimeType enumType);
        static /*0x71ef5c4*/ object ToObject(System.Type enumType, object value);
        static /*0x71f0c2c*/ bool IsDefined(System.Type enumType, object value);
        static /*0x71f0cdc*/ string Format(System.Type enumType, object value, string format);
        static /*0x71eff0c*/ object ToObject(System.Type enumType, sbyte value);
        static /*0x71f00b0*/ object ToObject(System.Type enumType, short value);
        static /*0x71efd68*/ object ToObject(System.Type enumType, int value);
        static /*0x71f059c*/ object ToObject(System.Type enumType, byte value);
        static /*0x71f0740*/ object ToObject(System.Type enumType, ushort value);
        static /*0x71f03f8*/ object ToObject(System.Type enumType, uint value);
        static /*0x71f0254*/ object ToObject(System.Type enumType, long value);
        static /*0x71ef9fc*/ object ToObject(System.Type enumType, ulong value);
        static /*0x71f08e4*/ object ToObject(System.Type enumType, char value);
        static /*0x71f0a88*/ object ToObject(System.Type enumType, bool value);
        static /*0x3910ae8*/ TEnum Parse<TEnum>(string value, bool ignoreCase);
        static /*0x71f2580*/ bool TryParse(System.Type enumType, string value, bool ignoreCase, ref object result);
        static /*0x71f2624*/ bool TryParse(System.Type enumType, string value, ref object result);
        /*0x71f2670*/ Enum();
        /*0x71f1274*/ object get_value();
        /*0x71f1270*/ object GetValue();
        /*0x71f1278*/ bool InternalHasFlag(System.Enum flags);
        /*0x71f127c*/ int get_hashcode();
        /*0x71f1280*/ bool Equals(object obj);
        /*0x71f1288*/ int GetHashCode();
        /*0x71f128c*/ string ToString();
        /*0x71f134c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71f1594*/ int CompareTo(object target);
        /*0x71f1350*/ string ToString(string format);
        /*0x71f1768*/ string ToString(System.IFormatProvider provider);
        /*0x71f1774*/ bool HasFlag(System.Enum flag);
        /*0x71f18f4*/ System.TypeCode GetTypeCode();
        /*0x71f1c08*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71f1ca8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71f1d48*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71f1de8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71f1e88*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71f1f28*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71f1fc8*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71f2068*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71f2108*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71f21a8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71f2248*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71f22e8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71f2388*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71f2428*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71f2510*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        enum ParseFailureKind
        {
            None = 0,
            Argument = 1,
            ArgumentNull = 2,
            ArgumentWithParameter = 3,
            UnhandledException = 4,
        }

        struct EnumResult
        {
            /*0x10*/ object parsedEnum;
            /*0x18*/ bool canThrow;
            /*0x1c*/ System.Enum.ParseFailureKind m_failure;
            /*0x20*/ string m_failureMessageID;
            /*0x28*/ string m_failureParameter;
            /*0x30*/ object m_failureMessageFormatArgument;
            /*0x38*/ System.Exception m_innerException;

            /*0x71eec58*/ void Init(bool canMethodThrow);
            /*0x71ef9ec*/ void SetFailure(System.Exception unhandledException);
            /*0x71ef45c*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureParameter);
            /*0x71ef4b8*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0x71ef2e4*/ System.Exception GetEnumParseException();
        }

        class ValuesAndNames
        {
            /*0x10*/ ulong[] Values;
            /*0x18*/ string[] Names;

            /*0x71ee1cc*/ ValuesAndNames(ulong[] values, string[] names);
        }
    }

    class Exception : System.Runtime.Serialization.ISerializable
    {
        static int _COMPlusExceptionCode = -532462766;
        static /*0x0*/ object s_EDILock;
        /*0x10*/ string _className;
        /*0x18*/ string _message;
        /*0x20*/ System.Collections.IDictionary _data;
        /*0x28*/ System.Exception _innerException;
        /*0x30*/ string _helpURL;
        /*0x38*/ object _stackTrace;
        /*0x40*/ string _stackTraceString;
        /*0x48*/ string _remoteStackTraceString;
        /*0x50*/ int _remoteStackIndex;
        /*0x58*/ object _dynamicMethods;
        /*0x60*/ int _HResult;
        /*0x68*/ string _source;
        /*0x70*/ System.Runtime.Serialization.SafeSerializationManager _safeSerializationManager;
        /*0x78*/ System.Diagnostics.StackTrace[] captured_traces;
        /*0x80*/ nint[] native_trace_ips;
        /*0x88*/ int caught_in_unmanaged;

        static /*0x71f3b24*/ Exception();
        static /*0x71f39ac*/ string GetMessageFromNativeResources(System.Exception.ExceptionMessageKind kind);
        static /*0x71f3b20*/ void ReportUnhandledException(System.Exception exception);
        /*0x71f2790*/ Exception();
        /*0x71f27ac*/ Exception(string message);
        /*0x71f27e4*/ Exception(string message, System.Exception innerException);
        /*0x71f2830*/ Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f26f4*/ void Init();
        /*0x71f2d74*/ string get_Message();
        /*0x71f2eb4*/ System.Collections.IDictionary get_Data();
        /*0x71f2e68*/ string GetClassName();
        /*0x71f2f2c*/ System.Exception get_InnerException();
        /*0x71f2f34*/ System.Reflection.MethodBase get_TargetSite();
        /*0x71f2fe0*/ string get_StackTrace();
        /*0x71f2fe8*/ string GetStackTrace(bool needFileInfo);
        /*0x71f303c*/ void SetErrorCode(int hr);
        /*0x71f3044*/ string get_Source();
        /*0x71f315c*/ string ToString();
        /*0x71f3168*/ string ToString(bool needFileLineInfo, bool needMessage);
        /*0x71f33b4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f3830*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
        /*0x71f3034*/ string StripFileInfo(string stackTrace, bool isRemoteStackTrace);
        /*0x71f38c0*/ void RestoreExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo exceptionDispatchInfo);
        /*0x71f399c*/ int get_HResult();
        /*0x71f39a4*/ void set_HResult(int value);
        /*0x71f2f24*/ System.Type GetType();
        /*0x71f3a30*/ System.Exception FixRemotingException();

        enum ExceptionMessageKind
        {
            ThreadAbort = 1,
            ThreadInterrupted = 2,
            OutOfMemory = 3,
        }
    }

    class GC
    {
        static /*0x0*/ object EPHEMERON_TOMBSTONE;

        static /*0x71f3e78*/ GC();
        static /*0x71f3ba0*/ int GetCollectionCount(int generation);
        static /*0x71f3ba4*/ int GetMaxGeneration();
        static /*0x71f3ba8*/ void InternalCollect(int generation);
        static /*0x71f3bac*/ void register_ephemeron_array(System.Runtime.CompilerServices.Ephemeron[] array);
        static /*0x71f3bb0*/ object get_ephemeron_tombstone();
        static /*0x71f3bb4*/ void GetMemoryInfo(ref uint highMemLoadThreshold, ref ulong totalPhysicalMem, ref uint lastRecordedMemLoad, ref nuint lastRecordedHeapSize, ref nuint lastRecordedFragmentation);
        static /*0x71f3bd0*/ void Collect();
        static /*0x71f3c6c*/ int CollectionCount(int generation);
        static /*0x71f3d28*/ void KeepAlive(object obj);
        static /*0x71f3c20*/ int get_MaxGeneration();
        static /*0x71f3d2c*/ void WaitForPendingFinalizers();
        static /*0x71f3d30*/ void _SuppressFinalize(object o);
        static /*0x71f3d34*/ void SuppressFinalize(object obj);
        static /*0x71f3dd4*/ void _ReRegisterForFinalize(object o);
        static /*0x71f3dd8*/ void ReRegisterForFinalize(object obj);
    }

    enum TypeNameFormatFlags
    {
        FormatBasic = 0,
        FormatNamespace = 1,
        FormatFullInst = 2,
        FormatAssembly = 4,
        FormatSignature = 8,
        FormatNoVersion = 16,
        FormatAngleBrackets = 64,
        FormatStubInfo = 128,
        FormatGenericParam = 256,
        FormatSerialization = 259,
    }

    enum TypeNameKind
    {
        Name = 0,
        ToString = 1,
        SerializationName = 2,
        FullName = 3,
    }

    class RuntimeType : System.Reflection.TypeInfo, System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        static System.Reflection.BindingFlags MemberBindingMask = 255;
        static System.Reflection.BindingFlags InvocationMask = 65280;
        static System.Reflection.BindingFlags BinderNonCreateInstance = 15616;
        static System.Reflection.BindingFlags BinderGetSetProperty = 12288;
        static System.Reflection.BindingFlags BinderSetInvokeProperty = 8448;
        static System.Reflection.BindingFlags BinderGetSetField = 3072;
        static System.Reflection.BindingFlags BinderSetInvokeField = 2304;
        static System.Reflection.BindingFlags BinderNonFieldGetSet = 16773888;
        static System.Reflection.BindingFlags ClassicBindingMask = 61696;
        static int GenericParameterCountAny = -1;
        static /*0x0*/ System.RuntimeType ValueType;
        static /*0x8*/ System.RuntimeType EnumType;
        static /*0x10*/ System.RuntimeType ObjectType;
        static /*0x18*/ System.RuntimeType StringType;
        static /*0x20*/ System.RuntimeType DelegateType;
        static /*0x28*/ System.Type[] s_SICtorParamTypes;
        static /*0x30*/ System.Func<System.Type, System.Type[], System.Type> MakeTypeBuilderInstantiation;
        static /*0x38*/ System.RuntimeType s_typedRef;
        /*0x18*/ System.MonoTypeInfo type_info;
        /*0x20*/ object GenericCache;
        /*0x28*/ System.Reflection.RuntimeConstructorInfo m_serializationCtor;

        static /*0x71fd988*/ RuntimeType();
        static /*0x71f3ed0*/ System.RuntimeType GetType(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark);
        static /*0x71f3f38*/ void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type);
        static /*0x71f4060*/ void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters);
        static /*0x71f426c*/ void SplitName(string fullname, ref string name, ref string ns);
        static /*0x71f43a4*/ System.Reflection.BindingFlags FilterPreCalculate(bool isPublic, bool isInherited, bool isStatic);
        static /*0x71f43e0*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, ref bool prefixLookup, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x71f4518*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x71f45a4*/ bool FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, string name, bool ignoreCase);
        static /*0x71f4604*/ bool FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup);
        static /*0x71f47f0*/ bool FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, string name, bool prefixLookup, string ns);
        static /*0x71f4908*/ bool FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x71f4bdc*/ bool FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x71f4990*/ bool FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x71e5424*/ bool op_Equality(System.RuntimeType left, System.RuntimeType right);
        static /*0x71e7ebc*/ bool op_Inequality(System.RuntimeType left, System.RuntimeType right);
        static /*0x71fc01c*/ object IsConvertibleToPrimitiveType(object value, System.Type targetType);
        static /*0x71fc944*/ System.Type MakePointerType(System.Type type);
        static /*0x71fcc1c*/ object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument);
        static /*0x71f99f4*/ System.Type MakeGenericType(System.Type gt, System.Type[] types);
        static /*0x71fd00c*/ void GetInterfaceMapData(System.Type t, System.Type iface, ref System.Reflection.MethodInfo[] targets, ref System.Reflection.MethodInfo[] methods);
        static /*0x71fd010*/ void GetGUID(System.Type type, byte[] guid);
        static /*0x71fd0c0*/ System.Type GetTypeFromCLSIDImpl(System.Guid clsid, string server, bool throwOnError);
        static /*0x71fd160*/ System.TypeCode GetTypeCodeImplInternal(System.Type type);
        static /*0x71fbccc*/ object CreateInstanceInternal(System.Type type);
        /*0x71f4c64*/ RuntimeType();
        /*0x71f4ca4*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, int genericParamCount, bool allowPrefixLookup);
        /*0x71f51fc*/ System.RuntimeType.ListBuilder<System.Reflection.ConstructorInfo> GetConstructorCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);
        /*0x71f56cc*/ System.RuntimeType.ListBuilder<System.Reflection.PropertyInfo> GetPropertyCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, bool allowPrefixLookup);
        /*0x71f5bcc*/ System.RuntimeType.ListBuilder<System.Reflection.EventInfo> GetEventCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x71f6014*/ System.RuntimeType.ListBuilder<System.Reflection.FieldInfo> GetFieldCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x71f64e0*/ System.RuntimeType.ListBuilder<System.Type> GetNestedTypeCandidates(string fullname, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x71f6a2c*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0x71f6ab8*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x71f6b50*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x71f6bd4*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x71f6c54*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
        /*0x71f6f3c*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71f7164*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71f73f4*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71f75b4*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71f789c*/ System.Type GetInterface(string fullname, bool ignoreCase);
        /*0x71f7c28*/ System.Type GetNestedType(string fullname, System.Reflection.BindingFlags bindingAttr);
        /*0x71f7e14*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x71f82f4*/ System.Reflection.Module get_Module();
        /*0x71f82fc*/ System.Reflection.RuntimeModule GetRuntimeModule();
        /*0x71f8304*/ System.Reflection.Assembly get_Assembly();
        /*0x71f830c*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
        /*0x71f8314*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x71f8338*/ bool IsInstanceOfType(object o);
        /*0x71f8340*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);
        /*0x71f83cc*/ bool IsAssignableFrom(System.Type c);
        /*0x71f84a4*/ bool IsEquivalentTo(System.Type other);
        /*0x71f8554*/ System.Type get_BaseType();
        /*0x71f8558*/ System.RuntimeType GetBaseType();
        /*0x71f8738*/ System.Type get_UnderlyingSystemType();
        /*0x71f873c*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x71f8744*/ bool IsContextfulImpl();
        /*0x71f874c*/ bool IsByRefImpl();
        /*0x71f8754*/ bool IsPrimitiveImpl();
        /*0x71f875c*/ bool IsPointerImpl();
        /*0x71f8764*/ bool IsCOMObjectImpl();
        /*0x71f8770*/ bool IsValueTypeImpl();
        /*0x71f8848*/ bool get_IsEnum();
        /*0x71f88bc*/ bool HasElementTypeImpl();
        /*0x71f88c4*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x71f8988*/ bool get_IsSzArray();
        /*0x71f8990*/ bool IsArrayImpl();
        /*0x71f8998*/ int GetArrayRank();
        /*0x71f8a1c*/ System.Type GetElementType();
        /*0x71f8a24*/ string[] GetEnumNames();
        /*0x71f8b34*/ System.Array GetEnumValues();
        /*0x71f8c84*/ System.Type GetEnumUnderlyingType();
        /*0x71f8d30*/ bool IsEnumDefined(object value);
        /*0x71f9230*/ string GetEnumName(object value);
        /*0x71f93f8*/ System.RuntimeType[] GetGenericArgumentsInternal();
        /*0x71f9470*/ System.Type[] GetGenericArguments();
        /*0x71f9510*/ System.Type MakeGenericType(System.Type[] instantiation);
        /*0x71f99f8*/ bool get_IsGenericTypeDefinition();
        /*0x71f9a00*/ bool get_IsGenericParameter();
        /*0x71f9a08*/ int get_GenericParameterPosition();
        /*0x71f9a8c*/ System.Type GetGenericTypeDefinition();
        /*0x71f9b10*/ bool get_IsGenericType();
        /*0x71f9b18*/ bool get_IsConstructedGenericType();
        /*0x71f9b60*/ object InvokeMember(string name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, object target, object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParams);
        /*0x71fadac*/ bool Equals(object obj);
        /*0x71fadb8*/ object Clone();
        /*0x71fadbc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71fae20*/ object[] GetCustomAttributes(bool inherit);
        /*0x71faec0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
        /*0x71fb054*/ bool IsDefined(System.Type attributeType, bool inherit);
        /*0x71fb1e8*/ string FormatTypeName(bool serialization);
        /*0x71fb3a8*/ System.Reflection.MemberTypes get_MemberType();
        /*0x71fb3ec*/ System.Type get_ReflectedType();
        /*0x71fb3f8*/ int get_MetadataToken();
        /*0x71fb400*/ void CreateInstanceCheckThis();
        /*0x71e5430*/ object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark);
        /*0x71e5f9c*/ object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, bool wrapExceptions, ref System.Threading.StackCrawlMark stackMark);
        /*0x71fb638*/ System.Reflection.RuntimeConstructorInfo GetDefaultConstructor();
        /*0x71facd4*/ string GetDefaultMemberName();
        /*0x71fb7dc*/ System.Reflection.RuntimeConstructorInfo GetSerializationCtor();
        /*0x71fb5fc*/ object CreateInstanceSlow(bool publicOnly, bool wrapExceptions, bool skipCheckThis, bool fillCache);
        /*0x71fba0c*/ object CreateInstanceMono(bool nonPublic, bool wrapExceptions);
        /*0x71fbcd0*/ object CheckValue(object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
        /*0x71fbe04*/ object TryConvertToType(object value, ref bool failed);
        /*0x71fb358*/ string GetCachedName(System.TypeNameKind kind);
        /*0x71fc884*/ System.Type make_array_type(int rank);
        /*0x71fc888*/ System.Type MakeArrayType();
        /*0x71fc890*/ System.Type MakeArrayType(int rank);
        /*0x71fc8d8*/ System.Type make_byref_type();
        /*0x71fc8dc*/ System.Type MakeByRefType();
        /*0x71fc948*/ System.Type MakePointerType();
        /*0x71fca2c*/ bool get_ContainsGenericParameters();
        /*0x71fcb28*/ System.Type[] GetGenericParameterConstraints();
        /*0x71fcd3c*/ nint GetMethodsByName_native(nint namePtr, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71f4f00*/ System.Reflection.RuntimeMethodInfo[] GetMethodsByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71fcd40*/ nint GetPropertiesByName_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71fcd44*/ nint GetConstructors_native(System.Reflection.BindingFlags bindingAttr);
        /*0x71f5480*/ System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0x71f58d0*/ System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71fcd48*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type ifaceType);
        /*0x71fd014*/ System.Guid get_GUID();
        /*0x71fd10c*/ System.TypeCode GetTypeCodeImpl();
        /*0x71fd164*/ string ToString();
        /*0x71fb5f4*/ bool IsGenericCOMObjectImpl();
        /*0x71fd17c*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x71fd170*/ string getFullName(bool full_name, bool assembly_qualified);
        /*0x71f9468*/ System.Type[] GetGenericArgumentsInternal(bool runtimeArray);
        /*0x71f8944*/ System.Reflection.GenericParameterAttributes GetGenericParameterAttributes();
        /*0x71f9a88*/ int GetGenericParameterPosition();
        /*0x71fd180*/ nint GetEvents_native(nint name, System.RuntimeType.MemberListType listType);
        /*0x71fd184*/ nint GetFields_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71f61e4*/ System.Reflection.RuntimeFieldInfo[] GetFields_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71f5d98*/ System.Reflection.RuntimeEventInfo[] GetEvents_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71fd188*/ System.Type[] GetInterfaces();
        /*0x71fd18c*/ nint GetNestedTypes_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71f6698*/ System.RuntimeType[] GetNestedTypes_internal(string displayName, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71fd190*/ string get_AssemblyQualifiedName();
        /*0x71fd19c*/ System.Type get_DeclaringType();
        /*0x71fd1a0*/ string get_Name();
        /*0x71fd1a4*/ string get_Namespace();
        /*0x71fd1a8*/ int GetHashCode();
        /*0x71fd250*/ string get_FullName();
        /*0x71fd340*/ bool get_IsSZArray();
        /*0x71fd398*/ bool IsSubclassOf(System.Type type);
        /*0x71fd48c*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71fd4bc*/ System.Reflection.MethodInfo GetMethodImplCommon(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71fd77c*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);

        enum MemberListType
        {
            All = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
            HandleToInfo = 3,
        }

        struct ListBuilder<T>
        {
            /*0x0*/ T[] _items;
            /*0x0*/ T _item;
            /*0x0*/ int _count;
            /*0x0*/ int _capacity;

            /*0x3815ed0*/ ListBuilder(int capacity);
            /*0x3910ae8*/ T get_Item(int index);
            /*0x38148bc*/ T[] ToArray();
            /*0x381678c*/ void CopyTo(object[] array, int index);
            /*0x3814574*/ int get_Count();
            /*0x3910ae8*/ void Add(T item);
        }
    }

    class ReflectionOnlyType : System.RuntimeType
    {
        /*0x71fdd14*/ ReflectionOnlyType();
        /*0x71fdd6c*/ System.RuntimeTypeHandle get_TypeHandle();
    }

    class SharedStatics
    {
        static /*0x0*/ System.SharedStatics _sharedStatics;
        /*0x10*/ System.Security.Util.Tokenizer.StringMaker _maker;

        static /*0x71fe108*/ SharedStatics();
        static /*0x71fddc8*/ System.Security.Util.Tokenizer.StringMaker GetSharedStringMaker();
        static /*0x71fdfa4*/ void ReleaseSharedStringMaker(ref System.Security.Util.Tokenizer.StringMaker maker);
        /*0x71fddc0*/ SharedStatics();
    }

    enum ExceptionArgument
    {
        obj = 0,
        dictionary = 1,
        dictionaryCreationThreshold = 2,
        array = 3,
        info = 4,
        key = 5,
        collection = 6,
        list = 7,
        match = 8,
        converter = 9,
        queue = 10,
        stack = 11,
        capacity = 12,
        index = 13,
        startIndex = 14,
        value = 15,
        count = 16,
        arrayIndex = 17,
        name = 18,
        mode = 19,
        item = 20,
        options = 21,
        view = 22,
        sourceBytesToCopy = 23,
        start = 24,
        pointer = 25,
        ownedMemory = 26,
        text = 27,
        length = 28,
        comparer = 29,
        comparable = 30,
        exceptions = 31,
        exception = 32,
        action = 33,
        comparison = 34,
        startSegment = 35,
        endSegment = 36,
        endIndex = 37,
        task = 38,
        source = 39,
        state = 40,
        culture = 41,
        destination = 42,
        byteOffset = 43,
        minimumBufferSize = 44,
        offset = 45,
        values = 46,
        comparisonType = 47,
        s = 48,
        input = 49,
        format = 50,
    }

    enum ExceptionResource
    {
        Argument_ImplementIComparable = 0,
        Argument_InvalidType = 1,
        Argument_InvalidArgumentForComparison = 2,
        Argument_InvalidRegistryKeyPermissionCheck = 3,
        ArgumentOutOfRange_NeedNonNegNum = 4,
        Arg_ArrayPlusOffTooSmall = 5,
        Arg_NonZeroLowerBound = 6,
        Arg_RankMultiDimNotSupported = 7,
        Arg_RegKeyDelHive = 8,
        Arg_RegKeyStrLenBug = 9,
        Arg_RegSetStrArrNull = 10,
        Arg_RegSetMismatchedKind = 11,
        Arg_RegSubKeyAbsent = 12,
        Arg_RegSubKeyValueAbsent = 13,
        Argument_AddingDuplicate = 14,
        Serialization_InvalidOnDeser = 15,
        Serialization_MissingKeys = 16,
        Serialization_NullKey = 17,
        Argument_InvalidArrayType = 18,
        NotSupported_KeyCollectionSet = 19,
        NotSupported_ValueCollectionSet = 20,
        ArgumentOutOfRange_SmallCapacity = 21,
        ArgumentOutOfRange_Index = 22,
        Argument_InvalidOffLen = 23,
        Argument_ItemNotExist = 24,
        ArgumentOutOfRange_Count = 25,
        ArgumentOutOfRange_InvalidThreshold = 26,
        ArgumentOutOfRange_ListInsert = 27,
        NotSupported_ReadOnlyCollection = 28,
        InvalidOperation_CannotRemoveFromStackOrQueue = 29,
        InvalidOperation_EmptyQueue = 30,
        InvalidOperation_EnumOpCantHappen = 31,
        InvalidOperation_EnumFailedVersion = 32,
        InvalidOperation_EmptyStack = 33,
        ArgumentOutOfRange_BiggerThanCollection = 34,
        InvalidOperation_EnumNotStarted = 35,
        InvalidOperation_EnumEnded = 36,
        NotSupported_SortedListNestedWrite = 37,
        InvalidOperation_NoValue = 38,
        InvalidOperation_RegRemoveSubKey = 39,
        Security_RegistryPermission = 40,
        UnauthorizedAccess_RegistryNoWrite = 41,
        ObjectDisposed_RegKeyClosed = 42,
        NotSupported_InComparableType = 43,
        Argument_InvalidRegistryOptionsCheck = 44,
        Argument_InvalidRegistryViewCheck = 45,
        TaskT_TransitionToFinal_AlreadyCompleted = 46,
        TaskCompletionSourceT_TrySetException_NullException = 47,
        TaskCompletionSourceT_TrySetException_NoExceptions = 48,
        NotSupported_StringComparison = 49,
        InvalidOperation_NullArray = 50,
    }

    struct TypedReference
    {
        /*0x10*/ System.RuntimeTypeHandle type;
        /*0x18*/ nint Value;
        /*0x20*/ nint Type;

        static /*0x71fe164*/ System.TypedReference MakeTypedReference(object target, System.Reflection.FieldInfo[] flds);
        static /*0x71fe590*/ void InternalMakeTypedReference(void* result, object target, nint[] flds, System.RuntimeType lastFieldType);
        static /*0x71fe660*/ void SetTypedReference(System.TypedReference target, object value);
        /*0x71fe594*/ int GetHashCode();
        /*0x71fe5f0*/ bool Equals(object o);
        /*0x71fe640*/ bool get_IsNull();
    }

    class TypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string AssemblyName;
        /*0xa0*/ string MessageArg;
        /*0xa8*/ int ResourceId;

        /*0x71fe6ac*/ TypeLoadException();
        /*0x71fe70c*/ TypeLoadException(string message);
        /*0x71fe878*/ TypeLoadException(string className, string assemblyName);
        /*0x71fe884*/ TypeLoadException(string className, string assemblyName, string messageArg, int resourceId);
        /*0x71fe90c*/ TypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71fe734*/ string get_Message();
        /*0x71fe74c*/ void SetMessageField();
        /*0x71fea74*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnitySerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Type[] m_instantiation;
        /*0x18*/ int[] m_elementTypes;
        /*0x20*/ int m_genericParameterPosition;
        /*0x28*/ System.Type m_declaringType;
        /*0x30*/ System.Reflection.MethodBase m_declaringMethod;
        /*0x38*/ string m_data;
        /*0x40*/ string m_assemblyName;
        /*0x48*/ int m_unityType;

        static /*0x71fec24*/ System.RuntimeType AddElementTypes(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x71ff0e0*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType);
        static /*0x71ff204*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x71ff568*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType, string data, System.Reflection.RuntimeAssembly assembly);
        /*0x71ff6c4*/ UnitySerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71fefec*/ System.Type MakeElementTypes(System.Type type);
        /*0x71ffb64*/ void ThrowInsufficientInformation(string field);
        /*0x71ffc68*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71ffcb8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
    }

    class AppContextDefaultValues
    {
        static /*0x0*/ string SwitchEnforceJapaneseEraYearRanges;
        static /*0x8*/ string SwitchFormatJapaneseFirstYearAsANumber;
        static /*0x10*/ string SwitchEnforceLegacyJapaneseDateParsing;

        static /*0x72001cc*/ AppContextDefaultValues();
        static /*0x72001bc*/ void PopulateDefaultValues();
        static /*0x72001c0*/ bool TryGetSwitchOverride(string switchName, ref bool overrideValue);
    }

    class AppDomain : System.MarshalByRefObject
    {
        static /*0x0*/ string _process_guid;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> type_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress_refonly;
        /*0x18*/ nint _mono_app_domain;
        /*0x20*/ object _evidence;
        /*0x28*/ object _granted;
        /*0x30*/ int _principalPolicy;
        /*0x38*/ System.AssemblyLoadEventHandler AssemblyLoad;
        /*0x40*/ System.ResolveEventHandler AssemblyResolve;
        /*0x48*/ System.EventHandler DomainUnload;
        /*0x50*/ System.EventHandler ProcessExit;
        /*0x58*/ System.ResolveEventHandler ResourceResolve;
        /*0x60*/ System.ResolveEventHandler TypeResolve;
        /*0x68*/ System.UnhandledExceptionEventHandler UnhandledException;
        /*0x70*/ System.EventHandler<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException;
        /*0x78*/ object _domain_manager;
        /*0x80*/ System.ResolveEventHandler ReflectionOnlyAssemblyResolve;
        /*0x88*/ object _activation;
        /*0x90*/ object _applicationIdentity;
        /*0x98*/ System.Collections.Generic.List<string> compatibility_switch;

        static /*0x7200290*/ bool IsAppXModel();
        static /*0x72002a8*/ System.AppDomain getCurDomain();
        static /*0x72002ac*/ System.AppDomain get_CurrentDomain();
        static /*0x72004f8*/ System.AppDomain InternalSetDomainByID(int domain_id);
        static /*0x72004fc*/ System.AppDomain InternalSetDomain(System.AppDomain context);
        static /*0x7200500*/ void InternalPushDomainRefByID(int domain_id);
        static /*0x7200504*/ void InternalPopDomainRef();
        static /*0x7200508*/ System.Runtime.Remoting.Contexts.Context InternalSetContext(System.Runtime.Remoting.Contexts.Context context);
        static /*0x720050c*/ System.Runtime.Remoting.Contexts.Context InternalGetContext();
        static /*0x7200510*/ System.Runtime.Remoting.Contexts.Context InternalGetDefaultContext();
        static /*0x7200514*/ string InternalGetProcessGuid(string newguid);
        static /*0x7200518*/ object InvokeInDomainByID(int domain_id, System.Reflection.MethodInfo method, object obj, object[] args);
        static /*0x72006a8*/ string GetProcessGuid();
        static /*0x7200740*/ bool InternalIsFinalizingForUnload(int domain_id);
        /*0x7200298*/ AppDomain();
        /*0x72002a0*/ string getFriendlyName();
        /*0x72002a4*/ string get_FriendlyName();
        /*0x72002b0*/ System.Reflection.Assembly[] GetAssemblies(bool refOnly);
        /*0x72002b8*/ System.Reflection.Assembly[] GetAssemblies();
        /*0x72002c0*/ object GetData(string name);
        /*0x72002c4*/ object InitializeLifetimeService();
        /*0x72002cc*/ System.Reflection.Assembly LoadAssembly(string assemblyRef, System.Security.Policy.Evidence securityEvidence, bool refOnly, ref System.Threading.StackCrawlMark stackMark);
        /*0x72002d4*/ System.Reflection.Assembly LoadSatellite(System.Reflection.AssemblyName assemblyRef, bool throwOnError, ref System.Threading.StackCrawlMark stackMark);
        /*0x72003d4*/ System.Reflection.Assembly Load(string assemblyString);
        /*0x72003f8*/ System.Reflection.Assembly Load(string assemblyString, System.Security.Policy.Evidence assemblySecurity, bool refonly, ref System.Threading.StackCrawlMark stackMark);
        /*0x7200744*/ bool IsFinalizingForUnload();
        /*0x7200758*/ int getDomainID();
        /*0x7200760*/ string ToString();
        /*0x7200764*/ void DoAssemblyLoad(System.Reflection.Assembly assembly);
        /*0x72007f4*/ System.Reflection.Assembly DoAssemblyResolve(string name, System.Reflection.Assembly requestingAssembly, bool refonly);
        /*0x7200afc*/ System.Reflection.Assembly DoTypeResolve(string name);
        /*0x7200dd0*/ System.Reflection.Assembly DoResourceResolve(string name, System.Reflection.Assembly requesting);
        /*0x7200f04*/ void DoDomainUnload();
        /*0x7200f28*/ byte[] GetMarshalledDomainObjRef();
        /*0x7200ff4*/ void ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg, ref byte[] arrResponse, ref System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm);
        /*0x720113c*/ void add_DomainUnload(System.EventHandler value);
        /*0x7201314*/ void remove_DomainUnload(System.EventHandler value);
        /*0x72014e8*/ void add_ProcessExit(System.EventHandler value);
        /*0x7201580*/ void remove_ProcessExit(System.EventHandler value);
        /*0x7201618*/ void add_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x72016b0*/ void remove_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x7201748*/ bool get_IsHomogenous();
        /*0x7201750*/ bool get_IsFullyTrusted();
    }

    class CompatibilitySwitches
    {
        static /*0x0*/ bool IsAppEarlierThanWindowsPhone8;
    }

    class Environment
    {
        static string mono_corlib_version = "1A5E0066-58DC-428A-B21C-0AD6CDAE2789";
        static /*0x0*/ string nl;
        static /*0x8*/ System.OperatingSystem os;

        static /*0x71fddbc*/ string GetResourceString(string key);
        static /*0x71ffbf8*/ string GetResourceString(string key, object[] values);
        static /*0x7201758*/ string GetResourceStringEncodingName(int codePage);
        static /*0x72018d4*/ string get_CurrentDirectory();
        static /*0x72018dc*/ int get_CurrentManagedThreadId();
        static /*0x72018fc*/ bool get_HasShutdownStarted();
        static /*0x7201900*/ string get_MachineName();
        static /*0x7201904*/ string GetNewLine();
        static /*0x7201908*/ string get_NewLine();
        static /*0x7201980*/ System.PlatformID get_Platform();
        static /*0x7201984*/ string GetOSVersionString();
        static /*0x7201988*/ System.OperatingSystem get_OSVersion();
        static /*0x7201a4c*/ System.Version CreateVersionFromString(string info);
        static /*0x7201c5c*/ string get_StackTrace();
        static /*0x7201cc8*/ int get_TickCount();
        static /*0x7201ccc*/ string get_UserDomainName();
        static /*0x7201cd0*/ string get_UserName();
        static /*0x7201cd4*/ void Exit(int exitCode);
        static /*0x7201cd8*/ string[] GetCommandLineArgs();
        static /*0x7201cdc*/ string internalGetEnvironmentVariable_native(nint variable);
        static /*0x7201ce0*/ string internalGetEnvironmentVariable(string variable);
        static /*0x7201da8*/ string GetEnvironmentVariable(string variable);
        static /*0x7201dac*/ string GetFolderPath(System.Environment.SpecialFolder folder);
        static /*0x7201de8*/ string GetWindowsFolderPath(int folder);
        static /*0x7201db4*/ string GetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x72022b8*/ string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback);
        static /*0x7201e04*/ string UnixGetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x7202724*/ void FailFast(string message);
        static /*0x7202734*/ void FailFast(string message, System.Exception exception);
        static /*0x7202730*/ void FailFast(string message, System.Exception exception, string errorSource);
        static /*0x720273c*/ int get_ProcessorCount();
        static /*0x7201dec*/ bool get_IsRunningOnWindows();
        static /*0x7202740*/ string GetMachineConfigPath();
        static /*0x7202720*/ string internalGetHome();
        static /*0x7202744*/ int GetPageSize();
        static /*0x7202748*/ bool get_IsUnix();
        static /*0x7202780*/ string GetStackTrace(System.Exception e, bool needFileInfo);

        enum SpecialFolder
        {
            MyDocuments = 5,
            Desktop = 0,
            MyComputer = 17,
            Programs = 2,
            Personal = 5,
            Favorites = 6,
            Startup = 7,
            Recent = 8,
            SendTo = 9,
            StartMenu = 11,
            MyMusic = 13,
            DesktopDirectory = 16,
            Templates = 21,
            ApplicationData = 26,
            LocalApplicationData = 28,
            InternetCache = 32,
            Cookies = 33,
            History = 34,
            CommonApplicationData = 35,
            System = 37,
            ProgramFiles = 38,
            MyPictures = 39,
            CommonProgramFiles = 43,
            MyVideos = 14,
            NetworkShortcuts = 19,
            Fonts = 20,
            CommonStartMenu = 22,
            CommonPrograms = 23,
            CommonStartup = 24,
            CommonDesktopDirectory = 25,
            PrinterShortcuts = 27,
            Windows = 36,
            UserProfile = 40,
            SystemX86 = 41,
            ProgramFilesX86 = 42,
            CommonProgramFilesX86 = 44,
            CommonTemplates = 45,
            CommonDocuments = 46,
            CommonAdminTools = 47,
            AdminTools = 48,
            CommonMusic = 53,
            CommonPictures = 54,
            CommonVideos = 55,
            Resources = 56,
            LocalizedResources = 57,
            CommonOemLinks = 58,
            CDBurning = 59,
        }

        enum SpecialFolderOption
        {
            None = 0,
            DoNotVerify = 16384,
            Create = 32768,
        }
    }

    class MonoTypeInfo
    {
        /*0x10*/ string full_name;
        /*0x18*/ System.Reflection.RuntimeConstructorInfo default_ctor;

        /*0x7202818*/ MonoTypeInfo();
    }

    class TypeNameParser
    {
        static /*0x720281c*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
    }

    class AppDomainSetup
    {
        /*0x10*/ string application_base;
        /*0x18*/ string application_name;
        /*0x20*/ string cache_path;
        /*0x28*/ string configuration_file;
        /*0x30*/ string dynamic_base;
        /*0x38*/ string license_file;
        /*0x40*/ string private_bin_path;
        /*0x48*/ string private_bin_path_probe;
        /*0x50*/ string shadow_copy_directories;
        /*0x58*/ string shadow_copy_files;
        /*0x60*/ bool publisher_policy;
        /*0x61*/ bool path_changed;
        /*0x64*/ int loader_optimization;
        /*0x68*/ bool disallow_binding_redirects;
        /*0x69*/ bool disallow_code_downloads;
        /*0x70*/ object _activationArguments;
        /*0x78*/ object domain_initializer;
        /*0x80*/ object application_trust;
        /*0x88*/ string[] domain_initializer_args;
        /*0x90*/ bool disallow_appbase_probe;
        /*0x98*/ byte[] configuration_bytes;
        /*0xa0*/ byte[] serialized_non_primitives;
        /*0xa8*/ string manager_assembly;
        /*0xb0*/ string manager_type;
        /*0xb8*/ string[] partial_visible_assemblies;
        /*0xc0*/ string <TargetFrameworkName>k__BackingField;

        /*0x7202874*/ AppDomainSetup();
    }

    struct ArgIterator
    {
        /*0x10*/ nint sig;
        /*0x18*/ nint args;
        /*0x20*/ int next_arg;
        /*0x24*/ int num_args;

        /*0x7202878*/ bool Equals(object o);
        /*0x72028c4*/ int GetHashCode();
    }

    class Console
    {
        static /*0x0*/ System.IO.TextWriter stdout;
        static /*0x8*/ System.IO.TextWriter stderr;
        static /*0x10*/ System.IO.TextReader stdin;
        static /*0x18*/ bool IsRunningOnAndroid;
        static /*0x20*/ System.Text.Encoding inputEncoding;
        static /*0x28*/ System.Text.Encoding outputEncoding;
        static /*0x30*/ System.ConsoleCancelEventHandler cancel_event;

        static /*0x72028d4*/ Console();
        static /*0x7202c1c*/ void SetupStreams(System.Text.Encoding inputEncoding, System.Text.Encoding outputEncoding);
        static /*0x72032f8*/ System.IO.Stream Open(nint handle, System.IO.FileAccess access, int bufferSize);
        static /*0x7203268*/ System.IO.Stream OpenStandardError(int bufferSize);
        static /*0x7203148*/ System.IO.Stream OpenStandardInput(int bufferSize);
        static /*0x72031d8*/ System.IO.Stream OpenStandardOutput(int bufferSize);
        static /*0x7203448*/ void SetError(System.IO.TextWriter newError);
        static /*0x720352c*/ void SetOut(System.IO.TextWriter newOut);
        static /*0x7203618*/ void WriteLine(object value);
        static /*0x720368c*/ System.Text.Encoding get_InputEncoding();
        static /*0x72036e4*/ System.Text.Encoding get_OutputEncoding();
        static /*0x720373c*/ System.ConsoleKeyInfo ReadKey();
        static /*0x7203794*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x72038c8*/ void DoConsoleCancelEvent();

        class WindowsConsole
        {
            static /*0x0*/ bool ctrlHandlerAdded;
            static /*0x8*/ System.Console.WindowsConsole.WindowsCancelHandler cancelHandler;

            static /*0x7203bf0*/ WindowsConsole();
            static /*0x7203abc*/ int GetConsoleCP();
            static /*0x7203b24*/ int GetConsoleOutputCP();
            static /*0x7203b90*/ bool DoWindowsConsoleCancelEvent(int keyCode);
            static /*0x7202b84*/ int GetInputCodePage();
            static /*0x7202bd0*/ int GetOutputCodePage();

            class WindowsCancelHandler : System.MulticastDelegate
            {
                /*0x7203c90*/ WindowsCancelHandler(object object, nint method);
                /*0x7203d30*/ bool Invoke(int keyCode);
            }
        }
    }

    class ConsoleDriver
    {
        static /*0x0*/ System.IConsoleDriver driver;
        static /*0x8*/ bool is_console;
        static /*0x9*/ bool called_isatty;

        static /*0x7203d44*/ ConsoleDriver();
        static /*0x7203e14*/ System.IConsoleDriver CreateNullConsoleDriver();
        static /*0x7203e54*/ System.IConsoleDriver CreateWindowsConsoleDriver();
        static /*0x7203ea8*/ System.IConsoleDriver CreateTermInfoDriver(string term);
        static /*0x72037f0*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x7203008*/ bool get_IsConsole();
        static /*0x7204294*/ bool Isatty(nint handle);
        static /*0x7204298*/ int InternalKeyAvailable(int ms_timeout);
        static /*0x720429c*/ bool TtySetup(string keypadXmit, string teardown, ref byte[] control_characters, ref int* address);
        static /*0x72042a0*/ bool SetEcho(bool wantEcho);
    }

    class DelegateData
    {
        /*0x10*/ System.Type target_type;
        /*0x18*/ string method_name;
        /*0x20*/ bool curried_first_arg;

        /*0x72042a8*/ DelegateData();
    }

    class Delegate : System.ICloneable, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint method_ptr;
        /*0x18*/ nint invoke_impl;
        /*0x20*/ object m_target;
        /*0x28*/ nint method;
        /*0x30*/ nint delegate_trampoline;
        /*0x38*/ nint extra_arg;
        /*0x40*/ nint method_code;
        /*0x48*/ nint interp_method;
        /*0x50*/ nint interp_invoke_impl;
        /*0x58*/ System.Reflection.MethodInfo method_info;
        /*0x60*/ System.Reflection.MethodInfo original_method_info;
        /*0x68*/ System.DelegateData data;
        /*0x70*/ bool method_is_virtual;

        static /*0x72042c4*/ System.Delegate CreateDelegate_internal(System.Type type, object target, System.Reflection.MethodInfo info, bool throwOnBindFailure);
        static /*0x72042cc*/ bool arg_type_match(System.Type delArgType, System.Type argType);
        static /*0x720442c*/ bool arg_type_match_this(System.Type delArgType, System.Type argType, bool boxedThis);
        static /*0x7204568*/ bool return_type_match(System.Type delReturnType, System.Type returnType);
        static /*0x7204740*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure, bool allowClosed);
        static /*0x7204f6c*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method);
        static /*0x7204f78*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);
        static /*0x7204f90*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method);
        static /*0x7204fa4*/ System.Delegate CreateDelegate(System.Type type, object target, string method);
        static /*0x7204fbc*/ System.Reflection.MethodInfo GetCandidateMethod(System.Type type, System.Type target, string method, System.Reflection.BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure);
        static /*0x720541c*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x720551c*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method);
        static /*0x7205528*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x7204fb0*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase);
        static /*0x72011d4*/ System.Delegate Combine(System.Delegate a, System.Delegate b);
        static /*0x720600c*/ System.Delegate Combine(System.Delegate[] delegates);
        static /*0x72013ac*/ System.Delegate Remove(System.Delegate source, System.Delegate value);
        static /*0x72060e8*/ bool op_Equality(System.Delegate d1, System.Delegate d2);
        static /*0x7206110*/ bool op_Inequality(System.Delegate d1, System.Delegate d2);
        static /*0x7206148*/ System.MulticastDelegate AllocDelegateLike_internal(System.Delegate d);
        /*0x72042ac*/ System.Reflection.MethodInfo get_Method();
        /*0x72042b8*/ System.Reflection.MethodInfo GetVirtualMethod_internal();
        /*0x72042bc*/ object get_Target();
        /*0x7205604*/ object DynamicInvoke(object[] args);
        /*0x7205610*/ void InitializeDelegateData();
        /*0x7205704*/ object DynamicInvokeImpl(object[] args);
        /*0x72059fc*/ object Clone();
        /*0x7205a04*/ bool Equals(object obj);
        /*0x7205bac*/ int GetHashCode();
        /*0x7205c24*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x7205d20*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7205f70*/ System.Delegate[] GetInvocationList();
        /*0x7206070*/ System.Delegate CombineImpl(System.Delegate d);
        /*0x72060c4*/ System.Delegate RemoveImpl(System.Delegate d);
    }

    class DelegateSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Delegate _delegate;

        static /*0x7205d24*/ void GetDelegateData(System.Delegate instance, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x720614c*/ DelegateSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x7206720*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7206758*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);

        class DelegateEntry
        {
            /*0x10*/ string type;
            /*0x18*/ string assembly;
            /*0x20*/ object target;
            /*0x28*/ string targetTypeAssembly;
            /*0x30*/ string targetTypeName;
            /*0x38*/ string methodName;
            /*0x40*/ System.DelegateSerializationHolder.DelegateEntry delegateEntry;

            /*0x72065bc*/ DelegateEntry(System.Delegate del, string targetLabel);
            /*0x7206364*/ System.Delegate DeserializeDelegate(System.Runtime.Serialization.SerializationInfo info, int index);
        }
    }

    class EmptyArray<T>
    {
        static /*0x0*/ T[] Value;

        static /*0x383e7a0*/ EmptyArray();
    }

    enum SByteEnum
    {
    }

    enum Int16Enum
    {
    }

    enum Int32Enum
    {
    }

    enum Int64Enum
    {
    }

    enum ByteEnum
    {
    }

    enum UInt16Enum
    {
    }

    enum UInt32Enum
    {
    }

    enum UInt64Enum
    {
    }

    interface IConsoleDriver
    {
        System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    struct IntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nint>
    {
        static /*0x0*/ nint Zero;
        /*0x10*/ void* m_value;

        static /*0x72067dc*/ int get_Size();
        static /*0x720693c*/ bool op_Equality(nint value1, nint value2);
        static /*0x7206948*/ bool op_Inequality(nint value1, nint value2);
        static /*0x7206954*/ nint op_Explicit(int value);
        static /*0x720695c*/ nint op_Explicit(long value);
        static /*0x7206960*/ nint op_Explicit(void* value);
        static /*0x7206964*/ int op_Explicit(nint value);
        static /*0x7206968*/ long op_Explicit(nint value);
        static /*0x720696c*/ void* op_Explicit(nint value);
        static /*0x7206970*/ nint Add(nint pointer, int offset);
        static /*0x7206978*/ nint op_Addition(nint pointer, int offset);
        static /*0x7206980*/ nint op_Subtraction(nint pointer, int offset);
        /*0x7206760*/ IntPtr(int value);
        /*0x720676c*/ IntPtr(long value);
        /*0x7206774*/ IntPtr(void* value);
        /*0x720677c*/ IntPtr(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x72067e4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720688c*/ bool Equals(object obj);
        /*0x72028cc*/ int GetHashCode();
        /*0x72068d8*/ int ToInt32();
        /*0x7206884*/ long ToInt64();
        /*0x72068e0*/ void* ToPointer();
        /*0x72068e8*/ string ToString();
        /*0x7206914*/ string ToString(string format);
        /*0x7206988*/ bool IsNull();
        /*0x7206998*/ bool System.IEquatable<System.IntPtr>.Equals(nint other);
    }

    class KnownTerminals
    {
        static /*0x72069a8*/ byte[] get_linux();
        static /*0x7206a18*/ byte[] get_xterm();
        static /*0x7206a88*/ byte[] get_ansi();
    }

    class MarshalByRefObject
    {
        /*0x10*/ object _identity;

        /*0x720029c*/ MarshalByRefObject();
        /*0x7206af8*/ System.Runtime.Remoting.ServerIdentity get_ObjectIdentity();
        /*0x7206b30*/ void set_ObjectIdentity(System.Runtime.Remoting.ServerIdentity value);
        /*0x7206b68*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
        /*0x7206ba0*/ object InitializeLifetimeService();
    }

    class MonoAsyncCall
    {
        /*0x10*/ object msg;
        /*0x18*/ nint cb_method;
        /*0x20*/ object cb_target;
        /*0x28*/ object state;
        /*0x30*/ object res;
        /*0x38*/ object out_args;

        /*0x7206bd8*/ MonoAsyncCall();
    }

    class MonoCustomAttrs
    {
        static /*0x0*/ System.Reflection.Assembly corlib;
        static /*0x8*/ System.AttributeUsageAttribute DefaultAttributeUsage;
        [ThreadStatic] static System.Collections.Generic.Dictionary<System.Type, System.AttributeUsageAttribute> usage_cache;

        static /*0x720a9e4*/ MonoCustomAttrs();
        static /*0x7206bdc*/ bool IsUserCattrProvider(object obj);
        static /*0x7206d9c*/ System.Attribute[] GetCustomAttributesInternal(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool pseudoAttrs);
        static /*0x7206da4*/ object[] GetPseudoCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x7207098*/ object[] GetPseudoCustomAttributes(System.Type type);
        static /*0x7207214*/ object[] GetCustomAttributesBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x72073b8*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x72082e0*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x7208450*/ System.Reflection.CustomAttributeData[] GetCustomAttributesDataInternal(System.Reflection.ICustomAttributeProvider obj);
        static /*0x7208454*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x7208734*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x7208578*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesDataBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x7209aec*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x7209de4*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Type type);
        static /*0x720a01c*/ bool IsDefined(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x720a2a4*/ bool IsDefinedInternal(System.Reflection.ICustomAttributeProvider obj, System.Type AttributeType);
        static /*0x720a2a8*/ System.Reflection.PropertyInfo GetBasePropertyDefinition(System.Reflection.RuntimePropertyInfo property);
        static /*0x720a59c*/ System.Reflection.EventInfo GetBaseEventDefinition(System.Reflection.RuntimeEventInfo evt);
        static /*0x7207d84*/ System.Reflection.ICustomAttributeProvider GetBase(System.Reflection.ICustomAttributeProvider obj);
        static /*0x720a7ac*/ System.AttributeUsageAttribute RetrieveAttributeUsageNoCache(System.Type attributeType);
        static /*0x720813c*/ System.AttributeUsageAttribute RetrieveAttributeUsage(System.Type attributeType);

        class AttributeInfo
        {
            /*0x10*/ System.AttributeUsageAttribute _usage;
            /*0x18*/ int _inheritanceLevel;

            /*0x72082b4*/ AttributeInfo(System.AttributeUsageAttribute usage, int inheritanceLevel);
            /*0x720aa5c*/ System.AttributeUsageAttribute get_Usage();
            /*0x720aa64*/ int get_InheritanceLevel();
        }
    }

    class MonoListItem
    {
        /*0x10*/ System.MonoListItem next;
        /*0x18*/ object data;

        /*0x720aa6c*/ MonoListItem();
    }

    class MonoType : System.RuntimeType
    {
    }

    class MulticastDelegate : System.Delegate
    {
        /*0x78*/ System.Delegate[] delegates;

        /*0x720aa70*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720aa74*/ object DynamicInvokeImpl(object[] args);
        /*0x720ab0c*/ bool Equals(object obj);
        /*0x720ac68*/ int GetHashCode();
        /*0x720ac6c*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x720acb4*/ System.Delegate[] GetInvocationList();
        /*0x720ad8c*/ System.Delegate CombineImpl(System.Delegate follow);
        /*0x720b058*/ int LastIndexOf(System.Delegate[] haystack, System.Delegate[] needle);
        /*0x720b184*/ System.Delegate RemoveImpl(System.Delegate value);
    }

    class NullConsoleDriver : System.IConsoleDriver
    {
        static /*0x0*/ System.ConsoleKeyInfo EmptyConsoleKeyInfo;

        static /*0x720b4e0*/ NullConsoleDriver();
        /*0x7203f00*/ NullConsoleDriver();
        /*0x720b484*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class Object
    {
        static /*0x720b570*/ bool Equals(object objA, object objB);
        static /*0x720b5c8*/ bool ReferenceEquals(object objA, object objB);
        static /*0x720b5a4*/ int InternalGetHashCode(object o);
        /*0x71fddc4*/ Object();
        /*0x720b564*/ bool Equals(object obj);
        /*0x720b59c*/ void Finalize();
        /*0x720b5a0*/ int GetHashCode();
        /*0x71fe58c*/ System.Type GetType();
        /*0x7205a00*/ object MemberwiseClone();
        /*0x720b5a8*/ string ToString();
        /*0x720b5d4*/ void FieldGetter(string typeName, string fieldName, ref object val);
        /*0x720b5d8*/ void FieldSetter(string typeName, string fieldName, object val);
    }

    enum PlatformID
    {
        Win32S = 0,
        Win32Windows = 1,
        Win32NT = 2,
        WinCE = 3,
        Unix = 4,
        Xbox = 5,
        MacOSX = 6,
    }

    struct RuntimeArgumentHandle
    {
        /*0x10*/ nint args;
    }

    struct RuntimeFieldHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x720b9e4*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
        static /*0x720b9e8*/ void SetValue(System.Reflection.RuntimeFieldInfo field, object obj, object value, System.RuntimeType fieldType, System.Reflection.FieldAttributes fieldAttr, System.RuntimeType declaringType, ref bool domainInitialized);
        static /*0x720b9ec*/ void SetValueDirect(System.Reflection.RuntimeFieldInfo field, System.RuntimeType fieldType, void* pTypedRef, object value, System.RuntimeType contextType);
        /*0x720b5dc*/ RuntimeFieldHandle(nint v);
        /*0x720b5e4*/ RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720b760*/ nint get_Value();
        /*0x720b768*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720b8ec*/ bool Equals(object obj);
        /*0x720b9dc*/ int GetHashCode();
    }

    struct RuntimeMethodHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x720bdf8*/ string ConstructInstantiation(System.Reflection.RuntimeMethodInfo method, System.TypeNameFormatFlags format);
        /*0x720b9f0*/ RuntimeMethodHandle(nint v);
        /*0x720b9f8*/ RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720bb74*/ nint get_Value();
        /*0x720bb7c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720bd00*/ bool Equals(object obj);
        /*0x720bdf0*/ int GetHashCode();
        /*0x720bf50*/ bool IsNullHandle();
    }

    struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x720c390*/ System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type);
        static /*0x720c394*/ int GetMetadataToken(System.RuntimeType type);
        static /*0x720c398*/ int GetToken(System.RuntimeType type);
        static /*0x720c39c*/ System.Type GetGenericTypeDefinition_impl(System.RuntimeType type);
        static /*0x720c3a0*/ System.Type GetGenericTypeDefinition(System.RuntimeType type);
        static /*0x720c3a4*/ bool IsPrimitive(System.RuntimeType type);
        static /*0x720c3e0*/ bool IsByRef(System.RuntimeType type);
        static /*0x720c3fc*/ bool IsPointer(System.RuntimeType type);
        static /*0x720c418*/ bool IsArray(System.RuntimeType type);
        static /*0x720c440*/ bool IsSzArray(System.RuntimeType type);
        static /*0x720c45c*/ bool HasElementType(System.RuntimeType type);
        static /*0x720c3dc*/ System.Reflection.CorElementType GetCorElementType(System.RuntimeType type);
        static /*0x720c498*/ bool HasInstantiation(System.RuntimeType type);
        static /*0x720c49c*/ bool IsComObject(System.RuntimeType type);
        static /*0x720c4a0*/ bool IsInstanceOfType(System.RuntimeType type, object o);
        static /*0x720c4a4*/ bool HasReferences(System.RuntimeType type);
        static /*0x720c4a8*/ bool IsComObject(System.RuntimeType type, bool isGenericCOM);
        static /*0x720c4b8*/ bool IsContextful(System.RuntimeType type);
        static /*0x720c538*/ bool IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2);
        static /*0x720c540*/ bool IsInterface(System.RuntimeType type);
        static /*0x720c560*/ int GetArrayRank(System.RuntimeType type);
        static /*0x720c564*/ System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type);
        static /*0x720c568*/ System.RuntimeType GetElementType(System.RuntimeType type);
        static /*0x720c56c*/ System.Reflection.RuntimeModule GetModule(System.RuntimeType type);
        static /*0x720c570*/ bool IsGenericVariable(System.RuntimeType type);
        static /*0x720c574*/ System.RuntimeType GetBaseType(System.RuntimeType type);
        static /*0x720c578*/ bool CanCastTo(System.RuntimeType type, System.RuntimeType target);
        static /*0x720c588*/ bool type_is_assignable_from(System.Type a, System.Type b);
        static /*0x720c58c*/ bool IsGenericTypeDefinition(System.RuntimeType type);
        static /*0x720c590*/ nint GetGenericParameterInfo(System.RuntimeType type);
        static /*0x720c594*/ bool IsSubclassOf(System.RuntimeType childType, System.RuntimeType baseType);
        static /*0x720c5b4*/ bool is_subclass_of(nint childType, nint baseType);
        static /*0x720c5b8*/ System.RuntimeType internal_from_name(string name, ref System.Threading.StackCrawlMark stackMark, System.Reflection.Assembly callerAssembly, bool throwOnError, bool ignoreCase, bool reflectionOnly);
        static /*0x720c5c8*/ System.RuntimeType GetTypeByName(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark, bool loadTypeFromPartialName);
        /*0x720bf60*/ RuntimeTypeHandle(nint val);
        /*0x720bf68*/ RuntimeTypeHandle(System.RuntimeType type);
        /*0x720bf84*/ RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720c100*/ nint get_Value();
        /*0x720c108*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x720c288*/ bool Equals(object obj);
        /*0x720c378*/ bool Equals(System.RuntimeTypeHandle handle);
        /*0x720c388*/ int GetHashCode();
    }

    class TermInfoDriver : System.IConsoleDriver
    {
        static /*0x0*/ int* native_terminal_size;
        static /*0x8*/ int terminal_size;
        static /*0x10*/ string[] locations;
        static /*0x18*/ int[] _consoleColorToAnsiCode;
        /*0x10*/ System.TermInfoReader reader;
        /*0x18*/ int cursorLeft;
        /*0x1c*/ int cursorTop;
        /*0x20*/ string title;
        /*0x28*/ string titleFormat;
        /*0x30*/ bool cursorVisible;
        /*0x38*/ string csrVisible;
        /*0x40*/ string csrInvisible;
        /*0x48*/ string clear;
        /*0x50*/ string bell;
        /*0x58*/ string term;
        /*0x60*/ System.IO.StreamReader stdin;
        /*0x68*/ System.IO.CStreamWriter stdout;
        /*0x70*/ int windowWidth;
        /*0x74*/ int windowHeight;
        /*0x78*/ int bufferHeight;
        /*0x7c*/ int bufferWidth;
        /*0x80*/ char[] buffer;
        /*0x88*/ int readpos;
        /*0x8c*/ int writepos;
        /*0x90*/ string keypadXmit;
        /*0x98*/ string keypadLocal;
        /*0xa0*/ bool inited;
        /*0xa8*/ object initLock;
        /*0xb0*/ bool initKeys;
        /*0xb8*/ string origPair;
        /*0xc0*/ string origColors;
        /*0xc8*/ string cursorAddress;
        /*0xd0*/ System.ConsoleColor fgcolor;
        /*0xd8*/ string setfgcolor;
        /*0xe0*/ string setbgcolor;
        /*0xe8*/ int maxColors;
        /*0xec*/ bool noGetPosition;
        /*0xf0*/ System.Collections.Hashtable keymap;
        /*0xf8*/ System.ByteMatcher rootmap;
        /*0x100*/ int rl_startx;
        /*0x104*/ int rl_starty;
        /*0x108*/ byte[] control_characters;
        /*0x110*/ char[] echobuf;
        /*0x118*/ int echon;

        static /*0x721186c*/ TermInfoDriver();
        static /*0x720c910*/ string TryTermInfoDir(string dir, string term);
        static /*0x720ca30*/ string SearchTerminfo(string term);
        /*0x7203f04*/ TermInfoDriver(string term);
        /*0x720cb98*/ void WriteConsole(string str);
        /*0x720cf28*/ bool get_Initialized();
        /*0x720cf30*/ void Init();
        /*0x720db5c*/ void IncrementX();
        /*0x720dc20*/ void WriteSpecialKey(System.ConsoleKeyInfo key);
        /*0x720df44*/ void WriteSpecialKey(char c);
        /*0x720e0f0*/ bool IsSpecialKey(System.ConsoleKeyInfo key);
        /*0x720e174*/ bool IsSpecialKey(char c);
        /*0x720d8cc*/ void GetCursorPosition();
        /*0x720e294*/ void CheckWindowDimensions();
        /*0x720dbf4*/ int get_WindowHeight();
        /*0x720dbc8*/ int get_WindowWidth();
        /*0x720e19c*/ void AddToBuffer(int b);
        /*0x720e3b4*/ void AdjustBuffer();
        /*0x720df6c*/ System.ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
        /*0x720e3c8*/ object GetKeyFromBuffer(bool cooked);
        /*0x720eb78*/ System.ConsoleKeyInfo ReadKeyInternal(ref bool fresh);
        /*0x720eeb0*/ bool InputPending();
        /*0x720eee4*/ void QueueEcho(char c);
        /*0x720efd0*/ void Echo(System.ConsoleKeyInfo key);
        /*0x720f024*/ void EchoFlush();
        /*0x720f058*/ int Read(char[] dest, int index, int count);
        /*0x720f378*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        /*0x720f3dc*/ string ReadLine();
        /*0x720f5c0*/ string ReadToEnd();
        /*0x720f3e4*/ string ReadUntilConditionInternal(bool haltOnNewLine);
        /*0x720dd34*/ void SetCursorPosition(int left, int top);
        /*0x720f760*/ void CreateKeyMap();
        /*0x720ed38*/ void InitKeys();
        /*0x721168c*/ void AddStringMapping(System.TermInfoStrings s);
    }

    class ParameterizedStrings
    {
        [ThreadStatic] static System.ParameterizedStrings.LowLevelStack _cachedStack;

        static /*0x720f5fc*/ string Evaluate(string format, System.ParameterizedStrings.FormatParam[] args);
        static /*0x7211a90*/ string EvaluateInternal(string format, ref int pos, System.ParameterizedStrings.FormatParam[] args, System.ParameterizedStrings.LowLevelStack stack, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars);
        static /*0x7212870*/ bool AsBool(int i);
        static /*0x7212868*/ int AsInt(bool b);
        static /*0x721287c*/ string StringFromAsciiBytes(byte[] buffer, int offset, int length);
        static /*0x7212968*/ int snprintf(byte* str, nint size, string format, string arg1);
        static /*0x7212a34*/ int snprintf(byte* str, nint size, string format, int arg1);
        static /*0x721244c*/ string FormatPrintF(string format, object arg);
        static /*0x7212740*/ System.ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars, ref int index);

        struct FormatParam
        {
            /*0x10*/ int _int32;
            /*0x18*/ string _string;

            static /*0x720f5c8*/ System.ParameterizedStrings.FormatParam op_Implicit(int value);
            /*0x7212aec*/ FormatParam(int value);
            /*0x7212afc*/ FormatParam(int intValue, string stringValue);
            /*0x7212b0c*/ int get_Int32();
            /*0x72123f4*/ string get_String();
            /*0x7212418*/ object get_Object();
        }

        class LowLevelStack
        {
            /*0x10*/ System.ParameterizedStrings.FormatParam[] _arr;
            /*0x18*/ int _count;

            /*0x7211a10*/ LowLevelStack();
            /*0x7212364*/ System.ParameterizedStrings.FormatParam Pop();
            /*0x721264c*/ void Push(System.ParameterizedStrings.FormatParam item);
            /*0x7211a68*/ void Clear();
        }
    }

    class ByteMatcher
    {
        /*0x10*/ System.Collections.Hashtable map;
        /*0x18*/ System.Collections.Hashtable starts;

        /*0x7211608*/ ByteMatcher();
        /*0x72116d8*/ void AddMapping(System.TermInfoStrings key, byte[] val);
        /*0x72117d8*/ void Sort();
        /*0x720e694*/ bool StartsWith(int c);
        /*0x720e6ec*/ System.TermInfoStrings Match(char[] buffer, int offset, int length, ref int used);
    }

    enum TermInfoNumbers
    {
        Columns = 0,
        InitTabs = 1,
        Lines = 2,
        LinesOfMemory = 3,
        MagicCookieGlitch = 4,
        PaddingBaudRate = 5,
        VirtualTerminal = 6,
        WidthStatusLine = 7,
        NumLabels = 8,
        LabelHeight = 9,
        LabelWidth = 10,
        MaxAttributes = 11,
        MaximumWindows = 12,
        MaxColors = 13,
        MaxPairs = 14,
        NoColorVideo = 15,
        BufferCapacity = 16,
        DotVertSpacing = 17,
        DotHorzSpacing = 18,
        MaxMicroAddress = 19,
        MaxMicroJump = 20,
        MicroColSize = 21,
        MicroLineSize = 22,
        NumberOfPins = 23,
        OutputResChar = 24,
        OutputResLine = 25,
        OutputResHorzInch = 26,
        OutputResVertInch = 27,
        PrintRate = 28,
        WideCharSize = 29,
        Buttons = 30,
        BitImageEntwining = 31,
        BitImageType = 32,
        Last = 33,
    }

    class TermInfoReader
    {
        /*0x10*/ int boolSize;
        /*0x14*/ int numSize;
        /*0x18*/ int strOffsets;
        /*0x20*/ byte[] buffer;
        /*0x28*/ int booleansOffset;
        /*0x2c*/ int intOffset;

        /*0x720cbc0*/ TermInfoReader(string term, string filename);
        /*0x720ce94*/ TermInfoReader(string term, byte[] buffer);
        /*0x7212c08*/ void DetermineVersion(short magic);
        /*0x7212b14*/ void ReadHeader(byte[] buffer, ref int position);
        /*0x7212bd4*/ void ReadNames(byte[] buffer, ref int position);
        /*0x720d86c*/ int Get(System.TermInfoNumbers number);
        /*0x720d7dc*/ string Get(System.TermInfoStrings tstr);
        /*0x72117dc*/ byte[] GetStringBytes(System.TermInfoStrings tstr);
        /*0x7212cb0*/ short GetInt16(byte[] buffer, int offset);
        /*0x7212d00*/ string GetString(byte[] buffer, int offset);
        /*0x7212d7c*/ byte[] GetStringBytes(byte[] buffer, int offset);
    }

    enum TermInfoStrings
    {
        BackTab = 0,
        Bell = 1,
        CarriageReturn = 2,
        ChangeScrollRegion = 3,
        ClearAllTabs = 4,
        ClearScreen = 5,
        ClrEol = 6,
        ClrEos = 7,
        ColumnAddress = 8,
        CommandCharacter = 9,
        CursorAddress = 10,
        CursorDown = 11,
        CursorHome = 12,
        CursorInvisible = 13,
        CursorLeft = 14,
        CursorMemAddress = 15,
        CursorNormal = 16,
        CursorRight = 17,
        CursorToLl = 18,
        CursorUp = 19,
        CursorVisible = 20,
        DeleteCharacter = 21,
        DeleteLine = 22,
        DisStatusLine = 23,
        DownHalfLine = 24,
        EnterAltCharsetMode = 25,
        EnterBlinkMode = 26,
        EnterBoldMode = 27,
        EnterCaMode = 28,
        EnterDeleteMode = 29,
        EnterDimMode = 30,
        EnterInsertMode = 31,
        EnterSecureMode = 32,
        EnterProtectedMode = 33,
        EnterReverseMode = 34,
        EnterStandoutMode = 35,
        EnterUnderlineMode = 36,
        EraseChars = 37,
        ExitAltCharsetMode = 38,
        ExitAttributeMode = 39,
        ExitCaMode = 40,
        ExitDeleteMode = 41,
        ExitInsertMode = 42,
        ExitStandoutMode = 43,
        ExitUnderlineMode = 44,
        FlashScreen = 45,
        FormFeed = 46,
        FromStatusLine = 47,
        Init1string = 48,
        Init2string = 49,
        Init3string = 50,
        InitFile = 51,
        InsertCharacter = 52,
        InsertLine = 53,
        InsertPadding = 54,
        KeyBackspace = 55,
        KeyCatab = 56,
        KeyClear = 57,
        KeyCtab = 58,
        KeyDc = 59,
        KeyDl = 60,
        KeyDown = 61,
        KeyEic = 62,
        KeyEol = 63,
        KeyEos = 64,
        KeyF0 = 65,
        KeyF1 = 66,
        KeyF10 = 67,
        KeyF2 = 68,
        KeyF3 = 69,
        KeyF4 = 70,
        KeyF5 = 71,
        KeyF6 = 72,
        KeyF7 = 73,
        KeyF8 = 74,
        KeyF9 = 75,
        KeyHome = 76,
        KeyIc = 77,
        KeyIl = 78,
        KeyLeft = 79,
        KeyLl = 80,
        KeyNpage = 81,
        KeyPpage = 82,
        KeyRight = 83,
        KeySf = 84,
        KeySr = 85,
        KeyStab = 86,
        KeyUp = 87,
        KeypadLocal = 88,
        KeypadXmit = 89,
        LabF0 = 90,
        LabF1 = 91,
        LabF10 = 92,
        LabF2 = 93,
        LabF3 = 94,
        LabF4 = 95,
        LabF5 = 96,
        LabF6 = 97,
        LabF7 = 98,
        LabF8 = 99,
        LabF9 = 100,
        MetaOff = 101,
        MetaOn = 102,
        Newline = 103,
        PadChar = 104,
        ParmDch = 105,
        ParmDeleteLine = 106,
        ParmDownCursor = 107,
        ParmIch = 108,
        ParmIndex = 109,
        ParmInsertLine = 110,
        ParmLeftCursor = 111,
        ParmRightCursor = 112,
        ParmRindex = 113,
        ParmUpCursor = 114,
        PkeyKey = 115,
        PkeyLocal = 116,
        PkeyXmit = 117,
        PrintScreen = 118,
        PrtrOff = 119,
        PrtrOn = 120,
        RepeatChar = 121,
        Reset1string = 122,
        Reset2string = 123,
        Reset3string = 124,
        ResetFile = 125,
        RestoreCursor = 126,
        RowAddress = 127,
        SaveCursor = 128,
        ScrollForward = 129,
        ScrollReverse = 130,
        SetAttributes = 131,
        SetTab = 132,
        SetWindow = 133,
        Tab = 134,
        ToStatusLine = 135,
        UnderlineChar = 136,
        UpHalfLine = 137,
        InitProg = 138,
        KeyA1 = 139,
        KeyA3 = 140,
        KeyB2 = 141,
        KeyC1 = 142,
        KeyC3 = 143,
        PrtrNon = 144,
        CharPadding = 145,
        AcsChars = 146,
        PlabNorm = 147,
        KeyBtab = 148,
        EnterXonMode = 149,
        ExitXonMode = 150,
        EnterAmMode = 151,
        ExitAmMode = 152,
        XonCharacter = 153,
        XoffCharacter = 154,
        EnaAcs = 155,
        LabelOn = 156,
        LabelOff = 157,
        KeyBeg = 158,
        KeyCancel = 159,
        KeyClose = 160,
        KeyCommand = 161,
        KeyCopy = 162,
        KeyCreate = 163,
        KeyEnd = 164,
        KeyEnter = 165,
        KeyExit = 166,
        KeyFind = 167,
        KeyHelp = 168,
        KeyMark = 169,
        KeyMessage = 170,
        KeyMove = 171,
        KeyNext = 172,
        KeyOpen = 173,
        KeyOptions = 174,
        KeyPrevious = 175,
        KeyPrint = 176,
        KeyRedo = 177,
        KeyReference = 178,
        KeyRefresh = 179,
        KeyReplace = 180,
        KeyRestart = 181,
        KeyResume = 182,
        KeySave = 183,
        KeySuspend = 184,
        KeyUndo = 185,
        KeySbeg = 186,
        KeyScancel = 187,
        KeyScommand = 188,
        KeyScopy = 189,
        KeyScreate = 190,
        KeySdc = 191,
        KeySdl = 192,
        KeySelect = 193,
        KeySend = 194,
        KeySeol = 195,
        KeySexit = 196,
        KeySfind = 197,
        KeyShelp = 198,
        KeyShome = 199,
        KeySic = 200,
        KeySleft = 201,
        KeySmessage = 202,
        KeySmove = 203,
        KeySnext = 204,
        KeySoptions = 205,
        KeySprevious = 206,
        KeySprint = 207,
        KeySredo = 208,
        KeySreplace = 209,
        KeySright = 210,
        KeySrsume = 211,
        KeySsave = 212,
        KeySsuspend = 213,
        KeySundo = 214,
        ReqForInput = 215,
        KeyF11 = 216,
        KeyF12 = 217,
        KeyF13 = 218,
        KeyF14 = 219,
        KeyF15 = 220,
        KeyF16 = 221,
        KeyF17 = 222,
        KeyF18 = 223,
        KeyF19 = 224,
        KeyF20 = 225,
        KeyF21 = 226,
        KeyF22 = 227,
        KeyF23 = 228,
        KeyF24 = 229,
        KeyF25 = 230,
        KeyF26 = 231,
        KeyF27 = 232,
        KeyF28 = 233,
        KeyF29 = 234,
        KeyF30 = 235,
        KeyF31 = 236,
        KeyF32 = 237,
        KeyF33 = 238,
        KeyF34 = 239,
        KeyF35 = 240,
        KeyF36 = 241,
        KeyF37 = 242,
        KeyF38 = 243,
        KeyF39 = 244,
        KeyF40 = 245,
        KeyF41 = 246,
        KeyF42 = 247,
        KeyF43 = 248,
        KeyF44 = 249,
        KeyF45 = 250,
        KeyF46 = 251,
        KeyF47 = 252,
        KeyF48 = 253,
        KeyF49 = 254,
        KeyF50 = 255,
        KeyF51 = 256,
        KeyF52 = 257,
        KeyF53 = 258,
        KeyF54 = 259,
        KeyF55 = 260,
        KeyF56 = 261,
        KeyF57 = 262,
        KeyF58 = 263,
        KeyF59 = 264,
        KeyF60 = 265,
        KeyF61 = 266,
        KeyF62 = 267,
        KeyF63 = 268,
        ClrBol = 269,
        ClearMargins = 270,
        SetLeftMargin = 271,
        SetRightMargin = 272,
        LabelFormat = 273,
        SetClock = 274,
        DisplayClock = 275,
        RemoveClock = 276,
        CreateWindow = 277,
        GotoWindow = 278,
        Hangup = 279,
        DialPhone = 280,
        QuickDial = 281,
        Tone = 282,
        Pulse = 283,
        FlashHook = 284,
        FixedPause = 285,
        WaitTone = 286,
        User0 = 287,
        User1 = 288,
        User2 = 289,
        User3 = 290,
        User4 = 291,
        User5 = 292,
        User6 = 293,
        User7 = 294,
        User8 = 295,
        User9 = 296,
        OrigPair = 297,
        OrigColors = 298,
        InitializeColor = 299,
        InitializePair = 300,
        SetColorPair = 301,
        SetForeground = 302,
        SetBackground = 303,
        ChangeCharPitch = 304,
        ChangeLinePitch = 305,
        ChangeResHorz = 306,
        ChangeResVert = 307,
        DefineChar = 308,
        EnterDoublewideMode = 309,
        EnterDraftQuality = 310,
        EnterItalicsMode = 311,
        EnterLeftwardMode = 312,
        EnterMicroMode = 313,
        EnterNearLetterQuality = 314,
        EnterNormalQuality = 315,
        EnterShadowMode = 316,
        EnterSubscriptMode = 317,
        EnterSuperscriptMode = 318,
        EnterUpwardMode = 319,
        ExitDoublewideMode = 320,
        ExitItalicsMode = 321,
        ExitLeftwardMode = 322,
        ExitMicroMode = 323,
        ExitShadowMode = 324,
        ExitSubscriptMode = 325,
        ExitSuperscriptMode = 326,
        ExitUpwardMode = 327,
        MicroColumnAddress = 328,
        MicroDown = 329,
        MicroLeft = 330,
        MicroRight = 331,
        MicroRowAddress = 332,
        MicroUp = 333,
        OrderOfPins = 334,
        ParmDownMicro = 335,
        ParmLeftMicro = 336,
        ParmRightMicro = 337,
        ParmUpMicro = 338,
        SelectCharSet = 339,
        SetBottomMargin = 340,
        SetBottomMarginParm = 341,
        SetLeftMarginParm = 342,
        SetRightMarginParm = 343,
        SetTopMargin = 344,
        SetTopMarginParm = 345,
        StartBitImage = 346,
        StartCharSetDef = 347,
        StopBitImage = 348,
        StopCharSetDef = 349,
        SubscriptCharacters = 350,
        SuperscriptCharacters = 351,
        TheseCauseCr = 352,
        ZeroMotion = 353,
        CharSetNames = 354,
        KeyMouse = 355,
        MouseInfo = 356,
        ReqMousePos = 357,
        GetMouse = 358,
        SetAForeground = 359,
        SetABackground = 360,
        PkeyPlab = 361,
        DeviceType = 362,
        CodeSetInit = 363,
        Set0DesSeq = 364,
        Set1DesSeq = 365,
        Set2DesSeq = 366,
        Set3DesSeq = 367,
        SetLrMargin = 368,
        SetTbMargin = 369,
        BitImageRepeat = 370,
        BitImageNewline = 371,
        BitImageCarriageReturn = 372,
        ColorNames = 373,
        DefineBitImageRegion = 374,
        EndBitImageRegion = 375,
        SetColorBand = 376,
        SetPageLength = 377,
        DisplayPcChar = 378,
        EnterPcCharsetMode = 379,
        ExitPcCharsetMode = 380,
        EnterScancodeMode = 381,
        ExitScancodeMode = 382,
        PcTermOptions = 383,
        ScancodeEscape = 384,
        AltScancodeEsc = 385,
        EnterHorizontalHlMode = 386,
        EnterLeftHlMode = 387,
        EnterLowHlMode = 388,
        EnterRightHlMode = 389,
        EnterTopHlMode = 390,
        EnterVerticalHlMode = 391,
        SetAAttributes = 392,
        SetPglenInch = 393,
        Last = 394,
    }

    interface TypeName : System.IEquatable<System.TypeName>
    {
        /*0x38148bc*/ string get_DisplayName();
    }

    interface TypeIdentifier : System.TypeName, System.IEquatable<System.TypeName>
    {
        /*0x38148bc*/ string get_InternalName();
    }

    class TypeNames
    {
        class ATypeName : System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x7212f8c*/ ATypeName();
            /*0x38148bc*/ string get_DisplayName();
            /*0x7212e34*/ bool Equals(System.TypeName other);
            /*0x7212f04*/ int GetHashCode();
            /*0x7212f2c*/ bool Equals(object other);
        }
    }

    class TypeIdentifiers
    {
        static /*0x7212f90*/ System.TypeIdentifier FromDisplay(string displayName);

        class Display : System.TypeNames.ATypeName, System.TypeIdentifier, System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x10*/ string displayName;
            /*0x18*/ string internal_name;

            /*0x7212ffc*/ Display(string displayName);
            /*0x7213020*/ string get_DisplayName();
            /*0x7213028*/ string get_InternalName();
            /*0x721306c*/ string GetInternalName();
        }
    }

    interface ModifierSpec
    {
        /*0x3814a3c*/ System.Type Resolve(System.Type type);
        /*0x3814a3c*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
    }

    class ArraySpec : System.ModifierSpec
    {
        /*0x10*/ int dimensions;
        /*0x14*/ bool bound;

        /*0x7213078*/ ArraySpec(int dimensions, bool bound);
        /*0x7213088*/ System.Type Resolve(System.Type type);
        /*0x72130f0*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x7213190*/ string ToString();
    }

    class PointerSpec : System.ModifierSpec
    {
        /*0x10*/ int pointer_level;

        /*0x7213200*/ PointerSpec(int pointer_level);
        /*0x7213228*/ System.Type Resolve(System.Type type);
        /*0x721327c*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x72132a4*/ string ToString();
    }

    class TypeSpec
    {
        /*0x10*/ System.TypeIdentifier name;
        /*0x18*/ string assembly_name;
        /*0x20*/ System.Collections.Generic.List<System.TypeIdentifier> nested;
        /*0x28*/ System.Collections.Generic.List<System.TypeSpec> generic_params;
        /*0x30*/ System.Collections.Generic.List<System.ModifierSpec> modifier_spec;
        /*0x38*/ bool is_byref;
        /*0x40*/ string display_fullname;

        static /*0x72139a0*/ System.TypeSpec Parse(string typeName);
        static /*0x7214660*/ string UnescapeInternalName(string displayName);
        static /*0x721528c*/ void SkipSpace(string name, ref int pos);
        static /*0x721531c*/ void BoundCheck(int idx, string s);
        static /*0x7215184*/ System.TypeIdentifier ParsedTypeIdentifier(string displayName);
        static /*0x7213a70*/ System.TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn);
        /*0x72153a0*/ TypeSpec();
        /*0x7213314*/ bool get_HasModifiers();
        /*0x7213324*/ string GetDisplayFullName(System.TypeSpec.DisplayNameFormat flags);
        /*0x72137ac*/ System.Text.StringBuilder GetModifierString(System.Text.StringBuilder sb);
        /*0x7213768*/ string get_DisplayFullName();
        /*0x7214754*/ System.Type Resolve(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
        /*0x7215044*/ void AddName(string type_name);
        /*0x721518c*/ void AddModifier(System.ModifierSpec md);

        enum DisplayNameFormat
        {
            Default = 0,
            WANT_ASSEMBLY = 1,
            NO_MODIFIERS = 2,
        }
    }

    struct UIntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nuint>
    {
        static /*0x0*/ nuint Zero;
        /*0x10*/ void* _pointer;

        static /*0x7215524*/ UIntPtr();
        static /*0x72154ec*/ bool op_Equality(nuint value1, nuint value2);
        static /*0x72154f8*/ bool op_Inequality(nuint value1, nuint value2);
        static /*0x7215504*/ nuint op_Explicit(ulong value);
        static /*0x7215508*/ void* op_Explicit(nuint value);
        static /*0x721550c*/ nuint op_Explicit(uint value);
        static /*0x72153b0*/ int get_Size();
        /*0x72153a8*/ UIntPtr(ulong value);
        /*0x72153b8*/ UIntPtr(uint value);
        /*0x72153c4*/ UIntPtr(void* value);
        /*0x72153cc*/ bool Equals(object obj);
        /*0x7215418*/ int GetHashCode();
        /*0x7215420*/ void* ToPointer();
        /*0x7215428*/ string ToString();
        /*0x721544c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7215514*/ bool System.IEquatable<System.UIntPtr>.Equals(nuint other);
    }

    class ValueType
    {
        static /*0x7215544*/ bool InternalEquals(object o1, object o2, ref object[] fields);
        static /*0x7215548*/ bool DefaultEquals(object o1, object o2);
        static /*0x72156fc*/ int InternalGetHashCode(object o, ref object[] fields);
        /*0x721553c*/ ValueType();
        /*0x72156f8*/ bool Equals(object obj);
        /*0x7215700*/ int GetHashCode();
        /*0x7215778*/ string ToString();
    }

    struct Variant
    {
        /*0x10*/ short vt;
        /*0x12*/ ushort wReserved1;
        /*0x14*/ ushort wReserved2;
        /*0x16*/ ushort wReserved3;
        /*0x18*/ long llVal;
        /*0x18*/ int lVal;
        /*0x18*/ byte bVal;
        /*0x18*/ short iVal;
        /*0x18*/ float fltVal;
        /*0x18*/ double dblVal;
        /*0x18*/ short boolVal;
        /*0x18*/ nint bstrVal;
        /*0x18*/ sbyte cVal;
        /*0x18*/ ushort uiVal;
        /*0x18*/ uint ulVal;
        /*0x18*/ ulong ullVal;
        /*0x18*/ int intVal;
        /*0x18*/ uint uintVal;
        /*0x18*/ nint pdispVal;
        /*0x18*/ System.BRECORD bRecord;

        /*0x72157a0*/ void Clear();
    }

    struct BRECORD
    {
        /*0x10*/ nint pvRecord;
        /*0x18*/ nint pRecInfo;
    }

    class WeakReference : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ bool isLongReference;
        /*0x18*/ System.Runtime.InteropServices.GCHandle gcHandle;

        /*0x721583c*/ WeakReference();
        /*0x7215844*/ WeakReference(object target);
        /*0x7215874*/ WeakReference(object target, bool trackResurrection);
        /*0x72158a8*/ WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7215814*/ void AllocateHandle(object target);
        /*0x72159bc*/ bool get_IsAlive();
        /*0x72159dc*/ object get_Target();
        /*0x7215a08*/ void set_Target(object value);
        /*0x7215a64*/ bool get_TrackResurrection();
        /*0x7215a6c*/ void Finalize();
        /*0x7215b08*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class WeakReference<T> : System.Runtime.Serialization.ISerializable
    {
        /*0x0*/ System.Runtime.InteropServices.GCHandle handle;
        /*0x0*/ bool trackResurrection;

        /*0x3910ae8*/ WeakReference(T target);
        /*0x3910ae8*/ WeakReference(T target, bool trackResurrection);
        WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x3910ae8*/ void SetTarget(T target);
        /*0x38141c4*/ bool TryGetTarget(ref T target);
        /*0x38159dc*/ void Finalize();
    }

    struct InputRecord
    {
        /*0x10*/ short EventType;
        /*0x12*/ bool KeyDown;
        /*0x14*/ short RepeatCount;
        /*0x16*/ short VirtualKeyCode;
        /*0x18*/ short VirtualScanCode;
        /*0x1a*/ char Character;
        /*0x1c*/ int ControlKeyState;
        /*0x20*/ int pad1;
        /*0x24*/ bool pad2;
    }

    struct Coord
    {
        /*0x10*/ short X;
        /*0x12*/ short Y;
    }

    struct SmallRect
    {
        /*0x10*/ short Left;
        /*0x12*/ short Top;
        /*0x14*/ short Right;
        /*0x16*/ short Bottom;
    }

    struct ConsoleScreenBufferInfo
    {
        /*0x10*/ System.Coord Size;
        /*0x14*/ System.Coord CursorPosition;
        /*0x18*/ short Attribute;
        /*0x1a*/ System.SmallRect Window;
        /*0x22*/ System.Coord MaxWindowSize;
    }

    enum Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12,
    }

    class WindowsConsoleDriver : System.IConsoleDriver
    {
        /*0x10*/ nint inputHandle;
        /*0x18*/ nint outputHandle;
        /*0x20*/ short defaultAttribute;

        static /*0x721603c*/ bool IsModifierKey(short virtualKeyCode);
        static /*0x7215ce4*/ nint GetStdHandle(System.Handles handle);
        static /*0x7215d68*/ bool GetConsoleScreenBufferInfo(nint handle, ref System.ConsoleScreenBufferInfo info);
        static /*0x7215f34*/ bool ReadConsoleInput(nint handle, ref System.InputRecord record, int length, ref int nread);
        /*0x7215c88*/ WindowsConsoleDriver();
        /*0x7215dfc*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class __ComObject
    {
        /*0x7216070*/ __ComObject();
    }

    struct Decimal : System.IFormattable, System.IComparable, System.IConvertible, System.IComparable<decimal>, System.IEquatable<decimal>, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static /*0x0*/ decimal Zero;
        static /*0x10*/ decimal One;
        static /*0x20*/ decimal MinusOne;
        static /*0x30*/ decimal MaxValue;
        static /*0x40*/ decimal MinValue;
        /*0x10*/ int flags;
        /*0x14*/ int hi;
        /*0x18*/ int lo;
        /*0x1c*/ int mid;
        /*0x18*/ ulong ulomidLE;

        static /*0x721b770*/ Decimal();
        static /*0x7216118*/ ref System.Decimal.DecCalc AsMutable(ref decimal d);
        static /*0x721611c*/ uint DecDivMod1E9(ref decimal value);
        static /*0x7216bf4*/ bool IsValid(int flags);
        static /*0x7216ea8*/ decimal Abs(ref decimal d);
        static /*0x7216ebc*/ decimal Add(decimal d1, decimal d2);
        static /*0x72175d8*/ int Compare(decimal d1, decimal d2);
        static /*0x721791c*/ decimal Divide(decimal d1, decimal d2);
        static /*0x72187fc*/ decimal Parse(string s, System.IFormatProvider provider);
        static /*0x72188d0*/ decimal Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x72189b4*/ bool TryParse(string s, ref decimal result);
        static /*0x7218a88*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref decimal result);
        static /*0x7218b80*/ int[] GetBits(decimal d);
        static /*0x7218c1c*/ ref decimal Max(ref decimal d1, ref decimal d2);
        static /*0x7218c8c*/ ref decimal Min(ref decimal d1, ref decimal d2);
        static /*0x7218cfc*/ decimal Multiply(decimal d1, decimal d2);
        static /*0x7219200*/ decimal Negate(decimal d);
        static /*0x7219208*/ decimal Round(decimal d, int decimals);
        static /*0x721945c*/ decimal Round(decimal d, int decimals, System.MidpointRounding mode);
        static /*0x721929c*/ decimal Round(ref decimal d, int decimals, System.MidpointRounding mode);
        static /*0x72197b8*/ byte ToByte(decimal value);
        static /*0x7219aa8*/ sbyte ToSByte(decimal value);
        static /*0x7219da8*/ short ToInt16(decimal value);
        static /*0x7219f20*/ double ToDouble(decimal d);
        static /*0x7219c20*/ int ToInt32(decimal d);
        static /*0x721a0a0*/ long ToInt64(decimal d);
        static /*0x721a238*/ ushort ToUInt16(decimal value);
        static /*0x7219930*/ uint ToUInt32(decimal d);
        static /*0x721a3b0*/ ulong ToUInt64(decimal d);
        static /*0x721a53c*/ float ToSingle(decimal d);
        static /*0x721a618*/ decimal Truncate(decimal d);
        static /*0x721a718*/ void Truncate(ref decimal d);
        static /*0x721a7b0*/ decimal op_Implicit(byte value);
        static /*0x721a7bc*/ decimal op_Implicit(sbyte value);
        static /*0x721a7d4*/ decimal op_Implicit(short value);
        static /*0x721a7ec*/ decimal op_Implicit(ushort value);
        static /*0x721a7f8*/ decimal op_Implicit(char value);
        static /*0x721a804*/ decimal op_Implicit(int value);
        static /*0x721a818*/ decimal op_Implicit(uint value);
        static /*0x721a824*/ decimal op_Implicit(long value);
        static /*0x721a83c*/ decimal op_Implicit(ulong value);
        static /*0x721a848*/ decimal op_Explicit(float value);
        static /*0x721a88c*/ decimal op_Explicit(double value);
        static /*0x721a8d0*/ int op_Explicit(decimal value);
        static /*0x721a934*/ long op_Explicit(decimal value);
        static /*0x721a998*/ ulong op_Explicit(decimal value);
        static /*0x721a9fc*/ float op_Explicit(decimal value);
        static /*0x721aa60*/ double op_Explicit(decimal value);
        static /*0x721aac4*/ decimal op_UnaryNegation(decimal d);
        static /*0x721aacc*/ decimal op_Increment(decimal d);
        static /*0x721ab3c*/ decimal op_Addition(decimal d1, decimal d2);
        static /*0x721abf0*/ decimal op_Subtraction(decimal d1, decimal d2);
        static /*0x721aca4*/ decimal op_Multiply(decimal d1, decimal d2);
        static /*0x721ad54*/ decimal op_Division(decimal d1, decimal d2);
        static /*0x721ae04*/ bool op_Equality(decimal d1, decimal d2);
        static /*0x721ae94*/ bool op_Inequality(decimal d1, decimal d2);
        static /*0x721af24*/ bool op_LessThan(decimal d1, decimal d2);
        static /*0x721afb0*/ bool op_LessThanOrEqual(decimal d1, decimal d2);
        static /*0x721b040*/ bool op_GreaterThan(decimal d1, decimal d2);
        static /*0x721b0d0*/ bool op_GreaterThanOrEqual(decimal d1, decimal d2);
        /*0x7216250*/ Decimal(int value);
        /*0x7216274*/ Decimal(uint value);
        /*0x7216280*/ Decimal(long value);
        /*0x72162a4*/ Decimal(ulong value);
        /*0x72162ac*/ Decimal(float value);
        /*0x7216750*/ Decimal(double value);
        /*0x7216c14*/ Decimal(int[] bits);
        /*0x7216d4c*/ Decimal(int lo, int mid, int hi, bool isNegative, byte scale);
        /*0x7216e98*/ Decimal(ref decimal d, int flags);
        /*0x72160b0*/ uint get_High();
        /*0x72160b8*/ uint get_Low();
        /*0x72160c0*/ uint get_Mid();
        /*0x72160c8*/ bool get_IsNegative();
        /*0x72160d4*/ int get_Scale();
        /*0x72160dc*/ ulong get_Low64();
        /*0x7216de4*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x7217770*/ int CompareTo(object value);
        /*0x721788c*/ int CompareTo(decimal value);
        /*0x72181d8*/ bool Equals(object value);
        /*0x72182b4*/ bool Equals(decimal value);
        /*0x721834c*/ int GetHashCode();
        /*0x72184f0*/ string ToString();
        /*0x721859c*/ string ToString(System.IFormatProvider provider);
        /*0x7218658*/ string ToString(string format, System.IFormatProvider provider);
        /*0x7218730*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x721b160*/ System.TypeCode GetTypeCode();
        /*0x721b168*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x721b1c8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x721b24c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x721b2ac*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x721b30c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x721b36c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x721b3cc*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x721b42c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x721b48c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x721b4ec*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x721b54c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x721b5ac*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x721b60c*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x721b618*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x721b69c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        struct DecCalc
        {
            static /*0x0*/ uint[] s_powers10;
            static /*0x8*/ ulong[] s_ulongPowers10;
            static /*0x10*/ double[] s_doublePowers10;
            static /*0x18*/ System.Decimal.DecCalc.PowerOvfl[] PowerOvflValues;
            /*0x10*/ uint uflags;
            /*0x14*/ uint uhi;
            /*0x18*/ uint ulo;
            /*0x1c*/ uint umid;
            /*0x18*/ ulong ulomidLE;

            static /*0x721d14c*/ DecCalc();
            static /*0x721b848*/ uint GetExponent(float f);
            static /*0x721b854*/ uint GetExponent(double d);
            static /*0x721b860*/ ulong UInt32x32To64(uint a, uint b);
            static /*0x721b868*/ void UInt64x64To128(ulong a, ulong b, ref System.Decimal.DecCalc result);
            static /*0x721b984*/ uint Div96By32(ref System.Decimal.DecCalc.Buf12 bufNum, uint den);
            static /*0x721ba00*/ bool Div96ByConst(ref ulong high64, ref uint low, uint pow);
            static /*0x721ba40*/ void Unscale(ref uint low, ref ulong high64, ref int scale);
            static /*0x721bcb4*/ uint Div96By64(ref System.Decimal.DecCalc.Buf12 bufNum, ulong den);
            static /*0x721bda8*/ uint Div128By96(ref System.Decimal.DecCalc.Buf16 bufNum, ref System.Decimal.DecCalc.Buf12 bufDen);
            static /*0x721bedc*/ uint IncreaseScale(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0x721bf64*/ void IncreaseScale64(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0x721bfe0*/ int ScaleResult(System.Decimal.DecCalc.Buf24* bufRes, uint hiRes, int scale);
            static /*0x721cb64*/ uint DivByConst(uint* result, uint hiRes, ref uint quotient, ref uint remainder, uint power);
            static /*0x721cbb8*/ int LeadingZeroCount(uint value);
            static /*0x721cc1c*/ int OverflowUnscale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale, bool sticky);
            static /*0x721cd74*/ int SearchScale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale);
            static /*0x721cd44*/ bool Add32To96(ref System.Decimal.DecCalc.Buf12 bufNum, uint value);
            static /*0x7216f70*/ void DecAddSub(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2, bool sign);
            static /*0x7217660*/ int VarDecCmp(ref decimal d1, ref decimal d2);
            static /*0x721cf7c*/ int VarDecCmpSub(ref decimal d1, ref decimal d2);
            static /*0x7218dac*/ void VarDecMul(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0x7216334*/ void VarDecFromR4(float input, ref System.Decimal.DecCalc result);
            static /*0x72167d8*/ void VarDecFromR8(double input, ref System.Decimal.DecCalc result);
            static /*0x721a5bc*/ float VarR4FromDec(ref decimal value);
            static /*0x7219fa0*/ double VarR8FromDec(ref decimal value);
            static /*0x72183a0*/ int GetHashCode(ref decimal d);
            static /*0x72179cc*/ void VarDecDiv(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0x72194f4*/ void InternalRound(ref System.Decimal.DecCalc d, uint scale, System.Decimal.DecCalc.RoundingMode mode);
            static /*0x72161ec*/ uint DecDivMod1E9(ref System.Decimal.DecCalc value);
            /*0x721b7fc*/ uint get_High();
            /*0x721b804*/ void set_High(uint value);
            /*0x721b80c*/ uint get_Low();
            /*0x721b814*/ void set_Low(uint value);
            /*0x721b81c*/ uint get_Mid();
            /*0x721b824*/ void set_Mid(uint value);
            /*0x721b82c*/ bool get_IsNegative();
            /*0x721b838*/ ulong get_Low64();
            /*0x721b840*/ void set_Low64(ulong value);

            enum RoundingMode
            {
                ToEven = 0,
                AwayFromZero = 1,
                Truncate = 2,
                Floor = 3,
                Ceiling = 4,
            }

            struct PowerOvfl
            {
                /*0x10*/ uint Hi;
                /*0x18*/ ulong MidLo;

                /*0x721d38c*/ PowerOvfl(uint hi, uint mid, uint lo);
            }

            struct Buf12
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x10*/ ulong ulo64LE;
                /*0x14*/ ulong uhigh64LE;

                /*0x721b9f0*/ ulong get_Low64();
                /*0x721b9f8*/ void set_Low64(ulong value);
                /*0x721b9e0*/ ulong get_High64();
                /*0x721b9e8*/ void set_High64(ulong value);
            }

            struct Buf16
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong uhigh64LE;

                /*0x721becc*/ ulong get_Low64();
                /*0x721bed4*/ void set_Low64(ulong value);
                /*0x721bec4*/ ulong get_High64();
                /*0x721d144*/ void set_High64(ulong value);
            }

            struct Buf24
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x20*/ uint U4;
                /*0x24*/ uint U5;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong umid64LE;
                /*0x20*/ ulong uhigh64LE;

                /*0x721cf74*/ ulong get_Low64();
                /*0x721cf64*/ void set_Low64(ulong value);
                /*0x721cf6c*/ void set_Mid64(ulong value);
                /*0x721d13c*/ void set_High64(ulong value);
            }
        }
    }

    namespace Threading
    {
        class AbandonedMutexException : System.SystemException
        {
            /*0x8c*/ int _mutexIndex;
            /*0x90*/ System.Threading.Mutex _mutex;

            /*0x721d3a0*/ AbandonedMutexException();
            /*0x721d404*/ AbandonedMutexException(int location, System.Threading.WaitHandle handle);
            /*0x721d510*/ AbandonedMutexException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x721d484*/ void SetupException(int location, System.Threading.WaitHandle handle);
        }

        class AsyncLocal<T> : System.Threading.IAsyncLocal
        {
            /*0x0*/ System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;

            /*0x3816710*/ AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);
            /*0x3910ae8*/ void set_Value(T value);
            void System.Threading.IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
        }

        interface IAsyncLocal
        {
            void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
        }

        struct AsyncLocalValueChangedArgs<T>
        {
            /*0x0*/ T <PreviousValue>k__BackingField;
            /*0x0*/ T <CurrentValue>k__BackingField;
            /*0x0*/ bool <ThreadContextChanged>k__BackingField;

            /*0x3910ae8*/ AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
            /*0x3910ae8*/ T get_CurrentValue();
        }

        class AutoResetEvent : System.Threading.EventWaitHandle
        {
            /*0x721d520*/ AutoResetEvent(bool initialState);
        }

        enum EventResetMode
        {
            AutoReset = 0,
            ManualReset = 1,
        }

        class LazyInitializer
        {
            static /*0x3910ae8*/ T EnsureInitialized<T>(ref T target);
            static /*0x3910ae8*/ T EnsureInitializedCore<T>(ref T target);
            static /*0x3910ae8*/ T EnsureInitialized<T>(ref T target, System.Func<T> valueFactory);
            static /*0x3910ae8*/ T EnsureInitializedCore<T>(ref T target, System.Func<T> valueFactory);
            static /*0x3910ae8*/ T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, System.Func<T> valueFactory);
            static /*0x3910ae8*/ T EnsureInitializedCore<T>(ref T target, ref bool initialized, ref object syncLock, System.Func<T> valueFactory);
            static /*0x3910ae8*/ T EnsureInitialized<T>(ref T target, ref object syncLock, System.Func<T> valueFactory);
            static /*0x3910ae8*/ T EnsureInitializedCore<T>(ref T target, ref object syncLock, System.Func<T> valueFactory);
            static /*0x721d53c*/ object EnsureLockInitialized(ref object syncLock);
        }

        enum LazyThreadSafetyMode
        {
            None = 0,
            PublicationOnly = 1,
            ExecutionAndPublication = 2,
        }

        class LockRecursionException : System.Exception
        {
            /*0x721d5b4*/ LockRecursionException();
            /*0x721d60c*/ LockRecursionException(string message);
            /*0x721d674*/ LockRecursionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManualResetEvent : System.Threading.EventWaitHandle
        {
            /*0x721d6f4*/ ManualResetEvent(bool initialState);
        }

        class ParameterizedThreadStart : System.MulticastDelegate
        {
            /*0x721d704*/ ParameterizedThreadStart(object object, nint method);
            /*0x721d80c*/ void Invoke(object obj);
        }

        class SemaphoreFullException : System.SystemException
        {
            /*0x721d820*/ SemaphoreFullException();
            /*0x721d86c*/ SemaphoreFullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SendOrPostCallback : System.MulticastDelegate
        {
            /*0x721d874*/ SendOrPostCallback(object object, nint method);
            /*0x721d97c*/ void Invoke(object state);
        }

        class SynchronizationLockException : System.SystemException
        {
            /*0x721d990*/ SynchronizationLockException();
            /*0x721d9ec*/ SynchronizationLockException(string message);
            /*0x721da10*/ SynchronizationLockException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadStart : System.MulticastDelegate
        {
            /*0x721da18*/ ThreadStart(object object, nint method);
            /*0x721dab4*/ void Invoke();
        }

        enum ThreadState
        {
            Running = 0,
            StopRequested = 1,
            SuspendRequested = 2,
            Background = 4,
            Unstarted = 8,
            Stopped = 16,
            WaitSleepJoin = 32,
            Suspended = 64,
            AbortRequested = 128,
            Aborted = 256,
        }

        class ThreadStateException : System.SystemException
        {
            /*0x721dac8*/ ThreadStateException();
            /*0x721db24*/ ThreadStateException(string message);
            /*0x721db48*/ ThreadStateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Timeout
        {
            static /*0x0*/ System.TimeSpan InfiniteTimeSpan;

            static /*0x721db50*/ Timeout();
        }

        class WaitHandleCannotBeOpenedException : System.ApplicationException
        {
            /*0x721dbc0*/ WaitHandleCannotBeOpenedException();
            /*0x721dc1c*/ WaitHandleCannotBeOpenedException(string message);
            /*0x721dc40*/ WaitHandleCannotBeOpenedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct CancellationToken
        {
            static /*0x0*/ System.Action<object> s_actionToActionObjShunt;
            /*0x10*/ System.Threading.CancellationTokenSource _source;

            static /*0x721e7f4*/ CancellationToken();
            static /*0x721dc48*/ System.Threading.CancellationToken get_None();
            static /*0x721e65c*/ bool op_Equality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            static /*0x721e6c0*/ bool op_Inequality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            /*0x721dca8*/ CancellationToken(System.Threading.CancellationTokenSource source);
            /*0x721dcb0*/ CancellationToken(bool canceled);
            /*0x721dc50*/ bool get_IsCancellationRequested();
            /*0x721dc98*/ bool get_CanBeCanceled();
            /*0x721dd4c*/ System.Threading.CancellationTokenRegistration Register(System.Action callback);
            /*0x721df70*/ System.Threading.CancellationTokenRegistration Register(System.Action callback, bool useSynchronizationContext);
            /*0x721e070*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext);
            /*0x721e114*/ System.Threading.CancellationTokenRegistration InternalRegisterWithoutEC(System.Action<object> callback, object state);
            /*0x721de44*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext);
            /*0x721e530*/ bool Equals(System.Threading.CancellationToken other);
            /*0x721e540*/ bool Equals(object other);
            /*0x721e5e8*/ int GetHashCode();
            /*0x721e724*/ void ThrowIfCancellationRequested();
            /*0x721e79c*/ void ThrowOperationCanceledException();

            class <>c
            {
                static /*0x0*/ System.Threading.CancellationToken.<> <>9;

                static /*0x721e8c4*/ <>c();
                /*0x721e92c*/ <>c();
                /*0x721e934*/ void <.cctor>b__26_0(object obj);
            }
        }

        class ManualResetEventSlim : System.IDisposable
        {
            static /*0x0*/ System.Action<object> s_cancellationTokenCallback;
            /*0x10*/ object m_lock;
            /*0x18*/ System.Threading.ManualResetEvent m_eventObj;
            /*0x20*/ int m_combinedState;

            static /*0x721fd0c*/ ManualResetEventSlim();
            static /*0x721fb94*/ void CancellationTokenCallback(object obj);
            static /*0x721ed70*/ int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount);
            static /*0x721ec14*/ int ExtractStatePortion(int state, int mask);
            /*0x721ee98*/ ManualResetEventSlim(bool initialState);
            /*0x721efc4*/ ManualResetEventSlim(bool initialState, int spinCount);
            /*0x721e9a0*/ System.Threading.WaitHandle get_WaitHandle();
            /*0x721ebb8*/ bool get_IsSet();
            /*0x721ec1c*/ void set_IsSet(bool value);
            /*0x721ed14*/ int get_SpinCount();
            /*0x721ed7c*/ void set_SpinCount(int value);
            /*0x721edb0*/ int get_Waiters();
            /*0x721ee0c*/ void set_Waiters(int value);
            /*0x721ef14*/ void Initialize(bool initialState, int spinCount);
            /*0x721f0dc*/ void EnsureLockObjectCreated();
            /*0x721ea3c*/ bool LazyInitializeEvent();
            /*0x721f1d8*/ void Set();
            /*0x721f1e0*/ void Set(bool duringCancellation);
            /*0x721f3e0*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x721fa28*/ void Dispose();
            /*0x721fa94*/ void Dispose(bool disposing);
            /*0x721e9dc*/ void ThrowIfDisposed();
            /*0x721ec3c*/ void UpdateStateAtomically(int newBits, int updateBitsMask);
        }

        struct NativeOverlapped
        {
            /*0x10*/ nint InternalLow;
            /*0x18*/ nint InternalHigh;
            /*0x20*/ int OffsetLow;
            /*0x24*/ int OffsetHigh;
            /*0x28*/ nint EventHandle;
        }

        struct SpinWait
        {
            static /*0x0*/ int SpinCountforSpinBeforeWait;
            /*0x10*/ int _count;

            static /*0x721ffd8*/ SpinWait();
            /*0x721fdac*/ int get_Count();
            /*0x721fdb4*/ bool get_NextSpinWillYield();
            /*0x721fcb4*/ void SpinOnce();
            /*0x721f8ec*/ void SpinOnce(int sleep1Threshold);
            /*0x721fe2c*/ void SpinOnceCore(int sleep1Threshold);
        }

        class PlatformHelper
        {
            static /*0x0*/ int s_processorCount;
            static /*0x4*/ int s_lastProcessorCountRefreshTicks;
            static /*0x8*/ bool IsSingleProcessor;

            static /*0x7220148*/ PlatformHelper();
            static /*0x722005c*/ int get_ProcessorCount();
        }

        class TimeoutHelper
        {
            static /*0x721f8e4*/ uint GetTime();
            static /*0x721f9e4*/ int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout);
        }

        struct CancellationTokenRegistration : System.IEquatable<System.Threading.CancellationTokenRegistration>, System.IDisposable, System.IAsyncDisposable
        {
            /*0x10*/ System.Threading.CancellationCallbackInfo m_callbackInfo;
            /*0x18*/ System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> m_registrationInfo;

            /*0x722019c*/ CancellationTokenRegistration(System.Threading.CancellationCallbackInfo callbackInfo, System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> registrationInfo);
            /*0x72201d4*/ bool Unregister();
            /*0x7220250*/ void Dispose();
            /*0x72203a0*/ bool Equals(object obj);
            /*0x7220430*/ bool Equals(System.Threading.CancellationTokenRegistration other);
            /*0x72204b0*/ int GetHashCode();
            /*0x7220540*/ System.Threading.Tasks.ValueTask DisposeAsync();
        }

        class CancellationTokenSource : System.IDisposable
        {
            static /*0x0*/ System.Threading.CancellationTokenSource s_canceledSource;
            static /*0x8*/ System.Threading.CancellationTokenSource s_neverCanceledSource;
            static /*0x10*/ int s_nLists;
            static /*0x18*/ System.Threading.TimerCallback s_timerCallback;
            /*0x10*/ System.Threading.ManualResetEvent _kernelEvent;
            /*0x18*/ System.Threading.SparselyPopulatedArray<System.Threading.CancellationCallbackInfo> _registeredCallbacksLists;
            /*0x20*/ int _state;
            /*0x24*/ int _threadIDExecutingCallbacks;
            /*0x28*/ bool _disposed;
            /*0x30*/ System.Threading.CancellationCallbackInfo _executingCallback;
            /*0x38*/ System.Threading.Timer _timer;

            static /*0x7221838*/ CancellationTokenSource();
            static /*0x72209d0*/ void TimerCallbackLogic(object obj);
            static /*0x7220bf0*/ void ThrowObjectDisposedException();
            static /*0x722141c*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
            static /*0x722176c*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token);
            /*0x72206c0*/ CancellationTokenSource();
            /*0x721dc7c*/ bool get_IsCancellationRequested();
            /*0x72202e4*/ bool get_IsCancellationCompleted();
            /*0x72205f8*/ bool get_IsDisposed();
            /*0x7220300*/ int get_ThreadIDExecutingCallbacks();
            /*0x7220600*/ void set_ThreadIDExecutingCallbacks(int value);
            /*0x7220624*/ System.Threading.CancellationToken get_Token();
            /*0x72206a8*/ System.Threading.CancellationCallbackInfo get_ExecutingCallback();
            /*0x72206f4*/ void Cancel();
            /*0x7220710*/ void Cancel(bool throwOnFirstException);
            /*0x72207e8*/ void CancelAfter(int millisecondsDelay);
            /*0x7220ae8*/ void Dispose();
            /*0x7220b54*/ void Dispose(bool disposing);
            /*0x7220654*/ void ThrowIfDisposed();
            /*0x721e23c*/ System.Threading.CancellationTokenRegistration InternalRegister(System.Action<object> callback, object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext executionContext);
            /*0x7220738*/ void NotifyCancellation(bool throwOnFirstException);
            /*0x7220ce0*/ void ExecuteCallbackHandlers(bool throwOnFirstException);
            /*0x72212a0*/ void CancellationCallbackCoreWork_OnSyncContext(object obj);
            /*0x72211e4*/ void CancellationCallbackCoreWork(System.Threading.CancellationCallbackCoreWorkArguments args);
            /*0x7220318*/ void WaitForCallbackToComplete(System.Threading.CancellationCallbackInfo callbackInfo);

            class Linked1CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;

                /*0x722152c*/ Linked1CancellationTokenSource(System.Threading.CancellationToken token1);
                /*0x72219c4*/ void Dispose(bool disposing);
            }

            class Linked2CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;
                /*0x58*/ System.Threading.CancellationTokenRegistration _reg2;

                /*0x7221630*/ Linked2CancellationTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
                /*0x72219f8*/ void Dispose(bool disposing);
            }

            class LinkedNCancellationTokenSource : System.Threading.CancellationTokenSource
            {
                static /*0x0*/ System.Action<object> s_linkedTokenCancelDelegate;

                static /*0x7221a34*/ LinkedNCancellationTokenSource();

                class <>c
                {
                    static /*0x0*/ System.Threading.CancellationTokenSource.LinkedNCancellationTokenSource.<> <>9;

                    static /*0x7221b04*/ <>c();
                    /*0x7221b6c*/ <>c();
                    /*0x7221b74*/ void <.cctor>b__4_0(object s);
                }
            }
        }

        struct CancellationCallbackCoreWorkArguments
        {
            /*0x10*/ System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> _currArrayFragment;
            /*0x18*/ int _currArrayIndex;

            /*0x72211bc*/ CancellationCallbackCoreWorkArguments(System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> currArrayFragment, int currArrayIndex);
        }

        class CancellationCallbackInfo
        {
            static /*0x0*/ System.Threading.ContextCallback s_executionContextCallback;
            /*0x10*/ System.Action<object> Callback;
            /*0x18*/ object StateForCallback;
            /*0x20*/ System.Threading.ExecutionContext TargetExecutionContext;
            /*0x28*/ System.Threading.CancellationTokenSource CancellationTokenSource;

            static /*0x7221de0*/ void ExecutionContextCallback(object obj);
            /*0x7220c40*/ CancellationCallbackInfo(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource);
            /*0x7221318*/ void ExecuteCallback();

            class WithSyncContext : System.Threading.CancellationCallbackInfo
            {
                /*0x30*/ System.Threading.SynchronizationContext TargetSyncContext;

                /*0x7220cb4*/ WithSyncContext(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource, System.Threading.SynchronizationContext targetSyncContext);
            }
        }

        class SparselyPopulatedArray<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _head;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _tail;

            /*0x3815ed0*/ SparselyPopulatedArray(int initialSize);
            /*0x38148bc*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Tail();
            /*0x3910ae8*/ System.Threading.SparselyPopulatedArrayAddInfo<T> Add(T element);
        }

        struct SparselyPopulatedArrayAddInfo<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _source;
            /*0x0*/ int _index;

            /*0x381678c*/ SparselyPopulatedArrayAddInfo(System.Threading.SparselyPopulatedArrayFragment<T> source, int index);
            /*0x38148bc*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Source();
            /*0x3814574*/ int get_Index();
        }

        class SparselyPopulatedArrayFragment<T>
        {
            /*0x0*/ T[] _elements;
            /*0x0*/ int _freeCount;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _next;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _prev;

            /*0x3815ed0*/ SparselyPopulatedArrayFragment(int size);
            /*0x3816044*/ SparselyPopulatedArrayFragment(int size, System.Threading.SparselyPopulatedArrayFragment<T> prev);
            /*0x3910ae8*/ T get_Item(int index);
            /*0x3814574*/ int get_Length();
            /*0x38148bc*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Prev();
            /*0x3910ae8*/ T SafeAtomicRemove(int index, T expectedElement);
        }

        struct LockHolder : System.IDisposable
        {
            /*0x10*/ System.Threading.Lock _lock;

            static /*0x7221e6c*/ System.Threading.LockHolder Hold(System.Threading.Lock l);
            /*0x7221eb4*/ void Dispose();
        }

        class Lock
        {
            /*0x10*/ object _lock;

            /*0x7221ee0*/ Lock();
            /*0x7221eac*/ void Acquire();
            /*0x7221ed0*/ void Release();
        }

        class SemaphoreSlim : System.IDisposable
        {
            static /*0x0*/ System.Threading.Tasks.Task<bool> s_trueTask;
            static /*0x8*/ System.Threading.Tasks.Task<bool> s_falseTask;
            static /*0x10*/ System.Action<object> s_cancellationTokenCanceledEventHandler;
            /*0x10*/ int m_currentCount;
            /*0x14*/ int m_maxCount;
            /*0x18*/ int m_waitCount;
            /*0x20*/ object m_lockObj;
            /*0x28*/ System.Threading.ManualResetEvent m_waitHandle;
            /*0x30*/ System.Threading.SemaphoreSlim.TaskNode m_asyncHead;
            /*0x38*/ System.Threading.SemaphoreSlim.TaskNode m_asyncTail;

            static /*0x7223390*/ SemaphoreSlim();
            static /*0x7223168*/ void QueueWaiterTask(System.Threading.SemaphoreSlim.TaskNode waiterTask);
            static /*0x722327c*/ void CancellationTokenCanceledEventHandler(object obj);
            static /*0x72220dc*/ string GetResourceString(string str);
            /*0x7221f4c*/ SemaphoreSlim(int initialCount, int maxCount);
            /*0x72220e4*/ void Wait();
            /*0x72220f0*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x72229b4*/ bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken);
            /*0x7222adc*/ System.Threading.Tasks.Task WaitAsync();
            /*0x7222690*/ System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x7222ae8*/ System.Threading.SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter();
            /*0x7222d40*/ bool RemoveAsyncWaiter(System.Threading.SemaphoreSlim.TaskNode task);
            /*0x7222b98*/ System.Threading.Tasks.Task<bool> WaitUntilCountOrTimeoutAsync(System.Threading.SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x7222e28*/ int Release();
            /*0x7222e30*/ int Release(int releaseCount);
            /*0x7223174*/ void Dispose();
            /*0x72231e0*/ void Dispose(bool disposing);
            /*0x7222614*/ void CheckDispose();

            class TaskNode : System.Threading.Tasks.Task<bool>, System.Threading.IThreadPoolWorkItem
            {
                /*0x58*/ System.Threading.SemaphoreSlim.TaskNode Prev;
                /*0x60*/ System.Threading.SemaphoreSlim.TaskNode Next;

                /*0x7222cf8*/ TaskNode();
                /*0x72234d0*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x722351c*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
            }

            struct <WaitUntilCountOrTimeoutAsync>d__32 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<bool> <>t__builder;
                /*0x30*/ System.Threading.CancellationToken cancellationToken;
                /*0x38*/ System.Threading.SemaphoreSlim.TaskNode asyncWaiter;
                /*0x40*/ int millisecondsTimeout;
                /*0x48*/ System.Threading.SemaphoreSlim <>4__this;
                /*0x50*/ System.Threading.CancellationTokenSource <cts>5__2;
                /*0x58*/ object <>7__wrap2;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1;
                /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2;

                /*0x7223520*/ void MoveNext();
                /*0x7223dac*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        struct SpinLock
        {
            static /*0x0*/ int MAXIMUM_WAITERS;
            /*0x10*/ int m_owner;

            static /*0x7224b94*/ SpinLock();
            /*0x7223e28*/ SpinLock(bool enableThreadOwnerTracking);
            /*0x7223e60*/ void Enter(ref bool lockTaken);
            /*0x7224438*/ void TryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0x7223f64*/ void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0x72246e0*/ void DecrementWaiters();
            /*0x7224574*/ void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken);
            /*0x72248b0*/ void Exit();
            /*0x7224a3c*/ void Exit(bool useMemoryBarrier);
            /*0x722492c*/ void ExitSlowPath(bool useMemoryBarrier);
            /*0x7224ac4*/ bool get_IsHeldByCurrentThread();
            /*0x7224558*/ bool get_IsThreadOwnerTrackingEnabled();

            class SystemThreading_SpinLockDebugView
            {
            }
        }

        class ThreadLocal<T> : System.IDisposable
        {
            static /*0x0*/ System.Threading.ThreadLocal.IdManager<T> s_idManager;
            [ThreadStatic] static System.Threading.ThreadLocal.LinkedSlotVolatile<T> ts_slotArray;
            [ThreadStatic] static System.Threading.ThreadLocal.FinalizationHelper<T> ts_finalizationHelper;
            /*0x0*/ System.Func<T> m_valueFactory;
            /*0x0*/ int m_idComplement;
            /*0x0*/ bool m_initialized;
            /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> m_linkedSlot;
            /*0x0*/ bool m_trackAllValues;

            static /*0x383e7a0*/ ThreadLocal();
            static /*0x382d234*/ int GetNewTableSize(int minSize);
            /*0x38159dc*/ ThreadLocal();
            /*0x3816710*/ ThreadLocal(System.Func<T> valueFactory);
            void Initialize(System.Func<T> valueFactory, bool trackAllValues);
            /*0x38159dc*/ void Finalize();
            /*0x38159dc*/ void Dispose();
            /*0x3815cc4*/ void Dispose(bool disposing);
            /*0x38148bc*/ string ToString();
            /*0x3910ae8*/ T get_Value();
            /*0x3910ae8*/ void set_Value(T value);
            /*0x3910ae8*/ T GetValueSlow();
            /*0x3910ae8*/ void SetValueSlow(T value, System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray);
            /*0x3910ae8*/ void CreateLinkedSlot(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray, int id, T value);
            /*0x3813ffc*/ bool get_IsValueCreated();
            /*0x381678c*/ void GrowTable(ref System.Threading.ThreadLocal.LinkedSlotVolatile<T> table, int minLength);

            struct LinkedSlotVolatile<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Value;
            }

            class LinkedSlot<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Next;
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Previous;
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlotVolatile<T> SlotArray;
                /*0x0*/ T Value;

                /*0x3816710*/ LinkedSlot(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray);
            }

            class IdManager<T>
            {
                /*0x0*/ int m_nextIdToTry;
                /*0x0*/ System.Collections.Generic.List<bool> m_freeIds;

                /*0x38159dc*/ IdManager();
                /*0x3814574*/ int GetId();
                /*0x3815ed0*/ void ReturnId(int id);
            }

            class FinalizationHelper<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlotVolatile<T> SlotArray;
                /*0x0*/ bool m_trackAllValues;

                FinalizationHelper(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray, bool trackAllValues);
                /*0x38159dc*/ void Finalize();
            }
        }

        class SystemThreading_ThreadLocalDebugView<T>
        {
        }

        class EventWaitHandle : System.Threading.WaitHandle
        {
            /*0x721d530*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode);
            /*0x7224be0*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name);
            /*0x7222a80*/ bool Reset();
            /*0x721f17c*/ bool Set();
        }

        class ContextCallback : System.MulticastDelegate
        {
            /*0x7221bf8*/ ContextCallback(object object, nint method);
            /*0x7224e8c*/ void Invoke(object state);
        }

        class ContextCallback<TState> : System.MulticastDelegate
        {
            ContextCallback(object object, nint method);
            /*0x3816710*/ void Invoke(ref TState state);
        }

        struct ExecutionContextSwitcher
        {
            /*0x10*/ System.Threading.ExecutionContext.Reader outerEC;
            /*0x18*/ bool outerECBelongsToScope;
            /*0x20*/ object hecsw;
            /*0x28*/ System.Threading.Thread thread;

            /*0x7224ea0*/ bool UndoNoThrow();
            /*0x7224f28*/ void Undo();
        }

        struct AsyncFlowControl : System.IDisposable
        {
            /*0x10*/ bool useEC;
            /*0x18*/ System.Threading.ExecutionContext _ec;
            /*0x20*/ System.Threading.Thread _thread;

            /*0x72254f0*/ void Setup();
            /*0x722560c*/ void Dispose();
            /*0x7225610*/ void Undo();
            /*0x722579c*/ int GetHashCode();
            /*0x722583c*/ bool Equals(object obj);
            /*0x72258d8*/ bool Equals(System.Threading.AsyncFlowControl obj);
        }

        class ExecutionContext : System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Threading.ExecutionContext s_dummyDefaultEC;
            static /*0x8*/ System.Threading.ExecutionContext Default;
            /*0x10*/ System.Threading.SynchronizationContext _syncContext;
            /*0x18*/ System.Threading.SynchronizationContext _syncContextNoFlow;
            /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext;
            /*0x28*/ System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext;
            /*0x30*/ System.Threading.ExecutionContext.Flags _flags;
            /*0x38*/ System.Collections.Generic.Dictionary<System.Threading.IAsyncLocal, object> _localValues;
            /*0x40*/ System.Collections.Generic.List<System.Threading.IAsyncLocal> _localChangeNotifications;

            static /*0x7226c94*/ ExecutionContext();
            static /*0x722598c*/ void SetLocalValue(System.Threading.IAsyncLocal local, object newValue, bool needChangeNotifications);
            static /*0x7225038*/ void OnAsyncLocalContextChanged(System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current);
            static /*0x7221d00*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0x7225d9c*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0x7226018*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0x7225e18*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0x3844b58*/ void RunInternal<TState>(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback<TState> callback, ref TState state);
            static void RunInternal<TState>(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback<TState> callback, ref TState state, bool preserveSyncCtx);
            static /*0x7226360*/ void EstablishCopyOnWriteScope(ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0x722612c*/ void EstablishCopyOnWriteScope(System.Threading.Thread currentThread, bool knownNullWindowsIdentity, ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0x7226198*/ System.Threading.ExecutionContextSwitcher SetExecutionContext(System.Threading.ExecutionContext executionContext, bool preserveSyncCtx);
            static /*0x7226704*/ System.Threading.AsyncFlowControl SuppressFlow();
            static /*0x7225714*/ void RestoreFlow();
            static /*0x72267dc*/ bool IsFlowSuppressed();
            static /*0x721e1ec*/ System.Threading.ExecutionContext Capture();
            static /*0x72269f8*/ System.Threading.ExecutionContext FastCapture();
            static /*0x722681c*/ System.Threading.ExecutionContext Capture(ref System.Threading.StackCrawlMark stackMark, System.Threading.ExecutionContext.CaptureOptions options);
            /*0x7225954*/ ExecutionContext();
            /*0x722595c*/ ExecutionContext(bool isPreAllocatedDefault);
            /*0x7226b7c*/ ExecutionContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7225918*/ bool get_isNewCapture();
            /*0x722592c*/ void set_isNewCapture(bool value);
            /*0x722593c*/ bool get_isFlowSuppressed();
            /*0x72255ec*/ void set_isFlowSuppressed(bool value);
            /*0x7225948*/ bool get_IsPreAllocatedDefault();
            /*0x7225c88*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
            /*0x7225cf8*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
            /*0x7225d00*/ System.Runtime.Remoting.Messaging.IllogicalCallContext get_IllogicalCallContext();
            /*0x7225d70*/ void set_IllogicalCallContext(System.Runtime.Remoting.Messaging.IllogicalCallContext value);
            /*0x7225d78*/ System.Threading.SynchronizationContext get_SynchronizationContext();
            /*0x7225d80*/ void set_SynchronizationContext(System.Threading.SynchronizationContext value);
            /*0x7225d88*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
            /*0x7225d90*/ void set_SynchronizationContextNoFlow(System.Threading.SynchronizationContext value);
            /*0x7225d98*/ void Dispose();
            /*0x722644c*/ System.Threading.ExecutionContext CreateCopy();
            /*0x72265c4*/ System.Threading.ExecutionContext CreateMutableCopy();
            /*0x7226a7c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x72260b4*/ bool IsDefaultFTContext(bool ignoreSyncCtx);

            enum Flags
            {
                None = 0,
                IsNewCapture = 1,
                IsFlowSuppressed = 2,
                IsPreAllocatedDefault = 4,
            }

            struct Reader
            {
                /*0x10*/ System.Threading.ExecutionContext m_ec;

                /*0x7226d2c*/ Reader(System.Threading.ExecutionContext ec);
                /*0x7226d34*/ System.Threading.ExecutionContext DangerousGetRawExecutionContext();
                /*0x7226088*/ bool get_IsNull();
                /*0x7226098*/ bool IsDefaultFTContext(bool ignoreSyncCtx);
                /*0x7226d3c*/ bool get_IsFlowSuppressed();
                /*0x72263e8*/ System.Threading.SynchronizationContext get_SynchronizationContext();
                /*0x7226400*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
                /*0x7226a48*/ System.Runtime.Remoting.Messaging.LogicalCallContext.Reader get_LogicalCallContext();
                /*0x7226104*/ bool HasSameLocalValues(System.Threading.ExecutionContext other);
            }

            enum CaptureOptions
            {
                None = 0,
                IgnoreSyncCtx = 1,
                OptimizeDefaultCase = 2,
            }
        }

        class Monitor
        {
            static /*0x7221ed8*/ void Enter(object obj);
            static /*0x721f15c*/ void Enter(object obj, ref bool lockTaken);
            static /*0x7226d58*/ void ThrowLockTakenException();
            static /*0x7221edc*/ void Exit(object obj);
            static /*0x7226dd0*/ void TryEnter(object obj, ref bool lockTaken);
            static /*0x7226e84*/ bool Wait(object obj, int millisecondsTimeout, bool exitContext);
            static /*0x721fa20*/ bool Wait(object obj, int millisecondsTimeout);
            static /*0x7223114*/ void Pulse(object obj);
            static /*0x721f38c*/ void PulseAll(object obj);
            static /*0x7227050*/ bool Monitor_test_synchronised(object obj);
            static /*0x7227054*/ void Monitor_pulse(object obj);
            static /*0x7226f90*/ void ObjPulse(object obj);
            static /*0x7227058*/ void Monitor_pulse_all(object obj);
            static /*0x7226ff0*/ void ObjPulseAll(object obj);
            static /*0x722705c*/ bool Monitor_wait(object obj, int ms);
            static /*0x7226ee0*/ bool ObjWait(bool exitContext, int millisecondsTimeout, object obj);
            static /*0x7227060*/ void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken);
            static /*0x7226df0*/ void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken);
            static /*0x7226dc4*/ void ReliableEnter(object obj, ref bool lockTaken);
        }

        enum SynchronizationContextProperties
        {
            None = 0,
            RequireWaitNotification = 1,
        }

        class SynchronizationContext
        {
            /*0x10*/ System.Threading.SynchronizationContextProperties _props;

            static /*0x7227194*/ int WaitHelper(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            static /*0x722721c*/ void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext);
            static /*0x721e1b0*/ System.Threading.SynchronizationContext get_Current();
            static /*0x72272b0*/ System.Threading.SynchronizationContext get_CurrentNoFlow();
            static /*0x7227264*/ System.Threading.SynchronizationContext GetThreadLocalContext();
            static /*0x72274a0*/ System.Threading.SynchronizationContext get_CurrentExplicit();
            /*0x7227064*/ SynchronizationContext();
            /*0x722706c*/ bool IsWaitNotificationRequired();
            /*0x7227078*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0x72270a0*/ void Post(System.Threading.SendOrPostCallback d, object state);
            /*0x7227128*/ void OperationStarted();
            /*0x722712c*/ void OperationCompleted();
            /*0x7227130*/ int Wait(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            /*0x722744c*/ System.Threading.SynchronizationContext CreateCopy();
        }

        class OSSpecificSynchronizationContext : System.Threading.SynchronizationContext
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Threading.OSSpecificSynchronizationContext> s_ContextCache;
            /*0x18*/ object m_OSSynchronizationContext;

            static /*0x72279a4*/ OSSpecificSynchronizationContext();
            static /*0x72272ec*/ System.Threading.OSSpecificSynchronizationContext Get();
            static /*0x72274a4*/ void InvocationEntry(nint arg);
            static /*0x7227698*/ object GetOSContext();
            static /*0x7227978*/ void PostInternal(object osSynchronizationContext, nint callback, nint arg);
            /*0x7227668*/ OSSpecificSynchronizationContext(object osContext);
            /*0x722769c*/ System.Threading.SynchronizationContext CreateCopy();
            /*0x7227708*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0x7227740*/ void Post(System.Threading.SendOrPostCallback d, object state);

            class InvocationEntryDelegate : System.MulticastDelegate
            {
                /*0x7227894*/ InvocationEntryDelegate(object object, nint method);
                /*0x7227a3c*/ void Invoke(nint arg);
            }

            class InvocationContext
            {
                /*0x10*/ System.Threading.SendOrPostCallback m_Delegate;
                /*0x18*/ object m_State;

                /*0x7227934*/ InvocationContext(System.Threading.SendOrPostCallback d, object state);
                /*0x722797c*/ void Invoke();
            }

            class <>c
            {
                static /*0x0*/ System.Threading.OSSpecificSynchronizationContext.<> <>9;
                static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<object, System.Threading.OSSpecificSynchronizationContext> <>9__3_0;

                static /*0x7227a50*/ <>c();
                /*0x7227ab8*/ <>c();
                /*0x7227ac0*/ System.Threading.OSSpecificSynchronizationContext <Get>b__3_0(object _osContext);
            }
        }

        class ThreadHelper
        {
            static /*0x0*/ System.Threading.ContextCallback _ccb;
            /*0x10*/ System.Delegate _start;
            /*0x18*/ object _startArg;
            /*0x20*/ System.Threading.ExecutionContext _executionContext;

            static /*0x7227e60*/ ThreadHelper();
            static /*0x7227b60*/ void ThreadStart_Context(object state);
            /*0x7227b28*/ ThreadHelper(System.Delegate start);
            /*0x7227b58*/ void SetExecutionContextHelper(System.Threading.ExecutionContext ec);
            /*0x7227c5c*/ void ThreadStart(object obj);
            /*0x7227d6c*/ void ThreadStart();
        }

        class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            static /*0x0*/ System.LocalDataStoreMgr s_LocalDataStoreMgr;
            static /*0x8*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture;
            static /*0x10*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture;
            [ThreadStatic] static System.LocalDataStoreHolder s_LocalDataStore;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentCulture;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentUICulture;
            [ThreadStatic] static System.Threading.Thread current_thread;
            /*0x10*/ System.Threading.InternalThread internal_thread;
            /*0x18*/ object m_ThreadStartArg;
            /*0x20*/ object pending_exception;
            /*0x28*/ System.MulticastDelegate m_Delegate;
            /*0x30*/ System.Threading.ExecutionContext m_ExecutionContext;
            /*0x38*/ bool m_ExecutionContextBelongsToOuterScope;
            /*0x40*/ System.Security.Principal.IPrincipal principal;
            /*0x48*/ int principal_version;

            static /*0x7227efc*/ void AsyncLocalSetCurrentCulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0x72284ac*/ void SleepInternal(int millisecondsTimeout);
            static /*0x72247ac*/ void Sleep(int millisecondsTimeout);
            static /*0x72284b0*/ void Sleep(System.TimeSpan timeout);
            static /*0x722859c*/ bool YieldInternal();
            static /*0x7224824*/ bool Yield();
            static /*0x7228a34*/ void nativeInitCultureAccessors();
            static /*0x7228af0*/ void MemoryBarrier();
            static /*0x7228b1c*/ System.Runtime.Remoting.Contexts.Context get_CurrentContext();
            static /*0x7228b24*/ void GetCurrentThread_icall(ref System.Threading.Thread thread);
            static /*0x7228b28*/ System.Threading.Thread GetCurrentThread();
            static /*0x7224828*/ System.Threading.Thread get_CurrentThread();
            static /*0x7228b44*/ int get_CurrentThreadId();
            static /*0x7228b68*/ int GetDomainID();
            static /*0x7228cb0*/ void SetName_icall(System.Threading.InternalThread thread, char* name, int nameLength);
            static /*0x7228cb4*/ void SetName_internal(System.Threading.InternalThread thread, string name);
            static /*0x7228d24*/ void SpinWait_nop();
            static /*0x7224784*/ void SpinWait(int iterations);
            static /*0x7228ca8*/ void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set);
            static /*0x7228cac*/ void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr);
            static /*0x7228bec*/ System.Threading.ThreadState GetState(System.Threading.InternalThread thread);
            static /*0x7228d28*/ object VolatileRead(ref object address);
            static /*0x7228d2c*/ int SystemMaxStackStize();
            static /*0x72285a0*/ int GetProcessDefaultStackSize(int maxStackSize);
            static /*0x7223f14*/ void BeginCriticalRegion();
            static /*0x7224508*/ void EndCriticalRegion();
            /*0x7227f68*/ Thread(System.Threading.ThreadStart start);
            /*0x7228108*/ Thread(System.Threading.ParameterizedThreadStart start);
            /*0x7228184*/ Thread(System.Threading.ParameterizedThreadStart start, int maxStackSize);
            /*0x722826c*/ void Start();
            /*0x7228354*/ void Start(object parameter);
            /*0x7228288*/ void Start(ref System.Threading.StackCrawlMark stackMark);
            /*0x7224fe4*/ System.Threading.ExecutionContext.Reader GetExecutionContextReader();
            /*0x72263c8*/ bool get_ExecutionContextBelongsToCurrentScope();
            /*0x72263d8*/ void set_ExecutionContextBelongsToCurrentScope(bool value);
            /*0x7225558*/ System.Threading.ExecutionContext GetMutableExecutionContext();
            /*0x7226418*/ void SetExecutionContext(System.Threading.ExecutionContext value, bool belongsToCurrentScope);
            /*0x7225004*/ void SetExecutionContext(System.Threading.ExecutionContext.Reader value, bool belongsToCurrentScope);
            /*0x72284a0*/ bool JoinInternal(int millisecondsTimeout);
            /*0x72284a4*/ void Join();
            /*0x7227fe4*/ void SetStartHelper(System.Delegate start, int maxStackSize);
            /*0x7228698*/ System.Globalization.CultureInfo get_CurrentUICulture();
            /*0x72286c4*/ System.Globalization.CultureInfo GetCurrentUICultureNoAppX();
            /*0x7228770*/ System.Globalization.CultureInfo get_CurrentCulture();
            /*0x7228848*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
            /*0x722879c*/ System.Globalization.CultureInfo GetCurrentCultureNoAppX();
            /*0x7228af4*/ void ConstructInternalThread();
            /*0x7228af8*/ System.Threading.InternalThread get_Internal();
            /*0x7228b6c*/ bool Thread_internal(System.MulticastDelegate start);
            /*0x7228b70*/ void Finalize();
            /*0x7228b78*/ bool get_IsThreadPoolThread();
            /*0x7228b7c*/ bool get_IsThreadPoolThreadInternal();
            /*0x7228ba8*/ bool get_IsAlive();
            /*0x7228bf0*/ void set_IsBackground(bool value);
            /*0x7228cf0*/ void set_Name(string value);
            /*0x7228430*/ void StartInternal(object principal, ref System.Threading.StackCrawlMark stackMark);
            /*0x722864c*/ void SetStart(System.MulticastDelegate start, int maxStackSize);
            /*0x7224884*/ int get_ManagedThreadId();
            /*0x7228d30*/ int GetHashCode();
            /*0x7228c38*/ System.Threading.ThreadState ValidateThreadState();
        }

        enum StackCrawlMark
        {
            LookForMe = 0,
            LookForMyCaller = 1,
            LookForMyCallersCaller = 2,
            LookForThread = 3,
        }

        class ThreadAbortException : System.SystemException
        {
            /*0x7228fa8*/ ThreadAbortException();
            /*0x7229024*/ ThreadAbortException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadInterruptedException : System.SystemException
        {
            /*0x722902c*/ ThreadInterruptedException();
            /*0x72290a8*/ ThreadInterruptedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        interface IThreadPoolWorkItem
        {
            /*0x38159dc*/ void ExecuteWorkItem();
            /*0x3816710*/ void MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class WaitCallback : System.MulticastDelegate
        {
            /*0x72290b0*/ WaitCallback(object object, nint method);
            /*0x72291b8*/ void Invoke(object state);
        }

        class WaitOrTimerCallback : System.MulticastDelegate
        {
            /*0x72291cc*/ WaitOrTimerCallback(object object, nint method);
            /*0x72292d8*/ void Invoke(object state, bool timedOut);
        }

        class ThreadPoolGlobals
        {
            static /*0x0*/ int processorCount;
            static /*0x4*/ bool vmTpInitialized;
            static /*0x5*/ bool enableWorkerTracking;
            static /*0x8*/ System.Threading.ThreadPoolWorkQueue workQueue;

            static /*0x72292f0*/ ThreadPoolGlobals();
        }

        class ThreadPoolWorkQueue
        {
            static /*0x0*/ System.Threading.ThreadPoolWorkQueue.SparseArray<System.Threading.ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueHead;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueTail;
            /*0x20*/ int numOutstandingThreadRequests;

            static /*0x722aca4*/ ThreadPoolWorkQueue();
            static /*0x722a83c*/ bool Dispatch();
            /*0x7229374*/ ThreadPoolWorkQueue();
            /*0x7229458*/ System.Threading.ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue();
            /*0x7229620*/ void EnsureThreadRequested();
            /*0x72296c0*/ void MarkThreadRequestSatisfied();
            /*0x7229708*/ void Enqueue(System.Threading.IThreadPoolWorkItem callback, bool forceGlobal);
            /*0x7229df0*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem callback);
            /*0x722a198*/ void Dequeue(System.Threading.ThreadPoolWorkQueueThreadLocals tl, ref System.Threading.IThreadPoolWorkItem callback, ref bool missedSteal);

            class SparseArray<T>
            {
                /*0x0*/ T[] m_array;

                /*0x3815ed0*/ SparseArray(int initialSize);
                /*0x38148bc*/ T[] get_Current();
                /*0x3910ae8*/ int Add(T e);
                /*0x3910ae8*/ void Remove(T e);
            }

            class WorkStealingQueue
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] m_array;
                /*0x18*/ int m_mask;
                /*0x1c*/ int m_headIndex;
                /*0x20*/ int m_tailIndex;
                /*0x24*/ System.Threading.SpinLock m_foreignLock;

                /*0x722b028*/ WorkStealingQueue();
                /*0x7229838*/ void LocalPush(System.Threading.IThreadPoolWorkItem obj);
                /*0x7229e60*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem obj);
                /*0x722a36c*/ bool LocalPop(ref System.Threading.IThreadPoolWorkItem obj);
                /*0x722a834*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal);
                /*0x722ad44*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout);
            }

            class QueueSegment
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] nodes;
                /*0x18*/ int indexes;
                /*0x20*/ System.Threading.ThreadPoolWorkQueue.QueueSegment Next;

                /*0x72293f4*/ QueueSegment();
                /*0x722b0c8*/ void GetIndexes(ref int upper, ref int lower);
                /*0x722b0fc*/ bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower);
                /*0x722a7f0*/ bool IsUsedUp();
                /*0x7229d2c*/ bool TryEnqueue(System.Threading.IThreadPoolWorkItem node);
                /*0x722a694*/ bool TryDequeue(ref System.Threading.IThreadPoolWorkItem node);
            }
        }

        class ThreadPoolWorkQueueThreadLocals
        {
            [ThreadStatic] static System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue workQueue;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue;
            /*0x20*/ System.Random random;

            /*0x72294e4*/ ThreadPoolWorkQueueThreadLocals(System.Threading.ThreadPoolWorkQueue tpq);
            /*0x722b164*/ void CleanUp();
            /*0x722b230*/ void Finalize();
        }

        class _ThreadPoolWaitCallback
        {
            static /*0x722b2fc*/ bool PerformWaitCallback();
        }

        class QueueUserWorkItemCallback : System.Threading.IThreadPoolWorkItem
        {
            static /*0x0*/ System.Threading.ContextCallback ccb;
            /*0x10*/ System.Threading.WaitCallback callback;
            /*0x18*/ System.Threading.ExecutionContext context;
            /*0x20*/ object state;

            static /*0x722b594*/ QueueUserWorkItemCallback();
            static /*0x722b51c*/ void WaitCallback_Context(object state);
            /*0x722b348*/ QueueUserWorkItemCallback(System.Threading.WaitCallback waitCallback, object stateObj, bool compressStack, ref System.Threading.StackCrawlMark stackMark);
            /*0x722b434*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
            /*0x722b518*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class ThreadPool
        {
            static /*0x722b634*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, bool compressStack);
            static /*0x722b93c*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            static /*0x722b8ec*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x722bb84*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack);
            static /*0x722b914*/ bool UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x3910ae8*/ bool QueueUserWorkItem<TState>(System.Action<TState> callBack, TState state, bool preferLocal);
            static /*0x3910ae8*/ bool UnsafeQueueUserWorkItem<TState>(System.Action<TState> callBack, TState state, bool preferLocal);
            static /*0x722ba6c*/ bool QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, object state, ref System.Threading.StackCrawlMark stackMark, bool compressStack, bool forceGlobal);
            static /*0x722bc44*/ void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, bool forceGlobal);
            static /*0x722bcc0*/ bool TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem);
            static /*0x72296bc*/ bool RequestWorkerThread();
            static /*0x722bbb0*/ void EnsureVMInitialized();
            static /*0x722aca0*/ bool NotifyWorkItemComplete();
            static /*0x722bd60*/ void ReportThreadStatus(bool isWorking);
            static /*0x722bd68*/ void NotifyWorkItemProgress();
            static /*0x722bd78*/ void NotifyWorkItemProgressNative();
            static /*0x7229dec*/ void NotifyWorkItemQueued();
            static /*0x722bd5c*/ void InitializeVMTp(ref bool enableWorkerTracking);
            static /*0x722bd7c*/ bool get_IsThreadPoolThread();

            class <>c__DisplayClass17_0<TState>
            {
                /*0x0*/ System.Action<TState> callBack;

                /*0x38159dc*/ <>c__DisplayClass17_0();
                /*0x3816710*/ void <QueueUserWorkItem>b__0(object x);
            }

            class <>c__DisplayClass18_0<TState>
            {
                /*0x0*/ System.Action<TState> callBack;

                /*0x38159dc*/ <>c__DisplayClass18_0();
                /*0x3816710*/ void <UnsafeQueueUserWorkItem>b__0(object x);
            }
        }

        class WaitHandle : System.MarshalByRefObject, System.IDisposable
        {
            static int WaitTimeout = 258;
            static int MAX_WAITHANDLES = 64;
            static int WAIT_OBJECT_0 = 0;
            static int WAIT_ABANDONED = 128;
            static int WAIT_FAILED = 2147483647;
            static int ERROR_TOO_MANY_POSTS = 298;
            static int ERROR_NOT_OWNED_BY_CALLER = 299;
            static int MaxWaitHandles = 64;
            static /*0x0*/ nint InvalidHandle;
            /*0x18*/ nint waitHandle;
            /*0x20*/ Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle;
            /*0x28*/ bool hasThreadAffinity;

            static /*0x722cec0*/ WaitHandle();
            static /*0x722c25c*/ bool InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x722c544*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);
            static /*0x722cc64*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext);
            static /*0x722c50c*/ void ThrowAbandonedMutexException();
            static /*0x722cc18*/ void ThrowAbandonedMutexException(int location, System.Threading.WaitHandle handle);
            static /*0x722c348*/ int WaitOneNative(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x722c844*/ int WaitMultiple(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll);
            static /*0x722ceb8*/ int Wait_internal(nint* handles, int numHandles, bool waitAll, int ms);
            /*0x722bd9c*/ WaitHandle();
            /*0x722bdb8*/ void Init();
            /*0x722be30*/ void set_Handle(nint value);
            /*0x722bf28*/ Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle();
            /*0x722bfe0*/ void SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            /*0x722c020*/ bool WaitOne(int millisecondsTimeout, bool exitContext);
            /*0x722c120*/ bool WaitOne(System.TimeSpan timeout, bool exitContext);
            /*0x722c228*/ bool WaitOne();
            /*0x722c23c*/ bool WaitOne(int millisecondsTimeout);
            /*0x722c24c*/ bool WaitOne(System.TimeSpan timeout);
            /*0x722c0a0*/ bool WaitOne(long timeout, bool exitContext);
            /*0x722cd90*/ void Close();
            /*0x722ce00*/ void Dispose(bool explicitDisposing);
            /*0x722ce48*/ void Dispose();
        }

        class Interlocked
        {
            static /*0x72296b8*/ int CompareExchange(ref int location1, int value, int comparand);
            static /*0x722cf14*/ int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded);
            static /*0x722cf18*/ void CompareExchange(ref object location1, ref object value, ref object comparand, ref object result);
            static /*0x722cf1c*/ object CompareExchange(ref object location1, object value, object comparand);
            static /*0x722cf48*/ float CompareExchange(ref float location1, float value, float comparand);
            static /*0x722cf4c*/ int Decrement(ref int location);
            static /*0x722cf50*/ int Increment(ref int location);
            static /*0x722cf54*/ long Increment(ref long location);
            static /*0x722ad40*/ int Exchange(ref int location1, int value);
            static /*0x722cf58*/ void Exchange(ref object location1, ref object value, ref object result);
            static /*0x722cf5c*/ object Exchange(ref object location1, object value);
            static /*0x722cf80*/ float Exchange(ref float location1, float value);
            static /*0x722cf84*/ long CompareExchange(ref long location1, long value, long comparand);
            static /*0x722cf88*/ nint CompareExchange(ref nint location1, nint value, nint comparand);
            static /*0x722cf8c*/ double CompareExchange(ref double location1, double value, double comparand);
            static /*0x3910ae8*/ T CompareExchange<T>(ref T location1, T value, T comparand);
            static /*0x722cf90*/ long Exchange(ref long location1, long value);
            static /*0x722cf94*/ nint Exchange(ref nint location1, nint value);
            static /*0x722cf98*/ double Exchange(ref double location1, double value);
            static /*0x3910ae8*/ T Exchange<T>(ref T location1, T value);
            static /*0x722cf9c*/ long Read(ref long location);
            static /*0x722cfa0*/ int Add(ref int location1, int value);
            static /*0x722cfa4*/ long Add(ref long location1, long value);
            static /*0x722cfa8*/ void MemoryBarrier();
        }

        class LockQueue
        {
            /*0x10*/ System.Threading.ReaderWriterLock rwlock;
            /*0x18*/ int lockCount;

            /*0x722cfb0*/ LockQueue(System.Threading.ReaderWriterLock rwlock);
            /*0x722cfe0*/ bool Wait(int timeout);
            /*0x722d184*/ bool get_IsEmpty();
            /*0x722d244*/ void Pulse();
        }

        class Mutex : System.Threading.WaitHandle
        {
        }

        class NativeEventCalls
        {
            static /*0x722d2fc*/ nint CreateEvent_internal(bool manual, bool initial, string name, ref int errorCode);
            static /*0x722d350*/ nint CreateEvent_icall(bool manual, bool initial, char* name, int name_length, ref int errorCode);
            static /*0x722d35c*/ bool SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x722d44c*/ bool SetEvent_internal(nint handle);
            static /*0x722d450*/ bool ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x722d540*/ bool ResetEvent_internal(nint handle);
            static /*0x722d544*/ void CloseEvent_internal(nint handle);
        }

        class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int seq_num;
            /*0x14*/ int state;
            /*0x18*/ int readers;
            /*0x1c*/ int writer_lock_owner;
            /*0x20*/ System.Threading.LockQueue writer_queue;
            /*0x28*/ System.Collections.Hashtable reader_locks;

            /*0x722d548*/ ReaderWriterLock();
            /*0x722d63c*/ void Finalize();
            /*0x722d644*/ void AcquireWriterLock(int millisecondsTimeout);
            /*0x722d64c*/ void AcquireWriterLock(int millisecondsTimeout, int initialLockCount);
            /*0x722d820*/ void ReleaseWriterLock();
            /*0x722d948*/ void ReleaseWriterLock(int releaseCount);
            /*0x722d7ec*/ bool HasWriterLock();
        }

        class RegisteredWaitHandle : System.MarshalByRefObject
        {
            /*0x18*/ System.Threading.WaitHandle _waitObject;
            /*0x20*/ System.Threading.WaitOrTimerCallback _callback;
            /*0x28*/ object _state;
            /*0x30*/ System.Threading.WaitHandle _finalEvent;
            /*0x38*/ System.Threading.ManualResetEvent _cancelEvent;
            /*0x40*/ System.TimeSpan _timeout;
            /*0x48*/ int _callsInProcess;
            /*0x4c*/ bool _executeOnlyOnce;
            /*0x4d*/ bool _unregistered;

            /*0x722b7f8*/ RegisteredWaitHandle(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callback, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            /*0x722d9a8*/ void Wait(object state);
            /*0x722dee4*/ void DoCallBack(object timedOut);
            /*0x722dfc0*/ bool Unregister(System.Threading.WaitHandle waitObject);
        }

        class InternalThread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int lock_thread_id;
            /*0x18*/ nint handle;
            /*0x20*/ nint native_handle;
            /*0x28*/ nint name_chars;
            /*0x30*/ int name_free;
            /*0x34*/ int name_length;
            /*0x38*/ System.Threading.ThreadState state;
            /*0x40*/ object abort_exc;
            /*0x48*/ int abort_state_handle;
            /*0x50*/ long thread_id;
            /*0x58*/ nint debugger_thread;
            /*0x60*/ nuint static_data;
            /*0x68*/ nint runtime_thread_info;
            /*0x70*/ object current_appcontext;
            /*0x78*/ object root_domain_thread;
            /*0x80*/ byte[] _serialized_principal;
            /*0x88*/ int _serialized_principal_version;
            /*0x90*/ nint appdomain_refs;
            /*0x98*/ int interruption_requested;
            /*0xa0*/ nint longlived;
            /*0xa8*/ bool threadpool_thread;
            /*0xa9*/ bool thread_interrupt_requested;
            /*0xac*/ int stack_size;
            /*0xb0*/ byte apartment_state;
            /*0xb4*/ int critical_region_level;
            /*0xb8*/ int managed_id;
            /*0xbc*/ int small_id;
            /*0xc0*/ nint manage_callback;
            /*0xc8*/ nint flags;
            /*0xd0*/ nint thread_pinning_ref;
            /*0xd8*/ nint abort_protected_block_count;
            /*0xe0*/ int priority;
            /*0xe8*/ nint owned_mutex;
            /*0xf0*/ nint suspended_event;
            /*0xf8*/ int self_suspended;
            /*0x100*/ nint thread_state;
            /*0x108*/ nint netcore0;
            /*0x110*/ nint netcore1;
            /*0x118*/ nint netcore2;
            /*0x120*/ nint last;

            /*0x722e15c*/ InternalThread();
            /*0x722e0c4*/ void Thread_free_internal();
            /*0x722e0c8*/ void Finalize();
        }

        class Timer : System.MarshalByRefObject, System.IDisposable, System.IAsyncDisposable
        {
            /*0x18*/ System.Threading.TimerCallback callback;
            /*0x20*/ object state;
            /*0x28*/ long due_time_ms;
            /*0x30*/ long period_ms;
            /*0x38*/ long next_run;
            /*0x40*/ bool disposed;
            /*0x41*/ bool is_dead;
            /*0x42*/ bool is_added;

            static /*0x722e16c*/ System.Threading.Timer.Scheduler get_scheduler();
            static /*0x722e75c*/ long GetTimeMonotonic();
            /*0x722e1f4*/ Timer(System.Threading.TimerCallback callback, object state, int dueTime, int period);
            /*0x722e2e4*/ Timer(System.Threading.TimerCallback callback, object state, System.TimeSpan dueTime, System.TimeSpan period);
            /*0x722e240*/ void Init(System.Threading.TimerCallback callback, object state, long dueTime, long period);
            /*0x722e580*/ bool Change(int dueTime, int period);
            /*0x722e5a0*/ bool Change(System.TimeSpan dueTime, System.TimeSpan period);
            /*0x722e658*/ void Dispose();
            /*0x722e3b8*/ bool Change(long dueTime, long period, bool first);
            /*0x722e8f0*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x722e9a8*/ void KeepRootedWhileScheduled();

            struct TimerComparer : System.Collections.IComparer, System.Collections.Generic.IComparer<System.Threading.Timer>
            {
                /*0x722e9ac*/ int System.Collections.IComparer.Compare(object x, object y);
                /*0x722ea44*/ int Compare(System.Threading.Timer tx, System.Threading.Timer ty);
            }

            class Scheduler
            {
                static /*0x0*/ System.Threading.Timer.Scheduler instance;
                /*0x10*/ bool needReSort;
                /*0x18*/ System.Collections.Generic.List<System.Threading.Timer> list;
                /*0x20*/ long current_next_run;
                /*0x28*/ System.Threading.ManualResetEvent changed;

                static /*0x722f3f4*/ Scheduler();
                static /*0x722f094*/ System.Threading.Timer.Scheduler get_Instance();
                static /*0x722f2bc*/ void TimerCB(object o);
                /*0x722f0ec*/ Scheduler();
                /*0x722eab4*/ void InitScheduler();
                /*0x722ebbc*/ void WakeupScheduler();
                /*0x722ebd8*/ void SchedulerThread();
                /*0x722e690*/ void Remove(System.Threading.Timer timer);
                /*0x722e760*/ void Change(System.Threading.Timer timer, long new_next_run);
                /*0x722f1c4*/ void Add(System.Threading.Timer timer);
                /*0x722f194*/ void InternalRemove(System.Threading.Timer timer);
                /*0x722f334*/ void FireTimer(System.Threading.Timer timer);
                /*0x722ed0c*/ int RunSchedulerLoop();
            }
        }

        class TimerCallback : System.MulticastDelegate
        {
            /*0x722f458*/ TimerCallback(object object, nint method);
            /*0x722f560*/ void Invoke(object state);
        }

        class Volatile
        {
            static /*0x722f574*/ bool Read(ref bool location);
            static /*0x722f58c*/ void Write(ref bool location, bool value);
            static /*0x722f5b0*/ int Read(ref int location);
            static /*0x722f5c8*/ void Write(ref int location, int value);
            static /*0x3910ae8*/ T Read<T>(ref T location);
            static /*0x3910ae8*/ void Write<T>(ref T location, T value);
            static /*0x722f5ec*/ long Read(ref long location);

            struct VolatileBoolean
            {
                /*0x10*/ bool Value;
            }

            struct VolatileInt32
            {
                /*0x10*/ int Value;
            }

            struct VolatileObject
            {
                /*0x10*/ object Value;
            }
        }

        namespace Tasks
        {
            class TaskCanceledException : System.OperationCanceledException
            {
                /*0x98*/ System.Threading.Tasks.Task _canceledTask;

                /*0x722f604*/ TaskCanceledException();
                /*0x722f650*/ TaskCanceledException(System.Threading.Tasks.Task task);
                /*0x722f6fc*/ TaskCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskCompletionSource<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> _task;

                /*0x38159dc*/ TaskCompletionSource();
                /*0x3815ed0*/ TaskCompletionSource(System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x3816710*/ TaskCompletionSource(object state);
                /*0x381678c*/ TaskCompletionSource(object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x38148bc*/ System.Threading.Tasks.Task<TResult> get_Task();
                /*0x38159dc*/ void SpinUntilCompleted();
                /*0x38141c4*/ bool TrySetException(System.Exception exception);
                /*0x3910ae8*/ bool TrySetResult(TResult result);
                /*0x3910ae8*/ void SetResult(TResult result);
                /*0x3813ffc*/ bool TrySetCanceled();
                /*0x3910ae8*/ bool TrySetCanceled(System.Threading.CancellationToken cancellationToken);
            }

            class TaskSchedulerException : System.Exception
            {
                /*0x722f704*/ TaskSchedulerException();
                /*0x722f774*/ TaskSchedulerException(System.Exception innerException);
                /*0x722f7f4*/ TaskSchedulerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskToApm
            {
                static /*0x722f874*/ System.IAsyncResult Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state);
                static /*0x722fb30*/ void End(System.IAsyncResult asyncResult);
                static /*0x3910ae8*/ TResult End<TResult>(System.IAsyncResult asyncResult);
                static /*0x722fa20*/ void InvokeCallbackWhenTaskCompletes(System.Threading.Tasks.Task antecedent, System.AsyncCallback callback, System.IAsyncResult asyncResult);

                class TaskWrapperAsyncResult : System.IAsyncResult
                {
                    /*0x10*/ System.Threading.Tasks.Task Task;
                    /*0x18*/ object _state;
                    /*0x20*/ bool _completedSynchronously;

                    /*0x722f9c8*/ TaskWrapperAsyncResult(System.Threading.Tasks.Task task, object state, bool completedSynchronously);
                    /*0x722fc8c*/ object System.IAsyncResult.get_AsyncState();
                    /*0x722fc94*/ bool System.IAsyncResult.get_CompletedSynchronously();
                    /*0x722fc9c*/ bool System.IAsyncResult.get_IsCompleted();
                    /*0x722fcb4*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                }

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ System.AsyncCallback callback;
                    /*0x18*/ System.IAsyncResult asyncResult;

                    /*0x722fc50*/ <>c__DisplayClass3_0();
                    /*0x722fd58*/ void <InvokeCallbackWhenTaskCompletes>b__0();
                }
            }

            struct ValueTask : System.IEquatable<System.Threading.Tasks.ValueTask>
            {
                static /*0x0*/ System.Threading.Tasks.Task s_canceledTask;
                /*0x10*/ object _obj;
                /*0x18*/ short _token;
                /*0x1a*/ bool _continueOnCapturedContext;

                static /*0x72307d4*/ ValueTask();
                static /*0x722fd80*/ System.Threading.Tasks.Task get_CompletedTask();
                /*0x722fe08*/ ValueTask(System.Threading.Tasks.Task task);
                /*0x722fe4c*/ ValueTask(System.Threading.Tasks.Sources.IValueTaskSource source, short token);
                /*0x722fe94*/ ValueTask(object obj, short token, bool continueOnCapturedContext);
                /*0x722fec4*/ int GetHashCode();
                /*0x722fedc*/ bool Equals(object obj);
                /*0x722ff94*/ bool Equals(System.Threading.Tasks.ValueTask other);
                /*0x722ffb8*/ System.Threading.Tasks.Task AsTask();
                /*0x7230084*/ System.Threading.Tasks.Task GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource t);
                /*0x7230548*/ bool get_IsCompleted();
                /*0x723064c*/ void ThrowIfCompletedUnsuccessfully();
                /*0x7230750*/ System.Runtime.CompilerServices.ValueTaskAwaiter GetAwaiter();
                /*0x7230778*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);

                class ValueTaskSourceAsTask : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    static /*0x0*/ System.Action<object> s_completionAction;
                    /*0x58*/ System.Threading.Tasks.Sources.IValueTaskSource _source;
                    /*0x60*/ short _token;

                    static /*0x72308c0*/ ValueTaskSourceAsTask();
                    /*0x723041c*/ ValueTaskSourceAsTask(System.Threading.Tasks.Sources.IValueTaskSource source, short token);

                    class <>c
                    {
                        static /*0x0*/ System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<> <>9;

                        static /*0x7230990*/ <>c();
                        /*0x72309f8*/ <>c();
                        /*0x7230a00*/ void <.cctor>b__4_0(object state);
                    }
                }
            }

            struct ValueTask<TResult> : System.IEquatable<System.Threading.Tasks.ValueTask<TResult>>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_canceledTask;
                /*0x0*/ object _obj;
                /*0x0*/ TResult _result;
                /*0x0*/ short _token;
                /*0x0*/ bool _continueOnCapturedContext;

                /*0x3910ae8*/ ValueTask(TResult result);
                /*0x3816710*/ ValueTask(System.Threading.Tasks.Task<TResult> task);
                ValueTask(System.Threading.Tasks.Sources.IValueTaskSource<TResult> source, short token);
                /*0x3910ae8*/ ValueTask(object obj, TResult result, short token, bool continueOnCapturedContext);
                /*0x3814574*/ int GetHashCode();
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3910ae8*/ bool Equals(System.Threading.Tasks.ValueTask<TResult> other);
                /*0x38148bc*/ System.Threading.Tasks.Task<TResult> AsTask();
                /*0x3814a3c*/ System.Threading.Tasks.Task<TResult> GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource<TResult> t);
                /*0x3813ffc*/ bool get_IsCompleted();
                /*0x3813ffc*/ bool get_IsCompletedSuccessfully();
                /*0x3910ae8*/ TResult get_Result();
                /*0x3910ae8*/ System.Runtime.CompilerServices.ValueTaskAwaiter<TResult> GetAwaiter();
                /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                /*0x38148bc*/ string ToString();

                class ValueTaskSourceAsTask<TResult> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.Action<object> s_completionAction;
                    /*0x0*/ System.Threading.Tasks.Sources.IValueTaskSource<TResult> _source;
                    /*0x0*/ short _token;

                    static /*0x383e7a0*/ ValueTaskSourceAsTask();
                    ValueTaskSourceAsTask(System.Threading.Tasks.Sources.IValueTaskSource<TResult> source, short token);

                    class <>c<TResult>
                    {
                        static /*0x0*/ System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c<TResult> <>9;

                        static /*0x383e7a0*/ <>c();
                        /*0x38159dc*/ <>c();
                        /*0x3816710*/ void <.cctor>b__4_0(object state);
                    }
                }
            }

            class TaskAwaiters
            {
                static /*0x7230d24*/ System.Threading.Tasks.ForceAsyncAwaiter ForceAsync(System.Threading.Tasks.Task task);
            }

            struct ForceAsyncAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task _task;

                /*0x7230d44*/ ForceAsyncAwaiter(System.Threading.Tasks.Task task);
                /*0x7230d4c*/ System.Threading.Tasks.ForceAsyncAwaiter GetAwaiter();
                /*0x7230d54*/ bool get_IsCompleted();
                /*0x7230d5c*/ void GetResult();
                /*0x7230d9c*/ void OnCompleted(System.Action action);
                /*0x7230df4*/ void UnsafeOnCompleted(System.Action action);
            }

            class DebuggerSupport
            {
                static /*0x0*/ System.Collections.Generic.LowLevelDictionary<int, System.Threading.Tasks.Task> s_activeTasks;
                static /*0x8*/ object s_activeTasksLock;

                static /*0x72312d8*/ DebuggerSupport();
                static /*0x7230e4c*/ bool get_LoggingOn();
                static /*0x7230e54*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, string operationName, ulong relatedContext);
                static /*0x7230e58*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, Internal.Runtime.Augments.AsyncStatus status);
                static /*0x7230e5c*/ void TraceOperationRelation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalityRelation relation);
                static /*0x7230e60*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x7230e64*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x7230e68*/ void AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x7230efc*/ void AddToActiveTasksNonInlined(System.Threading.Tasks.Task task);
                static /*0x72310e8*/ void RemoveFromActiveTasks(System.Threading.Tasks.Task task);
                static /*0x723117c*/ void RemoveFromActiveTasksNonInlined(System.Threading.Tasks.Task task);
            }

            class Task<TResult> : System.Threading.Tasks.Task
            {
                static /*0x0*/ System.Threading.Tasks.TaskFactory<TResult> s_defaultFactory;
                /*0x0*/ TResult m_result;

                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                static /*0x3836db8*/ System.Threading.Tasks.TaskFactory<TResult> get_Factory();
                /*0x38159dc*/ Task();
                /*0x381678c*/ Task(object state, System.Threading.Tasks.TaskCreationOptions options);
                /*0x3910ae8*/ Task(TResult result);
                /*0x3910ae8*/ Task(bool canceled, TResult result, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x3910ae8*/ Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x3910ae8*/ Task(System.Func<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3910ae8*/ Task(System.Delegate valueSelector, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3910ae8*/ bool TrySetResult(TResult result);
                /*0x3910ae8*/ void DangerousSetResult(TResult result);
                /*0x3910ae8*/ TResult get_Result();
                /*0x3910ae8*/ TResult get_ResultOnSuccess();
                /*0x3910ae8*/ TResult GetResultCore(bool waitCompletionNotification);
                /*0x38159dc*/ void InnerInvoke();
                /*0x3910ae8*/ System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter();
                /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                /*0x3814a3c*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction);
                /*0x3814b90*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3814b48*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x3910ae8*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x3814c14*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3910ae8*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x3814b48*/ System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x3910ae8*/ System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
            }

            class SystemThreadingTasks_FutureDebugView<TResult>
            {
            }

            class TaskFactory<TResult>
            {
                /*0x0*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x0*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x0*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x0*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static void FromAsyncCoreLogic(System.IAsyncResult iar, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, System.Threading.Tasks.Task<TResult> promise, bool requiresSynchronization);
                static /*0x3839b40*/ System.Threading.Tasks.Task<TResult> FromAsyncImpl(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> FromAsyncTrim<TInstance, TArgs>(TInstance thisRef, TArgs args, System.Func<TInstance, TArgs, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                /*0x38159dc*/ TaskFactory();
                /*0x3910ae8*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3814c14*/ System.Threading.Tasks.Task<TResult> FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state);
                /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state);

                class FromAsyncTrimPromise`1<TResult, TInstance> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.AsyncCallback s_completeFromAsyncResult;
                    /*0x0*/ TInstance m_thisRef;
                    /*0x0*/ System.Func<TInstance, System.IAsyncResult, TResult> m_endMethod;

                    static /*0x383e7a0*/ FromAsyncTrimPromise`1();
                    static /*0x3840c74*/ void CompleteFromAsyncResult(System.IAsyncResult asyncResult);
                    /*0x3910ae8*/ FromAsyncTrimPromise`1(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                    /*0x3910ae8*/ void Complete(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod, System.IAsyncResult asyncResult, bool requiresSynchronization);
                }

                class <>c__DisplayClass35_0<TResult>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    /*0x38159dc*/ <>c__DisplayClass35_0();
                    /*0x3816710*/ void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass38_0`1<TResult, TArg1>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    /*0x38159dc*/ <>c__DisplayClass38_0`1();
                    /*0x3816710*/ void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass41_0`2<TResult, TArg1, TArg2>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    /*0x38159dc*/ <>c__DisplayClass41_0`2();
                    /*0x3816710*/ void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }
            }

            enum TaskStatus
            {
                Created = 0,
                WaitingForActivation = 1,
                WaitingToRun = 2,
                Running = 3,
                WaitingForChildrenToComplete = 4,
                RanToCompletion = 5,
                Canceled = 6,
                Faulted = 7,
            }

            class Task : System.Threading.IThreadPoolWorkItem, System.IAsyncResult, System.IDisposable
            {
                static /*0x0*/ int s_taskIdCounter;
                static /*0x8*/ object s_taskCompletionSentinel;
                static /*0x10*/ bool s_asyncDebuggingEnabled;
                static /*0x18*/ System.Action<object> s_taskCancelCallback;
                static /*0x20*/ System.Func<System.Threading.Tasks.Task.ContingentProperties> s_createContingentProperties;
                static /*0x28*/ System.Threading.Tasks.TaskFactory <Factory>k__BackingField;
                static /*0x30*/ System.Threading.Tasks.Task <CompletedTask>k__BackingField;
                static /*0x38*/ System.Predicate<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate;
                static /*0x40*/ System.Threading.ContextCallback s_ecCallback;
                static /*0x48*/ System.Predicate<object> s_IsTaskContinuationNullPredicate;
                static /*0x50*/ System.Collections.Generic.Dictionary<int, System.Threading.Tasks.Task> s_currentActiveTasks;
                static /*0x58*/ object s_activeTasksLock;
                [ThreadStatic] static System.Threading.Tasks.Task t_currentTask;
                [ThreadStatic] static System.Threading.Tasks.StackGuard t_stackGuard;
                /*0x10*/ int m_taskId;
                /*0x18*/ System.Delegate m_action;
                /*0x20*/ object m_stateObject;
                /*0x28*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;
                /*0x30*/ System.Threading.Tasks.Task m_parent;
                /*0x38*/ int m_stateFlags;
                /*0x40*/ object m_continuationObject;
                /*0x48*/ System.Threading.Tasks.Task.ContingentProperties m_contingentProperties;

                static /*0x7238a6c*/ Task();
                static /*0x7231f3c*/ void TaskCancelCallback(object o);
                static /*0x7232624*/ System.Threading.Tasks.TaskCreationOptions OptionsMethod(int flags);
                static /*0x723286c*/ bool AnyTaskRequiresNotifyDebuggerOfWaitCompletion(System.Threading.Tasks.Task[] tasks);
                static /*0x7232954*/ System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x7232c68*/ System.Threading.Tasks.Task get_InternalCurrent();
                static /*0x7232cc0*/ System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x7232d5c*/ System.Threading.Tasks.StackGuard get_CurrentStackGuard();
                static /*0x72331d8*/ bool IsCompletedMethod(int flags);
                static /*0x72333a4*/ System.Threading.Tasks.TaskFactory get_Factory();
                static /*0x72333fc*/ System.Threading.Tasks.Task get_CompletedTask();
                static /*0x723539c*/ void ExecutionContextCallback(object obj);
                static /*0x72358f8*/ System.Runtime.CompilerServices.YieldAwaitable Yield();
                static /*0x7236d08*/ void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.Tasks.TaskCreationOptions creationOptions, ref System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> FromResult<TResult>(TResult result);
                static /*0x72303b0*/ System.Threading.Tasks.Task FromException(System.Exception exception);
                static /*0x38379c4*/ System.Threading.Tasks.Task<TResult> FromException<TResult>(System.Exception exception);
                static /*0x7237608*/ System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken);
                static /*0x723086c*/ System.Threading.Tasks.Task FromCanceled(System.Threading.CancellationToken cancellationToken);
                static /*0x38376c4*/ System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.Threading.CancellationToken cancellationToken);
                static /*0x38376c4*/ System.Threading.Tasks.Task<TResult> FromCanceled<TResult>(System.Threading.CancellationToken cancellationToken);
                static /*0x38379c4*/ System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.OperationCanceledException exception);
                static /*0x72376e8*/ System.Threading.Tasks.Task Run(System.Action action);
                static /*0x38379c4*/ System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<TResult> function);
                static /*0x72377b8*/ System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function);
                static /*0x7237810*/ System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken);
                static /*0x38379c4*/ System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function);
                static /*0x3838cac*/ System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);
                static /*0x7237a44*/ System.Threading.Tasks.Task Delay(int millisecondsDelay);
                static /*0x7237a9c*/ System.Threading.Tasks.Task Delay(int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
                static /*0x38379c4*/ System.Threading.Tasks.Task<TResult[]> WhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static /*0x38379c4*/ System.Threading.Tasks.Task<TResult[]> InternalWhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static /*0x7237f74*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks);
                static /*0x7238340*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
                static /*0x72387b4*/ bool AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x7238918*/ void RemoveFromActiveTasks(int taskId);
                /*0x72313ac*/ Task(bool canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x72314a0*/ Task();
                /*0x72314c8*/ Task(object state, System.Threading.Tasks.TaskCreationOptions creationOptions, bool promiseStyle);
                /*0x7231798*/ Task(System.Delegate action, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x72315f0*/ void TaskConstructorCore(System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x72318f0*/ void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation);
                /*0x7230cb0*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord);
                /*0x7230358*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x7230cb8*/ bool TrySetException(object exceptionObject);
                /*0x7231cc8*/ System.Threading.Tasks.TaskCreationOptions get_Options();
                /*0x7232274*/ bool AtomicStateUpdate(int newBits, int illegalBits);
                /*0x723262c*/ bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags);
                /*0x7232704*/ void SetNotificationForWaitCompletion(bool enabled);
                /*0x72327dc*/ bool NotifyDebuggerOfWaitCompletionIfNecessary();
                /*0x7232908*/ bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
                /*0x7232930*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                /*0x723282c*/ bool get_IsWaitNotificationEnabled();
                /*0x7232844*/ void NotifyDebuggerOfWaitCompletion();
                /*0x7232948*/ bool MarkStarted();
                /*0x723187c*/ void AddNewChild();
                /*0x7231ef4*/ void DisregardChild();
                /*0x7231058*/ int get_Id();
                /*0x7232e1c*/ System.AggregateException get_Exception();
                /*0x7232fc8*/ System.Threading.Tasks.TaskStatus get_Status();
                /*0x7233028*/ bool get_IsCanceled();
                /*0x7233048*/ bool get_IsCancellationRequested();
                /*0x7231c88*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection);
                /*0x72330d8*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection);
                /*0x722f6d8*/ System.Threading.CancellationToken get_CancellationToken();
                /*0x72331c0*/ bool get_IsCancellationAcknowledged();
                /*0x722f964*/ bool get_IsCompleted();
                /*0x72331e8*/ bool get_IsCompletedSuccessfully();
                /*0x7231868*/ System.Threading.Tasks.TaskCreationOptions get_CreationOptions();
                /*0x7233210*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                /*0x723338c*/ object get_AsyncState();
                /*0x7233394*/ bool System.IAsyncResult.get_CompletedSynchronously();
                /*0x723339c*/ System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler();
                /*0x7233294*/ System.Threading.ManualResetEventSlim get_CompletedEvent();
                /*0x7233454*/ bool get_ExceptionRecorded();
                /*0x7232e58*/ bool get_IsFaulted();
                /*0x72334c4*/ System.Threading.ExecutionContext get_CapturedContext();
                /*0x7231bd8*/ void set_CapturedContext(System.Threading.ExecutionContext value);
                /*0x7233534*/ void Dispose();
                /*0x72335a0*/ void Dispose(bool disposing);
                /*0x7232a5c*/ void ScheduleAndStart(bool needsProtection);
                /*0x7232490*/ void AddException(object exceptionObject);
                /*0x7233704*/ void AddException(object exceptionObject, bool representsCancellation);
                /*0x7232e70*/ System.AggregateException GetExceptions(bool includeTaskCanceledExceptions);
                /*0x7233aac*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x7233c50*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
                /*0x7233c80*/ void ThrowIfExceptional(bool includeTaskCanceledExceptions);
                /*0x7233cc8*/ void UpdateExceptionObservedStatus();
                /*0x7233d9c*/ bool get_IsExceptionObservedByParent();
                /*0x7233db4*/ bool get_IsDelegateInvoked();
                /*0x7232498*/ void Finish(bool bUserDelegateExecuted);
                /*0x7233dcc*/ void FinishStageTwo();
                /*0x72345e0*/ void FinishStageThree();
                /*0x7234640*/ void ProcessChildCompletion(System.Threading.Tasks.Task childTask);
                /*0x7234054*/ void AddExceptionsFromChildren();
                /*0x7234ed0*/ void Execute();
                /*0x7235084*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x723508c*/ bool ExecuteEntry(bool bPreventDoubleExecution);
                /*0x7235414*/ void InnerInvoke();
                /*0x7234f7c*/ void HandleException(System.Exception unhandledException);
                /*0x722fc30*/ System.Runtime.CompilerServices.TaskAwaiter GetAwaiter();
                /*0x722fc58*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);
                /*0x72354f4*/ void SetContinuationForAwait(System.Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext);
                /*0x7235900*/ void Wait();
                /*0x723590c*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x7236004*/ bool WrappedTryRunInline();
                /*0x7235a5c*/ bool InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x723635c*/ bool SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x7236508*/ bool SpinWait(int millisecondsTimeout);
                /*0x7231d24*/ bool InternalCancel(bool bCancelNonExecutingOnly);
                /*0x7236718*/ void RecordInternalCancellationRequest();
                /*0x7236760*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord);
                /*0x7232334*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x7232370*/ void CancellationCleanupLogic();
                /*0x72354c8*/ void SetCancellationAcknowledged();
                /*0x72347f4*/ void FinishContinuations();
                /*0x72369d4*/ void LogFinishCompletionNotification();
                /*0x7236a28*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction);
                /*0x7236c90*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x7236b3c*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x7237040*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x7237054*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x7236ee4*/ void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options);
                /*0x72372f8*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action);
                /*0x7236644*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, bool addBeforeOthers);
                /*0x7237300*/ bool AddTaskContinuationComplex(object tc, bool addBeforeOthers);
                /*0x7235804*/ bool AddTaskContinuation(object tc, bool addBeforeOthers);
                /*0x723202c*/ void RemoveContinuation(object continuationObject);
                /*0x7238a5c*/ void MarkAborted(System.Threading.ThreadAbortException e);
                /*0x72351a8*/ void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot);

                class ContingentProperties
                {
                    /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                    /*0x18*/ System.Threading.ManualResetEventSlim m_completionEvent;
                    /*0x20*/ System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder;
                    /*0x28*/ System.Threading.CancellationToken m_cancellationToken;
                    /*0x30*/ object m_cancellationRegistration;
                    /*0x38*/ int m_internalCancellationRequested;
                    /*0x3c*/ int m_completionCountdown;
                    /*0x40*/ System.Collections.Generic.LowLevelListWithIList<System.Threading.Tasks.Task> m_exceptionalChildren;

                    /*0x723147c*/ ContingentProperties();
                    /*0x72344a4*/ void SetCompleted();
                    /*0x72344cc*/ void UnregisterCancellationCallback();
                }

                class SetOnInvokeMres : System.Threading.ManualResetEventSlim, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x72365e4*/ SetOnInvokeMres();
                    /*0x7238db8*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x7238dc0*/ bool get_InvokeMayRunArbitraryCode();
                }

                class DelayPromise : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    /*0x58*/ System.Threading.CancellationToken Token;
                    /*0x60*/ System.Threading.CancellationTokenRegistration Registration;
                    /*0x78*/ System.Threading.Timer Timer;

                    /*0x7237e54*/ DelayPromise(System.Threading.CancellationToken token);
                    /*0x7238dc8*/ void Complete();
                }

                class WhenAllPromise<T> : System.Threading.Tasks.Task<T[]>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x0*/ System.Threading.Tasks.Task<T> m_tasks;
                    /*0x0*/ int m_count;

                    /*0x3816710*/ WhenAllPromise(System.Threading.Tasks.Task<T> tasks);
                    /*0x3816710*/ void Invoke(System.Threading.Tasks.Task ignored);
                    /*0x3813ffc*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                    /*0x3813ffc*/ bool get_InvokeMayRunArbitraryCode();
                }

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.Task.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__247_0;
                    static /*0x10*/ System.Threading.TimerCallback <>9__247_1;

                    static /*0x7238f28*/ <>c();
                    /*0x7238f90*/ <>c();
                    /*0x7238f98*/ void <Delay>b__247_0(object state);
                    /*0x7238ff8*/ void <Delay>b__247_1(object state);
                    /*0x7239058*/ System.Threading.Tasks.Task.ContingentProperties <.cctor>b__271_0();
                    /*0x72390bc*/ bool <.cctor>b__271_1(System.Threading.Tasks.Task t);
                    /*0x72390dc*/ bool <.cctor>b__271_2(object tc);
                }
            }

            class CompletionActionInvoker : System.Threading.IThreadPoolWorkItem
            {
                /*0x10*/ System.Threading.Tasks.ITaskCompletionAction m_action;
                /*0x18*/ System.Threading.Tasks.Task m_completingTask;

                /*0x7236990*/ CompletionActionInvoker(System.Threading.Tasks.ITaskCompletionAction action, System.Threading.Tasks.Task completingTask);
                /*0x72390e8*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x7239190*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class SystemThreadingTasks_TaskDebugView
            {
            }

            enum TaskCreationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                RunContinuationsAsynchronously = 64,
            }

            enum InternalTaskOptions
            {
                None = 0,
                InternalOptionsMask = 65280,
                ContinuationTask = 512,
                PromiseTask = 1024,
                LazyCancellation = 4096,
                QueuedByRuntime = 8192,
                DoNotDispose = 16384,
            }

            enum TaskContinuationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                LazyCancellation = 32,
                RunContinuationsAsynchronously = 64,
                NotOnRanToCompletion = 65536,
                NotOnFaulted = 131072,
                NotOnCanceled = 262144,
                OnlyOnRanToCompletion = 393216,
                OnlyOnFaulted = 327680,
                OnlyOnCanceled = 196608,
                ExecuteSynchronously = 524288,
            }

            class StackGuard
            {
                /*0x10*/ int m_inliningDepth;

                /*0x7232e14*/ StackGuard();
                /*0x7239194*/ bool TryBeginInliningScope();
                /*0x72391d4*/ void EndInliningScope();
            }

            struct VoidTaskResult
            {
            }

            interface ITaskCompletionAction
            {
                /*0x3816710*/ void Invoke(System.Threading.Tasks.Task completingTask);
                /*0x3813ffc*/ bool get_InvokeMayRunArbitraryCode();
            }

            class UnwrapPromise<TResult> : System.Threading.Tasks.Task<TResult>, System.Threading.Tasks.ITaskCompletionAction
            {
                /*0x0*/ byte _state;
                /*0x0*/ bool _lookForOce;

                UnwrapPromise(System.Threading.Tasks.Task outerTask, bool lookForOce);
                /*0x3816710*/ void Invoke(System.Threading.Tasks.Task completingTask);
                /*0x3816710*/ void InvokeCore(System.Threading.Tasks.Task completingTask);
                /*0x3816710*/ void InvokeCoreAsync(System.Threading.Tasks.Task completingTask);
                /*0x3816710*/ void ProcessCompletedOuterTask(System.Threading.Tasks.Task task);
                bool TrySetFromTask(System.Threading.Tasks.Task task, bool lookForOce);
                /*0x3816710*/ void ProcessInnerTask(System.Threading.Tasks.Task task);
                /*0x3813ffc*/ bool get_InvokeMayRunArbitraryCode();

                class <>c<TResult>
                {
                    static /*0x0*/ System.Threading.Tasks.UnwrapPromise.<>c<TResult> <>9;
                    static /*0x0*/ System.Threading.WaitCallback <>9__8_0;

                    static /*0x383e7a0*/ <>c();
                    /*0x38159dc*/ <>c();
                    /*0x3816710*/ void <InvokeCoreAsync>b__8_0(object state);
                }
            }

            class ContinuationTaskFromTask : System.Threading.Tasks.Task
            {
                /*0x50*/ System.Threading.Tasks.Task m_antecedent;

                /*0x7236e28*/ ContinuationTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x72391e8*/ void InnerInvoke();
            }

            class ContinuationTaskFromResultTask<TAntecedentResult> : System.Threading.Tasks.Task
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                /*0x3910ae8*/ ContinuationTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x38159dc*/ void InnerInvoke();
            }

            class ContinuationResultTaskFromResultTask<TAntecedentResult, TResult> : System.Threading.Tasks.Task<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                /*0x3910ae8*/ ContinuationResultTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x38159dc*/ void InnerInvoke();
            }

            class TaskContinuation
            {
                static /*0x72392c4*/ void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, bool needsProtection);
                /*0x7239404*/ TaskContinuation();
                void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class StandardTaskContinuation : System.Threading.Tasks.TaskContinuation
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Threading.Tasks.TaskContinuationOptions m_options;
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;

                /*0x72371b4*/ StandardTaskContinuation(System.Threading.Tasks.Task task, System.Threading.Tasks.TaskContinuationOptions options, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x723940c*/ void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class SynchronizationContextAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                static /*0x8*/ System.Threading.ContextCallback s_postActionCallback;
                /*0x20*/ System.Threading.SynchronizationContext m_syncContext;

                static /*0x7239ab8*/ SynchronizationContextAwaitTaskContinuation();
                static /*0x723995c*/ void PostAction(object state);
                static /*0x72399f0*/ System.Threading.ContextCallback GetPostActionCallback();
                /*0x72356f0*/ SynchronizationContextAwaitTaskContinuation(System.Threading.SynchronizationContext context, System.Action action, bool flowExecutionContext);
                /*0x7239648*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.<> <>9;

                    static /*0x7239b88*/ <>c();
                    /*0x7239bf0*/ <>c();
                    /*0x7239bf8*/ void <.cctor>b__7_0(object state);
                }
            }

            class TaskSchedulerAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_scheduler;

                /*0x72357cc*/ TaskSchedulerAwaitTaskContinuation(System.Threading.Tasks.TaskScheduler scheduler, System.Action action, bool flowExecutionContext);
                /*0x7239c64*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__2_0;

                    static /*0x723a054*/ <>c();
                    /*0x723a0bc*/ <>c();
                    /*0x723a0c4*/ void <Run>b__2_0(object state);
                }
            }

            class AwaitTaskContinuation : System.Threading.Tasks.TaskContinuation, System.Threading.IThreadPoolWorkItem
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeActionCallback;
                /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                /*0x18*/ System.Action m_action;

                static /*0x723a20c*/ bool get_IsValidLocationForInlining();
                static /*0x723a468*/ void InvokeAction(object state);
                static /*0x723a4d4*/ System.Threading.ContextCallback GetInvokeActionCallback();
                static /*0x7236804*/ void RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask);
                static /*0x7235898*/ void UnsafeScheduleAction(System.Action action);
                static /*0x723a1b4*/ void ThrowAsyncIfNecessary(System.Exception exc);
                /*0x72395a4*/ AwaitTaskContinuation(System.Action action, bool flowExecutionContext);
                /*0x7239fcc*/ System.Threading.Tasks.Task CreateTask(System.Action<object> action, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x7239ea8*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);
                /*0x723a334*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x72397bc*/ void RunCallback(System.Threading.ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask);
                /*0x723a584*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class TaskExceptionHolder
            {
                static /*0x0*/ bool s_failFastOnUnobservedException;
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Collections.Generic.LowLevelListWithIList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions;
                /*0x20*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException;
                /*0x28*/ bool m_isHandled;

                static /*0x723afa0*/ TaskExceptionHolder();
                static /*0x723a588*/ bool ShouldFailFastOnUnobservedException();
                /*0x72338a4*/ TaskExceptionHolder(System.Threading.Tasks.Task task);
                /*0x723a590*/ void Finalize();
                /*0x72334a8*/ bool get_ContainsFaultList();
                /*0x72338d4*/ void Add(object exceptionObject, bool representsCancellation);
                /*0x723a944*/ void SetCancellationException(object exceptionObject);
                /*0x723aa08*/ void AddFaultException(object exceptionObject);
                /*0x723af28*/ void MarkAsUnhandled();
                /*0x7233688*/ void MarkAsHandled(bool calledFromFinalizer);
                /*0x72338e0*/ System.AggregateException CreateExceptionObject(bool calledFromFinalizer, System.Exception includeThisException);
                /*0x7233bc4*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x723af98*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
            }

            class TaskFactory
            {
                /*0x10*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x18*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x20*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x24*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static /*0x723b150*/ void CheckCreationOptions(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x723b2c8*/ void CheckFromAsyncOptions(System.Threading.Tasks.TaskCreationOptions creationOptions, bool hasBeginMethod);
                static /*0x7238108*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAnyLogic(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                static /*0x723b054*/ void CheckMultiTaskContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x7238da4*/ TaskFactory();
                /*0x723afe8*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x723b1ac*/ System.Threading.Tasks.Task StartNew(System.Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x723b238*/ System.Threading.Tasks.Task StartNew(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3910ae8*/ System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state);
                /*0x3910ae8*/ System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x3910ae8*/ System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
                /*0x3910ae8*/ System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);

                class CompleteOnInvokePromise : System.Threading.Tasks.Task<System.Threading.Tasks.Task>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x58*/ System.Collections.Generic.IList<System.Threading.Tasks.Task> _tasks;

                    /*0x723b3b0*/ CompleteOnInvokePromise(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                    /*0x723b4d0*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x723b71c*/ bool get_InvokeMayRunArbitraryCode();
                }
            }

            class TaskScheduler
            {
                static /*0x0*/ System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler;
                static /*0x8*/ int s_taskSchedulerIdCounter;
                static /*0x10*/ System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException;
                static /*0x18*/ System.Threading.Lock _unobservedTaskExceptionLockObject;
                /*0x10*/ int m_taskSchedulerId;

                static /*0x723b918*/ TaskScheduler();
                static /*0x723b740*/ System.Threading.Tasks.TaskScheduler get_Default();
                static /*0x7236a9c*/ System.Threading.Tasks.TaskScheduler get_Current();
                static /*0x7235728*/ System.Threading.Tasks.TaskScheduler get_InternalCurrent();
                static /*0x723b798*/ System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext();
                static /*0x723a7fc*/ void PublishUnobservedTaskException(object sender, System.Threading.Tasks.UnobservedTaskExceptionEventArgs ueea);
                /*0x723b738*/ TaskScheduler();
                /*0x3816710*/ void QueueTask(System.Threading.Tasks.Task task);
                bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x72360d4*/ bool TryRunInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x723b724*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x723b72c*/ void NotifyWorkItemProgress();
                /*0x723b730*/ bool get_RequiresAtomicStartTransition();
                /*0x72362c8*/ int get_Id();
                /*0x723b8a4*/ bool TryExecuteTask(System.Threading.Tasks.Task task);

                class SystemThreadingTasks_TaskSchedulerDebugView
                {
                }
            }

            class SynchronizationContextTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                /*0x18*/ System.Threading.SynchronizationContext m_synchronizationContext;

                static /*0x723baf8*/ SynchronizationContextTaskScheduler();
                /*0x723b7e8*/ SynchronizationContextTaskScheduler();
                /*0x723ba2c*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x723bab0*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextTaskScheduler.<> <>9;

                    static /*0x723bbc8*/ <>c();
                    /*0x723bc30*/ <>c();
                    /*0x723bc38*/ void <.cctor>b__8_0(object s);
                }
            }

            class UnobservedTaskExceptionEventArgs : System.EventArgs
            {
                /*0x10*/ System.AggregateException m_exception;
                /*0x18*/ bool m_observed;

                /*0x723a788*/ UnobservedTaskExceptionEventArgs(System.AggregateException exception);
            }

            class ThreadPoolTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.ParameterizedThreadStart s_longRunningThreadWork;

                static /*0x723bf84*/ ThreadPoolTaskScheduler();
                /*0x723b9d4*/ ThreadPoolTaskScheduler();
                /*0x723bcbc*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x723be84*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x723bf64*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x723bf6c*/ void NotifyWorkItemProgress();
                /*0x723bf7c*/ bool get_RequiresAtomicStartTransition();

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.ThreadPoolTaskScheduler.<> <>9;

                    static /*0x723c054*/ <>c();
                    /*0x723c0bc*/ <>c();
                    /*0x723c0c4*/ void <.cctor>b__10_0(object s);
                }
            }

            enum CausalityTraceLevel
            {
                Required = 0,
                Important = 1,
                Verbose = 2,
            }

            enum AsyncCausalityStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            enum CausalityRelation
            {
                AssignDelegate = 0,
                Join = 1,
                Choice = 2,
                Cancel = 3,
                Error = 4,
            }

            enum CausalitySynchronousWork
            {
                CompletionNotification = 0,
                ProgressNotification = 1,
                Execution = 2,
            }

            class AsyncCausalityTracer
            {
                static /*0x7238a60*/ bool get_LoggingOn();
                static /*0x723c148*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext);
                static /*0x723c14c*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.AsyncCausalityStatus status);
                static /*0x723c150*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x7238a68*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
            }

            class TaskAsyncEnumerableExtensions
            {
                static /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable<T> WithCancellation<T>(System.Collections.Generic.IAsyncEnumerable<T> source, System.Threading.CancellationToken cancellationToken);
            }

            namespace Sources
            {
                enum ValueTaskSourceOnCompletedFlags
                {
                    None = 0,
                    UseSchedulingContext = 1,
                    FlowExecutionContext = 2,
                }

                enum ValueTaskSourceStatus
                {
                    Pending = 0,
                    Succeeded = 1,
                    Faulted = 2,
                    Canceled = 3,
                }

                interface IValueTaskSource
                {
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    void GetResult(short token);
                }

                interface IValueTaskSource<TResult>
                {
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    /*0x3910ae8*/ TResult GetResult(short token);
                }

                struct ManualResetValueTaskSourceCore<TResult>
                {
                    /*0x0*/ System.Action<object> _continuation;
                    /*0x0*/ object _continuationState;
                    /*0x0*/ System.Threading.ExecutionContext _executionContext;
                    /*0x0*/ object _capturedContext;
                    /*0x0*/ bool _completed;
                    /*0x0*/ TResult _result;
                    /*0x0*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _error;
                    /*0x0*/ short _version;
                    /*0x0*/ bool <RunContinuationsAsynchronously>k__BackingField;

                    /*0x3813ffc*/ bool get_RunContinuationsAsynchronously();
                    /*0x38159dc*/ void Reset();
                    /*0x3910ae8*/ void SetResult(TResult result);
                    /*0x3816710*/ void SetException(System.Exception error);
                    /*0x3814548*/ short get_Version();
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    /*0x3910ae8*/ TResult GetResult(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    void ValidateToken(short token);
                    /*0x38159dc*/ void SignalCompletion();
                    /*0x38159dc*/ void InvokeContinuation();

                    class <>c<TResult>
                    {
                        static /*0x0*/ System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore.<>c<TResult> <>9;
                        static /*0x0*/ System.Threading.SendOrPostCallback <>9__19_0;
                        static /*0x0*/ System.Threading.ContextCallback<System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore<TResult>> <>9__21_0;
                        static /*0x0*/ System.Threading.SendOrPostCallback <>9__22_0;

                        static /*0x383e7a0*/ <>c();
                        /*0x38159dc*/ <>c();
                        /*0x3816710*/ void <OnCompleted>b__19_0(object s);
                        /*0x3816710*/ void <SignalCompletion>b__21_0(ref System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore<TResult> s);
                        /*0x3816710*/ void <InvokeContinuation>b__22_0(object s);
                    }
                }

                class ManualResetValueTaskSourceCoreShared
                {
                    static /*0x0*/ System.Action<object> s_sentinel;

                    static /*0x723c1c8*/ ManualResetValueTaskSourceCoreShared();
                    static /*0x723c154*/ void ThrowInvalidOperationException();
                    static /*0x723c18c*/ void CompletionSentinel(object _);
                }
            }
        }
    }

    namespace Text
    {
        class ASCIIEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.ASCIIEncoding.ASCIIEncodingSealed s_default;

            static /*0x723e1a0*/ ASCIIEncoding();
            /*0x723c268*/ ASCIIEncoding();
            /*0x723c274*/ void SetDefaultFallbacks();
            /*0x723c340*/ int GetByteCount(char[] chars, int index, int count);
            /*0x723c4b8*/ int GetByteCount(string chars);
            /*0x723c544*/ int GetByteCount(char* chars, int count);
            /*0x723c614*/ int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x723c85c*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x723cac0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x723cbb8*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x723cd30*/ int GetCharCount(byte* bytes, int count);
            /*0x723ce00*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x723d064*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x723d15c*/ string GetString(byte[] bytes, int byteIndex, int byteCount);
            /*0x723d2e0*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x723d630*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x723da54*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x723dbf8*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x723de90*/ int GetMaxByteCount(int charCount);
            /*0x723df90*/ int GetMaxCharCount(int byteCount);
            /*0x723e08c*/ System.Text.Decoder GetDecoder();
            /*0x723e144*/ System.Text.Encoder GetEncoder();

            class ASCIIEncodingSealed : System.Text.ASCIIEncoding
            {
                /*0x723e218*/ ASCIIEncodingSealed();
            }
        }

        class Decoder
        {
            /*0x10*/ System.Text.DecoderFallback _fallback;
            /*0x18*/ System.Text.DecoderFallbackBuffer _fallbackBuffer;

            /*0x723e274*/ Decoder();
            /*0x723e27c*/ System.Text.DecoderFallback get_Fallback();
            /*0x723dba4*/ System.Text.DecoderFallbackBuffer get_FallbackBuffer();
            /*0x723e284*/ bool get_InternalHasFallbackBuffer();
            /*0x723e294*/ void Reset();
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x723e3ac*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x723e3b8*/ int GetCharCount(byte* bytes, int count, bool flush);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x723e514*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x723e520*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x723e730*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars, bool flush);
            /*0x723e810*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x723eaec*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
        }

        class InternalDecoderBestFitFallback : System.Text.DecoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;
            /*0x20*/ char _cReplacement;

            /*0x723ed0c*/ InternalDecoderBestFitFallback(System.Text.Encoding encoding);
            /*0x723ed4c*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x723eeec*/ int get_MaxCharCount();
            /*0x723eef4*/ bool Equals(object value);
            /*0x723ef9c*/ int GetHashCode();
        }

        class InternalDecoderBestFitFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x20*/ char _cBestFit;
            /*0x24*/ int _iCount;
            /*0x28*/ int _iSize;
            /*0x30*/ System.Text.InternalDecoderBestFitFallback _oFallback;

            static /*0x723efc0*/ object get_InternalSyncObject();
            /*0x723eda4*/ InternalDecoderBestFitFallbackBuffer(System.Text.InternalDecoderBestFitFallback fallback);
            /*0x723f05c*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x723f1dc*/ char GetNextChar();
            /*0x723f21c*/ int get_Remaining();
            /*0x723f228*/ void Reset();
            /*0x723f238*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x723f09c*/ char TryBestFit(byte[] bytesCheck);
        }

        class DecoderExceptionFallback : System.Text.DecoderFallback
        {
            /*0x723f240*/ DecoderExceptionFallback();
            /*0x723f248*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x723f2a4*/ int get_MaxCharCount();
            /*0x723f2ac*/ bool Equals(object value);
            /*0x723f308*/ int GetHashCode();
        }

        class DecoderExceptionFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x723f29c*/ DecoderExceptionFallbackBuffer();
            /*0x723f310*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x723f4e4*/ char GetNextChar();
            /*0x723f4ec*/ int get_Remaining();
            /*0x723f318*/ void Throw(byte[] bytesUnknown, int index);
        }

        class DecoderFallbackException : System.ArgumentException
        {
            /*0x98*/ byte[] _bytesUnknown;
            /*0xa0*/ int _index;

            /*0x723f530*/ DecoderFallbackException();
            /*0x723f4f4*/ DecoderFallbackException(string message, byte[] bytesUnknown, int index);
            /*0x723f58c*/ DecoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class DecoderFallback
        {
            static /*0x0*/ System.Text.DecoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.DecoderFallback s_exceptionFallback;

            static /*0x723c2ac*/ System.Text.DecoderFallback get_ReplacementFallback();
            static /*0x723f5dc*/ System.Text.DecoderFallback get_ExceptionFallback();
            /*0x723ed44*/ DecoderFallback();
            /*0x38148bc*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x3814574*/ int get_MaxCharCount();
        }

        class DecoderFallbackBuffer
        {
            /*0x10*/ byte* byteStart;
            /*0x18*/ char* charEnd;

            /*0x723f054*/ DecoderFallbackBuffer();
            bool Fallback(byte[] bytesUnknown, int index);
            /*0x3815648*/ char GetNextChar();
            /*0x3814574*/ int get_Remaining();
            /*0x723f678*/ void Reset();
            /*0x723de80*/ void InternalReset();
            /*0x723dbf0*/ void InternalInitialize(byte* byteStart, char* charEnd);
            /*0x723f6a0*/ bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars);
            /*0x723f7fc*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x723f938*/ void ThrowLastBytesRecursive(byte[] bytesUnknown);
        }

        class DecoderNLS : System.Text.Decoder
        {
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ bool _mustFlush;
            /*0x29*/ bool _throwOnOverflow;
            /*0x2c*/ int _bytesUsed;

            /*0x723e0e4*/ DecoderNLS(System.Text.Encoding encoding);
            /*0x723fb24*/ void Reset();
            /*0x723fb3c*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x723fb4c*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x723fd18*/ int GetCharCount(byte* bytes, int count, bool flush);
            /*0x723fe08*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x723fe18*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x7240098*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x72401b0*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x7240468*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x7240620*/ bool get_MustFlush();
            /*0x7240628*/ bool get_HasState();
            /*0x7240630*/ void ClearMustFlush();
        }

        class DecoderReplacementFallback : System.Text.DecoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0x723f594*/ DecoderReplacementFallback();
            /*0x72407c4*/ DecoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7240638*/ DecoderReplacementFallback(string replacement);
            /*0x72408e8*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7240944*/ string get_DefaultString();
            /*0x724094c*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x72409e4*/ int get_MaxCharCount();
            /*0x7240a00*/ bool Equals(object value);
            /*0x7240a80*/ int GetHashCode();
        }

        class DecoderReplacementFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x20*/ string _strDefault;
            /*0x28*/ int _fallbackCount;
            /*0x2c*/ int _fallbackIndex;

            /*0x72409a4*/ DecoderReplacementFallbackBuffer(System.Text.DecoderReplacementFallback fallback);
            /*0x7240aa0*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x7240ae0*/ char GetNextChar();
            /*0x7240b30*/ int get_Remaining();
            /*0x7240b3c*/ void Reset();
            /*0x7240b4c*/ int InternalFallback(byte[] bytes, byte* pBytes);
        }

        class Encoder
        {
            /*0x10*/ System.Text.EncoderFallback _fallback;
            /*0x18*/ System.Text.EncoderFallbackBuffer _fallbackBuffer;

            /*0x7240b68*/ Encoder();
            /*0x7240b70*/ System.Text.EncoderFallback get_Fallback();
            /*0x723d5e4*/ System.Text.EncoderFallbackBuffer get_FallbackBuffer();
            /*0x723d5d4*/ bool get_InternalHasFallbackBuffer();
            /*0x7240b78*/ void Reset();
            int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x7240c5c*/ int GetByteCount(char* chars, int count, bool flush);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x7240dc0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x7240fd0*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x72412ac*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
        }

        class InternalEncoderBestFitFallback : System.Text.EncoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;

            /*0x72414cc*/ InternalEncoderBestFitFallback(System.Text.Encoding encoding);
            /*0x72414fc*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x724169c*/ int get_MaxCharCount();
            /*0x72416a4*/ bool Equals(object value);
            /*0x7241768*/ int GetHashCode();
        }

        class InternalEncoderBestFitFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x30*/ char _cBestFit;
            /*0x38*/ System.Text.InternalEncoderBestFitFallback _oFallback;
            /*0x40*/ int _iCount;
            /*0x44*/ int _iSize;

            static /*0x724178c*/ object get_InternalSyncObject();
            /*0x7241554*/ InternalEncoderBestFitFallbackBuffer(System.Text.InternalEncoderBestFitFallback fallback);
            /*0x7241820*/ bool Fallback(char charUnknown, int index);
            /*0x7241924*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x7241ab8*/ char GetNextChar();
            /*0x7241af8*/ bool MovePrevious();
            /*0x7241b24*/ int get_Remaining();
            /*0x7241b30*/ void Reset();
            /*0x7241850*/ char TryBestFit(char cUnknown);
        }

        class EncoderExceptionFallback : System.Text.EncoderFallback
        {
            /*0x703e508*/ EncoderExceptionFallback();
            /*0x703e518*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x703e574*/ int get_MaxCharCount();
            /*0x703e57c*/ bool Equals(object value);
            /*0x703e5d8*/ int GetHashCode();
        }

        class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x703e56c*/ EncoderExceptionFallbackBuffer();
            /*0x703e5e8*/ bool Fallback(char charUnknown, int index);
            /*0x703e6bc*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x703ea6c*/ char GetNextChar();
            /*0x703ea74*/ bool MovePrevious();
            /*0x703ea7c*/ int get_Remaining();
        }

        class EncoderFallbackException : System.ArgumentException
        {
            /*0x98*/ char _charUnknown;
            /*0x9a*/ char _charUnknownHigh;
            /*0x9c*/ char _charUnknownLow;
            /*0xa0*/ int _index;

            /*0x703ea84*/ EncoderFallbackException();
            /*0x703e68c*/ EncoderFallbackException(string message, char charUnknown, int index);
            /*0x703e8d0*/ EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index);
            /*0x703eae0*/ EncoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class EncoderFallback
        {
            static /*0x0*/ System.Text.EncoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.EncoderFallback s_exceptionFallback;

            static /*0x703eae8*/ System.Text.EncoderFallback get_ReplacementFallback();
            static /*0x703ebc0*/ System.Text.EncoderFallback get_ExceptionFallback();
            /*0x703e510*/ EncoderFallback();
            /*0x38148bc*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x3814574*/ int get_MaxCharCount();
        }

        class EncoderFallbackBuffer
        {
            /*0x10*/ char* charStart;
            /*0x18*/ char* charEnd;
            /*0x20*/ System.Text.EncoderNLS encoder;
            /*0x28*/ bool setEncoder;
            /*0x29*/ bool bUsedEncoder;
            /*0x2a*/ bool bFallingBack;
            /*0x2c*/ int iRecursionCount;

            /*0x703e5e0*/ EncoderFallbackBuffer();
            bool Fallback(char charUnknown, int index);
            bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x3815648*/ char GetNextChar();
            /*0x3813ffc*/ bool MovePrevious();
            /*0x3814574*/ int get_Remaining();
            /*0x703ec58*/ void Reset();
            /*0x703ec80*/ void InternalReset();
            /*0x703ec98*/ void InternalInitialize(char* charStart, char* charEnd, System.Text.EncoderNLS encoder, bool setEncoder);
            /*0x703ecd4*/ char InternalGetNextChar();
            /*0x703ed04*/ bool InternalFallback(char ch, ref char* chars);
            /*0x703ee8c*/ void ThrowLastCharRecursive(int charRecursive);
        }

        class EncoderNLS : System.Text.Encoder
        {
            /*0x20*/ char _charLeftOver;
            /*0x28*/ System.Text.Encoding _encoding;
            /*0x30*/ bool _mustFlush;
            /*0x31*/ bool _throwOnOverflow;
            /*0x34*/ int _charsUsed;

            /*0x703ef18*/ EncoderNLS(System.Text.Encoding encoding);
            /*0x703ef78*/ void Reset();
            /*0x703ef98*/ int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x703f164*/ int GetByteCount(char* chars, int count, bool flush);
            /*0x703f254*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x703f4d4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x703f5ec*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x703f8a0*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x703fa54*/ System.Text.Encoding get_Encoding();
            /*0x703fa5c*/ bool get_MustFlush();
            /*0x703fa64*/ bool get_HasState();
            /*0x703fa74*/ void ClearMustFlush();
        }

        class EncoderReplacementFallback : System.Text.EncoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0x703eb78*/ EncoderReplacementFallback();
            /*0x703fc08*/ EncoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x703fa7c*/ EncoderReplacementFallback(string replacement);
            /*0x703fd2c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x703fd88*/ string get_DefaultString();
            /*0x703fd90*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x703fe38*/ int get_MaxCharCount();
            /*0x703fe54*/ bool Equals(object value);
            /*0x703fed4*/ int GetHashCode();
        }

        class EncoderReplacementFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x30*/ string _strDefault;
            /*0x38*/ int _fallbackCount;
            /*0x3c*/ int _fallbackIndex;

            /*0x703fde8*/ EncoderReplacementFallbackBuffer(System.Text.EncoderReplacementFallback fallback);
            /*0x703fef4*/ bool Fallback(char charUnknown, int index);
            /*0x7040020*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x70401ec*/ char GetNextChar();
            /*0x704023c*/ bool MovePrevious();
            /*0x704026c*/ int get_Remaining();
            /*0x7040278*/ void Reset();
        }

        class EncodingNLS : System.Text.Encoding
        {
            /*0x704028c*/ EncodingNLS(int codePage);
            /*0x7040294*/ int GetByteCount(char[] chars, int index, int count);
            /*0x704040c*/ int GetByteCount(string s);
            /*0x7040498*/ int GetByteCount(char* chars, int count);
            /*0x7040568*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x70407b0*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7040a14*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x7040b0c*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x7040c84*/ int GetCharCount(byte* bytes, int count);
            /*0x7040d54*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7040fb8*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x70410b0*/ string GetString(byte[] bytes, int index, int count);
            /*0x7041234*/ System.Text.Decoder GetDecoder();
            /*0x7041290*/ System.Text.Encoder GetEncoder();
        }

        class EncodingProvider
        {
            static /*0x0*/ object s_InternalSyncObject;
            static /*0x8*/ System.Text.EncodingProvider[] s_providers;

            static /*0x7041690*/ EncodingProvider();
            static /*0x70413e4*/ System.Text.Encoding GetEncodingFromProvider(int codepage);
            static /*0x70414c0*/ System.Text.Encoding GetEncodingFromProvider(string encodingName);
            static /*0x704159c*/ System.Text.Encoding GetEncodingFromProvider(int codepage, System.Text.EncoderFallback enc, System.Text.DecoderFallback dec);
            /*0x3814a3c*/ System.Text.Encoding GetEncoding(string name);
            /*0x3814964*/ System.Text.Encoding GetEncoding(int codepage);
            /*0x70412e8*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
        }

        class Latin1Encoding : System.Text.EncodingNLS, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Text.Latin1Encoding s_default;
            static /*0x8*/ char[] arrayCharBestFit;

            static /*0x70420e8*/ Latin1Encoding();
            /*0x704170c*/ Latin1Encoding();
            /*0x7041718*/ Latin1Encoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7041764*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x704184c*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x7041a6c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x7041e08*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x7041e10*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x7041e94*/ int GetMaxByteCount(int charCount);
            /*0x7041f94*/ int GetMaxCharCount(int byteCount);
            /*0x7042090*/ char[] GetBestFitUnicodeToBytesData();
        }

        enum NormalizationForm
        {
            FormC = 1,
            FormD = 2,
            FormKC = 5,
            FormKD = 6,
        }

        class StringBuilder : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ char[] m_ChunkChars;
            /*0x18*/ System.Text.StringBuilder m_ChunkPrevious;
            /*0x20*/ int m_ChunkLength;
            /*0x24*/ int m_ChunkOffset;
            /*0x28*/ int m_MaxCapacity;

            static /*0x7045cd8*/ void FormatError();
            static /*0x704267c*/ void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count);
            static /*0x70440cc*/ void ThreadSafeCopy(char[] source, int sourceIndex, System.Span<char> destination, int destinationIndex, int count);
            /*0x70421b4*/ StringBuilder();
            /*0x7042220*/ StringBuilder(int capacity);
            /*0x70423f8*/ StringBuilder(string value);
            /*0x7042414*/ StringBuilder(string value, int capacity);
            /*0x7042430*/ StringBuilder(string value, int startIndex, int length, int capacity);
            /*0x7042228*/ StringBuilder(int capacity, int maxCapacity);
            /*0x7042744*/ StringBuilder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7046380*/ StringBuilder(System.Text.StringBuilder from);
            /*0x70463dc*/ StringBuilder(int size, int maxCapacity, System.Text.StringBuilder previousBlock);
            /*0x7042a40*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7042b84*/ int get_Capacity();
            /*0x7042ba8*/ void set_Capacity(int value);
            /*0x7042d3c*/ int get_MaxCapacity();
            /*0x7042d44*/ int EnsureCapacity(int capacity);
            /*0x7042df8*/ string ToString();
            /*0x7042f14*/ string ToString(int startIndex, int length);
            /*0x7043278*/ System.Text.StringBuilder Clear();
            /*0x7042d30*/ int get_Length();
            /*0x7043294*/ void set_Length(int value);
            /*0x7043664*/ char get_Chars(int index);
            /*0x70436ec*/ void set_Chars(int index, char value);
            /*0x7043500*/ System.Text.StringBuilder Append(char value, int repeatCount);
            /*0x7043954*/ System.Text.StringBuilder Append(char[] value, int startIndex, int charCount);
            /*0x7043be0*/ System.Text.StringBuilder Append(string value);
            /*0x7043ce4*/ void AppendHelper(string value);
            /*0x7043d1c*/ System.Text.StringBuilder Append(string value, int startIndex, int count);
            /*0x7043e54*/ System.Text.StringBuilder Append(System.Text.StringBuilder value);
            /*0x7043e70*/ System.Text.StringBuilder AppendCore(System.Text.StringBuilder value, int startIndex, int count);
            /*0x7044088*/ System.Text.StringBuilder AppendLine();
            /*0x70440a8*/ System.Text.StringBuilder AppendLine(string value);
            /*0x70430ac*/ void CopyTo(int sourceIndex, System.Span<char> destination, int count);
            /*0x7044234*/ System.Text.StringBuilder Insert(int index, string value, int count);
            /*0x70447b0*/ System.Text.StringBuilder Remove(int startIndex, int length);
            /*0x7044a74*/ System.Text.StringBuilder Append(bool value);
            /*0x7044ac8*/ System.Text.StringBuilder Append(char value);
            /*0x7044b18*/ System.Text.StringBuilder Append(byte value);
            /*0x7044b70*/ System.Text.StringBuilder Append(int value);
            /*0x7044bc8*/ System.Text.StringBuilder Append(long value);
            /*0x7044c20*/ System.Text.StringBuilder Append(uint value);
            /*0x3910ae8*/ System.Text.StringBuilder AppendSpanFormattable<T>(T value);
            /*0x7044c78*/ System.Text.StringBuilder Append(object value);
            /*0x7044cb0*/ System.Text.StringBuilder Append(char[] value);
            /*0x7044cd8*/ System.Text.StringBuilder Append(System.ReadOnlySpan<char> value);
            /*0x7044d60*/ System.Text.StringBuilder Insert(int index, string value);
            /*0x7044ee0*/ System.Text.StringBuilder Insert(int index, char value);
            /*0x7044f0c*/ System.Text.StringBuilder Insert(int index, int value);
            /*0x7044f4c*/ System.Text.StringBuilder AppendFormat(string format, object arg0);
            /*0x7045aa8*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1);
            /*0x7045b04*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2);
            /*0x7045b64*/ System.Text.StringBuilder AppendFormat(string format, object[] args);
            /*0x7045c18*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0);
            /*0x7045c74*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
            /*0x7044fa4*/ System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
            /*0x7045d24*/ System.Text.StringBuilder Replace(string oldValue, string newValue);
            /*0x7045d34*/ System.Text.StringBuilder Replace(string oldValue, string newValue, int startIndex, int count);
            /*0x7043a90*/ System.Text.StringBuilder Append(char* value, int valueCount);
            /*0x7044e10*/ void Insert(int index, char* value, int valueCount);
            /*0x7046114*/ void ReplaceAllInChunk(int[] replacements, int replacementsCount, System.Text.StringBuilder sourceChunk, int removeCount, string value);
            /*0x704603c*/ bool StartsWith(System.Text.StringBuilder chunk, int indexInChunk, int count, string value);
            /*0x704469c*/ void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref int indexInChunk, char* value, int count);
            /*0x704363c*/ System.Text.StringBuilder FindChunkForIndex(int index);
            /*0x7046318*/ System.Span<char> get_RemainingCurrentChunk();
            /*0x70462d8*/ System.Text.StringBuilder Next(System.Text.StringBuilder chunk);
            /*0x70437a4*/ void ExpandByABlock(int minBlockCharCount);
            /*0x70443bc*/ void MakeRoom(int index, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk, bool doNotMoveFollowingChars);
            /*0x70448e4*/ void Remove(int startIndex, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk);
        }

        class StringBuilderCache
        {
            [ThreadStatic] static System.Text.StringBuilder t_cachedInstance;

            static /*0x7046484*/ System.Text.StringBuilder Acquire(int capacity);
            static /*0x7046558*/ void Release(System.Text.StringBuilder sb);
            static /*0x70465e0*/ string GetStringAndRelease(System.Text.StringBuilder sb);
        }

        class UTF32Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF32Encoding s_default;
            static /*0x8*/ System.Text.UTF32Encoding s_bigEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            /*0x38*/ bool _emitUTF32ByteOrderMark;
            /*0x39*/ bool _isThrowException;
            /*0x3a*/ bool _bigEndian;

            static /*0x7048bb8*/ UTF32Encoding();
            /*0x704661c*/ UTF32Encoding();
            /*0x70466b0*/ UTF32Encoding(bool bigEndian, bool byteOrderMark);
            /*0x7046644*/ UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
            /*0x70466ec*/ void SetDefaultFallbacks();
            /*0x70467d0*/ int GetByteCount(char[] chars, int index, int count);
            /*0x7046948*/ int GetByteCount(string s);
            /*0x70469d4*/ int GetByteCount(char* chars, int count);
            /*0x7046aa4*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7046cec*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7046f50*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x7047048*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x70471c0*/ int GetCharCount(byte* bytes, int count);
            /*0x7047290*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x70474f4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x70475ec*/ string GetString(byte[] bytes, int index, int count);
            /*0x7047770*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x7047a34*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x7047e1c*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x7048154*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x7047e00*/ uint GetSurrogate(char cHigh, char cLow);
            /*0x7048548*/ char GetHighSurrogate(uint iChar);
            /*0x704855c*/ char GetLowSurrogate(uint iChar);
            /*0x7048568*/ System.Text.Decoder GetDecoder();
            /*0x70485cc*/ System.Text.Encoder GetEncoder();
            /*0x7048624*/ int GetMaxByteCount(int charCount);
            /*0x7048724*/ int GetMaxCharCount(int byteCount);
            /*0x70487f0*/ byte[] GetPreamble();
            /*0x7048904*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x7048a78*/ bool Equals(object value);
            /*0x7048b3c*/ int GetHashCode();

            class UTF32Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int iChar;
                /*0x34*/ int readByteCount;

                /*0x70485c4*/ UTF32Decoder(System.Text.UTF32Encoding encoding);
                /*0x7048d14*/ void Reset();
                /*0x7048d34*/ bool get_HasState();
            }
        }

        class UTF7Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF7Encoding s_default;
            /*0x38*/ byte[] _base64Bytes;
            /*0x40*/ sbyte[] _base64Values;
            /*0x48*/ bool[] _directEncode;
            /*0x50*/ bool _allowOptionals;

            static /*0x704aa44*/ UTF7Encoding();
            /*0x7048d44*/ UTF7Encoding();
            /*0x7048d68*/ UTF7Encoding(bool allowOptionals);
            /*0x7048d98*/ void MakeTables();
            /*0x7049030*/ void SetDefaultFallbacks();
            /*0x70490ec*/ bool Equals(object value);
            /*0x70491bc*/ int GetHashCode();
            /*0x7049228*/ int GetByteCount(char[] chars, int index, int count);
            /*0x70493a0*/ int GetByteCount(string s);
            /*0x704942c*/ int GetByteCount(char* chars, int count);
            /*0x70494fc*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7049744*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x70499a8*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x7049aa0*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x7049c18*/ int GetCharCount(byte* bytes, int count);
            /*0x7049ce8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7049f4c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x704a044*/ string GetString(byte[] bytes, int index, int count);
            /*0x704a1c8*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x704a1e4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x704a580*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x704a59c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x704a850*/ System.Text.Decoder GetDecoder();
            /*0x704a8b4*/ System.Text.Encoder GetEncoder();
            /*0x704a910*/ int GetMaxByteCount(int charCount);
            /*0x704a9d0*/ int GetMaxCharCount(int byteCount);

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;
                /*0x34*/ int bitCount;
                /*0x38*/ bool firstByte;

                /*0x704a8ac*/ Decoder(System.Text.UTF7Encoding encoding);
                /*0x704aabc*/ void Reset();
                /*0x704aae4*/ bool get_HasState();
            }

            class Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int bits;
                /*0x3c*/ int bitCount;

                /*0x704a90c*/ Encoder(System.Text.UTF7Encoding encoding);
                /*0x704aaf4*/ void Reset();
                /*0x704ab18*/ bool get_HasState();
            }

            class DecoderUTF7Fallback : System.Text.DecoderFallback
            {
                /*0x70490e4*/ DecoderUTF7Fallback();
                /*0x704ab38*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
                /*0x704aba4*/ int get_MaxCharCount();
                /*0x704abac*/ bool Equals(object value);
                /*0x704ac08*/ int GetHashCode();
            }

            class DecoderUTF7FallbackBuffer : System.Text.DecoderFallbackBuffer
            {
                /*0x20*/ char cFallback;
                /*0x24*/ int iCount;
                /*0x28*/ int iSize;

                /*0x704ab94*/ DecoderUTF7FallbackBuffer(System.Text.UTF7Encoding.DecoderUTF7Fallback fallback);
                /*0x704ac10*/ bool Fallback(byte[] bytesUnknown, int index);
                /*0x704ac4c*/ char GetNextChar();
                /*0x704ac6c*/ int get_Remaining();
                /*0x704ac78*/ void Reset();
                /*0x704ac88*/ int InternalFallback(byte[] bytes, byte* pBytes);
            }
        }

        class UTF8Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF8Encoding.UTF8EncodingSealed s_default;
            static /*0x8*/ byte[] s_preamble;
            /*0x38*/ bool _emitUTF8Identifier;
            /*0x39*/ bool _isThrowException;

            static /*0x704dff8*/ UTF8Encoding();
            static /*0x704c450*/ int PtrDiff(char* a, char* b);
            static /*0x704c45c*/ int PtrDiff(byte* a, byte* b);
            static /*0x704c43c*/ bool InRange(int ch, int start, int end);
            /*0x704acfc*/ UTF8Encoding();
            /*0x704ad1c*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier);
            /*0x704ad4c*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
            /*0x704adac*/ void SetDefaultFallbacks();
            /*0x704ae90*/ int GetByteCount(char[] chars, int index, int count);
            /*0x704b008*/ int GetByteCount(string chars);
            /*0x704b094*/ int GetByteCount(char* chars, int count);
            /*0x704b164*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x704b3ac*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x704b610*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x704b708*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x704b880*/ int GetCharCount(byte* bytes, int count);
            /*0x704b950*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x704bbb4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x704bcac*/ string GetString(byte[] bytes, int index, int count);
            /*0x704be30*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x704c464*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x704cbd8*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x704d0bc*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x704d75c*/ bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback, ref char* pTarget);
            /*0x704d07c*/ int FallbackInvalidByteSequence(byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback);
            /*0x704d7cc*/ byte[] GetBytesUnknown(ref byte* pSrc, int ch);
            /*0x704d9c0*/ System.Text.Decoder GetDecoder();
            /*0x704da24*/ System.Text.Encoder GetEncoder();
            /*0x704da80*/ int GetMaxByteCount(int charCount);
            /*0x704db80*/ int GetMaxCharCount(int byteCount);
            /*0x704dc80*/ byte[] GetPreamble();
            /*0x704dd64*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x704dec8*/ bool Equals(object value);
            /*0x704df98*/ int GetHashCode();

            class UTF8EncodingSealed : System.Text.UTF8Encoding
            {
                /*0x704e0d4*/ UTF8EncodingSealed(bool encoderShouldEmitUTF8Identifier);
                /*0x704e14c*/ System.ReadOnlySpan<byte> get_Preamble();
            }

            class UTF8Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int surrogateChar;

                /*0x704da7c*/ UTF8Encoder(System.Text.UTF8Encoding encoding);
                /*0x704e230*/ void Reset();
                /*0x704e250*/ bool get_HasState();
            }

            class UTF8Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;

                /*0x704da1c*/ UTF8Decoder(System.Text.UTF8Encoding encoding);
                /*0x704e260*/ void Reset();
                /*0x704e280*/ bool get_HasState();
            }
        }

        class UnicodeEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UnicodeEncoding s_bigEndianDefault;
            static /*0x8*/ System.Text.UnicodeEncoding s_littleEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            static /*0x20*/ ulong highLowPatternMask;
            /*0x38*/ bool isThrowException;
            /*0x39*/ bool bigEndian;
            /*0x3a*/ bool byteOrderMark;

            static /*0x7051748*/ UnicodeEncoding();
            /*0x704e290*/ UnicodeEncoding();
            /*0x704e2dc*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark);
            /*0x704e31c*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
            /*0x704e414*/ void SetDefaultFallbacks();
            /*0x704e500*/ int GetByteCount(char[] chars, int index, int count);
            /*0x704e678*/ int GetByteCount(string s);
            /*0x704e704*/ int GetByteCount(char* chars, int count);
            /*0x704e7d4*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x704ea1c*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x704ec80*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x704ed78*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x704eef0*/ int GetCharCount(byte* bytes, int count);
            /*0x704efc0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x704f224*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x704f31c*/ string GetString(byte[] bytes, int index, int count);
            /*0x704f4a0*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x704f9c0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x70500e0*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x7050724*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x7051064*/ System.Text.Encoder GetEncoder();
            /*0x70510c0*/ System.Text.Decoder GetDecoder();
            /*0x7051134*/ byte[] GetPreamble();
            /*0x7051240*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x70513b4*/ int GetMaxByteCount(int charCount);
            /*0x70514b4*/ int GetMaxCharCount(int byteCount);
            /*0x70515b8*/ bool Equals(object value);
            /*0x70516cc*/ int GetHashCode();

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int lastByte;
                /*0x34*/ char lastChar;

                /*0x7051124*/ Decoder(System.Text.UnicodeEncoding encoding);
                /*0x70518fc*/ void Reset();
                /*0x7051924*/ bool get_HasState();
            }
        }

        struct ValueStringBuilder
        {
            /*0x10*/ char[] _arrayToReturnToPool;
            /*0x18*/ System.Span<char> _chars;
            /*0x28*/ int _pos;

            /*0x7051948*/ ValueStringBuilder(System.Span<char> initialBuffer);
            /*0x7051958*/ int get_Length();
            /*0x7051960*/ ref char get_Item(int index);
            /*0x7051984*/ string ToString();
            /*0x7051a50*/ bool TryCopyTo(System.Span<char> destination, ref int charsWritten);
            /*0x7051b3c*/ void Append(char c);
            /*0x7051c38*/ void Append(string s);
            /*0x7051ce4*/ void AppendSlow(string s);
            /*0x7052058*/ void Append(char c, int count);
            /*0x7052180*/ void Append(char* value, int length);
            /*0x7052260*/ System.Span<char> AppendSpan(int length);
            /*0x7051bb8*/ void GrowAndAppend(char c);
            /*0x7051e14*/ void Grow(int requiredAdditionalCapacity);
            /*0x705231c*/ void Dispose();
        }

        struct ValueUtf8Converter
        {
            /*0x10*/ byte[] _arrayToReturnToPool;
            /*0x18*/ System.Span<byte> _bytes;

            /*0x7052414*/ ValueUtf8Converter(System.Span<byte> initialBuffer);
            /*0x7052420*/ System.Span<byte> ConvertAndTerminateString(System.ReadOnlySpan<char> value);
            /*0x70526b8*/ void Dispose();
        }

        class Encoding : System.ICloneable
        {
            static /*0x0*/ System.Text.Encoding defaultEncoding;
            static /*0x8*/ System.Text.Encoding unicodeEncoding;
            static /*0x10*/ System.Text.Encoding bigEndianUnicode;
            static /*0x18*/ System.Text.Encoding utf7Encoding;
            static /*0x20*/ System.Text.Encoding utf8Encoding;
            static /*0x28*/ System.Text.Encoding utf32Encoding;
            static /*0x30*/ System.Text.Encoding asciiEncoding;
            static /*0x38*/ System.Text.Encoding latin1Encoding;
            static /*0x40*/ System.Collections.Generic.Dictionary<int, System.Text.Encoding> encodings;
            static /*0x48*/ object s_InternalSyncObject;
            /*0x10*/ int m_codePage;
            /*0x18*/ System.Globalization.CodePageDataItem dataItem;
            /*0x20*/ bool m_deserializedFromEverett;
            /*0x21*/ bool m_isReadOnly;
            /*0x28*/ System.Text.EncoderFallback encoderFallback;
            /*0x30*/ System.Text.DecoderFallback decoderFallback;

            static /*0x7052ed0*/ object get_InternalSyncObject();
            static /*0x7052f68*/ System.Text.Encoding GetEncoding(int codepage);
            static /*0x705440c*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
            static /*0x7054688*/ System.Text.Encoding GetEncoding(string name);
            static /*0x7053bbc*/ System.Text.Encoding get_ASCII();
            static /*0x7053c60*/ System.Text.Encoding get_Latin1();
            static /*0x7055808*/ System.Text.Encoding CreateDefaultEncoding();
            static /*0x705383c*/ System.Text.Encoding get_Default();
            static /*0x70538c8*/ System.Text.Encoding get_Unicode();
            static /*0x7053998*/ System.Text.Encoding get_BigEndianUnicode();
            static /*0x7053a6c*/ System.Text.Encoding get_UTF7();
            static /*0x7052610*/ System.Text.Encoding get_UTF8();
            static /*0x7053b10*/ System.Text.Encoding get_UTF32();
            /*0x70527ac*/ Encoding();
            /*0x704e38c*/ Encoding(int codePage);
            /*0x70527dc*/ void SetDefaultFallbacks();
            /*0x7052884*/ void OnDeserializing();
            /*0x70528b8*/ void OnDeserialized();
            /*0x70528fc*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7052930*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7052934*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7052940*/ void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7052d28*/ void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7054724*/ byte[] GetPreamble();
            /*0x705477c*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x70547d0*/ void GetDataItem();
            /*0x705490c*/ string get_EncodingName();
            /*0x7054918*/ string get_HeaderName();
            /*0x7054948*/ string get_WebName();
            /*0x7054978*/ System.Text.EncoderFallback get_EncoderFallback();
            /*0x7054510*/ void set_EncoderFallback(System.Text.EncoderFallback value);
            /*0x7054980*/ System.Text.DecoderFallback get_DecoderFallback();
            /*0x70545cc*/ void set_DecoderFallback(System.Text.DecoderFallback value);
            /*0x7054988*/ object Clone();
            /*0x7054a10*/ bool get_IsReadOnly();
            /*0x7054a18*/ int GetByteCount(string s);
            int GetByteCount(char[] chars, int index, int count);
            /*0x7054aa4*/ int GetByteCount(char* chars, int count);
            /*0x7054c14*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x7054c24*/ byte[] GetBytes(char[] chars, int index, int count);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7054ce0*/ byte[] GetBytes(string s);
            /*0x7054de0*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7054e8c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x7054e9c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x70550b8*/ int GetCharCount(byte* bytes, int count);
            /*0x7055228*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x7055238*/ char[] GetChars(byte[] bytes, int index, int count);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x70552f4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x7055510*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x7055520*/ string GetString(byte* bytes, int byteCount);
            /*0x7055604*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars);
            /*0x70556d8*/ string GetString(System.ReadOnlySpan<byte> bytes);
            /*0x7055754*/ int get_CodePage();
            /*0x705575c*/ System.Text.Decoder GetDecoder();
            /*0x70559e4*/ void setReadOnly(bool value);
            /*0x70559f0*/ System.Text.Encoder GetEncoder();
            /*0x38145a0*/ int GetMaxByteCount(int charCount);
            /*0x38145a0*/ int GetMaxCharCount(int byteCount);
            /*0x7055a9c*/ string GetString(byte[] bytes);
            /*0x7055b2c*/ string GetString(byte[] bytes, int index, int count);
            /*0x7055b54*/ bool Equals(object value);
            /*0x7055c24*/ int GetHashCode();
            /*0x7055c7c*/ char[] GetBestFitUnicodeToBytesData();
            /*0x7055cd4*/ char[] GetBestFitBytesToUnicodeData();
            /*0x7055d2c*/ void ThrowBytesOverflow();
            /*0x7050068*/ void ThrowBytesOverflow(System.Text.EncoderNLS encoder, bool nothingEncoded);
            /*0x7055e30*/ void ThrowCharsOverflow();
            /*0x7050fec*/ void ThrowCharsOverflow(System.Text.DecoderNLS decoder, bool nothingDecoded);
            /*0x7055f34*/ int GetByteCount(System.ReadOnlySpan<char> chars);
            /*0x7055fbc*/ int GetBytes(System.ReadOnlySpan<char> chars, System.Span<byte> bytes);

            class DefaultEncoder : System.Text.Encoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;
                /*0x2a*/ char charLeftOver;

                /*0x7055a60*/ DefaultEncoder(System.Text.Encoding encoding);
                /*0x7056090*/ DefaultEncoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70563e8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x70564b0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7056550*/ int GetByteCount(char[] chars, int index, int count, bool flush);
                /*0x7056574*/ int GetByteCount(char* chars, int count, bool flush);
                /*0x7056598*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
                /*0x70565bc*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            }

            class DefaultDecoder : System.Text.Decoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;

                /*0x70557cc*/ DefaultDecoder(System.Text.Encoding encoding);
                /*0x70565e0*/ DefaultDecoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70568d8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x705692c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70569cc*/ int GetCharCount(byte[] bytes, int index, int count);
                /*0x70569dc*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
                /*0x7056a00*/ int GetCharCount(byte* bytes, int count, bool flush);
                /*0x7056a24*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
                /*0x7056a34*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
                /*0x7056a58*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            }

            class EncodingCharBuffer
            {
                /*0x10*/ char* chars;
                /*0x18*/ char* charStart;
                /*0x20*/ char* charEnd;
                /*0x28*/ int charCountResult;
                /*0x30*/ System.Text.Encoding enc;
                /*0x38*/ System.Text.DecoderNLS decoder;
                /*0x40*/ byte* byteStart;
                /*0x48*/ byte* byteEnd;
                /*0x50*/ byte* bytes;
                /*0x58*/ System.Text.DecoderFallbackBuffer fallbackBuffer;

                /*0x7056a7c*/ EncodingCharBuffer(System.Text.Encoding enc, System.Text.DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount);
                /*0x7056b5c*/ bool AddChar(char ch, int numBytes);
                /*0x7056bcc*/ bool AddChar(char ch);
                /*0x7056bd4*/ void AdjustBytes(int count);
                /*0x7056be4*/ bool get_MoreData();
                /*0x7056bf4*/ byte GetNextByte();
                /*0x7056c18*/ int get_BytesUsed();
                /*0x7056c28*/ bool Fallback(byte fallbackByte);
                /*0x7056ca0*/ bool Fallback(byte[] byteBuffer);
                /*0x7056d7c*/ int get_Count();
            }

            class EncodingByteBuffer
            {
                /*0x10*/ byte* bytes;
                /*0x18*/ byte* byteStart;
                /*0x20*/ byte* byteEnd;
                /*0x28*/ char* chars;
                /*0x30*/ char* charStart;
                /*0x38*/ char* charEnd;
                /*0x40*/ int byteCountResult;
                /*0x48*/ System.Text.Encoding enc;
                /*0x50*/ System.Text.EncoderNLS encoder;
                /*0x58*/ System.Text.EncoderFallbackBuffer fallbackBuffer;

                /*0x7056d84*/ EncodingByteBuffer(System.Text.Encoding inEncoding, System.Text.EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount);
                /*0x7056fc8*/ bool AddByte(byte b, int moreBytesExpected);
                /*0x7057094*/ bool AddByte(byte b1);
                /*0x705709c*/ bool AddByte(byte b1, byte b2);
                /*0x70570a4*/ bool AddByte(byte b1, byte b2, int moreBytesExpected);
                /*0x7057018*/ void MovePrevious(bool bThrow);
                /*0x70570ec*/ bool get_MoreData();
                /*0x7057134*/ char GetNextChar();
                /*0x7057184*/ int get_CharsUsed();
                /*0x705719c*/ int get_Count();
            }
        }

        enum NormalizationCheck
        {
            Yes = 0,
            No = 1,
            Maybe = 2,
        }

        class Normalization
        {
            static /*0x0*/ byte* props;
            static /*0x8*/ int* mappedChars;
            static /*0x10*/ short* charMapIndex;
            static /*0x18*/ short* helperIndex;
            static /*0x20*/ ushort* mapIdxToComposite;
            static /*0x28*/ byte* combiningClass;
            static /*0x30*/ object forLock;
            static /*0x38*/ bool isReady;

            static /*0x70588a0*/ Normalization();
            static /*0x70571a4*/ uint PropValue(int cp);
            static /*0x7057238*/ int CharMapIdx(int cp);
            static /*0x70572cc*/ byte GetCombiningClass(int c);
            static /*0x7057374*/ int GetPrimaryCompositeFromMapIndex(int src);
            static /*0x705741c*/ int GetPrimaryCompositeHelperIndex(int cp);
            static /*0x70574c4*/ string Compose(string source, int checkType);
            static /*0x70576d8*/ System.Text.StringBuilder Combine(string source, int start, int checkType);
            static /*0x7057814*/ void Combine(System.Text.StringBuilder sb, int i, int checkType);
            static /*0x7057a58*/ int CombineHangul(System.Text.StringBuilder sb, string s, int current);
            static /*0x7057e50*/ int Fetch(System.Text.StringBuilder sb, string s, int i);
            static /*0x7057c1c*/ int TryComposeWithPreviousStarter(System.Text.StringBuilder sb, string s, int current);
            static /*0x7057e8c*/ int TryCompose(int i, int starter, int candidate);
            static /*0x7057fa4*/ string Decompose(string source, int checkType);
            static /*0x70575a4*/ void Decompose(string source, ref System.Text.StringBuilder sb, int checkType);
            static /*0x7058220*/ void ReorderCanonical(string src, ref System.Text.StringBuilder sb, int start);
            static /*0x7058030*/ void DecomposeChar(ref System.Text.StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start);
            static /*0x7057924*/ System.Text.NormalizationCheck QuickCheck(char c, int type);
            static /*0x7058654*/ int GetCanonicalHangul(int s, int[] buf, int bufIdx);
            static /*0x705849c*/ int GetCanonical(int c, int[] buf, int bufIdx, int checkType);
            static /*0x7058740*/ string Normalize(string source, System.Text.NormalizationForm normalizationForm);
            static /*0x70587fc*/ string Normalize(string source, int type);
            static /*0x705889c*/ void load_normalization_resource(ref nint props, ref nint mappedChars, ref nint charMapIndex, ref nint helperIndex, ref nint mapIdxToComposite, ref nint combiningClass);
        }

        class EncodingHelper
        {
            static /*0x0*/ System.Text.Encoding utf8EncodingWithoutMarkers;
            static /*0x8*/ object lockobj;
            static /*0x10*/ System.Reflection.Assembly i18nAssembly;
            static /*0x18*/ bool i18nDisabled;

            static /*0x7058ca4*/ EncodingHelper();
            static /*0x7058aac*/ System.Text.Encoding get_UTF8Unmarked();
            static /*0x7058ca0*/ string InternalCodePage(ref int code_page);
            static /*0x7055868*/ System.Text.Encoding GetDefaultEncoding();
            static /*0x7053d04*/ object InvokeI18N(string name, object[] args);
        }
    }

    namespace Security
    {
        interface IPermission : System.Security.ISecurityEncodable
        {
            /*0x38159dc*/ void Demand();
            /*0x38141c4*/ bool IsSubsetOf(System.Security.IPermission target);
        }

        interface ISecurityEncodable
        {
            /*0x38148bc*/ System.Security.SecurityElement ToXml();
        }

        class XmlSyntaxException : System.SystemException
        {
            /*0x7058d18*/ XmlSyntaxException();
            /*0x7058d20*/ XmlSyntaxException(int lineNumber);
            /*0x7058d28*/ XmlSyntaxException(int lineNumber, string message);
            /*0x7058d30*/ XmlSyntaxException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SecurityTreatAsSafeAttribute : System.Attribute
        {
            /*0x7058d38*/ SecurityTreatAsSafeAttribute();
        }

        class SecurityDocument
        {
            /*0x10*/ byte[] m_data;

            static /*0x7059040*/ int EncodedStringSize(string str);
            /*0x7058d40*/ SecurityDocument(int numData);
            /*0x7058db0*/ void GuaranteeSize(int size);
            /*0x7058e68*/ void AddString(string str, ref int position);
            /*0x7058fb4*/ void AppendString(string str, ref int position);
            /*0x7059060*/ string GetString(ref int position, bool bCreate);
            /*0x70595b8*/ void AddToken(byte b, ref int position);
            /*0x7059614*/ System.Security.SecurityElement GetRootElement();
            /*0x7059630*/ System.Security.SecurityElement GetElement(int position, bool bCreate);
            /*0x705964c*/ System.Security.SecurityElement InternalGetElement(ref int position, bool bCreate);
        }

        class CodeAccessPermission : System.Security.IPermission, System.Security.ISecurityEncodable
        {
            static /*0x7059d38*/ System.Security.Permissions.PermissionState CheckPermissionState(System.Security.Permissions.PermissionState state, bool allowUnrestricted);
            /*0x7059ad8*/ CodeAccessPermission();
            /*0x7059ae0*/ void Demand();
            /*0x7059bf0*/ bool Equals(object obj);
            /*0x7059d08*/ int GetHashCode();
            /*0x38141c4*/ bool IsSubsetOf(System.Security.IPermission target);
            /*0x7059d10*/ string ToString();
            /*0x38148bc*/ System.Security.SecurityElement ToXml();
            /*0x7059de4*/ void System.Security.IPermission.Demand();
        }

        class NamedPermissionSet : System.Security.PermissionSet
        {
            /*0x30*/ string name;
            /*0x38*/ string description;

            /*0x7059de8*/ NamedPermissionSet();
            /*0x7059ea8*/ NamedPermissionSet(string name, System.Security.Permissions.PermissionState state);
            /*0x7059ff8*/ NamedPermissionSet(string name);
            /*0x705a000*/ string get_Name();
            /*0x7059f58*/ void set_Name(string value);
            /*0x705a008*/ System.Security.SecurityElement ToXml();
            /*0x705a4fc*/ bool Equals(object obj);
            /*0x705a728*/ int GetHashCode();
        }

        class PermissionSet : System.Security.ISecurityEncodable, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback
        {
            static /*0x0*/ object[] psUnrestricted;
            static /*0x8*/ object[] action;
            /*0x10*/ System.Security.Permissions.PermissionState state;
            /*0x18*/ System.Collections.ArrayList list;
            /*0x20*/ bool _declsec;
            /*0x28*/ bool[] _ignored;

            static /*0x705af84*/ PermissionSet();
            /*0x7059e3c*/ PermissionSet();
            /*0x7059f28*/ PermissionSet(System.Security.Permissions.PermissionState state);
            /*0x7059b14*/ PermissionSet(System.Security.IPermission perm);
            /*0x705a7a4*/ void CopyTo(System.Array array, int index);
            /*0x705a90c*/ void Demand();
            /*0x7059b60*/ void CasOnlyDemand(int skip);
            /*0x705aee4*/ System.Collections.IEnumerator GetEnumerator();
            /*0x705ab38*/ bool IsEmpty();
            /*0x705aed4*/ bool IsUnrestricted();
            /*0x705af08*/ string ToString();
            /*0x705a0a0*/ System.Security.SecurityElement ToXml();
            /*0x705af34*/ int get_Count();
            /*0x705af58*/ bool get_IsSynchronized();
            /*0x705af7c*/ object get_SyncRoot();
            /*0x705af80*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x705a58c*/ bool Equals(object obj);
            /*0x705a760*/ int GetHashCode();
        }

        class SecureString : System.IDisposable
        {
            /*0x10*/ int length;
            /*0x14*/ bool disposed;
            /*0x18*/ byte[] data;

            /*0x705b104*/ SecureString();
            /*0x705b2c4*/ SecureString(char* value, int length);
            /*0x705b408*/ int get_Length();
            /*0x705b468*/ void Dispose();
            /*0x705b404*/ void Encrypt();
            /*0x705b4b8*/ void Decrypt();
            /*0x705b128*/ void Alloc(int length, bool realloc);
            /*0x705b4bc*/ byte[] GetBuffer();
        }

        enum SecurityElementType
        {
            Regular = 0,
            Format = 1,
            Comment = 2,
        }

        class SecurityElement
        {
            static /*0x0*/ char[] invalid_tag_chars;
            static /*0x8*/ char[] invalid_text_chars;
            static /*0x10*/ char[] invalid_attr_name_chars;
            static /*0x18*/ char[] invalid_attr_value_chars;
            static /*0x20*/ char[] invalid_chars;
            /*0x10*/ string text;
            /*0x18*/ string tag;
            /*0x20*/ System.Collections.ArrayList attributes;
            /*0x28*/ System.Collections.ArrayList children;

            static /*0x705cc40*/ SecurityElement();
            static /*0x705bf04*/ string Escape(string str);
            static /*0x705b8c0*/ string Unescape(string str);
            static /*0x705c10c*/ bool IsValidAttributeName(string name);
            static /*0x705c188*/ bool IsValidAttributeValue(string value);
            static /*0x705b6bc*/ bool IsValidTag(string tag);
            static /*0x705b844*/ bool IsValidText(string text);
            /*0x7059854*/ SecurityElement(string tag);
            /*0x705b56c*/ SecurityElement(string tag, string text);
            /*0x705b834*/ System.Collections.ArrayList get_Children();
            /*0x705b83c*/ string get_Tag();
            /*0x705b738*/ void set_Text(string value);
            /*0x705985c*/ void AddAttribute(string name, string value);
            /*0x7059a00*/ void AddChild(System.Security.SecurityElement child);
            /*0x705c204*/ System.Security.SecurityElement SearchForChildByTag(string tag);
            /*0x705c328*/ string ToString();
            /*0x705c3b0*/ void ToXml(ref System.Text.StringBuilder s, int level);
            /*0x705ba90*/ System.Security.SecurityElement.SecurityAttribute GetAttribute(string name);
            /*0x705c9f8*/ void set_m_strText(string value);
            /*0x705ca00*/ string SearchForTextOfLocalName(string strLocalName);

            class SecurityAttribute
            {
                /*0x10*/ string _name;
                /*0x18*/ string _value;

                /*0x705bd94*/ SecurityAttribute(string name, string value);
                /*0x705cdec*/ string get_Name();
                /*0x705cdf4*/ string get_Value();
            }
        }

        class SecurityException : System.SystemException
        {
            /*0x90*/ string permissionState;

            /*0x705cdfc*/ SecurityException();
            /*0x705ce64*/ SecurityException(string message);
            /*0x705ce88*/ SecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x705cfa8*/ SecurityException(string message, System.Exception inner);
            /*0x705cfcc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x705d0cc*/ string ToString();
        }

        class SecurityManager
        {
            static /*0x7059b0c*/ bool get_SecurityEnabled();
            static /*0x705d0d4*/ void EnsureElevatedPermissions();
        }

        namespace Util
        {
            class Parser
            {
                /*0x10*/ System.Security.SecurityDocument _doc;
                /*0x18*/ System.Security.Util.Tokenizer _t;

                /*0x705e6cc*/ Parser(System.Security.Util.Tokenizer t);
                /*0x705e790*/ Parser(string input);
                /*0x705d0d8*/ System.Security.SecurityElement GetTopElement();
                /*0x705d100*/ void GetRequiredSizes(System.Security.Util.TokenizerStream stream, ref int index);
                /*0x705d644*/ int DetermineFormat(System.Security.Util.TokenizerStream stream);
                /*0x705e260*/ void ParseContents();
            }

            class Tokenizer
            {
                /*0x10*/ int LineNo;
                /*0x14*/ int _inProcessingTag;
                /*0x18*/ byte[] _inBytes;
                /*0x20*/ char[] _inChars;
                /*0x28*/ string _inString;
                /*0x30*/ int _inIndex;
                /*0x34*/ int _inSize;
                /*0x38*/ int _inSavedCharacter;
                /*0x3c*/ System.Security.Util.Tokenizer.TokenSource _inTokenSource;
                /*0x40*/ System.Security.Util.Tokenizer.ITokenReader _inTokenReader;
                /*0x48*/ System.Security.Util.Tokenizer.StringMaker _maker;
                /*0x50*/ string[] _searchStrings;
                /*0x58*/ string[] _replaceStrings;
                /*0x60*/ int _inNestedIndex;
                /*0x64*/ int _inNestedSize;
                /*0x68*/ string _inNestedString;

                /*0x705e7f8*/ Tokenizer(string input);
                /*0x705e84c*/ void BasicInitialization();
                /*0x705e8cc*/ void Recycle();
                /*0x705e024*/ void ChangeFormat(System.Text.Encoding encoding);
                /*0x705d7d0*/ void GetTokens(System.Security.Util.TokenizerStream stream, int maxNum, bool endAfterKet);
                /*0x705ea5c*/ string GetStringToken();

                enum TokenSource
                {
                    UnicodeByteArray = 0,
                    UTF8ByteArray = 1,
                    ASCIIByteArray = 2,
                    CharArray = 3,
                    String = 4,
                    NestedStrings = 5,
                    Other = 6,
                }

                class StringMaker
                {
                    /*0x10*/ string[] aStrings;
                    /*0x18*/ uint cStringsMax;
                    /*0x1c*/ uint cStringsUsed;
                    /*0x20*/ System.Text.StringBuilder _outStringBuilder;
                    /*0x28*/ char[] _outChars;
                    /*0x30*/ int _outIndex;

                    static /*0x705eb5c*/ uint HashString(string str);
                    static /*0x705ebc8*/ uint HashCharArray(char[] a, int l);
                    /*0x705ec24*/ StringMaker();
                    /*0x705eccc*/ bool CompareStringAndChars(string str, char[] a, int l);
                    /*0x7059384*/ string MakeString();
                }

                interface ITokenReader
                {
                    /*0x3814574*/ int Read();
                }

                class StreamTokenReader : System.Security.Util.Tokenizer.ITokenReader
                {
                    /*0x10*/ System.IO.StreamReader _in;
                    /*0x18*/ int _numCharRead;

                    /*0x705e924*/ StreamTokenReader(System.IO.StreamReader input);
                    /*0x705ed6c*/ int Read();
                    /*0x705eda8*/ int get_NumCharEncountered();
                }
            }

            class TokenizerShortBlock
            {
                /*0x10*/ short[] m_block;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_next;

                /*0x705edb0*/ TokenizerShortBlock();
            }

            class TokenizerStringBlock
            {
                /*0x10*/ string[] m_block;
                /*0x18*/ System.Security.Util.TokenizerStringBlock m_next;

                /*0x705ee14*/ TokenizerStringBlock();
            }

            class TokenizerStream
            {
                /*0x10*/ int m_countTokens;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_headTokens;
                /*0x20*/ System.Security.Util.TokenizerShortBlock m_lastTokens;
                /*0x28*/ System.Security.Util.TokenizerShortBlock m_currentTokens;
                /*0x30*/ int m_indexTokens;
                /*0x38*/ System.Security.Util.TokenizerStringBlock m_headStrings;
                /*0x40*/ System.Security.Util.TokenizerStringBlock m_currentStrings;
                /*0x48*/ int m_indexStrings;

                /*0x705e538*/ TokenizerStream();
                /*0x705e95c*/ void AddToken(short token);
                /*0x705ea74*/ void AddString(string str);
                /*0x705e5e8*/ void Reset();
                /*0x705e62c*/ short GetNextFullToken();
                /*0x705d540*/ short GetNextToken();
                /*0x705d5cc*/ string GetNextString();
                /*0x705d554*/ void ThrowAwayNextString();
                /*0x705d558*/ void TagLastToken(short tag);
                /*0x705ee78*/ int GetTokenCount();
                /*0x705dfd8*/ void GoToPosition(int position);
            }
        }

        namespace Policy
        {
            class Evidence : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ bool _locked;
                /*0x18*/ System.Collections.ArrayList hostEvidenceList;
                /*0x20*/ System.Collections.ArrayList assemblyEvidenceList;

                /*0x705ee80*/ Evidence();
                /*0x705ee88*/ int get_Count();
                /*0x705eee4*/ bool get_IsSynchronized();
                /*0x705eeec*/ object get_SyncRoot();
                /*0x705eef0*/ void CopyTo(System.Array array, int index);
                /*0x705efb4*/ System.Collections.IEnumerator GetEnumerator();

                class EvidenceEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.IEnumerator currentEnum;
                    /*0x18*/ System.Collections.IEnumerator hostEnum;
                    /*0x20*/ System.Collections.IEnumerator assemblyEnum;

                    /*0x705f058*/ EvidenceEnumerator(System.Collections.IEnumerator hostenum, System.Collections.IEnumerator assemblyenum);
                    /*0x705f0b8*/ bool MoveNext();
                    /*0x705f204*/ void Reset();
                    /*0x705f32c*/ object get_Current();
                }
            }
        }

        namespace Permissions
        {
            enum PermissionState
            {
                None = 0,
                Unrestricted = 1,
            }

            enum SecurityAction
            {
                Demand = 2,
                Assert = 3,
                Deny = 4,
                PermitOnly = 5,
                LinkDemand = 6,
                InheritanceDemand = 7,
                RequestMinimum = 8,
                RequestOptional = 9,
                RequestRefuse = 10,
            }
        }

        namespace Cryptography
        {
            class CryptoStream : System.IO.Stream, System.IDisposable
            {
                /*0x28*/ System.IO.Stream _stream;
                /*0x30*/ System.Security.Cryptography.ICryptoTransform _transform;
                /*0x38*/ System.Security.Cryptography.CryptoStreamMode _transformMode;
                /*0x40*/ byte[] _inputBuffer;
                /*0x48*/ int _inputBufferIndex;
                /*0x4c*/ int _inputBlockSize;
                /*0x50*/ byte[] _outputBuffer;
                /*0x58*/ int _outputBufferIndex;
                /*0x5c*/ int _outputBlockSize;
                /*0x60*/ bool _canRead;
                /*0x61*/ bool _canWrite;
                /*0x62*/ bool _finalBlockTransformed;
                /*0x68*/ System.Threading.SemaphoreSlim _lazyAsyncActiveSemaphore;
                /*0x70*/ bool _leaveOpen;

                /*0x705f3d0*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
                /*0x705f3d8*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, bool leaveOpen);
                /*0x705f738*/ bool get_CanRead();
                /*0x705f740*/ bool get_CanSeek();
                /*0x705f748*/ bool get_CanWrite();
                /*0x705f750*/ long get_Length();
                /*0x705f79c*/ long get_Position();
                /*0x705f7e8*/ void set_Position(long value);
                /*0x705f834*/ bool get_HasFlushedFinalBlock();
                /*0x705f83c*/ void FlushFinalBlock();
                /*0x705fa68*/ void Flush();
                /*0x705fa6c*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
                /*0x705fbe8*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x705fc34*/ void SetLength(long value);
                /*0x705fc80*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x705ff60*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x7060014*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x705fe00*/ System.Threading.Tasks.Task<int> ReadAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x706005c*/ int ReadByte();
                /*0x70600d8*/ void WriteByte(byte value);
                /*0x706012c*/ int Read(byte[] buffer, int offset, int count);
                /*0x705fcc8*/ void CheckReadArguments(byte[] buffer, int offset, int count);
                /*0x70601f0*/ System.Threading.Tasks.Task<int> ReadAsyncCore(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken, bool useAsync);
                /*0x7060368*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x7060618*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x70606cc*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x70604e8*/ System.Threading.Tasks.Task WriteAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x70606d8*/ void Write(byte[] buffer, int offset, int count);
                /*0x70603b0*/ void CheckWriteArguments(byte[] buffer, int offset, int count);
                /*0x7060748*/ System.Threading.Tasks.Task WriteAsyncCore(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken, bool useAsync);
                /*0x7060898*/ void Clear();
                /*0x70608a8*/ void Dispose(bool disposing);
                /*0x705f5c4*/ void InitializeBuffer();
                /*0x7060958*/ System.Threading.SemaphoreSlim get_AsyncActiveSemaphore();

                struct <ReadAsyncInternal>d__37 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ byte[] buffer;
                    /*0x40*/ int offset;
                    /*0x44*/ int count;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ System.Threading.SemaphoreSlim <semaphore>5__2;
                    /*0x58*/ System.Threading.Tasks.ForceAsyncAwaiter <>u__1;
                    /*0x60*/ System.Runtime.CompilerServices.TaskAwaiter<int> <>u__2;

                    /*0x7060a50*/ void MoveNext();
                    /*0x7060ecc*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <ReadAsyncCore>d__42 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ int count;
                    /*0x34*/ int offset;
                    /*0x38*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ bool useAsync;
                    /*0x50*/ System.Threading.CancellationToken cancellationToken;
                    /*0x58*/ int <bytesToDeliver>5__2;
                    /*0x5c*/ int <currentOutputIndex>5__3;
                    /*0x60*/ int <numWholeBlocksInBytes>5__4;
                    /*0x68*/ byte[] <tempInputBuffer>5__5;
                    /*0x70*/ byte[] <tempOutputBuffer>5__6;
                    /*0x78*/ System.Runtime.CompilerServices.ValueTaskAwaiter<int> <>u__1;

                    /*0x7060f48*/ void MoveNext();
                    /*0x7061fa0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncInternal>d__46 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ byte[] buffer;
                    /*0x40*/ int offset;
                    /*0x44*/ int count;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ System.Threading.SemaphoreSlim <semaphore>5__2;
                    /*0x58*/ System.Threading.Tasks.ForceAsyncAwaiter <>u__1;
                    /*0x60*/ System.Runtime.CompilerServices.TaskAwaiter <>u__2;

                    /*0x7062114*/ void MoveNext();
                    /*0x70624ec*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncCore>d__49 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ int count;
                    /*0x34*/ int offset;
                    /*0x38*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ bool useAsync;
                    /*0x50*/ System.Threading.CancellationToken cancellationToken;
                    /*0x58*/ int <bytesToWrite>5__2;
                    /*0x5c*/ int <currentInputIndex>5__3;
                    /*0x60*/ int <numOutputBytes>5__4;
                    /*0x68*/ System.Runtime.CompilerServices.ValueTaskAwaiter <>u__1;
                    /*0x78*/ int <numWholeBlocksInBytes>5__5;
                    /*0x80*/ byte[] <tempOutputBuffer>5__6;

                    /*0x7062554*/ void MoveNext();
                    /*0x7063b74*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                class <>c
                {
                    static /*0x0*/ System.Security.Cryptography.CryptoStream.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__54_0;

                    static /*0x7063bdc*/ <>c();
                    /*0x7063c44*/ <>c();
                    /*0x7063c4c*/ System.Threading.SemaphoreSlim <get_AsyncActiveSemaphore>b__54_0();
                }
            }

            enum CryptoStreamMode
            {
                Read = 0,
                Write = 1,
            }

            class CryptographicOperations
            {
                static /*0x7063ca8*/ void ZeroMemory(System.Span<byte> buffer);
            }

            class HashAlgorithm : System.IDisposable, System.Security.Cryptography.ICryptoTransform
            {
                /*0x10*/ bool _disposed;
                /*0x14*/ int HashSizeValue;
                /*0x18*/ byte[] HashValue;
                /*0x20*/ int State;

                static /*0x7063d18*/ System.Security.Cryptography.HashAlgorithm Create(string hashName);
                /*0x7063d10*/ HashAlgorithm();
                /*0x7063d98*/ int get_HashSize();
                /*0x7063da0*/ byte[] get_Hash();
                /*0x7063ed4*/ byte[] ComputeHash(byte[] buffer);
                /*0x7064034*/ byte[] ComputeHash(byte[] buffer, int offset, int count);
                /*0x7063f78*/ byte[] CaptureHashCodeAndReinitialize();
                /*0x7064194*/ void Dispose();
                /*0x7064200*/ void Clear();
                /*0x7064294*/ void Dispose(bool disposing);
                /*0x70642a4*/ int get_InputBlockSize();
                /*0x70642ac*/ int get_OutputBlockSize();
                /*0x70642b4*/ bool get_CanTransformMultipleBlocks();
                /*0x70642bc*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x706449c*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x7064358*/ void ValidateTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x38148bc*/ byte[] HashFinal();
                /*0x38159dc*/ void Initialize();
            }

            class Aes : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x7064680*/ Aes();
                /*0x70645dc*/ Aes();
            }

            class AsymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int KeySizeValue;
                /*0x18*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;

                /*0x7064804*/ AsymmetricAlgorithm();
                /*0x706480c*/ void Dispose();
                /*0x7064810*/ void Clear();
                /*0x706487c*/ void Dispose(bool disposing);
                /*0x7064880*/ int get_KeySize();
                /*0x7064888*/ void set_KeySize(int value);
                /*0x7064984*/ void FromXmlString(string xmlString);
                /*0x70649bc*/ string ToXmlString(bool includePrivateParameters);
            }

            class AsymmetricSignatureDeformatter
            {
                /*0x70649f4*/ AsymmetricSignatureDeformatter();
                /*0x3816710*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x3816710*/ void SetHashAlgorithm(string strName);
                /*0x3814200*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class AsymmetricSignatureFormatter
            {
                /*0x70649fc*/ AsymmetricSignatureFormatter();
            }

            enum CipherMode
            {
                CBC = 1,
                ECB = 2,
                OFB = 3,
                CFB = 4,
                CTS = 5,
            }

            enum PaddingMode
            {
                None = 1,
                PKCS7 = 2,
                Zeros = 3,
                ANSIX923 = 4,
                ISO10126 = 5,
            }

            class KeySizes
            {
                /*0x10*/ int m_minSize;
                /*0x14*/ int m_maxSize;
                /*0x18*/ int m_skipSize;

                static /*0x7064a68*/ bool IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, int size);
                /*0x70647c8*/ KeySizes(int minSize, int maxSize, int skipSize);
                /*0x7064a04*/ int get_MinSize();
                /*0x7064a0c*/ int get_MaxSize();
                /*0x7064a14*/ int get_SkipSize();
                /*0x7064a1c*/ bool IsLegal(int keySize);
            }

            class CryptographicException : System.SystemException
            {
                /*0x7064af4*/ CryptographicException();
                /*0x706495c*/ CryptographicException(string message);
                /*0x7064b60*/ CryptographicException(string format, string insert);
                /*0x7064bf8*/ CryptographicException(string message, System.Exception inner);
                /*0x7064c20*/ CryptographicException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class CryptographicUnexpectedOperationException : System.Security.Cryptography.CryptographicException
            {
                /*0x7064c28*/ CryptographicUnexpectedOperationException();
                /*0x7063e8c*/ CryptographicUnexpectedOperationException(string message);
                /*0x7064c4c*/ CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            enum CspProviderFlags
            {
                NoFlags = 0,
                UseMachineKeyStore = 1,
                UseDefaultKeyContainer = 2,
                UseNonExportableKey = 4,
                UseExistingKey = 8,
                UseArchivableKey = 16,
                UseUserProtectedKey = 32,
                NoPrompt = 64,
                CreateEphemeralKey = 128,
            }

            class CspParameters
            {
                /*0x10*/ int ProviderType;
                /*0x18*/ string ProviderName;
                /*0x20*/ string KeyContainerName;
                /*0x28*/ int KeyNumber;
                /*0x2c*/ int m_flags;

                /*0x7064d40*/ CspParameters();
                /*0x7064d5c*/ CspParameters(int dwTypeIn);
                /*0x7064d54*/ CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
                /*0x7064d6c*/ CspParameters(int providerType, string providerName, string keyContainerName, System.Security.Cryptography.CspProviderFlags flags);
                /*0x7064c54*/ System.Security.Cryptography.CspProviderFlags get_Flags();
                /*0x7064c5c*/ void set_Flags(System.Security.Cryptography.CspProviderFlags value);
            }

            class DES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x7065670*/ DES();
                static /*0x70654a8*/ System.Security.Cryptography.DES Create();
                static /*0x7064f58*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x7065078*/ bool IsSemiWeakKey(byte[] rgbKey);
                static /*0x70655b8*/ bool IsLegalKeySize(byte[] rgbKey);
                static /*0x70655d8*/ ulong QuadWordFromBigEndian(byte[] block);
                /*0x7064dd8*/ DES();
                /*0x7064e70*/ byte[] get_Key();
                /*0x7065284*/ void set_Key(byte[] value);
            }

            class DESCryptoServiceProvider : System.Security.Cryptography.DES
            {
                /*0x70654f8*/ DESCryptoServiceProvider();
                /*0x70657b0*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x70658e0*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7065a10*/ void GenerateKey();
                /*0x7065afc*/ void GenerateIV();
            }

            struct DSAParameters
            {
                /*0x10*/ byte[] P;
                /*0x18*/ byte[] Q;
                /*0x20*/ byte[] G;
                /*0x28*/ byte[] Y;
                /*0x30*/ byte[] J;
                /*0x38*/ byte[] X;
                /*0x40*/ byte[] Seed;
                /*0x48*/ int Counter;
            }

            class DSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x7065b7c*/ System.Security.Cryptography.DSA Create();
                /*0x7065b74*/ DSA();
                /*0x3814200*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x7065bd0*/ void FromXmlString(string xmlString);
                /*0x70662c8*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
            }

            class DSASignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ System.Security.Cryptography.DSA _dsaKey;
                /*0x18*/ string _oid;

                /*0x7066730*/ DSASignatureDeformatter();
                /*0x70667b8*/ DSASignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x70668b0*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x70669a0*/ void SetHashAlgorithm(string strName);
                /*0x7066a64*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class DSASignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x10*/ string _oid;

                /*0x7066b44*/ DSASignatureFormatter();
            }

            class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ int blockSizeValue;
                /*0x38*/ string m_hashName;
                /*0x40*/ System.Security.Cryptography.HashAlgorithm m_hash1;
                /*0x48*/ System.Security.Cryptography.HashAlgorithm m_hash2;
                /*0x50*/ byte[] m_inner;
                /*0x58*/ byte[] m_outer;
                /*0x60*/ bool m_hashing;

                static /*0x7066f64*/ System.Security.Cryptography.HMAC Create();
                /*0x7067384*/ HMAC();
                /*0x7066bcc*/ int get_BlockSizeValue();
                /*0x7066bd4*/ void set_BlockSizeValue(int value);
                /*0x7066bdc*/ void UpdateIOPadBuffers();
                /*0x7066d68*/ void InitializeKey(byte[] key);
                /*0x7066e84*/ byte[] get_Key();
                /*0x7066efc*/ void set_Key(byte[] value);
                /*0x7066ff4*/ void Initialize();
                /*0x706703c*/ void HashCore(byte[] rgb, int ib, int cb);
                /*0x70670bc*/ byte[] HashFinal();
                /*0x70671ec*/ void Dispose(bool disposing);
            }

            class HMACMD5 : System.Security.Cryptography.HMAC
            {
                /*0x706739c*/ HMACMD5();
                /*0x70673c0*/ HMACMD5(byte[] key);
            }

            class HMACRIPEMD160 : System.Security.Cryptography.HMAC
            {
                /*0x706749c*/ HMACRIPEMD160();
                /*0x70674c0*/ HMACRIPEMD160(byte[] key);
            }

            class HMACSHA1 : System.Security.Cryptography.HMAC
            {
                /*0x7066fcc*/ HMACSHA1();
                /*0x70676d4*/ HMACSHA1(byte[] key);
                /*0x70676dc*/ HMACSHA1(byte[] key, bool useManagedSha1);
            }

            class HMACSHA256 : System.Security.Cryptography.HMAC
            {
                /*0x70677b8*/ HMACSHA256();
                /*0x70677dc*/ HMACSHA256(byte[] key);
            }

            class HMACSHA384 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x70678b8*/ HMACSHA384();
                /*0x70678dc*/ HMACSHA384(byte[] key);
                /*0x70679dc*/ int get_BlockSize();
            }

            class HMACSHA512 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x70679f4*/ HMACSHA512();
                /*0x7067a18*/ HMACSHA512(byte[] key);
                /*0x7067b18*/ int get_BlockSize();
            }

            interface ICryptoTransform : System.IDisposable
            {
                /*0x3814574*/ int get_InputBlockSize();
                /*0x3814574*/ int get_OutputBlockSize();
                /*0x3813ffc*/ bool get_CanTransformMultipleBlocks();
                int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
            {
                /*0x28*/ byte[] KeyValue;

                /*0x7067394*/ KeyedHashAlgorithm();
                /*0x7067334*/ void Dispose(bool disposing);
                /*0x7067b30*/ byte[] get_Key();
                /*0x7067ba8*/ void set_Key(byte[] value);
            }

            class MACTripleDES : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ System.Security.Cryptography.ICryptoTransform m_encryptor;
                /*0x38*/ System.Security.Cryptography.CryptoStream _cs;
                /*0x40*/ System.Security.Cryptography.TailStream _ts;
                /*0x48*/ int m_bytesPerBlock;
                /*0x50*/ System.Security.Cryptography.TripleDES des;

                /*0x7067cac*/ MACTripleDES();
                /*0x7067e10*/ void Initialize();
                /*0x7067e1c*/ void HashCore(byte[] rgbData, int ibStart, int cbSize);
                /*0x7068038*/ byte[] HashFinal();
                /*0x7068214*/ void Dispose(bool disposing);
            }

            class TailStream : System.IO.Stream
            {
                /*0x28*/ byte[] _Buffer;
                /*0x30*/ int _BufferSize;
                /*0x34*/ int _BufferIndex;
                /*0x38*/ bool _BufferFull;

                /*0x7067f9c*/ TailStream(int bufferSize);
                /*0x70682fc*/ void Clear();
                /*0x706830c*/ void Dispose(bool disposing);
                /*0x706819c*/ byte[] get_Buffer();
                /*0x70683e0*/ bool get_CanRead();
                /*0x70683e8*/ bool get_CanSeek();
                /*0x70683f0*/ bool get_CanWrite();
                /*0x7068400*/ long get_Length();
                /*0x7068458*/ long get_Position();
                /*0x70684b0*/ void set_Position(long value);
                /*0x7068508*/ void Flush();
                /*0x706850c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x7068564*/ void SetLength(long value);
                /*0x70685bc*/ int Read(byte[] buffer, int offset, int count);
                /*0x7068614*/ void Write(byte[] buffer, int offset, int count);
            }

            class MD5 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70687a4*/ System.Security.Cryptography.MD5 Create();
                /*0x7068784*/ MD5();
            }

            class RandomNumberGenerator : System.IDisposable
            {
                static /*0x7068800*/ System.Security.Cryptography.RandomNumberGenerator Create();
                /*0x70687f8*/ RandomNumberGenerator();
                /*0x7068854*/ void Dispose();
                /*0x70688c0*/ void Dispose(bool disposing);
                /*0x3816710*/ void GetBytes(byte[] data);
                /*0x70688c4*/ void GetBytes(byte[] data, int offset, int count);
                /*0x7068aa8*/ void GetBytes(System.Span<byte> data);
            }

            class RC2 : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x44*/ int EffectiveKeySizeValue;

                static /*0x7068dd4*/ RC2();
                /*0x7068ca8*/ RC2();
                /*0x7068d40*/ int get_EffectiveKeySize();
                /*0x7068d5c*/ int get_KeySize();
                /*0x7068d64*/ void set_KeySize(int value);
            }

            class RC2CryptoServiceProvider : System.Security.Cryptography.RC2
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x48*/ bool m_use40bitSalt;

                static /*0x706931c*/ RC2CryptoServiceProvider();
                /*0x7068f1c*/ RC2CryptoServiceProvider();
                /*0x7069084*/ int get_EffectiveKeySize();
                /*0x706908c*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7069154*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x706921c*/ void GenerateKey();
                /*0x70692a4*/ void GenerateIV();
            }

            class Rijndael : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x7069490*/ Rijndael();
                /*0x70693f8*/ Rijndael();
            }

            class RijndaelManaged : System.Security.Cryptography.Rijndael
            {
                /*0x70695e0*/ RijndaelManaged();
                /*0x70696b8*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x70697c0*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x70697d4*/ void GenerateKey();
                /*0x706980c*/ void GenerateIV();
                /*0x70696cc*/ System.Security.Cryptography.ICryptoTransform NewEncryptor(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int feedbackSize, System.Security.Cryptography.RijndaelManagedTransformMode encryptMode);
            }

            enum RijndaelManagedTransformMode
            {
                Encrypt = 0,
                Decrypt = 1,
            }

            class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                static /*0x0*/ byte[] s_Sbox;
                static /*0x8*/ int[] s_Rcon;
                static /*0x10*/ int[] s_T;
                static /*0x18*/ int[] s_TF;
                static /*0x20*/ int[] s_iT;
                static /*0x28*/ int[] s_iTF;
                /*0x10*/ System.Security.Cryptography.CipherMode m_cipherMode;
                /*0x14*/ System.Security.Cryptography.PaddingMode m_paddingValue;
                /*0x18*/ System.Security.Cryptography.RijndaelManagedTransformMode m_transformMode;
                /*0x1c*/ int m_blockSizeBits;
                /*0x20*/ int m_blockSizeBytes;
                /*0x24*/ int m_inputBlockSize;
                /*0x28*/ int m_outputBlockSize;
                /*0x30*/ int[] m_encryptKeyExpansion;
                /*0x38*/ int[] m_decryptKeyExpansion;
                /*0x40*/ int m_Nr;
                /*0x44*/ int m_Nb;
                /*0x48*/ int m_Nk;
                /*0x50*/ int[] m_encryptindex;
                /*0x58*/ int[] m_decryptindex;
                /*0x60*/ int[] m_IV;
                /*0x68*/ int[] m_lastBlockBuffer;
                /*0x70*/ byte[] m_depadBuffer;
                /*0x78*/ byte[] m_shiftRegister;

                static /*0x706c6bc*/ RijndaelManagedTransform();
                static /*0x706c6b4*/ int rot1(int val);
                static /*0x706c6ac*/ int rot2(int val);
                static /*0x706c5bc*/ int rot3(int val);
                static /*0x706c5c4*/ int SubWord(int a);
                static /*0x706c688*/ int MulX(int x);
                /*0x7069844*/ RijndaelManagedTransform(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, System.Security.Cryptography.PaddingMode PaddingValue, System.Security.Cryptography.RijndaelManagedTransformMode transformMode);
                /*0x706a420*/ void Dispose();
                /*0x706a428*/ void Dispose(bool disposing);
                /*0x706a550*/ int get_InputBlockSize();
                /*0x706a558*/ int get_OutputBlockSize();
                /*0x706a560*/ bool get_CanTransformMultipleBlocks();
                /*0x706a568*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x706beb8*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x706c184*/ void Reset();
                /*0x706a83c*/ int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x706b420*/ int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x706c208*/ void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp);
                /*0x706c3d4*/ void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp);
                /*0x7069e90*/ void GenerateKeyExpansion(byte[] rgbKey);
            }

            class RIPEMD160 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x706c8fc*/ System.Security.Cryptography.RIPEMD160 Create();
                /*0x706c8dc*/ RIPEMD160();
            }

            class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateMD160;
                /*0x40*/ uint[] _blockDWords;

                static /*0x706cd4c*/ void MDTransform(uint* blockDWords, uint* state, byte* block);
                static /*0x706e418*/ uint F(uint x, uint y, uint z);
                static /*0x706e424*/ uint G(uint x, uint y, uint z);
                static /*0x706e434*/ uint H(uint x, uint y, uint z);
                static /*0x706e440*/ uint I(uint x, uint y, uint z);
                static /*0x706e450*/ uint J(uint x, uint y, uint z);
                /*0x7067594*/ RIPEMD160Managed();
                /*0x706c9d0*/ void Initialize();
                /*0x706ca14*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x706cb98*/ byte[] HashFinal();
                /*0x706c94c*/ void InitializeState();
                /*0x706ca18*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x706cb9c*/ byte[] _EndHash();
            }

            struct RSAParameters
            {
                /*0x10*/ byte[] Exponent;
                /*0x18*/ byte[] Modulus;
                /*0x20*/ byte[] P;
                /*0x28*/ byte[] Q;
                /*0x30*/ byte[] DP;
                /*0x38*/ byte[] DQ;
                /*0x40*/ byte[] InverseQ;
                /*0x48*/ byte[] D;
            }

            class RSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x706e464*/ System.Security.Cryptography.RSA Create();
                /*0x706e45c*/ RSA();
                /*0x706e4fc*/ byte[] EncryptValue(byte[] rgb);
                /*0x706e554*/ void FromXmlString(string xmlString);
                /*0x706eb00*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
            }

            class RSACryptoServiceProvider : System.Security.Cryptography.RSA
            {
                static /*0x0*/ System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.RSAManaged rsa;

                static /*0x706ef30*/ bool get_UseMachineKeyStore();
                /*0x706e4d0*/ RSACryptoServiceProvider();
                /*0x706efbc*/ RSACryptoServiceProvider(System.Security.Cryptography.CspParameters parameters);
                /*0x706ef84*/ RSACryptoServiceProvider(int dwKeySize);
                /*0x706efc8*/ RSACryptoServiceProvider(int dwKeySize, System.Security.Cryptography.CspParameters parameters);
                /*0x706f024*/ void Common(int dwKeySize, bool parameters);
                /*0x706f274*/ void Common(System.Security.Cryptography.CspParameters p);
                /*0x706f39c*/ void Finalize();
                /*0x706f43c*/ int get_KeySize();
                /*0x706f45c*/ bool get_PublicOnly();
                /*0x706f478*/ byte[] EncryptValue(byte[] rgb);
                /*0x706f498*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x706f5c8*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x706f61c*/ string GetHashNameFromOID(string oid);
                /*0x706f7dc*/ bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature);
                /*0x706f8f8*/ void Dispose(bool disposing);
                /*0x706f948*/ void OnKeyGenerated(object sender, System.EventArgs e);
            }

            class SHA1 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x706f9ec*/ System.Security.Cryptography.SHA1 Create();
                /*0x706f9cc*/ SHA1();
            }

            class SHA1Managed : System.Security.Cryptography.SHA1
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA1;
                /*0x40*/ uint[] _expandedBuffer;

                static /*0x706ff38*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x707046c*/ void SHAExpand(uint* x);
                /*0x706fa40*/ SHA1Managed();
                /*0x706fbb8*/ void Initialize();
                /*0x706fbfc*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x706fd80*/ byte[] HashFinal();
                /*0x706fb34*/ void InitializeState();
                /*0x706fc00*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x706fd84*/ byte[] _EndHash();
            }

            class SHA256 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70704c8*/ System.Security.Cryptography.SHA256 Create();
                /*0x70704a8*/ SHA256();
            }

            class SHA256Managed : System.Security.Cryptography.SHA256
            {
                static /*0x0*/ uint[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA256;
                /*0x40*/ uint[] _W;

                static /*0x707123c*/ SHA256Managed();
                static /*0x7070a8c*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x707117c*/ uint RotateRight(uint x, int n);
                static /*0x70710fc*/ uint Ch(uint x, uint y, uint z);
                static /*0x7071168*/ uint Maj(uint x, uint y, uint z);
                static /*0x7071184*/ uint sigma_0(uint x);
                static /*0x70711e0*/ uint sigma_1(uint x);
                static /*0x707110c*/ uint Sigma_0(uint x);
                static /*0x70710a0*/ uint Sigma_1(uint x);
                static /*0x7070ff8*/ void SHA256Expand(uint* x);
                /*0x7070518*/ SHA256Managed();
                /*0x70706c4*/ void Initialize();
                /*0x7070708*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x70708d4*/ byte[] HashFinal();
                /*0x7070604*/ void InitializeState();
                /*0x707070c*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x70708d8*/ byte[] _EndHash();
            }

            class SHA384 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70712fc*/ System.Security.Cryptography.SHA384 Create();
                /*0x70712dc*/ SHA384();
            }

            class SHA384Managed : System.Security.Cryptography.SHA384
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA384;
                /*0x40*/ ulong[] _W;

                static /*0x70722f0*/ SHA384Managed();
                static /*0x7071900*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x7072230*/ ulong RotateRight(ulong x, int n);
                static /*0x70721b0*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x707221c*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x70721c0*/ ulong Sigma_0(ulong x);
                static /*0x7072154*/ ulong Sigma_1(ulong x);
                static /*0x7072238*/ ulong sigma_0(ulong x);
                static /*0x7072294*/ ulong sigma_1(ulong x);
                static /*0x70720ac*/ void SHA384Expand(ulong* x);
                /*0x707134c*/ SHA384Managed();
                /*0x7071538*/ void Initialize();
                /*0x707157c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x7071748*/ byte[] HashFinal();
                /*0x7071438*/ void InitializeState();
                /*0x7071580*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x707174c*/ byte[] _EndHash();
            }

            class SHA512 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70723b0*/ System.Security.Cryptography.SHA512 Create();
                /*0x7072390*/ SHA512();
            }

            class SHA512Managed : System.Security.Cryptography.SHA512
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA512;
                /*0x40*/ ulong[] _W;

                static /*0x7073164*/ SHA512Managed();
                static /*0x70729b4*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x70730a4*/ ulong RotateRight(ulong x, int n);
                static /*0x7073024*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x7073090*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x7073034*/ ulong Sigma_0(ulong x);
                static /*0x7072fc8*/ ulong Sigma_1(ulong x);
                static /*0x70730ac*/ ulong sigma_0(ulong x);
                static /*0x7073108*/ ulong sigma_1(ulong x);
                static /*0x7072f20*/ void SHA512Expand(ulong* x);
                /*0x7072400*/ SHA512Managed();
                /*0x70725ec*/ void Initialize();
                /*0x7072630*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x70727fc*/ byte[] HashFinal();
                /*0x70724ec*/ void InitializeState();
                /*0x7072634*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x7072800*/ byte[] _EndHash();
            }

            class SignatureDescription
            {
                /*0x10*/ string _strKey;
                /*0x18*/ string _strDigest;
                /*0x20*/ string _strFormatter;
                /*0x28*/ string _strDeformatter;

                /*0x7073204*/ SignatureDescription();
                /*0x707320c*/ void set_KeyAlgorithm(string value);
                /*0x7073214*/ void set_DigestAlgorithm(string value);
                /*0x707321c*/ void set_FormatterAlgorithm(string value);
                /*0x7073224*/ void set_DeformatterAlgorithm(string value);
            }

            class RSAPKCS1SignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x30*/ string _hashAlgorithm;

                /*0x707322c*/ RSAPKCS1SignatureDescription(string hashAlgorithm, string digestAlgorithm);
            }

            class RSAPKCS1SHA1SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x7073304*/ RSAPKCS1SHA1SignatureDescription();
            }

            class RSAPKCS1SHA256SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x707336c*/ RSAPKCS1SHA256SignatureDescription();
            }

            class RSAPKCS1SHA384SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x70733d4*/ RSAPKCS1SHA384SignatureDescription();
            }

            class RSAPKCS1SHA512SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x707343c*/ RSAPKCS1SHA512SignatureDescription();
            }

            class DSASignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x70734a4*/ DSASignatureDescription();
            }

            class SymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int BlockSizeValue;
                /*0x14*/ int FeedbackSizeValue;
                /*0x18*/ byte[] IVValue;
                /*0x20*/ byte[] KeyValue;
                /*0x28*/ System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
                /*0x30*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
                /*0x38*/ int KeySizeValue;
                /*0x3c*/ System.Security.Cryptography.CipherMode ModeValue;
                /*0x40*/ System.Security.Cryptography.PaddingMode PaddingValue;

                static /*0x7073eb8*/ System.Security.Cryptography.SymmetricAlgorithm Create(string algName);
                /*0x7073578*/ SymmetricAlgorithm();
                /*0x707359c*/ void Dispose();
                /*0x7073608*/ void Clear();
                /*0x707369c*/ void Dispose(bool disposing);
                /*0x7073714*/ int get_BlockSize();
                /*0x707371c*/ void set_BlockSize(int value);
                /*0x7073814*/ int get_FeedbackSize();
                /*0x707381c*/ byte[] get_IV();
                /*0x70738b0*/ void set_IV(byte[] value);
                /*0x7073a10*/ byte[] get_Key();
                /*0x7073aa4*/ void set_Key(byte[] value);
                /*0x7073cbc*/ System.Security.Cryptography.KeySizes[] get_LegalKeySizes();
                /*0x7073d34*/ int get_KeySize();
                /*0x7073d3c*/ void set_KeySize(int value);
                /*0x7073dc0*/ System.Security.Cryptography.CipherMode get_Mode();
                /*0x7073dc8*/ void set_Mode(System.Security.Cryptography.CipherMode value);
                /*0x7073e3c*/ System.Security.Cryptography.PaddingMode get_Padding();
                /*0x7073e44*/ void set_Padding(System.Security.Cryptography.PaddingMode value);
                /*0x7073c20*/ bool ValidKeySize(int bitLength);
                /*0x7073fb0*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor();
                /*0x3814b90*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7074000*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor();
                /*0x3814b90*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x38159dc*/ void GenerateKey();
                /*0x38159dc*/ void GenerateIV();
            }

            class TripleDES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x7074820*/ TripleDES();
                static /*0x70744ec*/ System.Security.Cryptography.TripleDES Create();
                static /*0x70741bc*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x7074688*/ bool EqualBytes(byte[] rgbKey, int start1, int start2, int count);
                static /*0x707459c*/ bool IsLegalKeySize(byte[] rgbKey);
                /*0x7074050*/ TripleDES();
                /*0x70740f4*/ byte[] get_Key();
                /*0x70742f0*/ void set_Key(byte[] value);
            }

            class TripleDESCryptoServiceProvider : System.Security.Cryptography.TripleDES
            {
                /*0x707453c*/ TripleDESCryptoServiceProvider();
                /*0x7074968*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7074a74*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7074b80*/ void GenerateKey();
                /*0x7074cfc*/ void GenerateIV();
            }

            class Utils
            {
                static /*0x0*/ System.Security.Cryptography.RNGCryptoServiceProvider _rng;

                static /*0x7074c54*/ System.Security.Cryptography.RNGCryptoServiceProvider get_StaticRandomNumberGenerator();
                static /*0x7074de0*/ byte[] GenerateRandom(int keySize);
                static /*0x7074960*/ bool HasAlgorithm(int dwCalg, int dwKeySize);
                static /*0x7074e50*/ string DiscardWhiteSpaces(string inputBuffer);
                static /*0x7074e6c*/ string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount);
                static /*0x7074fe8*/ int ConvertByteArrayToInt(byte[] input);
                static /*0x7075040*/ byte[] ConvertIntToByteArray(int dwInput);
                static /*0x70745c0*/ byte[] FixupKeyParity(byte[] key);
                static /*0x7075164*/ void DWORDFromLittleEndian(uint* x, int digits, byte* block);
                static /*0x70751b4*/ void DWORDToLittleEndian(byte[] block, uint[] x, int digits);
                static /*0x7070418*/ void DWORDFromBigEndian(uint* x, int digits, byte* block);
                static /*0x7070324*/ void DWORDToBigEndian(byte[] block, uint[] x, int digits);
                static /*0x7072028*/ void QuadWordFromBigEndian(ulong* x, int digits, byte* block);
                static /*0x7071e6c*/ void QuadWordToBigEndian(byte[] block, ulong[] x, int digits);
                static /*0x70752a8*/ bool _ProduceLegacyHmacValues();
            }

            class CryptoConfig
            {
                static /*0x0*/ object lockObject;
                static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Type> algorithms;

                static /*0x7077fb4*/ CryptoConfig();
                static /*0x7073f58*/ object CreateFromName(string name);
                static /*0x70752b0*/ object CreateFromName(string name, object[] args);
                static /*0x7077278*/ string MapNameToOID(string name);
                static /*0x7077a4c*/ byte[] EncodeOID(string str);
                static /*0x7077e4c*/ byte[] EncodeLongNumber(long x);
                static /*0x706fb2c*/ bool get_AllowOnlyFipsAlgorithms();
            }

            class DESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ int KEY_BIT_SIZE;
                static /*0x4*/ int KEY_BYTE_SIZE;
                static /*0x8*/ int BLOCK_BIT_SIZE;
                static /*0xc*/ int BLOCK_BYTE_SIZE;
                static /*0x10*/ uint[] spBoxes;
                static /*0x18*/ byte[] PC1;
                static /*0x20*/ byte[] leftRotTotal;
                static /*0x28*/ byte[] PC2;
                static /*0x30*/ uint[] ipTab;
                static /*0x38*/ uint[] fpTab;
                /*0x58*/ byte[] keySchedule;
                /*0x60*/ byte[] byteBuff;
                /*0x68*/ uint[] dwordBuff;

                static /*0x7079078*/ DESTransform();
                static /*0x70788fc*/ void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap);
                static /*0x7078bd4*/ void BSwap(byte[] byteBuff);
                static /*0x7078274*/ byte[] GetStrongKey();
                /*0x7078030*/ DESTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv);
                /*0x70786cc*/ uint CipherFunct(uint r, int n);
                /*0x707834c*/ void SetKey(byte[] key);
                /*0x7078c4c*/ void ProcessBlock(byte[] input, byte[] output);
                /*0x7078fd4*/ void ECB(byte[] input, byte[] output);
            }

            class DSACryptoServiceProvider : System.Security.Cryptography.DSA
            {
                static /*0x0*/ bool useMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.DSAManaged dsa;

                /*0x7077170*/ DSACryptoServiceProvider();
                /*0x70792a4*/ DSACryptoServiceProvider(int dwKeySize);
                /*0x70792dc*/ void Common(int dwKeySize, bool parameters);
                /*0x707952c*/ void Finalize();
                /*0x70795cc*/ int get_KeySize();
                /*0x70795ec*/ bool get_PublicOnly();
                /*0x7079608*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x70796b4*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x7079708*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x7079728*/ void Dispose(bool disposing);
                /*0x707977c*/ void OnKeyGenerated(object sender, System.EventArgs e);
            }

            class MD5CryptoServiceProvider : System.Security.Cryptography.MD5
            {
                static /*0x0*/ uint[] K;
                /*0x28*/ uint[] _H;
                /*0x30*/ uint[] buff;
                /*0x38*/ ulong count;
                /*0x40*/ byte[] _ProcessingBuffer;
                /*0x48*/ int _ProcessingBufferCount;

                static /*0x707aa70*/ MD5CryptoServiceProvider();
                /*0x707719c*/ MD5CryptoServiceProvider();
                /*0x7079800*/ void Finalize();
                /*0x70798a0*/ void Dispose(bool disposing);
                /*0x7079910*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x707a688*/ byte[] HashFinal();
                /*0x707a90c*/ void Initialize();
                /*0x7079a10*/ void ProcessBlock(byte[] inputBuffer, int inputOffset);
                /*0x707a760*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x707a980*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class RC2Transform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ byte[] pitable;
                /*0x58*/ ushort R0;
                /*0x5a*/ ushort R1;
                /*0x5c*/ ushort R2;
                /*0x5e*/ ushort R3;
                /*0x60*/ ushort[] K;
                /*0x68*/ int j;

                static /*0x707b9dc*/ RC2Transform();
                /*0x707ab10*/ RC2Transform(System.Security.Cryptography.RC2 rc2Algo, bool encryption, byte[] key, byte[] iv);
                /*0x707b06c*/ void ECB(byte[] input, byte[] output);
            }

            class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator
            {
                static /*0x0*/ object _lock;
                /*0x10*/ nint _handle;

                static /*0x707ba7c*/ RNGCryptoServiceProvider();
                static /*0x707bb0c*/ bool RngOpen();
                static /*0x707bb10*/ nint RngInitialize(byte* seed, nint seed_length);
                static /*0x707bb80*/ nint RngGetBytes(nint handle, byte* data, nint data_length);
                static /*0x707bb84*/ void RngClose(nint handle);
                /*0x7074d70*/ RNGCryptoServiceProvider();
                /*0x707bb14*/ void Check();
                /*0x707bb88*/ void GetBytes(byte[] data);
                /*0x707bda0*/ void Finalize();
                /*0x707be7c*/ void Dispose(bool disposing);
            }

            class RSAPKCS1SignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ System.Security.Cryptography.RSA rsa;
                /*0x18*/ string hashName;

                /*0x7077268*/ RSAPKCS1SignatureDeformatter();
                /*0x707be88*/ RSAPKCS1SignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x707bebc*/ void SetHashAlgorithm(string strName);
                /*0x707bf18*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x707c008*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class RSAPKCS1SignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x7077270*/ RSAPKCS1SignatureFormatter();
            }

            class SHA1Internal
            {
                /*0x10*/ uint[] _H;
                /*0x18*/ ulong count;
                /*0x20*/ byte[] _ProcessingBuffer;
                /*0x28*/ int _ProcessingBufferCount;
                /*0x30*/ uint[] buff;

                static /*0x707cb48*/ void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset);
                static /*0x707d1e8*/ void FillBuff(uint[] buff);
                /*0x707c158*/ SHA1Internal();
                /*0x707c2a0*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x707c8b4*/ byte[] HashFinal();
                /*0x707c218*/ void Initialize();
                /*0x707c3a0*/ void ProcessBlock(byte[] inputBuffer, uint inputOffset);
                /*0x707c98c*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x707d36c*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class SHA1CryptoServiceProvider : System.Security.Cryptography.SHA1
            {
                /*0x28*/ System.Security.Cryptography.SHA1Internal sha;

                /*0x707d45c*/ SHA1CryptoServiceProvider();
                /*0x707d4c8*/ void Finalize();
                /*0x707d568*/ void Dispose(bool disposing);
                /*0x707d574*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x707d59c*/ byte[] HashFinal();
                /*0x707d5c0*/ void Initialize();
            }

            class TripleDESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                /*0x58*/ System.Security.Cryptography.DESTransform E1;
                /*0x60*/ System.Security.Cryptography.DESTransform D2;
                /*0x68*/ System.Security.Cryptography.DESTransform E3;
                /*0x70*/ System.Security.Cryptography.DESTransform D1;
                /*0x78*/ System.Security.Cryptography.DESTransform E2;
                /*0x80*/ System.Security.Cryptography.DESTransform D3;

                static /*0x707d91c*/ byte[] GetStrongKey();
                /*0x707d5dc*/ TripleDESTransform(System.Security.Cryptography.TripleDES algo, bool encryption, byte[] key, byte[] iv);
                /*0x707d9c4*/ void ECB(byte[] input, byte[] output);
            }

            class CryptoConfigForwarder
            {
                static /*0x707db00*/ object CreateFromName(string name);
            }

            namespace X509Certificates
            {
                enum X509ContentType
                {
                    Unknown = 0,
                    Cert = 1,
                    SerializedCert = 2,
                    Pfx = 3,
                    Pkcs12 = 3,
                    SerializedStore = 4,
                    Pkcs7 = 5,
                    Authenticode = 6,
                }

                enum X509KeyStorageFlags
                {
                    DefaultKeySet = 0,
                    UserKeySet = 1,
                    MachineKeySet = 2,
                    Exportable = 4,
                    UserProtected = 8,
                    PersistKeySet = 16,
                    EphemeralKeySet = 32,
                }

                class X509Certificate : System.IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
                {
                    /*0x10*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl impl;
                    /*0x18*/ byte[] lazyCertHash;
                    /*0x20*/ byte[] lazySerialNumber;
                    /*0x28*/ string lazyIssuer;
                    /*0x30*/ string lazySubject;
                    /*0x38*/ string lazyKeyAlgorithm;
                    /*0x40*/ byte[] lazyKeyAlgorithmParameters;
                    /*0x48*/ byte[] lazyPublicKey;
                    /*0x50*/ System.DateTime lazyNotBefore;
                    /*0x58*/ System.DateTime lazyNotAfter;

                    static /*0x707eb8c*/ string FormatDate(System.DateTime date);
                    /*0x707dce0*/ X509Certificate();
                    /*0x707dd54*/ X509Certificate(byte[] data);
                    /*0x707deb4*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x707df74*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate cert);
                    /*0x707e108*/ X509Certificate(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x707db58*/ void Reset();
                    /*0x707e144*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x707e17c*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                    /*0x707e1b4*/ string get_Issuer();
                    /*0x707e220*/ string get_Subject();
                    /*0x707e284*/ void Dispose();
                    /*0x707e294*/ void Dispose(bool disposing);
                    /*0x707e2a8*/ bool Equals(object obj);
                    /*0x707e33c*/ bool Equals(System.Security.Cryptography.X509Certificates.X509Certificate other);
                    /*0x707e494*/ byte[] GetCertHash();
                    /*0x707e514*/ string GetCertHashString();
                    /*0x707e4b8*/ byte[] GetRawCertHash();
                    /*0x707e538*/ byte[] GetRawCertData();
                    /*0x707e56c*/ int GetHashCode();
                    /*0x707e5dc*/ string GetKeyAlgorithm();
                    /*0x707e644*/ byte[] GetKeyAlgorithmParameters();
                    /*0x707e6b0*/ byte[] GetPublicKey();
                    /*0x707e71c*/ byte[] GetSerialNumber();
                    /*0x707e784*/ string GetSerialNumberString();
                    /*0x707e434*/ byte[] GetRawSerialNumber();
                    /*0x707e7a8*/ string ToString();
                    /*0x707e7bc*/ string ToString(bool fVerbose);
                    /*0x707ecd4*/ System.DateTime GetNotAfter();
                    /*0x707eaf0*/ System.DateTime GetNotBefore();
                    /*0x707ed70*/ void ImportHandle(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x707eda8*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl get_Impl();
                    /*0x707edb0*/ bool get_IsValid();
                    /*0x707e218*/ void ThrowIfInvalid();
                }

                class X509CertificateImpl : System.IDisposable
                {
                    /*0x707f180*/ X509CertificateImpl();
                    /*0x3813ffc*/ bool get_IsValid();
                    /*0x707ee08*/ void ThrowIfContextInvalid();
                    /*0x38148bc*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Clone();
                    /*0x38148bc*/ string get_Issuer();
                    /*0x38148bc*/ string get_Subject();
                    /*0x38148bc*/ byte[] get_RawData();
                    /*0x381440c*/ System.DateTime get_NotAfter();
                    /*0x381440c*/ System.DateTime get_NotBefore();
                    /*0x38148bc*/ byte[] get_Thumbprint();
                    /*0x707eec4*/ int GetHashCode();
                    /*0x38148bc*/ string get_KeyAlgorithm();
                    /*0x38148bc*/ byte[] get_KeyAlgorithmParameters();
                    /*0x38148bc*/ byte[] get_PublicKeyValue();
                    /*0x38148bc*/ byte[] get_SerialNumber();
                    /*0x3813ffc*/ bool get_HasPrivateKey();
                    /*0x38148bc*/ System.Security.Cryptography.RSA GetRSAPrivateKey();
                    /*0x38148bc*/ System.Security.Cryptography.DSA GetDSAPrivateKey();
                    /*0x707ef4c*/ bool Equals(object obj);
                    /*0x707dc70*/ void Dispose();
                    /*0x707f0d8*/ void Dispose(bool disposing);
                    /*0x707f0dc*/ void Finalize();
                }

                class X509Helper
                {
                    static /*0x707f188*/ Mono.ISystemCertificateProvider get_CertificateProvider();
                    static /*0x707e058*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate cert);
                    static /*0x707df60*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x707eadc*/ bool IsValid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x707edc8*/ void ThrowIfContextInvalid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x707ee44*/ System.Exception GetInvalidContextException();
                    static /*0x707de08*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData);
                    static /*0x707f250*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                }
            }
        }

        namespace Principal
        {
            interface IIdentity
            {
                /*0x38148bc*/ string get_Name();
                /*0x38148bc*/ string get_AuthenticationType();
            }

            interface IPrincipal
            {
            }

            enum TokenImpersonationLevel
            {
                None = 0,
                Anonymous = 1,
                Identification = 2,
                Impersonation = 3,
                Delegation = 4,
            }

            class IdentityReference
            {
            }

            class SecurityIdentifier : System.Security.Principal.IdentityReference
            {
                static /*0x0*/ int MaxBinaryLength;
                static /*0x4*/ int MinBinaryLength;
                /*0x10*/ byte[] buffer;

                static /*0x707f3f4*/ SecurityIdentifier();
                /*0x707f318*/ int get_BinaryLength();
                /*0x707f334*/ void GetBinaryForm(byte[] binaryForm, int offset);
            }

            enum WindowsAccountType
            {
                Normal = 0,
                Guest = 1,
                System = 2,
                Anonymous = 3,
            }

            class WindowsIdentity : System.Security.Claims.ClaimsIdentity, System.Security.Principal.IIdentity, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.IDisposable
            {
                static /*0x0*/ nint invalidWindows;
                /*0x78*/ nint _token;
                /*0x80*/ string _type;
                /*0x88*/ System.Security.Principal.WindowsAccountType _account;
                /*0x8c*/ bool _authenticated;
                /*0x90*/ string _name;
                /*0x98*/ System.Runtime.Serialization.SerializationInfo _info;

                static /*0x707fcc8*/ WindowsIdentity();
                static /*0x707f670*/ System.Security.Principal.WindowsIdentity GetCurrent();
                static /*0x707f6ec*/ nint GetCurrentToken();
                static /*0x707f858*/ string GetTokenName(nint token);
                /*0x707f444*/ WindowsIdentity(nint userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
                /*0x707f624*/ WindowsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x707f668*/ void Dispose();
                /*0x707f6f0*/ System.Security.Principal.WindowsImpersonationContext Impersonate();
                /*0x707f7d4*/ string get_AuthenticationType();
                /*0x707f7dc*/ string get_Name();
                /*0x707f85c*/ System.Security.Principal.SecurityIdentifier get_User();
                /*0x707f894*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                /*0x707fb6c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x707f4dc*/ void SetToken(nint token);
            }

            class WindowsImpersonationContext : System.IDisposable
            {
                /*0x10*/ nint _token;
                /*0x18*/ bool undo;

                static /*0x707fdec*/ bool CloseToken(nint token);
                static /*0x707fd10*/ nint DuplicateToken(nint token);
                static /*0x707fd14*/ bool SetCurrentToken(nint token);
                static /*0x707fde8*/ bool RevertToSelf();
                /*0x707f74c*/ WindowsImpersonationContext(nint token);
                /*0x707fd18*/ void Dispose();
                /*0x707fd28*/ void Undo();
            }
        }

        namespace Claims
        {
            class Claim
            {
                /*0x10*/ string m_issuer;
                /*0x18*/ string m_originalIssuer;
                /*0x20*/ string m_type;
                /*0x28*/ string m_value;
                /*0x30*/ string m_valueType;
                /*0x38*/ byte[] m_userSerializationData;
                /*0x40*/ System.Collections.Generic.Dictionary<string, string> m_properties;
                /*0x48*/ object m_propertyLock;
                /*0x50*/ System.Security.Claims.ClaimsIdentity m_subject;

                /*0x707fdf0*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
                /*0x707fe10*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject, string propertyKey, string propertyValue);
                /*0x70801d0*/ Claim(System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
                /*0x7080534*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x708009c*/ System.Collections.Generic.IDictionary<string, string> get_Properties();
                /*0x7080594*/ System.Security.Claims.ClaimsIdentity get_Subject();
                /*0x708059c*/ void set_Subject(System.Security.Claims.ClaimsIdentity value);
                /*0x70805a4*/ string get_Type();
                /*0x70805ac*/ string get_Value();
                /*0x70805b4*/ System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity identity);
                /*0x708061c*/ string ToString();
            }

            class ClaimsIdentity : System.Security.Principal.IIdentity
            {
                /*0x10*/ byte[] m_userSerializationData;
                /*0x18*/ System.Collections.Generic.List<System.Security.Claims.Claim> m_instanceClaims;
                /*0x20*/ System.Collections.ObjectModel.Collection<System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>> m_externalClaims;
                /*0x28*/ string m_nameType;
                /*0x30*/ string m_roleType;
                /*0x38*/ string m_version;
                /*0x40*/ System.Security.Claims.ClaimsIdentity m_actor;
                /*0x48*/ string m_authenticationType;
                /*0x50*/ object m_bootstrapContext;
                /*0x58*/ string m_label;
                /*0x60*/ string m_serializedNameType;
                /*0x68*/ string m_serializedRoleType;
                /*0x70*/ string m_serializedClaims;

                /*0x707f4c0*/ ClaimsIdentity();
                /*0x7080694*/ ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x70806b0*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
                /*0x70806b8*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType, bool checkAuthType);
                /*0x7081334*/ ClaimsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7081d6c*/ string get_AuthenticationType();
                /*0x7081d74*/ System.Security.Claims.ClaimsIdentity get_Actor();
                /*0x7081d7c*/ void set_Actor(System.Security.Claims.ClaimsIdentity value);
                /*0x7081e08*/ System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims();
                /*0x7081eb8*/ string get_Name();
                /*0x7081edc*/ System.Security.Claims.ClaimsIdentity Clone();
                /*0x7080e14*/ void SafeAddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x7081208*/ void SafeAddClaim(System.Security.Claims.Claim claim);
                /*0x7082060*/ System.Security.Claims.Claim FindFirst(string type);
                /*0x70823bc*/ void OnSerializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x70826a0*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x7082b20*/ void OnDeserializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x7082c10*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70827a0*/ void DeserializeClaims(string serializedClaims);
                /*0x708244c*/ string SerializeClaims();
                /*0x7080dd8*/ bool IsCircular(System.Security.Claims.ClaimsIdentity subject);
                /*0x70814fc*/ void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool useContext);

                class <get_Claims>d__51 : System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Security.Claims.Claim <>2__current;
                    /*0x20*/ int <>l__initialThreadId;
                    /*0x28*/ System.Security.Claims.ClaimsIdentity <>4__this;
                    /*0x30*/ int <i>5__2;
                    /*0x38*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> <>7__wrap2;

                    /*0x7081e84*/ <get_Claims>d__51(int <>1__state);
                    /*0x70831e0*/ void System.IDisposable.Dispose();
                    /*0x70831fc*/ bool MoveNext();
                    /*0x7083608*/ void <>m__Finally1();
                    /*0x70836b8*/ System.Security.Claims.Claim System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>.get_Current();
                    /*0x70836c0*/ void System.Collections.IEnumerator.Reset();
                    /*0x70836f8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x7083700*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>.GetEnumerator();
                    /*0x70837a4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                }
            }
        }
    }

    namespace Runtime
    {
        class AmbiguousImplementationException : System.Exception
        {
            /*0x70837a8*/ AmbiguousImplementationException();
            /*0x7083828*/ AmbiguousImplementationException(string message);
            /*0x70838a0*/ AmbiguousImplementationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class RuntimeImports
        {
            static /*0x7083920*/ void RhZeroMemory(ref byte b, ulong byteLength);
            static /*0x7083924*/ void ZeroMemory(void* p, uint byteLength);
            static /*0x7083928*/ void Memmove(byte* dest, byte* src, uint len);
            static /*0x708392c*/ void Memmove_wbarrier(byte* dest, byte* src, uint len, nint type_handle);
        }

        namespace Remoting
        {
            class ChannelInfo : System.Runtime.Remoting.IChannelInfo
            {
                /*0x10*/ object[] channelData;

                /*0x7083930*/ ChannelInfo();
                /*0x70839a0*/ ChannelInfo(object remoteChannelData);
                /*0x7083a5c*/ object[] get_ChannelData();
            }

            class ActivatedClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ string applicationUrl;
                /*0x28*/ System.Type obj_type;

                /*0x7083a64*/ ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl);
                /*0x7083bac*/ string get_ApplicationUrl();
                /*0x7083bb4*/ System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes();
                /*0x7083bbc*/ System.Type get_ObjectType();
                /*0x7083bc4*/ string ToString();
            }

            class ActivatedServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;

                /*0x7083bd8*/ ActivatedServiceTypeEntry(string typeName, string assemblyName);
                /*0x7083cf4*/ System.Type get_ObjectType();
                /*0x7083cfc*/ string ToString();
            }

            enum CustomErrorsModes
            {
                On = 0,
                Off = 1,
                RemoteOnly = 2,
            }

            class EnvoyInfo : System.Runtime.Remoting.IEnvoyInfo
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink envoySinks;

                /*0x7083d0c*/ EnvoyInfo(System.Runtime.Remoting.Messaging.IMessageSink sinks);
                /*0x7083d3c*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IChannelInfo
            {
                /*0x38148bc*/ object[] get_ChannelData();
            }

            interface IEnvoyInfo
            {
                /*0x38148bc*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IRemotingTypeInfo
            {
                /*0x38148bc*/ string get_TypeName();
                /*0x3814200*/ bool CanCastTo(System.Type fromType, object o);
            }

            class Identity
            {
                /*0x10*/ string _objectUri;
                /*0x18*/ System.Runtime.Remoting.Messaging.IMessageSink _channelSink;
                /*0x20*/ System.Runtime.Remoting.Messaging.IMessageSink _envoySink;
                /*0x28*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _clientDynamicProperties;
                /*0x30*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _serverDynamicProperties;
                /*0x38*/ System.Runtime.Remoting.ObjRef _objRef;
                /*0x40*/ bool _disposed;

                /*0x7083d44*/ Identity(string objectUri);
                /*0x3814a3c*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x7083d74*/ System.Runtime.Remoting.Messaging.IMessageSink get_ChannelSink();
                /*0x7083d7c*/ void set_ChannelSink(System.Runtime.Remoting.Messaging.IMessageSink value);
                /*0x7083d84*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySink();
                /*0x7083d8c*/ string get_ObjectUri();
                /*0x7083d94*/ void set_ObjectUri(string value);
                /*0x7083d9c*/ bool get_IsConnected();
                /*0x7083dac*/ bool get_Disposed();
                /*0x7083db4*/ void set_Disposed(bool value);
                /*0x7083dc0*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection get_ClientDynamicProperties();
                /*0x7083e98*/ bool get_HasServerDynamicSinks();
                /*0x7083f08*/ void NotifyClientDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                /*0x70845e4*/ void NotifyServerDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
            }

            class ClientIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.WeakReference _proxyReference;

                /*0x7084668*/ ClientIdentity(string objectUri, System.Runtime.Remoting.ObjRef objRef);
                /*0x708479c*/ System.MarshalByRefObject get_ClientProxy();
                /*0x7084824*/ void set_ClientProxy(System.MarshalByRefObject value);
                /*0x7084894*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x708489c*/ string get_TargetUri();
            }

            class InternalRemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable _soapAttributes;

                static /*0x7084dcc*/ InternalRemotingServices();
                static /*0x70848bc*/ System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute(object reflectionObject);
            }

            class ObjRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static /*0x0*/ int MarshalledObjectRef;
                static /*0x4*/ int WellKnowObjectRef;
                /*0x10*/ System.Runtime.Remoting.IChannelInfo channel_info;
                /*0x18*/ string uri;
                /*0x20*/ System.Runtime.Remoting.IRemotingTypeInfo typeInfo;
                /*0x28*/ System.Runtime.Remoting.IEnvoyInfo envoyInfo;
                /*0x30*/ int flags;
                /*0x38*/ System.Type _serverType;

                static /*0x7086038*/ ObjRef();
                /*0x7084e48*/ ObjRef();
                /*0x7084ec0*/ ObjRef(string uri, System.Runtime.Remoting.IChannelInfo cinfo);
                /*0x70850bc*/ ObjRef(System.Type type, string url, object remoteChannelData);
                /*0x70855f4*/ ObjRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7084f04*/ System.Runtime.Remoting.ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo);
                /*0x7085044*/ byte[] SerializeType();
                /*0x7085b8c*/ bool get_IsReferenceToWellKnow();
                /*0x7085bf4*/ System.Runtime.Remoting.IChannelInfo get_ChannelInfo();
                /*0x7085bfc*/ System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo();
                /*0x7085c04*/ void set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo value);
                /*0x7085c0c*/ System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo();
                /*0x7085c14*/ void set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo value);
                /*0x7085c1c*/ string get_URI();
                /*0x7085c24*/ void set_URI(string value);
                /*0x7085c2c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7085df8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x7084e64*/ void UpdateChannelInfo();
                /*0x7085ef4*/ System.Type get_ServerType();
            }

            class RemotingConfiguration
            {
                static /*0x0*/ string applicationID;
                static /*0x8*/ string applicationName;
                static /*0x10*/ string processGuid;
                static /*0x18*/ bool defaultConfigRead;
                static /*0x19*/ bool defaultDelayedConfigRead;
                static /*0x1c*/ System.Runtime.Remoting.CustomErrorsModes _errorMode;
                static /*0x20*/ System.Collections.Hashtable wellKnownClientEntries;
                static /*0x28*/ System.Collections.Hashtable activatedClientEntries;
                static /*0x30*/ System.Collections.Hashtable wellKnownServiceEntries;
                static /*0x38*/ System.Collections.Hashtable activatedServiceEntries;
                static /*0x40*/ System.Collections.Hashtable channelTemplates;
                static /*0x48*/ System.Collections.Hashtable clientProviderTemplates;
                static /*0x50*/ System.Collections.Hashtable serverProviderTemplates;

                static /*0x7089a58*/ RemotingConfiguration();
                static /*0x7086088*/ string get_ApplicationName();
                static /*0x70860e0*/ void set_ApplicationName(string value);
                static /*0x7086140*/ string get_ProcessId();
                static /*0x70861ec*/ void LoadDefaultDelayedChannels();
                static /*0x7086624*/ bool IsActivationAllowed(System.Type svrType);
                static /*0x7086768*/ System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(System.Type svrType);
                static /*0x70868f4*/ System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(System.Type svrType);
                static /*0x7086a80*/ void RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry entry);
                static /*0x7086d00*/ void RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry entry);
                static /*0x7086e44*/ void RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x70870c4*/ void RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry entry);
                static /*0x7087340*/ void RegisterChannelTemplate(System.Runtime.Remoting.ChannelData channel);
                static /*0x70873bc*/ void RegisterClientProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x7087438*/ void RegisterServerProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x70874b4*/ void RegisterChannels(System.Collections.ArrayList channels, bool onlyDelayed);
                static /*0x7089274*/ void RegisterTypes(System.Collections.ArrayList types);
                static /*0x7089790*/ bool CustomErrorsEnabled(bool isLocalRequest);
                static /*0x7089824*/ void SetCustomErrorsMode(string mode);
            }

            class ConfigHandler : Mono.Xml.SmallXmlParser.IContentHandler
            {
                /*0x10*/ System.Collections.ArrayList typeEntries;
                /*0x18*/ System.Collections.ArrayList channelInstances;
                /*0x20*/ System.Runtime.Remoting.ChannelData currentChannel;
                /*0x28*/ System.Collections.Stack currentProviderData;
                /*0x30*/ string currentClientUrl;
                /*0x38*/ string appName;
                /*0x40*/ string currentXmlPath;
                /*0x48*/ bool onlyDelayedChannels;

                /*0x7086558*/ ConfigHandler(bool onlyDelayedChannels);
                /*0x7089c14*/ void ValidatePath(string element, string[] paths);
                /*0x7089cf0*/ bool CheckPath(string path);
                /*0x7089dd0*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x7089dd4*/ void OnProcessingInstruction(string name, string text);
                /*0x7089dd8*/ void OnIgnorableWhitespace(string s);
                /*0x7089ddc*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7089f9c*/ void ParseElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708c8b0*/ void OnEndElement(string name);
                /*0x708af28*/ void ReadCustomProviderData(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708b288*/ void ReadLifetine(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708c948*/ System.TimeSpan ParseTime(string s);
                /*0x708b7d0*/ void ReadChannel(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x708bbb8*/ System.Runtime.Remoting.ProviderData ReadProvider(string name, Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x708c2a4*/ void ReadClientActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708c3e8*/ void ReadServiceActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708bfcc*/ void ReadClientWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708c0c0*/ void ReadServiceWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708c4b4*/ void ReadInteropXml(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isElement);
                /*0x708c644*/ void ReadPreload(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x708cf40*/ string GetNotNull(Mono.Xml.SmallXmlParser.IAttrList attrs, string name);
                /*0x708d070*/ string ExtractAssembly(ref string type);
                /*0x708dcc0*/ void OnChars(string ch);
                /*0x708dcc4*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
            }

            class ChannelData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ string DelayLoadAsClientChannel;
                /*0x30*/ System.Collections.ArrayList _serverProviders;
                /*0x38*/ System.Collections.ArrayList _clientProviders;
                /*0x40*/ System.Collections.Hashtable _customProperties;

                /*0x708cd90*/ ChannelData();
                /*0x7088a70*/ System.Collections.ArrayList get_ServerProviders();
                /*0x7089204*/ System.Collections.ArrayList get_ClientProviders();
                /*0x708ce60*/ System.Collections.Hashtable get_CustomProperties();
                /*0x7088118*/ void CopyFrom(System.Runtime.Remoting.ChannelData other);
            }

            class ProviderData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ System.Collections.Hashtable CustomProperties;
                /*0x30*/ System.Collections.IList CustomData;

                /*0x708ced4*/ ProviderData();
                /*0x7088ae0*/ void CopyFrom(System.Runtime.Remoting.ProviderData other);
            }

            class FormatterData : System.Runtime.Remoting.ProviderData
            {
                /*0x708ced0*/ FormatterData();
            }

            class RemotingException : System.SystemException
            {
                /*0x708ddc0*/ RemotingException();
                /*0x7083ba4*/ RemotingException(string message);
                /*0x708ddc8*/ RemotingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x708af20*/ RemotingException(string message, System.Exception InnerException);
            }

            class RemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable uri_hash;
                static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _serializationFormatter;
                static /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _deserializationFormatter;
                static /*0x18*/ string app_id;
                static /*0x20*/ object app_id_lock;
                static /*0x28*/ int next_id;
                static /*0x30*/ System.Reflection.MethodInfo FieldSetterMethod;
                static /*0x38*/ System.Reflection.MethodInfo FieldGetterMethod;

                static /*0x708ddd0*/ RemotingServices();
                static /*0x708e0f0*/ object InternalExecute(System.Reflection.MethodBase method, object obj, object[] parameters, ref object[] out_args);
                static /*0x708e0f4*/ System.Reflection.MethodBase GetVirtualMethod(System.Type type, System.Reflection.MethodBase method);
                static /*0x708e0f8*/ bool IsTransparentProxy(object proxy);
                static /*0x708e130*/ System.Runtime.Remoting.Messaging.IMethodReturnMessage InternalExecuteMessage(System.MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);
                static /*0x708eb18*/ object Connect(System.Type classToProxy, string url);
                static /*0x708ec20*/ object Connect(System.Type classToProxy, string url, object data);
                static /*0x708ecc0*/ System.Type GetServerTypeForUri(string URI);
                static /*0x7085e9c*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef);
                static /*0x708efbc*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef, bool fRefine);
                static /*0x708f600*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj);
                static /*0x708f64c*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj, string ObjURI, System.Type RequestedType);
                static /*0x708f7a0*/ string NewUri();
                static /*0x708f6b8*/ System.Runtime.Remoting.Proxies.RealProxy GetRealProxy(object proxy);
                static /*0x70902c4*/ System.Reflection.MethodBase GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                static /*0x7090598*/ System.Reflection.MethodBase GetMethodBaseFromName(System.Type type, string methodName, System.Type[] signature);
                static /*0x709076c*/ System.Reflection.MethodBase FindInterfaceMethod(System.Type type, string methodName, System.Type[] signature);
                static /*0x709089c*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                static /*0x7090948*/ bool IsOneWay(System.Reflection.MethodBase method);
                static /*0x70909cc*/ object CreateClientProxy(System.Runtime.Remoting.ActivatedClientTypeEntry entry, object[] activationAttributes);
                static /*0x7090ac8*/ object CreateClientProxy(System.Type objectType, string url, object[] activationAttributes);
                static /*0x7090d30*/ object CreateClientProxy(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x7090d98*/ object CreateClientProxyForContextBound(System.Type type, object[] activationAttributes);
                static /*0x708ed68*/ System.Runtime.Remoting.Identity GetIdentityForUri(string uri);
                static /*0x7090f80*/ string RemoveAppNameFromUri(string uri);
                static /*0x7091074*/ System.Runtime.Remoting.ClientIdentity GetOrCreateClientIdentity(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType, ref object clientProxy);
                static /*0x7090bf8*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientChannelSinkChain(string url, object channelData, ref string objectUri);
                static /*0x70917e8*/ System.Runtime.Remoting.ClientActivatedIdentity CreateContextBoundObjectIdentity(System.Type objectType);
                static /*0x7090180*/ System.Runtime.Remoting.ClientActivatedIdentity CreateClientActivatedServerIdentity(System.MarshalByRefObject realObject, System.Type objectType, string objectUri);
                static /*0x708724c*/ System.Runtime.Remoting.ServerIdentity CreateWellKnownServerIdentity(System.Type objectType, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                static /*0x708fad8*/ void RegisterServerIdentity(System.Runtime.Remoting.ServerIdentity identity);
                static /*0x708f50c*/ object GetProxyForRemoteObject(System.Runtime.Remoting.ObjRef objref, System.Type classToProxy);
                static /*0x708ebac*/ object GetRemoteObject(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType);
                static /*0x7091954*/ byte[] SerializeCallData(object obj);
                static /*0x7091b80*/ object DeserializeCallData(byte[] array);
                static /*0x7091dc8*/ byte[] SerializeExceptionData(System.Exception ex);
                static /*0x708e0a0*/ void RegisterInternalChannels();
                static /*0x7091570*/ void DisposeIdentity(System.Runtime.Remoting.Identity ident);
                static /*0x7091f3c*/ System.Runtime.Remoting.Identity GetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg);
                static /*0x7092274*/ void SetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Identity ident);
                static /*0x7092388*/ bool UpdateOutArgObject(System.Reflection.ParameterInfo pi, object local, object remote);
                static /*0x7090f08*/ string GetNormalizedUri(string uri);

                class CACD
                {
                    /*0x10*/ object d;
                    /*0x18*/ object c;

                    /*0x7091b78*/ CACD();
                }
            }

            class ServerIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.Type _objectType;
                /*0x50*/ System.MarshalByRefObject _serverObject;
                /*0x58*/ System.Runtime.Remoting.Messaging.IMessageSink _serverSink;
                /*0x60*/ System.Runtime.Remoting.Contexts.Context _context;
                /*0x68*/ System.Runtime.Remoting.Lifetime.Lease _lease;

                /*0x70924c0*/ ServerIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x7092520*/ System.Type get_ObjectType();
                /*0x708fcdc*/ void StartTrackingLifetime(System.Runtime.Remoting.Lifetime.ILease lease);
                /*0x70926e8*/ void OnLifetimeExpired();
                /*0x7092794*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x70918d8*/ void AttachServerObject(System.MarshalByRefObject serverObject, System.Runtime.Remoting.Contexts.Context context);
                /*0x7092b54*/ System.Runtime.Remoting.Lifetime.Lease get_Lease();
                /*0x7092b5c*/ System.Runtime.Remoting.Contexts.Context get_Context();
                /*0x7092b64*/ void set_Context(System.Runtime.Remoting.Contexts.Context value);
                /*0x3814a3c*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x3814b90*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                /*0x70926ec*/ void DisposeServerObject();
            }

            class ClientActivatedIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x70*/ System.MarshalByRefObject _targetThis;

                /*0x70918c4*/ ClientActivatedIdentity(string objectUri, System.Type objectType);
                /*0x7092e64*/ System.MarshalByRefObject GetServerObject();
                /*0x7092e6c*/ void SetClientProxy(System.MarshalByRefObject obj);
                /*0x7092e74*/ void OnLifetimeExpired();
                /*0x7092ed0*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x709317c*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingletonIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x7091950*/ SingletonIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x709327c*/ System.MarshalByRefObject GetServerObject();
                /*0x709346c*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x7093554*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingleCallIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x709194c*/ SingleCallIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x7093648*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x7093868*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class DisposerReplySink : System.Runtime.Remoting.Messaging.IMessageSink
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                /*0x18*/ System.IDisposable _disposable;

                /*0x7093a20*/ DisposerReplySink(System.Runtime.Remoting.Messaging.IMessageSink next, System.IDisposable disposable);
                /*0x7093a64*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x7093b80*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SoapServices
            {
                static /*0x0*/ System.Collections.Hashtable _xmlTypes;
                static /*0x8*/ System.Collections.Hashtable _xmlElements;
                static /*0x10*/ System.Collections.Hashtable _soapActions;
                static /*0x18*/ System.Collections.Hashtable _soapActionsMethods;
                static /*0x20*/ System.Collections.Hashtable _typeInfos;

                static /*0x7094360*/ SoapServices();
                static /*0x7093bb8*/ string get_XmlNsForClrTypeWithAssembly();
                static /*0x7093bf8*/ string get_XmlNsForClrTypeWithNs();
                static /*0x7093c38*/ string get_XmlNsForClrTypeWithNsAndAssembly();
                static /*0x7093c78*/ string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName);
                static /*0x7093ee8*/ string GetNameKey(string name, string namspace);
                static /*0x7093f50*/ string GetAssemblyName(System.Reflection.MethodBase mb);
                static /*0x7094040*/ bool GetXmlElementForInteropType(System.Type type, ref string xmlElement, ref string xmlNamespace);
                static /*0x7094140*/ string GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb);
                static /*0x70941d4*/ string GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb);
                static /*0x7094268*/ bool GetXmlTypeForInteropType(System.Type type, ref string xmlType, ref string xmlTypeNamespace);
                static /*0x708dc04*/ void PreLoad(System.Reflection.Assembly assembly);
                static /*0x708d6e0*/ void PreLoad(System.Type type);
                static /*0x708d3c0*/ void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, System.Type type);
                static /*0x708d550*/ void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, System.Type type);
                static /*0x7093e04*/ string EncodeNs(string ns);

                class TypeInfo
                {
                    /*0x10*/ System.Collections.Hashtable Attributes;
                    /*0x18*/ System.Collections.Hashtable Elements;

                    /*0x7094358*/ TypeInfo();
                }
            }

            class TypeEntry
            {
                /*0x10*/ string assembly_name;
                /*0x18*/ string type_name;

                /*0x7083b9c*/ TypeEntry();
                /*0x709447c*/ string get_AssemblyName();
                /*0x7094484*/ void set_AssemblyName(string value);
                /*0x709448c*/ string get_TypeName();
                /*0x7094494*/ void set_TypeName(string value);
            }

            class TypeInfo : System.Runtime.Remoting.IRemotingTypeInfo
            {
                /*0x10*/ string serverType;
                /*0x18*/ string[] serverHierarchy;
                /*0x20*/ string[] interfacesImplemented;

                /*0x70851d0*/ TypeInfo(System.Type type);
                /*0x709449c*/ string get_TypeName();
                /*0x70944a4*/ bool CanCastTo(System.Type fromType, object o);
            }

            class WellKnownClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_url;
                /*0x30*/ string app_url;

                /*0x708d13c*/ WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl);
                /*0x70946fc*/ string get_ApplicationUrl();
                /*0x7094704*/ System.Type get_ObjectType();
                /*0x709470c*/ string get_ObjectUrl();
                /*0x7094714*/ string ToString();
            }

            enum WellKnownObjectMode
            {
                Singleton = 1,
                SingleCall = 2,
            }

            class WellKnownServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_uri;
                /*0x30*/ System.Runtime.Remoting.WellKnownObjectMode obj_mode;

                /*0x708d274*/ WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                /*0x7094734*/ System.Runtime.Remoting.WellKnownObjectMode get_Mode();
                /*0x709473c*/ System.Type get_ObjectType();
                /*0x7094744*/ string get_ObjectUri();
                /*0x709474c*/ string ToString();
            }

            namespace Services
            {
                interface ITrackingHandler
                {
                    /*0x3816710*/ void DisconnectedObject(object obj);
                    /*0x3816810*/ void MarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    /*0x3816810*/ void UnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                }

                class TrackingServices
                {
                    static /*0x0*/ System.Collections.ArrayList _handlers;

                    static /*0x7094870*/ TrackingServices();
                    static /*0x708fe7c*/ void NotifyMarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0x708f208*/ void NotifyUnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0x7092b6c*/ void NotifyDisconnectedObject(object obj);
                }
            }

            namespace Proxies
            {
                class ProxyAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0x70948ec*/ System.MarshalByRefObject CreateInstance(System.Type serverType);
                    /*0x70949e0*/ System.Runtime.Remoting.Proxies.RealProxy CreateProxy(System.Runtime.Remoting.ObjRef objRef, System.Type serverType, object serverObject, System.Runtime.Remoting.Contexts.Context serverContext);
                    /*0x7094a34*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x7094a38*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class TransparentProxy
                {
                    /*0x10*/ System.Runtime.Remoting.Proxies.RealProxy _rp;
                    /*0x18*/ Mono.RuntimeRemoteClassHandle _class;
                    /*0x20*/ bool _custom_type_info;

                    /*0x7095a38*/ TransparentProxy();
                    /*0x7094a40*/ System.RuntimeType GetProxyType();
                    /*0x7094b00*/ bool get_IsContextBoundObject();
                    /*0x7094b1c*/ System.Runtime.Remoting.Contexts.Context get_TargetContext();
                    /*0x7094b38*/ bool InCurrentContext();
                    /*0x7094b78*/ object LoadRemoteFieldNew(nint classPtr, nint fieldPtr);
                    /*0x709575c*/ void StoreRemoteField(nint classPtr, nint fieldPtr, object arg);
                }

                class RealProxy
                {
                    /*0x10*/ System.Type class_to_proxy;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _targetContext;
                    /*0x20*/ System.MarshalByRefObject _server;
                    /*0x28*/ int _targetDomainId;
                    /*0x30*/ string _targetUri;
                    /*0x38*/ System.Runtime.Remoting.Identity _objectIdentity;
                    /*0x40*/ object _objTP;
                    /*0x48*/ object _stubData;

                    static /*0x7095b70*/ System.Type InternalGetProxyType(object transparentProxy);
                    static /*0x7094e44*/ object PrivateInvoke(System.Runtime.Remoting.Proxies.RealProxy rp, System.Runtime.Remoting.Messaging.IMessage msg, ref System.Exception exc, ref object[] out_args);
                    static /*0x7095ce0*/ object[] ProcessResponse(System.Runtime.Remoting.Messaging.IMethodReturnMessage mrm, System.Runtime.Remoting.Messaging.MonoMethodMessage call);
                    /*0x7095a40*/ RealProxy();
                    /*0x7095a50*/ RealProxy(System.Type classToProxy);
                    /*0x7095b40*/ RealProxy(System.Type classToProxy, System.Runtime.Remoting.ClientIdentity identity);
                    /*0x7095a58*/ RealProxy(System.Type classToProxy, nint stub, object stubData);
                    /*0x708f700*/ System.Type GetProxiedType();
                    /*0x7095b74*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7095bf0*/ System.Runtime.Remoting.Identity get_ObjectIdentity();
                    /*0x7095bf8*/ void set_ObjectIdentity(System.Runtime.Remoting.Identity value);
                    /*0x3814a3c*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70963d4*/ object InternalGetTransparentProxy(string className);
                    /*0x70963d8*/ object GetTransparentProxy();
                    /*0x709654c*/ void AttachServer(System.MarshalByRefObject s);
                    /*0x7096554*/ void SetTargetDomain(int domainId);
                    /*0x709655c*/ object GetAppDomainTarget();
                }

                class RemotingProxy : System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.IRemotingTypeInfo
                {
                    static /*0x0*/ System.Reflection.MethodInfo _cache_GetTypeMethod;
                    static /*0x8*/ System.Reflection.MethodInfo _cache_GetHashCodeMethod;
                    /*0x50*/ System.Runtime.Remoting.Messaging.IMessageSink _sink;
                    /*0x58*/ bool _hasEnvoySink;
                    /*0x60*/ System.Runtime.Remoting.Messaging.ConstructionCall _ctorCall;

                    static /*0x7097608*/ RemotingProxy();
                    /*0x7091774*/ RemotingProxy(System.Type type, System.Runtime.Remoting.ClientIdentity identity);
                    /*0x7090cd8*/ RemotingProxy(System.Type type, string activationUrl, object[] activationAttributes);
                    /*0x7096688*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage request);
                    /*0x7096f1c*/ void AttachIdentity(System.Runtime.Remoting.Identity identity);
                    /*0x7095c00*/ System.Runtime.Remoting.Messaging.IMessage ActivateRemoteObject(System.Runtime.Remoting.Messaging.IMethodMessage request);
                    /*0x70971ac*/ string get_TypeName();
                    /*0x70972e4*/ bool CanCastTo(System.Type fromType, object o);
                    /*0x70974f0*/ void Finalize();
                }
            }

            namespace Lifetime
            {
                interface ILease
                {
                    /*0x38155ec*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x3814574*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0x38155ec*/ System.TimeSpan get_RenewOnCallTime();
                    System.TimeSpan Renew(System.TimeSpan renewalTime);
                }

                interface ISponsor
                {
                    System.TimeSpan Renewal(System.Runtime.Remoting.Lifetime.ILease lease);
                }

                class Lease : System.MarshalByRefObject, System.Runtime.Remoting.Lifetime.ILease
                {
                    /*0x18*/ System.DateTime _leaseExpireTime;
                    /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseState _currentState;
                    /*0x28*/ System.TimeSpan _initialLeaseTime;
                    /*0x30*/ System.TimeSpan _renewOnCallTime;
                    /*0x38*/ System.TimeSpan _sponsorshipTimeout;
                    /*0x40*/ System.Collections.ArrayList _sponsors;
                    /*0x48*/ System.Collections.Queue _renewingSponsors;
                    /*0x50*/ System.Runtime.Remoting.Lifetime.Lease.RenewalDelegate _renewalDelegate;

                    /*0x7092528*/ Lease();
                    /*0x70976fc*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x7097764*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0x709776c*/ void Activate();
                    /*0x7097778*/ System.TimeSpan get_RenewOnCallTime();
                    /*0x7097780*/ System.TimeSpan Renew(System.TimeSpan renewalTime);
                    /*0x709780c*/ void Unregister(System.Runtime.Remoting.Lifetime.ISponsor obj);
                    /*0x7097950*/ void UpdateState();
                    /*0x7097af0*/ void CheckNextSponsor();
                    /*0x7097e84*/ void ProcessSponsorResponse(object state, bool timedOut);

                    class RenewalDelegate : System.MulticastDelegate
                    {
                        /*0x7097d5c*/ RenewalDelegate(object object, nint method);
                        /*0x70980a0*/ System.TimeSpan Invoke(System.Runtime.Remoting.Lifetime.ILease lease);
                        /*0x7097e64*/ System.IAsyncResult BeginInvoke(System.Runtime.Remoting.Lifetime.ILease lease, System.AsyncCallback callback, object object);
                        /*0x7098078*/ System.TimeSpan EndInvoke(System.IAsyncResult result);
                    }
                }

                class LeaseManager
                {
                    /*0x10*/ System.Collections.ArrayList _objects;
                    /*0x18*/ System.Threading.Timer _timer;

                    /*0x70986bc*/ LeaseManager();
                    /*0x70980b4*/ void SetPollTime(System.TimeSpan timeSpan);
                    /*0x70981ac*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                    /*0x70982e0*/ void StartManager();
                    /*0x709843c*/ void StopManager();
                    /*0x709846c*/ void ManageLeases(object state);
                }

                class LeaseSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x7098728*/ LeaseSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x7098758*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7098a94*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x7098808*/ void RenewLease(System.Runtime.Remoting.Messaging.IMessage msg);
                }

                enum LeaseState
                {
                    Null = 0,
                    Initial = 1,
                    Active = 2,
                    Renewing = 3,
                    Expired = 4,
                }

                class LifetimeServices
                {
                    static /*0x0*/ System.TimeSpan _leaseManagerPollTime;
                    static /*0x8*/ System.TimeSpan _leaseTime;
                    static /*0x10*/ System.TimeSpan _renewOnCallTime;
                    static /*0x18*/ System.TimeSpan _sponsorshipTimeout;
                    static /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager;

                    static /*0x7098b58*/ LifetimeServices();
                    static /*0x7098c58*/ System.TimeSpan get_LeaseManagerPollTime();
                    static /*0x708cd1c*/ void set_LeaseManagerPollTime(System.TimeSpan value);
                    static /*0x7098cb0*/ System.TimeSpan get_LeaseTime();
                    static /*0x7098d08*/ void set_LeaseTime(System.TimeSpan value);
                    static /*0x7098d64*/ System.TimeSpan get_RenewOnCallTime();
                    static /*0x7098dbc*/ void set_RenewOnCallTime(System.TimeSpan value);
                    static /*0x7098e18*/ System.TimeSpan get_SponsorshipTimeout();
                    static /*0x7098e70*/ void set_SponsorshipTimeout(System.TimeSpan value);
                    static /*0x7092680*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                }
            }

            namespace Contexts
            {
                class Context
                {
                    static /*0x0*/ object[] local_slots;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.IMessageSink default_server_context_sink;
                    static /*0x10*/ int global_count;
                    static /*0x18*/ System.LocalDataStoreMgr _localDataStoreMgr;
                    static /*0x20*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection global_dynamic_properties;
                    /*0x10*/ int domain_id;
                    /*0x14*/ int context_id;
                    /*0x18*/ nuint static_data;
                    /*0x20*/ nuint data;
                    /*0x28*/ System.Runtime.Remoting.Messaging.IMessageSink server_context_sink_chain;
                    /*0x30*/ System.Runtime.Remoting.Messaging.IMessageSink client_context_sink_chain;
                    /*0x38*/ System.Collections.Generic.List<System.Runtime.Remoting.Contexts.IContextProperty> context_properties;
                    /*0x40*/ System.LocalDataStoreHolder _localDataStore;
                    /*0x48*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection context_dynamic_properties;
                    /*0x50*/ System.Runtime.Remoting.Contexts.ContextCallbackObject callback_object;

                    static /*0x709afc8*/ Context();
                    static /*0x7098ecc*/ void RegisterContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7098ed0*/ void ReleaseContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x70918d0*/ System.Runtime.Remoting.Contexts.Context get_DefaultContext();
                    static /*0x7099194*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7099690*/ bool UnregisterDynamicProperty(string name, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x709920c*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection GetDynamicPropertyCollection(System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7099874*/ void NotifyGlobalDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    static /*0x7099974*/ bool get_HasGlobalDynamicSinks();
                    static /*0x709a26c*/ System.Runtime.Remoting.Contexts.Context SwitchToContext(System.Runtime.Remoting.Contexts.Context newContext);
                    static /*0x709a274*/ System.Runtime.Remoting.Contexts.Context CreateNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    static /*0x709adb0*/ System.LocalDataStoreSlot AllocateDataSlot();
                    static /*0x709ae14*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
                    static /*0x709ae80*/ void FreeNamedDataSlot(string name);
                    static /*0x709aeec*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
                    static /*0x709af58*/ object GetData(System.LocalDataStoreSlot slot);
                    static /*0x709af88*/ void SetData(System.LocalDataStoreSlot slot, object data);
                    /*0x7098ed4*/ Context();
                    /*0x7098f58*/ void Finalize();
                    /*0x7099028*/ int get_ContextID();
                    /*0x7099030*/ System.Runtime.Remoting.Contexts.IContextProperty[] get_ContextProperties();
                    /*0x70990a4*/ bool get_IsDefaultContext();
                    /*0x70990b4*/ bool get_NeedsContextSink();
                    /*0x7099a18*/ void NotifyDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    /*0x7099a9c*/ bool get_HasDynamicSinks();
                    /*0x7096c44*/ bool get_HasExitSinks();
                    /*0x7099adc*/ System.Runtime.Remoting.Contexts.IContextProperty GetProperty(string name);
                    /*0x7099cd4*/ void SetProperty(System.Runtime.Remoting.Contexts.IContextProperty prop);
                    /*0x7099e88*/ void Freeze();
                    /*0x709a034*/ string ToString();
                    /*0x709a090*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSinkChain();
                    /*0x7096cfc*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSinkChain();
                    /*0x7092fc4*/ System.Runtime.Remoting.Messaging.IMessageSink CreateServerObjectSinkChain(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x7092950*/ System.Runtime.Remoting.Messaging.IMessageSink CreateEnvoySink(System.MarshalByRefObject serverObject);
                    /*0x709aab4*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                    /*0x709ac38*/ System.LocalDataStore get_MyLocalStore();
                }

                class DynamicPropertyCollection
                {
                    /*0x10*/ System.Collections.ArrayList _properties;

                    /*0x7083e2c*/ DynamicPropertyCollection();
                    /*0x7083ed8*/ bool get_HasProperties();
                    /*0x7099380*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop);
                    /*0x7099708*/ bool UnregisterDynamicProperty(string name);
                    /*0x7083f8c*/ void NotifyMessage(bool start, System.Runtime.Remoting.Messaging.IMessage msg, bool client_site, bool async);
                    /*0x709b03c*/ int FindProperty(string name);

                    class DynamicPropertyReg
                    {
                        /*0x10*/ System.Runtime.Remoting.Contexts.IDynamicProperty Property;
                        /*0x18*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink Sink;

                        /*0x709b1a0*/ DynamicPropertyReg();
                    }
                }

                class ContextCallbackObject : System.ContextBoundObject
                {
                    /*0x709ac2c*/ ContextCallbackObject();
                    /*0x709ac34*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                }

                class CrossContextChannel : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x709ba04*/ CrossContextChannel();
                    /*0x709b1a8*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x709b570*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);

                    class ContextRestoreSink : System.Runtime.Remoting.Messaging.IMessageSink
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                        /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;
                        /*0x20*/ System.Runtime.Remoting.Messaging.IMessage _call;

                        /*0x709b9a4*/ ContextRestoreSink(System.Runtime.Remoting.Messaging.IMessageSink next, System.Runtime.Remoting.Contexts.Context context, System.Runtime.Remoting.Messaging.IMessage call);
                        /*0x709ba0c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                        /*0x709bcc0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    }
                }

                class CrossContextDelegate : System.MulticastDelegate
                {
                    /*0x709bcf8*/ CrossContextDelegate(object object, nint method);
                    /*0x709bd94*/ void Invoke();
                }

                interface IContextAttribute
                {
                    /*0x3816710*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x3814200*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IContextProperty
                {
                    /*0x38148bc*/ string get_Name();
                    /*0x3816710*/ void Freeze(System.Runtime.Remoting.Contexts.Context newContext);
                    /*0x38141c4*/ bool IsNewContextOK(System.Runtime.Remoting.Contexts.Context newCtx);
                }

                interface IContributeClientContextSink
                {
                    /*0x3814a3c*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeDynamicSink
                {
                    /*0x38148bc*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink();
                }

                interface IContributeEnvoySink
                {
                    /*0x3814b90*/ System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeObjectSink
                {
                    /*0x3814b90*/ System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeServerContextSink
                {
                    /*0x3814a3c*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IDynamicMessageSink
                {
                    /*0x3816744*/ void ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync);
                    /*0x3816744*/ void ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync);
                }

                interface IDynamicProperty
                {
                    /*0x38148bc*/ string get_Name();
                }
            }

            namespace Channels
            {
                class ChannelServices
                {
                    static /*0x0*/ System.Collections.ArrayList registeredChannels;
                    static /*0x8*/ System.Collections.ArrayList delayedClientChannels;
                    static /*0x10*/ System.Runtime.Remoting.Contexts.CrossContextChannel _crossContextSink;
                    static /*0x18*/ string CrossContextUrl;
                    static /*0x20*/ System.Collections.IList oldStartModeTypes;

                    static /*0x709edec*/ ChannelServices();
                    static /*0x709bda8*/ System.Runtime.Remoting.Contexts.CrossContextChannel get_CrossContextChannel();
                    static /*0x709be00*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, ref string objectUri);
                    static /*0x709c6a4*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(System.Runtime.Remoting.Channels.IChannelSender sender, string url, object[] channelDataArray, ref string objectUri);
                    static /*0x709c8c0*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl);
                    static /*0x709c918*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity);
                    static /*0x709d17c*/ void RegisterChannelConfig(System.Runtime.Remoting.ChannelData channel);
                    static /*0x709de0c*/ object CreateProvider(System.Runtime.Remoting.ProviderData prov);
                    static /*0x709e114*/ System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x709e1bc*/ System.Runtime.Remoting.Messaging.ReturnMessage CheckIncomingMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x709e45c*/ System.Runtime.Remoting.Messaging.IMessage CheckReturnMessage(System.Runtime.Remoting.Messaging.IMessage callMsg, System.Runtime.Remoting.Messaging.IMessage retMsg);
                    static /*0x709e794*/ bool IsLocalCall(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    static /*0x709e8dc*/ object[] GetCurrentChannelInfo();
                }

                class CrossAppDomainData
                {
                    /*0x10*/ object _ContextID;
                    /*0x18*/ int _DomainID;
                    /*0x20*/ string _processGuid;

                    /*0x709efa8*/ CrossAppDomainData(int domainId);
                    /*0x709f058*/ int get_DomainID();
                    /*0x709f060*/ string get_ProcessID();
                }

                class CrossAppDomainChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.IChannelReceiver
                {
                    static /*0x0*/ object s_lock;

                    static /*0x709f668*/ CrossAppDomainChannel();
                    static /*0x709f068*/ void RegisterCrossAppDomainChannel();
                    /*0x709f1a0*/ CrossAppDomainChannel();
                    /*0x709f1a8*/ string get_ChannelName();
                    /*0x709f1e8*/ int get_ChannelPriority();
                    /*0x709f1f0*/ object get_ChannelData();
                    /*0x709f254*/ void StartListening(object data);
                    /*0x709f258*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object data, ref string uri);
                }

                class CrossAppDomainSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Collections.Hashtable s_sinks;
                    static /*0x8*/ System.Reflection.MethodInfo processMessageMethod;
                    /*0x10*/ int _domainID;

                    static /*0x70a0360*/ CrossAppDomainSink();
                    static /*0x709f3e0*/ System.Runtime.Remoting.Channels.CrossAppDomainSink GetSink(int domainID);
                    static /*0x709f714*/ System.Runtime.Remoting.Channels.CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg);
                    /*0x709f6e4*/ CrossAppDomainSink(int domainID);
                    /*0x709f70c*/ int get_TargetDomainId();
                    /*0x709f99c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msgRequest);
                    /*0x70a0148*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70a0254*/ void SendAsyncMessage(object data);
                    /*0x70a0464*/ void <AsyncProcessMessage>b__10_0(object data);

                    struct ProcessMessageRes
                    {
                        /*0x10*/ byte[] arrResponse;
                        /*0x18*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm;
                    }
                }

                class CADSerializer
                {
                    static /*0x709fe5c*/ System.Runtime.Remoting.Messaging.IMessage DeserializeMessage(System.IO.MemoryStream mem, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    static /*0x709f8a4*/ System.IO.MemoryStream SerializeMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x70a04ec*/ object DeserializeObjectSafe(byte[] mem);
                    static /*0x70a061c*/ System.IO.MemoryStream SerializeObject(object obj);
                    static /*0x70a0588*/ object DeserializeObject(System.IO.MemoryStream mem);
                }

                class AsyncRequest
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink ReplySink;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMessage MsgRequest;

                    /*0x70a0210*/ AsyncRequest(System.Runtime.Remoting.Messaging.IMessage msgRequest, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IChannel
                {
                    /*0x38148bc*/ string get_ChannelName();
                    /*0x3814574*/ int get_ChannelPriority();
                }

                interface IChannelDataStore
                {
                }

                interface IChannelReceiver : System.Runtime.Remoting.Channels.IChannel
                {
                    /*0x38148bc*/ object get_ChannelData();
                    /*0x3816710*/ void StartListening(object data);
                }

                interface IChannelSender : System.Runtime.Remoting.Channels.IChannel
                {
                    /*0x3814c14*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, ref string objectURI);
                }

                interface IClientChannelSinkProvider
                {
                    /*0x3816710*/ void set_Next(System.Runtime.Remoting.Channels.IClientChannelSinkProvider value);
                }

                interface ISecurableChannel
                {
                    /*0x3815cc4*/ void set_IsSecured(bool value);
                }

                interface IServerChannelSinkProvider
                {
                    /*0x3816710*/ void set_Next(System.Runtime.Remoting.Channels.IServerChannelSinkProvider value);
                }

                class SinkProviderData
                {
                    /*0x10*/ string sinkName;
                    /*0x18*/ System.Collections.ArrayList children;
                    /*0x20*/ System.Collections.Hashtable properties;

                    /*0x70a0714*/ SinkProviderData(string name);
                    /*0x70a07d4*/ System.Collections.IList get_Children();
                    /*0x70a07dc*/ System.Collections.IDictionary get_Properties();
                }
            }

            namespace Activation
            {
                class ActivationServices
                {
                    static /*0x0*/ System.Runtime.Remoting.Activation.IActivator _constructionActivator;

                    static /*0x70a07e4*/ System.Runtime.Remoting.Activation.IActivator get_ConstructionActivator();
                    static /*0x70a0888*/ System.Runtime.Remoting.Messaging.IMessage Activate(System.Runtime.Remoting.Proxies.RemotingProxy proxy, System.Runtime.Remoting.Messaging.ConstructionCall ctorCall);
                    static /*0x70a0ac8*/ System.Runtime.Remoting.Messaging.IMessage RemoteActivate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0x70a0c94*/ System.Runtime.Remoting.Messaging.ConstructionCall CreateConstructionCall(System.Type type, string activationUrl, object[] activationAttributes);
                    static /*0x70a1760*/ System.Runtime.Remoting.Messaging.IMessage CreateInstanceFromMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0x70a1b70*/ object CreateProxyForType(System.Type type);
                    static /*0x70a1b60*/ object AllocateUninitializedClassInstance(System.Type type);
                    static /*0x70a1cb0*/ void EnableProxyActivation(System.Type type, bool enable);
                }

                class AppDomainLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ string _activationUrl;
                    /*0x18*/ System.Runtime.Remoting.Activation.IActivator _next;

                    /*0x70a16ec*/ AppDomainLevelActivator(string activationUrl, System.Runtime.Remoting.Activation.IActivator next);
                    /*0x70a1cb8*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x70a1cc0*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                class ConstructionLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x70a0880*/ ConstructionLevelActivator();
                    /*0x70a218c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x70a2194*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class ContextLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ System.Runtime.Remoting.Activation.IActivator m_NextActivator;

                    /*0x70a1730*/ ContextLevelActivator(System.Runtime.Remoting.Activation.IActivator next);
                    /*0x70a2288*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x70a2290*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                interface IActivator
                {
                    /*0x38148bc*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x3814a3c*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IConstructionCallMessage : System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x38148bc*/ System.Type get_ActivationType();
                    /*0x38148bc*/ string get_ActivationTypeName();
                    /*0x38148bc*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0x3816710*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0x38148bc*/ object[] get_CallSiteActivationAttributes();
                    /*0x38148bc*/ System.Collections.IList get_ContextProperties();
                }

                interface IConstructionReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                class RemoteActivationAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0x10*/ System.Collections.IList _contextProperties;

                    /*0x70a25d8*/ RemoteActivationAttribute(System.Collections.IList contextProperties);
                    /*0x70a2608*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                    /*0x70a2610*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                }

                class RemoteActivator : System.MarshalByRefObject, System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x70a29f8*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x70a2e7c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                }
            }

            namespace Metadata
            {
                class SoapAttribute : System.Attribute
                {
                    /*0x10*/ bool _useAttribute;
                    /*0x18*/ string ProtXmlNamespace;
                    /*0x20*/ object ReflectInfo;

                    /*0x70a2eb4*/ SoapAttribute();
                    /*0x70a2ebc*/ bool get_UseAttribute();
                    /*0x70a2ec4*/ string get_XmlNamespace();
                    /*0x70a2ecc*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapFieldAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _elementName;
                    /*0x30*/ bool _isElement;

                    /*0x70a2ed4*/ SoapFieldAttribute();
                    /*0x70a2edc*/ string get_XmlElementName();
                    /*0x70a2ee4*/ bool IsInteropXmlElement();
                    /*0x70a2eec*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapMethodAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _responseElement;
                    /*0x30*/ string _responseNamespace;
                    /*0x38*/ string _returnElement;
                    /*0x40*/ string _soapAction;
                    /*0x48*/ bool _useAttribute;
                    /*0x50*/ string _namespace;

                    /*0x70a2fa4*/ SoapMethodAttribute();
                    /*0x70a2fac*/ bool get_UseAttribute();
                    /*0x70a2fb4*/ string get_XmlNamespace();
                    /*0x70a2fbc*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapParameterAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x70a31dc*/ SoapParameterAttribute();
                }

                class SoapTypeAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ bool _useAttribute;
                    /*0x30*/ string _xmlElementName;
                    /*0x38*/ string _xmlNamespace;
                    /*0x40*/ string _xmlTypeName;
                    /*0x48*/ string _xmlTypeNamespace;
                    /*0x50*/ bool _isType;
                    /*0x51*/ bool _isElement;

                    /*0x70a31e4*/ SoapTypeAttribute();
                    /*0x70a31ec*/ bool get_UseAttribute();
                    /*0x70a31f4*/ string get_XmlElementName();
                    /*0x70a31fc*/ string get_XmlNamespace();
                    /*0x70a3204*/ string get_XmlTypeName();
                    /*0x70a320c*/ string get_XmlTypeNamespace();
                    /*0x70a3214*/ bool get_IsInteropXmlElement();
                    /*0x70a321c*/ bool get_IsInteropXmlType();
                    /*0x70a3224*/ void SetReflectionObject(object reflectionObject);
                }
            }

            namespace Messaging
            {
                class CallContext
                {
                    static /*0x70a3464*/ object SetCurrentCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                    static /*0x70a346c*/ System.Runtime.Remoting.Messaging.LogicalCallContext SetLogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext callCtx);
                    /*0x70a345c*/ CallContext();
                }

                class IllogicalCallContext
                {
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ object m_HostContext;

                    /*0x70a37c0*/ IllogicalCallContext();
                    /*0x70a34c4*/ System.Collections.Hashtable get_Datastore();
                    /*0x70a3534*/ object get_HostContext();
                    /*0x70a353c*/ void set_HostContext(object value);
                    /*0x70a3544*/ bool get_HasUserData();
                    /*0x70a3570*/ System.Runtime.Remoting.Messaging.IllogicalCallContext CreateCopy();
                }

                class LogicalCallContext : System.Runtime.Serialization.ISerializable, System.ICloneable
                {
                    static /*0x0*/ System.Type s_callContextType;
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ System.Runtime.Remoting.Messaging.CallContextRemotingData m_RemotingData;
                    /*0x20*/ System.Runtime.Remoting.Messaging.CallContextSecurityData m_SecurityData;
                    /*0x28*/ object m_HostContext;
                    /*0x30*/ bool m_IsCorrelationMgr;

                    static /*0x70a4a18*/ LogicalCallContext();
                    /*0x70a37c8*/ LogicalCallContext();
                    /*0x70a37d0*/ LogicalCallContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70a3cf4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70a4064*/ object Clone();
                    /*0x70a4774*/ void Merge(System.Runtime.Remoting.Messaging.LogicalCallContext lc);
                    /*0x70a4998*/ bool get_HasInfo();
                    /*0x70a4038*/ bool get_HasUserData();
                    /*0x70a3c50*/ System.Collections.Hashtable get_Datastore();

                    struct Reader
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.LogicalCallContext m_ctx;

                        /*0x70a4aa8*/ Reader(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                        /*0x70a4ab0*/ bool get_IsNull();
                        /*0x70a4ac0*/ bool get_HasInfo();
                        /*0x70a4ad0*/ System.Runtime.Remoting.Messaging.LogicalCallContext Clone();
                    }
                }

                class CallContextSecurityData : System.ICloneable
                {
                    /*0x10*/ System.Security.Principal.IPrincipal _principal;

                    /*0x70a4b38*/ CallContextSecurityData();
                    /*0x70a4a08*/ bool get_HasInfo();
                    /*0x70a4704*/ object Clone();
                }

                class CallContextRemotingData : System.ICloneable
                {
                    /*0x10*/ string _logicalCallID;

                    /*0x70a4b50*/ CallContextRemotingData();
                    /*0x70a4b40*/ string get_LogicalCallID();
                    /*0x70a4b48*/ void set_LogicalCallID(string value);
                    /*0x70a49f8*/ bool get_HasInfo();
                    /*0x70a4694*/ object Clone();
                }

                enum ArgInfoType
                {
                    In = 0,
                    Out = 1,
                }

                class ArgInfo
                {
                    /*0x10*/ int[] _paramMap;
                    /*0x18*/ int _inoutArgCount;
                    /*0x20*/ System.Reflection.MethodBase _method;

                    /*0x70a4b58*/ ArgInfo(System.Reflection.MethodBase method, System.Runtime.Remoting.Messaging.ArgInfoType type);
                    /*0x70a4d2c*/ object[] GetInOutArgs(object[] args);
                }

                class AsyncResult : System.IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink, System.Threading.IThreadPoolWorkItem
                {
                    /*0x10*/ object async_state;
                    /*0x18*/ System.Threading.WaitHandle handle;
                    /*0x20*/ object async_delegate;
                    /*0x28*/ nint data;
                    /*0x30*/ object object_data;
                    /*0x38*/ bool sync_completed;
                    /*0x39*/ bool completed;
                    /*0x3a*/ bool endinvoke_called;
                    /*0x40*/ object async_callback;
                    /*0x48*/ System.Threading.ExecutionContext current;
                    /*0x50*/ System.Threading.ExecutionContext original;
                    /*0x58*/ long add_time;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MonoMethodMessage call_message;
                    /*0x68*/ System.Runtime.Remoting.Messaging.IMessageCtrl message_ctrl;
                    /*0x70*/ System.Runtime.Remoting.Messaging.IMessage reply_message;
                    /*0x78*/ System.Threading.WaitCallback orig_cb;

                    /*0x70a4e40*/ AsyncResult();
                    /*0x70a4e48*/ object get_AsyncState();
                    /*0x70a4e50*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                    /*0x70a4f74*/ bool get_CompletedSynchronously();
                    /*0x70a4f7c*/ bool get_IsCompleted();
                    /*0x70a4f84*/ bool get_EndInvokeCalled();
                    /*0x70a4f8c*/ void set_EndInvokeCalled(bool value);
                    /*0x70a4f98*/ object get_AsyncDelegate();
                    /*0x70a4fa0*/ System.Runtime.Remoting.Messaging.IMessageSink get_NextSink();
                    /*0x70a4fa8*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70a4fe0*/ System.Runtime.Remoting.Messaging.IMessage GetReplyMessage();
                    /*0x70a4fe8*/ void SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl mc);
                    /*0x70a4ff0*/ void SetCompletedSynchronously(bool completed);
                    /*0x70a4ffc*/ System.Runtime.Remoting.Messaging.IMessage EndInvoke();
                    /*0x70a510c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70a52ac*/ System.Runtime.Remoting.Messaging.MonoMethodMessage get_CallMessage();
                    /*0x70a52b4*/ void set_CallMessage(System.Runtime.Remoting.Messaging.MonoMethodMessage value);
                    /*0x70a52bc*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                    /*0x70a52c4*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                    /*0x70a52c0*/ object Invoke();
                }

                class CADArgHolder
                {
                    /*0x10*/ int index;

                    /*0x70a52c8*/ CADArgHolder(int i);
                }

                class CADObjRef
                {
                    /*0x10*/ System.Runtime.Remoting.ObjRef objref;
                    /*0x18*/ int SourceDomain;
                    /*0x20*/ byte[] TypeInfo;

                    /*0x70a52f0*/ CADObjRef(System.Runtime.Remoting.ObjRef o, int sourceDomain);
                }

                class CADMethodRef
                {
                    /*0x10*/ bool ctor;
                    /*0x18*/ string typeName;
                    /*0x20*/ string methodName;
                    /*0x28*/ string[] param_names;
                    /*0x30*/ string[] generic_arg_names;

                    /*0x70a5934*/ CADMethodRef(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0x70a5350*/ System.Type[] GetTypes(string[] typeArray);
                    /*0x70a54ac*/ System.Reflection.MethodBase Resolve();
                }

                class CADMessageBase
                {
                    /*0x10*/ object[] _args;
                    /*0x18*/ byte[] _serializedArgs;
                    /*0x20*/ int _propertyCount;
                    /*0x28*/ System.Runtime.Remoting.Messaging.CADArgHolder _callContext;
                    /*0x30*/ byte[] serializedMethod;

                    static /*0x70a5d18*/ System.Type[] GetSignature(System.Reflection.MethodBase methodBase, bool load);
                    static /*0x70a5efc*/ int MarshalProperties(System.Collections.IDictionary dict, ref System.Collections.ArrayList args);
                    static /*0x70a67e0*/ void UnmarshalProperties(System.Collections.IDictionary dict, int count, System.Collections.ArrayList args);
                    static /*0x70a691c*/ bool IsPossibleToIgnoreMarshal(object obj);
                    /*0x70a5c00*/ CADMessageBase(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0x70a5c98*/ System.Reflection.MethodBase GetMethod();
                    /*0x70a6a90*/ object MarshalArgument(object arg, ref System.Collections.ArrayList args);
                    /*0x70a6c58*/ object UnmarshalArgument(object arg, System.Collections.ArrayList args);
                    /*0x70a73c0*/ object[] MarshalArguments(object[] arguments, ref System.Collections.ArrayList args);
                    /*0x70a74d0*/ object[] UnmarshalArguments(object[] arguments, System.Collections.ArrayList args);
                    /*0x70a75e0*/ void SaveLogicalCallContext(System.Runtime.Remoting.Messaging.IMethodMessage msg, ref System.Collections.ArrayList serializeList);
                    /*0x70a7830*/ System.Runtime.Remoting.Messaging.LogicalCallContext GetLogicalCallContext(System.Collections.ArrayList args);
                }

                class CADMethodCallMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ string _uri;

                    static /*0x709fddc*/ System.Runtime.Remoting.Messaging.CADMethodCallMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0x70a78c0*/ CADMethodCallMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage callMsg);
                    /*0x70a78b8*/ string get_Uri();
                    /*0x70a7ad4*/ System.Collections.ArrayList GetArguments();
                    /*0x70a7c18*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x70a7c28*/ int get_PropertiesCount();
                }

                class CADMethodReturnMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ object _returnValue;
                    /*0x40*/ System.Runtime.Remoting.Messaging.CADArgHolder _exception;
                    /*0x48*/ System.Type[] _sig;

                    static /*0x70a7c30*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0x70a7cb0*/ CADMethodReturnMessage(System.Runtime.Remoting.Messaging.IMethodReturnMessage retMsg);
                    /*0x70a8070*/ System.Collections.ArrayList GetArguments();
                    /*0x70a81b4*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x70a81c4*/ object GetReturnValue(System.Collections.ArrayList args);
                    /*0x70a81d4*/ System.Exception GetException(System.Collections.ArrayList args);
                    /*0x70a8278*/ int get_PropertiesCount();
                }

                class ClientContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x70a8280*/ ClientContextTerminatorSink(System.Runtime.Remoting.Contexts.Context ctx);
                    /*0x70a82b0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70a8498*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ClientContextReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x70a86e8*/ ClientContextReplySink(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70a872c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70a8838*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ConstructionCall : System.Runtime.Remoting.Messaging.MethodCall, System.Runtime.Remoting.Activation.IConstructionCallMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x68*/ System.Runtime.Remoting.Activation.IActivator _activator;
                    /*0x70*/ object[] _activationAttributes;
                    /*0x78*/ System.Collections.IList _contextProperties;
                    /*0x80*/ System.Type _activationType;
                    /*0x88*/ string _activationTypeName;
                    /*0x90*/ bool _isContextOk;
                    /*0x98*/ System.Runtime.Remoting.Proxies.RemotingProxy _sourceProxy;

                    /*0x70a1684*/ ConstructionCall(System.Type type);
                    /*0x70a8878*/ ConstructionCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70a8928*/ void InitDictionary();
                    /*0x70a8a80*/ bool get_IsContextOk();
                    /*0x70a8a88*/ void set_IsContextOk(bool value);
                    /*0x70a8a94*/ System.Type get_ActivationType();
                    /*0x70a8b5c*/ string get_ActivationTypeName();
                    /*0x70a8b64*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0x70a8b6c*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0x70a8b74*/ object[] get_CallSiteActivationAttributes();
                    /*0x70a8b7c*/ void SetActivationAttributes(object[] attributes);
                    /*0x70a8b84*/ System.Collections.IList get_ContextProperties();
                    /*0x70a8bf4*/ void InitMethodProperty(string key, object value);
                    /*0x70a92d4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70a98ec*/ System.Collections.IDictionary get_Properties();
                    /*0x70a994c*/ System.Runtime.Remoting.Proxies.RemotingProxy get_SourceProxy();
                    /*0x70a9954*/ void set_SourceProxy(System.Runtime.Remoting.Proxies.RemotingProxy value);
                }

                class ConstructionCallDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0x70aa7f8*/ ConstructionCallDictionary();
                    /*0x70a89a8*/ ConstructionCallDictionary(System.Runtime.Remoting.Activation.IConstructionCallMessage message);
                    /*0x70a998c*/ object GetMethodProperty(string key);
                    /*0x70aa2bc*/ void SetMethodProperty(string key, object value);
                }

                class ConstructionResponse : System.Runtime.Remoting.Messaging.MethodResponse, System.Runtime.Remoting.Activation.IConstructionReturnMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x70a1b64*/ ConstructionResponse(object resultObject, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x70a2188*/ ConstructionResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x70aabc0*/ ConstructionResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70aac50*/ System.Collections.IDictionary get_Properties();
                }

                class EnvoyTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Runtime.Remoting.Messaging.EnvoyTerminatorSink Instance;

                    static /*0x70aae6c*/ EnvoyTerminatorSink();
                    /*0x70aae64*/ EnvoyTerminatorSink();
                    /*0x70aace8*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70aada0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ErrorMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x10*/ string _uri;

                    /*0x709f84c*/ ErrorMessage();
                    /*0x70aaed4*/ int get_ArgCount();
                    /*0x70aaedc*/ object[] get_Args();
                    /*0x70aaee4*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x70aaeec*/ string get_MethodName();
                    /*0x70aaf2c*/ object get_MethodSignature();
                    /*0x70aaf34*/ System.Collections.IDictionary get_Properties();
                    /*0x70aaf3c*/ string get_TypeName();
                    /*0x70aaf7c*/ string get_Uri();
                    /*0x70aaf84*/ object GetArg(int arg_num);
                    /*0x70aaf8c*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                }

                class Header
                {
                }

                class HeaderHandler : System.MulticastDelegate
                {
                    /*0x70aaf94*/ HeaderHandler(object object, nint method);
                    /*0x70ab09c*/ object Invoke(System.Runtime.Remoting.Messaging.Header[] headers);
                }

                interface IInternalMessage
                {
                    /*0x38148bc*/ System.Runtime.Remoting.Identity get_TargetIdentity();
                    /*0x3816710*/ void set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x38148bc*/ string get_Uri();
                    /*0x3816710*/ void set_Uri(string value);
                }

                interface IMessage
                {
                    /*0x38148bc*/ System.Collections.IDictionary get_Properties();
                }

                interface IMessageCtrl
                {
                }

                interface IMessageSink
                {
                    /*0x3814a3c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x3814b90*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x3814574*/ int get_ArgCount();
                    /*0x38148bc*/ object[] get_Args();
                    /*0x38148bc*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x38148bc*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x38148bc*/ string get_MethodName();
                    /*0x38148bc*/ object get_MethodSignature();
                    /*0x38148bc*/ string get_TypeName();
                    /*0x38148bc*/ string get_Uri();
                    /*0x3814964*/ object GetArg(int argNum);
                }

                interface IMethodReturnMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x38148bc*/ System.Exception get_Exception();
                    /*0x38148bc*/ object[] get_OutArgs();
                    /*0x38148bc*/ object get_ReturnValue();
                }

                class MethodCall : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _uri;
                    /*0x18*/ string _typeName;
                    /*0x20*/ string _methodName;
                    /*0x28*/ object[] _args;
                    /*0x30*/ System.Type[] _methodSignature;
                    /*0x38*/ System.Reflection.MethodBase _methodBase;
                    /*0x40*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x48*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x50*/ System.Type[] _genericArguments;
                    /*0x58*/ System.Collections.IDictionary ExternalProperties;
                    /*0x60*/ System.Collections.IDictionary InternalProperties;

                    static /*0x70ac204*/ string GetTypeNameFromAssemblyQualifiedName(string aqname);
                    /*0x70a887c*/ MethodCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70ab178*/ MethodCall(System.Runtime.Remoting.Messaging.CADMethodCallMessage msg);
                    /*0x70a8870*/ MethodCall();
                    /*0x70ab2cc*/ void CopyFrom(System.Runtime.Remoting.Messaging.IMethodMessage call);
                    /*0x70a8e9c*/ void InitMethodProperty(string key, object value);
                    /*0x70a946c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70ab698*/ int get_ArgCount();
                    /*0x70ab6b4*/ object[] get_Args();
                    /*0x70ab6bc*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x70ab72c*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x70abcf0*/ string get_MethodName();
                    /*0x70abd38*/ object get_MethodSignature();
                    /*0x70a991c*/ System.Collections.IDictionary get_Properties();
                    /*0x70abe80*/ void InitDictionary();
                    /*0x70abf8c*/ string get_TypeName();
                    /*0x70abfe8*/ string get_Uri();
                    /*0x70abff0*/ void set_Uri(string value);
                    /*0x70abff8*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x70ac000*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x70ac008*/ object GetArg(int argNum);
                    /*0x70ac038*/ void Init();
                    /*0x70ab75c*/ void ResolveMethod();
                    /*0x70ac03c*/ System.Type CastTo(string clientType, System.Type serverType);
                    /*0x70ac2ac*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x70ac2b4*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x70ac1b0*/ System.Type[] get_GenericArguments();
                }

                class MCMDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0x70ac2bc*/ MCMDictionary();
                    /*0x70abf00*/ MCMDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                }

                class MessageDictionary : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
                {
                    /*0x10*/ System.Collections.IDictionary _internalProperties;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMethodMessage _message;
                    /*0x20*/ string[] _methodKeys;
                    /*0x28*/ bool _ownProperties;

                    /*0x70a995c*/ MessageDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                    /*0x70a665c*/ bool HasUserData();
                    /*0x70a6758*/ System.Collections.IDictionary get_InternalDictionary();
                    /*0x70ac470*/ void set_MethodKeys(string[] value);
                    /*0x70ac478*/ System.Collections.IDictionary AllocInternalProperties();
                    /*0x70a8a34*/ System.Collections.IDictionary GetInternalProperties();
                    /*0x70ac4d8*/ bool IsOverridenKey(string key);
                    /*0x70ac560*/ bool get_IsFixedSize();
                    /*0x70ac568*/ bool get_IsReadOnly();
                    /*0x70ac570*/ object get_Item(object key);
                    /*0x70ac6a4*/ void set_Item(object key, object value);
                    /*0x70a9d58*/ object GetMethodProperty(string key);
                    /*0x70aa524*/ void SetMethodProperty(string key, object value);
                    /*0x70ac81c*/ System.Collections.ICollection get_Keys();
                    /*0x70acc50*/ System.Collections.ICollection get_Values();
                    /*0x70ac6a8*/ void Add(object key, object value);
                    /*0x70ad06c*/ void Clear();
                    /*0x70ad118*/ bool Contains(object key);
                    /*0x70ad248*/ void Remove(object key);
                    /*0x70ad3c0*/ int get_Count();
                    /*0x70ad488*/ bool get_IsSynchronized();
                    /*0x70ad490*/ object get_SyncRoot();
                    /*0x70ad494*/ void CopyTo(System.Array array, int index);
                    /*0x70ad554*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x70ad6b0*/ System.Collections.IDictionaryEnumerator GetEnumerator();

                    class DictionaryEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.MessageDictionary _methodDictionary;
                        /*0x18*/ System.Collections.IDictionaryEnumerator _hashtableEnum;
                        /*0x20*/ int _posMethod;

                        /*0x70ad5ac*/ DictionaryEnumerator(System.Runtime.Remoting.Messaging.MessageDictionary methodDictionary);
                        /*0x70ad708*/ object get_Current();
                        /*0x70ad8d4*/ bool MoveNext();
                        /*0x70ada94*/ void Reset();
                        /*0x70ad76c*/ System.Collections.DictionaryEntry get_Entry();
                        /*0x70adb40*/ object get_Key();
                        /*0x70adb44*/ object get_Value();
                    }
                }

                class MethodResponse : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _methodName;
                    /*0x18*/ string _uri;
                    /*0x20*/ string _typeName;
                    /*0x28*/ System.Reflection.MethodBase _methodBase;
                    /*0x30*/ object _returnValue;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Type[] _methodSignature;
                    /*0x48*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;
                    /*0x50*/ object[] _args;
                    /*0x58*/ object[] _outArgs;
                    /*0x60*/ System.Runtime.Remoting.Messaging.IMethodCallMessage _callMsg;
                    /*0x68*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x70*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x78*/ System.Collections.IDictionary ExternalProperties;
                    /*0x80*/ System.Collections.IDictionary InternalProperties;

                    /*0x709e79c*/ MethodResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x70aaab0*/ MethodResponse(object returnValue, object[] outArgs, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x709fe94*/ MethodResponse(System.Runtime.Remoting.Messaging.IMethodCallMessage msg, System.Runtime.Remoting.Messaging.CADMethodReturnMessage retmsg);
                    /*0x70aabc4*/ MethodResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70adb58*/ void InitMethodProperty(string key, object value);
                    /*0x70ae018*/ int get_ArgCount();
                    /*0x70ae030*/ object[] get_Args();
                    /*0x70ae038*/ System.Exception get_Exception();
                    /*0x70ae040*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x70ae0b0*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x70ae1d4*/ string get_MethodName();
                    /*0x70ae36c*/ object get_MethodSignature();
                    /*0x70ae48c*/ object[] get_OutArgs();
                    /*0x70aac54*/ System.Collections.IDictionary get_Properties();
                    /*0x70ae668*/ object get_ReturnValue();
                    /*0x70ae2a0*/ string get_TypeName();
                    /*0x70ae670*/ string get_Uri();
                    /*0x70ae73c*/ void set_Uri(string value);
                    /*0x70ae744*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x70ae748*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x70ae750*/ object GetArg(int argNum);
                    /*0x70ae784*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70aec20*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x70aec28*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class MethodReturnDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalReturnKeys;
                    static /*0x8*/ string[] InternalExceptionKeys;

                    static /*0x70aec30*/ MethodReturnDictionary();
                    /*0x70ae55c*/ MethodReturnDictionary(System.Runtime.Remoting.Messaging.IMethodReturnMessage message);
                }

                class MonoMethodMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ System.Reflection.RuntimeMethodInfo method;
                    /*0x18*/ object[] args;
                    /*0x20*/ string[] names;
                    /*0x28*/ byte[] arg_types;
                    /*0x30*/ System.Runtime.Remoting.Messaging.LogicalCallContext ctx;
                    /*0x38*/ object rval;
                    /*0x40*/ System.Exception exc;
                    /*0x48*/ System.Runtime.Remoting.Messaging.AsyncResult asyncResult;
                    /*0x50*/ System.Runtime.Remoting.Messaging.CallType call_type;
                    /*0x58*/ string uri;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MCMDictionary properties;
                    /*0x68*/ System.Runtime.Remoting.Identity identity;
                    /*0x70*/ System.Type[] methodSignature;

                    static /*0x70af31c*/ System.Reflection.MethodInfo GetMethodInfo(System.Type type, string methodName);
                    /*0x70af110*/ MonoMethodMessage(System.Reflection.MethodBase method, object[] out_args);
                    /*0x70af1e0*/ MonoMethodMessage(System.Reflection.MethodInfo minfo, object[] in_args, object[] out_args);
                    /*0x70af3cc*/ MonoMethodMessage(System.Type type, string methodName, object[] in_args);
                    /*0x70aee60*/ void InitMessage(System.Reflection.RuntimeMethodInfo method, object[] out_args);
                    /*0x70af404*/ System.Collections.IDictionary get_Properties();
                    /*0x70af478*/ int get_ArgCount();
                    /*0x70af52c*/ object[] get_Args();
                    /*0x70af534*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x70af53c*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
                    /*0x70af544*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x70af54c*/ string get_MethodName();
                    /*0x70af5a0*/ object get_MethodSignature();
                    /*0x70af6d4*/ string get_TypeName();
                    /*0x70af73c*/ string get_Uri();
                    /*0x70af744*/ void set_Uri(string value);
                    /*0x70af74c*/ object GetArg(int arg_num);
                    /*0x70af780*/ System.Exception get_Exception();
                    /*0x70af788*/ int get_OutArgCount();
                    /*0x70af7ec*/ object[] get_OutArgs();
                    /*0x70af928*/ object get_ReturnValue();
                    /*0x70af930*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x70af938*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x70af940*/ System.Runtime.Remoting.Messaging.AsyncResult get_AsyncResult();
                    /*0x70af4b0*/ System.Runtime.Remoting.Messaging.CallType get_CallType();
                    /*0x70af948*/ bool NeedsOutProcessing(ref int outCount);
                }

                enum CallType
                {
                    Sync = 0,
                    BeginInvoke = 1,
                    EndInvoke = 2,
                    OneWay = 3,
                }

                class OneWayAttribute : System.Attribute
                {
                }

                class RemotingSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x70afb1c*/ RemotingSurrogate();
                    /*0x70af9d4*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0x70afae4*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class ObjRefSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x70afc74*/ ObjRefSurrogate();
                    /*0x70afb24*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0x70afc28*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class RemotingSurrogateSelector : System.Runtime.Serialization.ISurrogateSelector
                {
                    static /*0x0*/ System.Type s_cachedTypeObjRef;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.ObjRefSurrogate _objRefSurrogate;
                    static /*0x10*/ System.Runtime.Remoting.Messaging.RemotingSurrogate _objRemotingSurrogate;
                    /*0x10*/ System.Runtime.Serialization.ISurrogateSelector _next;

                    static /*0x70afe3c*/ RemotingSurrogateSelector();
                    /*0x70a04e4*/ RemotingSurrogateSelector();
                    /*0x70afc7c*/ System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector ssout);
                }

                class ReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ object[] _outArgs;
                    /*0x18*/ object[] _args;
                    /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callCtx;
                    /*0x28*/ object _returnValue;
                    /*0x30*/ string _uri;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Reflection.MethodBase _methodBase;
                    /*0x48*/ string _methodName;
                    /*0x50*/ System.Type[] _methodSignature;
                    /*0x58*/ string _typeName;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MethodReturnDictionary _properties;
                    /*0x68*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x70*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;

                    /*0x70aff4c*/ ReturnMessage(object ret, object[] outArgs, int outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0x709e620*/ ReturnMessage(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0x70b0114*/ int get_ArgCount();
                    /*0x70b0130*/ object[] get_Args();
                    /*0x70b0138*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x70b01a8*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x70b01b0*/ string get_MethodName();
                    /*0x70b0214*/ object get_MethodSignature();
                    /*0x70b035c*/ System.Collections.IDictionary get_Properties();
                    /*0x70b03d0*/ string get_TypeName();
                    /*0x70b0448*/ string get_Uri();
                    /*0x70b0450*/ void set_Uri(string value);
                    /*0x70b0458*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x70b0460*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x70b0468*/ object GetArg(int argNum);
                    /*0x70b0498*/ System.Exception get_Exception();
                    /*0x70b04a0*/ object[] get_OutArgs();
                    /*0x70b0564*/ object get_ReturnValue();
                    /*0x70b056c*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x70b0574*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class ServerContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x70b0744*/ ServerContextTerminatorSink();
                    /*0x70b057c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70b0684*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x70b074c*/ ServerObjectTerminatorSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x70b077c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70b08f0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.ServerIdentity _identity;

                    /*0x70b0ab8*/ ServerObjectReplySink(System.Runtime.Remoting.ServerIdentity identity, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70b0afc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70b0bc4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class StackBuilderSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.MarshalByRefObject _target;
                    /*0x18*/ System.Runtime.Remoting.Proxies.RealProxy _rp;

                    /*0x70b0bfc*/ StackBuilderSink(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x70b0cc4*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70b1154*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70b1288*/ void ExecuteAsyncMessage(object ob);
                    /*0x70b0d90*/ void CheckParameters(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70b1468*/ void <AsyncProcessMessage>b__4_0(object data);
                }
            }
        }

        namespace Versioning
        {
            class NonVersionableAttribute : System.Attribute
            {
                /*0x70b14e8*/ NonVersionableAttribute();
            }

            class TargetFrameworkAttribute : System.Attribute
            {
                /*0x10*/ string _frameworkName;
                /*0x18*/ string _frameworkDisplayName;

                /*0x70b14f0*/ TargetFrameworkAttribute(string frameworkName);
                /*0x70b156c*/ void set_FrameworkDisplayName(string value);
            }

            class BinaryCompatibility
            {
                static /*0x0*/ bool TargetsAtLeast_Desktop_V4_5;
                static /*0x1*/ bool TargetsAtLeast_Desktop_V4_5_1;

                static /*0x70b1574*/ BinaryCompatibility();
            }
        }

        namespace Serialization
        {
            interface IDeserializationCallback
            {
                /*0x3816710*/ void OnDeserialization(object sender);
            }

            interface IFormatterConverter
            {
                /*0x3814b90*/ object Convert(object value, System.Type type);
                /*0x38141c4*/ bool ToBoolean(object value);
                /*0x38141c4*/ byte ToByte(object value);
                /*0x381467c*/ int ToInt32(object value);
                long ToInt64(object value);
                float ToSingle(object value);
                /*0x3814a3c*/ string ToString(object value);
            }

            interface IObjectReference
            {
                object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            }

            interface ISerializable
            {
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class SerializationException : System.SystemException
            {
                static /*0x0*/ string s_nullMessage;

                static /*0x70b1684*/ SerializationException();
                /*0x70b15c0*/ SerializationException();
                /*0x70b1634*/ SerializationException(string message);
                /*0x70b1658*/ SerializationException(string message, System.Exception innerException);
                /*0x70b167c*/ SerializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            struct SerializationEntry
            {
                /*0x10*/ string _name;
                /*0x18*/ object _value;
                /*0x20*/ System.Type _type;

                /*0x70b16f0*/ SerializationEntry(string entryName, object entryValue, System.Type entryType);
                /*0x70b1734*/ object get_Value();
                /*0x70b173c*/ string get_Name();
            }

            class SerializationInfoEnumerator : System.Collections.IEnumerator
            {
                /*0x10*/ string[] _members;
                /*0x18*/ object[] _data;
                /*0x20*/ System.Type[] _types;
                /*0x28*/ int _numItems;
                /*0x2c*/ int _currItem;
                /*0x30*/ bool _current;

                /*0x70b1744*/ SerializationInfoEnumerator(string[] members, object[] info, System.Type[] types, int numItems);
                /*0x70a3cc0*/ bool MoveNext();
                /*0x70b17bc*/ object System.Collections.IEnumerator.get_Current();
                /*0x70ab0b0*/ System.Runtime.Serialization.SerializationEntry get_Current();
                /*0x70b1834*/ void Reset();
                /*0x70a3b48*/ string get_Name();
                /*0x70a3bcc*/ object get_Value();
                /*0x70b1844*/ System.Type get_ObjectType();
            }

            class DeserializationEventHandler : System.MulticastDelegate
            {
                /*0x70b18c8*/ DeserializationEventHandler(object object, nint method);
                /*0x70b19d0*/ void Invoke(object sender);
            }

            class SerializationEventHandler : System.MulticastDelegate
            {
                /*0x70b19e4*/ SerializationEventHandler(object object, nint method);
                /*0x70b1a84*/ void Invoke(System.Runtime.Serialization.StreamingContext context);
            }

            class FormatterConverter : System.Runtime.Serialization.IFormatterConverter
            {
                static /*0x70b1b38*/ void ThrowValueNullException();
                /*0x70b1f14*/ FormatterConverter();
                /*0x70b1a98*/ object Convert(object value, System.Type type);
                /*0x70b1b84*/ bool ToBoolean(object value);
                /*0x70b1c1c*/ byte ToByte(object value);
                /*0x70b1cb4*/ int ToInt32(object value);
                /*0x70b1d4c*/ long ToInt64(object value);
                /*0x70b1de4*/ float ToSingle(object value);
                /*0x70b1e7c*/ string ToString(object value);
            }

            interface ISerializationSurrogate
            {
                void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            interface ISurrogateSelector
            {
                System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class MemberHolder
            {
                /*0x10*/ System.Type _memberType;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;

                /*0x70b1f1c*/ MemberHolder(System.Type type, System.Runtime.Serialization.StreamingContext ctx);
                /*0x70b1f70*/ int GetHashCode();
                /*0x70b1f90*/ bool Equals(object obj);
            }

            class SerializationBinder
            {
                /*0x70b2048*/ SerializationBinder();
                /*0x70b201c*/ void BindToName(System.Type serializedType, ref string assemblyName, ref string typeName);
                /*0x3814b90*/ System.Type BindToType(string assemblyName, string typeName);
            }

            class SerializationEvents
            {
                /*0x10*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializingMethods;
                /*0x18*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializedMethods;
                /*0x20*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializingMethods;
                /*0x28*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializedMethods;

                static /*0x70b2440*/ void InvokeOnDelegate(object obj, System.Runtime.Serialization.StreamingContext context, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                static /*0x70b254c*/ System.Runtime.Serialization.SerializationEventHandler AddOnDelegate(object obj, System.Runtime.Serialization.SerializationEventHandler handler, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                /*0x70b2050*/ SerializationEvents(System.Type t);
                /*0x70b21a4*/ System.Collections.Generic.List<System.Reflection.MethodInfo> GetMethodsWithAttribute(System.Type attribute, System.Type t);
                /*0x70b23cc*/ bool get_HasOnSerializingEvents();
                /*0x70b23ec*/ void InvokeOnSerializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x70b2490*/ void InvokeOnDeserializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x70b24e4*/ void InvokeOnDeserialized(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x70b2538*/ System.Runtime.Serialization.SerializationEventHandler AddOnSerialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
                /*0x70b277c*/ System.Runtime.Serialization.SerializationEventHandler AddOnDeserialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
            }

            class SerializationEventsCache
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Type, System.Runtime.Serialization.SerializationEvents> s_cache;

                static /*0x70b28c8*/ SerializationEventsCache();
                static /*0x70b2790*/ System.Runtime.Serialization.SerializationEvents GetSerializationEventsForType(System.Type t);

                class <>c
                {
                    static /*0x0*/ System.Runtime.Serialization.SerializationEventsCache.<> <>9;
                    static /*0x8*/ System.Func<System.Type, System.Runtime.Serialization.SerializationEvents> <>9__1_0;

                    static /*0x70b2960*/ <>c();
                    /*0x70b29c8*/ <>c();
                    /*0x70b29d0*/ System.Runtime.Serialization.SerializationEvents <GetSerializationEventsForType>b__1_0(System.Type type);
                }
            }

            class SerializationObjectManager
            {
                /*0x10*/ System.Collections.Generic.Dictionary<object, object> _objectSeenTable;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;
                /*0x28*/ System.Runtime.Serialization.SerializationEventHandler _onSerializedHandler;

                /*0x70b2a28*/ SerializationObjectManager(System.Runtime.Serialization.StreamingContext context);
                /*0x70b2ad4*/ void RegisterObject(object obj);
                /*0x70b2c70*/ void RaiseOnSerializedEvent();
                /*0x70b2bd8*/ void AddOnSerialized(object obj);
            }

            class ValueTypeFixupInfo
            {
                /*0x10*/ long _containerID;
                /*0x18*/ System.Reflection.FieldInfo _parentField;
                /*0x20*/ int[] _parentIndex;

                /*0x70b2c90*/ ValueTypeFixupInfo(long containerID, System.Reflection.FieldInfo member, int[] parentIndex);
                /*0x70b2e08*/ long get_ContainerID();
                /*0x70b2e10*/ System.Reflection.FieldInfo get_ParentField();
                /*0x70b2e18*/ int[] get_ParentIndex();
            }

            class FormatterServices
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Runtime.Serialization.MemberHolder, System.Reflection.MemberInfo[]> m_MemberInfoTable;
                static /*0x8*/ bool unsafeTypeForwardersIsEnabled;
                static /*0x9*/ bool unsafeTypeForwardersIsEnabledInitialized;
                static /*0x10*/ System.Type[] advancedTypes;
                static /*0x18*/ System.Reflection.Binder s_binder;

                static /*0x70b2e20*/ FormatterServices();
                static /*0x70b2fc0*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.RuntimeType type);
                static /*0x70b3158*/ bool CheckSerializable(System.RuntimeType type);
                static /*0x70b3178*/ System.Reflection.MemberInfo[] InternalGetSerializableMembers(System.RuntimeType type);
                static /*0x70b3854*/ bool GetParentTypes(System.RuntimeType parentType, ref System.RuntimeType[] parentTypes, ref int parentTypeCount);
                static /*0x70b3c58*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.Type type, System.Runtime.Serialization.StreamingContext context);
                static /*0x70b3f00*/ object GetUninitializedObject(System.Type type);
                static /*0x70b40b4*/ object nativeGetUninitializedObject(System.RuntimeType type);
                static /*0x70b40b8*/ bool GetEnableUnsafeTypeForwarders();
                static /*0x70b40c0*/ bool UnsafeTypeForwardersIsEnabled();
                static /*0x70b4168*/ void SerializationSetValue(System.Reflection.MemberInfo fi, object target, object value);
                static /*0x70b435c*/ object PopulateObjectMembers(object obj, System.Reflection.MemberInfo[] members, object[] data);
                static /*0x70b4650*/ object[] GetObjectData(object obj, System.Reflection.MemberInfo[] members);
                static /*0x70b49c4*/ System.Type GetTypeFromAssembly(System.Reflection.Assembly assem, string name);
                static /*0x70b4a5c*/ System.Reflection.Assembly LoadAssemblyFromString(string assemblyName);
                static /*0x70b4a64*/ System.Reflection.Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
                static /*0x70b4b38*/ string GetClrAssemblyName(System.Type type, ref bool hasTypeForwardedFrom);
                static /*0x70b4c94*/ string GetClrTypeFullName(System.Type type);
                static /*0x70b4d14*/ string GetClrTypeFullNameForArray(System.Type type);
                static /*0x70b4f38*/ string GetClrTypeFullNameForNonArrayTypes(System.Type type);

                class <>c__DisplayClass9_0
                {
                    /*0x10*/ System.Type type;

                    /*0x70b3ef8*/ <>c__DisplayClass9_0();
                    /*0x70b51ac*/ System.Reflection.MemberInfo[] <GetSerializableMembers>b__0(System.Runtime.Serialization.MemberHolder _);
                }
            }

            class SurrogateForCyclicalReference : System.Runtime.Serialization.ISerializationSurrogate
            {
                /*0x10*/ System.Runtime.Serialization.ISerializationSurrogate innerSurrogate;

                /*0x70b5258*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70b5328*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class ObjectIDGenerator
            {
                static /*0x0*/ int[] sizes;
                /*0x10*/ int m_currentCount;
                /*0x14*/ int m_currentSize;
                /*0x18*/ long[] m_ids;
                /*0x20*/ object[] m_objs;

                static /*0x70b5afc*/ ObjectIDGenerator();
                /*0x70b5404*/ ObjectIDGenerator();
                /*0x70b54f0*/ int FindElement(object obj, ref bool found);
                /*0x70b55b4*/ long GetId(object obj, ref bool firstTime);
                /*0x70b5a2c*/ long HasId(object obj, ref bool firstTime);
                /*0x70b5744*/ void Rehash();
            }

            class ObjectManager
            {
                /*0x10*/ System.Runtime.Serialization.DeserializationEventHandler m_onDeserializationHandler;
                /*0x18*/ System.Runtime.Serialization.SerializationEventHandler m_onDeserializedHandler;
                /*0x20*/ System.Runtime.Serialization.ObjectHolder[] m_objects;
                /*0x28*/ object m_topObject;
                /*0x30*/ System.Runtime.Serialization.ObjectHolderList m_specialFixupObjects;
                /*0x38*/ long m_fixupCount;
                /*0x40*/ System.Runtime.Serialization.ISurrogateSelector m_selector;
                /*0x48*/ System.Runtime.Serialization.StreamingContext m_context;

                static /*0x70b85bc*/ System.Reflection.RuntimeConstructorInfo GetConstructor(System.RuntimeType t);
                /*0x70b5b9c*/ ObjectManager(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, bool checkSecurity, bool isCrossAppDomain);
                /*0x70b5c40*/ bool CanCallGetType(object obj);
                /*0x70b5c48*/ void set_TopObject(object value);
                /*0x70b5c50*/ object get_TopObject();
                /*0x70b5c58*/ System.Runtime.Serialization.ObjectHolderList get_SpecialFixupObjects();
                /*0x70b5cc8*/ System.Runtime.Serialization.ObjectHolder FindObjectHolder(long objectID);
                /*0x70b5d20*/ System.Runtime.Serialization.ObjectHolder FindOrCreateObjectHolder(long objectID);
                /*0x70b5dec*/ void AddObjectHolder(System.Runtime.Serialization.ObjectHolder holder);
                /*0x70b5f18*/ bool GetCompletionInfo(System.Runtime.Serialization.FixupHolder fixup, ref System.Runtime.Serialization.ObjectHolder holder, ref object member, bool bThrowIfMissing);
                /*0x70b61fc*/ void FixupSpecialObject(System.Runtime.Serialization.ObjectHolder holder);
                /*0x70b6fd8*/ bool ResolveObjectReference(System.Runtime.Serialization.ObjectHolder holder);
                /*0x70b69a4*/ bool DoValueTypeFixup(System.Reflection.FieldInfo memberToFix, System.Runtime.Serialization.ObjectHolder holder, object value);
                /*0x70b7264*/ void CompleteObject(System.Runtime.Serialization.ObjectHolder holder, bool bObjectFullyComplete);
                /*0x70b6ef0*/ void DoNewlyRegisteredObjectFixups(System.Runtime.Serialization.ObjectHolder holder);
                /*0x70b7944*/ object GetObject(long objectID);
                /*0x70b79f4*/ void RegisterString(string obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);
                /*0x70b7c14*/ void RegisterObject(object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);
                /*0x70b66c4*/ void CompleteISerializableObject(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70b86ec*/ void DoFixups();
                /*0x70b8a08*/ void RegisterFixup(System.Runtime.Serialization.FixupHolder fixup, long objectToBeFixed, long objectRequired);
                /*0x70b8c30*/ void RecordFixup(long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);
                /*0x70b8eb4*/ void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
                /*0x70b9008*/ void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired);
                /*0x70b915c*/ void RaiseDeserializationEvent();
                /*0x70b91a8*/ void AddOnDeserialization(System.Runtime.Serialization.DeserializationEventHandler handler);
                /*0x70b9238*/ void AddOnDeserialized(object obj);
                /*0x70b92d0*/ void RaiseOnDeserializedEvent(object obj);
                /*0x70b9354*/ void RaiseOnDeserializingEvent(object obj);
            }

            class ObjectHolder
            {
                /*0x10*/ object m_object;
                /*0x18*/ long m_id;
                /*0x20*/ int m_missingElementsRemaining;
                /*0x24*/ int m_missingDecendents;
                /*0x28*/ System.Runtime.Serialization.SerializationInfo m_serInfo;
                /*0x30*/ System.Runtime.Serialization.ISerializationSurrogate m_surrogate;
                /*0x38*/ System.Runtime.Serialization.FixupHolderList m_missingElements;
                /*0x40*/ System.Runtime.Serialization.LongList m_dependentObjects;
                /*0x48*/ System.Runtime.Serialization.ObjectHolder m_next;
                /*0x50*/ int m_flags;
                /*0x54*/ bool m_markForFixupWhenAvailable;
                /*0x58*/ System.Runtime.Serialization.ValueTypeFixupInfo m_valueFixup;
                /*0x60*/ System.Runtime.Serialization.TypeLoadExceptionHolder m_typeLoad;
                /*0x68*/ bool m_reachable;

                /*0x70b5db8*/ ObjectHolder(long objID);
                /*0x70b81bc*/ ObjectHolder(object obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x70b7aec*/ ObjectHolder(string obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x70b93d8*/ void IncrementDescendentFixups(int amount);
                /*0x70b78d4*/ void DecrementFixupsRemaining(System.Runtime.Serialization.ObjectManager manager);
                /*0x70b78f8*/ void RemoveDependency(long id);
                /*0x70b8ae0*/ void AddFixup(System.Runtime.Serialization.FixupHolder fixup, System.Runtime.Serialization.ObjectManager manager);
                /*0x70b93e8*/ void UpdateDescendentDependencyChain(int amount, System.Runtime.Serialization.ObjectManager manager);
                /*0x70b8bac*/ void AddDependency(long dependentObject);
                /*0x70b8404*/ void UpdateData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainer, System.Reflection.FieldInfo field, int[] arrayIndex, System.Runtime.Serialization.ObjectManager manager);
                /*0x70b7938*/ void MarkForCompletionWhenAvailable();
                /*0x70b660c*/ void SetFlags();
                /*0x70b61f0*/ bool get_IsIncompleteObjectReference();
                /*0x70b7254*/ void set_IsIncompleteObjectReference(bool value);
                /*0x70b83f4*/ bool get_RequiresDelayedFixup();
                /*0x70b6960*/ bool get_RequiresValueTypeFixup();
                /*0x70b696c*/ bool get_ValueTypeFixupPerformed();
                /*0x70b7924*/ void set_ValueTypeFixupPerformed(bool value);
                /*0x70b78c8*/ bool get_HasISerializable();
                /*0x70b6454*/ bool get_HasSurrogate();
                /*0x70b6460*/ bool get_CanSurrogatedObjectValueChange();
                /*0x70b61d0*/ bool get_CanObjectValueChange();
                /*0x70b9460*/ int get_DirectlyDependentObjects();
                /*0x70b85b0*/ int get_TotalDependentObjects();
                /*0x70b9468*/ bool get_Reachable();
                /*0x70b9470*/ void set_Reachable(bool value);
                /*0x70b7914*/ bool get_TypeLoadExceptionReachable();
                /*0x70b947c*/ System.Runtime.Serialization.TypeLoadExceptionHolder get_TypeLoadException();
                /*0x70b9484*/ void set_TypeLoadException(System.Runtime.Serialization.TypeLoadExceptionHolder value);
                /*0x70b948c*/ object get_ObjectValue();
                /*0x70b64fc*/ void SetObjectValue(object obj, System.Runtime.Serialization.ObjectManager manager);
                /*0x70b9494*/ System.Runtime.Serialization.SerializationInfo get_SerializationInfo();
                /*0x70b949c*/ void set_SerializationInfo(System.Runtime.Serialization.SerializationInfo value);
                /*0x70b94a4*/ System.Runtime.Serialization.ISerializationSurrogate get_Surrogate();
                /*0x70b94ac*/ System.Runtime.Serialization.LongList get_DependentObjects();
                /*0x70b94b4*/ void set_DependentObjects(System.Runtime.Serialization.LongList value);
                /*0x70b89ec*/ bool get_RequiresSerInfoFixup();
                /*0x70b6940*/ void set_RequiresSerInfoFixup(bool value);
                /*0x70b94bc*/ System.Runtime.Serialization.ValueTypeFixupInfo get_ValueFixup();
                /*0x70b61ac*/ bool get_CompletelyFixed();
                /*0x70b9448*/ long get_ContainerID();
            }

            class FixupHolder
            {
                /*0x10*/ long m_id;
                /*0x18*/ object m_fixupInfo;
                /*0x20*/ int m_fixupType;

                /*0x70b94c4*/ FixupHolder(long id, object fixupInfo, int fixupType);
            }

            class FixupHolderList
            {
                /*0x10*/ System.Runtime.Serialization.FixupHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x70b9510*/ FixupHolderList();
                /*0x70b9518*/ FixupHolderList(int startingSize);
                /*0x70b958c*/ void Add(System.Runtime.Serialization.FixupHolder fixup);
                /*0x70b9638*/ void EnlargeArray();
            }

            class LongList
            {
                /*0x10*/ long[] m_values;
                /*0x18*/ int m_count;
                /*0x1c*/ int m_totalItems;
                /*0x20*/ int m_currentItem;

                /*0x70b96cc*/ LongList();
                /*0x70b96d4*/ LongList(int startingSize);
                /*0x70b9748*/ void Add(long value);
                /*0x70b985c*/ int get_Count();
                /*0x70b9864*/ void StartEnumeration();
                /*0x70b9870*/ bool MoveNext();
                /*0x70b98f0*/ long get_Current();
                /*0x70b9924*/ bool RemoveElement(long value);
                /*0x70b97c8*/ void EnlargeArray();
            }

            class ObjectHolderList
            {
                /*0x10*/ System.Runtime.Serialization.ObjectHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x70b99b0*/ ObjectHolderList();
                /*0x70b99b8*/ ObjectHolderList(int startingSize);
                /*0x70b9a2c*/ void Add(System.Runtime.Serialization.ObjectHolder value);
                /*0x70b9b38*/ System.Runtime.Serialization.ObjectHolderListEnumerator GetFixupEnumerator();
                /*0x70b9aa4*/ void EnlargeArray();
                /*0x70b9bf8*/ int get_Version();
                /*0x70b9c00*/ int get_Count();
            }

            class ObjectHolderListEnumerator
            {
                /*0x10*/ bool m_isFixupEnumerator;
                /*0x18*/ System.Runtime.Serialization.ObjectHolderList m_list;
                /*0x20*/ int m_startingVersion;
                /*0x24*/ int m_currPos;

                /*0x70b9b94*/ ObjectHolderListEnumerator(System.Runtime.Serialization.ObjectHolderList list, bool isFixupEnumerator);
                /*0x70b9c08*/ bool MoveNext();
                /*0x70b9cac*/ System.Runtime.Serialization.ObjectHolder get_Current();
            }

            class TypeLoadExceptionHolder
            {
                /*0x10*/ string m_typeName;

                /*0x70b9ce8*/ TypeLoadExceptionHolder(string typeName);
                /*0x70b9d18*/ string get_TypeName();
            }

            class SafeSerializationEventArgs : System.EventArgs
            {
                /*0x10*/ System.Runtime.Serialization.StreamingContext m_streamingContext;
                /*0x20*/ System.Collections.Generic.List<object> m_serializedStates;

                /*0x70b9d20*/ SafeSerializationEventArgs(System.Runtime.Serialization.StreamingContext streamingContext);
                /*0x70b9df0*/ System.Collections.Generic.IList<object> get_SerializedStates();
            }

            interface ISafeSerializationData
            {
                /*0x3816710*/ void CompleteDeserialization(object deserialized);
            }

            class SafeSerializationManager : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                /*0x10*/ System.Collections.Generic.IList<object> m_serializedStates;
                /*0x18*/ System.Runtime.Serialization.SerializationInfo m_savedSerializationInfo;
                /*0x20*/ object m_realObject;
                /*0x28*/ System.RuntimeType m_realType;
                /*0x30*/ System.EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs> SerializeObjectState;

                /*0x70b9df8*/ SafeSerializationManager();
                /*0x70b9e00*/ SafeSerializationManager(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70ba330*/ bool get_IsActive();
                /*0x70ba340*/ void CompleteSerialization(object serializedObject, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70ba690*/ void CompleteDeserialization(object deserializedObject);
                /*0x70baa2c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70baad0*/ object System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x70bada4*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
            }

            class OptionalFieldAttribute : System.Attribute
            {
                /*0x10*/ int versionAdded;

                /*0x70bae60*/ OptionalFieldAttribute();
                /*0x70bae70*/ void set_VersionAdded(int value);
            }

            class OnSerializingAttribute : System.Attribute
            {
                /*0x70baee0*/ OnSerializingAttribute();
            }

            class OnSerializedAttribute : System.Attribute
            {
                /*0x70baee8*/ OnSerializedAttribute();
            }

            class OnDeserializingAttribute : System.Attribute
            {
                /*0x70baef0*/ OnDeserializingAttribute();
            }

            class OnDeserializedAttribute : System.Attribute
            {
                /*0x70baef8*/ OnDeserializedAttribute();
            }

            class SerializationFieldInfo : System.Reflection.FieldInfo
            {
                /*0x10*/ System.Reflection.RuntimeFieldInfo m_field;
                /*0x18*/ string m_serializationName;

                /*0x70baf44*/ SerializationFieldInfo(System.Reflection.RuntimeFieldInfo field, string namePrefix);
                /*0x70baf00*/ System.Reflection.Module get_Module();
                /*0x70baf20*/ int get_MetadataToken();
                /*0x70bafec*/ string get_Name();
                /*0x70baff4*/ System.Type get_DeclaringType();
                /*0x70bb014*/ System.Type get_ReflectedType();
                /*0x70bb034*/ object[] GetCustomAttributes(bool inherit);
                /*0x70bb05c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70bb084*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70bb0a8*/ System.Type get_FieldType();
                /*0x70bb0cc*/ object GetValue(object obj);
                /*0x70bb0f0*/ object InternalGetValue(object obj);
                /*0x70bb170*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x70bb194*/ void InternalSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x70bb244*/ System.Reflection.RuntimeFieldInfo get_FieldInfo();
                /*0x70bb24c*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x70bb270*/ System.Reflection.FieldAttributes get_Attributes();
            }

            class SerializationInfo
            {
                /*0x10*/ string[] m_members;
                /*0x18*/ object[] m_data;
                /*0x20*/ System.Type[] m_types;
                /*0x28*/ System.Collections.Generic.Dictionary<string, int> m_nameToIndex;
                /*0x30*/ int m_currMember;
                /*0x38*/ System.Runtime.Serialization.IFormatterConverter m_converter;
                /*0x40*/ string m_fullTypeName;
                /*0x48*/ string m_assemName;
                /*0x50*/ System.Type objectType;
                /*0x58*/ bool isFullTypeNameSetExplicit;
                /*0x59*/ bool isAssemblyNameSetExplicit;
                /*0x5a*/ bool requireSameTokenInPartialTrust;

                static /*0x70bb4ec*/ bool Compare(byte[] a, byte[] b);
                static /*0x70bb4e8*/ void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName);
                static /*0x70bb580*/ bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName);
                /*0x70bb294*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter);
                /*0x70bb29c*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);
                /*0x70bb4d8*/ string get_FullTypeName();
                /*0x70bb4e0*/ string get_AssemblyName();
                /*0x70ba538*/ void SetType(System.Type type);
                /*0x70bb6b4*/ int get_MemberCount();
                /*0x70bb6bc*/ System.Type get_ObjectType();
                /*0x70bb6c4*/ bool get_IsFullTypeNameSetExplicit();
                /*0x70bb6cc*/ bool get_IsAssemblyNameSetExplicit();
                /*0x70bb6d4*/ System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator();
                /*0x70bb750*/ void ExpandArrays();
                /*0x70ba4bc*/ void AddValue(string name, object value, System.Type type);
                /*0x70bba68*/ void AddValue(string name, object value);
                /*0x70bbae8*/ void AddValue(string name, bool value);
                /*0x70bbb64*/ void AddValue(string name, byte value);
                /*0x70bbbdc*/ void AddValue(string name, short value);
                /*0x70bbc54*/ void AddValue(string name, int value);
                /*0x70bbccc*/ void AddValue(string name, long value);
                /*0x70bbd44*/ void AddValue(string name, ulong value);
                /*0x70bbdbc*/ void AddValue(string name, float value);
                /*0x70bbe34*/ void AddValue(string name, System.DateTime value);
                /*0x70bb898*/ void AddValueInternal(string name, object value, System.Type type);
                /*0x70bbef4*/ void UpdateValue(string name, object value, System.Type type);
                /*0x70bbfe4*/ int FindElement(string name);
                /*0x70bc0a8*/ object GetElement(string name, ref System.Type foundType);
                /*0x70bc1bc*/ object GetElementNoThrow(string name, ref System.Type foundType);
                /*0x70ba128*/ object GetValue(string name, System.Type type);
                /*0x70ba020*/ object GetValueNoThrow(string name, System.Type type);
                /*0x70bc258*/ bool GetBoolean(string name);
                /*0x70bc3a4*/ byte GetByte(string name);
                /*0x70bc4e4*/ int GetInt32(string name);
                /*0x70bc624*/ long GetInt64(string name);
                /*0x70bc764*/ float GetSingle(string name);
                /*0x70bc8a4*/ string GetString(string name);
            }

            struct StreamingContext
            {
                /*0x10*/ object m_additionalContext;
                /*0x18*/ System.Runtime.Serialization.StreamingContextStates m_state;

                /*0x70bc9dc*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state);
                /*0x70bc9ec*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state, object additional);
                /*0x70bc9fc*/ object get_Context();
                /*0x70bca04*/ bool Equals(object obj);
                /*0x70bcab4*/ int GetHashCode();
                /*0x70bcabc*/ System.Runtime.Serialization.StreamingContextStates get_State();
            }

            enum StreamingContextStates
            {
                CrossProcess = 1,
                CrossMachine = 2,
                File = 4,
                Persistence = 8,
                Remoting = 16,
                Other = 32,
                Clone = 64,
                CrossAppDomain = 128,
                All = 255,
            }

            namespace Formatters
            {
                enum FormatterTypeStyle
                {
                    TypesWhenNeeded = 0,
                    TypesAlways = 1,
                    XsdString = 2,
                }

                enum FormatterAssemblyStyle
                {
                    Simple = 0,
                    Full = 1,
                }

                enum TypeFilterLevel
                {
                    Low = 2,
                    Full = 3,
                }

                namespace Binary
                {
                    enum BinaryHeaderEnum
                    {
                        SerializedStreamHeader = 0,
                        Object = 1,
                        ObjectWithMap = 2,
                        ObjectWithMapAssemId = 3,
                        ObjectWithMapTyped = 4,
                        ObjectWithMapTypedAssemId = 5,
                        ObjectString = 6,
                        Array = 7,
                        MemberPrimitiveTyped = 8,
                        MemberReference = 9,
                        ObjectNull = 10,
                        MessageEnd = 11,
                        Assembly = 12,
                        ObjectNullMultiple256 = 13,
                        ObjectNullMultiple = 14,
                        ArraySinglePrimitive = 15,
                        ArraySingleObject = 16,
                        ArraySingleString = 17,
                        CrossAppDomainMap = 18,
                        CrossAppDomainString = 19,
                        CrossAppDomainAssembly = 20,
                        MethodCall = 21,
                        MethodReturn = 22,
                    }

                    enum BinaryTypeEnum
                    {
                        Primitive = 0,
                        String = 1,
                        Object = 2,
                        ObjectUrt = 3,
                        ObjectUser = 4,
                        ObjectArray = 5,
                        StringArray = 6,
                        PrimitiveArray = 7,
                    }

                    enum BinaryArrayTypeEnum
                    {
                        Single = 0,
                        Jagged = 1,
                        Rectangular = 2,
                        SingleOffset = 3,
                        JaggedOffset = 4,
                        RectangularOffset = 5,
                    }

                    enum InternalSerializerTypeE
                    {
                        Soap = 1,
                        Binary = 2,
                    }

                    enum InternalParseTypeE
                    {
                        Empty = 0,
                        SerializedStreamHeader = 1,
                        Object = 2,
                        Member = 3,
                        ObjectEnd = 4,
                        MemberEnd = 5,
                        Headers = 6,
                        HeadersEnd = 7,
                        SerializedStreamHeaderEnd = 8,
                        Envelope = 9,
                        EnvelopeEnd = 10,
                        Body = 11,
                        BodyEnd = 12,
                    }

                    enum InternalObjectTypeE
                    {
                        Empty = 0,
                        Object = 1,
                        Array = 2,
                    }

                    enum InternalObjectPositionE
                    {
                        Empty = 0,
                        Top = 1,
                        Child = 2,
                        Headers = 3,
                    }

                    enum InternalArrayTypeE
                    {
                        Empty = 0,
                        Single = 1,
                        Jagged = 2,
                        Rectangular = 3,
                        Base64 = 4,
                    }

                    enum InternalMemberTypeE
                    {
                        Empty = 0,
                        Header = 1,
                        Field = 2,
                        Item = 3,
                    }

                    enum InternalMemberValueE
                    {
                        Empty = 0,
                        InlineValue = 1,
                        Nested = 2,
                        Reference = 3,
                        Null = 4,
                    }

                    enum InternalPrimitiveTypeE
                    {
                        Invalid = 0,
                        Boolean = 1,
                        Byte = 2,
                        Char = 3,
                        Currency = 4,
                        Decimal = 5,
                        Double = 6,
                        Int16 = 7,
                        Int32 = 8,
                        Int64 = 9,
                        SByte = 10,
                        Single = 11,
                        TimeSpan = 12,
                        DateTime = 13,
                        UInt16 = 14,
                        UInt32 = 15,
                        UInt64 = 16,
                        Null = 17,
                        String = 18,
                    }

                    enum ValueFixupEnum
                    {
                        Empty = 0,
                        Array = 1,
                        Header = 2,
                        Member = 3,
                    }

                    class BinaryConverter
                    {
                        static /*0x70bcac4*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetBinaryTypeInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, string typeName, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, ref object typeInformation, ref int assemId);
                        static /*0x70bd1d8*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetParserBinaryTypeInfo(System.Type type, ref object typeInformation);
                        static /*0x70bd4e8*/ void WriteTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x70bd774*/ object ReadTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, ref int assemId);
                        static /*0x70bd918*/ void TypeFromInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, ref System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, ref string typeString, ref System.Type type, ref bool isVariant);
                    }

                    class IOUtil
                    {
                        static /*0x70be0ac*/ bool FlagTest(System.Runtime.Serialization.Formatters.Binary.MessageEnum flag, System.Runtime.Serialization.Formatters.Binary.MessageEnum target);
                        static /*0x70be0b8*/ void WriteStringWithCode(string value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x70be12c*/ void WriteWithCode(System.Type type, object value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                    }

                    class BinaryAssemblyInfo
                    {
                        /*0x10*/ string assemblyString;
                        /*0x18*/ System.Reflection.Assembly assembly;

                        /*0x70be9a8*/ BinaryAssemblyInfo(string assemblyString);
                        /*0x70be9d8*/ BinaryAssemblyInfo(string assemblyString, System.Reflection.Assembly assembly);
                        /*0x70bea1c*/ System.Reflection.Assembly GetAssembly();
                    }

                    class SerializationHeaderRecord
                    {
                        /*0x10*/ int binaryFormatterMajorVersion;
                        /*0x14*/ int binaryFormatterMinorVersion;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x1c*/ int topId;
                        /*0x20*/ int headerId;
                        /*0x24*/ int majorVersion;
                        /*0x28*/ int minorVersion;

                        static /*0x70bec64*/ int GetInt32(byte[] buffer, int index);
                        /*0x70beb4c*/ SerializationHeaderRecord();
                        /*0x70beb5c*/ SerializationHeaderRecord(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
                        /*0x70bebb4*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70becd8*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bee28*/ void Dump();
                    }

                    class BinaryAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x18*/ string assemblyString;

                        /*0x70bee2c*/ BinaryAssembly();
                        /*0x70bee34*/ void Set(int assemId, string assemblyString);
                        /*0x70bee44*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70beeb4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bef00*/ void Dump();
                    }

                    class BinaryCrossAppDomainAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x14*/ int assemblyIndex;

                        /*0x70bef04*/ BinaryCrossAppDomainAssembly();
                        /*0x70bef0c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bef50*/ void Dump();
                    }

                    class BinaryObject
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int mapId;

                        /*0x70bef54*/ BinaryObject();
                        /*0x70bef5c*/ void Set(int objectId, int mapId);
                        /*0x70bef64*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70befd4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bf018*/ void Dump();
                    }

                    class BinaryMethodCall
                    {
                        /*0x10*/ string methodName;
                        /*0x18*/ string typeName;
                        /*0x20*/ object[] args;
                        /*0x28*/ object callContext;
                        /*0x30*/ System.Type[] argTypes;
                        /*0x38*/ bool bArgsPrimitive;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;

                        /*0x70bf148*/ BinaryMethodCall();
                        /*0x70bf01c*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70bf144*/ void Dump();
                    }

                    class BinaryMethodReturn
                    {
                        static /*0x0*/ object instanceOfVoid;
                        /*0x10*/ object returnValue;
                        /*0x18*/ object[] args;
                        /*0x20*/ object callContext;
                        /*0x28*/ System.Type[] argTypes;
                        /*0x30*/ bool bArgsPrimitive;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;
                        /*0x38*/ System.Type returnType;

                        static /*0x70bf158*/ BinaryMethodReturn();
                        /*0x70bf210*/ BinaryMethodReturn();
                        /*0x70bf220*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70bf348*/ void Dump();
                    }

                    class BinaryObjectString
                    {
                        /*0x10*/ int objectId;
                        /*0x18*/ string value;

                        /*0x70bf34c*/ BinaryObjectString();
                        /*0x70bf354*/ void Set(int objectId, string value);
                        /*0x70bf364*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70bf3d4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bf420*/ void Dump();
                    }

                    class BinaryCrossAppDomainString
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int value;

                        /*0x70bf424*/ BinaryCrossAppDomainString();
                        /*0x70bf42c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bf470*/ void Dump();
                    }

                    class BinaryCrossAppDomainMap
                    {
                        /*0x10*/ int crossAppDomainArrayIndex;

                        /*0x70bf474*/ BinaryCrossAppDomainMap();
                        /*0x70bf47c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bf4a4*/ void Dump();
                    }

                    class MemberPrimitiveTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum;
                        /*0x18*/ object value;

                        /*0x70bf4a8*/ MemberPrimitiveTyped();
                        /*0x70bf4b0*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, object value);
                        /*0x70bf4c0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70bf520*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bf570*/ void Dump();
                    }

                    class BinaryObjectWithMap
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ int assemId;

                        /*0x70bf574*/ BinaryObjectWithMap();
                        /*0x70bf57c*/ BinaryObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70bf5a4*/ void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId);
                        /*0x70bf608*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70bf71c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70bf84c*/ void Dump();
                    }

                    class BinaryObjectWithMapTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x38*/ object[] typeInformationA;
                        /*0x40*/ int[] memberAssemIds;
                        /*0x48*/ int assemId;

                        /*0x70bf850*/ BinaryObjectWithMapTyped();
                        /*0x70bf858*/ BinaryObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70bf880*/ void Set(int objectId, string name, int numMembers, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId);
                        /*0x70bf930*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70bfb08*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class BinaryArray
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int rank;
                        /*0x18*/ int[] lengthA;
                        /*0x20*/ int[] lowerBoundA;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x30*/ object typeInformation;
                        /*0x38*/ int assemId;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum;

                        /*0x70bfe0c*/ BinaryArray();
                        /*0x70bfe14*/ BinaryArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70bfe3c*/ void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId);
                        /*0x70bfeec*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70c01c4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class MemberPrimitiveUnTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation;
                        /*0x18*/ object value;

                        /*0x70c058c*/ MemberPrimitiveUnTyped();
                        /*0x70c0594*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation, object value);
                        /*0x70c05a4*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation);
                        /*0x70c05ac*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70c05d0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70c0608*/ void Dump();
                    }

                    class MemberReference
                    {
                        /*0x10*/ int idRef;

                        /*0x70c060c*/ MemberReference();
                        /*0x70c0614*/ void Set(int idRef);
                        /*0x70c061c*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70c0670*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70c0698*/ void Dump();
                    }

                    class ObjectNull
                    {
                        /*0x10*/ int nullCount;

                        /*0x70c069c*/ ObjectNull();
                        /*0x70c06a4*/ void SetNullCount(int nullCount);
                        /*0x70c06ac*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70c0758*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70c07b8*/ void Dump();
                    }

                    class MessageEnd
                    {
                        /*0x70c07bc*/ MessageEnd();
                        /*0x70c07c4*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70c07ec*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70c07f0*/ void Dump();
                        /*0x70c07f4*/ void Dump(System.IO.Stream sout);
                    }

                    class ObjectMap
                    {
                        /*0x10*/ string objectName;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x28*/ object[] typeInformationA;
                        /*0x30*/ System.Type[] memberTypes;
                        /*0x38*/ string[] memberNames;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x48*/ bool isInitObjectInfo;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x58*/ int objectId;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo;

                        static /*0x70c1454*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        static /*0x70c14ec*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x70c07f8*/ ObjectMap(string objectName, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        /*0x70c0f6c*/ ObjectMap(string objectName, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x70c1320*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateObjectInfo(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                    }

                    class ObjectProgress
                    {
                        static /*0x0*/ int opRecordIdCount;
                        /*0x10*/ bool isInitial;
                        /*0x14*/ int count;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x20*/ object expectedTypeInformation;
                        /*0x28*/ string name;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE objectTypeEnum;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE memberTypeEnum;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE memberValueEnum;
                        /*0x40*/ System.Type dtType;
                        /*0x48*/ int numItems;
                        /*0x4c*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x50*/ object typeInformation;
                        /*0x58*/ int nullCount;
                        /*0x5c*/ int memberLength;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x68*/ object[] typeInformationA;
                        /*0x70*/ string[] memberNames;
                        /*0x78*/ System.Type[] memberTypes;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord pr;

                        static /*0x70c1850*/ ObjectProgress();
                        /*0x70c15a8*/ ObjectProgress();
                        /*0x70c161c*/ void Init();
                        /*0x70c16dc*/ void ArrayCountIncrement(int value);
                        /*0x70c16ec*/ bool GetNext(ref System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum outBinaryTypeEnum, ref object outTypeInformation);
                    }

                    class Converter
                    {
                        static /*0x0*/ int primitiveTypeEnumLength;
                        static /*0x8*/ System.Type[] typeA;
                        static /*0x10*/ System.Type[] arrayTypeA;
                        static /*0x18*/ string[] valueA;
                        static /*0x20*/ System.TypeCode[] typeCodeA;
                        static /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE[] codeA;
                        static /*0x30*/ System.Type typeofISerializable;
                        static /*0x38*/ System.Type typeofString;
                        static /*0x40*/ System.Type typeofConverter;
                        static /*0x48*/ System.Type typeofBoolean;
                        static /*0x50*/ System.Type typeofByte;
                        static /*0x58*/ System.Type typeofChar;
                        static /*0x60*/ System.Type typeofDecimal;
                        static /*0x68*/ System.Type typeofDouble;
                        static /*0x70*/ System.Type typeofInt16;
                        static /*0x78*/ System.Type typeofInt32;
                        static /*0x80*/ System.Type typeofInt64;
                        static /*0x88*/ System.Type typeofSByte;
                        static /*0x90*/ System.Type typeofSingle;
                        static /*0x98*/ System.Type typeofTimeSpan;
                        static /*0xa0*/ System.Type typeofDateTime;
                        static /*0xa8*/ System.Type typeofUInt16;
                        static /*0xb0*/ System.Type typeofUInt32;
                        static /*0xb8*/ System.Type typeofUInt64;
                        static /*0xc0*/ System.Type typeofObject;
                        static /*0xc8*/ System.Type typeofSystemVoid;
                        static /*0xd0*/ System.Reflection.Assembly urtAssembly;
                        static /*0xd8*/ string urtAssemblyString;
                        static /*0xe0*/ System.Type typeofTypeArray;
                        static /*0xe8*/ System.Type typeofObjectArray;
                        static /*0xf0*/ System.Type typeofStringArray;
                        static /*0xf8*/ System.Type typeofBooleanArray;
                        static /*0x100*/ System.Type typeofByteArray;
                        static /*0x108*/ System.Type typeofCharArray;
                        static /*0x110*/ System.Type typeofDecimalArray;
                        static /*0x118*/ System.Type typeofDoubleArray;
                        static /*0x120*/ System.Type typeofInt16Array;
                        static /*0x128*/ System.Type typeofInt32Array;
                        static /*0x130*/ System.Type typeofInt64Array;
                        static /*0x138*/ System.Type typeofSByteArray;
                        static /*0x140*/ System.Type typeofSingleArray;
                        static /*0x148*/ System.Type typeofTimeSpanArray;
                        static /*0x150*/ System.Type typeofDateTimeArray;
                        static /*0x158*/ System.Type typeofUInt16Array;
                        static /*0x160*/ System.Type typeofUInt32Array;
                        static /*0x168*/ System.Type typeofUInt64Array;
                        static /*0x170*/ System.Type typeofMarshalByRefObject;

                        static /*0x70c2c58*/ Converter();
                        static /*0x70bd3d0*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        static /*0x70c1954*/ bool IsWriteAsByteArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70c1978*/ int TypeLength(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70bde30*/ System.Type ToArrayType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70c1e18*/ void InitTypeA();
                        static /*0x70c199c*/ void InitArrayTypeA();
                        static /*0x70bdd78*/ System.Type ToType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70c2294*/ System.Array CreatePrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, int length);
                        static /*0x70bcdcc*/ bool IsPrimitiveArray(System.Type type, ref object typeInformation);
                        static /*0x70c23b4*/ void InitValueA();
                        static /*0x70bdcc0*/ string ToComType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70c2770*/ void InitTypeCodeA();
                        static /*0x70c2908*/ System.TypeCode ToTypeCode(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70c29c0*/ void InitCodeA();
                        static /*0x70c189c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToPrimitiveTypeEnum(System.TypeCode typeCode);
                        static /*0x70c2b6c*/ object FromString(string value, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                    }

                    class BinaryFormatter
                    {
                        static /*0x0*/ System.Collections.Generic.Dictionary<System.Type, System.Runtime.Serialization.Formatters.Binary.TypeInformation> typeNameCache;
                        /*0x10*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x18*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x28*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x30*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle m_typeFormat;
                        /*0x34*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle m_assemblyFormat;
                        /*0x38*/ System.Runtime.Serialization.Formatters.TypeFilterLevel m_securityLevel;
                        /*0x40*/ object[] m_crossAppDomainArray;

                        static /*0x70c47b8*/ BinaryFormatter();
                        static /*0x70c450c*/ System.Runtime.Serialization.Formatters.Binary.TypeInformation GetTypeInformation(System.Type type);
                        /*0x70c34e8*/ BinaryFormatter();
                        /*0x70c3554*/ BinaryFormatter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);
                        /*0x70c34d8*/ void set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle value);
                        /*0x70c34e0*/ void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector value);
                        /*0x70c35b8*/ object Deserialize(System.IO.Stream serializationStream);
                        /*0x70c35cc*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, bool fCheck);
                        /*0x70c35c4*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);
                        /*0x70c3cf0*/ void Serialize(System.IO.Stream serializationStream, object graph);
                        /*0x70c3cfc*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);
                        /*0x70c3d04*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers, bool fCheck);
                    }

                    class __BinaryWriter
                    {
                        /*0x10*/ System.IO.Stream sout;
                        /*0x18*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle;
                        /*0x20*/ System.Collections.Hashtable objectMapTable;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter;
                        /*0x30*/ System.IO.BinaryWriter dataWriter;
                        /*0x38*/ int m_nestedObjectCount;
                        /*0x3c*/ int nullCount;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodCall binaryMethodCall;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn binaryMethodReturn;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap binaryObjectWithMap;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped binaryObjectWithMapTyped;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString binaryObjectString;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.BinaryArray binaryArray;
                        /*0x78*/ byte[] byteBuffer;
                        /*0x80*/ int chunkSize;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssembly binaryAssembly;

                        /*0x70c4020*/ __BinaryWriter(System.IO.Stream sout, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle);
                        /*0x70c4850*/ void WriteBegin();
                        /*0x70c4854*/ void WriteEnd();
                        /*0x70c4874*/ void WriteBoolean(bool value);
                        /*0x70bd70c*/ void WriteByte(byte value);
                        /*0x70c4898*/ void WriteBytes(byte[] value);
                        /*0x70c48b8*/ void WriteBytes(byte[] byteA, int offset, int size);
                        /*0x70c48d8*/ void WriteChar(char value);
                        /*0x70c48fc*/ void WriteChars(char[] value);
                        /*0x70c4920*/ void WriteDecimal(decimal value);
                        /*0x70c4a0c*/ void WriteSingle(float value);
                        /*0x70c4a30*/ void WriteDouble(double value);
                        /*0x70c4a54*/ void WriteInt16(short value);
                        /*0x70bd750*/ void WriteInt32(int value);
                        /*0x70c4a78*/ void WriteInt64(long value);
                        /*0x70c4a9c*/ void WriteSByte(sbyte value);
                        /*0x70bd72c*/ void WriteString(string value);
                        /*0x70c4abc*/ void WriteTimeSpan(System.TimeSpan value);
                        /*0x70c4b34*/ void WriteDateTime(System.DateTime value);
                        /*0x70c4bac*/ void WriteUInt16(ushort value);
                        /*0x70c4bd0*/ void WriteUInt32(uint value);
                        /*0x70c4bf4*/ void WriteUInt64(ulong value);
                        /*0x70c4c18*/ void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70c4c1c*/ void WriteSerializationHeaderEnd();
                        /*0x70c4c7c*/ void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
                        /*0x70c4d0c*/ void WriteMethodCall();
                        /*0x70c4d98*/ void WriteMethodReturn();
                        /*0x70c4e24*/ void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, int numMembers, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x70c5588*/ void WriteObjectString(int objectId, string value);
                        /*0x70c5638*/ void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, System.Array array);
                        /*0x70c5904*/ void WriteArrayAsBytes(System.Array array, int typeLength);
                        /*0x70c5a5c*/ void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound);
                        /*0x70c5c04*/ void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA);
                        /*0x70c5d80*/ void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA);
                        /*0x70c5de0*/ void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x70c5f1c*/ void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70c5fcc*/ void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, int idRef);
                        /*0x70c606c*/ void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo);
                        /*0x70c6088*/ void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string value);
                        /*0x70c60d0*/ void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x70c6110*/ void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70c6120*/ void WriteDelayedNullItem();
                        /*0x70c6130*/ void WriteItemEnd();
                        /*0x70c5378*/ void InternalWriteItemNull();
                        /*0x70c6134*/ void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, int idRef);
                        /*0x70c6164*/ void WriteAssembly(System.Type type, string assemblyString, int assemId, bool isNew);
                        /*0x70be24c*/ void WriteValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, object value);
                    }

                    class ObjectMapInfo
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int numMembers;
                        /*0x18*/ string[] memberNames;
                        /*0x20*/ System.Type[] memberTypes;

                        /*0x70c5530*/ ObjectMapInfo(int objectId, int numMembers, string[] memberNames, System.Type[] memberTypes);
                        /*0x70c5414*/ bool isCompatible(int numMembers, string[] memberNames, System.Type[] memberTypes);
                    }

                    class WriteObjectInfo
                    {
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ object obj;
                        /*0x20*/ System.Type objectType;
                        /*0x28*/ bool isSi;
                        /*0x29*/ bool isNamed;
                        /*0x2a*/ bool isTyped;
                        /*0x2b*/ bool isArray;
                        /*0x30*/ System.Runtime.Serialization.SerializationInfo si;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x40*/ object[] memberData;
                        /*0x48*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x50*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x68*/ long objectId;
                        /*0x70*/ long assemId;
                        /*0x78*/ string binderTypeName;
                        /*0x80*/ string binderAssemblyString;

                        static /*0x70c62fc*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x70c7298*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x70c6e18*/ void CheckTypeForwardedFrom(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache, System.Type objectType, string binderAssemblyString);
                        static /*0x70c638c*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        static /*0x70c625c*/ void PutObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70c6248*/ WriteObjectInfo();
                        /*0x70c6250*/ void ObjectEnd();
                        /*0x70c627c*/ void InternalInit();
                        /*0x70c6458*/ void InitSerialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70c7320*/ void InitSerialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70c6aec*/ void InitSiWrite();
                        /*0x70c69a8*/ void InitNoMembers();
                        /*0x70c6f6c*/ void InitMemberInfo();
                        /*0x70bd1b0*/ string GetTypeFullName();
                        /*0x70bd188*/ string GetAssemblyString();
                        /*0x70c6ac4*/ void InvokeSerializationBinder(System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70c775c*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                        /*0x70c78c4*/ void GetMemberInfo(ref string[] outMemberNames, ref System.Type[] outMemberTypes, ref object[] outMemberData);
                    }

                    class ReadObjectInfo
                    {
                        static /*0x0*/ int readObjectInfoCounter;
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.ObjectManager objectManager;
                        /*0x28*/ int count;
                        /*0x2c*/ bool isSi;
                        /*0x2d*/ bool isNamed;
                        /*0x2e*/ bool isTyped;
                        /*0x2f*/ bool bSimpleAssembly;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x38*/ string[] wireMemberNames;
                        /*0x40*/ System.Type[] wireMemberTypes;
                        /*0x48*/ int lastPosition;
                        /*0x50*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x58*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x68*/ System.Collections.Generic.List<System.Type> memberTypesList;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x78*/ System.Runtime.Serialization.IFormatterConverter formatterConverter;

                        static /*0x70c7998*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x70c7cf4*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x70c7a28*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        /*0x70c798c*/ ReadObjectInfo();
                        /*0x70c7994*/ void ObjectEnd();
                        /*0x70c144c*/ void PrepareForReuse();
                        /*0x70c7a98*/ void Init(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x70c7d90*/ void Init(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x70c7b50*/ void InitReadConstructor(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context);
                        /*0x70c7f14*/ void InitSiRead();
                        /*0x70c7eb0*/ void InitNoMembers();
                        /*0x70c7fa0*/ void InitMemberInfo();
                        /*0x70c8354*/ System.Reflection.MemberInfo GetMemberInfo(string name);
                        /*0x70c8618*/ System.Type GetType(string name);
                        /*0x70c87ac*/ void AddValue(string name, object value, ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x70c1360*/ void InitDataStore(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x70c8850*/ void RecordFixup(long objectId, string name, long idRef);
                        /*0x70c88f4*/ void PopulateObjectMembers(object obj, object[] memberData);
                        /*0x70c84e4*/ int Position(string name);
                        /*0x70c0a64*/ System.Type[] GetMemberTypes(string[] inMemberNames, System.Type objectType);
                        /*0x70c81ec*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                    }

                    class SerObjectInfoInit
                    {
                        /*0x10*/ System.Collections.Hashtable seenBeforeTable;
                        /*0x18*/ int objectInfoIdCount;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.SerStack oiPool;

                        /*0x70c8990*/ SerObjectInfoInit();
                    }

                    class SerObjectInfoCache
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;
                        /*0x28*/ System.Reflection.MemberInfo[] memberInfos;
                        /*0x30*/ string[] memberNames;
                        /*0x38*/ System.Type[] memberTypes;

                        /*0x70c7704*/ SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
                        /*0x70c7660*/ SerObjectInfoCache(System.Type type);
                    }

                    class TypeInformation
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;

                        /*0x70c4760*/ TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
                        /*0x70c8a5c*/ string get_FullTypeName();
                        /*0x70c8a64*/ string get_AssemblyString();
                        /*0x70c8a6c*/ bool get_HasTypeForwardedFrom();
                    }

                    class ObjectReader
                    {
                        /*0x10*/ System.IO.Stream m_stream;
                        /*0x18*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x20*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x30*/ System.Runtime.Serialization.ObjectManager m_objectManager;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x40*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x48*/ long topId;
                        /*0x50*/ bool bSimpleAssembly;
                        /*0x58*/ object handlerObject;
                        /*0x60*/ object m_topObject;
                        /*0x68*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x70*/ System.Runtime.Remoting.Messaging.HeaderHandler handler;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.SerStack valueFixupStack;
                        /*0x98*/ object[] crossAppDomainArray;
                        /*0xa0*/ bool bFullDeserialization;
                        /*0xa1*/ bool bOldFormatDetected;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.IntSizedArray valTypeObjectIdTable;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.NameCache typeCache;
                        /*0xb8*/ string previousAssemblyString;
                        /*0xc0*/ string previousName;
                        /*0xc8*/ System.Type previousType;

                        static /*0x70cb334*/ System.Reflection.Assembly ResolveSimpleAssemblyName(System.Reflection.AssemblyName assemblyName);
                        static /*0x70cb394*/ void GetSimplyNamedTypeFromAssembly(System.Reflection.Assembly assm, string typeName, ref System.Type type);
                        static /*0x70cb5f0*/ void CheckTypeForwardedTo(System.Reflection.Assembly sourceAssembly, System.Reflection.Assembly destAssembly, System.Type resolvedType);
                        /*0x70c3800*/ ObjectReader(System.IO.Stream stream, System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70c8a74*/ System.Runtime.Serialization.Formatters.Binary.SerStack get_ValueFixupStack();
                        /*0x70c8afc*/ object get_TopObject();
                        /*0x70c8b04*/ void set_TopObject(object value);
                        /*0x70c3958*/ object Deserialize(System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Serialization.Formatters.Binary.__BinaryParser serParser, bool fCheck);
                        /*0x70c8b48*/ bool HasSurrogate(System.Type t);
                        /*0x70c8c1c*/ void CheckSerializable(System.Type t);
                        /*0x70c8d4c*/ void InitFullDeserialization();
                        /*0x70c8e78*/ object CrossAppDomainArray(int index);
                        /*0x70c0a34*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType);
                        /*0x70c12e0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType, string[] memberNames, System.Type[] memberTypes);
                        /*0x70c8ea8*/ void Parse(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c9b5c*/ void ParseError(System.Runtime.Serialization.Formatters.Binary.ParseRecord processing, System.Runtime.Serialization.Formatters.Binary.ParseRecord onStack);
                        /*0x70c8fec*/ void ParseSerializedStreamHeader(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c9008*/ void ParseSerializedStreamHeaderEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c9024*/ void ParseObject(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c9384*/ void ParseObjectEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c9da8*/ void ParseArray(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70ca500*/ void NextRectangleMap(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70ca5c4*/ void ParseArrayMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70cadbc*/ void ParseArrayMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c95b4*/ void ParseMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70c9a9c*/ void ParseMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70cad7c*/ void ParseString(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord parentPr);
                        /*0x70ca4f8*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr);
                        /*0x70cade4*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr, bool bIsString);
                        /*0x70caeec*/ long GetId(long objectId);
                        /*0x70cafe0*/ System.Type Bind(string assemblyString, string typeString);
                        /*0x70cb038*/ System.Type FastBindToType(string assemblyName, string typeName);
                        /*0x70bdee8*/ System.Type GetType(System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, string name);

                        class TypeNAssembly
                        {
                            /*0x10*/ System.Type type;
                            /*0x18*/ string assemblyName;

                            /*0x70cb730*/ TypeNAssembly();
                        }

                        class TopLevelAssemblyTypeResolver
                        {
                            /*0x10*/ System.Reflection.Assembly m_topLevelAssembly;

                            /*0x70cb738*/ TopLevelAssemblyTypeResolver(System.Reflection.Assembly topLevelAssembly);
                            /*0x70cb768*/ System.Type ResolveType(System.Reflection.Assembly assembly, string simpleTypeName, bool ignoreCase);
                        }
                    }

                    class ObjectWriter
                    {
                        /*0x10*/ System.Collections.Queue m_objectQueue;
                        /*0x18*/ System.Runtime.Serialization.ObjectIDGenerator m_idGenerator;
                        /*0x20*/ int m_currentId;
                        /*0x28*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x30*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter;
                        /*0x48*/ System.Runtime.Serialization.SerializationObjectManager m_objectManager;
                        /*0x50*/ long topId;
                        /*0x58*/ string topName;
                        /*0x60*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x70*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ object[] crossAppDomainArray;
                        /*0x90*/ object previousObj;
                        /*0x98*/ long previousId;
                        /*0xa0*/ System.Type previousType;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE previousCode;
                        /*0xb0*/ System.Collections.Hashtable assemblyToIdTable;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.SerStack niPool;

                        /*0x70c3edc*/ ObjectWriter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70c40f0*/ void Serialize(object graph, System.Runtime.Remoting.Messaging.Header[] inHeaders, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter, bool fCheck);
                        /*0x70cc020*/ System.Runtime.Serialization.SerializationObjectManager get_ObjectManager();
                        /*0x70cbb28*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70cc768*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string[] memberNames, System.Type[] memberTypes, object[] memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x70cc9e0*/ void WriteMemberSetup(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string memberName, System.Type memberType, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x70ccb20*/ void WriteMembers(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberTypeNameInfo, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x70cc028*/ void WriteArray(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x70cd100*/ void WriteArrayMember(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, object data);
                        /*0x70cd3a0*/ void WriteRectangle(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, int rank, int[] maxA, System.Array array, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemNameTypeInfo, int[] lowerBoundA);
                        /*0x70cbeb0*/ object GetNext(ref long objID);
                        /*0x70cb7f0*/ long InternalGetId(object obj, bool assignUniqueIdToValueType, System.Type type, ref bool isNew);
                        /*0x70cd5dc*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type);
                        /*0x70ccf78*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70cd01c*/ bool WriteKnownValueClass(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x70cd004*/ void WriteObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, long objectId);
                        /*0x70cd5e8*/ void WriteString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object stringObject);
                        /*0x70cce4c*/ bool CheckForNull(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x70cb7d0*/ void WriteSerializedStreamHeader(long topId, long headerId);
                        /*0x70cd6b4*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x70ccaec*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type);
                        /*0x70cbae4*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70ccf28*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x70ccef0*/ void TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x70cc9a8*/ System.Runtime.Serialization.Formatters.Binary.NameInfo MemberToNameInfo(string name);
                        /*0x70bd0ec*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        /*0x70cb8d0*/ long GetAssemblyId(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70cc750*/ System.Type GetType(object obj);
                        /*0x70cd75c*/ System.Runtime.Serialization.Formatters.Binary.NameInfo GetNameInfo();
                        /*0x70cc744*/ bool CheckTypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle test, System.Runtime.Serialization.Formatters.FormatterTypeStyle want);
                        /*0x70cbe94*/ void PutNameInfo(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                    }

                    class __BinaryParser
                    {
                        static /*0x0*/ System.Text.Encoding encoding;
                        static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x18*/ System.IO.Stream input;
                        /*0x20*/ long topId;
                        /*0x28*/ long headerId;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SizedArray objectMapIdTable;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x50*/ object expectedTypeInformation;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord PRS;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo systemAssemblyInfo;
                        /*0x68*/ System.IO.BinaryReader dataReader;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerStack opPool;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap bowm;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped bowmt;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString objectString;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString crossAppDomainString;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0xa8*/ byte[] byteBuffer;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xc0*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;

                        static /*0x70d1ba0*/ __BinaryParser();
                        /*0x70cd814*/ __BinaryParser(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader);
                        /*0x70cd9d4*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo();
                        /*0x70cda84*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable();
                        /*0x70cdb70*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable();
                        /*0x70cdc6c*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs();
                        /*0x70cdce4*/ void Run();
                        /*0x70ce274*/ void ReadBegin();
                        /*0x70d0054*/ void ReadEnd();
                        /*0x70d056c*/ bool ReadBoolean();
                        /*0x70d058c*/ byte ReadByte();
                        /*0x70d05ac*/ byte[] ReadBytes(int length);
                        /*0x70d05d0*/ void ReadBytes(byte[] byteA, int offset, int size);
                        /*0x70d064c*/ char ReadChar();
                        /*0x70d066c*/ char[] ReadChars(int length);
                        /*0x70d0690*/ decimal ReadDecimal();
                        /*0x70d0744*/ float ReadSingle();
                        /*0x70d0768*/ double ReadDouble();
                        /*0x70d078c*/ short ReadInt16();
                        /*0x70d07b0*/ int ReadInt32();
                        /*0x70d07d4*/ long ReadInt64();
                        /*0x70d07f8*/ sbyte ReadSByte();
                        /*0x70d0818*/ string ReadString();
                        /*0x70d083c*/ System.TimeSpan ReadTimeSpan();
                        /*0x70d0860*/ System.DateTime ReadDateTime();
                        /*0x70d08dc*/ ushort ReadUInt16();
                        /*0x70d0900*/ uint ReadUInt32();
                        /*0x70d0924*/ ulong ReadUInt64();
                        /*0x70ce278*/ void ReadSerializationHeaderRecord();
                        /*0x70ce344*/ void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70ce5d0*/ void ReadObject();
                        /*0x70ce9a4*/ void ReadCrossAppDomainMap();
                        /*0x70ceb6c*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70d0c5c*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record);
                        /*0x70cec24*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70d10d0*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record);
                        /*0x70ceccc*/ void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70cf800*/ void ReadMemberPrimitiveTyped();
                        /*0x70cf238*/ void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70d1558*/ void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70d0058*/ void ReadMemberPrimitiveUnTyped();
                        /*0x70cfb64*/ void ReadMemberReference();
                        /*0x70cfd1c*/ void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70cfee4*/ void ReadMessageEnd();
                        /*0x70d17ec*/ object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        /*0x70d0ac4*/ System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp();
                        /*0x70d04d8*/ void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op);
                    }

                    class ParseRecord
                    {
                        static /*0x0*/ int parseRecordIdCount;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE PRparseTypeEnum;
                        /*0x14*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE PRobjectTypeEnum;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE PRarrayTypeEnum;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE PRmemberTypeEnum;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE PRmemberValueEnum;
                        /*0x24*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE PRobjectPositionEnum;
                        /*0x28*/ string PRname;
                        /*0x30*/ string PRvalue;
                        /*0x38*/ object PRvarValue;
                        /*0x40*/ string PRkeyDt;
                        /*0x48*/ System.Type PRdtType;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRdtTypeCode;
                        /*0x54*/ bool PRisEnum;
                        /*0x58*/ long PRobjectId;
                        /*0x60*/ long PRidRef;
                        /*0x68*/ string PRarrayElementTypeString;
                        /*0x70*/ System.Type PRarrayElementType;
                        /*0x78*/ bool PRisArrayVariant;
                        /*0x7c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRarrayElementTypeCode;
                        /*0x80*/ int PRrank;
                        /*0x88*/ int[] PRlengthA;
                        /*0x90*/ int[] PRpositionA;
                        /*0x98*/ int[] PRlowerBoundA;
                        /*0xa0*/ int[] PRupperBoundA;
                        /*0xa8*/ int[] PRindexMap;
                        /*0xb0*/ int PRmemberIndex;
                        /*0xb4*/ int PRlinearlength;
                        /*0xb8*/ int[] PRrectangularMap;
                        /*0xc0*/ bool PRisLowerBound;
                        /*0xc8*/ long PRtopId;
                        /*0xd0*/ long PRheaderId;
                        /*0xd8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo PRobjectInfo;
                        /*0xe0*/ bool PRisValueTypeFixup;
                        /*0xe8*/ object PRnewObj;
                        /*0xf0*/ object[] PRobjectA;
                        /*0xf8*/ System.Runtime.Serialization.Formatters.Binary.PrimitiveArray PRprimitiveArray;
                        /*0x100*/ bool PRisRegistered;
                        /*0x108*/ object[] PRmemberData;
                        /*0x110*/ System.Runtime.Serialization.SerializationInfo PRsi;
                        /*0x118*/ int PRnullCount;

                        static /*0x70d1c24*/ ParseRecord();
                        /*0x70cdcdc*/ ParseRecord();
                        /*0x70d031c*/ void Init();
                    }

                    class SerStack
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ string stackId;
                        /*0x20*/ int top;

                        /*0x70cd94c*/ SerStack(string stackId);
                        /*0x70d0b68*/ void Push(object obj);
                        /*0x70d047c*/ object Pop();
                        /*0x70d1c70*/ void IncreaseCapacity();
                        /*0x70d02dc*/ object Peek();
                        /*0x70d0c18*/ object PeekPeek();
                        /*0x70d17dc*/ bool IsEmpty();
                    }

                    class SizedArray : System.ICloneable
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ object[] negObjects;

                        /*0x70cdaf0*/ SizedArray();
                        /*0x70cdbe0*/ SizedArray(int length);
                        /*0x70d1d00*/ SizedArray(System.Runtime.Serialization.Formatters.Binary.SizedArray sizedArray);
                        /*0x70d1dd8*/ object Clone();
                        /*0x70d0a50*/ object get_Item(int index);
                        /*0x70d0948*/ void set_Item(int index, object value);
                        /*0x70d1e30*/ void IncreaseCapacity(int index);
                    }

                    class IntSizedArray : System.ICloneable
                    {
                        /*0x10*/ int[] objects;
                        /*0x18*/ int[] negObjects;

                        /*0x70d206c*/ IntSizedArray();
                        /*0x70d20ec*/ IntSizedArray(System.Runtime.Serialization.Formatters.Binary.IntSizedArray sizedArray);
                        /*0x70d2200*/ object Clone();
                        /*0x70d2258*/ int get_Item(int index);
                        /*0x70d22d0*/ void set_Item(int index, int value);
                        /*0x70d2388*/ void IncreaseCapacity(int index);
                    }

                    class NameCache
                    {
                        static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, object> ht;
                        /*0x10*/ string name;

                        static /*0x70d2710*/ NameCache();
                        /*0x70d2708*/ NameCache();
                        /*0x70d25c4*/ object GetCachedValue(string name);
                        /*0x70d2678*/ void SetCachedValue(object value);
                    }

                    class ValueFixup
                    {
                        static /*0x0*/ System.Reflection.MemberInfo valueInfo;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum valueFixupEnum;
                        /*0x18*/ System.Array arrayObj;
                        /*0x20*/ int[] indexMap;
                        /*0x28*/ object header;
                        /*0x30*/ object memberObject;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x40*/ string memberName;

                        /*0x70d27a8*/ ValueFixup(System.Array arrayObj, int[] indexMap);
                        /*0x70d27f4*/ ValueFixup(object memberObject, string memberName, System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo);
                        /*0x70d285c*/ void Fixup(System.Runtime.Serialization.Formatters.Binary.ParseRecord record, System.Runtime.Serialization.Formatters.Binary.ParseRecord parent);
                    }

                    class InternalFE
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle FEtypeFormat;
                        /*0x14*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle FEassemblyFormat;
                        /*0x18*/ System.Runtime.Serialization.Formatters.TypeFilterLevel FEsecurityLevel;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE FEserializerTypeEnum;

                        /*0x70d2b64*/ InternalFE();
                    }

                    class NameInfo
                    {
                        /*0x10*/ string NIFullName;
                        /*0x18*/ long NIobjectId;
                        /*0x20*/ long NIassemId;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE NIprimitiveTypeEnum;
                        /*0x30*/ System.Type NItype;
                        /*0x38*/ bool NIisSealed;
                        /*0x39*/ bool NIisArray;
                        /*0x3a*/ bool NIisArrayItem;
                        /*0x3b*/ bool NItransmitTypeOnObject;
                        /*0x3c*/ bool NItransmitTypeOnMember;
                        /*0x3d*/ bool NIisParentTypeOnObject;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE NIarrayEnum;
                        /*0x44*/ bool NIsealedStatusChecked;

                        /*0x70d2b6c*/ NameInfo();
                        /*0x70d2b74*/ void Init();
                        /*0x70d2bb8*/ bool get_IsSealed();
                        /*0x70d2c04*/ string get_NIname();
                        /*0x70d2c50*/ void set_NIname(string value);
                    }

                    class PrimitiveArray
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code;
                        /*0x18*/ bool[] booleanA;
                        /*0x20*/ char[] charA;
                        /*0x28*/ double[] doubleA;
                        /*0x30*/ short[] int16A;
                        /*0x38*/ int[] int32A;
                        /*0x40*/ long[] int64A;
                        /*0x48*/ sbyte[] sbyteA;
                        /*0x50*/ float[] singleA;
                        /*0x58*/ ushort[] uint16A;
                        /*0x60*/ uint[] uint32A;
                        /*0x68*/ ulong[] uint64A;

                        /*0x70d2c58*/ PrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x70d2c8c*/ void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x70d2fe4*/ void SetValue(string value, int index);
                    }

                    enum MessageEnum
                    {
                        NoArgs = 1,
                        ArgsInline = 2,
                        ArgsIsArray = 4,
                        ArgsInArray = 8,
                        NoContext = 16,
                        ContextInline = 32,
                        ContextInArray = 64,
                        MethodSignatureInArray = 128,
                        PropertyInArray = 256,
                        NoReturnValue = 512,
                        ReturnValueVoid = 1024,
                        ReturnValueInline = 2048,
                        ReturnValueInArray = 4096,
                        ExceptionInArray = 8192,
                        GenericMethod = 32768,
                    }
                }
            }
        }

        namespace InteropServices
        {
            enum CharSet
            {
                None = 1,
                Ansi = 2,
                Unicode = 3,
                Auto = 4,
            }

            class ExternalException : System.SystemException
            {
                /*0x70d33cc*/ ExternalException();
                /*0x70d3428*/ ExternalException(string message);
                /*0x70d344c*/ ExternalException(string message, int errorCode);
                /*0x70d3474*/ ExternalException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70d347c*/ string ToString();
            }

            struct HandleRef
            {
                /*0x10*/ object _wrapper;
                /*0x18*/ nint _handle;

                /*0x70d3660*/ HandleRef(object wrapper, nint handle);
                /*0x70d3688*/ nint get_Handle();
            }

            class MarshalDirectiveException : System.SystemException
            {
                /*0x70d3690*/ MarshalDirectiveException();
                /*0x70d36ec*/ MarshalDirectiveException(string message);
                /*0x70d3710*/ MarshalDirectiveException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class MemoryMarshal
            {
                static /*0x3910ae8*/ System.Span<byte> AsBytes<T>(System.Span<T> span);
                static /*0x3910ae8*/ System.ReadOnlySpan<byte> AsBytes<T>(System.ReadOnlySpan<T> span);
                static /*0x3910ae8*/ System.Memory<T> AsMemory<T>(System.ReadOnlyMemory<T> memory);
                static /*0x3910ae8*/ ref T GetReference<T>(System.Span<T> span);
                static /*0x3910ae8*/ ref T GetReference<T>(System.ReadOnlySpan<T> span);
                static /*0x3910ae8*/ ref T GetNonNullPinnableReference<T>(System.Span<T> span);
                static /*0x3910ae8*/ ref T GetNonNullPinnableReference<T>(System.ReadOnlySpan<T> span);
                static /*0x3910ae8*/ System.Span<TTo> Cast<TFrom, TTo>(System.Span<TFrom> span);
                static /*0x3910ae8*/ System.ReadOnlySpan<TTo> Cast<TFrom, TTo>(System.ReadOnlySpan<TFrom> span);
                static /*0x3910ae8*/ System.ReadOnlySpan<T> CreateReadOnlySpan<T>(ref T reference, int length);
                static /*0x3910ae8*/ bool TryGetArray<T>(System.ReadOnlyMemory<T> memory, ref System.ArraySegment<T> segment);
                static /*0x3910ae8*/ bool TryGetMemoryManager<T, TManager>(System.ReadOnlyMemory<T> memory, ref TManager manager, ref int start, ref int length);
                static /*0x70d3718*/ bool TryGetString(System.ReadOnlyMemory<char> memory, ref string text, ref int start, ref int length);
                static /*0x3910ae8*/ T Read<T>(System.ReadOnlySpan<byte> source);
                static /*0x3910ae8*/ void Write<T>(System.Span<byte> destination, ref T value);
            }

            class SequenceMarshal
            {
                static /*0x70d37cc*/ bool TryGetString(System.Buffers.ReadOnlySequence<char> sequence, ref string text, ref int start, ref int length);
            }

            enum GCHandleType
            {
                Weak = 0,
                WeakTrackResurrection = 1,
                Normal = 2,
                Pinned = 3,
            }

            class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                static /*0x0*/ nuint Uninitialized;
                /*0x20*/ nuint _numBytes;

                static /*0x70d3b14*/ SafeBuffer();
                static /*0x70d3934*/ System.InvalidOperationException NotInitialized();
                /*0x70d3860*/ void AcquirePointer(ref byte* pointer);
                /*0x70d3a64*/ void ReleasePointer();
            }

            class COMException : System.Runtime.InteropServices.ExternalException
            {
                /*0x70d3b80*/ COMException();
                /*0x70d3b84*/ COMException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70d3b8c*/ string ToString();
            }

            class ErrorWrapper
            {
                /*0x10*/ int m_ErrorCode;
            }

            interface ICustomMarshaler
            {
                /*0x3910ae8*/ object MarshalNativeToManaged(nint pNativeData);
                /*0x3910ae8*/ nint MarshalManagedToNative(object ManagedObj);
                void CleanUpNativeData(nint pNativeData);
                /*0x3816710*/ void CleanUpManagedData(object ManagedObj);
                /*0x3814574*/ int GetNativeDataSize();
            }

            class UnmanagedFunctionPointerAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.CallingConvention m_callingConvention;

                /*0x70d3d70*/ UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention callingConvention);
            }

            enum ComInterfaceType
            {
                InterfaceIsDual = 0,
                InterfaceIsIUnknown = 1,
                InterfaceIsIDispatch = 2,
                InterfaceIsIInspectable = 3,
            }

            class InterfaceTypeAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ComInterfaceType _val;

                /*0x70d3d98*/ InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType interfaceType);
            }

            class ComDefaultInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Type _val;

                /*0x70d3dc0*/ ComDefaultInterfaceAttribute(System.Type defaultInterface);
            }

            enum ClassInterfaceType
            {
                None = 0,
                AutoDispatch = 1,
                AutoDual = 2,
            }

            class ClassInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ClassInterfaceType _val;

                /*0x70d3df0*/ ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType classInterfaceType);
            }

            class ComVisibleAttribute : System.Attribute
            {
                /*0x10*/ bool _val;

                /*0x70d3e18*/ ComVisibleAttribute(bool visibility);
            }

            enum VarEnum
            {
                VT_EMPTY = 0,
                VT_NULL = 1,
                VT_I2 = 2,
                VT_I4 = 3,
                VT_R4 = 4,
                VT_R8 = 5,
                VT_CY = 6,
                VT_DATE = 7,
                VT_BSTR = 8,
                VT_DISPATCH = 9,
                VT_ERROR = 10,
                VT_BOOL = 11,
                VT_VARIANT = 12,
                VT_UNKNOWN = 13,
                VT_DECIMAL = 14,
                VT_I1 = 16,
                VT_UI1 = 17,
                VT_UI2 = 18,
                VT_UI4 = 19,
                VT_I8 = 20,
                VT_UI8 = 21,
                VT_INT = 22,
                VT_UINT = 23,
                VT_VOID = 24,
                VT_HRESULT = 25,
                VT_PTR = 26,
                VT_SAFEARRAY = 27,
                VT_CARRAY = 28,
                VT_USERDEFINED = 29,
                VT_LPSTR = 30,
                VT_LPWSTR = 31,
                VT_RECORD = 36,
                VT_FILETIME = 64,
                VT_BLOB = 65,
                VT_STREAM = 66,
                VT_STORAGE = 67,
                VT_STREAMED_OBJECT = 68,
                VT_STORED_OBJECT = 69,
                VT_BLOB_OBJECT = 70,
                VT_CF = 71,
                VT_CLSID = 72,
                VT_VECTOR = 4096,
                VT_ARRAY = 8192,
                VT_BYREF = 16384,
            }

            enum UnmanagedType
            {
                Bool = 2,
                I1 = 3,
                U1 = 4,
                I2 = 5,
                U2 = 6,
                I4 = 7,
                U4 = 8,
                I8 = 9,
                U8 = 10,
                R4 = 11,
                R8 = 12,
                Currency = 15,
                BStr = 19,
                LPStr = 20,
                LPWStr = 21,
                LPTStr = 22,
                ByValTStr = 23,
                IUnknown = 25,
                IDispatch = 26,
                Struct = 27,
                Interface = 28,
                SafeArray = 29,
                ByValArray = 30,
                SysInt = 31,
                SysUInt = 32,
                VBByRefStr = 34,
                AnsiBStr = 35,
                TBStr = 36,
                VariantBool = 37,
                FunctionPtr = 38,
                AsAny = 40,
                LPArray = 42,
                LPStruct = 43,
                CustomMarshaler = 44,
                Error = 45,
                IInspectable = 46,
                HString = 47,
                LPUTF8Str = 48,
            }

            class ComImportAttribute : System.Attribute
            {
                /*0x70d3e40*/ ComImportAttribute();
            }

            class GuidAttribute : System.Attribute
            {
                /*0x10*/ string _val;

                /*0x70d3e48*/ GuidAttribute(string guid);
            }

            class PreserveSigAttribute : System.Attribute
            {
                /*0x70d3e78*/ PreserveSigAttribute();
            }

            class InAttribute : System.Attribute
            {
                /*0x70d3e80*/ InAttribute();
            }

            class OutAttribute : System.Attribute
            {
                /*0x70d3e88*/ OutAttribute();
            }

            class OptionalAttribute : System.Attribute
            {
                /*0x70d3e90*/ OptionalAttribute();
            }

            enum DllImportSearchPath
            {
                UseDllDirectoryForDependencies = 256,
                ApplicationDirectory = 512,
                UserDirectories = 1024,
                System32 = 2048,
                SafeDirectories = 4096,
                AssemblyDirectory = 2,
                LegacyBehavior = 0,
            }

            class DefaultDllImportSearchPathsAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.DllImportSearchPath _paths;

                /*0x70d3e98*/ DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath paths);
            }

            class DllImportAttribute : System.Attribute
            {
                /*0x10*/ string _val;
                /*0x18*/ string EntryPoint;
                /*0x20*/ System.Runtime.InteropServices.CharSet CharSet;
                /*0x24*/ bool SetLastError;
                /*0x25*/ bool ExactSpelling;
                /*0x26*/ bool PreserveSig;
                /*0x28*/ System.Runtime.InteropServices.CallingConvention CallingConvention;
                /*0x2c*/ bool BestFitMapping;
                /*0x2d*/ bool ThrowOnUnmappableChar;

                static /*0x70d3ec0*/ System.Attribute GetCustomAttribute(System.Reflection.RuntimeMethodInfo method);
                static /*0x70d4118*/ bool IsDefined(System.Reflection.RuntimeMethodInfo method);
                /*0x70d4070*/ DllImportAttribute(string dllName, string entryPoint, System.Runtime.InteropServices.CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, System.Runtime.InteropServices.CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar);
                /*0x70d4140*/ DllImportAttribute(string dllName);
                /*0x70d4170*/ string get_Value();
            }

            class FieldOffsetAttribute : System.Attribute
            {
                /*0x10*/ int _val;

                /*0x70d4178*/ FieldOffsetAttribute(int offset);
            }

            class ComCompatibleVersionAttribute : System.Attribute
            {
                /*0x10*/ int _major;
                /*0x14*/ int _minor;
                /*0x18*/ int _build;
                /*0x1c*/ int _revision;

                /*0x70d41a0*/ ComCompatibleVersionAttribute(int major, int minor, int build, int revision);
            }

            enum CallingConvention
            {
                Winapi = 1,
                Cdecl = 2,
                StdCall = 3,
                ThisCall = 4,
                FastCall = 5,
            }

            class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.IDisposable
            {
                static int RefCount_Mask = 2147483644;
                static int RefCount_One = 4;
                /*0x10*/ nint handle;
                /*0x18*/ int _state;
                /*0x1c*/ bool _ownsHandle;
                /*0x1d*/ bool _fullyInitialized;

                /*0x70d41e0*/ SafeHandle(nint invalidHandleValue, bool ownsHandle);
                /*0x70d4280*/ void Finalize();
                /*0x70d4320*/ void SetHandle(nint handle);
                /*0x70d4328*/ nint DangerousGetHandle();
                /*0x70d4330*/ bool get_IsClosed();
                /*0x3813ffc*/ bool get_IsInvalid();
                /*0x70d433c*/ void Close();
                /*0x70d434c*/ void Dispose();
                /*0x70d435c*/ void Dispose(bool disposing);
                /*0x3813ffc*/ bool ReleaseHandle();
                /*0x70d442c*/ void SetHandleAsInvalid();
                /*0x70d39a0*/ void DangerousAddRef(ref bool success);
                /*0x70d3b0c*/ void DangerousRelease();
                /*0x70d4378*/ void InternalDispose();
                /*0x70d4418*/ void InternalFinalize();
                /*0x70d44b0*/ void DangerousReleaseInternal(bool dispose);
            }

            struct GCHandle
            {
                /*0x10*/ nint handle;

                static /*0x70d467c*/ object GetRef(nint handle);
                static /*0x70d4694*/ void SetRef(nint handle, object value);
                static /*0x70d46b4*/ bool CanDereferenceHandle(nint handle);
                static /*0x70d4858*/ System.Runtime.InteropServices.GCHandle Alloc(object value);
                static /*0x70d4864*/ System.Runtime.InteropServices.GCHandle Alloc(object value, System.Runtime.InteropServices.GCHandleType type);
                static /*0x70d48f4*/ nint op_Explicit(System.Runtime.InteropServices.GCHandle value);
                static /*0x70d48f8*/ System.Runtime.InteropServices.GCHandle op_Explicit(nint value);
                static /*0x70d4994*/ bool CheckCurrentDomain(nint handle);
                static /*0x70d4734*/ object GetTarget(nint handle);
                static /*0x70d4668*/ nint GetTargetHandle(object obj, nint handle, System.Runtime.InteropServices.GCHandleType type);
                static /*0x70d48f0*/ void FreeHandle(nint handle);
                static /*0x70d4854*/ nint GetAddrOfPinnedObject(nint handle);
                static /*0x70d4998*/ bool op_Equality(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);
                static /*0x70d4a24*/ System.Runtime.InteropServices.GCHandle FromIntPtr(nint value);
                static /*0x70d4a28*/ nint ToIntPtr(System.Runtime.InteropServices.GCHandle value);
                /*0x70d4610*/ GCHandle(nint h);
                /*0x70d4618*/ GCHandle(object obj);
                /*0x70d463c*/ GCHandle(object value, System.Runtime.InteropServices.GCHandleType type);
                /*0x70d466c*/ bool get_IsAllocated();
                /*0x70d46c0*/ object get_Target();
                /*0x70d4738*/ void set_Target(object value);
                /*0x70d4790*/ nint AddrOfPinnedObject();
                /*0x70d4878*/ void Free();
                /*0x70d49a4*/ bool Equals(object o);
                /*0x70d4a1c*/ int GetHashCode();
            }

            class Marshal
            {
                static /*0x0*/ int SystemMaxDBCSCharSize;
                static /*0x4*/ int SystemDefaultCharSize;
                static /*0x8*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> MarshalerInstanceCache;
                static /*0x10*/ object MarshalerInstanceCacheLock;

                static /*0x70d6360*/ Marshal();
                static /*0x70d4a2c*/ nint AllocHGlobal(nint cb);
                static /*0x70d4a30*/ nint AllocHGlobal(int cb);
                static /*0x70d4a98*/ void copy_to_unmanaged_fixed(System.Array source, int startIndex, nint destination, int length, void* fixed_source_element);
                static /*0x70d4a9c*/ bool skip_fixed(System.Array array, int startIndex);
                static /*0x70d4ad0*/ void copy_to_unmanaged(byte[] source, int startIndex, nint destination, int length);
                static /*0x70d4bb8*/ void Copy(byte[] source, int startIndex, nint destination, int length);
                static /*0x70d4cac*/ void copy_from_unmanaged(nint source, int startIndex, System.Array destination, int length);
                static /*0x70d4d2c*/ void copy_from_unmanaged_fixed(nint source, int startIndex, System.Array destination, int length, void* fixed_destination_element);
                static /*0x70d4d30*/ void Copy(nint source, byte[] destination, int startIndex, int length);
                static /*0x70d4e24*/ void Copy(nint source, char[] destination, int startIndex, int length);
                static /*0x70d4f18*/ void FreeBSTR(nint ptr);
                static /*0x70d4f1c*/ void FreeHGlobal(nint hglobal);
                static /*0x70d4f20*/ void ClearAnsi(nint ptr);
                static /*0x70d4ffc*/ void ClearUnicode(nint ptr);
                static /*0x70d5118*/ void ZeroFreeGlobalAllocAnsi(nint s);
                static /*0x70d5174*/ void ZeroFreeGlobalAllocUnicode(nint s);
                static /*0x70d51d0*/ int GetHRForException(System.Exception e);
                static /*0x70d51dc*/ bool IsComObject(object o);
                static /*0x70d51e4*/ int GetLastWin32Error();
                static /*0x70d51e8*/ nint OffsetOf(System.Type t, string fieldName);
                static /*0x70d51ec*/ string PtrToStringAnsi(nint ptr);
                static /*0x70d51f0*/ string PtrToStringAuto(nint ptr);
                static /*0x70d5284*/ string PtrToStringUni(nint ptr);
                static /*0x70d5288*/ string PtrToStringUni(nint ptr, int len);
                static /*0x70d528c*/ object PtrToStructure(nint ptr, System.Type structureType);
                static /*0x3910ae8*/ T PtrToStructure<T>(nint ptr);
                static /*0x70d4fe0*/ byte ReadByte(nint ptr, int ofs);
                static /*0x70d50d4*/ short ReadInt16(nint ptr, int ofs);
                static /*0x70d5290*/ int SizeOf(System.Type t);
                static /*0x382ad0c*/ int SizeOf<T>();
                static /*0x3910ae8*/ int SizeOf<T>(T structure);
                static /*0x70d5294*/ nint StringToHGlobalAnsi(char* s, int length);
                static /*0x70d5298*/ nint StringToHGlobalAnsi(string s);
                static /*0x70d530c*/ nint SecureStringGlobalAllocator(int len);
                static /*0x70d5360*/ nint SecureStringToUnicode(System.Security.SecureString s, System.Runtime.InteropServices.Marshal.SecureStringAllocator allocator);
                static /*0x70d55e0*/ nint SecureStringToGlobalAllocUnicode(System.Security.SecureString s);
                static /*0x70d5764*/ void StructureToPtr(object structure, nint ptr, bool fDeleteOld);
                static /*0x3910ae8*/ void StructureToPtr<T>(T structure, nint ptr, bool fDeleteOld);
                static /*0x70d576c*/ nint UnsafeAddrOfPinnedArrayElement(System.Array arr, int index);
                static /*0x3835c50*/ nint UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
                static /*0x70d4fbc*/ void WriteByte(nint ptr, int ofs, byte val);
                static /*0x70d508c*/ void WriteInt16(nint ptr, int ofs, short val);
                static /*0x70d5770*/ System.Delegate GetDelegateForFunctionPointerInternal(nint ptr, System.Type t);
                static /*0x70d5774*/ System.Delegate GetDelegateForFunctionPointer(nint ptr, System.Type t);
                static /*0x3910ae8*/ TDelegate GetDelegateForFunctionPointer<TDelegate>(nint ptr);
                static /*0x70d5990*/ nint GetFunctionPointerForDelegateInternal(System.Delegate d);
                static /*0x70d5994*/ nint GetFunctionPointerForDelegate(System.Delegate d);
                static /*0x3910ae8*/ nint GetFunctionPointerForDelegate<TDelegate>(TDelegate d);
                static /*0x70d5a34*/ System.Runtime.InteropServices.ICustomMarshaler GetCustomMarshalerInstance(System.Type type, string cookie);

                class SecureStringAllocator : System.MulticastDelegate
                {
                    /*0x70d56c4*/ SecureStringAllocator(object object, nint method);
                    /*0x70d6404*/ nint Invoke(int len);
                }

                class MarshalerInstanceKeyComparer : System.Collections.Generic.IEqualityComparer<System.ValueTuple<System.Type, string>>
                {
                    /*0x70d64e0*/ MarshalerInstanceKeyComparer();
                    /*0x70d6418*/ bool Equals(System.ValueTuple<System.Type, string> lhs, System.ValueTuple<System.Type, string> rhs);
                    /*0x70d648c*/ int GetHashCode(System.ValueTuple<System.Type, string> key);
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.InteropServices.Marshal.<> <>9;
                    static /*0x8*/ System.Func<System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler>> <>9__201_0;

                    static /*0x70d64e8*/ <>c();
                    /*0x70d6550*/ <>c();
                    /*0x70d6558*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> <GetCustomMarshalerInstance>b__201_0();
                }
            }

            class MarshalAsAttribute : System.Attribute
            {
                /*0x10*/ string MarshalCookie;
                /*0x18*/ string MarshalType;
                /*0x20*/ System.Type MarshalTypeRef;
                /*0x28*/ System.Type SafeArrayUserDefinedSubType;
                /*0x30*/ System.Runtime.InteropServices.UnmanagedType utype;
                /*0x34*/ System.Runtime.InteropServices.UnmanagedType ArraySubType;
                /*0x38*/ System.Runtime.InteropServices.VarEnum SafeArraySubType;
                /*0x3c*/ int SizeConst;
                /*0x40*/ int IidParameterIndex;
                /*0x44*/ short SizeParamIndex;

                /*0x70d65f4*/ MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType unmanagedType);
                /*0x70d661c*/ System.Runtime.InteropServices.UnmanagedType get_Value();
                /*0x70d6624*/ System.Runtime.InteropServices.MarshalAsAttribute Copy();
            }

            interface _Activator
            {
            }

            interface _Assembly
            {
            }

            interface _AssemblyName
            {
            }

            interface _Module
            {
            }

            interface _ParameterInfo
            {
            }
        }

        namespace ExceptionServices
        {
            class FirstChanceExceptionEventArgs : System.EventArgs
            {
            }

            class HandleProcessCorruptedStateExceptionsAttribute : System.Attribute
            {
                /*0x70d6688*/ HandleProcessCorruptedStateExceptionsAttribute();
            }

            class ExceptionDispatchInfo
            {
                /*0x10*/ System.Exception m_Exception;
                /*0x18*/ object m_stackTrace;

                static /*0x70d625c*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(System.Exception source);
                static /*0x70d67e4*/ void Throw(System.Exception source);
                /*0x70d6690*/ ExceptionDispatchInfo(System.Exception exception);
                /*0x70d67d4*/ object get_BinaryStackTraceArray();
                /*0x70d67dc*/ System.Exception get_SourceException();
                /*0x70d631c*/ void Throw();
            }
        }

        namespace ConstrainedExecution
        {
            enum Cer
            {
                None = 0,
                MayFail = 1,
                Success = 2,
            }

            enum Consistency
            {
                MayCorruptProcess = 0,
                MayCorruptAppDomain = 1,
                MayCorruptInstance = 2,
                WillNotCorruptState = 3,
            }

            class ReliabilityContractAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.ConstrainedExecution.Consistency <ConsistencyGuarantee>k__BackingField;
                /*0x14*/ System.Runtime.ConstrainedExecution.Cer <Cer>k__BackingField;

                /*0x70d67fc*/ ReliabilityContractAttribute(System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);
            }

            class PrePrepareMethodAttribute : System.Attribute
            {
                /*0x70d6828*/ PrePrepareMethodAttribute();
            }

            class CriticalFinalizerObject
            {
                /*0x70d4278*/ CriticalFinalizerObject();
                /*0x70d6830*/ void Finalize();
            }
        }

        namespace CompilerServices
        {
            struct AsyncIteratorMethodBuilder
            {
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder _methodBuilder;

                static /*0x70d6838*/ System.Runtime.CompilerServices.AsyncIteratorMethodBuilder Create();
                /*0x3816710*/ void MoveNext<TStateMachine>(ref TStateMachine stateMachine);
                /*0x3816810*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x70d6844*/ void Complete();
            }

            class AsyncIteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x70d693c*/ AsyncIteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class AsyncMethodBuilderAttribute : System.Attribute
            {
                /*0x10*/ System.Type <BuilderType>k__BackingField;

                /*0x70d699c*/ AsyncMethodBuilderAttribute(System.Type builderType);
            }

            class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x70d69cc*/ AsyncStateMachineAttribute(System.Type stateMachineType);
            }

            struct AsyncValueTaskMethodBuilder
            {
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder _methodBuilder;
                /*0x28*/ bool _haveResult;
                /*0x29*/ bool _useBuilder;

                static /*0x70d69fc*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder Create();
                /*0x3816710*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x70d6a08*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x70d6ae8*/ void SetResult();
                /*0x70d6b58*/ void SetException(System.Exception exception);
                /*0x70d6c38*/ System.Threading.Tasks.ValueTask get_Task();
                /*0x3816810*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
            }

            struct AsyncValueTaskMethodBuilder<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> _methodBuilder;
                /*0x0*/ TResult _result;
                /*0x0*/ bool _haveResult;
                /*0x0*/ bool _useBuilder;

                static /*0x3910ae8*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<TResult> Create();
                /*0x3816710*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x3816710*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x3910ae8*/ void SetResult(TResult result);
                /*0x3816710*/ void SetException(System.Exception exception);
                /*0x3910ae8*/ System.Threading.Tasks.ValueTask<TResult> get_Task();
                /*0x3816810*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
            }

            class CallerFilePathAttribute : System.Attribute
            {
                /*0x70d6d54*/ CallerFilePathAttribute();
            }

            class CallerLineNumberAttribute : System.Attribute
            {
                /*0x70d6d5c*/ CallerLineNumberAttribute();
            }

            class CallerMemberNameAttribute : System.Attribute
            {
                /*0x70d6d64*/ CallerMemberNameAttribute();
            }

            class CompilerGeneratedAttribute : System.Attribute
            {
                /*0x70d6d6c*/ CompilerGeneratedAttribute();
            }

            struct ConfiguredCancelableAsyncEnumerable<T>
            {
                /*0x0*/ System.Collections.Generic.IAsyncEnumerable<T> _enumerable;
                /*0x0*/ System.Threading.CancellationToken _cancellationToken;
                /*0x0*/ bool _continueOnCapturedContext;

                /*0x3910ae8*/ ConfiguredCancelableAsyncEnumerable(System.Collections.Generic.IAsyncEnumerable<T> enumerable, bool continueOnCapturedContext, System.Threading.CancellationToken cancellationToken);
                /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable.Enumerator<T> GetAsyncEnumerator();

                struct Enumerator<T>
                {
                    /*0x0*/ System.Collections.Generic.IAsyncEnumerator<T> _enumerator;
                    /*0x0*/ bool _continueOnCapturedContext;

                    Enumerator(System.Collections.Generic.IAsyncEnumerator<T> enumerator, bool continueOnCapturedContext);
                    /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable<bool> MoveNextAsync();
                    /*0x3910ae8*/ T get_Current();
                    /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable DisposeAsync();
                }
            }

            struct ConfiguredValueTaskAwaitable
            {
                /*0x10*/ System.Threading.Tasks.ValueTask _value;

                /*0x70d6d74*/ ConfiguredValueTaskAwaitable(System.Threading.Tasks.ValueTask value);
                /*0x70d6d80*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter GetAwaiter();

                struct ConfiguredValueTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.ValueTask _value;

                    /*0x70d6da8*/ ConfiguredValueTaskAwaiter(System.Threading.Tasks.ValueTask value);
                    /*0x70d6db4*/ bool get_IsCompleted();
                    /*0x70d6e0c*/ void GetResult();
                    /*0x70d6e64*/ void OnCompleted(System.Action continuation);
                    /*0x70d7028*/ void UnsafeOnCompleted(System.Action continuation);
                }
            }

            struct ConfiguredValueTaskAwaitable<TResult>
            {
                /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                /*0x3910ae8*/ ConfiguredValueTaskAwaitable(System.Threading.Tasks.ValueTask<TResult> value);
                /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredValueTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                    /*0x3910ae8*/ ConfiguredValueTaskAwaiter(System.Threading.Tasks.ValueTask<TResult> value);
                    /*0x3813ffc*/ bool get_IsCompleted();
                    /*0x3910ae8*/ TResult GetResult();
                    /*0x3816710*/ void OnCompleted(System.Action continuation);
                    /*0x3816710*/ void UnsafeOnCompleted(System.Action continuation);
                }
            }

            class CustomConstantAttribute : System.Attribute
            {
                /*0x70d71e8*/ CustomConstantAttribute();
                /*0x38148bc*/ object get_Value();
            }

            class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute
            {
                /*0x10*/ System.DateTime _date;

                /*0x70d71f0*/ object get_Value();
            }

            class DecimalConstantAttribute : System.Attribute
            {
                /*0x10*/ decimal _dec;

                /*0x70d724c*/ DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low);
                /*0x70d72e8*/ decimal get_Value();
            }

            class ExtensionAttribute : System.Attribute
            {
                /*0x70d72f4*/ ExtensionAttribute();
            }

            class FixedBufferAttribute : System.Attribute
            {
                /*0x10*/ System.Type <ElementType>k__BackingField;
                /*0x18*/ int <Length>k__BackingField;

                /*0x70d72fc*/ FixedBufferAttribute(System.Type elementType, int length);
                /*0x70d7338*/ System.Type get_ElementType();
                /*0x70d7340*/ int get_Length();
            }

            class FormattableStringFactory
            {
                static /*0x70d7348*/ System.FormattableString Create(string format, object[] arguments);

                class ConcreteFormattableString : System.FormattableString
                {
                    /*0x10*/ string _format;
                    /*0x18*/ object[] _arguments;

                    /*0x70d7418*/ ConcreteFormattableString(string format, object[] arguments);
                    /*0x70d745c*/ string get_Format();
                    /*0x70d7464*/ object[] GetArguments();
                    /*0x70d746c*/ int get_ArgumentCount();
                    /*0x70d7488*/ object GetArgument(int index);
                    /*0x70d74b8*/ string ToString(System.IFormatProvider formatProvider);
                }
            }

            interface IAsyncStateMachine
            {
                /*0x38159dc*/ void MoveNext();
                /*0x3816710*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            interface INotifyCompletion
            {
                /*0x3816710*/ void OnCompleted(System.Action continuation);
            }

            interface ICriticalNotifyCompletion : System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x3816710*/ void UnsafeOnCompleted(System.Action continuation);
            }

            interface ITuple
            {
                /*0x3814574*/ int get_Length();
            }

            class IntrinsicAttribute : System.Attribute
            {
                /*0x70d74cc*/ IntrinsicAttribute();
            }

            class IsByRefLikeAttribute : System.Attribute
            {
                /*0x70d74d4*/ IsByRefLikeAttribute();
            }

            class IsReadOnlyAttribute : System.Attribute
            {
                /*0x70d74dc*/ IsReadOnlyAttribute();
            }

            class IsVolatile
            {
            }

            class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x70d74e4*/ IteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class RuntimeCompatibilityAttribute : System.Attribute
            {
                /*0x10*/ bool <WrapNonExceptionThrows>k__BackingField;

                /*0x70d7514*/ RuntimeCompatibilityAttribute();
                /*0x70d751c*/ void set_WrapNonExceptionThrows(bool value);
            }

            class RuntimeFeature
            {
                static /*0x70d7528*/ bool get_IsDynamicCodeSupported();
            }

            class RuntimeWrappedException : System.Exception
            {
                /*0x90*/ object _wrappedException;

                /*0x70d7530*/ RuntimeWrappedException(object thrownObject);
                /*0x70d75c8*/ RuntimeWrappedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70d7774*/ RuntimeWrappedException();
                /*0x70d76b4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70d776c*/ object get_WrappedException();
            }

            class StateMachineAttribute : System.Attribute
            {
                /*0x10*/ System.Type <StateMachineType>k__BackingField;

                /*0x70d696c*/ StateMachineAttribute(System.Type stateMachineType);
                /*0x70d77ac*/ System.Type get_StateMachineType();
            }

            class StringFreezingAttribute : System.Attribute
            {
                /*0x70d77b4*/ StringFreezingAttribute();
            }

            class TupleElementNamesAttribute : System.Attribute
            {
                /*0x10*/ string[] _transformNames;

                /*0x70d77bc*/ TupleElementNamesAttribute(string[] transformNames);
            }

            class TypeForwardedFromAttribute : System.Attribute
            {
                /*0x10*/ string <AssemblyFullName>k__BackingField;

                /*0x70d7838*/ TypeForwardedFromAttribute(string assemblyFullName);
                /*0x70d78c0*/ string get_AssemblyFullName();
            }

            class UnsafeValueTypeAttribute : System.Attribute
            {
                /*0x70d78c8*/ UnsafeValueTypeAttribute();
            }

            struct ValueTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                static /*0x0*/ System.Action<object> s_invokeActionDelegate;
                /*0x10*/ System.Threading.Tasks.ValueTask _value;

                static /*0x70d7cc4*/ ValueTaskAwaiter();
                /*0x70d78d0*/ ValueTaskAwaiter(System.Threading.Tasks.ValueTask value);
                /*0x70d78dc*/ bool get_IsCompleted();
                /*0x70d7934*/ void GetResult();
                /*0x70d798c*/ void OnCompleted(System.Action continuation);
                /*0x70d7b28*/ void UnsafeOnCompleted(System.Action continuation);

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.ValueTaskAwaiter.<> <>9;

                    static /*0x70d7d94*/ <>c();
                    /*0x70d7dfc*/ <>c();
                    /*0x70d7e04*/ void <.cctor>b__9_0(object state);
                }
            }

            struct ValueTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                /*0x3910ae8*/ ValueTaskAwaiter(System.Threading.Tasks.ValueTask<TResult> value);
                /*0x3813ffc*/ bool get_IsCompleted();
                /*0x3910ae8*/ TResult GetResult();
                /*0x3816710*/ void OnCompleted(System.Action continuation);
                /*0x3816710*/ void UnsafeOnCompleted(System.Action continuation);
            }

            struct TaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;

                static /*0x70d7f54*/ void ValidateEnd(System.Threading.Tasks.Task task);
                static /*0x70d7fa0*/ void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task);
                static /*0x70d8000*/ void ThrowForNonSuccess(System.Threading.Tasks.Task task);
                static /*0x70d7e9c*/ void OnCompletedInternal(System.Threading.Tasks.Task task, System.Action continuation, bool continueOnCapturedContext, bool flowExecutionContext);
                static /*0x70d814c*/ System.Action OutputWaitEtwEvents(System.Threading.Tasks.Task task, System.Action continuation);
                /*0x70d7e78*/ TaskAwaiter(System.Threading.Tasks.Task task);
                /*0x70d7e80*/ bool get_IsCompleted();
                /*0x70d7b18*/ void OnCompleted(System.Action continuation);
                /*0x70d7cb4*/ void UnsafeOnCompleted(System.Action continuation);
                /*0x70d7f4c*/ void GetResult();

                class <>c__DisplayClass11_0
                {
                    /*0x10*/ System.Threading.Tasks.Task task;
                    /*0x18*/ System.Action continuation;

                    /*0x70d8344*/ <>c__DisplayClass11_0();
                    /*0x70d834c*/ void <OutputWaitEtwEvents>b__0();
                }
            }

            struct TaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                /*0x3816710*/ TaskAwaiter(System.Threading.Tasks.Task<TResult> task);
                /*0x3813ffc*/ bool get_IsCompleted();
                /*0x3816710*/ void OnCompleted(System.Action continuation);
                /*0x3816710*/ void UnsafeOnCompleted(System.Action continuation);
                /*0x3910ae8*/ TResult GetResult();
            }

            struct ConfiguredTaskAwaitable
            {
                /*0x10*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter m_configuredTaskAwaiter;

                /*0x70d84c0*/ ConfiguredTaskAwaitable(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                /*0x70d8530*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter();

                struct ConfiguredTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.Task m_task;
                    /*0x18*/ bool m_continueOnCapturedContext;

                    /*0x70d8508*/ ConfiguredTaskAwaiter(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                    /*0x70d853c*/ bool get_IsCompleted();
                    /*0x70d7014*/ void OnCompleted(System.Action continuation);
                    /*0x70d71d4*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x70d8558*/ void GetResult();
                }
            }

            struct ConfiguredTaskAwaitable<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter;

                ConfiguredTaskAwaitable(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                /*0x3910ae8*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;
                    /*0x0*/ bool m_continueOnCapturedContext;

                    ConfiguredTaskAwaiter(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                    /*0x3813ffc*/ bool get_IsCompleted();
                    /*0x3816710*/ void OnCompleted(System.Action continuation);
                    /*0x3816710*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x3910ae8*/ TResult GetResult();
                }
            }

            class ReflectionBlockedAttribute : System.Attribute
            {
                /*0x70d8560*/ ReflectionBlockedAttribute();
            }

            struct AsyncVoidMethodBuilder
            {
                /*0x10*/ System.Threading.SynchronizationContext m_synchronizationContext;
                /*0x18*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x28*/ System.Threading.Tasks.Task m_task;

                static /*0x70d8568*/ System.Runtime.CompilerServices.AsyncVoidMethodBuilder Create();
                /*0x3816710*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x70d85d0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x3816810*/ void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x3816810*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x70d8694*/ void SetResult();
                /*0x70d8804*/ void SetException(System.Exception exception);
                /*0x70d8760*/ void NotifySynchronizationContextOfCompletion();
                /*0x70d86f0*/ System.Threading.Tasks.Task get_Task();
            }

            struct AsyncTaskMethodBuilder
            {
                static /*0x0*/ System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult> s_cachedCompleted;
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult> m_builder;

                static /*0x70d8c44*/ AsyncTaskMethodBuilder();
                static /*0x70d8c38*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder Create();
                /*0x3816710*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x70d6a6c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x3816810*/ void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x3816810*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x70d6ce8*/ System.Threading.Tasks.Task get_Task();
                /*0x70d6898*/ void SetResult();
                /*0x70d6bbc*/ void SetException(System.Exception exception);
            }

            struct AsyncTaskMethodBuilder<TResult>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_defaultResultTask;
                /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                static /*0x383e7a0*/ AsyncTaskMethodBuilder();
                static /*0x3910ae8*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> Create();
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> GetTaskForResult(TResult result);
                /*0x3816710*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x3816710*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x3816810*/ void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x3816810*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x38148bc*/ System.Threading.Tasks.Task<TResult> get_Task();
                /*0x3910ae8*/ void SetResult(TResult result);
                /*0x3816710*/ void SetResult(System.Threading.Tasks.Task<TResult> completedTask);
                /*0x3816710*/ void SetException(System.Exception exception);
            }

            class AsyncTaskCache
            {
                static /*0x0*/ System.Threading.Tasks.Task<bool> TrueTask;
                static /*0x8*/ System.Threading.Tasks.Task<bool> FalseTask;
                static /*0x10*/ System.Threading.Tasks.Task<int> Int32Tasks;

                static /*0x70d8de4*/ AsyncTaskCache();
                static /*0x70d8cc4*/ System.Threading.Tasks.Task<int> CreateInt32Tasks();
                static /*0x3910ae8*/ System.Threading.Tasks.Task<TResult> CreateCacheableTask<TResult>(TResult result);
            }

            struct AsyncMethodBuilderCore
            {
                /*0x10*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;
                /*0x18*/ System.Action m_defaultContextAction;

                static /*0x3840c74*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                static /*0x70d8934*/ void ThrowAsync(System.Exception exception, System.Threading.SynchronizationContext targetContext);
                static /*0x70d91a4*/ System.Action CreateContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                static /*0x70d947c*/ System.Threading.Tasks.Task TryGetContinuationTask(System.Action action);
                /*0x70d85d8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x70d8e98*/ System.Action GetCompletionAction(System.Threading.Tasks.Task taskForTracing, ref System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize);
                /*0x70d90b0*/ System.Action OutputAsyncCausalityEvents(System.Threading.Tasks.Task innerTask, System.Action continuation);
                /*0x70d9260*/ void PostBoxInitialization(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine, System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runner, System.Threading.Tasks.Task builtTask);

                class MoveNextRunner
                {
                    static /*0x0*/ System.Threading.ContextCallback s_invokeMoveNext;
                    /*0x10*/ System.Threading.ExecutionContext m_context;
                    /*0x18*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;

                    static /*0x70d9724*/ void InvokeMoveNext(object stateMachine);
                    /*0x70d906c*/ MoveNextRunner(System.Threading.ExecutionContext context, System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                    /*0x70d9510*/ void Run();
                }

                class ContinuationWrapper
                {
                    /*0x10*/ System.Action m_continuation;
                    /*0x18*/ System.Action m_invokeAction;
                    /*0x20*/ System.Threading.Tasks.Task m_innerTask;

                    /*0x70d940c*/ ContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                    /*0x70d9804*/ void Invoke();
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ System.Threading.Tasks.Task innerTask;
                    /*0x18*/ System.Action continuation;

                    /*0x70d919c*/ <>c__DisplayClass5_0();
                    /*0x70d9828*/ void <OutputAsyncCausalityEvents>b__0();
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore.<> <>9;
                    static /*0x8*/ System.Threading.SendOrPostCallback <>9__7_0;
                    static /*0x10*/ System.Threading.WaitCallback <>9__7_1;

                    static /*0x70d9884*/ <>c();
                    /*0x70d98ec*/ <>c();
                    /*0x70d98f4*/ void <ThrowAsync>b__7_0(object state);
                    /*0x70d9948*/ void <ThrowAsync>b__7_1(object state);
                }
            }

            struct YieldAwaitable
            {
                /*0x70d999c*/ System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter GetAwaiter();

                struct YieldAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    static /*0x0*/ System.Threading.WaitCallback s_waitCallbackRunAction;
                    static /*0x8*/ System.Threading.SendOrPostCallback s_sendOrPostCallbackRunAction;

                    static /*0x70d9d50*/ YieldAwaiter();
                    static /*0x70d9a04*/ void QueueContinuation(System.Action continuation, bool flowContext);
                    static /*0x70d9ce0*/ void RunAction(object state);
                    /*0x70d99a4*/ bool get_IsCompleted();
                    /*0x70d99ac*/ void OnCompleted(System.Action continuation);
                    /*0x70d9c88*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x70d9d4c*/ void GetResult();
                }
            }

            enum LoadHint
            {
                Default = 0,
                Always = 1,
                Sometimes = 2,
            }

            class DefaultDependencyAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0x70d9e34*/ DefaultDependencyAttribute(System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            class DependencyAttribute : System.Attribute
            {
                /*0x10*/ string dependentAssembly;
                /*0x18*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0x70d9e5c*/ DependencyAttribute(string dependentAssemblyArgument, System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            enum CompilationRelaxations
            {
                NoStringInterning = 8,
            }

            class CompilationRelaxationsAttribute : System.Attribute
            {
                /*0x10*/ int m_relaxations;

                /*0x70d9e98*/ CompilationRelaxationsAttribute(int relaxations);
                /*0x70d9ec0*/ CompilationRelaxationsAttribute(System.Runtime.CompilerServices.CompilationRelaxations relaxations);
                /*0x70d9ee8*/ int get_CompilationRelaxations();
            }

            class InternalsVisibleToAttribute : System.Attribute
            {
                /*0x10*/ string _assemblyName;
                /*0x18*/ bool _allInternalsVisible;

                /*0x70d9ef0*/ InternalsVisibleToAttribute(string assemblyName);
                /*0x70d9f28*/ void set_AllInternalsVisible(bool value);
            }

            class FriendAccessAllowedAttribute : System.Attribute
            {
                /*0x70d9f34*/ FriendAccessAllowedAttribute();
            }

            class TypeDependencyAttribute : System.Attribute
            {
                /*0x10*/ string typeName;

                /*0x70d9f3c*/ TypeDependencyAttribute(string typeName);
            }

            class JitHelpers
            {
                static /*0x3910ae8*/ T UnsafeCast<T>(object o);
                static /*0x3910ae8*/ int UnsafeEnumCast<T>(T val);
                static /*0x3910ae8*/ long UnsafeEnumCastLong<T>(T val);
            }

            struct Ephemeron
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
            }

            class ConditionalWeakTable<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x0*/ System.Runtime.CompilerServices.Ephemeron[] data;
                /*0x0*/ object _lock;
                /*0x0*/ int size;

                /*0x38159dc*/ ConditionalWeakTable();
                /*0x38159dc*/ void Finalize();
                /*0x38159dc*/ void RehashWithoutResize();
                /*0x38159dc*/ void RecomputeSize();
                /*0x38159dc*/ void Rehash();
                /*0x3910ae8*/ void Add(TKey key, TValue value);
                /*0x3910ae8*/ bool Remove(TKey key);
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3910ae8*/ TValue GetValue(TKey key, System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<TKey, TValue> createValueCallback);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class CreateValueCallback<TKey, TValue> : System.MulticastDelegate
                {
                    CreateValueCallback(object object, nint method);
                    /*0x3910ae8*/ TValue Invoke(TKey key);
                }

                class Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> _table;
                    /*0x0*/ int _currentIndex;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;

                    /*0x3816710*/ Enumerator(System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> table);
                    /*0x38159dc*/ void Finalize();
                    /*0x38159dc*/ void Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                    /*0x38159dc*/ void Reset();
                }
            }

            class RuntimeHelpers
            {
                static /*0x70d9fb8*/ void InitializeArray(System.Array array, nint fldHandle);
                static /*0x70d9fbc*/ void InitializeArray(System.Array array, System.RuntimeFieldHandle fldHandle);
                static /*0x70d5308*/ int get_OffsetToStringData();
                static /*0x70da000*/ int GetHashCode(object o);
                static /*0x70da008*/ object GetObjectValue(object obj);
                static /*0x70da00c*/ bool SufficientExecutionStack();
                static /*0x70da010*/ void EnsureSufficientExecutionStack();
                static /*0x70da058*/ bool TryEnsureSufficientExecutionStack();
                static /*0x70da05c*/ void PrepareConstrainedRegions();
                static /*0x3821564*/ bool IsReferenceOrContainsReferences<T>();
            }

            class Unsafe
            {
                static /*0x38390c0*/ ref T Add<T>(ref T source, int elementOffset);
                static /*0x3910ae8*/ ref T Add<T>(ref T source, nint elementOffset);
                static /*0x3910ae8*/ void* Add<T>(void* source, int elementOffset);
                static /*0x3910ae8*/ ref T AddByteOffset<T>(ref T source, nint byteOffset);
                static /*0x3825b78*/ bool AreSame<T>(ref T left, ref T right);
                static /*0x3910ae8*/ T As<T>(object o);
                static /*0x38379c4*/ ref TTo As<TFrom, TTo>(ref TFrom source);
                static /*0x3910ae8*/ void* AsPointer<T>(ref T value);
                static /*0x3910ae8*/ ref T AsRef<T>(void* source);
                static /*0x38379c4*/ ref T AsRef<T>(ref T source);
                static /*0x70da060*/ void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount);
                static /*0x3910ae8*/ T Read<T>(void* source);
                static /*0x3910ae8*/ T ReadUnaligned<T>(ref byte source);
                static /*0x382ad0c*/ int SizeOf<T>();
                static /*0x3910ae8*/ void WriteUnaligned<T>(ref byte destination, T value);
                static /*0x3825b78*/ bool IsAddressLessThan<T>(ref T left, ref T right);
                static /*0x383a740*/ ref T AddByteOffset<T>(ref T source, ulong byteOffset);
            }

            class EnumeratorCancellationAttribute : System.Attribute
            {
                /*0x70da068*/ EnumeratorCancellationAttribute();
            }
        }
    }

    namespace Resources
    {
        interface IResourceReader : System.Collections.IEnumerable, System.IDisposable
        {
            /*0x38159dc*/ void Close();
            /*0x38148bc*/ System.Collections.IDictionaryEnumerator GetEnumerator();
        }

        class MissingManifestResourceException : System.SystemException
        {
            /*0x70da070*/ MissingManifestResourceException();
            /*0x70da0cc*/ MissingManifestResourceException(string message);
            /*0x70da0f0*/ MissingManifestResourceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MissingSatelliteAssemblyException : System.SystemException
        {
            /*0x90*/ string _cultureName;

            /*0x70da0f8*/ MissingSatelliteAssemblyException();
            /*0x70da154*/ MissingSatelliteAssemblyException(string message, string cultureName);
            /*0x70da190*/ MissingSatelliteAssemblyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class NeutralResourcesLanguageAttribute : System.Attribute
        {
            /*0x10*/ string <CultureName>k__BackingField;
            /*0x18*/ System.Resources.UltimateResourceFallbackLocation <Location>k__BackingField;

            /*0x70da198*/ NeutralResourcesLanguageAttribute(string cultureName);
            /*0x70da21c*/ string get_CultureName();
            /*0x70da224*/ System.Resources.UltimateResourceFallbackLocation get_Location();
        }

        class ResourceFallbackManager : System.Collections.Generic.IEnumerable<System.Globalization.CultureInfo>, System.Collections.IEnumerable
        {
            /*0x10*/ System.Globalization.CultureInfo m_startingCulture;
            /*0x18*/ System.Globalization.CultureInfo m_neutralResourcesCulture;
            /*0x20*/ bool m_useParents;

            /*0x70da22c*/ ResourceFallbackManager(System.Globalization.CultureInfo startingCulture, System.Globalization.CultureInfo neutralResourcesCulture, bool useParents);
            /*0x70da2e0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70da2e4*/ System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo> GetEnumerator();

            class <GetEnumerator>d__5 : System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Globalization.CultureInfo <>2__current;
                /*0x20*/ System.Resources.ResourceFallbackManager <>4__this;
                /*0x28*/ bool <reachedNeutralResourcesCulture>5__2;
                /*0x30*/ System.Globalization.CultureInfo <currentCulture>5__3;

                /*0x70da350*/ <GetEnumerator>d__5(int <>1__state);
                /*0x70da378*/ void System.IDisposable.Dispose();
                /*0x70da37c*/ bool MoveNext();
                /*0x70da584*/ System.Globalization.CultureInfo System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>.get_Current();
                /*0x70da58c*/ void System.Collections.IEnumerator.Reset();
                /*0x70da5c4*/ object System.Collections.IEnumerator.get_Current();
            }
        }

        enum ResourceTypeCode
        {
            Null = 0,
            String = 1,
            Boolean = 2,
            Char = 3,
            Byte = 4,
            SByte = 5,
            Int16 = 6,
            UInt16 = 7,
            Int32 = 8,
            UInt32 = 9,
            Int64 = 10,
            UInt64 = 11,
            Single = 12,
            Double = 13,
            Decimal = 14,
            DateTime = 15,
            TimeSpan = 16,
            LastPrimitive = 16,
            ByteArray = 32,
            Stream = 33,
            StartOfUserTypes = 64,
        }

        class RuntimeResourceSet : System.Resources.ResourceSet, System.Collections.IEnumerable
        {
            static int Version = 2;
            /*0x28*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x30*/ System.Resources.ResourceReader _defaultReader;
            /*0x38*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _caseInsensitiveTable;
            /*0x40*/ bool _haveReadFromReader;

            /*0x70da5cc*/ RuntimeResourceSet(string fileName);
            /*0x70da868*/ RuntimeResourceSet(System.IO.Stream stream);
            /*0x70da98c*/ void Dispose(bool disposing);
            /*0x70dab0c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x70dac0c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70dab10*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x70dac10*/ string GetString(string key);
            /*0x70db540*/ string GetString(string key, bool ignoreCase);
            /*0x70db578*/ object GetObject(string key);
            /*0x70db584*/ object GetObject(string key, bool ignoreCase);
            /*0x70dac48*/ object GetObject(string key, bool ignoreCase, bool isString);
            /*0x70dbc88*/ object ResolveResourceLocator(System.Resources.ResourceLocator resLocation, string key, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> copyOfCache, bool keyInWrongCase);
        }

        class SatelliteContractVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0x70dbe14*/ SatelliteContractVersionAttribute(string version);
            /*0x70dbe90*/ string get_Version();
        }

        enum UltimateResourceFallbackLocation
        {
            MainAssembly = 0,
            Satellite = 1,
        }

        class FastResourceComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
        {
            static /*0x0*/ System.Resources.FastResourceComparer Default;

            static /*0x70dc294*/ FastResourceComparer();
            static /*0x70dbf18*/ int HashFunction(string key);
            static /*0x70dc0d0*/ int CompareOrdinal(string a, byte[] bytes, int bCharLength);
            static /*0x70dc188*/ int CompareOrdinal(byte[] bytes, int aCharLength, string b);
            static /*0x70dc1fc*/ int CompareOrdinal(byte* a, int byteLen, string b);
            /*0x70dc28c*/ FastResourceComparer();
            /*0x70dbe98*/ int GetHashCode(object key);
            /*0x70dbf84*/ int GetHashCode(string key);
            /*0x70dbfd8*/ int Compare(object a, object b);
            /*0x70dc044*/ int Compare(string a, string b);
            /*0x70dc054*/ bool Equals(string a, string b);
            /*0x70dc064*/ bool Equals(object a, object b);
        }

        class FileBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            /*0x70dc2fc*/ FileBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
            /*0x70dc32c*/ System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
            /*0x70dc604*/ string FindResourceFile(System.Globalization.CultureInfo culture, string fileName);
            /*0x70dc6e8*/ System.Resources.ResourceSet CreateResourceSet(string file);
        }

        interface IResourceGroveler
        {
            System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
        }

        class ManifestBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            static /*0x70de090*/ System.Globalization.CultureInfo GetNeutralResourcesLanguage(System.Reflection.Assembly a, ref System.Resources.UltimateResourceFallbackLocation fallbackLocation);
            static /*0x70de3ac*/ bool GetNeutralResourcesLanguageAttribute(System.Reflection.Assembly assembly, ref string cultureName, ref short fallbackLocation);
            /*0x70dc9e4*/ ManifestBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
            /*0x70dca14*/ System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
            /*0x70dccd8*/ System.Globalization.CultureInfo UltimateFallbackFixup(System.Globalization.CultureInfo lookForCulture);
            /*0x70dd444*/ System.Resources.ResourceSet CreateResourceSet(System.IO.Stream store, System.Reflection.Assembly assembly);
            /*0x70dd378*/ System.IO.Stream GetManifestResourceStream(System.Reflection.RuntimeAssembly satellite, string fileName, ref System.Threading.StackCrawlMark stackMark);
            /*0x70de594*/ System.IO.Stream CaseInsensitiveManifestResourceStreamLookup(System.Reflection.RuntimeAssembly satellite, string name);
            /*0x70dce7c*/ System.Reflection.RuntimeAssembly GetSatelliteAssembly(System.Globalization.CultureInfo lookForCulture, ref System.Threading.StackCrawlMark stackMark);
            /*0x70de430*/ bool CanUseDefaultResourceClasses(string readerTypeName, string resSetTypeName);
            /*0x70de9b8*/ string GetSatelliteAssemblyName();
            /*0x70dd000*/ void HandleSatelliteMissing();
            /*0x70dddc8*/ void HandleResourceStreamMissing(string fileName);
        }

        class ResourceManager
        {
            static /*0x0*/ int MagicNumber;
            static /*0x4*/ int HeaderVersionNumber;
            static /*0x8*/ System.Type _minResourceSet;
            static /*0x10*/ string ResReaderTypeName;
            static /*0x18*/ string ResSetTypeName;
            static /*0x20*/ string MscorlibName;
            static /*0x28*/ int DEBUG;
            /*0x10*/ string BaseNameField;
            /*0x18*/ System.Collections.Hashtable ResourceSets;
            /*0x20*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> _resourceSets;
            /*0x28*/ string moduleDir;
            /*0x30*/ System.Reflection.Assembly MainAssembly;
            /*0x38*/ System.Type _locationInfo;
            /*0x40*/ System.Type _userResourceSet;
            /*0x48*/ System.Globalization.CultureInfo _neutralResourcesCulture;
            /*0x50*/ System.Resources.ResourceManager.CultureNameResourceSetPair _lastUsedResourceCache;
            /*0x58*/ bool _ignoreCase;
            /*0x59*/ bool UseManifest;
            /*0x5a*/ bool UseSatelliteAssem;
            /*0x5c*/ System.Resources.UltimateResourceFallbackLocation _fallbackLoc;
            /*0x60*/ System.Version _satelliteContractVersion;
            /*0x68*/ bool _lookedForSatelliteContractVersion;
            /*0x70*/ System.Reflection.Assembly _callingAssembly;
            /*0x78*/ System.Reflection.RuntimeAssembly m_callingAssembly;
            /*0x80*/ System.Resources.IResourceGroveler resourceGroveler;

            static /*0x70e15b8*/ ResourceManager();
            static /*0x70e07d8*/ void AddResourceSet(System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, string cultureName, ref System.Resources.ResourceSet rs);
            static /*0x70e0980*/ System.Version GetSatelliteContractVersion(System.Reflection.Assembly a);
            static /*0x70dea38*/ bool CompareNames(string asmTypeName1, string typeName2, System.Reflection.AssemblyName asmName2);
            /*0x70dede8*/ ResourceManager();
            /*0x70def58*/ ResourceManager(string baseName, System.Reflection.Assembly assembly);
            /*0x70df400*/ ResourceManager(System.Type resourceSource);
            /*0x70decb4*/ void Init();
            /*0x70df748*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70df780*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70df9ac*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70df268*/ void CommonAssemblyInit();
            /*0x70dfa24*/ string get_BaseName();
            /*0x70dfa2c*/ System.Resources.UltimateResourceFallbackLocation get_FallbackLocation();
            /*0x70dfa34*/ string GetResourceFileName(System.Globalization.CultureInfo culture);
            /*0x70dfb70*/ System.Resources.ResourceSet GetFirstResourceSet(System.Globalization.CultureInfo culture);
            /*0x70dff5c*/ System.Resources.ResourceSet InternalGetResourceSet(System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);
            /*0x70dff80*/ System.Resources.ResourceSet InternalGetResourceSet(System.Globalization.CultureInfo requestedCulture, bool createIfNotExists, bool tryParents, ref System.Threading.StackCrawlMark stackMark);
            /*0x70df264*/ void SetAppXConfiguration();
            /*0x70e10c4*/ string GetString(string name);
            /*0x70e10d4*/ string GetString(string name, System.Globalization.CultureInfo culture);

            class CultureNameResourceSetPair
            {
                /*0x10*/ string lastCultureName;
                /*0x18*/ System.Resources.ResourceSet lastResourceSet;

                /*0x70deed4*/ CultureNameResourceSetPair();
            }

            class ResourceManagerMediator
            {
                /*0x10*/ System.Resources.ResourceManager _rm;

                /*0x70deedc*/ ResourceManagerMediator(System.Resources.ResourceManager rm);
                /*0x70dc9ac*/ string get_ModuleDir();
                /*0x70dc6cc*/ System.Type get_LocationInfo();
                /*0x70dc9c8*/ System.Type get_UserResourceSet();
                /*0x70dc6b0*/ string get_BaseNameField();
                /*0x70de074*/ System.Globalization.CultureInfo get_NeutralResourcesCulture();
                /*0x70dc5e4*/ string GetResourceFileName(System.Globalization.CultureInfo culture);
                /*0x70de90c*/ bool get_LookedForSatelliteContractVersion();
                /*0x70de998*/ void set_LookedForSatelliteContractVersion(bool value);
                /*0x70dea1c*/ System.Version get_SatelliteContractVersion();
                /*0x70de97c*/ void set_SatelliteContractVersion(System.Version value);
                /*0x70de928*/ System.Version ObtainSatelliteContractVersion(System.Reflection.Assembly a);
                /*0x70dcddc*/ System.Resources.UltimateResourceFallbackLocation get_FallbackLoc();
                /*0x70de578*/ System.Reflection.RuntimeAssembly get_CallingAssembly();
                /*0x70dcdf8*/ System.Reflection.RuntimeAssembly get_MainAssembly();
                /*0x70dec94*/ string get_BaseName();
            }
        }

        struct ResourceLocator
        {
            /*0x10*/ object _value;
            /*0x18*/ int _dataPos;

            static /*0x70dbc10*/ bool CanCache(System.Resources.ResourceTypeCode value);
            /*0x70dbc1c*/ ResourceLocator(int dataPos, object value);
            /*0x70e174c*/ int get_DataPosition();
            /*0x70e1754*/ object get_Value();
            /*0x70e175c*/ void set_Value(object value);
        }

        class ResourceReader : System.Resources.IResourceReader, System.Collections.IEnumerable, System.IDisposable
        {
            /*0x10*/ System.IO.BinaryReader _store;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x20*/ long _nameSectionOffset;
            /*0x28*/ long _dataSectionOffset;
            /*0x30*/ int[] _nameHashes;
            /*0x38*/ int* _nameHashesPtr;
            /*0x40*/ int[] _namePositions;
            /*0x48*/ int* _namePositionsPtr;
            /*0x50*/ System.RuntimeType[] _typeTable;
            /*0x58*/ int[] _typeNamePositions;
            /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _objFormatter;
            /*0x68*/ int _numResources;
            /*0x70*/ System.IO.UnmanagedMemoryStream _ums;
            /*0x78*/ int _version;

            static /*0x70e1984*/ int ReadUnalignedI4(int* p);
            /*0x70da728*/ ResourceReader(System.IO.Stream stream, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> resCache);
            /*0x70dab04*/ void Close();
            /*0x70e197c*/ void Dispose();
            /*0x70e18d4*/ void Dispose(bool disposing);
            /*0x70e198c*/ void SkipString();
            /*0x70e1a3c*/ int GetNameHash(int index);
            /*0x70e1a80*/ int GetNamePosition(int index);
            /*0x70e1b98*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70e1b9c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x70dbc2c*/ System.Resources.ResourceReader.ResourceEnumerator GetEnumeratorInternal();
            /*0x70db590*/ int FindPosForResource(string name);
            /*0x70e1c50*/ bool CompareStringEqualsName(string name);
            /*0x70e1e58*/ string AllocateStringForNameIndex(int index, ref int dataOffset);
            /*0x70e264c*/ object GetValueForNameIndex(int index);
            /*0x70db94c*/ string LoadString(int pos);
            /*0x70e2e98*/ object LoadObject(int pos);
            /*0x70dbbc0*/ object LoadObject(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x70e28f8*/ object LoadObjectV1(int pos);
            /*0x70e2ec4*/ object _LoadObjectV1(int pos);
            /*0x70e29f0*/ object LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x70e3740*/ object _LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x70e359c*/ object DeserializeObject(int typeIndex);
            /*0x70e1764*/ void ReadResources();
            /*0x70e3df4*/ void _ReadResources();
            /*0x70e2ae8*/ System.RuntimeType FindType(int typeIndex);

            class ResourceEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Resources.ResourceReader _reader;
                /*0x18*/ bool _currentIsValid;
                /*0x1c*/ int _currentName;
                /*0x20*/ int _dataPosition;

                /*0x70e46c4*/ ResourceEnumerator(System.Resources.ResourceReader reader);
                /*0x70e4708*/ bool MoveNext();
                /*0x70e4778*/ object get_Key();
                /*0x70e482c*/ object get_Current();
                /*0x70e4be0*/ int get_DataPosition();
                /*0x70e4890*/ System.Collections.DictionaryEntry get_Entry();
                /*0x70e4be8*/ object get_Value();
                /*0x70e4c94*/ void Reset();
            }
        }

        class ResourceSet : System.IDisposable, System.Collections.IEnumerable
        {
            /*0x10*/ System.Resources.IResourceReader Reader;
            /*0x18*/ System.Collections.Hashtable Table;
            /*0x20*/ System.Collections.Hashtable _caseInsensitiveTable;

            /*0x70e4d18*/ ResourceSet();
            /*0x70e4d94*/ ResourceSet(bool junk);
            /*0x70e4d34*/ void CommonInit();
            /*0x70e4d9c*/ void Dispose(bool disposing);
            /*0x70e4e80*/ void Dispose();
            /*0x70e4e90*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x70e4f10*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70e4e94*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x70e4f14*/ string GetString(string name);
            /*0x70e5110*/ string GetString(string name, bool ignoreCase);
            /*0x70e55bc*/ object GetObject(string name);
            /*0x70e55c0*/ object GetObject(string name, bool ignoreCase);
            /*0x70e5048*/ object GetObjectInternal(string name);
            /*0x70e52e4*/ object GetCaseInsensitiveObjectInternal(string name);
        }
    }

    namespace Reflection
    {
        class AmbiguousMatchException : System.SystemException
        {
            /*0x70e5600*/ AmbiguousMatchException();
            /*0x70e565c*/ AmbiguousMatchException(string message);
            /*0x70e5680*/ AmbiguousMatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class AssemblyCompanyAttribute : System.Attribute
        {
            /*0x10*/ string <Company>k__BackingField;

            /*0x70e5688*/ AssemblyCompanyAttribute(string company);
        }

        class AssemblyConfigurationAttribute : System.Attribute
        {
            /*0x10*/ string <Configuration>k__BackingField;

            /*0x70e56b8*/ AssemblyConfigurationAttribute(string configuration);
        }

        enum AssemblyContentType
        {
            Default = 0,
            WindowsRuntime = 1,
        }

        class AssemblyCopyrightAttribute : System.Attribute
        {
            /*0x10*/ string <Copyright>k__BackingField;

            /*0x70e56e8*/ AssemblyCopyrightAttribute(string copyright);
        }

        class AssemblyDefaultAliasAttribute : System.Attribute
        {
            /*0x10*/ string <DefaultAlias>k__BackingField;

            /*0x70e5718*/ AssemblyDefaultAliasAttribute(string defaultAlias);
        }

        class AssemblyDelaySignAttribute : System.Attribute
        {
            /*0x10*/ bool <DelaySign>k__BackingField;

            /*0x70e5748*/ AssemblyDelaySignAttribute(bool delaySign);
        }

        class AssemblyDescriptionAttribute : System.Attribute
        {
            /*0x10*/ string <Description>k__BackingField;

            /*0x70e5770*/ AssemblyDescriptionAttribute(string description);
        }

        class AssemblyFileVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0x70e57a0*/ AssemblyFileVersionAttribute(string version);
        }

        class AssemblyInformationalVersionAttribute : System.Attribute
        {
            /*0x10*/ string <InformationalVersion>k__BackingField;

            /*0x70e581c*/ AssemblyInformationalVersionAttribute(string informationalVersion);
        }

        class AssemblyKeyFileAttribute : System.Attribute
        {
            /*0x10*/ string <KeyFile>k__BackingField;

            /*0x70e584c*/ AssemblyKeyFileAttribute(string keyFile);
        }

        class AssemblyMetadataAttribute : System.Attribute
        {
            /*0x10*/ string <Key>k__BackingField;
            /*0x18*/ string <Value>k__BackingField;

            /*0x70e587c*/ AssemblyMetadataAttribute(string key, string value);
        }

        enum AssemblyNameFlags
        {
            None = 0,
            PublicKey = 1,
            EnableJITcompileOptimizer = 16384,
            EnableJITcompileTracking = 32768,
            Retargetable = 256,
        }

        class AssemblyProductAttribute : System.Attribute
        {
            /*0x10*/ string <Product>k__BackingField;

            /*0x70e58c0*/ AssemblyProductAttribute(string product);
        }

        class AssemblyTitleAttribute : System.Attribute
        {
            /*0x10*/ string <Title>k__BackingField;

            /*0x70e58f0*/ AssemblyTitleAttribute(string title);
        }

        class AssemblyTrademarkAttribute : System.Attribute
        {
            /*0x10*/ string <Trademark>k__BackingField;

            /*0x70e5920*/ AssemblyTrademarkAttribute(string trademark);
        }

        class Binder
        {
            /*0x70e5950*/ Binder();
            System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
            System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, ref object state);
            /*0x3814c14*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo culture);
            /*0x3816810*/ void ReorderArgumentArray(ref object[] args, object state);
            System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        }

        enum BindingFlags
        {
            Default = 0,
            IgnoreCase = 1,
            DeclaredOnly = 2,
            Instance = 4,
            Static = 8,
            Public = 16,
            NonPublic = 32,
            FlattenHierarchy = 64,
            InvokeMethod = 256,
            CreateInstance = 512,
            GetField = 1024,
            SetField = 2048,
            GetProperty = 4096,
            SetProperty = 8192,
            PutDispProperty = 16384,
            PutRefDispProperty = 32768,
            ExactBinding = 65536,
            SuppressChangeType = 131072,
            OptionalParamBinding = 262144,
            IgnoreReturn = 16777216,
            DoNotWrapExceptions = 33554432,
        }

        enum CallingConventions
        {
            Standard = 1,
            VarArgs = 2,
            Any = 3,
            HasThis = 32,
            ExplicitThis = 64,
        }

        class ConstructorInfo : System.Reflection.MethodBase
        {
            static /*0x0*/ string ConstructorName;
            static /*0x8*/ string TypeConstructorName;

            static /*0x70e5a70*/ ConstructorInfo();
            static /*0x70e59b0*/ bool op_Equality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            static /*0x70e59dc*/ bool op_Inequality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            /*0x70e5958*/ ConstructorInfo();
            /*0x70e5968*/ System.Reflection.MemberTypes get_MemberType();
            /*0x70e5970*/ object Invoke(object[] parameters);
            object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70e5990*/ bool Equals(object obj);
            /*0x70e59a0*/ int GetHashCode();
        }

        class CustomAttributeFormatException : System.FormatException
        {
            /*0x70e5b0c*/ CustomAttributeFormatException();
            /*0x70e5b6c*/ CustomAttributeFormatException(string message);
            /*0x70e5b94*/ CustomAttributeFormatException(string message, System.Exception inner);
            /*0x70e5bb8*/ CustomAttributeFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class DefaultMemberAttribute : System.Attribute
        {
            /*0x10*/ string <MemberName>k__BackingField;

            /*0x70e5bc0*/ DefaultMemberAttribute(string memberName);
            /*0x70e5bf0*/ string get_MemberName();
        }

        enum EventAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            ReservedMask = 1024,
        }

        class EventInfo : System.Reflection.MemberInfo
        {
            /*0x10*/ System.Reflection.EventInfo.AddEventAdapter cached_add_event;

            static /*0x70e5d4c*/ bool op_Equality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x70e5d78*/ bool op_Inequality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x70e5db4*/ System.Reflection.EventInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x70e5db8*/ System.Reflection.EventInfo GetEventFromHandle(Mono.RuntimeEventHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x70e5bf8*/ EventInfo();
            /*0x70e5c08*/ System.Reflection.MemberTypes get_MemberType();
            System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x70e5c10*/ System.Type get_EventHandlerType();
            /*0x70e5d2c*/ bool Equals(object obj);
            /*0x70e5d3c*/ int GetHashCode();

            class AddEventAdapter : System.MulticastDelegate
            {
                /*0x70e5e38*/ AddEventAdapter(object object, nint method);
                /*0x70e5f44*/ void Invoke(object _this, System.Delegate dele);
            }
        }

        enum ExceptionHandlingClauseOptions
        {
            Clause = 0,
            Filter = 1,
            Finally = 2,
            Fault = 4,
        }

        enum FieldAttributes
        {
            FieldAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            InitOnly = 32,
            Literal = 64,
            NotSerialized = 128,
            SpecialName = 512,
            PinvokeImpl = 8192,
            RTSpecialName = 1024,
            HasFieldMarshal = 4096,
            HasDefault = 32768,
            HasFieldRVA = 256,
            ReservedMask = 38144,
        }

        class FieldInfo : System.Reflection.MemberInfo
        {
            static /*0x70e6048*/ bool op_Equality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x70e6074*/ bool op_Inequality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x70e61b0*/ System.Reflection.FieldInfo internal_from_handle_type(nint field_handle, nint type_handle);
            static /*0x70e61b4*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle);
            static /*0x70e620c*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType);
            /*0x70e5f58*/ FieldInfo();
            /*0x70e5f60*/ System.Reflection.MemberTypes get_MemberType();
            /*0x3814574*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x38148bc*/ System.Type get_FieldType();
            /*0x70e5f68*/ bool get_IsInitOnly();
            /*0x70e5f88*/ bool get_IsLiteral();
            /*0x70e5fa8*/ bool get_IsNotSerialized();
            /*0x70e5fc8*/ bool get_IsStatic();
            /*0x70e5fe8*/ bool get_IsPrivate();
            /*0x70e6010*/ bool get_IsPublic();
            System.RuntimeFieldHandle get_FieldHandle();
            /*0x70e6038*/ bool Equals(object obj);
            /*0x70e6040*/ int GetHashCode();
            /*0x3814a3c*/ object GetValue(object obj);
            /*0x70e60b0*/ void SetValue(object obj, object value);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x70e6118*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x70e6164*/ object GetRawConstantValue();
            /*0x70e628c*/ int GetFieldOffset();
            /*0x70e62d8*/ System.Runtime.InteropServices.MarshalAsAttribute get_marshal_info();
            /*0x70e62dc*/ object[] GetPseudoCustomAttributes();
            /*0x70e6510*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
        }

        enum GenericParameterAttributes
        {
            None = 0,
            VarianceMask = 3,
            Covariant = 1,
            Contravariant = 2,
            SpecialConstraintMask = 28,
            ReferenceTypeConstraint = 4,
            NotNullableValueTypeConstraint = 8,
            DefaultConstructorConstraint = 16,
        }

        interface ICustomAttributeProvider
        {
            object[] GetCustomAttributes(bool inherit);
            /*0x3814a74*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            bool IsDefined(System.Type attributeType, bool inherit);
        }

        interface IReflectableType
        {
            /*0x38148bc*/ System.Reflection.TypeInfo GetTypeInfo();
        }

        struct InterfaceMapping
        {
            /*0x10*/ System.Type TargetType;
            /*0x18*/ System.Type InterfaceType;
            /*0x20*/ System.Reflection.MethodInfo[] TargetMethods;
            /*0x28*/ System.Reflection.MethodInfo[] InterfaceMethods;
        }

        class IntrospectionExtensions
        {
            static /*0x70e6ecc*/ System.Reflection.TypeInfo GetTypeInfo(System.Type type);
        }

        class InvalidFilterCriteriaException : System.ApplicationException
        {
            /*0x70e70c0*/ InvalidFilterCriteriaException();
            /*0x70e7120*/ InvalidFilterCriteriaException(string message);
            /*0x70e7148*/ InvalidFilterCriteriaException(string message, System.Exception inner);
            /*0x70e716c*/ InvalidFilterCriteriaException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManifestResourceInfo
        {
            /*0x10*/ System.Reflection.Assembly <ReferencedAssembly>k__BackingField;
            /*0x18*/ string <FileName>k__BackingField;
            /*0x20*/ System.Reflection.ResourceLocation <ResourceLocation>k__BackingField;

            /*0x70e7174*/ ManifestResourceInfo(System.Reflection.Assembly containingAssembly, string containingFileName, System.Reflection.ResourceLocation resourceLocation);
            /*0x70e71cc*/ System.Reflection.Assembly get_ReferencedAssembly();
            /*0x70e71d4*/ string get_FileName();
            /*0x70e71dc*/ System.Reflection.ResourceLocation get_ResourceLocation();
        }

        class MemberFilter : System.MulticastDelegate
        {
            /*0x70e71e4*/ MemberFilter(object object, nint method);
            /*0x70e72f0*/ bool Invoke(System.Reflection.MemberInfo m, object filterCriteria);
        }

        class MemberInfo : System.Reflection.ICustomAttributeProvider
        {
            static /*0x70e73e8*/ bool op_Equality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            static /*0x70e796c*/ bool op_Inequality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            /*0x70e5c00*/ MemberInfo();
            /*0x3814574*/ System.Reflection.MemberTypes get_MemberType();
            /*0x38148bc*/ string get_Name();
            /*0x38148bc*/ System.Type get_DeclaringType();
            /*0x38148bc*/ System.Type get_ReflectedType();
            /*0x70e7304*/ System.Reflection.Module get_Module();
            bool IsDefined(System.Type attributeType, bool inherit);
            object[] GetCustomAttributes(bool inherit);
            /*0x3814a74*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e73b0*/ int get_MetadataToken();
            /*0x70e5d34*/ bool Equals(object obj);
            /*0x70e5d44*/ int GetHashCode();
        }

        enum MemberTypes
        {
            Constructor = 1,
            Event = 2,
            Field = 4,
            Method = 8,
            Property = 16,
            TypeInfo = 32,
            Custom = 64,
            NestedType = 128,
            All = 191,
        }

        enum MethodAttributes
        {
            MemberAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            Final = 32,
            Virtual = 64,
            HideBySig = 128,
            CheckAccessOnOverride = 512,
            VtableLayoutMask = 256,
            ReuseSlot = 0,
            NewSlot = 256,
            Abstract = 1024,
            SpecialName = 2048,
            PinvokeImpl = 8192,
            UnmanagedExport = 8,
            RTSpecialName = 4096,
            HasSecurity = 16384,
            RequireSecObject = 32768,
            ReservedMask = 53248,
        }

        class MethodBase : System.Reflection.MemberInfo
        {
            static /*0x70e7750*/ bool op_Equality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x70e7738*/ bool op_Inequality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x70e808c*/ System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle);
            static /*0x70e7d68*/ string ConstructParameters(System.Type[] parameterTypes, System.Reflection.CallingConventions callingConvention, bool serialization);
            /*0x70e5960*/ MethodBase();
            /*0x38148bc*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x3814574*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x3814574*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x70e7984*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x70e798c*/ bool get_IsAbstract();
            /*0x70e79ac*/ bool get_IsConstructor();
            /*0x70e7a70*/ bool get_IsFinal();
            /*0x70e7a90*/ bool get_IsSpecialName();
            /*0x70e7a50*/ bool get_IsStatic();
            /*0x70e7ab0*/ bool get_IsVirtual();
            /*0x70e7ad0*/ bool get_IsPublic();
            /*0x70e7af8*/ bool get_IsGenericMethod();
            /*0x70e7b00*/ bool get_IsGenericMethodDefinition();
            /*0x70e7b08*/ System.Type[] GetGenericArguments();
            /*0x70e7b54*/ bool get_ContainsGenericParameters();
            /*0x70e7b5c*/ object Invoke(object obj, object[] parameters);
            object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            System.RuntimeMethodHandle get_MethodHandle();
            /*0x70e7b7c*/ bool get_IsSecurityCritical();
            /*0x70e5998*/ bool Equals(object obj);
            /*0x70e59a8*/ int GetHashCode();
            /*0x70e7c0c*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x70e7c1c*/ int GetParametersCount();
            /*0x70e7c44*/ string FormatNameAndSig(bool serialization);
            /*0x70e7f60*/ System.Type[] GetParameterTypes();
            /*0x70e807c*/ System.Reflection.ParameterInfo[] GetParametersNoCopy();
        }

        enum MethodImplAttributes
        {
            CodeTypeMask = 3,
            IL = 0,
            Native = 1,
            OPTIL = 2,
            Runtime = 3,
            ManagedMask = 4,
            Unmanaged = 4,
            Managed = 0,
            ForwardRef = 16,
            PreserveSig = 128,
            InternalCall = 4096,
            Synchronized = 32,
            NoInlining = 8,
            AggressiveInlining = 256,
            NoOptimization = 64,
            MaxMethodImplVal = 65535,
            SecurityMitigations = 1024,
        }

        class MethodInfo : System.Reflection.MethodBase
        {
            static /*0x70e7be0*/ bool op_Equality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            static /*0x70e7ba4*/ bool op_Inequality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            /*0x70e8254*/ MethodInfo();
            /*0x70e825c*/ System.Reflection.MemberTypes get_MemberType();
            /*0x70e8264*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0x70e828c*/ System.Type get_ReturnType();
            /*0x70e82b4*/ System.Type[] GetGenericArguments();
            /*0x70e8300*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x70e834c*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] typeArguments);
            /*0x38148bc*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0x70e8398*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x70e83e4*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x70e8430*/ bool Equals(object obj);
            /*0x70e8438*/ int GetHashCode();
            /*0x70e8440*/ int get_GenericParameterCount();
        }

        class Missing : System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Reflection.Missing Value;

            static /*0x70e84a8*/ Missing();
            /*0x70e8468*/ Missing();
            /*0x70e8470*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Module
        {
            static System.Reflection.BindingFlags DefaultLookup = 28;
            static /*0x0*/ System.Reflection.TypeFilter FilterTypeName;
            static /*0x8*/ System.Reflection.TypeFilter FilterTypeNameIgnoreCase;

            static /*0x70e8928*/ Module();
            static /*0x70e8668*/ bool op_Equality(System.Reflection.Module left, System.Reflection.Module right);
            static /*0x70e86a0*/ bool FilterTypeNameImpl(System.Type cls, object filterCriteria);
            static /*0x70e87b0*/ bool FilterTypeNameIgnoreCaseImpl(System.Type cls, object filterCriteria);
            /*0x70e8510*/ Module();
            /*0x70e8518*/ System.Reflection.Assembly get_Assembly();
            /*0x70e8540*/ System.Guid get_ModuleVersionId();
            /*0x70e8568*/ string get_ScopeName();
            /*0x70e8590*/ bool IsResource();
            /*0x70e85b8*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70e85e0*/ object[] GetCustomAttributes(bool inherit);
            /*0x70e8608*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e8630*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e8658*/ bool Equals(object o);
            /*0x70e8660*/ int GetHashCode();
            /*0x70e8694*/ string ToString();
            /*0x70e88f0*/ System.Guid GetModuleVersionId();
        }

        enum ParameterAttributes
        {
            None = 0,
            In = 1,
            Out = 2,
            Lcid = 4,
            Retval = 8,
            Optional = 16,
            HasDefault = 4096,
            HasFieldMarshal = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 61440,
        }

        class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.IObjectReference, System.Runtime.InteropServices._ParameterInfo
        {
            static int MetadataToken_ParamDef = 134217728;
            /*0x10*/ System.Reflection.ParameterAttributes AttrsImpl;
            /*0x18*/ System.Type ClassImpl;
            /*0x20*/ object DefaultValueImpl;
            /*0x28*/ System.Reflection.MemberInfo MemberImpl;
            /*0x30*/ string NameImpl;
            /*0x38*/ int PositionImpl;

            /*0x70e8b10*/ ParameterInfo();
            /*0x70e8b18*/ System.Reflection.ParameterAttributes get_Attributes();
            /*0x70e8b20*/ System.Reflection.MemberInfo get_Member();
            /*0x70e8b28*/ string get_Name();
            /*0x70e8b30*/ System.Type get_ParameterType();
            /*0x70e8b38*/ int get_Position();
            /*0x70e8b40*/ bool get_IsIn();
            /*0x70e8b5c*/ bool get_IsOptional();
            /*0x70e8b78*/ bool get_IsOut();
            /*0x70e8b94*/ object get_DefaultValue();
            /*0x70e8bbc*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70e8c44*/ object[] GetCustomAttributes(bool inherit);
            /*0x70e8cd0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e8dd4*/ System.Type[] GetRequiredCustomModifiers();
            /*0x70e8e60*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            /*0x70e90bc*/ string ToString();
        }

        struct ParameterModifier
        {
            /*0x10*/ bool[] _byRef;
        }

        class Pointer : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ void* _ptr;
            /*0x18*/ System.Type _ptrType;

            static /*0x70e9178*/ object Box(void* ptr, System.Type type);
            static /*0x70e92ec*/ void* Unbox(object ptr);
            /*0x70e9140*/ Pointer(void* ptr, System.Type ptrType);
            /*0x70e93a0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum ProcessorArchitecture
        {
            None = 0,
            MSIL = 1,
            X86 = 2,
            IA64 = 3,
            Amd64 = 4,
            Arm = 5,
        }

        enum PropertyAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            HasDefault = 4096,
            Reserved2 = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 62464,
        }

        class PropertyInfo : System.Reflection.MemberInfo
        {
            static /*0x70e7940*/ bool op_Equality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            static /*0x70e7904*/ bool op_Inequality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            /*0x70e93d8*/ PropertyInfo();
            /*0x70e93e0*/ System.Reflection.MemberTypes get_MemberType();
            /*0x38148bc*/ System.Type get_PropertyType();
            /*0x38148bc*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x3813ffc*/ bool get_CanRead();
            /*0x3813ffc*/ bool get_CanWrite();
            /*0x70e93e8*/ System.Reflection.MethodInfo get_GetMethod();
            /*0x70e93fc*/ System.Reflection.MethodInfo GetGetMethod();
            System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x70e9410*/ System.Reflection.MethodInfo get_SetMethod();
            /*0x70e9424*/ System.Reflection.MethodInfo GetSetMethod();
            System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x70e9438*/ object GetValue(object obj);
            /*0x70e944c*/ object GetValue(object obj, object[] index);
            object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70e946c*/ void SetValue(object obj, object value);
            /*0x70e9480*/ void SetValue(object obj, object value, object[] index);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70e94a0*/ bool Equals(object obj);
            /*0x70e94a8*/ int GetHashCode();
        }

        class ReflectionTypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
        {
            /*0x90*/ System.Type[] <Types>k__BackingField;
            /*0x98*/ System.Exception[] <LoaderExceptions>k__BackingField;

            /*0x70e94b0*/ ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions);
            /*0x70e9508*/ ReflectionTypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e9638*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e9754*/ System.Exception[] get_LoaderExceptions();
            /*0x70e975c*/ string get_Message();
            /*0x70e98a0*/ string ToString();
            /*0x70e9764*/ string CreateString(bool isMessage);
        }

        enum ResourceLocation
        {
            ContainedInAnotherAssembly = 2,
            ContainedInManifestFile = 4,
            Embedded = 1,
        }

        class SignatureArrayType : System.Reflection.SignatureHasElementType
        {
            /*0x20*/ int _rank;
            /*0x24*/ bool _isMultiDim;

            /*0x70e98a8*/ SignatureArrayType(System.Reflection.SignatureType elementType, int rank, bool isMultiDim);
            /*0x70e991c*/ bool IsArrayImpl();
            /*0x70e9924*/ bool IsByRefImpl();
            /*0x70e992c*/ bool IsPointerImpl();
            /*0x70e9934*/ bool get_IsSZArray();
            /*0x70e9944*/ bool get_IsVariableBoundArray();
            /*0x70e994c*/ int GetArrayRank();
            /*0x70e9954*/ string get_Suffix();
        }

        class SignatureByRefType : System.Reflection.SignatureHasElementType
        {
            /*0x70e9a1c*/ SignatureByRefType(System.Reflection.SignatureType elementType);
            /*0x70e9a48*/ bool IsArrayImpl();
            /*0x70e9a50*/ bool IsByRefImpl();
            /*0x70e9a58*/ bool IsPointerImpl();
            /*0x70e9a60*/ bool get_IsSZArray();
            /*0x70e9a68*/ bool get_IsVariableBoundArray();
            /*0x70e9a70*/ int GetArrayRank();
            /*0x70e9abc*/ string get_Suffix();
        }

        class SignatureConstructedGenericType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Type _genericTypeDefinition;
            /*0x20*/ System.Type[] _genericTypeArguments;

            /*0x70e9afc*/ SignatureConstructedGenericType(System.Type genericTypeDefinition, System.Type[] typeArguments);
            /*0x70e9cd8*/ bool get_IsGenericTypeDefinition();
            /*0x70e9ce0*/ bool HasElementTypeImpl();
            /*0x70e9ce8*/ bool IsArrayImpl();
            /*0x70e9cf0*/ bool IsByRefImpl();
            /*0x70e9cf8*/ bool IsPointerImpl();
            /*0x70e9d00*/ bool get_IsSZArray();
            /*0x70e9d08*/ bool get_IsVariableBoundArray();
            /*0x70e9d10*/ bool get_IsConstructedGenericType();
            /*0x70e9d18*/ bool get_IsGenericParameter();
            /*0x70e9d20*/ bool get_IsGenericMethodParameter();
            /*0x70e9d28*/ bool get_ContainsGenericParameters();
            /*0x70e9d9c*/ System.Reflection.SignatureType get_ElementType();
            /*0x70e9da4*/ int GetArrayRank();
            /*0x70e9df0*/ System.Type GetGenericTypeDefinition();
            /*0x70e9df8*/ System.Type[] GetGenericArguments();
            /*0x70e9e08*/ System.Type[] get_GenericTypeArguments();
            /*0x70e9e80*/ int get_GenericParameterPosition();
            /*0x70e9ecc*/ string get_Name();
            /*0x70e9eec*/ string get_Namespace();
            /*0x70e9f10*/ string ToString();
        }

        class SignatureHasElementType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Reflection.SignatureType _elementType;

            /*0x70e98f0*/ SignatureHasElementType(System.Reflection.SignatureType elementType);
            /*0x70ea034*/ bool get_IsGenericTypeDefinition();
            /*0x70ea03c*/ bool HasElementTypeImpl();
            /*0x3813ffc*/ bool IsArrayImpl();
            /*0x3813ffc*/ bool IsByRefImpl();
            /*0x3813ffc*/ bool IsPointerImpl();
            /*0x3813ffc*/ bool get_IsSZArray();
            /*0x3813ffc*/ bool get_IsVariableBoundArray();
            /*0x70ea044*/ bool get_IsConstructedGenericType();
            /*0x70ea04c*/ bool get_IsGenericParameter();
            /*0x70ea054*/ bool get_IsGenericMethodParameter();
            /*0x70ea05c*/ bool get_ContainsGenericParameters();
            /*0x70ea080*/ System.Reflection.SignatureType get_ElementType();
            /*0x3814574*/ int GetArrayRank();
            /*0x70ea088*/ System.Type GetGenericTypeDefinition();
            /*0x70ea0d4*/ System.Type[] GetGenericArguments();
            /*0x70ea160*/ System.Type[] get_GenericTypeArguments();
            /*0x70ea1ec*/ int get_GenericParameterPosition();
            /*0x70ea238*/ string get_Name();
            /*0x70ea28c*/ string get_Namespace();
            /*0x70ea2b0*/ string ToString();
            /*0x38148bc*/ string get_Suffix();
        }

        class SignaturePointerType : System.Reflection.SignatureHasElementType
        {
            /*0x70ea304*/ SignaturePointerType(System.Reflection.SignatureType elementType);
            /*0x70ea330*/ bool IsArrayImpl();
            /*0x70ea338*/ bool IsByRefImpl();
            /*0x70ea340*/ bool IsPointerImpl();
            /*0x70ea348*/ bool get_IsSZArray();
            /*0x70ea350*/ bool get_IsVariableBoundArray();
            /*0x70ea358*/ int GetArrayRank();
            /*0x70ea3a4*/ string get_Suffix();
        }

        class SignatureType : System.Type
        {
            /*0x70e9ca4*/ SignatureType();
            /*0x70ea3e4*/ bool get_IsSignatureType();
            /*0x3813ffc*/ bool HasElementTypeImpl();
            /*0x3813ffc*/ bool IsArrayImpl();
            /*0x3813ffc*/ bool get_IsSZArray();
            /*0x3813ffc*/ bool get_IsVariableBoundArray();
            /*0x3813ffc*/ bool IsByRefImpl();
            /*0x3813ffc*/ bool IsPointerImpl();
            /*0x70ea3ec*/ bool get_IsGenericType();
            /*0x3813ffc*/ bool get_IsGenericTypeDefinition();
            /*0x3813ffc*/ bool get_IsConstructedGenericType();
            /*0x3813ffc*/ bool get_IsGenericParameter();
            /*0x3813ffc*/ bool get_IsGenericMethodParameter();
            /*0x3813ffc*/ bool get_ContainsGenericParameters();
            /*0x70ea42c*/ System.Reflection.MemberTypes get_MemberType();
            /*0x70ea434*/ System.Type MakeArrayType();
            /*0x70ea4a4*/ System.Type MakeArrayType(int rank);
            /*0x70ea554*/ System.Type MakeByRefType();
            /*0x70ea5b8*/ System.Type MakePointerType();
            /*0x70ea61c*/ System.Type MakeGenericType(System.Type[] typeArguments);
            /*0x70ea668*/ System.Type GetElementType();
            /*0x3814574*/ int GetArrayRank();
            /*0x38148bc*/ System.Type GetGenericTypeDefinition();
            /*0x38148bc*/ System.Type[] get_GenericTypeArguments();
            /*0x38148bc*/ System.Type[] GetGenericArguments();
            /*0x3814574*/ int get_GenericParameterPosition();
            /*0x38148bc*/ System.Reflection.SignatureType get_ElementType();
            /*0x70ea678*/ System.Type get_UnderlyingSystemType();
            /*0x38148bc*/ string get_Name();
            /*0x38148bc*/ string get_Namespace();
            /*0x70ea67c*/ string get_FullName();
            /*0x70ea684*/ string get_AssemblyQualifiedName();
            /*0x38148bc*/ string ToString();
            /*0x70ea68c*/ System.Reflection.Assembly get_Assembly();
            /*0x70ea6d8*/ System.Reflection.Module get_Module();
            /*0x70ea724*/ System.Type get_ReflectedType();
            /*0x70ea770*/ System.Type get_BaseType();
            /*0x70ea7bc*/ System.Type[] GetInterfaces();
            /*0x70ea808*/ bool IsAssignableFrom(System.Type c);
            /*0x70ea854*/ int get_MetadataToken();
            /*0x70ea8a0*/ System.Type get_DeclaringType();
            /*0x70ea8ec*/ System.Reflection.MethodBase get_DeclaringMethod();
            /*0x70ea938*/ System.Type[] GetGenericParameterConstraints();
            /*0x70ea984*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
            /*0x70ea9d0*/ bool IsEnumDefined(object value);
            /*0x70eaa1c*/ string GetEnumName(object value);
            /*0x70eaa68*/ string[] GetEnumNames();
            /*0x70eaab4*/ System.Type GetEnumUnderlyingType();
            /*0x70eab00*/ System.Array GetEnumValues();
            /*0x70eab4c*/ System.Guid get_GUID();
            /*0x70eab98*/ System.TypeCode GetTypeCodeImpl();
            /*0x70eabe4*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0x70eac30*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0x70eac7c*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70eacc8*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70ead14*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0x70ead60*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
            /*0x70eadac*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0x70eadf8*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70eae44*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0x70eae90*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0x70eaedc*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70eaf28*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70eaf74*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70eafc0*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0x70eb00c*/ object[] GetCustomAttributes(bool inherit);
            /*0x70eb058*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70eb0a4*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70eb0f0*/ System.Type GetInterface(string name, bool ignoreCase);
            /*0x70eb13c*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70eb188*/ bool IsCOMObjectImpl();
            /*0x70eb1d4*/ bool IsPrimitiveImpl();
            /*0x70eb220*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType);
            /*0x70eb26c*/ bool IsContextfulImpl();
            /*0x70eb2b8*/ bool get_IsEnum();
            /*0x70eb304*/ bool IsEquivalentTo(System.Type other);
            /*0x70eb350*/ bool IsInstanceOfType(object o);
            /*0x70eb39c*/ bool IsMarshalByRefImpl();
            /*0x70eb3e8*/ bool get_IsSerializable();
            /*0x70eb434*/ bool IsSubclassOf(System.Type c);
            /*0x70eb480*/ bool IsValueTypeImpl();
            /*0x70eb4cc*/ System.RuntimeTypeHandle get_TypeHandle();
        }

        class SignatureTypeExtensions
        {
            static /*0x70eb518*/ bool MatchesParameterTypeExactly(System.Type pattern, System.Reflection.ParameterInfo parameter);
            static /*0x70eb5cc*/ bool MatchesExactly(System.Reflection.SignatureType pattern, System.Type actual);
            static /*0x70eb96c*/ System.Type TryResolveAgainstGenericMethod(System.Reflection.SignatureType signatureType, System.Reflection.MethodInfo genericMethod);
            static /*0x70eb9a4*/ System.Type TryResolve(System.Reflection.SignatureType signatureType, System.Type[] genericMethodParameters);
            static /*0x70ebd8c*/ System.Type TryMakeArrayType(System.Type type);
            static /*0x70ebe28*/ System.Type TryMakeArrayType(System.Type type, int rank);
            static /*0x70ebec4*/ System.Type TryMakeByRefType(System.Type type);
            static /*0x70ebf60*/ System.Type TryMakePointerType(System.Type type);
            static /*0x70ebffc*/ System.Type TryMakeGenericType(System.Type type, System.Type[] instantiation);
        }

        class TargetException : System.ApplicationException
        {
            /*0x70ec098*/ TargetException();
            /*0x70ec0c4*/ TargetException(string message);
            /*0x70ec0ec*/ TargetException(string message, System.Exception inner);
            /*0x70ec110*/ TargetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetInvocationException : System.ApplicationException
        {
            /*0x70ec118*/ TargetInvocationException(System.Exception inner);
            /*0x70ec184*/ TargetInvocationException(string message, System.Exception inner);
            /*0x70ec1a8*/ TargetInvocationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetParameterCountException : System.ApplicationException
        {
            /*0x70ec1b0*/ TargetParameterCountException();
            /*0x70ec20c*/ TargetParameterCountException(string message);
            /*0x70ec230*/ TargetParameterCountException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum TypeAttributes
        {
            VisibilityMask = 7,
            NotPublic = 0,
            Public = 1,
            NestedPublic = 2,
            NestedPrivate = 3,
            NestedFamily = 4,
            NestedAssembly = 5,
            NestedFamANDAssem = 6,
            NestedFamORAssem = 7,
            LayoutMask = 24,
            AutoLayout = 0,
            SequentialLayout = 8,
            ExplicitLayout = 16,
            ClassSemanticsMask = 32,
            Class = 0,
            Interface = 32,
            Abstract = 128,
            Sealed = 256,
            SpecialName = 1024,
            Import = 4096,
            Serializable = 8192,
            WindowsRuntime = 16384,
            StringFormatMask = 196608,
            AnsiClass = 0,
            UnicodeClass = 65536,
            AutoClass = 131072,
            CustomFormatClass = 196608,
            CustomFormatMask = 12582912,
            BeforeFieldInit = 1048576,
            RTSpecialName = 2048,
            HasSecurity = 262144,
            ReservedMask = 264192,
        }

        class TypeDelegator : System.Reflection.TypeInfo
        {
            /*0x18*/ System.Type typeImpl;

            /*0x70e7020*/ TypeDelegator(System.Type delegatingType);
            /*0x70ec238*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);
            /*0x70ec2f8*/ System.Guid get_GUID();
            /*0x70ec31c*/ int get_MetadataToken();
            /*0x70ec340*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0x70ec36c*/ System.Reflection.Module get_Module();
            /*0x70ec390*/ System.Reflection.Assembly get_Assembly();
            /*0x70ec3b4*/ System.RuntimeTypeHandle get_TypeHandle();
            /*0x70ec3d8*/ string get_Name();
            /*0x70ec3f8*/ string get_FullName();
            /*0x70ec41c*/ string get_Namespace();
            /*0x70ec440*/ string get_AssemblyQualifiedName();
            /*0x70ec464*/ System.Type get_BaseType();
            /*0x70ec488*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70ec4a4*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0x70ec4c8*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70ec4f4*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0x70ec518*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70ec53c*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0x70ec560*/ System.Type GetInterface(string name, bool ignoreCase);
            /*0x70ec588*/ System.Type[] GetInterfaces();
            /*0x70ec5ac*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70ec5d0*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70ec69c*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0x70ec6c0*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70ec6e4*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0x70ec708*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
            /*0x70ec72c*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0x70ec748*/ bool get_IsSZArray();
            /*0x70ec76c*/ bool IsArrayImpl();
            /*0x70ec788*/ bool IsPrimitiveImpl();
            /*0x70ec7a4*/ bool IsByRefImpl();
            /*0x70ec7c0*/ bool get_IsGenericMethodParameter();
            /*0x70ec7e4*/ bool IsPointerImpl();
            /*0x70ec800*/ bool IsValueTypeImpl();
            /*0x70ec81c*/ bool IsCOMObjectImpl();
            /*0x70ec838*/ bool get_IsConstructedGenericType();
            /*0x70ec85c*/ bool get_IsCollectible();
            /*0x70ec880*/ System.Type GetElementType();
            /*0x70ec8a4*/ bool HasElementTypeImpl();
            /*0x70ec8c0*/ System.Type get_UnderlyingSystemType();
            /*0x70ec8e4*/ object[] GetCustomAttributes(bool inherit);
            /*0x70ec90c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70ec934*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70ec958*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType);
        }

        class TypeFilter : System.MulticastDelegate
        {
            /*0x70e8a04*/ TypeFilter(object object, nint method);
            /*0x70ec998*/ bool Invoke(System.Type m, object filterCriteria);
        }

        class TypeInfo : System.Type, System.Reflection.IReflectableType
        {
            /*0x70ec2c4*/ TypeInfo();
            /*0x70ec9ac*/ System.Reflection.TypeInfo System.Reflection.IReflectableType.GetTypeInfo();
            /*0x70ec9b0*/ System.Type AsType();
            /*0x70ec9b4*/ System.Reflection.FieldInfo GetDeclaredField(string name);
            /*0x70ec9c8*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetDeclaredMethods(string name);
            /*0x70eca94*/ System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> get_DeclaredConstructors();
            /*0x70ecaa8*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> get_DeclaredMethods();
            /*0x70ecabc*/ System.Collections.Generic.IEnumerable<System.Type> get_ImplementedInterfaces();
            /*0x70ecacc*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);

            class <GetDeclaredMethods>d__10 : System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Reflection.MethodInfo <>2__current;
                /*0x20*/ int <>l__initialThreadId;
                /*0x28*/ System.Reflection.TypeInfo <>4__this;
                /*0x30*/ string name;
                /*0x38*/ string <>3__name;
                /*0x40*/ System.Reflection.MethodInfo[] <>7__wrap1;
                /*0x48*/ int <>7__wrap2;

                /*0x70eca60*/ <GetDeclaredMethods>d__10(int <>1__state);
                /*0x70ecc3c*/ void System.IDisposable.Dispose();
                /*0x70ecc40*/ bool MoveNext();
                /*0x70ecd40*/ System.Reflection.MethodInfo System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>.get_Current();
                /*0x70ecd48*/ void System.Collections.IEnumerator.Reset();
                /*0x70ecd80*/ object System.Collections.IEnumerator.get_Current();
                /*0x70ecd88*/ System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo> System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>.GetEnumerator();
                /*0x70ece3c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            }
        }

        class RuntimeReflectionExtensions
        {
            static /*0x70ece40*/ System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> GetRuntimeFields(System.Type type);
            static /*0x70ecee4*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetRuntimeMethods(System.Type type);
            static /*0x70ecf88*/ System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRuntimeProperties(System.Type type);
            static /*0x70ed02c*/ System.Reflection.FieldInfo GetRuntimeField(System.Type type, string name);
            static /*0x70ed0d4*/ System.Reflection.MethodInfo GetRuntimeMethod(System.Type type, string name, System.Type[] parameters);
            static /*0x70ed184*/ System.Reflection.PropertyInfo GetRuntimeProperty(System.Type type, string name);
        }

        struct CustomAttributeNamedArgument
        {
            /*0x10*/ System.Reflection.CustomAttributeTypedArgument <TypedValue>k__BackingField;
            /*0x20*/ bool <IsField>k__BackingField;
            /*0x28*/ string <MemberName>k__BackingField;
            /*0x30*/ System.Type _attributeType;
            /*0x38*/ System.Reflection.MemberInfo _lazyMemberInfo;

            static /*0x70ed81c*/ bool op_Equality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            static /*0x70ed89c*/ bool op_Inequality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            /*0x70ed22c*/ CustomAttributeNamedArgument(System.Type attributeType, string memberName, bool isField, System.Reflection.CustomAttributeTypedArgument typedValue);
            /*0x70ed29c*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, object value);
            /*0x70ed4e8*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument);
            /*0x70ed634*/ System.Reflection.CustomAttributeTypedArgument get_TypedValue();
            /*0x70ed640*/ bool get_IsField();
            /*0x70ed648*/ string get_MemberName();
            /*0x70ed650*/ System.Reflection.MemberInfo get_MemberInfo();
            /*0x70ed738*/ bool Equals(object obj);
            /*0x70ed7b0*/ int GetHashCode();
            /*0x70ed920*/ string ToString();
        }

        struct CustomAttributeTypedArgument
        {
            /*0x10*/ System.Type <ArgumentType>k__BackingField;
            /*0x18*/ object <Value>k__BackingField;

            static /*0x70ee708*/ bool op_Equality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0x70ee780*/ bool op_Inequality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0x70ee59c*/ object CanonicalizeValue(object value);
            /*0x70ee504*/ CustomAttributeTypedArgument(object value);
            /*0x70e6bb8*/ CustomAttributeTypedArgument(System.Type argumentType, object value);
            /*0x70ee624*/ System.Type get_ArgumentType();
            /*0x70ee62c*/ object get_Value();
            /*0x70ee634*/ bool Equals(object obj);
            /*0x70ee6a4*/ int GetHashCode();
            /*0x70ee7fc*/ string ToString();
            /*0x70edc2c*/ string ToString(bool typed);
        }

        class MissingMetadataException : System.TypeAccessException
        {
            /*0x70ee804*/ MissingMetadataException();
        }

        class CustomAttributeExtensions
        {
            static /*0x70ee80c*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
            static /*0x70ee814*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
            static /*0x3910ae8*/ T GetCustomAttribute<T>(System.Reflection.Assembly element);
            static /*0x3910ae8*/ T GetCustomAttribute<T>(System.Reflection.MemberInfo element);
            static /*0x70ee81c*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
            static /*0x3910ae8*/ T GetCustomAttribute<T>(System.Reflection.MemberInfo element, bool inherit);
            static /*0x70ee828*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element);
            static /*0x70ee830*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
            static /*0x70ee838*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType);
            static /*0x38379c4*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.Assembly element);
            static /*0x38379c4*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element);
            static /*0x70ee840*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
            static /*0x3838ba0*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element, bool inherit);
            static /*0x70ee84c*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        }

        enum CorElementType
        {
            End = 0,
            Void = 1,
            Boolean = 2,
            Char = 3,
            I1 = 4,
            U1 = 5,
            I2 = 6,
            U2 = 7,
            I4 = 8,
            U4 = 9,
            I8 = 10,
            U8 = 11,
            R4 = 12,
            R8 = 13,
            String = 14,
            Ptr = 15,
            ByRef = 16,
            ValueType = 17,
            Class = 18,
            Var = 19,
            Array = 20,
            GenericInst = 21,
            TypedByRef = 22,
            I = 24,
            U = 25,
            FnPtr = 27,
            Object = 28,
            SzArray = 29,
            MVar = 30,
            CModReqd = 31,
            CModOpt = 32,
            Internal = 33,
            Max = 34,
            Modifier = 64,
            Sentinel = 65,
            Pinned = 69,
            ELEMENT_TYPE_END = 0,
            ELEMENT_TYPE_VOID = 1,
            ELEMENT_TYPE_BOOLEAN = 2,
            ELEMENT_TYPE_CHAR = 3,
            ELEMENT_TYPE_I1 = 4,
            ELEMENT_TYPE_U1 = 5,
            ELEMENT_TYPE_I2 = 6,
            ELEMENT_TYPE_U2 = 7,
            ELEMENT_TYPE_I4 = 8,
            ELEMENT_TYPE_U4 = 9,
            ELEMENT_TYPE_I8 = 10,
            ELEMENT_TYPE_U8 = 11,
            ELEMENT_TYPE_R4 = 12,
            ELEMENT_TYPE_R8 = 13,
            ELEMENT_TYPE_STRING = 14,
            ELEMENT_TYPE_PTR = 15,
            ELEMENT_TYPE_BYREF = 16,
            ELEMENT_TYPE_VALUETYPE = 17,
            ELEMENT_TYPE_CLASS = 18,
            ELEMENT_TYPE_VAR = 19,
            ELEMENT_TYPE_ARRAY = 20,
            ELEMENT_TYPE_GENERICINST = 21,
            ELEMENT_TYPE_TYPEDBYREF = 22,
            ELEMENT_TYPE_I = 24,
            ELEMENT_TYPE_U = 25,
            ELEMENT_TYPE_FNPTR = 27,
            ELEMENT_TYPE_OBJECT = 28,
            ELEMENT_TYPE_SZARRAY = 29,
            ELEMENT_TYPE_MVAR = 30,
            ELEMENT_TYPE_CMOD_REQD = 31,
            ELEMENT_TYPE_CMOD_OPT = 32,
            ELEMENT_TYPE_INTERNAL = 33,
            ELEMENT_TYPE_MAX = 34,
            ELEMENT_TYPE_MODIFIER = 64,
            ELEMENT_TYPE_SENTINEL = 65,
            ELEMENT_TYPE_PINNED = 69,
        }

        enum PInvokeAttributes
        {
            NoMangle = 1,
            CharSetMask = 6,
            CharSetNotSpec = 0,
            CharSetAnsi = 2,
            CharSetUnicode = 4,
            CharSetAuto = 6,
            BestFitUseAssem = 0,
            BestFitEnabled = 16,
            BestFitDisabled = 32,
            BestFitMask = 48,
            ThrowOnUnmappableCharUseAssem = 0,
            ThrowOnUnmappableCharEnabled = 4096,
            ThrowOnUnmappableCharDisabled = 8192,
            ThrowOnUnmappableCharMask = 12288,
            SupportsLastError = 64,
            CallConvMask = 1792,
            CallConvWinapi = 256,
            CallConvCdecl = 512,
            CallConvStdcall = 768,
            CallConvThiscall = 1024,
            CallConvFastcall = 1280,
            MaxValue = 65535,
        }

        class MemberInfoSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
        {
            /*0x10*/ string m_memberName;
            /*0x18*/ System.RuntimeType m_reflectedType;
            /*0x20*/ string m_signature;
            /*0x28*/ string m_signature2;
            /*0x30*/ System.Reflection.MemberTypes m_memberType;
            /*0x38*/ System.Runtime.Serialization.SerializationInfo m_info;

            static /*0x70ee854*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, System.Reflection.MemberTypes type);
            static /*0x70ee864*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, string signature2, System.Reflection.MemberTypes type, System.Type[] genericArguments);
            /*0x70eeb5c*/ MemberInfoSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70eeec4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70eef1c*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
        }

        class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Assembly
        {
            static /*0x70efcac*/ System.Reflection.Assembly GetAssembly(System.Type type);
            static /*0x70f023c*/ System.Reflection.Assembly LoadFrom(string assemblyFile, bool refOnly, ref System.Threading.StackCrawlMark stackMark);
            static /*0x70f0244*/ System.Reflection.Assembly Load(string assemblyString);
            static /*0x70f026c*/ System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString);
            static /*0x70f02b4*/ System.Reflection.Assembly LoadWithPartialName(string partialName);
            static /*0x70f02c8*/ System.Reflection.Assembly load_with_partial_name(string name, System.Security.Policy.Evidence e);
            static /*0x70f02c0*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence);
            static /*0x70f02cc*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence, bool oldBehavior);
            static /*0x70f036c*/ System.Reflection.Assembly GetExecutingAssembly();
            static /*0x70f03ac*/ System.Reflection.Assembly GetCallingAssembly();
            static /*0x70f03b0*/ nint InternalGetReferencedAssemblies(System.Reflection.Assembly module);
            static /*0x70f03ec*/ System.Reflection.AssemblyName[] GetReferencedAssemblies(System.Reflection.Assembly module);
            static /*0x70f09fc*/ System.Exception CreateNIE();
            static /*0x70f0b00*/ bool op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            static /*0x70f01e4*/ bool op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            /*0x70f0b50*/ Assembly();
            /*0x70ef7c8*/ string get_CodeBase();
            /*0x70ef800*/ string get_FullName();
            /*0x70ef838*/ nint get_MonoAssembly();
            /*0x70ef870*/ string get_Location();
            /*0x70ef8a8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70ef8e0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70ef918*/ object[] GetCustomAttributes(bool inherit);
            /*0x70ef950*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70ef988*/ System.IO.Stream GetManifestResourceStream(string name);
            /*0x70ef9c0*/ System.IO.Stream GetManifestResourceStream(System.Type type, string name, bool skipSecurityCheck, ref System.Threading.StackCrawlMark stackMark);
            /*0x70efb40*/ System.IO.Stream GetManifestResourceStream(string name, ref System.Threading.StackCrawlMark stackMark, bool skipSecurityCheck);
            /*0x70efb50*/ string GetSimpleName();
            /*0x70efb7c*/ byte[] GetPublicKey();
            /*0x70efba8*/ System.Version GetVersion();
            /*0x70efbd4*/ System.Reflection.AssemblyNameFlags GetFlags();
            /*0x70efc00*/ System.Type[] GetTypes(bool exportedOnly);
            /*0x70efc08*/ System.Type[] GetTypes();
            /*0x70efc1c*/ System.Type GetType(string name, bool throwOnError);
            /*0x70efc34*/ System.Type GetType(string name);
            /*0x70efc4c*/ System.Type InternalGetType(System.Reflection.Module module, string name, bool throwOnError, bool ignoreCase);
            /*0x70efc58*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x70efc90*/ System.Reflection.AssemblyName GetName();
            /*0x70efca4*/ string ToString();
            /*0x70efd4c*/ System.Reflection.RuntimeAssembly InternalGetSatelliteAssembly(string name, System.Globalization.CultureInfo culture, System.Version version, bool throwOnFileNotFound, ref System.Threading.StackCrawlMark stackMark);
            /*0x70f0334*/ System.Reflection.Module[] GetModulesInternal();
            /*0x70f03b4*/ string[] GetManifestResourceNames();
            /*0x70f097c*/ System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName);
            /*0x70f09b4*/ bool get_ReflectionOnly();
            /*0x70f09ec*/ int GetHashCode();
            /*0x70f09f4*/ bool Equals(object o);
            /*0x70f0a68*/ bool get_IsFullyTrusted();
            /*0x70f0a70*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x70f0a94*/ System.Reflection.Module GetModule(string name);
            /*0x70f0ab8*/ System.Reflection.AssemblyName[] GetReferencedAssemblies();
            /*0x70f0adc*/ System.Reflection.Module[] GetModules(bool getResourceModules);

            class ResolveEventHolder
            {
                /*0x70f0b58*/ ResolveEventHolder();
            }
        }

        class AssemblyName : System.ICloneable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.InteropServices._AssemblyName
        {
            /*0x10*/ string name;
            /*0x18*/ string codebase;
            /*0x20*/ int major;
            /*0x24*/ int minor;
            /*0x28*/ int build;
            /*0x2c*/ int revision;
            /*0x30*/ System.Globalization.CultureInfo cultureinfo;
            /*0x38*/ System.Reflection.AssemblyNameFlags flags;
            /*0x3c*/ System.Configuration.Assemblies.AssemblyHashAlgorithm hashalg;
            /*0x40*/ System.Reflection.StrongNameKeyPair keypair;
            /*0x48*/ byte[] publicKey;
            /*0x50*/ byte[] keyToken;
            /*0x58*/ System.Configuration.Assemblies.AssemblyVersionCompatibility versioncompat;
            /*0x60*/ System.Version version;
            /*0x68*/ System.Reflection.ProcessorArchitecture processor_architecture;
            /*0x6c*/ System.Reflection.AssemblyContentType contentType;

            static /*0x70f0b60*/ bool ParseAssemblyName(nint name, ref Mono.MonoAssemblyName aname, ref bool is_version_definited, ref bool is_token_defined);
            static /*0x70f1a2c*/ void get_public_token(byte* token, byte* pubkey, int len);
            static /*0x70f1e54*/ Mono.MonoAssemblyName* GetNativeName(nint assembly_ptr);
            static /*0x70f1e58*/ System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, bool fillCodebase);
            /*0x70f0154*/ AssemblyName();
            /*0x70f0b64*/ AssemblyName(string assemblyName);
            /*0x70f0dec*/ AssemblyName(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
            /*0x70f1380*/ string get_Name();
            /*0x70f1388*/ void set_Name(string value);
            /*0x70f1390*/ System.Globalization.CultureInfo get_CultureInfo();
            /*0x70f1398*/ void set_CultureInfo(System.Globalization.CultureInfo value);
            /*0x70f13a0*/ System.Reflection.AssemblyNameFlags get_Flags();
            /*0x70f13a8*/ void set_Flags(System.Reflection.AssemblyNameFlags value);
            /*0x70f13b0*/ string get_FullName();
            /*0x70f17ec*/ System.Version get_Version();
            /*0x70f0194*/ void set_Version(System.Version value);
            /*0x70f17f4*/ string ToString();
            /*0x70f181c*/ byte[] GetPublicKey();
            /*0x70f1824*/ byte[] GetPublicKeyToken();
            /*0x70f191c*/ bool get_IsPublicKeyValid();
            /*0x70f1708*/ byte[] InternalGetPublicKeyToken();
            /*0x70f19a0*/ byte[] ComputePublicKeyToken();
            /*0x70f0174*/ void SetPublicKey(byte[] publicKey);
            /*0x70f1a30*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f1d5c*/ object Clone();
            /*0x70f1e4c*/ void OnDeserialization(object sender);
            /*0x70f06a8*/ void FillName(Mono.MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef);
        }

        class CustomAttributeData
        {
            /*0x10*/ System.Reflection.ConstructorInfo ctorInfo;
            /*0x18*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs;
            /*0x20*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs;
            /*0x28*/ System.Reflection.CustomAttributeData.LazyCAttrData lazyData;

            static /*0x70f1ff8*/ void ResolveArgumentsInternal(System.Reflection.ConstructorInfo ctor, System.Reflection.Assembly assembly, nint data, uint data_length, ref object[] ctorArgs, ref object[] namedArgs);
            static /*0x70f221c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Assembly target);
            static /*0x70f2278*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.MemberInfo target);
            static /*0x70f22d4*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesInternal(System.RuntimeType target);
            static /*0x70f2330*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target);
            static /*0x70f238c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target);
            static /*0x38379c4*/ T[] UnboxValues<T>(object[] values);
            /*0x70f1f20*/ CustomAttributeData();
            /*0x70f1f28*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Reflection.Assembly assembly, nint data, uint data_length);
            /*0x70e6aac*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo);
            /*0x70e6e6c*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs, System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs);
            /*0x70f1ffc*/ void ResolveArguments();
            /*0x70f21e4*/ System.Reflection.ConstructorInfo get_Constructor();
            /*0x70f21ec*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> get_ConstructorArguments();
            /*0x70f2204*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> get_NamedArguments();
            /*0x70f23e8*/ System.Type get_AttributeType();
            /*0x70f2408*/ string ToString();
            /*0x70f2988*/ bool Equals(object obj);
            /*0x70f3000*/ int GetHashCode();

            class LazyCAttrData
            {
                /*0x10*/ System.Reflection.Assembly assembly;
                /*0x18*/ nint data;
                /*0x20*/ uint data_length;

                /*0x70f1ff0*/ LazyCAttrData();
            }
        }

        class ExceptionHandlingClause
        {
            /*0x10*/ System.Type catch_type;
            /*0x18*/ int filter_offset;
            /*0x1c*/ System.Reflection.ExceptionHandlingClauseOptions flags;
            /*0x20*/ int try_offset;
            /*0x24*/ int try_length;
            /*0x28*/ int handler_offset;
            /*0x2c*/ int handler_length;

            /*0x70f32f8*/ ExceptionHandlingClause();
            /*0x70f3300*/ string ToString();
        }

        class LocalVariableInfo
        {
            /*0x10*/ System.Type type;
            /*0x18*/ bool is_pinned;
            /*0x1a*/ ushort position;

            /*0x70f35e0*/ LocalVariableInfo();
            /*0x70f35e8*/ int get_LocalIndex();
            /*0x70f35f0*/ System.Type get_LocalType();
            /*0x70f35f8*/ string ToString();
        }

        class RuntimeAssembly : System.Reflection.Assembly
        {
            /*0x10*/ nint _mono_assembly;
            /*0x18*/ object _evidence;
            /*0x20*/ System.Reflection.Assembly.ResolveEventHolder resolve_event_holder;
            /*0x28*/ object _minimum;
            /*0x30*/ object _optional;
            /*0x38*/ object _refuse;
            /*0x40*/ object _granted;
            /*0x48*/ object _denied;
            /*0x50*/ bool fromByteArray;
            /*0x58*/ string assemblyName;

            static /*0x70f37a0*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(string partialName, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x70f3828*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.Reflection.AssemblyName an, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x70f3bd8*/ byte[] GetAotId();
            static /*0x70f3c34*/ string get_code_base(System.Reflection.Assembly a, bool escaped);
            static /*0x70f3c40*/ string get_fullname(System.Reflection.Assembly a);
            static /*0x70f3c30*/ bool GetAotIdInternal(byte[] aotid);
            static /*0x70f3c48*/ string GetCodeBase(System.Reflection.Assembly a, bool escaped);
            /*0x70f36ac*/ RuntimeAssembly();
            /*0x70f3718*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f3850*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x70f3858*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x70f3910*/ System.Reflection.Module GetModule(string name);
            /*0x70f3a38*/ System.Reflection.AssemblyName[] GetReferencedAssemblies();
            /*0x70f3a3c*/ System.Reflection.Module[] GetModules(bool getResourceModules);
            /*0x70f3c3c*/ string get_location();
            /*0x70f3c44*/ bool get_ReflectionOnly();
            /*0x70f3c50*/ string get_CodeBase();
            /*0x70f3c58*/ string get_FullName();
            /*0x70f3c5c*/ nint get_MonoAssembly();
            /*0x70f3c64*/ string get_Location();
            /*0x70f3c88*/ bool GetManifestResourceInfoInternal(string name, System.Reflection.ManifestResourceInfo info);
            /*0x70f3c8c*/ System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName);
            /*0x70f3d8c*/ string[] GetManifestResourceNames();
            /*0x70f3d90*/ nint GetManifestResourceInternal(string name, ref int size, ref System.Reflection.Module module);
            /*0x70f3d94*/ System.IO.Stream GetManifestResourceStream(string name);
            /*0x70f4124*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f4194*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f41fc*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f426c*/ System.Reflection.Module[] GetModulesInternal();
            /*0x70f4270*/ int GetHashCode();
            /*0x70f4278*/ bool Equals(object o);
            /*0x70f4314*/ string ToString();

            class UnmanagedMemoryStreamForModule : System.IO.UnmanagedMemoryStream
            {
                /*0x68*/ System.Reflection.Module module;

                /*0x70f40f4*/ UnmanagedMemoryStreamForModule(byte* pointer, long length, System.Reflection.Module module);
                /*0x70f435c*/ void Dispose(bool disposing);
            }
        }

        struct MonoEventInfo
        {
            /*0x10*/ System.Type declaring_type;
            /*0x18*/ System.Type reflected_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo add_method;
            /*0x30*/ System.Reflection.MethodInfo remove_method;
            /*0x38*/ System.Reflection.MethodInfo raise_method;
            /*0x40*/ System.Reflection.EventAttributes attrs;
            /*0x48*/ System.Reflection.MethodInfo[] other_methods;
        }

        class RuntimeEventInfo : System.Reflection.EventInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ nint klass;
            /*0x20*/ nint handle;

            static /*0x70f439c*/ void get_event_info(System.Reflection.RuntimeEventInfo ev, ref System.Reflection.MonoEventInfo info);
            static /*0x70f43a0*/ System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.RuntimeEventInfo ev);
            static /*0x70f4a8c*/ int get_metadata_token(System.Reflection.RuntimeEventInfo monoEvent);
            /*0x70f4a90*/ RuntimeEventInfo();
            /*0x70f43dc*/ System.Reflection.Module get_Module();
            /*0x70f43fc*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70f4550*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x70f45d4*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70f43e0*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70f4658*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f4400*/ System.Reflection.BindingFlags GetBindingFlags();
            /*0x70f46f4*/ System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            /*0x70f475c*/ System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x70f47c4*/ System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            /*0x70f482c*/ System.Type get_DeclaringType();
            /*0x70f4858*/ System.Type get_ReflectedType();
            /*0x70f4884*/ string get_Name();
            /*0x70f48b0*/ string ToString();
            /*0x70f4940*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f49b0*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f4a18*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f4a88*/ int get_MetadataToken();
        }

        class RtFieldInfo : System.Reflection.FieldInfo
        {
            /*0x70f4a98*/ RtFieldInfo();
            /*0x3814a3c*/ object UnsafeGetValue(object obj);
            void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x3816710*/ void CheckConsistency(object target);
        }

        class RuntimeFieldInfo : System.Reflection.RtFieldInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ System.RuntimeFieldHandle fhandle;
            /*0x20*/ string name;
            /*0x28*/ System.Type type;
            /*0x30*/ System.Reflection.FieldAttributes attrs;

            static /*0x70f541c*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
            static /*0x70f56cc*/ int get_metadata_token(System.Reflection.RuntimeFieldInfo monoField);
            /*0x70f56d0*/ RuntimeFieldInfo();
            /*0x70f4aa0*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70f4aa8*/ System.Reflection.Module get_Module();
            /*0x70f4ac8*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x70f4b4c*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70f4aac*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70f4bd0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f4c88*/ object UnsafeGetValue(object obj);
            /*0x70f4c8c*/ void CheckConsistency(object target);
            /*0x70f4dfc*/ void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x70f4e60*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x70f4fbc*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x70f4fc4*/ System.RuntimeFieldHandle get_FieldHandle();
            /*0x70f4fcc*/ System.Type ResolveType();
            /*0x70f4fd0*/ System.Type get_FieldType();
            /*0x70f5038*/ System.Type GetParentType(bool declaring);
            /*0x70f5040*/ System.Type get_ReflectedType();
            /*0x70f5048*/ System.Type get_DeclaringType();
            /*0x70f5050*/ string get_Name();
            /*0x70f5058*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f50c8*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f5130*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f51a0*/ int GetFieldOffset();
            /*0x70f51a4*/ object GetValueInternal(object obj);
            /*0x70f51a8*/ object GetValue(object obj);
            /*0x70f53b4*/ string ToString();
            /*0x70f5420*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x70f56c4*/ object GetRawConstantValue();
            /*0x70f5338*/ void CheckGeneric();
            /*0x70f56c8*/ int get_MetadataToken();
        }

        struct MonoMethodInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type ret;
            /*0x20*/ System.Reflection.MethodAttributes attrs;
            /*0x24*/ System.Reflection.MethodImplAttributes iattrs;
            /*0x28*/ System.Reflection.CallingConventions callconv;

            static /*0x70f56d8*/ void get_method_info(nint handle, ref System.Reflection.MonoMethodInfo info);
            static /*0x70f56dc*/ int get_method_attributes(nint handle);
            static /*0x70f56e0*/ System.Reflection.MonoMethodInfo GetMethodInfo(nint handle);
            static /*0x70f5710*/ System.Type GetDeclaringType(nint handle);
            static /*0x70f5738*/ System.Type GetReturnType(nint handle);
            static /*0x70f5760*/ System.Reflection.MethodAttributes GetAttributes(nint handle);
            static /*0x70f5764*/ System.Reflection.CallingConventions GetCallingConvention(nint handle);
            static /*0x70f578c*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags(nint handle);
            static /*0x70f57b4*/ System.Reflection.ParameterInfo[] get_parameter_info(nint handle, System.Reflection.MemberInfo member);
            static /*0x70f57b8*/ System.Reflection.ParameterInfo[] GetParametersInfo(nint handle, System.Reflection.MemberInfo member);
            static /*0x70f57bc*/ System.Runtime.InteropServices.MarshalAsAttribute get_retval_marshal(nint handle);
            static /*0x70f57c0*/ System.Reflection.ParameterInfo GetReturnParameterInfo(System.Reflection.RuntimeMethodInfo method);
        }

        class RuntimeMethodInfo : System.Reflection.MethodInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x70f5ed0*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle);
            static /*0x70f5ee4*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle reflectedType);
            static /*0x70e824c*/ System.Reflection.MethodBase GetMethodFromHandleInternalType(nint method_handle, nint type_handle);
            static /*0x70f5edc*/ System.Reflection.MethodBase GetMethodFromHandleInternalType_native(nint method_handle, nint type_handle, bool genericCheck);
            static /*0x70f5ef4*/ string get_name(System.Reflection.MethodBase method);
            static /*0x70f5ef8*/ System.Reflection.RuntimeMethodInfo get_base_method(System.Reflection.RuntimeMethodInfo method, bool definition);
            static /*0x70f5f00*/ int get_metadata_token(System.Reflection.RuntimeMethodInfo method);
            static /*0x70f62f4*/ void ConvertValues(System.Reflection.Binder binder, object[] args, System.Reflection.ParameterInfo[] pinfo, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
            static /*0x70f7664*/ int get_core_clr_security_level();
            /*0x70f5eec*/ RuntimeMethodInfo();
            /*0x70f5888*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70f5890*/ System.Reflection.Module get_Module();
            /*0x70f5920*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70f59a4*/ string FormatNameAndSig(bool serialization);
            /*0x70f5cf8*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x70f5d0c*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x70f5d24*/ string ToString();
            /*0x70f5894*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70f5db4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70ef72c*/ string SerializationToString();
            /*0x70f5f04*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0x70f5f0c*/ System.Reflection.MethodInfo GetBaseMethod();
            /*0x70f5f14*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0x70f5f18*/ System.Type get_ReturnType();
            /*0x70f5f44*/ int get_MetadataToken();
            /*0x70f5f48*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x70f5f74*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x70f6004*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x70f6010*/ int GetParametersCount();
            /*0x70f6034*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x70f6038*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70f65a8*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x70f65b0*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x70f65b8*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x70f65e4*/ System.Type get_ReflectedType();
            /*0x70f65ec*/ System.Type get_DeclaringType();
            /*0x70f6618*/ string get_Name();
            /*0x70f662c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f669c*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f6704*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f6774*/ void GetPInvoke(ref System.Reflection.PInvokeAttributes flags, ref string entryPoint, ref string dllName);
            /*0x70f6778*/ object[] GetPseudoCustomAttributes();
            /*0x70f68fc*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
            /*0x70f6ad4*/ System.Reflection.CustomAttributeData GetDllImportAttributeData();
            /*0x70f7228*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] methodInstantiation);
            /*0x70f7540*/ System.Reflection.MethodInfo MakeGenericMethod_impl(System.Type[] types);
            /*0x70f7544*/ System.Type[] GetGenericArguments();
            /*0x70f7548*/ System.Reflection.MethodInfo GetGenericMethodDefinition_impl();
            /*0x70f754c*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x70f7594*/ bool get_IsGenericMethodDefinition();
            /*0x70f7598*/ bool get_IsGenericMethod();
            /*0x70f759c*/ bool get_ContainsGenericParameters();
            /*0x70f766c*/ bool get_IsSecurityCritical();
        }

        class RuntimeConstructorInfo : System.Reflection.ConstructorInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x70f8090*/ int get_core_clr_security_level();
            static /*0x70f80a4*/ int get_metadata_token(System.Reflection.RuntimeConstructorInfo method);
            /*0x70f80a8*/ RuntimeConstructorInfo();
            /*0x70f7674*/ System.Reflection.Module get_Module();
            /*0x70f7678*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70f7700*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70f7708*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70f778c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70ef718*/ string SerializationToString();
            /*0x70f7860*/ void SerializationInvoke(object target, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f79a4*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x70f79d0*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x70f79dc*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x70f79e8*/ int GetParametersCount();
            /*0x70f7a08*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x70f7a0c*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70f7b0c*/ object DoInvoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70f7cc4*/ object InternalInvoke(object obj, object[] parameters, bool wrapExceptions);
            /*0x70f7e18*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70f7e30*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x70f7e38*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x70f7e40*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x70f7e6c*/ bool get_ContainsGenericParameters();
            /*0x70f7e98*/ System.Type get_ReflectedType();
            /*0x70f7ea0*/ System.Type get_DeclaringType();
            /*0x70f7ecc*/ string get_Name();
            /*0x70f7ee0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f7f50*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f7fb8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f8028*/ string ToString();
            /*0x70f8098*/ bool get_IsSecurityCritical();
            /*0x70f80a0*/ int get_MetadataToken();
        }

        class RuntimeModule : System.Reflection.Module
        {
            /*0x10*/ nint _impl;
            /*0x18*/ System.Reflection.Assembly assembly;
            /*0x20*/ string fqname;
            /*0x28*/ string name;
            /*0x30*/ string scopename;
            /*0x38*/ bool is_resource;
            /*0x3c*/ int token;

            static /*0x70f83fc*/ void GetGuidInternal(nint module, byte[] guid);
            /*0x70f8400*/ RuntimeModule();
            /*0x70f8100*/ System.Reflection.Assembly get_Assembly();
            /*0x70f8108*/ string get_ScopeName();
            /*0x70f8110*/ System.Guid get_ModuleVersionId();
            /*0x70f8120*/ bool IsResource();
            /*0x70f8128*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f8190*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f8200*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f8270*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f8304*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
            /*0x70f837c*/ System.Guid GetModuleVersionId();
        }

        class RuntimeParameterInfo : System.Reflection.ParameterInfo
        {
            /*0x40*/ System.Runtime.InteropServices.MarshalAsAttribute marshalAs;

            static /*0x70f5b04*/ void FormatParameters(System.Text.StringBuilder sb, System.Reflection.ParameterInfo[] p, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0x70f938c*/ System.Type[] GetTypeModifiers(System.Type type, System.Reflection.MemberInfo member, int position, bool optional);
            static /*0x70f9394*/ System.Reflection.ParameterInfo New(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            static /*0x70f5818*/ System.Reflection.ParameterInfo New(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x70f8458*/ RuntimeParameterInfo(string name, System.Type type, int position, int attrs, object defaultValue, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x70f8500*/ RuntimeParameterInfo(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            /*0x70f866c*/ RuntimeParameterInfo(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x70f86ec*/ object get_DefaultValue();
            /*0x70f89f4*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f8a50*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f85bc*/ object GetDefaultValueImpl(System.Reflection.ParameterInfo pinfo);
            /*0x70f8abc*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f8b2c*/ object[] GetPseudoCustomAttributes();
            /*0x70f8db8*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
            /*0x70f92ec*/ System.Type[] GetRequiredCustomModifiers();
            /*0x70f92f4*/ System.Type[] GetCustomModifiers(bool optional);
        }

        struct MonoPropertyInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type declaring_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo get_method;
            /*0x30*/ System.Reflection.MethodInfo set_method;
            /*0x38*/ System.Reflection.PropertyAttributes attrs;
        }

        enum PInfo
        {
            Attributes = 1,
            GetMethod = 2,
            SetMethod = 4,
            ReflectedType = 8,
            DeclaringType = 16,
            Name = 32,
        }

        class RuntimePropertyInfo : System.Reflection.PropertyInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ nint prop;
            /*0x20*/ System.Reflection.MonoPropertyInfo info;
            /*0x50*/ System.Reflection.PInfo cached;
            /*0x58*/ System.Reflection.RuntimePropertyInfo.GetterAdapter cached_getter;

            static /*0x70f93fc*/ void get_property_info(System.Reflection.RuntimePropertyInfo prop, ref System.Reflection.MonoPropertyInfo info, System.Reflection.PInfo req_info);
            static /*0x38395d4*/ object GetterAdapterFrame<T, R>(System.Reflection.RuntimePropertyInfo.Getter<T, R> getter, object obj);
            static /*0x38395d4*/ object StaticGetterAdapterFrame<R>(System.Reflection.RuntimePropertyInfo.StaticGetter<R> getter, object obj);
            static /*0x70fa114*/ int get_metadata_token(System.Reflection.RuntimePropertyInfo monoProperty);
            static /*0x70fa118*/ System.Reflection.PropertyInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x70fa11c*/ System.Reflection.PropertyInfo GetPropertyFromHandle(Mono.RuntimePropertyHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x70fa19c*/ RuntimePropertyInfo();
            /*0x70f9400*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70f9408*/ System.Reflection.Module get_Module();
            /*0x70f9428*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x70f94ac*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70f940c*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70f9530*/ string ToString();
            /*0x70f9538*/ string FormatNameAndSig(bool serialization);
            /*0x70f96a8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70ef710*/ string SerializationToString();
            /*0x70f9770*/ void CachePropertyInfo(System.Reflection.PInfo flags);
            /*0x70f97b0*/ bool get_CanRead();
            /*0x70f97f0*/ bool get_CanWrite();
            /*0x70f9830*/ System.Type get_PropertyType();
            /*0x70f98cc*/ System.Type get_ReflectedType();
            /*0x70f9904*/ System.Type get_DeclaringType();
            /*0x70f993c*/ string get_Name();
            /*0x70f9974*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x70f99e8*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x70f9b98*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x70f9c0c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70f9c78*/ object[] GetCustomAttributes(bool inherit);
            /*0x70f9cd4*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70f9d40*/ object GetValue(object obj, object[] index);
            /*0x70f9d60*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70f9f20*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70fa110*/ int get_MetadataToken();

            class GetterAdapter : System.MulticastDelegate
            {
                /*0x70fa1a4*/ GetterAdapter(object object, nint method);
                /*0x70fa2ac*/ object Invoke(object _this);
            }

            class Getter<T, R> : System.MulticastDelegate
            {
                Getter(object object, nint method);
                /*0x3910ae8*/ R Invoke(T _this);
            }

            class StaticGetter<R> : System.MulticastDelegate
            {
                StaticGetter(object object, nint method);
                /*0x3910ae8*/ R Invoke();
            }
        }

        class StrongNameKeyPair : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ byte[] _publicKey;
            /*0x18*/ string _keyPairContainer;
            /*0x20*/ bool _keyPairExported;
            /*0x28*/ byte[] _keyPairArray;

            /*0x70fa2c0*/ StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70fa4e4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70fa620*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        }

        namespace Emit
        {
            class AssemblyBuilder : System.Reflection.Assembly
            {
                static /*0x70fa624*/ System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);
                /*0x70fa65c*/ System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name);
                /*0x70fa694*/ void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder);
            }

            enum AssemblyBuilderAccess
            {
                Run = 1,
                Save = 2,
                RunAndSave = 3,
                ReflectionOnly = 6,
                RunAndCollect = 9,
            }

            class ConstructorBuilder : System.Reflection.ConstructorInfo
            {
                /*0x70fa6cc*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x70fa704*/ System.Type get_DeclaringType();
                /*0x70fa73c*/ string get_Name();
                /*0x70fa774*/ System.Reflection.Emit.ParameterBuilder DefineParameter(int iSequence, System.Reflection.ParameterAttributes attributes, string strParamName);
                /*0x70fa7ac*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x70fa7e4*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x70fa81c*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x70fa854*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x70fa88c*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x70fa8c4*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70fa8fc*/ object[] GetCustomAttributes(bool inherit);
                /*0x70fa934*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70fa96c*/ System.Type get_ReflectedType();
                /*0x70fa9a4*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            }

            class CustomAttributeBuilder
            {
                /*0x70fa9dc*/ CustomAttributeBuilder(System.Reflection.ConstructorInfo con, object[] constructorArgs);
                /*0x70faa1c*/ CustomAttributeBuilder(System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues);
            }

            class DynamicMethod : System.Reflection.MethodInfo
            {
                /*0x70faa5c*/ DynamicMethod(string name, System.Type returnType, System.Type[] parameterTypes);
                /*0x70faa98*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x70faad0*/ System.Reflection.CallingConventions get_CallingConvention();
                /*0x70fab08*/ System.Type get_DeclaringType();
                /*0x70fab40*/ System.Reflection.Module get_Module();
                /*0x70fab78*/ string get_Name();
                /*0x70fabb0*/ System.Reflection.ParameterInfo get_ReturnParameter();
                /*0x70fabe8*/ System.Type get_ReturnType();
                /*0x70fac20*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x70fac58*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x70fac90*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x70facc8*/ System.Type get_ReflectedType();
                /*0x70fad00*/ System.Delegate CreateDelegate(System.Type delegateType);
                /*0x70fad38*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
                /*0x70fad70*/ object[] GetCustomAttributes(bool inherit);
                /*0x70fada8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70fade0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x70fae18*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x70fae50*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x70fae88*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70faec0*/ string ToString();
            }

            class EnumBuilder : System.Reflection.TypeInfo
            {
                /*0x70faef8*/ System.Reflection.Assembly get_Assembly();
                /*0x70faf30*/ string get_AssemblyQualifiedName();
                /*0x70faf68*/ System.Type get_BaseType();
                /*0x70fafa0*/ string get_FullName();
                /*0x70fafd8*/ System.Guid get_GUID();
                /*0x70fb010*/ System.Reflection.Module get_Module();
                /*0x70fb048*/ string get_Name();
                /*0x70fb080*/ string get_Namespace();
                /*0x70fb0b8*/ System.Type get_UnderlyingSystemType();
                /*0x70fb0f0*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x70fb128*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70fb160*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x70fb198*/ object[] GetCustomAttributes(bool inherit);
                /*0x70fb1d0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70fb208*/ System.Type GetElementType();
                /*0x70fb240*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70fb278*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70fb2b0*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x70fb2e8*/ System.Type GetInterface(string name, bool ignoreCase);
                /*0x70fb320*/ System.Type[] GetInterfaces();
                /*0x70fb358*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0x70fb390*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70fb3c8*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x70fb400*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70fb438*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x70fb470*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70fb4a8*/ bool HasElementTypeImpl();
                /*0x70fb4e0*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x70fb518*/ bool IsArrayImpl();
                /*0x70fb550*/ bool IsByRefImpl();
                /*0x70fb588*/ bool IsCOMObjectImpl();
                /*0x70fb5c0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70fb5f8*/ bool IsPointerImpl();
                /*0x70fb630*/ bool IsPrimitiveImpl();
            }

            class EventBuilder
            {
            }

            class FieldBuilder : System.Reflection.FieldInfo
            {
                /*0x70fb668*/ System.Reflection.FieldAttributes get_Attributes();
                /*0x70fb670*/ System.Type get_DeclaringType();
                /*0x70fb678*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x70fb680*/ System.Type get_FieldType();
                /*0x70fb688*/ string get_Name();
                /*0x70fb690*/ System.Type get_ReflectedType();
                /*0x70fb698*/ object[] GetCustomAttributes(bool inherit);
                /*0x70fb6a0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70fb6a8*/ object GetValue(object obj);
                /*0x70fb6b0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70fb6b8*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            }

            class GenericTypeParameterBuilder : System.Reflection.TypeInfo
            {
                /*0x70fb6f0*/ System.Reflection.Assembly get_Assembly();
                /*0x70fb728*/ string get_AssemblyQualifiedName();
                /*0x70fb760*/ System.Type get_BaseType();
                /*0x70fb798*/ string get_FullName();
                /*0x70fb7d0*/ System.Guid get_GUID();
                /*0x70fb808*/ System.Reflection.Module get_Module();
                /*0x70fb840*/ string get_Name();
                /*0x70fb878*/ string get_Namespace();
                /*0x70fb8b0*/ System.Type get_UnderlyingSystemType();
                /*0x70fb8e8*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x70fb920*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70fb958*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x70fb990*/ object[] GetCustomAttributes(bool inherit);
                /*0x70fb9c8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70fba00*/ System.Type GetElementType();
                /*0x70fba38*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70fba70*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70fbaa8*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x70fbae0*/ System.Type GetInterface(string name, bool ignoreCase);
                /*0x70fbb18*/ System.Type[] GetInterfaces();
                /*0x70fbb50*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0x70fbb88*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70fbbc0*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x70fbbf8*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70fbc30*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x70fbc68*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70fbca0*/ bool HasElementTypeImpl();
                /*0x70fbcd8*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x70fbd10*/ bool IsArrayImpl();
                /*0x70fbd48*/ bool IsByRefImpl();
                /*0x70fbd80*/ bool IsCOMObjectImpl();
                /*0x70fbdb8*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70fbdf0*/ bool IsPointerImpl();
                /*0x70fbe28*/ bool IsPrimitiveImpl();
            }

            class ILGenerator
            {
                /*0x70fbe60*/ System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type localType);
                /*0x70fbe98*/ System.Reflection.Emit.Label DefineLabel();
                /*0x70fbed0*/ void Emit(System.Reflection.Emit.OpCode opcode);
                /*0x70fbf08*/ void Emit(System.Reflection.Emit.OpCode opcode, byte arg);
                /*0x70fbf40*/ void Emit(System.Reflection.Emit.OpCode opcode, short arg);
                /*0x70fbf78*/ void Emit(System.Reflection.Emit.OpCode opcode, int arg);
                /*0x70fbfb0*/ void Emit(System.Reflection.Emit.OpCode opcode, long arg);
                /*0x70fbfe8*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);
                /*0x70fc020*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);
                /*0x70fc058*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);
                /*0x70fc090*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);
                /*0x70fc0c8*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);
                /*0x70fc100*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);
                /*0x70fc138*/ void Emit(System.Reflection.Emit.OpCode opcode, sbyte arg);
                /*0x70fc170*/ void Emit(System.Reflection.Emit.OpCode opcode, string str);
                /*0x70fc1a8*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Type cls);
                /*0x70fc1e0*/ void MarkLabel(System.Reflection.Emit.Label loc);
            }

            struct Label : System.IEquatable<System.Reflection.Emit.Label>
            {
                /*0x10*/ int label;

                /*0x70fc218*/ bool Equals(object obj);
                /*0x70fc290*/ bool Equals(System.Reflection.Emit.Label obj);
                /*0x70fc2a0*/ int GetHashCode();
            }

            class LocalBuilder : System.Reflection.LocalVariableInfo
            {
                /*0x20*/ string name;
                /*0x28*/ System.Reflection.Emit.ILGenerator ilgen;
                /*0x30*/ int startOffset;
                /*0x34*/ int endOffset;
            }

            class MethodBuilder : System.Reflection.MethodInfo
            {
                /*0x70fc2a8*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x70fc2e0*/ System.Type get_DeclaringType();
                /*0x70fc318*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x70fc350*/ string get_Name();
                /*0x70fc388*/ System.Type get_ReflectedType();
                /*0x70fc3c0*/ System.Reflection.Emit.ParameterBuilder DefineParameter(int position, System.Reflection.ParameterAttributes attributes, string strParamName);
                /*0x70fc3f8*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x70fc430*/ object[] GetCustomAttributes(bool inherit);
                /*0x70fc468*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70fc4a0*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x70fc4d8*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x70fc510*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x70fc548*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x70fc580*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class ModuleBuilder : System.Reflection.Module
            {
                /*0x70fc5b8*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr, System.Type parent);
                /*0x70fc5f0*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces);
            }

            struct OpCode : System.IEquatable<System.Reflection.Emit.OpCode>
            {
                /*0x10*/ byte op1;
                /*0x11*/ byte op2;
                /*0x12*/ byte push;
                /*0x13*/ byte pop;
                /*0x14*/ byte size;
                /*0x15*/ byte type;
                /*0x16*/ byte args;
                /*0x17*/ byte flow;

                /*0x70fc628*/ OpCode(int p, int q);
                /*0x70fc664*/ int GetHashCode();
                /*0x70fc728*/ bool Equals(object obj);
                /*0x70fc7b0*/ bool Equals(System.Reflection.Emit.OpCode obj);
                /*0x70fc7d8*/ string ToString();
                /*0x70fc684*/ string get_Name();
            }

            class OpCodeNames
            {
                static /*0x0*/ string[] names;

                static /*0x70fc7dc*/ OpCodeNames();
            }

            class OpCodes
            {
                static /*0x0*/ System.Reflection.Emit.OpCode Nop;
                static /*0x8*/ System.Reflection.Emit.OpCode Break;
                static /*0x10*/ System.Reflection.Emit.OpCode Ldarg_0;
                static /*0x18*/ System.Reflection.Emit.OpCode Ldarg_1;
                static /*0x20*/ System.Reflection.Emit.OpCode Ldarg_2;
                static /*0x28*/ System.Reflection.Emit.OpCode Ldarg_3;
                static /*0x30*/ System.Reflection.Emit.OpCode Ldloc_0;
                static /*0x38*/ System.Reflection.Emit.OpCode Ldloc_1;
                static /*0x40*/ System.Reflection.Emit.OpCode Ldloc_2;
                static /*0x48*/ System.Reflection.Emit.OpCode Ldloc_3;
                static /*0x50*/ System.Reflection.Emit.OpCode Stloc_0;
                static /*0x58*/ System.Reflection.Emit.OpCode Stloc_1;
                static /*0x60*/ System.Reflection.Emit.OpCode Stloc_2;
                static /*0x68*/ System.Reflection.Emit.OpCode Stloc_3;
                static /*0x70*/ System.Reflection.Emit.OpCode Ldarg_S;
                static /*0x78*/ System.Reflection.Emit.OpCode Ldarga_S;
                static /*0x80*/ System.Reflection.Emit.OpCode Starg_S;
                static /*0x88*/ System.Reflection.Emit.OpCode Ldloc_S;
                static /*0x90*/ System.Reflection.Emit.OpCode Ldloca_S;
                static /*0x98*/ System.Reflection.Emit.OpCode Stloc_S;
                static /*0xa0*/ System.Reflection.Emit.OpCode Ldnull;
                static /*0xa8*/ System.Reflection.Emit.OpCode Ldc_I4_M1;
                static /*0xb0*/ System.Reflection.Emit.OpCode Ldc_I4_0;
                static /*0xb8*/ System.Reflection.Emit.OpCode Ldc_I4_1;
                static /*0xc0*/ System.Reflection.Emit.OpCode Ldc_I4_2;
                static /*0xc8*/ System.Reflection.Emit.OpCode Ldc_I4_3;
                static /*0xd0*/ System.Reflection.Emit.OpCode Ldc_I4_4;
                static /*0xd8*/ System.Reflection.Emit.OpCode Ldc_I4_5;
                static /*0xe0*/ System.Reflection.Emit.OpCode Ldc_I4_6;
                static /*0xe8*/ System.Reflection.Emit.OpCode Ldc_I4_7;
                static /*0xf0*/ System.Reflection.Emit.OpCode Ldc_I4_8;
                static /*0xf8*/ System.Reflection.Emit.OpCode Ldc_I4_S;
                static /*0x100*/ System.Reflection.Emit.OpCode Ldc_I4;
                static /*0x108*/ System.Reflection.Emit.OpCode Ldc_I8;
                static /*0x110*/ System.Reflection.Emit.OpCode Ldc_R4;
                static /*0x118*/ System.Reflection.Emit.OpCode Ldc_R8;
                static /*0x120*/ System.Reflection.Emit.OpCode Dup;
                static /*0x128*/ System.Reflection.Emit.OpCode Pop;
                static /*0x130*/ System.Reflection.Emit.OpCode Jmp;
                static /*0x138*/ System.Reflection.Emit.OpCode Call;
                static /*0x140*/ System.Reflection.Emit.OpCode Calli;
                static /*0x148*/ System.Reflection.Emit.OpCode Ret;
                static /*0x150*/ System.Reflection.Emit.OpCode Br_S;
                static /*0x158*/ System.Reflection.Emit.OpCode Brfalse_S;
                static /*0x160*/ System.Reflection.Emit.OpCode Brtrue_S;
                static /*0x168*/ System.Reflection.Emit.OpCode Beq_S;
                static /*0x170*/ System.Reflection.Emit.OpCode Bge_S;
                static /*0x178*/ System.Reflection.Emit.OpCode Bgt_S;
                static /*0x180*/ System.Reflection.Emit.OpCode Ble_S;
                static /*0x188*/ System.Reflection.Emit.OpCode Blt_S;
                static /*0x190*/ System.Reflection.Emit.OpCode Bne_Un_S;
                static /*0x198*/ System.Reflection.Emit.OpCode Bge_Un_S;
                static /*0x1a0*/ System.Reflection.Emit.OpCode Bgt_Un_S;
                static /*0x1a8*/ System.Reflection.Emit.OpCode Ble_Un_S;
                static /*0x1b0*/ System.Reflection.Emit.OpCode Blt_Un_S;
                static /*0x1b8*/ System.Reflection.Emit.OpCode Br;
                static /*0x1c0*/ System.Reflection.Emit.OpCode Brfalse;
                static /*0x1c8*/ System.Reflection.Emit.OpCode Brtrue;
                static /*0x1d0*/ System.Reflection.Emit.OpCode Beq;
                static /*0x1d8*/ System.Reflection.Emit.OpCode Bge;
                static /*0x1e0*/ System.Reflection.Emit.OpCode Bgt;
                static /*0x1e8*/ System.Reflection.Emit.OpCode Ble;
                static /*0x1f0*/ System.Reflection.Emit.OpCode Blt;
                static /*0x1f8*/ System.Reflection.Emit.OpCode Bne_Un;
                static /*0x200*/ System.Reflection.Emit.OpCode Bge_Un;
                static /*0x208*/ System.Reflection.Emit.OpCode Bgt_Un;
                static /*0x210*/ System.Reflection.Emit.OpCode Ble_Un;
                static /*0x218*/ System.Reflection.Emit.OpCode Blt_Un;
                static /*0x220*/ System.Reflection.Emit.OpCode Switch;
                static /*0x228*/ System.Reflection.Emit.OpCode Ldind_I1;
                static /*0x230*/ System.Reflection.Emit.OpCode Ldind_U1;
                static /*0x238*/ System.Reflection.Emit.OpCode Ldind_I2;
                static /*0x240*/ System.Reflection.Emit.OpCode Ldind_U2;
                static /*0x248*/ System.Reflection.Emit.OpCode Ldind_I4;
                static /*0x250*/ System.Reflection.Emit.OpCode Ldind_U4;
                static /*0x258*/ System.Reflection.Emit.OpCode Ldind_I8;
                static /*0x260*/ System.Reflection.Emit.OpCode Ldind_I;
                static /*0x268*/ System.Reflection.Emit.OpCode Ldind_R4;
                static /*0x270*/ System.Reflection.Emit.OpCode Ldind_R8;
                static /*0x278*/ System.Reflection.Emit.OpCode Ldind_Ref;
                static /*0x280*/ System.Reflection.Emit.OpCode Stind_Ref;
                static /*0x288*/ System.Reflection.Emit.OpCode Stind_I1;
                static /*0x290*/ System.Reflection.Emit.OpCode Stind_I2;
                static /*0x298*/ System.Reflection.Emit.OpCode Stind_I4;
                static /*0x2a0*/ System.Reflection.Emit.OpCode Stind_I8;
                static /*0x2a8*/ System.Reflection.Emit.OpCode Stind_R4;
                static /*0x2b0*/ System.Reflection.Emit.OpCode Stind_R8;
                static /*0x2b8*/ System.Reflection.Emit.OpCode Add;
                static /*0x2c0*/ System.Reflection.Emit.OpCode Sub;
                static /*0x2c8*/ System.Reflection.Emit.OpCode Mul;
                static /*0x2d0*/ System.Reflection.Emit.OpCode Div;
                static /*0x2d8*/ System.Reflection.Emit.OpCode Div_Un;
                static /*0x2e0*/ System.Reflection.Emit.OpCode Rem;
                static /*0x2e8*/ System.Reflection.Emit.OpCode Rem_Un;
                static /*0x2f0*/ System.Reflection.Emit.OpCode And;
                static /*0x2f8*/ System.Reflection.Emit.OpCode Or;
                static /*0x300*/ System.Reflection.Emit.OpCode Xor;
                static /*0x308*/ System.Reflection.Emit.OpCode Shl;
                static /*0x310*/ System.Reflection.Emit.OpCode Shr;
                static /*0x318*/ System.Reflection.Emit.OpCode Shr_Un;
                static /*0x320*/ System.Reflection.Emit.OpCode Neg;
                static /*0x328*/ System.Reflection.Emit.OpCode Not;
                static /*0x330*/ System.Reflection.Emit.OpCode Conv_I1;
                static /*0x338*/ System.Reflection.Emit.OpCode Conv_I2;
                static /*0x340*/ System.Reflection.Emit.OpCode Conv_I4;
                static /*0x348*/ System.Reflection.Emit.OpCode Conv_I8;
                static /*0x350*/ System.Reflection.Emit.OpCode Conv_R4;
                static /*0x358*/ System.Reflection.Emit.OpCode Conv_R8;
                static /*0x360*/ System.Reflection.Emit.OpCode Conv_U4;
                static /*0x368*/ System.Reflection.Emit.OpCode Conv_U8;
                static /*0x370*/ System.Reflection.Emit.OpCode Callvirt;
                static /*0x378*/ System.Reflection.Emit.OpCode Cpobj;
                static /*0x380*/ System.Reflection.Emit.OpCode Ldobj;
                static /*0x388*/ System.Reflection.Emit.OpCode Ldstr;
                static /*0x390*/ System.Reflection.Emit.OpCode Newobj;
                static /*0x398*/ System.Reflection.Emit.OpCode Castclass;
                static /*0x3a0*/ System.Reflection.Emit.OpCode Isinst;
                static /*0x3a8*/ System.Reflection.Emit.OpCode Conv_R_Un;
                static /*0x3b0*/ System.Reflection.Emit.OpCode Unbox;
                static /*0x3b8*/ System.Reflection.Emit.OpCode Throw;
                static /*0x3c0*/ System.Reflection.Emit.OpCode Ldfld;
                static /*0x3c8*/ System.Reflection.Emit.OpCode Ldflda;
                static /*0x3d0*/ System.Reflection.Emit.OpCode Stfld;
                static /*0x3d8*/ System.Reflection.Emit.OpCode Ldsfld;
                static /*0x3e0*/ System.Reflection.Emit.OpCode Ldsflda;
                static /*0x3e8*/ System.Reflection.Emit.OpCode Stsfld;
                static /*0x3f0*/ System.Reflection.Emit.OpCode Stobj;
                static /*0x3f8*/ System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;
                static /*0x400*/ System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;
                static /*0x408*/ System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;
                static /*0x410*/ System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;
                static /*0x418*/ System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;
                static /*0x420*/ System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;
                static /*0x428*/ System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;
                static /*0x430*/ System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;
                static /*0x438*/ System.Reflection.Emit.OpCode Conv_Ovf_I_Un;
                static /*0x440*/ System.Reflection.Emit.OpCode Conv_Ovf_U_Un;
                static /*0x448*/ System.Reflection.Emit.OpCode Box;
                static /*0x450*/ System.Reflection.Emit.OpCode Newarr;
                static /*0x458*/ System.Reflection.Emit.OpCode Ldlen;
                static /*0x460*/ System.Reflection.Emit.OpCode Ldelema;
                static /*0x468*/ System.Reflection.Emit.OpCode Ldelem_I1;
                static /*0x470*/ System.Reflection.Emit.OpCode Ldelem_U1;
                static /*0x478*/ System.Reflection.Emit.OpCode Ldelem_I2;
                static /*0x480*/ System.Reflection.Emit.OpCode Ldelem_U2;
                static /*0x488*/ System.Reflection.Emit.OpCode Ldelem_I4;
                static /*0x490*/ System.Reflection.Emit.OpCode Ldelem_U4;
                static /*0x498*/ System.Reflection.Emit.OpCode Ldelem_I8;
                static /*0x4a0*/ System.Reflection.Emit.OpCode Ldelem_I;
                static /*0x4a8*/ System.Reflection.Emit.OpCode Ldelem_R4;
                static /*0x4b0*/ System.Reflection.Emit.OpCode Ldelem_R8;
                static /*0x4b8*/ System.Reflection.Emit.OpCode Ldelem_Ref;
                static /*0x4c0*/ System.Reflection.Emit.OpCode Stelem_I;
                static /*0x4c8*/ System.Reflection.Emit.OpCode Stelem_I1;
                static /*0x4d0*/ System.Reflection.Emit.OpCode Stelem_I2;
                static /*0x4d8*/ System.Reflection.Emit.OpCode Stelem_I4;
                static /*0x4e0*/ System.Reflection.Emit.OpCode Stelem_I8;
                static /*0x4e8*/ System.Reflection.Emit.OpCode Stelem_R4;
                static /*0x4f0*/ System.Reflection.Emit.OpCode Stelem_R8;
                static /*0x4f8*/ System.Reflection.Emit.OpCode Stelem_Ref;
                static /*0x500*/ System.Reflection.Emit.OpCode Ldelem;
                static /*0x508*/ System.Reflection.Emit.OpCode Stelem;
                static /*0x510*/ System.Reflection.Emit.OpCode Unbox_Any;
                static /*0x518*/ System.Reflection.Emit.OpCode Conv_Ovf_I1;
                static /*0x520*/ System.Reflection.Emit.OpCode Conv_Ovf_U1;
                static /*0x528*/ System.Reflection.Emit.OpCode Conv_Ovf_I2;
                static /*0x530*/ System.Reflection.Emit.OpCode Conv_Ovf_U2;
                static /*0x538*/ System.Reflection.Emit.OpCode Conv_Ovf_I4;
                static /*0x540*/ System.Reflection.Emit.OpCode Conv_Ovf_U4;
                static /*0x548*/ System.Reflection.Emit.OpCode Conv_Ovf_I8;
                static /*0x550*/ System.Reflection.Emit.OpCode Conv_Ovf_U8;
                static /*0x558*/ System.Reflection.Emit.OpCode Refanyval;
                static /*0x560*/ System.Reflection.Emit.OpCode Ckfinite;
                static /*0x568*/ System.Reflection.Emit.OpCode Mkrefany;
                static /*0x570*/ System.Reflection.Emit.OpCode Ldtoken;
                static /*0x578*/ System.Reflection.Emit.OpCode Conv_U2;
                static /*0x580*/ System.Reflection.Emit.OpCode Conv_U1;
                static /*0x588*/ System.Reflection.Emit.OpCode Conv_I;
                static /*0x590*/ System.Reflection.Emit.OpCode Conv_Ovf_I;
                static /*0x598*/ System.Reflection.Emit.OpCode Conv_Ovf_U;
                static /*0x5a0*/ System.Reflection.Emit.OpCode Add_Ovf;
                static /*0x5a8*/ System.Reflection.Emit.OpCode Add_Ovf_Un;
                static /*0x5b0*/ System.Reflection.Emit.OpCode Mul_Ovf;
                static /*0x5b8*/ System.Reflection.Emit.OpCode Mul_Ovf_Un;
                static /*0x5c0*/ System.Reflection.Emit.OpCode Sub_Ovf;
                static /*0x5c8*/ System.Reflection.Emit.OpCode Sub_Ovf_Un;
                static /*0x5d0*/ System.Reflection.Emit.OpCode Endfinally;
                static /*0x5d8*/ System.Reflection.Emit.OpCode Leave;
                static /*0x5e0*/ System.Reflection.Emit.OpCode Leave_S;
                static /*0x5e8*/ System.Reflection.Emit.OpCode Stind_I;
                static /*0x5f0*/ System.Reflection.Emit.OpCode Conv_U;
                static /*0x5f8*/ System.Reflection.Emit.OpCode Prefix7;
                static /*0x600*/ System.Reflection.Emit.OpCode Prefix6;
                static /*0x608*/ System.Reflection.Emit.OpCode Prefix5;
                static /*0x610*/ System.Reflection.Emit.OpCode Prefix4;
                static /*0x618*/ System.Reflection.Emit.OpCode Prefix3;
                static /*0x620*/ System.Reflection.Emit.OpCode Prefix2;
                static /*0x628*/ System.Reflection.Emit.OpCode Prefix1;
                static /*0x630*/ System.Reflection.Emit.OpCode Prefixref;
                static /*0x638*/ System.Reflection.Emit.OpCode Arglist;
                static /*0x640*/ System.Reflection.Emit.OpCode Ceq;
                static /*0x648*/ System.Reflection.Emit.OpCode Cgt;
                static /*0x650*/ System.Reflection.Emit.OpCode Cgt_Un;
                static /*0x658*/ System.Reflection.Emit.OpCode Clt;
                static /*0x660*/ System.Reflection.Emit.OpCode Clt_Un;
                static /*0x668*/ System.Reflection.Emit.OpCode Ldftn;
                static /*0x670*/ System.Reflection.Emit.OpCode Ldvirtftn;
                static /*0x678*/ System.Reflection.Emit.OpCode Ldarg;
                static /*0x680*/ System.Reflection.Emit.OpCode Ldarga;
                static /*0x688*/ System.Reflection.Emit.OpCode Starg;
                static /*0x690*/ System.Reflection.Emit.OpCode Ldloc;
                static /*0x698*/ System.Reflection.Emit.OpCode Ldloca;
                static /*0x6a0*/ System.Reflection.Emit.OpCode Stloc;
                static /*0x6a8*/ System.Reflection.Emit.OpCode Localloc;
                static /*0x6b0*/ System.Reflection.Emit.OpCode Endfilter;
                static /*0x6b8*/ System.Reflection.Emit.OpCode Unaligned;
                static /*0x6c0*/ System.Reflection.Emit.OpCode Volatile;
                static /*0x6c8*/ System.Reflection.Emit.OpCode Tailcall;
                static /*0x6d0*/ System.Reflection.Emit.OpCode Initobj;
                static /*0x6d8*/ System.Reflection.Emit.OpCode Constrained;
                static /*0x6e0*/ System.Reflection.Emit.OpCode Cpblk;
                static /*0x6e8*/ System.Reflection.Emit.OpCode Initblk;
                static /*0x6f0*/ System.Reflection.Emit.OpCode Rethrow;
                static /*0x6f8*/ System.Reflection.Emit.OpCode Sizeof;
                static /*0x700*/ System.Reflection.Emit.OpCode Refanytype;
                static /*0x708*/ System.Reflection.Emit.OpCode Readonly;

                static /*0x70ff37c*/ OpCodes();
            }

            class ParameterBuilder
            {
            }

            class PropertyBuilder : System.Reflection.PropertyInfo
            {
                /*0x7101c80*/ bool get_CanRead();
                /*0x7101cb8*/ bool get_CanWrite();
                /*0x7101cf0*/ System.Type get_DeclaringType();
                /*0x7101d28*/ string get_Name();
                /*0x7101d60*/ System.Type get_PropertyType();
                /*0x7101d98*/ System.Type get_ReflectedType();
                /*0x7101dd0*/ object[] GetCustomAttributes(bool inherit);
                /*0x7101e08*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x7101e40*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
                /*0x7101e78*/ System.Reflection.ParameterInfo[] GetIndexParameters();
                /*0x7101eb0*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
                /*0x7101ee8*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
                /*0x7101f20*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x7101f58*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            }

            class SignatureHelper
            {
            }

            class TypeBuilder : System.Reflection.TypeInfo
            {
                static int UnspecifiedTypeSize = 0;

                /*0x7101f90*/ System.Reflection.Assembly get_Assembly();
                /*0x7101fc8*/ string get_AssemblyQualifiedName();
                /*0x7102000*/ System.Type get_BaseType();
                /*0x7102038*/ string get_FullName();
                /*0x7102070*/ System.Guid get_GUID();
                /*0x71020a8*/ System.Reflection.Module get_Module();
                /*0x71020e0*/ string get_Name();
                /*0x7102118*/ string get_Namespace();
                /*0x7102150*/ System.Type get_UnderlyingSystemType();
                /*0x7102188*/ System.Reflection.TypeInfo CreateTypeInfo();
                /*0x71021c0*/ System.Reflection.Emit.ConstructorBuilder DefineConstructor(System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type[] parameterTypes);
                /*0x71021f8*/ System.Reflection.Emit.FieldBuilder DefineField(string fieldName, System.Type type, System.Reflection.FieldAttributes attributes);
                /*0x7102230*/ System.Reflection.Emit.MethodBuilder DefineMethod(string name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes);
                /*0x7102268*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x71022a0*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x71022d8*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x7102310*/ object[] GetCustomAttributes(bool inherit);
                /*0x7102348*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x7102380*/ System.Type GetElementType();
                /*0x71023b8*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x71023f0*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x7102428*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x7102460*/ System.Type GetInterface(string name, bool ignoreCase);
                /*0x7102498*/ System.Type[] GetInterfaces();
                /*0x71024d0*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0x7102508*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x7102540*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x7102578*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x71025b0*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x71025e8*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x7102620*/ bool HasElementTypeImpl();
                /*0x7102658*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x7102690*/ bool IsArrayImpl();
                /*0x71026c8*/ bool IsByRefImpl();
                /*0x7102700*/ bool IsCOMObjectImpl();
                /*0x7102738*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x7102770*/ bool IsPointerImpl();
                /*0x71027a8*/ bool IsPrimitiveImpl();
                /*0x71027e0*/ void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder);
            }

            class UnmanagedMarshal
            {
                /*0x7102818*/ UnmanagedMarshal();
            }
        }
    }

    namespace Numerics
    {
        class ConstantHelper
        {
            static /*0x7102820*/ byte GetByteWithAllBitsSet();
            static /*0x7102828*/ sbyte GetSByteWithAllBitsSet();
            static /*0x7102830*/ ushort GetUInt16WithAllBitsSet();
            static /*0x7102838*/ short GetInt16WithAllBitsSet();
            static /*0x7102840*/ uint GetUInt32WithAllBitsSet();
            static /*0x7102848*/ int GetInt32WithAllBitsSet();
            static /*0x7102850*/ ulong GetUInt64WithAllBitsSet();
            static /*0x7102858*/ long GetInt64WithAllBitsSet();
            static /*0x7102860*/ float GetSingleWithAllBitsSet();
            static /*0x710286c*/ double GetDoubleWithAllBitsSet();
        }

        struct Register
        {
            /*0x10*/ byte byte_0;
            /*0x11*/ byte byte_1;
            /*0x12*/ byte byte_2;
            /*0x13*/ byte byte_3;
            /*0x14*/ byte byte_4;
            /*0x15*/ byte byte_5;
            /*0x16*/ byte byte_6;
            /*0x17*/ byte byte_7;
            /*0x18*/ byte byte_8;
            /*0x19*/ byte byte_9;
            /*0x1a*/ byte byte_10;
            /*0x1b*/ byte byte_11;
            /*0x1c*/ byte byte_12;
            /*0x1d*/ byte byte_13;
            /*0x1e*/ byte byte_14;
            /*0x1f*/ byte byte_15;
            /*0x10*/ sbyte sbyte_0;
            /*0x11*/ sbyte sbyte_1;
            /*0x12*/ sbyte sbyte_2;
            /*0x13*/ sbyte sbyte_3;
            /*0x14*/ sbyte sbyte_4;
            /*0x15*/ sbyte sbyte_5;
            /*0x16*/ sbyte sbyte_6;
            /*0x17*/ sbyte sbyte_7;
            /*0x18*/ sbyte sbyte_8;
            /*0x19*/ sbyte sbyte_9;
            /*0x1a*/ sbyte sbyte_10;
            /*0x1b*/ sbyte sbyte_11;
            /*0x1c*/ sbyte sbyte_12;
            /*0x1d*/ sbyte sbyte_13;
            /*0x1e*/ sbyte sbyte_14;
            /*0x1f*/ sbyte sbyte_15;
            /*0x10*/ ushort uint16_0;
            /*0x12*/ ushort uint16_1;
            /*0x14*/ ushort uint16_2;
            /*0x16*/ ushort uint16_3;
            /*0x18*/ ushort uint16_4;
            /*0x1a*/ ushort uint16_5;
            /*0x1c*/ ushort uint16_6;
            /*0x1e*/ ushort uint16_7;
            /*0x10*/ short int16_0;
            /*0x12*/ short int16_1;
            /*0x14*/ short int16_2;
            /*0x16*/ short int16_3;
            /*0x18*/ short int16_4;
            /*0x1a*/ short int16_5;
            /*0x1c*/ short int16_6;
            /*0x1e*/ short int16_7;
            /*0x10*/ uint uint32_0;
            /*0x14*/ uint uint32_1;
            /*0x18*/ uint uint32_2;
            /*0x1c*/ uint uint32_3;
            /*0x10*/ int int32_0;
            /*0x14*/ int int32_1;
            /*0x18*/ int int32_2;
            /*0x1c*/ int int32_3;
            /*0x10*/ ulong uint64_0;
            /*0x18*/ ulong uint64_1;
            /*0x10*/ long int64_0;
            /*0x18*/ long int64_1;
            /*0x10*/ float single_0;
            /*0x14*/ float single_1;
            /*0x18*/ float single_2;
            /*0x1c*/ float single_3;
            /*0x10*/ double double_0;
            /*0x18*/ double double_1;
        }

        struct Vector<T> : System.IEquatable<System.Numerics.Vector<T>>, System.IFormattable
        {
            static /*0x0*/ int s_count;
            static /*0x0*/ System.Numerics.Vector<T> s_zero;
            static /*0x0*/ System.Numerics.Vector<T> s_one;
            static /*0x0*/ System.Numerics.Vector<T> s_allOnes;
            /*0x0*/ System.Numerics.Register register;

            static /*0x383e7a0*/ Vector();
            static /*0x382ad0c*/ int get_Count();
            static /*0x3910ae8*/ System.Numerics.Vector<T> get_Zero();
            static /*0x382ad0c*/ int InitializeCount();
            static /*0x3910ae8*/ bool op_Equality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x3910ae8*/ bool op_Inequality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x3910ae8*/ System.Numerics.Vector<ulong> op_Explicit(System.Numerics.Vector<T> value);
            static /*0x3910ae8*/ System.Numerics.Vector<T> Equals(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x3910ae8*/ bool ScalarEquals(T left, T right);
            static /*0x3910ae8*/ T GetOneValue();
            static /*0x3910ae8*/ T GetAllBitsSetValue();
            /*0x3910ae8*/ Vector(T value);
            /*0x3910ae8*/ Vector(void* dataPointer);
            /*0x3910ae8*/ Vector(void* dataPointer, int offset);
            /*0x3816710*/ Vector(ref System.Numerics.Register existingRegister);
            /*0x3910ae8*/ T get_Item(int index);
            /*0x38141c4*/ bool Equals(object obj);
            /*0x3910ae8*/ bool Equals(System.Numerics.Vector<T> other);
            /*0x3814574*/ int GetHashCode();
            /*0x38148bc*/ string ToString();
            /*0x3814b90*/ string ToString(string format, System.IFormatProvider formatProvider);

            struct VectorSizeHelper<T>
            {
                /*0x0*/ System.Numerics.Vector<T> _placeholder;
                /*0x0*/ byte _byte;
            }
        }

        class Vector
        {
            static /*0x3910ae8*/ System.Numerics.Vector<T> Equals<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x7102874*/ bool get_IsHardwareAccelerated();
            static /*0x3910ae8*/ System.Numerics.Vector<ulong> AsVectorUInt64<T>(System.Numerics.Vector<T> value);
        }

        namespace Hashing
        {
            class HashHelpers
            {
                static /*0x0*/ int RandomSeed;

                static /*0x710288c*/ HashHelpers();
                static /*0x710287c*/ int Combine(int h1, int h2);
            }
        }
    }

    namespace Globalization
    {
        class CharUnicodeInfo
        {
            static /*0x710291c*/ int InternalConvertToUtf32(string s, int index);
            static /*0x71029b0*/ int InternalConvertToUtf32(string s, int index, ref int charLength);
            static /*0x7102a64*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char ch);
            static /*0x7102a98*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
            static /*0x7102a80*/ System.Globalization.UnicodeCategory GetUnicodeCategory(int codePoint);
            static /*0x7102b5c*/ byte InternalGetCategoryValue(int ch, int offset);
            static /*0x7102b40*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string value, int index);
            static /*0x7102d4c*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string str, int index, ref int charLength);
            static /*0x7102d68*/ bool IsCombiningCategory(System.Globalization.UnicodeCategory uc);
            static /*0x7102d78*/ bool IsWhiteSpace(string s, int index);
            static /*0x7102d94*/ bool IsWhiteSpace(char c);
            static /*0x7102c0c*/ System.ReadOnlySpan<byte> get_CategoryLevel1Index();
            static /*0x7102c5c*/ System.ReadOnlySpan<byte> get_CategoryLevel2Index();
            static /*0x7102cac*/ System.ReadOnlySpan<byte> get_CategoryLevel3Index();
            static /*0x7102cfc*/ System.ReadOnlySpan<byte> get_CategoriesValue();
        }

        class CompareInfo : System.Runtime.Serialization.IDeserializationCallback
        {
            static System.Globalization.CompareOptions ValidIndexMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidCompareMaskOffFlags = -536870944;
            static System.Globalization.CompareOptions ValidHashCodeOfStringMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidSortkeyCtorMaskOffFlags = -536870944;
            static /*0x0*/ System.Globalization.CompareInfo Invariant;
            static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Globalization.ISimpleCollator> collators;
            static /*0x10*/ bool managedCollation;
            static /*0x11*/ bool managedCollationChecked;
            /*0x10*/ string m_name;
            /*0x18*/ string _sortName;
            /*0x20*/ System.Globalization.SortVersion m_SortVersion;
            /*0x28*/ int culture;
            /*0x30*/ System.Globalization.ISimpleCollator collator;

            static /*0x71074e0*/ CompareInfo();
            static /*0x7102dbc*/ int InvariantIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x710321c*/ int InvariantLastIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x7102e80*/ int InvariantFindString(char* source, int sourceCount, char* value, int valueCount, bool ignoreCase, bool start);
            static /*0x71032e8*/ char InvariantToUpper(char c);
            static /*0x710360c*/ System.Globalization.CompareInfo GetCompareInfo(string name);
            static /*0x71049b4*/ int CompareOrdinalIgnoreCase(string strA, int indexA, int lengthA, string strB, int indexB, int lengthB);
            static /*0x7103b50*/ int CompareOrdinalIgnoreCase(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
            static /*0x71062dc*/ int GetIgnoreCaseHash(string source);
            static /*0x7106a54*/ bool get_UseManagedCollation();
            static /*0x71074d4*/ int internal_compare_icall(char* str1, int length1, char* str2, int length2, System.Globalization.CompareOptions options);
            static /*0x7107320*/ int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            static /*0x71074d8*/ int internal_index_icall(char* source, int sindex, int count, char* value, int value_length, bool first);
            static /*0x7107140*/ int internal_index(string source, int sindex, int count, string value, bool first);
            static /*0x7104b28*/ int CompareStringOrdinalIgnoreCase(char* pString1, int length1, char* pString2, int length2);
            static /*0x7105bd8*/ int IndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x7106054*/ int LastIndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x71035a8*/ CompareInfo(System.Globalization.CultureInfo culture);
            /*0x7107574*/ CompareInfo();
            /*0x7103300*/ System.Globalization.SortKey InvariantCreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x71036c4*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x71036d0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x7103784*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x71036d4*/ void OnDeserialized();
            /*0x7103788*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7103814*/ string get_Name();
            /*0x71038a0*/ int Compare(string string1, string string2);
            /*0x71038b0*/ int Compare(string string1, string string2, System.Globalization.CompareOptions options);
            /*0x7103e40*/ int Compare(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0x710423c*/ int CompareOptionIgnoreCase(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2);
            /*0x7104468*/ int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x7104cac*/ bool IsPrefix(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x7105034*/ bool IsSuffix(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x71053b8*/ bool IsSuffix(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0x710541c*/ int IndexOf(string source, string value, System.Globalization.CompareOptions options);
            /*0x710548c*/ int IndexOf(string source, char value, int startIndex, System.Globalization.CompareOptions options);
            /*0x71054fc*/ int IndexOf(string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x7105928*/ int IndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x71057d4*/ int IndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x7105bf8*/ int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x7105f3c*/ int LastIndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x7106074*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            /*0x71061f4*/ bool Equals(object value);
            /*0x71062b4*/ int GetHashCode();
            /*0x7106728*/ int GetHashCodeOfString(string source, System.Globalization.CompareOptions options);
            /*0x71068f4*/ int GetHashCode(string source, System.Globalization.CompareOptions options);
            /*0x71069f4*/ string ToString();
            /*0x7106ba0*/ System.Globalization.ISimpleCollator GetCollator();
            /*0x7106ecc*/ System.Globalization.SortKey CreateSortKeyCore(string source, System.Globalization.CompareOptions options);
            /*0x7107004*/ int internal_index_switch(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x7103d44*/ int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x71073d4*/ int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x71071f4*/ int internal_index_managed(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x71035f0*/ void InitSort(System.Globalization.CultureInfo culture);
            /*0x710603c*/ int LastIndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x71058d4*/ int IndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options, int* matchLengthPtr);
            /*0x71041d8*/ int CompareString(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0x7104378*/ int CompareString(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2, System.Globalization.CompareOptions options);
            /*0x710613c*/ System.Globalization.SortKey CreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x7104ec0*/ bool StartsWith(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x7105248*/ bool EndsWith(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x71053bc*/ bool EndsWith(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0x71068c8*/ int GetHashCodeOfStringCore(string source, System.Globalization.CompareOptions options);
        }

        enum CompareOptions
        {
            None = 0,
            IgnoreCase = 1,
            IgnoreNonSpace = 2,
            IgnoreSymbols = 4,
            IgnoreKanaType = 8,
            IgnoreWidth = 16,
            OrdinalIgnoreCase = 268435456,
            StringSort = 536870912,
            Ordinal = 1073741824,
        }

        class CultureNotFoundException : System.ArgumentException
        {
            /*0x98*/ string _invalidCultureName;
            /*0xa0*/ System.Nullable<int> _invalidCultureId;

            static /*0x71075f8*/ string get_DefaultMessage();
            /*0x71075ac*/ CultureNotFoundException();
            /*0x7107638*/ CultureNotFoundException(string paramName, string message);
            /*0x710764c*/ CultureNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71077e4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x710792c*/ System.Nullable<int> get_InvalidCultureId();
            /*0x7107934*/ string get_InvalidCultureName();
            /*0x710793c*/ string get_FormatedInvalidCultureId();
            /*0x7107a6c*/ string get_Message();
        }

        enum CultureTypes
        {
            NeutralCultures = 1,
            SpecificCultures = 2,
            InstalledWin32Cultures = 4,
            AllCultures = 7,
            UserCustomCulture = 8,
            ReplacementCultures = 16,
            WindowsOnlyCultures = 32,
            FrameworkCultures = 64,
        }

        enum MonthNameStyles
        {
            Regular = 0,
            Genitive = 1,
            LeapYear = 2,
        }

        enum DateTimeFormatFlags
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewRule = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
            NotInitialized = -1,
        }

        class DateTimeFormatInfo : System.IFormatProvider, System.ICloneable
        {
            static string rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            static string sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
            static string universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            static int DEFAULT_ALL_DATETIMES_SIZE = 132;
            static string RoundtripFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK";
            static string RoundtripDateTimeUnfixed = "yyyy'-'MM'-'ddTHH':'mm':'ss zzz";
            static System.Globalization.DateTimeStyles InvalidDateTimeStyles = -256;
            static int TOKEN_HASH_SIZE = 199;
            static int SECOND_PRIME = 197;
            static string dateSeparatorOrTimeZoneOffset = "-";
            static string invariantDateSeparator = "/";
            static string invariantTimeSeparator = ":";
            static string IgnorablePeriod = ".";
            static string IgnorableComma = ",";
            static string CJKYearSuff = "年";
            static string CJKMonthSuff = "月";
            static string CJKDaySuff = "日";
            static string KoreanYearSuff = "년";
            static string KoreanMonthSuff = "월";
            static string KoreanDaySuff = "일";
            static string KoreanHourSuff = "시";
            static string KoreanMinuteSuff = "분";
            static string KoreanSecondSuff = "초";
            static string CJKHourSuff = "時";
            static string ChineseHourSuff = "时";
            static string CJKMinuteSuff = "分";
            static string CJKSecondSuff = "秒";
            static string JapaneseEraStart = "元";
            static string LocalTimeMark = "T";
            static string GMTName = "GMT";
            static string ZuluName = "Z";
            static string KoreanLangName = "ko";
            static string JapaneseLangName = "ja";
            static string EnglishLangName = "en";
            static /*0x0*/ System.Globalization.DateTimeFormatInfo s_invariantInfo;
            static /*0x8*/ char[] s_monthSpaces;
            static /*0x10*/ System.Globalization.DateTimeFormatInfo s_jajpDTFI;
            static /*0x18*/ System.Globalization.DateTimeFormatInfo s_zhtwDTFI;
            /*0x10*/ System.Globalization.CultureData _cultureData;
            /*0x18*/ string _name;
            /*0x20*/ string _langName;
            /*0x28*/ System.Globalization.CompareInfo _compareInfo;
            /*0x30*/ System.Globalization.CultureInfo _cultureInfo;
            /*0x38*/ string amDesignator;
            /*0x40*/ string pmDesignator;
            /*0x48*/ string dateSeparator;
            /*0x50*/ string generalShortTimePattern;
            /*0x58*/ string generalLongTimePattern;
            /*0x60*/ string timeSeparator;
            /*0x68*/ string monthDayPattern;
            /*0x70*/ string dateTimeOffsetPattern;
            /*0x78*/ System.Globalization.Calendar calendar;
            /*0x80*/ int firstDayOfWeek;
            /*0x84*/ int calendarWeekRule;
            /*0x88*/ string fullDateTimePattern;
            /*0x90*/ string[] abbreviatedDayNames;
            /*0x98*/ string[] m_superShortDayNames;
            /*0xa0*/ string[] dayNames;
            /*0xa8*/ string[] abbreviatedMonthNames;
            /*0xb0*/ string[] monthNames;
            /*0xb8*/ string[] genitiveMonthNames;
            /*0xc0*/ string[] m_genitiveAbbreviatedMonthNames;
            /*0xc8*/ string[] leapYearMonthNames;
            /*0xd0*/ string longDatePattern;
            /*0xd8*/ string shortDatePattern;
            /*0xe0*/ string yearMonthPattern;
            /*0xe8*/ string longTimePattern;
            /*0xf0*/ string shortTimePattern;
            /*0xf8*/ string[] allYearMonthPatterns;
            /*0x100*/ string[] allShortDatePatterns;
            /*0x108*/ string[] allLongDatePatterns;
            /*0x110*/ string[] allShortTimePatterns;
            /*0x118*/ string[] allLongTimePatterns;
            /*0x120*/ string[] m_eraNames;
            /*0x128*/ string[] m_abbrevEraNames;
            /*0x130*/ string[] m_abbrevEnglishEraNames;
            /*0x138*/ System.Globalization.CalendarId[] optionalCalendars;
            /*0x140*/ bool _isReadOnly;
            /*0x144*/ System.Globalization.DateTimeFormatFlags formatFlags;
            /*0x148*/ string _fullTimeSpanPositivePattern;
            /*0x150*/ string _fullTimeSpanNegativePattern;
            /*0x158*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] _dtfiTokenHash;

            static /*0x710d9dc*/ DateTimeFormatInfo();
            static /*0x71084a8*/ System.Globalization.DateTimeFormatInfo get_InvariantInfo();
            static /*0x7108588*/ System.Globalization.DateTimeFormatInfo get_CurrentInfo();
            static /*0x7108688*/ System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider);
            static /*0x7109ca0*/ string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString);
            static /*0x710a694*/ string[] GetMergedPatterns(string[] patterns, string defaultPattern);
            static /*0x710aac4*/ void ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
            static /*0x710af9c*/ System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI();
            static /*0x710b138*/ System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI();
            static /*0x710cb24*/ bool IsJapaneseCalendar(System.Globalization.Calendar calendar);
            static /*0x710cc4c*/ bool TryParseHebrewNumber(ref System.__DTString str, ref bool badFormat, ref int number);
            static /*0x710d028*/ bool IsHebrewChar(char ch);
            /*0x7107dec*/ DateTimeFormatInfo();
            /*0x710805c*/ DateTimeFormatInfo(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal);
            /*0x7107b28*/ string get_CultureName();
            /*0x7107b64*/ System.Globalization.CultureInfo get_Culture();
            /*0x7107bf0*/ string get_LanguageName();
            /*0x7107c2c*/ string[] internalGetAbbreviatedDayOfWeekNames();
            /*0x7107c40*/ string[] internalGetAbbreviatedDayOfWeekNamesCore();
            /*0x7107c9c*/ string[] internalGetDayOfWeekNames();
            /*0x7107cb0*/ string[] internalGetDayOfWeekNamesCore();
            /*0x7107d0c*/ string[] internalGetAbbreviatedMonthNames();
            /*0x7107d20*/ string[] internalGetAbbreviatedMonthNamesCore();
            /*0x7107d7c*/ string[] internalGetMonthNames();
            /*0x7107d90*/ string[] internalGetMonthNamesCore();
            /*0x7107edc*/ void InitializeOverridableProperties(System.Globalization.CultureData cultureData, int calendarId);
            /*0x710882c*/ object GetFormat(System.Type formatType);
            /*0x71088b8*/ object Clone();
            /*0x71089d0*/ string get_AMDesignator();
            /*0x7108a0c*/ System.Globalization.Calendar get_Calendar();
            /*0x71080ac*/ void set_Calendar(System.Globalization.Calendar value);
            /*0x7108ab8*/ System.Globalization.CalendarId[] get_OptionalCalendars();
            /*0x7108b28*/ string[] get_EraNames();
            /*0x7108b90*/ string GetEraName(int era);
            /*0x7108c68*/ string[] get_AbbreviatedEraNames();
            /*0x7108cd0*/ string GetAbbreviatedEraName(int era);
            /*0x7108db8*/ string[] get_AbbreviatedEnglishEraNames();
            /*0x7108e20*/ string get_DateSeparator();
            /*0x7108e8c*/ string get_FullDateTimePattern();
            /*0x7108f14*/ string get_LongDatePattern();
            /*0x7108f60*/ string get_LongTimePattern();
            /*0x710905c*/ string get_MonthDayPattern();
            /*0x71090c8*/ string get_PMDesignator();
            /*0x7109104*/ string get_RFC1123Pattern();
            /*0x7109144*/ string get_ShortDatePattern();
            /*0x71091f8*/ string get_ShortTimePattern();
            /*0x710928c*/ string get_SortableDateTimePattern();
            /*0x71092cc*/ string get_GeneralShortTimePattern();
            /*0x7109354*/ string get_GeneralLongTimePattern();
            /*0x71093dc*/ string get_DateTimeOffsetPattern();
            /*0x7109588*/ string get_TimeSeparator();
            /*0x71095c4*/ string get_UniversalSortableDateTimePattern();
            /*0x7109604*/ string get_YearMonthPattern();
            /*0x71096bc*/ string[] get_AbbreviatedDayNames();
            /*0x7109740*/ string[] get_DayNames();
            /*0x71097c4*/ string[] get_AbbreviatedMonthNames();
            /*0x7109848*/ string[] get_MonthNames();
            /*0x71098cc*/ bool get_HasSpacesInMonthNames();
            /*0x710990c*/ bool get_HasSpacesInDayNames();
            /*0x7109934*/ string internalGetMonthName(int month, System.Globalization.MonthNameStyles style, bool abbreviated);
            /*0x7109a90*/ string[] internalGetGenitiveMonthNames(bool abbreviated);
            /*0x7109b38*/ string[] internalGetLeapYearMonthNames();
            /*0x7109ba4*/ string GetAbbreviatedDayName(System.DayOfWeek dayofweek);
            /*0x7109dec*/ string[] GetAllDateTimePatterns(char format);
            /*0x710a3a8*/ string GetDayName(System.DayOfWeek dayofweek);
            /*0x710a4a4*/ string GetAbbreviatedMonthName(int month);
            /*0x710a59c*/ string GetMonthName(int month);
            /*0x710a334*/ string[] get_AllYearMonthPatterns();
            /*0x710a164*/ string[] get_AllShortDatePatterns();
            /*0x710a24c*/ string[] get_AllShortTimePatterns();
            /*0x710a1d8*/ string[] get_AllLongDatePatterns();
            /*0x710a2c0*/ string[] get_AllLongTimePatterns();
            /*0x7109650*/ string[] get_UnclonedYearMonthPatterns();
            /*0x7109190*/ string[] get_UnclonedShortDatePatterns();
            /*0x7108fac*/ string[] get_UnclonedLongDatePatterns();
            /*0x7109244*/ string[] get_UnclonedShortTimePatterns();
            /*0x7109014*/ string[] get_UnclonedLongTimePatterns();
            /*0x7108a14*/ bool get_IsReadOnly();
            /*0x710a854*/ string[] get_MonthGenitiveNames();
            /*0x710a8d4*/ string get_FullTimeSpanPositivePattern();
            /*0x710a9b4*/ string get_FullTimeSpanNegativePattern();
            /*0x710aa30*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x71098f4*/ System.Globalization.DateTimeFormatFlags get_FormatFlags();
            /*0x710ab90*/ System.Globalization.DateTimeFormatFlags InitializeFormatFlags();
            /*0x710ae0c*/ bool get_HasForceTwoDigitYears();
            /*0x710ae40*/ bool get_HasYearMonthAdjustment();
            /*0x710ae68*/ bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName);
            /*0x7108b00*/ void ClearTokenHashTable();
            /*0x710b2d4*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] CreateTokenHashTable();
            /*0x710be6c*/ void PopulateSpecialTokenHashTable(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, ref bool useDateSepAsIgnorableSymbol);
            /*0x710c744*/ void AddMonthNames(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, string monthPostfix);
            /*0x710d03c*/ bool IsAllowedJapaneseTokenFollowedByNonSpaceLetter(string tokenString, char nextCh);
            /*0x710d144*/ bool Tokenize(System.TokenType TokenMask, ref System.TokenType tokenType, ref int tokenValue, ref System.__DTString str);
            /*0x710d6d0*/ void InsertAtCurrentHashNode(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, char ch, System.TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
            /*0x710bb50*/ void InsertHash(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, System.TokenType tokenType, int tokenValue);
            /*0x710d8e8*/ bool CompareStringIgnoreCaseOptimized(string string1, int offset1, int length1, string string2, int offset2, int length2);

            class TokenHashValue
            {
                /*0x10*/ string tokenString;
                /*0x18*/ System.TokenType tokenType;
                /*0x1c*/ int tokenValue;

                /*0x710d8a0*/ TokenHashValue(string tokenString, System.TokenType tokenType, int tokenValue);
            }
        }

        enum FORMATFLAGS
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewParsing = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
        }

        enum CalendarId
        {
            UNINITIALIZED_VALUE = 0,
            GREGORIAN = 1,
            GREGORIAN_US = 2,
            JAPAN = 3,
            TAIWAN = 4,
            KOREA = 5,
            HIJRI = 6,
            THAI = 7,
            HEBREW = 8,
            GREGORIAN_ME_FRENCH = 9,
            GREGORIAN_ARABIC = 10,
            GREGORIAN_XLIT_ENGLISH = 11,
            GREGORIAN_XLIT_FRENCH = 12,
            JULIAN = 13,
            JAPANESELUNISOLAR = 14,
            CHINESELUNISOLAR = 15,
            SAKA = 16,
            LUNAR_ETO_CHN = 17,
            LUNAR_ETO_KOR = 18,
            LUNAR_ETO_ROKUYOU = 19,
            KOREANLUNISOLAR = 20,
            TAIWANLUNISOLAR = 21,
            PERSIAN = 22,
            UMALQURA = 23,
            LAST_CALENDAR = 23,
        }

        class DateTimeFormatInfoScanner
        {
            static /*0x0*/ System.Collections.Generic.Dictionary<string, string> s_knownWords;
            /*0x10*/ System.Collections.Generic.List<string> m_dateWords;
            /*0x18*/ System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern _ymdFlags;

            static /*0x710da74*/ System.Collections.Generic.Dictionary<string, string> get_KnownWords();
            static /*0x710de60*/ int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex);
            static /*0x710e564*/ int ScanRepeatChar(string pattern, char ch, int index, ref int count);
            static /*0x710accc*/ System.Globalization.FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x710ad0c*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x710adcc*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames);
            static /*0x710adfc*/ System.Globalization.FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID);
            static /*0x710e818*/ bool EqualStringArrays(string[] array1, string[] array2);
            static /*0x710eb24*/ bool ArrayElementsHaveSpace(string[] array);
            static /*0x710e8c8*/ bool ArrayElementsBeginWithDigit(string[] array);
            /*0x710c7f0*/ DateTimeFormatInfoScanner();
            /*0x710df3c*/ void AddDateWordOrPostfix(string formatPostfix, string str);
            /*0x710e390*/ int AddDateWords(string pattern, int index, string formatPostfix);
            /*0x710e21c*/ void AddIgnorableSymbols(string text);
            /*0x710e5e8*/ void ScanDateWord(string pattern);
            /*0x710c878*/ string[] GetDateWordsOfDTFI(System.Globalization.DateTimeFormatInfo dtfi);

            enum FoundDatePattern
            {
                None = 0,
                FoundYearPatternFlag = 1,
                FoundMonthPatternFlag = 2,
                FoundDayPatternFlag = 4,
                FoundYMDPatternFlag = 7,
            }
        }

        enum DateTimeStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowInnerWhite = 4,
            AllowWhiteSpaces = 7,
            NoCurrentDateDefault = 8,
            AdjustToUniversal = 16,
            AssumeLocal = 32,
            AssumeUniversal = 64,
            RoundtripKind = 128,
        }

        class DaylightTime
        {
            /*0x10*/ System.DateTime _start;
            /*0x18*/ System.DateTime _end;
            /*0x20*/ System.TimeSpan _delta;

            /*0x710ebfc*/ DaylightTime(System.DateTime start, System.DateTime end, System.TimeSpan delta);
            /*0x710ec38*/ System.DateTime get_Start();
            /*0x710ec40*/ System.DateTime get_End();
            /*0x710ec48*/ System.TimeSpan get_Delta();
        }

        struct DaylightTimeStruct
        {
            /*0x10*/ System.DateTime Start;
            /*0x18*/ System.DateTime End;
            /*0x20*/ System.TimeSpan Delta;

            /*0x710ec50*/ DaylightTimeStruct(System.DateTime start, System.DateTime end, System.TimeSpan delta);
        }

        struct HebrewNumberParsingContext
        {
            /*0x10*/ System.Globalization.HebrewNumber.HS state;
            /*0x14*/ int result;

            /*0x710ce84*/ HebrewNumberParsingContext(int result);
        }

        enum HebrewNumberParsingState
        {
            InvalidHebrewNumber = 0,
            NotHebrewDigit = 1,
            FoundEndOfHebrewNumber = 2,
            ContinueParsing = 3,
        }

        class HebrewNumber
        {
            static /*0x0*/ System.Globalization.HebrewNumber.HebrewValue[] s_hebrewValues;
            static /*0x8*/ char s_maxHebrewNumberCh;
            static /*0x10*/ System.Globalization.HebrewNumber.HS[] s_numberPasingState;

            static /*0x710eee0*/ HebrewNumber();
            static /*0x710ec5c*/ string ToString(int Number);
            static /*0x710ce90*/ System.Globalization.HebrewNumberParsingState ParseByChar(char ch, ref System.Globalization.HebrewNumberParsingContext context);
            static /*0x710cdb4*/ bool IsDigit(char ch);

            enum HebrewToken
            {
                Invalid = -1,
                Digit400 = 0,
                Digit200_300 = 1,
                Digit100 = 2,
                Digit10 = 3,
                Digit1 = 4,
                Digit6_7 = 5,
                Digit7 = 6,
                Digit9 = 7,
                SingleQuote = 8,
                DoubleQuote = 9,
            }

            struct HebrewValue
            {
                /*0x10*/ System.Globalization.HebrewNumber.HebrewToken token;
                /*0x12*/ short value;

                /*0x710f1a4*/ HebrewValue(System.Globalization.HebrewNumber.HebrewToken token, short value);
            }

            enum HS
            {
                _err = -1,
                Start = 0,
                S400 = 1,
                S400_400 = 2,
                S400_X00 = 3,
                S400_X0 = 4,
                X00_DQ = 5,
                S400_X00_X0 = 6,
                X0_DQ = 7,
                X = 8,
                X0 = 9,
                X00 = 10,
                S400_DQ = 11,
                S400_400_DQ = 12,
                S400_400_100 = 13,
                S9 = 14,
                X00_S9 = 15,
                S9_DQ = 16,
                END = 100,
            }
        }

        enum NumberStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowLeadingSign = 4,
            AllowTrailingSign = 8,
            AllowParentheses = 16,
            AllowDecimalPoint = 32,
            AllowThousands = 64,
            AllowExponent = 128,
            AllowCurrencySymbol = 256,
            AllowHexSpecifier = 512,
            Integer = 7,
            HexNumber = 515,
            Number = 111,
            Float = 167,
            Currency = 383,
            Any = 511,
        }

        class SortVersion
        {
        }

        class TimeSpanFormat
        {
            static /*0x0*/ System.Globalization.TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals;
            static /*0x28*/ System.Globalization.TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals;

            static /*0x711089c*/ TimeSpanFormat();
            static /*0x710f1b0*/ void AppendNonNegativeInt32(System.Text.StringBuilder sb, int n, int digits);
            static /*0x710f2a8*/ string Format(System.TimeSpan value, string format, System.IFormatProvider formatProvider);
            static /*0x710f638*/ bool TryFormat(System.TimeSpan value, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0x710f360*/ System.Text.StringBuilder FormatToBuilder(System.TimeSpan value, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0x710f758*/ System.Text.StringBuilder FormatStandard(System.TimeSpan value, bool isInvariant, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanFormat.Pattern pattern);
            static /*0x710fc34*/ System.Text.StringBuilder FormatCustomized(System.TimeSpan value, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Text.StringBuilder result);

            enum Pattern
            {
                None = 0,
                Minimum = 1,
                Full = 2,
            }

            struct FormatLiterals
            {
                /*0x10*/ string AppCompatLiteral;
                /*0x18*/ int dd;
                /*0x1c*/ int hh;
                /*0x20*/ int mm;
                /*0x24*/ int ss;
                /*0x28*/ int ff;
                /*0x30*/ string[] _literals;

                static /*0x711094c*/ System.Globalization.TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative);
                /*0x7110798*/ string get_Start();
                /*0x71107c0*/ string get_DayHourSep();
                /*0x71107ec*/ string get_HourMinuteSep();
                /*0x7110818*/ string get_MinuteSecondSep();
                /*0x7110844*/ string get_SecondFractionSep();
                /*0x7110870*/ string get_End();
                /*0x7110358*/ void Init(System.ReadOnlySpan<char> format, bool useInvariantFieldLengths);
            }
        }

        class TimeSpanParse
        {
            static /*0x7110708*/ long Pow10(int pow);
            static /*0x7110b34*/ bool TryTimeToTicks(bool positive, System.Globalization.TimeSpanParse.TimeSpanToken days, System.Globalization.TimeSpanParse.TimeSpanToken hours, System.Globalization.TimeSpanParse.TimeSpanToken minutes, System.Globalization.TimeSpanParse.TimeSpanToken seconds, System.Globalization.TimeSpanParse.TimeSpanToken fraction, ref long result);
            static /*0x7110c94*/ System.TimeSpan Parse(System.ReadOnlySpan<char> input, System.IFormatProvider formatProvider);
            static /*0x7110e90*/ bool TryParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, ref System.TimeSpan result);
            static /*0x7110cec*/ bool TryParseTimeSpan(System.ReadOnlySpan<char> input, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, System.IFormatProvider formatProvider, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x71110b0*/ bool ProcessTerminalState(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x7112c4c*/ bool ProcessTerminal_DHMSF(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x71121a8*/ bool ProcessTerminal_HMS_F_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x7111724*/ bool ProcessTerminal_HM_S_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x7111484*/ bool ProcessTerminal_HM(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x71111ec*/ bool ProcessTerminal_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x7110f24*/ bool TryParseExactTimeSpan(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x7112f1c*/ bool TryParseByFormat(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanStyles styles, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x71135c8*/ bool ParseExactDigits(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, int minDigitLength, ref int result);
            static /*0x71135fc*/ bool ParseExactDigits(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, int minDigitLength, int maxDigitLength, ref int zeroes, ref int result);
            static /*0x71136c0*/ bool ParseExactLiteral(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, System.Text.StringBuilder enquotedString);
            static /*0x7112ee4*/ bool TryParseTimeSpanConstant(System.ReadOnlySpan<char> input, ref System.Globalization.TimeSpanParse.TimeSpanResult result);

            enum ParseFailureKind
            {
                None = 0,
                ArgumentNull = 1,
                Format = 2,
                FormatWithParameter = 3,
                Overflow = 4,
            }

            enum TimeSpanStandardStyles
            {
                None = 0,
                Invariant = 1,
                Localized = 2,
                RequireFull = 4,
                Any = 3,
            }

            enum TTT
            {
                None = 0,
                End = 1,
                Num = 2,
                Sep = 3,
                NumOverflow = 4,
            }

            struct TimeSpanToken
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _ttt;
                /*0x14*/ int _num;
                /*0x18*/ int _zeroes;
                /*0x20*/ System.ReadOnlySpan<char> _sep;

                /*0x7130c24*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type);
                /*0x7130c44*/ TimeSpanToken(int number);
                /*0x7130c58*/ TimeSpanToken(int number, int leadingZeroes);
                /*0x7130c34*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type, int number, int leadingZeroes, System.ReadOnlySpan<char> separator);
                /*0x7130c6c*/ bool IsInvalidFraction();
            }

            struct TimeSpanTokenizer
            {
                /*0x10*/ System.ReadOnlySpan<char> _value;
                /*0x20*/ int _pos;

                /*0x7130ccc*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input);
                /*0x7130cd8*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input, int startPosition);
                /*0x7130ce4*/ System.Globalization.TimeSpanParse.TimeSpanToken GetNextToken();
                /*0x7130f54*/ bool get_EOL();
                /*0x7130fa0*/ void BackOne();
                /*0x7130fb4*/ char get_NextChar();
            }

            struct TimeSpanRawInfo
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _lastSeenTTT;
                /*0x14*/ int _tokenCount;
                /*0x18*/ int _sepCount;
                /*0x1c*/ int _numCount;
                /*0x20*/ System.Globalization.TimeSpanFormat.FormatLiterals _posLoc;
                /*0x48*/ System.Globalization.TimeSpanFormat.FormatLiterals _negLoc;
                /*0x70*/ bool _posLocInit;
                /*0x71*/ bool _negLocInit;
                /*0x78*/ string _fullPosPattern;
                /*0x80*/ string _fullNegPattern;
                /*0x88*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers0;
                /*0xa8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers1;
                /*0xc8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers2;
                /*0xe8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers3;
                /*0x108*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers4;
                /*0x128*/ System.ReadOnlySpan<char> _literals0;
                /*0x138*/ System.ReadOnlySpan<char> _literals1;
                /*0x148*/ System.ReadOnlySpan<char> _literals2;
                /*0x158*/ System.ReadOnlySpan<char> _literals3;
                /*0x168*/ System.ReadOnlySpan<char> _literals4;
                /*0x178*/ System.ReadOnlySpan<char> _literals5;

                /*0x7131014*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveInvariant();
                /*0x713107c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeInvariant();
                /*0x71310e8*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveLocalized();
                /*0x713119c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeLocalized();
                /*0x7131254*/ bool FullAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x7131604*/ bool PartialAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x713190c*/ bool FullMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x7131d70*/ bool FullDMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x7131f34*/ bool FullHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x71321a0*/ bool FullDHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x71324b4*/ bool FullHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x71327c8*/ bool FullDHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x7132b84*/ bool FullHMSFMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x7132f40*/ void Init(System.Globalization.DateTimeFormatInfo dtfi);
                /*0x7132f94*/ bool ProcessToken(ref System.Globalization.TimeSpanParse.TimeSpanToken tok, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x71330a4*/ bool AddSep(System.ReadOnlySpan<char> sep, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x71331b0*/ bool AddNum(System.Globalization.TimeSpanParse.TimeSpanToken num, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            }

            struct TimeSpanResult
            {
                /*0x10*/ System.TimeSpan parsedTimeSpan;
                /*0x18*/ bool _throwOnFailure;

                /*0x71333e8*/ TimeSpanResult(bool throwOnFailure);
                /*0x71332c0*/ bool SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind kind, string resourceKey, object messageArgument, string argumentName);
            }

            struct StringParser
            {
                /*0x10*/ System.ReadOnlySpan<char> _str;
                /*0x20*/ char _ch;
                /*0x24*/ int _pos;
                /*0x28*/ int _len;

                /*0x71333f8*/ void NextChar();
                /*0x7133444*/ char NextNonDigit();
                /*0x71334a0*/ bool TryParse(System.ReadOnlySpan<char> input, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x713386c*/ bool ParseInt(int max, ref int i, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x71336ac*/ bool ParseTime(ref long time, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x713367c*/ void SkipBlanks();
            }
        }

        enum TimeSpanStyles
        {
            None = 0,
            AssumeNegative = 1,
        }

        enum UnicodeCategory
        {
            UppercaseLetter = 0,
            LowercaseLetter = 1,
            TitlecaseLetter = 2,
            ModifierLetter = 3,
            OtherLetter = 4,
            NonSpacingMark = 5,
            SpacingCombiningMark = 6,
            EnclosingMark = 7,
            DecimalDigitNumber = 8,
            LetterNumber = 9,
            OtherNumber = 10,
            SpaceSeparator = 11,
            LineSeparator = 12,
            ParagraphSeparator = 13,
            Control = 14,
            Format = 15,
            Surrogate = 16,
            PrivateUse = 17,
            ConnectorPunctuation = 18,
            DashPunctuation = 19,
            OpenPunctuation = 20,
            ClosePunctuation = 21,
            InitialQuotePunctuation = 22,
            FinalQuotePunctuation = 23,
            OtherPunctuation = 24,
            MathSymbol = 25,
            CurrencySymbol = 26,
            ModifierSymbol = 27,
            OtherSymbol = 28,
            OtherNotAssigned = 29,
        }

        class GlobalizationMode
        {
            static /*0x0*/ bool <Invariant>k__BackingField;

            static /*0x71339e4*/ GlobalizationMode();
            static /*0x7133984*/ bool get_Invariant();
            static /*0x71339dc*/ bool GetGlobalizationInvariantMode();
        }

        class Calendar : System.ICloneable
        {
            /*0x10*/ int m_currentEraValue;
            /*0x14*/ bool m_isReadOnly;
            /*0x18*/ int twoDigitYearMax;

            static /*0x7134170*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            static /*0x7134318*/ int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue);
            /*0x7133adc*/ Calendar();
            /*0x7133a2c*/ System.DateTime get_MinSupportedDateTime();
            /*0x7133a84*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7133af0*/ int get_ID();
            /*0x7133af8*/ int get_BaseCalendarID();
            /*0x7133b04*/ object Clone();
            /*0x7133b8c*/ void VerifyWritable();
            /*0x7133bf8*/ void SetReadOnlyState(bool readOnly);
            /*0x7133c04*/ int get_CurrentEraValue();
            int GetDayOfMonth(System.DateTime time);
            System.DayOfWeek GetDayOfWeek(System.DateTime time);
            int GetDaysInMonth(int year, int month, int era);
            /*0x38145e4*/ int GetDaysInYear(int year, int era);
            int GetEra(System.DateTime time);
            /*0x38148bc*/ int[] get_Eras();
            int GetMonth(System.DateTime time);
            /*0x38145e4*/ int GetMonthsInYear(int year, int era);
            int GetYear(System.DateTime time);
            /*0x7133d34*/ bool IsLeapYear(int year);
            bool IsLeapYear(int year, int era);
            /*0x7133d48*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
            System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x7133d70*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x7133ed0*/ bool IsValidYear(int year, int era);
            /*0x7133f54*/ bool IsValidMonth(int year, int month, int era);
            /*0x7133fcc*/ bool IsValidDay(int year, int month, int day, int era);
            /*0x713404c*/ int get_TwoDigitYearMax();
            /*0x7134054*/ void set_TwoDigitYearMax(int value);
            /*0x7134078*/ int ToFourDigitYear(int year);
        }

        class CalendarData
        {
            static int MAX_CALENDARS = 23;
            static /*0x0*/ System.Globalization.CalendarData Invariant;
            static /*0x8*/ string[] HEBREW_MONTH_NAMES;
            static /*0x10*/ string[] HEBREW_LEAP_MONTH_NAMES;
            /*0x10*/ string sNativeName;
            /*0x18*/ string[] saShortDates;
            /*0x20*/ string[] saYearMonths;
            /*0x28*/ string[] saLongDates;
            /*0x30*/ string sMonthDay;
            /*0x38*/ string[] saEraNames;
            /*0x40*/ string[] saAbbrevEraNames;
            /*0x48*/ string[] saAbbrevEnglishEraNames;
            /*0x50*/ string[] saDayNames;
            /*0x58*/ string[] saAbbrevDayNames;
            /*0x60*/ string[] saSuperShortDayNames;
            /*0x68*/ string[] saMonthNames;
            /*0x70*/ string[] saAbbrevMonthNames;
            /*0x78*/ string[] saMonthGenitiveNames;
            /*0x80*/ string[] saAbbrevMonthGenitiveNames;
            /*0x88*/ string[] saLeapYearMonthNames;
            /*0x90*/ int iTwoDigitYearMax;
            /*0x94*/ int iCurrentEra;
            /*0x98*/ bool bUseUserOverrides;

            static /*0x7134384*/ CalendarData();
            static /*0x71364f8*/ string[] GetJapaneseEraNames();
            static /*0x7136414*/ string[] GetJapaneseEnglishEraNames();
            static /*0x7133c90*/ System.Globalization.CalendarData GetCalendarData(int calendarId);
            static /*0x71367c4*/ string CalendarIdToCultureName(int calendarId);
            static /*0x713436c*/ int nativeGetTwoDigitYearMax(int calID);
            static /*0x7135b78*/ bool nativeGetCalendarData(System.Globalization.CalendarData data, string localeName, int calendarId);
            /*0x7134374*/ CalendarData();
            /*0x7135578*/ CalendarData(string localeName, int calendarId, bool bUseUserOverrides);
            /*0x7135c50*/ void InitializeEraNames(string localeName, int calendarId);
            /*0x71360a8*/ void InitializeAbbreviatedEraNames(string localeName, int calendarId);
            /*0x71369c0*/ bool fill_calendar_data(string localeName, int datetimeIndex);
        }

        class GregorianCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x1c*/ System.Globalization.GregorianCalendarTypes m_type;

            static /*0x7137f04*/ GregorianCalendar();
            static /*0x7136b48*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x7136fa0*/ long GetAbsoluteDate(int year, int month, int day);
            /*0x7136c1c*/ GregorianCalendar();
            /*0x7136c48*/ GregorianCalendar(System.Globalization.GregorianCalendarTypes type);
            /*0x71369c4*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7136a98*/ System.DateTime get_MinSupportedDateTime();
            /*0x7136af0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7136d98*/ int get_ID();
            /*0x7136da0*/ int GetDatePart(long ticks, int part);
            /*0x7137190*/ int GetDayOfMonth(System.DateTime time);
            /*0x7137214*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x71372bc*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7137554*/ int GetDaysInYear(int year, int era);
            /*0x71376d8*/ int GetEra(System.DateTime time);
            /*0x71376e0*/ int[] get_Eras();
            /*0x7137744*/ int GetMonth(System.DateTime time);
            /*0x71377c8*/ int GetMonthsInYear(int year, int era);
            /*0x7137908*/ int GetYear(System.DateTime time);
            /*0x713798c*/ bool IsLeapYear(int year, int era);
            /*0x7137b18*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x7137bb4*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x7137ca0*/ int get_TwoDigitYearMax();
            /*0x7137ce4*/ void set_TwoDigitYearMax(int value);
            /*0x7137df0*/ int ToFourDigitYear(int year);
        }

        class EraInfo
        {
            /*0x10*/ int era;
            /*0x18*/ long ticks;
            /*0x20*/ int yearOffset;
            /*0x24*/ int minEraYear;
            /*0x28*/ int maxEraYear;
            /*0x30*/ string eraName;
            /*0x38*/ string abbrevEraName;
            /*0x40*/ string englishEraName;

            /*0x7137fe8*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear);
            /*0x71380cc*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName);
        }

        class GregorianCalendarHelper
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            /*0x10*/ int m_maxYear;
            /*0x14*/ int m_minYear;
            /*0x18*/ System.Globalization.Calendar m_Cal;
            /*0x20*/ System.Globalization.EraInfo[] m_EraInfo;
            /*0x28*/ int[] m_eras;
            /*0x30*/ System.DateTime m_minDate;

            static /*0x71397c8*/ GregorianCalendarHelper();
            static /*0x713899c*/ long GetAbsoluteDate(int year, int month, int day);
            static /*0x7138b8c*/ long DateToTicks(int year, int month, int day);
            static /*0x7138c0c*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            /*0x71381f0*/ GregorianCalendarHelper(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo);
            /*0x71381e8*/ int get_MaxYear();
            /*0x7138290*/ int GetYearOffset(int year, int era, bool throwOnError);
            /*0x7138570*/ int GetGregorianYear(int year, int era);
            /*0x713858c*/ bool IsValidYear(int year, int era);
            /*0x71385a8*/ int GetDatePart(long ticks, int part);
            /*0x71387b8*/ void CheckTicksRange(long ticks);
            /*0x7138db4*/ int GetDayOfMonth(System.DateTime time);
            /*0x7138e34*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x7138f00*/ int GetDaysInMonth(int year, int month, int era);
            /*0x713909c*/ int GetDaysInYear(int year, int era);
            /*0x7139108*/ int GetEra(System.DateTime time);
            /*0x7139210*/ int[] get_Eras();
            /*0x7139318*/ int GetMonth(System.DateTime time);
            /*0x7139398*/ int GetMonthsInYear(int year, int era);
            /*0x71393b0*/ int GetYear(System.DateTime time);
            /*0x71394d8*/ bool IsLeapYear(int year, int era);
            /*0x7139548*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x713964c*/ int ToFourDigitYear(int year, int twoDigitYearMax);
        }

        enum GregorianCalendarTypes
        {
            Localized = 1,
            USEnglish = 2,
            MiddleEastFrench = 9,
            Arabic = 10,
            TransliteratedEnglish = 11,
            TransliteratedFrench = 12,
        }

        class HijriCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int HijriEra;
            static /*0x8*/ int[] HijriMonthDays;
            static /*0x10*/ System.DateTime calendarMinValue;
            static /*0x18*/ System.DateTime calendarMaxValue;
            /*0x1c*/ int m_HijriAdvance;

            static /*0x713ad7c*/ HijriCalendar();
            static /*0x7139b6c*/ int GetAdvanceHijriDate();
            static /*0x7139b74*/ void CheckTicksRange(long ticks);
            static /*0x7139d54*/ void CheckEraRange(int era);
            static /*0x7139e20*/ void CheckYearRange(int year, int era);
            static /*0x7139f6c*/ void CheckYearMonthRange(int year, int month, int era);
            /*0x713995c*/ HijriCalendar();
            /*0x71398ac*/ System.DateTime get_MinSupportedDateTime();
            /*0x7139904*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7139978*/ int get_ID();
            /*0x7139980*/ long GetAbsoluteDateHijri(int y, int m, int d);
            /*0x7139a48*/ long DaysUpToHijriYear(int HijriYear);
            /*0x7139b04*/ int get_HijriAdjustment();
            /*0x713a0e8*/ int GetDatePart(long ticks, int part);
            /*0x713a358*/ int GetDayOfMonth(System.DateTime time);
            /*0x713a3dc*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x713a484*/ int GetDaysInMonth(int year, int month, int era);
            /*0x713a550*/ int GetDaysInYear(int year, int era);
            /*0x713a5e4*/ int GetEra(System.DateTime time);
            /*0x713a680*/ int[] get_Eras();
            /*0x713a71c*/ int GetMonth(System.DateTime time);
            /*0x713a7a0*/ int GetMonthsInYear(int year, int era);
            /*0x713a80c*/ int GetYear(System.DateTime time);
            /*0x713a890*/ bool IsLeapYear(int year, int era);
            /*0x713a930*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x713aafc*/ int get_TwoDigitYearMax();
            /*0x713ab40*/ void set_TwoDigitYearMax(int value);
            /*0x713ac4c*/ int ToFourDigitYear(int year);
        }

        class JapaneseCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.DateTime calendarMinValue;
            static /*0x8*/ System.Globalization.EraInfo[] japaneseEraInfo;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x713ba88*/ JapaneseCalendar();
            static /*0x713af48*/ System.Globalization.EraInfo[] GetEraInfo();
            static /*0x713b400*/ System.Globalization.EraInfo[] GetErasFromRegistry();
            static /*0x713b408*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x71365dc*/ string[] EraNames();
            static /*0x71366d0*/ string[] EnglishEraNames();
            /*0x713b4c4*/ JapaneseCalendar();
            /*0x713ae98*/ System.DateTime get_MinSupportedDateTime();
            /*0x713aef0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x713b684*/ int get_ID();
            /*0x713b68c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x713b6a4*/ int GetDaysInYear(int year, int era);
            /*0x713b6bc*/ int GetDayOfMonth(System.DateTime time);
            /*0x713b6d4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x713b6ec*/ int GetMonthsInYear(int year, int era);
            /*0x713b710*/ int GetEra(System.DateTime time);
            /*0x713b728*/ int GetMonth(System.DateTime time);
            /*0x713b740*/ int GetYear(System.DateTime time);
            /*0x713b758*/ bool IsLeapYear(int year, int era);
            /*0x713b770*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x713b790*/ int ToFourDigitYear(int year);
            /*0x713b8d4*/ int[] get_Eras();
            /*0x713b8ec*/ bool IsValidYear(int year, int era);
            /*0x713b914*/ int get_TwoDigitYearMax();
            /*0x713b958*/ void set_TwoDigitYearMax(int value);
        }

        class NumberFormatInfo : System.ICloneable, System.IFormatProvider
        {
            static System.Globalization.NumberStyles InvalidNumberStyles = -1024;
            static /*0x0*/ System.Globalization.NumberFormatInfo invariantInfo;
            /*0x10*/ int[] numberGroupSizes;
            /*0x18*/ int[] currencyGroupSizes;
            /*0x20*/ int[] percentGroupSizes;
            /*0x28*/ string positiveSign;
            /*0x30*/ string negativeSign;
            /*0x38*/ string numberDecimalSeparator;
            /*0x40*/ string numberGroupSeparator;
            /*0x48*/ string currencyGroupSeparator;
            /*0x50*/ string currencyDecimalSeparator;
            /*0x58*/ string currencySymbol;
            /*0x60*/ string ansiCurrencySymbol;
            /*0x68*/ string nanSymbol;
            /*0x70*/ string positiveInfinitySymbol;
            /*0x78*/ string negativeInfinitySymbol;
            /*0x80*/ string percentDecimalSeparator;
            /*0x88*/ string percentGroupSeparator;
            /*0x90*/ string percentSymbol;
            /*0x98*/ string perMilleSymbol;
            /*0xa0*/ string[] nativeDigits;
            /*0xa8*/ int m_dataItem;
            /*0xac*/ int numberDecimalDigits;
            /*0xb0*/ int currencyDecimalDigits;
            /*0xb4*/ int currencyPositivePattern;
            /*0xb8*/ int currencyNegativePattern;
            /*0xbc*/ int numberNegativePattern;
            /*0xc0*/ int percentPositivePattern;
            /*0xc4*/ int percentNegativePattern;
            /*0xc8*/ int percentDecimalDigits;
            /*0xcc*/ int digitSubstitution;
            /*0xd0*/ bool isReadOnly;
            /*0xd1*/ bool m_useUserOverride;
            /*0xd2*/ bool m_isInvariant;
            /*0xd3*/ bool validForParseAsNumber;
            /*0xd4*/ bool validForParseAsCurrency;

            static /*0x713c3f8*/ System.Globalization.NumberFormatInfo get_InvariantInfo();
            static /*0x713c57c*/ System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider);
            static /*0x713c71c*/ System.Globalization.NumberFormatInfo get_CurrentInfo();
            static /*0x713c4ac*/ System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi);
            static /*0x713cbb0*/ void ValidateParseStyleInteger(System.Globalization.NumberStyles style);
            static /*0x713cc7c*/ void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style);
            /*0x713baf0*/ NumberFormatInfo();
            /*0x713baf8*/ NumberFormatInfo(System.Globalization.CultureData cultureData);
            /*0x713c0a0*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713c124*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713c128*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713c38c*/ void VerifyWritable();
            /*0x713c804*/ object Clone();
            /*0x713c870*/ int get_CurrencyDecimalDigits();
            /*0x713c878*/ string get_CurrencyDecimalSeparator();
            /*0x713c880*/ bool get_IsReadOnly();
            /*0x713c888*/ int[] get_CurrencyGroupSizes();
            /*0x713c900*/ int[] get_NumberGroupSizes();
            /*0x713c978*/ int[] get_PercentGroupSizes();
            /*0x713c9f0*/ string get_CurrencyGroupSeparator();
            /*0x713c9f8*/ string get_CurrencySymbol();
            /*0x713ca00*/ string get_NaNSymbol();
            /*0x713ca08*/ void set_NaNSymbol(string value);
            /*0x713ca9c*/ int get_CurrencyNegativePattern();
            /*0x713caa4*/ int get_NumberNegativePattern();
            /*0x713caac*/ int get_PercentPositivePattern();
            /*0x713cab4*/ int get_PercentNegativePattern();
            /*0x713cabc*/ string get_NegativeInfinitySymbol();
            /*0x713cac4*/ string get_NegativeSign();
            /*0x713cacc*/ int get_NumberDecimalDigits();
            /*0x713cad4*/ string get_NumberDecimalSeparator();
            /*0x713cadc*/ string get_NumberGroupSeparator();
            /*0x713cae4*/ int get_CurrencyPositivePattern();
            /*0x713caec*/ string get_PositiveInfinitySymbol();
            /*0x713caf4*/ string get_PositiveSign();
            /*0x713cafc*/ int get_PercentDecimalDigits();
            /*0x713cb04*/ string get_PercentDecimalSeparator();
            /*0x713cb0c*/ string get_PercentGroupSeparator();
            /*0x713cb14*/ string get_PercentSymbol();
            /*0x713cb1c*/ string get_PerMilleSymbol();
            /*0x713cb24*/ object GetFormat(System.Type formatType);
        }

        class StringInfo
        {
            /*0x10*/ string m_str;
            /*0x18*/ int[] m_indexes;

            static /*0x713d150*/ int GetCurrentTextElementLen(string str, int index, int len, ref System.Globalization.UnicodeCategory ucCurrent, ref int currentCharCount);
            static /*0x713cfb4*/ int[] ParseCombiningCharacters(string str);
            /*0x713cd3c*/ StringInfo();
            /*0x713cd94*/ StringInfo(string value);
            /*0x713ce54*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713ce70*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713cea0*/ bool Equals(object value);
            /*0x713cf40*/ int GetHashCode();
            /*0x713cf60*/ int[] get_Indexes();
            /*0x713d11c*/ string get_String();
            /*0x713cdc0*/ void set_String(string value);
            /*0x713d124*/ int get_LengthInTextElements();
        }

        class TaiwanCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] taiwanEraInfo;
            static /*0x8*/ System.Globalization.Calendar s_defaultInstance;
            static /*0x10*/ System.DateTime calendarMinValue;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x713d96c*/ TaiwanCalendar();
            static /*0x713d264*/ System.Globalization.Calendar GetDefaultInstance();
            /*0x713d320*/ TaiwanCalendar();
            /*0x713d4e0*/ System.DateTime get_MinSupportedDateTime();
            /*0x713d538*/ System.DateTime get_MaxSupportedDateTime();
            /*0x713d590*/ int get_ID();
            /*0x713d598*/ int GetDaysInMonth(int year, int month, int era);
            /*0x713d5b0*/ int GetDaysInYear(int year, int era);
            /*0x713d5c8*/ int GetDayOfMonth(System.DateTime time);
            /*0x713d5e0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x713d5f8*/ int GetMonthsInYear(int year, int era);
            /*0x713d61c*/ int GetEra(System.DateTime time);
            /*0x713d634*/ int GetMonth(System.DateTime time);
            /*0x713d64c*/ int GetYear(System.DateTime time);
            /*0x713d664*/ bool IsLeapYear(int year, int era);
            /*0x713d67c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x713d69c*/ int[] get_Eras();
            /*0x713d6b4*/ int get_TwoDigitYearMax();
            /*0x713d6f8*/ void set_TwoDigitYearMax(int value);
            /*0x713d828*/ int ToFourDigitYear(int year);
        }

        class TextInfo : System.ICloneable, System.Runtime.Serialization.IDeserializationCallback
        {
            static /*0x0*/ System.Globalization.TextInfo s_Invariant;
            /*0x10*/ bool m_isReadOnly;
            /*0x18*/ string m_cultureName;
            /*0x20*/ System.Globalization.CultureData m_cultureData;
            /*0x28*/ string m_textInfoName;
            /*0x30*/ System.Nullable<bool> m_IsAsciiCasingSameAsInvariant;
            /*0x38*/ string customCultureName;
            /*0x40*/ bool m_useUserOverride;
            /*0x44*/ int m_win32LangID;

            static /*0x713daa8*/ System.Globalization.TextInfo get_Invariant();
            static /*0x713e370*/ char ToLowerAsciiInvariant(char c);
            static /*0x713e980*/ char ToUpperAsciiInvariant(char c);
            static /*0x713e25c*/ bool IsAscii(char c);
            static /*0x713f500*/ int AddNonLetter(ref System.Text.StringBuilder result, ref string input, int inputIndex, int charLen);
            static /*0x713f4e4*/ bool IsWordSeparator(System.Globalization.UnicodeCategory category);
            static /*0x713f4d8*/ bool IsLetterCategory(System.Globalization.UnicodeCategory uc);
            /*0x713df18*/ TextInfo(System.Globalization.CultureData cultureData);
            /*0x713f768*/ TextInfo();
            /*0x713df84*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713dfac*/ void OnDeserialized();
            /*0x713e0d4*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713e0d8*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x713e164*/ string get_CultureName();
            /*0x713e16c*/ object Clone();
            /*0x713e1f4*/ void SetReadOnlyState(bool readOnly);
            /*0x713e200*/ char ToLower(char c);
            /*0x713e80c*/ string ToLower(string str);
            /*0x713e924*/ char ToUpper(char c);
            /*0x713ee30*/ string ToUpper(string str);
            /*0x713e26c*/ bool get_IsAsciiCasingSameAsInvariant();
            /*0x713ef48*/ bool Equals(object obj);
            /*0x713efe8*/ int GetHashCode();
            /*0x713f008*/ string ToString();
            /*0x713f060*/ string ToTitleCase(string str);
            /*0x713f38c*/ int AddTitlecaseLetter(ref System.Text.StringBuilder result, ref string input, int inputIndex, int charLen);
            /*0x713f59c*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x713ee84*/ string ToUpperInternal(string str);
            /*0x713e860*/ string ToLowerInternal(string str);
            /*0x713e998*/ char ToUpperInternal(char c);
            /*0x713e388*/ char ToLowerInternal(char c);
            /*0x713f5a0*/ void ToUpperAsciiInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
            /*0x713f628*/ void ChangeCase(System.ReadOnlySpan<char> source, System.Span<char> destination, bool toUpper);
        }

        class ThaiBuddhistCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] thaiBuddhistEraInfo;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x713fc3c*/ ThaiBuddhistCalendar();
            /*0x713f850*/ ThaiBuddhistCalendar();
            /*0x713f7a0*/ System.DateTime get_MinSupportedDateTime();
            /*0x713f7f8*/ System.DateTime get_MaxSupportedDateTime();
            /*0x713f8fc*/ int get_ID();
            /*0x713f904*/ int GetDaysInMonth(int year, int month, int era);
            /*0x713f91c*/ int GetDaysInYear(int year, int era);
            /*0x713f934*/ int GetDayOfMonth(System.DateTime time);
            /*0x713f94c*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x713f964*/ int GetMonthsInYear(int year, int era);
            /*0x713f988*/ int GetEra(System.DateTime time);
            /*0x713f9a0*/ int GetMonth(System.DateTime time);
            /*0x713f9b8*/ int GetYear(System.DateTime time);
            /*0x713f9d0*/ bool IsLeapYear(int year, int era);
            /*0x713f9e8*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x713fa08*/ int[] get_Eras();
            /*0x713fa20*/ int get_TwoDigitYearMax();
            /*0x713fa64*/ void set_TwoDigitYearMax(int value);
            /*0x713fb94*/ int ToFourDigitYear(int year);
        }

        class UmAlQuraCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.UmAlQuraCalendar.DateMapping[] HijriYearInfo;
            static /*0x8*/ System.DateTime minDate;
            static /*0x10*/ System.DateTime maxDate;

            static /*0x7141418*/ UmAlQuraCalendar();
            static /*0x713fd48*/ System.Globalization.UmAlQuraCalendar.DateMapping[] InitDateMapping();
            static /*0x713ffc0*/ void ConvertHijriToGregorian(int HijriYear, int HijriMonth, int HijriDay, ref int yg, ref int mg, ref int dg);
            static /*0x7140124*/ long GetAbsoluteDateUmAlQura(int year, int month, int day);
            static /*0x71401e8*/ void CheckTicksRange(long ticks);
            static /*0x71403c8*/ void CheckEraRange(int era);
            static /*0x7140440*/ void CheckYearRange(int year, int era);
            static /*0x7140580*/ void CheckYearMonthRange(int year, int month, int era);
            static /*0x714065c*/ void ConvertGregorianToHijri(System.DateTime time, ref int HijriYear, ref int HijriMonth, ref int HijriDay);
            static /*0x7140c40*/ int RealGetDaysInYear(int year);
            /*0x713ff9c*/ UmAlQuraCalendar();
            /*0x713feec*/ System.DateTime get_MinSupportedDateTime();
            /*0x713ff44*/ System.DateTime get_MaxSupportedDateTime();
            /*0x713ffb0*/ int get_BaseCalendarID();
            /*0x713ffb8*/ int get_ID();
            /*0x7140948*/ int GetDatePart(System.DateTime time, int part);
            /*0x7140ad0*/ int GetDayOfMonth(System.DateTime time);
            /*0x7140ae4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x7140b8c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7140ce0*/ int GetDaysInYear(int year, int era);
            /*0x7140d4c*/ int GetEra(System.DateTime time);
            /*0x7140de0*/ int[] get_Eras();
            /*0x7140e44*/ int GetMonth(System.DateTime time);
            /*0x7140e58*/ int GetMonthsInYear(int year, int era);
            /*0x7140ec4*/ int GetYear(System.DateTime time);
            /*0x7140ed8*/ bool IsLeapYear(int year, int era);
            /*0x7140f50*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x7141190*/ int get_TwoDigitYearMax();
            /*0x71411d4*/ void set_TwoDigitYearMax(int value);
            /*0x71412e8*/ int ToFourDigitYear(int year);

            struct DateMapping
            {
                /*0x10*/ int HijriMonthsLengthFlags;
                /*0x18*/ System.DateTime GregorianDate;

                /*0x713feac*/ DateMapping(int MonthsLengthFlags, int GYear, int GMonth, int GDay);
            }
        }

        class SortKey
        {
            /*0x10*/ string source;
            /*0x18*/ byte[] key;
            /*0x20*/ System.Globalization.CompareOptions options;
            /*0x24*/ int lcid;

            static /*0x7141538*/ int Compare(System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
            /*0x71416a4*/ SortKey(int lcid, string source, System.Globalization.CompareOptions opt);
            /*0x7141794*/ SortKey(int lcid, string source, byte[] buffer, System.Globalization.CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength);
            /*0x71417f4*/ SortKey(string localeName, string str, System.Globalization.CompareOptions options, byte[] keyData);
            /*0x7141af4*/ SortKey();
            /*0x7141834*/ string get_OriginalString();
            /*0x714183c*/ byte[] get_KeyData();
            /*0x7141844*/ bool Equals(object value);
            /*0x71418f4*/ int GetHashCode();
            /*0x714195c*/ string ToString();
        }

        interface ISimpleCollator
        {
            /*0x3814b48*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
            /*0x3814240*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
            /*0x3814240*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
            int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
            int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
        }

        class CultureData
        {
            static /*0x0*/ System.Globalization.CultureData s_Invariant;
            /*0x10*/ string sAM1159;
            /*0x18*/ string sPM2359;
            /*0x20*/ string sTimeSeparator;
            /*0x28*/ string[] saLongTimes;
            /*0x30*/ string[] saShortTimes;
            /*0x38*/ int iFirstDayOfWeek;
            /*0x3c*/ int iFirstWeekOfYear;
            /*0x40*/ int[] waCalendars;
            /*0x48*/ System.Globalization.CalendarData[] calendars;
            /*0x50*/ string sISO639Language;
            /*0x58*/ string sRealName;
            /*0x60*/ bool bUseOverrides;
            /*0x64*/ int calendarId;
            /*0x68*/ int numberIndex;
            /*0x6c*/ int iDefaultAnsiCodePage;
            /*0x70*/ int iDefaultOemCodePage;
            /*0x74*/ int iDefaultMacCodePage;
            /*0x78*/ int iDefaultEbcdicCodePage;
            /*0x7c*/ bool isRightToLeft;
            /*0x80*/ string sListSeparator;

            static /*0x713db4c*/ System.Globalization.CultureData get_Invariant();
            static /*0x7141b5c*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride);
            static /*0x7141c44*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator);
            static /*0x7142310*/ string GetDateSeparator(string format);
            static /*0x7142358*/ string GetSeparator(string format, string timeParts);
            static /*0x7142438*/ int IndexOfTimePart(string format, int startIndex, string timeParts);
            static /*0x7142524*/ string UnescapeNlsString(string str, int start, int end);
            static /*0x7135c48*/ string[] ReescapeWin32Strings(string[] array);
            static /*0x7135c4c*/ string ReescapeWin32String(string str);
            static /*0x71426c0*/ int strlen(byte* s);
            static /*0x71426d8*/ string idx2string(byte* data, int idx);
            static /*0x71427d0*/ byte* fill_number_data(int index, ref System.Globalization.CultureData.NumberFormatEntryManaged nfe);
            /*0x7141b2c*/ CultureData(string name);
            /*0x7141d7c*/ void fill_culture_data(int datetimeIndex);
            /*0x7136890*/ System.Globalization.CalendarData GetCalendar(int calendarId);
            /*0x7141d80*/ string[] get_LongTimes();
            /*0x7141d98*/ string[] get_ShortTimes();
            /*0x7141db0*/ string get_SISO639LANGNAME();
            /*0x7141db8*/ int get_IFIRSTDAYOFWEEK();
            /*0x7141dc0*/ int get_IFIRSTWEEKOFYEAR();
            /*0x7141dc8*/ string get_SAM1159();
            /*0x7141dd0*/ string get_SPM2359();
            /*0x7141dd8*/ string get_TimeSeparator();
            /*0x7141de0*/ int[] get_CalendarIds();
            /*0x7141fac*/ System.Globalization.CalendarId[] GetCalendarIds();
            /*0x713c380*/ bool get_IsInvariantCulture();
            /*0x7142084*/ string get_CultureName();
            /*0x714208c*/ string get_SCOMPAREINFO();
            /*0x71420cc*/ string get_STEXTINFO();
            /*0x71420d4*/ bool get_UseUserOverride();
            /*0x71420dc*/ string[] EraNames(int calendarId);
            /*0x71420f8*/ string[] AbbrevEraNames(int calendarId);
            /*0x7142114*/ string[] AbbreviatedEnglishEraNames(int calendarId);
            /*0x7142130*/ string[] ShortDates(int calendarId);
            /*0x714214c*/ string[] LongDates(int calendarId);
            /*0x7142168*/ string[] YearMonths(int calendarId);
            /*0x7142184*/ string[] DayNames(int calendarId);
            /*0x71421a0*/ string[] AbbreviatedDayNames(int calendarId);
            /*0x71421bc*/ string[] MonthNames(int calendarId);
            /*0x71421d8*/ string[] GenitiveMonthNames(int calendarId);
            /*0x71421f4*/ string[] AbbreviatedMonthNames(int calendarId);
            /*0x7142210*/ string[] AbbreviatedGenitiveMonthNames(int calendarId);
            /*0x714222c*/ string[] LeapYearMonthNames(int calendarId);
            /*0x7142248*/ string MonthDay(int calendarId);
            /*0x7142264*/ string DateSeparator(int calendarId);
            /*0x714271c*/ int[] create_group_sizes_array(int gs0, int gs1);
            /*0x713c12c*/ void GetNFIValues(System.Globalization.NumberFormatInfo nfi);

            struct NumberFormatEntryManaged
            {
                /*0x10*/ int currency_decimal_digits;
                /*0x14*/ int currency_decimal_separator;
                /*0x18*/ int currency_group_separator;
                /*0x1c*/ int currency_group_sizes0;
                /*0x20*/ int currency_group_sizes1;
                /*0x24*/ int currency_negative_pattern;
                /*0x28*/ int currency_positive_pattern;
                /*0x2c*/ int currency_symbol;
                /*0x30*/ int nan_symbol;
                /*0x34*/ int negative_infinity_symbol;
                /*0x38*/ int negative_sign;
                /*0x3c*/ int number_decimal_digits;
                /*0x40*/ int number_decimal_separator;
                /*0x44*/ int number_group_separator;
                /*0x48*/ int number_group_sizes0;
                /*0x4c*/ int number_group_sizes1;
                /*0x50*/ int number_negative_pattern;
                /*0x54*/ int per_mille_symbol;
                /*0x58*/ int percent_negative_pattern;
                /*0x5c*/ int percent_positive_pattern;
                /*0x60*/ int percent_symbol;
                /*0x64*/ int positive_infinity_symbol;
                /*0x68*/ int positive_sign;
            }
        }

        class CodePageDataItem
        {
            static /*0x0*/ char[] sep;
            /*0x10*/ int m_dataIndex;
            /*0x14*/ int m_uiFamilyCodePage;
            /*0x18*/ string m_webName;
            /*0x20*/ string m_headerName;
            /*0x28*/ uint m_flags;

            static /*0x7142acc*/ CodePageDataItem();
            static /*0x7142878*/ string CreateString(string pStrings, uint index);
            /*0x71427d4*/ CodePageDataItem(int dataIndex);
            /*0x714292c*/ string get_WebName();
            /*0x71429fc*/ string get_HeaderName();
        }

        class EncodingTable
        {
            static /*0x0*/ System.Globalization.InternalEncodingDataItem[] encodingDataPtr;
            static /*0x8*/ System.Globalization.InternalCodePageDataItem[] codePageDataPtr;
            static /*0x10*/ int lastEncodingItem;
            static /*0x18*/ System.Collections.Generic.Dictionary<string, int> hashByName;
            static /*0x20*/ System.Collections.Generic.Dictionary<int, System.Globalization.CodePageDataItem> hashByCodePage;

            static /*0x7142c28*/ EncodingTable();
            static /*0x7142b5c*/ int GetNumEncodingItems();
            static /*0x7142bc0*/ System.Globalization.InternalEncodingDataItem ENC(string name, ushort cp);
            static /*0x7142bf0*/ System.Globalization.InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags);
            static /*0x714cb28*/ int internalGetCodePageFromName(string name);
            static /*0x714cd7c*/ int GetCodePageFromName(string name);
            static /*0x714cffc*/ System.Globalization.CodePageDataItem GetCodePageDataItem(int codepage);
        }

        struct InternalEncodingDataItem
        {
            /*0x10*/ string webName;
            /*0x18*/ ushort codePage;
        }

        struct InternalCodePageDataItem
        {
            /*0x10*/ ushort codePage;
            /*0x12*/ ushort uiFamilyCodePage;
            /*0x14*/ uint flags;
            /*0x18*/ string Names;
        }

        class TextInfoToUpperData
        {
            static /*0x0*/ char[] range_00e0_0586;
            static /*0x8*/ char[] range_1e01_1ff3;
            static /*0x10*/ char[] range_2170_2184;
            static /*0x18*/ char[] range_24d0_24e9;
            static /*0x20*/ char[] range_2c30_2ce3;
            static /*0x28*/ char[] range_2d00_2d25;
            static /*0x30*/ char[] range_a641_a697;
            static /*0x38*/ char[] range_a723_a78c;

            static /*0x714d2bc*/ TextInfoToUpperData();
        }

        class TextInfoToLowerData
        {
            static /*0x0*/ char[] range_00c0_0556;
            static /*0x8*/ char[] range_10a0_10c5;
            static /*0x10*/ char[] range_1e00_1ffc;
            static /*0x18*/ char[] range_2160_216f;
            static /*0x20*/ char[] range_24b6_24cf;
            static /*0x28*/ char[] range_2c00_2c2e;
            static /*0x30*/ char[] range_2c60_2ce2;
            static /*0x38*/ char[] range_a640_a696;
            static /*0x40*/ char[] range_a722_a78b;

            static /*0x714d550*/ TextInfoToLowerData();
        }

        class CultureInfo : System.ICloneable, System.IFormatProvider
        {
            static int InvariantCultureId = 127;
            static int CalendarTypeBits = 8;
            static int LOCALE_INVARIANT = 127;
            static string MSG_READONLY = "This instance is read only";
            static /*0x0*/ System.Globalization.CultureInfo invariant_culture_info;
            static /*0x8*/ object shared_table_lock;
            static /*0x10*/ System.Globalization.CultureInfo default_current_culture;
            static /*0x18*/ System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture;
            static /*0x20*/ System.Globalization.CultureInfo s_DefaultThreadCurrentCulture;
            static /*0x28*/ System.Collections.Generic.Dictionary<int, System.Globalization.CultureInfo> shared_by_number;
            static /*0x30*/ System.Collections.Generic.Dictionary<string, System.Globalization.CultureInfo> shared_by_name;
            static /*0x38*/ System.Globalization.CultureInfo s_UserPreferredCultureInfoInAppX;
            static /*0x40*/ bool IsTaiwanSku;
            /*0x10*/ bool m_isReadOnly;
            /*0x14*/ int cultureID;
            /*0x18*/ int parent_lcid;
            /*0x1c*/ int datetime_index;
            /*0x20*/ int number_index;
            /*0x24*/ int default_calendar_type;
            /*0x28*/ bool m_useUserOverride;
            /*0x30*/ System.Globalization.NumberFormatInfo numInfo;
            /*0x38*/ System.Globalization.DateTimeFormatInfo dateTimeInfo;
            /*0x40*/ System.Globalization.TextInfo textInfo;
            /*0x48*/ string m_name;
            /*0x50*/ string englishname;
            /*0x58*/ string nativename;
            /*0x60*/ string iso3lang;
            /*0x68*/ string iso2lang;
            /*0x70*/ string win3lang;
            /*0x78*/ string territory;
            /*0x80*/ string[] native_calendar_names;
            /*0x88*/ System.Globalization.CompareInfo compareInfo;
            /*0x90*/ void* textinfo_data;
            /*0x98*/ int m_dataItem;
            /*0xa0*/ System.Globalization.Calendar calendar;
            /*0xa8*/ System.Globalization.CultureInfo parent_culture;
            /*0xb0*/ bool constructed;
            /*0xb8*/ byte[] cached_serialized_form;
            /*0xc0*/ System.Globalization.CultureData m_cultureData;
            /*0xc8*/ bool m_isInherited;

            static /*0x7152cbc*/ CultureInfo();
            static /*0x714d8d8*/ System.Globalization.CultureInfo get_InvariantCulture();
            static /*0x714d938*/ System.Globalization.CultureInfo get_CurrentCulture();
            static /*0x714d958*/ System.Globalization.CultureInfo get_CurrentUICulture();
            static /*0x714d978*/ System.Globalization.CultureInfo ConstructCurrentCulture();
            static /*0x714dda0*/ System.Globalization.CultureInfo ConstructCurrentUICulture();
            static /*0x714e760*/ System.Globalization.CultureInfo[] GetCultures(System.Globalization.CultureTypes types);
            static /*0x714db64*/ string get_current_locale_name();
            static /*0x714e9c8*/ System.Globalization.CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed);
            static /*0x714f938*/ void insert_into_shared_tables(System.Globalization.CultureInfo c);
            static /*0x714fac4*/ System.Globalization.CultureInfo GetCultureInfo(int culture);
            static /*0x714fcf8*/ System.Globalization.CultureInfo GetCultureInfo(string name);
            static /*0x714ff14*/ System.Globalization.CultureInfo CreateCulture(string name, bool reference);
            static /*0x714db68*/ System.Globalization.CultureInfo CreateSpecificCulture(string name);
            static /*0x714ff88*/ System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(string name);
            static /*0x714dec4*/ System.Globalization.Calendar CreateCalendar(int calendarType);
            static /*0x714f850*/ System.Exception CreateNotFoundException(string name);
            static /*0x71526d0*/ System.Globalization.CultureInfo get_DefaultThreadCurrentCulture();
            static /*0x7152730*/ System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture();
            static /*0x7152798*/ System.Globalization.CultureInfo get_UserDefaultUICulture();
            static /*0x71527e4*/ System.Globalization.CultureInfo get_UserDefaultCulture();
            static /*0x7152830*/ void InitializeUserPreferredCultureInfoInAppX(System.Globalization.CultureInfo.OnCultureInfoChangedDelegate onCultureInfoChangedInAppX);
            static /*0x7152840*/ void SetUserPreferredCultureInfoInAppX(string name);
            static /*0x714d828*/ void OnCultureInfoChangedInAppX(string language);
            static /*0x7152850*/ System.Globalization.CultureInfo GetCultureInfoForUserPreferredLanguageInAppX();
            static /*0x71529d4*/ void SetCultureInfoForUserPreferredLanguageInAppX(System.Globalization.CultureInfo cultureInfo);
            static /*0x7152b6c*/ bool VerifyCultureName(string cultureName, bool throwException);
            /*0x714e360*/ CultureInfo(int culture);
            /*0x714f2b4*/ CultureInfo(int culture, bool useUserOverride);
            /*0x714f2c0*/ CultureInfo(int culture, bool useUserOverride, bool read_only);
            /*0x714e354*/ CultureInfo(string name);
            /*0x714f558*/ CultureInfo(string name, bool useUserOverride);
            /*0x714f564*/ CultureInfo(string name, bool useUserOverride, bool read_only);
            /*0x714f918*/ CultureInfo();
            /*0x714d8c8*/ System.Globalization.CultureData get__cultureData();
            /*0x714d8d0*/ bool get__isInherited();
            /*0x714ddec*/ string get_Territory();
            /*0x714ddf4*/ string get__name();
            /*0x714ddfc*/ int get_LCID();
            /*0x714de04*/ string get_Name();
            /*0x714de0c*/ System.Globalization.Calendar get_Calendar();
            /*0x714e0e0*/ System.Globalization.CultureInfo get_Parent();
            /*0x714e36c*/ System.Globalization.TextInfo get_TextInfo();
            /*0x714e50c*/ object Clone();
            /*0x714e6b4*/ bool Equals(object value);
            /*0x714e9d8*/ System.Globalization.CultureInfo.Data GetTextInfoData();
            /*0x714ea64*/ int GetHashCode();
            /*0x714ea70*/ string ToString();
            /*0x714ea78*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x714ebcc*/ bool get_IsNeutralCulture();
            /*0x714ec14*/ void CheckNeutral();
            /*0x714ec18*/ System.Globalization.NumberFormatInfo get_NumberFormat();
            /*0x714ecbc*/ void set_NumberFormat(System.Globalization.NumberFormatInfo value);
            /*0x714ed8c*/ System.Globalization.DateTimeFormatInfo get_DateTimeFormat();
            /*0x714eef4*/ void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value);
            /*0x714efc4*/ string get_EnglishName();
            /*0x714eff4*/ object GetFormat(System.Type formatType);
            /*0x714dea4*/ void Construct();
            /*0x714f0f8*/ bool construct_internal_locale_from_lcid(int lcid);
            /*0x714f0fc*/ bool construct_internal_locale_from_name(string name);
            /*0x714f100*/ void ConstructInvariant(bool read_only);
            /*0x714e490*/ System.Globalization.TextInfo CreateTextInfo(bool readOnly);
            /*0x714f7b0*/ bool ConstructLocaleFromName(string name);
            /*0x714e9f0*/ int get_CalendarType();
            /*0x7152790*/ string get_SortName();
            /*0x7152ae0*/ bool get_HasInvariantCultureName();

            struct Data
            {
                /*0x10*/ int ansi;
                /*0x14*/ int ebcdic;
                /*0x18*/ int mac;
                /*0x1c*/ int oem;
                /*0x20*/ bool right_to_left;
                /*0x21*/ byte list_sep;
            }

            class OnCultureInfoChangedDelegate : System.MulticastDelegate
            {
                /*0x7152924*/ OnCultureInfoChangedDelegate(object object, nint method);
                /*0x7152d6c*/ void Invoke(string language);
            }
        }

        class IdnMapping
        {
            /*0x10*/ bool allow_unassigned;
            /*0x11*/ bool use_std3;
            /*0x18*/ System.Globalization.Punycode puny;

            /*0x7152d80*/ IdnMapping();
            /*0x7152e54*/ bool Equals(object obj);
            /*0x7152ee0*/ int GetHashCode();
            /*0x7152ef0*/ string GetAscii(string unicode);
            /*0x7152f50*/ string GetAscii(string unicode, int index, int count);
            /*0x7153018*/ string Convert(string input, int index, int count, bool toAscii);
            /*0x7153220*/ string ToAscii(string s, int offset);
            /*0x7153c4c*/ void VerifyLength(string s, int offset);
            /*0x7153620*/ string NamePrep(string s, int offset);
            /*0x7153d10*/ void VerifyProhibitedCharacters(string s, int offset);
            /*0x715373c*/ void VerifyStd3AsciiRules(string s, int offset);
            /*0x7153f20*/ string GetUnicode(string ascii);
            /*0x7153f80*/ string GetUnicode(string ascii, int index, int count);
            /*0x7153454*/ string ToUnicode(string s, int offset);
        }

        class Bootstring
        {
            /*0x10*/ char delimiter;
            /*0x14*/ int base_num;
            /*0x18*/ int tmin;
            /*0x1c*/ int tmax;
            /*0x20*/ int skew;
            /*0x24*/ int damp;
            /*0x28*/ int initial_bias;
            /*0x2c*/ int initial_n;

            /*0x7154320*/ Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN);
            /*0x7153904*/ string Encode(string s, int offset);
            /*0x715438c*/ char EncodeDigit(int d);
            /*0x715441c*/ int DecodeDigit(char c);
            /*0x71543a4*/ int Adapt(int delta, int numPoints, bool firstTime);
            /*0x7154048*/ string Decode(string s, int offset);
        }

        class Punycode : System.Globalization.Bootstring
        {
            /*0x7152e14*/ Punycode();
        }

        class RegionInfo
        {
            static /*0x0*/ System.Globalization.RegionInfo currentRegion;
            /*0x10*/ int regionId;
            /*0x18*/ string iso2Name;
            /*0x20*/ string iso3Name;
            /*0x28*/ string win3Name;
            /*0x30*/ string englishName;
            /*0x38*/ string nativeName;
            /*0x40*/ string currencySymbol;
            /*0x48*/ string isoCurrencySymbol;
            /*0x50*/ string currencyEnglishName;
            /*0x58*/ string currencyNativeName;

            static /*0x715445c*/ System.Globalization.RegionInfo get_CurrentRegion();
            static /*0x7154be0*/ void ClearCachedData();
            /*0x715470c*/ RegionInfo(int culture);
            /*0x71548b8*/ RegionInfo(string name);
            /*0x715451c*/ RegionInfo(System.Globalization.CultureInfo ci);
            /*0x7154810*/ bool GetByTerritory(System.Globalization.CultureInfo ci);
            /*0x71549ec*/ bool construct_internal_region_from_name(string name);
            /*0x71549f0*/ string get_CurrencyEnglishName();
            /*0x71549f8*/ string get_CurrencySymbol();
            /*0x7154a00*/ string get_DisplayName();
            /*0x7154a08*/ string get_EnglishName();
            /*0x7154a10*/ int get_GeoId();
            /*0x7154a18*/ bool get_IsMetric();
            /*0x7154aa4*/ string get_ISOCurrencySymbol();
            /*0x7154aac*/ string get_NativeName();
            /*0x7154ab4*/ string get_CurrencyNativeName();
            /*0x7154abc*/ string get_Name();
            /*0x7154ac4*/ string get_ThreeLetterISORegionName();
            /*0x7154acc*/ string get_ThreeLetterWindowsRegionName();
            /*0x7154ad4*/ string get_TwoLetterISORegionName();
            /*0x7154adc*/ bool Equals(object value);
            /*0x7154ba4*/ int GetHashCode();
            /*0x7154bd0*/ string ToString();
        }
    }

    namespace Diagnostics
    {
        class ConditionalAttribute : System.Attribute
        {
            /*0x10*/ string <ConditionString>k__BackingField;

            /*0x7154c34*/ ConditionalAttribute(string conditionString);
        }

        class StackTraceHiddenAttribute : System.Attribute
        {
            /*0x7154c64*/ StackTraceHiddenAttribute();
        }

        class DebuggerStepThroughAttribute : System.Attribute
        {
            /*0x7154c6c*/ DebuggerStepThroughAttribute();
        }

        class DebuggerHiddenAttribute : System.Attribute
        {
            /*0x7154c74*/ DebuggerHiddenAttribute();
        }

        class DebuggerNonUserCodeAttribute : System.Attribute
        {
            /*0x7154c7c*/ DebuggerNonUserCodeAttribute();
        }

        class DebuggableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggableAttribute.DebuggingModes m_debuggingModes;

            /*0x7154c84*/ DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes modes);

            enum DebuggingModes
            {
                None = 0,
                Default = 1,
                DisableOptimizations = 256,
                IgnoreSymbolStoreSequencePoints = 2,
                EnableEditAndContinue = 4,
            }
        }

        enum DebuggerBrowsableState
        {
            Never = 0,
            Collapsed = 2,
            RootHidden = 3,
        }

        class DebuggerBrowsableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggerBrowsableState state;

            /*0x7154cac*/ DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState state);
        }

        class DebuggerTypeProxyAttribute : System.Attribute
        {
            /*0x10*/ string typeName;

            /*0x7154d24*/ DebuggerTypeProxyAttribute(System.Type type);
        }

        class DebuggerDisplayAttribute : System.Attribute
        {
            /*0x10*/ string name;
            /*0x18*/ string value;
            /*0x20*/ string type;

            /*0x7154de4*/ DebuggerDisplayAttribute(string value);
            /*0x7154e74*/ void set_Name(string value);
            /*0x7154e7c*/ void set_Type(string value);
        }

        class Debugger
        {
            static /*0x0*/ string DefaultCategory;

            static /*0x7154ed8*/ Debugger();
            static /*0x7154e84*/ bool get_IsAttached();
            static /*0x7154ed0*/ bool IsAttached_internal();
            static /*0x7154ed4*/ void NotifyOfCrossThreadDependency();
        }

        class StackFrame
        {
            static int OFFSET_UNKNOWN = -1;
            /*0x10*/ int ilOffset;
            /*0x14*/ int nativeOffset;
            /*0x18*/ long methodAddress;
            /*0x20*/ uint methodIndex;
            /*0x28*/ System.Reflection.MethodBase methodBase;
            /*0x30*/ string fileName;
            /*0x38*/ int lineNumber;
            /*0x3c*/ int columnNumber;
            /*0x40*/ string internalMethodName;

            static /*0x7154f44*/ bool get_frame_info(int skip, bool needFileInfo, ref System.Reflection.MethodBase method, ref int iloffset, ref int native_offset, ref string file, ref int line, ref int column);
            /*0x7154f4c*/ StackFrame();
            /*0x7154f9c*/ StackFrame(int skipFrames, bool fNeedFileInfo);
            /*0x7154ffc*/ int GetFileLineNumber();
            /*0x7155004*/ string GetFileName();
            /*0x715500c*/ string GetSecureFileName();
            /*0x71550e0*/ int GetILOffset();
            /*0x71550e8*/ System.Reflection.MethodBase GetMethod();
            /*0x71550f0*/ int GetNativeOffset();
            /*0x71550f8*/ long GetMethodAddress();
            /*0x7155100*/ uint GetMethodIndex();
            /*0x7155108*/ string GetInternalMethodName();
            /*0x7155110*/ string ToString();
        }

        class StackTrace
        {
            static /*0x0*/ bool isAotidSet;
            static /*0x8*/ string aotid;
            /*0x10*/ System.Diagnostics.StackFrame[] frames;
            /*0x18*/ System.Diagnostics.StackTrace[] captured_traces;
            /*0x20*/ bool debug_info;

            static /*0x71555e4*/ System.Diagnostics.StackFrame[] get_trace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            static /*0x7155944*/ string GetAotId();
            static /*0x71564b4*/ void ConvertAsyncStateMachineMethod(ref System.Reflection.MethodBase method, ref System.Type declaringType);
            /*0x7155344*/ StackTrace();
            /*0x7155580*/ StackTrace(bool fNeedFileInfo);
            /*0x71555b0*/ StackTrace(int skipFrames, bool fNeedFileInfo);
            /*0x71555ec*/ StackTrace(System.Exception e, bool fNeedFileInfo);
            /*0x71555f8*/ StackTrace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            /*0x7155368*/ void init_frames(int skipFrames, bool fNeedFileInfo);
            /*0x71556f0*/ int get_FrameCount();
            /*0x7155708*/ System.Diagnostics.StackFrame GetFrame(int index);
            /*0x7155768*/ System.Diagnostics.StackFrame[] GetFrames();
            /*0x7155a14*/ bool AddFrames(System.Text.StringBuilder sb, bool separator, ref bool isAsync);
            /*0x7155e90*/ void GetFullNameForStackTrace(System.Text.StringBuilder sb, System.Reflection.MethodBase mi, bool needsNewLine, ref bool skipped, ref bool isAsync);
            /*0x7156914*/ string ToString();
            /*0x7156a74*/ string ToString(System.Diagnostics.StackTrace.TraceFormat traceFormat);

            enum TraceFormat
            {
                Normal = 0,
                TrailingNewLine = 1,
                NoResourceLookup = 2,
            }
        }

        namespace Contracts
        {
            class Contract
            {
                static /*0x3825b78*/ bool ForAll<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate);
            }
        }

        namespace Tracing
        {
            enum EventLevel
            {
                LogAlways = 0,
                Critical = 1,
                Error = 2,
                Warning = 3,
                Informational = 4,
                Verbose = 5,
            }

            enum EventTask
            {
                None = 0,
            }

            enum EventOpcode
            {
                Info = 0,
                Start = 1,
                Stop = 2,
                DataCollectionStart = 3,
                DataCollectionStop = 4,
                Extension = 5,
                Reply = 6,
                Resume = 7,
                Suspend = 8,
                Send = 9,
                Receive = 240,
            }

            enum EventKeywords
            {
                None = 0,
                All = -1,
                MicrosoftTelemetry = 562949953421312,
                WdiContext = 562949953421312,
                WdiDiagnostic = 1125899906842624,
                Sqm = 2251799813685248,
                AuditFailure = 4503599627370496,
                AuditSuccess = 9007199254740992,
                CorrelationHint = 4503599627370496,
                EventLogClassic = 36028797018963968,
            }

            class EventAttribute : System.Attribute
            {
                /*0x10*/ int <EventId>k__BackingField;
                /*0x14*/ System.Diagnostics.Tracing.EventLevel <Level>k__BackingField;
                /*0x18*/ System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField;
                /*0x20*/ System.Diagnostics.Tracing.EventOpcode <Opcode>k__BackingField;
                /*0x28*/ string <Message>k__BackingField;
                /*0x30*/ System.Diagnostics.Tracing.EventTask <Task>k__BackingField;

                /*0x7156a80*/ EventAttribute(int eventId);
                /*0x7156aa8*/ void set_EventId(int value);
                /*0x7156ab0*/ void set_Level(System.Diagnostics.Tracing.EventLevel value);
                /*0x7156ab8*/ void set_Keywords(System.Diagnostics.Tracing.EventKeywords value);
                /*0x7156ac0*/ void set_Opcode(System.Diagnostics.Tracing.EventOpcode value);
                /*0x7156ac8*/ void set_Message(string value);
                /*0x7156ad0*/ void set_Task(System.Diagnostics.Tracing.EventTask value);
            }

            class EventSource : System.IDisposable
            {
                /*0x10*/ string <Name>k__BackingField;

                /*0x7156ad8*/ EventSource();
                /*0x7156b1c*/ EventSource(string eventSourceName);
                /*0x7156b4c*/ EventSource(System.Guid eventSourceGuid, string eventSourceName);
                /*0x7156b7c*/ void Finalize();
                /*0x7156c1c*/ void set_Name(string value);
                /*0x7156c24*/ bool IsEnabled();
                /*0x7156c2c*/ bool IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords);
                /*0x7156c34*/ void Dispose();
                /*0x7156ca0*/ void Dispose(bool disposing);
                /*0x7156ca4*/ void WriteEvent(int eventId);
                /*0x7156cec*/ void WriteEvent(int eventId, int arg1);
                /*0x7156da8*/ void WriteEvent(int eventId, string arg1);
                /*0x7156e3c*/ void WriteEvent(int eventId, int arg1, int arg2);
                /*0x7156f44*/ void WriteEvent(int eventId, int arg1, int arg2, int arg3);
                /*0x71570a0*/ void WriteEvent(int eventId, long arg1);
                /*0x715715c*/ void WriteEvent(int eventId, long arg1, string arg2);
                /*0x7156ce8*/ void WriteEvent(int eventId, object[] args);
                /*0x7157250*/ void WriteEvent(int eventId, string arg1, string arg2, string arg3);
                /*0x715735c*/ void WriteEventCore(int eventId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data);

                struct EventData
                {
                    /*0x10*/ nint <DataPointer>k__BackingField;
                    /*0x18*/ int <Size>k__BackingField;
                    /*0x1c*/ int <Reserved>k__BackingField;

                    /*0x7157360*/ void set_DataPointer(nint value);
                    /*0x7157368*/ void set_Size(int value);
                    /*0x7157370*/ void set_Reserved(int value);
                }
            }

            class EventSourceAttribute : System.Attribute
            {
                /*0x10*/ string <Guid>k__BackingField;
                /*0x18*/ string <Name>k__BackingField;

                /*0x7157388*/ EventSourceAttribute();
                /*0x7157378*/ void set_Guid(string value);
                /*0x7157380*/ void set_Name(string value);
            }

            class NonEventAttribute : System.Attribute
            {
                /*0x7157390*/ NonEventAttribute();
            }
        }

        namespace CodeAnalysis
        {
            class DisallowNullAttribute : System.Attribute
            {
                /*0x7157398*/ DisallowNullAttribute();
            }

            class NotNullAttribute : System.Attribute
            {
                /*0x71573a0*/ NotNullAttribute();
            }

            class MaybeNullWhenAttribute : System.Attribute
            {
                /*0x10*/ bool <ReturnValue>k__BackingField;

                /*0x71573a8*/ MaybeNullWhenAttribute(bool returnValue);
            }

            class NotNullWhenAttribute : System.Attribute
            {
                /*0x10*/ bool <ReturnValue>k__BackingField;

                /*0x71573d0*/ NotNullWhenAttribute(bool returnValue);
            }

            class NotNullIfNotNullAttribute : System.Attribute
            {
                /*0x10*/ string <ParameterName>k__BackingField;

                /*0x71573f8*/ NotNullIfNotNullAttribute(string parameterName);
            }

            class DoesNotReturnAttribute : System.Attribute
            {
                /*0x7157428*/ DoesNotReturnAttribute();
            }

            class DoesNotReturnIfAttribute : System.Attribute
            {
                /*0x10*/ bool <ParameterValue>k__BackingField;

                /*0x7157430*/ DoesNotReturnIfAttribute(bool parameterValue);
            }
        }
    }

    namespace Configuration
    {
        namespace Assemblies
        {
            enum AssemblyHashAlgorithm
            {
                None = 0,
                MD5 = 32771,
                SHA1 = 32772,
                SHA256 = 32780,
                SHA384 = 32781,
                SHA512 = 32782,
            }

            enum AssemblyVersionCompatibility
            {
                SameMachine = 1,
                SameProcess = 2,
                SameDomain = 3,
            }
        }
    }

    namespace Collections
    {
        class Comparer : System.Collections.IComparer, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Collections.Comparer Default;
            static /*0x8*/ System.Collections.Comparer DefaultInvariant;
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            static /*0x71578f8*/ Comparer();
            /*0x7157458*/ Comparer(System.Globalization.CultureInfo culture);
            /*0x71574e4*/ Comparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7157658*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71576f8*/ int Compare(object a, object b);
        }

        struct DictionaryEntry
        {
            /*0x10*/ object _key;
            /*0x18*/ object _value;

            /*0x71579c4*/ DictionaryEntry(object key, object value);
            /*0x71579f4*/ object get_Key();
            /*0x71579fc*/ object get_Value();
        }

        class HashHelpers
        {
            static /*0x0*/ int[] primes;
            static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;

            static /*0x7157da0*/ HashHelpers();
            static /*0x7157a04*/ bool IsPrime(int candidate);
            static /*0x7157abc*/ int GetPrime(int min);
            static /*0x7157c44*/ int ExpandPrime(int oldSize);
            static /*0x7157cc8*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
        }

        interface ICollection : System.Collections.IEnumerable
        {
            /*0x381678c*/ void CopyTo(System.Array array, int index);
            /*0x3814574*/ int get_Count();
            /*0x38148bc*/ object get_SyncRoot();
            /*0x3813ffc*/ bool get_IsSynchronized();
        }

        interface IComparer
        {
            int Compare(object x, object y);
        }

        interface IDictionary : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x3814a3c*/ object get_Item(object key);
            /*0x3816810*/ void set_Item(object key, object value);
            /*0x38148bc*/ System.Collections.ICollection get_Keys();
            /*0x38148bc*/ System.Collections.ICollection get_Values();
            /*0x38141c4*/ bool Contains(object key);
            /*0x3816810*/ void Add(object key, object value);
            /*0x38159dc*/ void Clear();
            /*0x3813ffc*/ bool get_IsReadOnly();
            /*0x3813ffc*/ bool get_IsFixedSize();
            /*0x38148bc*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x3816710*/ void Remove(object key);
        }

        interface IDictionaryEnumerator : System.Collections.IEnumerator
        {
            /*0x38148bc*/ object get_Key();
            /*0x38148bc*/ object get_Value();
            System.Collections.DictionaryEntry get_Entry();
        }

        interface IEnumerable
        {
            /*0x38148bc*/ System.Collections.IEnumerator GetEnumerator();
        }

        interface IEnumerator
        {
            /*0x3813ffc*/ bool MoveNext();
            /*0x38148bc*/ object get_Current();
            /*0x38159dc*/ void Reset();
        }

        interface IEqualityComparer
        {
            /*0x3814200*/ bool Equals(object x, object y);
            /*0x381467c*/ int GetHashCode(object obj);
        }

        interface IList : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x3814964*/ object get_Item(int index);
            /*0x3816044*/ void set_Item(int index, object value);
            /*0x381467c*/ int Add(object value);
            /*0x38141c4*/ bool Contains(object value);
            /*0x38159dc*/ void Clear();
            /*0x3813ffc*/ bool get_IsReadOnly();
            /*0x3813ffc*/ bool get_IsFixedSize();
            /*0x381467c*/ int IndexOf(object value);
            /*0x3816044*/ void Insert(int index, object value);
            /*0x3816710*/ void Remove(object value);
            /*0x3815ed0*/ void RemoveAt(int index);
        }

        interface IStructuralComparable
        {
            int CompareTo(object other, System.Collections.IComparer comparer);
        }

        interface IStructuralEquatable
        {
            /*0x3814200*/ bool Equals(object other, System.Collections.IEqualityComparer comparer);
            /*0x381467c*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
        }

        class ListDictionaryInternal : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ListDictionaryInternal.DictionaryNode head;
            /*0x18*/ int version;
            /*0x1c*/ int count;
            /*0x20*/ object _syncRoot;

            /*0x7157e40*/ ListDictionaryInternal();
            /*0x7157e48*/ object get_Item(object key);
            /*0x7157efc*/ void set_Item(object key, object value);
            /*0x7158084*/ int get_Count();
            /*0x715808c*/ System.Collections.ICollection get_Keys();
            /*0x7158138*/ bool get_IsReadOnly();
            /*0x7158140*/ bool get_IsFixedSize();
            /*0x7158148*/ bool get_IsSynchronized();
            /*0x7158150*/ object get_SyncRoot();
            /*0x71581c0*/ System.Collections.ICollection get_Values();
            /*0x715822c*/ void Add(object key, object value);
            /*0x71583e8*/ void Clear();
            /*0x7158418*/ bool Contains(object key);
            /*0x71584cc*/ void CopyTo(System.Array array, int index);
            /*0x71586d4*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x7158784*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x71587dc*/ void Remove(object key);

            class NodeEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                /*0x20*/ int version;
                /*0x24*/ bool start;

                /*0x715872c*/ NodeEnumerator(System.Collections.ListDictionaryInternal list);
                /*0x71588e0*/ object get_Current();
                /*0x7158944*/ System.Collections.DictionaryEntry get_Entry();
                /*0x71589dc*/ object get_Key();
                /*0x7158a3c*/ object get_Value();
                /*0x7158a9c*/ bool MoveNext();
                /*0x7158b60*/ void Reset();
            }

            class NodeKeyValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ bool isKeys;

                /*0x71580fc*/ NodeKeyValueCollection(System.Collections.ListDictionaryInternal list, bool isKeys);
                /*0x7158be0*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x7158d9c*/ int System.Collections.ICollection.get_Count();
                /*0x7158dd4*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x7158ddc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x7158df4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class NodeKeyValueEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.ListDictionaryInternal list;
                    /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                    /*0x20*/ int version;
                    /*0x24*/ bool isKeys;
                    /*0x25*/ bool start;

                    /*0x7158e58*/ NodeKeyValueEnumerator(System.Collections.ListDictionaryInternal list, bool isKeys);
                    /*0x7158ec4*/ object get_Current();
                    /*0x7158f38*/ bool MoveNext();
                    /*0x7158ffc*/ void Reset();
                }
            }

            class DictionaryNode
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
                /*0x20*/ System.Collections.ListDictionaryInternal.DictionaryNode next;

                /*0x715807c*/ DictionaryNode();
            }
        }

        class CompatibleComparer : System.Collections.IEqualityComparer
        {
            /*0x10*/ System.Collections.IHashCodeProvider _hcp;
            /*0x18*/ System.Collections.IComparer _comparer;

            /*0x715907c*/ CompatibleComparer(System.Collections.IHashCodeProvider hashCodeProvider, System.Collections.IComparer comparer);
            /*0x71590c0*/ System.Collections.IHashCodeProvider get_HashCodeProvider();
            /*0x71590c8*/ System.Collections.IComparer get_Comparer();
            /*0x71590d0*/ bool Equals(object a, object b);
            /*0x71590e8*/ int Compare(object a, object b);
            /*0x71592a8*/ int GetHashCode(object obj);
        }

        class CaseInsensitiveComparer : System.Collections.IComparer
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            /*0x71593b0*/ CaseInsensitiveComparer();
            /*0x7159430*/ CaseInsensitiveComparer(System.Globalization.CultureInfo culture);
            /*0x71594bc*/ int Compare(object a, object b);
        }

        class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            /*0x715959c*/ CaseInsensitiveHashCodeProvider();
            /*0x715961c*/ CaseInsensitiveHashCodeProvider(System.Globalization.CultureInfo culture);
            /*0x71596a8*/ int GetHashCode(object obj);
        }

        class CollectionBase : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x7159750*/ CollectionBase();
            /*0x71597bc*/ System.Collections.ArrayList get_InnerList();
            /*0x71597c4*/ System.Collections.IList get_List();
            /*0x71597c8*/ int get_Count();
            /*0x71597ec*/ void Clear();
            /*0x7159838*/ void RemoveAt(int index);
            /*0x7159a0c*/ bool System.Collections.IList.get_IsReadOnly();
            /*0x7159a30*/ bool System.Collections.IList.get_IsFixedSize();
            /*0x7159a54*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x7159a78*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x7159a9c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x7159ac0*/ object System.Collections.IList.get_Item(int index);
            /*0x7159b78*/ void System.Collections.IList.set_Item(int index, object value);
            /*0x7159d5c*/ bool System.Collections.IList.Contains(object value);
            /*0x7159d80*/ int System.Collections.IList.Add(object value);
            /*0x7159ec0*/ void System.Collections.IList.Remove(object value);
            /*0x715a058*/ int System.Collections.IList.IndexOf(object value);
            /*0x715a07c*/ void System.Collections.IList.Insert(int index, object value);
            /*0x715a22c*/ System.Collections.IEnumerator GetEnumerator();
            /*0x715a250*/ void OnSet(int index, object oldValue, object newValue);
            /*0x715a254*/ void OnInsert(int index, object value);
            /*0x715a258*/ void OnClear();
            /*0x715a25c*/ void OnRemove(int index, object value);
            /*0x715a260*/ void OnValidate(object value);
            /*0x715a2b4*/ void OnSetComplete(int index, object oldValue, object newValue);
            /*0x715a2b8*/ void OnInsertComplete(int index, object value);
            /*0x715a2bc*/ void OnClearComplete();
            /*0x715a2c0*/ void OnRemoveComplete(int index, object value);
        }

        class Queue : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _head;
            /*0x1c*/ int _tail;
            /*0x20*/ int _size;
            /*0x24*/ int _growFactor;
            /*0x28*/ int _version;
            /*0x30*/ object _syncRoot;

            /*0x715a2c4*/ Queue();
            /*0x715a490*/ Queue(int capacity);
            /*0x715a2d0*/ Queue(int capacity, float growFactor);
            /*0x715a498*/ Queue(System.Collections.ICollection col);
            /*0x715a710*/ int get_Count();
            /*0x715a718*/ object Clone();
            /*0x715a7fc*/ bool get_IsSynchronized();
            /*0x715a804*/ object get_SyncRoot();
            /*0x715a878*/ void CopyTo(System.Array array, int index);
            /*0x715aa5c*/ void Enqueue(object obj);
            /*0x715ac58*/ System.Collections.IEnumerator GetEnumerator();
            /*0x715ad28*/ object Dequeue();
            /*0x715ae08*/ object Peek();
            /*0x715ae98*/ object GetElement(int i);
            /*0x715ab60*/ void SetCapacity(int capacity);

            class QueueEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Queue _q;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0x715acb0*/ QueueEnumerator(System.Collections.Queue q);
                /*0x715aed8*/ object Clone();
                /*0x715aee0*/ bool MoveNext();
                /*0x715afc4*/ object get_Current();
                /*0x715b054*/ void Reset();
            }

            class QueueDebugView
            {
            }
        }

        class ReadOnlyCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x715b218*/ ReadOnlyCollectionBase();
            /*0x715b0dc*/ System.Collections.ArrayList get_InnerList();
            /*0x715b14c*/ int get_Count();
            /*0x715b170*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x715b194*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x715b1b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x715b1f4*/ System.Collections.IEnumerator GetEnumerator();
        }

        class SortedList : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] values;
            /*0x20*/ int _size;
            /*0x24*/ int version;
            /*0x28*/ System.Collections.IComparer comparer;
            /*0x30*/ System.Collections.SortedList.KeyList keyList;
            /*0x38*/ System.Collections.SortedList.ValueList valueList;
            /*0x40*/ object _syncRoot;

            static /*0x715c710*/ System.Collections.SortedList Synchronized(System.Collections.SortedList list);
            /*0x715b220*/ SortedList();
            /*0x715b3a8*/ SortedList(int initialCapacity);
            /*0x715b4fc*/ SortedList(System.Collections.IComparer comparer);
            /*0x715b23c*/ void Init();
            /*0x715b544*/ void Add(object key, object value);
            /*0x715b7a8*/ void set_Capacity(int value);
            /*0x715b9ec*/ int get_Count();
            /*0x715b9f4*/ System.Collections.ICollection get_Keys();
            /*0x715ba04*/ System.Collections.ICollection get_Values();
            /*0x715ba14*/ bool get_IsReadOnly();
            /*0x715ba1c*/ bool get_IsFixedSize();
            /*0x715ba24*/ bool get_IsSynchronized();
            /*0x715ba2c*/ object get_SyncRoot();
            /*0x715ba9c*/ void Clear();
            /*0x715bae4*/ object Clone();
            /*0x715bb98*/ bool Contains(object key);
            /*0x715bbbc*/ bool ContainsKey(object key);
            /*0x715bbe0*/ bool ContainsValue(object value);
            /*0x715bc04*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x715bea8*/ void EnsureCapacity(int min);
            /*0x715bef4*/ object GetByIndex(int index);
            /*0x715bfac*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x715c08c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x715c0f4*/ object GetKey(int index);
            /*0x715c1ac*/ System.Collections.IList GetKeyList();
            /*0x715c260*/ System.Collections.IList GetValueList();
            /*0x715c314*/ object get_Item(object key);
            /*0x715c364*/ void set_Item(object key, object value);
            /*0x715c48c*/ int IndexOfKey(object key);
            /*0x715c528*/ int IndexOfValue(object value);
            /*0x715b668*/ void Insert(int index, object key, object value);
            /*0x715c588*/ void RemoveAt(int index);
            /*0x715c6d0*/ void Remove(object key);

            class SyncSortedList : System.Collections.SortedList
            {
                /*0x48*/ System.Collections.SortedList _list;
                /*0x50*/ object _root;

                /*0x715c7b4*/ SyncSortedList(System.Collections.SortedList list);
                /*0x715c818*/ int get_Count();
                /*0x715c900*/ object get_SyncRoot();
                /*0x715c908*/ bool get_IsReadOnly();
                /*0x715c92c*/ bool get_IsFixedSize();
                /*0x715c950*/ bool get_IsSynchronized();
                /*0x715c958*/ object get_Item(object key);
                /*0x715ca48*/ void set_Item(object key, object value);
                /*0x715cb30*/ void Add(object key, object value);
                /*0x715cc18*/ void Clear();
                /*0x715ccf0*/ object Clone();
                /*0x715cdd8*/ bool Contains(object key);
                /*0x715cec8*/ bool ContainsKey(object key);
                /*0x715cfb8*/ bool ContainsValue(object key);
                /*0x715d0a8*/ void CopyTo(System.Array array, int index);
                /*0x715d190*/ object GetByIndex(int index);
                /*0x715d280*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x715d368*/ object GetKey(int index);
                /*0x715d458*/ System.Collections.IList GetKeyList();
                /*0x715d540*/ System.Collections.IList GetValueList();
                /*0x715d628*/ int IndexOfKey(object key);
                /*0x715d778*/ int IndexOfValue(object value);
                /*0x715d868*/ void RemoveAt(int index);
                /*0x715d948*/ void Remove(object key);
            }

            class SortedListEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.SortedList _sortedList;
                /*0x18*/ object _key;
                /*0x20*/ object _value;
                /*0x28*/ int _index;
                /*0x2c*/ int _startIndex;
                /*0x30*/ int _endIndex;
                /*0x34*/ int _version;
                /*0x38*/ bool _current;
                /*0x3c*/ int _getObjectRetType;

                /*0x715c014*/ SortedListEnumerator(System.Collections.SortedList sortedList, int index, int count, int getObjRetType);
                /*0x715da28*/ object Clone();
                /*0x715da30*/ object get_Key();
                /*0x715dacc*/ bool MoveNext();
                /*0x715dc0c*/ System.Collections.DictionaryEntry get_Entry();
                /*0x715dce0*/ object get_Current();
                /*0x715ddd8*/ object get_Value();
                /*0x715de74*/ void Reset();
            }

            class KeyList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x715c230*/ KeyList(System.Collections.SortedList sortedList);
                /*0x715df10*/ int get_Count();
                /*0x715df2c*/ bool get_IsReadOnly();
                /*0x715df34*/ bool get_IsFixedSize();
                /*0x715df3c*/ bool get_IsSynchronized();
                /*0x715df60*/ object get_SyncRoot();
                /*0x715df84*/ int Add(object key);
                /*0x715dfd0*/ void Clear();
                /*0x715e01c*/ bool Contains(object key);
                /*0x715e040*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x715e10c*/ void Insert(int index, object value);
                /*0x715e158*/ object get_Item(int index);
                /*0x715e17c*/ void set_Item(int index, object value);
                /*0x715e1c8*/ System.Collections.IEnumerator GetEnumerator();
                /*0x715e254*/ int IndexOf(object key);
                /*0x715e31c*/ void Remove(object key);
                /*0x715e368*/ void RemoveAt(int index);
            }

            class ValueList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x715c2e4*/ ValueList(System.Collections.SortedList sortedList);
                /*0x715e3b4*/ int get_Count();
                /*0x715e3d0*/ bool get_IsReadOnly();
                /*0x715e3d8*/ bool get_IsFixedSize();
                /*0x715e3e0*/ bool get_IsSynchronized();
                /*0x715e404*/ object get_SyncRoot();
                /*0x715e428*/ int Add(object key);
                /*0x715e474*/ void Clear();
                /*0x715e4c0*/ bool Contains(object value);
                /*0x715e4e4*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x715e5b0*/ void Insert(int index, object value);
                /*0x715e5fc*/ object get_Item(int index);
                /*0x715e620*/ void set_Item(int index, object value);
                /*0x715e66c*/ System.Collections.IEnumerator GetEnumerator();
                /*0x715e6f8*/ int IndexOf(object value);
                /*0x715e770*/ void Remove(object value);
                /*0x715e7bc*/ void RemoveAt(int index);
            }

            class SortedListDebugView
            {
            }
        }

        class Stack : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            /*0x715e808*/ Stack();
            /*0x715e874*/ Stack(int initialCapacity);
            /*0x715e94c*/ int get_Count();
            /*0x715e954*/ bool get_IsSynchronized();
            /*0x715e95c*/ object get_SyncRoot();
            /*0x715e9cc*/ void Clear();
            /*0x715e9fc*/ object Clone();
            /*0x715ea8c*/ void CopyTo(System.Array array, int index);
            /*0x715ed3c*/ System.Collections.IEnumerator GetEnumerator();
            /*0x715edf0*/ object Peek();
            /*0x715ee74*/ object Pop();
            /*0x715ef14*/ void Push(object obj);

            class StackEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Stack _stack;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0x715ed94*/ StackEnumerator(System.Collections.Stack stack);
                /*0x715f034*/ object Clone();
                /*0x715f03c*/ bool MoveNext();
                /*0x715f150*/ object get_Current();
                /*0x715f1dc*/ void Reset();
            }

            class StackDebugView
            {
            }
        }

        class BitArray : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ int[] m_array;
            /*0x18*/ int m_length;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x715f3d0*/ int GetArrayLength(int n, int div);
            /*0x715f25c*/ BitArray(int length);
            /*0x715f264*/ BitArray(int length, bool defaultValue);
            /*0x715f3ec*/ BitArray(System.Collections.BitArray bits);
            /*0x715f4f0*/ bool get_Item(int index);
            /*0x715f5cc*/ void set_Item(int index, bool value);
            /*0x715f4f4*/ bool Get(int index);
            /*0x715f5d4*/ void Set(int index, bool value);
            /*0x715f6cc*/ void SetAll(bool value);
            /*0x715f73c*/ System.Collections.BitArray Or(System.Collections.BitArray value);
            /*0x715f858*/ int get_Length();
            /*0x715f860*/ void set_Length(int value);
            /*0x715fa28*/ void CopyTo(System.Array array, int index);
            /*0x715ff2c*/ int get_Count();
            /*0x715ff34*/ object get_SyncRoot();
            /*0x715ffa4*/ bool get_IsSynchronized();
            /*0x715ffac*/ object Clone();
            /*0x7160004*/ System.Collections.IEnumerator GetEnumerator();

            class BitArrayEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.BitArray bitarray;
                /*0x18*/ int index;
                /*0x1c*/ int version;
                /*0x20*/ bool currentElement;

                /*0x7160060*/ BitArrayEnumeratorSimple(System.Collections.BitArray bitarray);
                /*0x71600b0*/ object Clone();
                /*0x71600b8*/ bool MoveNext();
                /*0x7160260*/ object get_Current();
                /*0x71603a8*/ void Reset();
            }
        }

        class ArrayList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _items;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x7160b3c*/ System.Collections.ArrayList Adapter(System.Collections.IList list);
            static /*0x71615b0*/ System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list);
            /*0x7160420*/ ArrayList();
            /*0x71604c4*/ ArrayList(int capacity);
            /*0x716061c*/ ArrayList(System.Collections.ICollection c);
            /*0x71607e8*/ void set_Capacity(int value);
            /*0x7160918*/ int get_Count();
            /*0x7160920*/ bool get_IsFixedSize();
            /*0x7160928*/ bool get_IsReadOnly();
            /*0x7160930*/ bool get_IsSynchronized();
            /*0x7160938*/ object get_SyncRoot();
            /*0x71609a8*/ object get_Item(int index);
            /*0x7160a4c*/ void set_Item(int index, object value);
            /*0x7160c24*/ int Add(object value);
            /*0x7160d30*/ void AddRange(System.Collections.ICollection c);
            /*0x7160d4c*/ void Clear();
            /*0x7160d88*/ object Clone();
            /*0x7160e10*/ bool Contains(object item);
            /*0x7160edc*/ void CopyTo(System.Array array);
            /*0x7160ef0*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x7160f9c*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
            /*0x7160cd4*/ void EnsureCapacity(int min);
            /*0x716109c*/ System.Collections.IEnumerator GetEnumerator();
            /*0x7161204*/ int IndexOf(object value);
            /*0x716121c*/ void Insert(int index, object value);
            /*0x7161354*/ void InsertRange(int index, System.Collections.ICollection c);
            /*0x716168c*/ void Remove(object obj);
            /*0x71616cc*/ void RemoveAt(int index);
            /*0x71617b4*/ void RemoveRange(int index, int count);
            /*0x7161934*/ void Sort(System.Collections.IComparer comparer);
            /*0x7161980*/ void Sort(int index, int count, System.Collections.IComparer comparer);
            /*0x7161a78*/ object[] ToArray();
            /*0x7161b58*/ System.Array ToArray(System.Type type);

            class IListWrapper : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.IList _list;

                /*0x7160bf0*/ IListWrapper(System.Collections.IList list);
                /*0x7161c24*/ void set_Capacity(int value);
                /*0x7161cb4*/ int get_Count();
                /*0x7161d58*/ bool get_IsReadOnly();
                /*0x7161dfc*/ bool get_IsFixedSize();
                /*0x7161ea0*/ bool get_IsSynchronized();
                /*0x7161f44*/ object get_Item(int index);
                /*0x7161fec*/ void set_Item(int index, object value);
                /*0x71620b8*/ object get_SyncRoot();
                /*0x716215c*/ int Add(object obj);
                /*0x7162218*/ void AddRange(System.Collections.ICollection c);
                /*0x7162260*/ void Clear();
                /*0x71623c4*/ object Clone();
                /*0x7162430*/ bool Contains(object obj);
                /*0x71624dc*/ void CopyTo(System.Array array, int index);
                /*0x7162594*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x71628c8*/ System.Collections.IEnumerator GetEnumerator();
                /*0x7162968*/ int IndexOf(object value);
                /*0x7162a14*/ void Insert(int index, object obj);
                /*0x7162ae0*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x7162ea8*/ void Remove(object value);
                /*0x7162ee8*/ void RemoveAt(int index);
                /*0x7162fa4*/ void RemoveRange(int index, int count);
                /*0x71631bc*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x7163474*/ object[] ToArray();
                /*0x71635e0*/ System.Array ToArray(System.Type type);
            }

            class ReadOnlyArrayList : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.ArrayList _list;

                /*0x7161660*/ ReadOnlyArrayList(System.Collections.ArrayList l);
                /*0x7163788*/ int get_Count();
                /*0x71637ac*/ bool get_IsReadOnly();
                /*0x71637b4*/ bool get_IsFixedSize();
                /*0x71637bc*/ bool get_IsSynchronized();
                /*0x71637e0*/ object get_Item(int index);
                /*0x7163804*/ void set_Item(int index, object value);
                /*0x7163850*/ object get_SyncRoot();
                /*0x7163874*/ int Add(object obj);
                /*0x71638c0*/ void AddRange(System.Collections.ICollection c);
                /*0x716390c*/ void set_Capacity(int value);
                /*0x7163958*/ void Clear();
                /*0x71639a4*/ object Clone();
                /*0x7163ab8*/ bool Contains(object obj);
                /*0x7163adc*/ void CopyTo(System.Array array, int index);
                /*0x7163b00*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x7163b24*/ System.Collections.IEnumerator GetEnumerator();
                /*0x7163b48*/ int IndexOf(object value);
                /*0x7163b6c*/ void Insert(int index, object obj);
                /*0x7163bb8*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x7163c04*/ void Remove(object value);
                /*0x7163c50*/ void RemoveAt(int index);
                /*0x7163c9c*/ void RemoveRange(int index, int count);
                /*0x7163ce8*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x7163d34*/ object[] ToArray();
                /*0x7163d58*/ System.Array ToArray(System.Type type);
            }

            class ArrayListEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                static /*0x0*/ object s_dummyObject;
                /*0x10*/ System.Collections.ArrayList _list;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;
                /*0x28*/ bool _isArrayList;

                static /*0x7164100*/ ArrayListEnumeratorSimple();
                /*0x71610f4*/ ArrayListEnumeratorSimple(System.Collections.ArrayList list);
                /*0x7163d7c*/ object Clone();
                /*0x7163d84*/ bool MoveNext();
                /*0x7163f60*/ object get_Current();
                /*0x716402c*/ void Reset();
            }

            class ArrayListDebugView
            {
            }
        }

        class Hashtable : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ICloneable
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;
            /*0x10*/ System.Collections.Hashtable.bucket[] _buckets;
            /*0x18*/ int _count;
            /*0x1c*/ int _occupancy;
            /*0x20*/ int _loadsize;
            /*0x24*/ float _loadFactor;
            /*0x28*/ int _version;
            /*0x2c*/ bool _isWriterInProgress;
            /*0x30*/ System.Collections.ICollection _keys;
            /*0x38*/ System.Collections.ICollection _values;
            /*0x40*/ System.Collections.IEqualityComparer _keycomparer;
            /*0x48*/ object _syncRoot;

            static /*0x716417c*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
            static /*0x7165da4*/ System.Collections.Hashtable Synchronized(System.Collections.Hashtable table);
            /*0x71641d8*/ Hashtable(bool trash);
            /*0x71641e0*/ Hashtable();
            /*0x7164494*/ Hashtable(int capacity);
            /*0x71641ec*/ Hashtable(int capacity, float loadFactor);
            /*0x716449c*/ Hashtable(int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
            /*0x71644c8*/ Hashtable(System.Collections.IEqualityComparer equalityComparer);
            /*0x71644fc*/ Hashtable(int capacity, System.Collections.IEqualityComparer equalityComparer);
            /*0x716452c*/ Hashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7164594*/ uint InitHash(object key, int hashsize, ref uint seed, ref uint incr);
            /*0x71645e8*/ void Add(object key, object value);
            /*0x7164a50*/ void Clear();
            /*0x7164b50*/ object Clone();
            /*0x7164c6c*/ bool Contains(object key);
            /*0x7164c7c*/ bool ContainsKey(object key);
            /*0x7164de0*/ void CopyKeys(System.Array array, int arrayIndex);
            /*0x7164e84*/ void CopyEntries(System.Array array, int arrayIndex);
            /*0x7164f84*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x7165124*/ void CopyValues(System.Array array, int arrayIndex);
            /*0x71651cc*/ object get_Item(object key);
            /*0x71653ec*/ void set_Item(object key, object value);
            /*0x71653f4*/ void expand();
            /*0x716559c*/ void rehash();
            /*0x7164b24*/ void UpdateVersion();
            /*0x7165464*/ void rehash(int newsize);
            /*0x71656b8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x7165778*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x71657d4*/ int GetHash(object key);
            /*0x716589c*/ bool get_IsReadOnly();
            /*0x71658a4*/ bool get_IsFixedSize();
            /*0x71658ac*/ bool get_IsSynchronized();
            /*0x71658b4*/ bool KeyEquals(object item, object key);
            /*0x71659bc*/ System.Collections.ICollection get_Keys();
            /*0x7165a70*/ System.Collections.ICollection get_Values();
            /*0x71645f0*/ void Insert(object key, object nvalue, bool add);
            /*0x71655b8*/ void putEntry(System.Collections.Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode);
            /*0x7165b24*/ void Remove(object key);
            /*0x7165d2c*/ object get_SyncRoot();
            /*0x7165d9c*/ int get_Count();
            /*0x7165e88*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71663bc*/ void OnDeserialization(object sender);

            struct bucket
            {
                /*0x10*/ object key;
                /*0x18*/ object val;
                /*0x20*/ int hash_coll;
            }

            class KeyCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x7165a40*/ KeyCollection(System.Collections.Hashtable hashtable);
                /*0x7166c58*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x7166dd4*/ System.Collections.IEnumerator GetEnumerator();
                /*0x7166e34*/ bool get_IsSynchronized();
                /*0x7166e58*/ object get_SyncRoot();
                /*0x7166e7c*/ int get_Count();
            }

            class ValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x7165af4*/ ValueCollection(System.Collections.Hashtable hashtable);
                /*0x7166e98*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x7167014*/ System.Collections.IEnumerator GetEnumerator();
                /*0x7167074*/ bool get_IsSynchronized();
                /*0x7167098*/ object get_SyncRoot();
                /*0x71670bc*/ int get_Count();
            }

            class SyncHashtable : System.Collections.Hashtable, System.Collections.IEnumerable
            {
                /*0x50*/ System.Collections.Hashtable _table;

                /*0x7165e58*/ SyncHashtable(System.Collections.Hashtable table);
                /*0x71670d8*/ SyncHashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7167114*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x716714c*/ int get_Count();
                /*0x7167170*/ bool get_IsReadOnly();
                /*0x7167194*/ bool get_IsFixedSize();
                /*0x71671b8*/ bool get_IsSynchronized();
                /*0x71671c0*/ object get_Item(object key);
                /*0x71671e4*/ void set_Item(object key, object value);
                /*0x71672e4*/ object get_SyncRoot();
                /*0x7167308*/ void Add(object key, object value);
                /*0x7167408*/ void Clear();
                /*0x71674f8*/ bool Contains(object key);
                /*0x716751c*/ bool ContainsKey(object key);
                /*0x71675a8*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x71676a8*/ object Clone();
                /*0x716780c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x7167830*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x7167854*/ System.Collections.ICollection get_Keys();
                /*0x7167954*/ System.Collections.ICollection get_Values();
                /*0x7167a54*/ void Remove(object key);
                /*0x7167b4c*/ void OnDeserialization(object sender);
            }

            class HashtableEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;
                /*0x18*/ int _bucket;
                /*0x1c*/ int _version;
                /*0x20*/ bool _current;
                /*0x24*/ int _getObjectRetType;
                /*0x28*/ object _currentKey;
                /*0x30*/ object _currentValue;

                /*0x7165714*/ HashtableEnumerator(System.Collections.Hashtable hashtable, int getObjRetType);
                /*0x7167b50*/ object Clone();
                /*0x7167b58*/ object get_Key();
                /*0x7167bb8*/ bool MoveNext();
                /*0x7167d08*/ System.Collections.DictionaryEntry get_Entry();
                /*0x7167d84*/ object get_Current();
                /*0x7167e68*/ object get_Value();
                /*0x7167ec8*/ void Reset();
            }

            class HashtableDebugView
            {
            }
        }

        interface IHashCodeProvider
        {
            /*0x381467c*/ int GetHashCode(object obj);
        }

        namespace Concurrent
        {
            class ConcurrentQueue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ object _crossSegmentLock;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _tail;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _head;

                static /*0x382f928*/ int GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> s, int head, int tail);
                static /*0x3910ae8*/ long GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                /*0x38159dc*/ ConcurrentQueue();
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x38148bc*/ T[] ToArray();
                /*0x3814574*/ int get_Count();
                /*0x381678c*/ void CopyTo(T[] array, int index);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x3816958*/ void SnapForObservation(ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, ref int headHead, ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, ref int tailTail);
                /*0x3910ae8*/ T GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue.Segment<T> segment, int i);
                /*0x3910ae8*/ System.Collections.Generic.IEnumerator<T> Enumerate(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                /*0x3910ae8*/ void Enqueue(T item);
                /*0x3910ae8*/ void EnqueueSlow(T item);
                /*0x38141c4*/ bool TryDequeue(ref T result);
                /*0x38141c4*/ bool TryDequeueSlow(ref T item);
                /*0x38159dc*/ void Clear();

                class Segment<T>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment.Slot<T> _slots;
                    /*0x0*/ int _slotsMask;
                    /*0x0*/ System.Collections.Concurrent.PaddedHeadAndTail _headAndTail;
                    /*0x0*/ bool _preservedForObservation;
                    /*0x0*/ bool _frozenForEnqueues;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _nextSegment;

                    /*0x3815ed0*/ Segment(int boundedLength);
                    /*0x3814574*/ int get_Capacity();
                    /*0x3814574*/ int get_FreezeOffset();
                    /*0x38159dc*/ void EnsureFrozenForEnqueues();
                    /*0x38141c4*/ bool TryDequeue(ref T item);
                    /*0x3910ae8*/ bool TryEnqueue(T item);

                    struct Slot<T>
                    {
                        /*0x0*/ T Item;
                        /*0x0*/ int SequenceNumber;
                    }
                }

                class <Enumerate>d__28<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail;
                    /*0x0*/ int tailTail;
                    /*0x0*/ int headHead;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<T> <>4__this;
                    /*0x0*/ int <headTail>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> <s>5__4;
                    /*0x0*/ int <i>5__5;

                    /*0x3815ed0*/ <Enumerate>d__28(int <>1__state);
                    /*0x38159dc*/ void System.IDisposable.Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ T System.Collections.Generic.IEnumerator<T>.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            struct PaddedHeadAndTail
            {
                /*0x90*/ int Head;
                /*0x110*/ int Tail;
            }

            class CDSCollectionETWBCLProvider : System.Diagnostics.Tracing.EventSource
            {
                static /*0x0*/ System.Collections.Concurrent.CDSCollectionETWBCLProvider Log;

                static /*0x7167fd4*/ CDSCollectionETWBCLProvider();
                /*0x7167f80*/ CDSCollectionETWBCLProvider();
                /*0x7167f88*/ void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets);
            }

            class ConcurrentDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                static /*0x0*/ bool s_isValueWriteAtomic;
                /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> _tables;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ bool _growLockArray;
                /*0x0*/ int _budget;
                /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _serializationArray;
                /*0x0*/ int _serializationConcurrencyLevel;
                /*0x0*/ int _serializationCapacity;

                static /*0x383e7a0*/ ConcurrentDictionary();
                static /*0x3821564*/ bool IsValueWriteAtomic();
                static /*0x3840c74*/ void ThrowKeyNotFoundException(object key);
                static /*0x383e7a0*/ void ThrowKeyNullException();
                static /*0x382d2b0*/ int GetBucket(int hashcode, int bucketCount);
                static /*0x3910ae8*/ void GetBucketAndLockNo(int hashcode, ref int bucketNo, ref int lockNo, int bucketCount, int lockCount);
                static /*0x382ad0c*/ int get_DefaultConcurrencyLevel();
                /*0x38159dc*/ ConcurrentDictionary();
                /*0x3816710*/ ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3910ae8*/ ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3816710*/ void InitializeFromCollection(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection);
                /*0x3910ae8*/ bool TryAdd(TKey key, TValue value);
                /*0x3910ae8*/ bool ContainsKey(TKey key);
                /*0x3910ae8*/ bool TryRemove(TKey key, ref TValue value);
                /*0x3910ae8*/ bool TryRemoveInternal(TKey key, ref TValue value, bool matchValue, TValue oldValue);
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3910ae8*/ bool TryGetValueInternal(TKey key, int hashcode, ref TValue value);
                /*0x3910ae8*/ bool TryUpdateInternal(TKey key, int hashcode, TValue newValue, TValue comparisonValue);
                /*0x38159dc*/ void Clear();
                /*0x381678c*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x38148bc*/ System.Collections.Generic.KeyValuePair<TKey, TValue> ToArray();
                /*0x381678c*/ void CopyToPairs(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x381678c*/ void CopyToEntries(System.Collections.DictionaryEntry[] array, int index);
                /*0x381678c*/ void CopyToObjects(object[] array, int index);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                /*0x3910ae8*/ bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, ref TValue resultingValue);
                /*0x3910ae8*/ TValue get_Item(TKey key);
                /*0x3910ae8*/ void set_Item(TKey key, TValue value);
                /*0x3814574*/ int get_Count();
                /*0x3814574*/ int GetCountInternal();
                /*0x3910ae8*/ TValue GetOrAdd(TKey key, System.Func<TKey, TValue> valueFactory);
                /*0x3910ae8*/ TValue GetOrAdd(TKey key, TValue value);
                /*0x3910ae8*/ TValue AddOrUpdate(TKey key, System.Func<TKey, TValue> addValueFactory, System.Func<TKey, TValue, TValue> updateValueFactory);
                /*0x3910ae8*/ TValue AddOrUpdate(TKey key, TValue addValue, System.Func<TKey, TValue, TValue> updateValueFactory);
                /*0x3910ae8*/ void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                /*0x3910ae8*/ bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                /*0x38148bc*/ System.Collections.Generic.ICollection<TKey> get_Keys();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                /*0x38148bc*/ System.Collections.Generic.ICollection<TValue> get_Values();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
                /*0x3910ae8*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3816810*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x38141c4*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x38148bc*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x3813ffc*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x3813ffc*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x38148bc*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x3816710*/ void System.Collections.IDictionary.Remove(object key);
                /*0x38148bc*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x3814a3c*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x3816810*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x3816710*/ void GrowTable(System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> tables);
                /*0x3816710*/ void AcquireAllLocks(ref int locksAcquired);
                /*0x3816000*/ void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
                /*0x3815fb8*/ void ReleaseLocks(int fromInclusive, int toExclusive);
                /*0x38148bc*/ System.Collections.ObjectModel.ReadOnlyCollection<TKey> GetKeys();
                /*0x38148bc*/ System.Collections.ObjectModel.ReadOnlyCollection<TValue> GetValues();
                /*0x3816fbc*/ void OnSerializing(System.Runtime.Serialization.StreamingContext context);
                /*0x3816fbc*/ void OnSerialized(System.Runtime.Serialization.StreamingContext context);
                /*0x3816fbc*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);

                class Tables<TKey, TValue>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _buckets;
                    /*0x0*/ object[] _locks;
                    /*0x0*/ int[] _countPerLock;

                    /*0x3816920*/ Tables(System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> buckets, object[] locks, int[] countPerLock);
                }

                class Node<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _next;
                    /*0x0*/ int _hashcode;

                    /*0x3910ae8*/ Node(TKey key, TValue value, int hashcode, System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> next);
                }

                class DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    /*0x3816710*/ DictionaryEnumerator(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    /*0x38148bc*/ object get_Key();
                    /*0x38148bc*/ object get_Value();
                    /*0x38148bc*/ object get_Current();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x38159dc*/ void Reset();
                }

                class <GetEnumerator>d__35<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> <>4__this;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <buckets>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <current>5__4;

                    /*0x3815ed0*/ <GetEnumerator>d__35(int <>1__state);
                    /*0x38159dc*/ void System.IDisposable.Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ System.Collections.Generic.KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class ConcurrentStack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> _head;

                /*0x38159dc*/ ConcurrentStack();
                /*0x3816710*/ ConcurrentStack(System.Collections.Generic.IEnumerable<T> collection);
                /*0x3816710*/ void InitializeFromCollection(System.Collections.Generic.IEnumerable<T> collection);
                /*0x3814574*/ int get_Count();
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x38148bc*/ System.Collections.Generic.List<T> ToList();
                /*0x3814a3c*/ System.Collections.Generic.List<T> ToList(System.Collections.Concurrent.ConcurrentStack.Node<T> curr);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x3814a3c*/ System.Collections.Generic.IEnumerator<T> GetEnumerator(System.Collections.Concurrent.ConcurrentStack.Node<T> head);
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class Node<T>
                {
                    /*0x0*/ T _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> _next;

                    /*0x3910ae8*/ Node(T value);
                }

                class <GetEnumerator>d__35<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> <current>5__2;

                    /*0x3815ed0*/ <GetEnumerator>d__35(int <>1__state);
                    /*0x38159dc*/ void System.IDisposable.Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ T System.Collections.Generic.IEnumerator<T>.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            class IProducerConsumerCollectionDebugView<T>
            {
            }
        }

        namespace ObjectModel
        {
            class Collection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> items;

                static /*0x3823ae0*/ bool IsCompatibleObject(object value);
                /*0x38159dc*/ Collection();
                /*0x3816710*/ Collection(System.Collections.Generic.IList<T> list);
                /*0x3814574*/ int get_Count();
                /*0x38148bc*/ System.Collections.Generic.IList<T> get_Items();
                /*0x3910ae8*/ T get_Item(int index);
                /*0x3910ae8*/ void set_Item(int index, T value);
                /*0x3910ae8*/ void Add(T item);
                /*0x38159dc*/ void Clear();
                /*0x381678c*/ void CopyTo(T[] array, int index);
                /*0x3910ae8*/ bool Contains(T item);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x3910ae8*/ int IndexOf(T item);
                /*0x3910ae8*/ void Insert(int index, T item);
                /*0x3910ae8*/ bool Remove(T item);
                /*0x3815ed0*/ void RemoveAt(int index);
                /*0x38159dc*/ void ClearItems();
                /*0x3910ae8*/ void InsertItem(int index, T item);
                /*0x3815ed0*/ void RemoveItem(int index);
                /*0x3910ae8*/ void SetItem(int index, T item);
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3814964*/ object System.Collections.IList.get_Item(int index);
                /*0x3816044*/ void System.Collections.IList.set_Item(int index, object value);
                /*0x3813ffc*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x3813ffc*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x381467c*/ int System.Collections.IList.Add(object value);
                /*0x38141c4*/ bool System.Collections.IList.Contains(object value);
                /*0x381467c*/ int System.Collections.IList.IndexOf(object value);
                /*0x3816044*/ void System.Collections.IList.Insert(int index, object value);
                /*0x3816710*/ void System.Collections.IList.Remove(object value);
            }

            class ReadOnlyCollection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> list;
                /*0x0*/ object _syncRoot;

                static /*0x3823ae0*/ bool IsCompatibleObject(object value);
                /*0x3816710*/ ReadOnlyCollection(System.Collections.Generic.IList<T> list);
                /*0x3814574*/ int get_Count();
                /*0x3910ae8*/ T get_Item(int index);
                /*0x3910ae8*/ bool Contains(T value);
                /*0x381678c*/ void CopyTo(T[] array, int index);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x3910ae8*/ int IndexOf(T value);
                /*0x38148bc*/ System.Collections.Generic.IList<T> get_Items();
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x3910ae8*/ T System.Collections.Generic.IList<T>.get_Item(int index);
                /*0x3910ae8*/ void System.Collections.Generic.IList<T>.set_Item(int index, T value);
                /*0x3910ae8*/ void System.Collections.Generic.ICollection<T>.Add(T value);
                /*0x38159dc*/ void System.Collections.Generic.ICollection<T>.Clear();
                /*0x3910ae8*/ void System.Collections.Generic.IList<T>.Insert(int index, T value);
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<T>.Remove(T value);
                /*0x3815ed0*/ void System.Collections.Generic.IList<T>.RemoveAt(int index);
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3813ffc*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x3813ffc*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x3814964*/ object System.Collections.IList.get_Item(int index);
                /*0x3816044*/ void System.Collections.IList.set_Item(int index, object value);
                /*0x381467c*/ int System.Collections.IList.Add(object value);
                /*0x38159dc*/ void System.Collections.IList.Clear();
                /*0x38141c4*/ bool System.Collections.IList.Contains(object value);
                /*0x381467c*/ int System.Collections.IList.IndexOf(object value);
                /*0x3816044*/ void System.Collections.IList.Insert(int index, object value);
                /*0x3816710*/ void System.Collections.IList.Remove(object value);
                /*0x3815ed0*/ void System.Collections.IList.RemoveAt(int index);
            }

            class KeyedCollection<TKey, TItem> : System.Collections.ObjectModel.Collection<TItem>
            {
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> comparer;
                /*0x0*/ System.Collections.Generic.Dictionary<TKey, TItem> dict;
                /*0x0*/ int keyCount;
                /*0x0*/ int threshold;

                /*0x38159dc*/ KeyedCollection();
                /*0x3816710*/ KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x381678c*/ KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold);
                /*0x38148bc*/ System.Collections.Generic.List<TItem> get_Items();
                /*0x3910ae8*/ TItem get_Item(TKey key);
                /*0x3910ae8*/ bool Contains(TKey key);
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TItem item);
                /*0x3910ae8*/ bool Remove(TKey key);
                /*0x38148bc*/ System.Collections.Generic.IDictionary<TKey, TItem> get_Dictionary();
                /*0x38159dc*/ void ClearItems();
                /*0x3910ae8*/ TKey GetKeyForItem(TItem item);
                /*0x3910ae8*/ void InsertItem(int index, TItem item);
                /*0x3815ed0*/ void RemoveItem(int index);
                /*0x3910ae8*/ void SetItem(int index, TItem item);
                /*0x3910ae8*/ void AddKey(TKey key, TItem item);
                /*0x38159dc*/ void CreateDictionary();
                /*0x3910ae8*/ void RemoveKey(TKey key);
            }

            class ReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> m_dictionary;
                /*0x0*/ object _syncRoot;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> _values;

                static /*0x3823ae0*/ bool IsCompatibleKey(object key);
                /*0x3816710*/ ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                /*0x38148bc*/ System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> get_Keys();
                /*0x38148bc*/ System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> get_Values();
                /*0x3910ae8*/ bool ContainsKey(TKey key);
                /*0x38148bc*/ System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x38148bc*/ System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                /*0x3910ae8*/ TValue get_Item(TKey key);
                /*0x3910ae8*/ void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                /*0x3910ae8*/ bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                /*0x3910ae8*/ TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
                /*0x3910ae8*/ void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
                /*0x3814574*/ int get_Count();
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                /*0x381678c*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int arrayIndex);
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x3910ae8*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                /*0x38159dc*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3816810*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x38159dc*/ void System.Collections.IDictionary.Clear();
                /*0x38141c4*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x38148bc*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x3813ffc*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x3813ffc*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x38148bc*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x3816710*/ void System.Collections.IDictionary.Remove(object key);
                /*0x38148bc*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x3814a3c*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x3816810*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();

                struct DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> _dictionary;
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    /*0x3816710*/ DictionaryEnumerator(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    /*0x38148bc*/ object get_Key();
                    /*0x38148bc*/ object get_Value();
                    /*0x38148bc*/ object get_Current();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x38159dc*/ void Reset();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TKey> _collection;
                    /*0x0*/ object _syncRoot;

                    /*0x3816710*/ KeyCollection(System.Collections.Generic.ICollection<TKey> collection);
                    /*0x38159dc*/ KeyCollection();
                    /*0x3910ae8*/ void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    /*0x38159dc*/ void System.Collections.Generic.ICollection<TKey>.Clear();
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    /*0x381678c*/ void CopyTo(TKey[] array, int arrayIndex);
                    /*0x3814574*/ int get_Count();
                    /*0x3813ffc*/ bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    /*0x38148bc*/ System.Collections.Generic.IEnumerator<TKey> GetEnumerator();
                    /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TValue> _collection;
                    /*0x0*/ object _syncRoot;

                    /*0x3816710*/ ValueCollection(System.Collections.Generic.ICollection<TValue> collection);
                    /*0x38159dc*/ ValueCollection();
                    /*0x3910ae8*/ void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    /*0x38159dc*/ void System.Collections.Generic.ICollection<TValue>.Clear();
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    /*0x381678c*/ void CopyTo(TValue[] array, int arrayIndex);
                    /*0x3814574*/ int get_Count();
                    /*0x3813ffc*/ bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    /*0x38148bc*/ System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
                    /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                }
            }

            class ReadOnlyDictionaryHelpers
            {
                static /*0x384432c*/ void CopyToNonGenericICollectionHelper<T>(System.Collections.Generic.ICollection<T> collection, System.Array array, int index);
            }
        }

        namespace Generic
        {
            enum InsertionBehavior
            {
                None = 0,
                OverwriteExisting = 1,
                ThrowOnExisting = 2,
            }

            class Dictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
            {
                /*0x0*/ int[] _buckets;
                /*0x0*/ System.Collections.Generic.Dictionary.Entry<TKey, TValue> _entries;
                /*0x0*/ int _count;
                /*0x0*/ int _freeList;
                /*0x0*/ int _freeCount;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> _values;
                /*0x0*/ object _syncRoot;

                static /*0x3823ae0*/ bool IsCompatibleKey(object key);
                /*0x38159dc*/ Dictionary();
                /*0x3815ed0*/ Dictionary(int capacity);
                /*0x3816710*/ Dictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3816044*/ Dictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3816710*/ Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                /*0x3816810*/ Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x3814574*/ int get_Count();
                /*0x38148bc*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> get_Keys();
                /*0x38148bc*/ System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                /*0x38148bc*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> get_Values();
                /*0x38148bc*/ System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
                /*0x3910ae8*/ TValue get_Item(TKey key);
                /*0x3910ae8*/ void set_Item(TKey key, TValue value);
                /*0x3910ae8*/ void Add(TKey key, TValue value);
                /*0x3910ae8*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3910ae8*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x38159dc*/ void Clear();
                /*0x3910ae8*/ bool ContainsKey(TKey key);
                /*0x3910ae8*/ bool ContainsValue(TValue value);
                /*0x381678c*/ void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x3910ae8*/ System.Collections.Generic.Dictionary.Enumerator<TKey, TValue> GetEnumerator();
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x3910ae8*/ int FindEntry(TKey key);
                /*0x38145a0*/ int Initialize(int capacity);
                /*0x3910ae8*/ bool TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior);
                /*0x3816710*/ void OnDeserialization(object sender);
                /*0x38159dc*/ void Resize();
                /*0x3815f10*/ void Resize(int newSize, bool forceNewHashCodes);
                /*0x3910ae8*/ bool Remove(TKey key);
                /*0x3910ae8*/ bool Remove(TKey key, ref TValue value);
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3910ae8*/ bool TryAdd(TKey key, TValue value);
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x381678c*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x38145a0*/ int EnsureCapacity(int capacity);
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x3813ffc*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x3813ffc*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x38148bc*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x38148bc*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x3814a3c*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x3816810*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x3816810*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x38141c4*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x38148bc*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x3816710*/ void System.Collections.IDictionary.Remove(object key);

                struct Entry<TKey, TValue>
                {
                    /*0x0*/ int hashCode;
                    /*0x0*/ int next;
                    /*0x0*/ TKey key;
                    /*0x0*/ TValue value;
                }

                struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator, System.Collections.IDictionaryEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;
                    /*0x0*/ int _getEnumeratorRetType;

                    /*0x381678c*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    /*0x38159dc*/ void Dispose();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                    System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry();
                    /*0x38148bc*/ object System.Collections.IDictionaryEnumerator.get_Key();
                    /*0x38148bc*/ object System.Collections.IDictionaryEnumerator.get_Value();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    /*0x3816710*/ KeyCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    /*0x3910ae8*/ System.Collections.Generic.Dictionary.KeyCollection.Enumerator<TKey, TValue> GetEnumerator();
                    /*0x381678c*/ void CopyTo(TKey[] array, int index);
                    /*0x3814574*/ int get_Count();
                    /*0x3813ffc*/ bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    /*0x3910ae8*/ void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    /*0x38159dc*/ void System.Collections.Generic.ICollection<TKey>.Clear();
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    /*0x38148bc*/ System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
                    /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TKey>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TKey _currentKey;

                        /*0x3816710*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        /*0x38159dc*/ void Dispose();
                        /*0x3813ffc*/ bool MoveNext();
                        /*0x3910ae8*/ TKey get_Current();
                        /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                        /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                    }
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    /*0x3816710*/ ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    /*0x3910ae8*/ System.Collections.Generic.Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator();
                    /*0x381678c*/ void CopyTo(TValue[] array, int index);
                    /*0x3814574*/ int get_Count();
                    /*0x3813ffc*/ bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    /*0x3910ae8*/ void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    /*0x38159dc*/ void System.Collections.Generic.ICollection<TValue>.Clear();
                    /*0x3910ae8*/ bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    /*0x38148bc*/ System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
                    /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TValue>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TValue _currentValue;

                        /*0x3816710*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        /*0x38159dc*/ void Dispose();
                        /*0x3813ffc*/ bool MoveNext();
                        /*0x3910ae8*/ TValue get_Current();
                        /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                        /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                    }
                }
            }

            interface IAsyncEnumerable<T>
            {
                /*0x38148e8*/ System.Collections.Generic.IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken);
            }

            interface IAsyncEnumerator<T> : System.IAsyncDisposable
            {
                System.Threading.Tasks.ValueTask<bool> MoveNextAsync();
                /*0x3910ae8*/ T get_Current();
            }

            interface ICollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x3814574*/ int get_Count();
                /*0x3813ffc*/ bool get_IsReadOnly();
                /*0x3910ae8*/ void Add(T item);
                /*0x38159dc*/ void Clear();
                /*0x3910ae8*/ bool Contains(T item);
                /*0x381678c*/ void CopyTo(T[] array, int arrayIndex);
                /*0x3910ae8*/ bool Remove(T item);
            }

            class ICollectionDebugView<T>
            {
            }

            interface IComparer<T>
            {
                /*0x3910ae8*/ int Compare(T x, T y);
            }

            interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x3910ae8*/ TValue get_Item(TKey key);
                /*0x3910ae8*/ void set_Item(TKey key, TValue value);
                /*0x38148bc*/ System.Collections.Generic.ICollection<TKey> get_Keys();
                /*0x38148bc*/ System.Collections.Generic.ICollection<TValue> get_Values();
                /*0x3910ae8*/ bool ContainsKey(TKey key);
                /*0x3910ae8*/ void Add(TKey key, TValue value);
                /*0x3910ae8*/ bool Remove(TKey key);
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TValue value);
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class DictionaryKeyCollectionDebugView<TKey, TValue>
            {
            }

            class DictionaryValueCollectionDebugView<TKey, TValue>
            {
            }

            interface IEnumerable<T> : System.Collections.IEnumerable
            {
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
            }

            interface IEnumerator<T> : System.IDisposable, System.Collections.IEnumerator
            {
                /*0x3910ae8*/ T get_Current();
            }

            interface IEqualityComparer<T>
            {
                /*0x3910ae8*/ bool Equals(T x, T y);
                /*0x3910ae8*/ int GetHashCode(T obj);
            }

            interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x3910ae8*/ T get_Item(int index);
                /*0x3910ae8*/ void set_Item(int index, T value);
                /*0x3910ae8*/ int IndexOf(T item);
                /*0x3910ae8*/ void Insert(int index, T item);
                /*0x3815ed0*/ void RemoveAt(int index);
            }

            interface IReadOnlyCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x3814574*/ int get_Count();
            }

            interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x3910ae8*/ bool ContainsKey(TKey key);
                /*0x3910ae8*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3910ae8*/ TValue get_Item(TKey key);
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TKey> get_Keys();
                /*0x38148bc*/ System.Collections.Generic.IEnumerable<TValue> get_Values();
            }

            interface IReadOnlyList<T> : System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x3910ae8*/ T get_Item(int index);
            }

            class KeyNotFoundException : System.SystemException
            {
                /*0x716803c*/ KeyNotFoundException();
                /*0x7168098*/ KeyNotFoundException(string message);
                /*0x71680bc*/ KeyNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class KeyValuePair
            {
                static /*0x71680c4*/ string PairToString(object key, object value);
            }

            struct KeyValuePair<TKey, TValue>
            {
                /*0x0*/ TKey key;
                /*0x0*/ TValue value;

                /*0x3910ae8*/ KeyValuePair(TKey key, TValue value);
                /*0x3910ae8*/ TKey get_Key();
                /*0x3910ae8*/ TValue get_Value();
                /*0x38148bc*/ string ToString();
                /*0x3816810*/ void Deconstruct(ref TKey key, ref TValue value);
            }

            class List<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                static /*0x383e7a0*/ List();
                static /*0x3823ae0*/ bool IsCompatibleObject(object value);
                /*0x38159dc*/ List();
                /*0x3815ed0*/ List(int capacity);
                /*0x3816710*/ List(System.Collections.Generic.IEnumerable<T> collection);
                /*0x3814574*/ int get_Capacity();
                /*0x3815ed0*/ void set_Capacity(int value);
                /*0x3814574*/ int get_Count();
                /*0x3813ffc*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x3813ffc*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x3910ae8*/ T get_Item(int index);
                /*0x3910ae8*/ void set_Item(int index, T value);
                /*0x3814964*/ object System.Collections.IList.get_Item(int index);
                /*0x3816044*/ void System.Collections.IList.set_Item(int index, object value);
                /*0x3910ae8*/ void Add(T item);
                /*0x3910ae8*/ void AddWithResize(T item);
                /*0x381467c*/ int System.Collections.IList.Add(object item);
                /*0x3816710*/ void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                /*0x38148bc*/ System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly();
                /*0x3910ae8*/ int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);
                /*0x3910ae8*/ int BinarySearch(T item);
                /*0x3910ae8*/ int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer);
                /*0x38159dc*/ void Clear();
                /*0x3910ae8*/ bool Contains(T item);
                /*0x38141c4*/ bool System.Collections.IList.Contains(object item);
                /*0x3816710*/ void CopyTo(T[] array);
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                void CopyTo(int index, T[] array, int arrayIndex, int count);
                /*0x381678c*/ void CopyTo(T[] array, int arrayIndex);
                /*0x3815ed0*/ void EnsureCapacity(int min);
                /*0x38141c4*/ bool Exists(System.Predicate<T> match);
                /*0x3910ae8*/ T Find(System.Predicate<T> match);
                /*0x3814a3c*/ System.Collections.Generic.List<T> FindAll(System.Predicate<T> match);
                /*0x381467c*/ int FindIndex(System.Predicate<T> match);
                int FindIndex(int startIndex, System.Predicate<T> match);
                /*0x3910ae8*/ int FindIndex(int startIndex, int count, System.Predicate<T> match);
                /*0x3910ae8*/ T FindLast(System.Predicate<T> match);
                /*0x381467c*/ int FindLastIndex(System.Predicate<T> match);
                /*0x3910ae8*/ int FindLastIndex(int startIndex, int count, System.Predicate<T> match);
                /*0x3816710*/ void ForEach(System.Action<T> action);
                /*0x3910ae8*/ System.Collections.Generic.List.Enumerator<T> GetEnumerator();
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                System.Collections.Generic.List<T> GetRange(int index, int count);
                /*0x3910ae8*/ int IndexOf(T item);
                /*0x381467c*/ int System.Collections.IList.IndexOf(object item);
                /*0x3910ae8*/ void Insert(int index, T item);
                /*0x3816044*/ void System.Collections.IList.Insert(int index, object item);
                /*0x3816044*/ void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                /*0x3910ae8*/ bool Remove(T item);
                /*0x3816710*/ void System.Collections.IList.Remove(object item);
                /*0x381467c*/ int RemoveAll(System.Predicate<T> match);
                /*0x3815ed0*/ void RemoveAt(int index);
                /*0x3815fb8*/ void RemoveRange(int index, int count);
                /*0x38159dc*/ void Reverse();
                /*0x3815fb8*/ void Reverse(int index, int count);
                /*0x38159dc*/ void Sort();
                /*0x3816710*/ void Sort(System.Collections.Generic.IComparer<T> comparer);
                /*0x3816000*/ void Sort(int index, int count, System.Collections.Generic.IComparer<T> comparer);
                /*0x3816710*/ void Sort(System.Comparison<T> comparison);
                /*0x38148bc*/ T[] ToArray();
                /*0x38159dc*/ void TrimExcess();
                /*0x3816710*/ void AddEnumerable(System.Collections.Generic.IEnumerable<T> enumerable);

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.List<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    /*0x3816710*/ Enumerator(System.Collections.Generic.List<T> list);
                    /*0x38159dc*/ void Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3813ffc*/ bool MoveNextRare();
                    /*0x3910ae8*/ T get_Current();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                }
            }

            struct ValueListBuilder<T>
            {
                /*0x0*/ System.Span<T> _span;
                /*0x0*/ T[] _arrayFromPool;
                /*0x0*/ int _pos;

                /*0x3910ae8*/ ValueListBuilder(System.Span<T> initialSpan);
                /*0x3814574*/ int get_Length();
                /*0x3910ae8*/ void Append(T item);
                /*0x3910ae8*/ System.ReadOnlySpan<T> AsSpan();
                /*0x38159dc*/ void Dispose();
                /*0x38159dc*/ void Grow();
            }

            struct ArrayBuilder<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _count;

                /*0x3814574*/ int get_Capacity();
                /*0x3814574*/ int get_Count();
                /*0x3910ae8*/ T get_Item(int index);
                /*0x3910ae8*/ void Add(T item);
                /*0x3910ae8*/ void UncheckedAdd(T item);
                /*0x3815ed0*/ void EnsureCapacity(int minimum);
            }

            class EnumerableHelpers
            {
                static /*0x38379c4*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
                static /*0x38395d4*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source, ref int length);
            }

            struct LargeArrayBuilder<T>
            {
                /*0x0*/ int _maxCapacity;
                /*0x0*/ T[] _first;
                /*0x0*/ System.Collections.Generic.ArrayBuilder<T[]> _buffers;
                /*0x0*/ T[] _current;
                /*0x0*/ int _index;
                /*0x0*/ int _count;

                /*0x3815cc4*/ LargeArrayBuilder(bool initialize);
                /*0x3815ed0*/ LargeArrayBuilder(int maxCapacity);
                /*0x3816710*/ void AddRange(System.Collections.Generic.IEnumerable<T> items);
                /*0x3910ae8*/ void AddWithBufferAllocation(T item, ref T[] destination, ref int index);
                void CopyTo(T[] array, int arrayIndex, int count);
                /*0x3814964*/ T[] GetBuffer(int index);
                /*0x38148bc*/ T[] ToArray();
                /*0x38141c4*/ bool TryMove(ref T[] array);
                /*0x38159dc*/ void AllocateBuffer();
            }

            class LowLevelDictionary<TKey, TValue>
            {
                /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _buckets;
                /*0x0*/ int _numEntries;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;

                /*0x38159dc*/ LowLevelDictionary();
                /*0x3816044*/ LowLevelDictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3910ae8*/ void set_Item(TKey key, TValue value);
                /*0x3815ed0*/ void Clear(int capacity);
                /*0x3910ae8*/ bool Remove(TKey key);
                /*0x3910ae8*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> Find(TKey key);
                /*0x3910ae8*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
                /*0x38159dc*/ void ExpandBuckets();
                /*0x3910ae8*/ int GetBucket(TKey key, int numBuckets);

                class Entry<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _next;

                    /*0x38159dc*/ Entry();
                }

                class DefaultComparer`1<TKey, TValue, T> : System.Collections.Generic.IEqualityComparer<T>
                {
                    /*0x38159dc*/ DefaultComparer`1();
                    /*0x3910ae8*/ bool Equals(T x, T y);
                    /*0x3910ae8*/ int GetHashCode(T obj);
                }
            }

            class CollectionExtensions
            {
                static /*0x3910ae8*/ TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
                static /*0x3910ae8*/ TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
                static /*0x3910ae8*/ bool Remove<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, TKey key, ref TValue value);
            }

            class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _head;
                /*0x0*/ int _tail;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                /*0x38159dc*/ Queue();
                /*0x3815ed0*/ Queue(int capacity);
                /*0x3816710*/ Queue(System.Collections.Generic.IEnumerable<T> collection);
                /*0x3814574*/ int get_Count();
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x38159dc*/ void Clear();
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3910ae8*/ void Enqueue(T item);
                /*0x3910ae8*/ System.Collections.Generic.Queue.Enumerator<T> GetEnumerator();
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3910ae8*/ T Dequeue();
                /*0x38141c4*/ bool TryDequeue(ref T result);
                /*0x3910ae8*/ T Peek();
                /*0x38141c4*/ bool TryPeek(ref T result);
                /*0x3910ae8*/ bool Contains(T item);
                /*0x38148bc*/ T[] ToArray();
                /*0x3815ed0*/ void SetCapacity(int capacity);
                /*0x3816710*/ void MoveNext(ref int index);
                /*0x38159dc*/ void ThrowForEmptyQueue();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Queue<T> _q;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    /*0x3816710*/ Enumerator(System.Collections.Generic.Queue<T> q);
                    /*0x38159dc*/ void Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ T get_Current();
                    /*0x38159dc*/ void ThrowEnumerationNotStartedOrEnded();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class QueueDebugView<T>
            {
            }

            class Stack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                /*0x38159dc*/ Stack();
                /*0x3815ed0*/ Stack(int capacity);
                /*0x3816710*/ Stack(System.Collections.Generic.IEnumerable<T> collection);
                /*0x3814574*/ int get_Count();
                /*0x3813ffc*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x38148bc*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x38159dc*/ void Clear();
                /*0x3910ae8*/ bool Contains(T item);
                /*0x381678c*/ void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                /*0x3910ae8*/ System.Collections.Generic.Stack.Enumerator<T> GetEnumerator();
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3910ae8*/ T Peek();
                /*0x38141c4*/ bool TryPeek(ref T result);
                /*0x3910ae8*/ T Pop();
                /*0x38141c4*/ bool TryPop(ref T result);
                /*0x3910ae8*/ void Push(T item);
                /*0x3910ae8*/ void PushWithResize(T item);
                /*0x38159dc*/ void ThrowForEmptyStack();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Stack<T> _stack;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    /*0x3816710*/ Enumerator(System.Collections.Generic.Stack<T> stack);
                    /*0x38159dc*/ void Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3910ae8*/ T get_Current();
                    /*0x38159dc*/ void ThrowEnumerationNotStartedOrEnded();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class StackDebugView<T>
            {
            }

            class CollectionDebugView<T>
            {
            }

            class DictionaryDebugView<K, V>
            {
            }

            class LowLevelList<T>
            {
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;

                static /*0x383e7a0*/ LowLevelList();
                /*0x38159dc*/ LowLevelList();
                /*0x3815ed0*/ LowLevelList(int capacity);
                /*0x3814574*/ int get_Capacity();
                /*0x3815ed0*/ void set_Capacity(int value);
                /*0x3814574*/ int get_Count();
                /*0x3910ae8*/ T get_Item(int index);
                /*0x3910ae8*/ void set_Item(int index, T value);
                /*0x3910ae8*/ void Add(T item);
                /*0x3815ed0*/ void EnsureCapacity(int min);
                /*0x3816710*/ void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                /*0x38159dc*/ void Clear();
                /*0x3910ae8*/ bool Contains(T item);
                /*0x381678c*/ void CopyTo(T[] array, int arrayIndex);
                /*0x3910ae8*/ int IndexOf(T item);
                /*0x3910ae8*/ void Insert(int index, T item);
                /*0x3816044*/ void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                /*0x3910ae8*/ bool Remove(T item);
                /*0x381467c*/ int RemoveAll(System.Predicate<T> match);
                /*0x3815ed0*/ void RemoveAt(int index);
            }

            class LowLevelListWithIList<T> : System.Collections.Generic.LowLevelList<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x38159dc*/ LowLevelListWithIList();
                /*0x3815ed0*/ LowLevelListWithIList(int capacity);
                /*0x3813ffc*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.LowLevelListWithIList<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    /*0x3816710*/ Enumerator(System.Collections.Generic.LowLevelListWithIList<T> list);
                    /*0x38159dc*/ void Dispose();
                    /*0x3813ffc*/ bool MoveNext();
                    /*0x3813ffc*/ bool MoveNextRare();
                    /*0x3910ae8*/ T get_Current();
                    /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                    /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class IntrospectiveSortUtilities
            {
                static /*0x7168184*/ int FloorLog2PlusOne(int n);
                static /*0x71681ac*/ void ThrowOrIgnoreBadComparer(object comparer);
            }

            class ArraySortHelper<T>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<T> s_defaultArraySortHelper;

                static /*0x383e7a0*/ ArraySortHelper();
                static /*0x3842ee0*/ void Sort(T[] keys, int index, int length, System.Comparison<T> comparer);
                static /*0x3910ae8*/ int InternalBinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
                static /*0x3844414*/ void SwapIfGreater(T[] keys, System.Comparison<T> comparer, int a, int b);
                static /*0x3842e50*/ void Swap(T[] a, int i, int j);
                static /*0x3842ee0*/ void IntrospectiveSort(T[] keys, int left, int length, System.Comparison<T> comparer);
                static /*0x3910ae8*/ void IntroSort(T[] keys, int lo, int hi, int depthLimit, System.Comparison<T> comparer);
                static int PickPivotAndPartition(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x3842ee0*/ void Heapsort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x3910ae8*/ void DownHeap(T[] keys, int i, int n, int lo, System.Comparison<T> comparer);
                static /*0x3842ee0*/ void InsertionSort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x3836db8*/ System.Collections.Generic.ArraySortHelper<T> get_Default();
                /*0x38159dc*/ ArraySortHelper();
                void Sort(T[] keys, int index, int length, System.Collections.Generic.IComparer<T> comparer);
                /*0x3910ae8*/ int BinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
            }

            class ArraySortHelper<TKey, TValue>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;

                static /*0x383e7a0*/ ArraySortHelper();
                static /*0x3910ae8*/ void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, System.Collections.Generic.IComparer<TKey> comparer, int a, int b);
                static /*0x3844414*/ void Swap(TKey[] keys, TValue[] values, int i, int j);
                static /*0x3844458*/ void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3910ae8*/ void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3910ae8*/ int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3844458*/ void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3910ae8*/ void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3844458*/ void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3836db8*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> get_Default();
                /*0x38159dc*/ ArraySortHelper();
                void Sort(TKey[] keys, TValue[] values, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
            }

            class Comparer<T> : System.Collections.IComparer, System.Collections.Generic.IComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.Comparer<T> defaultComparer;

                static /*0x3836db8*/ System.Collections.Generic.Comparer<T> get_Default();
                static /*0x38379c4*/ System.Collections.Generic.Comparer<T> Create(System.Comparison<T> comparison);
                static /*0x3836db8*/ System.Collections.Generic.Comparer<T> CreateComparer();
                /*0x38159dc*/ Comparer();
                /*0x3910ae8*/ int Compare(T x, T y);
                int System.Collections.IComparer.Compare(object x, object y);
            }

            class GenericComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x38159dc*/ GenericComparer();
                /*0x3910ae8*/ int Compare(T x, T y);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class NullableComparer<T> : System.Collections.Generic.Comparer<System.Nullable<T>>
            {
                /*0x38159dc*/ NullableComparer();
                /*0x3910ae8*/ int Compare(System.Nullable<T> x, System.Nullable<T> y);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class ObjectComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x38159dc*/ ObjectComparer();
                /*0x3910ae8*/ int Compare(T x, T y);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class ComparisonComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x0*/ System.Comparison<T> _comparison;

                /*0x3816710*/ ComparisonComparer(System.Comparison<T> comparison);
                /*0x3910ae8*/ int Compare(T x, T y);
            }

            class EqualityComparer<T> : System.Collections.IEqualityComparer, System.Collections.Generic.IEqualityComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.EqualityComparer<T> defaultComparer;

                static /*0x3836db8*/ System.Collections.Generic.EqualityComparer<T> get_Default();
                static /*0x3836db8*/ System.Collections.Generic.EqualityComparer<T> CreateComparer();
                /*0x38159dc*/ EqualityComparer();
                /*0x3910ae8*/ bool Equals(T x, T y);
                /*0x3910ae8*/ int GetHashCode(T obj);
                /*0x3910ae8*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x3910ae8*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x381467c*/ int System.Collections.IEqualityComparer.GetHashCode(object obj);
                /*0x3814200*/ bool System.Collections.IEqualityComparer.Equals(object x, object y);
            }

            class GenericEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                /*0x38159dc*/ GenericEqualityComparer();
                /*0x3910ae8*/ bool Equals(T x, T y);
                /*0x3910ae8*/ int GetHashCode(T obj);
                /*0x3910ae8*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x3910ae8*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class NullableEqualityComparer<T> : System.Collections.Generic.EqualityComparer<System.Nullable<T>>
            {
                /*0x38159dc*/ NullableEqualityComparer();
                /*0x3910ae8*/ bool Equals(System.Nullable<T> x, System.Nullable<T> y);
                /*0x3910ae8*/ int GetHashCode(System.Nullable<T> obj);
                /*0x3910ae8*/ int IndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                /*0x3910ae8*/ int LastIndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class ObjectEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                /*0x38159dc*/ ObjectEqualityComparer();
                /*0x3910ae8*/ bool Equals(T x, T y);
                /*0x3910ae8*/ int GetHashCode(T obj);
                /*0x3910ae8*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x3910ae8*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class ByteEqualityComparer : System.Collections.Generic.EqualityComparer<byte>
            {
                /*0x71684bc*/ ByteEqualityComparer();
                /*0x716820c*/ bool Equals(byte x, byte y);
                /*0x716821c*/ int GetHashCode(byte b);
                /*0x7168238*/ int IndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x71683b8*/ int LastIndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x7168410*/ bool Equals(object obj);
                /*0x7168488*/ int GetHashCode();
            }

            class EnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x38159dc*/ EnumEqualityComparer();
                EnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3910ae8*/ bool Equals(T x, T y);
                /*0x3910ae8*/ int GetHashCode(T obj);
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
            }

            class SByteEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x38159dc*/ SByteEnumEqualityComparer();
                SByteEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3910ae8*/ int GetHashCode(T obj);
            }

            class ShortEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x38159dc*/ ShortEnumEqualityComparer();
                ShortEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3910ae8*/ int GetHashCode(T obj);
            }

            class LongEnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x38159dc*/ LongEnumEqualityComparer();
                LongEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3910ae8*/ bool Equals(T x, T y);
                /*0x3910ae8*/ int GetHashCode(T obj);
                /*0x38141c4*/ bool Equals(object obj);
                /*0x3814574*/ int GetHashCode();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class InternalStringComparer : System.Collections.Generic.EqualityComparer<string>
            {
                /*0x71685bc*/ InternalStringComparer();
                /*0x7168504*/ int GetHashCode(string obj);
                /*0x7168524*/ bool Equals(string x, string y);
                /*0x7168554*/ int IndexOf(string[] array, string value, int startIndex, int count);
            }
        }
    }

    namespace Buffers
    {
        class SpanAction<T, TArg> : System.MulticastDelegate
        {
            SpanAction(object object, nint method);
            /*0x3910ae8*/ void Invoke(System.Span<T> span, TArg arg);
        }

        class ArrayPool<T>
        {
            static /*0x0*/ System.Buffers.ArrayPool<T> <Shared>k__BackingField;

            static /*0x383e7a0*/ ArrayPool();
            static /*0x3836db8*/ System.Buffers.ArrayPool<T> get_Shared();
            static /*0x383782c*/ System.Buffers.ArrayPool<T> Create(int maxArrayLength, int maxArraysPerBucket);
            /*0x38159dc*/ ArrayPool();
            /*0x3814964*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
        }

        class ArrayPoolEventSource : System.Diagnostics.Tracing.EventSource
        {
            static /*0x0*/ System.Buffers.ArrayPoolEventSource Log;

            static /*0x7168934*/ ArrayPoolEventSource();
            /*0x7168604*/ ArrayPoolEventSource();
            /*0x71686b0*/ void BufferRented(int bufferId, int bufferSize, int poolId, int bucketId);
            /*0x71687c0*/ void BufferAllocated(int bufferId, int bufferSize, int poolId, int bucketId, System.Buffers.ArrayPoolEventSource.BufferAllocatedReason reason);
            /*0x71688f0*/ void BufferReturned(int bufferId, int bufferSize, int poolId);
            /*0x7168908*/ void BufferTrimmed(int bufferId, int bufferSize, int poolId);
            /*0x7168920*/ void BufferTrimPoll(int milliseconds, int pressure);

            enum BufferAllocatedReason
            {
                Pooled = 0,
                OverMaximumSize = 1,
                PoolExhausted = 2,
            }
        }

        class ConfigurableArrayPool<T> : System.Buffers.ArrayPool<T>
        {
            /*0x0*/ System.Buffers.ConfigurableArrayPool.Bucket<T> _buckets;

            /*0x3815fb8*/ ConfigurableArrayPool(int maxArrayLength, int maxArraysPerBucket);
            /*0x3814574*/ int get_Id();
            /*0x3814964*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);

            class Bucket<T>
            {
                /*0x0*/ int _bufferLength;
                /*0x0*/ T[][] _buffers;
                /*0x0*/ int _poolId;
                /*0x0*/ System.Threading.SpinLock _lock;
                /*0x0*/ int _index;

                Bucket(int bufferLength, int numberOfBuffers, int poolId);
                /*0x3814574*/ int get_Id();
                /*0x38148bc*/ T[] Rent();
                /*0x3816710*/ void Return(T[] array);
            }
        }

        interface IMemoryOwner<T> : System.IDisposable
        {
            /*0x3910ae8*/ System.Memory<T> get_Memory();
        }

        interface IPinnable
        {
            /*0x38159dc*/ void Unpin();
        }

        struct MemoryHandle : System.IDisposable
        {
            /*0x10*/ void* _pointer;
            /*0x18*/ System.Runtime.InteropServices.GCHandle _handle;
            /*0x20*/ System.Buffers.IPinnable _pinnable;

            /*0x7168998*/ MemoryHandle(void* pointer, System.Runtime.InteropServices.GCHandle handle, System.Buffers.IPinnable pinnable);
            /*0x71689a8*/ void* get_Pointer();
            /*0x71689b0*/ void Dispose();
        }

        class MemoryManager<T> : System.Buffers.IMemoryOwner<T>, System.IDisposable, System.Buffers.IPinnable
        {
            /*0x3910ae8*/ System.Memory<T> get_Memory();
            /*0x3910ae8*/ System.Span<T> GetSpan();
            System.Buffers.MemoryHandle Pin(int elementIndex);
            /*0x38159dc*/ void Unpin();
            /*0x38141c4*/ bool TryGetArray(ref System.ArraySegment<T> segment);
            /*0x38159dc*/ void System.IDisposable.Dispose();
            /*0x3815cc4*/ void Dispose(bool disposing);
        }

        class TlsOverPerCoreLockedStacksArrayPool<T> : System.Buffers.ArrayPool<T>
        {
            static /*0x0*/ bool s_trimBuffers;
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<T[][], object> s_allTlsBuckets;
            [ThreadStatic] static T[][] t_tlsBuckets;
            /*0x0*/ int[] _bucketArraySizes;
            /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> _buckets;
            /*0x0*/ int _callbackCreated;

            static /*0x383e7a0*/ TlsOverPerCoreLockedStacksArrayPool();
            static /*0x3823ae0*/ bool Gen2GcCallbackFunc(object target);
            static /*0x3910ae8*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> GetMemoryPressure();
            static /*0x3821564*/ bool GetTrimBuffers();
            /*0x38159dc*/ TlsOverPerCoreLockedStacksArrayPool();
            /*0x3814964*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> CreatePerCoreLockedStacks(int bucketIndex);
            /*0x3814574*/ int get_Id();
            /*0x3814964*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
            /*0x3813ffc*/ bool Trim();

            enum MemoryPressure<T>
            {
                Low = 0,
                Medium = 1,
                High = 2,
            }

            class PerCoreLockedStacks<T>
            {
                /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.LockedStack<T> _perCoreStacks;

                /*0x38159dc*/ PerCoreLockedStacks();
                /*0x3816710*/ void TryPush(T[] array);
                /*0x38148bc*/ T[] TryPop();
                /*0x3910ae8*/ bool Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int[] bucketSizes);
            }

            class LockedStack<T>
            {
                /*0x0*/ T[][] _arrays;
                /*0x0*/ int _count;
                /*0x0*/ uint _firstStackItemMS;

                /*0x38159dc*/ LockedStack();
                /*0x38141c4*/ bool TryPush(T[] array);
                /*0x38148bc*/ T[] TryPop();
                /*0x3910ae8*/ void Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int bucketSize);
            }
        }

        class Utilities
        {
            static /*0x7168a7c*/ int SelectBucketIndex(int bufferSize);
            static /*0x7168af8*/ int GetMaxSizeForBucket(int binIndex);
        }

        class ArrayMemoryPool<T> : System.Buffers.MemoryPool<T>
        {
            /*0x38159dc*/ ArrayMemoryPool();
            /*0x3814964*/ System.Buffers.IMemoryOwner<T> Rent(int minimumBufferSize);
            /*0x3815cc4*/ void Dispose(bool disposing);

            class ArrayMemoryPoolBuffer<T> : System.Buffers.IMemoryOwner<T>, System.IDisposable
            {
                /*0x0*/ T[] _array;

                /*0x3815ed0*/ ArrayMemoryPoolBuffer(int size);
                /*0x3910ae8*/ System.Memory<T> get_Memory();
                /*0x38159dc*/ void Dispose();
            }
        }

        class BuffersExtensions
        {
            static /*0x3910ae8*/ void CopyTo<T>(ref System.Buffers.ReadOnlySequence<T> source, System.Span<T> destination);
            static /*0x3910ae8*/ void CopyToMultiSegment<T>(ref System.Buffers.ReadOnlySequence<T> sequence, System.Span<T> destination);
            static /*0x38379c4*/ T[] ToArray<T>(ref System.Buffers.ReadOnlySequence<T> sequence);
        }

        interface IBufferWriter<T>
        {
            /*0x3815ed0*/ void Advance(int count);
            /*0x3910ae8*/ System.Memory<T> GetMemory(int sizeHint);
            /*0x3910ae8*/ System.Span<T> GetSpan(int sizeHint);
        }

        class MemoryPool<T> : System.IDisposable
        {
            static /*0x0*/ System.Buffers.MemoryPool<T> s_shared;

            static /*0x383e7a0*/ MemoryPool();
            static /*0x3836db8*/ System.Buffers.MemoryPool<T> get_Shared();
            /*0x38159dc*/ MemoryPool();
            /*0x3814964*/ System.Buffers.IMemoryOwner<T> Rent(int minBufferSize);
            /*0x38159dc*/ void Dispose();
            /*0x3815cc4*/ void Dispose(bool disposing);
        }

        enum OperationStatus
        {
            Done = 0,
            DestinationTooSmall = 1,
            NeedMoreData = 2,
            InvalidData = 3,
        }

        struct ReadOnlySequence<T>
        {
            static /*0x0*/ System.Buffers.ReadOnlySequence<T> Empty;
            /*0x0*/ object _startObject;
            /*0x0*/ object _endObject;
            /*0x0*/ int _startInteger;
            /*0x0*/ int _endInteger;

            static /*0x383e7a0*/ ReadOnlySequence();
            static /*0x3910ae8*/ System.SequencePosition SeekMultiSegment(System.Buffers.ReadOnlySequenceSegment<T> currentSegment, object endObject, int endIndex, long offset, System.ExceptionArgument argument);
            static /*0x382da78*/ int GetIndex(ref System.SequencePosition position);
            static /*0x382d234*/ int GetIndex(int Integer);
            static /*0x3910ae8*/ bool InRange(uint value, uint start, uint end);
            static /*0x3910ae8*/ bool InRange(ulong value, ulong start, ulong end);
            /*0x3910ae8*/ ReadOnlySequence(object startSegment, int startIndexAndFlags, object endSegment, int endIndexAndFlags);
            /*0x3910ae8*/ ReadOnlySequence(System.Buffers.ReadOnlySequenceSegment<T> startSegment, int startIndex, System.Buffers.ReadOnlySequenceSegment<T> endSegment, int endIndex);
            /*0x3816710*/ ReadOnlySequence(T[] array);
            /*0x3910ae8*/ ReadOnlySequence(System.ReadOnlyMemory<T> memory);
            /*0x38146fc*/ long get_Length();
            /*0x3813ffc*/ bool get_IsEmpty();
            /*0x3813ffc*/ bool get_IsSingleSegment();
            /*0x3910ae8*/ System.ReadOnlyMemory<T> get_First();
            /*0x3910ae8*/ System.SequencePosition get_Start();
            /*0x3910ae8*/ System.SequencePosition get_End();
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> Slice(long start, System.SequencePosition end);
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> Slice(System.SequencePosition start, long length);
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> Slice(int start, System.SequencePosition end);
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> Slice(System.SequencePosition start, System.SequencePosition end);
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> Slice(System.SequencePosition start);
            /*0x38148bc*/ string ToString();
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence.Enumerator<T> GetEnumerator();
            /*0x3910ae8*/ System.SequencePosition GetPosition(long offset);
            /*0x3910ae8*/ System.SequencePosition GetPosition(long offset, System.SequencePosition origin);
            bool TryGet(ref System.SequencePosition position, ref System.ReadOnlyMemory<T> memory, bool advance);
            bool TryGetBuffer(ref System.SequencePosition position, ref System.ReadOnlyMemory<T> memory, ref System.SequencePosition next);
            /*0x3910ae8*/ System.ReadOnlyMemory<T> GetFirstBuffer();
            /*0x3910ae8*/ System.ReadOnlyMemory<T> GetFirstBufferSlow(object startObject, bool isMultiSegment);
            /*0x3910ae8*/ System.SequencePosition Seek(long offset, System.ExceptionArgument exceptionArgument);
            /*0x3910ae8*/ System.SequencePosition Seek(ref System.SequencePosition start, long offset);
            void BoundsCheck(ref System.SequencePosition position, bool positionIsNotNull);
            /*0x3910ae8*/ void BoundsCheck(uint sliceStartIndex, object sliceStartObject, uint sliceEndIndex, object sliceEndObject);
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence.SequenceType<T> GetSequenceType();
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> SliceImpl(ref System.SequencePosition start, ref System.SequencePosition end);
            /*0x3910ae8*/ System.Buffers.ReadOnlySequence<T> SliceImpl(ref System.SequencePosition start);
            /*0x38146fc*/ long GetLength();
            bool TryGetString(ref string text, ref int start, ref int length);

            struct Enumerator<T>
            {
                /*0x0*/ System.Buffers.ReadOnlySequence<T> _sequence;
                /*0x0*/ System.SequencePosition _next;
                /*0x0*/ System.ReadOnlyMemory<T> _currentMemory;

                /*0x3816710*/ Enumerator(ref System.Buffers.ReadOnlySequence<T> sequence);
                /*0x3910ae8*/ System.ReadOnlyMemory<T> get_Current();
                /*0x3813ffc*/ bool MoveNext();
            }

            enum SequenceType<T>
            {
                MultiSegment = 0,
                Array = 1,
                MemoryManager = 2,
                String = 3,
                Empty = 4,
            }

            class <>c<T>
            {
                static /*0x0*/ System.Buffers.ReadOnlySequence.<>c<T> <>9;
                static /*0x0*/ System.Buffers.SpanAction<char, System.Buffers.ReadOnlySequence<char>> <>9__33_0;

                static /*0x383e7a0*/ <>c();
                /*0x38159dc*/ <>c();
                void <ToString>b__33_0(System.Span<char> span, System.Buffers.ReadOnlySequence<char> sequence);
            }
        }

        class ReadOnlySequence
        {
            static /*0x7168b04*/ int SegmentToSequenceStart(int startIndex);
            static /*0x7168b08*/ int SegmentToSequenceEnd(int endIndex);
            static /*0x7168b0c*/ int ArrayToSequenceStart(int startIndex);
            static /*0x7168b10*/ int ArrayToSequenceEnd(int endIndex);
            static /*0x7168b18*/ int MemoryManagerToSequenceStart(int startIndex);
            static /*0x7168b20*/ int MemoryManagerToSequenceEnd(int endIndex);
            static /*0x7168b24*/ int StringToSequenceStart(int startIndex);
            static /*0x7168b2c*/ int StringToSequenceEnd(int endIndex);
        }

        class ReadOnlySequenceDebugView<T>
        {
        }

        class ReadOnlySequenceSegment<T>
        {
            /*0x0*/ System.ReadOnlyMemory<T> <Memory>k__BackingField;
            /*0x0*/ System.Buffers.ReadOnlySequenceSegment<T> <Next>k__BackingField;
            /*0x0*/ long <RunningIndex>k__BackingField;

            /*0x38159dc*/ ReadOnlySequenceSegment();
            /*0x3910ae8*/ System.ReadOnlyMemory<T> get_Memory();
            /*0x3910ae8*/ void set_Memory(System.ReadOnlyMemory<T> value);
            /*0x38148bc*/ System.Buffers.ReadOnlySequenceSegment<T> get_Next();
            /*0x3816710*/ void set_Next(System.Buffers.ReadOnlySequenceSegment<T> value);
            /*0x38146fc*/ long get_RunningIndex();
            /*0x381630c*/ void set_RunningIndex(long value);
        }

        struct StandardFormat : System.IEquatable<System.Buffers.StandardFormat>
        {
            /*0x10*/ byte _format;
            /*0x11*/ byte _precision;

            static /*0x7168bb8*/ System.Buffers.StandardFormat op_Implicit(char symbol);
            /*0x7168b64*/ StandardFormat(char symbol, byte precision);
            /*0x7168b34*/ char get_Symbol();
            /*0x7168b3c*/ byte get_Precision();
            /*0x7168b44*/ bool get_IsDefault();
            /*0x7168be4*/ bool Equals(object obj);
            /*0x7168c90*/ int GetHashCode();
            /*0x7168c68*/ bool Equals(System.Buffers.StandardFormat other);
            /*0x7168cc4*/ string ToString();
            /*0x7168dac*/ int Format(System.Span<char> destination);
        }

        namespace Binary
        {
            class BinaryPrimitives
            {
                static /*0x7168ea4*/ short ReverseEndianness(short value);
                static /*0x7168eb0*/ int ReverseEndianness(int value);
                static /*0x7168eb8*/ long ReverseEndianness(long value);
                static /*0x7168ec0*/ ushort ReverseEndianness(ushort value);
                static /*0x7168ecc*/ uint ReverseEndianness(uint value);
                static /*0x7168ed4*/ ulong ReverseEndianness(ulong value);
                static /*0x7168edc*/ uint ReadUInt32BigEndian(System.ReadOnlySpan<byte> source);
                static /*0x7168f78*/ ulong ReadUInt64BigEndian(System.ReadOnlySpan<byte> source);
                static /*0x7169014*/ uint ReadUInt32LittleEndian(System.ReadOnlySpan<byte> source);
                static /*0x71690ac*/ ulong ReadUInt64LittleEndian(System.ReadOnlySpan<byte> source);
                static /*0x7169144*/ void WriteUInt32BigEndian(System.Span<byte> destination, uint value);
                static /*0x71691ec*/ void WriteUInt64BigEndian(System.Span<byte> destination, ulong value);
                static /*0x7169294*/ void WriteUInt32LittleEndian(System.Span<byte> destination, uint value);
                static /*0x7169338*/ void WriteUInt64LittleEndian(System.Span<byte> destination, ulong value);
            }
        }

        namespace Text
        {
            class FormattingHelpers
            {
                static /*0x71693dc*/ int CountDigits(ulong value);
                static /*0x7169498*/ int CountDigits(uint value);
                static /*0x7169504*/ int CountHexDigits(ulong value);
            }

            class Utf8Formatter
            {
                static /*0x0*/ uint[] DayAbbreviations;
                static /*0x8*/ uint[] DayAbbreviationsLowercase;
                static /*0x10*/ uint[] MonthAbbreviations;
                static /*0x18*/ uint[] MonthAbbreviationsLowercase;

                static /*0x716a418*/ Utf8Formatter();
                static /*0x716954c*/ bool TryFormatDecimalE(ref System.Buffers.Text.NumberBuffer number, System.Span<byte> destination, ref int bytesWritten, byte precision, byte exponentSymbol);
                static /*0x7169820*/ bool TryFormatDecimalF(ref System.Buffers.Text.NumberBuffer number, System.Span<byte> destination, ref int bytesWritten, byte precision);
                static /*0x7169b20*/ bool TryFormatDecimalG(ref System.Buffers.Text.NumberBuffer number, System.Span<byte> destination, ref int bytesWritten);
                static /*0x7169df8*/ bool TryFormat(decimal value, System.Span<byte> destination, ref int bytesWritten, System.Buffers.StandardFormat format);
            }

            class ParserHelpers
            {
                static /*0x0*/ byte[] s_hexLookup;

                static /*0x716a59c*/ ParserHelpers();
                static /*0x716a58c*/ bool IsDigit(int i);
            }

            class Utf8Parser
            {
                static /*0x0*/ int[] s_daysToMonth365;
                static /*0x8*/ int[] s_daysToMonth366;

                static /*0x716b2b0*/ Utf8Parser();
                static /*0x716a63c*/ bool TryParse(System.ReadOnlySpan<byte> source, ref decimal value, ref int bytesConsumed, char standardFormat);
                static /*0x716af7c*/ bool TryParseUInt32D(System.ReadOnlySpan<byte> source, ref uint value, ref int bytesConsumed);
                static /*0x716a810*/ bool TryParseNumber(System.ReadOnlySpan<byte> source, ref System.Buffers.Text.NumberBuffer number, ref int bytesConsumed, System.Buffers.Text.Utf8Parser.ParseNumberOptions options, ref bool textUsedExponentNotation);

                enum ParseNumberOptions
                {
                    AllowExponent = 1,
                }
            }

            class Number
            {
                static /*0x0*/ ulong[] s_rgval64Power10;
                static /*0x8*/ sbyte[] s_rgexp64Power10;
                static /*0x10*/ ulong[] s_rgval64Power10By16;
                static /*0x18*/ short[] s_rgexp64Power10By16;

                static /*0x716b39c*/ Number();
                static /*0x716ad80*/ bool NumberBufferToDecimal(ref System.Buffers.Text.NumberBuffer number, ref decimal value);
                static /*0x716a120*/ void DecimalToNumber(decimal value, ref System.Buffers.Text.NumberBuffer number);
                static /*0x716a2f8*/ void RoundNumber(ref System.Buffers.Text.NumberBuffer number, int pos);
            }

            struct NumberBuffer
            {
                /*0x10*/ int Scale;
                /*0x14*/ bool IsNegative;
                /*0x15*/ byte _b0;
                /*0x16*/ byte _b1;
                /*0x17*/ byte _b2;
                /*0x18*/ byte _b3;
                /*0x19*/ byte _b4;
                /*0x1a*/ byte _b5;
                /*0x1b*/ byte _b6;
                /*0x1c*/ byte _b7;
                /*0x1d*/ byte _b8;
                /*0x1e*/ byte _b9;
                /*0x1f*/ byte _b10;
                /*0x20*/ byte _b11;
                /*0x21*/ byte _b12;
                /*0x22*/ byte _b13;
                /*0x23*/ byte _b14;
                /*0x24*/ byte _b15;
                /*0x25*/ byte _b16;
                /*0x26*/ byte _b17;
                /*0x27*/ byte _b18;
                /*0x28*/ byte _b19;
                /*0x29*/ byte _b20;
                /*0x2a*/ byte _b21;
                /*0x2b*/ byte _b22;
                /*0x2c*/ byte _b23;
                /*0x2d*/ byte _b24;
                /*0x2e*/ byte _b25;
                /*0x2f*/ byte _b26;
                /*0x30*/ byte _b27;
                /*0x31*/ byte _b28;
                /*0x32*/ byte _b29;
                /*0x33*/ byte _b30;
                /*0x34*/ byte _b31;
                /*0x35*/ byte _b32;
                /*0x36*/ byte _b33;
                /*0x37*/ byte _b34;
                /*0x38*/ byte _b35;
                /*0x39*/ byte _b36;
                /*0x3a*/ byte _b37;
                /*0x3b*/ byte _b38;
                /*0x3c*/ byte _b39;
                /*0x3d*/ byte _b40;
                /*0x3e*/ byte _b41;
                /*0x3f*/ byte _b42;
                /*0x40*/ byte _b43;
                /*0x41*/ byte _b44;
                /*0x42*/ byte _b45;
                /*0x43*/ byte _b46;
                /*0x44*/ byte _b47;
                /*0x45*/ byte _b48;
                /*0x46*/ byte _b49;
                /*0x47*/ byte _b50;

                /*0x71697e0*/ System.Span<byte> get_Digits();
                /*0x716b394*/ byte* get_UnsafeDigits();
                /*0x7169d88*/ int get_NumDigits();
                /*0x716b540*/ string ToString();
            }
        }
    }

    namespace IO
    {
        class FileSystem
        {
            static /*0x716b6d4*/ void DeleteFile(string fullPath);
            static /*0x716bad0*/ void CreateDirectory(string fullPath);
            static /*0x716c270*/ void RemoveDirectory(string fullPath, bool recursive);
            static /*0x716c338*/ void RemoveDirectoryInternal(System.IO.DirectoryInfo directory, bool recursive, bool throwOnTopLevelDirectoryNotFound);
            static /*0x716c14c*/ bool DirectoryExists(System.ReadOnlySpan<char> fullPath);
            static /*0x716c264*/ bool DirectoryExists(System.ReadOnlySpan<char> fullPath, ref Interop.ErrorInfo errorInfo);
            static /*0x716c1e8*/ bool FileExists(System.ReadOnlySpan<char> fullPath);
            static /*0x716b9c0*/ bool FileExists(System.ReadOnlySpan<char> fullPath, int fileType, ref Interop.ErrorInfo errorInfo);
            static /*0x716c9d4*/ bool ShouldIgnoreDirectory(string name);
            static /*0x716cb38*/ System.IO.FileAttributes GetAttributes(string fullPath);
        }

        class DirectoryNotFoundException : System.IO.IOException
        {
            /*0x716cbcc*/ DirectoryNotFoundException();
            /*0x716cc28*/ DirectoryNotFoundException(string message);
            /*0x716cc4c*/ DirectoryNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class EndOfStreamException : System.IO.IOException
        {
            /*0x716cc5c*/ EndOfStreamException();
            /*0x716ccb8*/ EndOfStreamException(string message);
            /*0x716ccdc*/ EndOfStreamException(string message, System.Exception innerException);
            /*0x716cd24*/ EndOfStreamException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Error
        {
            static /*0x716cd2c*/ System.Exception GetStreamIsClosed();
            static /*0x716cd9c*/ System.Exception GetEndOfFile();
            static /*0x716ce14*/ System.Exception GetReadNotSupported();
            static /*0x716ce80*/ System.Exception GetWriteNotSupported();
        }

        enum FileAccess
        {
            Read = 1,
            Write = 2,
            ReadWrite = 3,
        }

        class FileLoadException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            static /*0x716cfac*/ string FormatFileLoadExceptionMessage(string fileName, int hResult);
            /*0x716ceec*/ FileLoadException();
            /*0x716cf48*/ FileLoadException(string message);
            /*0x716d214*/ FileLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x716cf6c*/ string get_Message();
            /*0x716d020*/ string get_FileName();
            /*0x716d028*/ string get_FusionLog();
            /*0x716d030*/ string ToString();
            /*0x716d2d8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileMode
        {
            CreateNew = 1,
            Create = 2,
            Open = 3,
            OpenOrCreate = 4,
            Truncate = 5,
            Append = 6,
        }

        class FileNotFoundException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            /*0x716d3d0*/ FileNotFoundException();
            /*0x716d42c*/ FileNotFoundException(string message);
            /*0x716d450*/ FileNotFoundException(string message, string fileName);
            /*0x716d728*/ FileNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x716d48c*/ string get_Message();
            /*0x716d4a4*/ void SetMessageField();
            /*0x716d534*/ string get_FileName();
            /*0x716d53c*/ string get_FusionLog();
            /*0x716d544*/ string ToString();
            /*0x716d7ec*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileOptions
        {
            None = 0,
            WriteThrough = -2147483648,
            Asynchronous = 1073741824,
            RandomAccess = 268435456,
            DeleteOnClose = 67108864,
            SequentialScan = 134217728,
            Encrypted = 16384,
        }

        enum FileShare
        {
            None = 0,
            Read = 1,
            Write = 2,
            ReadWrite = 3,
            Delete = 4,
            Inheritable = 16,
        }

        class IOException : System.SystemException
        {
            /*0x716d8e4*/ IOException();
            /*0x716c128*/ IOException(string message);
            /*0x716d940*/ IOException(string message, int hresult);
            /*0x716cd00*/ IOException(string message, System.Exception innerException);
            /*0x716cc54*/ IOException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemoryStream : System.IO.Stream
        {
            /*0x28*/ byte[] _buffer;
            /*0x30*/ int _origin;
            /*0x34*/ int _position;
            /*0x38*/ int _length;
            /*0x3c*/ int _capacity;
            /*0x40*/ bool _expandable;
            /*0x41*/ bool _writable;
            /*0x42*/ bool _exposable;
            /*0x43*/ bool _isOpen;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x716d968*/ MemoryStream();
            /*0x716d970*/ MemoryStream(int capacity);
            /*0x716dae8*/ MemoryStream(byte[] buffer);
            /*0x716daf0*/ MemoryStream(byte[] buffer, bool writable);
            /*0x716dbe8*/ MemoryStream(byte[] buffer, int index, int count);
            /*0x716ddc8*/ MemoryStream(byte[] buffer, int index, int count, bool writable);
            /*0x716dbf4*/ MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible);
            /*0x716ddd4*/ bool get_CanRead();
            /*0x716dddc*/ bool get_CanSeek();
            /*0x716dde4*/ bool get_CanWrite();
            /*0x716ddec*/ void EnsureNotClosed();
            /*0x716de20*/ void EnsureWriteable();
            /*0x716de5c*/ void Dispose(bool disposing);
            /*0x716df18*/ bool EnsureCapacity(int value);
            /*0x716dfcc*/ void Flush();
            /*0x716dfd0*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x716e170*/ byte[] GetBuffer();
            /*0x716e1d0*/ byte[] InternalGetBuffer();
            /*0x716e1d8*/ int InternalGetPosition();
            /*0x716e1e0*/ int InternalReadInt32();
            /*0x716e298*/ int InternalEmulateRead(int count);
            /*0x716e2d4*/ int get_Capacity();
            /*0x716e2f4*/ void set_Capacity(int value);
            /*0x716e480*/ long get_Length();
            /*0x716e4a4*/ long get_Position();
            /*0x716e4c4*/ void set_Position(long value);
            /*0x716e58c*/ int Read(byte[] buffer, int offset, int count);
            /*0x716e770*/ int Read(System.Span<byte> buffer);
            /*0x716e934*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x716ecc8*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x716f04c*/ int ReadByte();
            /*0x716f0a4*/ void CopyTo(System.IO.Stream destination, int bufferSize);
            /*0x716f3fc*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x716f548*/ void SetLength(long value);
            /*0x716f624*/ byte[] ToArray();
            /*0x716f710*/ void Write(byte[] buffer, int offset, int count);
            /*0x716f994*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x716fba8*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x716fedc*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x71701e0*/ void WriteByte(byte value);
            /*0x717029c*/ void WriteTo(System.IO.Stream stream);
        }

        class PathInternal
        {
            static /*0x0*/ bool s_isCaseSensitive;

            static /*0x71707a0*/ PathInternal();
            static /*0x716c16c*/ int GetRootLength(System.ReadOnlySpan<char> path);
            static /*0x716c118*/ bool IsDirectorySeparator(char c);
            static /*0x716c098*/ bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x717033c*/ bool StartsWithDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x716b880*/ string TrimEndingDirectorySeparator(string path);
            static /*0x716ca58*/ System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x71703b8*/ bool IsRoot(System.ReadOnlySpan<char> path);
            static /*0x7170434*/ bool get_IsCaseSensitive();
            static /*0x717048c*/ bool GetIsCaseSensitive();
            static /*0x7170798*/ bool IsPartiallyQualified(string path);
        }

        class PathTooLongException : System.IO.IOException
        {
            /*0x71707f0*/ PathTooLongException();
            /*0x717084c*/ PathTooLongException(string message);
            /*0x7170870*/ PathTooLongException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class PinnedBufferMemoryStream : System.IO.UnmanagedMemoryStream
        {
            /*0x68*/ byte[] _array;
            /*0x70*/ System.Runtime.InteropServices.GCHandle _pinningHandle;

            /*0x7170878*/ PinnedBufferMemoryStream(byte[] array);
            /*0x7170944*/ int Read(System.Span<byte> buffer);
            /*0x717094c*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7170954*/ void Finalize();
            /*0x71709f8*/ void Dispose(bool disposing);
        }

        enum SeekOrigin
        {
            Begin = 0,
            Current = 1,
            End = 2,
        }

        class StreamHelpers
        {
            static /*0x716f1d8*/ void ValidateCopyToArgs(System.IO.Stream source, System.IO.Stream destination, int bufferSize);
        }

        class StreamReader : System.IO.TextReader
        {
            static /*0x0*/ System.IO.StreamReader Null;
            /*0x18*/ System.IO.Stream _stream;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Decoder _decoder;
            /*0x30*/ byte[] _byteBuffer;
            /*0x38*/ char[] _charBuffer;
            /*0x40*/ int _charPos;
            /*0x44*/ int _charLen;
            /*0x48*/ int _byteLen;
            /*0x4c*/ int _bytePos;
            /*0x50*/ int _maxCharsPerBuffer;
            /*0x54*/ bool _detectEncoding;
            /*0x55*/ bool _checkPreamble;
            /*0x56*/ bool _isBlocked;
            /*0x57*/ bool _closable;
            /*0x58*/ System.Threading.Tasks.Task _asyncReadTask;

            static /*0x71724e8*/ StreamReader();
            static /*0x7170a94*/ void ThrowAsyncIOInProgress();
            /*0x7170ae0*/ StreamReader();
            /*0x7170ba4*/ StreamReader(System.IO.Stream stream);
            /*0x7170be0*/ StreamReader(System.IO.Stream stream, bool detectEncodingFromByteOrderMarks);
            /*0x7170e38*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x7170c20*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x7170fb0*/ StreamReader(string path);
            /*0x7170fe8*/ StreamReader(string path, bool detectEncodingFromByteOrderMarks);
            /*0x7171260*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);
            /*0x7171024*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);
            /*0x7170a30*/ void CheckAsyncTaskInProgress();
            /*0x7170e48*/ void Init(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x717126c*/ void Init(System.IO.Stream stream);
            /*0x7171290*/ void Close();
            /*0x71712a0*/ void Dispose(bool disposing);
            /*0x7171348*/ System.Text.Encoding get_CurrentEncoding();
            /*0x7171350*/ System.IO.Stream get_BaseStream();
            /*0x7171338*/ bool get_LeaveOpen();
            /*0x7171358*/ int Peek();
            /*0x717141c*/ int Read();
            /*0x71714e0*/ int Read(char[] buffer, int index, int count);
            /*0x717166c*/ int ReadSpan(System.Span<char> buffer);
            /*0x7171b98*/ string ReadToEnd();
            /*0x7171cb0*/ void CompressBuffer(int n);
            /*0x7171cf4*/ void DetectEncoding();
            /*0x7171ff8*/ bool IsPreamble();
            /*0x7172110*/ int ReadBuffer();
            /*0x7171888*/ int ReadBuffer(System.Span<char> userBuffer, ref bool readToUserBuffer);
            /*0x717227c*/ string ReadLine();
            /*0x71724d8*/ bool DataAvailable();

            class NullStreamReader : System.IO.StreamReader
            {
                /*0x7172560*/ NullStreamReader();
                /*0x71725fc*/ System.IO.Stream get_BaseStream();
                /*0x7172654*/ System.Text.Encoding get_CurrentEncoding();
                /*0x717265c*/ void Dispose(bool disposing);
                /*0x7172660*/ int Peek();
                /*0x7172668*/ int Read();
                /*0x7172670*/ int Read(char[] buffer, int index, int count);
                /*0x7172678*/ string ReadLine();
                /*0x7172680*/ string ReadToEnd();
                /*0x7172698*/ int ReadBuffer();
            }
        }

        class StreamWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.IO.StreamWriter Null;
            /*0x30*/ System.IO.Stream _stream;
            /*0x38*/ System.Text.Encoding _encoding;
            /*0x40*/ System.Text.Encoder _encoder;
            /*0x48*/ byte[] _byteBuffer;
            /*0x50*/ char[] _charBuffer;
            /*0x58*/ int _charPos;
            /*0x5c*/ int _charLen;
            /*0x60*/ bool _autoFlush;
            /*0x61*/ bool _haveWrittenPreamble;
            /*0x62*/ bool _closable;
            /*0x68*/ System.Threading.Tasks.Task _asyncWriteTask;

            static /*0x7173f78*/ StreamWriter();
            static /*0x7172704*/ void ThrowAsyncIOInProgress();
            static /*0x7172750*/ System.Text.Encoding get_UTF8NoBOM();
            static /*0x7173dd0*/ System.Threading.Tasks.Task FlushAsyncInternal(System.IO.StreamWriter _this, bool flushStream, bool flushEncoder, char[] charBuffer, int charPos, bool haveWrittenPreamble, System.Text.Encoding encoding, System.Text.Encoder encoder, byte[] byteBuffer, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);
            /*0x71727a0*/ StreamWriter();
            /*0x7172868*/ StreamWriter(System.IO.Stream stream);
            /*0x7172ae8*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x71728dc*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen);
            /*0x7172c78*/ StreamWriter(string path);
            /*0x7172cec*/ StreamWriter(string path, bool append, System.Text.Encoding encoding, int bufferSize);
            /*0x71726a0*/ void CheckAsyncTaskInProgress();
            /*0x7172af4*/ void Init(System.IO.Stream streamArg, System.Text.Encoding encodingArg, int bufferSize, bool shouldLeaveOpen);
            /*0x7172f34*/ void Close();
            /*0x7172fa0*/ void Dispose(bool disposing);
            /*0x71731b0*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x7173258*/ System.Threading.Tasks.ValueTask DisposeAsyncCore();
            /*0x7173350*/ void CloseStreamFromDispose(bool disposing);
            /*0x71733f8*/ void Flush();
            /*0x7173034*/ void Flush(bool flushStream, bool flushEncoder);
            /*0x7173418*/ void set_AutoFlush(bool value);
            /*0x717345c*/ System.IO.Stream get_BaseStream();
            /*0x71733e8*/ bool get_LeaveOpen();
            /*0x7173464*/ System.Text.Encoding get_Encoding();
            /*0x717346c*/ void Write(char value);
            /*0x71734f8*/ void Write(char[] buffer);
            /*0x717356c*/ void Write(char[] buffer, int index, int count);
            /*0x7173748*/ void WriteSpan(System.ReadOnlySpan<char> buffer, bool appendNewLine);
            /*0x7173a0c*/ void Write(string value);
            /*0x7173a7c*/ void WriteLine(string value);
            /*0x7173af0*/ System.Threading.Tasks.Task FlushAsync();
            /*0x7173dc4*/ void set_HaveWrittenPreamble_Prop(bool value);
            /*0x7173c24*/ System.Threading.Tasks.Task FlushAsyncInternal(bool flushStream, bool flushEncoder, char[] sCharBuffer, int sCharPos, System.Threading.CancellationToken cancellationToken);

            struct <DisposeAsyncCore>d__33 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder <>t__builder;
                /*0x38*/ System.IO.StreamWriter <>4__this;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x7174454*/ void MoveNext();
                /*0x71746f8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushAsyncInternal>d__74 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ bool haveWrittenPreamble;
                /*0x38*/ System.IO.StreamWriter _this;
                /*0x40*/ System.Text.Encoding encoding;
                /*0x48*/ System.IO.Stream stream;
                /*0x50*/ System.Threading.CancellationToken cancellationToken;
                /*0x58*/ System.Text.Encoder encoder;
                /*0x60*/ char[] charBuffer;
                /*0x68*/ int charPos;
                /*0x70*/ byte[] byteBuffer;
                /*0x78*/ bool flushEncoder;
                /*0x79*/ bool flushStream;
                /*0x80*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__1;
                /*0x90*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;

                /*0x7174704*/ void MoveNext();
                /*0x71750cc*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class TextReader : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextReader Null;

            static /*0x71756f4*/ TextReader();
            static /*0x71755cc*/ System.IO.TextReader Synchronized(System.IO.TextReader reader);
            /*0x7175134*/ TextReader();
            /*0x717513c*/ void Close();
            /*0x71751a8*/ void Dispose();
            /*0x7175214*/ void Dispose(bool disposing);
            /*0x7175218*/ int Peek();
            /*0x7175220*/ int Read();
            /*0x7175228*/ int Read(char[] buffer, int index, int count);
            /*0x71753d8*/ string ReadToEnd();
            /*0x71754d4*/ string ReadLine();

            class NullTextReader : System.IO.TextReader
            {
                /*0x717576c*/ NullTextReader();
                /*0x71757c4*/ int Read(char[] buffer, int index, int count);
                /*0x71757cc*/ string ReadLine();
            }

            class SyncTextReader : System.IO.TextReader
            {
                /*0x18*/ System.IO.TextReader _in;

                /*0x7175680*/ SyncTextReader(System.IO.TextReader t);
                /*0x71757d4*/ void Close();
                /*0x71757f4*/ void Dispose(bool disposing);
                /*0x71758a8*/ int Peek();
                /*0x71758c8*/ int Read();
                /*0x71758e8*/ int Read(char[] buffer, int index, int count);
                /*0x7175908*/ string ReadLine();
                /*0x717592c*/ string ReadToEnd();
            }
        }

        class TextWriter : System.MarshalByRefObject, System.IDisposable, System.IAsyncDisposable
        {
            static /*0x0*/ System.IO.TextWriter Null;
            static /*0x8*/ char[] s_coreNewLine;
            /*0x18*/ char[] CoreNewLine;
            /*0x20*/ string CoreNewLineStr;
            /*0x28*/ System.IFormatProvider _internalFormatProvider;

            static /*0x7176368*/ TextWriter();
            static /*0x7176230*/ System.IO.TextWriter Synchronized(System.IO.TextWriter writer);
            /*0x717594c*/ TextWriter();
            /*0x71759e4*/ TextWriter(System.IFormatProvider formatProvider);
            /*0x7175a88*/ System.IFormatProvider get_FormatProvider();
            /*0x7175af0*/ void Close();
            /*0x7175b5c*/ void Dispose(bool disposing);
            /*0x7175b60*/ void Dispose();
            /*0x7175bcc*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x7175cbc*/ void Flush();
            /*0x38148bc*/ System.Text.Encoding get_Encoding();
            /*0x7175cc0*/ string get_NewLine();
            /*0x7175cc8*/ void Write(char value);
            /*0x7175ccc*/ void Write(char[] buffer);
            /*0x7175cec*/ void Write(char[] buffer, int index, int count);
            /*0x7175e90*/ void Write(string value);
            /*0x7175ec8*/ void WriteLine();
            /*0x7175edc*/ void WriteLine(string value);
            /*0x7175f18*/ void WriteLine(object value);
            /*0x7176038*/ System.Threading.Tasks.Task FlushAsync();

            class NullTextWriter : System.IO.TextWriter
            {
                /*0x7176410*/ NullTextWriter();
                /*0x717649c*/ System.Text.Encoding get_Encoding();
                /*0x71764a4*/ void Write(char[] buffer, int index, int count);
                /*0x71764a8*/ void Write(string value);
                /*0x71764ac*/ void WriteLine();
                /*0x71764b0*/ void WriteLine(string value);
                /*0x71764b4*/ void WriteLine(object value);
                /*0x71764b8*/ void Write(char value);
            }

            class SyncTextWriter : System.IO.TextWriter, System.IDisposable
            {
                /*0x30*/ System.IO.TextWriter _out;

                /*0x71762e4*/ SyncTextWriter(System.IO.TextWriter t);
                /*0x71764bc*/ System.Text.Encoding get_Encoding();
                /*0x71764e0*/ System.IFormatProvider get_FormatProvider();
                /*0x7176500*/ string get_NewLine();
                /*0x7176524*/ void Close();
                /*0x7176544*/ void Dispose(bool disposing);
                /*0x71765f8*/ void Flush();
                /*0x7176618*/ void Write(char value);
                /*0x717663c*/ void Write(char[] buffer);
                /*0x7176660*/ void Write(char[] buffer, int index, int count);
                /*0x7176684*/ void Write(string value);
                /*0x71766a8*/ void WriteLine();
                /*0x71766cc*/ void WriteLine(string value);
                /*0x71766f0*/ void WriteLine(object value);
                /*0x7176714*/ System.Threading.Tasks.Task FlushAsync();
            }

            class <>c
            {
                static /*0x0*/ System.IO.TextWriter.<> <>9;
                static /*0x8*/ System.Action<object> <>9__67_0;

                static /*0x71767b0*/ <>c();
                /*0x7176818*/ <>c();
                /*0x7176820*/ void <FlushAsync>b__67_0(object state);
            }
        }

        class UnmanagedMemoryStream : System.IO.Stream
        {
            /*0x28*/ System.Runtime.InteropServices.SafeBuffer _buffer;
            /*0x30*/ byte* _mem;
            /*0x38*/ long _length;
            /*0x40*/ long _capacity;
            /*0x48*/ long _position;
            /*0x50*/ long _offset;
            /*0x58*/ System.IO.FileAccess _access;
            /*0x5c*/ bool _isOpen;
            /*0x60*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x71768a4*/ UnmanagedMemoryStream();
            /*0x7176910*/ UnmanagedMemoryStream(byte* pointer, long length);
            /*0x7176b7c*/ UnmanagedMemoryStream(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0x7176990*/ void Initialize(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0x7176c0c*/ bool get_CanRead();
            /*0x7176c28*/ bool get_CanSeek();
            /*0x7176c30*/ bool get_CanWrite();
            /*0x7176c4c*/ void Dispose(bool disposing);
            /*0x7176c5c*/ void EnsureNotClosed();
            /*0x7176c94*/ void EnsureReadable();
            /*0x7176cd4*/ void EnsureWriteable();
            /*0x7176d14*/ void Flush();
            /*0x7176d18*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x7176eb8*/ long get_Length();
            /*0x7176ed4*/ long get_Position();
            /*0x7176f20*/ void set_Position(long value);
            /*0x7176fc8*/ byte* get_PositionPointer();
            /*0x7177080*/ int Read(byte[] buffer, int offset, int count);
            /*0x717742c*/ int Read(System.Span<byte> buffer);
            /*0x7177208*/ int ReadCore(System.Span<byte> buffer);
            /*0x7177750*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7177a8c*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7177dcc*/ int ReadByte();
            /*0x7177f2c*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x7178038*/ void SetLength(long value);
            /*0x71781c0*/ void Write(byte[] buffer, int offset, int count);
            /*0x7178660*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7178374*/ void WriteCore(System.ReadOnlySpan<byte> buffer);
            /*0x71788f0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7178bcc*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7178e8c*/ void WriteByte(byte value);
        }

        class DriveNotFoundException : System.IO.IOException
        {
            /*0x71790b0*/ DriveNotFoundException();
            /*0x717910c*/ DriveNotFoundException(string message);
            /*0x7179130*/ DriveNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Directory
        {
            static /*0x7179138*/ System.IO.DirectoryInfo CreateDirectory(string path);
            static /*0x71792c4*/ bool Exists(string path);
            static /*0x7179438*/ string[] GetFiles(string path, string searchPattern);
            static /*0x71794d8*/ string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x7179700*/ string[] GetDirectories(string path);
            static /*0x71797a8*/ string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x7179540*/ System.Collections.Generic.IEnumerable<string> InternalEnumeratePaths(string path, string searchPattern, System.IO.SearchTarget searchTarget, System.IO.EnumerationOptions options);
            static /*0x7179810*/ System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);
            static /*0x71799c0*/ System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x71799cc*/ System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);
            static /*0x7179a78*/ System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x7179a84*/ string InternalGetDirectoryRoot(string path);
            static /*0x7179b40*/ string GetCurrentDirectory();
            static /*0x7179b48*/ void Delete(string path, bool recursive);
            static /*0x7179bb8*/ string InsecureGetCurrentDirectory();
        }

        class DirectoryInfo : System.IO.FileSystemInfo
        {
            static /*0x717a14c*/ System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> InternalEnumerateInfos(string path, string searchPattern, System.IO.SearchTarget searchTarget, System.IO.EnumerationOptions options);
            /*0x7179c54*/ DirectoryInfo(string path);
            /*0x717927c*/ DirectoryInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x717a304*/ DirectoryInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7179d4c*/ void Init(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x717a004*/ System.IO.FileInfo[] GetFiles();
            /*0x717a0ac*/ System.IO.FileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);
        }

        class EnumerationOptions
        {
            static /*0x0*/ System.IO.EnumerationOptions <Compatible>k__BackingField;
            static /*0x8*/ System.IO.EnumerationOptions <CompatibleRecursive>k__BackingField;
            static /*0x10*/ System.IO.EnumerationOptions <Default>k__BackingField;
            /*0x10*/ bool <RecurseSubdirectories>k__BackingField;
            /*0x11*/ bool <IgnoreInaccessible>k__BackingField;
            /*0x14*/ System.IO.FileAttributes <AttributesToSkip>k__BackingField;
            /*0x18*/ System.IO.MatchType <MatchType>k__BackingField;
            /*0x1c*/ System.IO.MatchCasing <MatchCasing>k__BackingField;
            /*0x20*/ bool <ReturnSpecialDirectories>k__BackingField;

            static /*0x717a5f0*/ EnumerationOptions();
            static /*0x717a468*/ System.IO.EnumerationOptions get_Compatible();
            static /*0x717a4c0*/ System.IO.EnumerationOptions get_CompatibleRecursive();
            static /*0x717a518*/ System.IO.EnumerationOptions get_Default();
            static /*0x7179888*/ System.IO.EnumerationOptions FromSearchOption(System.IO.SearchOption searchOption);
            /*0x717a570*/ EnumerationOptions();
            /*0x717a598*/ bool get_RecurseSubdirectories();
            /*0x717a5a0*/ void set_RecurseSubdirectories(bool value);
            /*0x717a5ac*/ bool get_IgnoreInaccessible();
            /*0x717a5b4*/ void set_IgnoreInaccessible(bool value);
            /*0x717a5c0*/ System.IO.FileAttributes get_AttributesToSkip();
            /*0x717a5c8*/ void set_AttributesToSkip(System.IO.FileAttributes value);
            /*0x717a5d0*/ System.IO.MatchType get_MatchType();
            /*0x717a5d8*/ void set_MatchType(System.IO.MatchType value);
            /*0x717a5e0*/ System.IO.MatchCasing get_MatchCasing();
            /*0x717a5e8*/ bool get_ReturnSpecialDirectories();
        }

        class File
        {
            static /*0x717a6dc*/ System.IO.StreamReader OpenText(string path);
            static /*0x717a784*/ void Delete(string path);
            static /*0x717a830*/ bool Exists(string path);
            static /*0x717a9f8*/ System.IO.FileStream Open(string path, System.IO.FileMode mode);
            static /*0x717aa0c*/ System.IO.FileStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            static /*0x717aac4*/ System.IO.FileAttributes GetAttributes(string path);
            static /*0x717ab24*/ System.IO.FileStream OpenRead(string path);
            static /*0x717ab9c*/ System.IO.FileStream OpenWrite(string path);
            static /*0x717ac14*/ string ReadAllText(string path);
            static /*0x717acd8*/ string InternalReadAllText(string path, System.Text.Encoding encoding);
            static /*0x717ae8c*/ void WriteAllText(string path, string contents);
            static /*0x717b0cc*/ byte[] ReadAllBytes(string path);
            static /*0x717b3b4*/ byte[] ReadAllBytesUnknownLength(System.IO.FileStream fs);
            static /*0x717b800*/ void WriteAllBytes(string path, byte[] bytes);
            static /*0x717b8fc*/ void InternalWriteAllBytes(string path, byte[] bytes);
        }

        class FileInfo : System.IO.FileSystemInfo
        {
            /*0x717bacc*/ FileInfo();
            /*0x717bad0*/ FileInfo(string fileName);
            /*0x717bae0*/ FileInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x717bdec*/ FileInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x717bc28*/ long get_Length();
            /*0x717bdf0*/ string get_Name();
        }

        struct FileStatus
        {
            /*0x10*/ Interop.Sys.FileStatus _fileStatus;
            /*0x80*/ int _fileStatusInitialized;
            /*0x84*/ bool <InitiallyDirectory>k__BackingField;
            /*0x85*/ bool _isDirectory;
            /*0x86*/ bool _exists;

            static /*0x717be0c*/ void Initialize(ref System.IO.FileStatus status, bool isDirectory);
            /*0x717bdf8*/ bool get_InitiallyDirectory();
            /*0x717be00*/ void set_InitiallyDirectory(bool value);
            /*0x717be20*/ bool IsReadOnly(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x717bfd0*/ System.IO.FileAttributes GetAttributes(System.ReadOnlySpan<char> path, System.ReadOnlySpan<char> fileName);
            /*0x717c0b8*/ bool GetExists(System.ReadOnlySpan<char> path);
            /*0x717c294*/ System.DateTimeOffset GetLastAccessTime(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x717c330*/ System.DateTimeOffset UnixTimeToDateTimeOffset(long seconds, long nanoseconds);
            /*0x717c3e4*/ long GetLength(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x717c0fc*/ void Refresh(System.ReadOnlySpan<char> path);
            /*0x717bf10*/ void EnsureStatInitialized(System.ReadOnlySpan<char> path, bool continueOnError);
        }

        class FileSystemInfo : System.MarshalByRefObject, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ System.IO.FileStatus _fileStatus;
            /*0x90*/ string FullPath;
            /*0x98*/ string OriginalPath;
            /*0xa0*/ string _name;

            static /*0x717c400*/ System.IO.FileSystemInfo Create(string fullPath, string fileName, ref System.IO.FileStatus fileStatus);
            static /*0x717c650*/ void ThrowNotFound(string path);
            /*0x7179cd8*/ FileSystemInfo();
            /*0x717a308*/ FileSystemInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x717c4d0*/ void Init(ref System.IO.FileStatus fileStatus);
            /*0x717bcac*/ System.IO.FileAttributes get_Attributes();
            /*0x717c54c*/ bool get_ExistsCore();
            /*0x717c5e4*/ System.DateTimeOffset get_LastAccessTimeCore();
            /*0x717bd78*/ long get_LengthCore();
            /*0x717c6e8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x717c818*/ string get_FullName();
            /*0x717c820*/ string get_Name();
            /*0x717c828*/ bool get_Exists();
            /*0x717c8b0*/ System.DateTime get_LastAccessTimeUtc();
            /*0x717c928*/ string ToString();
        }

        enum MatchCasing
        {
            PlatformDefault = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
        }

        enum MatchType
        {
            Simple = 0,
            Win32 = 1,
        }

        enum SearchOption
        {
            TopDirectoryOnly = 0,
            AllDirectories = 1,
        }

        enum SearchTarget
        {
            Files = 1,
            Directories = 2,
            Both = 3,
        }

        class BufferedStream : System.IO.Stream
        {
            /*0x28*/ System.IO.Stream _stream;
            /*0x30*/ byte[] _buffer;
            /*0x38*/ int _bufferSize;
            /*0x3c*/ int _readPos;
            /*0x40*/ int _readLen;
            /*0x44*/ int _writePos;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastSyncCompletedReadTask;
            /*0x50*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            /*0x717ca44*/ BufferedStream(System.IO.Stream stream);
            /*0x717ca4c*/ BufferedStream(System.IO.Stream stream, int bufferSize);
            /*0x717c94c*/ System.Threading.SemaphoreSlim LazyEnsureAsyncActiveSemaphoreInitialized();
            /*0x717cc30*/ void EnsureNotClosed();
            /*0x717cc90*/ void EnsureCanSeek();
            /*0x717cd00*/ void EnsureCanRead();
            /*0x717cd70*/ void EnsureCanWrite();
            /*0x717cde0*/ void EnsureShadowBufferAllocated();
            /*0x717cecc*/ void EnsureBufferAllocated();
            /*0x717cf3c*/ bool get_CanRead();
            /*0x717cf54*/ bool get_CanWrite();
            /*0x717cf6c*/ bool get_CanSeek();
            /*0x717cf84*/ long get_Length();
            /*0x717d010*/ long get_Position();
            /*0x717d05c*/ void set_Position(long value);
            /*0x717d11c*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x717d218*/ void Dispose(bool disposing);
            /*0x717d38c*/ void Flush();
            /*0x717d48c*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x717d558*/ System.Threading.Tasks.Task FlushAsyncInternal(System.Threading.CancellationToken cancellationToken);
            /*0x717d448*/ void FlushRead();
            /*0x717d654*/ void ClearReadBufferBeforeWrite();
            /*0x717cfc0*/ void FlushWrite();
            /*0x717d6e4*/ System.Threading.Tasks.Task FlushWriteAsync(System.Threading.CancellationToken cancellationToken);
            /*0x717d7e0*/ int ReadFromBuffer(byte[] array, int offset, int count);
            /*0x717d844*/ int ReadFromBuffer(System.Span<byte> destination);
            /*0x717d978*/ int ReadFromBuffer(byte[] array, int offset, int count, ref System.Exception error);
            /*0x717da58*/ int Read(byte[] array, int offset, int count);
            /*0x717dc6c*/ int Read(System.Span<byte> destination);
            /*0x717ddd0*/ System.Threading.Tasks.Task<int> LastSyncCompletedReadTask(int val);
            /*0x717de8c*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x717e3f4*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x717e25c*/ System.Threading.Tasks.ValueTask<int> ReadFromUnderlyingStreamAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken, int bytesAlreadySatisfied, System.Threading.Tasks.Task semaphoreLockTask);
            /*0x717e6fc*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x717e7b0*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x717e7f8*/ int ReadByte();
            /*0x717e848*/ int ReadByteSlow();
            /*0x717e8d8*/ void WriteToBuffer(byte[] array, ref int offset, ref int count);
            /*0x717e9b4*/ int WriteToBuffer(System.ReadOnlySpan<byte> buffer);
            /*0x717eb24*/ void Write(byte[] array, int offset, int count);
            /*0x717ee34*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x717f0cc*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x717f2c8*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x717f518*/ System.Threading.Tasks.Task WriteToUnderlyingStreamAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task semaphoreLockTask);
            /*0x717f668*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x717f71c*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x717f728*/ void WriteByte(byte value);
            /*0x717f7b4*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x717f8dc*/ void SetLength(long value);
            /*0x717f99c*/ void CopyTo(System.IO.Stream destination, int bufferSize);

            class <>c
            {
                static /*0x0*/ System.IO.BufferedStream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__10_0;

                static /*0x717fa2c*/ <>c();
                /*0x717fa94*/ <>c();
                /*0x717fa9c*/ System.Threading.SemaphoreSlim <LazyEnsureAsyncActiveSemaphoreInitialized>b__10_0();
            }

            struct <DisposeAsync>d__34 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder <>t__builder;
                /*0x38*/ System.IO.BufferedStream <>4__this;
                /*0x40*/ object <>7__wrap1;
                /*0x48*/ int <>7__wrap2;
                /*0x50*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__2;

                /*0x717faf8*/ void MoveNext();
                /*0x7180290*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushAsyncInternal>d__38 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.IO.BufferedStream <>4__this;
                /*0x38*/ System.Threading.CancellationToken cancellationToken;
                /*0x40*/ System.Threading.SemaphoreSlim <sem>5__2;
                /*0x48*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x718029c*/ void MoveNext();
                /*0x71808e0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushWriteAsync>d__42 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.IO.BufferedStream <>4__this;
                /*0x38*/ System.Threading.CancellationToken cancellationToken;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__1;
                /*0x50*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;

                /*0x7180948*/ void MoveNext();
                /*0x7180f20*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <ReadFromUnderlyingStreamAsync>d__51 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int> <>t__builder;
                /*0x38*/ System.Threading.Tasks.Task semaphoreLockTask;
                /*0x40*/ System.IO.BufferedStream <>4__this;
                /*0x48*/ System.Memory<byte> buffer;
                /*0x58*/ int bytesAlreadySatisfied;
                /*0x60*/ System.Threading.CancellationToken cancellationToken;
                /*0x68*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x78*/ int <>7__wrap1;
                /*0x80*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<int> <>u__2;

                /*0x7180f88*/ void MoveNext();
                /*0x71818e0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <WriteToUnderlyingStreamAsync>d__63 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.Threading.Tasks.Task semaphoreLockTask;
                /*0x38*/ System.IO.BufferedStream <>4__this;
                /*0x40*/ System.ReadOnlyMemory<byte> buffer;
                /*0x50*/ System.Threading.CancellationToken cancellationToken;
                /*0x58*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x68*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__2;

                /*0x7181938*/ void MoveNext();
                /*0x7182d7c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        enum FileAttributes
        {
            ReadOnly = 1,
            Hidden = 2,
            System = 4,
            Directory = 16,
            Archive = 32,
            Device = 64,
            Normal = 128,
            Temporary = 256,
            SparseFile = 512,
            ReparsePoint = 1024,
            Compressed = 2048,
            Offline = 4096,
            NotContentIndexed = 8192,
            Encrypted = 16384,
            IntegrityStream = 32768,
            NoScrubData = 131072,
        }

        class Stream : System.MarshalByRefObject, System.IDisposable, System.IAsyncDisposable
        {
            static /*0x0*/ System.IO.Stream Null;
            /*0x18*/ System.IO.Stream.ReadWriteTask _activeReadWriteTask;
            /*0x20*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            static /*0x71856ec*/ Stream();
            static /*0x718526c*/ int BlockingEndRead(System.IAsyncResult asyncResult);
            static /*0x7185500*/ void BlockingEndWrite(System.IAsyncResult asyncResult);
            static /*0x71842cc*/ System.Threading.Tasks.ValueTask<int> <ReadAsync>g__FinishReadAsync|44_0(System.Threading.Tasks.Task<int> readTask, byte[] localBuffer, System.Memory<byte> localDestination);
            /*0x7176908*/ Stream();
            /*0x7182de4*/ System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized();
            /*0x3813ffc*/ bool get_CanRead();
            /*0x3813ffc*/ bool get_CanSeek();
            /*0x7182edc*/ bool get_CanTimeout();
            /*0x3813ffc*/ bool get_CanWrite();
            /*0x38146fc*/ long get_Length();
            /*0x38146fc*/ long get_Position();
            /*0x381630c*/ void set_Position(long value);
            /*0x7182ee4*/ int get_ReadTimeout();
            /*0x7182f30*/ void set_ReadTimeout(int value);
            /*0x7182f7c*/ int get_WriteTimeout();
            /*0x7182fc8*/ void set_WriteTimeout(int value);
            /*0x7183014*/ void CopyTo(System.IO.Stream destination);
            /*0x7183114*/ void CopyTo(System.IO.Stream destination, int bufferSize);
            /*0x718304c*/ int GetCopyBufferSize();
            /*0x71832d4*/ void Close();
            /*0x7183344*/ void Dispose();
            /*0x7176c58*/ void Dispose(bool disposing);
            /*0x38159dc*/ void Flush();
            /*0x7180224*/ System.Threading.Tasks.Task FlushAsync();
            /*0x7183354*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x718351c*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x718353c*/ System.IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0x7183b14*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x7183cd4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count);
            /*0x7183d68*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7184028*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7183e48*/ System.Threading.Tasks.Task<int> BeginEndReadAsync(byte[] buffer, int offset, int count);
            /*0x7184448*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x7184468*/ System.IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0x71838c4*/ void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x7183a4c*/ void RunReadWriteTask(System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x718466c*/ void FinishTrackingAsyncOperation();
            /*0x718469c*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x718484c*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count);
            /*0x71848e0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7184b8c*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7184e44*/ System.Threading.Tasks.Task FinishWriteAsync(System.Threading.Tasks.Task writeTask, byte[] localBuffer);
            /*0x71849ac*/ System.Threading.Tasks.Task BeginEndWriteAsync(byte[] buffer, int offset, int count);
            long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x381630c*/ void SetLength(long value);
            int Read(byte[] buffer, int offset, int count);
            /*0x71774f4*/ int Read(System.Span<byte> buffer);
            /*0x7184f44*/ int ReadByte();
            void Write(byte[] buffer, int offset, int count);
            /*0x7178728*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7184fd8*/ void WriteByte(byte value);
            /*0x7185064*/ System.IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x7185358*/ System.IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x7184440*/ bool HasOverriddenBeginEndRead();
            /*0x7184f3c*/ bool HasOverriddenBeginEndWrite();
            /*0x71855f0*/ System.Threading.Tasks.ValueTask DisposeAsync();

            struct ReadWriteParameters
            {
                /*0x10*/ byte[] Buffer;
                /*0x18*/ int Offset;
                /*0x1c*/ int Count;
            }

            class ReadWriteTask : System.Threading.Tasks.Task<int>, System.Threading.Tasks.ITaskCompletionAction
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeAsyncCallback;
                /*0x54*/ bool _isRead;
                /*0x55*/ bool _apm;
                /*0x58*/ System.IO.Stream _stream;
                /*0x60*/ byte[] _buffer;
                /*0x68*/ int _offset;
                /*0x6c*/ int _count;
                /*0x70*/ System.AsyncCallback _callback;
                /*0x78*/ System.Threading.ExecutionContext _context;

                static /*0x71857e4*/ void InvokeAsyncCallback(object completedTask);
                /*0x7183740*/ ReadWriteTask(bool isRead, bool apm, System.Func<object, int> function, object state, System.IO.Stream stream, byte[] buffer, int offset, int count, System.AsyncCallback callback);
                /*0x71857bc*/ void ClearBeginState();
                /*0x718586c*/ void System.Threading.Tasks.ITaskCompletionAction.Invoke(System.Threading.Tasks.Task completingTask);
                /*0x71859b0*/ bool System.Threading.Tasks.ITaskCompletionAction.get_InvokeMayRunArbitraryCode();
            }

            class NullStream : System.IO.Stream
            {
                static /*0x0*/ System.Threading.Tasks.Task<int> s_zeroTask;

                static /*0x7185fc8*/ NullStream();
                /*0x7185764*/ NullStream();
                /*0x71859b8*/ bool get_CanRead();
                /*0x71859c0*/ bool get_CanWrite();
                /*0x71859c8*/ bool get_CanSeek();
                /*0x71859d0*/ long get_Length();
                /*0x71859d8*/ long get_Position();
                /*0x71859e0*/ void set_Position(long value);
                /*0x71859e4*/ void CopyTo(System.IO.Stream destination, int bufferSize);
                /*0x71859ec*/ void Dispose(bool disposing);
                /*0x71859f0*/ void Flush();
                /*0x71859f4*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
                /*0x7185ad8*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x7185b64*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x7185c04*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x7185c90*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x7185d30*/ int Read(byte[] buffer, int offset, int count);
                /*0x7185d38*/ int Read(System.Span<byte> buffer);
                /*0x7185d40*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x7185d98*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
                /*0x7185dec*/ int ReadByte();
                /*0x7185df4*/ void Write(byte[] buffer, int offset, int count);
                /*0x7185df8*/ void Write(System.ReadOnlySpan<byte> buffer);
                /*0x7185dfc*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x7185ee0*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
                /*0x7185fb8*/ void WriteByte(byte value);
                /*0x7185fbc*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x7185fc4*/ void SetLength(long length);
            }

            class SynchronousAsyncResult : System.IAsyncResult
            {
                /*0x10*/ object _stateObject;
                /*0x18*/ bool _isWrite;
                /*0x20*/ System.Threading.ManualResetEvent _waitHandle;
                /*0x28*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x30*/ bool _endXxxCalled;
                /*0x34*/ int _bytesRead;

                static /*0x7185270*/ int EndRead(System.IAsyncResult asyncResult);
                static /*0x7185504*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x71851d0*/ SynchronousAsyncResult(int bytesRead, object asyncStateObject);
                /*0x71854c4*/ SynchronousAsyncResult(object asyncStateObject);
                /*0x7185208*/ SynchronousAsyncResult(System.Exception ex, object asyncStateObject, bool isWrite);
                /*0x7186060*/ bool get_IsCompleted();
                /*0x7186068*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                /*0x7186160*/ object get_AsyncState();
                /*0x7186168*/ bool get_CompletedSynchronously();
                /*0x7186170*/ void ThrowIfError();

                class <>c
                {
                    static /*0x0*/ System.IO.Stream.SynchronousAsyncResult.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.ManualResetEvent> <>9__12_0;

                    static /*0x7186184*/ <>c();
                    /*0x71861ec*/ <>c();
                    /*0x71861f4*/ System.Threading.ManualResetEvent <get_AsyncWaitHandle>b__12_0();
                }
            }

            class <>c
            {
                static /*0x0*/ System.IO.Stream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__4_0;
                static /*0x10*/ System.Action<object> <>9__37_0;
                static /*0x18*/ System.Func<object, int> <>9__40_0;
                static /*0x20*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__45_0;
                static /*0x28*/ System.Func<System.IO.Stream, System.IAsyncResult, int> <>9__45_1;
                static /*0x30*/ System.Func<object, int> <>9__48_0;
                static /*0x38*/ System.Action<System.Threading.Tasks.Task, object> <>9__49_0;
                static /*0x40*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__58_0;
                static /*0x48*/ System.Func<System.IO.Stream, System.IAsyncResult, System.Threading.Tasks.VoidTaskResult> <>9__58_1;

                static /*0x718624c*/ <>c();
                /*0x71862b4*/ <>c();
                /*0x71862bc*/ System.Threading.SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0();
                /*0x7186318*/ void <FlushAsync>b__37_0(object state);
                /*0x71863a0*/ int <BeginReadInternal>b__40_0(object <p0>);
                /*0x7186564*/ System.IAsyncResult <BeginEndReadAsync>b__45_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x7186598*/ int <BeginEndReadAsync>b__45_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
                /*0x71865c4*/ int <BeginWriteInternal>b__48_0(object <p0>);
                /*0x7186778*/ void <RunReadWriteTaskWhenReady>b__49_0(System.Threading.Tasks.Task t, object state);
                /*0x71867e4*/ System.IAsyncResult <BeginEndWriteAsync>b__58_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x7186818*/ System.Threading.Tasks.VoidTaskResult <BeginEndWriteAsync>b__58_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
            }

            struct <FinishWriteAsync>d__57 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.Threading.Tasks.Task writeTask;
                /*0x38*/ byte[] localBuffer;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x718684c*/ void MoveNext();
                /*0x7186adc*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <<ReadAsync>g__FinishReadAsync|44_0>d : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int> <>t__builder;
                /*0x38*/ System.Threading.Tasks.Task<int> readTask;
                /*0x40*/ byte[] localBuffer;
                /*0x48*/ System.Memory<byte> localDestination;
                /*0x58*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int> <>u__1;

                /*0x7186b44*/ void MoveNext();
                /*0x7186ed8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class __Error
        {
            static /*0x7186f30*/ void EndOfFile();
            static /*0x7186f88*/ void FileNotOpen();
            static /*0x7186fe4*/ void ReaderClosed();
            static /*0x7187040*/ string GetDisplayablePath(string path, bool isInvalidPath);
            static /*0x7187180*/ void WinIOError(int errorCode, string maybeFullPath);
            static /*0x71876dc*/ void WriterClosed();
        }

        class BinaryReader : System.IDisposable
        {
            /*0x10*/ System.IO.Stream m_stream;
            /*0x18*/ byte[] m_buffer;
            /*0x20*/ System.Text.Decoder m_decoder;
            /*0x28*/ byte[] m_charBytes;
            /*0x30*/ char[] m_singleChar;
            /*0x38*/ char[] m_charBuffer;
            /*0x40*/ int m_maxCharsSize;
            /*0x44*/ bool m_2BytesPerChar;
            /*0x45*/ bool m_isMemoryStream;
            /*0x46*/ bool m_leaveOpen;

            /*0x7187738*/ BinaryReader(System.IO.Stream input);
            /*0x7187a38*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding);
            /*0x71877a8*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);
            /*0x7187a40*/ System.IO.Stream get_BaseStream();
            /*0x7187a48*/ void Close();
            /*0x7187a58*/ void Dispose(bool disposing);
            /*0x7187b04*/ void Dispose();
            /*0x7187b14*/ int Read();
            /*0x7187dc8*/ bool ReadBoolean();
            /*0x7187e10*/ byte ReadByte();
            /*0x7187e44*/ sbyte ReadSByte();
            /*0x7187e84*/ char ReadChar();
            /*0x7187ea8*/ short ReadInt16();
            /*0x7187ef0*/ ushort ReadUInt16();
            /*0x7187f38*/ int ReadInt32();
            /*0x718802c*/ uint ReadUInt32();
            /*0x718809c*/ long ReadInt64();
            /*0x718814c*/ ulong ReadUInt64();
            /*0x71881fc*/ float ReadSingle();
            /*0x718822c*/ double ReadDouble();
            /*0x718825c*/ decimal ReadDecimal();
            /*0x71883f4*/ string ReadString();
            /*0x7188748*/ int InternalReadChars(char[] buffer, int index, int count);
            /*0x7187b2c*/ int InternalReadOneChar();
            /*0x7188a4c*/ char[] ReadChars(int count);
            /*0x7188ba8*/ int Read(byte[] buffer, int index, int count);
            /*0x7188d18*/ byte[] ReadBytes(int count);
            /*0x7188ea4*/ void FillBuffer(int numBytes);
            /*0x71886a8*/ int Read7BitEncodedInt();
        }

        class BinaryWriter : System.IDisposable, System.IAsyncDisposable
        {
            static /*0x0*/ System.IO.BinaryWriter Null;
            /*0x10*/ System.IO.Stream OutStream;
            /*0x18*/ byte[] _buffer;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Encoder _encoder;
            /*0x30*/ bool _leaveOpen;
            /*0x38*/ byte[] _largeByteBuffer;
            /*0x40*/ int _maxChars;

            static /*0x7189ffc*/ BinaryWriter();
            /*0x7188fc0*/ BinaryWriter();
            /*0x71890d8*/ BinaryWriter(System.IO.Stream output);
            /*0x71892f8*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding);
            /*0x7189150*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);
            /*0x7189300*/ void Dispose(bool disposing);
            /*0x7189348*/ void Dispose();
            /*0x7189358*/ void Flush();
            /*0x718937c*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x718957c*/ void Write(bool value);
            /*0x71895cc*/ void Write(byte value);
            /*0x71895f0*/ void Write(byte[] buffer);
            /*0x7189668*/ void Write(byte[] buffer, int index, int count);
            /*0x718968c*/ void Write(char ch);
            /*0x718978c*/ void Write(char[] chars);
            /*0x7189830*/ void Write(double value);
            /*0x718986c*/ void Write(short value);
            /*0x71898d4*/ void Write(ushort value);
            /*0x718993c*/ void Write(int value);
            /*0x71899dc*/ void Write(uint value);
            /*0x7189a7c*/ void Write(long value);
            /*0x7189b8c*/ void Write(ulong value);
            /*0x7189c9c*/ void Write(float value);
            /*0x7189cd8*/ void Write(string value);
            /*0x7189f9c*/ void Write7BitEncodedInt(int value);
        }

        class StringReader : System.IO.TextReader
        {
            /*0x18*/ string _s;
            /*0x20*/ int _pos;
            /*0x24*/ int _length;

            /*0x718a060*/ StringReader(string s);
            /*0x718a12c*/ void Close();
            /*0x718a13c*/ void Dispose(bool disposing);
            /*0x718a160*/ int Peek();
            /*0x718a19c*/ int Read();
            /*0x718a1e0*/ int Read(char[] buffer, int index, int count);
            /*0x718a388*/ string ReadToEnd();
            /*0x718a3c4*/ string ReadLine();
        }

        class StringWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.Text.UnicodeEncoding m_encoding;
            /*0x30*/ System.Text.StringBuilder _sb;
            /*0x38*/ bool _isOpen;

            /*0x718a4d0*/ StringWriter();
            /*0x718a650*/ StringWriter(System.IFormatProvider formatProvider);
            /*0x718a6bc*/ StringWriter(System.Text.StringBuilder sb);
            /*0x718a564*/ StringWriter(System.Text.StringBuilder sb, System.IFormatProvider formatProvider);
            /*0x718a72c*/ void Close();
            /*0x718a73c*/ void Dispose(bool disposing);
            /*0x718a744*/ System.Text.Encoding get_Encoding();
            /*0x718a7f8*/ void Write(char value);
            /*0x718a820*/ void Write(char[] buffer, int index, int count);
            /*0x718a994*/ void Write(string value);
            /*0x718a9c8*/ System.Threading.Tasks.Task FlushAsync();
            /*0x718aa50*/ string ToString();
        }

        class FileStream : System.IO.Stream
        {
            static /*0x0*/ byte[] buf_recycle;
            static /*0x8*/ object buf_recycle_lock;
            /*0x28*/ byte[] buf;
            /*0x30*/ string name;
            /*0x38*/ Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle;
            /*0x40*/ bool isExposed;
            /*0x48*/ long append_startpos;
            /*0x50*/ System.IO.FileAccess access;
            /*0x54*/ bool owner;
            /*0x55*/ bool async;
            /*0x56*/ bool canseek;
            /*0x57*/ bool anonymous;
            /*0x58*/ bool buf_dirty;
            /*0x5c*/ int buf_size;
            /*0x60*/ int buf_length;
            /*0x64*/ int buf_offset;
            /*0x68*/ long buf_start;

            static /*0x718ddec*/ FileStream();
            /*0x718aa70*/ FileStream(nint handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x718af00*/ FileStream(string path, System.IO.FileMode mode);
            /*0x718b664*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access);
            /*0x717aaa0*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            /*0x717b394*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);
            /*0x718b6a8*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);
            /*0x718b6d0*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
            /*0x718b690*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool isAsync, bool anonymous);
            /*0x718af34*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool anonymous, System.IO.FileOptions options);
            /*0x718ac10*/ void Init(Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x718bb04*/ bool get_CanRead();
            /*0x718bb18*/ bool get_CanWrite();
            /*0x718bb2c*/ bool get_CanSeek();
            /*0x718bb34*/ string get_Name();
            /*0x718bb3c*/ long get_Length();
            /*0x718bcb0*/ long get_Position();
            /*0x718be20*/ void set_Position(long value);
            /*0x718beac*/ Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle();
            /*0x718badc*/ void ExposeHandle();
            /*0x718c074*/ int ReadByte();
            /*0x718c30c*/ void WriteByte(byte value);
            /*0x718c460*/ int Read(byte[] array, int offset, int count);
            /*0x718c6ac*/ int ReadInternal(byte[] dest, int offset, int count);
            /*0x718c800*/ System.IAsyncResult BeginRead(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x718ca94*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x718cbf4*/ void Write(byte[] array, int offset, int count);
            /*0x718ce18*/ void WriteInternal(byte[] src, int offset, int count);
            /*0x718d058*/ System.IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x718d32c*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x718d48c*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x718d6e8*/ void SetLength(long value);
            /*0x718d8f4*/ void Flush();
            /*0x718d968*/ void Finalize();
            /*0x718da0c*/ void Dispose(bool disposing);
            /*0x718dd60*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x718dde4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x718dde8*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x718c748*/ int ReadSegment(byte[] dest, int dest_offset, int count);
            /*0x718cfe0*/ int WriteSegment(byte[] src, int src_offset, int count);
            /*0x718bee8*/ void FlushBuffer();
            /*0x718bca0*/ void FlushBufferIfDirty();
            /*0x718c2dc*/ void RefillBuffer();
            /*0x718c1b4*/ int ReadData(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] buf, int offset, int count);
            /*0x718b81c*/ void InitBuffer(int size, bool isZeroSize);
            /*0x718b7a0*/ string GetSecureFileName(string filename);
            /*0x718b6f0*/ string GetSecureFileName(string filename, bool full);

            class ReadDelegate : System.MulticastDelegate
            {
                /*0x718de60*/ ReadDelegate(object object, nint method);
                /*0x718df14*/ int Invoke(byte[] buffer, int offset, int count);
                /*0x718df28*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x718dfa8*/ int EndInvoke(System.IAsyncResult result);
            }

            class WriteDelegate : System.MulticastDelegate
            {
                /*0x718dfd0*/ WriteDelegate(object object, nint method);
                /*0x718e084*/ void Invoke(byte[] buffer, int offset, int count);
                /*0x718e098*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x718e118*/ void EndInvoke(System.IAsyncResult result);
            }
        }

        class FileStreamAsyncResult : System.IAsyncResult
        {
            /*0x10*/ object state;
            /*0x18*/ bool completed;
            /*0x20*/ System.Threading.ManualResetEvent wh;
            /*0x28*/ System.AsyncCallback cb;
            /*0x30*/ bool completedSynch;
            /*0x34*/ int Count;
            /*0x38*/ int OriginalCount;
            /*0x3c*/ int BytesRead;
            /*0x40*/ System.AsyncCallback realcb;

            static /*0x718e224*/ void CBWrapper(System.IAsyncResult ares);
            /*0x718e124*/ FileStreamAsyncResult(System.AsyncCallback cb, object state);
            /*0x718e2b8*/ object get_AsyncState();
            /*0x718e2c0*/ bool get_CompletedSynchronously();
            /*0x718e2c8*/ System.Threading.WaitHandle get_AsyncWaitHandle();
            /*0x718e2d0*/ bool get_IsCompleted();
        }

        enum MonoFileType
        {
            Unknown = 0,
            Disk = 1,
            Char = 2,
            Pipe = 3,
            Remote = 32768,
        }

        class MonoIO
        {
            static /*0x0*/ nint InvalidHandle;
            static /*0x8*/ bool dump_handles;

            static /*0x718f508*/ MonoIO();
            static /*0x718e2d8*/ System.Exception GetException(System.IO.MonoIOError error);
            static /*0x718e3f0*/ System.Exception GetException(string path, System.IO.MonoIOError error);
            static /*0x718eb38*/ string GetCurrentDirectory(ref System.IO.MonoIOError error);
            static /*0x718eb3c*/ System.IO.MonoFileType GetFileType(nint handle, ref System.IO.MonoIOError error);
            static /*0x718eb40*/ System.IO.MonoFileType GetFileType(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x718ec78*/ nint Open(char* filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x718ec7c*/ nint Open(string filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x718ed18*/ bool Cancel_internal(nint handle, ref System.IO.MonoIOError error);
            static /*0x718ed1c*/ bool Cancel(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x718ee54*/ bool Close(nint handle, ref System.IO.MonoIOError error);
            static /*0x718ee58*/ int Read(nint handle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x718ee5c*/ int Read(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x718efb4*/ int Write(nint handle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x718efb8*/ int Write(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x718f110*/ long Seek(nint handle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x718f114*/ long Seek(System.Runtime.InteropServices.SafeHandle safeHandle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x718f264*/ long GetLength(nint handle, ref System.IO.MonoIOError error);
            static /*0x718f268*/ long GetLength(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x718f3a0*/ bool SetLength(nint handle, long length, ref System.IO.MonoIOError error);
            static /*0x718f3a4*/ bool SetLength(System.Runtime.InteropServices.SafeHandle safeHandle, long length, ref System.IO.MonoIOError error);
            static /*0x718f4e4*/ nint get_ConsoleOutput();
            static /*0x718f4e8*/ nint get_ConsoleInput();
            static /*0x718f4ec*/ nint get_ConsoleError();
            static /*0x718f4f0*/ bool DuplicateHandle(nint source_process_handle, nint source_handle, nint target_process_handle, ref nint target_handle, int access, int inherit, int options, ref System.IO.MonoIOError error);
            static /*0x718f4f4*/ char get_VolumeSeparatorChar();
            static /*0x718f4f8*/ char get_DirectorySeparatorChar();
            static /*0x718f4fc*/ char get_AltDirectorySeparatorChar();
            static /*0x718f500*/ char get_PathSeparator();
            static /*0x718eb34*/ void DumpHandles();
            static /*0x718f504*/ bool RemapPath(string path, ref string newPath);
        }

        enum MonoIOError
        {
            ERROR_SUCCESS = 0,
            ERROR_FILE_NOT_FOUND = 2,
            ERROR_PATH_NOT_FOUND = 3,
            ERROR_TOO_MANY_OPEN_FILES = 4,
            ERROR_ACCESS_DENIED = 5,
            ERROR_INVALID_HANDLE = 6,
            ERROR_INVALID_DRIVE = 15,
            ERROR_NOT_SAME_DEVICE = 17,
            ERROR_NO_MORE_FILES = 18,
            ERROR_NOT_READY = 21,
            ERROR_WRITE_FAULT = 29,
            ERROR_READ_FAULT = 30,
            ERROR_GEN_FAILURE = 31,
            ERROR_SHARING_VIOLATION = 32,
            ERROR_LOCK_VIOLATION = 33,
            ERROR_HANDLE_DISK_FULL = 39,
            ERROR_NOT_SUPPORTED = 50,
            ERROR_FILE_EXISTS = 80,
            ERROR_CANNOT_MAKE = 82,
            ERROR_INVALID_PARAMETER = 87,
            ERROR_BROKEN_PIPE = 109,
            ERROR_INVALID_NAME = 123,
            ERROR_DIR_NOT_EMPTY = 145,
            ERROR_ALREADY_EXISTS = 183,
            ERROR_FILENAME_EXCED_RANGE = 206,
            ERROR_DIRECTORY = 267,
            ERROR_ENCRYPTION_FAILED = 6000,
        }

        struct MonoIOStat
        {
            /*0x10*/ System.IO.FileAttributes fileAttributes;
            /*0x18*/ long Length;
            /*0x20*/ long CreationTime;
            /*0x28*/ long LastAccessTime;
            /*0x30*/ long LastWriteTime;
        }

        class Path
        {
            static /*0x0*/ char[] InvalidPathChars;
            static /*0x8*/ char AltDirectorySeparatorChar;
            static /*0xa*/ char DirectorySeparatorChar;
            static /*0xc*/ char PathSeparator;
            static /*0x10*/ string DirectorySeparatorStr;
            static /*0x18*/ char VolumeSeparatorChar;
            static /*0x20*/ char[] PathSeparatorChars;
            static /*0x28*/ bool dirEqualsVolume;
            static /*0x30*/ char[] trimEndCharsWindows;
            static /*0x38*/ char[] trimEndCharsUnix;

            static /*0x719192c*/ Path();
            static /*0x718f590*/ string ChangeExtension(string path, string extension);
            static /*0x718f808*/ string Combine(string path1, string path2);
            static /*0x718fb8c*/ string CleanPath(string s);
            static /*0x718ffdc*/ string GetDirectoryName(string path);
            static /*0x7190774*/ System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);
            static /*0x7190844*/ string GetExtension(string path);
            static /*0x7190960*/ string GetFileName(string path);
            static /*0x7190a6c*/ string GetFileNameWithoutExtension(string path);
            static /*0x7190ac8*/ string GetFullPath(string path);
            static /*0x71911ac*/ string GetFullPathInternal(string path);
            static /*0x7190b30*/ string InsecureGetFullPath(string path);
            static /*0x7191200*/ bool IsDirectorySeparator(char c);
            static /*0x7190354*/ string GetPathRoot(string path);
            static /*0x7191690*/ string GetTempPath();
            static /*0x7191790*/ string get_temp_path();
            static /*0x7191794*/ bool IsPathRooted(System.ReadOnlySpan<char> path);
            static /*0x718fa68*/ bool IsPathRooted(string path);
            static /*0x7191898*/ char[] GetInvalidPathChars();
            static /*0x718f774*/ int findExtension(string path);
            static /*0x719128c*/ string CanonicalizePath(string path);
            static /*0x7191b2c*/ string Combine(string[] paths);
            static /*0x7191e1c*/ string Combine(string path1, string path2, string path3);
            static /*0x7191f9c*/ string Combine(string path1, string path2, string path3, string path4);
            static /*0x719216c*/ System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);
            static /*0x71922b0*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);
            static /*0x71925e0*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);
            static /*0x7192a50*/ bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, ref int charsWritten);
            static /*0x7192368*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second);
            static /*0x71926f0*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second, System.ReadOnlySpan<char> third);

            class <>c
            {
                static /*0x0*/ System.IO.Path.<> <>9;
                static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, bool>> <>9__56_0;
                static /*0x10*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>>> <>9__57_0;

                static /*0x7192cbc*/ <>c();
                /*0x7192d24*/ <>c();
                /*0x7192d2c*/ void <JoinInternal>b__56_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, bool> state);
                /*0x7192e8c*/ void <JoinInternal>b__57_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>> state);
            }
        }

        class UnexceptionalStreamReader : System.IO.StreamReader
        {
            static /*0x0*/ bool[] newline;
            static /*0x8*/ char newlineChar;

            static /*0x719308c*/ UnexceptionalStreamReader();
            /*0x719313c*/ UnexceptionalStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x71931ac*/ int Peek();
            /*0x7193234*/ int Read();
            /*0x71932bc*/ int Read(char[] dest_buffer, int index, int count);
            /*0x7193544*/ bool CheckEOL(char current);
            /*0x71936dc*/ string ReadLine();
            /*0x7193764*/ string ReadToEnd();
        }

        class UnexceptionalStreamWriter : System.IO.StreamWriter
        {
            /*0x71937ec*/ UnexceptionalStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x7193864*/ void Flush();
            /*0x71938e8*/ void Write(char[] buffer, int index, int count);
            /*0x719396c*/ void Write(char value);
            /*0x71939f0*/ void Write(char[] value);
            /*0x7193a74*/ void Write(string value);
        }

        class CStreamReader : System.IO.StreamReader
        {
            /*0x60*/ System.TermInfoDriver driver;

            /*0x7193af8*/ CStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x7193c18*/ int Peek();
            /*0x7193ca0*/ int Read();
            /*0x7193d70*/ int Read(char[] dest, int index, int count);
            /*0x7193f10*/ string ReadLine();
            /*0x7193fa8*/ string ReadToEnd();
        }

        class CStreamWriter : System.IO.StreamWriter
        {
            /*0x70*/ System.TermInfoDriver driver;

            /*0x7194040*/ CStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, bool leaveOpen);
            /*0x7194174*/ void Write(char[] buffer, int index, int count);
            /*0x71944bc*/ void Write(char val);
            /*0x71946c8*/ void InternalWriteString(string val);
            /*0x7194644*/ void InternalWriteChar(char val);
            /*0x719474c*/ void InternalWriteChars(char[] buffer, int n);
            /*0x71947d8*/ void Write(char[] val);
            /*0x7194800*/ void Write(string val);
            /*0x71948cc*/ void WriteLine(string val);
        }

        class MonoLinqHelper
        {
            static /*0x38379c4*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
        }

        namespace Enumeration
        {
            struct FileSystemEntry
            {
                /*0x10*/ Interop.Sys.DirectoryEntry _directoryEntry;
                /*0x20*/ System.IO.FileStatus _status;
                /*0x98*/ System.Span<char> _pathBuffer;
                /*0xa8*/ System.ReadOnlySpan<char> _fullPath;
                /*0xb8*/ System.ReadOnlySpan<char> _fileName;
                /*0xc8*/ System.IO.Enumeration.FileSystemEntry.<_fileNameBuffer> _fileNameBuffer;
                /*0x2c8*/ System.IO.FileAttributes _initialAttributes;
                /*0x2d0*/ System.ReadOnlySpan<char> <Directory>k__BackingField;
                /*0x2e0*/ System.ReadOnlySpan<char> <RootDirectory>k__BackingField;
                /*0x2f0*/ System.ReadOnlySpan<char> <OriginalRootDirectory>k__BackingField;

                static /*0x7194914*/ System.IO.FileAttributes Initialize(ref System.IO.Enumeration.FileSystemEntry entry, Interop.Sys.DirectoryEntry directoryEntry, System.ReadOnlySpan<char> directory, System.ReadOnlySpan<char> rootDirectory, System.ReadOnlySpan<char> originalRootDirectory, System.Span<char> pathBuffer);
                /*0x7194b90*/ System.ReadOnlySpan<char> get_FullPath();
                /*0x7194cc0*/ System.ReadOnlySpan<char> get_FileName();
                /*0x7194d30*/ System.ReadOnlySpan<char> get_Directory();
                /*0x7194d40*/ void set_Directory(System.ReadOnlySpan<char> value);
                /*0x7194d4c*/ System.ReadOnlySpan<char> get_RootDirectory();
                /*0x7194d5c*/ void set_RootDirectory(System.ReadOnlySpan<char> value);
                /*0x7194d68*/ System.ReadOnlySpan<char> get_OriginalRootDirectory();
                /*0x7194d78*/ void set_OriginalRootDirectory(System.ReadOnlySpan<char> value);
                /*0x7194d84*/ System.IO.FileAttributes get_Attributes();
                /*0x7194dcc*/ bool get_IsDirectory();
                /*0x7194dd4*/ System.IO.FileSystemInfo ToFileSystemInfo();
                /*0x7194e44*/ string ToFullPath();
                /*0x7194e6c*/ string ToSpecifiedFullPath();

                struct <_fileNameBuffer>e__FixedBuffer
                {
                    /*0x10*/ char FixedElementField;
                }
            }

            class FileSystemEnumerable<TResult> : System.Collections.Generic.IEnumerable<TResult>, System.Collections.IEnumerable
            {
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.DelegateEnumerator<TResult> _enumerator;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> _transform;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ string _directory;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldIncludePredicate>k__BackingField;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldRecursePredicate>k__BackingField;

                /*0x3816920*/ FileSystemEnumerable(string directory, System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> transform, System.IO.EnumerationOptions options);
                /*0x38148bc*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldIncludePredicate();
                /*0x3816710*/ void set_ShouldIncludePredicate(System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> value);
                /*0x38148bc*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldRecursePredicate();
                /*0x38148bc*/ System.Collections.Generic.IEnumerator<TResult> GetEnumerator();
                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class FindPredicate<TResult> : System.MulticastDelegate
                {
                    FindPredicate(object object, nint method);
                    /*0x38141c4*/ bool Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class FindTransform<TResult> : System.MulticastDelegate
                {
                    FindTransform(object object, nint method);
                    /*0x3910ae8*/ TResult Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class DelegateEnumerator<TResult> : System.IO.Enumeration.FileSystemEnumerator<TResult>
                {
                    /*0x0*/ System.IO.Enumeration.FileSystemEnumerable<TResult> _enumerable;

                    /*0x3816710*/ DelegateEnumerator(System.IO.Enumeration.FileSystemEnumerable<TResult> enumerable);
                    /*0x3910ae8*/ TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x38141c4*/ bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x38141c4*/ bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerableFactory
            {
                static /*0x0*/ char[] s_unixEscapeChars;

                static /*0x719674c*/ FileSystemEnumerableFactory();
                static /*0x7194fe8*/ void NormalizeInputs(ref string directory, ref string expression, System.IO.EnumerationOptions options);
                static /*0x719582c*/ bool MatchesPattern(string expression, System.ReadOnlySpan<char> name, System.IO.EnumerationOptions options);
                static /*0x7195b64*/ System.Collections.Generic.IEnumerable<string> UserFiles(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x7195d60*/ System.Collections.Generic.IEnumerable<string> UserDirectories(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x7195f5c*/ System.Collections.Generic.IEnumerable<string> UserEntries(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x7196158*/ System.Collections.Generic.IEnumerable<System.IO.FileInfo> FileInfos(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x7196354*/ System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> DirectoryInfos(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x7196550*/ System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> FileSystemInfos(string directory, string expression, System.IO.EnumerationOptions options);

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x7195d58*/ <>c__DisplayClass3_0();
                    /*0x71967ec*/ bool <UserFiles>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c
                {
                    static /*0x0*/ System.IO.Enumeration.FileSystemEnumerableFactory.<> <>9;
                    static /*0x8*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__3_0;
                    static /*0x10*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__4_0;
                    static /*0x18*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__5_0;
                    static /*0x20*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<System.IO.FileInfo> <>9__6_0;
                    static /*0x28*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<System.IO.DirectoryInfo> <>9__7_0;
                    static /*0x30*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<System.IO.FileSystemInfo> <>9__8_0;

                    static /*0x719688c*/ <>c();
                    /*0x71968f4*/ <>c();
                    /*0x71968fc*/ string <UserFiles>b__3_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x7196904*/ string <UserDirectories>b__4_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x719690c*/ string <UserEntries>b__5_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x7196914*/ System.IO.FileInfo <FileInfos>b__6_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x7196974*/ System.IO.DirectoryInfo <DirectoryInfos>b__7_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x71969d4*/ System.IO.FileSystemInfo <FileSystemInfos>b__8_0(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass4_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x7195f54*/ <>c__DisplayClass4_0();
                    /*0x71969dc*/ bool <UserDirectories>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x7196150*/ <>c__DisplayClass5_0();
                    /*0x7196a7c*/ bool <UserEntries>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass6_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x719634c*/ <>c__DisplayClass6_0();
                    /*0x7196b00*/ bool <FileInfos>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass7_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x7196548*/ <>c__DisplayClass7_0();
                    /*0x7196ba0*/ bool <DirectoryInfos>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass8_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x7196744*/ <>c__DisplayClass8_0();
                    /*0x7196c40*/ bool <FileSystemInfos>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerator<TResult> : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Collections.Generic.IEnumerator<TResult>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x0*/ string _originalRootDirectory;
                /*0x0*/ string _rootDirectory;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ object _lock;
                /*0x0*/ string _currentPath;
                /*0x0*/ nint _directoryHandle;
                /*0x0*/ bool _lastEntryFound;
                /*0x0*/ System.Collections.Generic.Queue<string> _pending;
                /*0x0*/ Interop.Sys.DirectoryEntry _entry;
                /*0x0*/ TResult _current;
                /*0x0*/ char[] _pathBuffer;
                /*0x0*/ byte[] _entryBuffer;

                static /*0x3910ae8*/ bool IsDirectoryNotFound(Interop.ErrorInfo info);
                static /*0x3910ae8*/ bool IsAccessError(Interop.ErrorInfo info);
                /*0x3816810*/ FileSystemEnumerator(string directory, System.IO.EnumerationOptions options);
                /*0x3910ae8*/ bool InternalContinueOnError(Interop.ErrorInfo info, bool ignoreNotFound);
                /*0x3910ae8*/ nint CreateDirectoryHandle(string path, bool ignoreNotFound);
                /*0x38159dc*/ void CloseDirectoryHandle();
                /*0x3813ffc*/ bool MoveNext();
                /*0x38159dc*/ void FindNextEntry();
                /*0x3910ae8*/ void FindNextEntry(byte* entryBufferPtr, int bufferLength);
                /*0x3813ffc*/ bool DequeueNextDirectory();
                /*0x3815cc4*/ void InternalDispose(bool disposing);
                /*0x38141c4*/ bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                /*0x38141c4*/ bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                /*0x3910ae8*/ TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                void OnDirectoryFinished(System.ReadOnlySpan<char> directory);
                /*0x38140fc*/ bool ContinueOnError(int error);
                /*0x3910ae8*/ TResult get_Current();
                /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                /*0x38159dc*/ void DirectoryFinished();
                /*0x38159dc*/ void Reset();
                /*0x38159dc*/ void Dispose();
                /*0x3815cc4*/ void Dispose(bool disposing);
                /*0x38159dc*/ void Finalize();
            }

            class FileSystemName
            {
                static /*0x0*/ char[] s_wildcardChars;
                static /*0x8*/ char[] s_simpleWildcardChars;

                static /*0x71973f0*/ FileSystemName();
                static /*0x71954b4*/ string TranslateWin32Expression(string expression);
                static /*0x7195adc*/ bool MatchesWin32Expression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0x7195a54*/ bool MatchesSimpleExpression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0x7196cc4*/ bool MatchPattern(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase, bool useExtendedWildcards);
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 001D686DB504E20C792EAA07FE09224A45FF328E24A80072D04D16ABC5C2B5D2;
    static /*0x40*/ <PrivateImplementationDetails> 021022D5891F99B3B525763EB77BAEC69B107268F560721F5060FCDBD4D5AAE8;
    static /*0xea*/ <PrivateImplementationDetails> 042957A0DB5FF2D38A343AC5AE5F8635B88F10C32EB87A238B1DFB4756468476;
    static /*0xf6*/ <PrivateImplementationDetails> 07FA6E88C946B2528C09C16C2FB8E9CDA49AFFAFC601774C437FD9F2DF3ECE01;
    static /*0x12e*/ <PrivateImplementationDetails> 0C496C9AE05419BD25256D0EF4F31AFD291119F14B8BD683BF1774F91E08659D;
    static /*0x182*/ <PrivateImplementationDetails> 0E499E7743BCDFF289B85890E4DFDD635594DB16246DC094C3C19556B6C1262C;
    static /*0x1ca*/ <PrivateImplementationDetails> 0F9E3C7E66CDEF5C44FA29E65CA676C480F7A2A4A067F70107FDC292C68D38B0;
    static /*0x1d6*/ <PrivateImplementationDetails> 1199C3B39A2FA058EFF5B3829616AE81EE2B59A51D89C107A5FA4B6FEF95DD16;
    static /*0x222*/ <PrivateImplementationDetails> 125CF2084D7EEC18DC9795BE4BAA221655C0EABAB89E90A74FB0370378A60293;
    static /*0x4a2*/ <PrivateImplementationDetails> 12D518BA10F3DD1A331E65FBD4C330930C0A0BD9F50F37BE0BDF596E964B9A78;
    static /*0xcd6*/ <PrivateImplementationDetails> 195ABC1ABB69B6BD65F20ACAFA79EED2D330BF513E25C830F24B8A78D8703446;
    static /*0xd56*/ <PrivateImplementationDetails> 1A07BC77B9912D8D87E9B28E0167F53A9B09BB017B35A35F3913989C9440A60B;
    static /*0xd60*/ <PrivateImplementationDetails> 1B9CC34A0CF8DBCC350E200673FAC4124DDAD581F1FC2C16FF9A1C0154691687;
    static /*0x130a*/ <PrivateImplementationDetails> 1C4B3A80ED7AEC83916479BCE280E1258D5785D07F0EA22A5E27592ACCAE692B;
    static /*0x1472*/ <PrivateImplementationDetails> 1F38DEB3F70291588D06D3830D0D4241CE0570C9F4EE8B00F606C4753EB016E2;
    static /*0x149c*/ <PrivateImplementationDetails> 20CD2802EDA4ADAD1D749ABFE753256D8754EB845C973830A5556ECCAF1ADD6E;
    static /*0x14b8*/ <PrivateImplementationDetails> 21244F82B210125632917591768F6BF22EB6861F80C6C25A25BD26DFB580EA7B;
    static /*0x15b8*/ <PrivateImplementationDetails> 215E3E0B11A214B3198654E87B3D953AC8FB1ABC7045AF841A7C4892624BDE49;
    static /*0x15c2*/ <PrivateImplementationDetails> 2403FBEA85D0741C5727760E97EF16C9BF23294F21C0F1265A4BAF7F22202A64;
    static /*0x15ce*/ <PrivateImplementationDetails> 24CB9F17C8326D8BB8EC908716519DF7F265AE825F0DD13BB04E03A90B07D90E;
    static /*0x15de*/ <PrivateImplementationDetails> 25308BAB47481701F1E861B1EA4F2409E73ABB14E9579C26DF4ABE440A0DCF0A;
    static /*0x162a*/ <PrivateImplementationDetails> 25E3E48132FBDBE9B7C0C6C54D7C10A5DE12A105AA3E5DE2A0DC808BF245B7A5;
    static /*0x2266*/ <PrivateImplementationDetails> 2CCF4119215BDAD102DA7AD5B57E0E6CA19CC8FF5524856FC58907E824213E1F;
    static /*0x22ae*/ <PrivateImplementationDetails> 3444EB31231B2CCC1B05C7A44EBD1B2A009C1D9977A99B453F52E2F81DD6C32F;
    static /*0x22f6*/ <PrivateImplementationDetails> 3D95E4501B1964D7FCE16E3F5682A038752B462357D87343880B1E819F6163FE;
    static /*0x2306*/ <PrivateImplementationDetails> 3F62692E2AD5078353EC4471A13421A61EE493294CF59DC66626A6EF9CCCD2C4;
    static /*0x234e*/ <PrivateImplementationDetails> 42E1421FC2A5A6A33E964D7EB9603EB101818D858DDA09B2BC9B5A888C1C351C;
    static /*0x235a*/ <PrivateImplementationDetails> 44D066BAE9848B4A4B2C31F1854666526A32D0588635569423BDA1DA303C97DF;
    static /*0x2360*/ <PrivateImplementationDetails> 4623CA5867960AA898AA1F65E720CD5ECD3552542E0C6F6FB65B21D14DD1CBC2;
    static /*0x23d8*/ <PrivateImplementationDetails> 4800FBFC4566EB02D1727A4B1C949CCBC7535C216A0766564C199308631B5DD6;
    static /*0x2408*/ <PrivateImplementationDetails> 493402F3E4397B2945B16273E795816C0BDF80F76F42FCAA75F3DF2E215ABC1B;
    static /*0x3408*/ <PrivateImplementationDetails> 494C32E1A18F6E8AD8ED5FAB0A5AF07F801BE7AF3C936942B020918CE2953046;
    static /*0x34b6*/ <PrivateImplementationDetails> 4E0B9E024FA510B6F03C92D95BB204E78CDC6E3FD2EC8D35787B7BC76F0655A0;
    static /*0x3e04*/ <PrivateImplementationDetails> 508085E0DDEEA9CE48BFAE98CEC779F8D06301AE973555D37680D08190CAFA70;
    static /*0x3e30*/ <PrivateImplementationDetails> 510FDFA4743E58DD45DCDD7CB4F8509BF6294CC1D1D4958CA30A9E7604973006;
    static /*0x3e78*/ <PrivateImplementationDetails> 5292FD0A8E62FCCBE41F34EFE7575D097990A66FE23B3507971C5BF272A4362E;
    static /*0x3ea2*/ <PrivateImplementationDetails> 533B8C444F951E83EFF7305E3807B66CE0005DE0A2D0A44873C130895A3BE6AA;
    static /*0x3eb6*/ <PrivateImplementationDetails> 543172FF9822CE5240DF89FF3AD8C7FD9824F97D0EED9B1432E60345FBBDE9A9;
    static /*0x3eea*/ <PrivateImplementationDetails> 55D0BF716B334D123E0088CFB3F8E2FEA17AF5025BB527F95EEB09BA978EA329;
    static /*0x3fea*/ <PrivateImplementationDetails> 56073E3CC3FC817690CC306D0DB7EA63EBCB0801359567CA44CA3D3B9BF63854;
    static /*0x6a1a*/ <PrivateImplementationDetails> 5857EE4CE98BFABBD62B385C1098507DD0052FF3951043AAD6A1DABD495F18AA;
    static /*0x6a4e*/ <PrivateImplementationDetails> 5DF6E0E2761359D30A8275058E299FCC0381534545F55CF43E41983F5D4C9456;
    static /*0x6a6e*/ <PrivateImplementationDetails> 5EC4E50DA95A113769D73E5F7F8221A876185CEE6498ABB16FBB9F0563C15BBF;
    static /*0x6ab6*/ <PrivateImplementationDetails> 61D639BE11384EE21CDE2B40357F4F9D80A106C97C592D18A9F4CAA442CA5D31;
    static /*0x6b14*/ <PrivateImplementationDetails> 62E6F13B53D67FDD780E20D89A6E8EE503B197AC16AC3F1D2571C147FDD324C9;
    static /*0x6c14*/ <PrivateImplementationDetails> 64A0AD5A7BF0B569FABE66AF3006423DA81FF79CD282E8D781CD013B1FD7D5CE;
    static /*0x6c30*/ <PrivateImplementationDetails> 668BB69E184E0C32DC3BC488001C506C87EE5A95C7E7B6B87D24C3A6DC779956;
    static /*0x7430*/ <PrivateImplementationDetails> 6708B572BDBE5D5E79701DBB9744AF74B50FED7608218F2D7BF1B5D87E5A53ED;
    static /*0x7460*/ <PrivateImplementationDetails> 67856A16DB0550FDAB4D1A9B208B0C155C4679CA116BF867B74ED2A0AA4D2955;
    static /*0x76e8*/ <PrivateImplementationDetails> 6DC92D3617F0357376502FBA4CDD465B5423818DABE8B2CA1A06E1351F2F1C85;
    static /*0x7730*/ <PrivateImplementationDetails> 71F7F6B226CBC11C8B26D506869FAE022928427389882579DB316F36FF34A096;
    static /*0x7804*/ <PrivateImplementationDetails> 71F993C1E0FB950AAACBC0B9A2B0975B213EF14C8AA693F413336D46E9EAB8E9;
    static /*0x7834*/ <PrivateImplementationDetails> 73F5D95C401726B2C92EC96A696BA15F0E5A5C6DD9AC6BEB3736A81772A11531;
    static /*0x8034*/ <PrivateImplementationDetails> 74BCD6ED20AF2231F2BB1CDE814C5F4FF48E54BAC46029EEF90DDF4A208E2B20;
    static /*0x8154*/ <PrivateImplementationDetails> 74EF7306E7452D6859B6463CE496B8DF30925F69E1B2969E1F3F34BBC9C6AF04;
    static /*0x8254*/ <PrivateImplementationDetails> 78AD7906208AA1E531D0C1100062DE3D252210B1E4214061294A0BB7C94762B8;
    static /*0x82cc*/ <PrivateImplementationDetails> 7BEC6AD454781FDCD8D475B3418629CBABB3BF9CA66FA80009D608A1A60D0696;
    static /*0x888c*/ <PrivateImplementationDetails> 7F777906B0704EB248888E491577584D5BEBE71B375BD595A06444390B471915;
    static /*0x88d4*/ <PrivateImplementationDetails> 801494072CDD59E61F9AA9345A80D045378705DFDCE94902C22EAEAE049BE780;
    static /*0x89d4*/ <PrivateImplementationDetails> 805796429D6E812E01657F32029A8103B7C27B5203C2EFC9C0001E3EBAD7F24C;
    static /*0x89f0*/ long 819B40F8CF7DC49B4275955A17C10239F1BBBB3BF96E26E25ED844B96B645D7F;
    static /*0x89f8*/ <PrivateImplementationDetails> 8259E3EBA4D41CA02AE5322BBD280034A9C9860D9CD0D2038139FC9EBE6B6C77;
    static /*0x8a40*/ long 82B100804CE219CD73E155C7C6457FCF04EA539DE5B19F4736E800098714EB21;
    static /*0x8a48*/ <PrivateImplementationDetails> 861FD05B0EAD3D0AA9418B140CC37846BBC5F195214D90CEF42919D1E36EED10;
    static /*0x8a90*/ <PrivateImplementationDetails> 86BDA34D2165AC08F2DE4918B302E44205CDEA674FCA7F2C7F56D4F12D8B0C73;
    static /*0x8e78*/ long 8BFD94DEAAC0F168DC8B50A00AC120A113B550B68FEF344F807D503D1A6E5DED;
    static /*0x8e80*/ <PrivateImplementationDetails> 8C7DD76CF6FAC1893ED057E9FC91B995F9379B69E0796CAB7DE38ADAE3D2C568;
    static /*0x8eb0*/ <PrivateImplementationDetails> 8CCE27079B32C13BB310169A6AD26AE419CDC98B7E2EFD3CC9997257F4BC1DEF;
    static /*0x9531*/ <PrivateImplementationDetails> 9086502742CE7F0595B57A4E5B32901FF4CF97959B92F7E91A435E4765AC1115;
    static /*0xac71*/ <PrivateImplementationDetails> 93B42898102ACB2421875C45676880B8A07390D8DF0E1EE85C5D1AA26964B0C6;
    static /*0xadc1*/ <PrivateImplementationDetails> 93F28AF88A06482BE13F8D0354B6A7676DDAED573EA3938C50F6E53E6D6BB0B6;
    static /*0xadf5*/ <PrivateImplementationDetails> 95BDE712712F10D07813AE3DEEA40D1F38E3FCF1A92CC435F17A326CC22242EB;
    static /*0xaea3*/ <PrivateImplementationDetails> 964889A5283FD0A3DFC8AE256721E6F67B8212FD6841AB1C821DE3134DE79B07;
    static /*0xafa9*/ <PrivateImplementationDetails> 96E3FDE919EC36694EFBEC22FEF80F84EE640CC5E46CED07C3E65AC04607C7D6;
    static /*0xafb8*/ <PrivateImplementationDetails> 9960C7FC60CDD325C8A2A00995BE7064EAC3F6295C6A5C4E797D2281846131E4;
    static /*0xafdc*/ <PrivateImplementationDetails> 99E66DACA3EFF94776AF1258E0E5B2F4DF2900E4EA32351B0DF37A87F2426B1F;
    static /*0xb008*/ <PrivateImplementationDetails> A252A93D042C5E2453990C2829A425C6DD749CCDCDF13DB58C11BBC78E8D3CE9;
    static /*0xb050*/ <PrivateImplementationDetails> A2DFDF9C2CED8BB1C0B9B06064345ACC9C22DFE5FEC9976FF061F0994451519B;
    static /*0xb0c8*/ <PrivateImplementationDetails> A2EC7CB9B0FE89F9A9BEA547D773225AFE6E4535DF28325A0D6CD7A5E2D20376;
    static /*0xb114*/ <PrivateImplementationDetails> A30E1152CFB528AE968FAC58E83BBEB3611BFDE2E6CF60B4FA9535A7D0A9B8EA;
    static /*0xb15c*/ <PrivateImplementationDetails> A516EECB41051151F0183A8B0B6F6693C43F7D9E1815F85CAAAB18E00A5269A2;
    static /*0xb184*/ <PrivateImplementationDetails> AAF4528994DD7C464F43C131F6CD44DF41ACC18462C95877252FFC7EAC0164EF;
    static /*0xb1cc*/ <PrivateImplementationDetails> B215DD70A77190680641703C6DF73729B4583E285AF8B51ACF9086655FB2D0F3;
    static /*0xc1cc*/ <PrivateImplementationDetails> B21802DE889E5F4F5344C8E0D366F59B68F886F88EFE45EA5CE01534A3F5C0E5;
    static /*0xc200*/ <PrivateImplementationDetails> B55F94CD2F415D0279D7A1AF2265C4D9A90CE47F8C900D5D09AD088796210838;
    static /*0xca80*/ <PrivateImplementationDetails> BABD01C34E7E65E57E4C431281E782B4101CE0644A8090AD6E501F1C6CF2C9DF;
    static /*0xcaa4*/ <PrivateImplementationDetails> BB425A9B43E10C921902A25D07A4317DEFF9F606A788672E1B21633C143407F0;
    static /*0xcab4*/ <PrivateImplementationDetails> C250CAD28060A4EB63B4C4A643DDA196CCD35FD2FC67FB749ADF4BAC6D62E1A0;
    static /*0xcad8*/ <PrivateImplementationDetails> C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2;
    static /*0xcbd8*/ <PrivateImplementationDetails> C5733A1245383FBF067B4A9BDB41E3FB8E3A6BDEF37B3D5418F389422875783F;
    static /*0xcc20*/ <PrivateImplementationDetails> C8EC70AC5A448C3A45CF1DFCC1375BE4E80DC6793E97D5E89BD97A0DC232B2E3;
    static /*0xd020*/ <PrivateImplementationDetails> C95D810E738DB5F591EE691CE884EED2F110D9F82B1F7A8BE6ED257FDF4CDBEB;
    static /*0xd030*/ <PrivateImplementationDetails> C9830DF6956357ACE51CE1F82298578B36EB45A0CFDB8AEC5B9FDA7DB17E8063;
    static /*0xd0b2*/ <PrivateImplementationDetails> CAF8A46B3A07E26F84FE849B57A877051A0D06194B1C057985446B64BCC6E016;
    static /*0xd0fa*/ <PrivateImplementationDetails> CAFFFC9D15E4037EE8FBDB1A45DFE456F0936BDC7310F1882EAF14B706A76658;
    static /*0xd11e*/ <PrivateImplementationDetails> CE11D6DEAFFC6D6EF6030E30E7444C933E6261F32AA737064EF0446C219ECE22;
    static /*0xe11e*/ <PrivateImplementationDetails> D1A99909A2923269BB67E72C1AED693F74961BDA58360FCC133007740CEBF5F1;
    static /*0xe166*/ <PrivateImplementationDetails> D3B16F8D71CB719B941527D5A1ADA7ED83F4EB967FEE117DDA2FE4021E1D283F;
    static /*0xe16c*/ <PrivateImplementationDetails> D503954AE2C3616EA32CEB0D66F5B2E119D03CE722773E5D7E1A8BC8F1803631;
    static /*0xe1b4*/ <PrivateImplementationDetails> D6691EE5A533DE7E0859066942261B24D0C836D7EE016D2251377BFEE40FEA15;
    static /*0xe260*/ <PrivateImplementationDetails> D870074914025E855AA5985A2D6778F1E277036BF9C9F03DEC61F3C496FEC35C;
    static /*0xea60*/ <PrivateImplementationDetails> D896D464C3726A21162F271ACB711464AD07EA9C9CE78E0297FD0DE934471FA6;
    static /*0xea6c*/ <PrivateImplementationDetails> D8A29F3D197FBB54CF9F4B105AFBA6B1257ADF6449F0184F843380AAAA24639C;
    static /*0xeab4*/ <PrivateImplementationDetails> DCDCF594464B904F763D4CE53B1DBE08A47E551AE86FD5D61F63FD0C3313FDC3;
    static /*0xeafc*/ <PrivateImplementationDetails> DCE88EE5233B9D0FD0D7A6222C82BC3AEE83B15E9992F939B17AB40530DB555C;
    static /*0xf42a*/ <PrivateImplementationDetails> DD471F12FFA94CC557A02A91C2CBB95F551AB28C8BBF297B2F953B8886BCCF6D;
    static /*0xf4c2*/ <PrivateImplementationDetails> DF29A050CD2EBD9DFDC783DB1CC74D3D716DAEC1630A337EE31B9E2E03D34D2D;
    static /*0xf50a*/ <PrivateImplementationDetails> E148B2057CF0C1595155635E761FB66AAE634C40D8FABC4CE79A2DB8886525D4;
    static /*0x1050a*/ <PrivateImplementationDetails> E2C673A3A737B04369A63F1FB1A30F6E742B066E2CCCD9B1838793CBB5590598;
    static /*0x10530*/ <PrivateImplementationDetails> E32C465157D21F39B3DBF186A98FB02185C63B0260B47247A7A5FDF2B061EAA8;
    static /*0x1053c*/ <PrivateImplementationDetails> E5F4F6214036DF103321A8A0CE30C2EF935694B4199D52BC538E7EF3F045CB92;
    static /*0x10554*/ <PrivateImplementationDetails> E768EDCAE10BAB68BB5DF102FDBB8CF4F31B9D60159B44DA3F33ABC36388308B;
    static /*0x10594*/ <PrivateImplementationDetails> E8588351183F6F6A7DAD54DC28357628F3C4D4B358AB92A18AE7D08B0D9B0092;
    static /*0x1098e*/ <PrivateImplementationDetails> EBE07C3718876777F609CD22058F4C3A6CCCC695F5BDE90998DC1E12E0CBE63D;
    static /*0x1099a*/ <PrivateImplementationDetails> EE415D5C3ECC6C8C19F71BCD4E03847F5A15931374A7F5BF88C24B722F04B8FE;
    static /*0x109ba*/ <PrivateImplementationDetails> EF39C5A882F9477B2A250BA257247825CEB07FC53C3C984385F2C2E5F8222431;
    static /*0x10aba*/ <PrivateImplementationDetails> EF82B163CA8252A793A6E73F57775D843C9A21F65586926EB11893FA8BB603E9;
    static /*0x10aca*/ <PrivateImplementationDetails> F0CF66F9B123DCEBB39C38C5D8E4821D4E94DB593889C506BCA0827036F1B7EB;
    static /*0x10bba*/ <PrivateImplementationDetails> F1945CD6C19E56B3C1C78943EF5EC18116907A4CA1EFC40A57D48AB1DB7ADFC5;
    static /*0x10bbd*/ <PrivateImplementationDetails> F2830F044682E33B39018B5912634835B641562914E192CA66C654F5E4492FA8;
    static /*0x10cbd*/ <PrivateImplementationDetails> F4BD8144313C3B67E191C6F3CD8B00540FF1809837C5BCA5C2FDA0D518681563;
    static /*0x10d05*/ <PrivateImplementationDetails> F7D381AF73D85950E0B064CF1AA8F14938A1F38084B46CE36AAEFE81BEF739F3;
    static /*0x10dd9*/ <PrivateImplementationDetails> FADB218011E7702BB9575D0C32A685DA10B5C72EB809BD9A955DB1C76E4D8315;
    static /*0x10e0d*/ <PrivateImplementationDetails> FB2089AF82E09593374B65EC2440779FDCF5DD6DA07D26E57AF6790667B937CD;
    static /*0x112c5*/ <PrivateImplementationDetails> FD68700E95459C5E7A49C5830F8BD0A9BA4BD171252663D8066B09E7768C5C5D;
    static /*0x113b5*/ <PrivateImplementationDetails> FEC387BA57A54BB6066E4CA8A4F9C0FF9C36B9CBD6600C3683F6FB1BDB5077EB;

    static /*0x71974dc*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=3
    {
    }

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=10
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=15
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=28
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=38
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=42
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=52
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=84
    {
    }

    struct __StaticArrayInitTypeSize=94
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=130
    {
    }

    struct __StaticArrayInitTypeSize=152
    {
    }

    struct __StaticArrayInitTypeSize=170
    {
    }

    struct __StaticArrayInitTypeSize=172
    {
    }

    struct __StaticArrayInitTypeSize=174
    {
    }

    struct __StaticArrayInitTypeSize=212
    {
    }

    struct __StaticArrayInitTypeSize=240
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=262
    {
    }

    struct __StaticArrayInitTypeSize=288
    {
    }

    struct __StaticArrayInitTypeSize=336
    {
    }

    struct __StaticArrayInitTypeSize=360
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=648
    {
    }

    struct __StaticArrayInitTypeSize=998
    {
    }

    struct __StaticArrayInitTypeSize=1018
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1208
    {
    }

    struct __StaticArrayInitTypeSize=1450
    {
    }

    struct __StaticArrayInitTypeSize=1472
    {
    }

    struct __StaticArrayInitTypeSize=1665
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=2100
    {
    }

    struct __StaticArrayInitTypeSize=2176
    {
    }

    struct __StaticArrayInitTypeSize=2350
    {
    }

    struct __StaticArrayInitTypeSize=2382
    {
    }

    struct __StaticArrayInitTypeSize=3132
    {
    }

    struct __StaticArrayInitTypeSize=4096
    {
    }

    struct __StaticArrayInitTypeSize=5952
    {
    }

    struct __StaticArrayInitTypeSize=10800
    {
    }
}

namespace Unity
{
    class ThrowStub : System.ObjectDisposedException
    {
        static /*0x7197558*/ void ThrowNotSupportedException();
    }
}

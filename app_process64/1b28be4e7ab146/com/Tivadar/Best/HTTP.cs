class <Module>
{
}

namespace Microsoft
{
    namespace CodeAnalysis
    {
        class EmbeddedAttribute : System.Attribute
        {
            /*0x3d3b158*/ EmbeddedAttribute();
        }
    }
}

namespace System
{
    namespace Runtime
    {
        namespace CompilerServices
        {
            class NullableAttribute : System.Attribute
            {
                /*0x10*/ byte[] NullableFlags;

                /*0x3d3b160*/ NullableAttribute(byte[] );
            }
        }
    }
}

namespace Best
{
    namespace HTTP
    {
        enum HTTPMethods
        {
            Get = 0,
            Head = 1,
            Post = 2,
            Put = 3,
            Delete = 4,
            Patch = 5,
            Trace = 6,
            Merge = 7,
            Options = 8,
            Connect = 9,
            Query = 10,
        }

        class HTTPRange
        {
            /*0x10*/ long <FirstBytePos>k__BackingField;
            /*0x18*/ long <LastBytePos>k__BackingField;
            /*0x20*/ long <ContentLength>k__BackingField;
            /*0x28*/ bool <IsValid>k__BackingField;

            /*0x3d3b1d4*/ HTTPRange(int contentLength);
            /*0x3d3b204*/ HTTPRange(long firstBytePosition, long lastBytePosition, long contentLength);
            /*0x3d3b190*/ long get_FirstBytePos();
            /*0x3d3b198*/ void set_FirstBytePos(long value);
            /*0x3d3b1a0*/ long get_LastBytePos();
            /*0x3d3b1a8*/ void set_LastBytePos(long value);
            /*0x3d3b1b0*/ long get_ContentLength();
            /*0x3d3b1b8*/ void set_ContentLength(long value);
            /*0x3d3b1c0*/ bool get_IsValid();
            /*0x3d3b1c8*/ void set_IsValid(bool value);
            /*0x3d3b258*/ string ToString();
        }

        class OnRequestFinishedDelegate : System.MulticastDelegate
        {
            /*0x3d3b428*/ OnRequestFinishedDelegate(object object, nint method);
            /*0x3d3b4dc*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp);
        }

        class OnHeaderEnumerationDelegate : System.MulticastDelegate
        {
            /*0x3d3b4f0*/ OnHeaderEnumerationDelegate(object object, nint method);
            /*0x3d3b5a4*/ void Invoke(string header, System.Collections.Generic.List<string> values);
        }

        class HTTPRequest : System.Collections.IEnumerator
        {
            static /*0x0*/ string[] MethodNames;
            /*0x10*/ Best.HTTP.HTTPMethods <MethodType>k__BackingField;
            /*0x18*/ System.Uri <Uri>k__BackingField;
            /*0x20*/ Best.HTTP.HTTPResponse <Response>k__BackingField;
            /*0x28*/ Best.HTTP.Request.Settings.DownloadSettings DownloadSettings;
            /*0x30*/ Best.HTTP.Request.Settings.UploadSettings UploadSettings;
            /*0x38*/ Best.HTTP.Request.Settings.TimeoutSettings TimeoutSettings;
            /*0x40*/ Best.HTTP.Request.Settings.RetrySettings RetrySettings;
            /*0x48*/ Best.HTTP.Request.Settings.ProxySettings ProxySettings;
            /*0x50*/ Best.HTTP.Request.Settings.RedirectSettings <RedirectSettings>k__BackingField;
            /*0x58*/ Best.HTTP.OnRequestFinishedDelegate <Callback>k__BackingField;
            /*0x60*/ System.Threading.CancellationTokenSource <CancellationTokenSource>k__BackingField;
            /*0x68*/ System.Action<Best.HTTP.HTTPRequest> OnCancellationRequested;
            /*0x70*/ System.Exception <Exception>k__BackingField;
            /*0x78*/ object <Tag>k__BackingField;
            /*0x80*/ Best.HTTP.HTTPRequestStates _state;
            /*0x88*/ Best.HTTP.Request.Timings.TimingCollector <Timing>k__BackingField;
            /*0x90*/ Best.HTTP.Request.Authenticators.IAuthenticator Authenticator;
            /*0x98*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
            /*0xa0*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;

            static /*0x3d3de38*/ HTTPRequest();
            /*0x3d3bbe4*/ HTTPRequest(System.Uri uri, Best.HTTP.OnRequestFinishedDelegate callback);
            /*0x3d3bbf0*/ HTTPRequest(System.Uri uri, Best.HTTP.HTTPMethods methodType, Best.HTTP.OnRequestFinishedDelegate callback);
            /*0x3d3b5b8*/ Best.HTTP.HTTPMethods get_MethodType();
            /*0x3d3b5c0*/ void set_MethodType(Best.HTTP.HTTPMethods value);
            /*0x3d3b5c8*/ System.Uri get_Uri();
            /*0x3d3b5d0*/ void set_Uri(System.Uri value);
            /*0x3d3b5d8*/ System.Uri get_CurrentUri();
            /*0x3d3b608*/ Best.HTTP.HostSetting.HostKey get_CurrentHostKey();
            /*0x3d3b674*/ Best.HTTP.HTTPResponse get_Response();
            /*0x3d3b67c*/ void set_Response(Best.HTTP.HTTPResponse value);
            /*0x3d3b684*/ Best.HTTP.Request.Settings.RedirectSettings get_RedirectSettings();
            /*0x3d3b68c*/ Best.HTTP.OnRequestFinishedDelegate get_Callback();
            /*0x3d3b694*/ void set_Callback(Best.HTTP.OnRequestFinishedDelegate value);
            /*0x3d3b69c*/ bool get_IsCancellationRequested();
            /*0x3d3b6b4*/ System.Threading.CancellationTokenSource get_CancellationTokenSource();
            /*0x3d3b6bc*/ void set_CancellationTokenSource(System.Threading.CancellationTokenSource value);
            /*0x3d3b6c4*/ System.Exception get_Exception();
            /*0x3d3b6cc*/ void set_Exception(System.Exception value);
            /*0x3d3b6d4*/ object get_Tag();
            /*0x3d3b6dc*/ void set_Tag(object value);
            /*0x3d3b6e4*/ Best.HTTP.HTTPRequestStates get_State();
            /*0x3d3b6fc*/ void set_State(Best.HTTP.HTTPRequestStates value);
            /*0x3d3bbb4*/ Best.HTTP.Request.Timings.TimingCollector get_Timing();
            /*0x3d3bbbc*/ void set_Timing(Best.HTTP.Request.Timings.TimingCollector value);
            /*0x3d3bbc4*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
            /*0x3d3bbcc*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
            /*0x3d3bbd4*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
            /*0x3d3bbdc*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
            /*0x3d3c21c*/ void AddHeader(string name, string value);
            /*0x3d3c2a0*/ void SetHeader(string name, string value);
            /*0x3d3c324*/ bool RemoveHeader(string name);
            /*0x3d3c390*/ bool HasHeader(string name);
            /*0x3d3c3fc*/ string GetFirstHeaderValue(string name);
            /*0x3d3c468*/ void RemoveUnsafeHeaders();
            /*0x3d3c6b0*/ void Prepare();
            /*0x3d3c6d0*/ void EnumerateHeaders(Best.HTTP.OnHeaderEnumerationDelegate callback, bool callBeforeSendCallback);
            /*0x3d3d4c0*/ Best.HTTP.HTTPRequest Send();
            /*0x3d3d528*/ void Abort();
            /*0x3d3dac0*/ object get_Current();
            /*0x3d3dac8*/ bool MoveNext();
            /*0x3d3dae4*/ void Reset();
            /*0x3d3db1c*/ void Dispose();
            /*0x3d3dc38*/ string ToString();
        }

        enum HTTPRequestStates
        {
            Initial = 0,
            Queued = 1,
            Processing = 2,
            Finished = 3,
            Error = 4,
            Aborted = 5,
            ConnectionTimedOut = 6,
            TimedOut = 7,
        }

        class HTTPResponse : System.IDisposable
        {
            /*0x10*/ System.Version <HTTPVersion>k__BackingField;
            /*0x18*/ int <StatusCode>k__BackingField;
            /*0x20*/ string <Message>k__BackingField;
            /*0x28*/ bool <IsFromCache>k__BackingField;
            /*0x30*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;
            /*0x38*/ byte[] _data;
            /*0x40*/ bool <IsUpgraded>k__BackingField;
            /*0x48*/ string dataAsText;
            /*0x50*/ Best.HTTP.Response.DownloadContentStream <DownStream>k__BackingField;
            /*0x58*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
            /*0x60*/ Best.HTTP.HTTPRequest <Request>k__BackingField;
            /*0x68*/ Best.HTTP.Caching.HTTPCacheContentWriter _cacheWriter;
            /*0x70*/ bool _isDisposed;

            static /*0x3d3ec08*/ string ReadTo(System.IO.Stream stream, byte blocker);
            static /*0x3d3ef00*/ string ReadTo(System.IO.Stream stream, byte blocker1, byte blocker2);
            static /*0x3d3f210*/ string NoTrimReadTo(System.IO.Stream stream, byte blocker1, byte blocker2);
            /*0x3d3e68c*/ HTTPResponse(Best.HTTP.HTTPRequest request, bool isFromCache);
            /*0x3d3e1ac*/ System.Version get_HTTPVersion();
            /*0x3d3e1b4*/ void set_HTTPVersion(System.Version value);
            /*0x3d3e1bc*/ int get_StatusCode();
            /*0x3d3e1c4*/ void set_StatusCode(int value);
            /*0x3d3e1cc*/ string get_Message();
            /*0x3d3e1d4*/ void set_Message(string value);
            /*0x3d3e1dc*/ bool get_IsSuccess();
            /*0x3d3e1fc*/ bool get_IsFromCache();
            /*0x3d3e204*/ void set_IsFromCache(bool value);
            /*0x3d3e210*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
            /*0x3d3e218*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
            /*0x3d3e220*/ byte[] get_Data();
            /*0x3d3e580*/ bool get_IsUpgraded();
            /*0x3d3e588*/ void set_IsUpgraded(bool value);
            /*0x3d3e594*/ string get_DataAsText();
            /*0x3d3e65c*/ Best.HTTP.Response.DownloadContentStream get_DownStream();
            /*0x3d3e664*/ void set_DownStream(Best.HTTP.Response.DownloadContentStream value);
            /*0x3d3e66c*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
            /*0x3d3e674*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
            /*0x3d3e67c*/ Best.HTTP.HTTPRequest get_Request();
            /*0x3d3e684*/ void set_Request(Best.HTTP.HTTPRequest value);
            /*0x3d3e758*/ void AddHeader(string name, string value);
            /*0x3d3e7dc*/ System.Collections.Generic.List<string> GetHeaderValues(string name);
            /*0x3d3e848*/ string GetFirstHeaderValue(string name);
            /*0x3d3e8b4*/ bool HasHeaderWithValue(string headerName, string value);
            /*0x3d3e928*/ bool HasHeader(string headerName);
            /*0x3d3e994*/ Best.HTTP.HTTPRange GetRange();
            /*0x3d3f4a8*/ void BeginReceiveContent();
            /*0x3d3f5c4*/ void FeedDownloadedContentChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
            /*0x3d3f6f8*/ void FinishedContentReceiving();
            /*0x3d3f744*/ void CreateDownloadStream(Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailable);
            /*0x3d3e508*/ void CheckDisposed();
            /*0x3d3dbcc*/ void Dispose();
            /*0x3d3f98c*/ void Dispose(bool disposing);
        }

        namespace Profiler
        {
            namespace Network
            {
                class NetworkStats
                {
                    static /*0x0*/ Unity.Profiling.ProfilerCategory Category;
                    static /*0x2*/ Unity.Profiling.ProfilerCounterValue<long> BufferedToSend;
                    static /*0x3*/ Unity.Profiling.ProfilerCounterValue<long> SentSinceLastFrame;
                    static /*0x4*/ Unity.Profiling.ProfilerCounterValue<long> SentTotal;
                    static /*0x5*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedSinceLastFrame;
                    static /*0x6*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedAndUnprocessed;
                    static /*0x7*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedTotal;
                    static /*0x8*/ Unity.Profiling.ProfilerCounterValue<int> OpenConnectionsCounter;
                    static /*0x9*/ Unity.Profiling.ProfilerCounterValue<int> TotalConnectionsCounter;
                    static /*0xa*/ Unity.Profiling.ProfilerCounterValue<int> TotalDNSCacheHitsCounter;
                    static /*0xb*/ Unity.Profiling.ProfilerCounterValue<int> TotalDNSCacheMissCounter;

                    static /*0x3d3fa1c*/ NetworkStats();
                }

                class NetworkStatsCollector
                {
                    static /*0x0*/ long _totalNetworkBytesReceived;
                    static /*0x8*/ long _totalNetworkBytesSent;
                    static /*0x10*/ int _totalConnections;
                    static /*0x14*/ int _openConnections;
                    static /*0x18*/ int _bufferedToSend;
                    static /*0x1c*/ int _receivedAndUnprocessed;

                    static /*0x3d3fb98*/ long get_TotalNetworkBytesReceived();
                    static /*0x3d3fbe0*/ long get_TotalNetworkBytesSent();
                    static /*0x3d3fc28*/ int get_TotalConnections();
                    static /*0x3d3fc70*/ int get_OpenConnections();
                    static /*0x3d3fcb8*/ int get_BufferedToSend();
                    static /*0x3d3fd00*/ int get_ReceivedAndUnprocessed();
                    static /*0x3d3fd48*/ void IncrementCurrentConnections();
                    static /*0x3d3fda8*/ void DecrementCurrentConnections();
                    static /*0x3d3fdf4*/ void IncrementTotalNetworkBytesReceived(int amount);
                    static /*0x3d3fe44*/ void IncrementTotalNetworkBytesSent(int amount);
                    static /*0x3d3fe98*/ void IncrementBufferedToSend(int amount);
                    static /*0x3d3feec*/ void IncrementReceivedAndUnprocessed(int amount);
                }
            }

            namespace Memory
            {
                class MemoryStats
                {
                    static /*0x0*/ Unity.Profiling.ProfilerCategory Category;
                    static /*0x2*/ Unity.Profiling.ProfilerCounterValue<long> Borrowed;
                    static /*0x3*/ Unity.Profiling.ProfilerCounterValue<long> Pooled;
                    static /*0x4*/ Unity.Profiling.ProfilerCounterValue<long> CacheHits;
                    static /*0x5*/ Unity.Profiling.ProfilerCounterValue<long> ArrayAllocations;

                    static /*0x3d3ff40*/ MemoryStats();
                }
            }
        }

        namespace Response
        {
            class DownloadContentStream : System.IO.Stream
            {
                /*0x28*/ Best.HTTP.HTTPResponse <Response>k__BackingField;
                /*0x30*/ long _length;
                /*0x38*/ long <MaxBuffered>k__BackingField;
                /*0x40*/ bool _isDetached;
                /*0x48*/ Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable _bufferAvailableHandler;
                /*0x50*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segments;
                /*0x58*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment _currentSegment;
                /*0x68*/ bool _isCompleted;
                /*0x70*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x78*/ int _isFullCheckCount;
                /*0x7c*/ bool _isDisposed;

                /*0x3d40224*/ DownloadContentStream(Best.HTTP.HTTPResponse response, long maxBuffered, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                /*0x3d4002c*/ Best.HTTP.HTTPResponse get_Response();
                /*0x3d40034*/ void set_Response(Best.HTTP.HTTPResponse value);
                /*0x3d4003c*/ long get_Length();
                /*0x3d40048*/ long get_MaxBuffered();
                /*0x3d40050*/ void set_MaxBuffered(long value);
                /*0x3d40058*/ bool get_IsFull();
                /*0x3d40080*/ bool get_IsDetached();
                /*0x3d40088*/ void set_IsDetached(bool value);
                /*0x3d40218*/ void EmergencyIncreaseMaxBuffered();
                /*0x3d40350*/ void CompleteAdding(System.Exception error);
                /*0x3d40558*/ int Read(byte[] buffer, int offset, int count);
                /*0x3d409f0*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                /*0x3d40ae8*/ bool DoFullCheck(int limit);
                /*0x3d40b3c*/ void Dispose(bool disposing);
                /*0x3d40d04*/ bool get_CanRead();
                /*0x3d40d0c*/ bool get_CanSeek();
                /*0x3d40d14*/ bool get_CanWrite();
                /*0x3d40d1c*/ long get_Position();
                /*0x3d40d54*/ void set_Position(long value);
                /*0x3d40d8c*/ void Flush();
                /*0x3d40dc4*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x3d40dfc*/ void SetLength(long value);
                /*0x3d40e34*/ void Write(byte[] buffer, int offset, int count);
            }

            namespace Decompression
            {
                class BrotliDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferSegmentStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ System.IO.Compression.BrotliStream decompressorStream;
                    /*0x28*/ byte[] copyBuffer;
                    /*0x30*/ int _minLengthToDecompress;

                    static /*0x3d40e6c*/ bool IsSupported();
                    /*0x3d40e74*/ BrotliDecompressor(int minLengthToDecompress);
                    /*0x3d40e9c*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d411e0*/ void Dispose();
                }

                class DecompressorFactory
                {
                    static /*0x0*/ string AcceptEncoding;

                    static /*0x3d3ce5c*/ void SetupHeaders(Best.HTTP.HTTPRequest request);
                    static /*0x3d412b8*/ Best.HTTP.Response.Decompression.IDecompressor GetDecompressor(string encoding, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class DeflateDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    static /*0x0*/ bool IsSupported;
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ Best.HTTP.Shared.Compression.Zlib.DeflateStream decompressorStream;
                    /*0x28*/ int MinLengthToDecompress;

                    static /*0x3d41b84*/ DeflateDecompressor();
                    /*0x3d415c8*/ DeflateDecompressor(int minLengthToDecompress);
                    /*0x3d415f8*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d419bc*/ void Finalize();
                    /*0x3d41a50*/ void Dispose();
                }

                class GZipDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    static /*0x0*/ bool IsSupported;
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ Best.HTTP.Shared.Compression.Zlib.GZipStream decompressorStream;
                    /*0x28*/ int MinLengthToDecompress;

                    static /*0x3d4215c*/ GZipDecompressor();
                    /*0x3d41598*/ GZipDecompressor(int minLengthToDecompress);
                    /*0x3d41bd0*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d41f94*/ void Finalize();
                    /*0x3d42028*/ void Dispose();
                }

                interface IDecompressor : System.IDisposable
                {
                    System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                }
            }
        }

        namespace Request
        {
            namespace Upload
            {
                class UploadStreamBase : System.IO.Stream
                {
                    /*0x28*/ Best.HTTP.Hosts.Connections.IThreadSignaler <Signaler>k__BackingField;

                    /*0x3d421a8*/ void set_Signaler(Best.HTTP.Hosts.Connections.IThreadSignaler value);
                    /*0x3d421b0*/ long get_Length();
                    /*0x3816710*/ void BeforeSendHeaders(Best.HTTP.HTTPRequest request);
                    /*0x3d421e8*/ void BeforeSendBody(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.IThreadSignaler threadSignaler);
                }
            }

            namespace Timings
            {
                struct PartialEvent
                {
                    /*0x10*/ string EventName;
                    /*0x18*/ System.DateTime StartedAt;

                    /*0x3d421f4*/ PartialEvent(string eventName, System.DateTime startedAt);
                    /*0x3d4221c*/ bool IsSet();
                    /*0x3d422a4*/ string ToString();
                }

                class TimingCollector
                {
                    /*0x10*/ Best.HTTP.HTTPRequest <ParentRequest>k__BackingField;
                    /*0x18*/ System.DateTime <Created>k__BackingField;
                    /*0x20*/ System.DateTime <Finished>k__BackingField;
                    /*0x28*/ System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> <Events>k__BackingField;
                    /*0x30*/ Best.HTTP.Request.Timings.PartialEvent _partialEvent;

                    /*0x3d3c140*/ TimingCollector(Best.HTTP.HTTPRequest parentRequest);
                    /*0x3d4242c*/ Best.HTTP.HTTPRequest get_ParentRequest();
                    /*0x3d42434*/ System.DateTime get_Created();
                    /*0x3d4243c*/ void set_Created(System.DateTime value);
                    /*0x3d42444*/ System.DateTime get_Finished();
                    /*0x3d4244c*/ void set_Finished(System.DateTime value);
                    /*0x3d42454*/ System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> get_Events();
                    /*0x3d4245c*/ void set_Events(System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> value);
                    /*0x3d42464*/ void StartNext(string eventName);
                    /*0x3d425cc*/ void AddEvent(Best.HTTP.Request.Timings.TimingEventInfo timingEvent);
                    /*0x3d42b38*/ void AddEvent(string name, System.DateTime when, System.TimeSpan duration);
                    /*0x3d42ccc*/ string ToString();
                }

                struct TimingEvent : System.IEquatable<Best.HTTP.Request.Timings.TimingEvent>
                {
                    static /*0x0*/ Best.HTTP.Request.Timings.TimingEvent Empty;
                    /*0x10*/ string Name;
                    /*0x18*/ System.TimeSpan Duration;
                    /*0x20*/ System.DateTime Start;

                    static /*0x3d43398*/ TimingEvent();
                    /*0x3d42fd4*/ TimingEvent(string name, System.TimeSpan duration);
                    /*0x3d42ca0*/ TimingEvent(string name, System.DateTime when, System.TimeSpan duration);
                    /*0x3d43054*/ bool Equals(Best.HTTP.Request.Timings.TimingEvent other);
                    /*0x3d4312c*/ bool Equals(object obj);
                    /*0x3d431ec*/ int GetHashCode();
                    /*0x3d432b4*/ string ToString();
                }

                enum TimingEvents
                {
                    StartNext = 0,
                    Finish = 1,
                }

                struct TimingEventInfo
                {
                    /*0x10*/ Best.HTTP.HTTPRequest SourceRequest;
                    /*0x18*/ Best.HTTP.Request.Timings.TimingEvents Event;
                    /*0x20*/ string Name;
                    /*0x28*/ System.DateTime Time;

                    /*0x3d42530*/ TimingEventInfo(Best.HTTP.HTTPRequest parentRequest, Best.HTTP.Request.Timings.TimingEvents timingEvent, string eventName);
                    /*0x3d43448*/ string ToString();
                }
            }

            namespace Settings
            {
                class OnHeadersReceivedDelegate : System.MulticastDelegate
                {
                    /*0x3d43644*/ OnHeadersReceivedDelegate(object object, nint method);
                    /*0x3d436f8*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                }

                class OnProgressDelegate : System.MulticastDelegate
                {
                    /*0x3d4370c*/ OnProgressDelegate(object object, nint method);
                    /*0x3d437c0*/ void Invoke(Best.HTTP.HTTPRequest req, long progress, long length);
                }

                class OnDownloadStartedDelegate : System.MulticastDelegate
                {
                    /*0x3d437d4*/ OnDownloadStartedDelegate(object object, nint method);
                    /*0x3d43888*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Response.DownloadContentStream stream);
                }

                class OnCreateDownloadStreamDelegate : System.MulticastDelegate
                {
                    /*0x3d4389c*/ OnCreateDownloadStreamDelegate(object object, nint method);
                    /*0x3d43950*/ Best.HTTP.Response.DownloadContentStream Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                }

                class OnUpgradedDelegate : System.MulticastDelegate
                {
                    /*0x3d43964*/ OnUpgradedDelegate(object object, nint method);
                    /*0x3d43a18*/ bool Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                }

                class DownloadSettings
                {
                    /*0x10*/ long ContentStreamMaxBuffered;
                    /*0x18*/ bool <DisableCache>k__BackingField;
                    /*0x19*/ bool <CacheOnly>k__BackingField;
                    /*0x20*/ Best.HTTP.Request.Settings.OnHeadersReceivedDelegate OnHeadersReceived;
                    /*0x28*/ Best.HTTP.Request.Settings.OnCreateDownloadStreamDelegate DownloadStreamFactory;
                    /*0x30*/ Best.HTTP.Request.Settings.OnDownloadStartedDelegate OnDownloadStarted;
                    /*0x38*/ Best.HTTP.Request.Settings.OnProgressDelegate OnDownloadProgress;
                    /*0x40*/ Best.HTTP.Request.Settings.OnUpgradedDelegate OnUpgraded;

                    /*0x3d3bf14*/ DownloadSettings();
                    /*0x3d43a2c*/ bool get_DisableCache();
                    /*0x3d43a34*/ void set_DisableCache(bool value);
                    /*0x3d43a40*/ bool get_CacheOnly();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Request.Settings.DownloadSettings.<> <>9;
                        static /*0x8*/ Best.HTTP.Request.Settings.OnCreateDownloadStreamDelegate <>9__14_0;

                        static /*0x3d43a48*/ <>c();
                        /*0x3d43ab0*/ <>c();
                        /*0x3d43ab8*/ Best.HTTP.Response.DownloadContentStream <.ctor>b__14_0(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                    }
                }

                class ProxySettings
                {
                    /*0x10*/ Best.HTTP.Proxies.Proxy <Proxy>k__BackingField;

                    /*0x3d3c078*/ ProxySettings();
                    /*0x3d43b3c*/ bool HasProxyFor(System.Uri uri);
                    /*0x3d43ca8*/ Best.HTTP.Proxies.Proxy get_Proxy();
                    /*0x3d43cb0*/ void set_Proxy(Best.HTTP.Proxies.Proxy value);
                    /*0x3d43cb8*/ bool Handle407(Best.HTTP.HTTPRequest request);
                    /*0x3d43cd0*/ void AddToHash(System.Uri requestUri, ref UnityEngine.Hash128 hash);
                    /*0x3d43df4*/ string ToString();
                }

                class OnBeforeRedirectionDelegate : System.MulticastDelegate
                {
                    /*0x3d43e18*/ OnBeforeRedirectionDelegate(object object, nint method);
                    /*0x3d43ecc*/ bool Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Uri redirectUri);
                }

                class RedirectSettings
                {
                    /*0x10*/ bool <IsRedirected>k__BackingField;
                    /*0x18*/ System.Uri <RedirectUri>k__BackingField;
                    /*0x20*/ int <MaxRedirects>k__BackingField;
                    /*0x24*/ int <RedirectCount>k__BackingField;
                    /*0x28*/ Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate onBeforeRedirection;

                    /*0x3d3c020*/ RedirectSettings(int maxRedirects);
                    /*0x3d43ee0*/ bool get_IsRedirected();
                    /*0x3d43ee8*/ void set_IsRedirected(bool value);
                    /*0x3d43ef4*/ System.Uri get_RedirectUri();
                    /*0x3d43efc*/ void set_RedirectUri(System.Uri value);
                    /*0x3d43f04*/ int get_MaxRedirects();
                    /*0x3d43f0c*/ void set_MaxRedirects(int value);
                    /*0x3d43f14*/ int get_RedirectCount();
                    /*0x3d43f1c*/ void set_RedirectCount(int value);
                    /*0x3d43f24*/ void add_OnBeforeRedirection(Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate value);
                    /*0x3d43fb4*/ void remove_OnBeforeRedirection(Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate value);
                    /*0x3d44044*/ bool CallOnBeforeRedirection(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Uri redirectUri);
                }

                class RetrySettings
                {
                    /*0x10*/ int <Retries>k__BackingField;
                    /*0x14*/ int <MaxRetries>k__BackingField;

                    /*0x3d3c118*/ RetrySettings(int maxRetries);
                    /*0x3d44064*/ int get_Retries();
                    /*0x3d4406c*/ void set_Retries(int value);
                    /*0x3d44074*/ int get_MaxRetries();
                    /*0x3d4407c*/ void set_MaxRetries(int value);
                }

                class TimeoutSettings
                {
                    /*0x10*/ System.DateTime <QueuedAt>k__BackingField;
                    /*0x18*/ System.DateTime <ProcessingStarted>k__BackingField;
                    /*0x20*/ System.Nullable<System.TimeSpan> _connectTimeout;
                    /*0x30*/ System.Nullable<System.TimeSpan> _timeout;
                    /*0x40*/ Best.HTTP.HTTPRequest _request;

                    /*0x3d3c048*/ TimeoutSettings(Best.HTTP.HTTPRequest request);
                    /*0x3d44084*/ System.DateTime get_QueuedAt();
                    /*0x3d4408c*/ void set_QueuedAt(System.DateTime value);
                    /*0x3d44094*/ System.DateTime get_ProcessingStarted();
                    /*0x3d4409c*/ void set_ProcessingStarted(System.DateTime value);
                    /*0x3d440a4*/ System.TimeSpan get_ConnectTimeout();
                    /*0x3d4422c*/ System.TimeSpan get_Timeout();
                    /*0x3d44340*/ void set_Timeout(System.TimeSpan value);
                    /*0x3d3d9c8*/ bool IsConnectTimedOut(System.DateTime now);
                    /*0x3d3d8c0*/ bool IsTimedOut(System.DateTime now);
                    /*0x3d443b0*/ void SetProcessing(System.DateTime now);
                }

                class OnHeadersSentDelegate : System.MulticastDelegate
                {
                    /*0x3d4441c*/ OnHeadersSentDelegate(object object, nint method);
                    /*0x3d444cc*/ void Invoke(Best.HTTP.HTTPRequest req);
                }

                class UploadSettings : System.IDisposable
                {
                    /*0x10*/ int UploadChunkSize;
                    /*0x18*/ System.IO.Stream UploadStream;
                    /*0x20*/ bool DisposeStream;
                    /*0x28*/ Best.HTTP.Request.Settings.OnProgressDelegate OnUploadProgress;
                    /*0x30*/ Best.HTTP.Request.Settings.OnHeadersSentDelegate _onHeadersSent;
                    /*0x38*/ bool isDisposed;

                    /*0x3d3c008*/ UploadSettings();
                    /*0x3d444e0*/ void SetupRequest(Best.HTTP.HTTPRequest request, bool dispatchHeadersSentCallback);
                    /*0x3d44718*/ void call_onBeforeHeaderSend(Best.HTTP.HTTPRequest request);
                    /*0x3d448ac*/ void Dispose(bool disposing);
                    /*0x3d3db60*/ void Dispose();

                    class <>c__DisplayClass9_0
                    {
                        /*0x10*/ Best.HTTP.Request.Settings.UploadSettings <>4__this;
                        /*0x18*/ Best.HTTP.HTTPRequest request;

                        /*0x3d44710*/ <>c__DisplayClass9_0();
                        /*0x3d44904*/ void <SetupRequest>b__0();
                    }
                }
            }

            namespace Authenticators
            {
                interface IAuthenticator
                {
                    /*0x3816710*/ void SetupRequest(Best.HTTP.HTTPRequest request);
                    /*0x3814200*/ bool HandleChallange(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp);
                }
            }

            namespace Authentication
            {
                enum AuthenticationTypes
                {
                    Unknown = 0,
                    Basic = 1,
                    Digest = 2,
                }

                class Credentials
                {
                    /*0x10*/ Best.HTTP.Request.Authentication.AuthenticationTypes <Type>k__BackingField;
                    /*0x18*/ string <UserName>k__BackingField;
                    /*0x20*/ string <Password>k__BackingField;

                    /*0x3d44924*/ Best.HTTP.Request.Authentication.AuthenticationTypes get_Type();
                    /*0x3d4492c*/ string get_UserName();
                    /*0x3d44934*/ string get_Password();
                }

                class Digest
                {
                    /*0x10*/ System.Uri <Uri>k__BackingField;
                    /*0x18*/ Best.HTTP.Request.Authentication.AuthenticationTypes <Type>k__BackingField;
                    /*0x20*/ string <Realm>k__BackingField;
                    /*0x28*/ bool <Stale>k__BackingField;
                    /*0x30*/ string <Nonce>k__BackingField;
                    /*0x38*/ string <Opaque>k__BackingField;
                    /*0x40*/ string <Algorithm>k__BackingField;
                    /*0x48*/ System.Collections.Generic.List<string> <ProtectedUris>k__BackingField;
                    /*0x50*/ string <QualityOfProtections>k__BackingField;
                    /*0x58*/ int <NonceCount>k__BackingField;
                    /*0x60*/ string <HA1Sess>k__BackingField;

                    /*0x3d449f0*/ Digest(System.Uri uri);
                    /*0x3d4493c*/ System.Uri get_Uri();
                    /*0x3d44944*/ void set_Uri(System.Uri value);
                    /*0x3d4494c*/ Best.HTTP.Request.Authentication.AuthenticationTypes get_Type();
                    /*0x3d44954*/ void set_Type(Best.HTTP.Request.Authentication.AuthenticationTypes value);
                    /*0x3d4495c*/ string get_Realm();
                    /*0x3d44964*/ void set_Realm(string value);
                    /*0x3d4496c*/ bool get_Stale();
                    /*0x3d44974*/ void set_Stale(bool value);
                    /*0x3d44980*/ string get_Nonce();
                    /*0x3d44988*/ void set_Nonce(string value);
                    /*0x3d44990*/ string get_Opaque();
                    /*0x3d44998*/ void set_Opaque(string value);
                    /*0x3d449a0*/ string get_Algorithm();
                    /*0x3d449a8*/ void set_Algorithm(string value);
                    /*0x3d449b0*/ System.Collections.Generic.List<string> get_ProtectedUris();
                    /*0x3d449b8*/ void set_ProtectedUris(System.Collections.Generic.List<string> value);
                    /*0x3d449c0*/ string get_QualityOfProtections();
                    /*0x3d449c8*/ void set_QualityOfProtections(string value);
                    /*0x3d449d0*/ int get_NonceCount();
                    /*0x3d449d8*/ void set_NonceCount(int value);
                    /*0x3d449e0*/ string get_HA1Sess();
                    /*0x3d449e8*/ void set_HA1Sess(string value);
                    /*0x3d44a64*/ void ParseChallange(string header);
                    /*0x3d451a0*/ string GenerateResponseHeader(Best.HTTP.Request.Authentication.Credentials credentials, bool isProxy, Best.HTTP.HTTPMethods methodType, System.Uri currentUri);
                    /*0x3d4600c*/ bool IsUriProtected(System.Uri uri);
                }

                class DigestStore
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, Best.HTTP.Request.Authentication.Digest> Digests;
                    static /*0x8*/ string[] SupportedAlgorithms;

                    static /*0x3d465cc*/ DigestStore();
                    static /*0x3d4611c*/ Best.HTTP.Request.Authentication.Digest Get(System.Uri uri);
                    static /*0x3d461e8*/ Best.HTTP.Request.Authentication.Digest GetOrCreate(System.Uri uri);
                    static /*0x3d462b8*/ void Clear();
                    static /*0x3d46330*/ string FindBest(System.Collections.Generic.List<string> authHeaders);

                    class <>c__DisplayClass6_0
                    {
                        /*0x10*/ int i;

                        /*0x3d465c4*/ <>c__DisplayClass6_0();
                        /*0x3d46708*/ bool <FindBest>b__0(string header);
                    }
                }

                class WWWAuthenticateHeaderParser : Best.HTTP.Shared.Extensions.KeyValuePairList
                {
                    /*0x3d45168*/ WWWAuthenticateHeaderParser(string headerValue);
                    /*0x3d467a0*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> ParseQuotedHeader(string str);

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Request.Authentication.WWWAuthenticateHeaderParser.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__1_0;

                        static /*0x3d46a5c*/ <>c();
                        /*0x3d46ac4*/ <>c();
                        /*0x3d46acc*/ bool <ParseQuotedHeader>b__1_0(char ch);
                    }
                }
            }
        }

        namespace Proxies
        {
            class HTTPProxy : Best.HTTP.Proxies.Proxy
            {
                /*0x28*/ bool <IsTransparent>k__BackingField;
                /*0x29*/ bool <SendWholeUri>k__BackingField;
                /*0x2a*/ bool <NonTransparentForHTTPS>k__BackingField;

                /*0x3d46b74*/ HTTPProxy(System.Uri address);
                /*0x3d46b9c*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent);
                /*0x3d46bcc*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent, bool sendWholeUri);
                /*0x3d46c08*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent, bool sendWholeUri, bool nonTransparentForHTTPS);
                /*0x3d46b38*/ bool get_IsTransparent();
                /*0x3d46b40*/ void set_IsTransparent(bool value);
                /*0x3d46b4c*/ bool get_SendWholeUri();
                /*0x3d46b54*/ void set_SendWholeUri(bool value);
                /*0x3d46b60*/ bool get_NonTransparentForHTTPS();
                /*0x3d46b68*/ void set_NonTransparentForHTTPS(bool value);
                /*0x3d46c94*/ string GetRequestPath(System.Uri uri);
                /*0x3d46d14*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x3d46f74*/ void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x3d47cf0*/ void OnProxyResponse(Best.HTTP.Proxies.ProxyConnectParameters connectParameters, Best.HTTP.Proxies.HTTPProxyResponse resp, System.Exception error);
            }

            class HTTPProxyResponse : Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer
            {
                /*0x10*/ int <VersionMajor>k__BackingField;
                /*0x14*/ int <VersionMinor>k__BackingField;
                /*0x18*/ int <StatusCode>k__BackingField;
                /*0x20*/ string <Message>k__BackingField;
                /*0x28*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;
                /*0x30*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                /*0x38*/ Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState _readState;
                /*0x3c*/ Best.HTTP.Proxies.HTTPProxyResponse.ContentDeliveryMode _deliveryMode;
                /*0x40*/ Best.HTTP.Proxies.ProxyConnectParameters _parameters;
                /*0x80*/ long _expectedLength;
                /*0x88*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream _output;
                /*0x90*/ int _chunkLength;
                /*0x94*/ Best.HTTP.Proxies.HTTPProxyResponse.ReadChunkedStates _readChunkedState;
                /*0x98*/ long _downloaded;
                /*0xa0*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters, Best.HTTP.Proxies.HTTPProxyResponse, System.Exception> OnFinished;
                /*0xa8*/ string <DataAsText>k__BackingField;

                /*0x3d47bc4*/ HTTPProxyResponse(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x3d48380*/ Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState get_ReadState();
                /*0x3d48388*/ void set_ReadState(Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState value);
                /*0x3d48514*/ int get_VersionMajor();
                /*0x3d4851c*/ void set_VersionMajor(int value);
                /*0x3d48524*/ int get_VersionMinor();
                /*0x3d4852c*/ void set_VersionMinor(int value);
                /*0x3d48534*/ int get_StatusCode();
                /*0x3d4853c*/ void set_StatusCode(int value);
                /*0x3d48544*/ string get_Message();
                /*0x3d4854c*/ void set_Message(string value);
                /*0x3d48554*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
                /*0x3d4855c*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
                /*0x3d48564*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                /*0x3d4856c*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                /*0x3d48574*/ string get_DataAsText();
                /*0x3d4857c*/ void set_DataAsText(string value);
                /*0x3d48584*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                /*0x3d4858c*/ void UnsetBinding();
                /*0x3d48598*/ void OnConnectionClosed();
                /*0x3d487d4*/ void OnError(System.Exception ex);
                /*0x3d48768*/ void CallFinished(System.Exception error);
                /*0x3d4880c*/ void OnContent();
                /*0x3d482e8*/ System.Collections.Generic.List<string> GetHeaderValues(string name);
                /*0x3d49444*/ bool HasHeaderWithValue(string headerName, string value);
                /*0x3d49c90*/ void AddHeader(string name, string value);
                /*0x3d49088*/ void VerboseLogging(string v);
                /*0x3d4900c*/ bool IsNewLinePresent(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d4918c*/ void ProcessReadHeaders(Best.HTTP.Shared.Streams.PeekableStream peekable, Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState targetState);
                /*0x3d4975c*/ void ProcessReadRawUnknownLength(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d49ee8*/ bool TryReadChunkLength(Best.HTTP.Shared.Streams.PeekableStream peekable, ref int result);
                /*0x3d49958*/ void ProcessReadChunked(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d4950c*/ void ProcessReadRaw(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d49eb0*/ void ProcessChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment chunk);
                /*0x3d486a0*/ void PostProcessContent();
                /*0x3d49f6c*/ string ToString();

                enum ContentDeliveryMode
                {
                    Raw = 0,
                    RawUnknownLength = 1,
                    Chunked = 2,
                }

                enum PeekableReadState
                {
                    StatusLine = 0,
                    Headers = 1,
                    PrepareForContent = 2,
                    ContentSetup = 3,
                    RawContent = 4,
                    Content = 5,
                    Finished = 6,
                }

                enum ReadChunkedStates
                {
                    ReadChunkLength = 0,
                    ReadChunk = 1,
                    ReadTrailingCRLF = 2,
                    ReadTrailingHeaders = 3,
                }
            }

            struct ProxyConnectParameters
            {
                /*0x10*/ Best.HTTP.Proxies.Proxy proxy;
                /*0x18*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream stream;
                /*0x20*/ System.Uri uri;
                /*0x28*/ System.Threading.CancellationToken token;
                /*0x30*/ int AuthenticationAttempts;
                /*0x34*/ bool createTunel;
                /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext context;
                /*0x40*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters> OnSuccess;
                /*0x48*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters, System.Exception, bool> OnError;
            }

            class Proxy
            {
                /*0x10*/ System.Uri <Address>k__BackingField;
                /*0x18*/ Best.HTTP.Request.Authentication.Credentials <Credentials>k__BackingField;
                /*0x20*/ System.Collections.Generic.List<string> <Exceptions>k__BackingField;

                /*0x3d46c50*/ Proxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials);
                /*0x3d49fec*/ System.Uri get_Address();
                /*0x3d49ff4*/ void set_Address(System.Uri value);
                /*0x3d49ffc*/ Best.HTTP.Request.Authentication.Credentials get_Credentials();
                /*0x3d4a004*/ void set_Credentials(Best.HTTP.Request.Authentication.Credentials value);
                /*0x3d4a00c*/ System.Collections.Generic.List<string> get_Exceptions();
                /*0x3d4a014*/ void set_Exceptions(System.Collections.Generic.List<string> value);
                void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x3814a3c*/ string GetRequestPath(System.Uri uri);
                /*0x38141c4*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x3d43b4c*/ bool UseProxyForAddress(System.Uri address);
            }

            class SOCKSProxy : Best.HTTP.Proxies.Proxy
            {
                /*0x3d4a01c*/ SOCKSProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials);
                /*0x3d4a020*/ string GetRequestPath(System.Uri uri);
                /*0x3d4a078*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x3d4a080*/ void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
            }

            namespace Implementations
            {
                enum SOCKSVersions
                {
                    Unknown = 0,
                    V5 = 5,
                }

                enum SOCKSMethods
                {
                    NoAuthenticationRequired = 0,
                    GSSAPI = 1,
                    UsernameAndPassword = 2,
                    NoAcceptableMethods = 255,
                }

                enum SOCKSReplies
                {
                    Succeeded = 0,
                    GeneralSOCKSServerFailure = 1,
                    ConnectionNotAllowedByRuleset = 2,
                    NetworkUnreachable = 3,
                    HostUnreachable = 4,
                    ConnectionRefused = 5,
                    TTLExpired = 6,
                    CommandNotSupported = 7,
                    AddressTypeNotSupported = 8,
                }

                class SOCKSV5Negotiator : Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer
                {
                    /*0x10*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                    /*0x18*/ Best.HTTP.Proxies.Implementations.SOCKSV5Negotiator.NegotiationStates _state;
                    /*0x20*/ Best.HTTP.Proxies.SOCKSProxy _proxy;
                    /*0x28*/ Best.HTTP.Proxies.ProxyConnectParameters _parameters;

                    /*0x3d4a0f8*/ SOCKSV5Negotiator(Best.HTTP.Proxies.SOCKSProxy proxy, Best.HTTP.Proxies.ProxyConnectParameters parameters);
                    /*0x3d4a17c*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                    /*0x3d4a184*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                    /*0x3d4a638*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                    /*0x3d4a640*/ void UnsetBinding();
                    /*0x3d4a64c*/ void OnConnectionClosed();
                    /*0x3d4a758*/ void OnError(System.Exception ex);
                    /*0x3d4a18c*/ void SendHandshake();
                    /*0x3d4a75c*/ void SendConnect();
                    /*0x3d4ad58*/ void OnContent();
                    /*0x3d4a6c8*/ void CallOnError(System.Exception ex);
                    /*0x3d4c1ac*/ void CallOnSuccess();
                    /*0x3d4ac30*/ void WriteString(byte[] buffer, ref int count, string str);
                    /*0x3d4abe0*/ void WriteBytes(byte[] buffer, ref int count, byte[] bytes);

                    enum NegotiationStates
                    {
                        MethodSelection = 0,
                        ExpectAuthenticationResponse = 1,
                        ConnectResponse = 2,
                    }
                }
            }

            namespace Autodetect
            {
                class AndroidProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    static /*0x3910ae8*/ T Call<T>(string methodName, object[] args);
                    /*0x3d4c810*/ AndroidProxyDetector();
                    /*0x3d4c230*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x3d4c73c*/ string FindFor(string uriStr);
                }

                class EnvironmentProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x10*/ Best.HTTP.Proxies.Proxy _cachedProxy;

                    /*0x3d4d034*/ EnvironmentProxyDetector();
                    /*0x3d4c818*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x3d4cff4*/ string GetEnv(string key);
                }

                class FrameworkProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x3d4d588*/ FrameworkProxyDetector();
                    /*0x3d4d03c*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x3d4d3ec*/ Best.HTTP.Proxies.Proxy SetExceptionList(Best.HTTP.Proxies.Proxy proxy, System.Net.WebProxy detectedProxy);
                }

                class ProgrammaticallyAddedProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x3d4d618*/ ProgrammaticallyAddedProxyDetector();
                    /*0x3d4d590*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                }

                interface IProxyDetector
                {
                    /*0x3814a3c*/ Best.HTTP.Proxies.Proxy GetProxy(Best.HTTP.HTTPRequest request);
                }

                enum ProxyDetectionMode
                {
                    Continuous = 0,
                    CacheFirstFound = 1,
                }

                class ProxyDetector
                {
                    /*0x10*/ Best.HTTP.Proxies.Autodetect.IProxyDetector[] _proxyDetectors;
                    /*0x18*/ Best.HTTP.Proxies.Autodetect.ProxyDetectionMode _detectionMode;
                    /*0x1c*/ bool _attached;

                    static /*0x3d4d620*/ Best.HTTP.Proxies.Autodetect.IProxyDetector[] GetDefaultDetectors();
                    /*0x3d4d7f8*/ ProxyDetector();
                    /*0x3d4d818*/ ProxyDetector(Best.HTTP.Proxies.Autodetect.ProxyDetectionMode detectionMode, Best.HTTP.Proxies.Autodetect.IProxyDetector[] proxyDetectors);
                    /*0x3d4d87c*/ void Reattach();
                    /*0x3d4dae8*/ void Detach();
                    /*0x3d4dd50*/ void OnRequestEvent(Best.HTTP.Hosts.Connections.RequestEventInfo event);
                }
            }
        }

        namespace HostSetting
        {
            struct HostKey
            {
                /*0x10*/ System.Uri Uri;
                /*0x18*/ Best.HTTP.Request.Settings.ProxySettings Proxy;
                /*0x20*/ UnityEngine.Hash128 Key;

                static /*0x3d4e884*/ UnityEngine.Hash128 CalculateHash(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                static /*0x3d43d1c*/ void Append(System.Uri uri, ref UnityEngine.Hash128 hash);
                static /*0x3d3b630*/ Best.HTTP.HostSetting.HostKey From(Best.HTTP.HTTPRequest request);
                static /*0x3d4eb98*/ Best.HTTP.HostSetting.HostKey From(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                /*0x3d4e83c*/ HostKey(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                /*0x3d441b8*/ string get_Host();
                /*0x3d4e8cc*/ bool Equals(object obj);
                /*0x3d4e968*/ bool Equals(Best.HTTP.HostSetting.HostKey hostKey);
                /*0x3d4e99c*/ int GetHashCode();
                /*0x3d4e9c4*/ string ToString();
            }

            class HostKeyEqualityComparer : System.Collections.Generic.IEqualityComparer<Best.HTTP.HostSetting.HostKey>
            {
                /*0x3d4ec08*/ HostKeyEqualityComparer();
                /*0x3d4ebb0*/ bool Equals(Best.HTTP.HostSetting.HostKey x, Best.HTTP.HostSetting.HostKey y);
                /*0x3d4ebe0*/ int GetHashCode(Best.HTTP.HostSetting.HostKey obj);
            }

            class HostManager
            {
                static /*0x0*/ System.Collections.Generic.Dictionary<Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> hosts;

                static /*0x3d4f684*/ HostManager();
                static /*0x3d4ec10*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.HTTPRequest request);
                static /*0x3d4ef9c*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.Hosts.Connections.ConnectionBase connection);
                static /*0x3d4ec94*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.HostSetting.HostKey key);
                static /*0x3d4f2c0*/ void Shutdown();
                static /*0x3d4f524*/ void Clear();
            }

            enum HostProtocolSupport
            {
                Unknown = 0,
                HTTP1 = 1,
                HTTP2 = 2,
                File = 3,
            }

            class HostVariant
            {
                /*0x10*/ Best.HTTP.HostSetting.HostKey <Host>k__BackingField;
                /*0x30*/ Best.HTTP.HostSetting.HostProtocolSupport <ProtocolSupport>k__BackingField;
                /*0x38*/ System.DateTime <LastProtocolSupportUpdate>k__BackingField;
                /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                /*0x48*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.ConnectionBase> Connections;
                /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.HTTPRequest> Queue;
                /*0x58*/ Best.HTTP.Hosts.Settings.HostVariantSettings _settings;
                /*0x60*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> availableConnections;

                /*0x3d4f044*/ HostVariant(Best.HTTP.HostSetting.HostKey host);
                /*0x3d4f748*/ Best.HTTP.HostSetting.HostKey get_Host();
                /*0x3d4f754*/ void set_Host(Best.HTTP.HostSetting.HostKey value);
                /*0x3d4f76c*/ Best.HTTP.HostSetting.HostProtocolSupport get_ProtocolSupport();
                /*0x3d4f774*/ void set_ProtocolSupport(Best.HTTP.HostSetting.HostProtocolSupport value);
                /*0x3d4f77c*/ void set_LastProtocolSupportUpdate(System.DateTime value);
                /*0x3d4f784*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                /*0x3d4f78c*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                /*0x3d4f7dc*/ void AddProtocol(Best.HTTP.HostSetting.HostProtocolSupport protocolSupport);
                /*0x3d4f9c0*/ Best.HTTP.HostSetting.HostVariant Send(Best.HTTP.HTTPRequest request);
                /*0x3d4fbe0*/ Best.HTTP.HostSetting.HostVariant TryToSendQueuedRequests();
                /*0x3d50354*/ System.ValueTuple<int, int, int> QueryAnyAvailableOrNew(ref System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> connectionCollector);
                /*0x3d50664*/ Best.HTTP.Hosts.Connections.ConnectionBase CreateNew();
                /*0x3d50974*/ void OnConnectionStartedProcessingRequest(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.HTTPRequest request);
                /*0x3d50978*/ Best.HTTP.HostSetting.HostVariant RecycleConnection(Best.HTTP.Hosts.Connections.ConnectionBase conn);
                /*0x3d50a94*/ bool RemoveConnectionImpl(Best.HTTP.Hosts.Connections.ConnectionBase conn, Best.HTTP.Hosts.Connections.HTTPConnectionStates setState);
                /*0x3d50e1c*/ Best.HTTP.HostSetting.HostVariant RemoveConnection(Best.HTTP.Hosts.Connections.ConnectionBase conn, Best.HTTP.Hosts.Connections.HTTPConnectionStates setState);
                /*0x3d50e3c*/ Best.HTTP.Hosts.Connections.ConnectionBase Find(System.Predicate<Best.HTTP.Hosts.Connections.ConnectionBase> match);
                /*0x3d50e94*/ bool CloseConnectionAfterInactivity(System.DateTime now, object context);
                /*0x3d51348*/ void Shutdown();
                /*0x3d51554*/ string ToString();

                class <>c
                {
                    static /*0x0*/ Best.HTTP.HostSetting.HostVariant.<> <>9;
                    static /*0x8*/ System.Comparison<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> <>9__23_0;
                    static /*0x10*/ System.Comparison<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> <>9__23_1;

                    static /*0x3d517b4*/ <>c();
                    /*0x3d5181c*/ <>c();
                    /*0x3d51824*/ int <TryToSendQueuedRequests>b__23_0(System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> a, System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> b);
                    /*0x3d51864*/ int <TryToSendQueuedRequests>b__23_1(System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> a, System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> b);
                }
            }
        }

        namespace Hosts
        {
            namespace Settings
            {
                class AsteriskStringComparer : System.Collections.Generic.IComparer<string>
                {
                    static /*0x0*/ Best.HTTP.Hosts.Settings.AsteriskStringComparer Instance;

                    static /*0x3d51958*/ AsteriskStringComparer();
                    /*0x3d51950*/ AsteriskStringComparer();
                    /*0x3d518a4*/ int Compare(string x, string y);
                }

                class TlsClientFactoryDelegate : System.MulticastDelegate
                {
                    /*0x3d519c0*/ TlsClientFactoryDelegate(object object, nint method);
                    /*0x3d51acc*/ Best.HTTP.Shared.TLS.AbstractTls13Client Invoke(System.Uri uri, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class HTTRequestSettings
                {
                    /*0x10*/ System.TimeSpan ConnectTimeout;
                    /*0x18*/ System.TimeSpan RequestTimeout;

                    /*0x3d51ae0*/ HTTRequestSettings();
                }

                class HTTP1ConnectionSettings
                {
                    /*0x10*/ bool TryToReuseConnections;
                    /*0x18*/ System.TimeSpan MaxConnectionIdleTime;
                    /*0x20*/ bool ForceUseThreadPool;

                    /*0x3d51b58*/ HTTP1ConnectionSettings();
                }

                class ClientCertificateSelector : System.MulticastDelegate
                {
                    /*0x3d51bc8*/ ClientCertificateSelector(object object, nint method);
                    /*0x3d51c7c*/ System.Security.Cryptography.X509Certificates.X509Certificate Invoke(string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
                }

                enum TLSHandlers
                {
                    BouncyCastle = 0,
                    Framework = 1,
                }

                class BouncyCastleSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.TlsClientFactoryDelegate TlsClientFactory;

                    static /*0x3d51c90*/ Best.HTTP.Shared.TLS.AbstractTls13Client DefaultTlsClientFactory(System.Uri uri, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d51e64*/ BouncyCastleSettings();
                }

                class FrameworkTLSSettings
                {
                    static /*0x0*/ System.Func<string, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> DefaultCertificationValidator;
                    /*0x10*/ System.Security.Authentication.SslProtocols TlsVersions;
                    /*0x14*/ bool CheckCertificateRevocation;
                    /*0x18*/ System.Func<string, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> CertificationValidator;
                    /*0x20*/ Best.HTTP.Hosts.Settings.ClientCertificateSelector ClientCertificationProvider;

                    static /*0x3d51eec*/ FrameworkTLSSettings();
                    /*0x3d51e6c*/ FrameworkTLSSettings();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Settings.FrameworkTLSSettings.<> <>9;

                        static /*0x3d51fbc*/ <>c();
                        /*0x3d52024*/ <>c();
                        /*0x3d5202c*/ bool <.cctor>b__6_0(string host, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
                    }
                }

                class TLSSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.TLSHandlers TLSHandler;
                    /*0x18*/ Best.HTTP.Hosts.Settings.BouncyCastleSettings BouncyCastleSettings;
                    /*0x20*/ Best.HTTP.Hosts.Settings.FrameworkTLSSettings FrameworkTLSSettings;

                    /*0x3d52034*/ TLSSettings();
                }

                class HostVariantSettings
                {
                    /*0x10*/ int MaxConnectionPerVariant;
                    /*0x14*/ float MaxAssignedRequestsFactor;
                    /*0x18*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> VariantFactory;
                    /*0x20*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostVariant, Best.HTTP.Hosts.Connections.ConnectionBase> ConnectionFactory;

                    /*0x3d520dc*/ HostVariantSettings();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Settings.HostVariantSettings.<> <>9;
                        static /*0x8*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> <>9__4_0;

                        static /*0x3d521dc*/ <>c();
                        /*0x3d52244*/ <>c();
                        /*0x3d5224c*/ Best.HTTP.HostSetting.HostVariant <.ctor>b__4_0(Best.HTTP.Hosts.Settings.HostVariantSettings settings, Best.HTTP.HostSetting.HostKey key);
                    }
                }

                class LowLevelConnectionSettings
                {
                    /*0x10*/ uint TCPWriteBufferSize;
                    /*0x14*/ uint ReadBufferSize;

                    /*0x3d522b4*/ LowLevelConnectionSettings();
                }

                class HostSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.LowLevelConnectionSettings LowLevelConnectionSettings;
                    /*0x18*/ Best.HTTP.Hosts.Settings.HTTRequestSettings RequestSettings;
                    /*0x20*/ Best.HTTP.Hosts.Settings.HTTP1ConnectionSettings HTTP1ConnectionSettings;
                    /*0x28*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRingmasterSettings TCPRingmasterSettings;
                    /*0x30*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings HTTP2ConnectionSettings;
                    /*0x38*/ Best.HTTP.Hosts.Settings.TLSSettings TLSSettings;
                    /*0x40*/ Best.HTTP.Hosts.Settings.HostVariantSettings HostVariantSettings;

                    /*0x3d522c4*/ HostSettings();
                }

                class HostSettingsManager
                {
                    /*0x10*/ System.Collections.Generic.SortedList<string, Best.HTTP.Hosts.Settings.Node> _rootNodes;
                    /*0x18*/ System.Collections.Generic.List<string> _segments;
                    /*0x20*/ System.Collections.Concurrent.ConcurrentDictionary<string, Best.HTTP.Hosts.Settings.HostSettings> _cache;

                    /*0x3d52490*/ HostSettingsManager();
                    /*0x3d52648*/ Best.HTTP.Hosts.Settings.HostSettings Add(string hostname, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x3d4f794*/ Best.HTTP.Hosts.Settings.HostSettings Get(Best.HTTP.HostSetting.HostVariant variant, bool fallbackToWildcard);
                    /*0x3d4f014*/ Best.HTTP.Hosts.Settings.HostSettings Get(Best.HTTP.HostSetting.HostKey hostKey, bool fallbackToWildcard);
                    /*0x3d52c90*/ Best.HTTP.Hosts.Settings.HostSettings Get(System.Uri uri, bool fallbackToWildcard);
                    /*0x3d3d074*/ Best.HTTP.Hosts.Settings.HostSettings Get(string hostname, bool fallbackToWildcard);

                    class <>c__DisplayClass12_0
                    {
                        /*0x10*/ Best.HTTP.Hosts.Settings.HostSettings foundSettings;

                        /*0x3d52ccc*/ <>c__DisplayClass12_0();
                        /*0x3d52de4*/ Best.HTTP.Hosts.Settings.HostSettings <Get>b__0(string key, Best.HTTP.Hosts.Settings.HostSettings settings);
                    }
                }

                class Node
                {
                    /*0x10*/ string key;
                    /*0x18*/ System.Collections.Generic.SortedList<string, Best.HTTP.Hosts.Settings.Node> childNodes;
                    /*0x20*/ Best.HTTP.Hosts.Settings.HostSettings hostSettings;

                    /*0x3d52dec*/ Node(string key);
                    /*0x3d52a5c*/ Node(string key, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x3d52aa0*/ void Add(System.Collections.Generic.List<string> segments, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x3d52cd4*/ Best.HTTP.Hosts.Settings.HostSettings Find(System.Collections.Generic.List<string> segments);
                }
            }

            namespace Connections
            {
                class ConnectionBase : System.IDisposable
                {
                    /*0x10*/ Best.HTTP.HostSetting.HostKey <HostKey>k__BackingField;
                    /*0x30*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates <State>k__BackingField;
                    /*0x38*/ Best.HTTP.HTTPRequest <CurrentRequest>k__BackingField;
                    /*0x40*/ System.TimeSpan <KeepAliveTime>k__BackingField;
                    /*0x48*/ int <MaxAssignedRequests>k__BackingField;
                    /*0x50*/ System.Uri <LastProcessedUri>k__BackingField;
                    /*0x58*/ System.DateTime <LastProcessTime>k__BackingField;
                    /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                    /*0x68*/ bool IsThreaded;
                    /*0x6c*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;

                    /*0x3d52ecc*/ ConnectionBase(Best.HTTP.HostSetting.HostKey hostKey);
                    /*0x3d52ef4*/ ConnectionBase(Best.HTTP.HostSetting.HostKey hostKey, bool threaded);
                    /*0x3d52e1c*/ Best.HTTP.HostSetting.HostKey get_HostKey();
                    /*0x3d52e28*/ void set_HostKey(Best.HTTP.HostSetting.HostKey value);
                    /*0x3d52e40*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates get_State();
                    /*0x3d52e48*/ void set_State(Best.HTTP.Hosts.Connections.HTTPConnectionStates value);
                    /*0x3d52e50*/ Best.HTTP.HTTPRequest get_CurrentRequest();
                    /*0x3d52e58*/ void set_CurrentRequest(Best.HTTP.HTTPRequest value);
                    /*0x3d52e60*/ System.TimeSpan get_KeepAliveTime();
                    /*0x3d52e68*/ void set_KeepAliveTime(System.TimeSpan value);
                    /*0x3d52e70*/ bool get_CanProcessMultiple();
                    /*0x3d52e78*/ int get_AssignedRequests();
                    /*0x3d52e94*/ int get_MaxAssignedRequests();
                    /*0x3d52e9c*/ System.Uri get_LastProcessedUri();
                    /*0x3d52ea4*/ void set_LastProcessedUri(System.Uri value);
                    /*0x3d52eac*/ System.DateTime get_LastProcessTime();
                    /*0x3d52eb4*/ void set_LastProcessTime(System.DateTime value);
                    /*0x3d52ebc*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x3d52ec4*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x3d530d4*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x3d5322c*/ void ThreadFunc();
                    /*0x3d53230*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                    /*0x3d53238*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                    /*0x3d53240*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                    /*0x3d50dac*/ void Dispose();
                    /*0x3d53248*/ void Dispose(bool disposing);
                    /*0x3d5324c*/ void Finalize();
                    /*0x3d532f0*/ string ToString();
                }

                enum ConnectionEvents
                {
                    StateChange = 0,
                    ProtocolSupport = 1,
                }

                struct ConnectionEventInfo
                {
                    /*0x10*/ Best.HTTP.Hosts.Connections.ConnectionBase Source;
                    /*0x18*/ Best.HTTP.Hosts.Connections.ConnectionEvents Event;
                    /*0x1c*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates State;
                    /*0x20*/ Best.HTTP.HostSetting.HostProtocolSupport ProtocolSupport;
                    /*0x28*/ Best.HTTP.HTTPRequest Request;
                    /*0x30*/ Best.HTTP.HTTPRequestStates RequestState;

                    /*0x3d53374*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.Hosts.Connections.HTTPConnectionStates newState);
                    /*0x3d533b4*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.HostSetting.HostProtocolSupport protocolSupport);
                    /*0x3d533fc*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.HTTPRequest request);
                    /*0x3d53444*/ string ToString();
                }

                class ConnectionEventHelper
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.ConnectionEventInfo> connectionEventQueue;
                    static /*0x8*/ System.Action<Best.HTTP.Hosts.Connections.ConnectionEventInfo> OnEvent;

                    static /*0x3d54254*/ ConnectionEventHelper();
                    static /*0x3d53704*/ void EnqueueConnectionEvent(Best.HTTP.Hosts.Connections.ConnectionEventInfo event);
                    static /*0x3d5393c*/ void Clear();
                    static /*0x3d539b4*/ void ProcessQueue();
                    static /*0x3d53e40*/ void HandleConnectionStateChange(Best.HTTP.Hosts.Connections.ConnectionEventInfo event);
                }

                class KeepAliveHeader
                {
                    /*0x10*/ System.TimeSpan <TimeOut>k__BackingField;
                    /*0x18*/ int <MaxRequests>k__BackingField;

                    /*0x3d544fc*/ KeepAliveHeader();
                    /*0x3d542ec*/ System.TimeSpan get_TimeOut();
                    /*0x3d542f4*/ void set_TimeOut(System.TimeSpan value);
                    /*0x3d542fc*/ int get_MaxRequests();
                    /*0x3d54304*/ void set_MaxRequests(int value);
                    /*0x3d5430c*/ void Parse(System.Collections.Generic.List<string> headerValues);
                }

                class ConnectionHelper
                {
                    static /*0x3d54504*/ void ResendRequestAndCloseConnection(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.HTTPRequest request);
                    static /*0x3d545c4*/ void EnqueueEvents(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.Hosts.Connections.HTTPConnectionStates connectionState, Best.HTTP.HTTPRequest request, Best.HTTP.HTTPRequestStates requestState, System.Exception error);
                    static /*0x3d54700*/ System.Exception HandleResponse(Best.HTTP.HTTPRequest request, ref bool resendRequest, ref Best.HTTP.Hosts.Connections.HTTPConnectionStates proposedConnectionState, ref Best.HTTP.Hosts.Connections.KeepAliveHeader keepAlive, Best.HTTP.Shared.Logger.LoggingContext loggingContext);
                    static /*0x3d553cc*/ System.Uri GetRedirectUri(Best.HTTP.HTTPRequest request, string location);
                }

                enum HTTPConnectionStates
                {
                    Initial = 0,
                    Processing = 1,
                    WaitForProtocolShutdown = 2,
                    Recycle = 3,
                    Free = 4,
                    Closed = 5,
                    ClosedResendRequest = 6,
                }

                class HTTPOverTCPConnection : Best.HTTP.Hosts.Connections.ConnectionBase, Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer
                {
                    /*0x70*/ Best.HTTP.Hosts.Connections.IHTTPRequestHandler requestHandler;
                    /*0x78*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator _negotiator;

                    /*0x3d55d84*/ HTTPOverTCPConnection(Best.HTTP.HostSetting.HostKey hostKey);
                    /*0x3d558c8*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_TopStream();
                    /*0x3d558e4*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer get_Streamer();
                    /*0x3d55900*/ int get_AssignedRequests();
                    /*0x3d559b4*/ int get_MaxAssignedRequests();
                    /*0x3d55a64*/ System.TimeSpan get_KeepAliveTime();
                    /*0x3d55cc8*/ void set_KeepAliveTime(System.TimeSpan value);
                    /*0x3d55cd0*/ bool get_CanProcessMultiple();
                    /*0x3d55dac*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x3d56614*/ System.Collections.Generic.List<string> Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.GetSupportedProtocolNames(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator);
                    /*0x3d568fc*/ bool Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.MustStopAdvancingToNextStep(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps finishedStep, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps nextStep, System.Exception error);
                    /*0x3d56b2c*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.EvaluateProxyNegotiationFailure(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error, bool resendForAuthentication);
                    /*0x3d56f10*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.OnNegotiationFailed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error);
                    /*0x3d57230*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.OnNegotiationFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string negotiatedProtocol);
                    /*0x3d57ae0*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                    /*0x3d56f18*/ bool PreprocessRequestState(System.Exception error);
                    /*0x3d563fc*/ bool TrySetErrorState(Best.HTTP.HTTPRequest request, System.Exception ex);
                    /*0x3d57274*/ void StartWithNegotiatedProtocol(string negotiatedProtocol, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream);
                    /*0x3d581ac*/ void ThreadFunc();
                    /*0x3d58250*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                    /*0x3d58358*/ void Dispose(bool disposing);
                }

                enum SupportedProtocols
                {
                    Unknown = 0,
                    HTTP = 1,
                    WebSocket = 2,
                    ServerSentEvents = 3,
                }

                class HTTPProtocolFactory
                {
                    static /*0x3d567c0*/ Best.HTTP.Hosts.Connections.SupportedProtocols GetProtocolFromUri(System.Uri uri);
                    static /*0x3d562c8*/ bool IsSecureProtocol(System.Uri uri);
                }

                interface IDownloadContentBufferAvailable
                {
                    /*0x3816710*/ void BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                }

                interface IHTTPRequestHandler : System.IDisposable
                {
                    /*0x38148bc*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                    /*0x3813ffc*/ bool get_CanProcessMultiple();
                    /*0x3814574*/ int get_AssignedRequests();
                    /*0x3814574*/ int get_MaxAssignedRequests();
                    /*0x38148bc*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x3816710*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x38159dc*/ void RunHandler();
                    /*0x3815ed0*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                }

                interface IThreadSignaler
                {
                    /*0x38159dc*/ void SignalThread();
                }

                enum RequestEvents
                {
                    Upgraded = 0,
                    DownloadProgress = 1,
                    UploadProgress = 2,
                    StreamingData = 3,
                    DownloadStarted = 4,
                    StateChange = 5,
                    SetState = 6,
                    QueuedResend = 7,
                    Resend = 8,
                    Headers = 9,
                    Timing = 10,
                }

                struct RequestEventInfo
                {
                    /*0x10*/ Best.HTTP.HTTPRequest SourceRequest;
                    /*0x18*/ Best.HTTP.Hosts.Connections.RequestEvents Event;
                    /*0x1c*/ Best.HTTP.HTTPRequestStates State;
                    /*0x20*/ System.Exception Error;
                    /*0x28*/ long Progress;
                    /*0x30*/ long ProgressLength;
                    /*0x38*/ byte[] Data;
                    /*0x40*/ int DataLength;
                    /*0x48*/ Best.HTTP.Request.Timings.TimingEventInfo timingEvent;
                    /*0x68*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Headers;

                    /*0x3d56c64*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.RequestEvents event);
                    /*0x3d584e8*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.HTTPRequestStates newState, System.Exception error);
                    /*0x3d58558*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.RequestEvents event, long progress, long progressLength);
                    /*0x3d585d0*/ RequestEventInfo(Best.HTTP.HTTPRequest request, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                    /*0x3d58640*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Request.Timings.TimingEventInfo timingEvent);
                    /*0x3d586b8*/ string ToString();
                }

                class ProgressFlattener
                {
                    /*0x10*/ Best.HTTP.Hosts.Connections.ProgressFlattener.FlattenedProgress[] progresses;
                    /*0x18*/ bool hasProgress;

                    /*0x3d58ec0*/ ProgressFlattener();
                    /*0x3d58ad8*/ void InsertOrUpdate(Best.HTTP.Hosts.Connections.RequestEventInfo info, Best.HTTP.Request.Settings.OnProgressDelegate onProgress);
                    /*0x3d58ca4*/ void DispatchProgressCallbacks();

                    struct FlattenedProgress
                    {
                        /*0x10*/ Best.HTTP.HTTPRequest request;
                        /*0x18*/ Best.HTTP.Request.Settings.OnProgressDelegate onProgress;
                        /*0x20*/ long progress;
                        /*0x28*/ long length;
                    }
                }

                class RequestEventHelper
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.RequestEventInfo> requestEventQueue;
                    static /*0x8*/ System.Action<Best.HTTP.Hosts.Connections.RequestEventInfo> OnEvent;
                    static /*0x10*/ Best.HTTP.Hosts.Connections.ProgressFlattener downloadProgress;
                    static /*0x18*/ Best.HTTP.Hosts.Connections.ProgressFlattener uploadProgress;
                    static /*0x20*/ string[] RequestStateNames;

                    static /*0x3d5b5cc*/ RequestEventHelper();
                    static /*0x3d56ccc*/ void EnqueueRequestEvent(Best.HTTP.Hosts.Connections.RequestEventInfo ev);
                    static /*0x3d58ec8*/ void Clear();
                    static /*0x3d58f40*/ void ProcessQueue();
                    static /*0x3d5af5c*/ bool AbortRequestWhenTimedOut(System.DateTime now, object context);
                    static /*0x3d5a3f8*/ void HandleQueued(Best.HTTP.HTTPRequest source);
                    static /*0x3d5a5a4*/ void HandleRequestStateChange(ref Best.HTTP.Hosts.Connections.RequestEventInfo event);
                    static /*0x3d5b3f0*/ bool OnDelayedDisposeTimer(System.DateTime time, object request);
                }

                namespace HTTP2
                {
                    class BufferHelper
                    {
                        static /*0x3d5b840*/ void SetUInt16(byte[] buffer, int offset, ushort value);
                        static /*0x3d5b888*/ void SetUInt24(byte[] buffer, int offset, uint value);
                        static /*0x3d5b8ec*/ void SetUInt31(byte[] buffer, int offset, uint value);
                        static /*0x3d5b96c*/ void SetUInt32(byte[] buffer, int offset, uint value);
                        static /*0x3d5b9ec*/ void SetLong(byte[] buffer, int offset, long value);
                        static /*0x3d5badc*/ byte SetBit(byte value, byte bitIdx, bool bitValue);
                        static /*0x3d5bb6c*/ byte SetBit(byte value, byte bitIdx, byte bitValue);
                        static /*0x3d5bb94*/ byte ReadBit(byte value, byte bitIdx);
                        static /*0x3d5bbb0*/ byte ReadValue(byte value, byte fromBit, byte toBit);
                        static /*0x3d5bc14*/ ushort ReadUInt16(byte[] buffer, int offset);
                        static /*0x3d5bc54*/ uint ReadUInt24(byte[] buffer, int offset);
                        static /*0x3d5bcac*/ uint ReadUInt31(byte[] buffer, int offset);
                        static /*0x3d5bd20*/ uint ReadUInt31(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                        static /*0x3d5bd94*/ uint ReadUInt32(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                        static /*0x3d5be08*/ long ReadLong(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                    }

                    interface IFrameDataView : System.IDisposable
                    {
                        /*0x38146fc*/ long get_Length();
                        /*0x38146fc*/ long get_Position();
                        void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3814574*/ int ReadByte();
                        int Read(byte[] buffer, int offset, int count);
                    }

                    class CommonFrameView : Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView, System.IDisposable
                    {
                        /*0x10*/ long <Length>k__BackingField;
                        /*0x18*/ long <Position>k__BackingField;
                        /*0x20*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> frames;
                        /*0x28*/ int currentFrameIdx;
                        /*0x30*/ byte[] data;
                        /*0x38*/ int dataOffset;
                        /*0x3c*/ int maxOffset;

                        /*0x3d5c3fc*/ CommonFrameView();
                        /*0x3d5bed8*/ long get_Length();
                        /*0x3d5bee0*/ void set_Length(long value);
                        /*0x3d5bee8*/ long get_Position();
                        /*0x3d5bef0*/ void set_Position(long value);
                        void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        long CalculateDataLengthForFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d5bef8*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3d5c030*/ int ReadByte();
                        /*0x3813ffc*/ bool AdvanceFrame();
                        /*0x3d5c0a8*/ void Dispose();
                        /*0x3d5c1cc*/ string ToString();
                    }

                    class HeaderFrameView : Best.HTTP.Hosts.Connections.HTTP2.CommonFrameView
                    {
                        /*0x3d5c9e0*/ HeaderFrameView();
                        /*0x3d5c48c*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d5c63c*/ long CalculateDataLengthForFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d5c8b0*/ bool AdvanceFrame();
                    }

                    class FramesAsStreamView : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView view;

                        /*0x3d5cb78*/ FramesAsStreamView(Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView view);
                        /*0x3d5c9e4*/ bool get_CanRead();
                        /*0x3d5c9ec*/ bool get_CanSeek();
                        /*0x3d5c9f4*/ bool get_CanWrite();
                        /*0x3d5c9fc*/ long get_Length();
                        /*0x3d5ca9c*/ long get_Position();
                        /*0x3d5cb40*/ void set_Position(long value);
                        /*0x3d5cbec*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d5ccc0*/ int ReadByte();
                        /*0x3d5cd64*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3d5ce28*/ void Close();
                        /*0x3d5ced4*/ void Flush();
                        /*0x3d5ced8*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3d5cf10*/ void SetLength(long value);
                        /*0x3d5cf48*/ void Write(byte[] buffer, int offset, int count);
                        /*0x3d5cf80*/ string ToString();
                    }

                    class HeaderTable
                    {
                        static /*0x0*/ string[] StaticTableValues;
                        static /*0x8*/ string[] StaticTable;
                        /*0x10*/ uint <DynamicTableSize>k__BackingField;
                        /*0x14*/ uint _maxDynamicTableSize;
                        /*0x18*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> DynamicTable;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry settingsRegistry;

                        static /*0x3d5db18*/ HeaderTable();
                        /*0x3d5d0b4*/ HeaderTable(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry);
                        /*0x3d5cfa0*/ uint get_DynamicTableSize();
                        /*0x3d5cfa8*/ void set_DynamicTableSize(uint value);
                        /*0x3d5cfb0*/ uint get_MaxDynamicTableSize();
                        /*0x3d5cfb8*/ void set_MaxDynamicTableSize(uint value);
                        /*0x3d5d1a8*/ System.Collections.Generic.KeyValuePair<uint, uint> GetIndex(string key, string value);
                        /*0x3d5d490*/ string GetKey(uint index);
                        /*0x3d5d5a0*/ System.Collections.Generic.KeyValuePair<string, string> GetHeader(uint index);
                        /*0x3d5d728*/ void Add(System.Collections.Generic.KeyValuePair<string, string> header);
                        /*0x3d5d7d0*/ uint CalculateEntrySize(System.Collections.Generic.KeyValuePair<string, string> entry);
                        /*0x3d5cfc4*/ void EvictEntries(uint newHeaderSize);
                        /*0x3d5d860*/ string ToString();
                    }

                    class HPACKEncoder
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settingsRegistry;
                        /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HeaderTable requestTable;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HeaderTable responseTable;
                        /*0x28*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                        static /*0x3d5ef80*/ void WriteIndexedHeaderField(System.IO.Stream stream, uint index);
                        static /*0x3d61080*/ void WriteLiteralHeaderFieldWithIncrementalIndexing_IndexedName(System.IO.Stream stream, uint index, string value);
                        static /*0x3d60f6c*/ void WriteLiteralHeaderFieldWithIncrementalIndexing_NewName(System.IO.Stream stream, string header, string value);
                        static /*0x3d5f084*/ void WriteLiteralHeaderFieldWithoutIndexing_IndexedName(System.IO.Stream stream, uint index, string value);
                        static /*0x3d612c4*/ uint RequiredBytesToEncodeString(string str);
                        static /*0x3d6136c*/ void EncodeString(string str, byte[] buffer, ref uint offset);
                        static /*0x3d61464*/ uint RequiredBytesToEncodeStringWithHuffman(string str);
                        static /*0x3d617bc*/ void EncodeStringWithHuffman(string str, uint encodedLength, byte[] buffer, ref uint offset);
                        static /*0x3d61a28*/ void AddCodePointToBuffer(Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry code, byte[] buffer, ref uint offset, ref byte bufferBitIdx, bool finishOnBoundary);
                        static /*0x3d61404*/ uint RequiredBytesToEncodeRawString(string str);
                        static /*0x3d615e0*/ void EncodeRawStringTo(string str, byte[] buffer, ref uint offset);
                        static /*0x3d611b0*/ byte RequiredBytesToEncodeInteger(uint value, byte N);
                        static /*0x3d611ec*/ void EncodeInteger(uint value, byte N, byte[] buffer, ref uint offset);
                        static /*0x3d607a0*/ uint DecodeInteger(byte N, byte data, System.IO.Stream stream);
                        /*0x3d5ea68*/ HPACKEncoder(Best.HTTP.Shared.Logger.LoggingContext context, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry);
                        /*0x3d5eb4c*/ void Encode(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context, Best.HTTP.HTTPRequest request, System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> to, uint streamId);
                        /*0x3d5f428*/ void Decode(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context, System.IO.Stream stream, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> to);
                        /*0x3d60414*/ System.Collections.Generic.KeyValuePair<string, string> ReadIndexedHeader(byte firstByte, System.IO.Stream stream);
                        /*0x3d604b8*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldWithIncrementalIndexing_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x3d60440*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldWithIncrementalIndexing_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x3d605d8*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldwithoutIndexing_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x3d60560*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldwithoutIndexing_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x3d606f8*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldNeverIndexed_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x3d60680*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldNeverIndexed_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x3d6081c*/ string DecodeString(System.IO.Stream stream);
                        /*0x3d5f1b0*/ void CreateHeaderFrames(System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> to, uint streamId, byte[] dataToSend, uint payloadLength, bool hasBody);
                        /*0x3d60e64*/ void WriteHeader(System.IO.Stream stream, string header, string value);
                        /*0x3d61b04*/ string ToString();

                        class <>c__DisplayClass5_0
                        {
                            /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder <>4__this;
                            /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context;
                            /*0x20*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream bufferStream;

                            /*0x3d5ef78*/ <>c__DisplayClass5_0();
                            /*0x3d61b54*/ void <Encode>b__0(string header, System.Collections.Generic.List<string> values);
                        }
                    }

                    class WebSocketOverHTTP2Settings
                    {
                        /*0x10*/ bool <EnableWebSocketOverHTTP2>k__BackingField;
                        /*0x11*/ bool <EnableImplementationFallback>k__BackingField;

                        /*0x3d62140*/ WebSocketOverHTTP2Settings();
                        /*0x3d62130*/ bool get_EnableWebSocketOverHTTP2();
                        /*0x3d62138*/ bool get_EnableImplementationFallback();
                    }

                    class HTTP2ConnectionSettings
                    {
                        /*0x10*/ bool EnableHTTP2Connections;
                        /*0x14*/ uint HeaderTableSize;
                        /*0x18*/ uint MaxConcurrentStreams;
                        /*0x1c*/ uint InitialStreamWindowSize;
                        /*0x20*/ uint InitialConnectionWindowSize;
                        /*0x24*/ uint MaxFrameSize;
                        /*0x28*/ uint MaxHeaderListSize;
                        /*0x30*/ System.TimeSpan MaxIdleTime;
                        /*0x38*/ System.TimeSpan PingFrequency;
                        /*0x40*/ System.TimeSpan Timeout;
                        /*0x48*/ bool EnableConnectProtocol;
                        /*0x50*/ Best.HTTP.Hosts.Connections.HTTP2.WebSocketOverHTTP2Settings WebSocketOverHTTP2Settings;

                        /*0x3d62150*/ HTTP2ConnectionSettings();
                    }

                    class CustomHTTP2StreamFactory : System.MulticastDelegate
                    {
                        /*0x3d6223c*/ CustomHTTP2StreamFactory(object object, nint method);
                        /*0x3d622f0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream Invoke(Best.HTTP.HTTPRequest request, uint streamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer parentHandler, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry, Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder hpackEncoder);
                    }

                    class HTTP2ContentConsumer : Best.HTTP.Hosts.Connections.IHTTPRequestHandler, System.IDisposable, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IThreadSignaler
                    {
                        static /*0x0*/ int RTTBufferCapacity;
                        /*0x10*/ int _assignedRequest;
                        /*0x14*/ int _maxAssignedRequests;
                        /*0x18*/ double <Latency>k__BackingField;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settings;
                        /*0x28*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder HPACKEncoder;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x38*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x40*/ System.DateTime lastPingSent;
                        /*0x48*/ int waitingForPingAck;
                        /*0x50*/ Best.HTTP.Shared.Extensions.CircularBuffer<double> rtts;
                        /*0x58*/ bool isRunning;
                        /*0x60*/ System.Threading.AutoResetEvent newFrameSignal;
                        /*0x68*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.HTTPRequest> requestQueue;
                        /*0x70*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream> clientInitiatedStreams;
                        /*0x78*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> newFrames;
                        /*0x80*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames;
                        /*0x88*/ uint remoteWindow;
                        /*0x90*/ System.DateTime lastInteraction;
                        /*0x98*/ System.DateTime goAwaySentAt;
                        /*0xa0*/ Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn;
                        /*0xa8*/ long LastStreamId;
                        /*0xb0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings _connectionSettings;
                        /*0xb8*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;

                        static /*0x3d68b98*/ HTTP2ContentConsumer();
                        /*0x3d57d78*/ HTTP2ContentConsumer(Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn);
                        /*0x3d62304*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                        /*0x3d6230c*/ bool get_CanProcessMultiple();
                        /*0x3d623b4*/ int get_AssignedRequests();
                        /*0x3d623bc*/ int get_MaxAssignedRequests();
                        /*0x3d623c4*/ double get_Latency();
                        /*0x3d623cc*/ void set_Latency(double value);
                        /*0x3d623d4*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3d623dc*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3d623e4*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x3d623ec*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x3d6234c*/ bool get_SentGoAwayFrame();
                        /*0x3d623f4*/ System.TimeSpan get_MaxGoAwayWaitTime();
                        /*0x3d6260c*/ void Process(Best.HTTP.HTTPRequest request);
                        /*0x3d627d4*/ void SignalThread();
                        /*0x3d627e8*/ void RunHandler();
                        /*0x3d679a0*/ void OnRemoteSettingChanged(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint oldValue, uint newValue);
                        /*0x3d679c0*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x3d679c8*/ void UnsetBinding();
                        /*0x3d679d4*/ void OnContent();
                        /*0x3d6828c*/ void OnConnectionClosed();
                        /*0x3d68414*/ void OnError(System.Exception ex);
                        /*0x3d66298*/ double CalculateLatency();
                        /*0x3d65dbc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream FindStreamById(uint streamId);
                        /*0x3d685a8*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                        /*0x3d685b0*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                        /*0x3d685b8*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                        /*0x3d68614*/ void Dispose();
                    }

                    enum HTTP2ErrorCodes
                    {
                        NO_ERROR = 0,
                        PROTOCOL_ERROR = 1,
                        INTERNAL_ERROR = 2,
                        FLOW_CONTROL_ERROR = 3,
                        SETTINGS_TIMEOUT = 4,
                        STREAM_CLOSED = 5,
                        FRAME_SIZE_ERROR = 6,
                        REFUSED_STREAM = 7,
                        CANCEL = 8,
                        COMPRESSION_ERROR = 9,
                        CONNECT_ERROR = 10,
                        ENHANCE_YOUR_CALM = 11,
                        INADEQUATE_SECURITY = 12,
                        HTTP_1_1_REQUIRED = 13,
                    }

                    class HTTP2FrameHelper
                    {
                        static /*0x3d66350*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2WindowUpdateFrame ReadWindowUpdateFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d663dc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2GoAwayFrame ReadGoAwayFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d66220*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFrame ReadPingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d68d70*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2RSTStreamFrame ReadRST_StreamFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5c68c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2HeadersFrame ReadHeadersFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d68e94*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2DataFrame ReadDataFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d69084*/ void StreamRead(System.IO.Stream stream, byte[] buffer, int offset, uint count);
                        static /*0x3d69150*/ void StreamRead(System.IO.Stream stream, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                        static /*0x3d678c4*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer HeaderAsBinary(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d68194*/ bool CanReadFullFrame(Best.HTTP.Shared.Streams.PeekableStream stream);
                        static /*0x3d67e14*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload ReadHeader(System.IO.Stream stream, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d69220*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsFrame ReadSettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d6942c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateACKSettingsFrame();
                        static /*0x3d69448*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateSettingsFrame(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> settings, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d65ccc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreatePingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFlags flags, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d65bc4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateWindowUpdateFrame(uint streamId, uint windowSizeIncrement, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d67548*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateGoAwayFrame(uint lastStreamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes error, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d695f4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateRSTFrame(uint streamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes errorCode, Best.HTTP.Shared.Logger.LoggingContext context);
                    }

                    enum HTTP2FrameTypes
                    {
                        DATA = 0,
                        HEADERS = 1,
                        PRIORITY = 2,
                        RST_STREAM = 3,
                        SETTINGS = 4,
                        PUSH_PROMISE = 5,
                        PING = 6,
                        GOAWAY = 7,
                        WINDOW_UPDATE = 8,
                        CONTINUATION = 9,
                        ALT_SVC = 10,
                    }

                    enum HTTP2DataFlags
                    {
                        None = 0,
                        END_STREAM = 1,
                        PADDED = 8,
                    }

                    enum HTTP2HeadersFlags
                    {
                        None = 0,
                        END_STREAM = 1,
                        END_HEADERS = 4,
                        PADDED = 8,
                        PRIORITY = 32,
                    }

                    enum HTTP2SettingsFlags
                    {
                        None = 0,
                        ACK = 1,
                    }

                    enum HTTP2PingFlags
                    {
                        None = 0,
                        ACK = 1,
                    }

                    struct HTTP2FrameHeaderAndPayload
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameTypes Type;
                        /*0x11*/ byte Flags;
                        /*0x14*/ uint StreamId;
                        /*0x18*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Payload;
                        /*0x28*/ bool DontUseMemPool;

                        /*0x3d67660*/ string ToString();
                        /*0x3d5c3a4*/ string PayloadAsHex();
                    }

                    struct HTTP2SettingsFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> Settings;

                        /*0x3d693fc*/ HTTP2SettingsFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d696fc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsFlags get_Flags();
                        /*0x3d69704*/ string ToString();
                    }

                    struct HTTP2DataFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Nullable<byte> PadLength;
                        /*0x38*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Data;

                        /*0x3d68ff0*/ HTTP2DataFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d6907c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2DataFlags get_Flags();
                        /*0x3d69a28*/ string ToString();
                    }

                    struct HTTP2HeadersFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Nullable<byte> PadLength;
                        /*0x32*/ System.Nullable<byte> IsExclusive;
                        /*0x34*/ System.Nullable<uint> StreamDependency;
                        /*0x3c*/ System.Nullable<byte> Weight;
                        /*0x40*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment HeaderBlockFragment;

                        /*0x3d68dfc*/ HTTP2HeadersFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d68e8c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2HeadersFlags get_Flags();
                        /*0x3d69c80*/ string ToString();
                    }

                    struct HTTP2RSTStreamFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ uint ErrorCode;

                        /*0x3d68dd4*/ HTTP2RSTStreamFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d6a058*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes get_Error();
                        /*0x3d6a060*/ string ToString();
                    }

                    struct HTTP2PingFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment OpaqueData;

                        /*0x3d68ca0*/ HTTP2PingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d66290*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFlags get_Flags();
                        /*0x3d6a128*/ string ToString();
                    }

                    struct HTTP2GoAwayFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ byte ReservedBit;
                        /*0x34*/ uint LastStreamId;
                        /*0x38*/ uint ErrorCode;
                        /*0x40*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AdditionalDebugData;

                        /*0x3d68c10*/ HTTP2GoAwayFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d6a1fc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes get_Error();
                        /*0x3d66548*/ string ToString();
                    }

                    struct HTTP2WindowUpdateFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ byte ReservedBit;
                        /*0x34*/ uint WindowSizeIncrement;

                        /*0x3d68be4*/ HTTP2WindowUpdateFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d6a204*/ string ToString();
                    }

                    class HTTP2Response : Best.HTTP.HTTPResponse
                    {
                        /*0x78*/ long <ExpectedContentLength>k__BackingField;
                        /*0x80*/ string contentEncoding;
                        /*0x88*/ bool isPrepared;
                        /*0x90*/ Best.HTTP.Response.Decompression.IDecompressor _decompressor;

                        /*0x3d6a2c8*/ HTTP2Response(Best.HTTP.HTTPRequest request, bool isFromCache);
                        /*0x3d6a2b8*/ long get_ExpectedContentLength();
                        /*0x3d6a2c0*/ void set_ExpectedContentLength(long value);
                        /*0x3d6a354*/ void AddHeaders(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> headers);
                        /*0x3d6a940*/ void Prepare(Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailable);
                        /*0x3d6a978*/ void ProcessData(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment payload);
                        /*0x3d6ac14*/ void FinishProcessData();
                        /*0x3d6adf0*/ void Dispose(bool disposing);
                    }

                    enum HTTP2Settings
                    {
                        HEADER_TABLE_SIZE = 1,
                        ENABLE_PUSH = 2,
                        MAX_CONCURRENT_STREAMS = 3,
                        INITIAL_WINDOW_SIZE = 4,
                        MAX_FRAME_SIZE = 5,
                        MAX_HEADER_LIST_SIZE = 6,
                        RESERVED = 7,
                        ENABLE_CONNECT_PROTOCOL = 8,
                        NO_RFC7540_PRIORITIES = 9,
                    }

                    class HTTP2SettingsRegistry
                    {
                        /*0x10*/ bool <IsReadOnly>k__BackingField;
                        /*0x18*/ System.Action<Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint, uint> OnSettingChangedEvent;
                        /*0x20*/ uint[] values;
                        /*0x28*/ bool[] changeFlags;
                        /*0x30*/ bool <IsChanged>k__BackingField;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager _parent;

                        /*0x3d6af58*/ HTTP2SettingsRegistry(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager parent, bool readOnly, bool treatItAsAlreadyChanged);
                        /*0x3d6af30*/ bool get_IsReadOnly();
                        /*0x3d6af38*/ void set_IsReadOnly(bool value);
                        /*0x3d5d178*/ uint get_Item(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting);
                        /*0x3d6580c*/ void set_Item(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint value);
                        /*0x3d6af44*/ bool get_IsChanged();
                        /*0x3d6af4c*/ void set_IsChanged(bool value);
                        /*0x3d6b10c*/ void Merge(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> settings);
                        /*0x3d6b47c*/ void Merge(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry from);
                        /*0x3d6b550*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateFrame(Best.HTTP.Shared.Logger.LoggingContext context);
                    }

                    class HTTP2SettingsManager
                    {
                        static /*0x0*/ int KnownSettingsCount;
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <MySettings>k__BackingField;
                        /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <InitiatedMySettings>k__BackingField;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <RemoteSettings>k__BackingField;
                        /*0x28*/ System.DateTime <SettingsChangesSentAt>k__BackingField;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings _connectionSettings;

                        static /*0x3d6b794*/ HTTP2SettingsManager();
                        /*0x3d624d0*/ HTTP2SettingsManager(Best.HTTP.Shared.Logger.LoggingContext context, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings connectionSettings);
                        /*0x3d6b744*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_MySettings();
                        /*0x3d6b74c*/ void set_MySettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x3d6b754*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_InitiatedMySettings();
                        /*0x3d6b75c*/ void set_InitiatedMySettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x3d6b764*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_RemoteSettings();
                        /*0x3d6b76c*/ void set_RemoteSettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x3d6b774*/ System.DateTime get_SettingsChangesSentAt();
                        /*0x3d6b77c*/ void set_SettingsChangesSentAt(System.DateTime value);
                        /*0x3d6b784*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3d6b78c*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3d65ed8*/ void Process(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame, System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d65900*/ void SendChanges(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                    }

                    enum HTTP2StreamStates
                    {
                        Idle = 0,
                        Open = 1,
                        HalfClosedLocal = 2,
                        HalfClosedRemote = 3,
                        Closed = 4,
                    }

                    class HTTP2Stream : Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable
                    {
                        /*0x10*/ uint <Id>k__BackingField;
                        /*0x14*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates _state;
                        /*0x18*/ System.TimeSpan <NextInteraction>k__BackingField;
                        /*0x20*/ Best.HTTP.HTTPRequest <AssignedRequest>k__BackingField;
                        /*0x28*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x30*/ uint downloaded;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settings;
                        /*0x40*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder encoder;
                        /*0x48*/ System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoing;
                        /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> incomingFrames;
                        /*0x58*/ Best.HTTP.Hosts.Connections.HTTP2.FramesAsStreamView headerView;
                        /*0x60*/ long localWindow;
                        /*0x68*/ long remoteWindow;
                        /*0x70*/ uint windowUpdateThreshold;
                        /*0x78*/ long sentData;
                        /*0x80*/ long uploadLength;
                        /*0x88*/ bool isRSTFrameSent;
                        /*0x89*/ bool isEndSTRReceived;
                        /*0x90*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Response response;
                        /*0x98*/ int lastReadCount;
                        /*0xa0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer _parentHandler;

                        /*0x3d66c5c*/ HTTP2Stream(uint id, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer parentHandler, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry, Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder hpackEncoder);
                        /*0x3d6b84c*/ uint get_Id();
                        /*0x3d6b854*/ void set_Id(uint value);
                        /*0x3d6b85c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates get_State();
                        /*0x3d6b864*/ void set_State(Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates value);
                        /*0x3d6ba9c*/ bool get_HasFrameToSend();
                        /*0x3d6bb20*/ System.TimeSpan get_NextInteraction();
                        /*0x3d6bb28*/ Best.HTTP.HTTPRequest get_AssignedRequest();
                        /*0x3d6bb30*/ void set_AssignedRequest(Best.HTTP.HTTPRequest value);
                        /*0x3d6bb38*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3d6bb40*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3d6bb48*/ void Assign(Best.HTTP.HTTPRequest request);
                        /*0x3d66f24*/ void Process(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d65e5c*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame, System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d667e8*/ void Abort(string msg);
                        /*0x3d6bd54*/ void ProcessIncomingFrames(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d6d3d8*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x3d6d404*/ void ProcessIncomingDATAFrame(ref Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d6ca68*/ void ProcessState(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d6d6bc*/ void ProcessOpenState(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d6dba0*/ void OnRemoteSettingChanged(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint oldValue, uint newValue);
                        /*0x3d6cffc*/ void FinishRequest();
                        /*0x3d672ec*/ void Removed();
                    }

                    struct HuffmanTableEntry
                    {
                        /*0x10*/ uint Code;
                        /*0x14*/ byte Bits;

                        /*0x3d6df08*/ HuffmanTableEntry(uint code, byte bits);
                        /*0x3d61aec*/ byte GetBitAtIdx(byte idx);
                        /*0x3d6df14*/ string ToString();
                    }

                    struct HuffmanTreeNode
                    {
                        /*0x10*/ ushort Value;
                        /*0x12*/ ushort NextZeroIdx;
                        /*0x14*/ ushort NextOneIdx;

                        /*0x3d6dfa8*/ HuffmanTreeNode(ushort value, ushort nextZeroIdx, ushort nextOneIdx);
                        /*0x3d6dfb8*/ string ToString();
                    }

                    class HuffmanEncoder
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry[] StaticTable;
                        static /*0x8*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode[] HuffmanTree;

                        static /*0x3d6e070*/ HuffmanEncoder();
                        static /*0x3d60ca4*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode GetRoot();
                        static /*0x3d60d1c*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode GetNext(Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode current, byte bit);
                        static /*0x3d619ac*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry GetEntryForCodePoint(ushort codePoint);
                    }
                }

                namespace HTTP1
                {
                    class Constants
                    {
                        static /*0x0*/ byte[] EOL;
                        static /*0x8*/ byte[] HeaderValueSeparator;

                        static /*0x3e435c4*/ Constants();
                    }

                    class HTTP1ContentConsumer : Best.HTTP.Hosts.Connections.IHTTPRequestHandler, System.IDisposable, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable, Best.HTTP.Hosts.Connections.IThreadSignaler
                    {
                        /*0x10*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;
                        /*0x18*/ Best.HTTP.Hosts.Connections.KeepAliveHeader _keepAlive;
                        /*0x20*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x28*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x30*/ Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response _response;
                        /*0x40*/ int _isAlreadyProcessingContent;
                        /*0x48*/ System.Threading.AutoResetEvent _are;

                        /*0x3e43704*/ HTTP1ContentConsumer(Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn);
                        /*0x3e43698*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                        /*0x3e436a0*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                        /*0x3e436a8*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                        /*0x3e436b0*/ bool get_CanProcessMultiple();
                        /*0x3e436b8*/ int get_AssignedRequests();
                        /*0x3e436dc*/ int get_MaxAssignedRequests();
                        /*0x3e436e4*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3e436ec*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3e436f4*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x3e436fc*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x3e437cc*/ void RunHandler();
                        /*0x3e43e90*/ void SendOutTo(Best.HTTP.HTTPRequest request, System.IO.Stream stream);
                        /*0x3e44d98*/ void SendContent();
                        /*0x3e456cc*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x3e45a14*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x3e45a1c*/ void UnsetBinding();
                        /*0x3e456dc*/ void OnContent();
                        /*0x3e46a20*/ void OnConnectionClosed();
                        /*0x3e46e0c*/ void OnError(System.Exception e);
                        /*0x3e47078*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                        /*0x3e44678*/ void FinishedProcessing(System.Exception ex);
                        /*0x3e47280*/ void Process(Best.HTTP.HTTPRequest request);
                        /*0x3e474a8*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                        /*0x3e4767c*/ void Dispose();
                        /*0x3e476e0*/ void Dispose(bool disposing);
                        /*0x3e4771c*/ void Best.HTTP.Hosts.Connections.IThreadSignaler.SignalThread();
                        /*0x3e47730*/ void <OnConnectionClosed>b__33_0();

                        class <>c__DisplayClass27_0
                        {
                            /*0x10*/ Best.HTTP.HTTPRequest request;
                            /*0x18*/ Best.HTTP.Shared.Streams.WriteOnlyBufferedStream bufferStream;

                            /*0x3e44d90*/ <>c__DisplayClass27_0();
                            /*0x3e47a5c*/ void <SendOutTo>b__0(string header, System.Collections.Generic.List<string> values);
                        }
                    }

                    class PeekableHTTP1Response : Best.HTTP.HTTPResponse
                    {
                        /*0x74*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState _readState;
                        /*0x78*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ContentDeliveryMode _deliveryMode;
                        /*0x80*/ long _expectedLength;
                        /*0x88*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> _newHeaders;
                        /*0x90*/ long _downloaded;
                        /*0x98*/ Best.HTTP.Response.Decompression.IDecompressor _decompressor;
                        /*0xa0*/ bool _compressed;
                        /*0xa1*/ bool sendProgressChanged;
                        /*0xa4*/ int _chunkLength;
                        /*0xa8*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ReadChunkedStates _readChunkedState;
                        /*0xb0*/ Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable _bufferAvailableHandler;
                        /*0xb8*/ int _isProccessing;

                        /*0x3e43e54*/ PeekableHTTP1Response(Best.HTTP.HTTPRequest request, bool isFromCache, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                        /*0x3e48004*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState get_ReadState();
                        /*0x3e4800c*/ void set_ReadState(Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState value);
                        /*0x3e48210*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ContentDeliveryMode get_DeliveryMode();
                        /*0x3e45a28*/ void ProcessPeekable(Best.HTTP.Shared.Streams.PeekableContentProviderStream peekable);
                        /*0x3e48218*/ bool IsNewLinePresent(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e48294*/ void ProcessReadHeaders(Best.HTTP.Shared.Streams.PeekableStream peekable, Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState targetState);
                        /*0x3e489f0*/ void ProcessReadRawUnknownLength(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e4937c*/ bool TryReadChunkLength(Best.HTTP.Shared.Streams.PeekableStream peekable, ref int result);
                        /*0x3e48c1c*/ void ProcessReadChunked(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e48770*/ void ProcessReadRaw(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e491bc*/ void ProcessChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment chunk);
                        /*0x3e48fe4*/ void PostProcessContent();
                        /*0x3e49404*/ void Dispose(bool disposing);

                        enum ContentDeliveryMode
                        {
                            Raw = 0,
                            RawUnknownLength = 1,
                            Chunked = 2,
                        }

                        enum PeekableReadState
                        {
                            StatusLine = 0,
                            Headers = 1,
                            WaitForContentSent = 2,
                            PrepareForContent = 3,
                            ContentSetup = 4,
                            Content = 5,
                            Finished = 6,
                        }

                        enum ReadChunkedStates
                        {
                            ReadChunkLength = 0,
                            ReadChunk = 1,
                            ReadTrailingCRLF = 2,
                            ReadTrailingHeaders = 3,
                        }
                    }
                }

                namespace File
                {
                    class FileConnection : Best.HTTP.Hosts.Connections.ConnectionBase, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable
                    {
                        /*0x70*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x78*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response _response;
                        /*0x80*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingUnderlyingStream _stream;
                        /*0x88*/ UnityEngine.Hash128 _cacheHash;

                        /*0x3e494d0*/ FileConnection(Best.HTTP.HostSetting.HostKey hostKey);
                        /*0x3e494c0*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x3e494c8*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x3e494f8*/ void ThreadFunc();
                        /*0x3e4aa98*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x3e4acac*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x3e4acb4*/ void UnsetBinding();
                        /*0x3e4aaa8*/ void OnContent();
                        /*0x3e4acc0*/ void OnConnectionClosed();
                        /*0x3e4af98*/ void OnError(System.Exception e);
                        /*0x3e4b204*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                        /*0x3e4a338*/ void FinishedProcessing(System.Exception ex);
                    }
                }
            }
        }

        namespace Cookies
        {
            class Cookie : System.IComparable<Best.HTTP.Cookies.Cookie>, System.IEquatable<Best.HTTP.Cookies.Cookie>
            {
                /*0x10*/ string <Name>k__BackingField;
                /*0x18*/ string <Value>k__BackingField;
                /*0x20*/ System.DateTime <Date>k__BackingField;
                /*0x28*/ System.DateTime <LastAccess>k__BackingField;
                /*0x30*/ System.DateTime <Expires>k__BackingField;
                /*0x38*/ long <MaxAge>k__BackingField;
                /*0x40*/ bool <IsSession>k__BackingField;
                /*0x48*/ string <Domain>k__BackingField;
                /*0x50*/ string <Path>k__BackingField;
                /*0x58*/ bool <IsSecure>k__BackingField;
                /*0x59*/ bool <IsHttpOnly>k__BackingField;
                /*0x60*/ string <SameSite>k__BackingField;

                static /*0x3e4b91c*/ Best.HTTP.Cookies.Cookie Parse(string header, System.Uri defaultDomain, Best.HTTP.Shared.Logger.LoggingContext context);
                static /*0x3e4cba8*/ string ReadValue(string str, ref int pos);
                static /*0x3e4c3b4*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> ParseCookieHeader(string str);
                /*0x3e4b6d4*/ Cookie();
                /*0x3e4b608*/ string get_Name();
                /*0x3e4b610*/ void set_Name(string value);
                /*0x3e4b618*/ string get_Value();
                /*0x3e4b620*/ void set_Value(string value);
                /*0x3e4b628*/ System.DateTime get_Date();
                /*0x3e4b630*/ void set_Date(System.DateTime value);
                /*0x3e4b638*/ System.DateTime get_LastAccess();
                /*0x3e4b640*/ void set_LastAccess(System.DateTime value);
                /*0x3e4b648*/ System.DateTime get_Expires();
                /*0x3e4b650*/ void set_Expires(System.DateTime value);
                /*0x3e4b658*/ long get_MaxAge();
                /*0x3e4b660*/ void set_MaxAge(long value);
                /*0x3e4b668*/ bool get_IsSession();
                /*0x3e4b670*/ void set_IsSession(bool value);
                /*0x3e4b67c*/ string get_Domain();
                /*0x3e4b684*/ void set_Domain(string value);
                /*0x3e4b68c*/ string get_Path();
                /*0x3e4b694*/ void set_Path(string value);
                /*0x3e4b69c*/ bool get_IsSecure();
                /*0x3e4b6a4*/ void set_IsSecure(bool value);
                /*0x3e4b6b0*/ bool get_IsHttpOnly();
                /*0x3e4b6b8*/ void set_IsHttpOnly(bool value);
                /*0x3e4b6c4*/ string get_SameSite();
                /*0x3e4b6cc*/ void set_SameSite(string value);
                /*0x3e4b74c*/ bool WillExpireInTheFuture();
                /*0x3e4b8ac*/ uint GuessSize();
                /*0x3e4c64c*/ void SaveTo(System.IO.BinaryWriter stream);
                /*0x3e4c864*/ void LoadFrom(System.IO.BinaryReader stream);
                /*0x3e4ca30*/ string ToString();
                /*0x3e4ca7c*/ bool Equals(object obj);
                /*0x3e4cae8*/ bool Equals(Best.HTTP.Cookies.Cookie cookie);
                /*0x3e4cb80*/ int GetHashCode();
                /*0x3e4cc34*/ int CompareTo(Best.HTTP.Cookies.Cookie other);

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Cookies.Cookie.<> <>9;
                    static /*0x8*/ System.Func<char, bool> <>9__65_0;

                    static /*0x3e4ccb8*/ <>c();
                    /*0x3e4cd20*/ <>c();
                    /*0x3e4cd28*/ bool <ParseCookieHeader>b__65_0(char ch);
                }
            }

            class CookieJar
            {
                static /*0x0*/ uint <MaximumSize>k__BackingField;
                static /*0x8*/ System.TimeSpan AccessThreshold;
                static /*0x10*/ bool IsSessionOverride;
                static /*0x11*/ bool IsEnabled;
                static /*0x18*/ System.Collections.Generic.List<Best.HTTP.Cookies.Cookie> Cookies;
                static /*0x20*/ string <CookieFolder>k__BackingField;
                static /*0x28*/ string <LibraryPath>k__BackingField;
                static /*0x30*/ System.Threading.ReaderWriterLockSlim rwLock;
                static /*0x38*/ bool _isSavingSupported;
                static /*0x39*/ bool IsSupportCheckDone;
                static /*0x3a*/ bool Loaded;
                static /*0x40*/ Best.HTTP.Shared.Extensions.RunOnceOnMainThread _saveLibraryRunner;

                static /*0x3e5019c*/ CookieJar();
                static /*0x3e4cd44*/ uint get_MaximumSize();
                static /*0x3e4cd9c*/ bool get_IsSavingSupported();
                static /*0x3e4d448*/ string get_CookieFolder();
                static /*0x3e4d4a0*/ void set_CookieFolder(string value);
                static /*0x3e4d500*/ string get_LibraryPath();
                static /*0x3e4d558*/ void set_LibraryPath(string value);
                static /*0x3e4d5b8*/ void SetupFolder();
                static /*0x3e4d8c8*/ bool SetFromRequest(Best.HTTP.HTTPResponse response);
                static /*0x3e4e088*/ void SetupRequest(Best.HTTP.HTTPRequest request);
                static /*0x3e4e870*/ void Maintain(bool sendEvent);
                static /*0x3e4edc8*/ void Persist();
                static /*0x3e4f77c*/ void Load();
                static /*0x3e4e394*/ System.Collections.Generic.List<Best.HTTP.Cookies.Cookie> Get(System.Uri uri);
                static /*0x3e4df88*/ Best.HTTP.Cookies.Cookie Find(Best.HTTP.Cookies.Cookie cookie, ref int idx);
            }
        }

        namespace Caching
        {
            class HTTPCacheAcquireLockException : System.Exception
            {
                /*0x3e4a214*/ HTTPCacheAcquireLockException(string message);
            }

            enum ErrorTypeForValidation
            {
                None = 0,
                ServerError = 1,
                ConnectionError = 2,
            }

            class OnBeforeBeginCacheDelegate : System.MulticastDelegate
            {
                /*0x3e50354*/ OnBeforeBeginCacheDelegate(object object, nint method);
                /*0x3e503f4*/ void Invoke(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
            }

            class OnCacheSizeChangedDelegate : System.MulticastDelegate
            {
                /*0x3e50408*/ OnCacheSizeChangedDelegate(object object, nint method);
                /*0x3e504a4*/ void Invoke();
            }

            class HTTPCache : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
            {
                /*0x10*/ Best.HTTP.Caching.OnCacheSizeChangedDelegate OnCacheSizeChanged;
                /*0x18*/ Best.HTTP.Caching.HTTPCacheOptions <Options>k__BackingField;
                /*0x20*/ long _cacheSize;
                /*0x28*/ Best.HTTP.Caching.OnBeforeBeginCacheDelegate OnBeforeBeginCache;
                /*0x30*/ int _subscribed;
                /*0x34*/ bool _isSupported;
                /*0x38*/ Best.HTTP.Caching.HTTPCacheDatabase _database;
                /*0x40*/ string _baseDirectory;

                static /*0x3e50bbc*/ UnityEngine.Hash128 CalculateHash(Best.HTTP.HTTPMethods method, System.Uri uri);
                static /*0x3e54204*/ void WriteHeaders(System.IO.Stream headerStream, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                static /*0x3e56f98*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> LoadHeaders(System.IO.Stream headersStream);
                static /*0x3e5313c*/ void LogCachingHeaders(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e504d0*/ HTTPCache(Best.HTTP.Caching.HTTPCacheOptions options);
                /*0x3e504b8*/ Best.HTTP.Caching.HTTPCacheOptions get_Options();
                /*0x3e504c0*/ void set_Options(Best.HTTP.Caching.HTTPCacheOptions value);
                /*0x3e504c8*/ long get_CacheSize();
                /*0x3e50c14*/ string GetHashDirectory(UnityEngine.Hash128 hash);
                /*0x3e4a27c*/ string GetHeaderPathFromHash(UnityEngine.Hash128 hash);
                /*0x3e50cb0*/ string GetContentPathFromHash(UnityEngine.Hash128 hash);
                /*0x3e50d6c*/ bool AreCacheFilesExists(UnityEngine.Hash128 hash);
                /*0x3e50f1c*/ void SetupValidationHeaders(Best.HTTP.HTTPRequest request);
                /*0x3e51d94*/ bool IsThereEnoughSpaceAfterMaintain(ulong spaceNeeded, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e52114*/ Best.HTTP.Caching.HTTPCacheContentWriter BeginCache(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e54768*/ void EndCache(Best.HTTP.Caching.HTTPCacheContentWriter cacheResult, bool completedWithoutIssue, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e49f1c*/ System.IO.Stream BeginReadContent(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4b3ec*/ void EndReadContent(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e51594*/ void Delete(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e562fc*/ bool RefreshHeaders(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> newHeaders, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e537ec*/ bool IsCacheble(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                /*0x3e53090*/ bool IsCacheble(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode);
                /*0x3e57138*/ bool CanServeWithoutValidation(UnityEngine.Hash128 hash, Best.HTTP.Caching.ErrorTypeForValidation errorType, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e577ec*/ void Redirect(Best.HTTP.HTTPRequest request, UnityEngine.Hash128 hash);
                /*0x3e51e00*/ void Maintain(ulong contentLength, bool deleteLockedEntries, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e58590*/ void ZeroOutCacheSize();
                /*0x3e54f14*/ void IncrementCacheSize(ulong withSize);
                /*0x3e56260*/ void DecrementCacheSize(ulong withSize);
                /*0x3e57b48*/ void MaintainImplementation(ulong contentLength, bool deleteLockedEntries, System.DateTime now, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e586ec*/ void Dispose();
                /*0x3e58a2c*/ void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Caching.HTTPCache.<> <>9;
                    static /*0x8*/ System.Comparison<Best.HTTP.Caching.CacheMetadata> <>9__41_0;

                    static /*0x3e58bfc*/ <>c();
                    /*0x3e58c64*/ <>c();
                    /*0x3e58c6c*/ int <MaintainImplementation>b__41_0(Best.HTTP.Caching.CacheMetadata x, Best.HTTP.Caching.CacheMetadata y);
                }

                class <>c__DisplayClass33_0
                {
                    /*0x10*/ bool hasValidMaxAge;

                    /*0x3e57130*/ <>c__DisplayClass33_0();
                    /*0x3e58cf4*/ bool <IsCacheble>g__CheckHeader|0(string headerValue);
                }
            }

            class HTTPCacheContentWriter
            {
                /*0x10*/ Best.HTTP.Caching.HTTPCache <Cache>k__BackingField;
                /*0x18*/ UnityEngine.Hash128 <Hash>k__BackingField;
                /*0x28*/ ulong <ExpectedLength>k__BackingField;
                /*0x30*/ ulong <ProcessedLength>k__BackingField;
                /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                /*0x40*/ System.IO.Stream _contentStream;

                /*0x3e546ec*/ HTTPCacheContentWriter(Best.HTTP.Caching.HTTPCache cache, UnityEngine.Hash128 hash, System.IO.Stream contentStream, ulong expectedLength, Best.HTTP.Shared.Logger.LoggingContext loggingContext);
                /*0x3e58e6c*/ Best.HTTP.Caching.HTTPCache get_Cache();
                /*0x3e58e74*/ void set_Cache(Best.HTTP.Caching.HTTPCache value);
                /*0x3e58e7c*/ UnityEngine.Hash128 get_Hash();
                /*0x3e58e88*/ void set_Hash(UnityEngine.Hash128 value);
                /*0x3e58e90*/ ulong get_ExpectedLength();
                /*0x3e58e98*/ void set_ExpectedLength(ulong value);
                /*0x3e58ea0*/ ulong get_ProcessedLength();
                /*0x3e58ea8*/ void set_ProcessedLength(ulong value);
                /*0x3e58eb0*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                /*0x3e58eb8*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                /*0x3e58ec0*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                /*0x3e549d4*/ void Close();
                /*0x3e59284*/ string ToString();
            }

            struct v128View
            {
                /*0x10*/ ulong low;
                /*0x18*/ ulong high;
            }

            enum LockTypes
            {
                Unlocked = 0,
                Write = 1,
                Read = 2,
            }

            class CacheMetadata : Best.HTTP.Shared.Databases.Metadata
            {
                /*0x20*/ UnityEngine.Hash128 <Hash>k__BackingField;
                /*0x30*/ ulong <ContentLength>k__BackingField;
                /*0x38*/ System.DateTime <LastAccessTime>k__BackingField;
                /*0x40*/ Best.HTTP.Caching.LockTypes <Lock>k__BackingField;
                /*0x44*/ int <ReadLockCount>k__BackingField;

                /*0x3e59744*/ CacheMetadata();
                /*0x3e5934c*/ UnityEngine.Hash128 get_Hash();
                /*0x3e59358*/ void set_Hash(UnityEngine.Hash128 value);
                /*0x3e59360*/ ulong get_ContentLength();
                /*0x3e59368*/ void set_ContentLength(ulong value);
                /*0x3e59370*/ System.DateTime get_LastAccessTime();
                /*0x3e59378*/ void set_LastAccessTime(System.DateTime value);
                /*0x3e59380*/ Best.HTTP.Caching.LockTypes get_Lock();
                /*0x3e59388*/ void set_Lock(Best.HTTP.Caching.LockTypes value);
                /*0x3e59390*/ int get_ReadLockCount();
                /*0x3e59398*/ void set_ReadLockCount(int value);
                /*0x3e593a0*/ void SaveTo(System.IO.Stream stream);
                /*0x3e5947c*/ void LoadFrom(System.IO.Stream stream);
                /*0x3e5954c*/ string ToString();
            }

            enum CacheFlags
            {
                None = 0,
                MustRevalidate = 1,
                NoCache = 2,
            }

            class CacheMetadataContent
            {
                /*0x10*/ string ETag;
                /*0x18*/ System.DateTime LastModified;
                /*0x20*/ System.DateTime Expires;
                /*0x28*/ uint Age;
                /*0x2c*/ uint MaxAge;
                /*0x30*/ System.DateTime Date;
                /*0x38*/ uint StaleWhileRevalidate;
                /*0x3c*/ uint StaleIfError;
                /*0x40*/ Best.HTTP.Caching.CacheFlags Flags;
                /*0x48*/ System.DateTime RequestTime;
                /*0x50*/ System.DateTime ResponseTime;

                /*0x3e5974c*/ CacheMetadataContent();
                /*0x3e597e4*/ void From(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
            }

            class CacheMetadataContentParser : Best.HTTP.Shared.Databases.IDiskContentParser<Best.HTTP.Caching.CacheMetadataContent>
            {
                /*0x3e59fbc*/ CacheMetadataContentParser();
                /*0x3e59cf8*/ void Encode(System.IO.Stream stream, Best.HTTP.Caching.CacheMetadataContent content);
                /*0x3e59e3c*/ Best.HTTP.Caching.CacheMetadataContent Parse(System.IO.Stream stream, int length);
            }

            class CacheMetadataIndexingService : Best.HTTP.Shared.Databases.IndexingService<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata>
            {
                /*0x10*/ Best.HTTP.Shared.Databases.Indexing.AVLTree<UnityEngine.Hash128, int> index_Hash;

                /*0x3e5a194*/ CacheMetadataIndexingService();
                /*0x3e59fc4*/ void Index(Best.HTTP.Caching.CacheMetadata metadata);
                /*0x3e5a054*/ void Remove(Best.HTTP.Caching.CacheMetadata metadata);
                /*0x3e5a0dc*/ System.Collections.Generic.IEnumerable<int> GetOptimizedIndexes();
                /*0x3e5a12c*/ System.Collections.Generic.List<int> FindByHash(UnityEngine.Hash128 hash);
            }

            class CacheMetadataService : Best.HTTP.Shared.Databases.MetadataService<Best.HTTP.Caching.CacheMetadata, Best.HTTP.Caching.CacheMetadataContent>
            {
                /*0x3e5a264*/ CacheMetadataService(Best.HTTP.Shared.Databases.IndexingService<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> indexingService, Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<Best.HTTP.Caching.CacheMetadata> emptyMetadataIndexFinder);
                /*0x3e5a2c4*/ Best.HTTP.Caching.CacheMetadata CreateFrom(System.IO.Stream stream);
                /*0x3e5a31c*/ Best.HTTP.Caching.CacheMetadata Create(UnityEngine.Hash128 hash, Best.HTTP.Caching.CacheMetadataContent value, int filePos, int length);

                class <>c__DisplayClass2_0
                {
                    /*0x10*/ UnityEngine.Hash128 hash;

                    /*0x3e5a418*/ <>c__DisplayClass2_0();
                    /*0x3e5a420*/ void <Create>b__0(Best.HTTP.Caching.CacheMetadataContent content, Best.HTTP.Caching.CacheMetadata metadata);
                }
            }

            class CacheDatabaseOptions : Best.HTTP.Shared.Databases.DatabaseOptions
            {
                /*0x3e5a43c*/ CacheDatabaseOptions();
            }

            class HTTPCacheDatabase : Best.HTTP.Shared.Databases.Database<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata, Best.HTTP.Caching.CacheMetadataIndexingService, Best.HTTP.Caching.CacheMetadataService>
            {
                /*0x3e50b2c*/ HTTPCacheDatabase(string directory);
                /*0x3e5a490*/ HTTPCacheDatabase(string directory, Best.HTTP.Shared.Databases.DatabaseOptions options, Best.HTTP.Caching.CacheMetadataIndexingService indexingService);
                /*0x3e5129c*/ Best.HTTP.Caching.CacheMetadataContent FindByHashAndUpdateRequestTime(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e53a84*/ bool TryAcquireWriteLock(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e56bec*/ bool Update(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e54a1c*/ void ReleaseWriteLock(UnityEngine.Hash128 hash, ulong length, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e54fb0*/ bool TryAcquireReadLock(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e556ec*/ void ReleaseReadLock(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e55ed8*/ ulong Delete(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e55d38*/ void EnterWriteLock(Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e5a8e0*/ void ExitWriteLock(Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e553f0*/ void UpdateLastAccessTime(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e5a7d0*/ Best.HTTP.Caching.CacheMetadata FindMetadata(UnityEngine.Hash128 hash);
                /*0x3e57714*/ System.ValueTuple<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> FindContentAndMetadataLocked(UnityEngine.Hash128 hash);
                /*0x3e5a5cc*/ System.ValueTuple<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> FindContentAndMetadata(UnityEngine.Hash128 hash);
                /*0x3e5a738*/ void UpdateMetadataAndContent(Best.HTTP.Shared.Databases.Metadata metadata, Best.HTTP.Caching.CacheMetadataContent content);
            }

            class HTTPCacheOptions
            {
                /*0x10*/ System.TimeSpan <DeleteOlder>k__BackingField;
                /*0x18*/ ulong <MaxCacheSize>k__BackingField;

                /*0x3e50ac0*/ HTTPCacheOptions();
                /*0x3e5aa80*/ System.TimeSpan get_DeleteOlder();
                /*0x3e5aa88*/ ulong get_MaxCacheSize();
            }
        }

        namespace JSON
        {
            class Json
            {
                static /*0x3e5aa90*/ object Decode(string json);
                static /*0x3e5aaac*/ object Decode(string json, ref bool success);
                static /*0x3e5ac18*/ System.Collections.Generic.Dictionary<string, object> ParseObject(char[] json, ref int index, ref bool success);
                static /*0x3e5b2c8*/ System.Collections.Generic.List<object> ParseArray(char[] json, ref int index, ref bool success);
                static /*0x3e5aaec*/ object ParseValue(char[] json, ref int index, ref bool success);
                static /*0x3e5afdc*/ string ParseString(char[] json, ref int index, ref bool success);
                static /*0x3e5b430*/ double ParseNumber(char[] json, ref int index, ref bool success);
                static /*0x3e5b5a8*/ int GetLastIndexOfNumber(char[] json, int index);
                static /*0x3e5b508*/ void EatWhitespace(char[] json, ref int index);
                static /*0x3e5afc4*/ int LookAhead(char[] json, int index);
                static /*0x3e5ad64*/ int NextToken(char[] json, ref int index);
            }
        }

        namespace Shared
        {
            enum ShutdownTypes
            {
                Running = 0,
                Gentle = 1,
                Immediate = 2,
            }

            class OnSetupFinishedDelegate : System.MulticastDelegate
            {
                /*0x3e5b650*/ OnSetupFinishedDelegate(object object, nint method);
                /*0x3e5b6ec*/ void Invoke();
            }

            class HTTPManager
            {
                static /*0x0*/ Best.HTTP.Shared.OnSetupFinishedDelegate OnSetupFinished;
                static /*0x8*/ Best.HTTP.Hosts.Settings.HostSettingsManager <PerHostSettings>k__BackingField;
                static /*0x10*/ System.DateTime <CurrentFrameDateTime>k__BackingField;
                static /*0x18*/ System.Func<string> <RootSaveFolderProvider>k__BackingField;
                static /*0x20*/ Best.HTTP.Proxies.Autodetect.ProxyDetector _proxyDetector;
                static /*0x28*/ Best.HTTP.Proxies.Proxy <Proxy>k__BackingField;
                static /*0x30*/ Best.HTTP.Shared.Extensions.HeartbeatManager heartbeats;
                static /*0x38*/ Best.HTTP.Shared.Logger.ILogger logger;
                static /*0x40*/ Best.HTTP.Shared.PlatformSupport.FileSystem.IIOService IOService;
                static /*0x48*/ string UserAgent;
                static /*0x50*/ bool _isQuitting;
                static /*0x58*/ string RootFolderName;
                static /*0x60*/ Best.HTTP.Caching.HTTPCache _httpCache;
                static /*0x68*/ bool IsSetupCalled;
                static /*0x70*/ long _lastNetworkBytesSent;
                static /*0x78*/ long _lastNetworkBytesReceived;
                static /*0x80*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferPoolStats bufferPoolStats;

                static /*0x3e5b700*/ HTTPManager();
                static /*0x3e5bac0*/ Best.HTTP.Hosts.Settings.HostSettingsManager get_PerHostSettings();
                static /*0x3e5bb18*/ System.DateTime get_CurrentFrameDateTime();
                static /*0x3e5bb70*/ void set_CurrentFrameDateTime(System.DateTime value);
                static /*0x3e5bbcc*/ System.Func<string> get_RootSaveFolderProvider();
                static /*0x3e5ba34*/ void set_ProxyDetector(Best.HTTP.Proxies.Autodetect.ProxyDetector value);
                static /*0x3e5bc24*/ Best.HTTP.Proxies.Proxy get_Proxy();
                static /*0x3e5bc7c*/ void set_Proxy(Best.HTTP.Proxies.Proxy value);
                static /*0x3e58628*/ Best.HTTP.Shared.Extensions.HeartbeatManager get_Heartbeats();
                static /*0x3e43d08*/ Best.HTTP.Shared.Logger.ILogger get_Logger();
                static /*0x3e5bcdc*/ bool get_IsQuitting();
                static /*0x3e5bd3c*/ void set_IsQuitting(bool value);
                static /*0x3e5bda0*/ Best.HTTP.Caching.HTTPCache get_LocalCache();
                static /*0x3e5bdf8*/ void set_LocalCache(Best.HTTP.Caching.HTTPCache value);
                static /*0x3e5bea4*/ void Setup();
                static /*0x3e5c7fc*/ Best.HTTP.HTTPRequest SendRequest(Best.HTTP.HTTPRequest request);
                static /*0x3e4d138*/ string GetRootSaveFolder();
                static /*0x3e5c9f0*/ void OnUpdate();
                static /*0x3e5d384*/ void OnQuit();
                static /*0x3e5d530*/ void AbortAll();

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Shared.HTTPManager.<> <>9;
                    static /*0x8*/ System.Action<Best.HTTP.HTTPRequest> <>9__42_0;

                    static /*0x3e5d6c0*/ <>c();
                    /*0x3e5d728*/ <>c();
                    /*0x3e5d730*/ void <SendRequest>b__42_0(Best.HTTP.HTTPRequest request);
                }
            }

            enum ThreadingMode
            {
                UnityUpdate = 0,
                Threaded = 1,
                None = 2,
            }

            class HTTPUpdateDelegator : UnityEngine.MonoBehaviour
            {
                static /*0x0*/ Best.HTTP.Shared.HTTPUpdateDelegator instance;
                static /*0x8*/ bool <IsCreated>k__BackingField;
                static /*0x9*/ bool <IsThreadRunning>k__BackingField;
                static /*0xc*/ int <ThreadFrequencyInMS>k__BackingField;
                static /*0x10*/ System.Func<bool> OnBeforeApplicationQuit;
                static /*0x18*/ System.Action<bool> OnApplicationForegroundStateChanged;
                static /*0x20*/ bool isSetupCalled;
                /*0x20*/ Best.HTTP.Shared.ThreadingMode _currentThreadingMode;
                /*0x24*/ int isHTTPManagerOnUpdateRunning;
                /*0x28*/ System.Threading.AutoResetEvent pingEvent;
                /*0x30*/ int updateThreadCount;
                /*0x34*/ int mainThreadId;

                static /*0x3e5dda8*/ HTTPUpdateDelegator();
                static /*0x3e57ac8*/ Best.HTTP.Shared.HTTPUpdateDelegator get_Instance();
                static /*0x3e5d8d4*/ bool get_IsCreated();
                static /*0x3e5d92c*/ void set_IsCreated(bool value);
                static /*0x3e5d98c*/ bool get_IsThreadRunning();
                static /*0x3e5d9e4*/ void set_IsThreadRunning(bool value);
                static /*0x3e5dcec*/ int get_ThreadFrequencyInMS();
                static /*0x3e5dd44*/ void set_ThreadFrequencyInMS(int value);
                static /*0x3e5c274*/ Best.HTTP.Shared.HTTPUpdateDelegator CheckInstance();
                static /*0x3e5e7c0*/ bool UnityApplication_WantsToQuit();
                /*0x3e5edfc*/ HTTPUpdateDelegator();
                /*0x3e5da44*/ Best.HTTP.Shared.ThreadingMode get_CurrentThreadingMode();
                /*0x3e5da4c*/ void set_CurrentThreadingMode(Best.HTTP.Shared.ThreadingMode value);
                /*0x3e5dda0*/ int get_MainThreadId();
                /*0x3e5ddfc*/ void Setup();
                /*0x3e57b14*/ bool IsMainThread();
                /*0x3e5da50*/ void SetThreadingMode(Best.HTTP.Shared.ThreadingMode mode);
                /*0x3e5e144*/ void SwapThreadingMode();
                /*0x3e5e128*/ void PingUpdateThread();
                /*0x3e5e164*/ void ThreadFunc();
                /*0x3e5e60c*/ void Update();
                /*0x3e5e518*/ void CallOnUpdate();
                /*0x3e5e68c*/ void OnDisable();
                /*0x3e5ec44*/ void OnApplicationPause(bool isPaused);
            }

            namespace TLS
            {
                class AbstractTls13Client : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsClient, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication
                {
                    static /*0x0*/ int[] DefaultCipherSuites;
                    /*0x50*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> _sniServerNames;
                    /*0x58*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> _protocols;
                    /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;

                    static /*0x3e6072c*/ AbstractTls13Client();
                    /*0x3e5ee7c*/ AbstractTls13Client(System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> sniServerNames, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3e5ee6c*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x3e5ee74*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x3e5eee0*/ string GetNegotiatedApplicationProtocol();
                    /*0x3e5efa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetSupportedVersions();
                    /*0x3e5f00c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> GetProtocolNames();
                    /*0x3e5f014*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetSniServerNames();
                    /*0x3e5f01c*/ int[] GetSupportedCipherSuites();
                    /*0x3e5f1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                    /*0x3e5f2d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials GetClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                    /*0x3e5f3f0*/ void NotifyServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate serverCertificate);
                    /*0x3e5f504*/ void NotifyAlertReceived(short alertLevel, short alertDescription);
                    /*0x3e5f6a4*/ void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                    /*0x3e5f9ac*/ void NotifyHandshakeBeginning();
                    /*0x3e5fac0*/ void NotifyHandshakeComplete();
                    /*0x3e5fbd4*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                    /*0x3e5fd04*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                    /*0x3e5fe70*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                    /*0x3e5ffe8*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                    /*0x3e60240*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion serverVersion);
                    /*0x3e6039c*/ void NotifySessionID(byte[] sessionID);
                    /*0x3e604cc*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                    /*0x3e605fc*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                }

                class DefaultTls13Client : Best.HTTP.Shared.TLS.AbstractTls13Client
                {
                    /*0x3e607cc*/ DefaultTls13Client(System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> sniServerNames, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                namespace Crypto
                {
                    class FastTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto
                    {
                        /*0x3e608a8*/ FastTlsCrypto(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom entropySource);
                        /*0x3e608b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                        /*0x3e6109c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAesEngine();
                        /*0x3e610f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateCcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                        /*0x3e6114c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateGcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                        /*0x3e611a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher blockCipher);
                    }

                    class FastCbcBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                    {
                        /*0x10*/ byte[] IV;
                        /*0x18*/ byte[] cbcV;
                        /*0x20*/ byte[] cbcNextV;
                        /*0x28*/ int blockSize;
                        /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                        /*0x38*/ bool encrypting;

                        /*0x3e61200*/ FastCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                        /*0x3e6132c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                        /*0x3e6155c*/ int GetBlockSize();
                        /*0x3e61600*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                        /*0x3e61c14*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        /*0x3e61514*/ void Reset();
                        /*0x3e619b8*/ int EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        /*0x3e6175c*/ int DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                    }

                    namespace Impl
                    {
                        class BurstTables8kGcmMultiplier
                        {
                            /*0x10*/ byte[] H;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement[][] T;

                            static /*0x3eb3194*/ void MultiplyHImpl(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            static /*0x3eb35f4*/ void MultiplyHImpl$BurstManaged(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            /*0x3eb35ec*/ BurstTables8kGcmMultiplier();
                            /*0x3eb3198*/ void Init(byte[] H);
                            /*0x3eb34a8*/ void MultiplyH(byte[] x);

                            class MultiplyHImpl_00000730$PostfixBurstDelegate : System.MulticastDelegate
                            {
                                /*0x3eb3708*/ MultiplyHImpl_00000730$PostfixBurstDelegate(object , nint );
                                /*0x3eb37bc*/ void Invoke(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            }

                            class MultiplyHImpl_00000730$BurstDirectCall
                            {
                                static /*0x0*/ nint Pointer;

                                static /*0x3eb37d0*/ void GetFunctionPointerDiscard(ref nint );
                                static /*0x3eb38c0*/ nint GetFunctionPointer();
                                static /*0x3eb3534*/ void Invoke(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            }
                        }

                        class FastAesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                        {
                            static /*0x0*/ byte[] S;
                            static /*0x8*/ byte[] Si;
                            static /*0x10*/ byte[] rcon;
                            static /*0x18*/ uint[] T0;
                            static /*0x20*/ uint[] Tinv0;
                            /*0x10*/ uint[][] W;
                            /*0x18*/ int ROUNDS;
                            /*0x20*/ uint[][] WorkingKey;
                            /*0x28*/ bool forEncryption;
                            /*0x30*/ byte[] s;

                            static /*0x3eb7900*/ FastAesEngine();
                            static /*0x3eb38dc*/ uint Shift(uint r, int shift);
                            static /*0x3eb38e4*/ uint FFmulX(uint x);
                            static /*0x3eb3904*/ uint FFmulX2(uint x);
                            static /*0x3eb3920*/ uint Inv_Mcol(uint x);
                            static /*0x3eb39b8*/ uint SubWord(uint x);
                            /*0x3eb46d0*/ FastAesEngine();
                            /*0x3eb3a7c*/ uint[][] GenerateWorkingKey(byte[] key, bool forEncryption);
                            /*0x3eb46d8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3eb4848*/ int GetBlockSize();
                            /*0x3eb4850*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                            /*0x3eb6480*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb4a50*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                            /*0x3eb5670*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                        }

                        class FastCcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                        {
                            static /*0x0*/ int BlockSize;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                            /*0x18*/ byte[] macBlock;
                            /*0x20*/ bool forEncryption;
                            /*0x28*/ byte[] nonce;
                            /*0x30*/ byte[] initialAssociatedText;
                            /*0x38*/ int macSize;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters keyParam;
                            /*0x48*/ System.IO.MemoryStream associatedText;
                            /*0x50*/ System.IO.MemoryStream data;

                            static /*0x3eb9b34*/ FastCcmBlockCipher();
                            /*0x3eb7ad4*/ FastCcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                            /*0x3eb7d0c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3eb7f90*/ int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff);
                            /*0x3eb8030*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb805c*/ int DoFinal(byte[] outBytes, int outOff);
                            /*0x3eb8110*/ int DoFinal(System.Span<byte> output);
                            /*0x3eb828c*/ void Reset();
                            /*0x3eb82d4*/ int GetOutputSize(int len);
                            /*0x3eb8374*/ int ProcessPacket(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb91c0*/ int CalculateMac(System.ReadOnlySpan<byte> data, System.Span<byte> macBlock);
                            /*0x3eb7f24*/ int GetMacSize(bool forEncryption, int requestedMacBits);
                            /*0x3eb9aa8*/ int GetAssociatedTextLength();
                            /*0x3eb9a90*/ bool HasAssociatedText();
                        }

                        class FastGcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                        {
                            /*0x10*/ byte[] ctrBlock;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                            /*0x20*/ Best.HTTP.Shared.TLS.Crypto.Impl.BurstTables8kGcmMultiplier multiplier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator exp;
                            /*0x30*/ bool forEncryption;
                            /*0x31*/ bool initialised;
                            /*0x34*/ int macSize;
                            /*0x38*/ byte[] lastKey;
                            /*0x40*/ byte[] nonce;
                            /*0x48*/ byte[] initialAssociatedText;
                            /*0x50*/ byte[] H;
                            /*0x58*/ byte[] J0;
                            /*0x60*/ byte[] bufBlock;
                            /*0x68*/ byte[] macBlock;
                            /*0x70*/ byte[] S;
                            /*0x78*/ byte[] S_at;
                            /*0x80*/ byte[] S_atPre;
                            /*0x88*/ byte[] counter;
                            /*0x90*/ uint counter32;
                            /*0x94*/ uint blocksRemaining;
                            /*0x98*/ int bufOff;
                            /*0xa0*/ ulong totalLength;
                            /*0xa8*/ byte[] atBlock;
                            /*0xb0*/ int atBlockPos;
                            /*0xb8*/ ulong atLength;
                            /*0xc0*/ ulong atLengthPre;

                            /*0x3eb9b80*/ FastGcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c);
                            /*0x3eb9b84*/ FastGcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier m);
                            /*0x3eb9d44*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3eba684*/ int GetOutputSize(int len);
                            /*0x3eba5a0*/ void ProcessAadBytes(byte[] inBytes, int inOff, int len);
                            /*0x3eba6ac*/ void ProcessAadBytes(System.ReadOnlySpan<byte> input);
                            /*0x3ebaa34*/ void InitCipher();
                            /*0x3ebab60*/ int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff);
                            /*0x3ebad04*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3ebc8e4*/ int DoFinal(byte[] output, int outOff);
                            /*0x3ebc98c*/ int DoFinal(System.Span<byte> output);
                            /*0x3ebd658*/ void Reset();
                            /*0x3ebd4b8*/ void Reset(bool clearMac);
                            /*0x3ebc6ec*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3ebbe3c*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3ebc138*/ void EncryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3ebd660*/ void GetNextCtrBlock(System.Span<byte> block);
                            /*0x3ebd2e8*/ void ProcessPartial(System.Span<byte> partialBlock, System.Span<byte> output);
                            /*0x3eba45c*/ void gHASH(byte[] Y, byte[] b, int len);
                            /*0x3ebd7bc*/ void gHASHBlock(byte[] Y, System.ReadOnlySpan<byte> b);
                            /*0x3ebd8b8*/ void gHASHPartial(byte[] Y, System.ReadOnlySpan<byte> b);
                            /*0x3ebd9c4*/ void gHASHPartial(byte[] Y, byte[] b, int off, int len);
                            /*0x3eba9bc*/ void CheckStatus();
                        }

                        class FastGcmBlockCipherHelper
                        {
                            static /*0x3ebda80*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, System.Span<byte> ctrBlock, System.Span<byte> S, int BlockSize);
                            static /*0x3ebda7c*/ void DecryptBlock_Impl(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            static /*0x3ebdc68*/ void DecryptBlock_Impl$BurstManaged(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);

                            class DecryptBlock_Impl_000007A2$PostfixBurstDelegate : System.MulticastDelegate
                            {
                                /*0x3ebde00*/ DecryptBlock_Impl_000007A2$PostfixBurstDelegate(object , nint );
                                /*0x3ebdeb4*/ void Invoke(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            }

                            class DecryptBlock_Impl_000007A2$BurstDirectCall
                            {
                                static /*0x0*/ nint Pointer;

                                static /*0x3ebdecc*/ void GetFunctionPointerDiscard(ref nint );
                                static /*0x3ebdfbc*/ nint GetFunctionPointer();
                                static /*0x3ebdb68*/ void Invoke(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            }
                        }

                        class FastTlsAeadCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                            /*0x18*/ int m_keySize;
                            /*0x1c*/ int m_macSize;
                            /*0x20*/ int m_fixed_iv_length;
                            /*0x24*/ int m_record_iv_length;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_decryptCipher;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_encryptCipher;
                            /*0x38*/ byte[] m_decryptNonce;
                            /*0x40*/ byte[] m_encryptNonce;
                            /*0x48*/ bool m_isTlsV13;
                            /*0x4c*/ int m_nonceMode;

                            static /*0x3ebeab4*/ int GetNonceMode(bool isTLSv13, int aeadType);
                            /*0x3ebdfd8*/ FastTlsAeadCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl decryptCipher, int keySize, int macSize, int aeadType);
                            /*0x3ebeb98*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                            /*0x3ebebb4*/ int GetPlaintextLimit(int ciphertextLimit);
                            /*0x3ebebd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                            /*0x3ebf2fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int ciphertextOffset, int ciphertextLength);
                            /*0x3ebf820*/ void RekeyDecoder();
                            /*0x3ebf88c*/ void RekeyEncoder();
                            /*0x3ebf8f4*/ bool get_UsesOpaqueRecordType();
                            /*0x3ebf1a8*/ byte[] GetAdditionalData(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int ciphertextLength, int plaintextLength);
                            /*0x3ebeb1c*/ void RekeyCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, bool serverSecret);
                            /*0x3ebf8fc*/ void Setup13Cipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm);
                        }

                        class FastTlsAeadCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                        {
                            /*0x10*/ bool m_isEncrypting;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher m_cipher;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                            /*0x3ebfc18*/ FastTlsAeadCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher cipher, bool isEncrypting);
                            /*0x3ebfc54*/ void SetKey(byte[] key, int keyOff, int keyLen);
                            /*0x3ebfcdc*/ void SetKey(System.ReadOnlySpan<byte> key);
                            /*0x3ebfd54*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                            /*0x3ebfe60*/ int GetOutputSize(int inputLength);
                            /*0x3ebff0c*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                            /*0x3ec0224*/ void Reset();
                        }

                        class FastTlsBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                            /*0x18*/ byte[] m_randomData;
                            /*0x20*/ bool m_encryptThenMac;
                            /*0x21*/ bool m_useExplicitIV;
                            /*0x22*/ bool m_acceptExtraPadding;
                            /*0x23*/ bool m_useExtraPadding;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_decryptCipher;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_encryptCipher;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_readMac;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_writeMac;

                            /*0x3ec02c8*/ FastTlsBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl decryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac, int cipherKeySize);
                            /*0x3ec139c*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                            /*0x3ec14e8*/ int GetPlaintextLimit(int ciphertextLimit);
                            /*0x3ec164c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                            /*0x3ec1cb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                            /*0x3ec21b0*/ void RekeyDecoder();
                            /*0x3ec21ec*/ void RekeyEncoder();
                            /*0x3ec2228*/ bool get_UsesOpaqueRecordType();
                            /*0x3ec2230*/ int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize);
                            /*0x3ec23d0*/ int ChooseExtraPadBlocks(int max);
                            /*0x3ec2510*/ int GetCiphertextLength(int blockSize, int macSize, int maxPadding, int plaintextLength);
                        }

                        class FastTlsBlockCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl
                        {
                            /*0x10*/ bool m_isEncrypting;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher m_cipher;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                            /*0x3ec2554*/ FastTlsBlockCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, bool isEncrypting);
                            /*0x3ec2590*/ void SetKey(System.ReadOnlySpan<byte> key);
                            /*0x3ec2608*/ void Init(System.ReadOnlySpan<byte> iv);
                            /*0x3ec2704*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                            /*0x3ec2874*/ int GetBlockSize();
                        }
                    }
                }
            }

            namespace Streams
            {
                class BufferPoolMemoryStream : System.IO.Stream
                {
                    /*0x28*/ bool canWrite;
                    /*0x29*/ bool allowGetBuffer;
                    /*0x2c*/ int capacity;
                    /*0x30*/ int length;
                    /*0x38*/ byte[] internalBuffer;
                    /*0x40*/ int initialIndex;
                    /*0x44*/ bool expandable;
                    /*0x45*/ bool streamClosed;
                    /*0x48*/ int position;
                    /*0x4c*/ int dirty_bytes;
                    /*0x50*/ bool releaseInternalBuffer;

                    /*0x3ec2918*/ BufferPoolMemoryStream();
                    /*0x3ec2920*/ BufferPoolMemoryStream(int capacity);
                    /*0x3ec2bac*/ BufferPoolMemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible, bool releaseBuffer, bool canExpand);
                    /*0x3ec2a60*/ void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible, bool releaseBuffer, bool canExpand);
                    /*0x3ec2c64*/ void CheckIfClosedThrowDisposed();
                    /*0x3ec2cc0*/ bool get_CanRead();
                    /*0x3ec2cd0*/ bool get_CanSeek();
                    /*0x3ec2ce0*/ bool get_CanWrite();
                    /*0x3ec2d00*/ void set_Capacity(int value);
                    /*0x3ec2f0c*/ long get_Length();
                    /*0x3ec2f30*/ long get_Position();
                    /*0x3ec2f54*/ void set_Position(long value);
                    /*0x3ec301c*/ void Dispose(bool disposing);
                    /*0x3ec30a4*/ void Flush();
                    /*0x3ec30a8*/ byte[] GetBuffer();
                    /*0x3ec30f4*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3ec3250*/ int ReadByte();
                    /*0x3ec32a8*/ long Seek(long offset, System.IO.SeekOrigin loc);
                    /*0x3ec3420*/ int CalculateNewCapacity(int minimum);
                    /*0x3ec3464*/ void Expand(int newSize);
                    /*0x3ec34b8*/ void SetLength(long value);
                    /*0x3ec35dc*/ byte[] ToArray();
                    /*0x3ec35e8*/ byte[] ToArray(bool canBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ec36e8*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment ToBufferSegment();
                    /*0x3ec37bc*/ void Write(byte[] buffer, int offset, int count);
                    /*0x3ec394c*/ void WriteByte(byte value);
                }

                class BufferSegmentStream : System.IO.Stream
                {
                    /*0x28*/ long _length;
                    /*0x30*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> bufferList;
                    /*0x38*/ byte[] _tempByteArray;

                    /*0x3ec3ef8*/ BufferSegmentStream();
                    /*0x3ec3a0c*/ bool get_CanRead();
                    /*0x3ec3a14*/ bool get_CanSeek();
                    /*0x3ec3a1c*/ bool get_CanWrite();
                    /*0x3ec3a24*/ long get_Length();
                    /*0x3ec3a2c*/ long get_Position();
                    /*0x3ec3a34*/ void set_Position(long value);
                    /*0x3ec3a38*/ int ReadByte();
                    /*0x3ec3a8c*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3ec3ca4*/ void Write(byte[] buffer, int offset, int count);
                    /*0x3ec3ce4*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                    /*0x3ec3db0*/ void Reset();
                    /*0x3ec3e58*/ void Dispose(bool disposing);
                    /*0x3ec3e84*/ void Flush();
                    /*0x3ec3e88*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x3ec3ec0*/ void SetLength(long value);
                }

                class PeekableContentProviderStream : Best.HTTP.Shared.Streams.PeekableStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IPeekableContentProvider
                {
                    /*0x40*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer <Consumer>k__BackingField;

                    /*0x3ec4b28*/ PeekableContentProviderStream();
                    /*0x3ec48c8*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer get_Consumer();
                    /*0x3ec48d0*/ void set_Consumer(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer value);
                    /*0x3ec48d8*/ void SetTwoWayBinding(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                    /*0x3ec499c*/ void Unbind();
                    /*0x3ec4a4c*/ void UnbindIf(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                }

                class PeekableIncomingSegmentStream : Best.HTTP.Shared.Streams.PeekableStream
                {
                    /*0x40*/ int peek_listIdx;
                    /*0x44*/ int peek_pos;

                    /*0x3ec4c94*/ PeekableIncomingSegmentStream();
                    /*0x3ec4b38*/ void BeginPeek();
                    /*0x3ec4bb8*/ int PeekByte();
                }

                class PeekableStream : Best.HTTP.Shared.Streams.BufferSegmentStream
                {
                    /*0x3ec4b30*/ PeekableStream();
                    /*0x38159dc*/ void BeginPeek();
                    /*0x3814574*/ int PeekByte();
                }

                class StreamList : System.IO.Stream
                {
                    /*0x28*/ System.IO.Stream[] Streams;
                    /*0x30*/ int CurrentIdx;

                    /*0x3ec4c9c*/ StreamList(System.IO.Stream[] streams);
                    /*0x3ec4d18*/ void AppendStream(System.IO.Stream stream);
                    /*0x3ec4dc8*/ bool get_CanRead();
                    /*0x3ec4e1c*/ bool get_CanSeek();
                    /*0x3ec4e24*/ bool get_CanWrite();
                    /*0x3ec4e78*/ void Flush();
                    /*0x3ec4ef8*/ long get_Length();
                    /*0x3ec4f84*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3ec5254*/ void Write(byte[] buffer, int offset, int count);
                    /*0x3ec52a8*/ void Dispose(bool disposing);
                    /*0x3ec548c*/ long get_Position();
                    /*0x3ec54d8*/ void set_Position(long value);
                    /*0x3ec5524*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x3ec557c*/ void SetLength(long value);
                }

                class WriteOnlyBufferedStream : System.IO.Stream
                {
                    /*0x28*/ int _position;
                    /*0x30*/ byte[] buffer;
                    /*0x38*/ int _bufferSize;
                    /*0x40*/ System.IO.Stream stream;
                    /*0x48*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                    /*0x3ec5650*/ WriteOnlyBufferedStream(System.IO.Stream stream, int bufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ec55c8*/ bool get_CanRead();
                    /*0x3ec55d0*/ bool get_CanSeek();
                    /*0x3ec55d8*/ bool get_CanWrite();
                    /*0x3ec55e0*/ long get_Length();
                    /*0x3ec55fc*/ long get_Position();
                    /*0x3ec5604*/ void set_Position(long value);
                    /*0x3ec59b8*/ void Flush();
                    /*0x3ec5b98*/ void Write(byte[] bufferFrom, int offset, int count);
                    /*0x3ec5c94*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3ec5c9c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x3ec5ca4*/ void SetLength(long value);
                    /*0x3ec5ca8*/ void Dispose(bool disposing);
                }
            }

            namespace PlatformSupport
            {
                namespace Threading
                {
                    struct ReadLock : System.IDisposable
                    {
                        /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                        /*0x18*/ bool locked;

                        /*0x3ec5d84*/ ReadLock(System.Threading.ReaderWriterLockSlim rwLock);
                        /*0x3ec5dd0*/ void Dispose();
                    }

                    struct WriteLock : System.IDisposable
                    {
                        /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                        /*0x18*/ bool locked;

                        /*0x3ec5dfc*/ WriteLock(System.Threading.ReaderWriterLockSlim rwLock);
                        /*0x3ec5e58*/ void Dispose();
                    }

                    class ThreadedRunner
                    {
                        static /*0x0*/ int _shortLivingThreads;
                        static /*0x4*/ int _LongLivingThreads;

                        static /*0x3ec5e84*/ void SetThreadName(string name);
                        static /*0x3910ae8*/ void RunShortLiving<T>(System.Action<T> job, T param);
                        static /*0x3910ae8*/ void RunShortLiving<T1, T2, T3, T4>(System.Action<T1, T2, T3, T4> job, T1 param1, T2 param2, T3 param3, T4 param4);
                        static /*0x3ec609c*/ void RunShortLiving(System.Action job);
                        static /*0x3ec6164*/ void RunLongLiving(System.Action job);

                        struct IncDecShortLiving : System.IDisposable
                        {
                            /*0x3ec626c*/ IncDecShortLiving(bool dummy);
                            /*0x3ec62b4*/ void Dispose();
                        }

                        struct IncDecLongLiving : System.IDisposable
                        {
                            /*0x3ec62fc*/ IncDecLongLiving(bool dummy);
                            /*0x3ec6348*/ void Dispose();
                        }

                        class <>c__DisplayClass10_0<T1, T2, T3, T4>
                        {
                            /*0x0*/ System.Action<T1, T2, T3, T4> job;
                            /*0x0*/ T1 param1;
                            /*0x0*/ T2 param2;
                            /*0x0*/ T3 param3;
                            /*0x0*/ T4 param4;

                            /*0x38159dc*/ <>c__DisplayClass10_0();
                            /*0x3816710*/ void <RunShortLiving>b__0(object _);
                        }

                        class <>c__DisplayClass11_0
                        {
                            /*0x10*/ System.Action job;

                            /*0x3ec615c*/ <>c__DisplayClass11_0();
                            /*0x3ec6394*/ void <RunShortLiving>b__0(object param);
                        }

                        class <>c__DisplayClass12_0
                        {
                            /*0x10*/ System.Action job;

                            /*0x3ec6264*/ <>c__DisplayClass12_0();
                            /*0x3ec6430*/ void <RunLongLiving>b__0(object param);
                        }

                        class <>c__DisplayClass7_0<T>
                        {
                            /*0x0*/ System.Action<T> job;
                            /*0x0*/ T param;

                            /*0x38159dc*/ <>c__DisplayClass7_0();
                            /*0x3816710*/ void <RunShortLiving>b__0(object _);
                        }
                    }
                }

                namespace Text
                {
                    class StringBuilderPool
                    {
                        static /*0x0*/ bool _isEnabled;
                        static /*0x8*/ System.TimeSpan RemoveOlderThan;
                        static /*0x10*/ System.TimeSpan RunMaintenanceEvery;
                        static /*0x18*/ System.DateTime lastMaintenance;
                        static /*0x20*/ System.Threading.ReaderWriterLockSlim rwLock;
                        static /*0x28*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Text.StringBuilderPool.BuilderShelf> pooledBuilders;

                        static /*0x3ec6d1c*/ StringBuilderPool();
                        static /*0x3ec64cc*/ System.Text.StringBuilder Get(int lengthHint);
                        static /*0x3ec67e0*/ string ReleaseAndGrab(System.Text.StringBuilder builder);
                        static /*0x3ec6a3c*/ void Maintain();

                        struct BuilderShelf
                        {
                            /*0x10*/ System.Text.StringBuilder builder;
                            /*0x18*/ System.DateTime released;

                            /*0x3ec69c4*/ BuilderShelf(System.Text.StringBuilder sb);
                        }
                    }
                }

                namespace Network
                {
                    namespace Tcp
                    {
                        interface IPeekableContentProvider
                        {
                            /*0x3816710*/ void SetTwoWayBinding(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                        }

                        interface IContentConsumer
                        {
                            /*0x3816710*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                            /*0x38159dc*/ void UnsetBinding();
                            /*0x38159dc*/ void OnContent();
                            /*0x38159dc*/ void OnConnectionClosed();
                            /*0x3816710*/ void OnError(System.Exception ex);
                        }

                        enum NegotiationSteps
                        {
                            Start = 0,
                            DNSQuery = 1,
                            TCPRace = 2,
                            Proxy = 3,
                            TLSNegotiation = 4,
                            Finish = 5,
                        }

                        interface INegotiationPeer
                        {
                            /*0x3814a3c*/ System.Collections.Generic.List<string> GetSupportedProtocolNames(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator);
                            bool MustStopAdvancingToNextStep(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps finishedStep, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps nextStep, System.Exception error);
                            void EvaluateProxyNegotiationFailure(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error, bool resendForAuthentication);
                            /*0x3816810*/ void OnNegotiationFailed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error);
                            /*0x3816958*/ void OnNegotiationFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string negotiatedProtocol);
                        }

                        class NegotiationParameters
                        {
                            /*0x10*/ Best.HTTP.Proxies.Proxy proxy;
                            /*0x18*/ bool createProxyTunel;
                            /*0x20*/ System.Uri targetUri;
                            /*0x28*/ bool negotiateTLS;
                            /*0x30*/ System.Threading.CancellationToken token;
                            /*0x38*/ Best.HTTP.Hosts.Settings.HostSettings hostSettings;
                            /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext context;

                            /*0x3ec6e90*/ NegotiationParameters();
                        }

                        class Negotiator
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer _peer;
                            /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters _parameters;
                            /*0x20*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                            /*0x28*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream _stream;

                            /*0x3ec6eb0*/ Negotiator(Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer peer, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters parameters);
                            /*0x3ec6e98*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters get_Parameters();
                            /*0x3ec6ea0*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer get_Streamer();
                            /*0x3ec6ea8*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_Stream();
                            /*0x3ec6ef4*/ void Start();
                            /*0x3ec8304*/ void OnCancellationRequested();
                            /*0x3ec8574*/ void OnDNSCacheQueryFinished(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters dnsParameters, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryResult result);
                            /*0x3ec91c0*/ void OnTCPRaceFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters parameters, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceResult raceResult);
                            /*0x3ecab18*/ void OnProxyNegotiated(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                            /*0x3ecadd0*/ void OnProxyNegotiationFailed(Best.HTTP.Proxies.ProxyConnectParameters parameters, System.Exception error, bool resendForAuthentication);
                            /*0x3ec9e48*/ void NegotiateTLS();
                            /*0x3ecb658*/ void OnFramework_TLSNegotiated(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string alpn, System.Exception error);
                            /*0x3ecb954*/ void OnBC_TLSNegotiated(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingBCTLSStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.Shared.TLS.AbstractTls13Client tlsClient, System.Exception error);
                            /*0x3ec9894*/ void SetupSocket(System.Net.Sockets.Socket socket, Best.HTTP.Hosts.Settings.HostSettings hostSettings);
                        }

                        class TCPRingmasterSettings
                        {
                            /*0x10*/ int MaxSimultaneousRacers;
                            /*0x14*/ bool ShuffleAddresses;
                            /*0x18*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters> CustomAddressShuffleAlgorithm;
                            /*0x20*/ System.TimeSpan CancellationCheckingGranularity;

                            /*0x3ecbe50*/ TCPRingmasterSettings();
                            /*0x3ecbc68*/ string ToString();
                        }

                        class TCPRaceResult
                        {
                            /*0x10*/ System.Net.Sockets.Socket WinningSocket;
                            /*0x18*/ System.Exception Error;

                            /*0x3ecbecc*/ TCPRaceResult(System.Net.Sockets.Socket socket, System.Exception ex);
                            /*0x3ecbf10*/ string ToString();
                        }

                        class Race
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters Parameters;
                            /*0x18*/ int NextAddressIndex;
                            /*0x1c*/ int RunningLanes;

                            /*0x3ecc134*/ Race();
                            /*0x3ecbf7c*/ string ToString();
                        }

                        class RacingLane
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Race Race;
                            /*0x18*/ int AddressIndex;
                            /*0x1c*/ int LaneIndex;
                            /*0x20*/ System.Net.Sockets.Socket Socket;

                            /*0x3ecc32c*/ RacingLane();
                            /*0x3ecc13c*/ string ToString();
                        }

                        class TCPRaceParameters
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] Addresses;
                            /*0x18*/ string Hostname;
                            /*0x20*/ int Port;
                            /*0x28*/ System.Threading.CancellationToken Token;
                            /*0x30*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceResult> AnnounceWinnerCallback;
                            /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext Context;

                            /*0x3ec8924*/ TCPRaceParameters();
                            /*0x3ecc334*/ string ToString();
                        }

                        class TCPRingmaster
                        {
                            static /*0x3ec892c*/ void StartCompetion(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters parameters);
                            static /*0x3ecc72c*/ void OnLaneFinished(System.IAsyncResult ar);
                            static /*0x3ecdf28*/ void OnSocketDisconnect(System.IAsyncResult ar);
                            static /*0x3ecc630*/ void ShuffleAddresses(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] addresses);
                            static /*0x3ece37c*/ bool CheckForCanceled(System.DateTime now, object context);
                        }

                        interface ITCPStreamerContentConsumer
                        {
                            /*0x381630c*/ void set_MaxBufferSize(long value);
                            /*0x3815c80*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                            /*0x3816710*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                            /*0x3816710*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                        }

                        class ReadState
                        {
                            /*0x10*/ int minReceiveBufferSize;
                            /*0x18*/ byte[] receiveBuffer;
                            /*0x20*/ int isReceiving;
                            /*0x28*/ long totalReceived;
                            /*0x30*/ long bufferedLength;
                            /*0x38*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> bufferedSegments;

                            /*0x3ece7e0*/ ReadState();
                        }

                        class WriteState
                        {
                            /*0x10*/ byte[] _writeBuffer;
                            /*0x18*/ int _writeInProgress;
                            /*0x20*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segmentsToWrite;
                            /*0x28*/ long bufferedLength;
                            /*0x30*/ System.Threading.AutoResetEvent blockEvent;

                            /*0x3ece868*/ WriteState();
                        }

                        class TCPStreamer : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer _contentConsumer;
                            /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ReadState readState;
                            /*0x20*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.WriteState writeState;
                            /*0x28*/ System.Net.Sockets.Socket _socket;
                            /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext _loggingContext;
                            /*0x38*/ bool _disposed;
                            /*0x3c*/ int _closed;
                            /*0x40*/ int _isDisconnected;
                            /*0x44*/ bool _closeInitiatedByServer;
                            /*0x48*/ uint MaxBufferedReadAmount;
                            /*0x4c*/ uint MaxBufferedWriteAmount;

                            /*0x3ec9ad4*/ TCPStreamer(System.Net.Sockets.Socket socket, uint maxReadBufferSize, uint maxWriteBufferSize, Best.HTTP.Shared.Logger.LoggingContext _parentLoggingContext);
                            /*0x3ece92c*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer get_ContentConsumer();
                            /*0x3ece934*/ void set_ContentConsumer(Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer value);
                            /*0x3ece93c*/ System.Net.Sockets.Socket get_Socket();
                            /*0x3ece944*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                            /*0x3ece94c*/ bool get_IsConnectionClosed();
                            /*0x3ece978*/ long get_Length();
                            /*0x3ecef14*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment DequeueReceived();
                            /*0x3eceb90*/ void BeginReceive();
                            /*0x3ecf02c*/ void OnReceived(System.IAsyncResult asyncResult);
                            /*0x3ecf6a8*/ void EnqueueToSend(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                            /*0x3ecf974*/ bool SendFromQueue();
                            /*0x3ecfab0*/ void OnWroteToNetwork(System.IAsyncResult ar);
                            /*0x3ec84c0*/ void Dispose();
                            /*0x3ed0398*/ void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                            /*0x3ed008c*/ void Close();
                            /*0x3ed0448*/ void OnDisconnected(System.IAsyncResult ar);
                        }

                        namespace Streams
                        {
                            class FrameworkTLSByteForwarder : System.IO.Stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x28*/ long _length;
                                /*0x30*/ long _maxBufferSize;
                                /*0x38*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x48*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer _contentConsumer;
                                /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segmentsToReadFrom;
                                /*0x58*/ System.Threading.AutoResetEvent _are;
                                /*0x60*/ System.Threading.ReaderWriterLockSlim _rws;
                                /*0x68*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment _currentReadSegment;
                                /*0x78*/ int _pullContentInProgress;

                                /*0x3ed0990*/ FrameworkTLSByteForwarder(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer contentConsumer, long maxBufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x3ed08dc*/ bool get_CanRead();
                                /*0x3ed08e4*/ bool get_CanSeek();
                                /*0x3ed08ec*/ bool get_CanWrite();
                                /*0x3ed08f4*/ long get_Length();
                                /*0x3ed08fc*/ long get_Position();
                                /*0x3ed0934*/ void set_Position(long value);
                                /*0x3ed096c*/ long get_MaxBufferSize();
                                /*0x3ed0984*/ void set_MaxBufferSize(long value);
                                /*0x3ed0b74*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                                /*0x3ed0cc0*/ void PullContentFromStreamer();
                                /*0x3ed0fc4*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed120c*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed12c0*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ed1bec*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ed1eac*/ void Flush();
                                /*0x3ed1eb0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ed1ee8*/ void SetLength(long value);
                                /*0x3ed1f20*/ void Dispose(bool disposing);
                            }

                            class FrameworkTLSStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                static /*0x0*/ bool loggedWarning;
                                /*0x48*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer, string, System.Exception> OnNegotiated;
                                /*0x50*/ long _maxBufferSize;
                                /*0x58*/ string _targetHost;
                                /*0x60*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x68*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSByteForwarder _forwarder;
                                /*0x70*/ System.Net.Security.SslStream _sslStream;
                                /*0x78*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x80*/ Best.HTTP.Hosts.Settings.HostSettings _hostSettings;
                                /*0x88*/ int peek_listIdx;
                                /*0x8c*/ int peek_pos;
                                /*0x90*/ object locker;
                                /*0x98*/ int _reading;

                                /*0x3ecb344*/ FrameworkTLSStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string targetHost, Best.HTTP.Hosts.Settings.HostSettings hostSettings);
                                /*0x3ed1fa0*/ long get_MaxBufferSize();
                                /*0x3ed1fb8*/ void set_MaxBufferSize(long value);
                                /*0x3ed1fc4*/ bool OnUserCertificationValidation(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
                                /*0x3ed2308*/ System.Security.Cryptography.X509Certificates.X509Certificate OnUserCertificationSelection(object sender, string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
                                /*0x3ed26a0*/ void OnAuthenticatedAsClient(System.IAsyncResult ar);
                                /*0x3ed2d00*/ bool CallOnNegotiated(string alpn, System.Exception error);
                                /*0x3ed32fc*/ void BeginPeek();
                                /*0x3ed337c*/ int PeekByte();
                                /*0x3ed3458*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed2fc8*/ void BeginRead();
                                /*0x3ed349c*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed3548*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ed363c*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ed3660*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                                /*0x3ed3784*/ void Flush();
                                /*0x3ed37a8*/ void Dispose(bool disposing);
                                /*0x3ed37e0*/ void <>n__0(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);

                                class <>c__DisplayClass24_0
                                {
                                    /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream <>4__this;
                                    /*0x18*/ byte[] buffer;

                                    /*0x3ed3494*/ <>c__DisplayClass24_0();
                                    /*0x3ed37e8*/ void <BeginRead>b__0(System.Threading.Tasks.Task<int> ti);
                                }
                            }

                            class NonblockingBCTLSStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x48*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingBCTLSStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer, Best.HTTP.Shared.TLS.AbstractTls13Client, System.Exception> OnNegotiated;
                                /*0x50*/ long _maxBufferSize;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol _tlsClientProtocol;
                                /*0x60*/ Best.HTTP.Shared.TLS.AbstractTls13Client _tlsClient;
                                /*0x68*/ object locker;
                                /*0x70*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x78*/ int _sendBufferSize;
                                /*0x7c*/ bool _disposeStreamer;
                                /*0x80*/ int peek_listIdx;
                                /*0x84*/ int peek_pos;
                                /*0x88*/ bool _disposed;

                                /*0x3ecb1a4*/ NonblockingBCTLSStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol tlsClientProtocol, Best.HTTP.Shared.TLS.AbstractTls13Client tlsClient, bool disposeStreamer, uint maxBufferSize);
                                /*0x3ed3d04*/ long get_MaxBufferSize();
                                /*0x3ed3d1c*/ void set_MaxBufferSize(long value);
                                /*0x3ed3edc*/ void BeginPeek();
                                /*0x3ed4004*/ int PeekByte();
                                /*0x3ed41ac*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed4860*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed4540*/ void PullContentFromStreamer();
                                /*0x3ed4954*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ed4b78*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ed4e64*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                                /*0x3ed3d28*/ bool CallOnNegotiated(System.Exception error);
                                /*0x3ed5028*/ void Dispose(bool disposing);
                            }

                            class NonblockingTCPStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x48*/ long _maxBufferSize;
                                /*0x50*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x58*/ bool _disposeStreamer;
                                /*0x5c*/ int peek_listIdx;
                                /*0x60*/ int peek_pos;
                                /*0x68*/ object _locker;

                                /*0x3ec9d80*/ NonblockingTCPStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, bool disposeStreamer, uint maxBufferSize);
                                /*0x3ed51c8*/ long get_MaxBufferSize();
                                /*0x3ed51e0*/ void set_MaxBufferSize(long value);
                                /*0x3ed51ec*/ void BeginPeek();
                                /*0x3ed5314*/ int PeekByte();
                                /*0x3ed54bc*/ void Dispose(bool disposing);
                                /*0x3ed55c4*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ed5730*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                                /*0x3ed5748*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ed58f4*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed5a44*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ed5874*/ void DequeueFromStreamer();
                            }

                            class NonblockingUnderlyingStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream
                            {
                                /*0x48*/ System.IO.Stream _stream;
                                /*0x50*/ int _receiving;
                                /*0x54*/ uint _maxBufferSize;
                                /*0x58*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x60*/ object _locker;
                                /*0x68*/ int peek_listIdx;
                                /*0x6c*/ int peek_pos;

                                /*0x3ed5af0*/ NonblockingUnderlyingStream(System.IO.Stream stream, uint maxBufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x3ed5c04*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ed5d14*/ void BeginReceive();
                                /*0x3ed6250*/ void OnReceived(System.IAsyncResult ar);
                                /*0x3ed6920*/ void BeginPeek();
                                /*0x3ed6a48*/ int PeekByte();
                                /*0x3ed6bf0*/ void Dispose(bool disposing);
                            }
                        }
                    }

                    namespace DNS
                    {
                        namespace Cache
                        {
                            struct DNSQueryResult
                            {
                                /*0x10*/ string HostName;
                                /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] Addresses;
                                /*0x20*/ System.Exception Error;

                                /*0x3ed6c1c*/ DNSQueryResult(string hostName, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] addresses, System.Exception error);
                                /*0x3ed6c60*/ string ToString();
                            }

                            class DNSIPAddress
                            {
                                /*0x10*/ System.Net.IPAddress <IPAddress>k__BackingField;
                                /*0x18*/ bool <IsWorkedLastTime>k__BackingField;

                                /*0x3ed6f00*/ DNSIPAddress(System.Net.IPAddress iPAddress);
                                /*0x3ed6edc*/ System.Net.IPAddress get_IPAddress();
                                /*0x3ed6ee4*/ void set_IPAddress(System.Net.IPAddress value);
                                /*0x3ed6eec*/ bool get_IsWorkedLastTime();
                                /*0x3ed6ef4*/ void set_IsWorkedLastTime(bool value);
                                /*0x3ed6f3c*/ string ToString();
                            }

                            class DNSCacheOptions
                            {
                                /*0x10*/ System.TimeSpan RefreshAfter;
                                /*0x18*/ System.TimeSpan RemoveAfter;
                                /*0x20*/ System.TimeSpan CancellationCheckGranularity;
                                /*0x28*/ System.TimeSpan MaintenanceFrequency;

                                /*0x3ed6fd4*/ DNSCacheOptions();
                            }

                            class DNSQueryParameters
                            {
                                /*0x10*/ UnityEngine.Hash128 <Key>k__BackingField;
                                /*0x20*/ System.Uri <Address>k__BackingField;
                                /*0x28*/ System.Threading.CancellationToken Token;
                                /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext Context;
                                /*0x38*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryResult> Callback;

                                /*0x3ec7254*/ DNSQueryParameters(System.Uri address);
                                /*0x3ed7074*/ UnityEngine.Hash128 get_Key();
                                /*0x3ed7080*/ void set_Key(UnityEngine.Hash128 value);
                                /*0x3ed7088*/ string get_Hostname();
                                /*0x3ed70a4*/ System.Uri get_Address();
                                /*0x3ed70ac*/ void set_Address(System.Uri value);
                                /*0x3ed70b4*/ bool get_IsPrefetch();
                                /*0x3ed70c4*/ string ToString();
                            }

                            class DNSCache
                            {
                                static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheOptions Options;
                                static /*0x8*/ System.Collections.Concurrent.ConcurrentDictionary<UnityEngine.Hash128, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry> _cache;
                                static /*0x10*/ int _isMaintenanceScheduled;

                                static /*0x3ed9a08*/ DNSCache();
                                static /*0x3ed7154*/ void Prefetch(string hostName);
                                static /*0x3ecdc88*/ void ReportAsNonWorking(string hostName, System.Net.IPAddress address, Best.HTTP.Shared.Logger.LoggingContext context);
                                static /*0x3ec72ac*/ void Query(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters parameters);
                                static /*0x3ed74f0*/ void OnGetHostAddresses(System.IAsyncResult ar);
                                static /*0x3ed8838*/ bool CheckForCanceled(System.DateTime now, object context);
                                static /*0x3ed8ca0*/ bool Maintenance(System.DateTime now, object context);

                                class <>c__DisplayClass7_0
                                {
                                    /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters parameters;
                                    /*0x18*/ System.Net.IPAddress[] addresses;

                                    /*0x3ed8830*/ <>c__DisplayClass7_0();
                                    /*0x3ed9ae8*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry <OnGetHostAddresses>g__AddCacheEntry|0(UnityEngine.Hash128 key);
                                    /*0x3ed9dac*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry <OnGetHostAddresses>g__UpdateCacheEntry|1(UnityEngine.Hash128 key, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry oldEntry);
                                }
                            }

                            class DNSCacheEntry
                            {
                                /*0x10*/ UnityEngine.Hash128 Key;
                                /*0x20*/ string Host;
                                /*0x28*/ System.DateTime ResolvedAt;
                                /*0x30*/ long _lastUsedTicks;
                                /*0x38*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> _resolvedAddresses;
                                /*0x40*/ int _isRefreshing;

                                /*0x3ed9cfc*/ DNSCacheEntry(UnityEngine.Hash128 key, string host, System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x3eda014*/ DNSCacheEntry(UnityEngine.Hash128 key, string host, long lastUsedTicks, System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x3ed9ff0*/ System.DateTime get_LastUsed();
                                /*0x3ed9f68*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry DeriveWith(System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x3ed98b4*/ bool IsStalled(System.DateTime now);
                                /*0x3ed97e4*/ bool IsReadyToRemove(System.DateTime now);
                                /*0x3ed997c*/ void Refresh();
                                /*0x3ed7440*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] GetAddresses();
                                /*0x3ed7350*/ void ReportNonWorking(System.Net.IPAddress nonWorking, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x3eda0d0*/ string ToString();

                                class <>c__DisplayClass15_0
                                {
                                    /*0x10*/ System.Net.IPAddress nonWorking;

                                    /*0x3eda0c8*/ <>c__DisplayClass15_0();
                                    /*0x3eda4d4*/ bool <ReportNonWorking>b__0(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress adr);
                                }
                            }
                        }
                    }
                }

                namespace Memory
                {
                    struct AutoReleaseBuffer : System.IDisposable
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer Empty;
                        /*0x10*/ byte[] Data;
                        /*0x18*/ int Offset;
                        /*0x1c*/ int Count;

                        static /*0x3eda9d4*/ AutoReleaseBuffer();
                        /*0x3eda4f8*/ AutoReleaseBuffer(byte[] data);
                        /*0x3ed0c98*/ AutoReleaseBuffer(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                        /*0x3eda534*/ bool Equals(object obj);
                        /*0x3eda610*/ bool Equals(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment other);
                        /*0x3eda644*/ int GetHashCode();
                        /*0x3eda684*/ string ToString();
                        /*0x3eda968*/ void Dispose();
                    }

                    class UserModeLock
                    {
                        /*0x10*/ int _locked;

                        /*0x3edabbc*/ UserModeLock();
                        /*0x3edaa4c*/ void Acquire();
                        /*0x3edaae0*/ bool TryAcquire();
                        /*0x3edabac*/ void Release();
                    }

                    struct BufferStats
                    {
                        /*0x10*/ long Size;
                        /*0x18*/ int Count;
                    }

                    struct BufferPoolStats
                    {
                        /*0x10*/ long GetBuffers;
                        /*0x18*/ long ReleaseBuffers;
                        /*0x20*/ long PoolSize;
                        /*0x28*/ long MaxPoolSize;
                        /*0x30*/ long MinBufferSize;
                        /*0x38*/ long MaxBufferSize;
                        /*0x40*/ long Borrowed;
                        /*0x48*/ long ArrayAllocations;
                        /*0x50*/ int FreeBufferCount;
                        /*0x58*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferStats> FreeBufferStats;
                        /*0x60*/ System.TimeSpan NextMaintenance;
                    }

                    class BufferPool
                    {
                        static /*0x0*/ byte[] NoData;
                        static /*0x8*/ bool _isEnabled;
                        static /*0x10*/ System.TimeSpan RemoveOlderThan;
                        static /*0x18*/ System.TimeSpan RunMaintenanceEvery;
                        static /*0x20*/ long MinBufferSize;
                        static /*0x28*/ long MaxBufferSize;
                        static /*0x30*/ long MaxPoolSize;
                        static /*0x38*/ bool RemoveEmptyLists;
                        static /*0x39*/ bool IsDoubleReleaseCheckEnabled;
                        static /*0x40*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferStore> FreeBuffers;
                        static /*0x48*/ System.DateTime lastMaintenance;
                        static /*0x50*/ long PoolSize;
                        static /*0x58*/ long GetBuffers;
                        static /*0x60*/ long ReleaseBuffers;
                        static /*0x68*/ long Borrowed;
                        static /*0x70*/ long ArrayAllocations;
                        static /*0x78*/ Best.HTTP.Shared.PlatformSupport.Memory.UserModeLock _lock;

                        static /*0x3edabc4*/ BufferPool();
                        static /*0x3edae54*/ void OnLowMemory();
                        static /*0x3ec5780*/ byte[] Get(long size, bool canBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3edb11c*/ void ReleaseBulk(System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> segments);
                        static /*0x3edb57c*/ void ReleaseBulk(System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> segments);
                        static /*0x3ec5d2c*/ void Release(byte[] buffer);
                        static /*0x3edb2f0*/ void Release(byte[] buffer, bool acquireLock);
                        static /*0x3edb788*/ byte[] Resize(ref byte[] buffer, int newSize, bool canBeLarger, bool clear, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3edb900*/ void GetStatistics(ref Best.HTTP.Shared.PlatformSupport.Memory.BufferPoolStats stats);
                        static /*0x3edaf8c*/ void Clear();
                        static /*0x3edbd04*/ void Maintain();
                        static /*0x3edc148*/ bool IsPowerOfTwo(long x);
                        static /*0x3edc158*/ long NextPowerOf2(long x);
                        static /*0x3edc174*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc FindFreeBuffer(long size, bool canBeLarger);
                        static /*0x3edc444*/ void AddFreeBuffer(byte[] buffer);
                    }

                    struct BufferSegment
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Empty;
                        /*0x10*/ byte[] Data;
                        /*0x18*/ int Offset;
                        /*0x1c*/ int Count;

                        static /*0x3edce00*/ BufferSegment();
                        static /*0x3ed1a88*/ bool op_Equality(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment right);
                        static /*0x3ed1b18*/ bool op_Inequality(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment right);
                        static /*0x3edcb18*/ byte[] op_Implicit(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left);
                        /*0x3ecf000*/ BufferSegment(byte[] data, int offset, int count);
                        /*0x3ed1ba8*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Slice(int newOffset);
                        /*0x3edc9a0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Slice(int offset, int count);
                        /*0x3edc9dc*/ bool Equals(object obj);
                        /*0x3edcaa4*/ bool Equals(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment other);
                        /*0x3edcad8*/ int GetHashCode();
                        /*0x3edcb1c*/ string ToString();
                    }

                    struct BufferStore
                    {
                        /*0x10*/ long Size;
                        /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc> buffers;

                        /*0x3edce78*/ BufferStore(long size);
                        /*0x3edc8c0*/ BufferStore(long size, byte[] buffer);
                        /*0x3edcefc*/ string ToString();
                    }

                    struct BufferDesc
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc Empty;
                        /*0x10*/ byte[] buffer;
                        /*0x18*/ System.DateTime released;

                        static /*0x3edd0a0*/ BufferDesc();
                        /*0x3edc848*/ BufferDesc(byte[] buff);
                        /*0x3edcfa8*/ string ToString();
                    }
                }

                namespace IL2CPP
                {
                    class Il2CppEagerStaticClassConstructionAttribute : System.Attribute
                    {
                        /*0x3edd114*/ Il2CppEagerStaticClassConstructionAttribute();
                    }

                    class PreserveAttribute : System.Attribute
                    {
                        /*0x3edd11c*/ PreserveAttribute();
                    }
                }

                namespace FileSystem
                {
                    class DefaultIOService : Best.HTTP.Shared.PlatformSupport.FileSystem.IIOService
                    {
                        /*0x3edd300*/ DefaultIOService();
                        /*0x3edd124*/ System.IO.Stream CreateFileStream(string path, Best.HTTP.Shared.PlatformSupport.FileSystem.FileStreamModes mode);
                        /*0x3edd2c0*/ void DirectoryCreate(string path);
                        /*0x3edd2cc*/ void DirectoryDelete(string path);
                        /*0x3edd2dc*/ bool DirectoryExists(string path);
                        /*0x3edd2e8*/ void FileDelete(string path);
                        /*0x3edd2f4*/ bool FileExists(string path);
                    }

                    enum FileStreamModes
                    {
                        Create = 0,
                        OpenRead = 1,
                        OpenReadWrite = 2,
                        Append = 3,
                    }

                    interface IIOService
                    {
                        /*0x3816710*/ void DirectoryCreate(string path);
                        /*0x38141c4*/ bool DirectoryExists(string path);
                        /*0x3816710*/ void DirectoryDelete(string path);
                        /*0x3816710*/ void FileDelete(string path);
                        /*0x38141c4*/ bool FileExists(string path);
                        /*0x3814b48*/ System.IO.Stream CreateFileStream(string path, Best.HTTP.Shared.PlatformSupport.FileSystem.FileStreamModes mode);
                    }
                }
            }

            namespace Logger
            {
                enum Loglevels
                {
                    All = 0,
                    Information = 1,
                    Warning = 2,
                    Error = 3,
                    Exception = 4,
                    None = 5,
                }

                interface ILogOutput : System.IDisposable
                {
                    /*0x3813ffc*/ bool get_AcceptColor();
                    /*0x3816044*/ void Write(Best.HTTP.Shared.Logger.Loglevels level, string logEntry);
                    /*0x38159dc*/ void Flush();
                }

                interface IFilter
                {
                    /*0x38141c4*/ bool Include(string division);
                }

                interface ILogger
                {
                    /*0x3814574*/ Best.HTTP.Shared.Logger.Loglevels get_Level();
                    /*0x3815ed0*/ void set_Level(Best.HTTP.Shared.Logger.Loglevels value);
                    /*0x3813ffc*/ bool get_IsDiagnostic();
                    /*0x3816920*/ void Verbose(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3816920*/ void Information(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3816920*/ void Warning(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3816920*/ void Error(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3816958*/ void Exception(string division, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class LoggingContext
                {
                    /*0x10*/ string <Hash>k__BackingField;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField> fields;

                    static /*0x3edd994*/ string Escape(string original);
                    /*0x3ece994*/ LoggingContext(object boundto);
                    /*0x3edd308*/ string get_Hash();
                    /*0x3edd310*/ void set_Hash(string value);
                    /*0x3edd38c*/ void Add(string key, long value);
                    /*0x3edd318*/ void Add(string key, string value);
                    /*0x3eceb18*/ void Add(string key, Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x3edd3e8*/ void Add(Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField field);
                    /*0x3edd5d4*/ string GetStringField(string fieldName);
                    /*0x3edd4e8*/ void Remove(string key);
                    /*0x3edd6d8*/ void ToJson(System.Text.StringBuilder sb);

                    enum LoggingContextFieldType
                    {
                        Long = 0,
                        Bool = 1,
                        String = 2,
                        AnotherContext = 3,
                    }

                    struct LoggingContextField
                    {
                        /*0x10*/ string key;
                        /*0x18*/ long longValue;
                        /*0x20*/ bool boolValue;
                        /*0x28*/ string stringValue;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext loggingContextValue;
                        /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext.LoggingContextFieldType fieldType;

                        /*0x3eddbe0*/ string ToString();
                    }

                    class <>c__DisplayClass13_0
                    {
                        /*0x10*/ string fieldName;

                        /*0x3edd6d0*/ <>c__DisplayClass13_0();
                        /*0x3eddc9c*/ bool <GetStringField>b__0(Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField f);
                    }
                }

                class ThreadedLogger : Best.HTTP.Shared.Logger.ILogger, System.IDisposable
                {
                    /*0x10*/ Best.HTTP.Shared.Logger.Loglevels <Level>k__BackingField;
                    /*0x18*/ Best.HTTP.Shared.Logger.ILogOutput _output;
                    /*0x20*/ Best.HTTP.Shared.Logger.IFilter <Filter>k__BackingField;
                    /*0x28*/ int InitialStringBufferCapacity;
                    /*0x30*/ System.TimeSpan ExitThreadAfterInactivity;
                    /*0x38*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.Logger.LogJob> jobs;
                    /*0x40*/ System.Threading.AutoResetEvent newJobEvent;
                    /*0x48*/ int threadCreated;
                    /*0x4c*/ bool isDisposed;
                    /*0x50*/ System.Text.StringBuilder sb;

                    /*0x3eddda4*/ ThreadedLogger();
                    /*0x3eddcb0*/ Best.HTTP.Shared.Logger.Loglevels get_Level();
                    /*0x3eddcb8*/ void set_Level(Best.HTTP.Shared.Logger.Loglevels value);
                    /*0x3eddcc0*/ bool get_IsDiagnostic();
                    /*0x3eddcd0*/ Best.HTTP.Shared.Logger.ILogOutput get_Output();
                    /*0x3eddcd8*/ void set_Output(Best.HTTP.Shared.Logger.ILogOutput value);
                    /*0x3eddd9c*/ Best.HTTP.Shared.Logger.IFilter get_Filter();
                    /*0x3eddfbc*/ void Verbose(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ede52c*/ void Information(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ede544*/ void Warning(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ede55c*/ void Error(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ede574*/ void Exception(string division, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3eddfd4*/ void AddJob(Best.HTTP.Shared.Logger.Loglevels level, string div, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ede984*/ void ThreadFunc();
                    /*0x3eded64*/ void WriteJob(ref Best.HTTP.Shared.Logger.LogJob job);
                    /*0x3edef48*/ void Dispose();
                }

                struct LogJob
                {
                    static /*0x0*/ string[] LevelStrings;
                    /*0x10*/ Best.HTTP.Shared.Logger.Loglevels level;
                    /*0x18*/ string division;
                    /*0x20*/ string msg;
                    /*0x28*/ System.Exception ex;
                    /*0x30*/ System.DateTime time;
                    /*0x38*/ int threadId;
                    /*0x40*/ string stackTrace;
                    /*0x48*/ string context;

                    static /*0x3edf17c*/ LogJob();
                    static /*0x3edf084*/ string WrapInColor(string str, string color, bool acceptColor);
                    /*0x3ede58c*/ string ToJson(System.Text.StringBuilder sb, bool acceptColor);
                    /*0x3edf088*/ void ProcessStackTrace(System.Text.StringBuilder sb);
                }

                class UnityOutput : Best.HTTP.Shared.Logger.ILogOutput, System.IDisposable
                {
                    /*0x10*/ bool <AcceptColor>k__BackingField;

                    /*0x3eddf54*/ UnityOutput();
                    /*0x3edf2fc*/ bool get_AcceptColor();
                    /*0x3edf304*/ void Write(Best.HTTP.Shared.Logger.Loglevels level, string logEntry);
                    /*0x3edf3e0*/ void Best.HTTP.Shared.Logger.ILogOutput.Flush();
                    /*0x3edf3e4*/ void System.IDisposable.Dispose();
                }
            }

            namespace Extensions
            {
                class CircularBuffer<T>
                {
                    /*0x0*/ int <Capacity>k__BackingField;
                    /*0x0*/ int <Count>k__BackingField;
                    /*0x0*/ T[] buffer;
                    /*0x0*/ int startIdx;
                    /*0x0*/ int endIdx;

                    /*0x3815ed0*/ CircularBuffer(int capacity);
                    /*0x3814574*/ int get_Capacity();
                    /*0x3815ed0*/ void set_Capacity(int value);
                    /*0x3814574*/ int get_Count();
                    /*0x3815ed0*/ void set_Count(int value);
                    /*0x3910ae8*/ T get_Item(int idx);
                    /*0x3910ae8*/ void Add(T element);
                    /*0x38148bc*/ string ToString();
                }

                class Extensions
                {
                    static /*0x0*/ System.Text.RegularExpressions.Regex validIpV4AddressRegex;

                    static /*0x3ee11d0*/ Extensions();
                    static /*0x3edf43c*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment GetASCIIBytes(string str);
                    static /*0x3edf534*/ void SendAsASCII(System.IO.BinaryWriter stream, string str);
                    static /*0x3edf5b4*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> AddHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name, string value);
                    static /*0x3edf7b4*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> SetHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name, string value);
                    static /*0x3edf9ec*/ bool RemoveHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x3edfa50*/ System.Collections.Generic.List<string> GetHeaderValues(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x3edfae8*/ string GetFirstHeaderValue(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x3edfb9c*/ bool HasHeaderWithValue(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string headerName, string value);
                    static /*0x3edfc88*/ bool HasHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string headerName);
                    static /*0x3edfcec*/ void WriteString(System.IO.Stream fs, string value);
                    static /*0x3edfe78*/ void WriteLine(System.IO.Stream fs);
                    static /*0x3edfef4*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer AsAutoRelease(byte[] buffer);
                    static /*0x3ec5b68*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AsBuffer(byte[] bytes, int length);
                    static /*0x3ed0050*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AsBuffer(byte[] bytes, int offset, int length);
                    static /*0x3ed5660*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment CopyAsBuffer(byte[] bytes, int offset, int length);
                    static /*0x3edff38*/ string GetRequestPathAndQueryURL(System.Uri uri);
                    static /*0x3edffac*/ void WriteArray(System.IO.Stream stream, byte[] array);
                    static /*0x3edffd8*/ void WriteBufferSegment(System.IO.Stream stream, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                    static /*0x3edfffc*/ bool IsHostIsAnIPAddress(System.Uri uri);
                    static /*0x3ee00ec*/ bool IsIpV4AddressValid(string address);
                    static /*0x3ee018c*/ bool IsIpV6AddressValid(string address);
                    static /*0x3ee0228*/ uint ToUInt32(string str, uint defaultValue);
                    static /*0x3ee025c*/ long ToInt64(string str, long defaultValue);
                    static /*0x3ee0290*/ System.DateTime ToDateTime(string str, System.DateTime defaultValue);
                    static /*0x3ee03bc*/ string ToStr(string str, string defaultVale);
                    static /*0x3ee03c8*/ string ToBinaryStr(byte value);
                    static /*0x3ee043c*/ string CalculateMD5Hash(string input);
                    static /*0x3ee04f8*/ string CalculateMD5Hash(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment input);
                    static /*0x3ee07b0*/ string Read(string str, ref int pos, char block, bool needResult);
                    static /*0x3ee08ac*/ string Read(string str, ref int pos, System.Func<char, bool> block, bool needResult);
                    static /*0x3ee0a60*/ string ReadPossibleQuotedText(string str, ref int pos);
                    static /*0x3ee09d0*/ void SkipWhiteSpace(string str, ref int pos);
                    static /*0x3ee0cc4*/ string TrimAndLower(string str);
                    static /*0x3ee0e18*/ System.Nullable<char> Peek(string str, int pos);
                    static /*0x3ee0eb0*/ void ReadBuffer(System.IO.Stream stream, byte[] buffer, int length);
                    static /*0x3ee0fa4*/ void WriteString(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms, string str);
                    static /*0x3ee1094*/ void WriteLine(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms);
                    static /*0x3ee1114*/ void WriteLine(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms, string str);

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Shared.Extensions.Extensions.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__41_0;
                        static /*0x10*/ System.Func<char, bool> <>9__41_1;

                        static /*0x3ee1270*/ <>c();
                        /*0x3ee12d8*/ <>c();
                        /*0x3ee12e0*/ bool <ReadPossibleQuotedText>b__41_0(char ch);
                        /*0x3ee12fc*/ bool <ReadPossibleQuotedText>b__41_1(char ch);
                    }

                    class <>c__DisplayClass39_0
                    {
                        /*0x10*/ char block;

                        /*0x3ee08a4*/ <>c__DisplayClass39_0();
                        /*0x3ee1318*/ bool <Read>b__0(char ch);
                    }
                }

                class ExceptionHelper
                {
                    static /*0x3ee0f38*/ System.Exception ServerClosedTCPStream();
                }

                class HeaderParser : Best.HTTP.Shared.Extensions.KeyValuePairList
                {
                    /*0x3ee1328*/ HeaderParser(string headerStr);
                    /*0x3ee1360*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> Parse(string headerStr);
                }

                class HeaderValue
                {
                    /*0x10*/ string <Key>k__BackingField;
                    /*0x18*/ string <Value>k__BackingField;
                    /*0x20*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> <Options>k__BackingField;

                    /*0x3ee1610*/ HeaderValue();
                    /*0x3ee1670*/ HeaderValue(string key);
                    /*0x3ee1620*/ string get_Key();
                    /*0x3ee1628*/ void set_Key(string value);
                    /*0x3ee1630*/ string get_Value();
                    /*0x3ee1638*/ void set_Value(string value);
                    /*0x3ee1640*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> get_Options();
                    /*0x3ee1648*/ void set_Options(System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> value);
                    /*0x3ee1650*/ bool get_HasValue();
                    /*0x3ee1618*/ void Parse(string headerStr, ref int pos);
                    /*0x3ee1b40*/ bool TryGetOption(string key, ref Best.HTTP.Shared.Extensions.HeaderValue option);
                    /*0x3ee16a0*/ void ParseImplementation(string headerStr, ref int pos, bool isOptionIsAnOption);
                    /*0x3ee1c3c*/ string ToString();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Shared.Extensions.HeaderValue.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__18_0;

                        static /*0x3ee2590*/ <>c();
                        /*0x3ee25f8*/ <>c();
                        /*0x3ee2600*/ bool <ParseImplementation>b__18_0(char ch);
                    }
                }

                class RunOnceOnMainThread : Best.HTTP.Shared.Extensions.IHeartbeat
                {
                    /*0x10*/ System.Action _action;
                    /*0x18*/ int _subscribed;
                    /*0x20*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                    /*0x3ee262c*/ RunOnceOnMainThread(System.Action action, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ee2670*/ void Subscribe();
                    /*0x3ee286c*/ void OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                }

                interface IHeartbeat
                {
                    void OnHeartbeatUpdate(System.DateTime utcNow, System.TimeSpan dif);
                }

                class HeartbeatManager
                {
                    /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.IHeartbeat> Heartbeats;
                    /*0x20*/ Best.HTTP.Shared.Extensions.IHeartbeat[] UpdateArray;
                    /*0x28*/ System.DateTime LastUpdate;

                    /*0x3ee309c*/ HeartbeatManager();
                    /*0x3ee26f8*/ void Subscribe(Best.HTTP.Shared.Extensions.IHeartbeat heartbeat);
                    /*0x3ee2ae0*/ void Unsubscribe(Best.HTTP.Shared.Extensions.IHeartbeat heartbeat);
                    /*0x3ee2bcc*/ void Update();
                    /*0x3ee2fa8*/ void Clear();
                }

                class KeyValuePairList
                {
                    /*0x10*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> <Values>k__BackingField;

                    /*0x3ee329c*/ KeyValuePairList();
                    /*0x3ee319c*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> get_Values();
                    /*0x3ee31a4*/ void set_Values(System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> value);
                    /*0x3ee31ac*/ bool TryGet(string valueKeyName, ref Best.HTTP.Shared.Extensions.HeaderValue param);
                }

                struct TimerData
                {
                    /*0x10*/ System.DateTime Created;
                    /*0x18*/ System.TimeSpan Interval;
                    /*0x20*/ object Context;
                    /*0x28*/ System.Func<System.DateTime, object, bool> OnTimer;

                    /*0x3ee3320*/ TimerData(System.TimeSpan interval, object context, System.Func<System.DateTime, object, bool> onTimer);
                    /*0x3ee32a4*/ bool IsOnTime(System.DateTime now);
                    /*0x3ee33b4*/ Best.HTTP.Shared.Extensions.TimerData CreateNew();
                    /*0x3ee33cc*/ string ToString();
                }

                class Timer
                {
                    static /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.TimerData> _timers;
                    static /*0x8*/ System.Threading.ReaderWriterLockSlim _lock;
                    static /*0x10*/ int _isSubscribed;

                    static /*0x3ee3804*/ Timer();
                    static /*0x3ee3504*/ void Add(Best.HTTP.Shared.Extensions.TimerData timer);

                    class TimerImplementation : Best.HTTP.Shared.Extensions.IHeartbeat
                    {
                        /*0x3ee37fc*/ TimerImplementation();
                        /*0x3ee38dc*/ void OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                    }
                }
            }

            namespace Databases
            {
                class FolderAndFileOptions
                {
                    /*0x10*/ string FolderName;
                    /*0x18*/ string DatabaseFolderName;
                    /*0x20*/ string MetadataExtension;
                    /*0x28*/ string DatabaseExtension;
                    /*0x30*/ string DatabaseFreeListExtension;
                    /*0x38*/ string HashExtension;

                    /*0x3ee3f34*/ FolderAndFileOptions();
                }

                class Database<ContentType, MetadataType, IndexingServiceType, MetadataServiceType> : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
                {
                    static /*0x0*/ Best.HTTP.Shared.Databases.FolderAndFileOptions FolderAndFileOptions;
                    /*0x0*/ string <SaveDir>k__BackingField;
                    /*0x0*/ MetadataServiceType <MetadataService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.DatabaseOptions <Options>k__BackingField;
                    /*0x0*/ IndexingServiceType <IndexingService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.DiskManager<ContentType> <DiskManager>k__BackingField;
                    /*0x0*/ int isDirty;
                    /*0x0*/ System.Threading.ReaderWriterLockSlim rwlock;

                    static /*0x383e7a0*/ Database();
                    /*0x3910ae8*/ Database(string directory, Best.HTTP.Shared.Databases.DatabaseOptions options, IndexingServiceType indexingService, Best.HTTP.Shared.Databases.IDiskContentParser<ContentType> diskContentParser, MetadataServiceType metadataService);
                    /*0x38148bc*/ string get_SaveDir();
                    /*0x3816710*/ void set_SaveDir(string value);
                    /*0x38148bc*/ string get_Name();
                    /*0x38148bc*/ string get_MetadataFileName();
                    /*0x38148bc*/ string get_DatabaseFileName();
                    /*0x38148bc*/ string get_DatabaseFreeListFileName();
                    /*0x38148bc*/ string get_HashFileName();
                    /*0x3910ae8*/ MetadataServiceType get_MetadataService();
                    /*0x3910ae8*/ void set_MetadataService(MetadataServiceType value);
                    /*0x38148bc*/ Best.HTTP.Shared.Databases.DatabaseOptions get_Options();
                    /*0x3816710*/ void set_Options(Best.HTTP.Shared.Databases.DatabaseOptions value);
                    /*0x3910ae8*/ IndexingServiceType get_IndexingService();
                    /*0x3910ae8*/ void set_IndexingService(IndexingServiceType value);
                    /*0x38148bc*/ Best.HTTP.Shared.Databases.DiskManager<ContentType> get_DiskManager();
                    /*0x3816710*/ void set_DiskManager(Best.HTTP.Shared.Databases.DiskManager<ContentType> value);
                    /*0x3910ae8*/ bool DeleteMetadata(MetadataType metadata);
                    /*0x3910ae8*/ ContentType FromMetadataIndex(int metadataIndex);
                    /*0x3910ae8*/ ContentType FromMetadata(MetadataType metadata);
                    /*0x3815ed0*/ void FlagDirty(int dirty);
                    /*0x3813ffc*/ bool Save();
                    void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                    /*0x38159dc*/ void Dispose();
                }

                class DatabaseOptions
                {
                    /*0x10*/ string Name;
                    /*0x18*/ bool UseHashFile;
                    /*0x20*/ Best.HTTP.Shared.Databases.DiskManagerOptions DiskManager;

                    /*0x3ee4058*/ DatabaseOptions(string dbName);
                }

                class DiskManagerOptions
                {
                    /*0x10*/ int MaxCacheSizeInBytes;
                    /*0x18*/ string HashDigest;

                    /*0x3ee40dc*/ DiskManagerOptions();
                }

                interface IDiskContentParser<T>
                {
                    /*0x3910ae8*/ T Parse(System.IO.Stream stream, int length);
                    /*0x3910ae8*/ void Encode(System.IO.Stream stream, T content);
                }

                class DiskManager<T> : System.IDisposable
                {
                    /*0x0*/ int <CacheSize>k__BackingField;
                    /*0x0*/ System.IO.Stream stream;
                    /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, T>> cache;
                    /*0x0*/ Best.HTTP.Shared.Databases.IDiskContentParser<T> diskContentParser;
                    /*0x0*/ Best.HTTP.Shared.Databases.DiskManagerOptions options;
                    /*0x0*/ Best.HTTP.Shared.Databases.FreeListManager freeListManager;
                    /*0x0*/ System.Threading.ReaderWriterLockSlim rwLock;

                    /*0x3816958*/ DiskManager(System.IO.Stream stream, System.IO.Stream freeListStream, Best.HTTP.Shared.Databases.IDiskContentParser<T> contentParser, Best.HTTP.Shared.Databases.DiskManagerOptions options);
                    /*0x3814574*/ int get_CacheSize();
                    /*0x3815ed0*/ void set_CacheSize(int value);
                    /*0x3910ae8*/ System.ValueTuple<int, int> Append(T content);
                    /*0x3910ae8*/ void SaveChanged(Best.HTTP.Shared.Databases.Metadata metadata, T content);
                    /*0x3816710*/ void Delete(Best.HTTP.Shared.Databases.Metadata metadata);
                    /*0x3910ae8*/ T Load(Best.HTTP.Shared.Databases.Metadata metadata);
                    /*0x3910ae8*/ Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, T> GetCached(int position);
                    /*0x3910ae8*/ void AddToCache(T parsedContent, int pos, int length);
                    Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment CalculateHash();
                    /*0x38159dc*/ void Save();
                    /*0x38159dc*/ void Dispose();

                    struct CachePointer`1<T, CacheType>
                    {
                        static /*0x0*/ Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, CacheType> Empty;
                        /*0x0*/ int Position;
                        /*0x0*/ int Length;
                        /*0x0*/ CacheType Content;

                        static /*0x383e7a0*/ CachePointer`1();
                        /*0x38148bc*/ string ToString();
                    }
                }

                class FreeListManager : System.IDisposable
                {
                    /*0x10*/ System.IO.Stream stream;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.FreeListManager.FreeSpot> freeList;

                    /*0x3ee413c*/ FreeListManager(System.IO.Stream stream);
                    /*0x3ee41e0*/ void Load();
                    /*0x3ee4434*/ void Save();
                    /*0x3ee459c*/ int FindFreeIndex(int length);
                    /*0x3ee463c*/ int Occupy(int idx, int length);
                    /*0x3ee479c*/ void Add(int pos, int length);
                    /*0x3ee4a38*/ void Dispose();

                    struct FreeSpot
                    {
                        /*0x10*/ int pos;
                        /*0x14*/ int length;
                    }
                }

                class IndexingService<ContentType, MetadataType>
                {
                    /*0x38159dc*/ IndexingService();
                    /*0x3910ae8*/ void Index(MetadataType metadata);
                    /*0x3910ae8*/ void Remove(MetadataType metadata);
                    /*0x38148bc*/ System.Collections.Generic.IEnumerable<int> GetOptimizedIndexes();
                }

                class Metadata
                {
                    /*0x10*/ int Index;
                    /*0x14*/ int FilePosition;
                    /*0x18*/ int Length;

                    /*0x3ee4dd4*/ Metadata();
                    /*0x3ee4abc*/ bool get_IsDeleted();
                    /*0x3ee4ae0*/ void MarkForDelete();
                    /*0x3ee4aec*/ void SaveTo(System.IO.Stream stream);
                    /*0x3ee4bb4*/ void LoadFrom(System.IO.Stream stream);
                    /*0x3ee4be8*/ string ToString();
                }

                class MetadataService<MetadataType, ContentType>
                {
                    /*0x0*/ System.Collections.Generic.List<MetadataType> <Metadatas>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> <IndexingService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> <EmptyMetadataIndexFinder>k__BackingField;

                    /*0x3816810*/ MetadataService(Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> indexingService, Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> emptyMetadataIndexFinder);
                    /*0x38148bc*/ System.Collections.Generic.List<MetadataType> get_Metadatas();
                    /*0x3816710*/ void set_Metadatas(System.Collections.Generic.List<MetadataType> value);
                    /*0x38148bc*/ Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> get_IndexingService();
                    /*0x3816710*/ void set_IndexingService(Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> value);
                    /*0x38148bc*/ Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> get_EmptyMetadataIndexFinder();
                    /*0x3816710*/ void set_EmptyMetadataIndexFinder(Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> value);
                    /*0x3910ae8*/ MetadataType CreateFrom(System.IO.Stream stream);
                    /*0x3910ae8*/ MetadataType CreateDefault(ContentType content, int filePos, int length, System.Action<ContentType, MetadataType> setupCallback);
                    /*0x3910ae8*/ void Remove(MetadataType metadata);
                    /*0x3816710*/ void SaveTo(System.IO.Stream stream);
                    /*0x3816710*/ void LoadFrom(System.IO.Stream stream);
                }

                namespace Utils
                {
                    class StreamUtil
                    {
                        static /*0x3ee4ddc*/ void WriteLengthPrefixedString(System.IO.Stream stream, string str);
                        static /*0x3ee4f90*/ string ReadLengthPrefixedString(System.IO.Stream stream);
                        static /*0x3ee454c*/ void EncodeUnsignedVariableByteInteger(System.IO.Stream encodeTo, ulong value);
                        static /*0x3ee43e4*/ ulong DecodeUnsignedVariableByteInteger(System.IO.Stream decodeFrom);
                        static /*0x3ee5074*/ void EncodeSignedVariableByteInteger(System.IO.Stream encodeTo, long value);
                        static /*0x3ee50e8*/ long DecodeSignedVariableByteInteger(System.IO.Stream stream);
                    }
                }

                namespace MetadataIndexFinders
                {
                    class FindDeletedMetadataIndexFinder<MetadataType> : Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType>
                    {
                        /*0x38159dc*/ FindDeletedMetadataIndexFinder();
                        /*0x381467c*/ int FindFreeIndex(System.Collections.Generic.List<MetadataType> metadatas);
                    }

                    interface IEmptyMetadataIndexFinder<MetadataType>
                    {
                        /*0x381467c*/ int FindFreeIndex(System.Collections.Generic.List<MetadataType> metadatas);
                    }
                }

                namespace Indexing
                {
                    enum Side
                    {
                        Left = 0,
                        Right = 1,
                    }

                    struct NoAllocList<T>
                    {
                        /*0x0*/ T _value;
                        /*0x0*/ bool _hasValue;
                        /*0x0*/ System.Collections.Generic.List<T> _values;

                        /*0x3910ae8*/ NoAllocList(T value);
                        /*0x3910ae8*/ T get_Item(int index);
                        /*0x3814574*/ int get_Count();
                        /*0x3910ae8*/ void Add(T item);
                    }

                    class Node<KeyT, ValueT>
                    {
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Parent;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Left;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Right;
                        /*0x0*/ KeyT <Key>k__BackingField;
                        /*0x0*/ int Depth;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.NoAllocList<ValueT> _item;

                        /*0x3910ae8*/ Node(Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> parent, KeyT key, ValueT value);
                        /*0x3910ae8*/ KeyT get_Key();
                        /*0x3910ae8*/ void set_Key(KeyT value);
                        /*0x3814574*/ int get_BalanceFactor();
                        /*0x3814574*/ int get_LeftDepth();
                        /*0x3814574*/ int get_RightDepth();
                        /*0x3813ffc*/ bool get_IsRoot();
                        /*0x3814574*/ int get_ChildCount();
                        /*0x38159dc*/ void BubbleUpDepthChange();
                        /*0x3910ae8*/ ValueT get_Item(int index);
                        /*0x3814574*/ int get_Count();
                        /*0x38159dc*/ void Clear();
                        /*0x3910ae8*/ void Add(ValueT value);
                        /*0x38148bc*/ System.Collections.Generic.List<ValueT> ToList();
                        /*0x38148bc*/ string ToString();
                    }

                    class AVLTree<Key, Value>
                    {
                        /*0x0*/ int <ElemCount>k__BackingField;
                        /*0x0*/ int <NodeCount>k__BackingField;
                        /*0x0*/ System.Collections.Generic.IComparer<Key> Comparer;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> <RootNode>k__BackingField;
                        /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.Indexing.Side> path;

                        /*0x3816710*/ AVLTree(System.Collections.Generic.IComparer<Key> comparer);
                        /*0x3814574*/ int get_ElemCount();
                        /*0x3815ed0*/ void set_ElemCount(int value);
                        /*0x3814574*/ int get_NodeCount();
                        /*0x3815ed0*/ void set_NodeCount(int value);
                        /*0x38148bc*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> get_RootNode();
                        /*0x3816710*/ void set_RootNode(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> value);
                        /*0x3910ae8*/ void Add(Key key, Value item, bool clearValues);
                        /*0x3814a3c*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RebalanceFrom(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> newNode);
                        /*0x3910ae8*/ System.Collections.Generic.List<Value> Remove(Key key);
                        /*0x3816710*/ void RemoveNode(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> node);
                        /*0x3814b48*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RebalanceForRemoval(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> removedParentNode, Best.HTTP.Shared.Databases.Indexing.Side side);
                        /*0x3814a3c*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> FindMin(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> node);
                        /*0x3910ae8*/ System.Collections.Generic.List<Value> Find(Key key);
                        /*0x38148bc*/ System.Collections.Generic.IEnumerable<Value> WalkHorizontal();
                        /*0x3814a3c*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RotateRight(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> current);
                        /*0x3814a3c*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RotateLeft(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> current);

                        class <WalkHorizontal>d__27<Key, Value> : System.Collections.Generic.IEnumerable<Value>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<Value>, System.Collections.IEnumerator, System.IDisposable
                        {
                            /*0x0*/ int <>1__state;
                            /*0x0*/ Value <>2__current;
                            /*0x0*/ int <>l__initialThreadId;
                            /*0x0*/ Best.HTTP.Shared.Databases.Indexing.AVLTree<Key, Value> <>4__this;
                            /*0x0*/ System.Collections.Generic.Queue<Best.HTTP.Shared.Databases.Indexing.Node<Key, Value>> <toWalk>5__2;
                            /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> <current>5__3;
                            /*0x0*/ int <i>5__4;

                            /*0x3815ed0*/ <WalkHorizontal>d__27(int <>1__state);
                            /*0x38159dc*/ void System.IDisposable.Dispose();
                            /*0x3813ffc*/ bool MoveNext();
                            /*0x3910ae8*/ Value System.Collections.Generic.IEnumerator<Value>.get_Current();
                            /*0x38159dc*/ void System.Collections.IEnumerator.Reset();
                            /*0x38148bc*/ object System.Collections.IEnumerator.get_Current();
                            /*0x38148bc*/ System.Collections.Generic.IEnumerator<Value> System.Collections.Generic.IEnumerable<Value>.GetEnumerator();
                            /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                        }
                    }

                    namespace Comparers
                    {
                        class Hash128Comparer : System.Collections.Generic.IComparer<UnityEngine.Hash128>
                        {
                            /*0x3ee51e4*/ Hash128Comparer();
                            /*0x3ee51b8*/ int Compare(UnityEngine.Hash128 x, UnityEngine.Hash128 y);
                        }
                    }
                }
            }

            namespace Compression
            {
                namespace Zlib
                {
                    enum BlockState
                    {
                        NeedMore = 0,
                        BlockDone = 1,
                        FinishStarted = 2,
                        FinishDone = 3,
                    }

                    enum DeflateFlavor
                    {
                        Store = 0,
                        Fast = 1,
                        Slow = 2,
                    }

                    class DeflateManager
                    {
                        static /*0x0*/ int MEM_LEVEL_MAX;
                        static /*0x4*/ int MEM_LEVEL_DEFAULT;
                        static /*0x8*/ string[] _ErrorMessage;
                        static /*0x10*/ int PRESET_DICT;
                        static /*0x14*/ int INIT_STATE;
                        static /*0x18*/ int BUSY_STATE;
                        static /*0x1c*/ int FINISH_STATE;
                        static /*0x20*/ int Z_DEFLATED;
                        static /*0x24*/ int STORED_BLOCK;
                        static /*0x28*/ int STATIC_TREES;
                        static /*0x2c*/ int DYN_TREES;
                        static /*0x30*/ int Z_BINARY;
                        static /*0x34*/ int Z_ASCII;
                        static /*0x38*/ int Z_UNKNOWN;
                        static /*0x3c*/ int Buf_size;
                        static /*0x40*/ int MIN_MATCH;
                        static /*0x44*/ int MAX_MATCH;
                        static /*0x48*/ int MIN_LOOKAHEAD;
                        static /*0x4c*/ int HEAP_SIZE;
                        static /*0x50*/ int END_BLOCK;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.CompressFunc DeflateFunction;
                        /*0x18*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x20*/ int status;
                        /*0x28*/ byte[] pending;
                        /*0x30*/ int nextPending;
                        /*0x34*/ int pendingCount;
                        /*0x38*/ sbyte data_type;
                        /*0x3c*/ int last_flush;
                        /*0x40*/ int w_size;
                        /*0x44*/ int w_bits;
                        /*0x48*/ int w_mask;
                        /*0x50*/ byte[] window;
                        /*0x58*/ int window_size;
                        /*0x60*/ short[] prev;
                        /*0x68*/ short[] head;
                        /*0x70*/ int ins_h;
                        /*0x74*/ int hash_size;
                        /*0x78*/ int hash_bits;
                        /*0x7c*/ int hash_mask;
                        /*0x80*/ int hash_shift;
                        /*0x84*/ int block_start;
                        /*0x88*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config config;
                        /*0x90*/ int match_length;
                        /*0x94*/ int prev_match;
                        /*0x98*/ int match_available;
                        /*0x9c*/ int strstart;
                        /*0xa0*/ int match_start;
                        /*0xa4*/ int lookahead;
                        /*0xa8*/ int prev_length;
                        /*0xac*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel compressionLevel;
                        /*0xb0*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy compressionStrategy;
                        /*0xb8*/ short[] dyn_ltree;
                        /*0xc0*/ short[] dyn_dtree;
                        /*0xc8*/ short[] bl_tree;
                        /*0xd0*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeLiterals;
                        /*0xd8*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeDistances;
                        /*0xe0*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeBitLengths;
                        /*0xe8*/ short[] bl_count;
                        /*0xf0*/ int[] heap;
                        /*0xf8*/ int heap_len;
                        /*0xfc*/ int heap_max;
                        /*0x100*/ sbyte[] depth;
                        /*0x108*/ int _lengthOffset;
                        /*0x10c*/ int lit_bufsize;
                        /*0x110*/ int last_lit;
                        /*0x114*/ int _distanceOffset;
                        /*0x118*/ int opt_len;
                        /*0x11c*/ int static_len;
                        /*0x120*/ int matches;
                        /*0x124*/ int last_eob_len;
                        /*0x128*/ short bi_buf;
                        /*0x12c*/ int bi_valid;
                        /*0x130*/ bool Rfc1950BytesEmitted;
                        /*0x131*/ bool _WantRfc1950HeaderBytes;

                        static /*0x3ee9220*/ DeflateManager();
                        static /*0x3ee5b00*/ bool _IsSmaller(short[] tree, int n, int m, sbyte[] depth);
                        /*0x3ee51ec*/ DeflateManager();
                        /*0x3ee5448*/ void _InitializeLazyMatch();
                        /*0x3ee5680*/ void _InitializeTreeData();
                        /*0x3ee577c*/ void _InitializeBlocks();
                        /*0x3ee594c*/ void pqdownheap(short[] tree, int k);
                        /*0x3ee5b8c*/ void scan_tree(short[] tree, int max_code);
                        /*0x3ee5dcc*/ int build_bl_tree();
                        /*0x3ee5f28*/ void send_all_trees(int lcodes, int dcodes, int blcodes);
                        /*0x3ee618c*/ void send_tree(short[] tree, int max_code);
                        /*0x3ee63cc*/ void put_bytes(byte[] p, int start, int len);
                        /*0x3ee6388*/ void send_code(int c, short[] tree);
                        /*0x3ee6058*/ void send_bits(int value, int length);
                        /*0x3ee6414*/ void _tr_align();
                        /*0x3ee6634*/ bool _tr_tally(int dist, int lc);
                        /*0x3ee6948*/ void send_compressed_block(short[] ltree, short[] dtree);
                        /*0x3ee6c44*/ void set_data_type();
                        /*0x3ee6560*/ void bi_flush();
                        /*0x3ee6db0*/ void bi_windup();
                        /*0x3ee6e60*/ void copy_block(int buf, int len, bool header);
                        /*0x3ee6f78*/ void flush_block_only(bool eof);
                        /*0x3ee71d4*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateNone(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ee7598*/ void _tr_stored_block(int buf, int stored_len, bool eof);
                        /*0x3ee6fc0*/ void _tr_flush_block(int buf, int stored_len, bool eof);
                        /*0x3ee7350*/ void _fillWindow();
                        /*0x3ee763c*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateFast(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ee7f68*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateSlow(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ee7aac*/ int longest_match(int cur_match);
                        /*0x3ee84ec*/ bool get_WantRfc1950HeaderBytes();
                        /*0x3ee84f4*/ void set_WantRfc1950HeaderBytes(bool value);
                        /*0x3ee8500*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int bits, Best.HTTP.Shared.Compression.Zlib.CompressionStrategy compressionStrategy);
                        /*0x3ee8598*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int windowBits, int memLevel, Best.HTTP.Shared.Compression.Zlib.CompressionStrategy strategy);
                        /*0x3ee88d8*/ void Reset();
                        /*0x3ee55a8*/ void SetDeflater();
                        /*0x3ee8a74*/ int Deflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);

                        class CompressFunc : System.MulticastDelegate
                        {
                            /*0x3ee89d4*/ CompressFunc(object object, nint method);
                            /*0x3ee952c*/ Best.HTTP.Shared.Compression.Zlib.BlockState Invoke(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        }

                        class Config
                        {
                            static /*0x0*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config[] Table;
                            /*0x10*/ int GoodLength;
                            /*0x14*/ int MaxLazy;
                            /*0x18*/ int NiceLength;
                            /*0x1c*/ int MaxChainLength;
                            /*0x20*/ Best.HTTP.Shared.Compression.Zlib.DeflateFlavor Flavor;

                            static /*0x3ee9590*/ Config();
                            static /*0x3ee552c*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config Lookup(Best.HTTP.Shared.Compression.Zlib.CompressionLevel level);
                            /*0x3ee9540*/ Config(int goodLength, int maxLazy, int niceLength, int maxChainLength, Best.HTTP.Shared.Compression.Zlib.DeflateFlavor flavor);
                        }
                    }

                    class DeflateStream : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream _baseStream;
                        /*0x30*/ System.IO.Stream _innerStream;
                        /*0x38*/ bool _disposed;

                        /*0x3ee9984*/ DeflateStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen);
                        /*0x3ee9a58*/ DeflateStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen, int windowBits);
                        /*0x3ee9b3c*/ void set_FlushMode(Best.HTTP.Shared.Compression.Zlib.FlushType value);
                        /*0x3ee9ba8*/ void Dispose(bool disposing);
                        /*0x3ee9c74*/ bool get_CanRead();
                        /*0x3ee9cec*/ bool get_CanSeek();
                        /*0x3ee9cf4*/ bool get_CanWrite();
                        /*0x3ee9d6c*/ void Flush();
                        /*0x3ee9de0*/ long get_Length();
                        /*0x3ee9e18*/ long get_Position();
                        /*0x3ee9e68*/ void set_Position(long value);
                        /*0x3ee9ea0*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3ee9f14*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3ee9f4c*/ void SetLength(long value);
                        /*0x3ee9f70*/ void Write(byte[] buffer, int offset, int count);
                    }

                    class GZipStream : System.IO.Stream
                    {
                        static /*0x0*/ System.DateTime _unixEpoch;
                        static /*0x8*/ System.Text.Encoding iso8859dash1;
                        /*0x28*/ System.Nullable<System.DateTime> LastModified;
                        /*0x38*/ int _headerByteCount;
                        /*0x40*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream _baseStream;
                        /*0x48*/ bool _disposed;
                        /*0x49*/ bool _firstReadDone;
                        /*0x50*/ string _FileName;
                        /*0x58*/ string _Comment;
                        /*0x60*/ int _Crc32;

                        static /*0x3eeac88*/ GZipStream();
                        /*0x3eea208*/ GZipStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen);
                        /*0x3ee9fe4*/ string get_Comment();
                        /*0x3ee9fec*/ void set_Comment(string value);
                        /*0x3eea04c*/ string get_FileName();
                        /*0x3eea054*/ void set_FileName(string value);
                        /*0x3eea2cc*/ void set_FlushMode(Best.HTTP.Shared.Compression.Zlib.FlushType value);
                        /*0x3eea338*/ void Dispose(bool disposing);
                        /*0x3eea424*/ bool get_CanRead();
                        /*0x3eea49c*/ bool get_CanSeek();
                        /*0x3eea4a4*/ bool get_CanWrite();
                        /*0x3eea51c*/ void Flush();
                        /*0x3eea590*/ long get_Length();
                        /*0x3eea5c8*/ long get_Position();
                        /*0x3eea628*/ void set_Position(long value);
                        /*0x3eea660*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3eea724*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3eea75c*/ void SetLength(long value);
                        /*0x3eea780*/ void Write(byte[] buffer, int offset, int count);
                        /*0x3eea874*/ int EmitHeader();
                    }

                    class InflateBlocks
                    {
                        static /*0x0*/ int[] border;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.InflateBlocks.InflateBlockMode mode;
                        /*0x14*/ int left;
                        /*0x18*/ int table;
                        /*0x1c*/ int index;
                        /*0x20*/ int[] blens;
                        /*0x28*/ int[] bb;
                        /*0x30*/ int[] tb;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.InflateCodes codes;
                        /*0x40*/ int last;
                        /*0x48*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x50*/ int bitk;
                        /*0x54*/ int bitb;
                        /*0x58*/ int[] hufts;
                        /*0x60*/ byte[] window;
                        /*0x68*/ int end;
                        /*0x6c*/ int readAt;
                        /*0x70*/ int writeAt;
                        /*0x78*/ object checkfn;
                        /*0x80*/ uint check;
                        /*0x88*/ Best.HTTP.Shared.Compression.Zlib.InfTree inftree;

                        static /*0x3eed1c0*/ InflateBlocks();
                        /*0x3eead3c*/ InflateBlocks(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, object checkfn, int w);
                        /*0x3eeaef4*/ uint Reset();
                        /*0x3eeaf90*/ int Process(int r);
                        /*0x3eed130*/ void Free();
                        /*0x3eec074*/ int Flush(int r);

                        enum InflateBlockMode
                        {
                            TYPE = 0,
                            LENS = 1,
                            STORED = 2,
                            TABLE = 3,
                            BTREE = 4,
                            DTREE = 5,
                            CODES = 6,
                            DRY = 7,
                            DONE = 8,
                            BAD = 9,
                        }
                    }

                    class InternalInflateConstants
                    {
                        static /*0x0*/ int[] InflateMask;

                        static /*0x3eed260*/ InternalInflateConstants();
                    }

                    class InflateCodes
                    {
                        /*0x10*/ int mode;
                        /*0x14*/ int len;
                        /*0x18*/ int[] tree;
                        /*0x20*/ int tree_index;
                        /*0x24*/ int need;
                        /*0x28*/ int lit;
                        /*0x2c*/ int bitsToGet;
                        /*0x30*/ int dist;
                        /*0x34*/ byte lbits;
                        /*0x35*/ byte dbits;
                        /*0x38*/ int[] ltree;
                        /*0x40*/ int ltree_index;
                        /*0x48*/ int[] dtree;
                        /*0x50*/ int dtree_index;

                        /*0x3eeaee4*/ InflateCodes();
                        /*0x3eec2ec*/ void Init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index);
                        /*0x3eec6c4*/ int Process(Best.HTTP.Shared.Compression.Zlib.InflateBlocks blocks, int r);
                        /*0x3eed300*/ int InflateFast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, Best.HTTP.Shared.Compression.Zlib.InflateBlocks s, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                    }

                    class InflateManager
                    {
                        static /*0x0*/ byte[] mark;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.InflateManager.InflateManagerMode mode;
                        /*0x18*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x20*/ int method;
                        /*0x24*/ uint computedCheck;
                        /*0x28*/ uint expectedCheck;
                        /*0x2c*/ int marker;
                        /*0x30*/ bool _handleRfc1950HeaderBytes;
                        /*0x34*/ int wbits;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.InflateBlocks blocks;

                        static /*0x3eee490*/ InflateManager();
                        /*0x3eedb7c*/ InflateManager(bool expectRfc1950HeaderBytes);
                        /*0x3eedb74*/ bool get_HandleRfc1950HeaderBytes();
                        /*0x3eedbac*/ int Reset();
                        /*0x3eedc00*/ int End();
                        /*0x3eedc30*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, int w);
                        /*0x3eedd6c*/ int Inflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);

                        enum InflateManagerMode
                        {
                            METHOD = 0,
                            FLAG = 1,
                            DICT4 = 2,
                            DICT3 = 3,
                            DICT2 = 4,
                            DICT1 = 5,
                            DICT0 = 6,
                            BLOCKS = 7,
                            CHECK4 = 8,
                            CHECK3 = 9,
                            CHECK2 = 10,
                            CHECK1 = 11,
                            DONE = 12,
                            BAD = 13,
                        }
                    }

                    class InfTree
                    {
                        static /*0x0*/ int[] fixed_tl;
                        static /*0x8*/ int[] fixed_td;
                        static /*0x10*/ int[] cplens;
                        static /*0x18*/ int[] cplext;
                        static /*0x20*/ int[] cpdist;
                        static /*0x28*/ int[] cpdext;
                        /*0x10*/ int[] hn;
                        /*0x18*/ int[] v;
                        /*0x20*/ int[] c;
                        /*0x28*/ int[] r;
                        /*0x30*/ int[] u;
                        /*0x38*/ int[] x;

                        static /*0x3eeee78*/ InfTree();
                        static /*0x3eec20c*/ int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x3eeaeec*/ InfTree();
                        /*0x3eee530*/ int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v);
                        /*0x3eec354*/ int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x3eec470*/ int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x3eeecb0*/ void initWorkArea(int vsize);
                    }

                    enum FlushType
                    {
                        None = 0,
                        Partial = 1,
                        Sync = 2,
                        Full = 3,
                        Finish = 4,
                    }

                    enum CompressionLevel
                    {
                        None = 0,
                        Level0 = 0,
                        BestSpeed = 1,
                        Level1 = 1,
                        Level2 = 2,
                        Level3 = 3,
                        Level4 = 4,
                        Level5 = 5,
                        Default = 6,
                        Level6 = 6,
                        Level7 = 7,
                        Level8 = 8,
                        BestCompression = 9,
                        Level9 = 9,
                    }

                    enum CompressionStrategy
                    {
                        Default = 0,
                        Filtered = 1,
                        HuffmanOnly = 2,
                    }

                    enum CompressionMode
                    {
                        Compress = 0,
                        Decompress = 1,
                    }

                    class ZlibException : System.Exception
                    {
                        /*0x3ee8870*/ ZlibException(string s);
                    }

                    class SharedUtils
                    {
                        static /*0x3eeeca8*/ int URShift(int number, int bits);
                    }

                    class InternalConstants
                    {
                        static /*0x0*/ int MAX_BITS;
                        static /*0x4*/ int BL_CODES;
                        static /*0x8*/ int D_CODES;
                        static /*0xc*/ int LITERALS;
                        static /*0x10*/ int LENGTH_CODES;
                        static /*0x14*/ int L_CODES;
                        static /*0x18*/ int MAX_BL_BITS;
                        static /*0x1c*/ int REP_3_6;
                        static /*0x20*/ int REPZ_3_10;
                        static /*0x24*/ int REPZ_11_138;

                        static /*0x3eef07c*/ InternalConstants();
                    }

                    class StaticTree
                    {
                        static /*0x0*/ short[] lengthAndLiteralsTreeCodes;
                        static /*0x8*/ short[] distTreeCodes;
                        static /*0x10*/ Best.HTTP.Shared.Compression.Zlib.StaticTree Literals;
                        static /*0x18*/ Best.HTTP.Shared.Compression.Zlib.StaticTree Distances;
                        static /*0x20*/ Best.HTTP.Shared.Compression.Zlib.StaticTree BitLengths;
                        /*0x10*/ short[] treeCodes;
                        /*0x18*/ int[] extraBits;
                        /*0x20*/ int extraBase;
                        /*0x24*/ int elems;
                        /*0x28*/ int maxLength;

                        static /*0x3eef14c*/ StaticTree();
                        /*0x3eef0e0*/ StaticTree(short[] treeCodes, int[] extraBits, int extraBase, int elems, int maxLength);
                    }

                    class Adler
                    {
                        static /*0x0*/ uint BASE;
                        static /*0x4*/ int NMAX;

                        static /*0x3eef720*/ Adler();
                        static /*0x3eef3a0*/ uint Adler32(uint adler, byte[] buf, int index, int len);
                    }

                    enum ZlibStreamFlavor
                    {
                        ZLIB = 1950,
                        DEFLATE = 1951,
                        GZIP = 1952,
                    }

                    class ZlibBaseStream : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _z;
                        /*0x30*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream.StreamMode _streamMode;
                        /*0x34*/ Best.HTTP.Shared.Compression.Zlib.FlushType _flushMode;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor _flavor;
                        /*0x3c*/ Best.HTTP.Shared.Compression.Zlib.CompressionMode _compressionMode;
                        /*0x40*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel _level;
                        /*0x44*/ bool _leaveOpen;
                        /*0x48*/ byte[] _workingBuffer;
                        /*0x50*/ int _bufferSize;
                        /*0x54*/ int windowBitsMax;
                        /*0x58*/ byte[] _buf1;
                        /*0x60*/ System.IO.Stream _stream;
                        /*0x68*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy Strategy;
                        /*0x70*/ Best.HTTP.Shared.Compression.Crc.CRC32 crc;
                        /*0x78*/ string _GzipFileName;
                        /*0x80*/ string _GzipComment;
                        /*0x88*/ System.DateTime _GzipMtime;
                        /*0x90*/ int _gzipHeaderByteCount;
                        /*0x94*/ bool nomoreinput;

                        /*0x3eef798*/ ZlibBaseStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode compressionMode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor flavor, bool leaveOpen);
                        /*0x3eef7a4*/ ZlibBaseStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode compressionMode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor flavor, bool leaveOpen, int windowBits);
                        /*0x3eef770*/ int get_Crc32();
                        /*0x3eef94c*/ bool get__wantCompress();
                        /*0x3eef95c*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec get_z();
                        /*0x3eefb44*/ byte[] get_workingBuffer();
                        /*0x3eefbcc*/ void Write(byte[] buffer, int offset, int count);
                        /*0x3eeffdc*/ void finish();
                        /*0x3ef0740*/ void end();
                        /*0x3ef08ec*/ void Close();
                        /*0x3ef09d8*/ void Flush();
                        /*0x3ef09fc*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3ef0a34*/ void SetLength(long value);
                        /*0x3ef0a64*/ string ReadZeroTerminatedString();
                        /*0x3ef0c54*/ int _ReadAndValidateGzipHeader();
                        /*0x3ef1034*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3ef148c*/ bool get_CanRead();
                        /*0x3ef14ac*/ bool get_CanSeek();
                        /*0x3ef14cc*/ bool get_CanWrite();
                        /*0x3ef14ec*/ long get_Length();
                        /*0x3ef150c*/ long get_Position();
                        /*0x3ef1544*/ void set_Position(long value);

                        enum StreamMode
                        {
                            Writer = 0,
                            Reader = 1,
                            Undefined = 2,
                        }
                    }

                    class ZlibCodec
                    {
                        /*0x10*/ byte[] InputBuffer;
                        /*0x18*/ int NextIn;
                        /*0x1c*/ int AvailableBytesIn;
                        /*0x20*/ long TotalBytesIn;
                        /*0x28*/ byte[] OutputBuffer;
                        /*0x30*/ int NextOut;
                        /*0x34*/ int AvailableBytesOut;
                        /*0x38*/ long TotalBytesOut;
                        /*0x40*/ string Message;
                        /*0x48*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager dstate;
                        /*0x50*/ Best.HTTP.Shared.Compression.Zlib.InflateManager istate;
                        /*0x58*/ uint _Adler32;
                        /*0x5c*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel CompressLevel;
                        /*0x60*/ int WindowBits;
                        /*0x64*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy Strategy;

                        /*0x3eefa38*/ ZlibCodec();
                        /*0x3eefa4c*/ int InitializeInflate(int windowBits, bool expectRfc1950Header);
                        /*0x3eeff1c*/ int Inflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ef0864*/ int EndInflate();
                        /*0x3eefb34*/ int InitializeDeflate(Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int bits, bool wantRfc1950Header);
                        /*0x3ef157c*/ int _InternalInitializeDeflate(bool wantRfc1950Header);
                        /*0x3eeff7c*/ int Deflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ef07f8*/ int EndDeflate();
                        /*0x3ef1664*/ void flush_pending();
                        /*0x3ef17f8*/ int read_buf(byte[] buf, int start, int size);
                    }

                    class ZTree
                    {
                        static /*0x0*/ int HEAP_SIZE;
                        static /*0x8*/ int[] ExtraLengthBits;
                        static /*0x10*/ int[] ExtraDistanceBits;
                        static /*0x18*/ int[] extra_blbits;
                        static /*0x20*/ sbyte[] bl_order;
                        static /*0x28*/ sbyte[] _dist_code;
                        static /*0x30*/ sbyte[] LengthCode;
                        static /*0x38*/ int[] LengthBase;
                        static /*0x40*/ int[] DistanceBase;
                        /*0x10*/ short[] dyn_tree;
                        /*0x18*/ int max_code;
                        /*0x20*/ Best.HTTP.Shared.Compression.Zlib.StaticTree staticTree;

                        static /*0x3ef23b4*/ ZTree();
                        static /*0x3ef18ec*/ int DistanceCode(int dist);
                        static /*0x3ef21ac*/ void gen_codes(short[] tree, int max_code, short[] bl_count);
                        static /*0x3ef2384*/ int bi_reverse(int code, int len);
                        /*0x3ef23ac*/ ZTree();
                        /*0x3ef1994*/ void gen_bitlen(Best.HTTP.Shared.Compression.Zlib.DeflateManager s);
                        /*0x3ef1d1c*/ void build_tree(Best.HTTP.Shared.Compression.Zlib.DeflateManager s);
                    }
                }

                namespace Crc
                {
                    class CRC32
                    {
                        /*0x10*/ uint dwPolynomial;
                        /*0x18*/ long _TotalBytesRead;
                        /*0x20*/ bool reverseBits;
                        /*0x28*/ uint[] crc32Table;
                        /*0x30*/ uint _register;

                        static /*0x3ef26a0*/ uint ReverseBits(uint data);
                        static /*0x3ef26a8*/ byte ReverseBits(byte data);
                        /*0x3eef918*/ CRC32();
                        /*0x3ef2834*/ CRC32(bool reverseBits);
                        /*0x3ef2874*/ CRC32(int polynomial, bool reverseBits);
                        /*0x3ef2698*/ long get_TotalBytesRead();
                        /*0x3eef78c*/ int get_Crc32Result();
                        /*0x3eefe1c*/ void SlurpBlock(byte[] block, int offset, int count);
                        /*0x3ef26f4*/ void GenerateLookupTable();
                    }
                }
            }
        }

        namespace SecureProtocol
        {
            namespace Org
            {
                namespace BouncyCastle
                {
                    namespace Utilities
                    {
                        class Arrays
                        {
                            static /*0x0*/ byte[] EmptyBytes;
                            static /*0x8*/ int[] EmptyInts;

                            static /*0x3ef3a48*/ Arrays();
                            static /*0x3ef28b0*/ bool AreAllZeroes(byte[] buf, int off, int len);
                            static /*0x3ef291c*/ bool AreEqual(byte[] a, byte[] b);
                            static /*0x3ef2a08*/ bool ConstantTimeAreEqual(byte[] a, byte[] b);
                            static /*0x3ef2b14*/ bool ConstantTimeAreEqual(System.Span<byte> a, System.Span<byte> b);
                            static /*0x3ef2bf0*/ bool AreEqual(int[] a, int[] b);
                            static /*0x3ef299c*/ bool HaveSameContents(byte[] a, byte[] b);
                            static /*0x3ef2c70*/ bool HaveSameContents(int[] a, int[] b);
                            static /*0x3ef2cdc*/ int GetHashCode(byte[] data);
                            static /*0x3ef2d18*/ int GetHashCode(byte[] data, int off, int len);
                            static /*0x3ef2d6c*/ int GetHashCode(int[] data);
                            static /*0x3ef2da8*/ int GetHashCode(uint[] data, int off, int len);
                            static /*0x3ef2dfc*/ int GetHashCode(ulong[] data, int off, int len);
                            static /*0x3ef2e58*/ byte[] Clone(byte[] data);
                            static /*0x3ef2ed0*/ int[] Clone(int[] data);
                            static /*0x3ef2f48*/ uint[] Clone(uint[] data);
                            static /*0x3ef2fc0*/ ulong[] Clone(ulong[] data);
                            static /*0x3ef3038*/ bool Contains(short[] a, short n);
                            static /*0x3ef3094*/ bool Contains(int[] a, int n);
                            static /*0x3ef30f0*/ void Fill(byte[] buf, byte b);
                            static /*0x3ef314c*/ void Fill(byte[] buf, int from, int to, byte b);
                            static /*0x3ef3198*/ byte[] CopyOf(byte[] data, int newLength);
                            static /*0x3ef3250*/ int[] CopyOf(int[] data, int newLength);
                            static /*0x3ef3308*/ uint[] CopyOf(uint[] data, int newLength);
                            static /*0x3ef33c0*/ byte[] CopyOfRange(byte[] data, int from, int to);
                            static /*0x3ef34b8*/ int GetLength(int from, int to);
                            static /*0x3ef3554*/ short[] Append(short[] a, short b);
                            static /*0x3ef3624*/ int[] Append(int[] a, int b);
                            static /*0x3ef36f4*/ byte[] Concatenate(byte[] a, byte[] b);
                            static /*0x3ef37e8*/ byte[] Prepend(byte[] a, byte b);
                            static /*0x3ef389c*/ short[] Prepend(short[] a, short b);
                            static /*0x3ef3950*/ byte[] Reverse(byte[] a);
                            static /*0x3ef39fc*/ bool IsNullOrContainsNull(object[] array);
                        }

                        class BigIntegers
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Zero;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;

                            static /*0x3ef493c*/ BigIntegers();
                            static /*0x3ef3afc*/ byte[] AsUnsignedByteArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            static /*0x3ef3b10*/ byte[] AsUnsignedByteArray(int length, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            static /*0x3ef3c64*/ void AsUnsignedByteArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, System.Span<byte> buf);
                            static /*0x3ef3dd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateRandomBigInteger(int bitLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom secureRandom);
                            static /*0x3ef3e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateRandomInRange(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger min, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger max, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                            static /*0x3ef4088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModOddInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger M, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X);
                            static /*0x3ef4480*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModOddInverseVar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger M, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X);
                            static /*0x3ef4928*/ int GetUnsignedByteLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                        }

                        class Enums
                        {
                            static /*0x3910ae8*/ TEnum GetEnumValue<TEnum>(string s);
                            static /*0x3836db8*/ TEnum[] GetEnumValues<TEnum>();
                            static /*0x3910ae8*/ TEnum GetArbitraryValue<TEnum>();
                        }

                        interface IMemoable
                        {
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            /*0x3816710*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                        }

                        class Integers
                        {
                            static /*0x0*/ byte[] DeBruijnTZ;

                            static /*0x3ef4b98*/ Integers();
                            static /*0x3ef49d8*/ int HighestOneBit(int i);
                            static /*0x3ef4a40*/ uint HighestOneBit(uint i);
                            static /*0x3ef4a5c*/ int NumberOfLeadingZeros(int i);
                            static /*0x3ef4ad4*/ int NumberOfTrailingZeros(int i);
                            static /*0x3ef4b78*/ int RotateLeft(int i, int distance);
                            static /*0x3ef4b84*/ uint RotateLeft(uint i, int distance);
                            static /*0x3ef4b90*/ uint RotateRight(uint i, int distance);
                        }

                        class Longs
                        {
                            static /*0x0*/ byte[] DeBruijnTZ;

                            static /*0x3ef4d44*/ Longs();
                            static /*0x3ef4c38*/ int NumberOfLeadingZeros(long i);
                            static /*0x3ef4ca0*/ ulong Reverse(ulong i);
                            static /*0x3ef4d30*/ ulong ReverseBytes(ulong i);
                            static /*0x3ef4d38*/ ulong RotateLeft(ulong i, int distance);
                        }

                        class MemoableResetException : System.InvalidCastException
                        {
                            /*0x3ef4de4*/ MemoableResetException();
                            /*0x3ef4dec*/ MemoableResetException(string message);
                            /*0x3ef4df4*/ MemoableResetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Objects
                        {
                            static /*0x3ef4dfc*/ int GetHashCode(object obj);
                        }

                        class Platform
                        {
                            static /*0x0*/ System.Globalization.CompareInfo InvariantCompareInfo;

                            static /*0x3ef4fe0*/ Platform();
                            static /*0x3ef4e10*/ bool EqualsIgnoreCase(string a, string b);
                            static /*0x3ef4e1c*/ string GetEnvironmentVariable(string variable);
                            static /*0x3ef4ea4*/ int IndexOf(string source, char value, int startIndex);
                            static /*0x3ef4f30*/ bool EndsWith(string source, string suffix);
                            static /*0x3ef4fb4*/ string GetTypeName(object obj);
                        }

                        class Spans
                        {
                            static /*0x3910ae8*/ void CopyFrom<T>(System.Span<T> output, System.ReadOnlySpan<T> input);
                            static /*0x3910ae8*/ System.Span<T> FromNullable<T>(T[] array, int start);
                        }

                        class Strings
                        {
                            static /*0x3ef5074*/ string FromByteArray(byte[] bs);
                            static /*0x3ef5164*/ byte[] ToByteArray(string s);
                            static /*0x3ef5250*/ string FromAsciiByteArray(byte[] bytes);
                            static /*0x3ef5280*/ byte[] ToAsciiByteArray(string s);
                            static /*0x3ef52b0*/ string FromUtf8ByteArray(byte[] bytes);
                            static /*0x3ef52e0*/ byte[] ToUtf8ByteArray(string s);
                        }

                        namespace IO
                        {
                            class BaseInputStream : System.IO.Stream
                            {
                                /*0x3ef56c0*/ BaseInputStream();
                                /*0x3ef5310*/ bool get_CanRead();
                                /*0x3ef5318*/ bool get_CanSeek();
                                /*0x3ef5320*/ bool get_CanWrite();
                                /*0x3ef5328*/ void Flush();
                                /*0x3ef532c*/ long get_Length();
                                /*0x3ef5364*/ long get_Position();
                                /*0x3ef539c*/ void set_Position(long value);
                                /*0x3ef53d4*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ef55e0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ef5618*/ void SetLength(long value);
                                /*0x3ef5650*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ef5688*/ void Write(System.ReadOnlySpan<byte> buffer);
                            }

                            class BaseOutputStream : System.IO.Stream
                            {
                                /*0x3ef5994*/ BaseOutputStream();
                                /*0x3ef5718*/ bool get_CanRead();
                                /*0x3ef5720*/ bool get_CanSeek();
                                /*0x3ef5728*/ bool get_CanWrite();
                                /*0x3ef5730*/ void CopyTo(System.IO.Stream destination, int bufferSize);
                                /*0x3ef5768*/ void Flush();
                                /*0x3ef576c*/ long get_Length();
                                /*0x3ef57a4*/ long get_Position();
                                /*0x3ef57dc*/ void set_Position(long value);
                                /*0x3ef5814*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ef584c*/ int Read(System.Span<byte> buffer);
                                /*0x3ef5884*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ef58bc*/ void SetLength(long value);
                                /*0x3ef58f4*/ void Write(byte[] buffer, int offset, int count);
                            }

                            class FilterStream : System.IO.Stream
                            {
                                /*0x28*/ System.IO.Stream s;

                                /*0x3ef59ec*/ FilterStream(System.IO.Stream s);
                                /*0x3ef5ab8*/ bool get_CanRead();
                                /*0x3ef5ad8*/ bool get_CanSeek();
                                /*0x3ef5af8*/ bool get_CanWrite();
                                /*0x3ef5b18*/ void CopyTo(System.IO.Stream destination, int bufferSize);
                                /*0x3ef5b3c*/ void Flush();
                                /*0x3ef5b60*/ long get_Length();
                                /*0x3ef5b80*/ long get_Position();
                                /*0x3ef5ba4*/ void set_Position(long value);
                                /*0x3ef5bc8*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ef5bec*/ int Read(System.Span<byte> buffer);
                                /*0x3ef5c10*/ int ReadByte();
                                /*0x3ef5c34*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ef5c58*/ void SetLength(long value);
                                /*0x3ef5c7c*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ef5ca0*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x3ef5cc4*/ void WriteByte(byte value);
                                /*0x3ef5ce8*/ void Dispose(bool disposing);
                            }

                            class Streams
                            {
                                static /*0x3ef5d28*/ void PipeAll(System.IO.Stream inStr, System.IO.Stream outStr);
                                static /*0x3ef5d4c*/ byte[] ReadAll(System.IO.Stream inStr);
                                static /*0x3ef5dd8*/ int ReadFully(System.IO.Stream inStr, byte[] buf);
                                static /*0x3ef5df4*/ int ReadFully(System.IO.Stream inStr, byte[] buf, int off, int len);
                                static /*0x3ef5e74*/ int ReadFully(System.IO.Stream inStr, System.Span<byte> buffer);
                                static /*0x3ef5518*/ void ValidateBufferArguments(byte[] buffer, int offset, int count);
                            }

                            class TeeInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                            {
                                /*0x28*/ System.IO.Stream input;
                                /*0x30*/ System.IO.Stream tee;

                                /*0x3ef5f4c*/ TeeInputStream(System.IO.Stream input, System.IO.Stream tee);
                                /*0x3ef5f8c*/ void Dispose(bool disposing);
                                /*0x3ef5fdc*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ef6054*/ int Read(System.Span<byte> buffer);
                                /*0x3ef614c*/ int ReadByte();
                            }
                        }

                        namespace Encoders
                        {
                            class Hex
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Encoders.HexEncoder encoder;

                                static /*0x3ef66e4*/ Hex();
                                static /*0x3ef61a8*/ string ToHexString(byte[] data);
                                static /*0x3ef620c*/ string ToHexString(byte[] data, int off, int length);
                                static /*0x3ef627c*/ byte[] Encode(byte[] data, int off, int length);
                                static /*0x3ef6438*/ byte[] DecodeStrict(string str);
                            }

                            class HexEncoder
                            {
                                /*0x10*/ byte[] encodingTable;
                                /*0x18*/ byte[] decodingTable;

                                /*0x3ef675c*/ HexEncoder();
                                /*0x3ef6810*/ void InitialiseDecodingTable();
                                /*0x3ef6970*/ int Encode(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3ef634c*/ int Encode(byte[] buf, int off, int len, System.IO.Stream outStream);
                                /*0x3ef6a6c*/ int Encode(System.ReadOnlySpan<byte> data, System.IO.Stream outStream);
                                /*0x3ef64ac*/ byte[] DecodeStrict(string str, int off, int len);
                            }
                        }

                        namespace Date
                        {
                            class DateTimeUtilities
                            {
                                static /*0x0*/ System.DateTime UnixEpoch;
                                static /*0x8*/ long MaxUnixMs;
                                static /*0x10*/ long MinUnixMs;

                                static /*0x3ef6eb8*/ DateTimeUtilities();
                                static /*0x3ef6cc8*/ long DateTimeToUnixMs(System.DateTime dateTime);
                                static /*0x3ef6e34*/ long CurrentUnixMs();
                            }
                        }

                        namespace Collections
                        {
                            class CollectionUtilities
                            {
                                static /*0x3910ae8*/ T GetValueOrKey<T>(System.Collections.Generic.IDictionary<T, T> d, T k);
                                static /*0x3910ae8*/ V GetValueOrNull<K, V>(System.Collections.Generic.IDictionary<K, V> d, K k);
                                static /*0x38379c4*/ System.Collections.Generic.IDictionary<K, V> ReadOnly<K, V>(System.Collections.Generic.IDictionary<K, V> d);
                                static /*0x38379c4*/ string ToString<T>(System.Collections.Generic.IEnumerable<T> c);
                            }

                            class ReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
                            {
                                /*0x38159dc*/ ReadOnlyCollection();
                                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                                /*0x3813ffc*/ bool get_IsReadOnly();
                                /*0x3910ae8*/ void Add(T item);
                                /*0x38159dc*/ void Clear();
                                /*0x3910ae8*/ bool Remove(T item);
                                /*0x3910ae8*/ bool Contains(T item);
                                /*0x3814574*/ int get_Count();
                                /*0x381678c*/ void CopyTo(T[] array, int arrayIndex);
                                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                            }

                            class ReadOnlyCollectionProxy<T> : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Collections.ReadOnlyCollection<T>
                            {
                                /*0x0*/ System.Collections.Generic.ICollection<T> m_target;

                                /*0x3816710*/ ReadOnlyCollectionProxy(System.Collections.Generic.ICollection<T> target);
                                /*0x3910ae8*/ bool Contains(T item);
                                /*0x3814574*/ int get_Count();
                                /*0x381678c*/ void CopyTo(T[] array, int arrayIndex);
                                /*0x38148bc*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                            }

                            class ReadOnlyDictionary<K, V> : System.Collections.Generic.IDictionary<K, V>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>, System.Collections.IEnumerable
                            {
                                /*0x38159dc*/ ReadOnlyDictionary();
                                /*0x3910ae8*/ V get_Item(K key);
                                /*0x3910ae8*/ void set_Item(K key, V value);
                                /*0x38148bc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                                /*0x3813ffc*/ bool get_IsReadOnly();
                                /*0x3910ae8*/ void Add(K key, V value);
                                /*0x3910ae8*/ void Add(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x38159dc*/ void Clear();
                                /*0x3910ae8*/ bool Remove(K key);
                                /*0x3910ae8*/ bool Remove(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x3910ae8*/ bool Contains(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x3910ae8*/ bool ContainsKey(K key);
                                /*0x381678c*/ void CopyTo(System.Collections.Generic.KeyValuePair<K, V> array, int arrayIndex);
                                /*0x3814574*/ int get_Count();
                                /*0x38148bc*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>> GetEnumerator();
                                /*0x38148bc*/ System.Collections.Generic.ICollection<K> get_Keys();
                                /*0x3910ae8*/ bool TryGetValue(K key, ref V value);
                                /*0x38148bc*/ System.Collections.Generic.ICollection<V> get_Values();
                                /*0x3910ae8*/ V Lookup(K key);
                            }

                            class ReadOnlyDictionaryProxy<K, V> : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Collections.ReadOnlyDictionary<K, V>
                            {
                                /*0x0*/ System.Collections.Generic.IDictionary<K, V> m_target;

                                /*0x3816710*/ ReadOnlyDictionaryProxy(System.Collections.Generic.IDictionary<K, V> target);
                                /*0x3910ae8*/ bool Contains(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x3910ae8*/ bool ContainsKey(K key);
                                /*0x381678c*/ void CopyTo(System.Collections.Generic.KeyValuePair<K, V> array, int arrayIndex);
                                /*0x3814574*/ int get_Count();
                                /*0x38148bc*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>> GetEnumerator();
                                /*0x38148bc*/ System.Collections.Generic.ICollection<K> get_Keys();
                                /*0x3910ae8*/ bool TryGetValue(K key, ref V value);
                                /*0x38148bc*/ System.Collections.Generic.ICollection<V> get_Values();
                                /*0x3910ae8*/ V Lookup(K key);
                            }
                        }
                    }

                    namespace Tls
                    {
                        class AbstractTlsClient : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsPeer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext m_context;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] m_protocolVersions;
                            /*0x30*/ int[] m_cipherSuites;
                            /*0x38*/ System.Collections.Generic.IList<int> m_supportedGroups;
                            /*0x40*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithms;
                            /*0x48*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithmsCert;

                            /*0x3ef6f88*/ AbstractTlsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3ef6fe8*/ bool AllowUnexpectedServerExtension(int extensionType, byte[] extensionData);
                            /*0x3ef702c*/ System.Collections.Generic.IList<int> GetNamedGroupRoles();
                            /*0x3ef7140*/ void CheckForUnexpectedServerExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions, int extensionType);
                            /*0x3ef720c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity GetPskIdentity();
                            /*0x3ef7214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity GetSrpIdentity();
                            /*0x3ef721c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier GetDHGroupVerifier();
                            /*0x3ef72cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier GetSrpConfigVerifier();
                            /*0x3ef737c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> GetCertificateAuthorities();
                            /*0x3ef7384*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> GetProtocolNames();
                            /*0x3ef738c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest GetCertificateStatusRequest();
                            /*0x3ef74f8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> GetMultiCertStatusRequest();
                            /*0x3ef7500*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetSniServerNames();
                            /*0x3ef7508*/ System.Collections.Generic.IList<int> GetSupportedGroups(System.Collections.Generic.IList<int> namedGroupRoles);
                            /*0x3ef7880*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithms();
                            /*0x3ef78dc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithmsCert();
                            /*0x3ef78e4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> GetTrustedCAIndication();
                            /*0x3ef78ec*/ short[] GetAllowedClientCertificateTypes();
                            /*0x3ef78f4*/ short[] GetAllowedServerCertificateTypes();
                            /*0x3ef78fc*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext context);
                            /*0x3ef7958*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x3ef7960*/ int[] GetCipherSuites();
                            /*0x3ef7968*/ void NotifyHandshakeBeginning();
                            /*0x3ef79a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession GetSessionToResume();
                            /*0x3ef79ac*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal> GetExternalPsks();
                            /*0x3ef79b4*/ bool IsFallback();
                            /*0x3ef79bc*/ System.Collections.Generic.IDictionary<int, System.Byte[]> GetClientExtensions();
                            /*0x3ef802c*/ System.Collections.Generic.IList<int> GetEarlyKeyShareGroups();
                            /*0x3ef82d0*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion serverVersion);
                            /*0x3ef82d4*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x3ef82d8*/ void NotifySessionID(byte[] sessionID);
                            /*0x3ef82dc*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                            /*0x3ef82e0*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                            /*0x3ef82e4*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            /*0x3ef8494*/ void ProcessServerSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                            /*0x3ef84d8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> GetClientSupplementalData();
                            /*0x3ef84e0*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                        }

                        class AbstractTlsContext : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                            static /*0x0*/ long counter;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x18*/ int m_connectionEnd;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator m_nonceGenerator;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters m_securityParameters;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] m_clientSupportedVersions;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_clientVersion;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_rsaPreMasterSecretVersion;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession m_session;
                            /*0x50*/ bool m_connected;

                            static /*0x3ef8e78*/ AbstractTlsContext();
                            static /*0x3ef84e4*/ long NextCounterValue();
                            static /*0x3ef853c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int connectionEnd);
                            /*0x3ef8800*/ AbstractTlsContext(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int connectionEnd);
                            /*0x3ef889c*/ void HandshakeBeginning(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer peer);
                            /*0x3ef8adc*/ void HandshakeComplete(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer peer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x3ef8c94*/ bool get_IsHandshaking();
                            /*0x3ef8d64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x3ef8d6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            /*0x3ef8d74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                            /*0x3813ffc*/ bool get_IsServer();
                            /*0x3ef8e2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] get_ClientSupportedVersions();
                            /*0x3ef8e34*/ void SetClientSupportedVersions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] clientSupportedVersions);
                            /*0x3ef8e3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ClientVersion();
                            /*0x3ef8e44*/ void SetClientVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                            /*0x3ef8e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_RsaPreMasterSecretVersion();
                            /*0x3ef8e54*/ void SetRsaPreMasterSecretVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion rsaPreMasterSecretVersion);
                            /*0x3ef8e5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                        }

                        class AbstractTlsKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange
                        {
                            /*0x10*/ int m_keyExchange;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;

                            /*0x3ef8f00*/ AbstractTlsKeyExchange(int keyExchange);
                            /*0x3ef8f28*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x38159dc*/ void SkipServerCredentials();
                            /*0x3ef8f30*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3ef8f6c*/ bool get_RequiresServerKeyExchange();
                            /*0x3ef8f74*/ void SkipServerKeyExchange();
                            /*0x3ef8fcc*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3ef9024*/ short[] GetClientCertificateTypes();
                            /*0x3ef902c*/ void SkipClientCredentials();
                            /*0x3816710*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3816710*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class AbstractTlsKeyExchangeFactory : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory
                        {
                            /*0x3ef924c*/ AbstractTlsKeyExchangeFactory();
                            /*0x3ef9030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            /*0x3ef906c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3ef90a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3ef90e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x3ef9120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x3ef915c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x3ef9198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3ef91d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x3ef9210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class AbstractTlsPeer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable m_closeHandle;

                            /*0x3ef6fb8*/ AbstractTlsPeer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3ef9254*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetSupportedVersions();
                            /*0x38148bc*/ int[] GetSupportedCipherSuites();
                            /*0x3ef94d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x3ef94dc*/ void NotifyCloseHandle(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable closeHandle);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x38148bc*/ int[] GetCipherSuites();
                            /*0x3ef79a0*/ void NotifyHandshakeBeginning();
                            /*0x3ef9508*/ bool AllowLegacyResumption();
                            /*0x3ef9510*/ int GetMaxCertificateChainLength();
                            /*0x3ef9518*/ int GetMaxHandshakeMessageSize();
                            /*0x3ef9520*/ short[] GetPskKeyExchangeModes();
                            /*0x3ef9584*/ bool RequiresCloseNotify();
                            /*0x3ef958c*/ bool RequiresExtendedMasterSecret();
                            /*0x3ef9594*/ bool ShouldUseExtendedMasterSecret();
                            /*0x3ef959c*/ bool ShouldUseExtendedPadding();
                            /*0x3ef95a4*/ bool ShouldUseGmtUnixTime();
                            /*0x3ef95ac*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                            /*0x3ef95f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory GetKeyExchangeFactory();
                            /*0x3ef964c*/ void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                            /*0x3ef9650*/ void NotifyAlertReceived(short alertLevel, short alertDescription);
                            /*0x3ef9654*/ void NotifyHandshakeComplete();
                        }

                        class AlertDescription
                        {
                            static /*0x3ef9658*/ string GetName(short alertDescription);
                            static /*0x3ef9978*/ string GetText(short alertDescription);
                        }

                        class ByteQueue
                        {
                            /*0x10*/ byte[] m_databuf;
                            /*0x18*/ int m_skipped;
                            /*0x1c*/ int m_available;
                            /*0x20*/ bool m_readOnlyBuf;

                            static /*0x3ef9a08*/ int GetAllocationSize(int i);
                            /*0x3ef9a60*/ ByteQueue();
                            /*0x3ef9a68*/ ByteQueue(int capacity);
                            /*0x3ef9b10*/ ByteQueue(byte[] buf, int off, int len);
                            /*0x3ef9b60*/ void AddData(byte[] buf, int off, int len);
                            /*0x3ef9c44*/ void AddData(System.ReadOnlySpan<byte> buffer);
                            /*0x3ef9e94*/ int get_Available();
                            /*0x3ef9e9c*/ void Read(byte[] buf, int offset, int len, int skip);
                            /*0x3efa070*/ void Read(System.Span<byte> buffer, int skip);
                            /*0x3efa22c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput ReadHandshakeMessage(int length);
                            /*0x3efa390*/ int ReadInt32();
                            /*0x3efa448*/ void RemoveData(int i);
                            /*0x3efa514*/ void RemoveData(byte[] buf, int off, int len, int skip);
                            /*0x3efa540*/ void RemoveData(System.Span<byte> buffer, int skip);
                            /*0x3efa5a8*/ byte[] RemoveData(int len, int skip);
                            /*0x3efa630*/ void Shrink();
                        }

                        class ByteQueueInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_buffer;

                            /*0x3efa720*/ ByteQueueInputStream();
                            /*0x3efa788*/ void AddBytes(byte[] buf, int bufOff, int bufLen);
                            /*0x3efa7a0*/ int Peek(byte[] buf);
                            /*0x3efa840*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3efa908*/ int Read(System.Span<byte> buffer);
                            /*0x3efa9f0*/ int ReadByte();
                            /*0x3efaa38*/ int get_Available();
                        }

                        class ByteQueueOutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_buffer;

                            /*0x3efaa54*/ ByteQueueOutputStream();
                            /*0x3efaabc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue get_Buffer();
                            /*0x3efaac4*/ void Write(byte[] buffer, int offset, int count);
                            /*0x3efab18*/ void Write(System.ReadOnlySpan<byte> buffer);
                            /*0x3efab30*/ void WriteByte(byte value);
                        }

                        class Certificate
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] EmptyCerts;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] EmptyCertEntries;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate EmptyChain;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate EmptyChainTls13;
                            /*0x10*/ byte[] m_certificateRequestContext;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] m_certificateEntryList;
                            /*0x20*/ short m_certificateType;

                            static /*0x3efbe00*/ Certificate();
                            static /*0x3efabb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] Convert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] certificateList);
                            static /*0x3efb6ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate.ParseOptions options, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream messageInput, System.IO.Stream endPointHashOutput);
                            static /*0x3efb62c*/ void CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate cert, byte[] encoding, System.IO.Stream output);
                            /*0x3efade0*/ Certificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] certificateList);
                            /*0x3efae54*/ Certificate(byte[] certificateRequestContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] certificateEntryList);
                            /*0x3efae64*/ Certificate(short certificateType, byte[] certificateRequestContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] certificateEntryList);
                            /*0x3efafd4*/ byte[] GetCertificateRequestContext();
                            /*0x3efb030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate GetCertificateAt(int index);
                            /*0x3efb068*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] GetCertificateEntryList();
                            /*0x3efb128*/ short get_CertificateType();
                            /*0x3efb130*/ int get_Length();
                            /*0x3efb14c*/ bool get_IsEmpty();
                            /*0x3efb170*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream messageOutput, System.IO.Stream endPointHashOutput);
                            /*0x3efb06c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] CloneCertificateEntryList();

                            class ParseOptions
                            {
                                /*0x10*/ short <CertificateType>k__BackingField;
                                /*0x14*/ int <MaxChainLength>k__BackingField;

                                /*0x3efbf70*/ ParseOptions();
                                /*0x3efbf50*/ short get_CertificateType();
                                /*0x3efbf58*/ void set_CertificateType(short value);
                                /*0x3efbf60*/ int get_MaxChainLength();
                                /*0x3efbf68*/ void set_MaxChainLength(int value);
                            }
                        }

                        class CertificateEntry
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_certificate;
                            /*0x18*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;

                            /*0x3efad50*/ CertificateEntry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            /*0x3efbf80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate get_Certificate();
                            /*0x3efbf88*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                        }

                        class CertificateRequest
                        {
                            /*0x10*/ byte[] m_certificateRequestContext;
                            /*0x18*/ short[] m_certificateTypes;
                            /*0x20*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithms;
                            /*0x28*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithmsCert;
                            /*0x30*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> m_certificateAuthorities;

                            static /*0x3efbf90*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CheckSupportedSignatureAlgorithms(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, short alertDescription);
                            static /*0x3efc2fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x3efbff0*/ CertificateRequest(short[] certificateTypes, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x3efc1c4*/ CertificateRequest(byte[] certificateRequestContext, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithmsCert, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x3efc008*/ CertificateRequest(byte[] certificateRequestContext, short[] certificateTypes, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithmsCert, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x3efc218*/ byte[] GetCertificateRequestContext();
                            /*0x3efc274*/ short[] get_CertificateTypes();
                            /*0x3efc27c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_SupportedSignatureAlgorithms();
                            /*0x3efc284*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_SupportedSignatureAlgorithmsCert();
                            /*0x3efc28c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> get_CertificateAuthorities();
                            /*0x3efc294*/ bool HasCertificateRequestContext(byte[] certificateRequestContext);
                        }

                        class CertificateStatus
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_response;

                            static /*0x3efc8a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            static /*0x3efc7ac*/ bool IsCorrectType(short statusType, object response);
                            static /*0x3efcda4*/ bool IsOcspResponseList(object response);
                            static /*0x3efcd2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponse ParseOcspResponse(byte[] derEncoding);
                            static /*0x3efcce4*/ void RequireStatusRequestVersion(int minVersion, int statusRequestVersion);
                            /*0x3efc708*/ CertificateStatus(short statusType, object response);
                        }

                        class CertificateStatusRequest
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_request;

                            static /*0x3efce6c*/ bool IsCorrectType(short statusType, object request);
                            /*0x3ef7454*/ CertificateStatusRequest(short statusType, object request);
                            /*0x3efcf34*/ void Encode(System.IO.Stream output);
                        }

                        class CertificateStatusRequestItemV2
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_request;

                            /*0x3efd5a0*/ void Encode(System.IO.Stream output);
                        }

                        class CertificateVerify
                        {
                            /*0x10*/ int m_algorithm;
                            /*0x18*/ byte[] m_signature;

                            static /*0x3efd814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x3efd6f8*/ CertificateVerify(int algorithm, byte[] signature);
                            /*0x3efd804*/ int get_Algorithm();
                            /*0x3efd80c*/ byte[] get_Signature();
                        }

                        class CipherSuite
                        {
                            static /*0x3efd918*/ bool IsScsv(int cipherSuite);
                        }

                        class ClientHello
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_version;
                            /*0x18*/ byte[] m_random;
                            /*0x20*/ byte[] m_sessionID;
                            /*0x28*/ byte[] m_cookie;
                            /*0x30*/ int[] m_cipherSuites;
                            /*0x38*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;
                            /*0x40*/ int m_bindersSize;

                            /*0x3efd940*/ ClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] random, byte[] sessionID, byte[] cookie, int[] cipherSuites, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            /*0x3efd9f8*/ int get_BindersSize();
                            /*0x3efda00*/ int[] get_CipherSuites();
                            /*0x3efda08*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                            /*0x3efda10*/ byte[] get_SessionID();
                            /*0x3efda18*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream output);
                        }

                        class CombinedHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_md5;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_sha1;

                            /*0x3efdb8c*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash md5, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash sha1);
                            /*0x3efdc88*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3efddcc*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CombinedHash t);
                            /*0x3efdf30*/ void Update(byte[] input, int inOff, int len);
                            /*0x3efe064*/ void Update(System.ReadOnlySpan<byte> input);
                            /*0x3efe18c*/ byte[] CalculateHash();
                            /*0x3efe354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                            /*0x3efe3ac*/ void Reset();
                        }

                        class ContentType
                        {
                            static /*0x3efe4b4*/ string GetName(short contentType);
                            static /*0x3efe554*/ string GetText(short contentType);
                        }

                        class DefaultTlsDHGroupVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier
                        {
                            static /*0x0*/ int DefaultMinimumPrimeBits;
                            static /*0x8*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> DefaultGroups;
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> m_groups;
                            /*0x18*/ int m_minimumPrimeBits;

                            static /*0x3efe6b8*/ DefaultTlsDHGroupVerifier();
                            static /*0x3efe5e4*/ void AddDefaultGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x3ef726c*/ DefaultTlsDHGroupVerifier();
                            /*0x3efe81c*/ DefaultTlsDHGroupVerifier(int minimumPrimeBits);
                            /*0x3efe88c*/ DefaultTlsDHGroupVerifier(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> groups, int minimumPrimeBits);
                            /*0x3efe930*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x3efe97c*/ int get_MinimumPrimeBits();
                            /*0x3efe984*/ bool AreGroupsEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup b);
                            /*0x3efea54*/ bool AreParametersEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                            /*0x3efea80*/ bool CheckGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x3efed80*/ bool CheckMinimumPrimeBits(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                        }

                        class DefaultTlsKeyExchangeFactory : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory
                        {
                            /*0x3ef9644*/ DefaultTlsKeyExchangeFactory();
                            /*0x3efeddc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            /*0x3efee38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3efeea4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3efef10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x3efef6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x3efefc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x3eff024*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3eff098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x3eff0f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class DefaultTlsSrpConfigVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier
                        {
                            static /*0x0*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> DefaultGroups;
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> m_groups;

                            static /*0x3eff168*/ DefaultTlsSrpConfigVerifier();
                            /*0x3ef731c*/ DefaultTlsSrpConfigVerifier();
                            /*0x3eff554*/ DefaultTlsSrpConfigVerifier(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> groups);
                            /*0x3eff5e4*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                            /*0x3eff8e4*/ bool AreGroupsEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group b);
                            /*0x3eff9ac*/ bool AreParametersEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                        }

                        class DeferredHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer m_buf;
                            /*0x20*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash> m_hashes;
                            /*0x28*/ bool m_forceBuffering;
                            /*0x29*/ bool m_sealed;

                            /*0x3eff9d8*/ DeferredHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x3effac4*/ void CopyBufferTo(System.IO.Stream output);
                            /*0x3effb3c*/ void ForceBuffering();
                            /*0x3effba0*/ void NotifyPrfDetermined();
                            /*0x3effe9c*/ void TrackHashAlgorithm(int cryptoHashAlgorithm);
                            /*0x3effef8*/ void SealHashAlgorithms();
                            /*0x3f00384*/ void StopTracking();
                            /*0x3f005b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash ForkPrfHash();
                            /*0x3f00894*/ byte[] GetFinalHash(int cryptoHashAlgorithm);
                            /*0x3f00ad4*/ void Update(byte[] input, int inOff, int len);
                            /*0x3f00ef4*/ void Update(System.ReadOnlySpan<byte> input);
                            /*0x3f01300*/ byte[] CalculateHash();
                            /*0x3f0134c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                            /*0x3f01398*/ void Reset();
                            /*0x3efff5c*/ void CheckStopBuffering();
                            /*0x3effc74*/ void CheckTrackingHash(int cryptoHashAlgorithm);
                            /*0x3f006fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash(int cryptoHashAlgorithm);
                            /*0x3f004d8*/ void CloneHash(System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash> newHashes, int cryptoHashAlgorithm);
                        }

                        class DigestInputBuffer : System.IO.MemoryStream
                        {
                            /*0x3effabc*/ DigestInputBuffer();
                            /*0x3f0081c*/ void UpdateDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                            /*0x3effb2c*/ void CopyInputTo(System.IO.Stream output);
                        }

                        class DigitallySigned
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm m_algorithm;
                            /*0x18*/ byte[] m_signature;

                            static /*0x3f01898*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x3f01780*/ DigitallySigned(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm algorithm, byte[] signature);
                            /*0x3f01810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm get_Algorithm();
                            /*0x3f01818*/ byte[] get_Signature();
                            /*0x3f01820*/ void Encode(System.IO.Stream output);
                        }

                        class ExtensionType
                        {
                            static /*0x3f019d8*/ string GetName(int extensionType);
                            static /*0x3f01c28*/ string GetText(int extensionType);
                            static /*0x3f01cb8*/ bool IsRecognized(int extensionType);
                        }

                        class HandshakeMessageInput : System.IO.MemoryStream
                        {
                            /*0x50*/ int m_offset;

                            /*0x3efa360*/ HandshakeMessageInput(byte[] buf, int offset, int length);
                            /*0x3f01d00*/ void UpdateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                        }

                        class HandshakeMessageOutput : System.IO.MemoryStream
                        {
                            static /*0x3f01d78*/ int GetLength(int bodyLength);
                            static /*0x3f01d80*/ void Send(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol protocol, short handshakeType, byte[] body);
                            /*0x3f01ffc*/ HandshakeMessageOutput(short handshakeType);
                            /*0x3f01e1c*/ HandshakeMessageOutput(short handshakeType, int bodyLength);
                            /*0x3f01ec0*/ void Send(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol protocol);
                            /*0x3f02004*/ void PrepareClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, int bindersSize);
                            /*0x3f021bc*/ void SendClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol clientProtocol, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, int bindersSize);
                        }

                        class HandshakeType
                        {
                            static /*0x3f02318*/ string GetName(short handshakeType);
                            static /*0x3f02488*/ string GetText(short handshakeType);
                            static /*0x3f02518*/ bool IsRecognized(short handshakeType);
                        }

                        class HashAlgorithm
                        {
                            static /*0x3f02544*/ string GetName(short hashAlgorithm);
                            static /*0x3f02608*/ string GetText(short hashAlgorithm);
                            static /*0x3f02698*/ bool IsRecognized(short hashAlgorithm);
                        }

                        class KeyExchangeAlgorithm
                        {
                            static /*0x3f026bc*/ bool IsAnonymous(int keyExchangeAlgorithm);
                        }

                        class KeyShareEntry
                        {
                            /*0x10*/ int m_namedGroup;
                            /*0x18*/ byte[] m_keyExchange;

                            static /*0x3f026d8*/ bool CheckKeyExchangeLength(int length);
                            static /*0x3f028dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry Parse(System.IO.Stream input);
                            /*0x3f026ec*/ KeyShareEntry(int namedGroup, byte[] keyExchange);
                            /*0x3f02850*/ int get_NamedGroup();
                            /*0x3f02858*/ byte[] get_KeyExchange();
                            /*0x3f02860*/ void Encode(System.IO.Stream output);
                        }

                        class KeyUpdateRequest
                        {
                            static /*0x3f02984*/ bool IsValid(short keyUpdateRequest);
                        }

                        class MacAlgorithm
                        {
                            static /*0x3f02994*/ string GetName(int macAlgorithm);
                            static /*0x3f02a38*/ string GetText(int macAlgorithm);
                        }

                        class MaxFragmentLength
                        {
                            static /*0x3f02ac8*/ bool IsValid(short maxFragmentLength);
                        }

                        class NamedGroup
                        {
                            static /*0x0*/ string[] CurveNames;
                            static /*0x8*/ string[] FiniteFieldNames;

                            static /*0x3f02e30*/ NamedGroup();
                            static /*0x3f02adc*/ bool CanBeNegotiated(int namedGroup, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f02c74*/ string GetCurveName(int namedGroup);
                            static /*0x3f02d24*/ bool IsPrivate(int namedGroup);
                            static /*0x3f02bd4*/ bool IsValid(int namedGroup);
                            static /*0x3f02dc4*/ bool RefersToAnECDHCurve(int namedGroup);
                            static /*0x3f02d14*/ bool RefersToASpecificCurve(int namedGroup);
                            static /*0x3f02e20*/ bool RefersToASpecificFiniteField(int namedGroup);
                            static /*0x3f02d44*/ bool RefersToASpecificGroup(int namedGroup);
                        }

                        class NewSessionTicket
                        {
                            /*0x10*/ long m_ticketLifetimeHint;
                            /*0x18*/ byte[] m_ticket;

                            static /*0x3f03800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket Parse(System.IO.Stream input);
                            /*0x3f037c8*/ NewSessionTicket(long ticketLifetimeHint, byte[] ticket);
                        }

                        class OcspStatusRequest
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponderID> m_responderIDList;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions m_requestExtensions;

                            /*0x3ef7410*/ OcspStatusRequest(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponderID> responderIDList, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions requestExtensions);
                            /*0x3efd020*/ void Encode(System.IO.Stream output);
                        }

                        class OfferedPsks
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> m_identities;
                            /*0x18*/ System.Collections.Generic.IList<System.Byte[]> m_binders;
                            /*0x20*/ int m_bindersSize;

                            static /*0x3f04698*/ void EncodeBinders(System.IO.Stream output, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig bindersConfig);
                            static /*0x3f04a94*/ int GetBindersSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks);
                            /*0x3f038b4*/ OfferedPsks(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> identities);
                            /*0x3f038c0*/ OfferedPsks(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> identities, System.Collections.Generic.IList<System.Byte[]> binders, int bindersSize);
                            /*0x3f03b4c*/ void Encode(System.IO.Stream output);

                            class BindersConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] m_psks;
                                /*0x18*/ short[] m_pskKeyExchangeModes;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] m_earlySecrets;
                                /*0x28*/ int m_bindersSize;

                                /*0x3f04c08*/ BindersConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, short[] pskKeyExchangeModes, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] earlySecrets, int bindersSize);
                            }
                        }

                        class PrfAlgorithm
                        {
                            static /*0x3f04c74*/ string GetName(int prfAlgorithm);
                            static /*0x3f04d24*/ string GetText(int prfAlgorithm);
                        }

                        class ProtocolName
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_1_1;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_1;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_2;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_3;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Stun_Turn;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Stun_Nat_Discovery;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_2_Tls;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_2_Tcp;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName WebRtc;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName WebRtc_Confidential;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Ftp;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Imap;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Pop3;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName ManageSieve;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Coap;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Xmpp_Client;
                            static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Xmpp_Server;
                            static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Acme_Tls_1;
                            static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Oasis_Mqtt;
                            static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Dns_Over_Tls;
                            static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Ntske_1;
                            static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Sun_Rpc;
                            static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_3;
                            static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Smb_2;
                            static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Irc;
                            static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Nntp_Reading;
                            static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Nntp_Transit;
                            static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Dns_Over_Quic;
                            /*0x10*/ byte[] m_bytes;

                            static /*0x3f05128*/ ProtocolName();
                            static /*0x3f04db4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName AsUtf8Encoding(string name);
                            static /*0x3f04f64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Parse(System.IO.Stream input);
                            /*0x3f04e1c*/ ProtocolName(byte[] bytes);
                            /*0x3f04ef0*/ string GetUtf8Decoding();
                            /*0x3f04ef8*/ void Encode(System.IO.Stream output);
                            /*0x3f04ff8*/ bool Equals(object obj);
                            /*0x3f05094*/ int GetHashCode();
                        }

                        class ProtocolVersion
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SSLv3;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv10;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv11;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv12;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv13;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv10;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv12;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv13;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_EARLIEST_SUPPORTED_DTLS;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_EARLIEST_SUPPORTED_TLS;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_LATEST_SUPPORTED_DTLS;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_LATEST_SUPPORTED_TLS;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_EARLIEST_SUPPORTED_DTLS;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_EARLIEST_SUPPORTED_TLS;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_LATEST_SUPPORTED_DTLS;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_LATEST_SUPPORTED_TLS;
                            /*0x10*/ int version;
                            /*0x18*/ string name;

                            static /*0x3f06284*/ ProtocolVersion();
                            static /*0x3f05734*/ bool Contains(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f057c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetEarliestTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3f05864*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetLatestTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3f058e4*/ bool IsSupportedTlsVersionClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f05c70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion Get(int major, int minor);
                            static /*0x3f061c8*/ void CheckUint8(int versionOctet);
                            static /*0x3f06098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetUnknownVersion(int major, int minor, string prefix);
                            /*0x3f0598c*/ ProtocolVersion(int v, string name);
                            /*0x3ef92b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] DownTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion min);
                            /*0x3f05af8*/ int get_FullVersion();
                            /*0x3f05b00*/ int get_MajorVersion();
                            /*0x3f0585c*/ int get_MinorVersion();
                            /*0x3f05b0c*/ bool get_IsDtls();
                            /*0x3f05b20*/ bool get_IsSsl();
                            /*0x3f05848*/ bool get_IsTls();
                            /*0x3f05b84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetEquivalentTlsVersion();
                            /*0x3f05a14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetPreviousVersion();
                            /*0x3f05f34*/ bool IsEarlierVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3f05f7c*/ bool IsEqualOrEarlierVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3f059c8*/ bool IsEqualOrLaterVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3f05fc8*/ bool IsLaterVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3f06010*/ bool Equals(object other);
                            /*0x3f057a8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion other);
                            /*0x3f06090*/ int GetHashCode();
                            /*0x3f061c0*/ string ToString();
                        }

                        class PskIdentity
                        {
                            /*0x10*/ byte[] m_identity;
                            /*0x18*/ long m_obfuscatedTicketAge;

                            /*0x3f06644*/ PskIdentity(byte[] identity, long obfuscatedTicketAge);
                            /*0x3f045fc*/ int GetEncodedLength();
                            /*0x3f067c8*/ byte[] get_Identity();
                            /*0x3f067d0*/ long get_ObfuscatedTicketAge();
                            /*0x3f0461c*/ void Encode(System.IO.Stream output);
                            /*0x3f067d8*/ bool Equals(object obj);
                            /*0x3f06890*/ int GetHashCode();
                        }

                        class RecordPreview
                        {
                            /*0x10*/ int recordSize;
                            /*0x14*/ int contentLimit;

                            /*0x3f06934*/ RecordPreview(int recordSize, int contentLimit);
                            /*0x3f06960*/ int get_RecordSize();
                        }

                        class RecordStream
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.Record m_inputRecord;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.SequenceNumber m_readSeqNo;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.SequenceNumber m_writeSeqNo;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol m_handler;
                            /*0x30*/ System.IO.Stream m_input;
                            /*0x38*/ System.IO.Stream m_output;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_pendingCipher;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_readCipher;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_readCipherDeferred;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_writeCipher;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_writeVersion;
                            /*0x68*/ int m_plaintextLimit;
                            /*0x6c*/ int m_ciphertextLimit;
                            /*0x70*/ bool m_ignoreChangeCipherSpec;

                            static /*0x3f07614*/ void CheckLength(int length, int limit, short alertDescription);
                            /*0x3f06968*/ RecordStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol handler, System.IO.Stream input, System.IO.Stream output);
                            /*0x3f06b70*/ int get_PlaintextLimit();
                            /*0x3f06b78*/ void SetPlaintextLimit(int plaintextLimit);
                            /*0x3f06c2c*/ void SetWriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion writeVersion);
                            /*0x3f06c34*/ void SetIgnoreChangeCipherSpec(bool ignoreChangeCipherSpec);
                            /*0x3f06c40*/ void SetPendingCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher tlsCipher);
                            /*0x3f06c48*/ void NotifyChangeCipherSpecReceived();
                            /*0x3f06cac*/ void EnablePendingCipherRead(bool deferred);
                            /*0x3f06e90*/ void EnablePendingCipherWrite();
                            /*0x3f06ef8*/ void FinaliseHandshake();
                            /*0x3f06f64*/ bool NeedsKeyUpdate();
                            /*0x3f07040*/ void NotifyKeyUpdateReceived();
                            /*0x3f070f0*/ void NotifyKeyUpdateSent();
                            /*0x3f071a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordPreview PreviewRecordHeader(byte[] recordHeader);
                            /*0x3f07664*/ bool ReadFullRecord(byte[] input, int inputOff, int inputLen);
                            /*0x3f079d0*/ bool ReadRecord();
                            /*0x3f07864*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeAndVerify(short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int off, int len);
                            /*0x3f07e64*/ void WriteRecord(short contentType, byte[] plaintext, int plaintextOffset, int plaintextLength);
                            /*0x3f07f48*/ void WriteRecord(short contentType, System.ReadOnlySpan<byte> plaintext);
                            /*0x3f08178*/ void Close();
                            /*0x3f077bc*/ void CheckChangeCipherSpec(byte[] buf, int off, int len);
                            /*0x3f07380*/ short CheckRecordType(byte[] buf, int off);

                            class Record
                            {
                                /*0x10*/ byte[] m_header;
                                /*0x18*/ byte[] m_buf;
                                /*0x20*/ int m_pos;

                                /*0x3f06adc*/ Record();
                                /*0x3f08378*/ void FillTo(System.IO.Stream input, int length);
                                /*0x3f07cbc*/ void ReadFragment(System.IO.Stream input, int fragmentLength);
                                /*0x3f07c44*/ bool ReadHeader(System.IO.Stream input);
                                /*0x3f082d4*/ void Reset();
                                /*0x3f0841c*/ void Resize(int length);
                            }

                            class SequenceNumber
                            {
                                /*0x10*/ long m_value;
                                /*0x18*/ bool m_exhausted;

                                /*0x3f06b68*/ SequenceNumber();
                                /*0x3f06f88*/ long get_CurrentValue();
                                /*0x3f07d38*/ long NextValue(short alertDescription);
                                /*0x3f06ddc*/ void Reset();
                            }
                        }

                        class SecurityParameters
                        {
                            /*0x10*/ int m_entity;
                            /*0x14*/ bool m_resumedSession;
                            /*0x15*/ bool m_secureRenegotiation;
                            /*0x18*/ int m_cipherSuite;
                            /*0x1c*/ short m_maxFragmentLength;
                            /*0x20*/ int m_prfAlgorithm;
                            /*0x24*/ int m_prfCryptoHashAlgorithm;
                            /*0x28*/ int m_prfHashLength;
                            /*0x2c*/ int m_verifyDataLength;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_baseKeyClient;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_baseKeyServer;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_earlyExporterMasterSecret;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_earlySecret;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_exporterMasterSecret;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_handshakeSecret;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_trafficSecretClient;
                            /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_trafficSecretServer;
                            /*0x78*/ byte[] m_clientRandom;
                            /*0x80*/ byte[] m_serverRandom;
                            /*0x88*/ byte[] m_sessionHash;
                            /*0x90*/ byte[] m_sessionID;
                            /*0x98*/ byte[] m_pskIdentity;
                            /*0xa0*/ byte[] m_srpIdentity;
                            /*0xa8*/ byte[] m_tlsServerEndPoint;
                            /*0xb0*/ byte[] m_tlsUnique;
                            /*0xb8*/ bool m_encryptThenMac;
                            /*0xb9*/ bool m_extendedMasterSecret;
                            /*0xba*/ bool m_extendedPadding;
                            /*0xbb*/ bool m_truncatedHmac;
                            /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName m_applicationProtocol;
                            /*0xc8*/ bool m_applicationProtocolSet;
                            /*0xd0*/ short[] m_clientCertTypes;
                            /*0xd8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> m_clientServerNames;
                            /*0xe0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_clientSigAlgs;
                            /*0xe8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_clientSigAlgsCert;
                            /*0xf0*/ int[] m_clientSupportedGroups;
                            /*0xf8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_serverSigAlgs;
                            /*0x100*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_serverSigAlgsCert;
                            /*0x108*/ int[] m_serverSupportedGroups;
                            /*0x110*/ int m_keyExchangeAlgorithm;
                            /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                            /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                            /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                            /*0x130*/ int m_statusRequestVersion;
                            /*0x134*/ short m_clientCertificateType;
                            /*0x138*/ byte[] m_localVerifyData;
                            /*0x140*/ byte[] m_peerVerifyData;
                            /*0x148*/ bool <IsRenegotiating>k__BackingField;
                            /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate <PreRenegotiatingServerCert>k__BackingField;

                            static /*0x3f086b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ClearSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                            /*0x3f088ac*/ SecurityParameters();
                            /*0x3f08540*/ void Clear();
                            /*0x3f08758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName get_ApplicationProtocol();
                            /*0x3f08760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_BaseKeyClient();
                            /*0x3f08768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_BaseKeyServer();
                            /*0x3f08770*/ int get_CipherSuite();
                            /*0x3f08778*/ byte[] get_ClientRandom();
                            /*0x3f08780*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ClientSigAlgs();
                            /*0x3f08788*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ClientSigAlgsCert();
                            /*0x3f08790*/ int[] get_ClientSupportedGroups();
                            /*0x3f08798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_HandshakeSecret();
                            /*0x3f087a0*/ bool get_IsEncryptThenMac();
                            /*0x3f087a8*/ bool get_IsExtendedMasterSecret();
                            /*0x3f087b0*/ bool get_IsExtendedPadding();
                            /*0x3f087b8*/ bool get_IsResumedSession();
                            /*0x3f087c0*/ bool get_IsSecureRenegotiation();
                            /*0x3f087c8*/ bool get_IsTruncatedHmac();
                            /*0x3f087d0*/ int get_KeyExchangeAlgorithm();
                            /*0x3f087d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_LocalCertificate();
                            /*0x3f087e0*/ byte[] get_LocalVerifyData();
                            /*0x3f087e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_MasterSecret();
                            /*0x3f087f0*/ short get_MaxFragmentLength();
                            /*0x3f087f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_NegotiatedVersion();
                            /*0x3f08800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PeerCertificate();
                            /*0x3f08808*/ byte[] get_PeerVerifyData();
                            /*0x3f08810*/ int get_PrfAlgorithm();
                            /*0x3f08818*/ int get_PrfCryptoHashAlgorithm();
                            /*0x3f08820*/ int get_PrfHashLength();
                            /*0x3f08828*/ byte[] get_PskIdentity();
                            /*0x3f08830*/ byte[] get_ServerRandom();
                            /*0x3f08838*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ServerSigAlgs();
                            /*0x3f08840*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ServerSigAlgsCert();
                            /*0x3f08848*/ byte[] get_SessionHash();
                            /*0x3f08850*/ byte[] get_SessionID();
                            /*0x3f08858*/ byte[] get_SrpIdentity();
                            /*0x3f08860*/ int get_StatusRequestVersion();
                            /*0x3f08868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_TrafficSecretClient();
                            /*0x3f08870*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_TrafficSecretServer();
                            /*0x3f08878*/ int get_VerifyDataLength();
                            /*0x3f08880*/ bool get_IsRenegotiating();
                            /*0x3f08888*/ void set_IsRenegotiating(bool value);
                            /*0x3f08894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PreRenegotiatingServerCert();
                            /*0x3f0889c*/ void set_PreRenegotiatingServerCert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate value);
                        }

                        class ServerHello
                        {
                            static /*0x0*/ byte[] HelloRetryRequestMagic;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_version;
                            /*0x18*/ byte[] m_random;
                            /*0x20*/ byte[] m_sessionID;
                            /*0x28*/ int m_cipherSuite;
                            /*0x30*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;

                            static /*0x3f08f48*/ ServerHello();
                            static /*0x3f08a10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello Parse(System.IO.MemoryStream input);
                            /*0x3f088d4*/ ServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] random, byte[] sessionID, int cipherSuite, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            /*0x3f08958*/ int get_CipherSuite();
                            /*0x3f08960*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                            /*0x3f08968*/ byte[] get_Random();
                            /*0x3f08970*/ byte[] get_SessionID();
                            /*0x3f08978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_Version();
                            /*0x3f08980*/ bool IsHelloRetryRequest();
                        }

                        class ServerName
                        {
                            /*0x10*/ short nameType;
                            /*0x18*/ byte[] nameData;

                            static /*0x3f092c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName Parse(System.IO.Stream input);
                            /*0x3f08fe8*/ ServerName(short nameType, byte[] nameData);
                            /*0x3f09178*/ short get_NameType();
                            /*0x3f09180*/ void Encode(System.IO.Stream output);
                        }

                        class ServerNameList
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> m_serverNameList;

                            static /*0x3f09a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerNameList Parse(System.IO.Stream input);
                            static /*0x3f09900*/ short[] CheckNameType(short[] nameTypesSeen, short nameType);
                            /*0x3f09420*/ ServerNameList(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            /*0x3f0949c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> get_ServerNames();
                            /*0x3f094a4*/ void Encode(System.IO.Stream output);
                        }

                        class ServerSrpParams
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_N;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_B;
                            /*0x28*/ byte[] m_s;

                            static /*0x3f09da4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerSrpParams Parse(System.IO.Stream input);
                            /*0x3f09cc0*/ ServerSrpParams(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, byte[] s, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B);
                            /*0x3f09d84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_B();
                            /*0x3f09d8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                            /*0x3f09d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            /*0x3f09d9c*/ byte[] get_S();
                        }

                        class SessionParameters
                        {
                            /*0x10*/ int m_cipherSuite;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                            /*0x38*/ byte[] m_pskIdentity;
                            /*0x40*/ byte[] m_srpIdentity;
                            /*0x48*/ byte[] m_encodedServerExtensions;
                            /*0x50*/ bool m_extendedMasterSecret;

                            /*0x3f09fc4*/ SessionParameters(int cipherSuite, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate localCertificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate peerCertificate, byte[] pskIdentity, byte[] srpIdentity, byte[] encodedServerExtensions, bool extendedMasterSecret);
                            /*0x3f0a0f8*/ int get_CipherSuite();
                            /*0x3f0a100*/ void Clear();
                            /*0x3f0a1ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters Copy();
                            /*0x3f0a264*/ bool get_IsExtendedMasterSecret();
                            /*0x3f0a26c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_LocalCertificate();
                            /*0x3f0a274*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_MasterSecret();
                            /*0x3f0a27c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_NegotiatedVersion();
                            /*0x3f0a284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PeerCertificate();
                            /*0x3f0a28c*/ byte[] get_PskIdentity();
                            /*0x3f0a294*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadServerExtensions();
                            /*0x3f0a30c*/ byte[] get_SrpIdentity();

                            class Builder
                            {
                                /*0x10*/ int m_cipherSuite;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                                /*0x38*/ byte[] m_pskIdentity;
                                /*0x40*/ byte[] m_srpIdentity;
                                /*0x48*/ byte[] m_encodedServerExtensions;
                                /*0x50*/ bool m_extendedMasterSecret;

                                /*0x3f0a314*/ Builder();
                                /*0x3f0a324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters Build();
                                /*0x3f0a4ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetCipherSuite(int cipherSuite);
                                /*0x3f0a4b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetExtendedMasterSecret(bool extendedMasterSecret);
                                /*0x3f0a4c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetLocalCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate localCertificate);
                                /*0x3f0a4dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret);
                                /*0x3f0a4f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetNegotiatedVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion);
                                /*0x3f0a514*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetPeerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate peerCertificate);
                                /*0x3f0a530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetPskIdentity(byte[] pskIdentity);
                                /*0x3f0a54c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetSrpIdentity(byte[] srpIdentity);
                                /*0x3f0a568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                                /*0x3f0a42c*/ void Validate(bool condition, string parameter);
                            }
                        }

                        class SignatureAlgorithm
                        {
                            static /*0x3f0a690*/ string GetName(short signatureAlgorithm);
                            static /*0x3f0a7e0*/ string GetText(short signatureAlgorithm);
                        }

                        class SignatureAndHashAlgorithm
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP256r1tls13_sha256;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP384r1tls13_sha384;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP512r1tls13_sha512;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ed25519;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ed448;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm gostr34102012_256;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm gostr34102012_512;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha256;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha384;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha512;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha256;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha384;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha512;
                            /*0x10*/ short m_hash;
                            /*0x12*/ short m_signature;

                            static /*0x3f0b064*/ SignatureAndHashAlgorithm();
                            static /*0x3f0a870*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetInstance(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3f0a8f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetInstanceIntrinsic(short signatureAlgorithm);
                            static /*0x3f0ac08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Create(int signatureScheme);
                            static /*0x3f0aba0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Create(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3f0adf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Parse(System.IO.Stream input);
                            /*0x3f0ac70*/ SignatureAndHashAlgorithm(short hash, short signature);
                            /*0x3f0ad4c*/ short get_Hash();
                            /*0x3f0ad54*/ short get_Signature();
                            /*0x3f0ad5c*/ void Encode(System.IO.Stream output);
                            /*0x3f0ae88*/ bool Equals(object obj);
                            /*0x3f0af08*/ int GetHashCode();
                            /*0x3f0af18*/ string ToString();
                        }

                        class SignatureScheme
                        {
                            static /*0x3f0b248*/ int From(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlg);
                            static /*0x3f0b298*/ int From(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3f0b2a4*/ int GetCryptoHashAlgorithm(int signatureScheme);
                            static /*0x3f0b374*/ int GetCryptoHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3f0ac60*/ short GetHashAlgorithm(int signatureScheme);
                            static /*0x3f0ac68*/ short GetSignatureAlgorithm(int signatureScheme);
                            static /*0x3f0b384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(int signatureScheme);
                            static /*0x3f0b3dc*/ bool IsRsaPss(int signatureScheme);
                        }

                        class Ssl3Utilities
                        {
                            static /*0x0*/ byte[] SSL_CLIENT;
                            static /*0x8*/ byte[] SSL_SERVER;
                            static /*0x10*/ byte[] IPAD;
                            static /*0x18*/ byte[] OPAD;

                            static /*0x3f0bbf0*/ Ssl3Utilities();
                            static /*0x3f0b400*/ byte[] CalculateVerifyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, bool isServer);
                            static /*0x3f0b5d0*/ void CompleteCombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash md5, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash sha1);
                            static /*0x3f0b820*/ void CompleteHash(byte[] master_secret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash, int padLength);
                            static /*0x3f0bb20*/ byte[] GenPad(byte b, int count);
                            static /*0x3f0bbb8*/ void WriteEncryptedPms(byte[] encryptedPms, System.IO.Stream output);
                        }

                        class SupplementalDataEntry
                        {
                            /*0x10*/ int m_dataType;
                            /*0x18*/ byte[] m_data;

                            /*0x3f0bd1c*/ SupplementalDataEntry(int dataType, byte[] data);
                            /*0x3f0bd54*/ int get_DataType();
                            /*0x3f0bd5c*/ byte[] get_Data();
                        }

                        interface TlsAuthentication
                        {
                            /*0x3816710*/ void NotifyServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate serverCertificate);
                            /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials GetClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                        }

                        interface TlsClient : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x3816710*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext context);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession GetSessionToResume();
                            /*0x38148bc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal> GetExternalPsks();
                            /*0x3813ffc*/ bool IsFallback();
                            /*0x38148bc*/ System.Collections.Generic.IDictionary<int, System.Byte[]> GetClientExtensions();
                            /*0x38148bc*/ System.Collections.Generic.IList<int> GetEarlyKeyShareGroups();
                            /*0x3816710*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion selectedVersion);
                            /*0x3816710*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x3816710*/ void NotifySessionID(byte[] sessionID);
                            /*0x3815ed0*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                            /*0x3816710*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                            /*0x3816710*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            /*0x3816710*/ void ProcessServerSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity GetPskIdentity();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity GetSrpIdentity();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier GetDHGroupVerifier();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier GetSrpConfigVerifier();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                            /*0x38148bc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> GetClientSupplementalData();
                            /*0x3816710*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                        }

                        interface TlsClientContext : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                        }

                        class TlsClientContextImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                            /*0x3f0bd64*/ TlsClientContextImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3f0bdd0*/ bool get_IsServer();
                        }

                        class TlsClientProtocol : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol
                        {
                            /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient m_tlsClient;
                            /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContextImpl m_tlsClientContext;
                            /*0xb8*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> m_clientAgreements;
                            /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig m_clientBinders;
                            /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ClientHello m_clientHello;
                            /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange m_keyExchange;
                            /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication m_authentication;
                            /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus m_certificateStatus;
                            /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest m_certificateRequest;

                            /*0x3f0bdd8*/ TlsClientProtocol();
                            /*0x3f0bf8c*/ void Connect(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient tlsClient);
                            /*0x3f0c22c*/ void BeginHandshake(bool renegotiation);
                            /*0x3f0c49c*/ void CleanupHandshake();
                            /*0x3f0c648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext get_Context();
                            /*0x3f0c650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext get_ContextAdmin();
                            /*0x3f0c658*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer get_Peer();
                            /*0x3f0c660*/ void Handle13HandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x3f0d194*/ void HandleHandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x3f0fa84*/ void HandleServerCertificate();
                            /*0x3f0fe54*/ void HandleSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x3f100b4*/ void Process13HelloRetryRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello helloRetryRequest);
                            /*0x3f11530*/ void Process13ServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello, bool afterHelloRetryRequest);
                            /*0x3f12334*/ void Process13ServerHelloCoda(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello, bool afterHelloRetryRequest);
                            /*0x3f12548*/ void ProcessServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello);
                            /*0x3f13940*/ void Receive13CertificateRequest(System.IO.MemoryStream buf, bool postHandshakeAuth);
                            /*0x3f13b48*/ void Send13CertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate);
                            /*0x3f13d5c*/ void Receive13EncryptedExtensions(System.IO.MemoryStream buf);
                            /*0x3f1461c*/ void Receive13NewSessionTicket(System.IO.MemoryStream buf);
                            /*0x3f14804*/ void Receive13ServerCertificate(System.IO.MemoryStream buf);
                            /*0x3f14bec*/ void Receive13ServerCertificateVerify(System.IO.MemoryStream buf);
                            /*0x3f14e00*/ void Receive13ServerFinished(System.IO.MemoryStream buf);
                            /*0x3f14e10*/ void ReceiveCertificateRequest(System.IO.MemoryStream buf);
                            /*0x3f15088*/ void ReceiveNewSessionTicket(System.IO.MemoryStream buf);
                            /*0x3f1514c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello ReceiveServerHelloMessage(System.IO.MemoryStream buf);
                            /*0x3f151a0*/ void Send13ClientHelloRetry();
                            /*0x3f15c98*/ void SendCertificateVerifyMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned certificateVerify);
                            /*0x3f15d24*/ void SendClientHello();
                            /*0x3f17520*/ void SendClientHelloMessage();
                            /*0x3f175f4*/ void SendClientKeyExchange();
                            /*0x3f176dc*/ void Skip13CertificateRequest();
                            /*0x3f176e8*/ void Skip13ServerCertificate();
                        }

                        interface TlsCloseable
                        {
                        }

                        interface TlsContext
                        {
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                            /*0x3813ffc*/ bool get_IsServer();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ClientVersion();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_RsaPreMasterSecretVersion();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                        }

                        interface TlsCredentialedAgreement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                            /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate peerCertificate);
                        }

                        interface TlsCredentialedDecryptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                        }

                        interface TlsCredentialedSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                            /*0x3814a3c*/ byte[] GenerateRawSignature(byte[] hash);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm get_SignatureAndHashAlgorithm();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamSigner GetStreamSigner();
                        }

                        interface TlsCredentials
                        {
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_Certificate();
                        }

                        class TlsDHanonKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f17898*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f17908*/ TlsDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3f17910*/ TlsDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            /*0x3f17970*/ void SkipServerCredentials();
                            /*0x3f17974*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f179ac*/ bool get_RequiresServerKeyExchange();
                            /*0x3f179b4*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f17ec4*/ short[] GetClientCertificateTypes();
                            /*0x3f17ecc*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f17f04*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f17fe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsDheKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f18084*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f180fc*/ TlsDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3f18104*/ TlsDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            /*0x3f18164*/ void SkipServerCredentials();
                            /*0x3f1819c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f181d0*/ bool get_RequiresServerKeyExchange();
                            /*0x3f181d8*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f18910*/ short[] GetClientCertificateTypes();
                            /*0x3f18980*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f18a80*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f18b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsDHGroupVerifier
                        {
                            /*0x38141c4*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                        }

                        class TlsDHKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement m_agreementCredentials;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_dhPeerCertificate;

                            static /*0x3f18c00*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f18c78*/ TlsDHKeyExchange(int keyExchange);
                            /*0x3f18ca8*/ void SkipServerCredentials();
                            /*0x3f18ce0*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f18db0*/ short[] GetClientCertificateTypes();
                            /*0x3f18e24*/ void SkipClientCredentials();
                            /*0x3f18e5c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f18f78*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f18f7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsDHUtilities
                        {
                            static /*0x3f19024*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetDHGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            static /*0x3f19060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetNamedDHGroup(int namedGroup);
                            static /*0x3f1917c*/ int GetNamedGroupForDHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                            static /*0x3f1929c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetStandardGroupForDHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                            static /*0x3f17c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig ReceiveDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, System.IO.Stream input);
                            static /*0x3f19708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReadDHParameter(System.IO.Stream input);
                        }

                        class TlsEccUtilities
                        {
                            static /*0x3f197a0*/ bool IsEccCipherSuite(int cipherSuite);
                            static /*0x3f198f0*/ void CheckPointEncoding(int namedGroup, byte[] encoding);
                            static /*0x3f199d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ReceiveECDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                        }

                        class TlsECDHanonKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f19bd0*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f19c40*/ TlsECDHanonKeyExchange(int keyExchange);
                            /*0x3f19c48*/ TlsECDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x3f19c8c*/ void SkipServerCredentials();
                            /*0x3f19c90*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f19cc8*/ bool get_RequiresServerKeyExchange();
                            /*0x3f19cd0*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f19eec*/ short[] GetClientCertificateTypes();
                            /*0x3f19ef4*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f19f2c*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f19f3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x3f19fe0*/ void GenerateEphemeral(System.IO.Stream output);
                            /*0x3f1a158*/ void ProcessEphemeral(byte[] point);
                        }

                        class TlsECDheKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f1a220*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f1a294*/ TlsECDheKeyExchange(int keyExchange);
                            /*0x3f1a29c*/ TlsECDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x3f1a2e0*/ void SkipServerCredentials();
                            /*0x3f1a318*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f1a34c*/ bool get_RequiresServerKeyExchange();
                            /*0x3f1a354*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f1a5e8*/ short[] GetClientCertificateTypes();
                            /*0x3f1a658*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f1a6ac*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f1a6bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x3f1a760*/ void GenerateEphemeral(System.IO.Stream output);
                            /*0x3f1a83c*/ void ProcessEphemeral(byte[] point);
                        }

                        class TlsECDHKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement m_agreementCredentials;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_ecdhPeerCertificate;

                            static /*0x3f1a904*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f1a978*/ TlsECDHKeyExchange(int keyExchange);
                            /*0x3f1a9a8*/ void SkipServerCredentials();
                            /*0x3f1a9e0*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f1aab0*/ short[] GetClientCertificateTypes();
                            /*0x3f1ab24*/ void SkipClientCredentials();
                            /*0x3f1ab5c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f1abcc*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f1abd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsException : System.IO.IOException
                        {
                            /*0x3f1ac78*/ TlsException();
                            /*0x3f1ac80*/ TlsException(string message);
                            /*0x3f1ac88*/ TlsException(string message, System.Exception innerException);
                            /*0x3f1ac90*/ TlsException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class TlsExtensionsUtilities
                        {
                            static /*0x3f16aa4*/ System.Collections.Generic.IDictionary<int, System.Byte[]> EnsureExtensionsInitialised(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1ac98*/ void AddAlpnExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocolNameList);
                            static /*0x3f1b124*/ void AddCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> authorities);
                            static /*0x3f1b5f8*/ void AddClientCertificateTypeExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] certificateTypes);
                            static /*0x3f15528*/ void AddCookieExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, byte[] cookie);
                            static /*0x3f1b850*/ void AddEncryptThenMacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f17470*/ void AddExtendedMasterSecretExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1b9a0*/ void AddKeyShareClientHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x3f1be50*/ void AddPreSharedKeyClientHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks offeredPsks);
                            static /*0x3f1bfbc*/ void AddPskKeyExchangeModesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] modes);
                            static /*0x3f1c144*/ void AddServerCertificateTypeExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] certificateTypes);
                            static /*0x3f1c1fc*/ void AddServerNameExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            static /*0x3f1c390*/ void AddSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f1c4ec*/ void AddSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f1c5a8*/ void AddStatusRequestExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest statusRequest);
                            static /*0x3f1c714*/ void AddStatusRequestV2Extension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> statusRequestV2);
                            static /*0x3f1cba0*/ void AddSupportedGroupsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<int> namedGroups);
                            static /*0x3f1ce90*/ void AddSupportedPointFormatsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] ecPointFormats);
                            static /*0x3f16b14*/ void AddSupportedVersionsExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3f1d180*/ void AddTrustedCAKeysExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> trustedAuthoritiesList);
                            static /*0x3f136d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName GetAlpnExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1d6cc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> GetCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f13ac8*/ short GetClientCertificateTypeExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short defaultValue);
                            static /*0x3f111e0*/ byte[] GetCookieExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f11030*/ int GetKeyShareHelloRetryRequest(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f11d68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry GetKeyShareServerHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1db9c*/ short GetMaxFragmentLengthExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f11cf8*/ int GetPreSharedKeyServerHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1dcb4*/ short GetServerCertificateTypeExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short defaultValue);
                            static /*0x3f16bcc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetServerNameExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1ddfc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1df4c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f16d18*/ int[] GetSupportedGroupsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1e0ec*/ short[] GetSupportedPointFormatsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f10ea4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetSupportedVersionsExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f13744*/ bool HasEncryptThenMacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f13664*/ bool HasExtendedMasterSecretExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f13818*/ bool HasTruncatedHmacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f1ad50*/ byte[] CreateAlpnExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocolNameList);
                            static /*0x3f1b1dc*/ byte[] CreateCertificateAuthoritiesExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> authorities);
                            static /*0x3f1b6b0*/ byte[] CreateCertificateTypeExtensionClient(short[] certificateTypes);
                            static /*0x3f1b780*/ byte[] CreateCookieExtension(byte[] cookie);
                            static /*0x3f1e564*/ byte[] CreateEmptyExtensionData();
                            static /*0x3f1b900*/ byte[] CreateEncryptThenMacExtension();
                            static /*0x3f1b950*/ byte[] CreateExtendedMasterSecretExtension();
                            static /*0x3f1ba58*/ byte[] CreateKeyShareClientHello(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x3f1bf08*/ byte[] CreatePreSharedKeyClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks offeredPsks);
                            static /*0x3f1c074*/ byte[] CreatePskKeyExchangeModesExtension(short[] modes);
                            static /*0x3f1c2b4*/ byte[] CreateServerNameExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            static /*0x3f1c448*/ byte[] CreateSignatureAlgorithmsExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f1c5a4*/ byte[] CreateSignatureAlgorithmsCertExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f1c660*/ byte[] CreateStatusRequestExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest statusRequest);
                            static /*0x3f1c7cc*/ byte[] CreateStatusRequestV2Extension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> statusRequestV2);
                            static /*0x3f1cc58*/ byte[] CreateSupportedGroupsExtension(System.Collections.Generic.IList<int> namedGroups);
                            static /*0x3f1cf48*/ byte[] CreateSupportedPointFormatsExtension(short[] ecPointFormats);
                            static /*0x3f1cffc*/ byte[] CreateSupportedVersionsExtensionClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3f1d238*/ byte[] CreateTrustedCAKeysExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> trustedAuthoritiesList);
                            static /*0x3f1eca0*/ bool ReadEmptyExtensionData(byte[] extensionData);
                            static /*0x3f1ed24*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> ReadAlpnExtensionClient(byte[] extensionData);
                            static /*0x3f1d570*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName ReadAlpnExtensionServer(byte[] extensionData);
                            static /*0x3f1d738*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> ReadCertificateAuthoritiesExtension(byte[] extensionData);
                            static /*0x3f1d9d8*/ short ReadCertificateTypeExtensionServer(byte[] extensionData);
                            static /*0x3f1da2c*/ byte[] ReadCookieExtension(byte[] extensionData);
                            static /*0x3f1e2f8*/ bool ReadEncryptThenMacExtension(byte[] extensionData);
                            static /*0x3f1e30c*/ bool ReadExtendedMasterSecretExtension(byte[] extensionData);
                            static /*0x3f1da84*/ int ReadKeyShareHelloRetryRequest(byte[] extensionData);
                            static /*0x3f1dad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry ReadKeyShareServerHello(byte[] extensionData);
                            static /*0x3f1dc0c*/ short ReadMaxFragmentLengthExtension(byte[] extensionData);
                            static /*0x3f1dc60*/ int ReadPreSharedKeyServerHello(byte[] extensionData);
                            static /*0x3f1dd34*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> ReadServerNameExtensionClient(byte[] extensionData);
                            static /*0x3f1de68*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ReadSignatureAlgorithmsExtension(byte[] extensionData);
                            static /*0x3f1dfb8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ReadSignatureAlgorithmsCertExtension(byte[] extensionData);
                            static /*0x3f1dfbc*/ int[] ReadSupportedGroupsExtension(byte[] extensionData);
                            static /*0x3f1e158*/ short[] ReadSupportedPointFormatsExtension(byte[] extensionData);
                            static /*0x3f1e228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadSupportedVersionsExtensionServer(byte[] extensionData);
                            static /*0x3f1e320*/ bool ReadTruncatedHmacExtension(byte[] extensionData);
                            static /*0x3f1e334*/ byte[] PatchOpaque16(System.IO.MemoryStream buf);
                        }

                        class TlsFatalAlert : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsException
                        {
                            /*0x8c*/ byte m_alertDescription;

                            static /*0x3f1f864*/ string GetMessage(short alertDescription, string detailMessage);
                            /*0x3f08e8c*/ TlsFatalAlert(short alertDescription);
                            /*0x3f1f9b4*/ TlsFatalAlert(short alertDescription, string detailMessage);
                            /*0x3f1f9bc*/ TlsFatalAlert(short alertDescription, System.Exception alertCause);
                            /*0x3f1f8d0*/ TlsFatalAlert(short alertDescription, string detailMessage, System.Exception alertCause);
                            /*0x3f1f9c8*/ TlsFatalAlert(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x3f1fa50*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x3f1fad4*/ short get_AlertDescription();
                        }

                        class TlsFatalAlertReceived : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsException
                        {
                            /*0x8c*/ byte m_alertDescription;

                            /*0x3f1fadc*/ TlsFatalAlertReceived(short alertDescription);
                            /*0x3f1fbac*/ TlsFatalAlertReceived(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x3f1fc34*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface TlsHandshakeHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x3816710*/ void CopyBufferTo(System.IO.Stream output);
                            /*0x38159dc*/ void ForceBuffering();
                            /*0x38159dc*/ void NotifyPrfDetermined();
                            /*0x3815ed0*/ void TrackHashAlgorithm(int cryptoHashAlgorithm);
                            /*0x38159dc*/ void SealHashAlgorithms();
                            /*0x38159dc*/ void StopTracking();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash ForkPrfHash();
                            /*0x3814964*/ byte[] GetFinalHash(int cryptoHashAlgorithm);
                        }

                        interface TlsKeyExchange
                        {
                            /*0x3816710*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x38159dc*/ void SkipServerCredentials();
                            /*0x3816710*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x38159dc*/ void SkipServerKeyExchange();
                            /*0x3816710*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x38148bc*/ short[] GetClientCertificateTypes();
                            /*0x38159dc*/ void SkipClientCredentials();
                            /*0x3816710*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3816710*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsKeyExchangeFactory
                        {
                            /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x38149a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x38149a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class TlsNoCloseNotifyException : System.IO.EndOfStreamException
                        {
                            /*0x3f1fcb8*/ TlsNoCloseNotifyException();
                            /*0x3f1fd04*/ TlsNoCloseNotifyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class TlsObjectIdentifiers
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_pe_tlsfeature;

                            static /*0x3f1fd0c*/ TlsObjectIdentifiers();
                        }

                        interface TlsPeer
                        {
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x3816710*/ void NotifyCloseHandle(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable closehandle);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x38148bc*/ int[] GetCipherSuites();
                            /*0x38159dc*/ void NotifyHandshakeBeginning();
                            /*0x3813ffc*/ bool AllowLegacyResumption();
                            /*0x3814574*/ int GetMaxCertificateChainLength();
                            /*0x3814574*/ int GetMaxHandshakeMessageSize();
                            /*0x38148bc*/ short[] GetPskKeyExchangeModes();
                            /*0x3813ffc*/ bool RequiresCloseNotify();
                            /*0x3813ffc*/ bool RequiresExtendedMasterSecret();
                            /*0x3813ffc*/ bool ShouldUseExtendedMasterSecret();
                            /*0x3813ffc*/ bool ShouldUseExtendedPadding();
                            /*0x3813ffc*/ bool ShouldUseGmtUnixTime();
                            /*0x3815cc4*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory GetKeyExchangeFactory();
                            void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                            void NotifyAlertReceived(short alertLevel, short alertDescription);
                            /*0x38159dc*/ void NotifyHandshakeComplete();
                        }

                        class TlsProtocol : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_applicationDataQueue;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_alertQueue;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_handshakeQueue;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream m_recordStream;
                            /*0x30*/ int m_maxHandshakeMessageSize;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash m_handshakeHash;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsStream m_tlsStream;
                            /*0x48*/ bool m_closed;
                            /*0x49*/ bool m_failedWithError;
                            /*0x4a*/ bool m_appDataReady;
                            /*0x4b*/ bool m_appDataSplitEnabled;
                            /*0x4c*/ bool m_keyUpdateEnabled;
                            /*0x4d*/ bool m_keyUpdatePendingSend;
                            /*0x50*/ int m_appDataSplitMode;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession m_tlsSession;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters m_sessionParameters;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_sessionMasterSecret;
                            /*0x70*/ byte[] m_retryCookie;
                            /*0x78*/ int m_retryGroup;
                            /*0x80*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_clientExtensions;
                            /*0x88*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_serverExtensions;
                            /*0x90*/ short m_connectionState;
                            /*0x92*/ bool m_selectedPsk13;
                            /*0x93*/ bool m_receivedChangeCipherSpec;
                            /*0x94*/ bool m_expectSessionTicket;
                            /*0x95*/ bool m_blocking;
                            /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueueInputStream m_inputBuffers;
                            /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueueOutputStream m_outputBuffer;

                            static /*0x3f0e644*/ void AssertEmpty(System.IO.MemoryStream buf);
                            static /*0x3f16864*/ byte[] CreateRandomBlock(bool useGmtUnixTime, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f13610*/ byte[] CreateRenegotiationInfo(byte[] renegotiated_connection);
                            static /*0x3f0f038*/ void EstablishMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange);
                            static /*0x3f08e98*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensions(System.IO.MemoryStream input);
                            static /*0x3f25178*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensionsData(byte[] extBytes);
                            static /*0x3f143f0*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensionsData13(int handshakeType, byte[] extBytes);
                            static /*0x3f0e87c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> ReadSupplementalDataMessage(System.IO.MemoryStream input);
                            static /*0x3f0a688*/ void WriteExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f25518*/ void WriteExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x3f256dc*/ byte[] WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f25654*/ byte[] WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x3f256e4*/ void WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.IO.MemoryStream buf, int bindersSize);
                            static /*0x3f25a9c*/ void WritePreSharedKeyExtension(System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x3f25730*/ void WriteSelectedExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, bool selectEmpty);
                            static /*0x3f24a04*/ void WriteSupplementalData(System.IO.Stream output, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> supplementalData);
                            /*0x3f0bddc*/ TlsProtocol();
                            /*0x3f0e268*/ bool IsLegacyConnectionState();
                            /*0x3f0cb88*/ bool IsTlsV13ConnectionState();
                            /*0x3f1fdbc*/ void CloseConnection();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext get_Context();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext get_ContextAdmin();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer get_Peer();
                            /*0x3f1fdd8*/ void HandleAlertMessage(short alertLevel, short alertDescription);
                            /*0x3f1ff08*/ void HandleAlertWarningMessage(short alertDescription);
                            /*0x3f1ffb0*/ void HandleChangeCipherSpecMessage();
                            /*0x3f1ffb4*/ void HandleClose(bool user_canceled);
                            /*0x3f20098*/ void HandleException(short alertDescription, string message, System.Exception e);
                            /*0x3f20110*/ void HandleFailure();
                            void HandleHandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x3f2017c*/ void ApplyMaxFragmentLengthExtension(short maxFragmentLength);
                            /*0x3f20208*/ void CheckReceivedChangeCipherSpec(bool expected);
                            /*0x3f20258*/ void BlockForHandshake();
                            /*0x3f202e0*/ void handleRenegotiation();
                            /*0x3f0c260*/ void BeginHandshake(bool renegotiation);
                            /*0x3f0c51c*/ void CleanupHandshake();
                            /*0x3f202f4*/ void CompleteHandshake();
                            /*0x3f2095c*/ void ProcessRecord(short protocol, byte[] buf, int off, int len);
                            /*0x3f20da8*/ void ProcessHandshakeQueue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue queue);
                            /*0x3f20bb4*/ void ProcessApplicationDataQueue();
                            /*0x3f20b44*/ void ProcessAlertQueue();
                            /*0x3f20bb8*/ void ProcessChangeCipherSpec(byte[] buf, int off, int len);
                            /*0x3f21278*/ int get_ApplicationDataAvailable();
                            /*0x3f21294*/ int ReadApplicationData(byte[] buffer, int offset, int count);
                            /*0x3f21370*/ int ReadApplicationData(System.Span<byte> buffer);
                            /*0x3f21530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordPreview SafePreviewRecordHeader(byte[] recordHeader);
                            /*0x3f216e8*/ void SafeReadRecord();
                            /*0x3f21a10*/ bool SafeReadFullRecord(byte[] input, int inputOff, int inputLen);
                            /*0x3f21bcc*/ void SafeWriteRecord(short type, byte[] buf, int offset, int len);
                            /*0x3f21d80*/ void SafeWriteRecord(short type, System.ReadOnlySpan<byte> buffer);
                            /*0x3f21f34*/ void WriteApplicationData(byte[] buffer, int offset, int count);
                            /*0x3f22038*/ void WriteApplicationData(System.ReadOnlySpan<byte> buffer);
                            /*0x3f22394*/ void WriteHandshakeMessage(byte[] buf, int off, int len);
                            /*0x3f2265c*/ void OfferInput(byte[] input, int inputOff, int inputLen);
                            /*0x3f2287c*/ int GetAvailableInputBytes();
                            /*0x3f228e4*/ int ReadInput(byte[] buf, int off, int len);
                            /*0x3f22a00*/ int GetAvailableOutputBytes();
                            /*0x3f22a74*/ int ReadOutput(byte[] buffer, int offset, int length);
                            /*0x3f22b88*/ bool EstablishSession(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession sessionToResume);
                            /*0x3f230c8*/ void InvalidateSession();
                            /*0x3f23230*/ void ProcessFinishedMessage(System.IO.MemoryStream buf);
                            /*0x3f23824*/ void Process13FinishedMessage(System.IO.MemoryStream buf);
                            /*0x3f23b00*/ void RaiseAlertFatal(short alertDescription, string message, System.Exception cause);
                            /*0x3f23cc8*/ void RaiseAlertWarning(short alertDescription, string message);
                            /*0x3f23e04*/ void Receive13KeyUpdate(System.IO.MemoryStream buf);
                            /*0x3f2402c*/ void SendCertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate, System.IO.Stream endPointHash);
                            /*0x3f13be8*/ void Send13CertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate);
                            /*0x3f24294*/ void Send13CertificateVerifyMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned certificateVerify);
                            /*0x3f24320*/ void SendChangeCipherSpec();
                            /*0x3f24350*/ void SendChangeCipherSpecMessage();
                            /*0x3f243d4*/ void SendFinishedMessage();
                            /*0x3f24584*/ void Send13FinishedMessage();
                            /*0x3f2471c*/ void Send13KeyUpdate(bool updateRequested);
                            /*0x3f24980*/ void SendSupplementalDataMessage(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> supplementalData);
                            /*0x3f24d94*/ void Close();
                            /*0x3f24da4*/ void Flush();
                            /*0x3f0fa6c*/ bool get_IsApplicationDataReady();
                            /*0x3f24da8*/ bool get_IsClosed();
                            /*0x3f24dc0*/ bool get_IsHandshaking();
                            /*0x3f24e0c*/ short ProcessMaxFragmentLengthExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions, short alertDescription);
                        }

                        interface TlsPsk
                        {
                            /*0x38148bc*/ byte[] get_Identity();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_Key();
                            /*0x3814574*/ int get_PrfAlgorithm();
                        }

                        interface TlsPskExternal : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk
                        {
                        }

                        interface TlsPskIdentity
                        {
                            /*0x38159dc*/ void SkipIdentityHint();
                            /*0x3816710*/ void NotifyIdentityHint(byte[] psk_identity_hint);
                            /*0x38148bc*/ byte[] GetPskIdentity();
                            /*0x38148bc*/ byte[] GetPsk();
                        }

                        interface TlsPskIdentityManager
                        {
                        }

                        class TlsPskKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity m_pskIdentity;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentityManager m_pskIdentityManager;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x38*/ byte[] m_psk_identity_hint;
                            /*0x40*/ byte[] m_psk;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor m_serverEncryptor;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_preMasterSecret;

                            static /*0x3f25c74*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f25cf0*/ TlsPskKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3f25d04*/ TlsPskKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentityManager pskIdentityManager, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x3f25da8*/ void SkipServerCredentials();
                            /*0x3f25df4*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f25f00*/ bool get_RequiresServerKeyExchange();
                            /*0x3f25f20*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f26340*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f26378*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f26998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x3f26bb0*/ void GenerateEphemeralDH(System.IO.Stream output);
                            /*0x3f26c8c*/ void GenerateEphemeralECDH(System.IO.Stream output);
                            /*0x3f26d68*/ byte[] GenerateOtherSecret(int pskLength);
                            /*0x3f26f60*/ void ProcessEphemeralDH(byte[] y);
                            /*0x3f2700c*/ void ProcessEphemeralECDH(byte[] point);
                        }

                        class TlsRsaKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor m_serverEncryptor;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_preMasterSecret;

                            static /*0x3f270d4*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f27144*/ TlsRsaKeyExchange(int keyExchange);
                            /*0x3f27174*/ void SkipServerCredentials();
                            /*0x3f271ac*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f27278*/ short[] GetClientCertificateTypes();
                            /*0x3f272e8*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f2733c*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f273b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsServerCertificate
                        {
                        }

                        class TlsServerCertificateImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_certificate;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus m_certificateStatus;

                            /*0x3f273d8*/ TlsServerCertificateImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus certificateStatus);
                        }

                        interface TlsSession
                        {
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters ExportSessionParameters();
                            /*0x38148bc*/ byte[] get_SessionID();
                            /*0x38159dc*/ void Invalidate();
                            /*0x3813ffc*/ bool get_IsResumable();
                        }

                        class TlsSessionImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession
                        {
                            /*0x10*/ byte[] m_sessionID;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters m_sessionParameters;
                            /*0x20*/ bool m_resumable;

                            /*0x3f2741c*/ TlsSessionImpl(byte[] sessionID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters sessionParameters);
                            /*0x3f27570*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters ExportSessionParameters();
                            /*0x3f27640*/ byte[] get_SessionID();
                            /*0x3f276f8*/ void Invalidate();
                            /*0x3f277a8*/ bool get_IsResumable();
                        }

                        interface TlsSrpConfigVerifier
                        {
                            /*0x38141c4*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                        }

                        interface TlsSrpIdentity
                        {
                            /*0x38148bc*/ byte[] GetSrpIdentity();
                            /*0x38148bc*/ byte[] GetSrpPassword();
                        }

                        class TlsSrpKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity m_srpIdentity;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier m_srpConfigVerifier;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x38*/ byte[] m_srpSalt;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client m_srpClient;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Server m_srpServer;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_srpPeerCredentials;

                            static /*0x3f27868*/ int CheckKeyExchange(int keyExchange);
                            static /*0x3f27d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePublicValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f278dc*/ TlsSrpKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                            /*0x3f2793c*/ void SkipServerCredentials();
                            /*0x3f27988*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f279fc*/ bool get_RequiresServerKeyExchange();
                            /*0x3f27a04*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f27e60*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f27e98*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f281a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsSrpUtilities
                        {
                            static /*0x3f09e70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReadSrpParameter(System.IO.Stream input);
                            static /*0x3f2810c*/ void WriteSrpParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, System.IO.Stream output);
                        }

                        class TlsStream : System.IO.Stream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol m_handler;
                            /*0x30*/ byte[] oneByteBuf;

                            /*0x3f208b8*/ TlsStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol handler);
                            /*0x3f283d0*/ bool get_CanRead();
                            /*0x3f283d8*/ bool get_CanSeek();
                            /*0x3f283e0*/ bool get_CanWrite();
                            /*0x3f283e8*/ void Dispose(bool disposing);
                            /*0x3f28430*/ void Flush();
                            /*0x3f28454*/ long get_Length();
                            /*0x3f2848c*/ long get_Position();
                            /*0x3f284c4*/ void set_Position(long value);
                            /*0x3f284fc*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3f28520*/ int Read(System.Span<byte> buffer);
                            /*0x3f28544*/ int ReadByte();
                            /*0x3f285a4*/ long Seek(long offset, System.IO.SeekOrigin origin);
                            /*0x3f285dc*/ void SetLength(long value);
                            /*0x3f28614*/ void Write(byte[] buffer, int offset, int count);
                            /*0x3f28638*/ void Write(System.ReadOnlySpan<byte> buffer);
                            /*0x3f2865c*/ void WriteByte(byte value);
                        }

                        class TlsUtilities
                        {
                            static /*0x0*/ byte[] DowngradeTlsV11;
                            static /*0x8*/ byte[] DowngradeTlsV12;
                            static /*0x10*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CertSigAlgOids;
                            static /*0x18*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> DefaultSupportedSigAlgs;
                            static /*0x20*/ byte[] EmptyBytes;
                            static /*0x28*/ short[] EmptyShorts;
                            static /*0x30*/ int[] EmptyInts;
                            static /*0x38*/ long[] EmptyLongs;
                            static /*0x40*/ string[] EmptyStrings;
                            static /*0x48*/ short MinimumHashStrict;
                            static /*0x4a*/ short MinimumHashPreferred;

                            static /*0x3f32504*/ TlsUtilities();
                            static /*0x3f2869c*/ void AddCertSigAlgOid(System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHash);
                            static /*0x3f2875c*/ void AddCertSigAlgOid(System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3f2880c*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CreateCertSigAlgOids();
                            static /*0x3f28da8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CreateDefaultSupportedSigAlgs();
                            static /*0x3f29748*/ void CheckUint8(short i);
                            static /*0x3f297d8*/ void CheckUint8(int i);
                            static /*0x3f099a0*/ void CheckUint16(int i);
                            static /*0x3f29870*/ void CheckUint16(long i);
                            static /*0x3f29908*/ void CheckUint24(int i);
                            static /*0x3f299a4*/ void CheckUint24(long i);
                            static /*0x3f0915c*/ bool IsValidUint8(short i);
                            static /*0x3f29864*/ bool IsValidUint8(int i);
                            static /*0x3f0916c*/ bool IsValidUint16(int i);
                            static /*0x3f298fc*/ bool IsValidUint16(long i);
                            static /*0x3f29994*/ bool IsValidUint24(int i);
                            static /*0x3f29a30*/ bool IsValidUint24(long i);
                            static /*0x3f29a40*/ bool IsValidUint32(long i);
                            static /*0x3f0ef8c*/ bool IsSsl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f20838*/ bool IsTlsV11(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f29a50*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f29ad0*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f0e1e8*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f29ba4*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f09208*/ void WriteUint8(short i, System.IO.Stream output);
                            static /*0x3f29c78*/ void WriteUint8(int i, System.IO.Stream output);
                            static /*0x3f29ca4*/ void WriteUint8(short i, byte[] buf, int offset);
                            static /*0x3f1ec04*/ void WriteUint8(int i, byte[] buf, int offset);
                            static /*0x3f29cd0*/ void WriteUint8(int i, System.Span<byte> buf);
                            static /*0x3f09a2c*/ void WriteUint16(int i, System.IO.Stream output);
                            static /*0x3f1f81c*/ void WriteUint16(int i, byte[] buf, int offset);
                            static /*0x3f29ce8*/ void WriteUint16(int i, System.Span<byte> buf);
                            static /*0x3f29d10*/ void WriteUint24(int i, System.IO.Stream output);
                            static /*0x3f29d78*/ void WriteUint24(int i, byte[] buf, int offset);
                            static /*0x3f29ddc*/ void WriteUint32(long i, System.IO.Stream output);
                            static /*0x3f29e5c*/ void WriteUint64(long i, byte[] buf, int offset);
                            static /*0x3f1a0bc*/ void WriteOpaque8(byte[] buf, System.IO.Stream output);
                            static /*0x3f29f4c*/ void WriteOpaque8(System.ReadOnlySpan<byte> data, System.Span<byte> buf);
                            static /*0x3f09234*/ void WriteOpaque16(byte[] buf, System.IO.Stream output);
                            static /*0x3f25be4*/ void WriteOpaque24(byte[] buf, System.IO.Stream output);
                            static /*0x3f2a034*/ void WriteUint8Array(short[] u8s, System.IO.Stream output);
                            static /*0x3f2a0f4*/ void WriteUint8Array(short[] u8s, byte[] buf, int offset);
                            static /*0x3f2a1b0*/ void WriteUint8ArrayWithUint8Length(short[] u8s, System.IO.Stream output);
                            static /*0x3f2a238*/ void WriteUint8ArrayWithUint8Length(short[] u8s, byte[] buf, int offset);
                            static /*0x3f2a2c4*/ void WriteUint16Array(int[] u16s, System.IO.Stream output);
                            static /*0x3f2a374*/ void WriteUint16Array(int[] u16s, byte[] buf, int offset);
                            static /*0x3f2a430*/ void WriteUint16ArrayWithUint16Length(int[] u16s, System.IO.Stream output);
                            static /*0x3f2a4b0*/ void WriteUint16ArrayWithUint16Length(int[] u16s, byte[] buf, int offset);
                            static /*0x3f1f1d8*/ byte[] DecodeOpaque16(byte[] buf, int minLength);
                            static /*0x3f1f100*/ short DecodeUint8(byte[] buf);
                            static /*0x3f1f624*/ short[] DecodeUint8ArrayWithUint8Length(byte[] buf);
                            static /*0x3f1f2e4*/ int DecodeUint16(byte[] buf);
                            static /*0x3f24f8c*/ byte[] EncodeOpaque8(byte[] buf);
                            static /*0x3f1e4a8*/ byte[] EncodeOpaque16(byte[] buf);
                            static /*0x3f24818*/ byte[] EncodeUint8(short u8);
                            static /*0x3f1e410*/ byte[] EncodeUint8ArrayWithUint8Length(short[] u8s);
                            static /*0x3f1e5bc*/ byte[] EncodeUint16(int u16);
                            static /*0x3f1eb68*/ byte[] EncodeUint16ArrayWithUint16Length(int[] u16s);
                            static /*0x3f2a608*/ int ReadInt32(byte[] buf, int offset);
                            static /*0x3f08e30*/ short ReadUint8(System.IO.Stream input);
                            static /*0x3f2124c*/ short ReadUint8(byte[] buf, int offset);
                            static /*0x3f08dac*/ int ReadUint16(System.IO.Stream input);
                            static /*0x3f2a544*/ int ReadUint16(byte[] buf, int offset);
                            static /*0x3f2a67c*/ int ReadUint24(System.IO.Stream input);
                            static /*0x3f146dc*/ long ReadUint32(System.IO.Stream input);
                            static /*0x3f08c08*/ byte[] ReadFully(int length, System.IO.Stream input);
                            static /*0x3f23524*/ void ReadFully(System.Span<byte> buf, System.IO.Stream input);
                            static /*0x3f147a4*/ byte[] ReadOpaque8(System.IO.Stream input);
                            static /*0x3f09f08*/ byte[] ReadOpaque8(System.IO.Stream input, int minLength);
                            static /*0x3f08ce4*/ byte[] ReadOpaque8(System.IO.Stream input, int minLength, int maxLength);
                            static /*0x3f14394*/ byte[] ReadOpaque16(System.IO.Stream input);
                            static /*0x3f09364*/ byte[] ReadOpaque16(System.IO.Stream input, int minLength);
                            static /*0x3f2545c*/ byte[] ReadOpaque24(System.IO.Stream input, int minLength);
                            static /*0x3f2a720*/ short[] ReadUint8Array(int count, System.IO.Stream input);
                            static /*0x3f2a7f0*/ short[] ReadUint8ArrayWithUint8Length(System.IO.Stream input, int minLength);
                            static /*0x3f1f554*/ int[] ReadUint16Array(int count, System.IO.Stream input);
                            static /*0x3f1f788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadVersion(byte[] buf, int offset);
                            static /*0x3f08b3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadVersion(System.IO.Stream input);
                            static /*0x3f1ef74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadAsn1Object(byte[] encoding);
                            static /*0x3f1f030*/ void RequireDerEncoding(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable asn1, byte[] encoding);
                            static /*0x3f24e98*/ void WriteGmtUnixTime(byte[] buf, int offset);
                            static /*0x3f2a8ac*/ void WriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, System.IO.Stream output);
                            static /*0x3f1ec30*/ void WriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] buf, int offset);
                            static /*0x3f2a914*/ void AddIfSupported(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedAlgs, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm alg);
                            static /*0x3f2aa54*/ void AddIfSupported(System.Collections.Generic.IList<int> supportedGroups, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int namedGroup);
                            static /*0x3f2ab94*/ void AddIfSupported(System.Collections.Generic.IList<int> supportedGroups, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] namedGroups);
                            static /*0x3910ae8*/ bool AddToSet<T>(System.Collections.Generic.IList<T> s, T i);
                            static /*0x3f2ac4c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetDefaultSupportedSignatureAlgorithms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f2acac*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> candidates);
                            static /*0x3f0eb8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner);
                            static /*0x3f10dd8*/ byte[] GetExtensionData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int extensionType);
                            static /*0x3f1388c*/ bool HasExpectedEmptyExtensionData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int extensionType, short alertDescription);
                            static /*0x3f0fa04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession ImportSession(byte[] sessionID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters sessionParameters);
                            static /*0x3f173a4*/ bool IsExtendedMasterSecretOptionalTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] activeProtocolVersions);
                            static /*0x3f2b0e0*/ bool IsNullOrContainsNull(object[] array);
                            static /*0x3823ae0*/ bool IsNullOrEmpty<T>(T[] array);
                            static /*0x3823ae0*/ bool IsNullOrEmpty<T>(System.Collections.Generic.IList<T> v);
                            static /*0x3f16c38*/ bool IsSignatureAlgorithmsExtensionAllowed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f2b12c*/ short GetLegacySignatureAlgorithmServer(int keyExchangeAlgorithm);
                            static /*0x3f2b16c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetLegacySupportedSignatureAlgorithms();
                            static /*0x3f1e64c*/ void EncodeSupportedSignatureAlgorithms(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.IO.Stream output);
                            static /*0x3f1f3b4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ParseSupportedSignatureAlgorithms(System.IO.Stream input);
                            static /*0x3f2b34c*/ void VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm);
                            static /*0x3f0ecac*/ void VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm, short alertDescription);
                            static /*0x3f2b3b4*/ bool ContainsSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm);
                            static /*0x3f2b6b4*/ bool ContainsAnySignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, short signatureAlgorithm);
                            static /*0x3f2b9a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret Prf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string asciiLabel, byte[] seed, int length);
                            static /*0x3f2ba80*/ byte[] Clone(byte[] data);
                            static /*0x3f2bb34*/ bool ConstantTimeAreEqual(int len, byte[] a, int aOff, byte[] b, int bOff);
                            static /*0x3f2a584*/ byte[] CopyOfRangeExact(byte[] original, int from, int to);
                            static /*0x3f2bbc0*/ byte[] Concat(byte[] a, byte[] b);
                            static /*0x3f2bc64*/ byte[] CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, byte[] enc);
                            static /*0x3f2bce0*/ byte[] CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, byte[] enc, int encOff, int encLen);
                            static /*0x3f2c2dc*/ byte[] CalculateFinishedHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret baseKey, byte[] transcriptHash);
                            static /*0x3f2c358*/ byte[] CalculateFinishedHmac(int prfCryptoHashAlgorithm, int prfHashLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret baseKey, byte[] transcriptHash);
                            static /*0x3f2501c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret preMasterSecret);
                            static /*0x3f2c5e8*/ byte[] CalculatePskBinder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, bool isExternalPsk, int pskCryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret earlySecret, byte[] transcriptHash);
                            static /*0x3f235c4*/ byte[] CalculateVerifyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, bool isServer);
                            static /*0x3f11dd4*/ void Establish13PhaseSecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret pskEarlySecret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret sharedSecret);
                            static /*0x3f2ca98*/ void Establish13TrafficSecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] transcriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret phaseSecret, string clientLabel, string serverLabel, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x3f0d028*/ void Establish13PhaseApplication(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] serverFinishedTranscriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x3f123fc*/ void Establish13PhaseHandshake(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] serverHelloTranscriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x3f248a8*/ void Update13TrafficSecretLocal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f23f50*/ void Update13TrafficSecretPeer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f2cc1c*/ void Update13TrafficSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, bool forServer);
                            static /*0x3f2cdc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret Update13TrafficSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                            static /*0x3f2ce88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOidForHashAlgorithm(short hashAlgorithm);
                            static /*0x3f2d040*/ int GetPrfAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, int cipherSuite);
                            static /*0x3f2d244*/ int GetPrfAlgorithm13(int cipherSuite);
                            static /*0x3f2d280*/ int[] GetPrfAlgorithms13(int[] cipherSuites);
                            static /*0x3f2d4c0*/ byte[] CalculateSignatureHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm algorithm, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer buf);
                            static /*0x3f2d89c*/ void SendSignatureInput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer buf, System.IO.Stream output);
                            static /*0x3f0f5dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned GenerateCertificateVerifyClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner clientAuthSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm clientAuthAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamSigner clientAuthStreamSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f0cda4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned Generate13CertificateVerify(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f2d9fc*/ byte[] Generate13CertificateVerify(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner, string contextString, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3f14cd8*/ void Verify13CertificateVerifyServer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify certificateVerify);
                            static /*0x3f2df08*/ void Verify13CertificateVerify(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedAlgorithms, string contextString, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify certificateVerify);
                            static /*0x3f2de04*/ byte[] GetCertificateVerifyHeader(string contextString);
                            static /*0x3f184d0*/ void VerifyServerKeyExchangeSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream signatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate serverCertificate, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer digestBuffer);
                            static /*0x3f0eec4*/ void TrackHashAlgorithmClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3910ae8*/ System.Collections.Generic.IList<T> VectorOfOne<T>(T obj);
                            static /*0x3f2e350*/ int GetCipherType(int cipherSuite);
                            static /*0x3f2e3a8*/ int GetEncryptionAlgorithm(int cipherSuite);
                            static /*0x3f2e444*/ int GetEncryptionAlgorithmType(int encryptionAlgorithm);
                            static /*0x3f19814*/ int GetKeyExchangeAlgorithm(int cipherSuite);
                            static /*0x3f2e464*/ System.Collections.Generic.IList<int> GetKeyExchangeAlgorithms(int[] cipherSuites);
                            static /*0x3f2e598*/ int GetMacAlgorithm(int cipherSuite);
                            static /*0x3f2e628*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetMinimumVersion(int cipherSuite);
                            static /*0x3f2e7a4*/ System.Collections.Generic.IList<int> GetNamedGroupRoles(int[] cipherSuites);
                            static /*0x3f2e7fc*/ System.Collections.Generic.IList<int> GetNamedGroupRoles(System.Collections.Generic.IList<int> keyExchangeAlgorithms);
                            static /*0x3f137b8*/ bool IsBlockCipherSuite(int cipherSuite);
                            static /*0x3f1094c*/ bool IsValidCipherSuiteSelection(int[] offeredCipherSuites, int cipherSuite);
                            static /*0x3f110a0*/ bool IsValidKeyShareSelection(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, int[] clientSupportedGroups, System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> clientAgreements, int keyShareGroup);
                            static /*0x3f2e29c*/ bool IsValidSignatureAlgorithmForServerKeyExchange(short signatureAlgorithm, int keyExchangeAlgorithm);
                            static /*0x3f10f10*/ bool IsValidVersionForCipherSuite(int cipherSuite, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f2ec24*/ int[] GetSupportedCipherSuites(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] suites);
                            static /*0x3f2ec90*/ int[] GetSupportedCipherSuites(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] suites, int suitesOff, int suitesCount);
                            static /*0x3f2ee08*/ bool IsSupportedCipherSuite(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int cipherSuite);
                            static /*0x3f2efb0*/ bool IsSupportedKeyExchange(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int keyExchangeAlgorithm);
                            static /*0x3f2f5cc*/ bool HasAnyRsaSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            static /*0x3f0cbb0*/ byte[] GetCurrentPrfHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f2c1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, short hashAlgorithm);
                            static /*0x3f2d7e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3f2f8d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateKeyExchangeClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, int keyExchange);
                            static /*0x3f0ff54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange InitKeyExchangeClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client);
                            static /*0x3f0f3a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher InitCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f300f4*/ void CheckTlsFeatures(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f0fb0c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus serverCertificateStatus, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f14f18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest ValidateCertificateRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange);
                            static /*0x3f3076c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest NormalizeCertificateRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest, short[] validClientCertificateTypes);
                            static /*0x3f30864*/ bool ContainsAll(short[] container, short[] elements);
                            static /*0x3f30930*/ short[] RetainAll(short[] retainer, short[] elements);
                            static /*0x3f30ab8*/ short[] Truncate(short[] a, int n);
                            static /*0x3f2d434*/ int[] Truncate(int[] a, int n);
                            static /*0x3f18ecc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement RequireAgreementCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f189d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner RequireSignerCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f30b44*/ void CheckDowngradeMarker(byte[] randomBlock, byte[] downgradeMarker);
                            static /*0x3f134dc*/ void CheckDowngradeMarker(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] randomBlock);
                            static /*0x3f30bfc*/ bool areCertificatesEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate b);
                            static /*0x3f30e74*/ bool isSafeRenegotiationServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            static /*0x3f0e290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication ReceiveServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f148d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication Receive13ServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f1778c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication Skip13ServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext);
                            static /*0x3f17084*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> AddKeyShareToClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f15a34*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> AddKeyShareToClientHelloRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, int keyShareGroup);
                            static /*0x3f30f64*/ void CollectKeyShares(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] supportedGroups, System.Collections.Generic.IList<int> keyShareGroups, System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> clientAgreements, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x3f316c4*/ void WriteEncryptedPms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] encryptedPms, System.IO.Stream output);
                            static /*0x3f169c0*/ byte[] GetSessionID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession tlsSession);
                            static /*0x3f0e6c4*/ void AdjustTranscriptForRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f0eab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials EstablishClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x3f0ccc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner Establish13ClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x3f16cc8*/ void EstablishClientSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f0f988*/ void EstablishServerSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x3f31784*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials ValidateCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f3187c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner Validate13Credentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f11410*/ void NegotiatedCipherSuite(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, int cipherSuite);
                            static /*0x3f31928*/ void NegotiatedVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters);
                            static /*0x3f1124c*/ void NegotiatedVersionTlsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client);
                            static /*0x3f2ca14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string label, byte[] transcriptHash);
                            static /*0x3f2c944*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveSecret(int prfCryptoHashAlgorithm, int prfHashLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string label, byte[] transcriptHash);
                            static /*0x3f22ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GetSessionMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret);
                            static /*0x3f2535c*/ bool IsPermittedExtensionType13(int handshakeType, int extensionType);
                            static /*0x3f109dc*/ void CheckExtensionData13(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int handshakeType, short alertDescription);
                            static /*0x3f26750*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateEncryptedPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor, System.IO.Stream output);
                            static /*0x3f31a00*/ void AddPreSharedKeyToClientExtensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f16d84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig AddPreSharedKeyToClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, int[] offeredCipherSuites);
                            static /*0x3f155e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig AddPreSharedKeyToClientHelloRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig clientBinders, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f322c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GetPskEarlySecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk psk);
                            static /*0x3f31fe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] GetPskEarlySecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks);
                            static /*0x3f31c14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal[] GetPskExternalsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, int[] offeredCipherSuites);
                            static /*0x3f3211c*/ System.Collections.Generic.IList<int> GetPskIndices(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, int prfAlgorithm);
                        }

                        class TrustedAuthority
                        {
                            /*0x10*/ short m_identifierType;
                            /*0x18*/ object m_identifier;

                            /*0x3f32754*/ void Encode(System.IO.Stream output);
                        }

                        namespace Crypto
                        {
                            class DHGroup
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x28*/ int l;

                                /*0x3f3292c*/ DHGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int l);
                                /*0x3f32998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3f329a0*/ int get_L();
                                /*0x3f329a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3f329b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                            }

                            class DHStandardGroups
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                                static /*0x8*/ string rfc2409_768_p;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc2409_768;
                                static /*0x18*/ string rfc2409_1024_p;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc2409_1024;
                                static /*0x28*/ string rfc3526_1536_p;
                                static /*0x30*/ int rfc3526_1536_l;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_1536;
                                static /*0x40*/ string rfc3526_2048_p;
                                static /*0x48*/ int rfc3526_2048_l;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_2048;
                                static /*0x58*/ string rfc3526_3072_p;
                                static /*0x60*/ int rfc3526_3072_l;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_3072;
                                static /*0x70*/ string rfc3526_4096_p;
                                static /*0x78*/ int rfc3526_4096_l;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_4096;
                                static /*0x88*/ string rfc3526_6144_p;
                                static /*0x90*/ int rfc3526_6144_l;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_6144;
                                static /*0xa0*/ string rfc3526_8192_p;
                                static /*0xa8*/ int rfc3526_8192_l;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_8192;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc4306_768;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc4306_1024;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc5996_768;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc5996_1024;
                                static /*0xd8*/ string rfc7919_ffdhe2048_p;
                                static /*0xe0*/ int rfc7919_ffdhe2048_l;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe2048;
                                static /*0xf0*/ string rfc7919_ffdhe3072_p;
                                static /*0xf8*/ int rfc7919_ffdhe3072_l;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe3072;
                                static /*0x108*/ string rfc7919_ffdhe4096_p;
                                static /*0x110*/ int rfc7919_ffdhe4096_l;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe4096;
                                static /*0x120*/ string rfc7919_ffdhe6144_p;
                                static /*0x128*/ int rfc7919_ffdhe6144_l;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe6144;
                                static /*0x138*/ string rfc7919_ffdhe8192_p;
                                static /*0x140*/ int rfc7919_ffdhe8192_l;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe8192;

                                static /*0x3f32da4*/ DHStandardGroups();
                                static /*0x3f329b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3f32a68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup SafePrimeGen2(string hexP);
                                static /*0x3f32ac0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup SafePrimeGen2(string hexP, int l);
                            }

                            class Srp6Group
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;

                                /*0x3f333f8*/ Srp6Group(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3f3343c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3f33444*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            }

                            class Srp6StandardGroups
                            {
                                static /*0x0*/ string rfc5054_1024_N;
                                static /*0x8*/ string rfc5054_1024_g;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_1024;
                                static /*0x18*/ string rfc5054_1536_N;
                                static /*0x20*/ string rfc5054_1536_g;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_1536;
                                static /*0x30*/ string rfc5054_2048_N;
                                static /*0x38*/ string rfc5054_2048_g;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_2048;
                                static /*0x48*/ string rfc5054_3072_N;
                                static /*0x50*/ string rfc5054_3072_g;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_3072;
                                static /*0x60*/ string rfc5054_4096_N;
                                static /*0x68*/ string rfc5054_4096_g;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_4096;
                                static /*0x78*/ string rfc5054_6144_N;
                                static /*0x80*/ string rfc5054_6144_g;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_6144;
                                static /*0x90*/ string rfc5054_8192_N;
                                static /*0x98*/ string rfc5054_8192_g;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_8192;

                                static /*0x3f33588*/ Srp6StandardGroups();
                                static /*0x3f3344c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3f334e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group FromNG(string hexN, string hexG);
                            }

                            interface Tls13Verifier
                            {
                                /*0x38148bc*/ System.IO.Stream get_Stream();
                                /*0x38141c4*/ bool VerifySignature(byte[] signature);
                            }

                            interface TlsAgreement
                            {
                                /*0x38148bc*/ byte[] GenerateEphemeral();
                                /*0x3816710*/ void ReceivePeerValue(byte[] peerValue);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                            }

                            interface TlsCertificate
                            {
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor CreateEncryptor(int tlsCertificateRole);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier CreateVerifier(short signatureAlgorithm);
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier CreateVerifier(int signatureScheme);
                                /*0x38148bc*/ byte[] GetEncoded();
                                /*0x3814a3c*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                /*0x38148bc*/ string get_SigAlgOid();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CheckUsageInRole(int tlsCertificateRole);
                            }

                            interface TlsCipher
                            {
                                /*0x38145a0*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                /*0x38145a0*/ int GetPlaintextLimit(int ciphertextLimit);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                /*0x38159dc*/ void RekeyDecoder();
                                /*0x38159dc*/ void RekeyEncoder();
                                /*0x3813ffc*/ bool get_UsesOpaqueRecordType();
                            }

                            interface TlsCrypto
                            {
                                /*0x3813ffc*/ bool HasDHAgreement();
                                /*0x3813ffc*/ bool HasECDHAgreement();
                                /*0x38140fc*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                /*0x38140fc*/ bool HasMacAlgorithm(int macAlgorithm);
                                /*0x38140fc*/ bool HasNamedGroup(int namedGroup);
                                /*0x3813ffc*/ bool HasRsaEncryption();
                                bool HasSignatureAlgorithm(short signatureAlgorithm);
                                /*0x38141c4*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                /*0x3813ffc*/ bool HasSrpAuthentication();
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret AdoptSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                            }

                            class TlsCryptoParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;

                                /*0x3f338e4*/ TlsCryptoParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                                /*0x3f33914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                                /*0x3f339b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                                /*0x3f33a5c*/ bool get_IsServer();
                                /*0x3f33b00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            }

                            class TlsCryptoUtilities
                            {
                                static /*0x0*/ byte[] Tls13Prefix;

                                static /*0x3f3457c*/ TlsCryptoUtilities();
                                static /*0x3f33ba4*/ int GetHash(short hashAlgorithm);
                                static /*0x3f33c24*/ int GetHashForHmac(int macAlgorithm);
                                static /*0x3f33cb0*/ int GetHashForPrf(int prfAlgorithm);
                                static /*0x3f33d9c*/ int GetHashOutputSize(int cryptoHashAlgorithm);
                                static /*0x3f33df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOidForHash(int cryptoHashAlgorithm);
                                static /*0x3f33f78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpandLabel(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm, string label, byte[] context, int length);
                                static /*0x3f340a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpandLabel(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> context, int length);
                            }

                            class TlsDecodeResult
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int off;
                                /*0x1c*/ int len;
                                /*0x20*/ short contentType;
                                /*0x22*/ bool fromBufferPool;

                                /*0x3f3461c*/ TlsDecodeResult(byte[] buf, int off, int len, short contentType);
                            }

                            class TlsDHConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup m_explicitGroup;
                                /*0x18*/ int m_namedGroup;
                                /*0x1c*/ bool m_padded;

                                /*0x3f34670*/ TlsDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup explicitGroup);
                                /*0x3f346b0*/ TlsDHConfig(int namedGroup, bool padded);
                                /*0x3f346f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup get_ExplicitGroup();
                                /*0x3f346f8*/ int get_NamedGroup();
                                /*0x3f34700*/ bool get_IsPadded();
                            }

                            interface TlsDHDomain
                            {
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateDH();
                            }

                            class TlsECConfig
                            {
                                /*0x10*/ int m_namedGroup;

                                /*0x3f34708*/ TlsECConfig(int namedGroup);
                                /*0x3f34730*/ int get_NamedGroup();
                            }

                            interface TlsECDomain
                            {
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                            }

                            struct TlsEncodeResult
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int off;
                                /*0x1c*/ int len;
                                /*0x20*/ short recordType;
                                /*0x22*/ bool fromBufferPool;

                                /*0x3f34738*/ TlsEncodeResult(byte[] buf, int off, int len, short recordType);
                            }

                            interface TlsEncryptor
                            {
                                byte[] Encrypt(byte[] input, int inOff, int length);
                            }

                            interface TlsHash
                            {
                                void Update(byte[] input, int inOff, int length);
                                void Update(System.ReadOnlySpan<byte> input);
                                /*0x38148bc*/ byte[] CalculateHash();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                                /*0x38159dc*/ void Reset();
                            }

                            class TlsHashSink : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_hash;

                                /*0x3f34778*/ TlsHashSink(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                                /*0x3f347a8*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3f34894*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x3f34978*/ void WriteByte(byte value);
                            }

                            interface TlsHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                            {
                                /*0x3814574*/ int get_InternalBlockSize();
                            }

                            interface TlsMac
                            {
                                void SetKey(byte[] key, int keyOff, int keyLen);
                                void SetKey(System.ReadOnlySpan<byte> key);
                                void Update(byte[] input, int inOff, int length);
                                void Update(System.ReadOnlySpan<byte> input);
                                /*0x38148bc*/ byte[] CalculateMac();
                                /*0x3814574*/ int get_MacLength();
                                /*0x38159dc*/ void Reset();
                            }

                            interface TlsNonceGenerator
                            {
                                /*0x3814964*/ byte[] GenerateNonce(int size);
                            }

                            class TlsNullNullCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher Instance;

                                static /*0x3f34ccc*/ TlsNullNullCipher();
                                /*0x3f34cc4*/ TlsNullNullCipher();
                                /*0x3f34a68*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                /*0x3f34a70*/ int GetPlaintextLimit(int ciphertextLimit);
                                /*0x3f34a78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                /*0x3f34bb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                /*0x3f34c44*/ void RekeyDecoder();
                                /*0x3f34c80*/ void RekeyEncoder();
                                /*0x3f34cbc*/ bool get_UsesOpaqueRecordType();
                            }

                            interface TlsSecret
                            {
                                byte[] CalculateHmac(int cryptoHashAlgorithm, byte[] buf, int off, int len);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                /*0x38159dc*/ void Destroy();
                                /*0x3814a3c*/ byte[] Encrypt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor);
                                /*0x38148bc*/ byte[] Extract();
                                void ExtractTo(System.Span<byte> output);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                /*0x3813ffc*/ bool IsAlive();
                            }

                            interface TlsSrp6Client
                            {
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                /*0x3814c14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password);
                            }

                            interface TlsSrp6Server
                            {
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger clientA);
                            }

                            class TlsSrpConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] m_explicitNG;

                                /*0x3f34e5c*/ TlsSrpConfig();
                                /*0x3f34d34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetExplicitNG();
                                /*0x3f34dac*/ void SetExplicitNG(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] explicitNG);
                            }

                            interface TlsStreamSigner
                            {
                                /*0x38148bc*/ System.IO.Stream get_Stream();
                                /*0x38148bc*/ byte[] GetSignature();
                            }

                            interface TlsStreamVerifier
                            {
                                /*0x38148bc*/ System.IO.Stream get_Stream();
                                /*0x3813ffc*/ bool IsVerified();
                            }

                            interface TlsVerifier
                            {
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                /*0x3814200*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                            }

                            namespace Impl
                            {
                                class AbstractTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto
                                {
                                    /*0x3f34f70*/ AbstractTlsCrypto();
                                    /*0x3813ffc*/ bool HasDHAgreement();
                                    /*0x3813ffc*/ bool HasECDHAgreement();
                                    /*0x38140fc*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                    /*0x38140fc*/ bool HasMacAlgorithm(int macAlgorithm);
                                    /*0x38140fc*/ bool HasNamedGroup(int namedGroup);
                                    /*0x3813ffc*/ bool HasRsaEncryption();
                                    bool HasSignatureAlgorithm(short signatureAlgorithm);
                                    /*0x38141c4*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                    /*0x3813ffc*/ bool HasSrpAuthentication();
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                                    /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_SecureRandom();
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                    /*0x3f34e64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret AdoptSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                    /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                    /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac(int macAlgorithm);
                                    /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmacForHash(int cryptoHashAlgorithm);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                    /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                                }

                                class AbstractTlsSecret : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret
                                {
                                    /*0x10*/ byte[] m_data;

                                    static /*0x3f34f78*/ byte[] CopyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret other);
                                    /*0x3f34f98*/ AbstractTlsSecret(byte[] data);
                                    /*0x3f34fc8*/ void CheckAlive();
                                    /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto get_Crypto();
                                    /*0x3f35024*/ byte[] CalculateHmac(int cryptoHashAlgorithm, byte[] buf, int off, int len);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                    /*0x3f352c8*/ void Destroy();
                                    /*0x3f353ac*/ byte[] Encrypt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor);
                                    /*0x3f3552c*/ byte[] Extract();
                                    /*0x3f3560c*/ void ExtractTo(System.Span<byte> output);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                    /*0x3f3577c*/ bool IsAlive();
                                    /*0x3f3583c*/ byte[] CopyData();
                                }

                                class LegacyTls13Verifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier
                                {
                                    /*0x10*/ int m_signatureScheme;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier m_tls13Verifier;

                                    /*0x3f35948*/ LegacyTls13Verifier(int signatureScheme, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier tls13Verifier);
                                    /*0x3f35a54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                    /*0x3f35bac*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);

                                    class TlsStreamVerifierImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier m_tls13Verifier;
                                        /*0x18*/ byte[] m_signature;

                                        /*0x3f35b68*/ TlsStreamVerifierImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier tls13Verifier, byte[] signature);
                                        /*0x3f35be4*/ System.IO.Stream get_Stream();
                                        /*0x3f35c84*/ bool IsVerified();
                                    }
                                }

                                class RsaUtilities
                                {
                                    static /*0x0*/ byte[] RSAPSSParams_256_A;
                                    static /*0x8*/ byte[] RSAPSSParams_384_A;
                                    static /*0x10*/ byte[] RSAPSSParams_512_A;
                                    static /*0x18*/ byte[] RSAPSSParams_256_B;
                                    static /*0x20*/ byte[] RSAPSSParams_384_B;
                                    static /*0x28*/ byte[] RSAPSSParams_512_B;

                                    static /*0x3f35d30*/ RsaUtilities();
                                    static /*0x3f363b0*/ bool SupportsPkcs1(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                    static /*0x3f3648c*/ bool SupportsPss_Pss(short signatureAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                    static /*0x3f36754*/ bool SupportsPss_Rsae(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                }

                                class TlsAeadCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ int m_keySize;
                                    /*0x1c*/ int m_macSize;
                                    /*0x20*/ int m_fixed_iv_length;
                                    /*0x24*/ int m_record_iv_length;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_decryptCipher;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_encryptCipher;
                                    /*0x38*/ byte[] m_decryptNonce;
                                    /*0x40*/ byte[] m_encryptNonce;
                                    /*0x48*/ bool m_isTlsV13;
                                    /*0x4c*/ int m_nonceMode;

                                    static /*0x3f373bc*/ int GetNonceMode(bool isTLSv13, int aeadType);
                                    /*0x3f367dc*/ TlsAeadCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl decryptCipher, int keySize, int macSize, int aeadType);
                                    /*0x3f37770*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x3f3778c*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x3f377a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x3f37d90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int ciphertextOffset, int ciphertextLength);
                                    /*0x3f383ac*/ void RekeyDecoder();
                                    /*0x3f3841c*/ void RekeyEncoder();
                                    /*0x3f38488*/ bool get_UsesOpaqueRecordType();
                                    /*0x3f38490*/ byte[] GetAdditionalData(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int ciphertextLength, int plaintextLength);
                                    /*0x3f385e4*/ void RekeyCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, bool serverSecret);
                                    /*0x3f3866c*/ void Setup13Cipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm);
                                }

                                interface TlsAeadCipherImpl
                                {
                                    void SetKey(byte[] key, int keyOff, int keyLen);
                                    void SetKey(System.ReadOnlySpan<byte> key);
                                    void Init(byte[] nonce, int macSize, byte[] additionalData);
                                    /*0x38145a0*/ int GetOutputSize(int inputLength);
                                    int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                    /*0x38159dc*/ void Reset();
                                }

                                class TlsBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ byte[] m_randomData;
                                    /*0x20*/ bool m_encryptThenMac;
                                    /*0x21*/ bool m_useExplicitIV;
                                    /*0x22*/ bool m_acceptExtraPadding;
                                    /*0x23*/ bool m_useExtraPadding;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_decryptCipher;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_encryptCipher;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_readMac;
                                    /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_writeMac;

                                    /*0x3f38980*/ TlsBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl decryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac, int cipherKeySize);
                                    /*0x3f39c44*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x3f39d90*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x3f39ef4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x3f3a558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                    /*0x3f3aa64*/ void RekeyDecoder();
                                    /*0x3f3aaa0*/ void RekeyEncoder();
                                    /*0x3f3aadc*/ bool get_UsesOpaqueRecordType();
                                    /*0x3f3aae4*/ int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize);
                                    /*0x3f3ac84*/ int ChooseExtraPadBlocks(int max);
                                    /*0x3f3adc0*/ int GetCiphertextLength(int blockSize, int macSize, int maxPadding, int plaintextLength);
                                }

                                interface TlsBlockCipherImpl
                                {
                                    void SetKey(System.ReadOnlySpan<byte> key);
                                    void Init(System.ReadOnlySpan<byte> iv);
                                    int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                    /*0x3814574*/ int GetBlockSize();
                                }

                                class TlsImplUtilities
                                {
                                    static /*0x3f3ae04*/ bool IsSsl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                    static /*0x3f39a2c*/ bool IsTlsV11(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x3f372bc*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x3f3733c*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x3f3ae2c*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                    static /*0x3f37424*/ void CalculateKeyBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, System.Span<byte> keyBlock);
                                }

                                class TlsNullCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac m_readMac;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac m_writeMac;

                                    /*0x3f3ae4c*/ TlsNullCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac);
                                    /*0x3f3b508*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x3f3b534*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x3f3b560*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x3f3b790*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                    /*0x3f3b918*/ void RekeyDecoder();
                                    /*0x3f3b954*/ void RekeyEncoder();
                                    /*0x3f3b990*/ bool get_UsesOpaqueRecordType();
                                }

                                class TlsSuiteHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac m_mac;
                                    /*0x20*/ int m_digestBlockSize;
                                    /*0x24*/ int m_digestOverhead;
                                    /*0x28*/ int m_macSize;

                                    static /*0x3f3b998*/ int GetMacSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac mac);
                                    /*0x3f39aac*/ TlsSuiteHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac mac);
                                    /*0x3f3ba9c*/ int get_Size();
                                    /*0x3f3baa4*/ byte[] CalculateMac(long seqNo, short type, byte[] msg, int msgOff, int msgLen);
                                    /*0x3f3bba0*/ byte[] CalculateMac(long seqNo, short type, System.ReadOnlySpan<byte> message);
                                    /*0x3f3be8c*/ byte[] CalculateMacConstantTime(long seqNo, short type, byte[] msg, int msgOff, int msgLen, int fullLength, byte[] dummyData);
                                    /*0x3f3c0d4*/ int GetDigestBlockCount(int inputLength);
                                    /*0x3f3c0e4*/ byte[] Truncate(byte[] bs);
                                }

                                interface TlsSuiteMac
                                {
                                    /*0x3814574*/ int get_Size();
                                    byte[] CalculateMac(long seqNo, short type, byte[] message, int offset, int length);
                                    byte[] CalculateMac(long seqNo, short type, System.ReadOnlySpan<byte> message);
                                    byte[] CalculateMacConstantTime(long seqNo, short type, byte[] message, int offset, int length, int expectedLength, byte[] randomData);
                                }

                                namespace BC
                                {
                                    class BcChaCha20Poly1305 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                                    {
                                        static /*0x0*/ byte[] Zeroes;
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine m_cipher;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.Poly1305 m_mac;
                                        /*0x20*/ bool m_isEncrypting;
                                        /*0x24*/ int m_additionalDataLength;

                                        static /*0x3f3caf8*/ BcChaCha20Poly1305();
                                        /*0x3f3c16c*/ BcChaCha20Poly1305(bool isEncrypting);
                                        /*0x3f3c228*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x3f3c548*/ int GetOutputSize(int inputLength);
                                        /*0x3f3c560*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                        /*0x3f3c838*/ void Reset();
                                        /*0x3f3c86c*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f3c978*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f3c68c*/ void InitMac();
                                        /*0x3f3c474*/ void UpdateMac(byte[] buf, int off, int len);
                                    }

                                    class BcSsl3Hmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                                    {
                                        static /*0x0*/ byte[] IPAD;
                                        static /*0x8*/ byte[] OPAD;
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest m_digest;
                                        /*0x18*/ int m_padLength;
                                        /*0x20*/ byte[] m_secret;

                                        static /*0x3f3d6d8*/ BcSsl3Hmac();
                                        static /*0x3f3d640*/ byte[] GenPad(byte b, int count);
                                        /*0x3f3cb6c*/ BcSsl3Hmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x3f3cc40*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f3cce0*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f3cd5c*/ void Update(byte[] input, int inOff, int len);
                                        /*0x3f3ce20*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x3f3cedc*/ byte[] CalculateMac();
                                        /*0x3f3d328*/ int get_InternalBlockSize();
                                        /*0x3f3d3cc*/ int get_MacLength();
                                        /*0x3f3d46c*/ void Reset();
                                        /*0x3f3cfbc*/ void DoFinal(byte[] output, int outOff);
                                    }

                                    class BcTls13Verifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IO.SignerSink m_output;

                                        /*0x3f3d75c*/ BcTls13Verifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner verifier);
                                        /*0x3f3d81c*/ System.IO.Stream get_Stream();
                                        /*0x3f3d824*/ bool VerifySignature(byte[] signature);
                                    }

                                    class BcTlsAeadCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                                    {
                                        /*0x10*/ bool m_isEncrypting;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher m_cipher;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                                        /*0x3f3d8d8*/ BcTlsAeadCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher cipher, bool isEncrypting);
                                        /*0x3f3d914*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f3d99c*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f3da14*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                        /*0x3f3db20*/ int GetOutputSize(int inputLength);
                                        /*0x3f3dbcc*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x3f3dddc*/ void Reset();
                                    }

                                    class BcTlsBlockCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl
                                    {
                                        /*0x10*/ bool m_isEncrypting;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher m_cipher;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                                        /*0x3f3de80*/ BcTlsBlockCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, bool isEncrypting);
                                        /*0x3f3debc*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f3df34*/ void Init(System.ReadOnlySpan<byte> iv);
                                        /*0x3f3e030*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x3f3e1a0*/ int GetBlockSize();
                                    }

                                    class BcTlsCertificate : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate
                                    {
                                        /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure m_certificate;

                                        static /*0x3f3e244*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure ParseCertificate(byte[] encoding);
                                        /*0x3f3e35c*/ BcTlsCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] encoding);
                                        /*0x3f3e38c*/ BcTlsCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure certificate);
                                        /*0x3f3e420*/ byte[] GetEncoded();
                                        /*0x3f3e474*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                        /*0x3f3e52c*/ string get_SigAlgOid();
                                        /*0x3f3e560*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                        /*0x3f3e588*/ bool SupportsKeyUsage(int keyUsageBits);
                                    }

                                    class BcTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom m_entropySource;

                                        /*0x3f3e5f8*/ BcTlsCrypto(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom entropySource);
                                        /*0x3f3e674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret AdoptLocalSecret(byte[] data);
                                        /*0x3f3e720*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_SecureRandom();
                                        /*0x3f3e728*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                        /*0x3f3e85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                        /*0x3f3e9f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x3f3eab8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        /*0x3f3ec50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                        /*0x3f3ee64*/ bool HasDHAgreement();
                                        /*0x3f3ee6c*/ bool HasECDHAgreement();
                                        /*0x3f3ee74*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                        /*0x3f3ee98*/ bool HasMacAlgorithm(int macAlgorithm);
                                        /*0x3f3eea8*/ bool HasNamedGroup(int namedGroup);
                                        /*0x3f3ef00*/ bool HasRsaEncryption();
                                        /*0x3f3ef08*/ bool HasSignatureAlgorithm(short signatureAlgorithm);
                                        /*0x3f3ef2c*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                        /*0x3f3ef70*/ bool HasSrpAuthentication();
                                        /*0x3f3ef78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                        /*0x3f3eff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                        /*0x3f3f0c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CloneDigest(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x3f3f450*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CreateDigest(int cryptoHashAlgorithm);
                                        /*0x3f3f63c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                        /*0x3f3f6f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateBlockCipher(int encryptionAlgorithm);
                                        /*0x3f3f7cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher blockCipher);
                                        /*0x3f3f828*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(int encryptionAlgorithm);
                                        /*0x3f3f85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateChaCha20Poly1305(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x3f3f90c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aes_Ccm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f3fa3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aes_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f3fb6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aria_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f3fc9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Camellia_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f3fdcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher_Cbc(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int cipherKeySize, int macAlgorithm);
                                        /*0x3f3ff4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_SM4_Ccm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x3f4006c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_SM4_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x3f4018c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher CreateNullCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int macAlgorithm);
                                        /*0x3f40240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAesEngine();
                                        /*0x3f40248*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAriaEngine();
                                        /*0x3f4029c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCamelliaEngine();
                                        /*0x3f402f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateDesEdeEngine();
                                        /*0x3f40344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateSeedEngine();
                                        /*0x3f40398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateSM4Engine();
                                        /*0x3f403ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateCcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                                        /*0x3f40448*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateGcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                                        /*0x3f404a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aes_Ccm();
                                        /*0x3f404d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aes_Gcm();
                                        /*0x3f4050c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aria_Gcm();
                                        /*0x3f40540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Camellia_Gcm();
                                        /*0x3f40574*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_SM4_Ccm();
                                        /*0x3f405a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_SM4_Gcm();
                                        /*0x3f405dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac(int macAlgorithm);
                                        /*0x3f406c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmacForHash(int cryptoHashAlgorithm);
                                        /*0x3f407b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac_Ssl(int macAlgorithm);
                                        /*0x3f408bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int macAlgorithm);
                                        /*0x3f40904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                        /*0x3f40a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                                    }

                                    class BcTlsDH : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain m_domain;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair m_localKeyPair;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters m_peerPublicKey;

                                        /*0x3f40b18*/ BcTlsDH(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain domain);
                                        /*0x3f40b48*/ byte[] GenerateEphemeral();
                                        /*0x3f40c08*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f40c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcTlsDHDomain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_config;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters m_domainParameters;

                                        static /*0x3f40cdc*/ byte[] EncodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dh, bool padded, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3f40d84*/ int GetValueLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dh);
                                        static /*0x3f40de8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey, bool padded);
                                        static /*0x3f40eb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters GetDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x3f3ea5c*/ BcTlsDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x3f40fd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey);
                                        /*0x3f4101c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateDH();
                                        /*0x3f41084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DecodeParameter(byte[] encoding);
                                        /*0x3f41150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters DecodePublicKey(byte[] encoding);
                                        /*0x3f41280*/ byte[] EncodePublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey);
                                        /*0x3f412b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                    }

                                    class BcTlsDsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier
                                    {
                                        /*0x3f41390*/ BcTlsDsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters publicKey);
                                        /*0x3f41398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x3f413ec*/ short get_SignatureAlgorithm();
                                    }

                                    class BcTlsDssVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x3f41394*/ BcTlsDssVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicKey);
                                        /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x3814548*/ short get_SignatureAlgorithm();
                                        /*0x3f414f8*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsECDH : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain m_domain;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair m_localKeyPair;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters m_peerPublicKey;

                                        /*0x3f41804*/ BcTlsECDH(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain domain);
                                        /*0x3f41834*/ byte[] GenerateEphemeral();
                                        /*0x3f418f4*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f41928*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcTlsECDomain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_config;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters m_domainParameters;

                                        static /*0x3f419c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateECDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        static /*0x3f41ac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters GetDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        static /*0x3f41ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters GetDomainParameters(int namedGroup);
                                        /*0x3f3ebf4*/ BcTlsECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        /*0x3f41be4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateECDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x3f41bec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                        /*0x3f41c54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(byte[] encoding);
                                        /*0x3f41c80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters DecodePublicKey(byte[] encoding);
                                        /*0x3f41dec*/ byte[] EncodePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                        /*0x3f41e14*/ byte[] EncodePublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x3f41e34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                    }

                                    class BcTlsECDsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier
                                    {
                                        /*0x3f41f04*/ BcTlsECDsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x3f41f08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x3f41f5c*/ short get_SignatureAlgorithm();
                                    }

                                    class BcTlsHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ int m_cryptoHashAlgorithm;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest m_digest;

                                        /*0x3f3f6a4*/ BcTlsHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, int cryptoHashAlgorithm);
                                        /*0x3f41f64*/ BcTlsHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x3f41fb8*/ void Update(byte[] data, int offSet, int length);
                                        /*0x3f4207c*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x3f42138*/ byte[] CalculateHash();
                                        /*0x3f4227c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                                        /*0x3f42318*/ void Reset();
                                    }

                                    class BcTlsHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.HMac m_hmac;

                                        /*0x3f40788*/ BcTlsHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.HMac hmac);
                                        /*0x3f423bc*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f42454*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f424dc*/ void Update(byte[] input, int inOff, int length);
                                        /*0x3f42500*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x3f42524*/ byte[] CalculateMac();
                                        /*0x3f425b8*/ int get_InternalBlockSize();
                                        /*0x3f42670*/ int get_MacLength();
                                        /*0x3f42690*/ void Reset();
                                    }

                                    class BcTlsNonceGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator m_randomGenerator;

                                        /*0x3f3ee34*/ BcTlsNonceGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator randomGenerator);
                                        /*0x3f426b4*/ byte[] GenerateNonce(int size);
                                    }

                                    class BcTlsRawKeyCertificate : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo m_keyInfo;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters m_pubKeyDH;
                                        /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters m_pubKeyEC;
                                        /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters m_pubKeyRsa;

                                        /*0x3f3e828*/ BcTlsRawKeyCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] encoding);
                                        /*0x3f3e3dc*/ BcTlsRawKeyCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                                        /*0x3f42794*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor CreateEncryptor(int tlsCertificateRole);
                                        /*0x3f428c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier CreateVerifier(short signatureAlgorithm);
                                        /*0x3f42bc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier CreateVerifier(int signatureScheme);
                                        /*0x3f43180*/ byte[] GetEncoded();
                                        /*0x3f431d4*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                        /*0x3f431dc*/ string get_SigAlgOid();
                                        /*0x3f431e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                        /*0x3f431ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters GetPubKeyDH();
                                        /*0x3f43320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters GetPubKeyDss();
                                        /*0x3f43454*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters GetPubKeyEC();
                                        /*0x3f43588*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters GetPubKeyEd25519();
                                        /*0x3f436a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters GetPubKeyEd448();
                                        /*0x3f437b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters GetPubKeyRsa();
                                        /*0x3f438ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CheckUsageInRole(int tlsCertificateRole);
                                        /*0x3f439c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPublicKey();
                                        /*0x3f45054*/ bool SupportsKeyUsage(int keyUsageBits);
                                        /*0x3f4505c*/ bool SupportsRsa_Pkcs1();
                                        /*0x3f450c0*/ bool SupportsRsa_Pss_Pss(short signatureAlgorithm);
                                        /*0x3f4512c*/ bool SupportsRsa_Pss_Rsae();
                                        /*0x3f45190*/ void ValidateKeyUsage(int keyUsageBits);
                                        /*0x3f451e8*/ void ValidateRsa_Pkcs1();
                                        /*0x3f45240*/ void ValidateRsa_Pss_Pss(short signatureAlgorithm);
                                        /*0x3f45298*/ void ValidateRsa_Pss_Rsae();
                                    }

                                    class BcTlsRsaEncryptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters m_pubKeyRsa;

                                        static /*0x3f452f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters CheckPublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters pubKeyRsa);
                                        /*0x3f42878*/ BcTlsRsaEncryptor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters pubKeyRsa);
                                        /*0x3f4536c*/ byte[] Encrypt(byte[] input, int inOff, int length);
                                    }

                                    class BcTlsRsaPssVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x20*/ int m_signatureScheme;

                                        /*0x3f42b44*/ BcTlsRsaPssVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey, int signatureScheme);
                                        /*0x3f45550*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsRsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x3f42b40*/ BcTlsRsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey);
                                        /*0x3f4576c*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsSecret : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret
                                    {
                                        static /*0x0*/ byte[] Ssl3Const;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        static /*0x3f47c20*/ BcTlsSecret();
                                        static /*0x3f45aa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret Convert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                        static /*0x3f45c00*/ byte[] GenerateSsl3Constants();
                                        /*0x3f3e6dc*/ BcTlsSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] data);
                                        /*0x3f45ca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                        /*0x3f45ec8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                        /*0x3f4611c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                        /*0x3f46730*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                        /*0x3f469c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto get_Crypto();
                                        /*0x3f469cc*/ void HmacHash(int cryptoHashAlgorithm, byte[] secret, int secretOff, int secretLen, byte[] seed, byte[] output);
                                        /*0x3f46c40*/ byte[] Prf(int prfAlgorithm, string label, byte[] seed, int length);
                                        /*0x3f46d3c*/ byte[] Prf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                        /*0x3f46f24*/ byte[] Prf_Ssl(byte[] seed, int length);
                                        /*0x3f46fdc*/ byte[] Prf_Ssl(System.ReadOnlySpan<byte> seed, int length);
                                        /*0x3f4787c*/ byte[] Prf_1_0(byte[] labelSeed, int length);
                                        /*0x3f479d4*/ byte[] Prf_1_2(int prfAlgorithm, byte[] labelSeed, int length);
                                        /*0x3f47aac*/ void UpdateMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac mac);
                                    }

                                    class BcTlsSrp6Client : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client m_srp6Client;

                                        /*0x3f40a4c*/ BcTlsSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client srpClient);
                                        /*0x3f47c78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                        /*0x3f47d54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] srpSalt, byte[] identity, byte[] password);
                                    }

                                    class BcTlsVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter m_publicKey;

                                        /*0x3f413f4*/ BcTlsVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicKey);
                                        /*0x3f47d74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                        /*0x3f47d7c*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcX25519 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ byte[] m_privateKey;
                                        /*0x20*/ byte[] m_peerPublicKey;

                                        /*0x3f47db4*/ BcX25519(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f47e50*/ byte[] GenerateEphemeral();
                                        /*0x3f47ef0*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f47f5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcX25519Domain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        /*0x3f3eb94*/ BcX25519Domain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f48100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                    }

                                    class BcX448 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ byte[] m_privateKey;
                                        /*0x20*/ byte[] m_peerPublicKey;

                                        /*0x3f4815c*/ BcX448(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f481f8*/ byte[] GenerateEphemeral();
                                        /*0x3f48298*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f48304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcX448Domain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        /*0x3f3ebc4*/ BcX448Domain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f484a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                    }
                                }
                            }
                        }
                    }

                    namespace Security
                    {
                        class DigestUtilities
                        {
                            static /*0x0*/ System.Collections.Generic.IDictionary<string, string> Aliases;
                            static /*0x8*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> Oids;

                            static /*0x3f48504*/ DigestUtilities();
                            static /*0x3f4c4b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest GetDigest(string algorithm);

                            enum DigestAlgorithm
                            {
                                BLAKE2B_160 = 0,
                                BLAKE2B_256 = 1,
                                BLAKE2B_384 = 2,
                                BLAKE2B_512 = 3,
                                BLAKE2S_128 = 4,
                                BLAKE2S_160 = 5,
                                BLAKE2S_224 = 6,
                                BLAKE2S_256 = 7,
                                BLAKE3_256 = 8,
                                DSTU7564_256 = 9,
                                DSTU7564_384 = 10,
                                DSTU7564_512 = 11,
                                GOST3411 = 12,
                                GOST3411_2012_256 = 13,
                                GOST3411_2012_512 = 14,
                                KECCAK_224 = 15,
                                KECCAK_256 = 16,
                                KECCAK_288 = 17,
                                KECCAK_384 = 18,
                                KECCAK_512 = 19,
                                MD2 = 20,
                                MD4 = 21,
                                MD5 = 22,
                                NONE = 23,
                                RIPEMD128 = 24,
                                RIPEMD160 = 25,
                                RIPEMD256 = 26,
                                RIPEMD320 = 27,
                                SHA_1 = 28,
                                SHA_224 = 29,
                                SHA_256 = 30,
                                SHA_384 = 31,
                                SHA_512 = 32,
                                SHA_512_224 = 33,
                                SHA_512_256 = 34,
                                SHA3_224 = 35,
                                SHA3_256 = 36,
                                SHA3_384 = 37,
                                SHA3_512 = 38,
                                SHAKE128_256 = 39,
                                SHAKE256_512 = 40,
                                SM3 = 41,
                                TIGER = 42,
                                WHIRLPOOL = 43,
                            }
                        }

                        class GeneralSecurityException : System.Exception
                        {
                            /*0x3f4cee8*/ GeneralSecurityException();
                            /*0x3f4cf40*/ GeneralSecurityException(string message);
                            /*0x3f4cfa8*/ GeneralSecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class InvalidKeyException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.KeyException
                        {
                            /*0x3f4d028*/ InvalidKeyException();
                            /*0x3f4d030*/ InvalidKeyException(string message);
                            /*0x3f4d038*/ InvalidKeyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class InvalidParameterException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.KeyException
                        {
                            /*0x3f4d040*/ InvalidParameterException();
                            /*0x3f4d044*/ InvalidParameterException(string message);
                            /*0x3f4d048*/ InvalidParameterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class KeyException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.GeneralSecurityException
                        {
                            /*0x3f4d02c*/ KeyException();
                            /*0x3f4d034*/ KeyException(string message);
                            /*0x3f4d03c*/ KeyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class PublicKeyFactory
                        {
                            static /*0x3f43a88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter CreateKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                            static /*0x3f4d300*/ byte[] GetRawKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                            static /*0x3f4d04c*/ bool IsPkcsDHParam(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                            static /*0x3f4d188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters ReadPkcsDHParam(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algOid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                        }

                        class SecureRandom : System.Random
                        {
                            static /*0x0*/ long counter;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom MasterRandom;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom ArbitraryRandom;
                            static /*0x18*/ double DoubleScale;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator;

                            static /*0x3f4e1b4*/ SecureRandom();
                            static /*0x3f4d524*/ long NextCounterValue();
                            static /*0x3f4d57c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator CreatePrng(string digestName, bool autoSeed);
                            static /*0x3f4d6c8*/ void AutoSeed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator, int seedLength);
                            /*0x3f4d948*/ SecureRandom();
                            /*0x3f4d9c0*/ SecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator);
                            /*0x3f4da38*/ SecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator, int autoSeedLengthInBytes);
                            /*0x3f4dae4*/ int Next();
                            /*0x3f4db00*/ int Next(int maxValue);
                            /*0x3f4dbe0*/ int Next(int minValue, int maxValue);
                            /*0x3f4dca0*/ void NextBytes(byte[] buf);
                            /*0x3f4dd4c*/ void NextBytes(System.Span<byte> buffer);
                            /*0x3f4dec8*/ double NextDouble();
                            /*0x3f4df7c*/ int NextInt();
                            /*0x3f4e098*/ long NextLong();
                        }

                        class SecurityUtilityException : System.Exception
                        {
                            /*0x3f4e334*/ SecurityUtilityException();
                            /*0x3f4ce80*/ SecurityUtilityException(string message);
                            /*0x3f4e38c*/ SecurityUtilityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }
                    }

                    namespace Math
                    {
                        class BigInteger : System.IComparable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger>, System.IEquatable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger>
                        {
                            static /*0x0*/ int[][] primeLists;
                            static /*0x8*/ int[] primeProducts;
                            static /*0x10*/ int[] ZeroMagnitude;
                            static /*0x18*/ byte[] ZeroEncoding;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] SMALL_CONSTANTS;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Zero;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Three;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Four;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Ten;
                            static /*0x58*/ byte[] BitLengthTable;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix2;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix2E;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix8;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix8E;
                            static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix10;
                            static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix10E;
                            static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix16;
                            static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix16E;
                            static /*0xa0*/ int[] ExpWindowThresholds;
                            /*0x10*/ int[] magnitude;
                            /*0x18*/ int sign;
                            /*0x1c*/ int nBits;
                            /*0x20*/ int nBitLength;

                            static /*0x3f4e40c*/ BigInteger();
                            static /*0x3f50138*/ int GetByteLength(int nBits);
                            static /*0x3f50150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Arbitrary(int sizeInBits);
                            static /*0x3f511fc*/ int[] MakeMagnitude(byte[] bytes, int offset, int length);
                            static /*0x3f51078*/ int[] MakeMagnitude(System.ReadOnlySpan<byte> bytes);
                            static /*0x3f51614*/ int[] AddMagnitudes(int[] a, int[] b);
                            static /*0x3f51a88*/ int BitCnt(int i);
                            static /*0x3f51abc*/ int CalcBitLength(int sign, int indx, int[] mag);
                            static /*0x3f51d10*/ int BitLen(byte b);
                            static /*0x3f51bec*/ int BitLen(int w);
                            static /*0x3f51e58*/ int CompareTo(int xIndx, int[] x, int yIndx, int[] y);
                            static /*0x3f51db0*/ int CompareNoLeadingZeroes(int xIndx, int[] x, int yIndx, int[] y);
                            static /*0x3f538d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ExtEuclid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u1Out);
                            static /*0x3f53d04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPowBarrett(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            static /*0x3f54814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReduceBarrett(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger mr, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger yu);
                            static /*0x3f54110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPowMonty(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, bool convert);
                            static /*0x3f54928*/ int[] GetWindowList(int[] mag, int extraBits);
                            static /*0x3f55684*/ int CreateWindowEntry(int mult, int zeroes);
                            static /*0x3f556a0*/ int[] Square(int[] w, int[] x);
                            static /*0x3f55818*/ int[] Multiply(int[] x, int[] y, int[] z);
                            static /*0x3f55520*/ void MontgomeryReduce(int[] x, int[] m, uint mDash);
                            static /*0x3f55190*/ void MultiplyMonty(int[] a, int[] x, int[] y, int[] m, uint mDash, bool smallMontyModulus);
                            static /*0x3f54d28*/ void SquareMonty(int[] a, int[] x, int[] m, uint mDash, bool smallMontyModulus);
                            static /*0x3f558f8*/ uint MultiplyMontyNIsOne(uint x, uint y, uint m, uint mDash);
                            static /*0x3f55990*/ int[] Remainder(int[] x, int[] y);
                            static /*0x3f52414*/ int[] ShiftLeft(int[] mag, int n);
                            static /*0x3f526d0*/ void ShiftRightInPlace(int start, int[] mag, int n);
                            static /*0x3f5263c*/ void ShiftRightOneInPlace(int start, int[] mag);
                            static /*0x3f52598*/ int[] Subtract(int xStart, int[] x, int yStart, int[] y);
                            static /*0x3f531b8*/ int[] doSubBigLil(int[] bigMag, int[] lilMag);
                            static /*0x3f56c98*/ void ToString(System.Text.StringBuilder sb, int radix, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger> moduli, int scale, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pos);
                            static /*0x3f56c38*/ void AppendZeroExtendedString(System.Text.StringBuilder sb, string s, int minLength);
                            static /*0x3f4fe38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateUValueOf(ulong value);
                            static /*0x3f56ee8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateValueOf(long value);
                            static /*0x3f4d3ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValueOf(long value);
                            /*0x3f4fcd4*/ BigInteger(int signum, int[] mag, bool checkMag);
                            /*0x3f50478*/ BigInteger(string value);
                            /*0x3f50480*/ BigInteger(string str, int radix);
                            /*0x3f50d24*/ BigInteger(byte[] bytes);
                            /*0x3f50d40*/ BigInteger(byte[] bytes, int offset, int length);
                            /*0x3f32a4c*/ BigInteger(int sign, byte[] bytes);
                            /*0x3f512f4*/ BigInteger(int sign, byte[] bytes, int offset, int length);
                            /*0x3f5144c*/ BigInteger(int sign, System.ReadOnlySpan<byte> bytes);
                            /*0x3f501dc*/ BigInteger(int sizeInBits, System.Random random);
                            /*0x3f5012c*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
                            /*0x3f51590*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Abs();
                            /*0x3f50c98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f517f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger AddToMagnitude(int[] magToAdd);
                            /*0x3f5196c*/ int get_BitCount();
                            /*0x3f4d328*/ int get_BitLength();
                            /*0x3f51d8c*/ bool QuickPow2Check();
                            /*0x3f4d47c*/ int CompareTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger other);
                            /*0x3f51f4c*/ int[] Divide(int[] x, int[] y);
                            /*0x3f527dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f529bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DivideAndRemainder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f52e04*/ bool Equals(object obj);
                            /*0x3f52f30*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger other);
                            /*0x3f52e9c*/ bool IsEqualMagnitude(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            /*0x3f52f60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Gcd(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f53058*/ int GetHashCode();
                            /*0x3f530b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Inc();
                            /*0x3f4d2b4*/ int get_IntValue();
                            /*0x3f53274*/ int get_IntValueExact();
                            /*0x3f532dc*/ long get_LongValue();
                            /*0x3f52fcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Mod(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f535a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f53710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInversePow2(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f53ac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPow(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f54cec*/ int GetMQuote();
                            /*0x3f50ad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f546e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Square();
                            /*0x3f515a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Negate();
                            /*0x3f51a70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Not();
                            /*0x3f4ff70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Pow(int exp);
                            /*0x3f55924*/ int Remainder(int m);
                            /*0x3f53348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Remainder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            /*0x3f52cb0*/ int[] LastNBits(int n);
                            /*0x3f54b2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DivideWords(int w);
                            /*0x3f54c18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger RemainderWords(int w);
                            /*0x3f509a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ShiftLeft(int n);
                            /*0x3f32b84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ShiftRight(int n);
                            /*0x3f55d20*/ int get_SignValue();
                            /*0x3f516a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            /*0x3f55d28*/ int GetLengthofByteArrayUnsigned();
                            /*0x3f55da4*/ byte[] ToByteArray();
                            /*0x3f5607c*/ byte[] ToByteArrayUnsigned();
                            /*0x3f56084*/ void ToByteArrayUnsigned(System.Span<byte> output);
                            /*0x3f55dac*/ byte[] ToByteArray(bool unsigned);
                            /*0x3f56094*/ void ToByteArray(bool unsigned, System.Span<byte> output);
                            /*0x3f564d8*/ string ToString();
                            /*0x3f564e0*/ string ToString(int radix);
                            /*0x3f56f90*/ int GetLowestSetBit();
                            /*0x3f56fa8*/ int GetLowestSetBitMaskFirst(int firstWordMask);
                            /*0x3f539f0*/ bool TestBit(int n);
                            /*0x3f5703c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Or(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f572b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Xor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f57514*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SetBit(int n);
                            /*0x3f5762c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FlipExistingBit(int n);
                        }

                        class Primes
                        {
                            static /*0x0*/ int SmallFactorLimit;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Three;

                            static /*0x3f58518*/ Primes();
                            static /*0x3f5771c*/ bool HasAnySmallFactors(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger candidate);
                            static /*0x3f58160*/ bool IsMRProbablePrime(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger candidate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, int iterations);
                            static /*0x3f57790*/ void CheckCandidate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, string name);
                            static /*0x3f57814*/ bool ImplHasAnySmallFactors(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            static /*0x3f583c4*/ bool ImplMRProbablePrimeToBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger w, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger wSubOne, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, int a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                        }

                        namespace Raw
                        {
                            class Bits
                            {
                                static /*0x3f585dc*/ uint BitPermuteStep(uint x, uint m, int s);
                                static /*0x3f585f8*/ ulong BitPermuteStep(ulong x, ulong m, int s);
                                static /*0x3f58614*/ ulong BitPermuteStepSimple(ulong x, ulong m, int s);
                            }

                            class Interleave
                            {
                                static /*0x3f5862c*/ uint Expand8to16(uint x);
                                static /*0x3f5864c*/ ulong Expand32to64(uint x);
                                static /*0x3f586a0*/ void Expand64To128(ulong x, ulong[] z, int zOff);
                                static /*0x3f58748*/ void Expand64To128(ulong[] xs, int xsOff, int xsLen, ulong[] zs, int zsOff);
                                static /*0x3f587bc*/ ulong Expand64To128Rev(ulong x, ref ulong low);
                                static /*0x3f58824*/ uint Shuffle2(uint x);
                                static /*0x3f58874*/ ulong Unshuffle(ulong x);
                                static /*0x3f588cc*/ ulong Unshuffle(ulong x, ref ulong even);
                                static /*0x3f588ec*/ ulong Unshuffle(ulong x0, ulong x1, ref ulong even);
                            }

                            class Mod
                            {
                                static /*0x3f58928*/ void CheckedModOddInverse(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x3f58fb0*/ uint Inverse32(uint d);
                                static /*0x3f58fd8*/ ulong Inverse64(ulong d);
                                static /*0x3f59008*/ uint ModOddInverse(uint[] m, uint[] x, uint[] z);
                                static /*0x3f58984*/ uint ModOddInverse(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x3f598d4*/ bool ModOddInverseVar(uint[] m, uint[] x, uint[] z);
                                static /*0x3f599f0*/ bool ModOddInverseVar(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x3f5a4bc*/ uint[] Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, uint[] p);
                                static /*0x3f5a348*/ int Add30(int len30, System.Span<int> D, System.ReadOnlySpan<int> M);
                                static /*0x3f59578*/ void CNegate30(int len30, int cond, System.Span<int> D);
                                static /*0x3f595f4*/ void CNormalize30(int len30, int condNegate, System.Span<int> D, System.ReadOnlySpan<int> M);
                                static /*0x3f59718*/ void Decode30(int bits, System.ReadOnlySpan<int> x, System.Span<uint> z);
                                static /*0x3f59240*/ int Divsteps30(int delta, int f0, int g0, System.Span<int> t);
                                static /*0x3f5a140*/ int Divsteps30Var(int eta, int f0, int g0, System.Span<int> t);
                                static /*0x3f59124*/ void Encode30(int bits, System.ReadOnlySpan<uint> x, System.Span<int> z);
                                static /*0x3f59830*/ int EqualTo(int len, System.ReadOnlySpan<int> x, int y);
                                static /*0x3f5988c*/ int EqualToZero(int len, System.ReadOnlySpan<int> x);
                                static /*0x3f5920c*/ int GetMaximumDivsteps(int bits);
                                static /*0x3f5a454*/ bool IsOne(int len, System.ReadOnlySpan<int> x);
                                static /*0x3f5a2e4*/ bool IsZero(int len, System.ReadOnlySpan<int> x);
                                static /*0x3f5a3e4*/ int Negate30(int len30, System.Span<int> D);
                                static /*0x3f592f8*/ void UpdateDE30(int len30, System.Span<int> D, System.Span<int> E, System.ReadOnlySpan<int> t, int m0Inv32, System.ReadOnlySpan<int> M);
                                static /*0x3f59484*/ void UpdateFG30(int len30, System.Span<int> F, System.Span<int> G, System.ReadOnlySpan<int> t);
                            }

                            class Nat
                            {
                                static /*0x3f5a68c*/ uint Add(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x3f5a720*/ uint Add33To(int len, uint x, uint[] z);
                                static /*0x3f5a7dc*/ uint AddBothTo(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x3f5a878*/ uint AddTo(int len, uint[] x, uint[] z);
                                static /*0x3f5a8f8*/ uint AddTo(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f5a988*/ uint AddWordAt(int len, uint x, uint[] z, int zPos);
                                static /*0x3f5a9dc*/ uint AddWordTo(int len, uint x, uint[] z);
                                static /*0x3f5aa28*/ uint CAdd(int len, int mask, System.ReadOnlySpan<uint> x, System.ReadOnlySpan<uint> y, System.Span<uint> z);
                                static /*0x3f5aaa8*/ int Compare(int len, uint[] x, uint[] y);
                                static /*0x3f5ab18*/ void Copy(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f5a5dc*/ uint[] Create(int len);
                                static /*0x3f5ab38*/ ulong[] Create64(int len);
                                static /*0x3f5ab80*/ int Dec(int len, uint[] z);
                                static /*0x3f5abdc*/ int DecAt(int len, uint[] z, int zPos);
                                static /*0x3f5ac34*/ bool Eq(int len, uint[] x, uint[] y);
                                static /*0x3f5ac90*/ uint[] FromBigInteger(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                static /*0x3f5adf0*/ void FromBigInteger(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, System.Span<uint> z);
                                static /*0x3f5af14*/ ulong[] FromBigInteger64(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                static /*0x3f5b074*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f5ada4*/ int GetLengthForBits(int bits);
                                static /*0x3f5b028*/ int GetLengthForBits64(int bits);
                                static /*0x3f5a624*/ bool Gte(int len, uint[] x, uint[] y);
                                static /*0x3f5b0d4*/ uint Inc(int len, uint[] z);
                                static /*0x3f5b130*/ uint Inc(int len, uint[] x, uint[] z);
                                static /*0x3f5a784*/ uint IncAt(int len, uint[] z, int zPos);
                                static /*0x3f5b204*/ uint IncAt(int len, uint[] z, int zOff, int zPos);
                                static /*0x3f5b264*/ bool IsOne(int len, uint[] x);
                                static /*0x3f5b2dc*/ bool IsZero(int len, uint[] x);
                                static /*0x3f5b350*/ int LessThan(int len, uint[] x, uint[] y);
                                static /*0x3f5b3cc*/ uint Mul31BothAdd(int len, uint a, uint[] x, uint b, uint[] y, uint[] z, int zOff);
                                static /*0x3f5b47c*/ uint MulWordAddTo(int len, uint x, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f5b504*/ uint ShiftDownBit(int len, System.Span<uint> z, uint c);
                                static /*0x3f5b54c*/ uint ShiftDownBits(int len, uint[] z, int bits, uint c);
                                static /*0x3f5b5bc*/ uint ShiftDownBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff);
                                static /*0x3f5b648*/ uint ShiftDownWord(int len, uint[] z, uint c);
                                static /*0x3f5b694*/ uint ShiftUpBit(int len, uint[] x, uint c, uint[] z);
                                static /*0x3f5b7b8*/ uint ShiftUpBit(int len, System.ReadOnlySpan<uint> x, uint c, System.Span<uint> z);
                                static /*0x3f5b908*/ ulong ShiftUpBit64(int len, ulong[] x, int xOff, ulong c, ulong[] z, int zOff);
                                static /*0x3f5ba5c*/ ulong ShiftUpBit64(int len, System.ReadOnlySpan<ulong> x, ulong c, System.Span<ulong> z);
                                static /*0x3f5bbac*/ uint ShiftUpBits(int len, uint[] z, int bits, uint c);
                                static /*0x3f5bc60*/ uint ShiftUpBits(int len, System.Span<uint> z, int bits, uint c);
                                static /*0x3f5bda0*/ uint ShiftUpBits(int len, uint[] x, int bits, uint c, uint[] z);
                                static /*0x3f5becc*/ uint ShiftUpBits(int len, System.ReadOnlySpan<uint> x, int bits, uint c, System.Span<uint> z);
                                static /*0x3f5c06c*/ ulong ShiftUpBits64(int len, ulong[] z, int zOff, int bits, ulong c);
                                static /*0x3f5c134*/ ulong ShiftUpBits64(int len, System.Span<ulong> z, int bits, ulong c);
                                static /*0x3f5c274*/ ulong ShiftUpBits64(int len, ulong[] x, int xOff, int bits, ulong c, ulong[] z, int zOff);
                                static /*0x3f5c3d0*/ ulong ShiftUpBits64(int len, System.ReadOnlySpan<ulong> x, int bits, ulong c, System.Span<ulong> z);
                                static /*0x3f5c570*/ int Sub(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x3f5c604*/ int Sub33From(int len, uint x, uint[] z);
                                static /*0x3f5c668*/ int SubFrom(int len, uint[] x, uint[] z);
                                static /*0x3f5c6e8*/ int SubFrom(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f5c778*/ int SubWordFrom(int len, uint x, uint[] z);
                                static /*0x3f5c7c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(int len, uint[] x);
                                static /*0x3f5c868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(int len, System.ReadOnlySpan<uint> x);
                                static /*0x3f5caf8*/ void Xor64(int len, ulong[] x, ulong[] y, ulong[] z);
                                static /*0x3f5ce84*/ void Xor64(int len, ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                static /*0x3f5cc7c*/ void Xor64(int len, System.ReadOnlySpan<ulong> x, System.ReadOnlySpan<ulong> y, System.Span<ulong> z);
                                static /*0x3f5d04c*/ void XorTo64(int len, ulong[] x, ulong[] z);
                                static /*0x3f5d300*/ void XorTo64(int len, ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f5d160*/ void XorTo64(int len, System.ReadOnlySpan<ulong> x, System.Span<ulong> z);
                                static /*0x3f5d444*/ void Zero(int len, uint[] z);
                            }

                            class Nat128
                            {
                                static /*0x3f5d50c*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5d5e8*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5d6e0*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f5d79c*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3f5d7ec*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f5d860*/ uint[] Create();
                                static /*0x3f5d8a4*/ ulong[] Create64();
                                static /*0x3f5d8e8*/ uint[] CreateExt();
                                static /*0x3f5d92c*/ ulong[] CreateExt64();
                                static /*0x3f5d970*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f5d9d8*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3f5da3c*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f5daa0*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f5db0c*/ bool IsOne(uint[] x);
                                static /*0x3f5db78*/ bool IsOne64(ulong[] x);
                                static /*0x3f5dbc4*/ bool IsZero(uint[] x);
                                static /*0x3f5dc18*/ bool IsZero64(ulong[] x);
                                static /*0x3f5dc6c*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f5dda0*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f5deb0*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f5e054*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5e130*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f5e1e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x3f5e2c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat160
                            {
                                static /*0x3f5e3a4*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5e4b0*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5e5e0*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f5e6c4*/ uint[] Create();
                                static /*0x3f5e708*/ uint[] CreateExt();
                                static /*0x3f5e74c*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f5e7ac*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f5e810*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f5e87c*/ bool IsOne(uint[] x);
                                static /*0x3f5e8e8*/ bool IsZero(uint[] x);
                                static /*0x3f5e93c*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f5eaa8*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f5ebe4*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f5ed7c*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f5ee4c*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f5ef10*/ uint MulWordsAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f5efb4*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f5f1c4*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5f2d0*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f5f3ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                            }

                            class Nat192
                            {
                                static /*0x3f5f48c*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5f5c8*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5f730*/ uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn);
                                static /*0x3f5f89c*/ uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff);
                                static /*0x3f5fa28*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f5fb34*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3f5fba0*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f5fc44*/ uint[] Create();
                                static /*0x3f5fc88*/ ulong[] Create64();
                                static /*0x3f5fccc*/ uint[] CreateExt();
                                static /*0x3f5fd10*/ ulong[] CreateExt64();
                                static /*0x3f5fd54*/ bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f60018*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f60078*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3f600d8*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f6013c*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f5fdd0*/ bool Gte(uint[] x, int xOff, uint[] y, int yOff);
                                static /*0x3f601a8*/ bool IsOne(uint[] x);
                                static /*0x3f60214*/ bool IsOne64(ulong[] x);
                                static /*0x3f60280*/ bool IsZero(uint[] x);
                                static /*0x3f602d4*/ bool IsZero64(ulong[] x);
                                static /*0x3f60328*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f604c4*/ void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff);
                                static /*0x3f60760*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f608c4*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f60aa8*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f60b94*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f60c58*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f60edc*/ void Square(uint[] x, int xOff, uint[] zz, int zzOff);
                                static /*0x3f6122c*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5fe4c*/ int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f61368*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f6146c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x3f6154c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat224
                            {
                                static /*0x3f6162c*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f61798*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f61938*/ void Copy(uint[] x, uint[] z);
                                static /*0x3f619fc*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f61b30*/ uint[] Create();
                                static /*0x3f61b74*/ uint[] CreateExt();
                                static /*0x3f61bb8*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f61c18*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f61c7c*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f61ce8*/ bool IsOne(uint[] x);
                                static /*0x3f61d54*/ bool IsZero(uint[] x);
                                static /*0x3f61da8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f61f7c*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f6210c*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f6233c*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f62428*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f624ec*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f627fc*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f62968*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f62a94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                            }

                            class Nat256
                            {
                                static /*0x3f62b74*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f62d10*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f62ee8*/ uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn);
                                static /*0x3f630c4*/ uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff);
                                static /*0x3f632d0*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f6342c*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3f634b4*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f63588*/ uint[] Create();
                                static /*0x3f635cc*/ ulong[] Create64();
                                static /*0x3f63610*/ uint[] CreateExt();
                                static /*0x3f63654*/ ulong[] CreateExt64();
                                static /*0x3f63698*/ bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f639ec*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f63a4c*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3f63aac*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f63b10*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f63714*/ bool Gte(uint[] x, int xOff, uint[] y, int yOff);
                                static /*0x3f63b7c*/ bool IsOne(uint[] x);
                                static /*0x3f63be8*/ bool IsOne64(ulong[] x);
                                static /*0x3f63c54*/ bool IsZero(uint[] x);
                                static /*0x3f63ca8*/ bool IsZero64(ulong[] x);
                                static /*0x3f63cfc*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f63f00*/ void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff);
                                static /*0x3f6426c*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f64424*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f646a0*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f6478c*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f6484c*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f64bfc*/ void Square(uint[] x, int xOff, uint[] zz, int zzOff);
                                static /*0x3f650c4*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f63790*/ int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f65260*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f653b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x3f65494*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat320
                            {
                                static /*0x3d72188*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3d7222c*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3d72330*/ ulong[] Create64();
                                static /*0x3d72374*/ ulong[] CreateExt64();
                                static /*0x3d723b8*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3d72418*/ bool IsOne64(ulong[] x);
                                static /*0x3d72484*/ bool IsZero64(ulong[] x);
                                static /*0x3d724d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat384
                            {
                                static /*0x3d725b8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3d72728*/ void Square(uint[] x, uint[] zz);
                            }

                            class Nat448
                            {
                                static /*0x3d7283c*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3d72918*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3d72a7c*/ ulong[] Create64();
                                static /*0x3d72ac0*/ ulong[] CreateExt64();
                                static /*0x3d72b04*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3d72b64*/ bool IsOne64(ulong[] x);
                                static /*0x3d72bd0*/ bool IsZero64(ulong[] x);
                                static /*0x3d72c24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat512
                            {
                                static /*0x3d72d04*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3d72e74*/ void Square(uint[] x, uint[] zz);
                                static /*0x3d72f88*/ void Xor64(System.ReadOnlySpan<ulong> x, System.ReadOnlySpan<ulong> y, System.Span<ulong> z);
                                static /*0x3d73068*/ void XorTo64(System.ReadOnlySpan<ulong> x, System.Span<ulong> z);
                            }

                            class Nat576
                            {
                                static /*0x3d73124*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3d73238*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3d733fc*/ ulong[] Create64();
                                static /*0x3d73440*/ ulong[] CreateExt64();
                                static /*0x3d73484*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3d734e4*/ bool IsOne64(ulong[] x);
                                static /*0x3d73550*/ bool IsZero64(ulong[] x);
                                static /*0x3d735a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }
                        }

                        namespace Field
                        {
                            class FiniteFields
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GF_2;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GF_3;

                                static /*0x3d73a68*/ FiniteFields();
                                static /*0x3d73684*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomialExtensionField GetBinaryExtensionField(int[] exponents);
                                static /*0x3d738cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GetPrimeField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic);
                            }

                            class GenericPolynomialExtensionField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomialExtensionField, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField subfield;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial minimalPolynomial;

                                /*0x3d73888*/ GenericPolynomialExtensionField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField subfield, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial polynomial);
                                /*0x3d73b80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x3d73c20*/ int get_Dimension();
                                /*0x3d73d44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial get_MinimalPolynomial();
                                /*0x3d73d4c*/ bool Equals(object obj);
                                /*0x3d73e1c*/ int GetHashCode();
                            }

                            class GF2Polynomial : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial
                            {
                                /*0x10*/ int[] exponents;

                                /*0x3d73808*/ GF2Polynomial(int[] exponents);
                                /*0x3d73ebc*/ int get_Degree();
                                /*0x3d73ef0*/ int[] GetExponentsPresent();
                                /*0x3d73f4c*/ bool Equals(object obj);
                                /*0x3d74024*/ int GetHashCode();
                            }

                            interface IFiniteField
                            {
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x3814574*/ int get_Dimension();
                            }

                            interface IPolynomial
                            {
                                /*0x3814574*/ int get_Degree();
                                /*0x38148bc*/ int[] GetExponentsPresent();
                            }

                            interface IPolynomialExtensionField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial get_MinimalPolynomial();
                            }

                            class PrimeField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic;

                                /*0x3d73a38*/ PrimeField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic);
                                /*0x3d74080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x3d74088*/ int get_Dimension();
                                /*0x3d74090*/ bool Equals(object obj);
                                /*0x3d74140*/ int GetHashCode();
                            }
                        }

                        namespace EC
                        {
                            class AbstractECLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable
                            {
                                /*0x3d7416c*/ AbstractECLookupTable();
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                /*0x3814574*/ int get_Size();
                                /*0x3d74160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                            }

                            class ECAlgorithms
                            {
                                static /*0x3d74174*/ bool IsF2mCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                static /*0x3d74198*/ bool IsF2mField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                static /*0x3d74318*/ bool IsFpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                static /*0x3d7433c*/ bool IsFpField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                static /*0x3d743e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint SumOfTwoMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                static /*0x3d74660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x3d74e8c*/ void MontgomeryTrick(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs, int off, int len, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                static /*0x3d7519c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ReferenceMultiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                static /*0x3d752dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CleanPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x3d74710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplCheckResult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x3d74b2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                                static /*0x3d75c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                                static /*0x3d759a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompP, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompNegP, byte[] wnafP, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompQ, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompNegQ, byte[] wnafQ);
                                static /*0x3d75f68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks);
                                static /*0x3d74784*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultipliesGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism);
                                static /*0x3d764e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks);
                                static /*0x3d761e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(bool[] negs, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo[] infos, byte[][] wnafs);
                                static /*0x3d75514*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickFixedPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                            }

                            class ECCurve
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField m_field;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_a;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_b;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_order;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_cofactor;
                                /*0x38*/ int m_coord;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier m_multiplier;

                                /*0x3d769a0*/ ECCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                /*0x3814574*/ int get_FieldSize();
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x38141c4*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x3d769d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve.Config Configure();
                                /*0x3d76aac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ValidatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x3d76b38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x3814b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3814c14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d76b8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                /*0x3d76c40*/ bool SupportsCoordinateSystem(int coord);
                                /*0x3d76c4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback callback);
                                /*0x3d77000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x3d77108*/ void NormalizeAll(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points);
                                /*0x3d77134*/ void NormalizeAll(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement iso);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x3d7742c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField get_Field();
                                /*0x3d77434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_A();
                                /*0x3d7743c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_B();
                                /*0x3d77444*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x3d7744c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Cofactor();
                                /*0x3d77454*/ int get_CoordinateSystem();
                                /*0x3d7745c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                /*0x3d776b4*/ void CheckPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                /*0x3d77748*/ void CheckPoints(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                /*0x3d778a8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve other);
                                /*0x3d779f0*/ bool Equals(object obj);
                                /*0x3d77a7c*/ int GetHashCode();
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                                /*0x3d77b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism GetEndomorphism();
                                /*0x3d77b98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier GetMultiplier();
                                /*0x3d77be4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(byte[] encoded);
                                /*0x3d77c94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(System.ReadOnlySpan<byte> encoded);

                                class Config
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer;
                                    /*0x18*/ int coord;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier multiplier;

                                    /*0x3d76a44*/ Config(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer, int coord, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier multiplier);
                                    /*0x3d78300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve.Config SetEndomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism);
                                    /*0x3d7831c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve Create();
                                }

                                class DefaultLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_outer;
                                    /*0x18*/ byte[] m_table;
                                    /*0x20*/ int m_size;

                                    /*0x3d7765c*/ DefaultLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer, byte[] table, int size);
                                    /*0x3d78414*/ int get_Size();
                                    /*0x3d7841c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                    /*0x3d78690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                    /*0x3d785a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(byte[] x, byte[] y);
                                }
                            }

                            class AbstractFpCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve
                            {
                                static /*0x3d78a5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ImplRandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p);
                                /*0x3d787d8*/ AbstractFpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q);
                                /*0x3d78858*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7893c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x3d78b10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                            }

                            class FpCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                            {
                                static /*0x0*/ System.Collections.Generic.HashSet<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger> KnownQs;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_q;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_r;
                                /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpPoint m_infinity;

                                static /*0x3d79abc*/ FpCurve();
                                /*0x3d78c80*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d78c88*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor, bool isInternal);
                                /*0x3d79498*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d795a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x3d79630*/ bool SupportsCoordinateSystem(int coord);
                                /*0x3d79650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x3d79658*/ int get_FieldSize();
                                /*0x3d79674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d797c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d79830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d798b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x3d79204*/ int GetNumberOfIterations(int bits, int certainty);
                                /*0x3d79180*/ int AsInteger(string envVariable, int defaultValue);
                            }

                            class AbstractF2mCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve
                            {
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] si;

                                static /*0x3d79b54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField BuildField(int m, int k1, int k2, int k3);
                                static /*0x3d79edc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ImplRandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, int m);
                                /*0x3d79c64*/ AbstractF2mCurve(int m, int k1, int k2, int k3);
                                /*0x3d79cac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x3d79df4*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d79e48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x3d79f54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                                /*0x3d7a158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SolveQuadraticEquation(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement beta);
                                /*0x3d7a440*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetSi();
                                /*0x3d7a568*/ bool get_IsKoblitz();
                            }

                            class F2mCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                            {
                                /*0x58*/ int m;
                                /*0x5c*/ int k1;
                                /*0x60*/ int k2;
                                /*0x64*/ int k3;
                                /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mPoint m_infinity;

                                /*0x3d7a5ec*/ F2mCurve(int m, int k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d7a620*/ F2mCurve(int m, int k1, int k2, int k3, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d7a81c*/ F2mCurve(int m, int k1, int k2, int k3, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d7a930*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x3d7a9dc*/ bool SupportsCoordinateSystem(int coord);
                                /*0x3d7a9fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                /*0x3d7aa7c*/ int get_FieldSize();
                                /*0x3d7aa84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7aef4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7af64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d7afe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x3d7aff0*/ bool IsTrinomial();
                                /*0x3d7b010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                class DefaultF2mLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mCurve m_outer;
                                    /*0x18*/ ulong[] m_table;
                                    /*0x20*/ int m_size;

                                    /*0x3d7b1f0*/ DefaultF2mLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mCurve outer, ulong[] table, int size);
                                    /*0x3d7b248*/ int get_Size();
                                    /*0x3d7b250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                    /*0x3d7b550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                    /*0x3d7b3c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                }
                            }

                            class ECFieldElement
                            {
                                /*0x3d7bb48*/ ECFieldElement();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3814574*/ int get_FieldSize();
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x3d7b688*/ int get_BitLength();
                                /*0x3d7b6ac*/ bool get_IsOne();
                                /*0x3d7b6d0*/ bool get_IsZero();
                                /*0x3d7b6fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7b758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7b7b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7b814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                /*0x3d7b848*/ bool TestBitZero();
                                /*0x3d7b870*/ bool Equals(object obj);
                                /*0x3d7b8fc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                /*0x3d7b96c*/ int GetHashCode();
                                /*0x3d7b994*/ string ToString();
                                /*0x3d7b9bc*/ byte[] GetEncoded();
                                /*0x3d7ba48*/ int GetEncodedLength();
                                /*0x3d7ba74*/ void EncodeTo(System.Span<byte> buf);
                            }

                            class AbstractFpFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement
                            {
                                /*0x3d7bb50*/ AbstractFpFieldElement();
                            }

                            class FpFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;

                                static /*0x3d792ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateResidue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p);
                                /*0x3d79760*/ FpFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7bb58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3d7bb60*/ int get_FieldSize();
                                /*0x3d7bb7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7bc34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x3d7bd1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7bdd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7be8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7bfbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7c160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7c230*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x3d7c2cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x3d7c35c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7c4e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x3d7c570*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x3d7cb50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement CheckSqrt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement z);
                                /*0x3d7cba4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] LucasSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                /*0x3d7d0c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModAdd(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x3d7d124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModDouble(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7d18c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModHalfAbs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7d1ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7d258*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x3d7d294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModReduce(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d7d5a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModSubtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x3d7d5ec*/ bool Equals(object obj);
                                /*0x3d7d694*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpFieldElement other);
                                /*0x3d7d6e8*/ int GetHashCode();
                            }

                            class AbstractF2mFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement
                            {
                                /*0x3d7da30*/ AbstractF2mFieldElement();
                                /*0x3d7d728*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                /*0x3d7d8a4*/ bool get_HasFastTrace();
                                /*0x3d7d8ac*/ int Trace();
                            }

                            class F2mFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                            {
                                /*0x10*/ int representation;
                                /*0x14*/ int m;
                                /*0x18*/ int[] ks;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray x;

                                static /*0x3d7ddc8*/ void CheckFieldElements(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7ae84*/ F2mFieldElement(int m, int[] ks, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray x);
                                /*0x3d7da38*/ int get_BitLength();
                                /*0x3d7da98*/ bool get_IsOne();
                                /*0x3d7db10*/ bool get_IsZero();
                                /*0x3d7db74*/ bool TestBitZero();
                                /*0x3d7dbb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3d7ddc0*/ int get_FieldSize();
                                /*0x3d7df48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7e130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x3d7e2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7e2b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7e73c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7e74c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7ed3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7ed7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x3d7ed80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x3d7eee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7f0ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                /*0x3d7f2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x3d7f720*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x3d7f77c*/ bool Equals(object obj);
                                /*0x3d7f824*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mFieldElement other);
                                /*0x3d7f994*/ int GetHashCode();
                            }

                            interface ECLookupTable
                            {
                                /*0x3814574*/ int get_Size();
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                            }

                            class ECPoint
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_x;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_y;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] m_zs;
                                /*0x30*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo> m_preCompTable;

                                static /*0x3d80c08*/ ECPoint();
                                static /*0x3d7fa8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] GetInitialZCoords(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                /*0x3d7fd78*/ ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7fe00*/ ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3813ffc*/ bool SatisfiesCurveEquation();
                                /*0x3d7fe74*/ bool SatisfiesOrder();
                                /*0x3d7ff6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3d7ff74*/ int get_CurveCoordinateSystem();
                                /*0x3d7ff90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_AffineXCoord();
                                /*0x3d7ffbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_AffineYCoord();
                                /*0x3d7ffe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_XCoord();
                                /*0x3d7fff0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                /*0x3d7fff8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(int index);
                                /*0x3d80038*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_RawXCoord();
                                /*0x3d80040*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_RawYCoord();
                                /*0x3d80048*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] get_RawZCoords();
                                /*0x3d80050*/ void CheckNormalized();
                                /*0x3d800b8*/ bool IsNormalized();
                                /*0x3d80128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Normalize();
                                /*0x3d802b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Normalize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement zInv);
                                /*0x3d803a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateScaledPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement sx, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement sy);
                                /*0x3d770e8*/ bool get_IsInfinity();
                                /*0x3d76b2c*/ bool IsValid();
                                /*0x3d75508*/ bool IsValidPartial();
                                /*0x3d781b8*/ bool ImplIsValid(bool decompressed, bool checkOrder);
                                /*0x3d80484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d80510*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleY(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d805b0*/ bool Equals(object obj);
                                /*0x3d8063c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint other);
                                /*0x3d8090c*/ int GetHashCode();
                                /*0x3d809d0*/ string ToString();
                                byte[] GetEncoded(bool compressed);
                                int GetEncodedLength(bool compressed);
                                void EncodeTo(bool compressed, System.Span<byte> buf);
                                /*0x3813ffc*/ bool get_CompressionYTilde();
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                /*0x3d80b1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TimesPow2(int e);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                /*0x3d80bb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d80bf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();

                                class ValidityCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_outer;
                                    /*0x18*/ bool m_decompressed;
                                    /*0x19*/ bool m_checkOrder;

                                    /*0x3d80438*/ ValidityCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint outer, bool decompressed, bool checkOrder);
                                    /*0x3d80c7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                }
                            }

                            class ECPointBase : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint
                            {
                                /*0x3d80d98*/ ECPointBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d80e14*/ ECPointBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d80e98*/ byte[] GetEncoded(bool compressed);
                                /*0x3d81054*/ int GetEncodedLength(bool compressed);
                                /*0x3d810ec*/ void EncodeTo(bool compressed, System.Span<byte> buf);
                                /*0x3d812d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                            }

                            class AbstractFpPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointBase
                            {
                                /*0x3d813a4*/ AbstractFpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d813a8*/ AbstractFpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d813ac*/ bool get_CompressionYTilde();
                                /*0x3d813d8*/ bool SatisfiesCurveEquation();
                                /*0x3d81698*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                            }

                            class FpPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                            {
                                /*0x3d79418*/ FpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d798b0*/ FpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d816f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(int index);
                                /*0x3d81758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d822e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x3d82d68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d831c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                /*0x3d835a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TimesPow2(int e);
                                /*0x3d83d54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Two(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d83d74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Three(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d83da8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Four(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d83ddc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Eight(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d83e10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                /*0x3d83f0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement CalculateJacobianModifiedW(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Z, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement ZSquared);
                                /*0x3d84058*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetJacobianModifiedW();
                                /*0x3d840f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpPoint TwiceJacobianModified(bool calculateW);
                            }

                            class AbstractF2mPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointBase
                            {
                                /*0x3d84438*/ AbstractF2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d8443c*/ AbstractF2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d84440*/ bool SatisfiesCurveEquation();
                                /*0x3d84834*/ bool SatisfiesOrder();
                                /*0x3d84ae8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d84d5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleY(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d84e40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d84ea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint TauPow(int pow);
                            }

                            class F2mPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                            {
                                /*0x3d7a75c*/ F2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7afe4*/ F2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d8513c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                /*0x3d8523c*/ bool get_CompressionYTilde();
                                /*0x3d85304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d85f34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x3d867cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d86ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                            }

                            interface ECPointMap
                            {
                                /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Map(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                            }

                            struct LongArray
                            {
                                /*0x10*/ ulong[] m_data;

                                static /*0x3d7ec60*/ bool AreAliased(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray a, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray b);
                                static /*0x3d87168*/ int BitLength(ulong w);
                                static /*0x3d872ec*/ ulong ShiftUp(ulong[] x, int xOff, ulong[] z, int zOff, int count, int shift);
                                static /*0x3d8744c*/ ulong AddShiftedUp(ulong[] x, int xOff, ulong[] y, int yOff, int count, int shift);
                                static /*0x3d874ec*/ ulong AddShiftedDown(ulong[] x, int xOff, ulong[] y, int yOff, int count, int shift);
                                static /*0x3d87428*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, int count);
                                static /*0x3d87578*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff, int count);
                                static /*0x3d875a0*/ void AddBoth(ulong[] x, int xOff, ulong[] y1, int y1Off, ulong[] y2, int y2Off, int count);
                                static /*0x3d87638*/ void FlipWord(ulong[] buf, int off, int bit, ulong word);
                                static /*0x3d876b0*/ bool TestBit(ulong[] buf, int off, int n);
                                static /*0x3d876e8*/ void FlipBit(ulong[] buf, int off, int n);
                                static /*0x3d87728*/ void MultiplyWord(ulong a, ulong[] b, int bLen, ulong[] c, int cOff);
                                static /*0x3d877fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ReduceResult(ulong[] buf, int off, int len, int m, int[] ks);
                                static /*0x3d87838*/ int ReduceInPlace(ulong[] buf, int off, int len, int m, int[] ks);
                                static /*0x3d87c1c*/ void ReduceBitWise(ulong[] buf, int off, int BitLength, int m, int[] ks);
                                static /*0x3d87c8c*/ void ReduceBit(ulong[] buf, int off, int bit, int m, int[] ks);
                                static /*0x3d87b0c*/ void ReduceWordWise(ulong[] buf, int off, int len, int toBit, int m, int[] ks);
                                static /*0x3d87d24*/ void ReduceWord(ulong[] buf, int off, int bit, ulong word, int m, int[] ks);
                                static /*0x3d87a5c*/ void ReduceVectorWise(ulong[] buf, int off, int len, int words, int m, int[] ks);
                                static /*0x3d87dbc*/ void FlipVector(ulong[] x, int xOff, ulong[] y, int yOff, int yLen, int bits);
                                /*0x3d86f40*/ LongArray(int intLen);
                                /*0x3d86fa4*/ LongArray(ulong[] data);
                                /*0x3d86fac*/ LongArray(ulong[] data, int off, int len);
                                /*0x3d7ac14*/ LongArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt);
                                /*0x3d7b1c4*/ void CopyTo(ulong[] z, int zOff);
                                /*0x3d7daa0*/ bool IsOne();
                                /*0x3d7db18*/ bool IsZero();
                                /*0x3d87068*/ int GetUsedLength();
                                /*0x3d87084*/ int GetUsedLengthFrom(int from);
                                /*0x3d7da40*/ int Degree();
                                /*0x3d871cc*/ int DegreeFrom(int limit);
                                /*0x3d87230*/ ulong[] ResizedData(int newLen);
                                /*0x3d7dbbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3d7e1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray AddOne();
                                /*0x3d87384*/ void AddShiftedByBitsSafe(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int otherDegree, int bits);
                                /*0x3d7e098*/ void AddShiftedByWords(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int words);
                                /*0x3d7db7c*/ bool TestBitZero();
                                /*0x3d7e380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModMultiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int m, int[] ks);
                                /*0x3d7e8f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int m, int[] ks);
                                /*0x3d7ec74*/ void Reduce(int m, int[] ks);
                                /*0x3d7ee08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModSquare(int m, int[] ks);
                                /*0x3d7f184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModSquareN(int n, int m, int[] ks);
                                /*0x3d7f03c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Square(int m, int[] ks);
                                /*0x3d7f328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModInverse(int m, int[] ks);
                                /*0x3d7f908*/ bool Equals(object obj);
                                /*0x3d87e40*/ bool Equals(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other);
                                /*0x3d7fa10*/ int GetHashCode();
                                /*0x3d7e01c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Copy();
                                /*0x3d87f00*/ string ToString();
                            }

                            class ScaleXPointMap : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale;

                                /*0x3d880a8*/ ScaleXPointMap(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d880d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Map(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                            }

                            namespace Rfc8032
                            {
                                class Ed25519
                                {
                                    static /*0x0*/ int PrehashSize;
                                    static /*0x4*/ int PublicKeySize;
                                    static /*0x8*/ int SecretKeySize;
                                    static /*0xc*/ int SignatureSize;
                                    static /*0x10*/ byte[] Dom2Prefix;
                                    static /*0x18*/ uint[] P;
                                    static /*0x20*/ uint[] L;
                                    static /*0x28*/ int[] B_x;
                                    static /*0x30*/ int[] B_y;
                                    static /*0x38*/ int[] C_d;
                                    static /*0x40*/ int[] C_d2;
                                    static /*0x48*/ int[] C_d4;
                                    static /*0x50*/ object PrecompLock;
                                    static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp[] PrecompBaseWnaf;
                                    static /*0x60*/ int[] PrecompBaseComb;

                                    static /*0x3d8d4bc*/ Ed25519();
                                    static /*0x3d88104*/ bool CheckContextVar(byte[] ctx, byte phflag);
                                    static /*0x3d88124*/ int CheckPoint(int[] x, int[] y);
                                    static /*0x3d88c90*/ int CheckPoint(int[] x, int[] y, int[] z);
                                    static /*0x3d88e58*/ bool CheckPointVar(byte[] p);
                                    static /*0x3d89004*/ bool CheckScalarVar(byte[] s, uint[] n);
                                    static /*0x3d89104*/ byte[] Copy(byte[] buf, int off, int len);
                                    static /*0x3d89184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CreateDigest();
                                    static /*0x3d891d8*/ uint Decode24(byte[] bs, int off);
                                    static /*0x3d89230*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d892a4*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d88f34*/ void Decode32(byte[] bs, int bsOff, uint[] n, int nOff, int nLen);
                                    static /*0x3d892f0*/ void Decode32(System.ReadOnlySpan<byte> bs, System.Span<uint> n);
                                    static /*0x3d893f0*/ bool DecodePointVar(byte[] p, int pOff, bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine r);
                                    static /*0x3d89090*/ void DecodeScalar(byte[] k, int kOff, uint[] n);
                                    static /*0x3d89934*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x3d899e8*/ void Dom2(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest d, byte phflag, byte[] ctx);
                                    static /*0x3d89b9c*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x3d89c00*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x3d89c80*/ void Encode56(ulong n, byte[] bs, int off);
                                    static /*0x3d89cfc*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, byte[] r, int rOff);
                                    static /*0x3d89dcc*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, System.Span<byte> r);
                                    static /*0x3d8a11c*/ sbyte[] GetWnafVar(uint[] n, int width);
                                    static /*0x3d8a2bc*/ bool ImplVerify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte phflag, byte[] m, int mOff, int mLen);
                                    static /*0x3d8acb8*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d8a7a4*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine r);
                                    static /*0x3d8af60*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x3d8affc*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp r);
                                    static /*0x3d8b084*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ r);
                                    static /*0x3d8b120*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp r);
                                    static /*0x3d8b194*/ void InvertDoubleZs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended[] points);
                                    static /*0x3d8b578*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended q, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d8b7a0*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d8b8b8*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d8b9e8*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d8bb34*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x3d8bbdc*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x3d8bccc*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ r);
                                    static /*0x3d8bd98*/ void PointDouble(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d8bfc4*/ void PointLookup(int block, int index, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p);
                                    static /*0x3d8c168*/ void PointPrecompute(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended[] points, int count, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d8c2b4*/ void PointPrecomputeZ(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ[] points, int count, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d8c3ec*/ void PointSetNeutral(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p);
                                    static /*0x3d8c4a0*/ void Precompute();
                                    static /*0x3d8cd5c*/ void PruneScalar(System.ReadOnlySpan<byte> n, System.Span<byte> r);
                                    static /*0x3d8a818*/ byte[] ReduceScalar(byte[] n);
                                    static /*0x3d8ce44*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d8d170*/ void ScalarMultBaseYZ(System.ReadOnlySpan<byte> k, System.Span<int> y, System.Span<int> z);
                                    static /*0x3d8ad68*/ void ScalarMultStrausVar(uint[] nb, uint[] np, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d8d408*/ bool Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] m, int mOff, int mLen);

                                    struct PointAccum
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                        /*0x20*/ int[] z;
                                        /*0x28*/ int[] u;
                                        /*0x30*/ int[] v;
                                    }

                                    struct PointAffine
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                    }

                                    struct PointExtended
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                        /*0x20*/ int[] z;
                                        /*0x28*/ int[] t;
                                    }

                                    struct PointPrecomp
                                    {
                                        /*0x10*/ int[] ymx_h;
                                        /*0x18*/ int[] ypx_h;
                                        /*0x20*/ int[] xyd;
                                    }

                                    struct PointPrecompZ
                                    {
                                        /*0x10*/ int[] ymx_h;
                                        /*0x18*/ int[] ypx_h;
                                        /*0x20*/ int[] xyd;
                                        /*0x28*/ int[] z;
                                    }

                                    struct PointTemp
                                    {
                                        /*0x10*/ int[] r0;
                                        /*0x18*/ int[] r1;
                                    }
                                }

                                class Ed448
                                {
                                    static /*0x0*/ int PrehashSize;
                                    static /*0x4*/ int PublicKeySize;
                                    static /*0x8*/ int SecretKeySize;
                                    static /*0xc*/ int SignatureSize;
                                    static /*0x10*/ byte[] Dom4Prefix;
                                    static /*0x18*/ uint[] P;
                                    static /*0x20*/ uint[] L;
                                    static /*0x28*/ uint[] B_x;
                                    static /*0x30*/ uint[] B_y;
                                    static /*0x38*/ object PrecompLock;
                                    static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine[] PrecompBaseWnaf;
                                    static /*0x48*/ uint[] PrecompBaseComb;

                                    static /*0x3d9356c*/ Ed448();
                                    static /*0x3d8d7e8*/ bool CheckContextVar(byte[] ctx);
                                    static /*0x3d8d7fc*/ int CheckPoint(uint[] x, uint[] y);
                                    static /*0x3d8eb30*/ int CheckPoint(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d8efc4*/ bool CheckPointVar(byte[] p);
                                    static /*0x3d8f174*/ bool CheckScalarVar(byte[] s, uint[] n);
                                    static /*0x3d8f298*/ byte[] Copy(byte[] buf, int off, int len);
                                    static /*0x3d8f318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof CreateXof();
                                    static /*0x3d8f370*/ uint Decode16(byte[] bs, int off);
                                    static /*0x3d8f3b0*/ uint Decode24(byte[] bs, int off);
                                    static /*0x3d8f408*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d8f47c*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d8f0a4*/ void Decode32(byte[] bs, int bsOff, uint[] n, int nOff, int nLen);
                                    static /*0x3d8f4c8*/ void Decode32(System.ReadOnlySpan<byte> bs, System.Span<uint> n);
                                    static /*0x3d8f5c8*/ bool DecodePointVar(byte[] p, int pOff, bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d8f224*/ void DecodeScalar(byte[] k, int kOff, uint[] n);
                                    static /*0x3d8fb74*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x3d8fc28*/ void Dom4(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof d, byte phflag, byte[] ctx);
                                    static /*0x3d8fdc8*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x3d8fe2c*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x3d8feac*/ void Encode56(ulong n, byte[] bs, int off);
                                    static /*0x3d8ff28*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, byte[] r, int rOff);
                                    static /*0x3d9024c*/ sbyte[] GetWnafVar(uint[] n, int width);
                                    static /*0x3d903ec*/ bool ImplVerify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte phflag, byte[] m, int mOff, int mLen);
                                    static /*0x3d91364*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine r);
                                    static /*0x3d90884*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d913d8*/ void InvertZs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective[] points);
                                    static /*0x3d917a8*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d91ae4*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d91cc4*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d91ef0*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d9214c*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d921e8*/ void PointDouble(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d92344*/ void PointLookup(int block, int index, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p);
                                    static /*0x3d924c4*/ void PointPrecomputeVar(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective[] points, int count);
                                    static /*0x3d9260c*/ void PointSetNeutral(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p);
                                    static /*0x3d926b0*/ void Precompute();
                                    static /*0x3d92de8*/ void PruneScalar(System.ReadOnlySpan<byte> n, System.Span<byte> r);
                                    static /*0x3d9090c*/ byte[] ReduceScalar(byte[] n);
                                    static /*0x3d92ed8*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d9320c*/ void ScalarMultBaseXY(System.ReadOnlySpan<byte> k, System.Span<uint> x, System.Span<uint> y);
                                    static /*0x3d91190*/ void ScalarMultStrausVar(uint[] nb, uint[] np, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d934ac*/ bool Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte[] m, int mOff, int mLen);

                                    struct PointAffine
                                    {
                                        /*0x10*/ uint[] x;
                                        /*0x18*/ uint[] y;
                                    }

                                    struct PointProjective
                                    {
                                        /*0x10*/ uint[] x;
                                        /*0x18*/ uint[] y;
                                        /*0x20*/ uint[] z;
                                    }
                                }
                            }

                            namespace Rfc7748
                            {
                                class X25519
                                {
                                    static /*0x3d937b8*/ bool CalculateAgreement(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d93a14*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d93a60*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x3d93b54*/ void PointDouble(int[] x, int[] z);
                                    static /*0x3d9386c*/ void ScalarMult(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d93d9c*/ void ScalarMult(System.ReadOnlySpan<byte> k, System.ReadOnlySpan<byte> u, System.Span<byte> r);
                                    static /*0x3d942d4*/ void ScalarMultBase(byte[] k, int kOff, byte[] r, int rOff);
                                    static /*0x3d94400*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, System.Span<byte> r);
                                }

                                class X25519Field
                                {
                                    static /*0x0*/ uint[] P32;
                                    static /*0x8*/ int[] RootNegOne;

                                    static /*0x3d95634*/ X25519Field();
                                    static /*0x3d88de8*/ void Add(int[] x, int[] y, int[] z);
                                    static /*0x3d88b8c*/ void AddOne(int[] z);
                                    static /*0x3d8b714*/ void Apm(int[] x, int[] y, int[] zp, int[] zm);
                                    static /*0x3d8bebc*/ void Carry(int[] z);
                                    static /*0x3d8c0e8*/ void CMov(int cond, int[] x, int xOff, int[] z, int zOff);
                                    static /*0x3d8d124*/ void CNegate(int negate, int[] z);
                                    static /*0x3d8b418*/ void Copy(int[] x, int xOff, int[] z, int zOff);
                                    static /*0x3d8d34c*/ void Copy(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x3d88238*/ int[] Create();
                                    static /*0x3d8b3cc*/ int[] CreateTable(int n);
                                    static /*0x3d94264*/ void CSwap(int swap, int[] a, int[] b);
                                    static /*0x3d9456c*/ void Decode(System.ReadOnlySpan<uint> x, System.Span<int> z);
                                    static /*0x3d895d8*/ void Decode(byte[] x, int xOff, int[] z);
                                    static /*0x3d94118*/ void Decode(System.ReadOnlySpan<byte> x, System.Span<int> z);
                                    static /*0x3d946b8*/ void Decode128(System.ReadOnlySpan<uint> x, System.Span<int> z);
                                    static /*0x3d94744*/ void Decode128(byte[] bs, int off, int[] z, int zOff);
                                    static /*0x3d9487c*/ void Decode128(System.ReadOnlySpan<byte> bs, System.Span<int> z);
                                    static /*0x3d94a2c*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d94aa0*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d94aec*/ void Encode(System.ReadOnlySpan<int> x, System.Span<uint> z);
                                    static /*0x3d8a004*/ void Encode(System.ReadOnlySpan<int> x, System.Span<byte> z);
                                    static /*0x3d94c04*/ void Encode128(System.ReadOnlySpan<int> x, System.Span<uint> z);
                                    static /*0x3d94c8c*/ void Encode128(System.ReadOnlySpan<int> x, System.Span<byte> bs);
                                    static /*0x3d94e18*/ void Encode32(uint n, System.Span<byte> bs);
                                    static /*0x3d89f14*/ void Inv(int[] x, int[] z);
                                    static /*0x3d94e60*/ void Inv(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x3d8b488*/ void InvVar(int[] x, int[] z);
                                    static /*0x3d950ac*/ void InvVar(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x3d88c3c*/ int IsZero(int[] x);
                                    static /*0x3d8987c*/ bool IsZeroVar(int[] x);
                                    static /*0x3d93c3c*/ void Mul(int[] x, int y, int[] z);
                                    static /*0x3d885f0*/ void Mul(int[] x, int[] y, int[] z);
                                    static /*0x3d898dc*/ void Negate(int[] x, int[] z);
                                    static /*0x3d88bb8*/ void Normalize(int[] z);
                                    static /*0x3d95028*/ void Normalize(System.Span<int> z);
                                    static /*0x3d8bc78*/ void One(int[] z);
                                    static /*0x3d953c8*/ void PowPm5d8(int[] x, int[] rx2, int[] rz);
                                    static /*0x3d95274*/ void Reduce(int[] z, int x);
                                    static /*0x3d95324*/ void Reduce(System.Span<int> z, int x);
                                    static /*0x3d8827c*/ void Sqr(int[] x, int[] z);
                                    static /*0x3d95594*/ void Sqr(int[] x, int n, int[] z);
                                    static /*0x3d896b0*/ bool SqrtRatioVar(int[] u, int[] v, int[] z);
                                    static /*0x3d88b1c*/ void Sub(int[] x, int[] y, int[] z);
                                    static /*0x3d89684*/ void SubOne(int[] z);
                                    static /*0x3d8c464*/ void Zero(int[] z);
                                }

                                class X448
                                {
                                    static /*0x3d95734*/ bool CalculateAgreement(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d95990*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d959dc*/ void DecodeScalar(System.ReadOnlySpan<byte> k, uint[] n);
                                    static /*0x3d95adc*/ void PointDouble(uint[] x, uint[] z);
                                    static /*0x3d957e8*/ void ScalarMult(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d95bcc*/ void ScalarMult(System.ReadOnlySpan<byte> k, System.ReadOnlySpan<byte> u, System.Span<byte> r);
                                    static /*0x3d96778*/ void ScalarMultBase(byte[] k, int kOff, byte[] r, int rOff);
                                    static /*0x3d968a4*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, System.Span<byte> r);
                                }

                                class X448Field
                                {
                                    static /*0x0*/ uint[] P32;

                                    static /*0x3d97be4*/ X448Field();
                                    static /*0x3d8e794*/ void Add(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d8f92c*/ void AddOne(uint[] z);
                                    static /*0x3d91968*/ void Carry(uint[] z);
                                    static /*0x3d92444*/ void CMov(int cond, uint[] x, int xOff, uint[] z, int zOff);
                                    static /*0x3d93188*/ void CNegate(int negate, uint[] z);
                                    static /*0x3d91648*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                    static /*0x3d933f0*/ void Copy(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d8d8dc*/ uint[] Create();
                                    static /*0x3d91600*/ uint[] CreateTable(int n);
                                    static /*0x3d96324*/ void CSwap(int swap, uint[] a, uint[] b);
                                    static /*0x3d96a08*/ void Decode(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d8f7c8*/ void Decode(byte[] x, int xOff, uint[] z);
                                    static /*0x3d95f40*/ void Decode(System.ReadOnlySpan<byte> x, System.Span<uint> z);
                                    static /*0x3d96b20*/ void Decode224(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d96dc0*/ uint Decode24(byte[] bs, int off);
                                    static /*0x3d96e18*/ uint Decode24(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d96e54*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d96ec8*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d96c08*/ void Decode56(byte[] bs, int off, uint[] z, int zOff);
                                    static /*0x3d96ccc*/ void Decode56(System.ReadOnlySpan<byte> bs, System.Span<uint> z);
                                    static /*0x3d96f14*/ void Encode(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d90150*/ void Encode(uint[] x, byte[] z, int zOff);
                                    static /*0x3d96394*/ void Encode(System.ReadOnlySpan<uint> x, System.Span<byte> z);
                                    static /*0x3d9702c*/ void Encode224(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d97298*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x3d972fc*/ void Encode24(uint n, System.Span<byte> bs);
                                    static /*0x3d97334*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x3d973b4*/ void Encode32(uint n, System.Span<byte> bs);
                                    static /*0x3d9710c*/ void Encode56(uint[] x, int xOff, byte[] bs, int off);
                                    static /*0x3d971c0*/ void Encode56(System.ReadOnlySpan<uint> x, System.Span<byte> bs);
                                    static /*0x3d90060*/ void Inv(uint[] x, uint[] z);
                                    static /*0x3d973fc*/ void Inv(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d916b8*/ void InvVar(uint[] x, uint[] z);
                                    static /*0x3d97624*/ void InvVar(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d8eadc*/ int IsZero(uint[] x);
                                    static /*0x3d8fac0*/ bool IsZeroVar(uint[] x);
                                    static /*0x3d8e804*/ void Mul(uint[] x, uint y, uint[] z);
                                    static /*0x3d8deac*/ void Mul(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d8f8c4*/ void Negate(uint[] x, uint[] z);
                                    static /*0x3d8ea78*/ void Normalize(uint[] z);
                                    static /*0x3d975ac*/ void Normalize(System.Span<uint> z);
                                    static /*0x3d8fb20*/ void One(uint[] z);
                                    static /*0x3d9791c*/ void PowPm3d4(uint[] x, uint[] z);
                                    static /*0x3d977d4*/ void Reduce(uint[] z, int x);
                                    static /*0x3d97880*/ void Reduce(System.Span<uint> z, int x);
                                    static /*0x3d8d920*/ void Sqr(uint[] x, uint[] z);
                                    static /*0x3d97b44*/ void Sqr(uint[] x, int n, uint[] z);
                                    static /*0x3d8f958*/ bool SqrtRatioVar(uint[] u, uint[] v, uint[] z);
                                    static /*0x3d8ec54*/ void Sub(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d8e9fc*/ void SubOne(uint[] z);
                                    static /*0x3d92674*/ void Zero(uint[] z);
                                }
                            }

                            namespace Multiplier
                            {
                                class AbstractECMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier
                                {
                                    /*0x3d97d6c*/ AbstractECMultiplier();
                                    /*0x3d97c84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3814b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3d97d60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CheckResult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                }

                                interface ECMultiplier
                                {
                                    /*0x3814b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class FixedPointCombMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x3d98280*/ FixedPointCombMultiplier();
                                    /*0x3d97d74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class FixedPointPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_offset;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable m_lookupTable;
                                    /*0x20*/ int m_width;

                                    /*0x3d982b8*/ FixedPointPreCompInfo();
                                    /*0x3d98288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable get_LookupTable();
                                    /*0x3d98290*/ void set_LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable value);
                                    /*0x3d98298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Offset();
                                    /*0x3d982a0*/ void set_Offset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                    /*0x3d982a8*/ int get_Width();
                                    /*0x3d982b0*/ void set_Width(int value);
                                }

                                class FixedPointUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x3d982f8*/ FixedPointUtilities();
                                    static /*0x3d9810c*/ int GetCombSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                    static /*0x3d98158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);

                                    class FixedPointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_p;

                                        /*0x3d982c8*/ FixedPointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                        /*0x3d98364*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d987e0*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo existingFP, int n);
                                        /*0x3d98818*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable table, int n);
                                    }
                                }

                                class GlvMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism;

                                    /*0x3d988c8*/ GlvMultiplier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism);
                                    /*0x3d98984*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                interface IPreCompCallback
                                {
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                }

                                interface PreCompInfo
                                {
                                }

                                class ValidityPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    static /*0x0*/ string PRECOMP_NAME;
                                    /*0x10*/ bool failed;
                                    /*0x11*/ bool curveEquationPassed;
                                    /*0x12*/ bool orderPassed;

                                    static /*0x3d98d50*/ ValidityPreCompInfo();
                                    /*0x3d98d48*/ ValidityPreCompInfo();
                                    /*0x3d98d0c*/ bool HasFailed();
                                    /*0x3d98d14*/ void ReportFailed();
                                    /*0x3d98d20*/ bool HasCurveEquationPassed();
                                    /*0x3d98d28*/ void ReportCurveEquationPassed();
                                    /*0x3d98d34*/ bool HasOrderPassed();
                                    /*0x3d98d3c*/ void ReportOrderPassed();
                                }

                                class WNafL2RMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x3d99594*/ WNafL2RMultiplier();
                                    /*0x3d98dbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class WNafPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ int m_promotionCountdown;
                                    /*0x14*/ int m_confWidth;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] m_preComp;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] m_preCompNeg;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_twice;
                                    /*0x30*/ int m_width;

                                    /*0x3d9967c*/ WNafPreCompInfo();
                                    /*0x3d9959c*/ int DecrementPromotionCountdown();
                                    /*0x3d995d4*/ int get_PromotionCountdown();
                                    /*0x3d995ec*/ void set_PromotionCountdown(int value);
                                    /*0x3d99610*/ bool get_IsPromoted();
                                    /*0x3d9962c*/ int get_ConfWidth();
                                    /*0x3d99634*/ void set_ConfWidth(int value);
                                    /*0x3d9963c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] get_PreComp();
                                    /*0x3d99644*/ void set_PreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] value);
                                    /*0x3d9964c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] get_PreCompNeg();
                                    /*0x3d99654*/ void set_PreCompNeg(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] value);
                                    /*0x3d9965c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Twice();
                                    /*0x3d99664*/ void set_Twice(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                    /*0x3d9966c*/ int get_Width();
                                    /*0x3d99674*/ void set_Width(int value);
                                }

                                class WNafUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;
                                    static /*0x8*/ int[] DEFAULT_WINDOW_SIZE_CUTOFFS;
                                    static /*0x10*/ int MAX_WIDTH;
                                    static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS;

                                    static /*0x3d9a44c*/ WNafUtilities();
                                    static /*0x3d996ac*/ void ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                    static /*0x3d99870*/ int[] GenerateCompactNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d9928c*/ int[] GenerateCompactWindowNaf(int width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d99b64*/ byte[] GenerateNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d99cec*/ byte[] GenerateWindowNaf(int width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d9a03c*/ int GetNafWeight(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d990e4*/ int GetWindowSize(int bits);
                                    static /*0x3d9a168*/ int GetWindowSize(int bits, int maxWidth);
                                    static /*0x3d9a0a0*/ int GetWindowSize(int bits, int[] windowSizeCutoffs, int maxWidth);
                                    static /*0x3d99148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, int minWidth, bool includeNegated);
                                    static /*0x3d9a224*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo PrecomputeWithPointMap(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap pointMap, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, bool includeNegated);
                                    static /*0x3d99fb8*/ byte[] Trim(byte[] a, int length);
                                    static /*0x3d99ae0*/ int[] Trim(int[] a, int length);
                                    static /*0x3d9a3c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ResizeTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] a, int length);

                                    class ConfigureBasepointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                        /*0x18*/ int m_confWidth;

                                        /*0x3d99834*/ ConfigureBasepointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, int confWidth);
                                        /*0x3d9a568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                    }

                                    class PrecomputeCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_p;
                                        /*0x18*/ int m_minWidth;
                                        /*0x1c*/ bool m_includeNegated;

                                        /*0x3d9a1d8*/ PrecomputeCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, int minWidth, bool includeNegated);
                                        /*0x3d9a710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d9af30*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo existingWNaf, int width, int reqPreCompLen, bool includeNegated);
                                        /*0x3d9b038*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] table, int reqLen);
                                    }

                                    class PrecomputeWithPointMapCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_point;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap m_pointMap;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo m_fromWNaf;
                                        /*0x28*/ bool m_includeNegated;

                                        /*0x3d9a35c*/ PrecomputeWithPointMapCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap pointMap, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, bool includeNegated);
                                        /*0x3d9b054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d9b46c*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo existingWNaf, int width, int reqPreCompLen, bool includeNegated);
                                        /*0x3d9b508*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] table, int reqLen);
                                    }
                                }

                                class WTauNafMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x3d9bd10*/ WTauNafMultiplier();
                                    static /*0x3d9b860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyFromWTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte[] u);
                                    /*0x3d9bd08*/ WTauNafMultiplier();
                                    /*0x3d9b524*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3d9b714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyWTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda, sbyte a, sbyte mu);

                                    class WTauNafCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint m_p;
                                        /*0x18*/ sbyte m_a;

                                        /*0x3d9bccc*/ WTauNafCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte a);
                                        /*0x3d9bd7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                    }
                                }

                                class WTauNafPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] m_preComp;

                                    /*0x3d9be64*/ WTauNafPreCompInfo();
                                    /*0x3d9be6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] get_PreComp();
                                    /*0x3d9be74*/ void set_PreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] value);
                                }
                            }

                            namespace Endo
                            {
                                interface ECEndomorphism
                                {
                                    /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap get_PointMap();
                                    /*0x3813ffc*/ bool get_HasEfficientPointMap();
                                }

                                class EndoPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_mappedPoint;

                                    /*0x3d9be9c*/ EndoPreCompInfo();
                                    /*0x3d9be7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism get_Endomorphism();
                                    /*0x3d9be84*/ void set_Endomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism value);
                                    /*0x3d9be8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_MappedPoint();
                                    /*0x3d9be94*/ void set_MappedPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                }

                                class EndoUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x3d9c1fc*/ EndoUtilities();
                                    static /*0x3d9bea4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d98be8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MapPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                    static /*0x3d9c0b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateB(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int t);

                                    class MapPointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_point;

                                        /*0x3d9c1b8*/ MapPointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                        /*0x3d9c268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d9c460*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo existingEndo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism);
                                    }
                                }

                                interface GlvEndomorphism : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
                                {
                                    /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class GlvTypeBEndomorphism : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters m_parameters;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap m_pointMap;

                                    /*0x3d9c4b8*/ GlvTypeBEndomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters parameters);
                                    /*0x3d9c580*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3d9c5fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap get_PointMap();
                                    /*0x3d9c604*/ bool get_HasEfficientPointMap();
                                }

                                class GlvTypeBParameters
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_beta;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_lambda;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters m_splitParams;

                                    /*0x3d9c60c*/ GlvTypeBParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger beta, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger lambda, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters splitParams);
                                    /*0x3d9c66c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Beta();
                                    /*0x3d9c674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters get_SplitParams();
                                }

                                class ScalarSplitParameters
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v1A;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v1B;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v2A;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v2B;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g1;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g2;
                                    /*0x40*/ int m_bits;

                                    static /*0x3d9c67c*/ void CheckVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v, string name);
                                    /*0x3d9c700*/ ScalarSplitParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v2, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g2, int bits);
                                    /*0x3d9c840*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V1A();
                                    /*0x3d9c848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V1B();
                                    /*0x3d9c850*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V2A();
                                    /*0x3d9c858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V2B();
                                    /*0x3d9c860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G1();
                                    /*0x3d9c868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G2();
                                    /*0x3d9c870*/ int get_Bits();
                                }
                            }

                            namespace Custom
                            {
                                namespace Sec
                                {
                                    class SecP128R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP128R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Point m_infinity;

                                        static /*0x3d9d148*/ SecP128R1Curve();
                                        /*0x3d9c878*/ SecP128R1Curve();
                                        /*0x3d9cad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d9cb20*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d9cb2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d9cb34*/ int get_FieldSize();
                                        /*0x3d9cb98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d9cd0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9cd80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d9ce0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d9d004*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP128R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d9cfac*/ SecP128R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Curve outer, uint[] table, int size);
                                            /*0x3d9d298*/ int get_Size();
                                            /*0x3d9d2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d9d4ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d9d3b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP128R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3d9e1f8*/ SecP128R1Field();
                                        static /*0x3d9d570*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9d6cc*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3d9d798*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3d9d868*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3d9d94c*/ int IsZero(uint[] x);
                                        static /*0x3d9d9a0*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9db40*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3d9dc34*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3d9dccc*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d9d0ac*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d9da28*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3d9dda4*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3d9ded0*/ void Square(uint[] x, uint[] z);
                                        static /*0x3d9df50*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3d9e01c*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9e128*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3d9d64c*/ void AddPInvTo(uint[] z);
                                        static /*0x3d9e0a8*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP128R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3d9ee54*/ SecP128R1FieldElement();
                                        /*0x3d9cbf0*/ SecP128R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d9d118*/ SecP128R1FieldElement(uint[] x);
                                        /*0x3d9e328*/ bool get_IsZero();
                                        /*0x3d9e334*/ bool get_IsOne();
                                        /*0x3d9e340*/ bool TestBitZero();
                                        /*0x3d9e364*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3d9e370*/ int get_FieldSize();
                                        /*0x3d9e3d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9e4cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3d9e578*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9e670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9e768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9e868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3d9e914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3d9e9c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3d9ea6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3d9ec58*/ bool Equals(object obj);
                                        /*0x3d9ece4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3d9ed70*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1FieldElement other);
                                        /*0x3d9ed9c*/ int GetHashCode();
                                    }

                                    class SecP128R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d9cac8*/ SecP128R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9ce04*/ SecP128R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d9ef24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d9f5dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3d9faa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d9fb74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3d9fbe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Point m_infinity;

                                        static /*0x3da04f4*/ SecP160K1Curve();
                                        /*0x3d9fca4*/ SecP160K1Curve();
                                        /*0x3d9fe78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d9fec8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d9fed4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d9fedc*/ int get_FieldSize();
                                        /*0x3d9ff40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da00b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da0128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da01b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da03b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da0358*/ SecP160K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Curve outer, uint[] table, int size);
                                            /*0x3da0644*/ int get_Size();
                                            /*0x3da064c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da0848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da0754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d9fe70*/ SecP160K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da01ac*/ SecP160K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da0910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da148c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3da19a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da1a70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3da1ae0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Point m_infinity;

                                        static /*0x3da2474*/ SecP160R1Curve();
                                        /*0x3da1ba0*/ SecP160R1Curve();
                                        /*0x3da1df8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3da1e48*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3da1e54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3da1e5c*/ int get_FieldSize();
                                        /*0x3da1ec0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da2034*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da20a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da2134*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da2330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da22d8*/ SecP160R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Curve outer, uint[] table, int size);
                                            /*0x3da25c4*/ int get_Size();
                                            /*0x3da25cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da27c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da26d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3da33ac*/ SecP160R1Field();
                                        static /*0x3da2890*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da2968*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3da2a30*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3da2b00*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3da2be4*/ int IsZero(uint[] x);
                                        static /*0x3da2c38*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da2df0*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3da2f20*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3da2fb8*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da23d8*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da2cc0*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3da3090*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3da3160*/ void Square(uint[] x, uint[] z);
                                        static /*0x3da31e0*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3da32ac*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da32e0*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP160R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3da4014*/ SecP160R1FieldElement();
                                        /*0x3da1f18*/ SecP160R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da2444*/ SecP160R1FieldElement(uint[] x);
                                        /*0x3da34dc*/ bool get_IsZero();
                                        /*0x3da34e8*/ bool get_IsOne();
                                        /*0x3da34f4*/ bool TestBitZero();
                                        /*0x3da3518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3da3524*/ int get_FieldSize();
                                        /*0x3da3588*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da3680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3da372c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da3824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da391c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da3a1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3da3ac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3da3b74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3da3c20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3da3e18*/ bool Equals(object obj);
                                        /*0x3da3ea4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3da3f30*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1FieldElement other);
                                        /*0x3da3f5c*/ int GetHashCode();
                                    }

                                    class SecP160R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3da1df0*/ SecP160R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da212c*/ SecP160R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da40e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da479c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3da4c68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da4d34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3da4da4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160R2_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Point m_infinity;

                                        static /*0x3da5580*/ SecP160R2Curve();
                                        /*0x3da4e64*/ SecP160R2Curve();
                                        /*0x3da50bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3da510c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3da5118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3da5120*/ int get_FieldSize();
                                        /*0x3da5184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da51dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da5250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da52dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da54d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da5480*/ SecP160R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Curve outer, uint[] table, int size);
                                            /*0x3da56d0*/ int get_Size();
                                            /*0x3da56d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da58d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da57e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160R2Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3da5ee8*/ SecP160R2Field();
                                        static /*0x3da599c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da5a74*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3da5b3c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3da5c0c*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3da5cf0*/ int IsZero(uint[] x);
                                        static /*0x3da1048*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da126c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3da1104*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3da5d44*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da0458*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da139c*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3da119c*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3da0fc8*/ void Square(uint[] x, uint[] z);
                                        static /*0x3da5e1c*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3da10d0*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da18d8*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP160R2FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3da6c50*/ SecP160R2FieldElement();
                                        /*0x3d9ff98*/ SecP160R2FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da04c4*/ SecP160R2FieldElement(uint[] x);
                                        /*0x3da6018*/ bool get_IsZero();
                                        /*0x3da6024*/ bool get_IsOne();
                                        /*0x3da6030*/ bool TestBitZero();
                                        /*0x3da6054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3da6060*/ int get_FieldSize();
                                        /*0x3da60c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da61bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3da6268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da6360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da6458*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da6558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3da6604*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3da66b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3da675c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3da6a54*/ bool Equals(object obj);
                                        /*0x3da6ae0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3da6b6c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2FieldElement other);
                                        /*0x3da6b98*/ int GetHashCode();
                                    }

                                    class SecP160R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3da50b4*/ SecP160R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da52d4*/ SecP160R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da6d20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da73d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3da78a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da7970*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3da79e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP192K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP192K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Point m_infinity;

                                        static /*0x3da82f0*/ SecP192K1Curve();
                                        /*0x3da7aa0*/ SecP192K1Curve();
                                        /*0x3da7c74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3da7cc4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3da7cd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3da7cd8*/ int get_FieldSize();
                                        /*0x3da7d3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da7eb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da7f24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da7fb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da81ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP192K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da8154*/ SecP192K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Curve outer, uint[] table, int size);
                                            /*0x3da8440*/ int get_Size();
                                            /*0x3da8448*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da8644*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da8550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP192K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3da91e8*/ SecP192K1Field();
                                        static /*0x3da870c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da87e4*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3da88ac*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3da897c*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3da8a60*/ int IsZero(uint[] x);
                                        static /*0x3da8ab4*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da8c2c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3da8d5c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3da8df4*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da8254*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da8b3c*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3da8ecc*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3da8f9c*/ void Square(uint[] x, uint[] z);
                                        static /*0x3da901c*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3da90e8*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da911c*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP192K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3da9f0c*/ SecP192K1FieldElement();
                                        /*0x3da7d94*/ SecP192K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da82c0*/ SecP192K1FieldElement(uint[] x);
                                        /*0x3da9318*/ bool get_IsZero();
                                        /*0x3da9324*/ bool get_IsOne();
                                        /*0x3da9330*/ bool TestBitZero();
                                        /*0x3da9354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3da9360*/ int get_FieldSize();
                                        /*0x3da93c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da94bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3da9568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da9660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da9758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da9858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3da9904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3da99b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3da9a5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3da9d10*/ bool Equals(object obj);
                                        /*0x3da9d9c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3da9e28*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1FieldElement other);
                                        /*0x3da9e54*/ int GetHashCode();
                                    }

                                    class SecP192K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3da7c6c*/ SecP192K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da7fa8*/ SecP192K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da9fdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3daa694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3daaae0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3daabac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3daac1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP192R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP192R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Point m_infinity;

                                        static /*0x3dab5b0*/ SecP192R1Curve();
                                        /*0x3daacdc*/ SecP192R1Curve();
                                        /*0x3daaf34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3daaf84*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3daaf90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3daaf98*/ int get_FieldSize();
                                        /*0x3daaffc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dab170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dab1e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dab270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3dab46c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP192R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dab414*/ SecP192R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Curve outer, uint[] table, int size);
                                            /*0x3dab700*/ int get_Size();
                                            /*0x3dab708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dab904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dab810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP192R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3dac770*/ SecP192R1Field();
                                        static /*0x3dab9cc*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dabb34*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3dabc00*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dabcd0*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3dabdb4*/ int IsZero(uint[] x);
                                        static /*0x3dabe08*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dac064*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3dac194*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3dac22c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dab514*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dabe90*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3dac304*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3dac43c*/ void Square(uint[] x, uint[] z);
                                        static /*0x3dac4bc*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3dac588*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dac6a0*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3dabaa8*/ void AddPInvTo(uint[] z);
                                        static /*0x3dac614*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP192R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3dad3bc*/ SecP192R1FieldElement();
                                        /*0x3dab054*/ SecP192R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dab580*/ SecP192R1FieldElement(uint[] x);
                                        /*0x3dac8a0*/ bool get_IsZero();
                                        /*0x3dac8ac*/ bool get_IsOne();
                                        /*0x3dac8b8*/ bool TestBitZero();
                                        /*0x3dac8dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dac8e8*/ int get_FieldSize();
                                        /*0x3dac94c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3daca44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dacaf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dacbe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dacce0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dacde0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dace8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dacf38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dacfe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dad1c0*/ bool Equals(object obj);
                                        /*0x3dad24c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dad2d8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1FieldElement other);
                                        /*0x3dad304*/ int GetHashCode();
                                    }

                                    class SecP192R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3daaf2c*/ SecP192R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dab268*/ SecP192R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dad48c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dadb44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dae010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dae0dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3dae14c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP224K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP224K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Point m_infinity;

                                        static /*0x3daea4c*/ SecP224K1Curve();
                                        /*0x3dae20c*/ SecP224K1Curve();
                                        /*0x3dae3d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dae428*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dae434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dae43c*/ int get_FieldSize();
                                        /*0x3dae4a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dae614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dae688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dae70c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3dae908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP224K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dae8b0*/ SecP224K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Curve outer, uint[] table, int size);
                                            /*0x3daeb9c*/ int get_Size();
                                            /*0x3daeba4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3daeda0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3daecac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP224K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3daf944*/ SecP224K1Field();
                                        static /*0x3daee68*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3daef40*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3daf008*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3daf0d8*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3daf1bc*/ int IsZero(uint[] x);
                                        static /*0x3daf210*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3daf388*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3daf4b8*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3daf550*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dae9b0*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3daf298*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3daf628*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3daf6f8*/ void Square(uint[] x, uint[] z);
                                        static /*0x3daf778*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3daf844*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3daf878*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP224K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        static /*0x8*/ uint[] PRECOMP_POW2;
                                        /*0x10*/ uint[] x;

                                        static /*0x3db0720*/ SecP224K1FieldElement();
                                        /*0x3dae4f8*/ SecP224K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3daea1c*/ SecP224K1FieldElement(uint[] x);
                                        /*0x3dafa74*/ bool get_IsZero();
                                        /*0x3dafa80*/ bool get_IsOne();
                                        /*0x3dafa8c*/ bool TestBitZero();
                                        /*0x3dafab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dafabc*/ int get_FieldSize();
                                        /*0x3dafb20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dafc18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dafcc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dafdbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dafeb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3daffb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3db0060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3db010c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3db01b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3db0524*/ bool Equals(object obj);
                                        /*0x3db05b0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3db063c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1FieldElement other);
                                        /*0x3db0668*/ int GetHashCode();
                                    }

                                    class SecP224K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3db0850*/ SecP224K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db0858*/ SecP224K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db0860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db0f54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3db13b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db147c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3db14ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP224R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP224R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Point m_infinity;

                                        static /*0x3db1e80*/ SecP224R1Curve();
                                        /*0x3db15ac*/ SecP224R1Curve();
                                        /*0x3db1804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3db1854*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3db1860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3db1868*/ int get_FieldSize();
                                        /*0x3db18cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db1a40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db1ab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db1b40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3db1d3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP224R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3db1ce4*/ SecP224R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Curve outer, uint[] table, int size);
                                            /*0x3db1fd0*/ int get_Size();
                                            /*0x3db1fd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3db21d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3db20e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP224R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3db30a0*/ SecP224R1Field();
                                        static /*0x3db229c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db2418*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3db24e4*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3db25b4*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3db2698*/ int IsZero(uint[] x);
                                        static /*0x3db26ec*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db296c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3db2a9c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3db2b34*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db1de4*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db2774*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3db2c0c*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3db2d58*/ void Square(uint[] x, uint[] z);
                                        static /*0x3db2dd8*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3db2ea4*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db2fd0*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3db2378*/ void AddPInvTo(uint[] z);
                                        static /*0x3db2f30*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP224R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3db4284*/ SecP224R1FieldElement();
                                        static /*0x3db3adc*/ bool IsSquare(uint[] x);
                                        static /*0x3db3f78*/ void RM(uint[] nc, uint[] d0, uint[] e0, uint[] d1, uint[] e1, uint[] f1, uint[] t);
                                        static /*0x3db4090*/ void RP(uint[] nc, uint[] d1, uint[] e1, uint[] f1, uint[] t);
                                        static /*0x3db41b4*/ void RS(uint[] d, uint[] e, uint[] f, uint[] t);
                                        static /*0x3db3bc8*/ bool TrySqrt(uint[] nc, uint[] r, uint[] t);
                                        /*0x3db1924*/ SecP224R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db1e50*/ SecP224R1FieldElement(uint[] x);
                                        /*0x3db31d0*/ bool get_IsZero();
                                        /*0x3db31dc*/ bool get_IsOne();
                                        /*0x3db31e8*/ bool TestBitZero();
                                        /*0x3db320c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3db3218*/ int get_FieldSize();
                                        /*0x3db327c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db3374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3db3420*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db3518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db3610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db3710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3db37bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3db3868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3db3914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3db3d7c*/ bool Equals(object obj);
                                        /*0x3db3e08*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3db3e94*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1FieldElement other);
                                        /*0x3db3ec0*/ int GetHashCode();
                                    }

                                    class SecP224R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3db17fc*/ SecP224R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db1b38*/ SecP224R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db4354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db4a0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3db4ed8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db4fa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3db5014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP256K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP256K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Point m_infinity;

                                        static /*0x3db5920*/ SecP256K1Curve();
                                        /*0x3db50d4*/ SecP256K1Curve();
                                        /*0x3db52a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3db52f8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3db5304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3db530c*/ int get_FieldSize();
                                        /*0x3db5370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db54e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db5558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db55e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3db57dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP256K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3db5784*/ SecP256K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Curve outer, uint[] table, int size);
                                            /*0x3db5a70*/ int get_Size();
                                            /*0x3db5a78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3db5c84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3db5b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP256K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3db6924*/ SecP256K1Field();
                                        static /*0x3db5d48*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db5e20*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3db5ee8*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3db5fb8*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3db609c*/ int IsZero(uint[] x);
                                        static /*0x3db60f0*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db6268*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3db62f0*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3db6420*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3db64b8*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db5884*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db6178*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3db6590*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3db6660*/ void Square(uint[] x, uint[] z);
                                        static /*0x3db66e0*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3db6758*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3db6824*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db6858*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP256K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3db76f0*/ SecP256K1FieldElement();
                                        /*0x3db53c8*/ SecP256K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db58f0*/ SecP256K1FieldElement(uint[] x);
                                        /*0x3db6a54*/ bool get_IsZero();
                                        /*0x3db6a60*/ bool get_IsOne();
                                        /*0x3db6a6c*/ bool TestBitZero();
                                        /*0x3db6a90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3db6a9c*/ int get_FieldSize();
                                        /*0x3db6b00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db6bf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3db6ca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db6d9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db6e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db6f94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3db7040*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3db70ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3db7198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3db74f4*/ bool Equals(object obj);
                                        /*0x3db7580*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3db760c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1FieldElement other);
                                        /*0x3db7638*/ int GetHashCode();
                                    }

                                    class SecP256K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3db52a0*/ SecP256K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db55dc*/ SecP256K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db77c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db7ec4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3db834c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db8418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3db8488*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP256R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP256R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Point m_infinity;

                                        static /*0x3db8e18*/ SecP256R1Curve();
                                        /*0x3db8548*/ SecP256R1Curve();
                                        /*0x3db87a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3db87f0*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3db87fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3db8804*/ int get_FieldSize();
                                        /*0x3db8868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db89dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db8a50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db8adc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3db8cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP256R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3db8c7c*/ SecP256R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Curve outer, uint[] table, int size);
                                            /*0x3db8f68*/ int get_Size();
                                            /*0x3db8f70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3db917c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3db9088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP256R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;

                                        static /*0x3dba1e4*/ SecP256R1Field();
                                        static /*0x3db9240*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db940c*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3db94d8*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3db95a8*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3db968c*/ int IsZero(uint[] x);
                                        static /*0x3db96e0*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db9950*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3db99d8*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3db9acc*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3db9b64*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db8d7c*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db9768*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3db9c3c*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3db9dd4*/ void Square(uint[] x, uint[] z);
                                        static /*0x3db9e54*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3db9ecc*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3db9f98*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dba114*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3db931c*/ void AddPInvTo(uint[] z);
                                        static /*0x3dba024*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP256R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3dbae3c*/ SecP256R1FieldElement();
                                        /*0x3db88c0*/ SecP256R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db8de8*/ SecP256R1FieldElement(uint[] x);
                                        /*0x3dba2c8*/ bool get_IsZero();
                                        /*0x3dba2d4*/ bool get_IsOne();
                                        /*0x3dba2e0*/ bool TestBitZero();
                                        /*0x3dba304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dba310*/ int get_FieldSize();
                                        /*0x3dba374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dba46c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dba518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dba610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dba708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dba808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dba8b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dba960*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dbaa0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dbac40*/ bool Equals(object obj);
                                        /*0x3dbaccc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dbad58*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1FieldElement other);
                                        /*0x3dbad84*/ int GetHashCode();
                                    }

                                    class SecP256R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3db8798*/ SecP256R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db8ad4*/ SecP256R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbaf0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbb610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dbbb08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbbbd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3dbbc44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP384R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP384R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Point m_infinity;

                                        static /*0x3dbc5e4*/ SecP384R1Curve();
                                        /*0x3dbbd04*/ SecP384R1Curve();
                                        /*0x3dbbf5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dbbfac*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dbbfb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dbbfc0*/ int get_FieldSize();
                                        /*0x3dbc024*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dbc198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbc20c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbc298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3dbc49c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP384R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dbc444*/ SecP384R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Curve outer, uint[] table, int size);
                                            /*0x3dbc734*/ int get_Size();
                                            /*0x3dbc73c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dbc940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dbc84c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP384R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3dbda24*/ SecP384R1Field();
                                        static /*0x3dbca10*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dbcbb0*/ void AddExt(uint[] xx, uint[] yy, uint[] zz);
                                        static /*0x3dbcce4*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3dbcdb4*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dbce8c*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3dbcf70*/ int IsZero(uint[] x);
                                        static /*0x3dbcfc4*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dbd2d4*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3dbd35c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3dbd3f8*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dbc548*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dbd050*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3dbd4d0*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3dbd63c*/ void Square(uint[] x, uint[] z);
                                        static /*0x3dbd6c0*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3dbd738*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3dbd804*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dbd950*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3dbcaf4*/ void AddPInvTo(uint[] z);
                                        static /*0x3dbd894*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP384R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3dbe824*/ SecP384R1FieldElement();
                                        /*0x3dbc07c*/ SecP384R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dbc5b4*/ SecP384R1FieldElement(uint[] x);
                                        /*0x3dbdb54*/ bool get_IsZero();
                                        /*0x3dbdb64*/ bool get_IsOne();
                                        /*0x3dbdb74*/ bool TestBitZero();
                                        /*0x3dbdb98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dbdba8*/ int get_FieldSize();
                                        /*0x3dbdc0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbdd08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dbddb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbdeb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbdfb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbe0b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dbe164*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dbe214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dbe2c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dbe620*/ bool Equals(object obj);
                                        /*0x3dbe6ac*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dbe738*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1FieldElement other);
                                        /*0x3dbe76c*/ int GetHashCode();
                                    }

                                    class SecP384R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3dbbf54*/ SecP384R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbc290*/ SecP384R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbe8f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbf048*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dbf558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbf624*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3dbf694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP521R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP521R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Point m_infinity;

                                        static /*0x3dc0034*/ SecP521R1Curve();
                                        /*0x3dbf754*/ SecP521R1Curve();
                                        /*0x3dbf9ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dbf9fc*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dbfa08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dbfa10*/ int get_FieldSize();
                                        /*0x3dbfa74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dbfbe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbfc5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbfce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3dbfeec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP521R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dbfe94*/ SecP521R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Curve outer, uint[] table, int size);
                                            /*0x3dc0184*/ int get_Size();
                                            /*0x3dc018c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dc0390*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc029c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP521R1Field
                                    {
                                        static /*0x0*/ uint[] P;

                                        static /*0x3dc10a0*/ SecP521R1Field();
                                        static /*0x3dc0460*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dc0570*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3dc0658*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dc06f4*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3dc07d8*/ int IsZero(uint[] x);
                                        static /*0x3dc082c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dc0a68*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3dc0aec*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3dc0b88*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dbff98*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dc0954*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3dc0c80*/ void Reduce23(uint[] z);
                                        static /*0x3dc0d64*/ void Square(uint[] x, uint[] z);
                                        static /*0x3dc0e60*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3dc0ed4*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3dc0f98*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dc1038*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3dc08b8*/ void ImplMultiply(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3dc0de8*/ void ImplSquare(uint[] x, uint[] zz);
                                    }

                                    class SecP521R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3dc1be8*/ SecP521R1FieldElement();
                                        /*0x3dbfacc*/ SecP521R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc0004*/ SecP521R1FieldElement(uint[] x);
                                        /*0x3dc1140*/ bool get_IsZero();
                                        /*0x3dc1150*/ bool get_IsOne();
                                        /*0x3dc1160*/ bool TestBitZero();
                                        /*0x3dc1184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dc1194*/ int get_FieldSize();
                                        /*0x3dc11f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc12f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dc13a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc14a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc159c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc16a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dc1750*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dc1800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dc18b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dc19e4*/ bool Equals(object obj);
                                        /*0x3dc1a70*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dc1afc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1FieldElement other);
                                        /*0x3dc1b30*/ int GetHashCode();
                                    }

                                    class SecP521R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3dbf9a4*/ SecP521R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbfce0*/ SecP521R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc1cb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc23f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc2904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc29d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3dc2a40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT113Field
                                    {
                                        static /*0x3dc2b00*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc2b78*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dc2c50*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dc2ca4*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dc2d04*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dc2d14*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dc2e6c*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dc3030*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc32e0*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc2dd8*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dc335c*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dc2fe4*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dc33dc*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dc30a8*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dc342c*/ uint Trace(ulong[] x);
                                        static /*0x3dc3144*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc3454*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dc2dc0*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT113FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dc359c*/ SecT113FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc3658*/ SecT113FieldElement(ulong[] x);
                                        /*0x3dc3688*/ bool get_IsOne();
                                        /*0x3dc3694*/ bool get_IsZero();
                                        /*0x3dc36a0*/ bool TestBitZero();
                                        /*0x3dc36cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dc36d8*/ int get_FieldSize();
                                        /*0x3dc36e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc37ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dc3830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc383c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc3908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc3918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc3a84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc3ac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dc3ac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dc3b4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc3c78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dc3d14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dc3d98*/ bool get_HasFastTrace();
                                        /*0x3dc3da0*/ int Trace();
                                        /*0x3dc3da8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dc3e2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dc3eb0*/ bool Equals(object obj);
                                        /*0x3dc3f3c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dc3fc8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113FieldElement other);
                                        /*0x3dc3ff4*/ int GetHashCode();
                                    }

                                    class SecT113R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT113R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Point m_infinity;

                                        static /*0x3dc465c*/ SecT113R1Curve();
                                        /*0x3dc4068*/ SecT113R1Curve();
                                        /*0x3dc4298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dc42e8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dc42f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dc42fc*/ int get_FieldSize();
                                        /*0x3dc4304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc435c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc43d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc445c*/ bool get_IsKoblitz();
                                        /*0x3dc4464*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT113R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dc4604*/ SecT113R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Curve outer, ulong[] table, int size);
                                            /*0x3dc4780*/ int get_Size();
                                            /*0x3dc4788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dc4998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc48a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT113R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc4290*/ SecT113R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc4454*/ SecT113R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc4a70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dc4b40*/ bool get_CompressionYTilde();
                                        /*0x3dc4bbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc52e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc5648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc5b54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT113R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT113R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Point m_infinity;

                                        static /*0x3dc62a8*/ SecT113R2Curve();
                                        /*0x3dc5cb4*/ SecT113R2Curve();
                                        /*0x3dc5ee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dc5f34*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dc5f40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dc5f48*/ int get_FieldSize();
                                        /*0x3dc5f50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc5fa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc601c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc60a8*/ bool get_IsKoblitz();
                                        /*0x3dc60b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT113R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dc6250*/ SecT113R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Curve outer, ulong[] table, int size);
                                            /*0x3dc63cc*/ int get_Size();
                                            /*0x3dc63d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dc65e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc64f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT113R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc5edc*/ SecT113R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc60a0*/ SecT113R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc66bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dc678c*/ bool get_CompressionYTilde();
                                        /*0x3dc6808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc6f34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc7294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc77a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT131Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3dc897c*/ SecT131Field();
                                        static /*0x3dc7900*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc79a8*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dc7ab0*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dc7b20*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dc7ba4*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dc7bb4*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dc7dcc*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dc800c*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc84c4*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc7cec*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dc8570*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dc7f88*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dc8690*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dc80b4*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dc8718*/ uint Trace(ulong[] x);
                                        static /*0x3dc8760*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dc8180*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc87e8*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dc7c7c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT131FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dc8a1c*/ SecT131FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc8b14*/ SecT131FieldElement(ulong[] x);
                                        /*0x3dc8b44*/ bool get_IsOne();
                                        /*0x3dc8b50*/ bool get_IsZero();
                                        /*0x3dc8b5c*/ bool TestBitZero();
                                        /*0x3dc8b88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dc8b94*/ int get_FieldSize();
                                        /*0x3dc8b9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc8c94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dc8d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc8d4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc8e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc8e54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc8fec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc902c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dc9030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dc90dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc9234*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dc92f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dc93a4*/ bool get_HasFastTrace();
                                        /*0x3dc93ac*/ int Trace();
                                        /*0x3dc9404*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dc94b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dc955c*/ bool Equals(object obj);
                                        /*0x3dc95e8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dc9674*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131FieldElement other);
                                        /*0x3dc96a0*/ int GetHashCode();
                                    }

                                    class SecT131R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT131R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Point m_infinity;

                                        static /*0x3dc9d0c*/ SecT131R1Curve();
                                        /*0x3dc9714*/ SecT131R1Curve();
                                        /*0x3dc9944*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dc9994*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dc99a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dc99a8*/ int get_FieldSize();
                                        /*0x3dc99b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc9a08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc9a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc9b08*/ bool get_IsKoblitz();
                                        /*0x3dc9b10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT131R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dc9cb4*/ SecT131R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Curve outer, ulong[] table, int size);
                                            /*0x3dc9e30*/ int get_Size();
                                            /*0x3dc9e38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dca034*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc9f40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT131R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc993c*/ SecT131R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc9b00*/ SecT131R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dca100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dca1d0*/ bool get_CompressionYTilde();
                                        /*0x3dca24c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dca978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dcacd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcb1e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT131R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT131R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Point m_infinity;

                                        static /*0x3dcb93c*/ SecT131R2Curve();
                                        /*0x3dcb344*/ SecT131R2Curve();
                                        /*0x3dcb574*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dcb5c4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dcb5d0*/ int get_FieldSize();
                                        /*0x3dcb5d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dcb630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcb6a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcb730*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dcb738*/ bool get_IsKoblitz();
                                        /*0x3dcb740*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT131R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dcb8e4*/ SecT131R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Curve outer, ulong[] table, int size);
                                            /*0x3dcba60*/ int get_Size();
                                            /*0x3dcba68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dcbc64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dcbb70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT131R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dcb56c*/ SecT131R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcb728*/ SecT131R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcbd30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dcbe00*/ bool get_CompressionYTilde();
                                        /*0x3dcbe7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcc5a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dcc908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcce14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3dcdfd0*/ SecT163Field();
                                        static /*0x3dccf74*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dcd01c*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dcd154*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dcd1c4*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dcd248*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dcd258*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dcd448*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dcd7a4*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dcdb88*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dcd354*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dcdc34*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dcd62c*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dcdd54*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dcd6bc*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dcdde8*/ uint Trace(ulong[] x);
                                        static /*0x3dcde20*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dcd84c*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dcdea8*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dcd33c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT163FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dce070*/ SecT163FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dce168*/ SecT163FieldElement(ulong[] x);
                                        /*0x3dce198*/ bool get_IsOne();
                                        /*0x3dce1a4*/ bool get_IsZero();
                                        /*0x3dce1b0*/ bool TestBitZero();
                                        /*0x3dce1dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dce1e8*/ int get_FieldSize();
                                        /*0x3dce1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dce2e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dce394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dce3a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dce498*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dce4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dce63c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dce67c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dce680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dce72c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dce880*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dce944*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dce9f0*/ bool get_HasFastTrace();
                                        /*0x3dce9f8*/ int Trace();
                                        /*0x3dcea50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dceafc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dceba8*/ bool Equals(object obj);
                                        /*0x3dcec34*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dcecc0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163FieldElement other);
                                        /*0x3dcecec*/ int GetHashCode();
                                    }

                                    class SecT163K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Point m_infinity;

                                        static /*0x3dcf314*/ SecT163K1Curve();
                                        /*0x3dced60*/ SecT163K1Curve();
                                        /*0x3dceef8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dcef48*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dcef54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3dcefa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dcefb0*/ int get_FieldSize();
                                        /*0x3dcefb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dcf010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcf084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcf110*/ bool get_IsKoblitz();
                                        /*0x3dcf118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dcf2bc*/ SecT163K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Curve outer, ulong[] table, int size);
                                            /*0x3dcf438*/ int get_Size();
                                            /*0x3dcf440*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dcf63c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dcf548*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dceef0*/ SecT163K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcf108*/ SecT163K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcf708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dcf7d8*/ bool get_CompressionYTilde();
                                        /*0x3dcf854*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcff3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd0264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd0718*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Point m_infinity;

                                        static /*0x3dd0e70*/ SecT163R1Curve();
                                        /*0x3dd0878*/ SecT163R1Curve();
                                        /*0x3dd0aa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd0af8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd0b04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd0b0c*/ int get_FieldSize();
                                        /*0x3dd0b14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd0b6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd0be0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd0c6c*/ bool get_IsKoblitz();
                                        /*0x3dd0c74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd0e18*/ SecT163R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Curve outer, ulong[] table, int size);
                                            /*0x3dd0f94*/ int get_Size();
                                            /*0x3dd0f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd1198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd10a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd0aa0*/ SecT163R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd0c64*/ SecT163R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd1264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd1334*/ bool get_CompressionYTilde();
                                        /*0x3dd13b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd1adc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd1e3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd2348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Point m_infinity;

                                        static /*0x3dd2a5c*/ SecT163R2Curve();
                                        /*0x3dd24a8*/ SecT163R2Curve();
                                        /*0x3dd2694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd26e4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd26f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd26f8*/ int get_FieldSize();
                                        /*0x3dd2700*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd2758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd27cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd2858*/ bool get_IsKoblitz();
                                        /*0x3dd2860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd2a04*/ SecT163R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Curve outer, ulong[] table, int size);
                                            /*0x3dd2b80*/ int get_Size();
                                            /*0x3dd2b88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd2d84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd2c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd268c*/ SecT163R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd2850*/ SecT163R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd2e50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd2f20*/ bool get_CompressionYTilde();
                                        /*0x3dd2f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd36ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd39d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd3ea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT193Field
                                    {
                                        static /*0x3dd4000*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd40d8*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dd4240*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dd42cc*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dd4374*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dd4384*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dd455c*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dd4798*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd4b90*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd4478*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dd4be0*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dd46e0*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dd4ccc*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dd471c*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dd4d0c*/ uint Trace(ulong[] x);
                                        static /*0x3dd4d34*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dd4de4*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3dd47e4*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd4e70*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dd4410*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT193FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dd4fd0*/ SecT193FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd508c*/ SecT193FieldElement(ulong[] x);
                                        /*0x3dd50bc*/ bool get_IsOne();
                                        /*0x3dd50c8*/ bool get_IsZero();
                                        /*0x3dd50d4*/ bool TestBitZero();
                                        /*0x3dd5100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dd510c*/ int get_FieldSize();
                                        /*0x3dd5114*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd51e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dd5264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd5270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd533c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd534c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd54b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd54f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dd54fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dd5580*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd56ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dd5748*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dd57cc*/ bool get_HasFastTrace();
                                        /*0x3dd57d4*/ int Trace();
                                        /*0x3dd57dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dd5860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dd58e4*/ bool Equals(object obj);
                                        /*0x3dd5970*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dd59fc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193FieldElement other);
                                        /*0x3dd5a28*/ int GetHashCode();
                                    }

                                    class SecT193R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT193R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Point m_infinity;

                                        static /*0x3dd6090*/ SecT193R1Curve();
                                        /*0x3dd5a9c*/ SecT193R1Curve();
                                        /*0x3dd5ccc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd5d1c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd5d28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd5d30*/ int get_FieldSize();
                                        /*0x3dd5d38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd5d90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd5e04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd5e90*/ bool get_IsKoblitz();
                                        /*0x3dd5e98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT193R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd6038*/ SecT193R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Curve outer, ulong[] table, int size);
                                            /*0x3dd61b4*/ int get_Size();
                                            /*0x3dd61bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd63c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd62d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT193R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd5cc4*/ SecT193R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd5e88*/ SecT193R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd6490*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd6560*/ bool get_CompressionYTilde();
                                        /*0x3dd65dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd6d08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd7068*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd7574*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT193R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT193R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Point m_infinity;

                                        static /*0x3dd7cc8*/ SecT193R2Curve();
                                        /*0x3dd76d4*/ SecT193R2Curve();
                                        /*0x3dd7904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd7954*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd7960*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd7968*/ int get_FieldSize();
                                        /*0x3dd7970*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd79c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd7a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd7ac8*/ bool get_IsKoblitz();
                                        /*0x3dd7ad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT193R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd7c70*/ SecT193R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Curve outer, ulong[] table, int size);
                                            /*0x3dd7dec*/ int get_Size();
                                            /*0x3dd7df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd8000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd7f0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT193R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd78fc*/ SecT193R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd7ac0*/ SecT193R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd80c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd8198*/ bool get_CompressionYTilde();
                                        /*0x3dd8214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd8940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd8ca0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd91ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT233Field
                                    {
                                        static /*0x3dd930c*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd93e4*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dd957c*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dd9608*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dd96b0*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dd96c0*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dd9880*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dd9a80*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd9f14*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd9784*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dd9f64*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dd9a34*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dda18c*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dd9acc*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dda1dc*/ uint Trace(ulong[] x);
                                        static /*0x3dda214*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dda2c4*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3dd9b68*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dda350*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dd976c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT233FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dda48c*/ SecT233FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dda548*/ SecT233FieldElement(ulong[] x);
                                        /*0x3dda578*/ bool get_IsOne();
                                        /*0x3dda584*/ bool get_IsZero();
                                        /*0x3dda590*/ bool TestBitZero();
                                        /*0x3dda5bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dda5c8*/ int get_FieldSize();
                                        /*0x3dda5d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dda69c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dda720*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dda72c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dda7f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dda808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dda974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dda9b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dda9b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3ddaa3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddab68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3ddac04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3ddac88*/ bool get_HasFastTrace();
                                        /*0x3ddac90*/ int Trace();
                                        /*0x3ddac98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3ddad1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3ddada0*/ bool Equals(object obj);
                                        /*0x3ddae2c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3ddaeb8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233FieldElement other);
                                        /*0x3ddaee4*/ int GetHashCode();
                                    }

                                    class SecT233K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT233K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Point m_infinity;

                                        static /*0x3ddb524*/ SecT233K1Curve();
                                        /*0x3ddaf58*/ SecT233K1Curve();
                                        /*0x3ddb10c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3ddb15c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3ddb168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3ddb1bc*/ int get_FieldSize();
                                        /*0x3ddb1c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3ddb21c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddb290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3ddb31c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3ddb324*/ bool get_IsKoblitz();
                                        /*0x3ddb32c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT233K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3ddb4cc*/ SecT233K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Curve outer, ulong[] table, int size);
                                            /*0x3ddb648*/ int get_Size();
                                            /*0x3ddb650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3ddb85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3ddb768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT233K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3ddb104*/ SecT233K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddb314*/ SecT233K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3ddb924*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3ddb9f4*/ bool get_CompressionYTilde();
                                        /*0x3ddba70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3ddc148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3ddc4bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3ddc954*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT233R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT233R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Point m_infinity;

                                        static /*0x3ddd054*/ SecT233R1Curve();
                                        /*0x3ddcab4*/ SecT233R1Curve();
                                        /*0x3ddcc98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3ddcce8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3ddccf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3ddccfc*/ int get_FieldSize();
                                        /*0x3ddcd04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3ddcd5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddcdd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3ddce54*/ bool get_IsKoblitz();
                                        /*0x3ddce5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT233R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3ddcffc*/ SecT233R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Curve outer, ulong[] table, int size);
                                            /*0x3ddd178*/ int get_Size();
                                            /*0x3ddd180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3ddd38c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3ddd298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT233R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3ddd454*/ SecT233R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddd45c*/ SecT233R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3ddd464*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3ddd534*/ bool get_CompressionYTilde();
                                        /*0x3ddd5b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dddcc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dddfec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dde4b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT239Field
                                    {
                                        static /*0x3dde614*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dde6ec*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dde884*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dde910*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dde9b8*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dde9c8*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3ddeb78*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3ddedb0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3ddf244*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3ddea8c*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3ddf294*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dded64*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3ddf4d8*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3ddedfc*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3ddf528*/ uint Trace(ulong[] x);
                                        static /*0x3ddf574*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3ddf624*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3ddee98*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3ddf6b0*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3ddea74*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT239FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3ddf80c*/ SecT239FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3ddf8c8*/ SecT239FieldElement(ulong[] x);
                                        /*0x3ddf8f8*/ bool get_IsOne();
                                        /*0x3ddf904*/ bool get_IsZero();
                                        /*0x3ddf910*/ bool TestBitZero();
                                        /*0x3ddf93c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3ddf948*/ int get_FieldSize();
                                        /*0x3ddf950*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddfa1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3ddfaa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddfaac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddfb78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddfb88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddfcf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddfd34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3ddfd38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3ddfdbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddfee8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3ddff84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3de0008*/ bool get_HasFastTrace();
                                        /*0x3de0010*/ int Trace();
                                        /*0x3de0018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3de009c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3de0120*/ bool Equals(object obj);
                                        /*0x3de01ac*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3de0238*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239FieldElement other);
                                        /*0x3de0264*/ int GetHashCode();
                                    }

                                    class SecT239K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT239K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Point m_infinity;

                                        static /*0x3de08a4*/ SecT239K1Curve();
                                        /*0x3de02d8*/ SecT239K1Curve();
                                        /*0x3de048c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de04dc*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de04e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3de053c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de0544*/ int get_FieldSize();
                                        /*0x3de054c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de05a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de0618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de06a4*/ bool get_IsKoblitz();
                                        /*0x3de06ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT239K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de084c*/ SecT239K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Curve outer, ulong[] table, int size);
                                            /*0x3de09c8*/ int get_Size();
                                            /*0x3de09d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de0bdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de0ae8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT239K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3de0484*/ SecT239K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de069c*/ SecT239K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de0ca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3de0d74*/ bool get_CompressionYTilde();
                                        /*0x3de0df0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de14c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3de183c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de1cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT283Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3de3468*/ SecT283Field();
                                        static /*0x3de1e34*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de1f3c*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3de2104*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3de21ac*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3de2278*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3de2288*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3de2508*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3de27a0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de2ee0*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3de23bc*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3de2f6c*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3de271c*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3de30dc*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3de2828*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3de3164*/ uint Trace(ulong[] x);
                                        static /*0x3de319c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3de3274*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3de28f4*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3de3320*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3de2350*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT283FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3de3508*/ SecT283FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de3600*/ SecT283FieldElement(ulong[] x);
                                        /*0x3de3630*/ bool get_IsOne();
                                        /*0x3de363c*/ bool get_IsZero();
                                        /*0x3de3648*/ bool TestBitZero();
                                        /*0x3de3674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3de3680*/ int get_FieldSize();
                                        /*0x3de3688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de3780*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3de382c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de3838*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de3930*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de3940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de3ad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de3b18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3de3b1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3de3bc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de3d20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3de3de4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3de3e90*/ bool get_HasFastTrace();
                                        /*0x3de3e98*/ int Trace();
                                        /*0x3de3ef0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3de3f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3de4048*/ bool Equals(object obj);
                                        /*0x3de40d4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3de4160*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283FieldElement other);
                                        /*0x3de418c*/ int GetHashCode();
                                    }

                                    class SecT283K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT283K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Point m_infinity;

                                        static /*0x3de47d0*/ SecT283K1Curve();
                                        /*0x3de4200*/ SecT283K1Curve();
                                        /*0x3de43b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de4404*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de4410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3de4464*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de446c*/ int get_FieldSize();
                                        /*0x3de4474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de44cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de4540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de45cc*/ bool get_IsKoblitz();
                                        /*0x3de45d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT283K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de4778*/ SecT283K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Curve outer, ulong[] table, int size);
                                            /*0x3de48f4*/ int get_Size();
                                            /*0x3de48fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de4af8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de4a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT283K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3de43ac*/ SecT283K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de45c4*/ SecT283K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de4bc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3de4c94*/ bool get_CompressionYTilde();
                                        /*0x3de4d10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de53e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3de575c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de5bf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT283R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT283R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Point m_infinity;

                                        static /*0x3de6308*/ SecT283R1Curve();
                                        /*0x3de5d54*/ SecT283R1Curve();
                                        /*0x3de5f40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de5f90*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de5f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de5fa4*/ int get_FieldSize();
                                        /*0x3de5fac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de6004*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de6078*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de6104*/ bool get_IsKoblitz();
                                        /*0x3de610c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT283R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de62b0*/ SecT283R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Curve outer, ulong[] table, int size);
                                            /*0x3de642c*/ int get_Size();
                                            /*0x3de6434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de6630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de653c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT283R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3de5f38*/ SecT283R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de60fc*/ SecT283R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de66fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3de67cc*/ bool get_CompressionYTilde();
                                        /*0x3de6848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de6f58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3de7284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de774c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT409Field
                                    {
                                        static /*0x3de78ac*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de7a14*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3de7a84*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3de7b64*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3de7c78*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3de7c88*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3de7ee4*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3de8174*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de8a28*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3de7d84*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3de8a78*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3de80b4*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3de8be4*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3de80f4*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3de8c28*/ uint Trace(ulong[] x);
                                        static /*0x3de8c50*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3de8d74*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3de81c0*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3de8e5c*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3de7d18*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT409FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3de8f98*/ SecT409FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de9054*/ SecT409FieldElement(ulong[] x);
                                        /*0x3de9084*/ bool get_IsOne();
                                        /*0x3de9090*/ bool get_IsZero();
                                        /*0x3de909c*/ bool TestBitZero();
                                        /*0x3de90c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3de90d4*/ int get_FieldSize();
                                        /*0x3de90dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de91a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3de922c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de9238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de9304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de9314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de9484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de94c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3de94c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3de954c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de967c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3de9718*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3de979c*/ bool get_HasFastTrace();
                                        /*0x3de97a4*/ int Trace();
                                        /*0x3de97ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3de9830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3de98b4*/ bool Equals(object obj);
                                        /*0x3de9940*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3de99cc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409FieldElement other);
                                        /*0x3de99f8*/ int GetHashCode();
                                    }

                                    class SecT409K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT409K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Point m_infinity;

                                        static /*0x3dea03c*/ SecT409K1Curve();
                                        /*0x3de9a6c*/ SecT409K1Curve();
                                        /*0x3de9c20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de9c70*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de9c7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3de9cd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de9cd8*/ int get_FieldSize();
                                        /*0x3de9ce0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de9d38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de9dac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de9e38*/ bool get_IsKoblitz();
                                        /*0x3de9e40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT409K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de9fe4*/ SecT409K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Curve outer, ulong[] table, int size);
                                            /*0x3dea160*/ int get_Size();
                                            /*0x3dea168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dea364*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dea270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT409K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3de9c18*/ SecT409K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de9e30*/ SecT409K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dea430*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dea500*/ bool get_CompressionYTilde();
                                        /*0x3dea57c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3deac54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3deafc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3deb460*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT409R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT409R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Point m_infinity;

                                        static /*0x3debb74*/ SecT409R1Curve();
                                        /*0x3deb5c0*/ SecT409R1Curve();
                                        /*0x3deb7ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3deb7fc*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3deb808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3deb810*/ int get_FieldSize();
                                        /*0x3deb818*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3deb870*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3deb8e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3deb970*/ bool get_IsKoblitz();
                                        /*0x3deb978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT409R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3debb1c*/ SecT409R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Curve outer, ulong[] table, int size);
                                            /*0x3debc98*/ int get_Size();
                                            /*0x3debca0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3debe9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3debda8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT409R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3deb7a4*/ SecT409R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3deb968*/ SecT409R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3debf68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dec038*/ bool get_CompressionYTilde();
                                        /*0x3dec0b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dec7c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3decaf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3decfb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT571Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3deef9c*/ SecT571Field();
                                        static /*0x3ded118*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3ded134*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                        static /*0x3ded15c*/ void AddBothTo(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3ded1d4*/ void AddBothTo(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                        static /*0x3ded270*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3ded28c*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3ded300*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3ded318*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3ded328*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3ded574*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3ded84c*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dee728*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dee7bc*/ void MultiplyPrecomp(ulong[] x, ulong[] precomp, ulong[] z);
                                        static /*0x3dee9d8*/ ulong[] PrecompMultiplicand(ulong[] x);
                                        static /*0x3ded42c*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3deeb08*/ void Reduce5(ulong[] z, int zOff);
                                        static /*0x3deeb74*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3ded7bc*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3deed54*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3ded8d4*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3deedf0*/ uint Trace(ulong[] x);
                                        static /*0x3ded9bc*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dee844*/ void ImplMultiplyPrecomp(ulong[] x, ulong[] precomp, ulong[] zz);
                                        static /*0x3deee34*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3ded414*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT571FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3def03c*/ SecT571FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3def134*/ SecT571FieldElement(ulong[] x);
                                        /*0x3def164*/ bool get_IsOne();
                                        /*0x3def170*/ bool get_IsZero();
                                        /*0x3def17c*/ bool TestBitZero();
                                        /*0x3def1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3def1b4*/ int get_FieldSize();
                                        /*0x3def1bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3def2bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3def368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3def374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3def46c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3def47c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3def610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3def650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3def654*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3def700*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3def854*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3def918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3def9c4*/ bool get_HasFastTrace();
                                        /*0x3def9cc*/ int Trace();
                                        /*0x3defa24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3defad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3defb7c*/ bool Equals(object obj);
                                        /*0x3defc08*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3defc94*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement other);
                                        /*0x3defcc0*/ int GetHashCode();
                                    }

                                    class SecT571K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT571K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Point m_infinity;

                                        static /*0x3df0304*/ SecT571K1Curve();
                                        /*0x3defd34*/ SecT571K1Curve();
                                        /*0x3defee8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3deff38*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3deff44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3deff98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3deffa0*/ int get_FieldSize();
                                        /*0x3deffa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3df0000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3df0074*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3df0100*/ bool get_IsKoblitz();
                                        /*0x3df0108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT571K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3df02ac*/ SecT571K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Curve outer, ulong[] table, int size);
                                            /*0x3df0428*/ int get_Size();
                                            /*0x3df0430*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3df062c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3df0538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT571K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3defee0*/ SecT571K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3df00f8*/ SecT571K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3df06f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3df07c8*/ bool get_CompressionYTilde();
                                        /*0x3df0844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3df1320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3df1694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3df1b2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT571R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT571R1_AFFINE_ZS;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement SecT571R1_B;
                                        static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement SecT571R1_B_SQRT;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Point m_infinity;

                                        static /*0x3df2214*/ SecT571R1Curve();
                                        /*0x3df1c8c*/ SecT571R1Curve();
                                        /*0x3df1e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3df1e9c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3df1ea8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3df1eb0*/ int get_FieldSize();
                                        /*0x3df1eb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3df1f10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3df1f84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3df2010*/ bool get_IsKoblitz();
                                        /*0x3df2018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT571R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3df21bc*/ SecT571R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Curve outer, ulong[] table, int size);
                                            /*0x3df246c*/ int get_Size();
                                            /*0x3df2474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3df2670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3df257c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT571R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3df1e44*/ SecT571R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3df2008*/ SecT571R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3df273c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3df280c*/ bool get_CompressionYTilde();
                                        /*0x3df2888*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3df3388*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3df38bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3df3d80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }
                                }

                                namespace GM
                                {
                                    class SM2P256V1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SM2P256V1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Point m_infinity;

                                        static /*0x3df47b0*/ SM2P256V1Curve();
                                        /*0x3df3ee0*/ SM2P256V1Curve();
                                        /*0x3df4138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3df4188*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3df4194*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3df419c*/ int get_FieldSize();
                                        /*0x3df4200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3df4374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3df43e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3df4474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3df466c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SM2P256V1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3df4614*/ SM2P256V1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Curve outer, uint[] table, int size);
                                            /*0x3df4900*/ int get_Size();
                                            /*0x3df4908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3df4b14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3df4a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SM2P256V1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;

                                        static /*0x3df5aec*/ SM2P256V1Field();
                                        static /*0x3df4bd8*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3df4da0*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3df4e6c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3df4f3c*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3df5020*/ int IsZero(uint[] x);
                                        static /*0x3df5074*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3df52d4*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3df53c8*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3df5460*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3df4714*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3df50fc*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3df55c0*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3df5758*/ void Square(uint[] x, uint[] z);
                                        static /*0x3df57d8*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3df58a4*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3df5a1c*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3df4cb4*/ void AddPInvTo(uint[] z);
                                        static /*0x3df5930*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SM2P256V1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3df67a8*/ SM2P256V1FieldElement();
                                        /*0x3df4258*/ SM2P256V1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3df4780*/ SM2P256V1FieldElement(uint[] x);
                                        /*0x3df5bd0*/ bool get_IsZero();
                                        /*0x3df5bdc*/ bool get_IsOne();
                                        /*0x3df5be8*/ bool TestBitZero();
                                        /*0x3df5c0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3df5c18*/ int get_FieldSize();
                                        /*0x3df5c7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3df5d74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3df5e20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3df5f18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3df6010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3df6110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3df61bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3df6268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3df6314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3df65ac*/ bool Equals(object obj);
                                        /*0x3df6638*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3df66c4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1FieldElement other);
                                        /*0x3df66f0*/ int GetHashCode();
                                    }

                                    class SM2P256V1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3df4130*/ SM2P256V1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3df446c*/ SM2P256V1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3df6878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3df6f30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3df73fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3df74c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3df7538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }
                                }
                            }

                            namespace Abc
                            {
                                class SimpleBigDecimal
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt;
                                    /*0x18*/ int scale;

                                    /*0x3df75f8*/ SimpleBigDecimal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt, int scale);
                                    /*0x3df7680*/ void CheckScale(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x3df76ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal AdjustScale(int newScale);
                                    /*0x3df77cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x3df7860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Negate();
                                    /*0x3df78dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x3df7904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                    /*0x3df79a0*/ int CompareTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                                    /*0x3df79dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Floor();
                                    /*0x3df7a00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Round();
                                    /*0x3df7abc*/ int get_Scale();
                                    /*0x3df7ac4*/ string ToString();
                                    /*0x3df7db0*/ bool Equals(object obj);
                                    /*0x3df7e70*/ int GetHashCode();
                                }

                                class Tnaf
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusOne;
                                    static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusTwo;
                                    static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusThree;
                                    static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Four;
                                    static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] Alpha0;
                                    static /*0x28*/ sbyte[][] Alpha0Tnaf;
                                    static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] Alpha1;
                                    static /*0x38*/ sbyte[][] Alpha1Tnaf;

                                    static /*0x3df95a0*/ Tnaf();
                                    static /*0x3df7ea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Norm(sbyte mu, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda);
                                    static /*0x3df7fb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement Round(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal lambda0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal lambda1, sbyte mu);
                                    static /*0x3df83a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal ApproximateDivisionByN(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger vm, sbyte a, int m, int c);
                                    static /*0x3df851c*/ sbyte GetMu(int curveA);
                                    static /*0x3df852c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetLucas(sbyte mu, int k, bool doV);
                                    static /*0x3df86ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GetTw(sbyte mu, int w);
                                    static /*0x3df8858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetSi(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve curve);
                                    static /*0x3df8b2c*/ int GetShiftsForCofactor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h);
                                    static /*0x3df8bc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement PartModReduction(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, int m, sbyte a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] s, sbyte mu, sbyte c);
                                    static /*0x3df8e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyFromTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte[] u);
                                    static /*0x3df9034*/ sbyte[] TauAdicWNaf(sbyte mu, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda, sbyte width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pow2w, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger tw, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] alpha);
                                    static /*0x3df93e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] GetPreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte a);
                                }

                                class ZTauElement
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger v;

                                    /*0x3df8364*/ ZTauElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger v);
                                }
                            }
                        }
                    }

                    namespace Crypto
                    {
                        class AesUtilities
                        {
                            static /*0x3df9d04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateEngine();
                        }

                        class AsymmetricCipherKeyPair
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter;

                            /*0x3df9d58*/ AsymmetricCipherKeyPair(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter);
                            /*0x3df9e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Public();
                            /*0x3df9e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Private();
                        }

                        class AsymmetricKeyParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                        {
                            /*0x10*/ bool privateKey;

                            /*0x3df9e54*/ AsymmetricKeyParameter(bool privateKey);
                            /*0x3df9e7c*/ bool get_IsPrivate();
                            /*0x3df9e84*/ bool Equals(object obj);
                            /*0x3df9f1c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter other);
                            /*0x3df9f40*/ int GetHashCode();
                        }

                        class Check
                        {
                            static /*0x3df9f74*/ void DataLength(byte[] buf, int off, int len, string msg);
                            static /*0x3df9fdc*/ void OutputLength(byte[] buf, int off, int len, string msg);
                            static /*0x3dfa044*/ void DataLength(System.ReadOnlySpan<byte> input, int len, string msg);
                            static /*0x3dfa0c8*/ void OutputLength(System.Span<byte> output, int len, string msg);
                        }

                        class CryptoException : System.Exception
                        {
                            /*0x3dfa14c*/ CryptoException();
                            /*0x3dfa1a4*/ CryptoException(string message);
                            /*0x3dfa20c*/ CryptoException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class CryptoServicesRegistrar
                        {
                            static /*0x3dfa28c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom GetSecureRandom();
                            static /*0x3dfa2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom GetSecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom secureRandom);
                        }

                        class DataLengthException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x3dfa33c*/ DataLengthException();
                            /*0x3df9fd8*/ DataLengthException(string message);
                            /*0x3dfa340*/ DataLengthException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface IAsymmetricBlockCipher
                        {
                            void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3814574*/ int GetInputBlockSize();
                            /*0x3814574*/ int GetOutputBlockSize();
                            byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                        }

                        interface IBlockCipher
                        {
                            void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3814574*/ int GetBlockSize();
                            int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);
                            int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        }

                        interface ICipherParameters
                        {
                        }

                        interface IDigest
                        {
                            /*0x3814574*/ int GetDigestSize();
                            /*0x3814574*/ int GetByteLength();
                            /*0x3815cc4*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            int DoFinal(byte[] output, int outOff);
                            int DoFinal(System.Span<byte> output);
                            /*0x38159dc*/ void Reset();
                        }

                        interface IDsa
                        {
                            void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                            bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                        }

                        interface IMac
                        {
                            /*0x3816710*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3814574*/ int GetMacSize();
                            /*0x3815cc4*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            int DoFinal(System.Span<byte> output);
                        }

                        class InvalidCipherTextException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x3dfa344*/ InvalidCipherTextException();
                            /*0x3dfa348*/ InvalidCipherTextException(string message);
                            /*0x3dfa34c*/ InvalidCipherTextException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface IRsa
                        {
                            void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3814574*/ int GetInputBlockSize();
                            /*0x3814574*/ int GetOutputBlockSize();
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ConvertInput(byte[] buf, int off, int len);
                            /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ProcessBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger input);
                            /*0x3814a3c*/ byte[] ConvertOutput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger result);
                        }

                        interface ISigner
                        {
                            void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3815cc4*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            /*0x38141c4*/ bool VerifySignature(byte[] signature);
                        }

                        interface IXof : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                        {
                            int OutputFinal(byte[] output, int outOff, int outLen);
                        }

                        class KeyGenerationParameters
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                            /*0x18*/ int strength;

                            /*0x3dfa350*/ KeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, int strength);
                            /*0x3dfa428*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_Random();
                            /*0x3dfa430*/ int get_Strength();
                        }

                        class MaxBytesExceededException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x3dfa438*/ MaxBytesExceededException();
                            /*0x3dfa43c*/ MaxBytesExceededException(string message);
                            /*0x3dfa440*/ MaxBytesExceededException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class OutputLengthException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.DataLengthException
                        {
                            /*0x3dfa444*/ OutputLengthException();
                            /*0x3dfa040*/ OutputLengthException(string message);
                            /*0x3dfa448*/ OutputLengthException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        namespace Utilities
                        {
                            class Pack
                            {
                                static /*0x3dfa44c*/ void UInt32_To_BE(uint n, byte[] bs, int off);
                                static /*0x3dfa570*/ void UInt32_To_BE(uint[] ns, byte[] bs, int off);
                                static /*0x3dfa5e8*/ uint BE_To_UInt32(byte[] bs, int off);
                                static /*0x3dfa728*/ void BE_To_UInt32(byte[] bs, int off, uint[] ns);
                                static /*0x3dfa79c*/ void BE_To_UInt32(byte[] bs, int bsOff, uint[] ns, int nsOff, int nsLen);
                                static /*0x3dfa824*/ void UInt64_To_BE(ulong n, byte[] bs, int off);
                                static /*0x3dfa948*/ void UInt64_To_BE(ulong[] ns, byte[] bs, int off);
                                static /*0x3dfa9c0*/ ulong BE_To_UInt64(byte[] bs, int off);
                                static /*0x3dfab00*/ void BE_To_UInt64(byte[] bs, int off, ulong[] ns);
                                static /*0x3dfab74*/ void UInt32_To_LE(uint n, byte[] bs, int off);
                                static /*0x3dfac94*/ void UInt32_To_LE(uint[] ns, byte[] bs, int off);
                                static /*0x3dfad10*/ uint LE_To_UInt32(byte[] bs, int off);
                                static /*0x3dfae4c*/ void LE_To_UInt32(byte[] bs, int off, uint[] ns);
                                static /*0x3df5534*/ void LE_To_UInt32(byte[] bs, int bOff, uint[] ns, int nOff, int count);
                                static /*0x3dfaec4*/ uint[] LE_To_UInt32(byte[] bs, int off, int count);
                                static /*0x3dfaf78*/ void UInt64_To_LE(ulong n, byte[] bs);
                                static /*0x3dfb054*/ void UInt64_To_LE(ulong n, byte[] bs, int off);
                                static /*0x3dfb174*/ void UInt64_To_LE(ulong[] ns, int nsOff, int nsLen, byte[] bs, int bsOff);
                                static /*0x3dfb1fc*/ ulong LE_To_UInt64(byte[] bs, int off);
                                static /*0x3dfb338*/ uint BE_To_UInt32(System.ReadOnlySpan<byte> bs);
                                static /*0x3dfb3d4*/ void BE_To_UInt32(System.ReadOnlySpan<byte> bs, System.Span<uint> ns);
                                static /*0x3dfb520*/ ulong BE_To_UInt64(System.ReadOnlySpan<byte> bs);
                                static /*0x3dfb5bc*/ uint LE_To_UInt32(System.ReadOnlySpan<byte> bs);
                                static /*0x3dfb654*/ void LE_To_UInt32(System.ReadOnlySpan<byte> bs, System.Span<uint> ns);
                                static /*0x3dfb79c*/ ulong LE_To_UInt64(System.ReadOnlySpan<byte> bs);
                                static /*0x3dfb834*/ void LE_To_UInt64(System.ReadOnlySpan<byte> bs, System.Span<ulong> ns);
                                static /*0x3dfb97c*/ void UInt32_To_BE(uint n, System.Span<byte> bs);
                                static /*0x3dfba24*/ void UInt32_To_BE(System.ReadOnlySpan<uint> ns, System.Span<byte> bs);
                                static /*0x3dfbb70*/ void UInt32_To_LE(uint n, System.Span<byte> bs);
                                static /*0x3dfbc14*/ void UInt32_To_LE(System.ReadOnlySpan<uint> ns, System.Span<byte> bs);
                                static /*0x3dfbd5c*/ void UInt64_To_BE(ulong n, System.Span<byte> bs);
                                static /*0x3dfbe04*/ void UInt64_To_BE(System.ReadOnlySpan<ulong> ns, System.Span<byte> bs);
                                static /*0x3dfbf50*/ void UInt64_To_LE(ulong n, System.Span<byte> bs);
                                static /*0x3dfbff4*/ void UInt64_To_LE(System.ReadOnlySpan<ulong> ns, System.Span<byte> bs);
                            }
                        }

                        namespace Signers
                        {
                            class DsaDigestSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding encoding;
                                /*0x28*/ bool forSigning;

                                /*0x3dfc13c*/ DsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3dfc1b4*/ DsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding encoding);
                                /*0x3dfc214*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfc430*/ void Update(byte input);
                                /*0x3dfc4dc*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3dfc5a0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3dfc65c*/ bool VerifySignature(byte[] signature);
                                /*0x3dfc9c4*/ void Reset();
                                /*0x3dfca68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GetOrder();
                            }

                            class DsaSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator kCalculator;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                /*0x3dfcb0c*/ DsaSigner();
                                /*0x3dfcb80*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfce20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x3dfce44*/ bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x3dfd07c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateE(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] message);
                                /*0x3dfd158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom InitSecureRandom(bool needed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom provided);
                            }

                            class ECDsaSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Eight;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator kCalculator;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                static /*0x3dfd994*/ ECDsaSigner();
                                /*0x3dfd16c*/ ECDsaSigner();
                                /*0x3dfd1d8*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfd478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x3dfd49c*/ bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x3dfd838*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateE(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] message);
                                /*0x3dfd8f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetDenominator(int coordinateSystem, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x3dfd980*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom InitSecureRandom(bool needed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom provided);
                            }

                            class Ed25519Signer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.Ed25519Signer.Buffer buffer;
                                /*0x18*/ bool forSigning;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters privateKey;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters publicKey;

                                /*0x3dfda18*/ Ed25519Signer();
                                /*0x3dfda8c*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfdba8*/ void Update(byte b);
                                /*0x3dfdbcc*/ void BlockUpdate(byte[] buf, int off, int len);
                                /*0x3dfdbf0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3dfdc14*/ bool VerifySignature(byte[] signature);
                                /*0x3dfde88*/ void Reset();

                                class Buffer : System.IO.MemoryStream
                                {
                                    /*0x3dfda84*/ Buffer();
                                    /*0x3dfdc88*/ bool VerifySignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters publicKey, byte[] signature);
                                    /*0x3dfdea0*/ void Reset();
                                }
                            }

                            class Ed448Signer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.Ed448Signer.Buffer buffer;
                                /*0x18*/ byte[] context;
                                /*0x20*/ bool forSigning;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters privateKey;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters publicKey;

                                /*0x3dfe054*/ Ed448Signer(byte[] context);
                                /*0x3dfe114*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfe230*/ void Update(byte b);
                                /*0x3dfe254*/ void BlockUpdate(byte[] buf, int off, int len);
                                /*0x3dfe278*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3dfe29c*/ bool VerifySignature(byte[] signature);
                                /*0x3dfe528*/ void Reset();

                                class Buffer : System.IO.MemoryStream
                                {
                                    /*0x3dfe10c*/ Buffer();
                                    /*0x3dfe318*/ bool VerifySignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters publicKey, byte[] ctx, byte[] signature);
                                    /*0x3dfe540*/ void Reset();
                                }
                            }

                            class GenericSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x20*/ bool forSigning;

                                /*0x3dfe6f4*/ GenericSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3dfe738*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfe954*/ void Update(byte input);
                                /*0x3dfea00*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3dfeac4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3dfeb80*/ bool VerifySignature(byte[] signature);
                                /*0x3dfeed8*/ void Reset();
                            }

                            interface IDsaEncoding
                            {
                                /*0x3814b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] Decode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] encoding);
                            }

                            interface IDsaKCalculator
                            {
                                /*0x3813ffc*/ bool get_IsDeterministic();
                            }

                            class PssSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest1;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest2;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                                /*0x38*/ int hLen;
                                /*0x3c*/ int mgfhLen;
                                /*0x40*/ int sLen;
                                /*0x44*/ bool sSet;
                                /*0x48*/ int emBits;
                                /*0x50*/ byte[] salt;
                                /*0x58*/ byte[] mDash;
                                /*0x60*/ byte[] block;
                                /*0x68*/ byte trailer;

                                static /*0x3dfef7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.PssSigner CreateRawSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte trailer);
                                /*0x3dff240*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, int saltLen);
                                /*0x3dff26c*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, int saltLen, byte trailer);
                                /*0x3dff298*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte trailer);
                                /*0x3dff044*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest2, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte[] salt, byte trailer);
                                /*0x3dff2c4*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dff530*/ void ClearBlock(byte[] block);
                                /*0x3dff554*/ void Update(byte input);
                                /*0x3dff600*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3dff6c4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3dff780*/ bool VerifySignature(byte[] signature);
                                /*0x3dfff14*/ void ItoOSP(int i, byte[] sp);
                                /*0x3dffd14*/ byte[] MaskGeneratorFunction(byte[] Z, int zOff, int zLen, int length);
                                /*0x3dfff68*/ byte[] MaskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length);
                            }

                            class RandomDsaKCalculator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator
                            {
                                /*0x3dfcb78*/ RandomDsaKCalculator();
                                /*0x3e003d8*/ bool get_IsDeterministic();
                            }

                            class RsaDigestSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                static /*0x0*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> OidMap;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher rsaEngine;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x28*/ bool forSigning;

                                static /*0x3e003e0*/ RsaDigestSigner();
                                /*0x3e00fa4*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestOid);
                                /*0x3e0104c*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x3e010c0*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x3e01144*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher rsaEngine, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x3e011f0*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e0140c*/ void Update(byte input);
                                /*0x3e014b8*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3e0157c*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e01638*/ bool VerifySignature(byte[] signature);
                                /*0x3e01af4*/ void Reset();
                                /*0x3e01a6c*/ byte[] DerEncode(byte[] hash);
                            }

                            class StandardDsaEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding Instance;

                                static /*0x3e02088*/ StandardDsaEncoding();
                                /*0x3e02080*/ StandardDsaEncoding();
                                /*0x3e01b98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] Decode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] encoding);
                                /*0x3e01db8*/ byte[] Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x3e01e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CheckValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3e01f30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DecodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence s, int pos);
                                /*0x3e01ff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger EncodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            }
                        }

                        namespace Prng
                        {
                            class CryptoApiRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator, System.IDisposable
                            {
                                /*0x10*/ System.Security.Cryptography.RandomNumberGenerator m_randomNumberGenerator;

                                /*0x3e020f0*/ CryptoApiRandomGenerator();
                                /*0x3e02110*/ CryptoApiRandomGenerator(System.Security.Cryptography.RandomNumberGenerator randomNumberGenerator);
                                /*0x3e02198*/ void AddSeedMaterial(System.ReadOnlySpan<byte> inSeed);
                                /*0x3e0219c*/ void AddSeedMaterial(long seed);
                                /*0x3e021a0*/ void NextBytes(byte[] bytes);
                                /*0x3e021c0*/ void NextBytes(System.Span<byte> bytes);
                                /*0x3e021e0*/ void Dispose();
                            }

                            class DigestRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator
                            {
                                /*0x10*/ long stateCounter;
                                /*0x18*/ long seedCounter;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x28*/ byte[] state;
                                /*0x30*/ byte[] seed;

                                /*0x3e021fc*/ DigestRandomGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3e02384*/ void AddSeedMaterial(System.ReadOnlySpan<byte> inSeed);
                                /*0x3e0267c*/ void AddSeedMaterial(long rSeed);
                                /*0x3e02950*/ void NextBytes(byte[] bytes);
                                /*0x3e0296c*/ void NextBytes(byte[] bytes, int start, int len);
                                /*0x3e02a28*/ void NextBytes(System.Span<byte> bytes);
                                /*0x3e02c9c*/ void CycleSeed();
                                /*0x3e02b84*/ void GenerateState();
                                /*0x3e027d4*/ void DigestAddCounter(long seedVal);
                                /*0x3e02504*/ void DigestUpdate(System.ReadOnlySpan<byte> inSeed);
                                /*0x3e025c0*/ void DigestDoFinal(System.Span<byte> result);
                            }

                            interface IRandomGenerator
                            {
                                void AddSeedMaterial(System.ReadOnlySpan<byte> seed);
                                /*0x381630c*/ void AddSeedMaterial(long seed);
                                /*0x3816710*/ void NextBytes(byte[] bytes);
                                void NextBytes(System.Span<byte> bytes);
                            }

                            class VmpcRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator
                            {
                                /*0x10*/ byte[] P;
                                /*0x18*/ byte s;
                                /*0x19*/ byte n;

                                /*0x3e02d50*/ VmpcRandomGenerator();
                                /*0x3e02de8*/ void AddSeedMaterial(System.ReadOnlySpan<byte> seed);
                                /*0x3e02ed8*/ void AddSeedMaterial(long seed);
                                /*0x3e02fe4*/ void NextBytes(byte[] bytes);
                                /*0x3e03000*/ void NextBytes(byte[] bytes, int start, int len);
                                /*0x3e030bc*/ void NextBytes(System.Span<byte> bytes);
                            }
                        }

                        namespace Parameters
                        {
                            class AeadParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ byte[] associatedText;
                                /*0x18*/ byte[] nonce;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;
                                /*0x28*/ int macSize;

                                /*0x3e032c0*/ AeadParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key, int macSize, byte[] nonce, byte[] associatedText);
                                /*0x3e03328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter get_Key();
                                /*0x3e03330*/ int get_MacSize();
                                /*0x3e03338*/ byte[] GetAssociatedText();
                                /*0x3e03340*/ byte[] GetNonce();
                            }

                            class Blake3Parameters
                            {
                                /*0x10*/ byte[] m_theKey;
                                /*0x18*/ byte[] m_theContext;

                                /*0x3e03348*/ byte[] GetKey();
                                /*0x3e033a4*/ byte[] GetContext();
                            }

                            class DHKeyGenerationParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters;

                                static /*0x3e03444*/ int GetStrength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3e03400*/ DHKeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3e03478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters get_Parameters();
                            }

                            class DHKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid;

                                /*0x3e03480*/ DHKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3e034f8*/ DHKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid);
                                /*0x3e0354c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters get_Parameters();
                                /*0x3e03554*/ bool Equals(object obj);
                                /*0x3e035f0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters other);
                                /*0x3e03640*/ int GetHashCode();
                            }

                            class DHParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j;
                                /*0x30*/ int m;
                                /*0x34*/ int l;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation;

                                static /*0x3e03678*/ int GetDefaultMParam(int lParam);
                                /*0x3e036e8*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, int l);
                                /*0x3e03af8*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation);
                                /*0x3e0374c*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, int m, int l, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation);
                                /*0x3e03b20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e03b28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e03b30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3e03b38*/ int get_M();
                                /*0x3e03b40*/ int get_L();
                                /*0x3e03b48*/ bool Equals(object obj);
                                /*0x3e03bec*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters other);
                                /*0x3e03c5c*/ int GetHashCode();
                            }

                            class DHPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;

                                /*0x3e03ccc*/ DHPrivateKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3e03cfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_X();
                                /*0x3e03d04*/ bool Equals(object obj);
                                /*0x3e03da0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters other);
                                /*0x3e03df4*/ int GetHashCode();
                            }

                            class DHPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                static /*0x3e03e34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams);
                                static /*0x3e04078*/ int Legendre(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                /*0x3e04268*/ DHPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3e042a8*/ DHPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid);
                                /*0x3e042e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Y();
                                /*0x3e042f0*/ bool Equals(object obj);
                                /*0x3e0438c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters other);
                                /*0x3e043e0*/ int GetHashCode();
                            }

                            class DHValidationParameters
                            {
                                /*0x10*/ byte[] seed;
                                /*0x18*/ int counter;

                                /*0x3e04420*/ DHValidationParameters(byte[] seed, int counter);
                                /*0x3e04540*/ bool Equals(object obj);
                                /*0x3e045dc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters other);
                                /*0x3e0466c*/ int GetHashCode();
                            }

                            class DsaKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters;

                                /*0x3e046e4*/ DsaKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x3e0471c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters get_Parameters();
                                /*0x3e04724*/ bool Equals(object obj);
                                /*0x3e047c0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters other);
                                /*0x3e04810*/ int GetHashCode();
                            }

                            class DsaParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters validation;

                                /*0x3e04848*/ DsaParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3e04850*/ DsaParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters parameters);
                                /*0x3e04958*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e04960*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3e04968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e04970*/ bool Equals(object obj);
                                /*0x3e04a0c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters other);
                                /*0x3e04a80*/ int GetHashCode();
                            }

                            class DsaPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters
                            {
                            }

                            class DsaPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                static /*0x3e04af0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x3e04c50*/ DsaPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x3e04cf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Y();
                                /*0x3e04cf8*/ bool Equals(object obj);
                                /*0x3e04d94*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters other);
                                /*0x3e04de8*/ int GetHashCode();
                            }

                            class DsaValidationParameters
                            {
                            }

                            class ECDomainParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x18*/ byte[] seed;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger hInv;

                                static /*0x3e04fe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ValidatePublicPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q);
                                /*0x3e04e28*/ ECDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters x9);
                                /*0x3e04e70*/ ECDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x3e0510c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e05114*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_G();
                                /*0x3e0511c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                                /*0x3e05124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_H();
                                /*0x3e0512c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_HInv();
                                /*0x3e05258*/ byte[] GetSeed();
                                /*0x3e052b4*/ bool Equals(object obj);
                                /*0x3e05358*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters other);
                                /*0x3e053dc*/ int GetHashCode();
                                /*0x3e0545c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePrivateScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d);
                            }

                            class ECGost3410Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters
                            {
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _publicKeyParamSet;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _digestParamSet;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _encryptionParamSet;

                                /*0x3e0558c*/ ECGost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters dp, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestParamSet, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier encryptionParamSet);
                            }

                            class ECKeyGenerationParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domainParams;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                /*0x3e05680*/ ECKeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domainParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x3e056d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters get_DomainParameters();
                                /*0x3e056dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_PublicKeyParamSet();
                            }

                            class ECKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, string> Algorithms;
                                /*0x18*/ string algorithm;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                static /*0x3e05c5c*/ ECKeyParameters();
                                static /*0x3e057f0*/ string VerifyAlgorithmName(string algorithm);
                                static /*0x3e05a18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters LookupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3e056e4*/ ECKeyParameters(string algorithm, bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3e058f4*/ ECKeyParameters(string algorithm, bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3e05b18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters get_Parameters();
                                /*0x3e05b20*/ bool Equals(object obj);
                                /*0x3e05bc4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters other);
                                /*0x3e05c1c*/ int GetHashCode();
                            }

                            class ECNamedDomainParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters
                            {
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name;

                                /*0x3e05e7c*/ ECNamedDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters x9);
                                /*0x3e05640*/ ECNamedDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x3e05e74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Name();
                            }

                            class ECPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters
                            {
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d;

                                /*0x3e05eac*/ ECPrivateKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3e05f4c*/ ECPrivateKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3e05fec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_D();
                                /*0x3e05ff4*/ bool Equals(object obj);
                                /*0x3e06090*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters other);
                                /*0x3e060e4*/ int GetHashCode();
                            }

                            class ECPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters
                            {
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q;

                                /*0x3e06124*/ ECPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3e06184*/ ECPublicKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3e06228*/ ECPublicKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3e062cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Q();
                                /*0x3e062d4*/ bool Equals(object obj);
                                /*0x3e06370*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters other);
                                /*0x3e063cc*/ int GetHashCode();
                            }

                            class Ed25519PrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                static /*0x4*/ int SignatureSize;

                                static /*0x3e0640c*/ Ed25519PrivateKeyParameters();
                            }

                            class Ed25519PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3e066c8*/ Ed25519PublicKeyParameters();
                                static /*0x3e064f4*/ byte[] Validate(byte[] buf);
                                /*0x3e06484*/ Ed25519PublicKeyParameters(byte[] buf);
                                /*0x3e065fc*/ Ed25519PublicKeyParameters(byte[] buf, int off);
                                /*0x3dfdff8*/ byte[] GetEncoded();
                            }

                            class Ed448PrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                static /*0x4*/ int SignatureSize;

                                static /*0x3e06740*/ Ed448PrivateKeyParameters();
                            }

                            class Ed448PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3e069fc*/ Ed448PublicKeyParameters();
                                static /*0x3e06828*/ byte[] Validate(byte[] buf);
                                /*0x3e067b8*/ Ed448PublicKeyParameters(byte[] buf);
                                /*0x3e06930*/ Ed448PublicKeyParameters(byte[] buf, int off);
                                /*0x3dfe698*/ byte[] GetEncoded();
                            }

                            class ElGamalKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters;

                                /*0x3e06a74*/ ElGamalKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters);
                                /*0x3e06aac*/ bool Equals(object obj);
                                /*0x3e06b48*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters other);
                                /*0x3e06b98*/ int GetHashCode();
                            }

                            class ElGamalParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x20*/ int l;

                                /*0x3e06bd0*/ ElGamalParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3e06bd8*/ ElGamalParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int l);
                                /*0x3e06ca0*/ bool Equals(object obj);
                                /*0x3e06d3c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters other);
                                /*0x3e06da8*/ int GetHashCode();
                            }

                            class ElGamalPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                /*0x3e06e00*/ ElGamalPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters);
                                /*0x3e06e94*/ bool Equals(object obj);
                                /*0x3e06f30*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters other);
                                /*0x3e06f84*/ int GetHashCode();
                            }

                            class Gost3410KeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                static /*0x3e07014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters LookupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3e06fc4*/ Gost3410KeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3e0717c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters get_Parameters();
                            }

                            class Gost3410Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters validation;

                                /*0x3e07184*/ Gost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a);
                                /*0x3e0718c*/ Gost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters validation);
                                /*0x3e07294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e0729c*/ bool Equals(object obj);
                                /*0x3e07338*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters other);
                                /*0x3e073ac*/ int GetHashCode();
                            }

                            class Gost3410PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                /*0x3e0741c*/ Gost3410PublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                            }

                            class Gost3410ValidationParameters
                            {
                            }

                            class KeyParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ byte[] m_key;

                                /*0x3e074d8*/ KeyParameter(byte[] key);
                                /*0x3e075d8*/ KeyParameter(byte[] key, int keyOff, int keyLen);
                                /*0x3e07728*/ KeyParameter(System.ReadOnlySpan<byte> key);
                                /*0x3e0779c*/ byte[] GetKey();
                            }

                            class ParametersWithIV : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters m_parameters;
                                /*0x18*/ byte[] m_iv;

                                /*0x3e07814*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] iv);
                                /*0x3e07830*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] iv, int ivOff, int ivLen);
                                /*0x3e078dc*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, System.ReadOnlySpan<byte> iv);
                                /*0x3e0796c*/ byte[] GetIV();
                                /*0x3e079e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                            }

                            class ParametersWithRandom : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters m_parameters;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom m_random;

                                /*0x3e079ec*/ ParametersWithRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x3e07aa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                                /*0x3e07aa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_Random();
                            }

                            class ParametersWithSBox : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters;
                                /*0x18*/ byte[] sBox;

                                /*0x3e07ab0*/ ParametersWithSBox(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] sBox);
                                /*0x3e07af4*/ byte[] GetSBox();
                                /*0x3e07afc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                            }

                            class RsaBlindingParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey;

                                /*0x3e07b04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters get_PublicKey();
                            }

                            class RsaKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SmallPrimesProduct;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger exponent;

                                static /*0x3e080a4*/ RsaKeyParameters();
                                static /*0x3e07b0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus);
                                static /*0x3e07cdc*/ int AsInteger(string envVariable, int defaultValue);
                                /*0x3e07d60*/ RsaKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger exponent);
                                /*0x3e07f30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Modulus();
                                /*0x3e07f38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Exponent();
                                /*0x3e07f40*/ bool Equals(object obj);
                                /*0x3e08018*/ int GetHashCode();
                            }

                            class RsaPrivateCrtKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger dP;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger dQ;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger qInv;

                                /*0x3e08144*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PublicExponent();
                                /*0x3e0814c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e08154*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3e0815c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_DP();
                                /*0x3e08164*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_DQ();
                                /*0x3e0816c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_QInv();
                            }

                            class Srp6GroupParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;

                                /*0x3e08174*/ Srp6GroupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3e081b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e081c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            }

                            class X25519PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3e0840c*/ X25519PublicKeyParameters();
                                static /*0x3e08238*/ byte[] Validate(byte[] buf);
                                /*0x3e081c8*/ X25519PublicKeyParameters(byte[] buf);
                                /*0x3e08340*/ X25519PublicKeyParameters(byte[] buf, int off);
                            }

                            class X448PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3e0869c*/ X448PublicKeyParameters();
                                static /*0x3e084c8*/ byte[] Validate(byte[] buf);
                                /*0x3e08458*/ X448PublicKeyParameters(byte[] buf);
                                /*0x3e085d0*/ X448PublicKeyParameters(byte[] buf, int off);
                            }
                        }

                        namespace Paddings
                        {
                            interface IBlockCipherPadding
                            {
                                int AddPadding(byte[] input, int inOff);
                            }
                        }

                        namespace Modes
                        {
                            class CbcBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x10*/ byte[] IV;
                                /*0x18*/ byte[] cbcV;
                                /*0x20*/ byte[] cbcNextV;
                                /*0x28*/ int blockSize;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x38*/ bool encrypting;

                                /*0x3e086e8*/ CbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x3e08814*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e08a40*/ int GetBlockSize();
                                /*0x3e08ae4*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e090e8*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e089f8*/ void Reset();
                                /*0x3e08e94*/ int EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e08c40*/ int DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class CcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                            {
                                static /*0x0*/ int BlockSize;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ byte[] macBlock;
                                /*0x20*/ bool forEncryption;
                                /*0x28*/ byte[] nonce;
                                /*0x30*/ byte[] initialAssociatedText;
                                /*0x38*/ int macSize;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters keyParam;
                                /*0x48*/ System.IO.MemoryStream associatedText;
                                /*0x50*/ System.IO.MemoryStream data;

                                static /*0x3e0b148*/ CcmBlockCipher();
                                /*0x3e090f8*/ CcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x3e09330*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e095b0*/ int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff);
                                /*0x3e0964c*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e09678*/ int DoFinal(byte[] outBytes, int outOff);
                                /*0x3e0972c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e098a8*/ void Reset();
                                /*0x3e098f0*/ int GetOutputSize(int len);
                                /*0x3e09990*/ int ProcessPacket(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0a7d4*/ int CalculateMac(System.ReadOnlySpan<byte> data, System.Span<byte> macBlock);
                                /*0x3e09544*/ int GetMacSize(bool forEncryption, int requestedMacBits);
                                /*0x3e0b0bc*/ int GetAssociatedTextLength();
                                /*0x3e0b0a4*/ bool HasAssociatedText();
                            }

                            class GcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                            {
                                /*0x10*/ byte[] ctrBlock;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier multiplier;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator exp;
                                /*0x30*/ bool forEncryption;
                                /*0x31*/ bool initialised;
                                /*0x34*/ int macSize;
                                /*0x38*/ byte[] lastKey;
                                /*0x40*/ byte[] nonce;
                                /*0x48*/ byte[] initialAssociatedText;
                                /*0x50*/ byte[] H;
                                /*0x58*/ byte[] J0;
                                /*0x60*/ byte[] bufBlock;
                                /*0x68*/ byte[] macBlock;
                                /*0x70*/ byte[] S;
                                /*0x78*/ byte[] S_at;
                                /*0x80*/ byte[] S_atPre;
                                /*0x88*/ byte[] counter;
                                /*0x90*/ uint counter32;
                                /*0x94*/ uint blocksRemaining;
                                /*0x98*/ int bufOff;
                                /*0xa0*/ ulong totalLength;
                                /*0xa8*/ byte[] atBlock;
                                /*0xb0*/ int atBlockPos;
                                /*0xb8*/ ulong atLength;
                                /*0xc0*/ ulong atLengthPre;

                                static /*0x3e0b194*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier CreateGcmMultiplier();
                                /*0x3e0b1e8*/ GcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c);
                                /*0x3e0b1f0*/ GcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier m);
                                /*0x3e0b3a0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e0bca4*/ int GetOutputSize(int len);
                                /*0x3e0bbc0*/ void ProcessAadBytes(byte[] inBytes, int inOff, int len);
                                /*0x3e0bccc*/ void ProcessAadBytes(System.ReadOnlySpan<byte> input);
                                /*0x3e0c054*/ void InitCipher();
                                /*0x3e0c1c8*/ int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff);
                                /*0x3e0c368*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0dce4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e0dd8c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e0e9b8*/ void Reset();
                                /*0x3e0e81c*/ void Reset(bool clearMac);
                                /*0x3e0d44c*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0d740*/ void DecryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0cbb4*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0cea8*/ void EncryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0e9c0*/ void GetNextCtrBlock(System.Span<byte> block);
                                /*0x3e0e64c*/ void ProcessPartial(System.Span<byte> partialBlock, System.Span<byte> output);
                                /*0x3e0bb0c*/ void gHASH(byte[] Y, byte[] b, int len);
                                /*0x3e0eb18*/ void gHASHBlock(byte[] Y, System.ReadOnlySpan<byte> b);
                                /*0x3e0ec0c*/ void gHASHPartial(byte[] Y, System.ReadOnlySpan<byte> b);
                                /*0x3e0c0e8*/ void gHASHPartial(byte[] Y, byte[] b, int off, int len);
                                /*0x3e0bfdc*/ void CheckStatus();
                            }

                            interface IAeadCipher
                            {
                                void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff);
                                int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                int DoFinal(byte[] outBytes, int outOff);
                                /*0x38145a0*/ int GetOutputSize(int len);
                                /*0x38159dc*/ void Reset();
                            }

                            interface IBlockCipherMode : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x38159dc*/ void Reset();
                            }

                            class SicBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ int blockSize;
                                /*0x20*/ byte[] counter;
                                /*0x28*/ byte[] counterOut;
                                /*0x30*/ byte[] IV;

                                /*0x3e0f2a8*/ SicBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x3e0f3d4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e0f6bc*/ int GetBlockSize();
                                /*0x3e0f760*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e0f91c*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0faac*/ void Reset();
                            }

                            namespace Gcm
                            {
                                class BasicGcmExponentiator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x;

                                    /*0x3e0fe54*/ BasicGcmExponentiator();
                                    /*0x3e0fb30*/ void Init(byte[] x);
                                    /*0x3e0fb74*/ void ExponentiateX(long pow, byte[] output);
                                }

                                class GcmUtilities
                                {
                                    static /*0x3e0fc10*/ void One(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x3e0fe5c*/ void AsBytes(ulong x0, ulong x1, byte[] z);
                                    static /*0x3e0fe98*/ void AsBytes(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, byte[] z);
                                    static /*0x3e0fed4*/ void AsFieldElement(byte[] x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x3e0ff14*/ void DivideP(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x3e0ff34*/ void Multiply(byte[] x, byte[] y);
                                    static /*0x3e0fc20*/ void Multiply(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y);
                                    static /*0x3e1008c*/ void MultiplyP7(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x3e100b8*/ void MultiplyP8(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y);
                                    static /*0x3e0fdc4*/ void Square(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x3e100e4*/ void Xor(byte[] x, byte[] y);
                                    static /*0x3e101d4*/ void Xor(byte[] x, byte[] y, int yOff, int yLen);
                                    static /*0x3e1024c*/ void Xor(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x3e10260*/ void Xor(System.Span<byte> x, System.ReadOnlySpan<byte> y);
                                    static /*0x3e10338*/ void Xor(System.Span<byte> x, System.ReadOnlySpan<byte> y, int len);
                                    static /*0x3e0ffdc*/ ulong ImplMul64(ulong x, ulong y);

                                    struct FieldElement
                                    {
                                        /*0x10*/ ulong n0;
                                        /*0x18*/ ulong n1;
                                    }
                                }

                                interface IGcmExponentiator
                                {
                                    /*0x3816710*/ void Init(byte[] x);
                                    void ExponentiateX(long pow, byte[] output);
                                }

                                interface IGcmMultiplier
                                {
                                    /*0x3816710*/ void Init(byte[] H);
                                    /*0x3816710*/ void MultiplyH(byte[] x);
                                }

                                class Tables4kGcmMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier
                                {
                                    /*0x10*/ byte[] H;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement[] T;

                                    /*0x3e1061c*/ Tables4kGcmMultiplier();
                                    /*0x3e10384*/ void Init(byte[] H);
                                    /*0x3e1055c*/ void MultiplyH(byte[] x);
                                }
                            }
                        }

                        namespace Macs
                        {
                            class CbcBlockCipherMac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int bufOff;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode m_cipherMode;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding padding;
                                /*0x30*/ int macSize;

                                /*0x3e10624*/ CbcBlockCipherMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, int macSizeInBits);
                                /*0x3e1062c*/ CbcBlockCipherMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, int macSizeInBits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding padding);
                                /*0x3e107dc*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e1094c*/ int GetMacSize();
                                /*0x3e10954*/ void Update(byte input);
                                /*0x3e10a68*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e10b90*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e10fc0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e10890*/ void Reset();
                            }

                            class HMac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x18*/ int digestSize;
                                /*0x1c*/ int blockLength;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable ipadState;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable opadState;
                                /*0x30*/ byte[] inputPad;
                                /*0x38*/ byte[] outputBuf;

                                static /*0x3e11a4c*/ void XorPad(byte[] pad, int len, byte n);
                                /*0x3e11370*/ HMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3e114e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest GetUnderlyingDigest();
                                /*0x3e114f0*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e11a9c*/ int GetMacSize();
                                /*0x3e11aa4*/ void Update(byte input);
                                /*0x3e11b50*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e11c14*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e11cd0*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e11d84*/ int DoFinal(System.Span<byte> output);
                                /*0x3e122d4*/ void Reset();
                            }

                            class Poly1305 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ uint r0;
                                /*0x1c*/ uint r1;
                                /*0x20*/ uint r2;
                                /*0x24*/ uint r3;
                                /*0x28*/ uint r4;
                                /*0x2c*/ uint s1;
                                /*0x30*/ uint s2;
                                /*0x34*/ uint s3;
                                /*0x38*/ uint s4;
                                /*0x3c*/ uint k0;
                                /*0x40*/ uint k1;
                                /*0x44*/ uint k2;
                                /*0x48*/ uint k3;
                                /*0x50*/ byte[] currentBlock;
                                /*0x58*/ int currentBlockOffset;
                                /*0x5c*/ uint h0;
                                /*0x60*/ uint h1;
                                /*0x64*/ uint h2;
                                /*0x68*/ uint h3;
                                /*0x6c*/ uint h4;

                                /*0x3e124cc*/ Poly1305();
                                /*0x3e12540*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e126d4*/ void SetKey(byte[] key, byte[] nonce);
                                /*0x3e12a14*/ int GetMacSize();
                                /*0x3e12a1c*/ void Update(byte input);
                                /*0x3e12ebc*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e12fcc*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e12ac4*/ void ProcessBlock(System.ReadOnlySpan<byte> block);
                                /*0x3e132cc*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e1337c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e12a08*/ void Reset();
                            }
                        }

                        namespace IO
                        {
                            class SignerSink : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner m_signer;

                                /*0x3e1380c*/ SignerSink(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner signer);
                                /*0x3e1383c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner get_Signer();
                                /*0x3e13844*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3e13934*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x3e13a18*/ void WriteByte(byte value);
                            }
                        }

                        namespace Generators
                        {
                            class DHBasicKeyPairGenerator
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters param;

                                /*0x3e13ebc*/ DHBasicKeyPairGenerator();
                                /*0x3e13ac4*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters parameters);
                                /*0x3e13b70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                            }

                            class DHKeyGeneratorHelper
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Generators.DHKeyGeneratorHelper Instance;

                                static /*0x3e13ecc*/ DHKeyGeneratorHelper();
                                /*0x3e13ec4*/ DHKeyGeneratorHelper();
                                /*0x3e13ca8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculatePrivate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x3e13e90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculatePublic(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            }

                            class ECKeyPairGenerator
                            {
                                /*0x10*/ string algorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                static /*0x3e146cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters FindECCurveByName(string name);
                                static /*0x3e14338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters FindECCurveByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x3e13f34*/ ECKeyPairGenerator();
                                /*0x3e13f7c*/ ECKeyPairGenerator(string algorithm);
                                /*0x3e14040*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters parameters);
                                /*0x3e143ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                /*0x3e14678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateBasePointMultiplier();
                            }
                        }

                        namespace Engines
                        {
                            class AesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] S;
                                static /*0x8*/ byte[] Si;
                                static /*0x10*/ byte[] rcon;
                                static /*0x18*/ uint[] T0;
                                static /*0x20*/ uint[] Tinv0;
                                /*0x10*/ int ROUNDS;
                                /*0x18*/ uint[][] WorkingKey;
                                /*0x20*/ bool forEncryption;
                                /*0x28*/ byte[] s;

                                static /*0x3e172b4*/ AesEngine();
                                static /*0x3e14740*/ uint Shift(uint r, int shift);
                                static /*0x3e14748*/ uint FFmulX(uint x);
                                static /*0x3e14768*/ uint FFmulX2(uint x);
                                static /*0x3e14784*/ uint Inv_Mcol(uint x);
                                static /*0x3e1481c*/ uint SubWord(uint x);
                                /*0x3e153a4*/ AesEngine();
                                /*0x3e148e0*/ uint[][] GenerateWorkingKey(byte[] key, bool forEncryption);
                                /*0x3e153ac*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e15558*/ int GetBlockSize();
                                /*0x3e15560*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e17190*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e15760*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                                /*0x3e16380*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                            }

                            class AriaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[][] C;
                                static /*0x8*/ byte[] SB1_sbox;
                                static /*0x10*/ byte[] SB2_sbox;
                                static /*0x18*/ byte[] SB3_sbox;
                                static /*0x20*/ byte[] SB4_sbox;
                                /*0x10*/ byte[][] m_roundKeys;

                                static /*0x3e18e38*/ AriaEngine();
                                static /*0x3e1859c*/ void A(byte[] z);
                                static /*0x3e17f64*/ void FE(byte[] D, byte[] RK);
                                static /*0x3e17ef0*/ void FO(byte[] D, byte[] RK);
                                static /*0x3e175cc*/ byte[][] KeySchedule(bool forEncryption, byte[] K);
                                static /*0x3e18a6c*/ byte[] KeyScheduleRound(byte[] w, byte[] wr, int n);
                                static /*0x3e18b80*/ void ReverseKeys(byte[][] keys);
                                static /*0x3e18c40*/ byte SB1(byte x);
                                static /*0x3e18cbc*/ byte SB2(byte x);
                                static /*0x3e18d38*/ byte SB3(byte x);
                                static /*0x3e18db4*/ byte SB4(byte x);
                                static /*0x3e18810*/ void SL1(byte[] z);
                                static /*0x3e18034*/ void SL2(byte[] z);
                                static /*0x3e17fd8*/ void Xor(byte[] z, byte[] x);
                                /*0x3e18e30*/ AriaEngine();
                                /*0x3e17488*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e17cac*/ int GetBlockSize();
                                /*0x3e17cb4*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e18290*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class CamelliaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ uint[] SIGMA;
                                static /*0x8*/ uint[] SBOX1_1110;
                                static /*0x10*/ uint[] SBOX4_4404;
                                static /*0x18*/ uint[] SBOX2_0222;
                                static /*0x20*/ uint[] SBOX3_3033;
                                /*0x10*/ bool initialised;
                                /*0x11*/ bool _keyIs128;
                                /*0x18*/ uint[] subkey;
                                /*0x20*/ uint[] kw;
                                /*0x28*/ uint[] ke;

                                static /*0x3e1b6e8*/ CamelliaEngine();
                                static /*0x3e190d0*/ uint rightRotate(uint x, int s);
                                static /*0x3e190e4*/ uint leftRotate(uint x, int s);
                                static /*0x3e190f8*/ void roldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e19220*/ void decroldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e19348*/ void roldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e19470*/ void decroldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e19598*/ void camelliaF2(uint[] s, uint[] skey, int keyoff);
                                static /*0x3e19880*/ void camelliaFLs(uint[] s, uint[] fkey, int keyoff);
                                /*0x3e1b228*/ CamelliaEngine();
                                /*0x3e199b4*/ void setKey(bool forEncryption, byte[] key);
                                /*0x3e1a6f8*/ int ProcessBlock128(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e1ac70*/ int ProcessBlock192or256(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e1b2c4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e1b3b0*/ int GetBlockSize();
                                /*0x3e1b3b8*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e1b5b4*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class ChaCha7539Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.Salsa20Engine
                            {
                                /*0x3e1b8a8*/ ChaCha7539Engine();
                                /*0x3e1b95c*/ string get_AlgorithmName();
                                /*0x3e1b99c*/ int get_NonceSize();
                                /*0x3e1b9a4*/ void AdvanceCounter();
                                /*0x3e1ba24*/ void ResetCounter();
                                /*0x3e1ba50*/ void SetKey(byte[] keyBytes, byte[] ivBytes);
                                /*0x3e1bc64*/ void GenerateKeyStream(byte[] output);
                                /*0x3e1c444*/ void DoFinal(byte[] inBuf, int inOff, int inLen, byte[] outBuf, int outOff);
                                /*0x3e1c8e8*/ void ProcessBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e1cbf0*/ void ImplProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class ChaChaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.Salsa20Engine
                            {
                                static /*0x3e1bc7c*/ void ChachaCore(int rounds, uint[] input, byte[] output);
                            }

                            class DesEdeEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.DesEngine
                            {
                                /*0x18*/ int[] workingKey1;
                                /*0x20*/ int[] workingKey2;
                                /*0x28*/ int[] workingKey3;
                                /*0x30*/ bool forEncryption;

                                /*0x3e1deb0*/ DesEdeEngine();
                                /*0x3e1cc9c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e1d48c*/ int GetBlockSize();
                                /*0x3e1d494*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e1da78*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class DesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ short[] bytebit;
                                static /*0x8*/ int[] bigbyte;
                                static /*0x10*/ byte[] pc1;
                                static /*0x18*/ byte[] totrot;
                                static /*0x20*/ byte[] pc2;
                                static /*0x28*/ uint[] SP1;
                                static /*0x30*/ uint[] SP2;
                                static /*0x38*/ uint[] SP3;
                                static /*0x40*/ uint[] SP4;
                                static /*0x48*/ uint[] SP5;
                                static /*0x50*/ uint[] SP6;
                                static /*0x58*/ uint[] SP7;
                                static /*0x60*/ uint[] SP8;
                                /*0x10*/ int[] workingKey;

                                static /*0x3e1e5bc*/ DesEngine();
                                static /*0x3e1cf54*/ int[] GenerateWorkingKey(bool encrypting, byte[] key);
                                static /*0x3e1d688*/ void DesFunc(int[] wKey, ref uint hi32, ref uint lo32);
                                /*0x3e1df08*/ DesEngine();
                                /*0x3e1df10*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e1e054*/ int GetBlockSize();
                                /*0x3e1e05c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e1e1ec*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class Gost28147Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] Sbox_Default;
                                static /*0x8*/ byte[] ESbox_Test;
                                static /*0x10*/ byte[] ESbox_A;
                                static /*0x18*/ byte[] ESbox_B;
                                static /*0x20*/ byte[] ESbox_C;
                                static /*0x28*/ byte[] ESbox_D;
                                static /*0x30*/ byte[] DSbox_Test;
                                static /*0x38*/ byte[] DSbox_A;
                                static /*0x40*/ System.Collections.Generic.Dictionary<string, System.Byte[]> m_sBoxes;
                                /*0x10*/ int[] workingKey;
                                /*0x18*/ bool forEncryption;
                                /*0x20*/ byte[] S;

                                static /*0x3e1e9e0*/ Gost28147Engine();
                                static /*0x3e1ee5c*/ void AddSBox(string sBoxName, byte[] sBox);
                                static /*0x3e1fb2c*/ byte[] GetSBox(string sBoxName);
                                /*0x3e1eeec*/ Gost28147Engine();
                                /*0x3e1ef5c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e1f2e4*/ int GetBlockSize();
                                /*0x3e1f2ec*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e1f91c*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e1f1dc*/ int[] GenerateWorkingKey(bool forEncryption, byte[] userKey);
                                /*0x3e1fa30*/ int Gost28147_mainStep(int n1, int key);
                                /*0x3e1f4e0*/ void Gost28147Func(int[] workingKey, System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class RsaBlindedEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa core;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                /*0x3e1fc40*/ RsaBlindedEngine();
                                /*0x3e1fcb4*/ RsaBlindedEngine(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa);
                                /*0x3e1fce4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters param);
                                /*0x3e1ff84*/ int GetInputBlockSize();
                                /*0x3e20028*/ int GetOutputBlockSize();
                                /*0x3e200cc*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                            }

                            class RsaCoreEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters key;
                                /*0x18*/ bool forEncryption;
                                /*0x1c*/ int bitSize;

                                /*0x3e1fcac*/ RsaCoreEngine();
                                /*0x3e2050c*/ void CheckInitialised();
                                /*0x3e20568*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e206d8*/ int GetInputBlockSize();
                                /*0x3e20714*/ int GetOutputBlockSize();
                                /*0x3e20750*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ConvertInput(byte[] inBuf, int inOff, int inLen);
                                /*0x3e2085c*/ byte[] ConvertOutput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger result);
                                /*0x3e20908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ProcessBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger input);
                            }

                            class RsaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa core;

                                /*0x3e20a70*/ RsaEngine();
                                /*0x3e20adc*/ RsaEngine(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa);
                                /*0x3e20b0c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e20bc4*/ int GetInputBlockSize();
                                /*0x3e20c68*/ int GetOutputBlockSize();
                                /*0x3e20d0c*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                            }

                            class Salsa20Engine
                            {
                                static /*0x0*/ int DEFAULT_ROUNDS;
                                static /*0x8*/ uint[] TAU_SIGMA;
                                /*0x10*/ int rounds;
                                /*0x14*/ int index;
                                /*0x18*/ uint[] engineState;
                                /*0x20*/ uint[] x;
                                /*0x28*/ byte[] keyStream;
                                /*0x30*/ bool initialised;
                                /*0x34*/ uint cW0;
                                /*0x38*/ uint cW1;
                                /*0x3c*/ uint cW2;

                                static /*0x3e22294*/ Salsa20Engine();
                                static /*0x3e21914*/ void SalsaCore(int rounds, System.ReadOnlySpan<uint> input, System.Span<uint> output);
                                static /*0x3e221a4*/ void QuarterRound(ref uint a, ref uint b, ref uint c, ref uint d);
                                /*0x3e1b8fc*/ Salsa20Engine();
                                /*0x3e20eb0*/ Salsa20Engine(int rounds);
                                /*0x3e1bb30*/ void PackTauOrSigma(int keyLength, uint[] state, int stateOffset);
                                /*0x3e20fc8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e212bc*/ int get_NonceSize();
                                /*0x3e212c4*/ string get_AlgorithmName();
                                /*0x3e21390*/ void AdvanceCounter();
                                /*0x3e213dc*/ void ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e215e0*/ void Reset();
                                /*0x3e21604*/ void ResetCounter();
                                /*0x3e21630*/ void SetKey(byte[] keyBytes, byte[] ivBytes);
                                /*0x3e21830*/ void GenerateKeyStream(byte[] output);
                                /*0x3e215f8*/ void ResetLimitCounter();
                                /*0x3e1cbb4*/ bool LimitExceeded(uint len);
                            }

                            class SeedEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ uint[] SS0;
                                static /*0x8*/ uint[] SS1;
                                static /*0x10*/ uint[] SS2;
                                static /*0x18*/ uint[] SS3;
                                static /*0x20*/ uint[] KC;
                                /*0x10*/ int[] wKey;
                                /*0x18*/ bool forEncryption;

                                static /*0x3e22f1c*/ SeedEngine();
                                /*0x3e22f14*/ SeedEngine();
                                /*0x3e22470*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e2270c*/ int GetBlockSize();
                                /*0x3e22714*/ int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);
                                /*0x3e22970*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e22528*/ int[] CreateWorkingKey(byte[] inKey);
                                /*0x3e22db0*/ int extractW1(long lVal);
                                /*0x3e22da8*/ int extractW0(long lVal);
                                /*0x3e22eac*/ long rotateLeft8(long x);
                                /*0x3e22ea4*/ long rotateRight8(long x);
                                /*0x3e22db8*/ int G(int x);
                                /*0x3e2290c*/ long F(int ki0, int ki1, long r);
                                /*0x3e22ef4*/ int phaseCalc1(int r0, int ki0, int r1, int ki1);
                                /*0x3e22eb4*/ int phaseCalc2(int r0, int ki0, int r1, int ki1);
                            }

                            class SM4Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] Sbox;
                                static /*0x8*/ uint[] CK;
                                static /*0x10*/ uint[] FK;
                                /*0x10*/ uint[] rk;

                                static /*0x3e244b8*/ SM4Engine();
                                static /*0x3e230dc*/ uint tau(uint A);
                                static /*0x3e231a4*/ uint L_ap(uint B);
                                static /*0x3e237dc*/ uint L(uint B);
                                static /*0x3e23890*/ uint T(uint Z);
                                /*0x3e244b0*/ SM4Engine();
                                /*0x3e23220*/ uint T_ap(uint Z);
                                /*0x3e23278*/ void ExpandKey(bool forEncryption, byte[] key);
                                /*0x3e238e8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e23ab8*/ int GetBlockSize();
                                /*0x3e23ac0*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e23d70*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }
                        }

                        namespace Encodings
                        {
                            class Pkcs1Encoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                static /*0x0*/ bool[] strictLengthEnabled;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine;
                                /*0x20*/ bool forEncryption;
                                /*0x21*/ bool forPrivateKey;
                                /*0x22*/ bool useStrictLength;
                                /*0x24*/ int pLen;
                                /*0x28*/ byte[] fallback;
                                /*0x30*/ byte[] blockBuffer;

                                static /*0x3e2466c*/ Pkcs1Encoding();
                                static /*0x3e245fc*/ bool get_StrictLengthEnabled();
                                static /*0x3e2525c*/ int CheckPkcs1Encoding(byte[] encoded, int pLen);
                                /*0x3e24794*/ Pkcs1Encoding(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher);
                                /*0x3e24820*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e24af4*/ int GetInputBlockSize();
                                /*0x3e24bac*/ int GetOutputBlockSize();
                                /*0x3e24c64*/ byte[] ProcessBlock(byte[] input, int inOff, int length);
                                /*0x3e24f5c*/ byte[] EncodeBlock(byte[] input, int inOff, int inLen);
                                /*0x3e25300*/ byte[] DecodeBlockOrRandom(byte[] input, int inOff, int inLen);
                                /*0x3e24c74*/ byte[] DecodeBlock(byte[] input, int inOff, int inLen);
                                /*0x3e255f8*/ int FindStart(byte type, byte[] block);
                            }
                        }

                        namespace EC
                        {
                            class CustomNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e25a30*/ CustomNamedCurves();
                                static /*0x3e25694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e25784*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e25788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurveGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters p);
                                static /*0x3e2582c*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e25928*/ void DefineCurveAlias(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e269b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e26aa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e26b14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e26a30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class SecP128R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e26d68*/ SecP128R1Holder();
                                    /*0x3e26b8c*/ SecP128R1Holder();
                                    /*0x3e26b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e26c0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2722c*/ SecP160K1Holder();
                                    /*0x3e26dd0*/ SecP160K1Holder();
                                    /*0x3e26dd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e27120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e27470*/ SecP160R1Holder();
                                    /*0x3e27294*/ SecP160R1Holder();
                                    /*0x3e2729c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e27314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e276b4*/ SecP160R2Holder();
                                    /*0x3e274d8*/ SecP160R2Holder();
                                    /*0x3e274e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e27558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP192K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e27b78*/ SecP192K1Holder();
                                    /*0x3e2771c*/ SecP192K1Holder();
                                    /*0x3e27724*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e27a6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP192R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e27dbc*/ SecP192R1Holder();
                                    /*0x3e27be0*/ SecP192R1Holder();
                                    /*0x3e27be8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e27c60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP224K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e28280*/ SecP224K1Holder();
                                    /*0x3e27e24*/ SecP224K1Holder();
                                    /*0x3e27e2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e28174*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP224R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e284c4*/ SecP224R1Holder();
                                    /*0x3e282e8*/ SecP224R1Holder();
                                    /*0x3e282f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e28368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP256K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e28988*/ SecP256K1Holder();
                                    /*0x3e2852c*/ SecP256K1Holder();
                                    /*0x3e28534*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2887c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP256R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e28bcc*/ SecP256R1Holder();
                                    /*0x3e289f0*/ SecP256R1Holder();
                                    /*0x3e289f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e28a70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP384R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e28e10*/ SecP384R1Holder();
                                    /*0x3e28c34*/ SecP384R1Holder();
                                    /*0x3e28c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e28cb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP521R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29054*/ SecP521R1Holder();
                                    /*0x3e28e78*/ SecP521R1Holder();
                                    /*0x3e28e80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e28ef8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT113R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29298*/ SecT113R1Holder();
                                    /*0x3e290bc*/ SecT113R1Holder();
                                    /*0x3e290c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2913c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT113R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e294dc*/ SecT113R2Holder();
                                    /*0x3e29300*/ SecT113R2Holder();
                                    /*0x3e29308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e29380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT131R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29720*/ SecT131R1Holder();
                                    /*0x3e29544*/ SecT131R1Holder();
                                    /*0x3e2954c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e295c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT131R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29964*/ SecT131R2Holder();
                                    /*0x3e29788*/ SecT131R2Holder();
                                    /*0x3e29790*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e29808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29b58*/ SecT163K1Holder();
                                    /*0x3e299cc*/ SecT163K1Holder();
                                    /*0x3e299d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e29a4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29d9c*/ SecT163R1Holder();
                                    /*0x3e29bc0*/ SecT163R1Holder();
                                    /*0x3e29bc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e29c40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e29fe0*/ SecT163R2Holder();
                                    /*0x3e29e04*/ SecT163R2Holder();
                                    /*0x3e29e0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e29e84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT193R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2a224*/ SecT193R1Holder();
                                    /*0x3e2a048*/ SecT193R1Holder();
                                    /*0x3e2a050*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2a0c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT193R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2a468*/ SecT193R2Holder();
                                    /*0x3e2a28c*/ SecT193R2Holder();
                                    /*0x3e2a294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2a30c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT233K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2a65c*/ SecT233K1Holder();
                                    /*0x3e2a4d0*/ SecT233K1Holder();
                                    /*0x3e2a4d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2a550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT233R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2a8a0*/ SecT233R1Holder();
                                    /*0x3e2a6c4*/ SecT233R1Holder();
                                    /*0x3e2a6cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2a744*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT239K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2aa94*/ SecT239K1Holder();
                                    /*0x3e2a908*/ SecT239K1Holder();
                                    /*0x3e2a910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2a988*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT283K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2ac88*/ SecT283K1Holder();
                                    /*0x3e2aafc*/ SecT283K1Holder();
                                    /*0x3e2ab04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2ab7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT283R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2aecc*/ SecT283R1Holder();
                                    /*0x3e2acf0*/ SecT283R1Holder();
                                    /*0x3e2acf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2ad70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT409K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2b0c0*/ SecT409K1Holder();
                                    /*0x3e2af34*/ SecT409K1Holder();
                                    /*0x3e2af3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2afb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT409R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2b304*/ SecT409R1Holder();
                                    /*0x3e2b128*/ SecT409R1Holder();
                                    /*0x3e2b130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2b1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT571K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2b4f8*/ SecT571K1Holder();
                                    /*0x3e2b36c*/ SecT571K1Holder();
                                    /*0x3e2b374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2b3ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT571R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2b73c*/ SecT571R1Holder();
                                    /*0x3e2b560*/ SecT571R1Holder();
                                    /*0x3e2b568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2b5e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SM2P256V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e2b930*/ SM2P256V1Holder();
                                    /*0x3e2b7a4*/ SM2P256V1Holder();
                                    /*0x3e2b7ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e2b824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }
                        }

                        namespace Digests
                        {
                            class Blake2bDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x0*/ ulong[] blake2b_IV;
                                static /*0x8*/ byte[,] blake2b_sigma;
                                /*0x10*/ int digestLength;
                                /*0x14*/ int keyLength;
                                /*0x18*/ byte[] salt;
                                /*0x20*/ byte[] personalization;
                                /*0x28*/ byte[] key;
                                /*0x30*/ byte[] buffer;
                                /*0x38*/ int bufferPos;
                                /*0x40*/ ulong[] internalState;
                                /*0x48*/ ulong[] chainValue;
                                /*0x50*/ ulong t0;
                                /*0x58*/ ulong t1;
                                /*0x60*/ ulong f0;

                                static /*0x3e2cf78*/ Blake2bDigest();
                                static /*0x3e2cf60*/ ulong Rotr64(ulong x, int rot);
                                /*0x3e2b998*/ Blake2bDigest(int digestSize);
                                /*0x3e2baac*/ void Init();
                                /*0x3e2bd38*/ void InitializeInternalState();
                                /*0x3e2be80*/ void Update(byte b);
                                /*0x3e2c4d0*/ void BlockUpdate(byte[] message, int offset, int len);
                                /*0x3e2c5a4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e2c948*/ int DoFinal(byte[] output, int outOffset);
                                /*0x3e2c9f0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2ccd8*/ void Reset();
                                /*0x3e2bf74*/ void Compress(System.ReadOnlySpan<byte> message);
                                /*0x3e2cd58*/ void G(ulong m1, ulong m2, int posA, int posB, int posC, int posD);
                                /*0x3e2cf68*/ int GetDigestSize();
                                /*0x3e2cf70*/ int GetByteLength();
                            }

                            class Blake2sDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x0*/ uint[] blake2s_IV;
                                static /*0x8*/ byte[,] blake2s_sigma;
                                /*0x10*/ int digestLength;
                                /*0x14*/ int keyLength;
                                /*0x18*/ byte[] salt;
                                /*0x20*/ byte[] personalization;
                                /*0x28*/ byte[] key;
                                /*0x30*/ int fanout;
                                /*0x34*/ int depth;
                                /*0x38*/ int leafLength;
                                /*0x40*/ long nodeOffset;
                                /*0x48*/ int nodeDepth;
                                /*0x4c*/ int innerHashLength;
                                /*0x50*/ byte[] buffer;
                                /*0x58*/ int bufferPos;
                                /*0x60*/ uint[] internalState;
                                /*0x68*/ uint[] chainValue;
                                /*0x70*/ uint t0;
                                /*0x74*/ uint t1;
                                /*0x78*/ uint f0;

                                static /*0x3e2e888*/ Blake2sDigest();
                                /*0x3e2d094*/ Blake2sDigest(int digestBits);
                                /*0x3e2d18c*/ void Init(byte[] salt, byte[] personalization, byte[] key);
                                /*0x3e2d620*/ void InitializeInternalState();
                                /*0x3e2d75c*/ void Update(byte b);
                                /*0x3e2dda4*/ void BlockUpdate(byte[] message, int offset, int len);
                                /*0x3e2de78*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e2e21c*/ int DoFinal(byte[] output, int outOffset);
                                /*0x3e2e2c4*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2e594*/ void Reset();
                                /*0x3e2d850*/ void Compress(System.ReadOnlySpan<byte> message);
                                /*0x3e2e624*/ void G(uint m1, uint m2, int posA, int posB, int posC, int posD);
                                /*0x3e2e878*/ int GetDigestSize();
                                /*0x3e2e880*/ int GetByteLength();
                            }

                            class Blake3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof
                            {
                                static /*0x0*/ byte[] SIGMA;
                                static /*0x8*/ uint[] IV;
                                /*0x10*/ byte[] m_theBuffer;
                                /*0x18*/ uint[] m_theK;
                                /*0x20*/ uint[] m_theChaining;
                                /*0x28*/ uint[] m_theV;
                                /*0x30*/ uint[] m_theM;
                                /*0x38*/ byte[] m_theIndices;
                                /*0x40*/ System.Collections.Generic.List<System.UInt32[]> m_theStack;
                                /*0x48*/ int m_theDigestLen;
                                /*0x4c*/ bool m_outputting;
                                /*0x50*/ long m_outputAvailable;
                                /*0x58*/ int m_theMode;
                                /*0x5c*/ int m_theOutputMode;
                                /*0x60*/ int m_theOutputDataLen;
                                /*0x68*/ long m_theCounter;
                                /*0x70*/ int m_theCurrBytes;
                                /*0x74*/ int m_thePos;

                                static /*0x3e30d24*/ Blake3Digest();
                                /*0x3e2e9a4*/ Blake3Digest(int pDigestSize);
                                /*0x3e2ec60*/ Blake3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Blake3Digest pSource);
                                /*0x3e2f104*/ int GetByteLength();
                                /*0x3e2f10c*/ int GetDigestSize();
                                /*0x3e2eb28*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Blake3Parameters pParams);
                                /*0x3e2f3d0*/ void Update(byte b);
                                /*0x3e2f218*/ void BlockUpdate(byte[] pMessage, int pOffset, int pLen);
                                /*0x3e2f568*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e2f2e8*/ int DoFinal(byte[] pOutput, int pOutOffset);
                                /*0x3e2f98c*/ int OutputFinal(byte[] pOut, int pOutOffset, int pOutLen);
                                /*0x3e2fa48*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2f910*/ int OutputFinal(System.Span<byte> output);
                                /*0x3e2facc*/ int Output(System.Span<byte> output);
                                /*0x3e2f114*/ void Reset();
                                /*0x3e2ede0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable pSource);
                                /*0x3e2ff60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e2f50c*/ void CompressBlock(System.ReadOnlySpan<byte> block);
                                /*0x3e3013c*/ void InitM(System.ReadOnlySpan<byte> block);
                                /*0x3e302e4*/ void AdjustStack();
                                /*0x3e2fdd8*/ void CompressFinalBlock(int pDataLen);
                                /*0x3e30584*/ void ProcessStack();
                                /*0x3e301ac*/ void Compress();
                                /*0x3e30940*/ void PerformRound();
                                /*0x3e30838*/ void AdjustChaining();
                                /*0x3e30a48*/ void MixG(int msgIdx, int posA, int posB, int posC, int posD);
                                /*0x3e30708*/ void InitIndices();
                                /*0x3e30750*/ void PermuteIndices();
                                /*0x3e2f1a8*/ void InitNullKey();
                                /*0x3e2f17c*/ void InitKey(byte[] pKey);
                                /*0x3e2f39c*/ void InitKeyFromContext();
                                /*0x3e2ffb8*/ void InitChunkBlock(int pDataLen, bool pFinal);
                                /*0x3e304a4*/ void InitParentBlock();
                                /*0x3e2fe64*/ void NextOutputBlock();
                                /*0x3e30d10*/ void IncrementBlockCount();
                                /*0x3e2ff54*/ void ResetBlockCount();
                                /*0x3e3069c*/ void SetRoot();
                            }

                            class Dstu7564Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] S0;
                                static /*0x8*/ byte[] S1;
                                static /*0x10*/ byte[] S2;
                                static /*0x18*/ byte[] S3;
                                /*0x10*/ int hashSize;
                                /*0x14*/ int blockSize;
                                /*0x18*/ int columns;
                                /*0x1c*/ int rounds;
                                /*0x20*/ ulong[] state;
                                /*0x28*/ ulong[] tempState1;
                                /*0x30*/ ulong[] tempState2;
                                /*0x38*/ ulong inputBlocks;
                                /*0x40*/ int bufOff;
                                /*0x48*/ byte[] buf;

                                static /*0x3e32810*/ Dstu7564Digest();
                                static /*0x3e3266c*/ ulong MixColumn(ulong c);
                                static /*0x3e32720*/ ulong Rotate(int n, ulong x);
                                /*0x3e30e24*/ Dstu7564Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Dstu7564Digest digest);
                                /*0x3e30fa8*/ Dstu7564Digest(int hashSizeBits);
                                /*0x3e30e50*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Dstu7564Digest digest);
                                /*0x3e31134*/ int GetDigestSize();
                                /*0x3e3113c*/ int GetByteLength();
                                /*0x3e31144*/ void Update(byte input);
                                /*0x3e311c0*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e312ec*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e31478*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e31794*/ int DoFinal(System.Span<byte> output);
                                /*0x3e31adc*/ void Reset();
                                /*0x3e31b2c*/ void ProcessBlock(byte[] input, int inOff);
                                /*0x3e31d4c*/ void ProcessBlock(System.ReadOnlySpan<byte> input);
                                /*0x3e316e0*/ void P(ulong[] s);
                                /*0x3e31c7c*/ void Q(ulong[] s);
                                /*0x3e325b0*/ void MixColumns(ulong[] s);
                                /*0x3e31f80*/ void ShiftRows(ulong[] s);
                                /*0x3e323fc*/ void SubBytes(ulong[] s);
                                /*0x3e32728*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e3278c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class GeneralDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                /*0x10*/ byte[] xBuf;
                                /*0x18*/ int xBufOff;
                                /*0x20*/ long byteCount;

                                /*0x3e32984*/ GeneralDigest();
                                /*0x3e329e8*/ GeneralDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest t);
                                /*0x3e32a6c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest t);
                                /*0x3e32ac0*/ void Update(byte input);
                                /*0x3e32b40*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e32cf8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e32ec0*/ void Finish();
                                /*0x3e32f20*/ void Reset();
                                /*0x3e32f50*/ int GetByteLength();
                                /*0x381678c*/ void ProcessWord(byte[] input, int inOff);
                                void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x381630c*/ void ProcessLength(long bitLength);
                                /*0x38159dc*/ void ProcessBlock();
                                /*0x3814574*/ int GetDigestSize();
                                int DoFinal(byte[] output, int outOff);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3816710*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable t);
                                int DoFinal(System.Span<byte> output);
                            }

                            class Gost3411Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] C2;
                                /*0x10*/ byte[] H;
                                /*0x18*/ byte[] L;
                                /*0x20*/ byte[] M;
                                /*0x28*/ byte[] Sum;
                                /*0x30*/ byte[][] C;
                                /*0x38*/ byte[] xBuf;
                                /*0x40*/ int xBufOff;
                                /*0x48*/ ulong byteCount;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x58*/ byte[] sBox;
                                /*0x60*/ byte[] K;
                                /*0x68*/ byte[] a;
                                /*0x70*/ short[] wS;
                                /*0x78*/ short[] w_S;
                                /*0x80*/ byte[] S;
                                /*0x88*/ byte[] U;
                                /*0x90*/ byte[] V;
                                /*0x98*/ byte[] W;

                                static /*0x3e348c0*/ Gost3411Digest();
                                static /*0x3e32f58*/ byte[][] MakeC();
                                static /*0x3e345dc*/ void cpyBytesToShort(byte[] S, short[] wS);
                                static /*0x3e34660*/ void cpyShortToBytes(short[] wS, byte[] S);
                                /*0x3e33014*/ Gost3411Digest();
                                /*0x3e334b8*/ Gost3411Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411Digest t);
                                /*0x3e339f4*/ int GetDigestSize();
                                /*0x3e339fc*/ void Update(byte input);
                                /*0x3e33e34*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e33f64*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e3418c*/ byte[] P(byte[] input);
                                /*0x3e3429c*/ byte[] A(byte[] input);
                                /*0x3e3435c*/ void E(byte[] key, byte[] s, int sOff, byte[] input, int inOff);
                                /*0x3e344d0*/ void fw(byte[] input);
                                /*0x3e33af4*/ void processBlock(byte[] input, int inOff);
                                /*0x3e346fc*/ void Finish();
                                /*0x3e34754*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e347a0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e33358*/ void Reset();
                                /*0x3e33a7c*/ void sumByteArray(byte[] input);
                                /*0x3e34860*/ int GetByteLength();
                                /*0x3e34868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e33710*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Gost3411_2012Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[][] C;
                                static /*0x8*/ byte[] Zero;
                                static /*0x10*/ ulong[][] T;
                                /*0x10*/ byte[] IV;
                                /*0x18*/ byte[] N;
                                /*0x20*/ byte[] Sigma;
                                /*0x28*/ byte[] Ki;
                                /*0x30*/ byte[] m;
                                /*0x38*/ byte[] h;
                                /*0x40*/ byte[] tmp;
                                /*0x48*/ byte[] block;
                                /*0x50*/ int bOff;

                                static /*0x3e36264*/ Gost3411_2012Digest();
                                /*0x3e34960*/ Gost3411_2012Digest(byte[] IV);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e34ad4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e34ebc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e35090*/ int GetByteLength();
                                /*0x3814574*/ int GetDigestSize();
                                /*0x3e34e18*/ void Reset();
                                /*0x3e35098*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                                /*0x3e351e4*/ void Update(byte input);
                                /*0x3e35260*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e353a4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e35598*/ void F(byte[] V);
                                /*0x3e360ec*/ void xor512(byte[] A, byte[] B);
                                /*0x3e36148*/ void E(byte[] K, byte[] m);
                                /*0x3e34c4c*/ void g_N(byte[] h, byte[] N, byte[] m);
                                /*0x3e34ccc*/ void addMod512(byte[] A, int num);
                                /*0x3e34d48*/ void addMod512(byte[] A, byte[] B);
                                /*0x3e34da8*/ void reverse(byte[] src, byte[] dst);
                            }

                            class Gost3411_2012_256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
                            {
                                static /*0x0*/ byte[] IV;

                                static /*0x3e3794c*/ Gost3411_2012_256Digest();
                                /*0x3e375fc*/ Gost3411_2012_256Digest();
                                /*0x3e3768c*/ Gost3411_2012_256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest other);
                                /*0x3e37738*/ int GetDigestSize();
                                /*0x3e37740*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e377d4*/ int DoFinal(System.Span<byte> output);
                                /*0x3e378f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class Gost3411_2012_512Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
                            {
                                static /*0x0*/ byte[] IV;

                                static /*0x3e37b88*/ Gost3411_2012_512Digest();
                                /*0x3e379ec*/ Gost3411_2012_512Digest();
                                /*0x3e37a7c*/ Gost3411_2012_512Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest other);
                                /*0x3e37b28*/ int GetDigestSize();
                                /*0x3e37b30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class KeccakDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ ulong[] KeccakRoundConstants;
                                /*0x10*/ ulong[] state;
                                /*0x18*/ byte[] dataQueue;
                                /*0x20*/ int rate;
                                /*0x24*/ int bitsInQueue;
                                /*0x28*/ int fixedOutputLength;
                                /*0x2c*/ bool squeezing;

                                static /*0x3e39744*/ KeccakDigest();
                                /*0x3e37bfc*/ KeccakDigest(int bitLength);
                                /*0x3e37d54*/ KeccakDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest source);
                                /*0x3e37e00*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest source);
                                /*0x3e37e7c*/ int GetDigestSize();
                                /*0x3e37e88*/ void Update(byte input);
                                /*0x3e37f68*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e380d8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e38440*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e385bc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e38850*/ void Reset();
                                /*0x3e38858*/ int GetByteLength();
                                /*0x3e37ca8*/ void Init(int bitLength);
                                /*0x3e38864*/ void InitSponge(int rate);
                                /*0x3e37e8c*/ void Absorb(byte data);
                                /*0x3e37f6c*/ void Absorb(byte[] data, int off, int len);
                                /*0x3e380dc*/ void Absorb(System.ReadOnlySpan<byte> data);
                                /*0x3e38b7c*/ void AbsorbBits(int data, int bits);
                                /*0x3e38ca0*/ void PadAndSwitchToSqueezingPhase();
                                /*0x3e3847c*/ void Squeeze(byte[] output, int offset, long outputLength);
                                /*0x3e38670*/ void Squeeze(System.Span<byte> output);
                                /*0x3e3895c*/ void KeccakAbsorb(byte[] data, int off);
                                /*0x3e389f8*/ void KeccakAbsorb(System.ReadOnlySpan<byte> data);
                                /*0x3e38e24*/ void KeccakExtract();
                                /*0x3e38e5c*/ void KeccakPermutation();
                                /*0x3e39668*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e396c0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class LongDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ ulong[] K;
                                /*0x10*/ int MyByteLength;
                                /*0x18*/ byte[] xBuf;
                                /*0x20*/ int xBufOff;
                                /*0x28*/ long byteCount1;
                                /*0x30*/ long byteCount2;
                                /*0x38*/ ulong H1;
                                /*0x40*/ ulong H2;
                                /*0x48*/ ulong H3;
                                /*0x50*/ ulong H4;
                                /*0x58*/ ulong H5;
                                /*0x60*/ ulong H6;
                                /*0x68*/ ulong H7;
                                /*0x70*/ ulong H8;
                                /*0x78*/ ulong[] W;
                                /*0x80*/ int wOff;

                                static /*0x3e3a5ac*/ LongDigest();
                                static /*0x3e3a570*/ ulong Ch(ulong x, ulong y, ulong z);
                                static /*0x3e3a590*/ ulong Maj(ulong x, ulong y, ulong z);
                                static /*0x3e3a580*/ ulong Sum0(ulong x);
                                static /*0x3e3a560*/ ulong Sum1(ulong x);
                                static /*0x3e3a550*/ ulong Sigma0(ulong x);
                                static /*0x3e3a540*/ ulong Sigma1(ulong x);
                                /*0x3e397e4*/ LongDigest();
                                /*0x3e3989c*/ LongDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest t);
                                /*0x3e39960*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest t);
                                /*0x3e399fc*/ void Update(byte input);
                                /*0x3e39ae4*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e39bf4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e39e78*/ void Finish();
                                /*0x3e3a4d4*/ void Reset();
                                /*0x3e39a70*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e39d74*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e39ee0*/ void AdjustByteCounts();
                                /*0x3e39f04*/ void ProcessLength(long lowW, long hiW);
                                /*0x3e39f64*/ void ProcessBlock();
                                /*0x3e3a5a4*/ int GetByteLength();
                                /*0x3814574*/ int GetDigestSize();
                                int DoFinal(byte[] output, int outOff);
                                int DoFinal(System.Span<byte> output);
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3816710*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable t);
                            }

                            class MD2Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] S;
                                /*0x10*/ byte[] X;
                                /*0x18*/ int xOff;
                                /*0x20*/ byte[] M;
                                /*0x28*/ int mOff;
                                /*0x30*/ byte[] C;
                                /*0x38*/ int COff;

                                static /*0x3e3b1cc*/ MD2Digest();
                                /*0x3e3a64c*/ MD2Digest();
                                /*0x3e3a7a8*/ MD2Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD2Digest t);
                                /*0x3e3a85c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD2Digest t);
                                /*0x3e3a8f8*/ int GetDigestSize();
                                /*0x3e3a900*/ int GetByteLength();
                                /*0x3e3a908*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e3ac58*/ int DoFinal(System.Span<byte> output);
                                /*0x3e3a6f0*/ void Reset();
                                /*0x3e3adb8*/ void Update(byte input);
                                /*0x3e3ae20*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e3af3c*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e3a9c0*/ void ProcessChecksum(byte[] m);
                                /*0x3e3aad8*/ void ProcessBlock(byte[] m);
                                /*0x3e3b0f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e3b148*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class MD4Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H1;
                                /*0x2c*/ int H2;
                                /*0x30*/ int H3;
                                /*0x34*/ int H4;
                                /*0x38*/ int[] X;
                                /*0x40*/ int xOff;

                                /*0x3e3b26c*/ MD4Digest();
                                /*0x3e3b2e4*/ MD4Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD4Digest t);
                                /*0x3e3b364*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD4Digest t);
                                /*0x3e3b3c0*/ int GetDigestSize();
                                /*0x3e3b3c8*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e3b448*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e3b554*/ void ProcessLength(long bitLength);
                                /*0x3e3b5c0*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e3b650*/ int DoFinal(System.Span<byte> output);
                                /*0x3e3b940*/ void Reset();
                                /*0x3e3b9a0*/ int F(int u, int v, int w);
                                /*0x3e3b9b0*/ int G(int u, int v, int w);
                                /*0x3e3b9c4*/ int H(int u, int v, int w);
                                /*0x3e3b9d0*/ void ProcessBlock();
                                /*0x3e3c658*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e3c6b0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class MD5Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ int S11;
                                static /*0x4*/ int S12;
                                static /*0x8*/ int S13;
                                static /*0xc*/ int S14;
                                static /*0x10*/ int S21;
                                static /*0x14*/ int S22;
                                static /*0x18*/ int S23;
                                static /*0x1c*/ int S24;
                                static /*0x20*/ int S31;
                                static /*0x24*/ int S32;
                                static /*0x28*/ int S33;
                                static /*0x2c*/ int S34;
                                static /*0x30*/ int S41;
                                static /*0x34*/ int S42;
                                static /*0x38*/ int S43;
                                static /*0x3c*/ int S44;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint[] X;
                                /*0x40*/ int xOff;

                                static /*0x3e3db48*/ MD5Digest();
                                static /*0x3e3cec4*/ uint RotateLeft(uint x, int n);
                                static /*0x3e3ced0*/ uint F(uint u, uint v, uint w);
                                static /*0x3e3cee0*/ uint G(uint u, uint v, uint w);
                                static /*0x3e3cef0*/ uint H(uint u, uint v, uint w);
                                static /*0x3e3cefc*/ uint K(uint u, uint v, uint w);
                                /*0x3e3c734*/ MD5Digest();
                                /*0x3e3c7ac*/ MD5Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD5Digest t);
                                /*0x3e3c82c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD5Digest t);
                                /*0x3e3c888*/ int GetDigestSize();
                                /*0x3e3c890*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e3c910*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e3ca1c*/ void ProcessLength(long bitLength);
                                /*0x3e3cae4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e3cb74*/ int DoFinal(System.Span<byte> output);
                                /*0x3e3ce64*/ void Reset();
                                /*0x3e3cf08*/ void ProcessBlock();
                                /*0x3e3da6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e3dac4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class NullDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                /*0x10*/ System.IO.MemoryStream bOut;

                                /*0x3e3e040*/ NullDigest();
                                /*0x3e3dbb4*/ int GetByteLength();
                                /*0x3e3dbbc*/ int GetDigestSize();
                                /*0x3e3dc34*/ void Update(byte b);
                                /*0x3e3dc58*/ void BlockUpdate(byte[] inBytes, int inOff, int len);
                                /*0x3e3dc7c*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e3dca0*/ int DoFinal(byte[] outBytes, int outOff);
                                /*0x3e3de18*/ int DoFinal(System.Span<byte> output);
                                /*0x3e3e018*/ void Reset();
                            }

                            class RipeMD128Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int[] X;
                                /*0x40*/ int xOff;

                                /*0x3e3e0ac*/ RipeMD128Digest();
                                /*0x3e3e124*/ RipeMD128Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD128Digest t);
                                /*0x3e3e1a4*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD128Digest t);
                                /*0x3e3e200*/ int GetDigestSize();
                                /*0x3e3e208*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e3e288*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e3e394*/ void ProcessLength(long bitLength);
                                /*0x3e3e400*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e3e490*/ int DoFinal(System.Span<byte> output);
                                /*0x3e3e780*/ void Reset();
                                /*0x3e3e7e0*/ int RL(int x, int n);
                                /*0x3e3e7ec*/ int F1(int x, int y, int z);
                                /*0x3e3e7f8*/ int F2(int x, int y, int z);
                                /*0x3e3e808*/ int F3(int x, int y, int z);
                                /*0x3e3e814*/ int F4(int x, int y, int z);
                                /*0x3e3e824*/ int F1(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e840*/ int F2(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e86c*/ int F3(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e894*/ int F4(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e8c0*/ int FF1(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e8dc*/ int FF2(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e908*/ int FF3(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e930*/ int FF4(int a, int b, int c, int d, int x, int s);
                                /*0x3e3e95c*/ void ProcessBlock();
                                /*0x3e3f85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e3f8b4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD160Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x40*/ int[] X;
                                /*0x48*/ int xOff;

                                /*0x3e3f938*/ RipeMD160Digest();
                                /*0x3e3f9b0*/ RipeMD160Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD160Digest t);
                                /*0x3e3fa30*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD160Digest t);
                                /*0x3e3fa94*/ int GetDigestSize();
                                /*0x3e3fa9c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e3fb1c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e3fc28*/ void ProcessLength(long bitLength);
                                /*0x3e3fc94*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e3fd38*/ int DoFinal(System.Span<byte> output);
                                /*0x3e400c8*/ void Reset();
                                /*0x3e40134*/ int RL(int x, int n);
                                /*0x3e40140*/ int F1(int x, int y, int z);
                                /*0x3e4014c*/ int F2(int x, int y, int z);
                                /*0x3e4015c*/ int F3(int x, int y, int z);
                                /*0x3e40168*/ int F4(int x, int y, int z);
                                /*0x3e40178*/ int F5(int x, int y, int z);
                                /*0x3e40184*/ void ProcessBlock();
                                /*0x3e41910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e41968*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x3c*/ int H5;
                                /*0x40*/ int H6;
                                /*0x44*/ int H7;
                                /*0x48*/ int[] X;
                                /*0x50*/ int xOff;

                                /*0x3e419f4*/ RipeMD256Digest();
                                /*0x3e41a6c*/ RipeMD256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD256Digest t);
                                /*0x3e419ec*/ int GetDigestSize();
                                /*0x3e41aec*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD256Digest t);
                                /*0x3e41b50*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e41bd0*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e41cdc*/ void ProcessLength(long bitLength);
                                /*0x3e41d48*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e41e28*/ int DoFinal(System.Span<byte> output);
                                /*0x3e42398*/ void Reset();
                                /*0x3e42404*/ int RL(int x, int n);
                                /*0x3e42410*/ int F1(int x, int y, int z);
                                /*0x3e4241c*/ int F2(int x, int y, int z);
                                /*0x3e4242c*/ int F3(int x, int y, int z);
                                /*0x3e42438*/ int F4(int x, int y, int z);
                                /*0x3e42448*/ int F1(int a, int b, int c, int d, int x, int s);
                                /*0x3e42464*/ int F2(int a, int b, int c, int d, int x, int s);
                                /*0x3e42490*/ int F3(int a, int b, int c, int d, int x, int s);
                                /*0x3e424b8*/ int F4(int a, int b, int c, int d, int x, int s);
                                /*0x3e424e4*/ int FF1(int a, int b, int c, int d, int x, int s);
                                /*0x3e42500*/ int FF2(int a, int b, int c, int d, int x, int s);
                                /*0x3e4252c*/ int FF3(int a, int b, int c, int d, int x, int s);
                                /*0x3e42554*/ int FF4(int a, int b, int c, int d, int x, int s);
                                /*0x3e42580*/ void ProcessBlock();
                                /*0x3e434e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e43540*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD320Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x3c*/ int H5;
                                /*0x40*/ int H6;
                                /*0x44*/ int H7;
                                /*0x48*/ int H8;
                                /*0x4c*/ int H9;
                                /*0x50*/ int[] X;
                                /*0x58*/ int xOff;

                                /*0x3e61c2c*/ RipeMD320Digest();
                                /*0x3e61ca4*/ RipeMD320Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD320Digest t);
                                /*0x3e61c24*/ int GetDigestSize();
                                /*0x3e61d24*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD320Digest t);
                                /*0x3e61d90*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e61e10*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e61f1c*/ void ProcessLength(long bitLength);
                                /*0x3e61f88*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e62090*/ int DoFinal(System.Span<byte> output);
                                /*0x3e62740*/ void Reset();
                                /*0x3e627b8*/ int RL(int x, int n);
                                /*0x3e627c4*/ int F1(int x, int y, int z);
                                /*0x3e627d0*/ int F2(int x, int y, int z);
                                /*0x3e627e0*/ int F3(int x, int y, int z);
                                /*0x3e627ec*/ int F4(int x, int y, int z);
                                /*0x3e627fc*/ int F5(int x, int y, int z);
                                /*0x3e62808*/ void ProcessBlock();
                                /*0x3e6400c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e64064*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha1Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x40*/ uint[] X;
                                /*0x48*/ int xOff;

                                static /*0x3e648dc*/ uint F(uint u, uint v, uint w);
                                static /*0x3e648ec*/ uint H(uint u, uint v, uint w);
                                static /*0x3e648f8*/ uint G(uint u, uint v, uint w);
                                /*0x3e640e8*/ Sha1Digest();
                                /*0x3e64160*/ Sha1Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha1Digest t);
                                /*0x3e641e0*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha1Digest t);
                                /*0x3e64244*/ int GetDigestSize();
                                /*0x3e6424c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e642cc*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e643dc*/ void ProcessLength(long bitLength);
                                /*0x3e64448*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e644ec*/ int DoFinal(System.Span<byte> output);
                                /*0x3e64890*/ void Reset();
                                /*0x3e6490c*/ void ProcessBlock();
                                /*0x3e64e28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e64e80*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha224Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] K;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x3c*/ uint H6;
                                /*0x40*/ uint H7;
                                /*0x44*/ uint H8;
                                /*0x48*/ uint[] X;
                                /*0x50*/ int xOff;

                                static /*0x3e65ef8*/ Sha224Digest();
                                static /*0x3e65de8*/ uint Ch(uint x, uint y, uint z);
                                static /*0x3e65e08*/ uint Maj(uint x, uint y, uint z);
                                static /*0x3e65df8*/ uint Sum0(uint x);
                                static /*0x3e65dd8*/ uint Sum1(uint x);
                                static /*0x3e65dc8*/ uint Theta0(uint x);
                                static /*0x3e65db8*/ uint Theta1(uint x);
                                /*0x3e64f04*/ Sha224Digest();
                                /*0x3e64f7c*/ Sha224Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha224Digest t);
                                /*0x3e64ffc*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha224Digest t);
                                /*0x3e65060*/ int GetDigestSize();
                                /*0x3e65068*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e650e8*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e651f8*/ void ProcessLength(long bitLength);
                                /*0x3e65264*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e65330*/ int DoFinal(System.Span<byte> output);
                                /*0x3e6581c*/ void Reset();
                                /*0x3e65868*/ void ProcessBlock();
                                /*0x3e65e1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e65e74*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] K;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x3c*/ uint H6;
                                /*0x40*/ uint H7;
                                /*0x44*/ uint H8;
                                /*0x48*/ uint[] X;
                                /*0x50*/ int xOff;

                                static /*0x3e67068*/ Sha256Digest();
                                static /*0x3e66f48*/ uint Sum1Ch(uint x, uint y, uint z);
                                static /*0x3e66f68*/ uint Sum0Maj(uint x, uint y, uint z);
                                static /*0x3e66f38*/ uint Theta0(uint x);
                                static /*0x3e66f28*/ uint Theta1(uint x);
                                /*0x3e65f98*/ Sha256Digest();
                                /*0x3e66034*/ Sha256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha256Digest t);
                                /*0x3e660b4*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha256Digest t);
                                /*0x3e66118*/ int GetDigestSize();
                                /*0x3e66120*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e661a0*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e662b0*/ void ProcessLength(long bitLength);
                                /*0x3e6631c*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e663fc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e6698c*/ void Reset();
                                /*0x3e66018*/ void initHs();
                                /*0x3e669d8*/ void ProcessBlock();
                                /*0x3e66f8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e66fe4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha384Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x3e67108*/ Sha384Digest();
                                /*0x3e67160*/ Sha384Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha384Digest t);
                                /*0x3e671c8*/ int GetDigestSize();
                                /*0x3e671d0*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e67288*/ int DoFinal(System.Span<byte> output);
                                /*0x3e676d0*/ void Reset();
                                /*0x3e67718*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e67770*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest
                            {
                                static /*0x3e677f8*/ int CheckBitLength(int bitLength);
                                /*0x3e678b8*/ Sha3Digest(int bitLength);
                                /*0x3e67930*/ Sha3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha3Digest source);
                                /*0x3e67998*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e679d8*/ int DoFinal(System.Span<byte> output);
                                /*0x3e67a18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class Sha512Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x3e67a70*/ Sha512Digest();
                                /*0x3e67ac8*/ Sha512Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha512Digest t);
                                /*0x3e67b30*/ int GetDigestSize();
                                /*0x3e67b38*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e67c18*/ int DoFinal(System.Span<byte> output);
                                /*0x3e681a8*/ void Reset();
                                /*0x3e681f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e68248*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha512tDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x84*/ int digestLength;
                                /*0x88*/ ulong H1t;
                                /*0x90*/ ulong H2t;
                                /*0x98*/ ulong H3t;
                                /*0xa0*/ ulong H4t;
                                /*0xa8*/ ulong H5t;
                                /*0xb0*/ ulong H6t;
                                /*0xb8*/ ulong H7t;
                                /*0xc0*/ ulong H8t;

                                static /*0x3e6874c*/ void UInt64_To_BE(ulong n, byte[] bs, int off, int max);
                                static /*0x3e68970*/ void UInt32_To_BE(uint n, byte[] bs, int off, int max);
                                static /*0x3e688cc*/ void UInt64_To_BE(ulong n, System.Span<byte> bs, int off, int max);
                                static /*0x3e68a30*/ void UInt32_To_BE(uint n, System.Span<byte> bs, int off, int max);
                                /*0x3e682d0*/ Sha512tDigest(int bitLength);
                                /*0x3e685b8*/ Sha512tDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha512tDigest t);
                                /*0x3e68648*/ int GetDigestSize();
                                /*0x3e68650*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e687b0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e68938*/ void Reset();
                                /*0x3e6842c*/ void tIvGenerate(int bitLength);
                                /*0x3e68ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e68b3c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class ShakeDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x3e68c44*/ int CheckBitLength(int bitLength);
                                /*0x3e68ce8*/ ShakeDigest(int bitLength);
                                /*0x3e68d60*/ ShakeDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.ShakeDigest source);
                                /*0x3e68dc8*/ int GetDigestSize();
                                /*0x3e68dd4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e68e24*/ int OutputFinal(byte[] output, int outOff, int outLen);
                                /*0x3e68e68*/ int Output(byte[] output, int outOff, int outLen);
                                /*0x3e68ecc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e68f70*/ int OutputFinal(System.Span<byte> output);
                                /*0x3e68fb4*/ int Output(System.Span<byte> output);
                                /*0x3e69030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class SM3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] T;
                                /*0x28*/ uint[] V;
                                /*0x30*/ uint[] inwords;
                                /*0x38*/ int xOff;
                                /*0x40*/ uint[] W;

                                static /*0x3e69088*/ SM3Digest();
                                /*0x3e69184*/ SM3Digest();
                                /*0x3e69234*/ SM3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.SM3Digest t);
                                /*0x3e692ec*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.SM3Digest t);
                                /*0x3e69358*/ int GetDigestSize();
                                /*0x3e69360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e693b8*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                                /*0x3e6944c*/ void Reset();
                                /*0x3e69518*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e6956c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e695fc*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e6967c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e6978c*/ void ProcessLength(long bitLength);
                                /*0x3e69880*/ uint P0(uint x);
                                /*0x3e6988c*/ uint P1(uint x);
                                /*0x3e69898*/ uint FF0(uint x, uint y, uint z);
                                /*0x3e698a4*/ uint FF1(uint x, uint y, uint z);
                                /*0x3e698b8*/ uint GG0(uint x, uint y, uint z);
                                /*0x3e698c4*/ uint GG1(uint x, uint y, uint z);
                                /*0x3e698d4*/ void ProcessBlock();
                            }

                            class TigerDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ long[] t1;
                                static /*0x8*/ long[] t2;
                                static /*0x10*/ long[] t3;
                                static /*0x18*/ long[] t4;
                                /*0x10*/ long a;
                                /*0x18*/ long b;
                                /*0x20*/ long c;
                                /*0x28*/ long byteCount;
                                /*0x30*/ byte[] m_buffer;
                                /*0x38*/ int bOff;
                                /*0x40*/ long[] x;
                                /*0x48*/ int xOff;

                                static /*0x3e6b0c8*/ TigerDigest();
                                /*0x3e69cb0*/ TigerDigest();
                                /*0x3e69df8*/ TigerDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.TigerDigest t);
                                /*0x3e69f8c*/ int GetDigestSize();
                                /*0x3e69f94*/ int GetByteLength();
                                /*0x3e69f9c*/ void ProcessWord(byte[] b, int off);
                                /*0x3e6a3fc*/ void ProcessWord(System.ReadOnlySpan<byte> b);
                                /*0x3e6a4fc*/ void Update(byte input);
                                /*0x3e6a56c*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e6a670*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e6a7f0*/ void RoundABC(long x, long mul);
                                /*0x3e6a974*/ void RoundBCA(long x, long mul);
                                /*0x3e6aaf4*/ void RoundCAB(long x, long mul);
                                /*0x3e6ac74*/ void KeySchedule();
                                /*0x3e6a018*/ void ProcessBlock();
                                /*0x3e6ad50*/ void ProcessLength(long bitLength);
                                /*0x3e6ad7c*/ void Finish();
                                /*0x3e6adc4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e6ae30*/ int DoFinal(System.Span<byte> output);
                                /*0x3e69d54*/ void Reset();
                                /*0x3e6b070*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e69ea4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class WhirlpoolDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ int[] SBOX;
                                static /*0x8*/ ulong[] C0;
                                static /*0x10*/ ulong[] C1;
                                static /*0x18*/ ulong[] C2;
                                static /*0x20*/ ulong[] C3;
                                static /*0x28*/ ulong[] C4;
                                static /*0x30*/ ulong[] C5;
                                static /*0x38*/ ulong[] C6;
                                static /*0x40*/ ulong[] C7;
                                static /*0x48*/ short[] EIGHT;
                                /*0x10*/ ulong[] _rc;
                                /*0x18*/ byte[] _buffer;
                                /*0x20*/ int _bufferPos;
                                /*0x28*/ short[] _bitCount;
                                /*0x30*/ ulong[] _hash;
                                /*0x38*/ ulong[] _K;
                                /*0x40*/ ulong[] _L;
                                /*0x48*/ ulong[] _block;
                                /*0x50*/ ulong[] _state;

                                static /*0x3e6b23c*/ WhirlpoolDigest();
                                static /*0x3e6b6e0*/ int MulX(int input);
                                static /*0x3e6b6f4*/ ulong PackIntoUInt64(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0);
                                /*0x3e6b728*/ WhirlpoolDigest();
                                /*0x3e6ba3c*/ WhirlpoolDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest originalDigest);
                                /*0x3e6bd14*/ int GetDigestSize();
                                /*0x3e6bd1c*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e6bef4*/ int DoFinal(System.Span<byte> output);
                                /*0x3e6be38*/ void Reset();
                                /*0x3e6bf74*/ void ProcessFilledBuffer();
                                /*0x3e6bfbc*/ void ProcessBlock();
                                /*0x3e6c648*/ void Update(byte input);
                                /*0x3e6c6ac*/ void Increment();
                                /*0x3e6c790*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e6c7fc*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e6bd60*/ void Finish();
                                /*0x3e6c864*/ byte[] CopyBitLength();
                                /*0x3e6c90c*/ int GetByteLength();
                                /*0x3e6c914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e6bbac*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }
                        }

                        namespace Agreement
                        {
                            class DHBasicAgreement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters key;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams;

                                /*0x3e6cd34*/ DHBasicAgreement();
                                /*0x3e6c96c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e6cac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters pubKey);
                            }

                            class ECDHBasicAgreement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privKey;

                                /*0x3e6d0e0*/ ECDHBasicAgreement();
                                /*0x3e6cd3c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e6ce34*/ int GetFieldSize();
                                /*0x3e6ce7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters pubKey);
                            }

                            namespace Srp
                            {
                                class Srp6Client
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger privA;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pubA;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;
                                    /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u;
                                    /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger S;
                                    /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                    /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                    /*0x3e6d0e8*/ Srp6Client();
                                    /*0x3e6d0f0*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    /*0x3e6d150*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters group, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    /*0x3e6d17c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password);
                                    /*0x3e6d354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                    /*0x3e6d57c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SelectPrivateValue();
                                    /*0x3e6d4ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateS();
                                }

                                class Srp6Utilities
                                {
                                    static /*0x3e6d6b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateK(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                    static /*0x3e6d4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateU(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger A, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B);
                                    static /*0x3e6d214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, byte[] salt, byte[] identity, byte[] password);
                                    static /*0x3e6db2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, System.ReadOnlySpan<byte> salt, System.ReadOnlySpan<byte> identity, System.ReadOnlySpan<byte> password);
                                    static /*0x3e6d588*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GeneratePrivateValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    static /*0x3e6d3c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePublicValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                                    static /*0x3e6d6c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger HashPaddedPair(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n2);
                                }
                            }
                        }
                    }

                    namespace Asn1
                    {
                        interface Asn1BitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x38148bc*/ System.IO.Stream GetBitStream();
                            /*0x3814574*/ int get_PadBits();
                        }

                        class Asn1Encodable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x3e6e664*/ Asn1Encodable();
                            /*0x3e6e2b4*/ void EncodeTo(System.IO.Stream output);
                            /*0x3e6e2e8*/ void EncodeTo(System.IO.Stream output, string encoding);
                            /*0x3e6e32c*/ byte[] GetEncoded();
                            /*0x3e6e3bc*/ byte[] GetEncoded(string encoding);
                            /*0x3e6e45c*/ byte[] GetDerEncoded();
                            /*0x3e6e51c*/ int GetHashCode();
                            /*0x3e6e550*/ bool Equals(object obj);
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class Asn1EncodableVector : System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] EmptyElements;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;
                            /*0x18*/ int elementCount;
                            /*0x1c*/ bool copyOnWrite;

                            static /*0x3e6ef98*/ Asn1EncodableVector();
                            static /*0x3e6eee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] CloneElements(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6e66c*/ Asn1EncodableVector();
                            /*0x3e6e674*/ Asn1EncodableVector(int initialCapacity);
                            /*0x3e6e788*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e6e8ac*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e6e8e8*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] v);
                            /*0x3e6e7b4*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e6ea58*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e6e914*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] objs);
                            /*0x3e6ea80*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e6ea8c*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e6eacc*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6eb38*/ void AddOptionalTagged(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6ebec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x3e6ecb4*/ int get_Count();
                            /*0x3e6ecbc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x3e6ecc0*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x3e6ed68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] CopyElements();
                            /*0x3e6ee14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] TakeElements();
                            /*0x3e6e980*/ void Reallocate(int minCapacity);
                        }

                        class Asn1Exception : System.IO.IOException
                        {
                            /*0x3e6f00c*/ Asn1Exception();
                            /*0x3e6f014*/ Asn1Exception(string message);
                            /*0x3e6f01c*/ Asn1Exception(string message, System.Exception innerException);
                            /*0x3e6f024*/ Asn1Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Asn1GeneralizedTime : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string m_timeString;
                            /*0x18*/ bool m_timeStringCanonical;
                            /*0x20*/ System.DateTime m_dateTime;

                            static /*0x3e6fb9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1GeneralizedTime CreatePrimitive(byte[] contents);
                            static /*0x3e6f1b0*/ System.DateTime FromString(string s);
                            static /*0x3e6fc98*/ int IndexOfSign(string s, int startIndex);
                            static /*0x3e6fd3c*/ System.DateTime ParseLocal(string s, string format);
                            static /*0x3e6fde0*/ System.DateTime ParseTimeZone(string s, string format);
                            static /*0x3e6fbf4*/ System.DateTime ParseUtc(string s, string format);
                            static /*0x3e6f824*/ string ToStringCanonical(System.DateTime dateTime);
                            /*0x3e6f02c*/ Asn1GeneralizedTime(string timeString);
                            /*0x3e6f768*/ Asn1GeneralizedTime(byte[] contents);
                            /*0x3e6f7b0*/ System.DateTime ToDateTime();
                            /*0x3e6f7b8*/ byte[] GetContents(int encoding);
                            /*0x3e6f8e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6f9bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e6fa58*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6fb30*/ int Asn1GetHashCode();
                        }

                        class Asn1InputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.FilterStream
                        {
                            /*0x30*/ int limit;
                            /*0x38*/ byte[][] tmpBuffers;

                            static /*0x3e711e0*/ int ReadTagNumber(System.IO.Stream s, int tagHdr);
                            static /*0x3e71330*/ int ReadLength(System.IO.Stream s, int limit, bool isParsing);
                            static /*0x3e72180*/ byte[] GetBuffer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn, byte[][] tmpBuffers);
                            static /*0x3e72438*/ char[] GetBmpCharBuffer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            static /*0x3e70334*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreatePrimitiveDerObject(int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn, byte[][] tmpBuffers);
                            /*0x3e6fe84*/ Asn1InputStream(byte[] input);
                            /*0x3e6ff00*/ Asn1InputStream(System.IO.Stream input, int limit);
                            /*0x3e6ff80*/ Asn1InputStream(System.IO.Stream input, int limit, byte[][] tmpBuffers);
                            /*0x3e6ffb8*/ void Dispose(bool disposing);
                            /*0x3e6ffec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object BuildObject(int tagHdr, int tagNo, int length);
                            /*0x3e7071c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadTaggedObjectDL(int tagClass, int tagNo, bool constructed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e70ba0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector();
                            /*0x3e70f7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e71058*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence CreateDLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e710d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set CreateDLSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e70c44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadObject();
                            /*0x3e71980*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString BuildConstructedBitString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            /*0x3e71dcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString BuildConstructedOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                        }

                        class Asn1Null : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x3e72fcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Null CreatePrimitive(byte[] contents);
                            /*0x3e73484*/ Asn1Null();
                            /*0x3e7348c*/ string ToString();
                        }

                        class Asn1Object : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                        {
                            static /*0x3e737c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromByteArray(byte[] data);
                            /*0x3e6f1a8*/ Asn1Object();
                            /*0x3e734cc*/ void EncodeTo(System.IO.Stream output);
                            /*0x3e73608*/ void EncodeTo(System.IO.Stream output, string encoding);
                            /*0x3e737a4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object other);
                            /*0x3e739b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            /*0x3814964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x38141c4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3814574*/ int Asn1GetHashCode();
                            /*0x3e6e658*/ bool CallAsn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object obj);
                            /*0x3e6e544*/ int CallAsn1GetHashCode();
                        }

                        class Asn1ObjectDescriptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString m_baseGraphicString;

                            static /*0x3e730dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1ObjectDescriptor CreatePrimitive(byte[] contents);
                            /*0x3e739bc*/ Asn1ObjectDescriptor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString baseGraphicString);
                            /*0x3e73a38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e73a60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e73a80*/ int Asn1GetHashCode();
                            /*0x3e73aa8*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class Asn1OctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            static /*0x0*/ byte[] EmptyOctets;
                            /*0x10*/ byte[] contents;

                            static /*0x3e742a8*/ Asn1OctetString();
                            static /*0x3e73b38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString GetInstance(object obj);
                            static /*0x3e73e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            static /*0x3e73144*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString CreatePrimitive(byte[] contents);
                            /*0x3e73fe0*/ Asn1OctetString(byte[] contents);
                            /*0x3e7405c*/ System.IO.Stream GetOctetStream();
                            /*0x3e740c0*/ byte[] GetOctets();
                            /*0x3e740c8*/ int Asn1GetHashCode();
                            /*0x3e7413c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e74224*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e74410*/ Meta();
                                /*0x3e7431c*/ Meta();
                                /*0x3e743e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                                /*0x3e743e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }
                        }

                        interface Asn1OctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x38148bc*/ System.IO.Stream GetOctetStream();
                        }

                        class Asn1OutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.FilterStream
                        {
                            static /*0x3e735a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream Create(System.IO.Stream output);
                            static /*0x3e736f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream Create(System.IO.Stream output, string encoding);
                            static /*0x3e747ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] GetContentsEncodings(int encoding, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            static /*0x3e74900*/ int GetLengthOfContents(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsEncodings);
                            static /*0x3e74a00*/ int GetLengthOfDL(int dl);
                            static /*0x3e74a34*/ int GetLengthOfIdentifier(int tagNo);
                            /*0x3e74474*/ Asn1OutputStream(System.IO.Stream os);
                            /*0x3e74484*/ void EncodeContents(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsEncodings);
                            /*0x3e74578*/ int get_Encoding();
                            /*0x3e73604*/ void FlushInternal();
                            /*0x3e74580*/ void WriteDL(int dl);
                            /*0x3e7467c*/ void WriteIdentifier(int tagClass, int tagNo);
                        }

                        class Asn1ParsingException : System.InvalidOperationException
                        {
                            /*0x3e74a68*/ Asn1ParsingException();
                            /*0x3e74a70*/ Asn1ParsingException(string message);
                            /*0x3e74a78*/ Asn1ParsingException(string message, System.Exception innerException);
                            /*0x3e74a80*/ Asn1ParsingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Asn1RelativeOid : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string identifier;
                            /*0x18*/ byte[] contents;

                            static /*0x3e731f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1RelativeOid CreatePrimitive(byte[] contents, bool clone);
                            static /*0x3e7557c*/ bool IsValidIdentifier(string identifier, int from);
                            static /*0x3e751d8*/ void WriteField(System.IO.Stream outputStream, long fieldValue);
                            static /*0x3e75328*/ void WriteField(System.IO.Stream outputStream, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger fieldValue);
                            static /*0x3e74b2c*/ string ParseContents(byte[] contents);
                            /*0x3e74a88*/ Asn1RelativeOid(byte[] contents, bool clone);
                            /*0x3e74d0c*/ string ToString();
                            /*0x3e74d14*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e74da4*/ int Asn1GetHashCode();
                            /*0x3e74dc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e74f94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e75020*/ void DoOutput(System.IO.MemoryStream bOut);
                            /*0x3e74e48*/ byte[] GetContents();
                        }

                        class Asn1Sequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;

                            static /*0x3e7566c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence GetInstance(object obj);
                            static /*0x3e759a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            /*0x3e75a6c*/ Asn1Sequence();
                            /*0x3e75adc*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e75bd8*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e75d34*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e75e2c*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e75eb0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x3e75ec0*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x3e75f60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x3e75f90*/ int get_Count();
                            /*0x3814a3c*/ T[] MapElements<T>(System.Func<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, T> func);
                            /*0x3e75fac*/ int Asn1GetHashCode();
                            /*0x3e76038*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e761a8*/ string ToString();
                            /*0x3e761f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] GetConstructedOctetStrings();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e76320*/ Meta();
                                /*0x3e762a4*/ Meta();
                                /*0x3e76318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }
                        }

                        class Asn1Set : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;
                            /*0x18*/ bool isSorted;

                            static /*0x3e76384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set GetInstance(object obj);
                            static /*0x3e76820*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] Sort(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e766c0*/ Asn1Set();
                            /*0x3e7673c*/ Asn1Set(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector, bool doSort);
                            /*0x3e7694c*/ Asn1Set(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e769a8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x3e769b8*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x3e76a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x3e76a88*/ int get_Count();
                            /*0x3e76aa4*/ int Asn1GetHashCode();
                            /*0x3e76b30*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e76ca0*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e76d8c*/ Meta();
                                /*0x3e76cf0*/ Meta();
                                /*0x3e76d64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }

                            class DerComparer : System.Collections.Generic.IComparer<System.Byte[]>
                            {
                                /*0x3e76ce8*/ DerComparer();
                                /*0x3e76df0*/ int Compare(byte[] a, byte[] b);
                            }
                        }

                        class Asn1StreamParser
                        {
                            /*0x10*/ System.IO.Stream _in;
                            /*0x18*/ int _limit;
                            /*0x20*/ byte[][] tmpBuffers;

                            /*0x3e715a8*/ Asn1StreamParser(System.IO.Stream input, int limit, byte[][] tmpBuffers);
                            /*0x3e76f84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ReadObject();
                            /*0x3e76fc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ImplParseObject(int tagHdr);
                            /*0x3e778e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object LoadTaggedDL(int tagClass, int tagNo, bool constructed);
                            /*0x3e71674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object LoadTaggedIL(int tagClass, int tagNo);
                            /*0x3e77768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitConstructedDL(int univTagNo);
                            /*0x3e7738c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitConstructedIL(int univTagNo);
                            /*0x3e77504*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitPrimitive(int univTagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e779a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector();
                            /*0x3e772a4*/ void Set00Check(bool enabled);
                        }

                        class Asn1Tag
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;

                            static /*0x3e77dac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Tag Create(int tagClass, int tagNo);
                            /*0x3e77e14*/ Asn1Tag(int tagClass, int tagNo);
                        }

                        class Asn1TaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ int explicitness;
                            /*0x14*/ int tagClass;
                            /*0x18*/ int tagNo;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj;

                            static /*0x3e77e40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject GetInstance(object obj);
                            static /*0x3e70ab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreateConstructedDL(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            static /*0x3e77af4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreateConstructedIL(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            static /*0x3e70a10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreatePrimitive(int tagClass, int tagNo, byte[] contentsOctets);
                            static /*0x3e780f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject CheckedCast(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e781e0*/ Asn1TaggedObject(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e781fc*/ Asn1TaggedObject(bool isExplicit, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e7820c*/ Asn1TaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e78380*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e785ac*/ int Asn1GetHashCode();
                            /*0x3e7864c*/ int get_TagClass();
                            /*0x3e78654*/ int get_TagNo();
                            /*0x3e7858c*/ bool IsExplicit();
                            /*0x3e7865c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetObject();
                            /*0x3e786d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetBaseObject();
                            /*0x3e786d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExplicitBaseObject();
                            /*0x3e78740*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetBaseUniversal(bool declaredExplicit, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType universalType);
                            /*0x3e789ec*/ string ToString();
                            /*0x3814a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class Asn1Type
                        {
                            /*0x10*/ System.Type m_platformType;

                            /*0x3e78ba4*/ Asn1Type(System.Type platformType);
                            /*0x3e78bd4*/ System.Type get_PlatformType();
                            /*0x3e78bdc*/ bool Equals(object that);
                            /*0x3e78be8*/ int GetHashCode();
                        }

                        class Asn1UniversalType : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Type
                        {
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Tag m_tag;

                            /*0x3e74390*/ Asn1UniversalType(System.Type platformType, int tagNo);
                            /*0x3e7893c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CheckedCast(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e78bf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            /*0x3e78c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            /*0x3e73e74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromByteArray(byte[] bytes);
                            /*0x3e73f58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetContextInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                        }

                        class Asn1UtcTime : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string m_timeString;
                            /*0x18*/ System.DateTime m_dateTime;
                            /*0x20*/ bool m_dateTimeLocked;
                            /*0x24*/ int m_twoDigitYearMax;

                            static /*0x3e73318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UtcTime CreatePrimitive(byte[] contents);
                            static /*0x3e78e08*/ System.DateTime FromString(string s, ref int twoDigitYearMax);
                            static /*0x3e79154*/ bool InRange(System.DateTime dateTime, int twoDigitYearMax);
                            static /*0x3e79238*/ string ToStringCanonical(System.DateTime dateTime);
                            /*0x3e78c88*/ Asn1UtcTime(string timeString);
                            /*0x3e78fd4*/ Asn1UtcTime(byte[] contents);
                            /*0x3e7901c*/ System.DateTime ToDateTime(int twoDigitYearMax);
                            /*0x3e791c8*/ byte[] GetContents(int encoding);
                            /*0x3e792e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e79378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e79414*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e794ec*/ int Asn1GetHashCode();
                            /*0x3e79558*/ string ToString();
                        }

                        class Asn1Utilities
                        {
                            static /*0x3e78a38*/ string GetTagText(int tagClass, int tagNo);
                        }

                        class BerBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                        {
                            /*0x18*/ int segmentLimit;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString[] elements;

                            static /*0x3e71b5c*/ byte[] FlattenBitStrings(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString[] bitStrings);
                            /*0x3e79560*/ BerBitString(byte[] data, int padBits);
                            /*0x3e79568*/ BerBitString(byte[] data, int padBits, int segmentLimit);
                            /*0x3e7975c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e79968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerBitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.ConstructedBitStream m_bitStream;

                            static /*0x3e716a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerBitString Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e77be0*/ BerBitStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e79b44*/ System.IO.Stream GetBitStream();
                            /*0x3e79c10*/ int get_PadBits();
                            /*0x3e79c2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerOctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString
                        {
                            /*0x18*/ int segmentLimit;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements;

                            static /*0x3e71fa4*/ byte[] FlattenOctetStrings(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] octetStrings);
                            /*0x3e79d28*/ BerOctetString(byte[] contents);
                            /*0x3e79d88*/ BerOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements);
                            /*0x3e79d54*/ BerOctetString(byte[] contents, int segmentLimit);
                            /*0x3e79d90*/ BerOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements, int segmentLimit);
                            /*0x3e79dd8*/ BerOctetString(byte[] contents, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements, int segmentLimit);
                            /*0x3e79e10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e79f50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerOctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x3e71764*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerOctetString Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e77c40*/ BerOctetStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e7a0ac*/ System.IO.Stream GetOctetStream();
                            /*0x3e7a158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence Empty;

                            static /*0x3e7a7dc*/ BerSequence();
                            static /*0x3e78b18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e7a2b8*/ BerSequence();
                            /*0x3e7a310*/ BerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e7a254*/ BerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e7a37c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7a494*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7a5d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x3e7a6a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x3e7a710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class BerSequenceParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x3e71830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e77cd0*/ BerSequenceParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e7a840*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSet Empty;

                            static /*0x3e7ab7c*/ BerSet();
                            /*0x3e7a848*/ BerSet();
                            /*0x3e7a8a0*/ BerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e7a770*/ BerSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e7a918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7aa38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerSetParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x3e718a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSet Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e77d00*/ BerSetParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e7abe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerTaggedObject
                        {
                            /*0x3e78ba0*/ BerTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e7abec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7aec0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7b18c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class BerTaggedObjectParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x3e77348*/ BerTaggedObjectParser(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e7b1e4*/ int get_TagClass();
                            /*0x3e7b1ec*/ int get_TagNo();
                            /*0x3e7b1f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class ConstructedBitStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x30*/ bool m_octetAligned;
                            /*0x31*/ bool m_first;
                            /*0x34*/ int m_padBits;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser m_currentParser;
                            /*0x40*/ System.IO.Stream m_currentStream;

                            /*0x3e79bcc*/ ConstructedBitStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser, bool octetAligned);
                            /*0x3e7b2f4*/ int get_PadBits();
                            /*0x3e7b2fc*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3e7b3d8*/ int Read(System.Span<byte> buffer);
                            /*0x3e7b844*/ int ReadByte();
                            /*0x3e7b6c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser GetNextParser();
                        }

                        class ConstructedDLEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] m_contentsElements;
                            /*0x20*/ int m_contentsLength;

                            /*0x3e7ba68*/ ConstructedDLEncoding(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsElements);
                            /*0x3e7babc*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e7bb04*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class ConstructedILEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] m_contentsElements;

                            /*0x3e79924*/ ConstructedILEncoding(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsElements);
                            /*0x3e7bb74*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e7bbf8*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class ConstructedOctetStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x30*/ bool m_first;
                            /*0x38*/ System.IO.Stream m_currentStream;

                            /*0x3e7a120*/ ConstructedOctetStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e7bc40*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3e7bd1c*/ int Read(System.Span<byte> buffer);
                            /*0x3e7c078*/ int ReadByte();
                            /*0x3e7bf78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser GetNextParser();
                        }

                        class DefiniteLengthInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.LimitedInputStream
                        {
                            static /*0x0*/ byte[] EmptyBytes;
                            /*0x34*/ int _originalLength;
                            /*0x38*/ int _remaining;

                            static /*0x3e7c6f4*/ DefiniteLengthInputStream();
                            /*0x3e70274*/ DefiniteLengthInputStream(System.IO.Stream inStream, int length, int limit);
                            /*0x3e7c29c*/ int get_Remaining();
                            /*0x3e7c2a4*/ int ReadByte();
                            /*0x3e7c3cc*/ int Read(byte[] buf, int off, int len);
                            /*0x3e7c540*/ int Read(System.Span<byte> buffer);
                            /*0x3e72250*/ void ReadAllIntoByteArray(byte[] buf);
                            /*0x3e7080c*/ byte[] ToArray();
                        }

                        class DerBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            static /*0x0*/ char[] table;
                            /*0x10*/ byte[] contents;

                            static /*0x3e7d21c*/ DerBitString();
                            static /*0x3e7c768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString GetInstance(object obj);
                            static /*0x3e7c9f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool isExplicit);
                            static /*0x3e72d00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString CreatePrimitive(byte[] contents);
                            /*0x3e7cb08*/ DerBitString(byte[] data);
                            /*0x3e795f8*/ DerBitString(byte[] data, int padBits);
                            /*0x3e7cb18*/ DerBitString(byte[] contents, bool check);
                            /*0x3e7cc48*/ byte[] GetOctets();
                            /*0x3e7cd10*/ byte[] GetBytes();
                            /*0x3e7cdf4*/ int get_PadBits();
                            /*0x3e79824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e79a44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7ce6c*/ int Asn1GetHashCode();
                            /*0x3e7cf18*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7d034*/ System.IO.Stream GetBitStream();
                            /*0x3e7d0ac*/ string GetString();
                        }

                        class DerBmpString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ string m_str;

                            static /*0x3e72740*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBmpString CreatePrimitive(char[] str);
                            /*0x3e7d2bc*/ DerBmpString(char[] str);
                            /*0x3e7d348*/ string GetString();
                            /*0x3e7d350*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7d3e8*/ int Asn1GetHashCode();
                            /*0x3e7d408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7d574*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7d48c*/ byte[] GetContents();
                        }

                        class DerBoolean : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean False;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean True;
                            /*0x10*/ byte value;

                            static /*0x3e7dcd0*/ DerBoolean();
                            static /*0x3e7d600*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean GetInstance(object obj);
                            static /*0x3e72798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean CreatePrimitive(byte[] contents);
                            /*0x3e7d8f4*/ DerBoolean(byte[] val);
                            /*0x3e7d990*/ DerBoolean(bool value);
                            /*0x3e7d9c4*/ bool get_IsTrue();
                            /*0x3e7d9d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7daec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7db88*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7dc20*/ int Asn1GetHashCode();
                            /*0x3e7dc64*/ string ToString();
                            /*0x3e7da68*/ byte[] GetContents(int encoding);

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e7de64*/ Meta();
                                /*0x3e7dd78*/ Meta();
                                /*0x3e7ddec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerEnumerated : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated[] cache;
                            /*0x10*/ byte[] contents;
                            /*0x18*/ int start;

                            static /*0x3e7e824*/ DerEnumerated();
                            static /*0x3e7dec8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated GetInstance(object obj);
                            static /*0x3e728c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated CreatePrimitive(byte[] contents, bool clone);
                            /*0x3e7e1bc*/ DerEnumerated(int val);
                            /*0x3e7e2ac*/ DerEnumerated(byte[] contents, bool clone);
                            /*0x3e7e4b4*/ int get_IntValueExact();
                            /*0x3e7e614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7e68c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7e70c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7e7c8*/ int Asn1GetHashCode();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e7e988*/ Meta();
                                /*0x3e7e898*/ Meta();
                                /*0x3e7e90c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerExternal : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier directReference;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger indirectReference;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1ObjectDescriptor dataValueDescriptor;
                            /*0x28*/ int encoding;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object externalContent;

                            static /*0x3e7ee2c*/ int CheckEncoding(int encoding);
                            static /*0x3e7eeb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetExternalContent(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject encoding);
                            static /*0x3e7ed70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetObjFromSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence, int index);
                            /*0x3e7e9ec*/ DerExternal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector vector);
                            /*0x3e7ea54*/ DerExternal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            /*0x3e7effc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence BuildSequence();
                            /*0x3e7f1c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7f1f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7f234*/ int Asn1GetHashCode();
                            /*0x3e7f2bc*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerExternalParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            static /*0x3e71910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e77c10*/ DerExternalParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e7f3b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerGeneralString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e72e5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGeneralString CreatePrimitive(byte[] contents);
                            /*0x3e7f3bc*/ DerGeneralString(byte[] contents, bool clone);
                            /*0x3e7f49c*/ string GetString();
                            /*0x3e7f4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7f520*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7f5a0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7f65c*/ int Asn1GetHashCode();
                        }

                        class DerGraphicString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e72eb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString CreatePrimitive(byte[] contents);
                            /*0x3e7f6b8*/ DerGraphicString(byte[] contents, bool clone);
                            /*0x3e7f798*/ string GetString();
                            /*0x3e7f7a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7f81c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7f89c*/ int Asn1GetHashCode();
                            /*0x3e7f8f8*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerIA5String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e72f14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerIA5String CreatePrimitive(byte[] contents);
                            /*0x3e7f9b4*/ DerIA5String(byte[] contents, bool clone);
                            /*0x3e7fa94*/ string GetString();
                            /*0x3e7faa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7fb18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7fb98*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7fc54*/ int Asn1GetHashCode();
                        }

                        class DerInteger : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ byte[] bytes;
                            /*0x18*/ int start;

                            static /*0x3e7fcb0*/ bool AllowUnsafe();
                            static /*0x3e7fd60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger GetInstance(object obj);
                            static /*0x3e80054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            static /*0x3e72f70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger CreatePrimitive(byte[] contents);
                            static /*0x3e7e530*/ int IntValue(byte[] bytes, int start, int signExt);
                            static /*0x3e7e3f0*/ bool IsMalformed(byte[] bytes);
                            static /*0x3e7e444*/ int SignBytesToSkip(byte[] bytes);
                            /*0x3e80118*/ DerInteger(int value);
                            /*0x3e801b0*/ DerInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3e80240*/ DerInteger(byte[] bytes, bool clone);
                            /*0x3e8034c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PositiveValue();
                            /*0x3e803b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Value();
                            /*0x3e80410*/ bool HasValue(int x);
                            /*0x3e8045c*/ int get_IntValueExact();
                            /*0x3e804d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e80550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e805d0*/ int Asn1GetHashCode();
                            /*0x3e8062c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e806e8*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e807a8*/ Meta();
                                /*0x3e80708*/ Meta();
                                /*0x3e8077c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerNull : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Null
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerNull Instance;
                            static /*0x8*/ byte[] ZeroBytes;

                            static /*0x3e809dc*/ DerNull();
                            /*0x3e8080c*/ DerNull();
                            /*0x3e80814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e808b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e8095c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e809d4*/ int Asn1GetHashCode();
                        }

                        class DerNumericString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e73080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerNumericString CreatePrimitive(byte[] contents);
                            /*0x3e80a7c*/ DerNumericString(byte[] contents, bool clone);
                            /*0x3e80b5c*/ string GetString();
                            /*0x3e80b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e80be0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e80c60*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e80d1c*/ int Asn1GetHashCode();
                        }

                        class DerObjectIdentifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier[] cache;
                            /*0x10*/ string identifier;
                            /*0x18*/ byte[] contents;

                            static /*0x3e81bd0*/ DerObjectIdentifier();
                            static /*0x3e80d78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetInstance(object obj);
                            static /*0x3e72a90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CreatePrimitive(byte[] contents, bool clone);
                            static /*0x3e811e4*/ bool IsValidIdentifier(string identifier);
                            static /*0x3e81434*/ string ParseContents(byte[] contents);
                            /*0x3e810b4*/ DerObjectIdentifier(string identifier);
                            /*0x3e81258*/ DerObjectIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string branchID);
                            /*0x3e8136c*/ DerObjectIdentifier(byte[] contents, bool clone);
                            /*0x3e816ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Branch(string branchID);
                            /*0x3e81714*/ string get_Id();
                            /*0x3e8171c*/ string ToString();
                            /*0x3e81724*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e817b4*/ int Asn1GetHashCode();
                            /*0x3e817d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e819a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e81a30*/ void DoOutput(System.IO.MemoryStream bOut);
                            /*0x3e81858*/ byte[] GetContents();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e81d34*/ Meta();
                                /*0x3e81c44*/ Meta();
                                /*0x3e81cb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerOctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString
                        {
                            /*0x3e7211c*/ DerOctetString(byte[] contents);
                            /*0x3e79ed8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7a02c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DerOctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream;

                            /*0x3e77d60*/ DerOctetStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream);
                            /*0x3e81d98*/ System.IO.Stream GetOctetStream();
                            /*0x3e81da0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerOutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream
                        {
                            /*0x3e7447c*/ DerOutputStream(System.IO.Stream os);
                            /*0x3e81ef8*/ int get_Encoding();
                        }

                        class DerPrintableString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e7319c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerPrintableString CreatePrimitive(byte[] contents);
                            /*0x3e81f00*/ DerPrintableString(byte[] contents, bool clone);
                            /*0x3e81fe0*/ string GetString();
                            /*0x3e81fec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e82064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e820e4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e821a0*/ int Asn1GetHashCode();
                        }

                        class DerSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence Empty;

                            static /*0x3e82394*/ DerSequence();
                            /*0x3e7a30c*/ DerSequence();
                            /*0x3e7a374*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e821fc*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e82200*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e7a378*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e7a420*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7a54c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e82204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x3e8225c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x3e822c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class DerSequenceParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x3e77ca0*/ DerSequenceParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e823f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet Empty;

                            static /*0x3e82584*/ DerSet();
                            /*0x3e7a89c*/ DerSet();
                            /*0x3e82464*/ DerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e7a908*/ DerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector, bool doSort);
                            /*0x3e7a910*/ DerSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e7a9bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7aaf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e8246c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] GetSortedElements();
                        }

                        class DerSetParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x3e77c70*/ DerSetParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e825e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerStringBase : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1String
                        {
                            /*0x3e7cb10*/ DerStringBase();
                            /*0x38148bc*/ string GetString();
                            /*0x3e82654*/ string ToString();
                            /*0x3e82664*/ int Asn1GetHashCode();
                        }

                        class DerT61String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e73260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerT61String CreatePrimitive(byte[] contents);
                            /*0x3e82690*/ DerT61String(byte[] contents, bool clone);
                            /*0x3e82770*/ string GetString();
                            /*0x3e8277c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e827f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e82874*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e82930*/ int Asn1GetHashCode();
                        }

                        class DerTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject
                        {
                            /*0x3e6ebd0*/ DerTaggedObject(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e7abe8*/ DerTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e7ad6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7b040*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e8298c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerUniversalString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            static /*0x0*/ char[] table;
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e83034*/ DerUniversalString();
                            static /*0x3e732bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerUniversalString CreatePrimitive(byte[] contents);
                            static /*0x3e82d58*/ void EncodeHexByte(System.Text.StringBuilder buf, int i);
                            static /*0x3e82c28*/ void EncodeHexDL(System.Text.StringBuilder buf, int dl);
                            /*0x3e829e4*/ DerUniversalString(byte[] contents, bool clone);
                            /*0x3e82ac4*/ string GetString();
                            /*0x3e82e24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e82e9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e82f1c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e82fd8*/ int Asn1GetHashCode();
                        }

                        class DerUtf8String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e73370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerUtf8String CreatePrimitive(byte[] contents);
                            /*0x3e830d4*/ DerUtf8String(byte[] contents, bool clone);
                            /*0x3e831b4*/ string GetString();
                            /*0x3e831c0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e8327c*/ int Asn1GetHashCode();
                            /*0x3e832d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e83350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DerVideotexString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e733cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerVideotexString CreatePrimitive(byte[] contents);
                            /*0x3e833d0*/ DerVideotexString(byte[] contents, bool clone);
                            /*0x3e834b0*/ string GetString();
                            /*0x3e834bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e83534*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e835b4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e83670*/ int Asn1GetHashCode();
                        }

                        class DerVisibleString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e73428*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerVisibleString CreatePrimitive(byte[] contents);
                            /*0x3e836cc*/ DerVisibleString(byte[] contents, bool clone);
                            /*0x3e837ac*/ string GetString();
                            /*0x3e837b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e83830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e838b0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e8396c*/ int Asn1GetHashCode();
                        }

                        class DLBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                        {
                            /*0x3e71d60*/ DLBitString(byte[] contents, bool check);
                            /*0x3e839c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e83a5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DLBitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream m_stream;
                            /*0x18*/ int m_padBits;

                            /*0x3e77d30*/ DLBitStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream);
                            /*0x3e83b04*/ System.IO.Stream GetBitStream();
                            /*0x3e83c64*/ int get_PadBits();
                            /*0x3e83c6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            /*0x3e83b0c*/ System.IO.Stream GetBitStream(bool octetAligned);
                        }

                        class DLSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSequence Empty;

                            static /*0x3e84078*/ DLSequence();
                            static /*0x3e70784*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSequence FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e83e24*/ DLSequence();
                            /*0x3e83e78*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e7a640*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e83dc0*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e83edc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e83f6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e84018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class DLSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSet Empty;

                            static /*0x3e842d4*/ DLSet();
                            static /*0x3e71158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSet FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e84144*/ DLSet();
                            /*0x3e840dc*/ DLSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e82328*/ DLSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e84198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e84228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DLTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerTaggedObject
                        {
                            /*0x3e78b14*/ DLTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e84338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e844ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e84620*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DLTaggedObjectParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerTaggedObjectParser
                        {
                            /*0x20*/ bool m_constructed;

                            /*0x3e77718*/ DLTaggedObjectParser(int tagClass, int tagNo, bool constructed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e84678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        interface IAsn1Choice
                        {
                        }

                        interface IAsn1Convertible
                        {
                            /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        interface IAsn1Encoding
                        {
                            /*0x3816710*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3814574*/ int GetLength();
                        }

                        interface IAsn1String
                        {
                            /*0x38148bc*/ string GetString();
                        }

                        class IndefiniteLengthInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.LimitedInputStream
                        {
                            /*0x34*/ int _lookAhead;
                            /*0x38*/ bool _eofOn00;

                            /*0x3e71544*/ IndefiniteLengthInputStream(System.IO.Stream inStream, int limit);
                            /*0x3e77d90*/ void SetEofOn00(bool eofOn00);
                            /*0x3e847cc*/ void CheckEndOfContents();
                            /*0x3e84838*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3e84938*/ int Read(System.Span<byte> buffer);
                            /*0x3e84a70*/ int ReadByte();
                            /*0x3e8476c*/ int RequireByte();
                        }

                        class LimitedInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ System.IO.Stream _in;
                            /*0x30*/ int _limit;

                            /*0x3e7c1d0*/ LimitedInputStream(System.IO.Stream inStream, int limit);
                            /*0x3e84ac0*/ int get_Limit();
                            /*0x3e7c20c*/ void SetParentEofDetect();
                        }

                        class OidTokenizer
                        {
                            /*0x10*/ string oid;
                            /*0x18*/ int index;

                            /*0x3e75120*/ OidTokenizer(string oid);
                            /*0x3e7556c*/ bool get_HasMoreTokens();
                            /*0x3e75150*/ string NextToken();
                        }

                        class PrimitiveEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ byte[] m_contentsOctets;

                            /*0x3e6f978*/ PrimitiveEncoding(int tagClass, int tagNo, byte[] contentsOctets);
                            /*0x3e84ac8*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e84b2c*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class PrimitiveEncodingSuffixed : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ byte[] m_contentsOctets;
                            /*0x20*/ byte m_contentsSuffix;

                            /*0x3e7ce1c*/ PrimitiveEncodingSuffixed(int tagClass, int tagNo, byte[] contentsOctets, byte contentsSuffix);
                            /*0x3e84bb0*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e84c30*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        namespace X9
                        {
                            class DHDomainParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger j;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms validationParms;

                                static /*0x3e84cb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHDomainParameters GetInstance(object obj);
                                static /*0x3e85044*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetNext(System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> e);
                                /*0x3e84e30*/ DHDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e852dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_P();
                                /*0x3e852e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_G();
                                /*0x3e852ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_Q();
                                /*0x3e852f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_J();
                                /*0x3e852fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms get_ValidationParms();
                                /*0x3e85304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DHPublicKey : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger y;

                                static /*0x3e85488*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHPublicKey GetInstance(object obj);
                                /*0x3e85604*/ DHPublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger y);
                                /*0x3e85680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_Y();
                                /*0x3e85688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DHValidationParms : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString seed;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger pgenCounter;

                                static /*0x3e85160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms GetInstance(object obj);
                                /*0x3e85690*/ DHValidationParms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8580c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString get_Seed();
                                /*0x3e85814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_PgenCounter();
                                /*0x3e8581c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class ECNamedCurveTable
                            {
                                static /*0x3e8587c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e85a94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                            }

                            class X962NamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e85eec*/ X962NamedCurves();
                                static /*0x3e85c64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e85d54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e85d58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3e85df0*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e85a14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e85bf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e86984*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e8690c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Prime192v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e86cc0*/ Prime192v1Holder();
                                    /*0x3e869fc*/ Prime192v1Holder();
                                    /*0x3e86a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e86b64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime192v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e86fec*/ Prime192v2Holder();
                                    /*0x3e86d28*/ Prime192v2Holder();
                                    /*0x3e86d30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e86e90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime192v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e87318*/ Prime192v3Holder();
                                    /*0x3e87054*/ Prime192v3Holder();
                                    /*0x3e8705c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e871bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8764c*/ Prime239v1Holder();
                                    /*0x3e87380*/ Prime239v1Holder();
                                    /*0x3e87388*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e874f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e87980*/ Prime239v2Holder();
                                    /*0x3e876b4*/ Prime239v2Holder();
                                    /*0x3e876bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e87824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e87cb4*/ Prime239v3Holder();
                                    /*0x3e879e8*/ Prime239v3Holder();
                                    /*0x3e879f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e87b58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime256v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e87fe8*/ Prime256v1Holder();
                                    /*0x3e87d1c*/ Prime256v1Holder();
                                    /*0x3e87d24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e87e8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e882fc*/ C2pnb163v1Holder();
                                    /*0x3e88050*/ C2pnb163v1Holder();
                                    /*0x3e88058*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e881a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e885c0*/ C2pnb163v2Holder();
                                    /*0x3e88364*/ C2pnb163v2Holder();
                                    /*0x3e8836c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e884b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e88884*/ C2pnb163v3Holder();
                                    /*0x3e88628*/ C2pnb163v3Holder();
                                    /*0x3e88630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e88778*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb176w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e88b48*/ C2pnb176w1Holder();
                                    /*0x3e888ec*/ C2pnb176w1Holder();
                                    /*0x3e888f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e88a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e88e48*/ C2tnb191v1Holder();
                                    /*0x3e88bb0*/ C2tnb191v1Holder();
                                    /*0x3e88bb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e88cec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e89100*/ C2tnb191v2Holder();
                                    /*0x3e88eb0*/ C2tnb191v2Holder();
                                    /*0x3e88eb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e88ff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e893b8*/ C2tnb191v3Holder();
                                    /*0x3e89168*/ C2tnb191v3Holder();
                                    /*0x3e89170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e892ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb208w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e89664*/ C2pnb208w1Holder();
                                    /*0x3e89420*/ C2pnb208w1Holder();
                                    /*0x3e89428*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e89558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8991c*/ C2tnb239v1Holder();
                                    /*0x3e896cc*/ C2tnb239v1Holder();
                                    /*0x3e896d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e89810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e89bd4*/ C2tnb239v2Holder();
                                    /*0x3e89984*/ C2tnb239v2Holder();
                                    /*0x3e8998c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e89ac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e89e8c*/ C2tnb239v3Holder();
                                    /*0x3e89c3c*/ C2tnb239v3Holder();
                                    /*0x3e89c44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e89d80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb272w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8a150*/ C2pnb272w1Holder();
                                    /*0x3e89ef4*/ C2pnb272w1Holder();
                                    /*0x3e89efc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8a044*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb304w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8a414*/ C2pnb304w1Holder();
                                    /*0x3e8a1b8*/ C2pnb304w1Holder();
                                    /*0x3e8a1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8a308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb359v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8a6cc*/ C2tnb359v1Holder();
                                    /*0x3e8a47c*/ C2tnb359v1Holder();
                                    /*0x3e8a484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8a5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb368w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8a990*/ C2pnb368w1Holder();
                                    /*0x3e8a734*/ C2pnb368w1Holder();
                                    /*0x3e8a73c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8a884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb431r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8ac48*/ C2tnb431r1Holder();
                                    /*0x3e8a9f8*/ C2tnb431r1Holder();
                                    /*0x3e8aa00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8ab3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class X962Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object _params;

                                static /*0x3e8acb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X962Parameters GetInstance(object obj);
                                /*0x3e8af58*/ X962Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object obj);
                                /*0x3e8af88*/ bool get_IsNamedCurve();
                                /*0x3e8b004*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object get_Parameters();
                                /*0x3e8b00c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x18*/ byte[] seed;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier fieldIdentifier;

                                /*0x3e8b014*/ X9Curve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, byte[] seed);
                                /*0x3e8b1ac*/ X9Curve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID fieldID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8b98c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e8b994*/ byte[] GetSeed();
                                /*0x3e8b9f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9ECParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID fieldID;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h;
                                /*0x38*/ byte[] seed;

                                /*0x3e8bc1c*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8c0f8*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h);
                                /*0x3e8c100*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x3e8c8b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e8c8c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_G();
                                /*0x3e8c964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                                /*0x3e8c96c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_H();
                                /*0x3e8c974*/ byte[] GetSeed();
                                /*0x3e8c97c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9ECParametersHolder
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters m_parameters;

                                /*0x3e8ce34*/ X9ECParametersHolder();
                                /*0x3e8cc40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e8cd28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters get_Parameters();
                                /*0x3e8ce10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                /*0x38148bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                            }

                            class X9ECPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString encoding;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p;

                                /*0x3e8ce3c*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, bool compressed);
                                /*0x3e8cf08*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, byte[] encoding);
                                /*0x3e8c0b4*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString s);
                                /*0x3e8c8d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Point();
                                /*0x3e8cfd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement f;

                                /*0x3e8cfd8*/ X9FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement f);
                                /*0x3e8d008*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9FieldID : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object parameters;

                                static /*0x3e8c010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID GetInstance(object obj);
                                /*0x3e8c4bc*/ X9FieldID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger primeP);
                                /*0x3e8c574*/ X9FieldID(int m, int k1);
                                /*0x3e8c580*/ X9FieldID(int m, int k1, int k2, int k3);
                                /*0x3e8d1d0*/ X9FieldID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8d2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Identifier();
                                /*0x3e8d2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object get_Parameters();
                                /*0x3e8d2b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9IntegerConverter
                            {
                                static /*0x3e8d0b8*/ int GetByteLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement fe);
                                static /*0x3e8d0ec*/ byte[] IntegerToBytes(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s, int qLength);
                            }

                            class X9ObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ansi_X9_62;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdFieldType;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrimeField;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CharacteristicTwoField;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GNBasis;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TPBasis;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PPBasis;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_ecSigType;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_publicKeyType;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdECPublicKey;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha2;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha224;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha384;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha512;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CTwoCurve;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v2;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v3;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb176w1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v1;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v2;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v3;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb191v4;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb191v5;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb208w1;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v1;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v3;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb239v4;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb239v5;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb272w1;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb304w1;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb359v1;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb368w1;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb431r1;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrimeCurve;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v1;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v2;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v3;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v1;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v2;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v3;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime256v1;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsa;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha1;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X9x63Scheme;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHSinglePassStdDHSha1KdfScheme;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHSinglePassCofactorDHSha1KdfScheme;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MqvSinglePassSha1KdfScheme;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ansi_x9_42;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHPublicNumber;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X9x42Schemes;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHStatic;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHEphem;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHOneFlow;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybrid1;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybrid2;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybridOneFlow;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Mqv2;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Mqv1;

                                static /*0x3e8d31c*/ X9ObjectIdentifiers();
                            }
                        }

                        namespace X509
                        {
                            class AlgorithmIdentifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable parameters;

                                static /*0x3e8e3c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool explicitly);
                                static /*0x3e8e3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier GetInstance(object obj);
                                /*0x3e8e634*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm);
                                /*0x3e8e664*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable parameters);
                                /*0x3e8e484*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8e6a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Algorithm();
                                /*0x3e8e6b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Parameters();
                                /*0x3e8e6b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DigestInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ byte[] digest;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID;

                                /*0x3e8e75c*/ DigestInfo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID, byte[] digest);
                                /*0x3e8e7a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DsaParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;

                                static /*0x3e8e838*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.DsaParameter GetInstance(object obj);
                                /*0x3e8e9a0*/ DsaParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8eb04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e8eb20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3e8eb3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e8eb58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class KeyUsage : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                            {
                                static /*0x3e8ec94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.KeyUsage GetInstance(object obj);
                                static /*0x3e8ef48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.KeyUsage FromExtensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions);
                                /*0x3e8eeb0*/ KeyUsage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString usage);
                                /*0x3e8efc8*/ string ToString();
                            }

                            class RsaPublicKeyStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger publicExponent;

                                static /*0x3e8f084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure GetInstance(object obj);
                                /*0x3e8f1ec*/ RsaPublicKeyStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8f324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Modulus();
                                /*0x3e8f32c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PublicExponent();
                                /*0x3e8f334*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class SubjectPublicKeyInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString keyData;

                                static /*0x3e8f3e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo GetInstance(object obj);
                                /*0x3e8f48c*/ SubjectPublicKeyInfo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8f60c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_AlgorithmID();
                                /*0x3e8f614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ParsePublicKey();
                                /*0x3e8f640*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString get_PublicKeyData();
                                /*0x3e8f648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class TbsCertificateStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger version;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger serialNumber;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier signature;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name issuer;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time startDate;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time endDate;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name subject;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo subjectPublicKeyInfo;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString issuerUniqueID;
                                /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString subjectUniqueID;
                                /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions;

                                static /*0x3e8f6ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure GetInstance(object obj);
                                /*0x3e8f750*/ TbsCertificateStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e90188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
                                /*0x3e90190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions get_Extensions();
                                /*0x3e90198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class Time : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object m_timeObject;

                                static /*0x3e8fe10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time GetInstance(object obj);
                                /*0x3e90554*/ Time(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1GeneralizedTime generalizedTime);
                                /*0x3e904c8*/ Time(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UtcTime utcTime);
                                /*0x3e905dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                                /*0x3e905e4*/ string ToString();
                            }

                            class X509CertificateStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure tbsCert;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier sigAlgID;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString sig;

                                static /*0x3e907ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure GetInstance(object obj);
                                /*0x3e90850*/ X509CertificateStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e909c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure get_TbsCertificate();
                                /*0x3e909c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
                                /*0x3e909e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_SignatureAlgorithm();
                                /*0x3e909ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X509Extension
                            {
                                /*0x10*/ bool critical;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString value;

                                static /*0x3e8eda8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ConvertValueToObject(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension ext);
                                /*0x3e90b28*/ X509Extension(bool critical, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString value);
                                /*0x3e90b60*/ bool get_IsCritical();
                                /*0x3e90b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString get_Value();
                                /*0x3e90b70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetParsedValue();
                                /*0x3e90b74*/ int GetHashCode();
                                /*0x3e90ba8*/ bool Equals(object obj);
                            }

                            class X509Extensions : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectDirectoryAttributes;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectKeyIdentifier;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier KeyUsage;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrivateKeyUsagePeriod;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectAlternativeName;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IssuerAlternativeName;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BasicConstraints;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlNumber;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ReasonCode;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InstructionCode;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InvalidityDate;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DeltaCrlIndicator;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IssuingDistributionPoint;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertificateIssuer;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NameConstraints;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlDistributionPoints;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertificatePolicies;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PolicyMappings;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuthorityKeyIdentifier;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PolicyConstraints;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ExtendedKeyUsage;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier FreshestCrl;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InhibitAnyPolicy;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuthorityInfoAccess;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectInfoAccess;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier LogoType;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BiometricInfo;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier QCStatements;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuditIdentity;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NoRevAvail;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TargetInformation;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ExpiredCertsOnCrl;
                                /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension> m_extensions;
                                /*0x18*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> m_ordering;

                                static /*0x3e91874*/ X509Extensions();
                                static /*0x3e8efbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExtensionParsedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e8ffa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions GetInstance(object obj);
                                /*0x3e90c80*/ X509Extensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e91444*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x3e90c64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExtensionParsedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x3e9149c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X509Name : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier O;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OU;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier T;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CN;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Street;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SerialNumber;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier L;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ST;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Surname;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GivenName;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Initials;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Generation;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UniqueIdentifier;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BusinessCategory;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PostalCode;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DnQualifier;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pseudonym;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DateOfBirth;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PlaceOfBirth;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Gender;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryOfCitizenship;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryOfResidence;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NameAtBirth;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PostalAddress;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DmdName;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TelephoneNumber;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OrganizationIdentifier;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Name;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EmailAddress;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UnstructuredName;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UnstructuredAddress;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier E;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DC;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UID;
                                static /*0x118*/ bool[] defaultReverse;
                                static /*0x120*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> DefaultSymbolsInternal;
                                static /*0x128*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> DefaultSymbols;
                                static /*0x130*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC2253SymbolsInternal;
                                static /*0x138*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC2253Symbols;
                                static /*0x140*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC1779SymbolsInternal;
                                static /*0x148*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC1779Symbols;
                                static /*0x150*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> DefaultLookupInternal;
                                static /*0x158*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> DefaultLookup;
                                /*0x10*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> ordering;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509NameEntryConverter converter;
                                /*0x20*/ System.Collections.Generic.IList<string> values;
                                /*0x28*/ System.Collections.Generic.IList<bool> added;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq;
                                /*0x38*/ string cachedStrRepresentation;

                                static /*0x3e92228*/ X509Name();
                                static /*0x3e920e8*/ bool get_DefaultReverse();
                                static /*0x3e8fd6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name GetInstance(object obj);
                                /*0x3e958ac*/ X509Name(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e96224*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                                /*0x3e9654c*/ void AppendValue(System.Text.StringBuilder buf, System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> oidSymbols, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string val);
                                /*0x3e967e4*/ string ToString(bool reverse, System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> oidSymbols);
                                /*0x3e96ca0*/ string ToString();
                            }

                            class X509NameEntryConverter
                            {
                                /*0x3814b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetConvertedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string value);
                            }

                            class X509ObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CommonName;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryName;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier LocalityName;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier StateOrProvinceName;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Organization;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OrganizationalUnitName;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_telephoneNumber;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_name;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_organizationIdentifier;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160WithRsaEncryption;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEARsa;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPkix;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPE;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAD;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdADCAIssuers;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdADOcsp;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OcspAccessMethod;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlAccessMethod;

                                static /*0x3e96d30*/ X509ObjectIdentifiers();
                            }
                        }

                        namespace UA
                        {
                            class UAObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UaOid;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu4145le;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu4145be;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_256;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_384;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_512;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_256;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_384;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_512;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_128;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_256;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_512;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_128;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_512;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_128;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_256;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_512;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_128;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_256;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_512;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_128;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_256;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_512;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_128;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_256;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_512;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_128;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_256;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_512;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_128;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_256;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_512;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_128;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_256;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_512;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_128;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_256;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_512;

                                static /*0x3e972f8*/ UAObjectIdentifiers();
                            }
                        }

                        namespace TeleTrust
                        {
                            class TeleTrusTNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e98160*/ TeleTrusTNamedCurves();
                                static /*0x3e97ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e97fc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e97fcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3e98064*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e98844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e9893c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e989a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e988c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class BrainpoolP160r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e98c84*/ BrainpoolP160r1Holder();
                                    /*0x3e98a1c*/ BrainpoolP160r1Holder();
                                    /*0x3e98a24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e98b80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP160t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e98f54*/ BrainpoolP160t1Holder();
                                    /*0x3e98cec*/ BrainpoolP160t1Holder();
                                    /*0x3e98cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e98e50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP192r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e99224*/ BrainpoolP192r1Holder();
                                    /*0x3e98fbc*/ BrainpoolP192r1Holder();
                                    /*0x3e98fc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e99120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP192t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e994f4*/ BrainpoolP192t1Holder();
                                    /*0x3e9928c*/ BrainpoolP192t1Holder();
                                    /*0x3e99294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e993f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP224r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e997c4*/ BrainpoolP224r1Holder();
                                    /*0x3e9955c*/ BrainpoolP224r1Holder();
                                    /*0x3e99564*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e996c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP224t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e99a94*/ BrainpoolP224t1Holder();
                                    /*0x3e9982c*/ BrainpoolP224t1Holder();
                                    /*0x3e99834*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e99990*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP256r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e99d64*/ BrainpoolP256r1Holder();
                                    /*0x3e99afc*/ BrainpoolP256r1Holder();
                                    /*0x3e99b04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e99c60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP256t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9a034*/ BrainpoolP256t1Holder();
                                    /*0x3e99dcc*/ BrainpoolP256t1Holder();
                                    /*0x3e99dd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e99f30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP320r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9a304*/ BrainpoolP320r1Holder();
                                    /*0x3e9a09c*/ BrainpoolP320r1Holder();
                                    /*0x3e9a0a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9a200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP320t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9a5d4*/ BrainpoolP320t1Holder();
                                    /*0x3e9a36c*/ BrainpoolP320t1Holder();
                                    /*0x3e9a374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9a4d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP384r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9a8a4*/ BrainpoolP384r1Holder();
                                    /*0x3e9a63c*/ BrainpoolP384r1Holder();
                                    /*0x3e9a644*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9a7a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP384t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9ab74*/ BrainpoolP384t1Holder();
                                    /*0x3e9a90c*/ BrainpoolP384t1Holder();
                                    /*0x3e9a914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9aa70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP512r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9ae44*/ BrainpoolP512r1Holder();
                                    /*0x3e9abdc*/ BrainpoolP512r1Holder();
                                    /*0x3e9abe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9ad40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP512t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9b114*/ BrainpoolP512t1Holder();
                                    /*0x3e9aeac*/ BrainpoolP512t1Holder();
                                    /*0x3e9aeb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9b010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class TeleTrusTObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TeleTrusTAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD128;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD256;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD160;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD128;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD256;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSign;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSignWithSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSignWithRipeMD160;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EccBrainpool;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VersionOne;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP160R1;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP160T1;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP192R1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP192T1;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP224R1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP224T1;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP256R1;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP256T1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP320R1;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP320T1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP384R1;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP384T1;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP512R1;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP512T1;

                                static /*0x3e9b17c*/ TeleTrusTObjectIdentifiers();
                            }
                        }

                        namespace Sec
                        {
                            class SecNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e9c090*/ SecNamedCurves();
                                static /*0x3e9bd6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e9be54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e9be58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurveGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters p);
                                static /*0x3e9befc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3e9bf94*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e9ce48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e9cf40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e9cfa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e9cec8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Secp112r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9d2dc*/ Secp112r1Holder();
                                    /*0x3e9d020*/ Secp112r1Holder();
                                    /*0x3e9d028*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9d188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp112r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9d608*/ Secp112r2Holder();
                                    /*0x3e9d344*/ Secp112r2Holder();
                                    /*0x3e9d34c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9d4b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp128r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9d92c*/ Secp128r1Holder();
                                    /*0x3e9d670*/ Secp128r1Holder();
                                    /*0x3e9d678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9d7d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp128r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9dc58*/ Secp128r2Holder();
                                    /*0x3e9d994*/ Secp128r2Holder();
                                    /*0x3e9d99c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9db04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9e1cc*/ Secp160k1Holder();
                                    /*0x3e9dcc0*/ Secp160k1Holder();
                                    /*0x3e9dcc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9e0c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9e4f0*/ Secp160r1Holder();
                                    /*0x3e9e234*/ Secp160r1Holder();
                                    /*0x3e9e23c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9e39c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9e814*/ Secp160r2Holder();
                                    /*0x3e9e558*/ Secp160r2Holder();
                                    /*0x3e9e560*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9e6c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp192k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9ed88*/ Secp192k1Holder();
                                    /*0x3e9e87c*/ Secp192k1Holder();
                                    /*0x3e9e884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9ec84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp192r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9f0ac*/ Secp192r1Holder();
                                    /*0x3e9edf0*/ Secp192r1Holder();
                                    /*0x3e9edf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9ef58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp224k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9f620*/ Secp224k1Holder();
                                    /*0x3e9f114*/ Secp224k1Holder();
                                    /*0x3e9f11c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9f51c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp224r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9f944*/ Secp224r1Holder();
                                    /*0x3e9f688*/ Secp224r1Holder();
                                    /*0x3e9f690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9f7f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp256k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9feb8*/ Secp256k1Holder();
                                    /*0x3e9f9ac*/ Secp256k1Holder();
                                    /*0x3e9f9b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9fdb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp256r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea01dc*/ Secp256r1Holder();
                                    /*0x3e9ff20*/ Secp256r1Holder();
                                    /*0x3e9ff28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea0088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp384r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea0500*/ Secp384r1Holder();
                                    /*0x3ea0244*/ Secp384r1Holder();
                                    /*0x3ea024c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea03ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp521r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea0824*/ Secp521r1Holder();
                                    /*0x3ea0568*/ Secp521r1Holder();
                                    /*0x3ea0570*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea06d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect113r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea0b24*/ Sect113r1Holder();
                                    /*0x3ea088c*/ Sect113r1Holder();
                                    /*0x3ea0894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea09d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect113r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea0e24*/ Sect113r2Holder();
                                    /*0x3ea0b8c*/ Sect113r2Holder();
                                    /*0x3ea0b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea0cd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect131r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea1130*/ Sect131r1Holder();
                                    /*0x3ea0e8c*/ Sect131r1Holder();
                                    /*0x3ea0e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea0fdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect131r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea143c*/ Sect131r2Holder();
                                    /*0x3ea1198*/ Sect131r2Holder();
                                    /*0x3ea11a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea12e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea16bc*/ Sect163k1Holder();
                                    /*0x3ea14a4*/ Sect163k1Holder();
                                    /*0x3ea14ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea15b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea19c8*/ Sect163r1Holder();
                                    /*0x3ea1724*/ Sect163r1Holder();
                                    /*0x3ea172c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea1874*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea1cbc*/ Sect163r2Holder();
                                    /*0x3ea1a30*/ Sect163r2Holder();
                                    /*0x3ea1a38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea1b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect193r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea1fbc*/ Sect193r1Holder();
                                    /*0x3ea1d24*/ Sect193r1Holder();
                                    /*0x3ea1d2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea1e68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect193r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea22bc*/ Sect193r2Holder();
                                    /*0x3ea2024*/ Sect193r2Holder();
                                    /*0x3ea202c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea2168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect233k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea2530*/ Sect233k1Holder();
                                    /*0x3ea2324*/ Sect233k1Holder();
                                    /*0x3ea232c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea242c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect233r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea2818*/ Sect233r1Holder();
                                    /*0x3ea2598*/ Sect233r1Holder();
                                    /*0x3ea25a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea26c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect239k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea2a8c*/ Sect239k1Holder();
                                    /*0x3ea2880*/ Sect239k1Holder();
                                    /*0x3ea2888*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea2988*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect283k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea2d0c*/ Sect283k1Holder();
                                    /*0x3ea2af4*/ Sect283k1Holder();
                                    /*0x3ea2afc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea2c08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect283r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea3000*/ Sect283r1Holder();
                                    /*0x3ea2d74*/ Sect283r1Holder();
                                    /*0x3ea2d7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea2eac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect409k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea3274*/ Sect409k1Holder();
                                    /*0x3ea3068*/ Sect409k1Holder();
                                    /*0x3ea3070*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea3170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect409r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea355c*/ Sect409r1Holder();
                                    /*0x3ea32dc*/ Sect409r1Holder();
                                    /*0x3ea32e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea3408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect571k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea37dc*/ Sect571k1Holder();
                                    /*0x3ea35c4*/ Sect571k1Holder();
                                    /*0x3ea35cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea36d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect571r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea3ad0*/ Sect571r1Holder();
                                    /*0x3ea3844*/ Sect571r1Holder();
                                    /*0x3ea384c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea397c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class SecObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163k1;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163r1;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT239k1;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT113r1;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT113r2;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP112r1;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP112r2;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160r1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160k1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP256k1;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163r2;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT283k1;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT283r1;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT131r1;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT131r2;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT193r1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT193r2;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT233k1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT233r1;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP128r1;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP128r2;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160r2;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP192k1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP224k1;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP224r1;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP384r1;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP521r1;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT409k1;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT409r1;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT571k1;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT571r1;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP192r1;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP256r1;

                                static /*0x3ea3b38*/ SecObjectIdentifiers();
                            }
                        }

                        namespace Rosstandart
                        {
                            class RosstandartObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier rosstandart;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3411_12_256;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3411_12_512;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_hmac_gost_3411_12_256;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_hmac_gost_3411_12_512;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_256;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_512;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement_gost_3410_12_256;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement_gost_3410_12_512;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256_paramSet;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256_paramSetA;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSet;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetA;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetB;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetC;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_28147_param_Z;

                                static /*0x3ea49d0*/ RosstandartObjectIdentifiers();
                            }
                        }

                        namespace Pkcs
                        {
                            class DHParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger l;

                                /*0x3ea4fc4*/ DHParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3ea53d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3ea53f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3ea5410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_L();
                                /*0x3ea5424*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class PkcsObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs1Oid;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaEncryption;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD2WithRsaEncryption;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsaEncryption;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5WithRsaEncryption;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha1WithRsaEncryption;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SrsaOaepEncryptionSet;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsaesOaep;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdMgf1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPSpecified;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPss;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha256WithRsaEncryption;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha384WithRsaEncryption;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512WithRsaEncryption;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha224WithRsaEncryption;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512_224WithRSAEncryption;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512_256WithRSAEncryption;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DhKeyAgreement;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD2AndDesCbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD2AndRC2Cbc;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD5AndDesCbc;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD5AndRC2Cbc;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithSha1AndDesCbc;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithSha1AndRC2Cbc;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPbeS2;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPbkdf2;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEde3Cbc;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RC2Cbc;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier rc4;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha1;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha224;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha256;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha384;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha512;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Data;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SignedData;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EnvelopedData;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SignedAndEnvelopedData;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DigestedData;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EncryptedData;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtEmailAddress;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtUnstructuredName;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtContentType;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtMessageDigest;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSigningTime;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtCounterSignature;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtChallengePassword;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtUnstructuredAddress;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtExtendedCertificateAttributes;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSigningDescription;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtExtensionRequest;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSmimeCapabilities;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSmime;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtFriendlyName;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtLocalKeyID;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X509Certificate;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SdsiCertificate;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X509Crl;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlg;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgEsdh;
                                static /*0x1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgCms3DesWrap;
                                static /*0x200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgCmsRC2Wrap;
                                static /*0x208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgZlibCompress;
                                static /*0x210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgPwriKek;
                                static /*0x218*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgSsdh;
                                static /*0x220*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsaKem;
                                static /*0x228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgAeadChaCha20Poly1305;
                                static /*0x230*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgHssLmsHashsig;
                                static /*0x238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PreferSignedData;
                                static /*0x240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CannotDecryptAny;
                                static /*0x248*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SmimeCapabilitiesVersions;
                                static /*0x250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAReceiptRequest;
                                static /*0x258*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTAuthData;
                                static /*0x260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTTstInfo;
                                static /*0x268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTCompressedData;
                                static /*0x270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTAuthEnvelopedData;
                                static /*0x278*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTTimestampedData;
                                static /*0x280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfOrigin;
                                static /*0x288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfReceipt;
                                static /*0x290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfDelivery;
                                static /*0x298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfSender;
                                static /*0x2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfApproval;
                                static /*0x2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfCreation;
                                static /*0x2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAOid;
                                static /*0x2b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentHint;
                                static /*0x2c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAMsgSigDigest;
                                static /*0x2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentReference;
                                static /*0x2d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEncrypKeyPref;
                                static /*0x2d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASigningCertificate;
                                static /*0x2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASigningCertificateV2;
                                static /*0x2e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentIdentifier;
                                static /*0x2f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASignatureTimeStampToken;
                                static /*0x2f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSigPolicyID;
                                static /*0x300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCommitmentType;
                                static /*0x308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSignerLocation;
                                static /*0x310*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSignerAttr;
                                static /*0x318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsOtherSigCert;
                                static /*0x320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsContentTimestamp;
                                static /*0x328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertificateRefs;
                                static /*0x330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsRevocationRefs;
                                static /*0x338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertValues;
                                static /*0x340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsRevocationValues;
                                static /*0x348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsEscTimeStamp;
                                static /*0x350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertCrlTimestamp;
                                static /*0x358*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsArchiveTimestamp;
                                static /*0x360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAADecryptKeyID;
                                static /*0x368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAImplCryptoAlgs;
                                static /*0x370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAAsymmDecryptKeyID;
                                static /*0x378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAImplCompressAlgs;
                                static /*0x380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAACommunityIdentifiers;
                                static /*0x388*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSpqEtsUri;
                                static /*0x390*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSpqEtsUNotice;
                                static /*0x398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier KeyBag;
                                static /*0x3a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs8ShroudedKeyBag;
                                static /*0x3a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertBag;
                                static /*0x3b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlBag;
                                static /*0x3b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecretBag;
                                static /*0x3c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SafeContentsBag;
                                static /*0x3c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd128BitRC4;
                                static /*0x3d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd40BitRC4;
                                static /*0x3d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd3KeyTripleDesCbc;
                                static /*0x3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd2KeyTripleDesCbc;
                                static /*0x3e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd128BitRC2Cbc;
                                static /*0x3f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbewithShaAnd40BitRC2Cbc;

                                static /*0x3ea54d4*/ PkcsObjectIdentifiers();
                            }

                            class RsassaPssParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier DefaultHashAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier DefaultMaskGenFunction;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger DefaultSaltLength;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger DefaultTrailerField;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier hashAlgorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier maskGenAlgorithm;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger saltLength;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger trailerField;

                                static /*0x3ea7e40*/ RsassaPssParameters();
                                static /*0x3ea7754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters GetInstance(object obj);
                                /*0x3ea7b3c*/ RsassaPssParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier hashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier maskGenAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger saltLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger trailerField);
                                /*0x3ea78d0*/ RsassaPssParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3ea7bb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_HashAlgorithm();
                                /*0x3ea7bb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Oiw
                        {
                            class ElGamalParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;

                                /*0x3ea8008*/ ElGamalParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3ea8108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3ea8124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3ea8140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class OiwObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsa;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5WithRsa;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsaEncryption;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEcb;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesCbc;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesOfb;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesCfb;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEde;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha1WithRsa;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ElGamalAlgorithm;

                                static /*0x3ea81a4*/ OiwObjectIdentifiers();
                            }
                        }

                        namespace Ocsp
                        {
                            class OcspResponse : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus responseStatus;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes responseBytes;

                                static /*0x3ea8518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponse GetInstance(object obj);
                                /*0x3ea8694*/ OcspResponse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3ea88a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class OcspResponseStatus : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated
                            {
                                /*0x3ea8818*/ OcspResponseStatus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated value);
                            }

                            class ResponderID : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable id;

                                /*0x3ea8950*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class ResponseBytes : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier responseType;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString response;

                                static /*0x3ea888c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool explicitly);
                                static /*0x3ea8a1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes GetInstance(object obj);
                                /*0x3ea8b98*/ ResponseBytes(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3ea8d18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Nist
                        {
                            class NistNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3ea8ea4*/ NistNamedCurves();
                                static /*0x3ea8d7c*/ void DefineCurveAlias(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea9284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3ea937c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea93e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea9304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);
                            }

                            class NistObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NistAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier HashAlgs;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha256;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha384;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha224;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512_224;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512_256;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_224;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_256;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_384;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_512;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake128;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_224;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_256;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_384;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_512;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake128Len;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake256Len;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdKmacWithShake128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdKmacWithShake256;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Aes;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ecb;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Cbc;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ofb;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Cfb;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Wrap;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Gcm;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ccm;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ecb;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Cbc;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ofb;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Cfb;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Wrap;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Gcm;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ccm;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ecb;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Cbc;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ofb;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Cfb;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Wrap;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Gcm;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ccm;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha2;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha224;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha256;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha384;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha512;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_224;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_256;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_384;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_512;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_224;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_256;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_384;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_512;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_224;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_256;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_384;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_512;

                                static /*0x3ea94a4*/ NistObjectIdentifiers();
                            }
                        }

                        namespace Misc
                        {
                            class MiscObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Netscape;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCertType;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeBaseUrl;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeRevocationUrl;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCARevocationUrl;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeRenewalUrl;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCAPolicyUrl;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeSslServerName;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCertComment;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Verisign;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignCzagExtension;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignPrivate_6_9;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignOnSiteJurisdictionHash;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignBitString_6_13;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignDnbDunsNumber;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignIssStrongCrypto;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Novell;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NovellSecurityAttribs;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Entrust;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EntrustVersionExtension;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cast5CBC;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier HMAC_SHA1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier as_sys_sec_alg_ideaCBC;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_ECB;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_CBC;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_CFB;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_OFB;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b160;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b256;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b384;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b512;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s128;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s160;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s224;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s256;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake3;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake3_256;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_scrypt;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_alg_composite;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_composite_key;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_oracle_pkcs12_trusted_key_usage;

                                static /*0x3eaac5c*/ MiscObjectIdentifiers();
                            }
                        }

                        namespace Gnu
                        {
                            class GnuObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Gnu;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GnuPG;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Notation;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PkaAddress;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GnuRadar;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DigestAlgorithm;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Tiger192;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EncryptionAlgorithm;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Ecb;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Cbc;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Ofb;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Cfb;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Ecb;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Cbc;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Ofb;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Cfb;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Ecb;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Cbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Ofb;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Cfb;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Crc;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Crc32;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Ed25519;

                                static /*0x3eab94c*/ GnuObjectIdentifiers();
                            }
                        }

                        namespace GM
                        {
                            class GMNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3eac298*/ GMNamedCurves();
                                static /*0x3eac010*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3eac100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3eac104*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3eac19c*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3eac52c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3eac624*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3eac690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3eac5ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class SM2P256V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eac97c*/ SM2P256V1Holder();
                                    /*0x3eac708*/ SM2P256V1Holder();
                                    /*0x3eac710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eac870*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class WapiP192V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eacc58*/ WapiP192V1Holder();
                                    /*0x3eac9e4*/ WapiP192V1Holder();
                                    /*0x3eac9ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eacb4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class GMObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm_scheme;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_ecb;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_cbc;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_ofb128;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_cfb128;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_ecb;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cbc;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_ofb128;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb128;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb8;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_ecb;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cbc;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_ofb128;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb128;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb1;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb8;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ecb;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ofb128;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb8;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ctr;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_gcm;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ccm;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_xts;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_wrap;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_wrap_pad;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ocb;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm5;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2p256v1;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2exchange;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier wapip192v1;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_recommendedParameters;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_specifiedParameters;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sm3;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha1;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha224;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha256;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha384;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha512;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_rmd160;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_whirlpool;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_blake2b512;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_blake2s256;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_md5;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_sm9PublicKey;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9sign;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9keyagreement;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9encrypt;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm3;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier hmac_sm3;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sm3;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha1;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha256;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha512;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha224;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha384;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_rmd160;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_whirlpool;
                                static /*0x1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_blake2b512;
                                static /*0x200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_blake2s256;

                                static /*0x3eaccc0*/ GMObjectIdentifiers();
                            }
                        }

                        namespace EdEC
                        {
                            class EdECObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_edwards_curve_algs;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_X25519;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_X448;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_Ed25519;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_Ed448;

                                static /*0x3eae04c*/ EdECObjectIdentifiers();
                            }
                        }

                        namespace Eac
                        {
                            class EacObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier bsi_de;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK_DH;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK_ECDH;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_DH;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_DH_3DES_CBC_CBC;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_ECDH;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_ECDH_3DES_CBC_CBC;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_v1_5_SHA_1;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_v1_5_SHA_256;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_PSS_SHA_1;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_PSS_SHA_256;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_224;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_256;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_384;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_512;

                                static /*0x3eae21c*/ EacObjectIdentifiers();
                            }
                        }

                        namespace CryptoPro
                        {
                            class CryptoProObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411Hmac;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR28147Gcfb;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR28147Cbc;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ID_Gost28147_89_CryptoPro_A_ParamSet;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94WithGostR3410x94;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94WithGostR3410x2001;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94CryptoProParamSet;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProA;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProB;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProC;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProD;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchA;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchB;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchC;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProA;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProB;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProC;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProXchA;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProXchB;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostElSgDH3410Default;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostElSgDH3410x1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProESDH;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001DH;

                                static /*0x3eaea98*/ CryptoProObjectIdentifiers();
                            }

                            class ECGost3410NamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3eaf398*/ ECGost3410NamedCurves();
                                static /*0x3eaf138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                static /*0x3eaf200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3eaf204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3eaf29c*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3eaf8b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3eaf9a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3eafa14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3eaf930*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Holder_gostR3410_2001_CryptoPro_A : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eafd3c*/ Holder_gostR3410_2001_CryptoPro_A();
                                    /*0x3eafa8c*/ Holder_gostR3410_2001_CryptoPro_A();
                                    /*0x3eafa94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eafbf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_B : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb0054*/ Holder_gostR3410_2001_CryptoPro_B();
                                    /*0x3eafda4*/ Holder_gostR3410_2001_CryptoPro_B();
                                    /*0x3eafdac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eaff0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_C : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb036c*/ Holder_gostR3410_2001_CryptoPro_C();
                                    /*0x3eb00bc*/ Holder_gostR3410_2001_CryptoPro_C();
                                    /*0x3eb00c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb0224*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_XchB : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb0684*/ Holder_gostR3410_2001_CryptoPro_XchB();
                                    /*0x3eb03d4*/ Holder_gostR3410_2001_CryptoPro_XchB();
                                    /*0x3eb03dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb053c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_256_paramSetA : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb0990*/ Holder_id_tc26_gost_3410_12_256_paramSetA();
                                    /*0x3eb06ec*/ Holder_id_tc26_gost_3410_12_256_paramSetA();
                                    /*0x3eb06f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb0854*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetA : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb0ca8*/ Holder_id_tc26_gost_3410_12_512_paramSetA();
                                    /*0x3eb09f8*/ Holder_id_tc26_gost_3410_12_512_paramSetA();
                                    /*0x3eb0a00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb0b60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetB : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb0fc0*/ Holder_id_tc26_gost_3410_12_512_paramSetB();
                                    /*0x3eb0d10*/ Holder_id_tc26_gost_3410_12_512_paramSetB();
                                    /*0x3eb0d18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb0e78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetC : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb12cc*/ Holder_id_tc26_gost_3410_12_512_paramSetC();
                                    /*0x3eb1028*/ Holder_id_tc26_gost_3410_12_512_paramSetC();
                                    /*0x3eb1030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb1190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class Gost3410NamedParameters
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProA;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProB;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProXchA;
                                static /*0x18*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x20*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters> parameters;

                                static /*0x3eb13fc*/ Gost3410NamedParameters();
                                static /*0x3eb1334*/ void DefineParameters(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters parameterSet);
                                static /*0x3eb1954*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                            }

                            class Gost3410ParamSetParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ int keySize;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger a;

                                /*0x3eb1870*/ Gost3410ParamSetParameters(int keySize, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a);
                                /*0x3eb19cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3eb19e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3eb1a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_A();
                                /*0x3eb1a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class Gost3410PublicKeyAlgParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestParamSet;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier encryptionParamSet;

                                static /*0x3eb1bcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters GetInstance(object obj);
                                /*0x3eb1c70*/ Gost3410PublicKeyAlgParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3eb1e84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_PublicKeyParamSet();
                                /*0x3eb1e8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_DigestParamSet();
                                /*0x3eb1e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_EncryptionParamSet();
                                /*0x3eb1e9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Cryptlib
                        {
                            class CryptlibObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecc;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier curvey25519;

                                static /*0x3eb1f4c*/ CryptlibObjectIdentifiers();
                            }
                        }

                        namespace Bsi
                        {
                            class BsiObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier bsi_de;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_ecc;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_signatures;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA1;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA224;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA256;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA384;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA512;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_RIPEMD160;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA1;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA224;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA256;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA384;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA512;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_RIPEMD160;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_3DES;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES192;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES256;

                                static /*0x3eb2084*/ BsiObjectIdentifiers();
                            }
                        }

                        namespace Anssi
                        {
                            class AnssiNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3eb2938*/ AnssiNamedCurves();
                                static /*0x3eb26b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3eb27a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3eb27a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3eb283c*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3eb2b70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3eb2c68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3eb2cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3eb2bf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Frp256v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3eb2fc0*/ Frp256v1Holder();
                                    /*0x3eb2d4c*/ Frp256v1Holder();
                                    /*0x3eb2d54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3eb2eb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class AnssiObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier FRP256v1;

                                static /*0x3eb3028*/ AnssiObjectIdentifiers();
                            }
                        }
                    }
                }
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 02D050046D7A21C15C1A6D6755439B5EDAD147FABD9152C932359BA3A4E82039;
    static /*0x14*/ <PrivateImplementationDetails> 064CACC4978353DFD6979BF0975E06366B0F3E9C5631CFFF32EC2184BCF492E5;
    static /*0xb4*/ <PrivateImplementationDetails> 07FA6E88C946B2528C09C16C2FB8E9CDA49AFFAFC601774C437FD9F2DF3ECE01;
    static /*0xec*/ <PrivateImplementationDetails> 0828E49183AB306042032EA09C5BD83C67BC8CD26D7C08C504962517913861E2;
    static /*0xfc*/ <PrivateImplementationDetails> 0A29D64AE97E7FBAAE0678A4F4F9364668E9827F23F305D51DF55D902CF19C4D;
    static /*0x102*/ <PrivateImplementationDetails> 0A4E21484641E9782ED1A1B3410F9F2DDC54F0F6D8807BF52C299807D9C4DF5C;
    static /*0x14a*/ <PrivateImplementationDetails> 0AEC099C87E7062A57D1C79734EDDD28A07A1684746EE8640132BB252E6BF5A1;
    static /*0x182*/ <PrivateImplementationDetails> 0C9B53D0417CF5539EA98A771F400E930B4B4F55363A296A9E5A5F941AB71C86;
    static /*0x582*/ <PrivateImplementationDetails> 0CF9F5E38BA692F10436AAC17AC6DCB62396F9AFC9CA013B3D640C1C95E31A39;
    static /*0x682*/ <PrivateImplementationDetails> 10D88DF8B06E47788DBE42F876B642A928A3AD8EEFFE352C59F031CCFFECD49D;
    static /*0x702*/ <PrivateImplementationDetails> 111B15B20E0428A22EEAA1E54B0D3B008A7A3E79C8F7F4E783710F569E9CEF15;
    static /*0x715*/ <PrivateImplementationDetails> 120918433B634757ADE589703127976B7C5C2009E8DB37632123F45FA2B87F2E;
    static /*0x755*/ <PrivateImplementationDetails> 125CF2084D7EEC18DC9795BE4BAA221655C0EABAB89E90A74FB0370378A60293;
    static /*0x9d5*/ <PrivateImplementationDetails> 12F486CDF1F8927BF7289003288EFE6D3B6C674279639905EEEE24D0B6EA9688;
    static /*0x9e1*/ <PrivateImplementationDetails> 1313B2EF301CE83F294FFD8C012777CAA44B3F5F35B6CC5232786F43AEE29084;
    static /*0x9ed*/ <PrivateImplementationDetails> 13F3BEDA950D7627802C21F7681A2553BBC40FDD07FCA3F52FAB662EE65B6F90;
    static /*0x11ed*/ <PrivateImplementationDetails> 141785EC78A7C41133C5B71ACBF4AA8735D3C599E0EA82B1AFA2C71A46FAD265;
    static /*0x11f9*/ <PrivateImplementationDetails> 14A5D850C255623F9472E3C650ABCE0C78D32F0276B315B3A276A0462D97A1AC;
    static /*0x12f9*/ <PrivateImplementationDetails> 16599A4F9A12ECCBFC361B547840304B9E48CBC431F387243C6859C475427D16;
    static /*0x1331*/ <PrivateImplementationDetails> 1674D0631A2E37B60EC748BC3899FEE1550C108AF30B85CE96A70C5CA4682D03;
    static /*0x1431*/ <PrivateImplementationDetails> 1B993D34192A33EB10CEE61C1093A6FE7D3D4B41F751F550CF8515DC4A215207;
    static /*0x1831*/ <PrivateImplementationDetails> 1C200EEC7E0EAFD19F23190A1ED9B95D60EDE114EDE39BD917D1565839CB48DC;
    static /*0x183d*/ <PrivateImplementationDetails> 1C3EF802E30F355C14A57C8AFAF6BFC22F3E40631D30059D87C30496D784EC9B;
    static /*0x1849*/ <PrivateImplementationDetails> 20EC21674E2CB9D3BA7B2F74AA5874381BAD58B7EDF526BDE000F175D1C5E5F1;
    static /*0x1859*/ <PrivateImplementationDetails> 2338F1330733829B7EA276F350452E34DC02E35AEA142145F1294F417A412FE5;
    static /*0x18d9*/ <PrivateImplementationDetails> 241460699808ED5F8D48C6B09EED448CDAE597EBF52B010901CD6F75A767B047;
    static /*0x18e5*/ <PrivateImplementationDetails> 24CB9F17C8326D8BB8EC908716519DF7F265AE825F0DD13BB04E03A90B07D90E;
    static /*0x18f5*/ <PrivateImplementationDetails> 252A0A8312BC1F5202CB599BCF172BEFA6F2A40195E72E2410AF5D81AC8B69D5;
    static /*0x19f5*/ <PrivateImplementationDetails> 265DD563A3E754D1DA09E056E784DF1550AD6EFA252EDC9A8B6F2F537C4D98A9;
    static /*0x1a1d*/ <PrivateImplementationDetails> 2A1FE1596DB0F5D1893C1AF50592965E1C09B1EE1E35A8A87C181A9EB2F391F5;
    static /*0x1e1d*/ <PrivateImplementationDetails> 2B371DA34C2A942BAF37EBEF498C2EE84813B4AB0266066695C4152B6E3FF082;
    static /*0x261d*/ <PrivateImplementationDetails> 2C6817528AB91D87A379BAA924F0BB642ED5C1AE839AEA5BBAA51F1E950796C0;
    static /*0x2623*/ <PrivateImplementationDetails> 2DE8C8D0A909D9D152B7752E0C1650FB43AFEBF9F20DF52091B69C394BD9F0FB;
    static /*0x2633*/ <PrivateImplementationDetails> 2DEB754CF447D0DE35ACB7F4311F9AAB1D4CFC0638E101CCAA8A0A4948AB3600;
    static /*0x2673*/ <PrivateImplementationDetails> 2EE1A8E6F4E2FE0BB69872A9C314399B1B0FDEE75772244F204ABF4D6DEC2F97;
    static /*0x26b7*/ <PrivateImplementationDetails> 2EF83B43314F8CD03190EEE30ECCF048DA37791237F27C62A579F23EACE9FD70;
    static /*0x26d7*/ <PrivateImplementationDetails> 301841C47353B7791BE25BC1F60F93D0EB2090AB5714FA5CA3939E8DFF75D218;
    static /*0x2717*/ <PrivateImplementationDetails> 3106DB6422088B231F12C749BC9CC57B08BBDE65695641C166393B42EFF14871;
    static /*0x2797*/ <PrivateImplementationDetails> 312F5C5395AE18520F30256771C66AE46BAFF85D08FBD0CAC1542927216E8489;
    static /*0x27df*/ <PrivateImplementationDetails> 343E404502DABEA303159A8C37BB2A4405B20A9B230D1C3BA9D496F05879019E;
    static /*0x280f*/ <PrivateImplementationDetails> 356608BFA95B39A5AA624D4852D37A19FCFB1302C897E1A4B7EA5EFD1A20120E;
    static /*0x281b*/ <PrivateImplementationDetails> 36003BEAAFC125A5D50EBAE8C98A6971BE6134DD89E286DD699E012687422A22;
    static /*0x2827*/ <PrivateImplementationDetails> 360E7DADB4427717AF4CB4E82F530229193E21B1BFB8DBEDBC46F77FF251CA15;
    static /*0x2927*/ <PrivateImplementationDetails> 36B8FDA0BFB1D93A07326EE7CAC8EB99FF1AF237D234FFA3210F64D3EB774C38;
    static /*0x2da7*/ <PrivateImplementationDetails> 3936FEF22F74028ACFB35A545386FE1C4F4A2C8CE55E88B5DF4FF605D474D8B4;
    static /*0x2db3*/ <PrivateImplementationDetails> 394D174022AB9D27D329C8DE3DADB69831311870F91A3896EFFB406411F7472C;
    static /*0x2dcb*/ <PrivateImplementationDetails> 3AF2ACD8D2D27336879BC958CFB6B4271FA89EC7C3EC62B7AD1E0E20B7AF303D;
    static /*0x2df3*/ <PrivateImplementationDetails> 3B520286F14349D61645FDE2088337584857AF213F1E9694D9DA4F5C489E6A0E;
    static /*0x2e0f*/ <PrivateImplementationDetails> 3B721FB05904288533A0C3F44162AA4631530BCFEBD22C3E57DBC4994E38F83D;
    static /*0x2e4f*/ <PrivateImplementationDetails> 3CA024F96B6FA0D283063E7C2B60A83C2B07F26AE1788CDFAEEB231C7725ED92;
    static /*0x364f*/ <PrivateImplementationDetails> 3E4FB5FE52BF269D6EE955711016291D6D327A4AAC39B2464C53C6BD0D73242A;
    static /*0x384f*/ <PrivateImplementationDetails> 3F580014EE7F27F024FC40AE120394FAC1A8E4CD1B40FD0F0089E89856152138;
    static /*0x385f*/ <PrivateImplementationDetails> 405634CB2F08D8E4A65CF85762D7BE4356E6DE1C0C941DA950F3034F3F8C6ED0;
    static /*0x388b*/ <PrivateImplementationDetails> 40866F3E76BC07D89281D2593C42AD252FB2D84E0A91FA3C78CA3C1FCC17643D;
    static /*0x398b*/ <PrivateImplementationDetails> 42E57F5A26F7D53A24B69FF9F56FA7550A23B8BAB2F5993357E4C53EA06141E9;
    static /*0x3a8b*/ <PrivateImplementationDetails> 439231575950B2ADCDE8DC0E470192ADA8DDC05EB55836596636563B6403A6B5;
    static /*0x3b0b*/ <PrivateImplementationDetails> 43B9A42341477A51FB3329FA943298FB43910D3EDCAB69BFB04D0E68D84C0247;
    static /*0x3b17*/ <PrivateImplementationDetails> 43C8B8D4786B6331EFC85B21E235E3E39940C427680D2C6B73ABF19738EF5186;
    static /*0x3b2f*/ <PrivateImplementationDetails> 4654FB5A717A0EB7C9078754B15F325C2F156519CFF821AAA495495741FF153A;
    static /*0x3b47*/ <PrivateImplementationDetails> 490FE1E40F08589851422F9DAF5012280352D005653B5D2CE872268A1A743ACF;
    static /*0x3b87*/ <PrivateImplementationDetails> 4993FAA5B9060FAAFC80E9F6CE26AF291965C0B1E8F5BBDC87C6CE9AEF6FFA24;
    static /*0x3b93*/ <PrivateImplementationDetails> 49D826830B5D920448F74BBBEDB361F17C9DD461E0DC3DED114E6E13E0173981;
    static /*0x3b9f*/ <PrivateImplementationDetails> 49FC72E2BC139CDC89193D013C3CBAD8CB75E78CA254B8466A03D26581D08BE4;
    static /*0x3bab*/ <PrivateImplementationDetails> 4A46F89E77BB78FA4C62BBA3B2F1EA2D55099E9ACCBC2AF76E05A4A07536FD67;
    static /*0x3bb1*/ <PrivateImplementationDetails> 4ADFA71AB9AF20C1C372C92FF8D26609A11DA05E167BBA62C0ABFD18F4C1EAF8;
    static /*0x3bd1*/ <PrivateImplementationDetails> 4D30B965ABF4D17A678F232D7C2491E37B61B203A6E807BB9E09C4BA2614F72D;
    static /*0x3be9*/ <PrivateImplementationDetails> 4D487DD66D80886D292C3C7B64CC41FEBA1E313A26A9D05333B42E895741FF81;
    static /*0x3ce9*/ <PrivateImplementationDetails> 4D7CAD3DEBDBD349390304F3A59AD3F66B4A1FB02F88749C4E393FF3A1EDD411;
    static /*0x3cf5*/ <PrivateImplementationDetails> 4DDDF66BF035F6ECA9C5F21404F3E8DC72D452D7CC13051DAA425BC248F0F060;
    static /*0x3d15*/ <PrivateImplementationDetails> 4FDCD793D71BE141D8E85C48B61B68F00848ACEF69905D47D935786C44D07D92;
    static /*0x3d21*/ <PrivateImplementationDetails> 513BA924C2DC996CAF3DC690D42BEB815316271C0CDAC0812BC0F2C2ED45DEA4;
    static /*0x3d35*/ <PrivateImplementationDetails> 5218271C2AB140CF1F8F18D070924F6EA8F08F5FB59C9E4F05AF36C0740D172A;
    static /*0x3d41*/ <PrivateImplementationDetails> 542A4AD813E0CA853A400A4DC81182DB6803BEC6EA63ED0D54E0E90660DFDC2B;
    static /*0x4541*/ <PrivateImplementationDetails> 55D0BF716B334D123E0088CFB3F8E2FEA17AF5025BB527F95EEB09BA978EA329;
    static /*0x4641*/ <PrivateImplementationDetails> 55D90ED526CE6FF4309EE00834C4060B1A37CB6D5E65BAA01366C72FB2A68CB4;
    static /*0x464d*/ <PrivateImplementationDetails> 58693A8E9871A51CE017A5CCB2219B320C7893E49E1761EF867DEB94E0466F4D;
    static /*0x474d*/ <PrivateImplementationDetails> 586CB2936F35105D4A71FF1186E81528F1980A2E5BB1E2719E0D86809CB1080A;
    static /*0x4f4d*/ <PrivateImplementationDetails> 5961BF1FCF83803CE7775E15E9DB8D21AF741539B85CCFDD643F9E22CC7820D6;
    static /*0x4fc5*/ <PrivateImplementationDetails> 5A33FCFEC23C49D91BCF58CE2472DC9F3662CD086BD29FC44AF2E14567238A30;
    static /*0x4fe5*/ <PrivateImplementationDetails> 5BBB9265FCB4E834C68440328645B1A187F68D3275881FC46B21564B11326DA5;
    static /*0x500d*/ <PrivateImplementationDetails> 5D34088B4ABB1F3FE88DCF84DD5C145EFD5EA01DF1B05BB8FEAD12305B0979B7;
    static /*0x518d*/ <PrivateImplementationDetails> 5D6878AD6E68B2CCB04A7CD7942BE07C15F947CCA8824203021DD465D90712AD;
    static /*0x5209*/ <PrivateImplementationDetails> 5DF5DA3512C124C2BB3C3676FFEDA4E6CC5E902C2A6027D37EB4B5AB64ED4382;
    static /*0x5229*/ <PrivateImplementationDetails> 5F2BD6104C620DE24A78538B659D1218F81A8DC50ED6645B5A040194E0CDC663;
    static /*0x5245*/ <PrivateImplementationDetails> 61358F81002F15B87F2746D4CD7FE28FD2CB45B8F0840B807B18C5A23F791CB1;
    static /*0x52c1*/ <PrivateImplementationDetails> 6164463B7C304A53288FDCF4DD2136E0E9A441D9930215FB691E3D2F692C3993;
    static /*0x52f1*/ <PrivateImplementationDetails> 624B1BC8BE6B6F8CF39572731AD0E5BDF2AAB137D0AB4A0F473B3D00666D766B;
    static /*0x56f1*/ <PrivateImplementationDetails> 663A2D6435FFB6C16D9382D8E22490E109514E59C03574E825F6B491AD8C8AAC;
    static /*0x5731*/ <PrivateImplementationDetails> 6708B572BDBE5D5E79701DBB9744AF74B50FED7608218F2D7BF1B5D87E5A53ED;
    static /*0x5761*/ <PrivateImplementationDetails> 684F74091FEFCDCDE9B282E317592631CA48B75F46340A11B95A474700E656D4;
    static /*0x576d*/ <PrivateImplementationDetails> 6965AC9D48CA477E9A17658D33A217051648138AD7024514DE014D8001B533C3;
    static /*0x578d*/ <PrivateImplementationDetails> 6A5953C1A0D67EA77DC8A5D34D0055B3D6A7A3C4CA3F6FE599471C40B9B017FC;
    static /*0x57b5*/ <PrivateImplementationDetails> 6A5EAF956411330E0B28CAD097D9698CBF4098D268AD1C0E04FE294F0607E53D;
    static /*0x57f5*/ <PrivateImplementationDetails> 6C99A25F0D00AE5BC45EE7F62CFC963F5DFC8FE4F7CE82ACEB0B5A1CDB51E3AB;
    static /*0x580d*/ <PrivateImplementationDetails> 6CB004567F6DA8572C921962EDECA8ABB063258E4B378E85E52017698A655056;
    static /*0x5819*/ <PrivateImplementationDetails> 6D4410134564FFF8B73800035CA093523750DF325139D004701C67D97488B8D5;
    static /*0x5859*/ <PrivateImplementationDetails> 6F055E07140AF36F1C17E348B39AB7ACB0647B788E869F4236E285C89C2C89EF;
    static /*0x5875*/ <PrivateImplementationDetails> 7017794F4FA285E1AA4C6FF9994A3DC0EDC472CB13D08BCA7B5CC287C51E0E3E;
    static /*0x5881*/ <PrivateImplementationDetails> 715F5EB09E6B0F8E87AD50BDAB729CF129E723B95990CE21DF233461DC29304E;
    static /*0x5981*/ <PrivateImplementationDetails> 74EF7306E7452D6859B6463CE496B8DF30925F69E1B2969E1F3F34BBC9C6AF04;
    static /*0x5a81*/ <PrivateImplementationDetails> 76387D5ADFE12720EE7A21E3C30296DE8356BE159BD422D9900C8146F914CADE;
    static /*0x5a8d*/ <PrivateImplementationDetails> 7650DB5F7D0AD39E75A5BB512A98F9763E302328E120F06230159AC1AD1C6B5D;
    static /*0x5a99*/ <PrivateImplementationDetails> 7854BA783A61F0B4D74198AF22A2D285EF70C526BDE4BE78FEDF180436FB621D;
    static /*0x5aa5*/ <PrivateImplementationDetails> 78A70FA0E21C85F13BDFA3D7B70E095EC5B61E51F34D2C1D531142B0634B30E5;
    static /*0x5ab1*/ <PrivateImplementationDetails> 79478AF14CB42EC0951669D5D1D864E43C211CBA631D8FFE7F6CD79FF60756C6;
    static /*0x5af5*/ <PrivateImplementationDetails> 7A36979350F6A229EB7206BEE580F51563EE52B71CD2132680B0AC33B3C31E27;
    static /*0x5b01*/ <PrivateImplementationDetails> 7BDD3F08BE488F1D6DCBF05D01C69BA80DF49A9E9E415F0205D575B4B5F32A34;
    static /*0x5b11*/ <PrivateImplementationDetails> 7C8975E1E60A5C8337F28EDF8C33C3B180360B7279644A9BC1AF3C51E6220BF5;
    static /*0x5b51*/ <PrivateImplementationDetails> 7C97C06F982D2F598F71BCF85A27244685EC039BC414EB391EC3EC449A619F37;
    static /*0x5b6f*/ <PrivateImplementationDetails> 7DDF88204E7E265240211841F0AB290A5E77EE4F9223EB2E39F9B89C30C41B9D;
    static /*0x5be3*/ <PrivateImplementationDetails> 7F034CF9D8AC0293D0C9535AF26B5452C6E916CE62FBBF765077BD958E69B7B9;
    static /*0x5c24*/ int 7FBDBBC598B2DE18BB5191FF9D66727F552A54412C9314CA5782824A150B3CD3;
    static /*0x5c28*/ long 800BC83FA3E127EC8C14A6282B05D6F224B8A8E2B2D3DAB222E5BADAB4A31ACB;
    static /*0x5c30*/ <PrivateImplementationDetails> 8051E141AAFE935BB42C7E96A9A525BAAC26F6867F1F455120DCC6E165AF17B1;
    static /*0x5c50*/ <PrivateImplementationDetails> 81C0F0D213E5735AED08C328CC9CC2E61B3AB83C9BF016A666B4144F8BF64457;
    static /*0x5c64*/ <PrivateImplementationDetails> 83E8FA01EECEC207D12DA40AEFC466B15F6412FFE2C30DBEF0C65B9B7FF01672;
    static /*0x5c84*/ <PrivateImplementationDetails> 85332E00AFFFDBE44E7421AA4236274F9495AC6C2204C59B9ADFC872D4215E12;
    static /*0x6084*/ <PrivateImplementationDetails> 86ECB4ABD964707BAF5ABF589057FBB2ED63DB1D7F0115A7DA45921043B6A96F;
    static /*0x60b4*/ <PrivateImplementationDetails> 874805F2B76BD7887959F02FE0B2A8C07C1E1D41F41AAD4D2AA1D0AB21A1780F;
    static /*0x60c4*/ <PrivateImplementationDetails> 896FB86C1BE3DBE6C3CC4FBE122562D75A4EBC6616D3393CF1AFE12377908B95;
    static /*0x6144*/ <PrivateImplementationDetails> 8AE83CF30C3CEAC5F4B9F025200D65EFAEC851DE0098817DB69F0E547407C095;
    static /*0x7944*/ <PrivateImplementationDetails> 8CB850AC259DD215242199AD8F1B0BC74C182B564124B84C0D56BDB7A8FF7286;
    static /*0x7950*/ <PrivateImplementationDetails> 8FC498A953A183E1FE81A183AE59047435BB9B33D657C625FAB03D38BE19F92E;
    static /*0x799c*/ <PrivateImplementationDetails> 93631B0726F6FE6629DAA743EE51B49F4477ED07391B68EEEA0672A4A90018AA;
    static /*0x7a9c*/ <PrivateImplementationDetails> 9476220840D3CE82203B4A722E278773B1DA458A22F49FCB9FC45B851DF7D503;
    static /*0x7b14*/ <PrivateImplementationDetails> 960F02F165C0EF9AC4C160FC98BE9273C245853BA32663BB1B6F1588077F95F4;
    static /*0x7b20*/ <PrivateImplementationDetails> 96883F56416393F42C830BCD6033BE079690C482BC73119EBBE5DC98834BACBF;
    static /*0x7b48*/ <PrivateImplementationDetails> 97467041703B2DF5571DCACC6A702C0C6DE68CE9A9470AA240F57D69C09AF7D3;
    static /*0x7b54*/ <PrivateImplementationDetails> 97CAAC7D5BE7722352C1AB556BFE01D3F3CCA0F50B5A648195D6415006620C8F;
    static /*0x7b7c*/ <PrivateImplementationDetails> 99FD541BFD4CF8DD3C18069CA1D5F4B622333DDBA412F00D5A6B642626034EDF;
    static /*0x7c7c*/ <PrivateImplementationDetails> 9ADB15F070E9316F84A156DD2B7F2EB5E3881C621225107D0AB86E6BB18F8B59;
    static /*0x7cbc*/ <PrivateImplementationDetails> 9B29692916637801E748ABDF9CE9D3A8AED3F375C84C7346C11C2BB150BD720B;
    static /*0x7cdc*/ <PrivateImplementationDetails> 9C28EF1A620E00413BBFC7E6ED40092033A3C250583DD7FAD355D2A306A7427B;
    static /*0x80dc*/ <PrivateImplementationDetails> 9CB8BF99E695FF4E0E3E01770F3E96060FC79466F1325C60B375349C591ADF02;
    static /*0x80fc*/ <PrivateImplementationDetails> 9CCC11CED0AD12118416B3C3C73453E6480B671C0EF2F753B6900DA2060F5B44;
    static /*0x812c*/ <PrivateImplementationDetails> 9CFF23020B5A7E24467474237978D4CB52A601FBC0B3E504B9ABC64C062A499C;
    static /*0x8138*/ <PrivateImplementationDetails> 9DA5D1DADE776A467199AC96E9412AD7A5CA1E62BCDAC527079912B1185A5C63;
    static /*0x8238*/ <PrivateImplementationDetails> 9DA6DC3BEB35D0E411A5D1E407E011542CC032FD6BD76CFFEB5EF327331840FD;
    static /*0x8244*/ <PrivateImplementationDetails> 9DC840E2F2B5B0E9B3B12C6585295C61986721911DA7AE18C9B18EFF2F01ABE5;
    static /*0x8260*/ <PrivateImplementationDetails> 9DDE3528C5CCCCD4D7C730403ABE54766C6645E371ED7ACB70584C320D87F670;
    static /*0x826c*/ <PrivateImplementationDetails> 9EF35AA995725D55C515A807B1D2BE31B36269235146245330CFB2683FA9A840;
    static /*0x828c*/ <PrivateImplementationDetails> 9F9F5111F7B27A781F1F1DDDE5EBC2DD2B796BFC7365C9C28B548E564176929F;
    static /*0x829c*/ <PrivateImplementationDetails> A08110AAECF4B88CA5A7F070B68E448ED895A5DE752B84C57651DA54D9BB5814;
    static /*0x82bc*/ <PrivateImplementationDetails> A1486177999A77F2FD76EAB02D2517803BFF5B0C5A01CFB95B3F1DA7B7D6DCE8;
    static /*0x82fc*/ <PrivateImplementationDetails> A4083C0BA9FBB6424F75B75603FBC0855756A32C2F4497CE3D79702E675882A9;
    static /*0x8302*/ <PrivateImplementationDetails> A4241EDCB474331DF94C96B4F24A3A8773452488FD0458F8C0C30F7C24B89E07;
    static /*0x830e*/ <PrivateImplementationDetails> A589B8F1C215FA773BA2724EB825E8B2D1792FB955349574454E18C63537F2A6;
    static /*0x838e*/ <PrivateImplementationDetails> A5A95A17B27BD47489B7BEB4A8AA145D08C838C183CD5A77A1A5EFD96AA3AB99;
    static /*0x83ce*/ <PrivateImplementationDetails> A719D1E9DB9C1628AF05DD49B4AA5D095CF0AD06D01C396B1777588A04D9D13E;
    static /*0x83da*/ <PrivateImplementationDetails> A935391692FCA9A4CF6CE823B9DBED3DB708352BB4ACEDDA9EADCA78ADD23DB7;
    static /*0x83e8*/ int A9DD1527A5845A7B2E82F3427251AD622D570D0B8CDA4A0AF9644EB34E69B2FC;
    static /*0x83ec*/ <PrivateImplementationDetails> AB3F6EE9927AC1C89E7F3D250F8DAC9A070249930D4A758B98F4D5B9A8E202B3;
    static /*0x8424*/ <PrivateImplementationDetails> AB60EEBC1B8BF85AD5AF219745EEA4317E0C780D22675F7A33A0929A34D17DE5;
    static /*0x8824*/ <PrivateImplementationDetails> AC7FC16C704375F0F1DB433E70C6C2B90B1D797B17806DD74E7664CAD8BFA778;
    static /*0x9024*/ <PrivateImplementationDetails> AD220A499D7A196B0FE1E8BCDAA020369A8BA1C4CF21B15A3E21935ED7B09D54;
    static /*0x9030*/ <PrivateImplementationDetails> AF0312129020B258B5B582D3F8EA8A3DAB35467AE93C8C6DBE5D6681CCD7D489;
    static /*0x9050*/ <PrivateImplementationDetails> B09C22565E577648AD57A0C5D1F44C38D4C01E2BF7727269A1E20A3717CC77D0;
    static /*0x9078*/ <PrivateImplementationDetails> B17AF625BB8EA7C85766DBFB60A73BAE2A82560C68B4F03D08B576CD43E911DA;
    static /*0x9084*/ <PrivateImplementationDetails> B1FFCD775449513A059F2F3A2DF44C39E6542C6474D6BAE3DC3FA1BC256255F0;
    static /*0x9094*/ <PrivateImplementationDetails> B23D510F520CB4BA8AFA847F8A40E757C40CB6A55B237EFA1AC6D3984911B114;
    static /*0x910c*/ <PrivateImplementationDetails> B2A10F44FFEE5755DDFA6587F62D7F83F24AF24429D3ACA46E56F3F295251DEB;
    static /*0x9118*/ <PrivateImplementationDetails> B3985439AEF8A4DF51A3369D7C0211EEF12CB0E510F6630E110C6DCC10B11A8E;
    static /*0x9158*/ <PrivateImplementationDetails> B48C3FCBDCCF3473EF494DC9D3E37B24CF9202AB511EEEB8FCBB48B626340059;
    static /*0x9164*/ <PrivateImplementationDetails> B6338EE68F3FD438E03D596B6D76554714958953358DF7320F5073C3CB779758;
    static /*0x9178*/ <PrivateImplementationDetails> B67F32BB12BAA41BEAF505F53EECD4F1409EF3E782F8CD077B511553999CE297;
    static /*0x9278*/ <PrivateImplementationDetails> B68ACFAD2A3D93FE2B8963E29978E6D3FADFFF5E7FE6C13590E8888CCA7AD7DD;
    static /*0x9284*/ <PrivateImplementationDetails> B698262446F5CFFF6CD492B8DBB1298BC61F0135EEE69366BD94E81ADE1D5C5A;
    static /*0x92a8*/ <PrivateImplementationDetails> B6FF5DB8C0FA699CD97E8EDF68219F0D1D9E509B4911710791D74AD7DF2DA1AD;
    static /*0x92cc*/ <PrivateImplementationDetails> B77E3D4019880A0C0F03E4214418983FD00C0107BB2632899FE6C3230F97B82C;
    static /*0x92dc*/ <PrivateImplementationDetails> B9D4AF390AFC6A0F149B843D651CFEBC1C4EC496A0263B72207836F9C525E1C4;
    static /*0x93dc*/ <PrivateImplementationDetails> BABB01CD1E2AD140F7D2AF35515DA38E8936F0BA0298BCF0245EB5692A3F69CC;
    static /*0x9404*/ <PrivateImplementationDetails> BB288FA00D4BBE2546E0D29F7D8BC6AF483CD4275D692B451B2E39A404E33EBF;
    static /*0x9804*/ <PrivateImplementationDetails> BD01644841E6B289961C01E9D8319807BB25F791DB6A990F60D44DA36533D5AD;
    static /*0x9810*/ <PrivateImplementationDetails> BD6174A7C16E1AF07272966A9C071C8A3CF16B2726C50D672A09F60636B08901;
    static /*0x9830*/ <PrivateImplementationDetails> BD71964D35F553A9E1D0CDDCB5864E0811BE84354BEEE68A301D5DFD1F0BEAD9;
    static /*0x9848*/ <PrivateImplementationDetails> BDB6BB299E50984399E0FD8F6BA60FC85EF8CAF6AD5154D53E6DAC34E2E0B381;
    static /*0x98a8*/ <PrivateImplementationDetails> BEDA989D5939125AA1831BFE35ED2E4F0F05DD63851049C646ACE173A2D0827C;
    static /*0x98b4*/ <PrivateImplementationDetails> BF3DB37CB55FF90EEE410403506E7AFB17B3B6ED163AEC657F4E4F47532D1E85;
    static /*0x98c0*/ <PrivateImplementationDetails> C0BCAD52BB24771C2430DFC75321628F5503FDDC5A0E05E93F3DD624A60B10BD;
    static /*0x9980*/ <PrivateImplementationDetails> C133E473E5E653C5C4AEDB8BCC1C1A3A44D384FC0B6C0FCF04672B1B325EC01B;
    static /*0x99cc*/ <PrivateImplementationDetails> C199D37D9A06A0F4C75F70A8ABD3D0C2FAEB17B255174C5E67392D81CF5FF0EC;
    static /*0x9dcc*/ <PrivateImplementationDetails> C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2;
    static /*0x9ecc*/ <PrivateImplementationDetails> C4E613C844059E36B3D4EE786C4236B8E641E7D49F520B003540BB274F7E12F7;
    static /*0xa6cc*/ <PrivateImplementationDetails> C7B696E5CE2020FEC8F611D5047339850FECC787C3DBC5D36589354D8ADF98C1;
    static /*0xa6d8*/ <PrivateImplementationDetails> C854B091EA9394BFC39C4324F63BF827E324ABA5F68693B00E4DB8B247ED2023;
    static /*0xaad8*/ <PrivateImplementationDetails> CB11E26FF20D3318A5A76F5FC0E725883F81ED29DAD7E32947BA8779AA3DE37F;
    static /*0xab38*/ <PrivateImplementationDetails> CC07D4A4B4FC6D98A85528D499B36F8489D6438071F4AADA11701D134678AFB1;
    static /*0xab58*/ <PrivateImplementationDetails> CC9BD9D64572985ECFB6E2A723B6DD347BB34F5AFECDBFB98444028D2DF4844D;
    static /*0xab64*/ <PrivateImplementationDetails> CCD83CF06E3CE2D4A938C42BAEA101B30335EAF483F59E5EDCB41DF7C4807E1B;
    static /*0xb364*/ <PrivateImplementationDetails> CF64D219C0BA56CECE4E41E0C8BF3AF538F4510FA9A2B00F38DA09E548270E5C;
    static /*0xb3a8*/ <PrivateImplementationDetails> D15388770BF0AB6F544906F0A1A3375BE05BB7FEB2B215CED8A8E41C42972549;
    static /*0xb3c8*/ <PrivateImplementationDetails> D1FAE5443A715D6F96387473C649F557670B8A92E175272491DFC646754F4A9D;
    static /*0xb3d4*/ <PrivateImplementationDetails> D38868B99B6C1AB9F2E65E75D07BA90CAF6DA7F4D74F9142A44413647473B362;
    static /*0xbbd4*/ <PrivateImplementationDetails> D3ADE9315DD51AE00C4C2D80ED119F3D1B1743E64ADC7FDDDE505286274C877D;
    static /*0xbbe0*/ <PrivateImplementationDetails> D6380FB2FF2DD88C9290D88B81E78BCA13AAAB4BE827B103062AFBB1085B0793;
    static /*0xbc08*/ <PrivateImplementationDetails> D916EBA7A5A5D84BB85D26EE65A08CC18219FACEB615519209ABB469C0B35D32;
    static /*0xbc14*/ <PrivateImplementationDetails> D9388FECE7A168D1EFFA85FA9C8DA1AEED48DDCE2E3799E07F41A9B60E389722;
    static /*0xbc4c*/ <PrivateImplementationDetails> DB1CCE19AFD5123D31DCDAC6656A6DB5AF929CA39192511B8C042DD0513E7497;
    static /*0xbc58*/ <PrivateImplementationDetails> DC196B5ACC67550E50DDC963D9192AEB816537E6A74CFB7DFE3A0453E5F4FB82;
    static /*0xbc98*/ <PrivateImplementationDetails> DC94C6E04C48743338670B79BCDA997FEEBD39A7A2DBACD46FC5A27D37AD9F71;
    static /*0xbca4*/ <PrivateImplementationDetails> DD2B2ACED61DA9A12AEE4F581C0D33D6D76A9722CDC6355B23FB5DF6B2032B18;
    static /*0xbce4*/ <PrivateImplementationDetails> DDA4EDB734C11C20B2D8A7BE67E2BB03E2F67B7928B0DAEB15EBF2EDD9A5150B;
    static /*0xbcf0*/ <PrivateImplementationDetails> DE56C9263420A7B28A6286EB62AFBE2C1D5164698C518792FD8CEAAF2CB2CD03;
    static /*0xbd30*/ <PrivateImplementationDetails> DE65050FB26A30C376E77EC7E5BE136721540CCE3760EAA1E14854746CADF7E8;
    static /*0xbdb0*/ <PrivateImplementationDetails> DE9FD94010C5C932FEB066B288CE65EBEB81EDE0E87B31B900BF855BFA2A2B5D;
    static /*0xbdbc*/ <PrivateImplementationDetails> DF93C334B40CA305A5AC46FA2BA7DB2C63404A699767F59982006C623702D568;
    static /*0xbebc*/ <PrivateImplementationDetails> E09120C0E7B92A532558D22D44D52452DFE460D6205D1009963B69AABD0F8185;
    static /*0xbec8*/ <PrivateImplementationDetails> E27F6E9719BC23F7138A27009F35243C6F94F6530A37FC26DE498AB64784DDDA;
    static /*0xbf08*/ <PrivateImplementationDetails> E3668879E09A70694ED6FEE919E303D7EA1266D783955D4DEEDC99CCC5AA6A8D;
    static /*0xbf14*/ <PrivateImplementationDetails> E3B4E767F318263A8E7A64E1D61F6D3368A3B59AF34CBB94E657E7FCC58F5BA5;
    static /*0xbf54*/ <PrivateImplementationDetails> E3DB1BCE79976D586D8B218DCAC26CAD32EA98C00E0A2CD37172FCAF14157178;
    static /*0xbf68*/ <PrivateImplementationDetails> E45C3F86EC68FBD407D74FAEC9A50DFBAA5589A6FB63CCC5F7AA901D2ACA48B6;
    static /*0xc768*/ <PrivateImplementationDetails> E5325952F9FF2214CCE24E320F2BCD6A71C6EB4127F6069352CE065883AE80D0;
    static /*0xcf68*/ <PrivateImplementationDetails> E75B7154F674F25D54E89CB7D91F35CC111C8A67EE585938E07D12CB4761637F;
    static /*0xd068*/ <PrivateImplementationDetails> E7C6C4296C6C2B00D1062AA69054CAB58A57C3ACCE5ECFA4084E7E94CF805F87;
    static /*0xd084*/ <PrivateImplementationDetails> E87A3B2C4C5D7247B7E149126C3503D3AE2878A02155EA6153E057FE35D9656C;
    static /*0xd090*/ <PrivateImplementationDetails> E8D46701532BBEB9F3FF8A63C0D74D8C417C782DEE2C085A6D940A8B5B38DA18;
    static /*0xd490*/ <PrivateImplementationDetails> ECA151F23D399F9FE976255B143D0691D0BE043E033B0E2814C0A547336D6545;
    static /*0xd4b8*/ <PrivateImplementationDetails> EF7F3D1F9F5FC7985E4AE3D48BF986867BA544C1D2FEA6A7745FEA4A2FCAB381;
    static /*0xd4c8*/ <PrivateImplementationDetails> F2CD85BDEF1E84E95EA92E2B686CEEC9FC518118A4342FAB46BECECE253D71F4;
    static /*0xd4d4*/ <PrivateImplementationDetails> F509AE84659919EA56BFF8D829ED41E971314D3D46ED9B0F8F5670D72EB1688B;
    static /*0xd514*/ <PrivateImplementationDetails> F8D7861760C88CC514F66095AF0AED47ECBA063ADB65F47125ED07BCC2CF9842;
    static /*0xd588*/ <PrivateImplementationDetails> F8E6964ADFFC257265537256D21E93496A17B9271DC5D64F40869EEEAAFF6FBB;
    static /*0xd648*/ <PrivateImplementationDetails> F915BC5619C5EB2C4D315B5409BC531F55FA3E3A6167F57B7A4F5F7F9C5F022B;
    static /*0xd748*/ <PrivateImplementationDetails> F93A6E9A709B14FD05706C119D157EEE96F24DE3FDFA34F6D0AFF9537DE8ACC0;
    static /*0xd788*/ <PrivateImplementationDetails> FA624E5847BD2E5A00CCA1B3515D315FA5C3450C3E832077935CEBA18E9F5571;
    static /*0xd794*/ <PrivateImplementationDetails> FA9320F15F87607CD9E1033E6DD907B11EEDF491D7EBBFD29EC8D07E12A822CD;
    static /*0xd894*/ <PrivateImplementationDetails> FB7A6532989D730F69E4757D690D25A43E71041FCFF7355747E274F956BB03E9;
    static /*0xe094*/ <PrivateImplementationDetails> FC216F5C5AE2947D800794ECD5F752EE8381073C2E5D0D095FDA040F541702F3;
    static /*0xe10c*/ <PrivateImplementationDetails> FD85B0A9251A04B1D271AF14FD041B4606FA95DDB116F92CB14470653A62AD19;
    static /*0xe11c*/ <PrivateImplementationDetails> FF4D5896EDB9E12991ECB7FA7807EEB0F7ACD30F57ECB63DD9943F5245752A0F;
    static /*0xe19c*/ <PrivateImplementationDetails> FFC55B79B9BE7817954A4672A75C8603D1D1FE85A61786D63BD3B0AA239FFA58;

    static /*0x3eb30c4*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=19
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=28
    {
    }

    struct __StaticArrayInitTypeSize=30
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=68
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=96
    {
    }

    struct __StaticArrayInitTypeSize=116
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=124
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=160
    {
    }

    struct __StaticArrayInitTypeSize=192
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=384
    {
    }

    struct __StaticArrayInitTypeSize=512
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1152
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=6144
    {
    }
}

class $BurstDirectCallInitializer
{
    static /*0x3eb3140*/ void Initialize();
}

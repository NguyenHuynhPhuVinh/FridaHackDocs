class <Module>
{
}

namespace Microsoft
{
    namespace CodeAnalysis
    {
        class EmbeddedAttribute : System.Attribute
        {
            /*0x292f318*/ EmbeddedAttribute();
        }
    }
}

namespace System
{
    namespace Runtime
    {
        namespace CompilerServices
        {
            class NullableAttribute : System.Attribute
            {
                /*0x10*/ byte[] NullableFlags;

                /*0x292f320*/ NullableAttribute(byte[] );
            }
        }
    }
}

namespace Best
{
    namespace HTTP
    {
        enum HTTPMethods
        {
            Get = 0,
            Head = 1,
            Post = 2,
            Put = 3,
            Delete = 4,
            Patch = 5,
            Trace = 6,
            Merge = 7,
            Options = 8,
            Connect = 9,
            Query = 10,
        }

        class HTTPRange
        {
            /*0x10*/ long <FirstBytePos>k__BackingField;
            /*0x18*/ long <LastBytePos>k__BackingField;
            /*0x20*/ long <ContentLength>k__BackingField;
            /*0x28*/ bool <IsValid>k__BackingField;

            /*0x292f390*/ HTTPRange(int contentLength);
            /*0x292f3c0*/ HTTPRange(long firstBytePosition, long lastBytePosition, long contentLength);
            /*0x292f350*/ long get_FirstBytePos();
            /*0x292f358*/ void set_FirstBytePos(long value);
            /*0x292f360*/ long get_LastBytePos();
            /*0x292f368*/ void set_LastBytePos(long value);
            /*0x292f370*/ long get_ContentLength();
            /*0x292f378*/ void set_ContentLength(long value);
            /*0x292f380*/ bool get_IsValid();
            /*0x292f388*/ void set_IsValid(bool value);
            /*0x292f40c*/ string ToString();
        }

        class OnRequestFinishedDelegate : System.MulticastDelegate
        {
            /*0x292f5dc*/ OnRequestFinishedDelegate(object object, nint method);
            /*0x292f6e8*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp);
        }

        class OnHeaderEnumerationDelegate : System.MulticastDelegate
        {
            /*0x292f6fc*/ OnHeaderEnumerationDelegate(object object, nint method);
            /*0x292f7b0*/ void Invoke(string header, System.Collections.Generic.List<string> values);
        }

        class HTTPRequest : System.Collections.IEnumerator
        {
            static /*0x0*/ string[] MethodNames;
            /*0x10*/ Best.HTTP.HTTPMethods <MethodType>k__BackingField;
            /*0x18*/ System.Uri <Uri>k__BackingField;
            /*0x20*/ Best.HTTP.HTTPResponse <Response>k__BackingField;
            /*0x28*/ Best.HTTP.Request.Settings.DownloadSettings DownloadSettings;
            /*0x30*/ Best.HTTP.Request.Settings.UploadSettings UploadSettings;
            /*0x38*/ Best.HTTP.Request.Settings.TimeoutSettings TimeoutSettings;
            /*0x40*/ Best.HTTP.Request.Settings.RetrySettings RetrySettings;
            /*0x48*/ Best.HTTP.Request.Settings.ProxySettings ProxySettings;
            /*0x50*/ Best.HTTP.Request.Settings.RedirectSettings <RedirectSettings>k__BackingField;
            /*0x58*/ Best.HTTP.OnRequestFinishedDelegate <Callback>k__BackingField;
            /*0x60*/ System.Threading.CancellationTokenSource <CancellationTokenSource>k__BackingField;
            /*0x68*/ System.Action<Best.HTTP.HTTPRequest> OnCancellationRequested;
            /*0x70*/ System.Exception <Exception>k__BackingField;
            /*0x78*/ object <Tag>k__BackingField;
            /*0x80*/ Best.HTTP.HTTPRequestStates _state;
            /*0x88*/ Best.HTTP.Request.Timings.TimingCollector <Timing>k__BackingField;
            /*0x90*/ Best.HTTP.Request.Authenticators.IAuthenticator Authenticator;
            /*0x98*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
            /*0xa0*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;

            static /*0x29321f0*/ HTTPRequest();
            /*0x292fde8*/ HTTPRequest(System.Uri uri);
            /*0x2930118*/ HTTPRequest(System.Uri uri, Best.HTTP.OnRequestFinishedDelegate callback);
            /*0x292fdf4*/ HTTPRequest(System.Uri uri, Best.HTTP.HTTPMethods methodType, Best.HTTP.OnRequestFinishedDelegate callback);
            /*0x292f7c4*/ Best.HTTP.HTTPMethods get_MethodType();
            /*0x292f7cc*/ void set_MethodType(Best.HTTP.HTTPMethods value);
            /*0x292f7d4*/ System.Uri get_Uri();
            /*0x292f7dc*/ void set_Uri(System.Uri value);
            /*0x292f7e4*/ System.Uri get_CurrentUri();
            /*0x292f808*/ Best.HTTP.HostSetting.HostKey get_CurrentHostKey();
            /*0x292f86c*/ Best.HTTP.HTTPResponse get_Response();
            /*0x292f874*/ void set_Response(Best.HTTP.HTTPResponse value);
            /*0x292f87c*/ Best.HTTP.Request.Settings.RedirectSettings get_RedirectSettings();
            /*0x292f884*/ Best.HTTP.OnRequestFinishedDelegate get_Callback();
            /*0x292f88c*/ void set_Callback(Best.HTTP.OnRequestFinishedDelegate value);
            /*0x292f894*/ bool get_IsCancellationRequested();
            /*0x292f8ac*/ System.Threading.CancellationTokenSource get_CancellationTokenSource();
            /*0x292f8b4*/ void set_CancellationTokenSource(System.Threading.CancellationTokenSource value);
            /*0x292f8bc*/ System.Exception get_Exception();
            /*0x292f8c4*/ void set_Exception(System.Exception value);
            /*0x292f8cc*/ object get_Tag();
            /*0x292f8d4*/ void set_Tag(object value);
            /*0x292f8dc*/ Best.HTTP.HTTPRequestStates get_State();
            /*0x292f8f4*/ void set_State(Best.HTTP.HTTPRequestStates value);
            /*0x292fdb8*/ Best.HTTP.Request.Timings.TimingCollector get_Timing();
            /*0x292fdc0*/ void set_Timing(Best.HTTP.Request.Timings.TimingCollector value);
            /*0x292fdc8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
            /*0x292fdd0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
            /*0x292fdd8*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
            /*0x292fde0*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
            /*0x293042c*/ void AddHeader(string name, string value);
            /*0x29304b0*/ void SetHeader(string name, string value);
            /*0x2930534*/ bool RemoveHeader(string name);
            /*0x29305a0*/ bool HasHeader(string name);
            /*0x293060c*/ string GetFirstHeaderValue(string name);
            /*0x2930678*/ void RemoveUnsafeHeaders();
            /*0x29308c0*/ void Prepare();
            /*0x29308e0*/ void EnumerateHeaders(Best.HTTP.OnHeaderEnumerationDelegate callback, bool callBeforeSendCallback);
            /*0x2931864*/ Best.HTTP.HTTPRequest Send();
            /*0x29318cc*/ void Abort();
            /*0x2931e84*/ object get_Current();
            /*0x2931e8c*/ bool MoveNext();
            /*0x2931ea8*/ void Reset();
            /*0x2931ee0*/ void Dispose();
            /*0x2931ffc*/ string ToString();
        }

        enum HTTPRequestStates
        {
            Initial = 0,
            Queued = 1,
            Processing = 2,
            Finished = 3,
            Error = 4,
            Aborted = 5,
            ConnectionTimedOut = 6,
            TimedOut = 7,
        }

        class HTTPResponse : System.IDisposable
        {
            /*0x10*/ System.Version <HTTPVersion>k__BackingField;
            /*0x18*/ int <StatusCode>k__BackingField;
            /*0x20*/ string <Message>k__BackingField;
            /*0x28*/ bool <IsFromCache>k__BackingField;
            /*0x30*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;
            /*0x38*/ byte[] _data;
            /*0x40*/ bool <IsUpgraded>k__BackingField;
            /*0x48*/ string dataAsText;
            /*0x50*/ UnityEngine.Texture2D texture;
            /*0x58*/ Best.HTTP.Response.DownloadContentStream <DownStream>k__BackingField;
            /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
            /*0x68*/ Best.HTTP.HTTPRequest <Request>k__BackingField;
            /*0x70*/ Best.HTTP.Caching.HTTPCacheContentWriter _cacheWriter;
            /*0x78*/ bool _isDisposed;

            static /*0x2933054*/ string ReadTo(System.IO.Stream stream, byte blocker);
            static /*0x2933338*/ string ReadTo(System.IO.Stream stream, byte blocker1, byte blocker2);
            static /*0x293362c*/ string NoTrimReadTo(System.IO.Stream stream, byte blocker1, byte blocker2);
            /*0x2932ae0*/ HTTPResponse(Best.HTTP.HTTPRequest request, bool isFromCache);
            /*0x2932564*/ System.Version get_HTTPVersion();
            /*0x293256c*/ void set_HTTPVersion(System.Version value);
            /*0x2932574*/ int get_StatusCode();
            /*0x293257c*/ void set_StatusCode(int value);
            /*0x2932584*/ string get_Message();
            /*0x293258c*/ void set_Message(string value);
            /*0x2932594*/ bool get_IsSuccess();
            /*0x29325b0*/ bool get_IsFromCache();
            /*0x29325b8*/ void set_IsFromCache(bool value);
            /*0x29325c0*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
            /*0x29325c8*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
            /*0x29325d0*/ byte[] get_Data();
            /*0x29328ec*/ bool get_IsUpgraded();
            /*0x29328f4*/ void set_IsUpgraded(bool value);
            /*0x29328fc*/ string get_DataAsText();
            /*0x29329c4*/ UnityEngine.Texture2D get_DataAsTexture2D();
            /*0x2932ab0*/ Best.HTTP.Response.DownloadContentStream get_DownStream();
            /*0x2932ab8*/ void set_DownStream(Best.HTTP.Response.DownloadContentStream value);
            /*0x2932ac0*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
            /*0x2932ac8*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
            /*0x2932ad0*/ Best.HTTP.HTTPRequest get_Request();
            /*0x2932ad8*/ void set_Request(Best.HTTP.HTTPRequest value);
            /*0x2932bac*/ void AddHeader(string name, string value);
            /*0x2932c30*/ System.Collections.Generic.List<string> GetHeaderValues(string name);
            /*0x2932c9c*/ string GetFirstHeaderValue(string name);
            /*0x2932d08*/ bool HasHeaderWithValue(string headerName, string value);
            /*0x2932d7c*/ bool HasHeader(string headerName);
            /*0x2932de8*/ Best.HTTP.HTTPRange GetRange();
            /*0x29338a4*/ void BeginReceiveContent();
            /*0x29339b8*/ void FeedDownloadedContentChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
            /*0x2933aec*/ void FinishedContentReceiving();
            /*0x2933b38*/ void CreateDownloadStream(Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailable);
            /*0x293287c*/ void CheckDisposed();
            /*0x2931f90*/ void Dispose();
            /*0x2933d80*/ void Dispose(bool disposing);
        }

        namespace Profiler
        {
            namespace Network
            {
                class NetworkStats
                {
                    static /*0x0*/ Unity.Profiling.ProfilerCategory Category;
                    static /*0x2*/ Unity.Profiling.ProfilerCounterValue<long> BufferedToSend;
                    static /*0x3*/ Unity.Profiling.ProfilerCounterValue<long> SentSinceLastFrame;
                    static /*0x4*/ Unity.Profiling.ProfilerCounterValue<long> SentTotal;
                    static /*0x5*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedSinceLastFrame;
                    static /*0x6*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedAndUnprocessed;
                    static /*0x7*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedTotal;
                    static /*0x8*/ Unity.Profiling.ProfilerCounterValue<int> OpenConnectionsCounter;
                    static /*0x9*/ Unity.Profiling.ProfilerCounterValue<int> TotalConnectionsCounter;
                    static /*0xa*/ Unity.Profiling.ProfilerCounterValue<int> TotalDNSCacheHitsCounter;
                    static /*0xb*/ Unity.Profiling.ProfilerCounterValue<int> TotalDNSCacheMissCounter;

                    static /*0x2933e10*/ NetworkStats();
                }

                class NetworkStatsCollector
                {
                    static /*0x0*/ long _totalNetworkBytesReceived;
                    static /*0x8*/ long _totalNetworkBytesSent;
                    static /*0x10*/ int _totalConnections;
                    static /*0x14*/ int _openConnections;
                    static /*0x18*/ int _bufferedToSend;
                    static /*0x1c*/ int _receivedAndUnprocessed;

                    static /*0x2933f8c*/ long get_TotalNetworkBytesReceived();
                    static /*0x2933fd4*/ long get_TotalNetworkBytesSent();
                    static /*0x293401c*/ int get_TotalConnections();
                    static /*0x2934064*/ int get_OpenConnections();
                    static /*0x29340ac*/ int get_BufferedToSend();
                    static /*0x29340f4*/ int get_ReceivedAndUnprocessed();
                    static /*0x293413c*/ void IncrementCurrentConnections();
                    static /*0x293419c*/ void DecrementCurrentConnections();
                    static /*0x29341e8*/ void IncrementTotalNetworkBytesReceived(int amount);
                    static /*0x2934238*/ void IncrementTotalNetworkBytesSent(int amount);
                    static /*0x293428c*/ void IncrementBufferedToSend(int amount);
                    static /*0x29342e0*/ void IncrementReceivedAndUnprocessed(int amount);
                }
            }

            namespace Memory
            {
                class MemoryStats
                {
                    static /*0x0*/ Unity.Profiling.ProfilerCategory Category;
                    static /*0x2*/ Unity.Profiling.ProfilerCounterValue<long> Borrowed;
                    static /*0x3*/ Unity.Profiling.ProfilerCounterValue<long> Pooled;
                    static /*0x4*/ Unity.Profiling.ProfilerCounterValue<long> CacheHits;
                    static /*0x5*/ Unity.Profiling.ProfilerCounterValue<long> ArrayAllocations;

                    static /*0x2934334*/ MemoryStats();
                }
            }
        }

        namespace Response
        {
            class DownloadContentStream : System.IO.Stream
            {
                /*0x28*/ Best.HTTP.HTTPResponse <Response>k__BackingField;
                /*0x30*/ long _length;
                /*0x38*/ long <MaxBuffered>k__BackingField;
                /*0x40*/ bool _isDetached;
                /*0x48*/ Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable _bufferAvailableHandler;
                /*0x50*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segments;
                /*0x58*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment _currentSegment;
                /*0x68*/ bool _isCompleted;
                /*0x70*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x78*/ int _isFullCheckCount;
                /*0x7c*/ bool _isDisposed;

                /*0x2934618*/ DownloadContentStream(Best.HTTP.HTTPResponse response, long maxBuffered, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                /*0x2934420*/ Best.HTTP.HTTPResponse get_Response();
                /*0x2934428*/ void set_Response(Best.HTTP.HTTPResponse value);
                /*0x2934430*/ long get_Length();
                /*0x293443c*/ long get_MaxBuffered();
                /*0x2934444*/ void set_MaxBuffered(long value);
                /*0x293444c*/ bool get_IsFull();
                /*0x2934474*/ bool get_IsDetached();
                /*0x293447c*/ void set_IsDetached(bool value);
                /*0x293460c*/ void EmergencyIncreaseMaxBuffered();
                /*0x2934744*/ void CompleteAdding(System.Exception error);
                /*0x293494c*/ int Read(byte[] buffer, int offset, int count);
                /*0x2934dc4*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                /*0x2934ec4*/ bool DoFullCheck(int limit);
                /*0x2934f18*/ void Dispose(bool disposing);
                /*0x29350e8*/ bool get_CanRead();
                /*0x29350f0*/ bool get_CanSeek();
                /*0x29350f8*/ bool get_CanWrite();
                /*0x2935100*/ long get_Position();
                /*0x2935138*/ void set_Position(long value);
                /*0x2935170*/ void Flush();
                /*0x29351a8*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x29351e0*/ void SetLength(long value);
                /*0x2935218*/ void Write(byte[] buffer, int offset, int count);
            }

            namespace Decompression
            {
                class BrotliDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferSegmentStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ System.IO.Compression.BrotliStream decompressorStream;
                    /*0x28*/ byte[] copyBuffer;
                    /*0x30*/ int _minLengthToDecompress;

                    static /*0x2935250*/ bool IsSupported();
                    /*0x2935258*/ BrotliDecompressor(int minLengthToDecompress);
                    /*0x2935280*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x29355b8*/ void Dispose();
                }

                class DecompressorFactory
                {
                    static /*0x0*/ string AcceptEncoding;

                    static /*0x29311d0*/ void SetupHeaders(Best.HTTP.HTTPRequest request);
                    static /*0x2935690*/ Best.HTTP.Response.Decompression.IDecompressor GetDecompressor(string encoding, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class DeflateDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    static /*0x0*/ bool IsSupported;
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ Best.HTTP.Shared.Compression.Zlib.DeflateStream decompressorStream;
                    /*0x28*/ int MinLengthToDecompress;

                    static /*0x2935ef4*/ DeflateDecompressor();
                    /*0x293594c*/ DeflateDecompressor(int minLengthToDecompress);
                    /*0x293597c*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2935d3c*/ void Finalize();
                    /*0x2935dc0*/ void Dispose();
                }

                class GZipDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    static /*0x0*/ bool IsSupported;
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ Best.HTTP.Shared.Compression.Zlib.GZipStream decompressorStream;
                    /*0x28*/ int MinLengthToDecompress;

                    static /*0x29364b8*/ GZipDecompressor();
                    /*0x293591c*/ GZipDecompressor(int minLengthToDecompress);
                    /*0x2935f40*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2936300*/ void Finalize();
                    /*0x2936384*/ void Dispose();
                }

                interface IDecompressor : System.IDisposable
                {
                    System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                }
            }
        }

        namespace Request
        {
            namespace Upload
            {
                class UploadStreamBase : System.IO.Stream
                {
                    /*0x28*/ Best.HTTP.Hosts.Connections.IThreadSignaler <Signaler>k__BackingField;

                    /*0x2936504*/ void set_Signaler(Best.HTTP.Hosts.Connections.IThreadSignaler value);
                    /*0x293650c*/ long get_Length();
                    /*0x1f30ebc*/ void BeforeSendHeaders(Best.HTTP.HTTPRequest request);
                    /*0x2936544*/ void BeforeSendBody(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.IThreadSignaler threadSignaler);
                }
            }

            namespace Timings
            {
                struct PartialEvent
                {
                    /*0x10*/ string EventName;
                    /*0x18*/ System.DateTime StartedAt;

                    /*0x2936550*/ PartialEvent(string eventName, System.DateTime startedAt);
                    /*0x2936578*/ bool IsSet();
                    /*0x2936600*/ string ToString();
                }

                class TimingCollector
                {
                    /*0x10*/ Best.HTTP.HTTPRequest <ParentRequest>k__BackingField;
                    /*0x18*/ System.DateTime <Created>k__BackingField;
                    /*0x20*/ System.DateTime <Finished>k__BackingField;
                    /*0x28*/ System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> <Events>k__BackingField;
                    /*0x30*/ Best.HTTP.Request.Timings.PartialEvent _partialEvent;

                    /*0x2930350*/ TimingCollector(Best.HTTP.HTTPRequest parentRequest);
                    /*0x2936784*/ Best.HTTP.HTTPRequest get_ParentRequest();
                    /*0x293678c*/ System.DateTime get_Created();
                    /*0x2936794*/ void set_Created(System.DateTime value);
                    /*0x293679c*/ System.DateTime get_Finished();
                    /*0x29367a4*/ void set_Finished(System.DateTime value);
                    /*0x29367ac*/ System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> get_Events();
                    /*0x29367b4*/ void set_Events(System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> value);
                    /*0x29367bc*/ void StartNext(string eventName);
                    /*0x2936924*/ void AddEvent(Best.HTTP.Request.Timings.TimingEventInfo timingEvent);
                    /*0x2936e88*/ void AddEvent(string name, System.DateTime when, System.TimeSpan duration);
                    /*0x2936fac*/ string ToString();
                }

                struct TimingEvent : System.IEquatable<Best.HTTP.Request.Timings.TimingEvent>
                {
                    static /*0x0*/ Best.HTTP.Request.Timings.TimingEvent Empty;
                    /*0x10*/ string Name;
                    /*0x18*/ System.TimeSpan Duration;
                    /*0x20*/ System.DateTime Start;

                    static /*0x29376a0*/ TimingEvent();
                    /*0x29372b4*/ TimingEvent(string name, System.TimeSpan duration);
                    /*0x2936f80*/ TimingEvent(string name, System.DateTime when, System.TimeSpan duration);
                    /*0x2937334*/ bool Equals(Best.HTTP.Request.Timings.TimingEvent other);
                    /*0x293740c*/ bool Equals(object obj);
                    /*0x29374cc*/ int GetHashCode();
                    /*0x29375ac*/ string ToString();
                }

                enum TimingEvents
                {
                    StartNext = 0,
                    Finish = 1,
                }

                struct TimingEventInfo
                {
                    /*0x10*/ Best.HTTP.HTTPRequest SourceRequest;
                    /*0x18*/ Best.HTTP.Request.Timings.TimingEvents Event;
                    /*0x20*/ string Name;
                    /*0x28*/ System.DateTime Time;

                    /*0x2936888*/ TimingEventInfo(Best.HTTP.HTTPRequest parentRequest, Best.HTTP.Request.Timings.TimingEvents timingEvent, string eventName);
                    /*0x2937750*/ string ToString();
                }
            }

            namespace Settings
            {
                class OnHeadersReceivedDelegate : System.MulticastDelegate
                {
                    /*0x2937954*/ OnHeadersReceivedDelegate(object object, nint method);
                    /*0x2937a60*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                }

                class OnProgressDelegate : System.MulticastDelegate
                {
                    /*0x2937a74*/ OnProgressDelegate(object object, nint method);
                    /*0x2937b80*/ void Invoke(Best.HTTP.HTTPRequest req, long progress, long length);
                }

                class OnDownloadStartedDelegate : System.MulticastDelegate
                {
                    /*0x2937b94*/ OnDownloadStartedDelegate(object object, nint method);
                    /*0x2937ca0*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Response.DownloadContentStream stream);
                }

                class OnCreateDownloadStreamDelegate : System.MulticastDelegate
                {
                    /*0x2937cb4*/ OnCreateDownloadStreamDelegate(object object, nint method);
                    /*0x2937dc0*/ Best.HTTP.Response.DownloadContentStream Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                }

                class OnUpgradedDelegate : System.MulticastDelegate
                {
                    /*0x2937dd4*/ OnUpgradedDelegate(object object, nint method);
                    /*0x2937ee0*/ bool Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                }

                class DownloadSettings
                {
                    /*0x10*/ long ContentStreamMaxBuffered;
                    /*0x18*/ bool <DisableCache>k__BackingField;
                    /*0x19*/ bool <CacheOnly>k__BackingField;
                    /*0x20*/ Best.HTTP.Request.Settings.OnHeadersReceivedDelegate OnHeadersReceived;
                    /*0x28*/ Best.HTTP.Request.Settings.OnCreateDownloadStreamDelegate DownloadStreamFactory;
                    /*0x30*/ Best.HTTP.Request.Settings.OnDownloadStartedDelegate OnDownloadStarted;
                    /*0x38*/ Best.HTTP.Request.Settings.OnProgressDelegate OnDownloadProgress;
                    /*0x40*/ Best.HTTP.Request.Settings.OnUpgradedDelegate OnUpgraded;

                    /*0x2930124*/ DownloadSettings();
                    /*0x2937ef4*/ bool get_DisableCache();
                    /*0x2937efc*/ void set_DisableCache(bool value);
                    /*0x2937f04*/ bool get_CacheOnly();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Request.Settings.DownloadSettings.<> <>9;
                        static /*0x8*/ Best.HTTP.Request.Settings.OnCreateDownloadStreamDelegate <>9__14_0;

                        static /*0x2937f0c*/ <>c();
                        /*0x2937f74*/ <>c();
                        /*0x2937f7c*/ Best.HTTP.Response.DownloadContentStream <.ctor>b__14_0(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                    }
                }

                class ProxySettings
                {
                    /*0x10*/ Best.HTTP.Proxies.Proxy <Proxy>k__BackingField;

                    /*0x2930288*/ ProxySettings();
                    /*0x2938000*/ bool HasProxyFor(System.Uri uri);
                    /*0x293817c*/ Best.HTTP.Proxies.Proxy get_Proxy();
                    /*0x2938184*/ void set_Proxy(Best.HTTP.Proxies.Proxy value);
                    /*0x293818c*/ bool Handle407(Best.HTTP.HTTPRequest request);
                    /*0x29381a4*/ void AddToHash(System.Uri requestUri, ref UnityEngine.Hash128 hash);
                    /*0x29382c8*/ string ToString();
                }

                class OnBeforeRedirectionDelegate : System.MulticastDelegate
                {
                    /*0x29382ec*/ OnBeforeRedirectionDelegate(object object, nint method);
                    /*0x29383f8*/ bool Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Uri redirectUri);
                }

                class RedirectSettings
                {
                    /*0x10*/ bool <IsRedirected>k__BackingField;
                    /*0x18*/ System.Uri <RedirectUri>k__BackingField;
                    /*0x20*/ int <MaxRedirects>k__BackingField;
                    /*0x24*/ int <RedirectCount>k__BackingField;
                    /*0x28*/ Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate onBeforeRedirection;

                    /*0x2930230*/ RedirectSettings(int maxRedirects);
                    /*0x293840c*/ bool get_IsRedirected();
                    /*0x2938414*/ void set_IsRedirected(bool value);
                    /*0x293841c*/ System.Uri get_RedirectUri();
                    /*0x2938424*/ void set_RedirectUri(System.Uri value);
                    /*0x293842c*/ int get_MaxRedirects();
                    /*0x2938434*/ void set_MaxRedirects(int value);
                    /*0x293843c*/ int get_RedirectCount();
                    /*0x2938444*/ void set_RedirectCount(int value);
                    /*0x293844c*/ void add_OnBeforeRedirection(Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate value);
                    /*0x29384dc*/ void remove_OnBeforeRedirection(Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate value);
                    /*0x293856c*/ bool CallOnBeforeRedirection(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Uri redirectUri);
                }

                class RetrySettings
                {
                    /*0x10*/ int <Retries>k__BackingField;
                    /*0x14*/ int <MaxRetries>k__BackingField;

                    /*0x2930328*/ RetrySettings(int maxRetries);
                    /*0x293858c*/ int get_Retries();
                    /*0x2938594*/ void set_Retries(int value);
                    /*0x293859c*/ int get_MaxRetries();
                    /*0x29385a4*/ void set_MaxRetries(int value);
                }

                class TimeoutSettings
                {
                    /*0x10*/ System.DateTime <QueuedAt>k__BackingField;
                    /*0x18*/ System.DateTime <ProcessingStarted>k__BackingField;
                    /*0x20*/ System.Nullable<System.TimeSpan> _connectTimeout;
                    /*0x30*/ System.Nullable<System.TimeSpan> _timeout;
                    /*0x40*/ Best.HTTP.HTTPRequest _request;

                    /*0x2930258*/ TimeoutSettings(Best.HTTP.HTTPRequest request);
                    /*0x29385ac*/ System.DateTime get_QueuedAt();
                    /*0x29385b4*/ void set_QueuedAt(System.DateTime value);
                    /*0x29385bc*/ System.DateTime get_ProcessingStarted();
                    /*0x29385c4*/ void set_ProcessingStarted(System.DateTime value);
                    /*0x29385cc*/ System.TimeSpan get_ConnectTimeout();
                    /*0x2938804*/ void set_ConnectTimeout(System.TimeSpan value);
                    /*0x2938878*/ System.TimeSpan get_Timeout();
                    /*0x2938a3c*/ void set_Timeout(System.TimeSpan value);
                    /*0x2931d8c*/ bool IsConnectTimedOut(System.DateTime now);
                    /*0x2931c84*/ bool IsTimedOut(System.DateTime now);
                    /*0x2938ab0*/ void SetProcessing(System.DateTime now);
                }

                class OnHeadersSentDelegate : System.MulticastDelegate
                {
                    /*0x2938b1c*/ OnHeadersSentDelegate(object object, nint method);
                    /*0x2938c24*/ void Invoke(Best.HTTP.HTTPRequest req);
                }

                class UploadSettings : System.IDisposable
                {
                    /*0x10*/ int UploadChunkSize;
                    /*0x18*/ System.IO.Stream UploadStream;
                    /*0x20*/ bool DisposeStream;
                    /*0x28*/ Best.HTTP.Request.Settings.OnProgressDelegate OnUploadProgress;
                    /*0x30*/ Best.HTTP.Request.Settings.OnHeadersSentDelegate _onHeadersSent;
                    /*0x38*/ bool isDisposed;

                    /*0x2930218*/ UploadSettings();
                    /*0x2938c38*/ void SetupRequest(Best.HTTP.HTTPRequest request, bool dispatchHeadersSentCallback);
                    /*0x2938e70*/ void call_onBeforeHeaderSend(Best.HTTP.HTTPRequest request);
                    /*0x2938fa4*/ void Dispose(bool disposing);
                    /*0x2931f24*/ void Dispose();

                    class <>c__DisplayClass9_0
                    {
                        /*0x10*/ Best.HTTP.Request.Settings.UploadSettings <>4__this;
                        /*0x18*/ Best.HTTP.HTTPRequest request;

                        /*0x2938e68*/ <>c__DisplayClass9_0();
                        /*0x2938ffc*/ void <SetupRequest>b__0();
                    }
                }
            }

            namespace Authenticators
            {
                interface IAuthenticator
                {
                    /*0x1f30ebc*/ void SetupRequest(Best.HTTP.HTTPRequest request);
                    /*0x1f2ff00*/ bool HandleChallange(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp);
                }
            }

            namespace Authentication
            {
                enum AuthenticationTypes
                {
                    Unknown = 0,
                    Basic = 1,
                    Digest = 2,
                }

                class Credentials
                {
                    /*0x10*/ Best.HTTP.Request.Authentication.AuthenticationTypes <Type>k__BackingField;
                    /*0x18*/ string <UserName>k__BackingField;
                    /*0x20*/ string <Password>k__BackingField;

                    /*0x2939018*/ Best.HTTP.Request.Authentication.AuthenticationTypes get_Type();
                    /*0x2939020*/ string get_UserName();
                    /*0x2939028*/ string get_Password();
                }

                class Digest
                {
                    /*0x10*/ System.Uri <Uri>k__BackingField;
                    /*0x18*/ Best.HTTP.Request.Authentication.AuthenticationTypes <Type>k__BackingField;
                    /*0x20*/ string <Realm>k__BackingField;
                    /*0x28*/ bool <Stale>k__BackingField;
                    /*0x30*/ string <Nonce>k__BackingField;
                    /*0x38*/ string <Opaque>k__BackingField;
                    /*0x40*/ string <Algorithm>k__BackingField;
                    /*0x48*/ System.Collections.Generic.List<string> <ProtectedUris>k__BackingField;
                    /*0x50*/ string <QualityOfProtections>k__BackingField;
                    /*0x58*/ int <NonceCount>k__BackingField;
                    /*0x60*/ string <HA1Sess>k__BackingField;

                    /*0x29390e0*/ Digest(System.Uri uri);
                    /*0x2939030*/ System.Uri get_Uri();
                    /*0x2939038*/ void set_Uri(System.Uri value);
                    /*0x2939040*/ Best.HTTP.Request.Authentication.AuthenticationTypes get_Type();
                    /*0x2939048*/ void set_Type(Best.HTTP.Request.Authentication.AuthenticationTypes value);
                    /*0x2939050*/ string get_Realm();
                    /*0x2939058*/ void set_Realm(string value);
                    /*0x2939060*/ bool get_Stale();
                    /*0x2939068*/ void set_Stale(bool value);
                    /*0x2939070*/ string get_Nonce();
                    /*0x2939078*/ void set_Nonce(string value);
                    /*0x2939080*/ string get_Opaque();
                    /*0x2939088*/ void set_Opaque(string value);
                    /*0x2939090*/ string get_Algorithm();
                    /*0x2939098*/ void set_Algorithm(string value);
                    /*0x29390a0*/ System.Collections.Generic.List<string> get_ProtectedUris();
                    /*0x29390a8*/ void set_ProtectedUris(System.Collections.Generic.List<string> value);
                    /*0x29390b0*/ string get_QualityOfProtections();
                    /*0x29390b8*/ void set_QualityOfProtections(string value);
                    /*0x29390c0*/ int get_NonceCount();
                    /*0x29390c8*/ void set_NonceCount(int value);
                    /*0x29390d0*/ string get_HA1Sess();
                    /*0x29390d8*/ void set_HA1Sess(string value);
                    /*0x2939154*/ void ParseChallange(string header);
                    /*0x29398b8*/ string GenerateResponseHeader(Best.HTTP.Request.Authentication.Credentials credentials, bool isProxy, Best.HTTP.HTTPMethods methodType, System.Uri currentUri);
                    /*0x293a744*/ bool IsUriProtected(System.Uri uri);
                }

                class DigestStore
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, Best.HTTP.Request.Authentication.Digest> Digests;
                    static /*0x8*/ string[] SupportedAlgorithms;

                    static /*0x293acd4*/ DigestStore();
                    static /*0x293a860*/ Best.HTTP.Request.Authentication.Digest Get(System.Uri uri);
                    static /*0x293a92c*/ Best.HTTP.Request.Authentication.Digest GetOrCreate(System.Uri uri);
                    static /*0x293aa08*/ void Clear();
                    static /*0x293aa80*/ string FindBest(System.Collections.Generic.List<string> authHeaders);

                    class <>c__DisplayClass6_0
                    {
                        /*0x10*/ int i;

                        /*0x293accc*/ <>c__DisplayClass6_0();
                        /*0x293ae10*/ bool <FindBest>b__0(string header);
                    }
                }

                class WWWAuthenticateHeaderParser : Best.HTTP.Shared.Extensions.KeyValuePairList
                {
                    /*0x2939880*/ WWWAuthenticateHeaderParser(string headerValue);
                    /*0x293aea8*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> ParseQuotedHeader(string str);

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Request.Authentication.WWWAuthenticateHeaderParser.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__1_0;

                        static /*0x293b118*/ <>c();
                        /*0x293b180*/ <>c();
                        /*0x293b188*/ bool <ParseQuotedHeader>b__1_0(char ch);
                    }
                }
            }
        }

        namespace Proxies
        {
            class HTTPProxy : Best.HTTP.Proxies.Proxy
            {
                /*0x28*/ bool <IsTransparent>k__BackingField;
                /*0x29*/ bool <SendWholeUri>k__BackingField;
                /*0x2a*/ bool <NonTransparentForHTTPS>k__BackingField;

                /*0x293b224*/ HTTPProxy(System.Uri address);
                /*0x293b24c*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent);
                /*0x293b278*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent, bool sendWholeUri);
                /*0x293b2ac*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent, bool sendWholeUri, bool nonTransparentForHTTPS);
                /*0x293b1f4*/ bool get_IsTransparent();
                /*0x293b1fc*/ void set_IsTransparent(bool value);
                /*0x293b204*/ bool get_SendWholeUri();
                /*0x293b20c*/ void set_SendWholeUri(bool value);
                /*0x293b214*/ bool get_NonTransparentForHTTPS();
                /*0x293b21c*/ void set_NonTransparentForHTTPS(bool value);
                /*0x293b32c*/ string GetRequestPath(System.Uri uri);
                /*0x293b3ac*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x293b5fc*/ void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x293c2a8*/ void OnProxyResponse(Best.HTTP.Proxies.ProxyConnectParameters connectParameters, Best.HTTP.Proxies.HTTPProxyResponse resp, System.Exception error);
            }

            class HTTPProxyResponse : Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer
            {
                /*0x10*/ int <VersionMajor>k__BackingField;
                /*0x14*/ int <VersionMinor>k__BackingField;
                /*0x18*/ int <StatusCode>k__BackingField;
                /*0x20*/ string <Message>k__BackingField;
                /*0x28*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;
                /*0x30*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                /*0x38*/ Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState _readState;
                /*0x3c*/ Best.HTTP.Proxies.HTTPProxyResponse.ContentDeliveryMode _deliveryMode;
                /*0x40*/ Best.HTTP.Proxies.ProxyConnectParameters _parameters;
                /*0x80*/ long _expectedLength;
                /*0x88*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream _output;
                /*0x90*/ int _chunkLength;
                /*0x94*/ Best.HTTP.Proxies.HTTPProxyResponse.ReadChunkedStates _readChunkedState;
                /*0x98*/ long _downloaded;
                /*0xa0*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters, Best.HTTP.Proxies.HTTPProxyResponse, System.Exception> OnFinished;
                /*0xa8*/ string <DataAsText>k__BackingField;

                /*0x293c17c*/ HTTPProxyResponse(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x293c904*/ Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState get_ReadState();
                /*0x293c90c*/ void set_ReadState(Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState value);
                /*0x293ca98*/ int get_VersionMajor();
                /*0x293caa0*/ void set_VersionMajor(int value);
                /*0x293caa8*/ int get_VersionMinor();
                /*0x293cab0*/ void set_VersionMinor(int value);
                /*0x293cab8*/ int get_StatusCode();
                /*0x293cac0*/ void set_StatusCode(int value);
                /*0x293cac8*/ string get_Message();
                /*0x293cad0*/ void set_Message(string value);
                /*0x293cad8*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
                /*0x293cae0*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
                /*0x293cae8*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                /*0x293caf0*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                /*0x293caf8*/ string get_DataAsText();
                /*0x293cb00*/ void set_DataAsText(string value);
                /*0x293cb08*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                /*0x293cb10*/ void UnsetBinding();
                /*0x293cb1c*/ void OnConnectionClosed();
                /*0x293cd50*/ void OnError(System.Exception ex);
                /*0x293ccec*/ void CallFinished(System.Exception error);
                /*0x293cd88*/ void OnContent();
                /*0x293c86c*/ System.Collections.Generic.List<string> GetHeaderValues(string name);
                /*0x293d9d4*/ bool HasHeaderWithValue(string headerName, string value);
                /*0x293e230*/ void AddHeader(string name, string value);
                /*0x293d618*/ void VerboseLogging(string v);
                /*0x293d59c*/ bool IsNewLinePresent(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x293d71c*/ void ProcessReadHeaders(Best.HTTP.Shared.Streams.PeekableStream peekable, Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState targetState);
                /*0x293dcf4*/ void ProcessReadRawUnknownLength(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x293e434*/ bool TryReadChunkLength(Best.HTTP.Shared.Streams.PeekableStream peekable, ref int result);
                /*0x293def8*/ void ProcessReadChunked(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x293daa4*/ void ProcessReadRaw(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x293e400*/ void ProcessChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment chunk);
                /*0x293cc24*/ void PostProcessContent();
                /*0x293e4b8*/ string ToString();

                enum ContentDeliveryMode
                {
                    Raw = 0,
                    RawUnknownLength = 1,
                    Chunked = 2,
                }

                enum PeekableReadState
                {
                    StatusLine = 0,
                    Headers = 1,
                    PrepareForContent = 2,
                    ContentSetup = 3,
                    RawContent = 4,
                    Content = 5,
                    Finished = 6,
                }

                enum ReadChunkedStates
                {
                    ReadChunkLength = 0,
                    ReadChunk = 1,
                    ReadTrailingCRLF = 2,
                    ReadTrailingHeaders = 3,
                }
            }

            struct ProxyConnectParameters
            {
                /*0x10*/ Best.HTTP.Proxies.Proxy proxy;
                /*0x18*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream stream;
                /*0x20*/ System.Uri uri;
                /*0x28*/ System.Threading.CancellationToken token;
                /*0x30*/ int AuthenticationAttempts;
                /*0x34*/ bool createTunel;
                /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext context;
                /*0x40*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters> OnSuccess;
                /*0x48*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters, System.Exception, bool> OnError;
            }

            class Proxy
            {
                /*0x10*/ System.Uri <Address>k__BackingField;
                /*0x18*/ Best.HTTP.Request.Authentication.Credentials <Credentials>k__BackingField;
                /*0x20*/ System.Collections.Generic.List<string> <Exceptions>k__BackingField;

                /*0x293b2e8*/ Proxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials);
                /*0x293e538*/ System.Uri get_Address();
                /*0x293e540*/ void set_Address(System.Uri value);
                /*0x293e548*/ Best.HTTP.Request.Authentication.Credentials get_Credentials();
                /*0x293e550*/ void set_Credentials(Best.HTTP.Request.Authentication.Credentials value);
                /*0x293e558*/ System.Collections.Generic.List<string> get_Exceptions();
                /*0x293e560*/ void set_Exceptions(System.Collections.Generic.List<string> value);
                void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x1f302cc*/ string GetRequestPath(System.Uri uri);
                /*0x1f2fec8*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x2938010*/ bool UseProxyForAddress(System.Uri address);
            }

            class SOCKSProxy : Best.HTTP.Proxies.Proxy
            {
                /*0x293e568*/ SOCKSProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials);
                /*0x293e56c*/ string GetRequestPath(System.Uri uri);
                /*0x293e5c4*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x293e5cc*/ void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
            }

            namespace Implementations
            {
                enum SOCKSVersions
                {
                    Unknown = 0,
                    V5 = 5,
                }

                enum SOCKSMethods
                {
                    NoAuthenticationRequired = 0,
                    GSSAPI = 1,
                    UsernameAndPassword = 2,
                    NoAcceptableMethods = 255,
                }

                enum SOCKSReplies
                {
                    Succeeded = 0,
                    GeneralSOCKSServerFailure = 1,
                    ConnectionNotAllowedByRuleset = 2,
                    NetworkUnreachable = 3,
                    HostUnreachable = 4,
                    ConnectionRefused = 5,
                    TTLExpired = 6,
                    CommandNotSupported = 7,
                    AddressTypeNotSupported = 8,
                }

                class SOCKSV5Negotiator : Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer
                {
                    /*0x10*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                    /*0x18*/ Best.HTTP.Proxies.Implementations.SOCKSV5Negotiator.NegotiationStates _state;
                    /*0x20*/ Best.HTTP.Proxies.SOCKSProxy _proxy;
                    /*0x28*/ Best.HTTP.Proxies.ProxyConnectParameters _parameters;

                    /*0x293e644*/ SOCKSV5Negotiator(Best.HTTP.Proxies.SOCKSProxy proxy, Best.HTTP.Proxies.ProxyConnectParameters parameters);
                    /*0x293e6c8*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                    /*0x293e6d0*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                    /*0x293ebe4*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                    /*0x293ebec*/ void UnsetBinding();
                    /*0x293ebf8*/ void OnConnectionClosed();
                    /*0x293ed04*/ void OnError(System.Exception ex);
                    /*0x293e6d8*/ void SendHandshake();
                    /*0x293ed08*/ void SendConnect();
                    /*0x293f304*/ void OnContent();
                    /*0x293ec74*/ void CallOnError(System.Exception ex);
                    /*0x2940718*/ void CallOnSuccess();
                    /*0x293f1dc*/ void WriteString(byte[] buffer, ref int count, string str);
                    /*0x293f18c*/ void WriteBytes(byte[] buffer, ref int count, byte[] bytes);

                    enum NegotiationStates
                    {
                        MethodSelection = 0,
                        ExpectAuthenticationResponse = 1,
                        ConnectResponse = 2,
                    }
                }
            }

            namespace Autodetect
            {
                class AndroidProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    static /*0x1ffc854*/ T Call<T>(string methodName, object[] args);
                    /*0x2940d28*/ AndroidProxyDetector();
                    /*0x2940798*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x2940c48*/ string FindFor(string uriStr);
                }

                class EnvironmentProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x10*/ Best.HTTP.Proxies.Proxy _cachedProxy;

                    /*0x29414cc*/ EnvironmentProxyDetector();
                    /*0x2940d30*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x294148c*/ string GetEnv(string key);
                }

                class FrameworkProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x29418fc*/ FrameworkProxyDetector();
                    /*0x29414d4*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x29417f8*/ Best.HTTP.Proxies.Proxy SetExceptionList(Best.HTTP.Proxies.Proxy proxy, System.Net.WebProxy detectedProxy);
                }

                class ProgrammaticallyAddedProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x294198c*/ ProgrammaticallyAddedProxyDetector();
                    /*0x2941904*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                }

                interface IProxyDetector
                {
                    /*0x1f302cc*/ Best.HTTP.Proxies.Proxy GetProxy(Best.HTTP.HTTPRequest request);
                }

                enum ProxyDetectionMode
                {
                    Continuous = 0,
                    CacheFirstFound = 1,
                }

                class ProxyDetector
                {
                    /*0x10*/ Best.HTTP.Proxies.Autodetect.IProxyDetector[] _proxyDetectors;
                    /*0x18*/ Best.HTTP.Proxies.Autodetect.ProxyDetectionMode _detectionMode;
                    /*0x1c*/ bool _attached;

                    static /*0x2941994*/ Best.HTTP.Proxies.Autodetect.IProxyDetector[] GetDefaultDetectors();
                    /*0x2941b6c*/ ProxyDetector();
                    /*0x2941b8c*/ ProxyDetector(Best.HTTP.Proxies.Autodetect.ProxyDetectionMode detectionMode, Best.HTTP.Proxies.Autodetect.IProxyDetector[] proxyDetectors);
                    /*0x2941bf0*/ void Reattach();
                    /*0x2941e5c*/ void Detach();
                    /*0x29420c4*/ void OnRequestEvent(Best.HTTP.Hosts.Connections.RequestEventInfo event);
                }
            }
        }

        namespace HostSetting
        {
            struct HostKey
            {
                /*0x10*/ System.Uri Uri;
                /*0x18*/ Best.HTTP.Request.Settings.ProxySettings Proxy;
                /*0x20*/ UnityEngine.Hash128 Key;

                static /*0x2942994*/ UnityEngine.Hash128 CalculateHash(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                static /*0x29381f0*/ void Append(System.Uri uri, ref UnityEngine.Hash128 hash);
                static /*0x292f830*/ Best.HTTP.HostSetting.HostKey From(Best.HTTP.HTTPRequest request);
                static /*0x2942ca4*/ Best.HTTP.HostSetting.HostKey From(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                /*0x294294c*/ HostKey(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                /*0x2938790*/ string get_Host();
                /*0x29429dc*/ bool Equals(object obj);
                /*0x2942a74*/ bool Equals(Best.HTTP.HostSetting.HostKey hostKey);
                /*0x2942aa8*/ int GetHashCode();
                /*0x2942ad0*/ string ToString();
            }

            class HostKeyEqualityComparer : System.Collections.Generic.IEqualityComparer<Best.HTTP.HostSetting.HostKey>
            {
                /*0x2942d14*/ HostKeyEqualityComparer();
                /*0x2942cbc*/ bool Equals(Best.HTTP.HostSetting.HostKey x, Best.HTTP.HostSetting.HostKey y);
                /*0x2942cec*/ int GetHashCode(Best.HTTP.HostSetting.HostKey obj);
            }

            class HostManager
            {
                static /*0x0*/ System.Collections.Generic.Dictionary<Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> hosts;

                static /*0x2943874*/ HostManager();
                static /*0x2942d1c*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.HTTPRequest request);
                static /*0x2943088*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.Hosts.Connections.ConnectionBase connection);
                static /*0x2942d98*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.HostSetting.HostKey key);
                static /*0x29433a0*/ void Shutdown();
                static /*0x2943714*/ void Clear();
            }

            enum HostProtocolSupport
            {
                Unknown = 0,
                HTTP1 = 1,
                HTTP2 = 2,
                File = 3,
            }

            class HostVariant
            {
                /*0x10*/ Best.HTTP.HostSetting.HostKey <Host>k__BackingField;
                /*0x30*/ Best.HTTP.HostSetting.HostProtocolSupport <ProtocolSupport>k__BackingField;
                /*0x38*/ System.DateTime <LastProtocolSupportUpdate>k__BackingField;
                /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                /*0x48*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.ConnectionBase> Connections;
                /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.HTTPRequest> Queue;
                /*0x58*/ Best.HTTP.Hosts.Settings.HostVariantSettings _settings;
                /*0x60*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> availableConnections;

                /*0x2943128*/ HostVariant(Best.HTTP.HostSetting.HostKey host);
                /*0x2943938*/ Best.HTTP.HostSetting.HostKey get_Host();
                /*0x2943944*/ void set_Host(Best.HTTP.HostSetting.HostKey value);
                /*0x2943960*/ Best.HTTP.HostSetting.HostProtocolSupport get_ProtocolSupport();
                /*0x2943968*/ void set_ProtocolSupport(Best.HTTP.HostSetting.HostProtocolSupport value);
                /*0x2943970*/ void set_LastProtocolSupportUpdate(System.DateTime value);
                /*0x2943978*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                /*0x2943980*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                /*0x29439d0*/ void AddProtocol(Best.HTTP.HostSetting.HostProtocolSupport protocolSupport);
                /*0x2943bb4*/ Best.HTTP.HostSetting.HostVariant Send(Best.HTTP.HTTPRequest request);
                /*0x2943dd4*/ Best.HTTP.HostSetting.HostVariant TryToSendQueuedRequests();
                /*0x2944850*/ System.ValueTuple<int, int, int> QueryAnyAvailableOrNew(ref System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> connectionCollector);
                /*0x2944b5c*/ Best.HTTP.Hosts.Connections.ConnectionBase CreateNew();
                /*0x2944e20*/ void OnConnectionStartedProcessingRequest(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.HTTPRequest request);
                /*0x2944e24*/ Best.HTTP.HostSetting.HostVariant RecycleConnection(Best.HTTP.Hosts.Connections.ConnectionBase conn);
                /*0x2944f40*/ bool RemoveConnectionImpl(Best.HTTP.Hosts.Connections.ConnectionBase conn, Best.HTTP.Hosts.Connections.HTTPConnectionStates setState);
                /*0x29452c8*/ Best.HTTP.HostSetting.HostVariant RemoveConnection(Best.HTTP.Hosts.Connections.ConnectionBase conn, Best.HTTP.Hosts.Connections.HTTPConnectionStates setState);
                /*0x29452e8*/ Best.HTTP.Hosts.Connections.ConnectionBase Find(System.Predicate<Best.HTTP.Hosts.Connections.ConnectionBase> match);
                /*0x2945354*/ bool CloseConnectionAfterInactivity(System.DateTime now, object context);
                /*0x2945808*/ void Shutdown();
                /*0x2945a9c*/ string ToString();

                class <>c
                {
                    static /*0x0*/ Best.HTTP.HostSetting.HostVariant.<> <>9;
                    static /*0x8*/ System.Comparison<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> <>9__23_0;
                    static /*0x10*/ System.Comparison<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> <>9__23_1;

                    static /*0x2945d04*/ <>c();
                    /*0x2945d6c*/ <>c();
                    /*0x2945d74*/ int <TryToSendQueuedRequests>b__23_0(System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> a, System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> b);
                    /*0x2945eac*/ int <TryToSendQueuedRequests>b__23_1(System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> a, System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> b);
                }
            }
        }

        namespace Hosts
        {
            namespace Settings
            {
                class AsteriskStringComparer : System.Collections.Generic.IComparer<string>
                {
                    static /*0x0*/ Best.HTTP.Hosts.Settings.AsteriskStringComparer Instance;

                    static /*0x2946098*/ AsteriskStringComparer();
                    /*0x2946090*/ AsteriskStringComparer();
                    /*0x2945fe4*/ int Compare(string x, string y);
                }

                class TlsClientFactoryDelegate : System.MulticastDelegate
                {
                    /*0x2946100*/ TlsClientFactoryDelegate(object object, nint method);
                    /*0x294620c*/ Best.HTTP.Shared.TLS.AbstractTls13Client Invoke(System.Uri uri, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class HTTRequestSettings
                {
                    /*0x10*/ System.TimeSpan ConnectTimeout;
                    /*0x18*/ System.TimeSpan RequestTimeout;

                    /*0x2946220*/ HTTRequestSettings();
                }

                class HTTP1ConnectionSettings
                {
                    /*0x10*/ bool TryToReuseConnections;
                    /*0x18*/ System.TimeSpan MaxConnectionIdleTime;
                    /*0x20*/ bool ForceUseThreadPool;

                    /*0x2946298*/ HTTP1ConnectionSettings();
                }

                class ClientCertificateSelector : System.MulticastDelegate
                {
                    /*0x294630c*/ ClientCertificateSelector(object object, nint method);
                    /*0x29463c0*/ System.Security.Cryptography.X509Certificates.X509Certificate Invoke(string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
                }

                enum TLSHandlers
                {
                    BouncyCastle = 0,
                    Framework = 1,
                }

                class BouncyCastleSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.TlsClientFactoryDelegate TlsClientFactory;

                    static /*0x29463d4*/ Best.HTTP.Shared.TLS.AbstractTls13Client DefaultTlsClientFactory(System.Uri uri, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x294655c*/ BouncyCastleSettings();
                }

                class FrameworkTLSSettings
                {
                    static /*0x0*/ System.Func<string, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> DefaultCertificationValidator;
                    /*0x10*/ System.Security.Authentication.SslProtocols TlsVersions;
                    /*0x14*/ bool CheckCertificateRevocation;
                    /*0x18*/ System.Func<string, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> CertificationValidator;
                    /*0x20*/ Best.HTTP.Hosts.Settings.ClientCertificateSelector ClientCertificationProvider;

                    static /*0x29465e4*/ FrameworkTLSSettings();
                    /*0x2946564*/ FrameworkTLSSettings();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Settings.FrameworkTLSSettings.<> <>9;

                        static /*0x29466b4*/ <>c();
                        /*0x294671c*/ <>c();
                        /*0x2946724*/ bool <.cctor>b__6_0(string host, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
                    }
                }

                class TLSSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.TLSHandlers TLSHandler;
                    /*0x18*/ Best.HTTP.Hosts.Settings.BouncyCastleSettings BouncyCastleSettings;
                    /*0x20*/ Best.HTTP.Hosts.Settings.FrameworkTLSSettings FrameworkTLSSettings;

                    /*0x294672c*/ TLSSettings();
                }

                class HostVariantSettings
                {
                    /*0x10*/ int MaxConnectionPerVariant;
                    /*0x14*/ float MaxAssignedRequestsFactor;
                    /*0x18*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> VariantFactory;
                    /*0x20*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostVariant, Best.HTTP.Hosts.Connections.ConnectionBase> ConnectionFactory;

                    /*0x29467d4*/ HostVariantSettings();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Settings.HostVariantSettings.<> <>9;
                        static /*0x8*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> <>9__4_0;

                        static /*0x29468d4*/ <>c();
                        /*0x294693c*/ <>c();
                        /*0x2946944*/ Best.HTTP.HostSetting.HostVariant <.ctor>b__4_0(Best.HTTP.Hosts.Settings.HostVariantSettings settings, Best.HTTP.HostSetting.HostKey key);
                    }
                }

                class LowLevelConnectionSettings
                {
                    /*0x10*/ uint TCPWriteBufferSize;
                    /*0x14*/ uint ReadBufferSize;

                    /*0x29469ac*/ LowLevelConnectionSettings();
                }

                class HostSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.LowLevelConnectionSettings LowLevelConnectionSettings;
                    /*0x18*/ Best.HTTP.Hosts.Settings.HTTRequestSettings RequestSettings;
                    /*0x20*/ Best.HTTP.Hosts.Settings.HTTP1ConnectionSettings HTTP1ConnectionSettings;
                    /*0x28*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRingmasterSettings TCPRingmasterSettings;
                    /*0x30*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings HTTP2ConnectionSettings;
                    /*0x38*/ Best.HTTP.Hosts.Settings.TLSSettings TLSSettings;
                    /*0x40*/ Best.HTTP.Hosts.Settings.HostVariantSettings HostVariantSettings;

                    /*0x29469bc*/ HostSettings();
                }

                class HostSettingsManager
                {
                    /*0x10*/ System.Collections.Generic.SortedList<string, Best.HTTP.Hosts.Settings.Node> _rootNodes;
                    /*0x18*/ System.Collections.Generic.List<string> _segments;
                    /*0x20*/ System.Collections.Concurrent.ConcurrentDictionary<string, Best.HTTP.Hosts.Settings.HostSettings> _cache;

                    /*0x2946b88*/ HostSettingsManager();
                    /*0x2946d40*/ Best.HTTP.Hosts.Settings.HostSettings Add(string hostname, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x2943988*/ Best.HTTP.Hosts.Settings.HostSettings Get(Best.HTTP.HostSetting.HostVariant variant, bool fallbackToWildcard);
                    /*0x29430f8*/ Best.HTTP.Hosts.Settings.HostSettings Get(Best.HTTP.HostSetting.HostKey hostKey, bool fallbackToWildcard);
                    /*0x29473d4*/ Best.HTTP.Hosts.Settings.HostSettings Get(System.Uri uri, bool fallbackToWildcard);
                    /*0x29313e8*/ Best.HTTP.Hosts.Settings.HostSettings Get(string hostname, bool fallbackToWildcard);

                    class <>c__DisplayClass12_0
                    {
                        /*0x10*/ Best.HTTP.Hosts.Settings.HostSettings foundSettings;

                        /*0x2947410*/ <>c__DisplayClass12_0();
                        /*0x294752c*/ Best.HTTP.Hosts.Settings.HostSettings <Get>b__0(string key, Best.HTTP.Hosts.Settings.HostSettings settings);
                    }
                }

                class Node
                {
                    /*0x10*/ string key;
                    /*0x18*/ System.Collections.Generic.SortedList<string, Best.HTTP.Hosts.Settings.Node> childNodes;
                    /*0x20*/ Best.HTTP.Hosts.Settings.HostSettings hostSettings;

                    /*0x2947534*/ Node(string key);
                    /*0x2947184*/ Node(string key, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x29471c8*/ void Add(System.Collections.Generic.List<string> segments, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x2947418*/ Best.HTTP.Hosts.Settings.HostSettings Find(System.Collections.Generic.List<string> segments);
                }
            }

            namespace Connections
            {
                class ConnectionBase : System.IDisposable
                {
                    /*0x10*/ Best.HTTP.HostSetting.HostKey <HostKey>k__BackingField;
                    /*0x30*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates <State>k__BackingField;
                    /*0x38*/ Best.HTTP.HTTPRequest <CurrentRequest>k__BackingField;
                    /*0x40*/ System.TimeSpan <KeepAliveTime>k__BackingField;
                    /*0x48*/ int <MaxAssignedRequests>k__BackingField;
                    /*0x50*/ System.Uri <LastProcessedUri>k__BackingField;
                    /*0x58*/ System.DateTime <LastProcessTime>k__BackingField;
                    /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                    /*0x68*/ bool IsThreaded;
                    /*0x6c*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;

                    /*0x294760c*/ ConnectionBase(Best.HTTP.HostSetting.HostKey hostKey);
                    /*0x2947634*/ ConnectionBase(Best.HTTP.HostSetting.HostKey hostKey, bool threaded);
                    /*0x2947564*/ Best.HTTP.HostSetting.HostKey get_HostKey();
                    /*0x2947570*/ void set_HostKey(Best.HTTP.HostSetting.HostKey value);
                    /*0x294758c*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates get_State();
                    /*0x2947594*/ void set_State(Best.HTTP.Hosts.Connections.HTTPConnectionStates value);
                    /*0x294759c*/ Best.HTTP.HTTPRequest get_CurrentRequest();
                    /*0x29475a4*/ void set_CurrentRequest(Best.HTTP.HTTPRequest value);
                    /*0x29475ac*/ System.TimeSpan get_KeepAliveTime();
                    /*0x29475b4*/ void set_KeepAliveTime(System.TimeSpan value);
                    /*0x29475bc*/ bool get_CanProcessMultiple();
                    /*0x29475c4*/ int get_AssignedRequests();
                    /*0x29475d4*/ int get_MaxAssignedRequests();
                    /*0x29475dc*/ System.Uri get_LastProcessedUri();
                    /*0x29475e4*/ void set_LastProcessedUri(System.Uri value);
                    /*0x29475ec*/ System.DateTime get_LastProcessTime();
                    /*0x29475f4*/ void set_LastProcessTime(System.DateTime value);
                    /*0x29475fc*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x2947604*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x2947814*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x2947964*/ void ThreadFunc();
                    /*0x2947968*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                    /*0x2947970*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                    /*0x2947978*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                    /*0x2945258*/ void Dispose();
                    /*0x2947980*/ void Dispose(bool disposing);
                    /*0x2947984*/ void Finalize();
                    /*0x2947a18*/ string ToString();
                }

                enum ConnectionEvents
                {
                    StateChange = 0,
                    ProtocolSupport = 1,
                }

                struct ConnectionEventInfo
                {
                    /*0x10*/ Best.HTTP.Hosts.Connections.ConnectionBase Source;
                    /*0x18*/ Best.HTTP.Hosts.Connections.ConnectionEvents Event;
                    /*0x1c*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates State;
                    /*0x20*/ Best.HTTP.HostSetting.HostProtocolSupport ProtocolSupport;
                    /*0x28*/ Best.HTTP.HTTPRequest Request;
                    /*0x30*/ Best.HTTP.HTTPRequestStates RequestState;

                    /*0x2947a9c*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.Hosts.Connections.HTTPConnectionStates newState);
                    /*0x2947adc*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.HostSetting.HostProtocolSupport protocolSupport);
                    /*0x2947b24*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.HTTPRequest request);
                    /*0x2947b6c*/ string ToString();
                }

                class ConnectionEventHelper
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.ConnectionEventInfo> connectionEventQueue;
                    static /*0x8*/ System.Action<Best.HTTP.Hosts.Connections.ConnectionEventInfo> OnEvent;

                    static /*0x2948904*/ ConnectionEventHelper();
                    static /*0x2947e2c*/ void EnqueueConnectionEvent(Best.HTTP.Hosts.Connections.ConnectionEventInfo event);
                    static /*0x2948054*/ void Clear();
                    static /*0x29480cc*/ void ProcessQueue();
                    static /*0x2948524*/ void HandleConnectionStateChange(Best.HTTP.Hosts.Connections.ConnectionEventInfo event);
                }

                class KeepAliveHeader
                {
                    /*0x10*/ System.TimeSpan <TimeOut>k__BackingField;
                    /*0x18*/ int <MaxRequests>k__BackingField;

                    /*0x2948b90*/ KeepAliveHeader();
                    /*0x294899c*/ System.TimeSpan get_TimeOut();
                    /*0x29489a4*/ void set_TimeOut(System.TimeSpan value);
                    /*0x29489ac*/ int get_MaxRequests();
                    /*0x29489b4*/ void set_MaxRequests(int value);
                    /*0x29489bc*/ void Parse(System.Collections.Generic.List<string> headerValues);
                }

                class ConnectionHelper
                {
                    static /*0x2948b98*/ void ResendRequestAndCloseConnection(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.HTTPRequest request);
                    static /*0x2948c58*/ void EnqueueEvents(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.Hosts.Connections.HTTPConnectionStates connectionState, Best.HTTP.HTTPRequest request, Best.HTTP.HTTPRequestStates requestState, System.Exception error);
                    static /*0x2948d94*/ System.Exception HandleResponse(Best.HTTP.HTTPRequest request, ref bool resendRequest, ref Best.HTTP.Hosts.Connections.HTTPConnectionStates proposedConnectionState, ref Best.HTTP.Hosts.Connections.KeepAliveHeader keepAlive, Best.HTTP.Shared.Logger.LoggingContext loggingContext);
                    static /*0x29498a0*/ System.Uri GetRedirectUri(Best.HTTP.HTTPRequest request, string location);
                }

                enum HTTPConnectionStates
                {
                    Initial = 0,
                    Processing = 1,
                    WaitForProtocolShutdown = 2,
                    Recycle = 3,
                    Free = 4,
                    Closed = 5,
                    ClosedResendRequest = 6,
                }

                class HTTPOverTCPConnection : Best.HTTP.Hosts.Connections.ConnectionBase, Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer
                {
                    /*0x70*/ Best.HTTP.Hosts.Connections.IHTTPRequestHandler requestHandler;
                    /*0x78*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator _negotiator;

                    /*0x294a2b4*/ HTTPOverTCPConnection(Best.HTTP.HostSetting.HostKey hostKey);
                    /*0x2949e00*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_TopStream();
                    /*0x2949e18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer get_Streamer();
                    /*0x2949e30*/ int get_AssignedRequests();
                    /*0x2949ee4*/ int get_MaxAssignedRequests();
                    /*0x2949f94*/ System.TimeSpan get_KeepAliveTime();
                    /*0x294a1f8*/ void set_KeepAliveTime(System.TimeSpan value);
                    /*0x294a200*/ bool get_CanProcessMultiple();
                    /*0x294a2dc*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x294aae4*/ System.Collections.Generic.List<string> Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.GetSupportedProtocolNames(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator);
                    /*0x294ad3c*/ bool Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.MustStopAdvancingToNextStep(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps finishedStep, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps nextStep, System.Exception error);
                    /*0x294af6c*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.EvaluateProxyNegotiationFailure(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error, bool resendForAuthentication);
                    /*0x294b33c*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.OnNegotiationFailed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error);
                    /*0x294b65c*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.OnNegotiationFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string negotiatedProtocol);
                    /*0x294bf24*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                    /*0x294b344*/ bool PreprocessRequestState(System.Exception error);
                    /*0x294a8d0*/ bool TrySetErrorState(Best.HTTP.HTTPRequest request, System.Exception ex);
                    /*0x294b6a0*/ void StartWithNegotiatedProtocol(string negotiatedProtocol, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream);
                    /*0x294c5e8*/ void ThreadFunc();
                    /*0x294c68c*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                    /*0x294c794*/ void Dispose(bool disposing);
                }

                enum SupportedProtocols
                {
                    Unknown = 0,
                    HTTP = 1,
                    WebSocket = 2,
                    ServerSentEvents = 3,
                }

                class HTTPProtocolFactory
                {
                    static /*0x294ac00*/ Best.HTTP.Hosts.Connections.SupportedProtocols GetProtocolFromUri(System.Uri uri);
                    static /*0x294a79c*/ bool IsSecureProtocol(System.Uri uri);
                }

                interface IDownloadContentBufferAvailable
                {
                    /*0x1f30ebc*/ void BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                }

                interface IHTTPRequestHandler : System.IDisposable
                {
                    /*0x1f30214*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                    /*0x1f2fe14*/ bool get_CanProcessMultiple();
                    /*0x1f2ffc8*/ int get_AssignedRequests();
                    /*0x1f2ffc8*/ int get_MaxAssignedRequests();
                    /*0x1f30214*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x1f30ebc*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x1f309e4*/ void RunHandler();
                    /*0x1f30b78*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                }

                interface IThreadSignaler
                {
                    /*0x1f309e4*/ void SignalThread();
                }

                enum RequestEvents
                {
                    Upgraded = 0,
                    DownloadProgress = 1,
                    UploadProgress = 2,
                    StreamingData = 3,
                    DownloadStarted = 4,
                    StateChange = 5,
                    SetState = 6,
                    QueuedResend = 7,
                    Resend = 8,
                    Headers = 9,
                    Timing = 10,
                }

                struct RequestEventInfo
                {
                    /*0x10*/ Best.HTTP.HTTPRequest SourceRequest;
                    /*0x18*/ Best.HTTP.Hosts.Connections.RequestEvents Event;
                    /*0x1c*/ Best.HTTP.HTTPRequestStates State;
                    /*0x20*/ System.Exception Error;
                    /*0x28*/ long Progress;
                    /*0x30*/ long ProgressLength;
                    /*0x38*/ byte[] Data;
                    /*0x40*/ int DataLength;
                    /*0x48*/ Best.HTTP.Request.Timings.TimingEventInfo timingEvent;
                    /*0x68*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Headers;

                    /*0x294b0a4*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.RequestEvents event);
                    /*0x294c924*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.HTTPRequestStates newState, System.Exception error);
                    /*0x294c994*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.RequestEvents event, long progress, long progressLength);
                    /*0x294ca0c*/ RequestEventInfo(Best.HTTP.HTTPRequest request, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                    /*0x294ca7c*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Request.Timings.TimingEventInfo timingEvent);
                    /*0x294caf4*/ string ToString();
                }

                class ProgressFlattener
                {
                    /*0x10*/ Best.HTTP.Hosts.Connections.ProgressFlattener.FlattenedProgress[] progresses;
                    /*0x18*/ bool hasProgress;

                    /*0x294d2f0*/ ProgressFlattener();
                    /*0x294cf54*/ void InsertOrUpdate(Best.HTTP.Hosts.Connections.RequestEventInfo info, Best.HTTP.Request.Settings.OnProgressDelegate onProgress);
                    /*0x294d120*/ void DispatchProgressCallbacks();

                    struct FlattenedProgress
                    {
                        /*0x10*/ Best.HTTP.HTTPRequest request;
                        /*0x18*/ Best.HTTP.Request.Settings.OnProgressDelegate onProgress;
                        /*0x20*/ long progress;
                        /*0x28*/ long length;
                    }
                }

                class RequestEventHelper
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.RequestEventInfo> requestEventQueue;
                    static /*0x8*/ System.Action<Best.HTTP.Hosts.Connections.RequestEventInfo> OnEvent;
                    static /*0x10*/ Best.HTTP.Hosts.Connections.ProgressFlattener downloadProgress;
                    static /*0x18*/ Best.HTTP.Hosts.Connections.ProgressFlattener uploadProgress;
                    static /*0x20*/ string[] RequestStateNames;

                    static /*0x294f718*/ RequestEventHelper();
                    static /*0x294b10c*/ void EnqueueRequestEvent(Best.HTTP.Hosts.Connections.RequestEventInfo ev);
                    static /*0x294d2f8*/ void Clear();
                    static /*0x294d370*/ void ProcessQueue();
                    static /*0x294efc0*/ bool AbortRequestWhenTimedOut(System.DateTime now, object context);
                    static /*0x294e4b4*/ void HandleQueued(Best.HTTP.HTTPRequest source);
                    static /*0x294e660*/ void HandleRequestStateChange(ref Best.HTTP.Hosts.Connections.RequestEventInfo event);
                    static /*0x294f518*/ bool OnDelayedDisposeTimer(System.DateTime time, object request);
                }

                namespace HTTP2
                {
                    class BufferHelper
                    {
                        static /*0x294f98c*/ void SetUInt16(byte[] buffer, int offset, ushort value);
                        static /*0x294f9d4*/ void SetUInt24(byte[] buffer, int offset, uint value);
                        static /*0x294fa38*/ void SetUInt31(byte[] buffer, int offset, uint value);
                        static /*0x294fab8*/ void SetUInt32(byte[] buffer, int offset, uint value);
                        static /*0x294fb38*/ void SetLong(byte[] buffer, int offset, long value);
                        static /*0x294fc28*/ byte SetBit(byte value, byte bitIdx, bool bitValue);
                        static /*0x294fcb8*/ byte SetBit(byte value, byte bitIdx, byte bitValue);
                        static /*0x294fce0*/ byte ReadBit(byte value, byte bitIdx);
                        static /*0x294fcfc*/ byte ReadValue(byte value, byte fromBit, byte toBit);
                        static /*0x294fd60*/ ushort ReadUInt16(byte[] buffer, int offset);
                        static /*0x294fda0*/ uint ReadUInt24(byte[] buffer, int offset);
                        static /*0x294fdf8*/ uint ReadUInt31(byte[] buffer, int offset);
                        static /*0x294fe68*/ uint ReadUInt31(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                        static /*0x294fed8*/ uint ReadUInt32(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                        static /*0x294ff48*/ long ReadLong(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                    }

                    interface IFrameDataView : System.IDisposable
                    {
                        long get_Length();
                        long get_Position();
                        void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x1f2ffc8*/ int ReadByte();
                        int Read(byte[] buffer, int offset, int count);
                    }

                    class CommonFrameView : Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView, System.IDisposable
                    {
                        /*0x10*/ long <Length>k__BackingField;
                        /*0x18*/ long <Position>k__BackingField;
                        /*0x20*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> frames;
                        /*0x28*/ int currentFrameIdx;
                        /*0x30*/ byte[] data;
                        /*0x38*/ int dataOffset;
                        /*0x3c*/ int maxOffset;

                        /*0x295056c*/ CommonFrameView();
                        /*0x2950018*/ long get_Length();
                        /*0x2950020*/ void set_Length(long value);
                        /*0x2950028*/ long get_Position();
                        /*0x2950030*/ void set_Position(long value);
                        void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        long CalculateDataLengthForFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x2950038*/ int Read(byte[] buffer, int offset, int count);
                        /*0x2950170*/ int ReadByte();
                        /*0x1f2fe14*/ bool AdvanceFrame();
                        /*0x29501e8*/ void Dispose();
                        /*0x2950340*/ string ToString();
                    }

                    class HeaderFrameView : Best.HTTP.Hosts.Connections.HTTP2.CommonFrameView
                    {
                        /*0x2950b8c*/ HeaderFrameView();
                        /*0x29505fc*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x2950744*/ long CalculateDataLengthForFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x2950a54*/ bool AdvanceFrame();
                    }

                    class FramesAsStreamView : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView view;

                        /*0x2950d24*/ FramesAsStreamView(Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView view);
                        /*0x2950b90*/ bool get_CanRead();
                        /*0x2950b98*/ bool get_CanSeek();
                        /*0x2950ba0*/ bool get_CanWrite();
                        /*0x2950ba8*/ long get_Length();
                        /*0x2950c48*/ long get_Position();
                        /*0x2950cec*/ void set_Position(long value);
                        /*0x2950d98*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x2950e64*/ int ReadByte();
                        /*0x2950f08*/ int Read(byte[] buffer, int offset, int count);
                        /*0x2950fcc*/ void Close();
                        /*0x2951078*/ void Flush();
                        /*0x295107c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x29510b4*/ void SetLength(long value);
                        /*0x29510ec*/ void Write(byte[] buffer, int offset, int count);
                        /*0x2951124*/ string ToString();
                    }

                    class HeaderTable
                    {
                        static /*0x0*/ string[] StaticTableValues;
                        static /*0x8*/ string[] StaticTable;
                        /*0x10*/ uint <DynamicTableSize>k__BackingField;
                        /*0x14*/ uint _maxDynamicTableSize;
                        /*0x18*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> DynamicTable;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry settingsRegistry;

                        static /*0x2952110*/ HeaderTable();
                        /*0x2951260*/ HeaderTable(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry);
                        /*0x2951140*/ uint get_DynamicTableSize();
                        /*0x2951148*/ void set_DynamicTableSize(uint value);
                        /*0x2951150*/ uint get_MaxDynamicTableSize();
                        /*0x2951158*/ void set_MaxDynamicTableSize(uint value);
                        /*0x2951358*/ System.Collections.Generic.KeyValuePair<uint, uint> GetIndex(string key, string value);
                        /*0x2951768*/ string GetKey(uint index);
                        /*0x295190c*/ System.Collections.Generic.KeyValuePair<string, string> GetHeader(uint index);
                        /*0x2951a9c*/ void Add(System.Collections.Generic.KeyValuePair<string, string> header);
                        /*0x2951b4c*/ uint CalculateEntrySize(System.Collections.Generic.KeyValuePair<string, string> entry);
                        /*0x2951168*/ void EvictEntries(uint newHeaderSize);
                        /*0x2951ce4*/ string ToString();
                    }

                    class HPACKEncoder
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settingsRegistry;
                        /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HeaderTable requestTable;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HeaderTable responseTable;
                        /*0x28*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                        static /*0x29535a8*/ void WriteIndexedHeaderField(System.IO.Stream stream, uint index);
                        static /*0x2955858*/ void WriteLiteralHeaderFieldWithIncrementalIndexing_IndexedName(System.IO.Stream stream, uint index, string value);
                        static /*0x2955744*/ void WriteLiteralHeaderFieldWithIncrementalIndexing_NewName(System.IO.Stream stream, string header, string value);
                        static /*0x29536c4*/ void WriteLiteralHeaderFieldWithoutIndexing_IndexedName(System.IO.Stream stream, uint index, string value);
                        static /*0x2955ad4*/ uint RequiredBytesToEncodeString(string str);
                        static /*0x2955b94*/ void EncodeString(string str, byte[] buffer, ref uint offset);
                        static /*0x2955cbc*/ uint RequiredBytesToEncodeStringWithHuffman(string str);
                        static /*0x295602c*/ void EncodeStringWithHuffman(string str, uint encodedLength, byte[] buffer, ref uint offset);
                        static /*0x2956298*/ void AddCodePointToBuffer(Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry code, byte[] buffer, ref uint offset, ref byte bufferBitIdx, bool finishOnBoundary);
                        static /*0x2955c44*/ uint RequiredBytesToEncodeRawString(string str);
                        static /*0x2955e38*/ void EncodeRawStringTo(string str, byte[] buffer, ref uint offset);
                        static /*0x29559a0*/ byte RequiredBytesToEncodeInteger(uint value, byte N);
                        static /*0x29559ec*/ void EncodeInteger(uint value, byte N, byte[] buffer, ref uint offset);
                        static /*0x2954d04*/ uint DecodeInteger(byte N, byte data, System.IO.Stream stream);
                        /*0x2953060*/ HPACKEncoder(Best.HTTP.Shared.Logger.LoggingContext context, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry);
                        /*0x2953144*/ void Encode(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context, Best.HTTP.HTTPRequest request, System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> to, uint streamId);
                        /*0x2953a6c*/ void Decode(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context, System.IO.Stream stream, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> to);
                        /*0x2954978*/ System.Collections.Generic.KeyValuePair<string, string> ReadIndexedHeader(byte firstByte, System.IO.Stream stream);
                        /*0x2954a1c*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldWithIncrementalIndexing_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x29549a4*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldWithIncrementalIndexing_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x2954b3c*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldwithoutIndexing_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x2954ac4*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldwithoutIndexing_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x2954c5c*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldNeverIndexed_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x2954be4*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldNeverIndexed_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x2954d80*/ string DecodeString(System.IO.Stream stream);
                        /*0x2953808*/ void CreateHeaderFrames(System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> to, uint streamId, byte[] dataToSend, uint payloadLength, bool hasBody);
                        /*0x2955370*/ void WriteHeader(System.IO.Stream stream, string header, string value);
                        /*0x2956374*/ string ToString();

                        class <>c__DisplayClass5_0
                        {
                            /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder <>4__this;
                            /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context;
                            /*0x20*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream bufferStream;

                            /*0x29535a0*/ <>c__DisplayClass5_0();
                            /*0x29563c4*/ void <Encode>b__0(string header, System.Collections.Generic.List<string> values);
                        }
                    }

                    class WebSocketOverHTTP2Settings
                    {
                        /*0x10*/ bool <EnableWebSocketOverHTTP2>k__BackingField;
                        /*0x11*/ bool <EnableImplementationFallback>k__BackingField;

                        /*0x29569b8*/ WebSocketOverHTTP2Settings();
                        /*0x29569a8*/ bool get_EnableWebSocketOverHTTP2();
                        /*0x29569b0*/ bool get_EnableImplementationFallback();
                    }

                    class HTTP2ConnectionSettings
                    {
                        /*0x10*/ bool EnableHTTP2Connections;
                        /*0x14*/ uint HeaderTableSize;
                        /*0x18*/ uint MaxConcurrentStreams;
                        /*0x1c*/ uint InitialStreamWindowSize;
                        /*0x20*/ uint InitialConnectionWindowSize;
                        /*0x24*/ uint MaxFrameSize;
                        /*0x28*/ uint MaxHeaderListSize;
                        /*0x30*/ System.TimeSpan MaxIdleTime;
                        /*0x38*/ System.TimeSpan PingFrequency;
                        /*0x40*/ System.TimeSpan Timeout;
                        /*0x48*/ bool EnableConnectProtocol;
                        /*0x50*/ Best.HTTP.Hosts.Connections.HTTP2.WebSocketOverHTTP2Settings WebSocketOverHTTP2Settings;

                        /*0x29569c8*/ HTTP2ConnectionSettings();
                    }

                    class CustomHTTP2StreamFactory : System.MulticastDelegate
                    {
                        /*0x2956ab8*/ CustomHTTP2StreamFactory(object object, nint method);
                        /*0x2956bc4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream Invoke(Best.HTTP.HTTPRequest request, uint streamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer parentHandler, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry, Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder hpackEncoder);
                    }

                    class HTTP2ContentConsumer : Best.HTTP.Hosts.Connections.IHTTPRequestHandler, System.IDisposable, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IThreadSignaler
                    {
                        static /*0x0*/ int RTTBufferCapacity;
                        /*0x10*/ int _assignedRequest;
                        /*0x14*/ int _maxAssignedRequests;
                        /*0x18*/ double <Latency>k__BackingField;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settings;
                        /*0x28*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder HPACKEncoder;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x38*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x40*/ System.DateTime lastPingSent;
                        /*0x48*/ int waitingForPingAck;
                        /*0x50*/ Best.HTTP.Shared.Extensions.CircularBuffer<double> rtts;
                        /*0x58*/ bool isRunning;
                        /*0x60*/ System.Threading.AutoResetEvent newFrameSignal;
                        /*0x68*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.HTTPRequest> requestQueue;
                        /*0x70*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream> clientInitiatedStreams;
                        /*0x78*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> newFrames;
                        /*0x80*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames;
                        /*0x88*/ uint remoteWindow;
                        /*0x90*/ System.DateTime lastInteraction;
                        /*0x98*/ System.DateTime goAwaySentAt;
                        /*0xa0*/ Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn;
                        /*0xa8*/ long LastStreamId;
                        /*0xb0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings _connectionSettings;
                        /*0xb8*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;

                        static /*0x295d918*/ HTTP2ContentConsumer();
                        /*0x294c1bc*/ HTTP2ContentConsumer(Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn);
                        /*0x2956bd8*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                        /*0x2956be0*/ bool get_CanProcessMultiple();
                        /*0x2956c88*/ int get_AssignedRequests();
                        /*0x2956c90*/ int get_MaxAssignedRequests();
                        /*0x2956c98*/ double get_Latency();
                        /*0x2956ca0*/ void set_Latency(double value);
                        /*0x2956ca8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x2956cb0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x2956cb8*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x2956cc0*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x2956c20*/ bool get_SentGoAwayFrame();
                        /*0x2956cc8*/ System.TimeSpan get_MaxGoAwayWaitTime();
                        /*0x2956ee0*/ void Process(Best.HTTP.HTTPRequest request);
                        /*0x29570a8*/ void SignalThread();
                        /*0x29570bc*/ void RunHandler();
                        /*0x295c6a8*/ void OnRemoteSettingChanged(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint oldValue, uint newValue);
                        /*0x295c6c8*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x295c6d0*/ void UnsetBinding();
                        /*0x295c6dc*/ void OnContent();
                        /*0x295cf70*/ void OnConnectionClosed();
                        /*0x295d0f8*/ void OnError(System.Exception ex);
                        /*0x295b034*/ double CalculateLatency();
                        /*0x295ac04*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream FindStreamById(uint streamId);
                        /*0x295d28c*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                        /*0x295d294*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                        /*0x295d29c*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                        /*0x295d2f8*/ void Dispose();
                    }

                    enum HTTP2ErrorCodes
                    {
                        NO_ERROR = 0,
                        PROTOCOL_ERROR = 1,
                        INTERNAL_ERROR = 2,
                        FLOW_CONTROL_ERROR = 3,
                        SETTINGS_TIMEOUT = 4,
                        STREAM_CLOSED = 5,
                        FRAME_SIZE_ERROR = 6,
                        REFUSED_STREAM = 7,
                        CANCEL = 8,
                        COMPRESSION_ERROR = 9,
                        CONNECT_ERROR = 10,
                        ENHANCE_YOUR_CALM = 11,
                        INADEQUATE_SECURITY = 12,
                        HTTP_1_1_REQUIRED = 13,
                    }

                    class HTTP2FrameHelper
                    {
                        static /*0x295b0e4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2WindowUpdateFrame ReadWindowUpdateFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295b170*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2GoAwayFrame ReadGoAwayFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295afbc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFrame ReadPingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295daf4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2RSTStreamFrame ReadRST_StreamFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x2950794*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2HeadersFrame ReadHeadersFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295dc18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2DataFrame ReadDataFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295de94*/ void StreamRead(System.IO.Stream stream, byte[] buffer, int offset, uint count);
                        static /*0x295df60*/ void StreamRead(System.IO.Stream stream, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                        static /*0x295c5cc*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer HeaderAsBinary(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295ce7c*/ bool CanReadFullFrame(Best.HTTP.Shared.Streams.PeekableStream stream);
                        static /*0x295cb18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload ReadHeader(System.IO.Stream stream, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x295e030*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsFrame ReadSettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x295e1fc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateACKSettingsFrame();
                        static /*0x295e218*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateSettingsFrame(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> settings, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x295ab18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreatePingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFlags flags, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x295aa14*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateWindowUpdateFrame(uint streamId, uint windowSizeIncrement, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x295c254*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateGoAwayFrame(uint lastStreamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes error, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x295e4d8*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateRSTFrame(uint streamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes errorCode, Best.HTTP.Shared.Logger.LoggingContext context);
                    }

                    enum HTTP2FrameTypes
                    {
                        DATA = 0,
                        HEADERS = 1,
                        PRIORITY = 2,
                        RST_STREAM = 3,
                        SETTINGS = 4,
                        PUSH_PROMISE = 5,
                        PING = 6,
                        GOAWAY = 7,
                        WINDOW_UPDATE = 8,
                        CONTINUATION = 9,
                        ALT_SVC = 10,
                    }

                    enum HTTP2DataFlags
                    {
                        None = 0,
                        END_STREAM = 1,
                        PADDED = 8,
                    }

                    enum HTTP2HeadersFlags
                    {
                        None = 0,
                        END_STREAM = 1,
                        END_HEADERS = 4,
                        PADDED = 8,
                        PRIORITY = 32,
                    }

                    enum HTTP2SettingsFlags
                    {
                        None = 0,
                        ACK = 1,
                    }

                    enum HTTP2PingFlags
                    {
                        None = 0,
                        ACK = 1,
                    }

                    struct HTTP2FrameHeaderAndPayload
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameTypes Type;
                        /*0x11*/ byte Flags;
                        /*0x14*/ uint StreamId;
                        /*0x18*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Payload;
                        /*0x28*/ bool DontUseMemPool;

                        /*0x295c368*/ string ToString();
                        /*0x2950514*/ string PayloadAsHex();
                    }

                    struct HTTP2SettingsFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> Settings;

                        /*0x295e1cc*/ HTTP2SettingsFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295e5dc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsFlags get_Flags();
                        /*0x295e5e4*/ string ToString();
                    }

                    struct HTTP2DataFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Nullable<byte> PadLength;
                        /*0x38*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Data;

                        /*0x295de00*/ HTTP2DataFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295de8c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2DataFlags get_Flags();
                        /*0x295ea90*/ string ToString();
                    }

                    struct HTTP2HeadersFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Nullable<byte> PadLength;
                        /*0x32*/ System.Nullable<byte> IsExclusive;
                        /*0x34*/ System.Nullable<uint> StreamDependency;
                        /*0x3c*/ System.Nullable<byte> Weight;
                        /*0x40*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment HeaderBlockFragment;

                        /*0x295db80*/ HTTP2HeadersFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295dc10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2HeadersFlags get_Flags();
                        /*0x295ed10*/ string ToString();
                    }

                    struct HTTP2RSTStreamFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ uint ErrorCode;

                        /*0x295db58*/ HTTP2RSTStreamFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295f1bc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes get_Error();
                        /*0x295f1c4*/ string ToString();
                    }

                    struct HTTP2PingFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment OpaqueData;

                        /*0x295da20*/ HTTP2PingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295b02c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFlags get_Flags();
                        /*0x295f28c*/ string ToString();
                    }

                    struct HTTP2GoAwayFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ byte ReservedBit;
                        /*0x34*/ uint LastStreamId;
                        /*0x38*/ uint ErrorCode;
                        /*0x40*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AdditionalDebugData;

                        /*0x295d990*/ HTTP2GoAwayFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295f360*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes get_Error();
                        /*0x295b2dc*/ string ToString();
                    }

                    struct HTTP2WindowUpdateFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ byte ReservedBit;
                        /*0x34*/ uint WindowSizeIncrement;

                        /*0x295d964*/ HTTP2WindowUpdateFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x295f368*/ string ToString();
                    }

                    class HTTP2Response : Best.HTTP.HTTPResponse
                    {
                        /*0x80*/ long <ExpectedContentLength>k__BackingField;
                        /*0x88*/ string contentEncoding;
                        /*0x90*/ bool isPrepared;
                        /*0x98*/ Best.HTTP.Response.Decompression.IDecompressor _decompressor;

                        /*0x295f42c*/ HTTP2Response(Best.HTTP.HTTPRequest request, bool isFromCache);
                        /*0x295f41c*/ long get_ExpectedContentLength();
                        /*0x295f424*/ void set_ExpectedContentLength(long value);
                        /*0x295f4b8*/ void AddHeaders(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> headers);
                        /*0x295ffe4*/ void Prepare(Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailable);
                        /*0x2960018*/ void ProcessData(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment payload);
                        /*0x29602d0*/ void FinishProcessData();
                        /*0x29604ac*/ void Dispose(bool disposing);
                    }

                    enum HTTP2Settings
                    {
                        HEADER_TABLE_SIZE = 1,
                        ENABLE_PUSH = 2,
                        MAX_CONCURRENT_STREAMS = 3,
                        INITIAL_WINDOW_SIZE = 4,
                        MAX_FRAME_SIZE = 5,
                        MAX_HEADER_LIST_SIZE = 6,
                        RESERVED = 7,
                        ENABLE_CONNECT_PROTOCOL = 8,
                        NO_RFC7540_PRIORITIES = 9,
                    }

                    class HTTP2SettingsRegistry
                    {
                        /*0x10*/ bool <IsReadOnly>k__BackingField;
                        /*0x18*/ System.Action<Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint, uint> OnSettingChangedEvent;
                        /*0x20*/ uint[] values;
                        /*0x28*/ bool[] changeFlags;
                        /*0x30*/ bool <IsChanged>k__BackingField;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager _parent;

                        /*0x296060c*/ HTTP2SettingsRegistry(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager parent, bool readOnly, bool treatItAsAlreadyChanged);
                        /*0x29605ec*/ bool get_IsReadOnly();
                        /*0x29605f4*/ void set_IsReadOnly(bool value);
                        /*0x2951328*/ uint get_Item(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting);
                        /*0x295a6b0*/ void set_Item(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint value);
                        /*0x29605fc*/ bool get_IsChanged();
                        /*0x2960604*/ void set_IsChanged(bool value);
                        /*0x29607c0*/ void Merge(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> settings);
                        /*0x2960c4c*/ void Merge(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry from);
                        /*0x2960d20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateFrame(Best.HTTP.Shared.Logger.LoggingContext context);
                    }

                    class HTTP2SettingsManager
                    {
                        static /*0x0*/ int KnownSettingsCount;
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <MySettings>k__BackingField;
                        /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <InitiatedMySettings>k__BackingField;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <RemoteSettings>k__BackingField;
                        /*0x28*/ System.DateTime <SettingsChangesSentAt>k__BackingField;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings _connectionSettings;

                        static /*0x2960f34*/ HTTP2SettingsManager();
                        /*0x2956da4*/ HTTP2SettingsManager(Best.HTTP.Shared.Logger.LoggingContext context, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings connectionSettings);
                        /*0x2960ee4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_MySettings();
                        /*0x2960eec*/ void set_MySettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x2960ef4*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_InitiatedMySettings();
                        /*0x2960efc*/ void set_InitiatedMySettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x2960f04*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_RemoteSettings();
                        /*0x2960f0c*/ void set_RemoteSettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x2960f14*/ System.DateTime get_SettingsChangesSentAt();
                        /*0x2960f1c*/ void set_SettingsChangesSentAt(System.DateTime value);
                        /*0x2960f24*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x2960f2c*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x295ad20*/ void Process(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame, System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x295a7ac*/ void SendChanges(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                    }

                    enum HTTP2StreamStates
                    {
                        Idle = 0,
                        Open = 1,
                        HalfClosedLocal = 2,
                        HalfClosedRemote = 3,
                        Closed = 4,
                    }

                    class HTTP2Stream : Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable
                    {
                        /*0x10*/ uint <Id>k__BackingField;
                        /*0x14*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates _state;
                        /*0x18*/ System.TimeSpan <NextInteraction>k__BackingField;
                        /*0x20*/ Best.HTTP.HTTPRequest <AssignedRequest>k__BackingField;
                        /*0x28*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x30*/ uint downloaded;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settings;
                        /*0x40*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder encoder;
                        /*0x48*/ System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoing;
                        /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> incomingFrames;
                        /*0x58*/ Best.HTTP.Hosts.Connections.HTTP2.FramesAsStreamView headerView;
                        /*0x60*/ long localWindow;
                        /*0x68*/ long remoteWindow;
                        /*0x70*/ uint windowUpdateThreshold;
                        /*0x78*/ long sentData;
                        /*0x80*/ long uploadLength;
                        /*0x88*/ bool isRSTFrameSent;
                        /*0x89*/ bool isEndSTRReceived;
                        /*0x90*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Response response;
                        /*0x98*/ int lastReadCount;
                        /*0xa0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer _parentHandler;

                        /*0x295b9e4*/ HTTP2Stream(uint id, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer parentHandler, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry, Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder hpackEncoder);
                        /*0x2960fec*/ uint get_Id();
                        /*0x2960ff4*/ void set_Id(uint value);
                        /*0x2960ffc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates get_State();
                        /*0x2961004*/ void set_State(Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates value);
                        /*0x296123c*/ bool get_HasFrameToSend();
                        /*0x29612c0*/ System.TimeSpan get_NextInteraction();
                        /*0x29612c8*/ Best.HTTP.HTTPRequest get_AssignedRequest();
                        /*0x29612d0*/ void set_AssignedRequest(Best.HTTP.HTTPRequest value);
                        /*0x29612d8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x29612e0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x29612e8*/ void Assign(Best.HTTP.HTTPRequest request);
                        /*0x295bcac*/ void Process(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x295acac*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame, System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x295b570*/ void Abort(string msg);
                        /*0x29614f4*/ void ProcessIncomingFrames(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x2962a68*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x2962a8c*/ void ProcessIncomingDATAFrame(ref Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x2962188*/ void ProcessState(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x2962d44*/ void ProcessOpenState(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x296321c*/ void OnRemoteSettingChanged(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint oldValue, uint newValue);
                        /*0x29626c0*/ void FinishRequest();
                        /*0x295bff8*/ void Removed();
                    }

                    struct HuffmanTableEntry
                    {
                        /*0x10*/ uint Code;
                        /*0x14*/ byte Bits;

                        /*0x2963584*/ HuffmanTableEntry(uint code, byte bits);
                        /*0x295635c*/ byte GetBitAtIdx(byte idx);
                        /*0x2963590*/ string ToString();
                    }

                    struct HuffmanTreeNode
                    {
                        /*0x10*/ ushort Value;
                        /*0x12*/ ushort NextZeroIdx;
                        /*0x14*/ ushort NextOneIdx;

                        /*0x2963624*/ HuffmanTreeNode(ushort value, ushort nextZeroIdx, ushort nextOneIdx);
                        /*0x2963634*/ string ToString();
                    }

                    class HuffmanEncoder
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry[] StaticTable;
                        static /*0x8*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode[] HuffmanTree;

                        static /*0x29636ec*/ HuffmanEncoder();
                        static /*0x29551b0*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode GetRoot();
                        static /*0x2955228*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode GetNext(Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode current, byte bit);
                        static /*0x295621c*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry GetEntryForCodePoint(ushort codePoint);
                    }
                }

                namespace HTTP1
                {
                    class Constants
                    {
                        static /*0x0*/ byte[] EOL;
                        static /*0x8*/ byte[] HeaderValueSeparator;

                        static /*0x2a3cf58*/ Constants();
                    }

                    class HTTP1ContentConsumer : Best.HTTP.Hosts.Connections.IHTTPRequestHandler, System.IDisposable, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable, Best.HTTP.Hosts.Connections.IThreadSignaler
                    {
                        /*0x10*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;
                        /*0x18*/ Best.HTTP.Hosts.Connections.KeepAliveHeader _keepAlive;
                        /*0x20*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x28*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x30*/ Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response _response;
                        /*0x40*/ int _isAlreadyProcessingContent;
                        /*0x48*/ System.Threading.AutoResetEvent _are;

                        /*0x2a3d094*/ HTTP1ContentConsumer(Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn);
                        /*0x2a3d02c*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                        /*0x2a3d034*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                        /*0x2a3d03c*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                        /*0x2a3d044*/ bool get_CanProcessMultiple();
                        /*0x2a3d04c*/ int get_AssignedRequests();
                        /*0x2a3d06c*/ int get_MaxAssignedRequests();
                        /*0x2a3d074*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x2a3d07c*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x2a3d084*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x2a3d08c*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x2a3d15c*/ void RunHandler();
                        /*0x2a3d7e8*/ void SendOutTo(Best.HTTP.HTTPRequest request, System.IO.Stream stream);
                        /*0x2a3e6e8*/ void SendContent();
                        /*0x2a3efcc*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x2a3f320*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x2a3f328*/ void UnsetBinding();
                        /*0x2a3efdc*/ void OnContent();
                        /*0x2a40348*/ void OnConnectionClosed();
                        /*0x2a40740*/ void OnError(System.Exception e);
                        /*0x2a409b8*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                        /*0x2a3dfd0*/ void FinishedProcessing(System.Exception ex);
                        /*0x2a40bc0*/ void Process(Best.HTTP.HTTPRequest request);
                        /*0x2a40dfc*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                        /*0x2a40fd8*/ void Dispose();
                        /*0x2a4103c*/ void Dispose(bool disposing);
                        /*0x2a41078*/ void Best.HTTP.Hosts.Connections.IThreadSignaler.SignalThread();
                        /*0x2a4108c*/ void <OnConnectionClosed>b__33_0();

                        class <>c__DisplayClass27_0
                        {
                            /*0x10*/ Best.HTTP.HTTPRequest request;
                            /*0x18*/ Best.HTTP.Shared.Streams.WriteOnlyBufferedStream bufferStream;

                            /*0x2a3e6e0*/ <>c__DisplayClass27_0();
                            /*0x2a41354*/ void <SendOutTo>b__0(string header, System.Collections.Generic.List<string> values);
                        }
                    }

                    class PeekableHTTP1Response : Best.HTTP.HTTPResponse
                    {
                        /*0x7c*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState _readState;
                        /*0x80*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ContentDeliveryMode _deliveryMode;
                        /*0x88*/ long _expectedLength;
                        /*0x90*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> _newHeaders;
                        /*0x98*/ long _downloaded;
                        /*0xa0*/ Best.HTTP.Response.Decompression.IDecompressor _decompressor;
                        /*0xa8*/ bool _compressed;
                        /*0xa9*/ bool sendProgressChanged;
                        /*0xac*/ int _chunkLength;
                        /*0xb0*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ReadChunkedStates _readChunkedState;
                        /*0xb8*/ Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable _bufferAvailableHandler;
                        /*0xc0*/ int _isProccessing;

                        /*0x2a3d7b0*/ PeekableHTTP1Response(Best.HTTP.HTTPRequest request, bool isFromCache, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                        /*0x2a418fc*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState get_ReadState();
                        /*0x2a41904*/ void set_ReadState(Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState value);
                        /*0x2a41b08*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ContentDeliveryMode get_DeliveryMode();
                        /*0x2a3f334*/ void ProcessPeekable(Best.HTTP.Shared.Streams.PeekableContentProviderStream peekable);
                        /*0x2a41b10*/ bool IsNewLinePresent(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x2a41b8c*/ void ProcessReadHeaders(Best.HTTP.Shared.Streams.PeekableStream peekable, Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState targetState);
                        /*0x2a42298*/ void ProcessReadRawUnknownLength(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x2a42c24*/ bool TryReadChunkLength(Best.HTTP.Shared.Streams.PeekableStream peekable, ref int result);
                        /*0x2a424c4*/ void ProcessReadChunked(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x2a42018*/ void ProcessReadRaw(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x2a42a64*/ void ProcessChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment chunk);
                        /*0x2a4288c*/ void PostProcessContent();
                        /*0x2a42cac*/ void Dispose(bool disposing);

                        enum ContentDeliveryMode
                        {
                            Raw = 0,
                            RawUnknownLength = 1,
                            Chunked = 2,
                        }

                        enum PeekableReadState
                        {
                            StatusLine = 0,
                            Headers = 1,
                            WaitForContentSent = 2,
                            PrepareForContent = 3,
                            ContentSetup = 4,
                            Content = 5,
                            Finished = 6,
                        }

                        enum ReadChunkedStates
                        {
                            ReadChunkLength = 0,
                            ReadChunk = 1,
                            ReadTrailingCRLF = 2,
                            ReadTrailingHeaders = 3,
                        }
                    }
                }

                namespace File
                {
                    class FileConnection : Best.HTTP.Hosts.Connections.ConnectionBase, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable
                    {
                        /*0x70*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x78*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response _response;
                        /*0x80*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingUnderlyingStream _stream;
                        /*0x88*/ UnityEngine.Hash128 _cacheHash;

                        /*0x2a42d78*/ FileConnection(Best.HTTP.HostSetting.HostKey hostKey);
                        /*0x2a42d68*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x2a42d70*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x2a42da0*/ void ThreadFunc();
                        /*0x2a4434c*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x2a44560*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x2a44568*/ void UnsetBinding();
                        /*0x2a4435c*/ void OnContent();
                        /*0x2a44574*/ void OnConnectionClosed();
                        /*0x2a44858*/ void OnError(System.Exception e);
                        /*0x2a44ad0*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                        /*0x2a43bf8*/ void FinishedProcessing(System.Exception ex);
                    }
                }
            }
        }

        namespace Cookies
        {
            class Cookie : System.IComparable<Best.HTTP.Cookies.Cookie>, System.IEquatable<Best.HTTP.Cookies.Cookie>
            {
                /*0x10*/ string <Name>k__BackingField;
                /*0x18*/ string <Value>k__BackingField;
                /*0x20*/ System.DateTime <Date>k__BackingField;
                /*0x28*/ System.DateTime <LastAccess>k__BackingField;
                /*0x30*/ System.DateTime <Expires>k__BackingField;
                /*0x38*/ long <MaxAge>k__BackingField;
                /*0x40*/ bool <IsSession>k__BackingField;
                /*0x48*/ string <Domain>k__BackingField;
                /*0x50*/ string <Path>k__BackingField;
                /*0x58*/ bool <IsSecure>k__BackingField;
                /*0x59*/ bool <IsHttpOnly>k__BackingField;
                /*0x60*/ string <SameSite>k__BackingField;

                static /*0x2a451e4*/ Best.HTTP.Cookies.Cookie Parse(string header, System.Uri defaultDomain, Best.HTTP.Shared.Logger.LoggingContext context);
                static /*0x2a463d8*/ string ReadValue(string str, ref int pos);
                static /*0x2a45c30*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> ParseCookieHeader(string str);
                /*0x2a44f94*/ Cookie();
                /*0x2a44ed4*/ string get_Name();
                /*0x2a44edc*/ void set_Name(string value);
                /*0x2a44ee4*/ string get_Value();
                /*0x2a44eec*/ void set_Value(string value);
                /*0x2a44ef4*/ System.DateTime get_Date();
                /*0x2a44efc*/ void set_Date(System.DateTime value);
                /*0x2a44f04*/ System.DateTime get_LastAccess();
                /*0x2a44f0c*/ void set_LastAccess(System.DateTime value);
                /*0x2a44f14*/ System.DateTime get_Expires();
                /*0x2a44f1c*/ void set_Expires(System.DateTime value);
                /*0x2a44f24*/ long get_MaxAge();
                /*0x2a44f2c*/ void set_MaxAge(long value);
                /*0x2a44f34*/ bool get_IsSession();
                /*0x2a44f3c*/ void set_IsSession(bool value);
                /*0x2a44f44*/ string get_Domain();
                /*0x2a44f4c*/ void set_Domain(string value);
                /*0x2a44f54*/ string get_Path();
                /*0x2a44f5c*/ void set_Path(string value);
                /*0x2a44f64*/ bool get_IsSecure();
                /*0x2a44f6c*/ void set_IsSecure(bool value);
                /*0x2a44f74*/ bool get_IsHttpOnly();
                /*0x2a44f7c*/ void set_IsHttpOnly(bool value);
                /*0x2a44f84*/ string get_SameSite();
                /*0x2a44f8c*/ void set_SameSite(string value);
                /*0x2a4500c*/ bool WillExpireInTheFuture();
                /*0x2a45174*/ uint GuessSize();
                /*0x2a45e7c*/ void SaveTo(System.IO.BinaryWriter stream);
                /*0x2a46094*/ void LoadFrom(System.IO.BinaryReader stream);
                /*0x2a46260*/ string ToString();
                /*0x2a462ac*/ bool Equals(object obj);
                /*0x2a46318*/ bool Equals(Best.HTTP.Cookies.Cookie cookie);
                /*0x2a463b0*/ int GetHashCode();
                /*0x2a46464*/ int CompareTo(Best.HTTP.Cookies.Cookie other);

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Cookies.Cookie.<> <>9;
                    static /*0x8*/ System.Func<char, bool> <>9__65_0;

                    static /*0x2a464e4*/ <>c();
                    /*0x2a4654c*/ <>c();
                    /*0x2a46554*/ bool <ParseCookieHeader>b__65_0(char ch);
                }
            }

            class CookieJar
            {
                static /*0x0*/ uint <MaximumSize>k__BackingField;
                static /*0x8*/ System.TimeSpan AccessThreshold;
                static /*0x10*/ bool IsSessionOverride;
                static /*0x11*/ bool IsEnabled;
                static /*0x18*/ System.Collections.Generic.List<Best.HTTP.Cookies.Cookie> Cookies;
                static /*0x20*/ string <CookieFolder>k__BackingField;
                static /*0x28*/ string <LibraryPath>k__BackingField;
                static /*0x30*/ System.Threading.ReaderWriterLockSlim rwLock;
                static /*0x38*/ bool _isSavingSupported;
                static /*0x39*/ bool IsSupportCheckDone;
                static /*0x3a*/ bool Loaded;
                static /*0x40*/ Best.HTTP.Shared.Extensions.RunOnceOnMainThread _saveLibraryRunner;

                static /*0x2a49730*/ CookieJar();
                static /*0x2a4656c*/ uint get_MaximumSize();
                static /*0x2a465c4*/ bool get_IsSavingSupported();
                static /*0x2a46bb4*/ string get_CookieFolder();
                static /*0x2a46c0c*/ void set_CookieFolder(string value);
                static /*0x2a46c6c*/ string get_LibraryPath();
                static /*0x2a46cc4*/ void set_LibraryPath(string value);
                static /*0x2a46d24*/ void SetupFolder();
                static /*0x2a47034*/ bool SetFromRequest(Best.HTTP.HTTPResponse response);
                static /*0x2a4773c*/ void SetupRequest(Best.HTTP.HTTPRequest request);
                static /*0x2a47f04*/ void Maintain(bool sendEvent);
                static /*0x2a48438*/ void Persist();
                static /*0x2a48e04*/ void Load();
                static /*0x2a47ab4*/ System.Collections.Generic.List<Best.HTTP.Cookies.Cookie> Get(System.Uri uri);
                static /*0x2a47634*/ Best.HTTP.Cookies.Cookie Find(Best.HTTP.Cookies.Cookie cookie, ref int idx);
            }
        }

        namespace Caching
        {
            class HTTPCacheAcquireLockException : System.Exception
            {
                /*0x2a43ad4*/ HTTPCacheAcquireLockException(string message);
            }

            enum ErrorTypeForValidation
            {
                None = 0,
                ServerError = 1,
                ConnectionError = 2,
            }

            class OnBeforeBeginCacheDelegate : System.MulticastDelegate
            {
                /*0x2a498f0*/ OnBeforeBeginCacheDelegate(object object, nint method);
                /*0x2a49990*/ void Invoke(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
            }

            class OnCacheSizeChangedDelegate : System.MulticastDelegate
            {
                /*0x2a499a4*/ OnCacheSizeChangedDelegate(object object, nint method);
                /*0x2a49a40*/ void Invoke();
            }

            class HTTPCache : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
            {
                /*0x10*/ Best.HTTP.Caching.OnCacheSizeChangedDelegate OnCacheSizeChanged;
                /*0x18*/ Best.HTTP.Caching.HTTPCacheOptions <Options>k__BackingField;
                /*0x20*/ long _cacheSize;
                /*0x28*/ Best.HTTP.Caching.OnBeforeBeginCacheDelegate OnBeforeBeginCache;
                /*0x30*/ int _subscribed;
                /*0x34*/ bool _isSupported;
                /*0x38*/ Best.HTTP.Caching.HTTPCacheDatabase _database;
                /*0x40*/ string _baseDirectory;

                static /*0x2a4a0bc*/ UnityEngine.Hash128 CalculateHash(Best.HTTP.HTTPMethods method, System.Uri uri);
                static /*0x2a4d408*/ void WriteHeaders(System.IO.Stream headerStream, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                static /*0x2a50840*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> LoadHeaders(System.IO.Stream headersStream);
                static /*0x2a4c344*/ void LogCachingHeaders(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a49a6c*/ HTTPCache(Best.HTTP.Caching.HTTPCacheOptions options);
                /*0x2a49a54*/ Best.HTTP.Caching.HTTPCacheOptions get_Options();
                /*0x2a49a5c*/ void set_Options(Best.HTTP.Caching.HTTPCacheOptions value);
                /*0x2a49a64*/ long get_CacheSize();
                /*0x2a4a118*/ string GetHashDirectory(UnityEngine.Hash128 hash);
                /*0x2a43b3c*/ string GetHeaderPathFromHash(UnityEngine.Hash128 hash);
                /*0x2a4a1b4*/ string GetContentPathFromHash(UnityEngine.Hash128 hash);
                /*0x2a4a270*/ bool AreCacheFilesExists(UnityEngine.Hash128 hash);
                /*0x2a4a420*/ void SetupValidationHeaders(Best.HTTP.HTTPRequest request);
                /*0x2a4b260*/ bool IsThereEnoughSpaceAfterMaintain(ulong spaceNeeded, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4b5ec*/ Best.HTTP.Caching.HTTPCacheContentWriter BeginCache(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4df00*/ void EndCache(Best.HTTP.Caching.HTTPCacheContentWriter cacheResult, bool completedWithoutIssue, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a437dc*/ System.IO.Stream BeginReadContent(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a44cb8*/ void EndReadContent(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4aa88*/ void Delete(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4fa60*/ bool RefreshHeaders(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> newHeaders, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4c9f4*/ bool IsCacheble(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                /*0x2a4c29c*/ bool IsCacheble(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode);
                /*0x2a509e0*/ bool CanServeWithoutValidation(UnityEngine.Hash128 hash, Best.HTTP.Caching.ErrorTypeForValidation errorType, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a51070*/ void Redirect(Best.HTTP.HTTPRequest request, UnityEngine.Hash128 hash);
                /*0x2a4b2cc*/ void Maintain(ulong contentLength, bool deleteLockedEntries, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a51e20*/ void ZeroOutCacheSize();
                /*0x2a4e6a0*/ void IncrementCacheSize(ulong withSize);
                /*0x2a4f9c4*/ void DecrementCacheSize(ulong withSize);
                /*0x2a513cc*/ void MaintainImplementation(ulong contentLength, bool deleteLockedEntries, System.DateTime now, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a51f7c*/ void Dispose();
                /*0x2a52254*/ void Clear();
                /*0x2a52480*/ void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Caching.HTTPCache.<> <>9;
                    static /*0x8*/ System.Comparison<Best.HTTP.Caching.CacheMetadata> <>9__41_0;

                    static /*0x2a525f8*/ <>c();
                    /*0x2a52660*/ <>c();
                    /*0x2a52668*/ int <MaintainImplementation>b__41_0(Best.HTTP.Caching.CacheMetadata x, Best.HTTP.Caching.CacheMetadata y);
                }

                class <>c__DisplayClass33_0
                {
                    /*0x10*/ bool hasValidMaxAge;

                    /*0x2a509d8*/ <>c__DisplayClass33_0();
                    /*0x2a526f0*/ bool <IsCacheble>g__CheckHeader|0(string headerValue);
                }
            }

            class HTTPCacheContentWriter
            {
                /*0x10*/ Best.HTTP.Caching.HTTPCache <Cache>k__BackingField;
                /*0x18*/ UnityEngine.Hash128 <Hash>k__BackingField;
                /*0x28*/ ulong <ExpectedLength>k__BackingField;
                /*0x30*/ ulong <ProcessedLength>k__BackingField;
                /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                /*0x40*/ System.IO.Stream _contentStream;

                /*0x2a4de84*/ HTTPCacheContentWriter(Best.HTTP.Caching.HTTPCache cache, UnityEngine.Hash128 hash, System.IO.Stream contentStream, ulong expectedLength, Best.HTTP.Shared.Logger.LoggingContext loggingContext);
                /*0x2a52874*/ Best.HTTP.Caching.HTTPCache get_Cache();
                /*0x2a5287c*/ void set_Cache(Best.HTTP.Caching.HTTPCache value);
                /*0x2a52884*/ UnityEngine.Hash128 get_Hash();
                /*0x2a52890*/ void set_Hash(UnityEngine.Hash128 value);
                /*0x2a52898*/ ulong get_ExpectedLength();
                /*0x2a528a0*/ void set_ExpectedLength(ulong value);
                /*0x2a528a8*/ ulong get_ProcessedLength();
                /*0x2a528b0*/ void set_ProcessedLength(ulong value);
                /*0x2a528b8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                /*0x2a528c0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                /*0x2a528c8*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                /*0x2a4e16c*/ void Close();
                /*0x2a52c58*/ string ToString();
            }

            struct v128View
            {
                /*0x10*/ ulong low;
                /*0x18*/ ulong high;
            }

            enum LockTypes
            {
                Unlocked = 0,
                Write = 1,
                Read = 2,
            }

            class CacheMetadata : Best.HTTP.Shared.Databases.Metadata
            {
                /*0x20*/ UnityEngine.Hash128 <Hash>k__BackingField;
                /*0x30*/ ulong <ContentLength>k__BackingField;
                /*0x38*/ System.DateTime <LastAccessTime>k__BackingField;
                /*0x40*/ Best.HTTP.Caching.LockTypes <Lock>k__BackingField;
                /*0x44*/ int <ReadLockCount>k__BackingField;

                /*0x2a53118*/ CacheMetadata();
                /*0x2a52d20*/ UnityEngine.Hash128 get_Hash();
                /*0x2a52d2c*/ void set_Hash(UnityEngine.Hash128 value);
                /*0x2a52d34*/ ulong get_ContentLength();
                /*0x2a52d3c*/ void set_ContentLength(ulong value);
                /*0x2a52d44*/ System.DateTime get_LastAccessTime();
                /*0x2a52d4c*/ void set_LastAccessTime(System.DateTime value);
                /*0x2a52d54*/ Best.HTTP.Caching.LockTypes get_Lock();
                /*0x2a52d5c*/ void set_Lock(Best.HTTP.Caching.LockTypes value);
                /*0x2a52d64*/ int get_ReadLockCount();
                /*0x2a52d6c*/ void set_ReadLockCount(int value);
                /*0x2a52d74*/ void SaveTo(System.IO.Stream stream);
                /*0x2a52e50*/ void LoadFrom(System.IO.Stream stream);
                /*0x2a52f20*/ string ToString();
            }

            enum CacheFlags
            {
                None = 0,
                MustRevalidate = 1,
                NoCache = 2,
            }

            class CacheMetadataContent
            {
                /*0x10*/ string ETag;
                /*0x18*/ System.DateTime LastModified;
                /*0x20*/ System.DateTime Expires;
                /*0x28*/ uint Age;
                /*0x2c*/ uint MaxAge;
                /*0x30*/ System.DateTime Date;
                /*0x38*/ uint StaleWhileRevalidate;
                /*0x3c*/ uint StaleIfError;
                /*0x40*/ Best.HTTP.Caching.CacheFlags Flags;
                /*0x48*/ System.DateTime RequestTime;
                /*0x50*/ System.DateTime ResponseTime;

                /*0x2a53120*/ CacheMetadataContent();
                /*0x2a531b8*/ void From(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
            }

            class CacheMetadataContentParser : Best.HTTP.Shared.Databases.IDiskContentParser<Best.HTTP.Caching.CacheMetadataContent>
            {
                /*0x2a53998*/ CacheMetadataContentParser();
                /*0x2a536cc*/ void Encode(System.IO.Stream stream, Best.HTTP.Caching.CacheMetadataContent content);
                /*0x2a53814*/ Best.HTTP.Caching.CacheMetadataContent Parse(System.IO.Stream stream, int length);
            }

            class CacheMetadataIndexingService : Best.HTTP.Shared.Databases.IndexingService<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata>
            {
                /*0x10*/ Best.HTTP.Shared.Databases.Indexing.AVLTree<UnityEngine.Hash128, int> index_Hash;

                /*0x2a53bac*/ CacheMetadataIndexingService();
                /*0x2a539a0*/ void Index(Best.HTTP.Caching.CacheMetadata metadata);
                /*0x2a53a4c*/ void Remove(Best.HTTP.Caching.CacheMetadata metadata);
                /*0x2a53ae8*/ System.Collections.Generic.IEnumerable<int> GetOptimizedIndexes();
                /*0x2a53b38*/ System.Collections.Generic.List<int> FindByHash(UnityEngine.Hash128 hash);
            }

            class CacheMetadataService : Best.HTTP.Shared.Databases.MetadataService<Best.HTTP.Caching.CacheMetadata, Best.HTTP.Caching.CacheMetadataContent>
            {
                /*0x2a53c7c*/ CacheMetadataService(Best.HTTP.Shared.Databases.IndexingService<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> indexingService, Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<Best.HTTP.Caching.CacheMetadata> emptyMetadataIndexFinder);
                /*0x2a53cdc*/ Best.HTTP.Caching.CacheMetadata CreateFrom(System.IO.Stream stream);
                /*0x2a53d34*/ Best.HTTP.Caching.CacheMetadata Create(UnityEngine.Hash128 hash, Best.HTTP.Caching.CacheMetadataContent value, int filePos, int length);

                class <>c__DisplayClass2_0
                {
                    /*0x10*/ UnityEngine.Hash128 hash;

                    /*0x2a53e30*/ <>c__DisplayClass2_0();
                    /*0x2a53e38*/ void <Create>b__0(Best.HTTP.Caching.CacheMetadataContent content, Best.HTTP.Caching.CacheMetadata metadata);
                }
            }

            class CacheDatabaseOptions : Best.HTTP.Shared.Databases.DatabaseOptions
            {
                /*0x2a53e50*/ CacheDatabaseOptions();
            }

            class HTTPCacheDatabase : Best.HTTP.Shared.Databases.Database<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata, Best.HTTP.Caching.CacheMetadataIndexingService, Best.HTTP.Caching.CacheMetadataService>
            {
                /*0x2a4a02c*/ HTTPCacheDatabase(string directory);
                /*0x2a53ea4*/ HTTPCacheDatabase(string directory, Best.HTTP.Shared.Databases.DatabaseOptions options, Best.HTTP.Caching.CacheMetadataIndexingService indexingService);
                /*0x2a4a79c*/ Best.HTTP.Caching.CacheMetadataContent FindByHashAndUpdateRequestTime(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4cc8c*/ bool TryAcquireWriteLock(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a5049c*/ bool Update(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4e1b4*/ void ReleaseWriteLock(UnityEngine.Hash128 hash, ulong length, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4e73c*/ bool TryAcquireReadLock(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4ee60*/ void ReleaseReadLock(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4f640*/ ulong Delete(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4f4a0*/ void EnterWriteLock(Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a54314*/ void ExitWriteLock(Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a4eb70*/ void UpdateLastAccessTime(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x2a541f4*/ Best.HTTP.Caching.CacheMetadata FindMetadata(UnityEngine.Hash128 hash);
                /*0x2a50fa0*/ System.ValueTuple<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> FindContentAndMetadataLocked(UnityEngine.Hash128 hash);
                /*0x2a53fe0*/ System.ValueTuple<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> FindContentAndMetadata(UnityEngine.Hash128 hash);
                /*0x2a5415c*/ void UpdateMetadataAndContent(Best.HTTP.Shared.Databases.Metadata metadata, Best.HTTP.Caching.CacheMetadataContent content);
            }

            class HTTPCacheOptions
            {
                /*0x10*/ System.TimeSpan <DeleteOlder>k__BackingField;
                /*0x18*/ ulong <MaxCacheSize>k__BackingField;

                /*0x2a49fc0*/ HTTPCacheOptions();
                /*0x2a544b4*/ System.TimeSpan get_DeleteOlder();
                /*0x2a544bc*/ ulong get_MaxCacheSize();
            }
        }

        namespace JSON
        {
            class Json
            {
                static /*0x2a544c4*/ string Encode(object json);
                static /*0x2a5455c*/ bool SerializeValue(object value, System.Text.StringBuilder builder);
                static /*0x2a54a2c*/ bool SerializeObject(System.Collections.IDictionary anObject, System.Text.StringBuilder builder);
                static /*0x2a54d18*/ bool SerializeArray(System.Collections.IList anArray, System.Text.StringBuilder builder);
                static /*0x2a5477c*/ bool SerializeString(string aString, System.Text.StringBuilder builder);
                static /*0x2a54f04*/ bool SerializeNumber(double number, System.Text.StringBuilder builder);
            }
        }

        namespace Shared
        {
            enum ShutdownTypes
            {
                Running = 0,
                Gentle = 1,
                Immediate = 2,
            }

            class OnSetupFinishedDelegate : System.MulticastDelegate
            {
                /*0x2a54fc0*/ OnSetupFinishedDelegate(object object, nint method);
                /*0x2a5505c*/ void Invoke();
            }

            class HTTPManager
            {
                static /*0x0*/ Best.HTTP.Shared.OnSetupFinishedDelegate OnSetupFinished;
                static /*0x8*/ Best.HTTP.Hosts.Settings.HostSettingsManager <PerHostSettings>k__BackingField;
                static /*0x10*/ System.DateTime <CurrentFrameDateTime>k__BackingField;
                static /*0x18*/ System.Func<string> <RootSaveFolderProvider>k__BackingField;
                static /*0x20*/ Best.HTTP.Proxies.Autodetect.ProxyDetector _proxyDetector;
                static /*0x28*/ Best.HTTP.Proxies.Proxy <Proxy>k__BackingField;
                static /*0x30*/ Best.HTTP.Shared.Extensions.HeartbeatManager heartbeats;
                static /*0x38*/ Best.HTTP.Shared.Logger.ILogger logger;
                static /*0x40*/ Best.HTTP.Shared.Logger.ILogger defaultLogger;
                static /*0x48*/ Best.HTTP.Shared.PlatformSupport.FileSystem.IIOService IOService;
                static /*0x50*/ string UserAgent;
                static /*0x58*/ bool _isQuitting;
                static /*0x60*/ string RootFolderName;
                static /*0x68*/ Best.HTTP.Caching.HTTPCache _httpCache;
                static /*0x70*/ bool IsSetupCalled;
                static /*0x78*/ long _lastNetworkBytesSent;
                static /*0x80*/ long _lastNetworkBytesReceived;
                static /*0x88*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferPoolStats bufferPoolStats;

                static /*0x2a55070*/ HTTPManager();
                static /*0x2a55458*/ Best.HTTP.Hosts.Settings.HostSettingsManager get_PerHostSettings();
                static /*0x2a554b0*/ System.DateTime get_CurrentFrameDateTime();
                static /*0x2a55508*/ void set_CurrentFrameDateTime(System.DateTime value);
                static /*0x2a55564*/ System.Func<string> get_RootSaveFolderProvider();
                static /*0x2a553cc*/ void set_ProxyDetector(Best.HTTP.Proxies.Autodetect.ProxyDetector value);
                static /*0x2a555bc*/ Best.HTTP.Proxies.Proxy get_Proxy();
                static /*0x2a55614*/ void set_Proxy(Best.HTTP.Proxies.Proxy value);
                static /*0x2a51eb8*/ Best.HTTP.Shared.Extensions.HeartbeatManager get_Heartbeats();
                static /*0x2a3d68c*/ Best.HTTP.Shared.Logger.ILogger get_Logger();
                static /*0x2a55674*/ void set_Logger(Best.HTTP.Shared.Logger.ILogger value);
                static /*0x2a556d4*/ bool get_IsQuitting();
                static /*0x2a55734*/ void set_IsQuitting(bool value);
                static /*0x2a55798*/ Best.HTTP.Caching.HTTPCache get_LocalCache();
                static /*0x2a557f0*/ void set_LocalCache(Best.HTTP.Caching.HTTPCache value);
                static /*0x2a5589c*/ void Setup();
                static /*0x2a56178*/ Best.HTTP.HTTPRequest SendRequest(Best.HTTP.HTTPRequest request);
                static /*0x2a468dc*/ string GetRootSaveFolder();
                static /*0x2a5636c*/ void OnUpdate();
                static /*0x2a56ca0*/ void OnQuit();
                static /*0x2a56e4c*/ void AbortAll();

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Shared.HTTPManager.<> <>9;
                    static /*0x8*/ System.Action<Best.HTTP.HTTPRequest> <>9__43_0;

                    static /*0x2a56fdc*/ <>c();
                    /*0x2a57044*/ <>c();
                    /*0x2a5704c*/ void <SendRequest>b__43_0(Best.HTTP.HTTPRequest request);
                }
            }

            enum ThreadingMode
            {
                UnityUpdate = 0,
                Threaded = 1,
                None = 2,
            }

            class HTTPUpdateDelegator : UnityEngine.MonoBehaviour
            {
                static /*0x0*/ Best.HTTP.Shared.HTTPUpdateDelegator instance;
                static /*0x8*/ bool <IsCreated>k__BackingField;
                static /*0x9*/ bool <IsThreadRunning>k__BackingField;
                static /*0xc*/ int <ThreadFrequencyInMS>k__BackingField;
                static /*0x10*/ System.Func<bool> OnBeforeApplicationQuit;
                static /*0x18*/ System.Action<bool> OnApplicationForegroundStateChanged;
                static /*0x20*/ bool isSetupCalled;
                /*0x20*/ Best.HTTP.Shared.ThreadingMode _currentThreadingMode;
                /*0x24*/ int isHTTPManagerOnUpdateRunning;
                /*0x28*/ System.Threading.AutoResetEvent pingEvent;
                /*0x30*/ int updateThreadCount;
                /*0x34*/ int mainThreadId;

                static /*0x2a576c4*/ HTTPUpdateDelegator();
                static /*0x2a5134c*/ Best.HTTP.Shared.HTTPUpdateDelegator get_Instance();
                static /*0x2a571f0*/ bool get_IsCreated();
                static /*0x2a57248*/ void set_IsCreated(bool value);
                static /*0x2a572a8*/ bool get_IsThreadRunning();
                static /*0x2a57300*/ void set_IsThreadRunning(bool value);
                static /*0x2a57608*/ int get_ThreadFrequencyInMS();
                static /*0x2a57660*/ void set_ThreadFrequencyInMS(int value);
                static /*0x2a55c1c*/ Best.HTTP.Shared.HTTPUpdateDelegator CheckInstance();
                static /*0x2a580cc*/ bool UnityApplication_WantsToQuit();
                /*0x2a586e8*/ HTTPUpdateDelegator();
                /*0x2a57360*/ Best.HTTP.Shared.ThreadingMode get_CurrentThreadingMode();
                /*0x2a57368*/ void set_CurrentThreadingMode(Best.HTTP.Shared.ThreadingMode value);
                /*0x2a576bc*/ int get_MainThreadId();
                /*0x2a57718*/ void Setup();
                /*0x2a51398*/ bool IsMainThread();
                /*0x2a5736c*/ void SetThreadingMode(Best.HTTP.Shared.ThreadingMode mode);
                /*0x2a57a60*/ void SwapThreadingMode();
                /*0x2a57a48*/ void PingUpdateThread();
                /*0x2a57a7c*/ void ThreadFunc();
                /*0x2a57f18*/ void Update();
                /*0x2a57e2c*/ void CallOnUpdate();
                /*0x2a57f98*/ void OnDisable();
                /*0x2a5852c*/ void OnApplicationPause(bool isPaused);
            }

            namespace TLS
            {
                class AbstractTls13Client : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsClient, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication
                {
                    static /*0x0*/ int[] DefaultCipherSuites;
                    /*0x50*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> _sniServerNames;
                    /*0x58*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> _protocols;
                    /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;

                    static /*0x2a59ffc*/ AbstractTls13Client();
                    /*0x2a58768*/ AbstractTls13Client(System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> sniServerNames, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2a58758*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x2a58760*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x2a587cc*/ string GetNegotiatedApplicationProtocol();
                    /*0x2a58890*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetSupportedVersions();
                    /*0x2a588f8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> GetProtocolNames();
                    /*0x2a58900*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetSniServerNames();
                    /*0x2a58908*/ int[] GetSupportedCipherSuites();
                    /*0x2a58aa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                    /*0x2a58bc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials GetClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                    /*0x2a58cdc*/ void NotifyServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate serverCertificate);
                    /*0x2a58df0*/ void NotifyAlertReceived(short alertLevel, short alertDescription);
                    /*0x2a58f90*/ void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                    /*0x2a59290*/ void NotifyHandshakeBeginning();
                    /*0x2a593a4*/ void NotifyHandshakeComplete();
                    /*0x2a594b8*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                    /*0x2a595e8*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                    /*0x2a59754*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                    /*0x2a598cc*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                    /*0x2a59b10*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion serverVersion);
                    /*0x2a59c6c*/ void NotifySessionID(byte[] sessionID);
                    /*0x2a59d9c*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                    /*0x2a59ecc*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                }

                class DefaultTls13Client : Best.HTTP.Shared.TLS.AbstractTls13Client
                {
                    /*0x2a5a09c*/ DefaultTls13Client(System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> sniServerNames, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                namespace Crypto
                {
                    class FastTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto
                    {
                        /*0x2a5a178*/ FastTlsCrypto(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom entropySource);
                        /*0x2a5a180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                        /*0x2a5a9bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAesEngine();
                        /*0x2a5aa10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateCcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                        /*0x2a5aa6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateGcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                        /*0x2a5aac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher blockCipher);
                    }

                    class FastCbcBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                    {
                        /*0x10*/ byte[] IV;
                        /*0x18*/ byte[] cbcV;
                        /*0x20*/ byte[] cbcNextV;
                        /*0x28*/ int blockSize;
                        /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                        /*0x38*/ bool encrypting;

                        /*0x2a5ab20*/ FastCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                        /*0x2a5ac4c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                        /*0x2a5ae7c*/ int GetBlockSize();
                        /*0x2a5af20*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                        /*0x2a5b524*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        /*0x2a5ae34*/ void Reset();
                        /*0x2a5b294*/ int EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        /*0x2a5b000*/ int DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                    }

                    namespace Impl
                    {
                        class BurstTables8kGcmMultiplier
                        {
                            /*0x10*/ byte[] H;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement[][] T;

                            static /*0x2a5b534*/ void MultiplyHImpl(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            static /*0x2a5b8dc*/ void MultiplyHImpl$BurstManaged(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            /*0x2a5b8d4*/ BurstTables8kGcmMultiplier();
                            /*0x2a5b53c*/ void Init(byte[] H);
                            /*0x2a5b844*/ void MultiplyH(byte[] x);

                            class MultiplyHImpl_0000072C$PostfixBurstDelegate : System.MulticastDelegate
                            {
                                /*0x2aad3c0*/ MultiplyHImpl_0000072C$PostfixBurstDelegate(object , nint );
                                /*0x2aad474*/ void Invoke(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            }

                            class MultiplyHImpl_0000072C$BurstDirectCall
                            {
                                static /*0x0*/ nint Pointer;

                                static /*0x2aad488*/ void GetFunctionPointerDiscard(ref nint );
                                static /*0x2aad578*/ nint GetFunctionPointer();
                                static /*0x2aad590*/ void Invoke(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            }
                        }

                        class FastAesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                        {
                            static /*0x0*/ byte[] S;
                            static /*0x8*/ byte[] Si;
                            static /*0x10*/ byte[] rcon;
                            static /*0x18*/ uint[] T0;
                            static /*0x20*/ uint[] Tinv0;
                            /*0x10*/ uint[][] W;
                            /*0x18*/ int ROUNDS;
                            /*0x20*/ uint[][] WorkingKey;
                            /*0x28*/ bool forEncryption;
                            /*0x30*/ byte[] s;

                            static /*0x2ab1f7c*/ FastAesEngine();
                            static /*0x2aad648*/ uint Shift(uint r, int shift);
                            static /*0x2aad650*/ uint FFmulX(uint x);
                            static /*0x2aad670*/ uint FFmulX2(uint x);
                            static /*0x2aad68c*/ uint Inv_Mcol(uint x);
                            static /*0x2aad724*/ uint SubWord(uint x);
                            /*0x2aaec98*/ FastAesEngine();
                            /*0x2aad7e8*/ uint[][] GenerateWorkingKey(byte[] key, bool forEncryption);
                            /*0x2aaeca0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x2aaee20*/ int GetBlockSize();
                            /*0x2aaee28*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                            /*0x2ab0a44*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2aaefac*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                            /*0x2aafd04*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                        }

                        class FastCcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                        {
                            static /*0x0*/ int BlockSize;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                            /*0x18*/ byte[] macBlock;
                            /*0x20*/ bool forEncryption;
                            /*0x28*/ byte[] nonce;
                            /*0x30*/ byte[] initialAssociatedText;
                            /*0x38*/ int macSize;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters keyParam;
                            /*0x48*/ System.IO.MemoryStream associatedText;
                            /*0x50*/ System.IO.MemoryStream data;

                            static /*0x2ab44e0*/ FastCcmBlockCipher();
                            /*0x2ab2150*/ FastCcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                            /*0x2ab2398*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x2ab261c*/ int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff);
                            /*0x2ab26bc*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2ab26e8*/ int DoFinal(byte[] outBytes, int outOff);
                            /*0x2ab2768*/ int DoFinal(System.Span<byte> output);
                            /*0x2ab28d8*/ void Reset();
                            /*0x2ab2920*/ int GetOutputSize(int len);
                            /*0x2ab29c0*/ int ProcessPacket(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2ab3b70*/ int CalculateMac(System.ReadOnlySpan<byte> data, System.Span<byte> macBlock);
                            /*0x2ab25b0*/ int GetMacSize(bool forEncryption, int requestedMacBits);
                            /*0x2ab4454*/ int GetAssociatedTextLength();
                            /*0x2ab443c*/ bool HasAssociatedText();
                        }

                        class FastGcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                        {
                            /*0x10*/ byte[] ctrBlock;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                            /*0x20*/ Best.HTTP.Shared.TLS.Crypto.Impl.BurstTables8kGcmMultiplier multiplier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator exp;
                            /*0x30*/ bool forEncryption;
                            /*0x31*/ bool initialised;
                            /*0x34*/ int macSize;
                            /*0x38*/ byte[] lastKey;
                            /*0x40*/ byte[] nonce;
                            /*0x48*/ byte[] initialAssociatedText;
                            /*0x50*/ byte[] H;
                            /*0x58*/ byte[] J0;
                            /*0x60*/ byte[] bufBlock;
                            /*0x68*/ byte[] macBlock;
                            /*0x70*/ byte[] S;
                            /*0x78*/ byte[] S_at;
                            /*0x80*/ byte[] S_atPre;
                            /*0x88*/ byte[] counter;
                            /*0x90*/ uint counter32;
                            /*0x94*/ uint blocksRemaining;
                            /*0x98*/ int bufOff;
                            /*0xa0*/ ulong totalLength;
                            /*0xa8*/ byte[] atBlock;
                            /*0xb0*/ int atBlockPos;
                            /*0xb8*/ ulong atLength;
                            /*0xc0*/ ulong atLengthPre;

                            /*0x2ab452c*/ FastGcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c);
                            /*0x2ab4530*/ FastGcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier m);
                            /*0x2ab46f0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x2ab5050*/ int GetOutputSize(int len);
                            /*0x2ab4f80*/ void ProcessAadBytes(byte[] inBytes, int inOff, int len);
                            /*0x2ab5078*/ void ProcessAadBytes(System.ReadOnlySpan<byte> input);
                            /*0x2ab540c*/ void InitCipher();
                            /*0x2ab553c*/ int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff);
                            /*0x2ab56b0*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2ab763c*/ int DoFinal(byte[] output, int outOff);
                            /*0x2ab76b0*/ int DoFinal(System.Span<byte> output);
                            /*0x2ab85b8*/ void Reset();
                            /*0x2ab8418*/ void Reset(bool clearMac);
                            /*0x2ab739c*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2ab6944*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2ab6ce0*/ void EncryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x2ab85c0*/ void GetNextCtrBlock(System.Span<byte> block);
                            /*0x2ab81d0*/ void ProcessPartial(System.Span<byte> partialBlock, System.Span<byte> output);
                            /*0x2ab4e38*/ void gHASH(byte[] Y, byte[] b, int len);
                            /*0x2ab871c*/ void gHASHBlock(byte[] Y, System.ReadOnlySpan<byte> b);
                            /*0x2ab881c*/ void gHASHPartial(byte[] Y, System.ReadOnlySpan<byte> b);
                            /*0x2ab892c*/ void gHASHPartial(byte[] Y, byte[] b, int off, int len);
                            /*0x2ab5394*/ void CheckStatus();
                        }

                        class FastGcmBlockCipherHelper
                        {
                            static /*0x2ab89ec*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, System.Span<byte> ctrBlock, System.Span<byte> S, int BlockSize);
                            static /*0x2ab89e8*/ void DecryptBlock_Impl(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            static /*0x2ab8bd4*/ void DecryptBlock_Impl$BurstManaged(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);

                            class DecryptBlock_Impl_0000079E$PostfixBurstDelegate : System.MulticastDelegate
                            {
                                /*0x2ab8d74*/ DecryptBlock_Impl_0000079E$PostfixBurstDelegate(object , nint );
                                /*0x2ab8e28*/ void Invoke(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            }

                            class DecryptBlock_Impl_0000079E$BurstDirectCall
                            {
                                static /*0x0*/ nint Pointer;

                                static /*0x2ab8e40*/ void GetFunctionPointerDiscard(ref nint );
                                static /*0x2ab8f30*/ nint GetFunctionPointer();
                                static /*0x2ab8ad4*/ void Invoke(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            }
                        }

                        class FastTlsAeadCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                            /*0x18*/ int m_keySize;
                            /*0x1c*/ int m_macSize;
                            /*0x20*/ int m_fixed_iv_length;
                            /*0x24*/ int m_record_iv_length;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_decryptCipher;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_encryptCipher;
                            /*0x38*/ byte[] m_decryptNonce;
                            /*0x40*/ byte[] m_encryptNonce;
                            /*0x48*/ bool m_isTlsV13;
                            /*0x4c*/ int m_nonceMode;

                            static /*0x2ab9dd0*/ int GetNonceMode(bool isTLSv13, int aeadType);
                            /*0x2ab8f48*/ FastTlsAeadCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl decryptCipher, int keySize, int macSize, int aeadType);
                            /*0x2ab9eb8*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                            /*0x2ab9ed4*/ int GetPlaintextLimit(int ciphertextLimit);
                            /*0x2ab9ef0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                            /*0x2aba610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int ciphertextOffset, int ciphertextLength);
                            /*0x2abab34*/ void RekeyDecoder();
                            /*0x2ababa0*/ void RekeyEncoder();
                            /*0x2abac0c*/ bool get_UsesOpaqueRecordType();
                            /*0x2aba4b8*/ byte[] GetAdditionalData(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int ciphertextLength, int plaintextLength);
                            /*0x2ab9e38*/ void RekeyCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, bool serverSecret);
                            /*0x2abac14*/ void Setup13Cipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm);
                        }

                        class FastTlsAeadCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                        {
                            /*0x10*/ bool m_isEncrypting;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher m_cipher;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                            /*0x2abaf34*/ FastTlsAeadCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher cipher, bool isEncrypting);
                            /*0x2abaf70*/ void SetKey(byte[] key, int keyOff, int keyLen);
                            /*0x2abaff8*/ void SetKey(System.ReadOnlySpan<byte> key);
                            /*0x2abb070*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                            /*0x2abb174*/ int GetOutputSize(int inputLength);
                            /*0x2abb220*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                            /*0x2abb520*/ void Reset();
                        }

                        class FastTlsBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                            /*0x18*/ byte[] m_randomData;
                            /*0x20*/ bool m_encryptThenMac;
                            /*0x21*/ bool m_useExplicitIV;
                            /*0x22*/ bool m_acceptExtraPadding;
                            /*0x23*/ bool m_useExtraPadding;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_decryptCipher;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_encryptCipher;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_readMac;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_writeMac;

                            /*0x2abb5c4*/ FastTlsBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl decryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac, int cipherKeySize);
                            /*0x2abca68*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                            /*0x2abcbb4*/ int GetPlaintextLimit(int ciphertextLimit);
                            /*0x2abcd1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                            /*0x2abd334*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                            /*0x2abd834*/ void RekeyDecoder();
                            /*0x2abd870*/ void RekeyEncoder();
                            /*0x2abd8ac*/ bool get_UsesOpaqueRecordType();
                            /*0x2abd8b4*/ int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize);
                            /*0x2abda60*/ int ChooseExtraPadBlocks(int max);
                            /*0x2abdc38*/ int GetCiphertextLength(int blockSize, int macSize, int maxPadding, int plaintextLength);
                        }

                        class FastTlsBlockCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl
                        {
                            /*0x10*/ bool m_isEncrypting;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher m_cipher;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                            /*0x2abdc78*/ FastTlsBlockCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, bool isEncrypting);
                            /*0x2abdcb4*/ void SetKey(System.ReadOnlySpan<byte> key);
                            /*0x2abdd2c*/ void Init(System.ReadOnlySpan<byte> iv);
                            /*0x2abde28*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                            /*0x2abdf98*/ int GetBlockSize();
                        }
                    }
                }
            }

            namespace Streams
            {
                class BufferPoolMemoryStream : System.IO.Stream
                {
                    /*0x28*/ bool canWrite;
                    /*0x29*/ bool allowGetBuffer;
                    /*0x2c*/ int capacity;
                    /*0x30*/ int length;
                    /*0x38*/ byte[] internalBuffer;
                    /*0x40*/ int initialIndex;
                    /*0x44*/ bool expandable;
                    /*0x45*/ bool streamClosed;
                    /*0x48*/ int position;
                    /*0x4c*/ int dirty_bytes;
                    /*0x50*/ bool releaseInternalBuffer;

                    /*0x2abe03c*/ BufferPoolMemoryStream();
                    /*0x2abe044*/ BufferPoolMemoryStream(int capacity);
                    /*0x2abe188*/ void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible, bool releaseBuffer, bool canExpand);
                    /*0x2abe2d4*/ void CheckIfClosedThrowDisposed();
                    /*0x2abe32c*/ bool get_CanRead();
                    /*0x2abe33c*/ bool get_CanSeek();
                    /*0x2abe34c*/ bool get_CanWrite();
                    /*0x2abe36c*/ void set_Capacity(int value);
                    /*0x2abe578*/ long get_Length();
                    /*0x2abe59c*/ long get_Position();
                    /*0x2abe5c0*/ void set_Position(long value);
                    /*0x2abe684*/ void Dispose(bool disposing);
                    /*0x2abe70c*/ void Flush();
                    /*0x2abe710*/ byte[] GetBuffer();
                    /*0x2abe758*/ int Read(byte[] buffer, int offset, int count);
                    /*0x2abe8b4*/ int ReadByte();
                    /*0x2abe90c*/ long Seek(long offset, System.IO.SeekOrigin loc);
                    /*0x2abea84*/ int CalculateNewCapacity(int minimum);
                    /*0x2abeac8*/ void Expand(int newSize);
                    /*0x2abeb1c*/ void SetLength(long value);
                    /*0x2abec40*/ byte[] ToArray();
                    /*0x2abec4c*/ byte[] ToArray(bool canBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2abed4c*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment ToBufferSegment();
                    /*0x2abee28*/ void Write(byte[] buffer, int offset, int count);
                    /*0x2abefb8*/ void WriteByte(byte value);
                }

                class BufferSegmentStream : System.IO.Stream
                {
                    /*0x28*/ long _length;
                    /*0x30*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> bufferList;
                    /*0x38*/ byte[] _tempByteArray;

                    /*0x2abf550*/ BufferSegmentStream();
                    /*0x2abf078*/ bool get_CanRead();
                    /*0x2abf080*/ bool get_CanSeek();
                    /*0x2abf088*/ bool get_CanWrite();
                    /*0x2abf090*/ long get_Length();
                    /*0x2abf098*/ long get_Position();
                    /*0x2abf0a0*/ void set_Position(long value);
                    /*0x2abf0a4*/ int ReadByte();
                    /*0x2abf0f8*/ int Read(byte[] buffer, int offset, int count);
                    /*0x2abf318*/ void Write(byte[] buffer, int offset, int count);
                    /*0x2abf358*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                    /*0x2abf3dc*/ void Reset();
                    /*0x2abf4b4*/ void Dispose(bool disposing);
                    /*0x2abf4dc*/ void Flush();
                    /*0x2abf4e0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x2abf518*/ void SetLength(long value);
                }

                class PeekableContentProviderStream : Best.HTTP.Shared.Streams.PeekableStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IPeekableContentProvider
                {
                    /*0x40*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer <Consumer>k__BackingField;

                    /*0x2abf894*/ PeekableContentProviderStream();
                    /*0x2abf634*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer get_Consumer();
                    /*0x2abf63c*/ void set_Consumer(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer value);
                    /*0x2abf644*/ void SetTwoWayBinding(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                    /*0x2abf708*/ void Unbind();
                    /*0x2abf7b8*/ void UnbindIf(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                }

                class PeekableIncomingSegmentStream : Best.HTTP.Shared.Streams.PeekableStream
                {
                    /*0x40*/ int peek_listIdx;
                    /*0x44*/ int peek_pos;

                    /*0x2abfa24*/ PeekableIncomingSegmentStream();
                    /*0x2abf89c*/ void BeginPeek();
                    /*0x2abf92c*/ int PeekByte();
                }

                class PeekableStream : Best.HTTP.Shared.Streams.BufferSegmentStream
                {
                    /*0x2abf898*/ PeekableStream();
                    /*0x1f309e4*/ void BeginPeek();
                    /*0x1f2ffc8*/ int PeekByte();
                }

                class StreamList : System.IO.Stream
                {
                    /*0x28*/ System.IO.Stream[] Streams;
                    /*0x30*/ int CurrentIdx;

                    /*0x2abfa28*/ StreamList(System.IO.Stream[] streams);
                    /*0x2abfaa4*/ void AppendStream(System.IO.Stream stream);
                    /*0x2abfb54*/ bool get_CanRead();
                    /*0x2abfba8*/ bool get_CanSeek();
                    /*0x2abfbb0*/ bool get_CanWrite();
                    /*0x2abfc04*/ void Flush();
                    /*0x2abfc84*/ long get_Length();
                    /*0x2abfd08*/ int Read(byte[] buffer, int offset, int count);
                    /*0x2abff88*/ void Write(byte[] buffer, int offset, int count);
                    /*0x2abffdc*/ void Dispose(bool disposing);
                    /*0x2ac016c*/ long get_Position();
                    /*0x2ac01b8*/ void set_Position(long value);
                    /*0x2ac0204*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x2ac025c*/ void SetLength(long value);
                }

                class WriteOnlyBufferedStream : System.IO.Stream
                {
                    /*0x28*/ int _position;
                    /*0x30*/ byte[] buffer;
                    /*0x38*/ int _bufferSize;
                    /*0x40*/ System.IO.Stream stream;
                    /*0x48*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                    /*0x2ac0e48*/ WriteOnlyBufferedStream(System.IO.Stream stream, int bufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ac0dc4*/ bool get_CanRead();
                    /*0x2ac0dcc*/ bool get_CanSeek();
                    /*0x2ac0dd4*/ bool get_CanWrite();
                    /*0x2ac0ddc*/ long get_Length();
                    /*0x2ac0df4*/ long get_Position();
                    /*0x2ac0dfc*/ void set_Position(long value);
                    /*0x2ac11ec*/ void Flush();
                    /*0x2ac13cc*/ void Write(byte[] bufferFrom, int offset, int count);
                    /*0x2ac14c8*/ int Read(byte[] buffer, int offset, int count);
                    /*0x2ac14d0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x2ac14d8*/ void SetLength(long value);
                    /*0x2ac14dc*/ void Dispose(bool disposing);
                }
            }

            namespace PlatformSupport
            {
                namespace Threading
                {
                    struct ReadLock : System.IDisposable
                    {
                        /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                        /*0x18*/ bool locked;

                        /*0x2ac15b8*/ ReadLock(System.Threading.ReaderWriterLockSlim rwLock);
                        /*0x2ac1604*/ void Dispose();
                    }

                    struct WriteLock : System.IDisposable
                    {
                        /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                        /*0x18*/ bool locked;

                        /*0x2ac1628*/ WriteLock(System.Threading.ReaderWriterLockSlim rwLock);
                        /*0x2ac1684*/ void Dispose();
                    }

                    class ThreadedRunner
                    {
                        static /*0x0*/ int _shortLivingThreads;
                        static /*0x4*/ int _LongLivingThreads;

                        static /*0x2ac16a8*/ void SetThreadName(string name);
                        static /*0x1ffc854*/ void RunShortLiving<T>(System.Action<T> job, T param);
                        static /*0x1ffc854*/ void RunShortLiving<T1, T2, T3, T4>(System.Action<T1, T2, T3, T4> job, T1 param1, T2 param2, T3 param3, T4 param4);
                        static /*0x2ac1824*/ void RunShortLiving(System.Action job);
                        static /*0x2ac18ec*/ void RunLongLiving(System.Action job);

                        struct IncDecShortLiving : System.IDisposable
                        {
                            /*0x2ac19f4*/ IncDecShortLiving(bool dummy);
                            /*0x2ac1a3c*/ void Dispose();
                        }

                        struct IncDecLongLiving : System.IDisposable
                        {
                            /*0x2ac1a84*/ IncDecLongLiving(bool dummy);
                            /*0x2ac1ad0*/ void Dispose();
                        }

                        class <>c__DisplayClass10_0<T1, T2, T3, T4>
                        {
                            /*0x0*/ System.Action<T1, T2, T3, T4> job;
                            /*0x0*/ T1 param1;
                            /*0x0*/ T2 param2;
                            /*0x0*/ T3 param3;
                            /*0x0*/ T4 param4;

                            /*0x1f309e4*/ <>c__DisplayClass10_0();
                            /*0x1f30ebc*/ void <RunShortLiving>b__0(object _);
                        }

                        class <>c__DisplayClass11_0
                        {
                            /*0x10*/ System.Action job;

                            /*0x2ac18e4*/ <>c__DisplayClass11_0();
                            /*0x2ac1b1c*/ void <RunShortLiving>b__0(object param);
                        }

                        class <>c__DisplayClass12_0
                        {
                            /*0x10*/ System.Action job;

                            /*0x2ac19ec*/ <>c__DisplayClass12_0();
                            /*0x2ac1bb0*/ void <RunLongLiving>b__0(object param);
                        }

                        class <>c__DisplayClass7_0<T>
                        {
                            /*0x0*/ System.Action<T> job;
                            /*0x0*/ T param;

                            /*0x1f309e4*/ <>c__DisplayClass7_0();
                            /*0x1f30ebc*/ void <RunShortLiving>b__0(object _);
                        }
                    }
                }

                namespace Text
                {
                    class StringBuilderPool
                    {
                        static /*0x0*/ bool _isEnabled;
                        static /*0x8*/ System.TimeSpan RemoveOlderThan;
                        static /*0x10*/ System.TimeSpan RunMaintenanceEvery;
                        static /*0x18*/ System.DateTime lastMaintenance;
                        static /*0x20*/ System.Threading.ReaderWriterLockSlim rwLock;
                        static /*0x28*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Text.StringBuilderPool.BuilderShelf> pooledBuilders;

                        static /*0x2ac2408*/ StringBuilderPool();
                        static /*0x2ac1c44*/ System.Text.StringBuilder Get(int lengthHint);
                        static /*0x2ac1f24*/ string ReleaseAndGrab(System.Text.StringBuilder builder);
                        static /*0x2ac212c*/ void Maintain();

                        struct BuilderShelf
                        {
                            /*0x10*/ System.Text.StringBuilder builder;
                            /*0x18*/ System.DateTime released;

                            /*0x2ac20b4*/ BuilderShelf(System.Text.StringBuilder sb);
                        }
                    }
                }

                namespace Network
                {
                    namespace Tcp
                    {
                        interface IPeekableContentProvider
                        {
                            /*0x1f30ebc*/ void SetTwoWayBinding(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                        }

                        interface IContentConsumer
                        {
                            /*0x1f30ebc*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                            /*0x1f309e4*/ void UnsetBinding();
                            /*0x1f309e4*/ void OnContent();
                            /*0x1f309e4*/ void OnConnectionClosed();
                            /*0x1f30ebc*/ void OnError(System.Exception ex);
                        }

                        enum NegotiationSteps
                        {
                            Start = 0,
                            DNSQuery = 1,
                            TCPRace = 2,
                            Proxy = 3,
                            TLSNegotiation = 4,
                            Finish = 5,
                        }

                        interface INegotiationPeer
                        {
                            /*0x1f302cc*/ System.Collections.Generic.List<string> GetSupportedProtocolNames(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator);
                            bool MustStopAdvancingToNextStep(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps finishedStep, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps nextStep, System.Exception error);
                            void EvaluateProxyNegotiationFailure(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error, bool resendForAuthentication);
                            /*0x1f30ff0*/ void OnNegotiationFailed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error);
                            /*0x1f31134*/ void OnNegotiationFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string negotiatedProtocol);
                        }

                        class NegotiationParameters
                        {
                            /*0x10*/ Best.HTTP.Proxies.Proxy proxy;
                            /*0x18*/ bool createProxyTunel;
                            /*0x20*/ System.Uri targetUri;
                            /*0x28*/ bool negotiateTLS;
                            /*0x30*/ System.Threading.CancellationToken token;
                            /*0x38*/ Best.HTTP.Hosts.Settings.HostSettings hostSettings;
                            /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext context;

                            /*0x2ac2580*/ NegotiationParameters();
                        }

                        class Negotiator
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer _peer;
                            /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters _parameters;
                            /*0x20*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                            /*0x28*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream _stream;

                            /*0x2ac25a0*/ Negotiator(Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer peer, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters parameters);
                            /*0x2ac2588*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters get_Parameters();
                            /*0x2ac2590*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer get_Streamer();
                            /*0x2ac2598*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_Stream();
                            /*0x2ac25e4*/ void Start();
                            /*0x2ac39b8*/ void OnCancellationRequested();
                            /*0x2ac3c28*/ void OnDNSCacheQueryFinished(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters dnsParameters, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryResult result);
                            /*0x2ac4824*/ void OnTCPRaceFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters parameters, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceResult raceResult);
                            /*0x2ac6070*/ void OnProxyNegotiated(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                            /*0x2ac6328*/ void OnProxyNegotiationFailed(Best.HTTP.Proxies.ProxyConnectParameters parameters, System.Exception error, bool resendForAuthentication);
                            /*0x2ac53ec*/ void NegotiateTLS();
                            /*0x2ac6bac*/ void OnFramework_TLSNegotiated(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string alpn, System.Exception error);
                            /*0x2ac6eb8*/ void OnBC_TLSNegotiated(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingBCTLSStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.Shared.TLS.AbstractTls13Client tlsClient, System.Exception error);
                            /*0x2ac4e98*/ void SetupSocket(System.Net.Sockets.Socket socket, Best.HTTP.Hosts.Settings.HostSettings hostSettings);
                        }

                        class TCPRingmasterSettings
                        {
                            /*0x10*/ int MaxSimultaneousRacers;
                            /*0x14*/ bool ShuffleAddresses;
                            /*0x18*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters> CustomAddressShuffleAlgorithm;
                            /*0x20*/ System.TimeSpan CancellationCheckingGranularity;

                            /*0x2ac73bc*/ TCPRingmasterSettings();
                            /*0x2ac71dc*/ string ToString();
                        }

                        class TCPRaceResult
                        {
                            /*0x10*/ System.Net.Sockets.Socket WinningSocket;
                            /*0x18*/ System.Exception Error;

                            /*0x2ac743c*/ TCPRaceResult(System.Net.Sockets.Socket socket, System.Exception ex);
                            /*0x2ac7480*/ string ToString();
                        }

                        class Race
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters Parameters;
                            /*0x18*/ int NextAddressIndex;
                            /*0x1c*/ int RunningLanes;

                            /*0x2ac769c*/ Race();
                            /*0x2ac74ec*/ string ToString();
                        }

                        class RacingLane
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Race Race;
                            /*0x18*/ int AddressIndex;
                            /*0x1c*/ int LaneIndex;
                            /*0x20*/ System.Net.Sockets.Socket Socket;

                            /*0x2ac788c*/ RacingLane();
                            /*0x2ac76a4*/ string ToString();
                        }

                        class TCPRaceParameters
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] Addresses;
                            /*0x18*/ string Hostname;
                            /*0x20*/ int Port;
                            /*0x28*/ System.Threading.CancellationToken Token;
                            /*0x30*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceResult> AnnounceWinnerCallback;
                            /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext Context;

                            /*0x2ac3fd8*/ TCPRaceParameters();
                            /*0x2ac7894*/ string ToString();
                        }

                        class TCPRingmaster
                        {
                            static /*0x2ac3fe0*/ void StartCompetion(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters parameters);
                            static /*0x2ac7ca0*/ void OnLaneFinished(System.IAsyncResult ar);
                            static /*0x2ac9270*/ void OnSocketDisconnect(System.IAsyncResult ar);
                            static /*0x2ac7b88*/ void ShuffleAddresses(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] addresses);
                            static /*0x2ac9644*/ bool CheckForCanceled(System.DateTime now, object context);
                        }

                        interface ITCPStreamerContentConsumer
                        {
                            /*0x1f30d60*/ void set_MaxBufferSize(long value);
                            /*0x1f30a40*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                            /*0x1f30ebc*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                            /*0x1f30ebc*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                        }

                        class ReadState
                        {
                            /*0x10*/ int minReceiveBufferSize;
                            /*0x18*/ byte[] receiveBuffer;
                            /*0x20*/ int isReceiving;
                            /*0x28*/ long totalReceived;
                            /*0x30*/ long bufferedLength;
                            /*0x38*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> bufferedSegments;

                            /*0x2ac9a54*/ ReadState();
                        }

                        class WriteState
                        {
                            /*0x10*/ byte[] _writeBuffer;
                            /*0x18*/ int _writeInProgress;
                            /*0x20*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segmentsToWrite;
                            /*0x28*/ long bufferedLength;
                            /*0x30*/ System.Threading.AutoResetEvent blockEvent;

                            /*0x2ac9adc*/ WriteState();
                        }

                        class TCPStreamer : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer _contentConsumer;
                            /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ReadState readState;
                            /*0x20*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.WriteState writeState;
                            /*0x28*/ System.Net.Sockets.Socket _socket;
                            /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext _loggingContext;
                            /*0x38*/ bool _disposed;
                            /*0x3c*/ int _closed;
                            /*0x40*/ int _isDisconnected;
                            /*0x44*/ bool _closeInitiatedByServer;
                            /*0x48*/ uint MaxBufferedReadAmount;
                            /*0x4c*/ uint MaxBufferedWriteAmount;

                            /*0x2ac507c*/ TCPStreamer(System.Net.Sockets.Socket socket, uint maxReadBufferSize, uint maxWriteBufferSize, Best.HTTP.Shared.Logger.LoggingContext _parentLoggingContext);
                            /*0x2ac9ba0*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer get_ContentConsumer();
                            /*0x2ac9ba8*/ void set_ContentConsumer(Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer value);
                            /*0x2ac9bb0*/ System.Net.Sockets.Socket get_Socket();
                            /*0x2ac9bb8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                            /*0x2ac9bc0*/ bool get_IsConnectionClosed();
                            /*0x2ac9bec*/ long get_Length();
                            /*0x2aca1e0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment DequeueReceived();
                            /*0x2ac9dfc*/ void BeginReceive();
                            /*0x2aca2f8*/ void OnReceived(System.IAsyncResult asyncResult);
                            /*0x2aca8bc*/ void EnqueueToSend(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                            /*0x2acabb0*/ bool SendFromQueue();
                            /*0x2acacec*/ void OnWroteToNetwork(System.IAsyncResult ar);
                            /*0x2ac3b74*/ void Dispose();
                            /*0x2acb578*/ void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                            /*0x2acb244*/ void Close();
                            /*0x2acb628*/ void OnDisconnected(System.IAsyncResult ar);
                        }

                        namespace Streams
                        {
                            class FrameworkTLSByteForwarder : System.IO.Stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x28*/ long _length;
                                /*0x30*/ long _maxBufferSize;
                                /*0x38*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x48*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer _contentConsumer;
                                /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segmentsToReadFrom;
                                /*0x58*/ System.Threading.AutoResetEvent _are;
                                /*0x60*/ System.Threading.ReaderWriterLockSlim _rws;
                                /*0x68*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment _currentReadSegment;
                                /*0x78*/ int _pullContentInProgress;

                                /*0x2acbc74*/ FrameworkTLSByteForwarder(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer contentConsumer, long maxBufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x2acbbc0*/ bool get_CanRead();
                                /*0x2acbbc8*/ bool get_CanSeek();
                                /*0x2acbbd0*/ bool get_CanWrite();
                                /*0x2acbbd8*/ long get_Length();
                                /*0x2acbbe0*/ long get_Position();
                                /*0x2acbc18*/ void set_Position(long value);
                                /*0x2acbc50*/ long get_MaxBufferSize();
                                /*0x2acbc68*/ void set_MaxBufferSize(long value);
                                /*0x2acbe58*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                                /*0x2acbf8c*/ void PullContentFromStreamer();
                                /*0x2acc298*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2acc4f0*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2acc5a4*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2acceb0*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2acd174*/ void Flush();
                                /*0x2acd178*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x2acd1b0*/ void SetLength(long value);
                                /*0x2acd1e8*/ void Dispose(bool disposing);
                            }

                            class FrameworkTLSStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                static /*0x0*/ bool loggedWarning;
                                /*0x48*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer, string, System.Exception> OnNegotiated;
                                /*0x50*/ long _maxBufferSize;
                                /*0x58*/ string _targetHost;
                                /*0x60*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x68*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSByteForwarder _forwarder;
                                /*0x70*/ System.Net.Security.SslStream _sslStream;
                                /*0x78*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x80*/ Best.HTTP.Hosts.Settings.HostSettings _hostSettings;
                                /*0x88*/ int peek_listIdx;
                                /*0x8c*/ int peek_pos;
                                /*0x90*/ object locker;
                                /*0x98*/ int _reading;

                                /*0x2ac6898*/ FrameworkTLSStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string targetHost, Best.HTTP.Hosts.Settings.HostSettings hostSettings);
                                /*0x2acd264*/ long get_MaxBufferSize();
                                /*0x2acd27c*/ void set_MaxBufferSize(long value);
                                /*0x2acd288*/ bool OnUserCertificationValidation(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
                                /*0x2acd60c*/ System.Security.Cryptography.X509Certificates.X509Certificate OnUserCertificationSelection(object sender, string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
                                /*0x2acd9a4*/ void OnAuthenticatedAsClient(System.IAsyncResult ar);
                                /*0x2acdefc*/ bool CallOnNegotiated(string alpn, System.Exception error);
                                /*0x2ace4a8*/ void BeginPeek();
                                /*0x2ace538*/ int PeekByte();
                                /*0x2ace630*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2ace174*/ void BeginRead();
                                /*0x2ace674*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2ace720*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2ace810*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2ace830*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                                /*0x2ace93c*/ void Flush();
                                /*0x2ace95c*/ void Dispose(bool disposing);
                                /*0x2ace990*/ void <>n__0(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);

                                class <>c__DisplayClass24_0
                                {
                                    /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream <>4__this;
                                    /*0x18*/ byte[] buffer;

                                    /*0x2ace66c*/ <>c__DisplayClass24_0();
                                    /*0x2ace998*/ void <BeginRead>b__0(System.Threading.Tasks.Task<int> ti);
                                }
                            }

                            class NonblockingBCTLSStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x48*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingBCTLSStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer, Best.HTTP.Shared.TLS.AbstractTls13Client, System.Exception> OnNegotiated;
                                /*0x50*/ long _maxBufferSize;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol _tlsClientProtocol;
                                /*0x60*/ Best.HTTP.Shared.TLS.AbstractTls13Client _tlsClient;
                                /*0x68*/ object locker;
                                /*0x70*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x78*/ int _sendBufferSize;
                                /*0x7c*/ bool _disposeStreamer;
                                /*0x80*/ int peek_listIdx;
                                /*0x84*/ int peek_pos;
                                /*0x88*/ bool _disposed;

                                /*0x2ac66f4*/ NonblockingBCTLSStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol tlsClientProtocol, Best.HTTP.Shared.TLS.AbstractTls13Client tlsClient, bool disposeStreamer, uint maxBufferSize);
                                /*0x2acee9c*/ long get_MaxBufferSize();
                                /*0x2aceeb4*/ void set_MaxBufferSize(long value);
                                /*0x2acf020*/ void BeginPeek();
                                /*0x2acf150*/ int PeekByte();
                                /*0x2acf30c*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2acf9a8*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2acf66c*/ void PullContentFromStreamer();
                                /*0x2acfa9c*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2acfc6c*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2acff6c*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                                /*0x2aceec0*/ bool CallOnNegotiated(System.Exception error);
                                /*0x2ad0114*/ void Dispose(bool disposing);
                            }

                            class NonblockingTCPStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x48*/ long _maxBufferSize;
                                /*0x50*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x58*/ bool _disposeStreamer;
                                /*0x5c*/ int peek_listIdx;
                                /*0x60*/ int peek_pos;
                                /*0x68*/ object _locker;

                                /*0x2ac5324*/ NonblockingTCPStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, bool disposeStreamer, uint maxBufferSize);
                                /*0x2ad02b4*/ long get_MaxBufferSize();
                                /*0x2ad02cc*/ void set_MaxBufferSize(long value);
                                /*0x2ad02d8*/ void BeginPeek();
                                /*0x2ad0408*/ int PeekByte();
                                /*0x2ad05c4*/ void Dispose(bool disposing);
                                /*0x2ad06c8*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2ad0834*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                                /*0x2ad0848*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2ad09f0*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2ad0b40*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x2ad0970*/ void DequeueFromStreamer();
                            }

                            class NonblockingUnderlyingStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream
                            {
                                /*0x48*/ System.IO.Stream _stream;
                                /*0x50*/ int _receiving;
                                /*0x54*/ uint _maxBufferSize;
                                /*0x58*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x60*/ object _locker;
                                /*0x68*/ int peek_listIdx;
                                /*0x6c*/ int peek_pos;

                                /*0x2ad0bec*/ NonblockingUnderlyingStream(System.IO.Stream stream, uint maxBufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x2ad0d00*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2ad0e0c*/ void BeginReceive();
                                /*0x2ad11fc*/ void OnReceived(System.IAsyncResult ar);
                                /*0x2ad17e8*/ void BeginPeek();
                                /*0x2ad1918*/ int PeekByte();
                                /*0x2ad1ad4*/ void Dispose(bool disposing);
                            }
                        }
                    }

                    namespace DNS
                    {
                        namespace Cache
                        {
                            struct DNSQueryResult
                            {
                                /*0x10*/ string HostName;
                                /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] Addresses;
                                /*0x20*/ System.Exception Error;

                                /*0x2ad1afc*/ DNSQueryResult(string hostName, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] addresses, System.Exception error);
                                /*0x2ad1b40*/ string ToString();
                            }

                            class DNSIPAddress
                            {
                                /*0x10*/ System.Net.IPAddress <IPAddress>k__BackingField;
                                /*0x18*/ bool <IsWorkedLastTime>k__BackingField;

                                /*0x2ad1de4*/ DNSIPAddress(System.Net.IPAddress iPAddress);
                                /*0x2ad1dc4*/ System.Net.IPAddress get_IPAddress();
                                /*0x2ad1dcc*/ void set_IPAddress(System.Net.IPAddress value);
                                /*0x2ad1dd4*/ bool get_IsWorkedLastTime();
                                /*0x2ad1ddc*/ void set_IsWorkedLastTime(bool value);
                                /*0x2ad1e20*/ string ToString();
                            }

                            class DNSCacheOptions
                            {
                                /*0x10*/ System.TimeSpan RefreshAfter;
                                /*0x18*/ System.TimeSpan RemoveAfter;
                                /*0x20*/ System.TimeSpan CancellationCheckGranularity;
                                /*0x28*/ System.TimeSpan MaintenanceFrequency;

                                /*0x2ad1eb8*/ DNSCacheOptions();
                            }

                            class DNSQueryParameters
                            {
                                /*0x10*/ UnityEngine.Hash128 <Key>k__BackingField;
                                /*0x20*/ System.Uri <Address>k__BackingField;
                                /*0x28*/ System.Threading.CancellationToken Token;
                                /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext Context;
                                /*0x38*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryResult> Callback;

                                /*0x2ac2944*/ DNSQueryParameters(System.Uri address);
                                /*0x2ad1f5c*/ UnityEngine.Hash128 get_Key();
                                /*0x2ad1f68*/ void set_Key(UnityEngine.Hash128 value);
                                /*0x2ad1f70*/ string get_Hostname();
                                /*0x2ad1f88*/ System.Uri get_Address();
                                /*0x2ad1f90*/ void set_Address(System.Uri value);
                                /*0x2ad1f98*/ bool get_IsPrefetch();
                                /*0x2ad1fa8*/ string ToString();
                            }

                            class DNSCache
                            {
                                static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheOptions Options;
                                static /*0x8*/ System.Collections.Concurrent.ConcurrentDictionary<UnityEngine.Hash128, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry> _cache;
                                static /*0x10*/ int _isMaintenanceScheduled;

                                static /*0x2ad4868*/ DNSCache();
                                static /*0x2ad2038*/ void Prefetch(string hostName);
                                static /*0x2ac8fb0*/ void ReportAsNonWorking(string hostName, System.Net.IPAddress address, Best.HTTP.Shared.Logger.LoggingContext context);
                                static /*0x2ac299c*/ void Query(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters parameters);
                                static /*0x2ad23e0*/ void OnGetHostAddresses(System.IAsyncResult ar);
                                static /*0x2ad3620*/ bool CheckForCanceled(System.DateTime now, object context);
                                static /*0x2ad3a54*/ bool Maintenance(System.DateTime now, object context);

                                class <>c__DisplayClass7_0
                                {
                                    /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters parameters;
                                    /*0x18*/ System.Net.IPAddress[] addresses;

                                    /*0x2ad3618*/ <>c__DisplayClass7_0();
                                    /*0x2ad4948*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry <OnGetHostAddresses>g__AddCacheEntry|0(UnityEngine.Hash128 key);
                                    /*0x2ad4bc0*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry <OnGetHostAddresses>g__UpdateCacheEntry|1(UnityEngine.Hash128 key, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry oldEntry);
                                }
                            }

                            class DNSCacheEntry
                            {
                                /*0x10*/ UnityEngine.Hash128 Key;
                                /*0x20*/ string Host;
                                /*0x28*/ System.DateTime ResolvedAt;
                                /*0x30*/ long _lastUsedTicks;
                                /*0x38*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> _resolvedAddresses;
                                /*0x40*/ int _isRefreshing;

                                /*0x2ad4b10*/ DNSCacheEntry(UnityEngine.Hash128 key, string host, System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x2ad4dd8*/ DNSCacheEntry(UnityEngine.Hash128 key, string host, long lastUsedTicks, System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x2ad4db8*/ System.DateTime get_LastUsed();
                                /*0x2ad4d30*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry DeriveWith(System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x2ad4714*/ bool IsStalled(System.DateTime now);
                                /*0x2ad4644*/ bool IsReadyToRemove(System.DateTime now);
                                /*0x2ad47dc*/ void Refresh();
                                /*0x2ad2334*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] GetAddresses();
                                /*0x2ad2234*/ void ReportNonWorking(System.Net.IPAddress nonWorking, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x2ad4e94*/ string ToString();

                                class <>c__DisplayClass15_0
                                {
                                    /*0x10*/ System.Net.IPAddress nonWorking;

                                    /*0x2ad4e8c*/ <>c__DisplayClass15_0();
                                    /*0x2ad5354*/ bool <ReportNonWorking>b__0(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress adr);
                                }
                            }
                        }
                    }
                }

                namespace Memory
                {
                    struct AutoReleaseBuffer : System.IDisposable
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer Empty;
                        /*0x10*/ byte[] Data;
                        /*0x18*/ int Offset;
                        /*0x1c*/ int Count;

                        static /*0x2ad5850*/ AutoReleaseBuffer();
                        /*0x2ad5374*/ AutoReleaseBuffer(byte[] data);
                        /*0x2acbf64*/ AutoReleaseBuffer(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                        /*0x2ad53b0*/ bool Equals(object obj);
                        /*0x2ad548c*/ bool Equals(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment other);
                        /*0x2ad54c0*/ int GetHashCode();
                        /*0x2ad5500*/ string ToString();
                        /*0x2ad57e4*/ void Dispose();
                    }

                    class UserModeLock
                    {
                        /*0x10*/ int _locked;

                        /*0x2ad5a30*/ UserModeLock();
                        /*0x2ad58c8*/ void Acquire();
                        /*0x2ad5958*/ bool TryAcquire();
                        /*0x2ad5a20*/ void Release();
                    }

                    struct BufferStats
                    {
                        /*0x10*/ long Size;
                        /*0x18*/ int Count;
                    }

                    struct BufferPoolStats
                    {
                        /*0x10*/ long GetBuffers;
                        /*0x18*/ long ReleaseBuffers;
                        /*0x20*/ long PoolSize;
                        /*0x28*/ long MaxPoolSize;
                        /*0x30*/ long MinBufferSize;
                        /*0x38*/ long MaxBufferSize;
                        /*0x40*/ long Borrowed;
                        /*0x48*/ long ArrayAllocations;
                        /*0x50*/ int FreeBufferCount;
                        /*0x58*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferStats> FreeBufferStats;
                        /*0x60*/ System.TimeSpan NextMaintenance;
                    }

                    class BufferPool
                    {
                        static /*0x0*/ byte[] NoData;
                        static /*0x8*/ bool _isEnabled;
                        static /*0x10*/ System.TimeSpan RemoveOlderThan;
                        static /*0x18*/ System.TimeSpan RunMaintenanceEvery;
                        static /*0x20*/ long MinBufferSize;
                        static /*0x28*/ long MaxBufferSize;
                        static /*0x30*/ long MaxPoolSize;
                        static /*0x38*/ bool RemoveEmptyLists;
                        static /*0x39*/ bool IsDoubleReleaseCheckEnabled;
                        static /*0x40*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferStore> FreeBuffers;
                        static /*0x48*/ System.DateTime lastMaintenance;
                        static /*0x50*/ long PoolSize;
                        static /*0x58*/ long GetBuffers;
                        static /*0x60*/ long ReleaseBuffers;
                        static /*0x68*/ long Borrowed;
                        static /*0x70*/ long ArrayAllocations;
                        static /*0x78*/ Best.HTTP.Shared.PlatformSupport.Memory.UserModeLock _lock;

                        static /*0x2ad5a38*/ BufferPool();
                        static /*0x2ad5cc8*/ void OnLowMemory();
                        static /*0x2ac0f78*/ byte[] Get(long size, bool canBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x2ad5f90*/ void ReleaseBulk(System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> segments);
                        static /*0x2ad6348*/ void ReleaseBulk(System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> segments);
                        static /*0x2ac1560*/ void Release(byte[] buffer);
                        static /*0x2ad612c*/ void Release(byte[] buffer, bool acquireLock);
                        static /*0x2ad6528*/ byte[] Resize(ref byte[] buffer, int newSize, bool canBeLarger, bool clear, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x2ad66a0*/ void GetStatistics(ref Best.HTTP.Shared.PlatformSupport.Memory.BufferPoolStats stats);
                        static /*0x2ad5e00*/ void Clear();
                        static /*0x2ad6a70*/ void Maintain();
                        static /*0x2ad6e80*/ bool IsPowerOfTwo(long x);
                        static /*0x2ad6e90*/ long NextPowerOf2(long x);
                        static /*0x2ad6eac*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc FindFreeBuffer(long size, bool canBeLarger);
                        static /*0x2ad7150*/ void AddFreeBuffer(byte[] buffer);
                    }

                    struct BufferSegment
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Empty;
                        /*0x10*/ byte[] Data;
                        /*0x18*/ int Offset;
                        /*0x1c*/ int Count;

                        static /*0x2ad7a78*/ BufferSegment();
                        static /*0x2accd44*/ bool op_Equality(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment right);
                        static /*0x2accdd8*/ bool op_Inequality(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment right);
                        static /*0x2ad7790*/ byte[] op_Implicit(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left);
                        /*0x2aca2cc*/ BufferSegment(byte[] data, int offset, int count);
                        /*0x2acce6c*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Slice(int newOffset);
                        /*0x2ad75f8*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Slice(int offset, int count);
                        /*0x2ad7634*/ void CopyTo(byte[] to);
                        /*0x2ad7654*/ bool Equals(object obj);
                        /*0x2ad771c*/ bool Equals(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment other);
                        /*0x2ad7750*/ int GetHashCode();
                        /*0x2ad7794*/ string ToString();
                    }

                    struct BufferStore
                    {
                        /*0x10*/ long Size;
                        /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc> buffers;

                        /*0x2ad7af0*/ BufferStore(long size);
                        /*0x2ad7560*/ BufferStore(long size, byte[] buffer);
                        /*0x2ad7b74*/ string ToString();
                    }

                    struct BufferDesc
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc Empty;
                        /*0x10*/ byte[] buffer;
                        /*0x18*/ System.DateTime released;

                        static /*0x2ad7d18*/ BufferDesc();
                        /*0x2ad74e8*/ BufferDesc(byte[] buff);
                        /*0x2ad7c20*/ string ToString();
                    }
                }

                namespace IL2CPP
                {
                    class Il2CppEagerStaticClassConstructionAttribute : System.Attribute
                    {
                        /*0x2ad7d8c*/ Il2CppEagerStaticClassConstructionAttribute();
                    }
                }

                namespace FileSystem
                {
                    class DefaultIOService : Best.HTTP.Shared.PlatformSupport.FileSystem.IIOService
                    {
                        /*0x2ad7f78*/ DefaultIOService();
                        /*0x2ad7d94*/ System.IO.Stream CreateFileStream(string path, Best.HTTP.Shared.PlatformSupport.FileSystem.FileStreamModes mode);
                        /*0x2ad7f38*/ void DirectoryCreate(string path);
                        /*0x2ad7f44*/ void DirectoryDelete(string path);
                        /*0x2ad7f54*/ bool DirectoryExists(string path);
                        /*0x2ad7f60*/ void FileDelete(string path);
                        /*0x2ad7f6c*/ bool FileExists(string path);
                    }

                    enum FileStreamModes
                    {
                        Create = 0,
                        OpenRead = 1,
                        OpenReadWrite = 2,
                        Append = 3,
                    }

                    interface IIOService
                    {
                        /*0x1f30ebc*/ void DirectoryCreate(string path);
                        /*0x1f2fec8*/ bool DirectoryExists(string path);
                        /*0x1f30ebc*/ void DirectoryDelete(string path);
                        /*0x1f30ebc*/ void FileDelete(string path);
                        /*0x1f2fec8*/ bool FileExists(string path);
                        /*0x1f30300*/ System.IO.Stream CreateFileStream(string path, Best.HTTP.Shared.PlatformSupport.FileSystem.FileStreamModes mode);
                    }
                }
            }

            namespace Logger
            {
                enum Loglevels
                {
                    All = 0,
                    Information = 1,
                    Warning = 2,
                    Error = 3,
                    Exception = 4,
                    None = 5,
                }

                interface ILogOutput : System.IDisposable
                {
                    /*0x1f2fe14*/ bool get_AcceptColor();
                    /*0x1f30c88*/ void Write(Best.HTTP.Shared.Logger.Loglevels level, string logEntry);
                    /*0x1f309e4*/ void Flush();
                }

                interface IFilter
                {
                    /*0x1f2fec8*/ bool Include(string division);
                }

                interface ILogger
                {
                    /*0x1f2ffc8*/ Best.HTTP.Shared.Logger.Loglevels get_Level();
                    /*0x1f30b78*/ void set_Level(Best.HTTP.Shared.Logger.Loglevels value);
                    /*0x1f30214*/ Best.HTTP.Shared.Logger.ILogOutput get_Output();
                    /*0x1f30ebc*/ void set_Output(Best.HTTP.Shared.Logger.ILogOutput value);
                    /*0x1f30214*/ Best.HTTP.Shared.Logger.IFilter get_Filter();
                    /*0x1f30ebc*/ void set_Filter(Best.HTTP.Shared.Logger.IFilter value);
                    /*0x1f2fe14*/ bool get_IsEmpty();
                    /*0x1f2fe14*/ bool get_IsDiagnostic();
                    /*0x1f310fc*/ void Verbose(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x1f310fc*/ void Information(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x1f310fc*/ void Warning(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x1f310fc*/ void Error(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x1f31134*/ void Exception(string division, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class LoggingContext
                {
                    /*0x10*/ string <Hash>k__BackingField;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField> fields;

                    static /*0x2ad8590*/ string Escape(string original);
                    /*0x2ac9c04*/ LoggingContext(object boundto);
                    /*0x2ad7f80*/ string get_Hash();
                    /*0x2ad7f88*/ void set_Hash(string value);
                    /*0x2ad8004*/ void Add(string key, long value);
                    /*0x2ad7f90*/ void Add(string key, string value);
                    /*0x2ac9d88*/ void Add(string key, Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x2ad8060*/ void Add(Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField field);
                    /*0x2ad81cc*/ string GetStringField(string fieldName);
                    /*0x2ad80e0*/ void Remove(string key);
                    /*0x2ad82d0*/ void ToJson(System.Text.StringBuilder sb);

                    enum LoggingContextFieldType
                    {
                        Long = 0,
                        Bool = 1,
                        String = 2,
                        AnotherContext = 3,
                    }

                    struct LoggingContextField
                    {
                        /*0x10*/ string key;
                        /*0x18*/ long longValue;
                        /*0x20*/ bool boolValue;
                        /*0x28*/ string stringValue;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext loggingContextValue;
                        /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext.LoggingContextFieldType fieldType;

                        /*0x2ad87dc*/ string ToString();
                    }

                    class <>c__DisplayClass13_0
                    {
                        /*0x10*/ string fieldName;

                        /*0x2ad82c8*/ <>c__DisplayClass13_0();
                        /*0x2ad8898*/ bool <GetStringField>b__0(Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField f);
                    }
                }

                class ThreadedLogger : Best.HTTP.Shared.Logger.ILogger, System.IDisposable
                {
                    /*0x10*/ Best.HTTP.Shared.Logger.Loglevels <Level>k__BackingField;
                    /*0x18*/ Best.HTTP.Shared.Logger.ILogOutput _output;
                    /*0x20*/ Best.HTTP.Shared.Logger.IFilter <Filter>k__BackingField;
                    /*0x28*/ int InitialStringBufferCapacity;
                    /*0x30*/ System.TimeSpan ExitThreadAfterInactivity;
                    /*0x38*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.Logger.LogJob> jobs;
                    /*0x40*/ System.Threading.AutoResetEvent newJobEvent;
                    /*0x48*/ int threadCreated;
                    /*0x4c*/ bool isDisposed;
                    /*0x50*/ System.Text.StringBuilder sb;

                    /*0x2ad89f8*/ ThreadedLogger();
                    /*0x2ad88ac*/ Best.HTTP.Shared.Logger.Loglevels get_Level();
                    /*0x2ad88b4*/ void set_Level(Best.HTTP.Shared.Logger.Loglevels value);
                    /*0x2ad88bc*/ bool get_IsDiagnostic();
                    /*0x2ad88cc*/ Best.HTTP.Shared.Logger.ILogOutput get_Output();
                    /*0x2ad88d4*/ void set_Output(Best.HTTP.Shared.Logger.ILogOutput value);
                    /*0x2ad8998*/ Best.HTTP.Shared.Logger.IFilter get_Filter();
                    /*0x2ad89a0*/ void set_Filter(Best.HTTP.Shared.Logger.IFilter value);
                    /*0x2ad89a8*/ bool get_IsEmpty();
                    /*0x2ad8c20*/ void Verbose(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ad9120*/ void Information(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ad9138*/ void Warning(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ad9150*/ void Error(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ad9168*/ void Exception(string division, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ad8c38*/ void AddJob(Best.HTTP.Shared.Logger.Loglevels level, string div, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2ad9574*/ void ThreadFunc();
                    /*0x2ad993c*/ void WriteJob(ref Best.HTTP.Shared.Logger.LogJob job);
                    /*0x2ad9b10*/ void Dispose();
                }

                struct LogJob
                {
                    static /*0x0*/ string[] LevelStrings;
                    /*0x10*/ Best.HTTP.Shared.Logger.Loglevels level;
                    /*0x18*/ string division;
                    /*0x20*/ string msg;
                    /*0x28*/ System.Exception ex;
                    /*0x30*/ System.DateTime time;
                    /*0x38*/ int threadId;
                    /*0x40*/ string stackTrace;
                    /*0x48*/ string context;

                    static /*0x2ad9d48*/ LogJob();
                    static /*0x2ad9c4c*/ string WrapInColor(string str, string color, bool acceptColor);
                    /*0x2ad9180*/ string ToJson(System.Text.StringBuilder sb, bool acceptColor);
                    /*0x2ad9c50*/ void ProcessStackTrace(System.Text.StringBuilder sb);
                }

                class UnityOutput : Best.HTTP.Shared.Logger.ILogOutput, System.IDisposable
                {
                    /*0x10*/ bool <AcceptColor>k__BackingField;

                    /*0x2ad8bb4*/ UnityOutput();
                    /*0x2ad9ec8*/ bool get_AcceptColor();
                    /*0x2ad9ed0*/ void Write(Best.HTTP.Shared.Logger.Loglevels level, string logEntry);
                    /*0x2ad9fac*/ void Best.HTTP.Shared.Logger.ILogOutput.Flush();
                    /*0x2ad9fb0*/ void System.IDisposable.Dispose();
                }
            }

            namespace Extensions
            {
                class CircularBuffer<T>
                {
                    /*0x0*/ int <Capacity>k__BackingField;
                    /*0x0*/ int <Count>k__BackingField;
                    /*0x0*/ T[] buffer;
                    /*0x0*/ int startIdx;
                    /*0x0*/ int endIdx;

                    /*0x1f30b78*/ CircularBuffer(int capacity);
                    /*0x1f2ffc8*/ int get_Capacity();
                    /*0x1f30b78*/ void set_Capacity(int value);
                    /*0x1f2ffc8*/ int get_Count();
                    /*0x1f30b78*/ void set_Count(int value);
                    /*0x1ffc854*/ T get_Item(int idx);
                    /*0x1ffc854*/ void Add(T element);
                    /*0x1f30214*/ string ToString();
                }

                class Extensions
                {
                    static /*0x0*/ System.Text.RegularExpressions.Regex validIpV4AddressRegex;

                    static /*0x2adbd24*/ Extensions();
                    static /*0x2ada008*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment GetASCIIBytes(string str);
                    static /*0x2ada0fc*/ void SendAsASCII(System.IO.BinaryWriter stream, string str);
                    static /*0x2ada178*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> AddHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name, string value);
                    static /*0x2ada328*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> SetHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name, string value);
                    static /*0x2ada540*/ bool RemoveHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x2ada5a4*/ System.Collections.Generic.List<string> GetHeaderValues(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x2ada63c*/ string GetFirstHeaderValue(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x2ada6f8*/ bool HasHeaderWithValue(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string headerName, string value);
                    static /*0x2ada7f4*/ bool HasHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string headerName);
                    static /*0x2ada858*/ void WriteString(System.IO.Stream fs, string value);
                    static /*0x2ada9e4*/ void WriteLine(System.IO.Stream fs);
                    static /*0x2adaa60*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer AsAutoRelease(byte[] buffer);
                    static /*0x2ac139c*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AsBuffer(byte[] bytes, int length);
                    static /*0x2acb208*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AsBuffer(byte[] bytes, int offset, int length);
                    static /*0x2ad0764*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment CopyAsBuffer(byte[] bytes, int offset, int length);
                    static /*0x2adaaa4*/ string GetRequestPathAndQueryURL(System.Uri uri);
                    static /*0x2adab18*/ void WriteArray(System.IO.Stream stream, byte[] array);
                    static /*0x2adab44*/ void WriteBufferSegment(System.IO.Stream stream, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                    static /*0x2adab64*/ bool IsHostIsAnIPAddress(System.Uri uri);
                    static /*0x2adac54*/ bool IsIpV4AddressValid(string address);
                    static /*0x2adacf4*/ bool IsIpV6AddressValid(string address);
                    static /*0x2adad90*/ uint ToUInt32(string str, uint defaultValue);
                    static /*0x2adadc4*/ long ToInt64(string str, long defaultValue);
                    static /*0x2adadf8*/ System.DateTime ToDateTime(string str, System.DateTime defaultValue);
                    static /*0x2adaf48*/ string ToStr(string str, string defaultVale);
                    static /*0x2adaf54*/ string ToBinaryStr(byte value);
                    static /*0x2adafc8*/ string CalculateMD5Hash(string input);
                    static /*0x2adb084*/ string CalculateMD5Hash(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment input);
                    static /*0x2adb2e8*/ string Read(string str, ref int pos, char block, bool needResult);
                    static /*0x2adb3e4*/ string Read(string str, ref int pos, System.Func<char, bool> block, bool needResult);
                    static /*0x2adb5b0*/ string ReadPossibleQuotedText(string str, ref int pos);
                    static /*0x2adb520*/ void SkipWhiteSpace(string str, ref int pos);
                    static /*0x2adb814*/ string TrimAndLower(string str);
                    static /*0x2adb968*/ System.Nullable<char> Peek(string str, int pos);
                    static /*0x2adba04*/ void ReadBuffer(System.IO.Stream stream, byte[] buffer, int length);
                    static /*0x2adbaf8*/ void WriteString(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms, string str);
                    static /*0x2adbbe8*/ void WriteLine(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms);
                    static /*0x2adbc68*/ void WriteLine(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms, string str);

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Shared.Extensions.Extensions.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__41_0;
                        static /*0x10*/ System.Func<char, bool> <>9__41_1;

                        static /*0x2adbdc4*/ <>c();
                        /*0x2adbe2c*/ <>c();
                        /*0x2adbe34*/ bool <ReadPossibleQuotedText>b__41_0(char ch);
                        /*0x2adbe4c*/ bool <ReadPossibleQuotedText>b__41_1(char ch);
                    }

                    class <>c__DisplayClass39_0
                    {
                        /*0x10*/ char block;

                        /*0x2adb3dc*/ <>c__DisplayClass39_0();
                        /*0x2adbe64*/ bool <Read>b__0(char ch);
                    }
                }

                class ExceptionHelper
                {
                    static /*0x2adba8c*/ System.Exception ServerClosedTCPStream();
                }

                class HeaderParser : Best.HTTP.Shared.Extensions.KeyValuePairList
                {
                    /*0x2adbe74*/ HeaderParser(string headerStr);
                    /*0x2adbeac*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> Parse(string headerStr);
                }

                class HeaderValue
                {
                    /*0x10*/ string <Key>k__BackingField;
                    /*0x18*/ string <Value>k__BackingField;
                    /*0x20*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> <Options>k__BackingField;

                    /*0x2adc0a8*/ HeaderValue();
                    /*0x2adc108*/ HeaderValue(string key);
                    /*0x2adc0b8*/ string get_Key();
                    /*0x2adc0c0*/ void set_Key(string value);
                    /*0x2adc0c8*/ string get_Value();
                    /*0x2adc0d0*/ void set_Value(string value);
                    /*0x2adc0d8*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> get_Options();
                    /*0x2adc0e0*/ void set_Options(System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> value);
                    /*0x2adc0e8*/ bool get_HasValue();
                    /*0x2adc0b0*/ void Parse(string headerStr, ref int pos);
                    /*0x2adcafc*/ bool TryGetOption(string key, ref Best.HTTP.Shared.Extensions.HeaderValue option);
                    /*0x2adc138*/ void ParseImplementation(string headerStr, ref int pos, bool isOptionIsAnOption);
                    /*0x2adcc04*/ string ToString();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Shared.Extensions.HeaderValue.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__18_0;

                        static /*0x2adcf08*/ <>c();
                        /*0x2adcf70*/ <>c();
                        /*0x2adcf78*/ bool <ParseImplementation>b__18_0(char ch);
                    }
                }

                class RunOnceOnMainThread : Best.HTTP.Shared.Extensions.IHeartbeat
                {
                    /*0x10*/ System.Action _action;
                    /*0x18*/ int _subscribed;
                    /*0x20*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                    /*0x2adcf9c*/ RunOnceOnMainThread(System.Action action, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x2adcfe0*/ void Subscribe();
                    /*0x2add068*/ void OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                }

                interface IHeartbeat
                {
                    void OnHeartbeatUpdate(System.DateTime utcNow, System.TimeSpan dif);
                }

                class HeartbeatManager
                {
                    /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.IHeartbeat> Heartbeats;
                    /*0x20*/ Best.HTTP.Shared.Extensions.IHeartbeat[] UpdateArray;
                    /*0x28*/ System.DateTime LastUpdate;

                    /*0x2add774*/ HeartbeatManager();
                    /*0x2aca0d8*/ void Subscribe(Best.HTTP.Shared.Extensions.IHeartbeat heartbeat);
                    /*0x2acbaec*/ void Unsubscribe(Best.HTTP.Shared.Extensions.IHeartbeat heartbeat);
                    /*0x2add278*/ void Update();
                    /*0x2add668*/ void Clear();
                }

                class KeyValuePairList
                {
                    /*0x10*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> <Values>k__BackingField;

                    /*0x2addfb8*/ KeyValuePairList();
                    /*0x2addeb0*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> get_Values();
                    /*0x2addeb8*/ void set_Values(System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> value);
                    /*0x2addec0*/ bool TryGet(string valueKeyName, ref Best.HTTP.Shared.Extensions.HeaderValue param);
                }

                struct TimerData
                {
                    /*0x10*/ System.DateTime Created;
                    /*0x18*/ System.TimeSpan Interval;
                    /*0x20*/ object Context;
                    /*0x28*/ System.Func<System.DateTime, object, bool> OnTimer;

                    /*0x2ade03c*/ TimerData(System.TimeSpan interval, object context, System.Func<System.DateTime, object, bool> onTimer);
                    /*0x2addfc0*/ bool IsOnTime(System.DateTime now);
                    /*0x2ade0d0*/ Best.HTTP.Shared.Extensions.TimerData CreateNew();
                    /*0x2ade0e8*/ string ToString();
                }

                class Timer
                {
                    static /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.TimerData> _timers;
                    static /*0x8*/ System.Threading.ReaderWriterLockSlim _lock;
                    static /*0x10*/ int _isSubscribed;

                    static /*0x2ade4b4*/ Timer();
                    static /*0x2ade224*/ void Add(Best.HTTP.Shared.Extensions.TimerData timer);

                    class TimerImplementation : Best.HTTP.Shared.Extensions.IHeartbeat
                    {
                        /*0x2ade4ac*/ TimerImplementation();
                        /*0x2ade58c*/ void OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                    }
                }
            }

            namespace Databases
            {
                class FolderAndFileOptions
                {
                    /*0x10*/ string FolderName;
                    /*0x18*/ string DatabaseFolderName;
                    /*0x20*/ string MetadataExtension;
                    /*0x28*/ string DatabaseExtension;
                    /*0x30*/ string DatabaseFreeListExtension;
                    /*0x38*/ string HashExtension;

                    /*0x2adeba4*/ FolderAndFileOptions();
                }

                class Database<ContentType, MetadataType, IndexingServiceType, MetadataServiceType> : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
                {
                    static /*0x0*/ Best.HTTP.Shared.Databases.FolderAndFileOptions FolderAndFileOptions;
                    /*0x0*/ string <SaveDir>k__BackingField;
                    /*0x0*/ MetadataServiceType <MetadataService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.DatabaseOptions <Options>k__BackingField;
                    /*0x0*/ IndexingServiceType <IndexingService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.DiskManager<ContentType> <DiskManager>k__BackingField;
                    /*0x0*/ int isDirty;
                    /*0x0*/ System.Threading.ReaderWriterLockSlim rwlock;

                    static /*0x1f33998*/ Database();
                    /*0x1ffc854*/ Database(string directory, Best.HTTP.Shared.Databases.DatabaseOptions options, IndexingServiceType indexingService, Best.HTTP.Shared.Databases.IDiskContentParser<ContentType> diskContentParser, MetadataServiceType metadataService);
                    /*0x1f30214*/ string get_SaveDir();
                    /*0x1f30ebc*/ void set_SaveDir(string value);
                    /*0x1f30214*/ string get_Name();
                    /*0x1f30214*/ string get_MetadataFileName();
                    /*0x1f30214*/ string get_DatabaseFileName();
                    /*0x1f30214*/ string get_DatabaseFreeListFileName();
                    /*0x1f30214*/ string get_HashFileName();
                    /*0x1ffc854*/ MetadataServiceType get_MetadataService();
                    /*0x1ffc854*/ void set_MetadataService(MetadataServiceType value);
                    /*0x1f30214*/ Best.HTTP.Shared.Databases.DatabaseOptions get_Options();
                    /*0x1f30ebc*/ void set_Options(Best.HTTP.Shared.Databases.DatabaseOptions value);
                    /*0x1ffc854*/ IndexingServiceType get_IndexingService();
                    /*0x1ffc854*/ void set_IndexingService(IndexingServiceType value);
                    /*0x1f30214*/ Best.HTTP.Shared.Databases.DiskManager<ContentType> get_DiskManager();
                    /*0x1f30ebc*/ void set_DiskManager(Best.HTTP.Shared.Databases.DiskManager<ContentType> value);
                    /*0x1ffc854*/ bool DeleteMetadata(MetadataType metadata);
                    /*0x1ffc854*/ ContentType FromMetadataIndex(int metadataIndex);
                    /*0x1ffc854*/ ContentType FromMetadata(MetadataType metadata);
                    /*0x1f30b78*/ void FlagDirty(int dirty);
                    /*0x1f2fe14*/ bool Save();
                    void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                    /*0x1f309e4*/ void Dispose();
                }

                class DatabaseOptions
                {
                    /*0x10*/ string Name;
                    /*0x18*/ bool UseHashFile;
                    /*0x20*/ Best.HTTP.Shared.Databases.DiskManagerOptions DiskManager;

                    /*0x2adecc8*/ DatabaseOptions(string dbName);
                }

                class DiskManagerOptions
                {
                    /*0x10*/ int MaxCacheSizeInBytes;
                    /*0x18*/ string HashDigest;

                    /*0x2aded4c*/ DiskManagerOptions();
                }

                interface IDiskContentParser<T>
                {
                    /*0x1ffc854*/ T Parse(System.IO.Stream stream, int length);
                    /*0x1ffc854*/ void Encode(System.IO.Stream stream, T content);
                }

                class DiskManager<T> : System.IDisposable
                {
                    /*0x0*/ int <CacheSize>k__BackingField;
                    /*0x0*/ System.IO.Stream stream;
                    /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, T>> cache;
                    /*0x0*/ Best.HTTP.Shared.Databases.IDiskContentParser<T> diskContentParser;
                    /*0x0*/ Best.HTTP.Shared.Databases.DiskManagerOptions options;
                    /*0x0*/ Best.HTTP.Shared.Databases.FreeListManager freeListManager;
                    /*0x0*/ System.Threading.ReaderWriterLockSlim rwLock;

                    /*0x1f31134*/ DiskManager(System.IO.Stream stream, System.IO.Stream freeListStream, Best.HTTP.Shared.Databases.IDiskContentParser<T> contentParser, Best.HTTP.Shared.Databases.DiskManagerOptions options);
                    /*0x1f2ffc8*/ int get_CacheSize();
                    /*0x1f30b78*/ void set_CacheSize(int value);
                    /*0x1ffc854*/ System.ValueTuple<int, int> Append(T content);
                    /*0x1ffc854*/ void SaveChanged(Best.HTTP.Shared.Databases.Metadata metadata, T content);
                    /*0x1f30ebc*/ void Delete(Best.HTTP.Shared.Databases.Metadata metadata);
                    /*0x1ffc854*/ T Load(Best.HTTP.Shared.Databases.Metadata metadata);
                    /*0x1ffc854*/ Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, T> GetCached(int position);
                    /*0x1ffc854*/ void AddToCache(T parsedContent, int pos, int length);
                    /*0x1ffc854*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment CalculateHash();
                    /*0x1f309e4*/ void Save();
                    /*0x1f309e4*/ void Dispose();

                    struct CachePointer`1<T, CacheType>
                    {
                        static /*0x0*/ Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, CacheType> Empty;
                        /*0x0*/ int Position;
                        /*0x0*/ int Length;
                        /*0x0*/ CacheType Content;

                        static /*0x1f33998*/ CachePointer`1();
                        /*0x1f30214*/ string ToString();
                    }
                }

                class FreeListManager : System.IDisposable
                {
                    /*0x10*/ System.IO.Stream stream;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.FreeListManager.FreeSpot> freeList;

                    /*0x2adedac*/ FreeListManager(System.IO.Stream stream);
                    /*0x2adee50*/ void Load();
                    /*0x2adf0c8*/ void Save();
                    /*0x2adf24c*/ int FindFreeIndex(int length);
                    /*0x2adf2f0*/ int Occupy(int idx, int length);
                    /*0x2adf464*/ void Add(int pos, int length);
                    /*0x2adf718*/ void Dispose();

                    struct FreeSpot
                    {
                        /*0x10*/ int pos;
                        /*0x14*/ int length;
                    }
                }

                class IndexingService<ContentType, MetadataType>
                {
                    /*0x1f309e4*/ IndexingService();
                    /*0x1ffc854*/ void Index(MetadataType metadata);
                    /*0x1ffc854*/ void Remove(MetadataType metadata);
                    /*0x1f30214*/ System.Collections.Generic.IEnumerable<int> GetOptimizedIndexes();
                }

                class Metadata
                {
                    /*0x10*/ int Index;
                    /*0x14*/ int FilePosition;
                    /*0x18*/ int Length;

                    /*0x2adfab4*/ Metadata();
                    /*0x2adf79c*/ bool get_IsDeleted();
                    /*0x2adf7c0*/ void MarkForDelete();
                    /*0x2adf7cc*/ void SaveTo(System.IO.Stream stream);
                    /*0x2adf894*/ void LoadFrom(System.IO.Stream stream);
                    /*0x2adf8c8*/ string ToString();
                }

                class MetadataService<MetadataType, ContentType>
                {
                    /*0x0*/ System.Collections.Generic.List<MetadataType> <Metadatas>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> <IndexingService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> <EmptyMetadataIndexFinder>k__BackingField;

                    /*0x1f30ff0*/ MetadataService(Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> indexingService, Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> emptyMetadataIndexFinder);
                    /*0x1f30214*/ System.Collections.Generic.List<MetadataType> get_Metadatas();
                    /*0x1f30ebc*/ void set_Metadatas(System.Collections.Generic.List<MetadataType> value);
                    /*0x1f30214*/ Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> get_IndexingService();
                    /*0x1f30ebc*/ void set_IndexingService(Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> value);
                    /*0x1f30214*/ Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> get_EmptyMetadataIndexFinder();
                    /*0x1f30ebc*/ void set_EmptyMetadataIndexFinder(Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> value);
                    /*0x1ffc854*/ MetadataType CreateFrom(System.IO.Stream stream);
                    /*0x1ffc854*/ MetadataType CreateDefault(ContentType content, int filePos, int length, System.Action<ContentType, MetadataType> setupCallback);
                    /*0x1ffc854*/ void Remove(MetadataType metadata);
                    /*0x1f30ebc*/ void SaveTo(System.IO.Stream stream);
                    /*0x1f30ebc*/ void LoadFrom(System.IO.Stream stream);
                }

                namespace Utils
                {
                    class StreamUtil
                    {
                        static /*0x2adfabc*/ void WriteLengthPrefixedString(System.IO.Stream stream, string str);
                        static /*0x2adfc70*/ string ReadLengthPrefixedString(System.IO.Stream stream);
                        static /*0x2adf1f4*/ void EncodeUnsignedVariableByteInteger(System.IO.Stream encodeTo, ulong value);
                        static /*0x2adf078*/ ulong DecodeUnsignedVariableByteInteger(System.IO.Stream decodeFrom);
                        static /*0x2adfd54*/ void EncodeSignedVariableByteInteger(System.IO.Stream encodeTo, long value);
                        static /*0x2adfdd8*/ long DecodeSignedVariableByteInteger(System.IO.Stream stream);
                    }
                }

                namespace MetadataIndexFinders
                {
                    class FindDeletedMetadataIndexFinder<MetadataType> : Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType>
                    {
                        /*0x1f309e4*/ FindDeletedMetadataIndexFinder();
                        /*0x1f3008c*/ int FindFreeIndex(System.Collections.Generic.List<MetadataType> metadatas);
                    }

                    interface IEmptyMetadataIndexFinder<MetadataType>
                    {
                        /*0x1f3008c*/ int FindFreeIndex(System.Collections.Generic.List<MetadataType> metadatas);
                    }
                }

                namespace Indexing
                {
                    enum Side
                    {
                        Left = 0,
                        Right = 1,
                    }

                    struct NoAllocList<T>
                    {
                        /*0x0*/ T _value;
                        /*0x0*/ bool _hasValue;
                        /*0x0*/ System.Collections.Generic.List<T> _values;

                        /*0x1ffc854*/ NoAllocList(T value);
                        /*0x1ffc854*/ T get_Item(int index);
                        /*0x1f2ffc8*/ int get_Count();
                        /*0x1ffc854*/ void Add(T item);
                    }

                    class Node<KeyT, ValueT>
                    {
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Parent;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Left;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Right;
                        /*0x0*/ KeyT <Key>k__BackingField;
                        /*0x0*/ int Depth;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.NoAllocList<ValueT> _item;

                        /*0x1ffc854*/ Node(Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> parent, KeyT key, ValueT value);
                        /*0x1ffc854*/ KeyT get_Key();
                        /*0x1ffc854*/ void set_Key(KeyT value);
                        /*0x1f2ffc8*/ int get_BalanceFactor();
                        /*0x1f2ffc8*/ int get_LeftDepth();
                        /*0x1f2ffc8*/ int get_RightDepth();
                        /*0x1f2fe14*/ bool get_IsRoot();
                        /*0x1f2ffc8*/ int get_ChildCount();
                        /*0x1f309e4*/ void BubbleUpDepthChange();
                        /*0x1ffc854*/ ValueT get_Item(int index);
                        /*0x1f2ffc8*/ int get_Count();
                        /*0x1f309e4*/ void Clear();
                        /*0x1ffc854*/ void Add(ValueT value);
                        /*0x1f30214*/ System.Collections.Generic.List<ValueT> ToList();
                        /*0x1f30214*/ string ToString();
                    }

                    class AVLTree<Key, Value>
                    {
                        /*0x0*/ int <ElemCount>k__BackingField;
                        /*0x0*/ int <NodeCount>k__BackingField;
                        /*0x0*/ System.Collections.Generic.IComparer<Key> Comparer;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> <RootNode>k__BackingField;
                        /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.Indexing.Side> path;

                        /*0x1f30ebc*/ AVLTree(System.Collections.Generic.IComparer<Key> comparer);
                        /*0x1f2ffc8*/ int get_ElemCount();
                        /*0x1f30b78*/ void set_ElemCount(int value);
                        /*0x1f2ffc8*/ int get_NodeCount();
                        /*0x1f30b78*/ void set_NodeCount(int value);
                        /*0x1f30214*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> get_RootNode();
                        /*0x1f30ebc*/ void set_RootNode(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> value);
                        /*0x1ffc854*/ void Add(Key key, Value item, bool clearValues);
                        /*0x1f302cc*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RebalanceFrom(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> newNode);
                        /*0x1ffc854*/ System.Collections.Generic.List<Value> Remove(Key key);
                        /*0x1f30ebc*/ void RemoveNode(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> node);
                        /*0x1f30300*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RebalanceForRemoval(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> removedParentNode, Best.HTTP.Shared.Databases.Indexing.Side side);
                        /*0x1f302cc*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> FindMin(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> node);
                        /*0x1ffc854*/ System.Collections.Generic.List<Value> Find(Key key);
                        /*0x1f30214*/ System.Collections.Generic.IEnumerable<Value> WalkHorizontal();
                        /*0x1f302cc*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RotateRight(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> current);
                        /*0x1f302cc*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RotateLeft(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> current);

                        class <WalkHorizontal>d__27<Key, Value> : System.Collections.Generic.IEnumerable<Value>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<Value>, System.Collections.IEnumerator, System.IDisposable
                        {
                            /*0x0*/ int <>1__state;
                            /*0x0*/ Value <>2__current;
                            /*0x0*/ int <>l__initialThreadId;
                            /*0x0*/ Best.HTTP.Shared.Databases.Indexing.AVLTree<Key, Value> <>4__this;
                            /*0x0*/ System.Collections.Generic.Queue<Best.HTTP.Shared.Databases.Indexing.Node<Key, Value>> <toWalk>5__2;
                            /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> <current>5__3;
                            /*0x0*/ int <i>5__4;

                            /*0x1f30b78*/ <WalkHorizontal>d__27(int <>1__state);
                            /*0x1f309e4*/ void System.IDisposable.Dispose();
                            /*0x1f2fe14*/ bool MoveNext();
                            /*0x1ffc854*/ Value System.Collections.Generic.IEnumerator<Value>.get_Current();
                            /*0x1f309e4*/ void System.Collections.IEnumerator.Reset();
                            /*0x1f30214*/ object System.Collections.IEnumerator.get_Current();
                            /*0x1f30214*/ System.Collections.Generic.IEnumerator<Value> System.Collections.Generic.IEnumerable<Value>.GetEnumerator();
                            /*0x1f30214*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                        }
                    }

                    namespace Comparers
                    {
                        class Hash128Comparer : System.Collections.Generic.IComparer<UnityEngine.Hash128>
                        {
                            /*0x2adfebc*/ Hash128Comparer();
                            /*0x2adfe90*/ int Compare(UnityEngine.Hash128 x, UnityEngine.Hash128 y);
                        }
                    }
                }
            }

            namespace Compression
            {
                namespace Zlib
                {
                    enum BlockState
                    {
                        NeedMore = 0,
                        BlockDone = 1,
                        FinishStarted = 2,
                        FinishDone = 3,
                    }

                    enum DeflateFlavor
                    {
                        Store = 0,
                        Fast = 1,
                        Slow = 2,
                    }

                    class DeflateManager
                    {
                        static /*0x0*/ int MEM_LEVEL_MAX;
                        static /*0x4*/ int MEM_LEVEL_DEFAULT;
                        static /*0x8*/ string[] _ErrorMessage;
                        static /*0x10*/ int PRESET_DICT;
                        static /*0x14*/ int INIT_STATE;
                        static /*0x18*/ int BUSY_STATE;
                        static /*0x1c*/ int FINISH_STATE;
                        static /*0x20*/ int Z_DEFLATED;
                        static /*0x24*/ int STORED_BLOCK;
                        static /*0x28*/ int STATIC_TREES;
                        static /*0x2c*/ int DYN_TREES;
                        static /*0x30*/ int Z_BINARY;
                        static /*0x34*/ int Z_ASCII;
                        static /*0x38*/ int Z_UNKNOWN;
                        static /*0x3c*/ int Buf_size;
                        static /*0x40*/ int MIN_MATCH;
                        static /*0x44*/ int MAX_MATCH;
                        static /*0x48*/ int MIN_LOOKAHEAD;
                        static /*0x4c*/ int HEAP_SIZE;
                        static /*0x50*/ int END_BLOCK;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.CompressFunc DeflateFunction;
                        /*0x18*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x20*/ int status;
                        /*0x28*/ byte[] pending;
                        /*0x30*/ int nextPending;
                        /*0x34*/ int pendingCount;
                        /*0x38*/ sbyte data_type;
                        /*0x3c*/ int last_flush;
                        /*0x40*/ int w_size;
                        /*0x44*/ int w_bits;
                        /*0x48*/ int w_mask;
                        /*0x50*/ byte[] window;
                        /*0x58*/ int window_size;
                        /*0x60*/ short[] prev;
                        /*0x68*/ short[] head;
                        /*0x70*/ int ins_h;
                        /*0x74*/ int hash_size;
                        /*0x78*/ int hash_bits;
                        /*0x7c*/ int hash_mask;
                        /*0x80*/ int hash_shift;
                        /*0x84*/ int block_start;
                        /*0x88*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config config;
                        /*0x90*/ int match_length;
                        /*0x94*/ int prev_match;
                        /*0x98*/ int match_available;
                        /*0x9c*/ int strstart;
                        /*0xa0*/ int match_start;
                        /*0xa4*/ int lookahead;
                        /*0xa8*/ int prev_length;
                        /*0xac*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel compressionLevel;
                        /*0xb0*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy compressionStrategy;
                        /*0xb8*/ short[] dyn_ltree;
                        /*0xc0*/ short[] dyn_dtree;
                        /*0xc8*/ short[] bl_tree;
                        /*0xd0*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeLiterals;
                        /*0xd8*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeDistances;
                        /*0xe0*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeBitLengths;
                        /*0xe8*/ short[] bl_count;
                        /*0xf0*/ int[] heap;
                        /*0xf8*/ int heap_len;
                        /*0xfc*/ int heap_max;
                        /*0x100*/ sbyte[] depth;
                        /*0x108*/ int _lengthOffset;
                        /*0x10c*/ int lit_bufsize;
                        /*0x110*/ int last_lit;
                        /*0x114*/ int _distanceOffset;
                        /*0x118*/ int opt_len;
                        /*0x11c*/ int static_len;
                        /*0x120*/ int matches;
                        /*0x124*/ int last_eob_len;
                        /*0x128*/ short bi_buf;
                        /*0x12c*/ int bi_valid;
                        /*0x130*/ bool Rfc1950BytesEmitted;
                        /*0x131*/ bool _WantRfc1950HeaderBytes;

                        static /*0x2ae42c4*/ DeflateManager();
                        static /*0x2ae07dc*/ bool _IsSmaller(short[] tree, int n, int m, sbyte[] depth);
                        /*0x2adfec4*/ DeflateManager();
                        /*0x2ae0110*/ void _InitializeLazyMatch();
                        /*0x2ae0368*/ void _InitializeTreeData();
                        /*0x2ae0464*/ void _InitializeBlocks();
                        /*0x2ae0634*/ void pqdownheap(short[] tree, int k);
                        /*0x2ae0868*/ void scan_tree(short[] tree, int max_code);
                        /*0x2ae0a94*/ int build_bl_tree();
                        /*0x2ae0bf4*/ void send_all_trees(int lcodes, int dcodes, int blcodes);
                        /*0x2ae0e5c*/ void send_tree(short[] tree, int max_code);
                        /*0x2ae10b0*/ void put_bytes(byte[] p, int start, int len);
                        /*0x2ae106c*/ void send_code(int c, short[] tree);
                        /*0x2ae0d30*/ void send_bits(int value, int length);
                        /*0x2ae10f8*/ void _tr_align();
                        /*0x2ae1310*/ bool _tr_tally(int dist, int lc);
                        /*0x2ae1620*/ void send_compressed_block(short[] ltree, short[] dtree);
                        /*0x2ae191c*/ void set_data_type();
                        /*0x2ae1244*/ void bi_flush();
                        /*0x2ae1a9c*/ void bi_windup();
                        /*0x2ae1b4c*/ void copy_block(int buf, int len, bool header);
                        /*0x2ae1c64*/ void flush_block_only(bool eof);
                        /*0x2ae1ec4*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateNone(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x2ae22a4*/ void _tr_stored_block(int buf, int stored_len, bool eof);
                        /*0x2ae1ca8*/ void _tr_flush_block(int buf, int stored_len, bool eof);
                        /*0x2ae2040*/ void _fillWindow();
                        /*0x2ae2348*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateFast(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x2ae2c7c*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateSlow(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x2ae27bc*/ int longest_match(int cur_match);
                        /*0x2ae31f8*/ bool get_WantRfc1950HeaderBytes();
                        /*0x2ae3200*/ void set_WantRfc1950HeaderBytes(bool value);
                        /*0x2ae3208*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int bits, Best.HTTP.Shared.Compression.Zlib.CompressionStrategy compressionStrategy);
                        /*0x2ae32a0*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int windowBits, int memLevel, Best.HTTP.Shared.Compression.Zlib.CompressionStrategy strategy);
                        /*0x2ae35e8*/ void Reset();
                        /*0x2ae0270*/ void SetDeflater();
                        /*0x2ae3af8*/ int Deflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);

                        class CompressFunc : System.MulticastDelegate
                        {
                            /*0x2ae3a58*/ CompressFunc(object object, nint method);
                            /*0x2ae45d0*/ Best.HTTP.Shared.Compression.Zlib.BlockState Invoke(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        }

                        class Config
                        {
                            static /*0x0*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config[] Table;
                            /*0x10*/ int GoodLength;
                            /*0x14*/ int MaxLazy;
                            /*0x18*/ int NiceLength;
                            /*0x1c*/ int MaxChainLength;
                            /*0x20*/ Best.HTTP.Shared.Compression.Zlib.DeflateFlavor Flavor;

                            static /*0x2ae4634*/ Config();
                            static /*0x2ae01f4*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config Lookup(Best.HTTP.Shared.Compression.Zlib.CompressionLevel level);
                            /*0x2ae45e4*/ Config(int goodLength, int maxLazy, int niceLength, int maxChainLength, Best.HTTP.Shared.Compression.Zlib.DeflateFlavor flavor);
                        }
                    }

                    class DeflateStream : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream _baseStream;
                        /*0x30*/ System.IO.Stream _innerStream;
                        /*0x38*/ bool _disposed;

                        /*0x2ae4a28*/ DeflateStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen);
                        /*0x2ae4b04*/ DeflateStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen, int windowBits);
                        /*0x2ae4d38*/ void set_FlushMode(Best.HTTP.Shared.Compression.Zlib.FlushType value);
                        /*0x2ae4da4*/ void Dispose(bool disposing);
                        /*0x2ae4e64*/ bool get_CanRead();
                        /*0x2ae4edc*/ bool get_CanSeek();
                        /*0x2ae4ee4*/ bool get_CanWrite();
                        /*0x2ae4f5c*/ void Flush();
                        /*0x2ae4fd0*/ long get_Length();
                        /*0x2ae5008*/ long get_Position();
                        /*0x2ae5058*/ void set_Position(long value);
                        /*0x2ae5090*/ int Read(byte[] buffer, int offset, int count);
                        /*0x2ae5104*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x2ae513c*/ void SetLength(long value);
                        /*0x2ae515c*/ void Write(byte[] buffer, int offset, int count);
                    }

                    class GZipStream : System.IO.Stream
                    {
                        static /*0x0*/ System.DateTime _unixEpoch;
                        static /*0x8*/ System.Text.Encoding iso8859dash1;
                        /*0x28*/ System.Nullable<System.DateTime> LastModified;
                        /*0x38*/ int _headerByteCount;
                        /*0x40*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream _baseStream;
                        /*0x48*/ bool _disposed;
                        /*0x49*/ bool _firstReadDone;
                        /*0x50*/ string _FileName;
                        /*0x58*/ string _Comment;
                        /*0x60*/ int _Crc32;

                        static /*0x2ae5ecc*/ GZipStream();
                        /*0x2ae53f0*/ GZipStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen);
                        /*0x2ae51d0*/ string get_Comment();
                        /*0x2ae51d8*/ void set_Comment(string value);
                        /*0x2ae5234*/ string get_FileName();
                        /*0x2ae523c*/ void set_FileName(string value);
                        /*0x2ae54b4*/ void set_FlushMode(Best.HTTP.Shared.Compression.Zlib.FlushType value);
                        /*0x2ae5520*/ void Dispose(bool disposing);
                        /*0x2ae5628*/ bool get_CanRead();
                        /*0x2ae56a0*/ bool get_CanSeek();
                        /*0x2ae56a8*/ bool get_CanWrite();
                        /*0x2ae5720*/ void Flush();
                        /*0x2ae5794*/ long get_Length();
                        /*0x2ae57cc*/ long get_Position();
                        /*0x2ae582c*/ void set_Position(long value);
                        /*0x2ae5864*/ int Read(byte[] buffer, int offset, int count);
                        /*0x2ae5928*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x2ae5960*/ void SetLength(long value);
                        /*0x2ae5980*/ void Write(byte[] buffer, int offset, int count);
                        /*0x2ae5a7c*/ int EmitHeader();
                    }

                    class InflateBlocks
                    {
                        static /*0x0*/ int[] border;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.InflateBlocks.InflateBlockMode mode;
                        /*0x14*/ int left;
                        /*0x18*/ int table;
                        /*0x1c*/ int index;
                        /*0x20*/ int[] blens;
                        /*0x28*/ int[] bb;
                        /*0x30*/ int[] tb;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.InflateCodes codes;
                        /*0x40*/ int last;
                        /*0x48*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x50*/ int bitk;
                        /*0x54*/ int bitb;
                        /*0x58*/ int[] hufts;
                        /*0x60*/ byte[] window;
                        /*0x68*/ int end;
                        /*0x6c*/ int readAt;
                        /*0x70*/ int writeAt;
                        /*0x78*/ object checkfn;
                        /*0x80*/ uint check;
                        /*0x88*/ Best.HTTP.Shared.Compression.Zlib.InfTree inftree;

                        static /*0x2ae83b0*/ InflateBlocks();
                        /*0x2ae5f80*/ InflateBlocks(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, object checkfn, int w);
                        /*0x2ae6138*/ uint Reset();
                        /*0x2ae61e8*/ int Process(int r);
                        /*0x2ae8328*/ void Free();
                        /*0x2ae7234*/ int Flush(int r);

                        enum InflateBlockMode
                        {
                            TYPE = 0,
                            LENS = 1,
                            STORED = 2,
                            TABLE = 3,
                            BTREE = 4,
                            DTREE = 5,
                            CODES = 6,
                            DRY = 7,
                            DONE = 8,
                            BAD = 9,
                        }
                    }

                    class InternalInflateConstants
                    {
                        static /*0x0*/ int[] InflateMask;

                        static /*0x2ae8450*/ InternalInflateConstants();
                    }

                    class InflateCodes
                    {
                        /*0x10*/ int mode;
                        /*0x14*/ int len;
                        /*0x18*/ int[] tree;
                        /*0x20*/ int tree_index;
                        /*0x24*/ int need;
                        /*0x28*/ int lit;
                        /*0x2c*/ int bitsToGet;
                        /*0x30*/ int dist;
                        /*0x34*/ byte lbits;
                        /*0x35*/ byte dbits;
                        /*0x38*/ int[] ltree;
                        /*0x40*/ int ltree_index;
                        /*0x48*/ int[] dtree;
                        /*0x50*/ int dtree_index;

                        /*0x2ae6128*/ InflateCodes();
                        /*0x2ae74b0*/ void Init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index);
                        /*0x2ae788c*/ int Process(Best.HTTP.Shared.Compression.Zlib.InflateBlocks blocks, int r);
                        /*0x2ae84f0*/ int InflateFast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, Best.HTTP.Shared.Compression.Zlib.InflateBlocks s, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                    }

                    class InflateManager
                    {
                        static /*0x0*/ byte[] mark;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.InflateManager.InflateManagerMode mode;
                        /*0x18*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x20*/ int method;
                        /*0x24*/ uint computedCheck;
                        /*0x28*/ uint expectedCheck;
                        /*0x2c*/ int marker;
                        /*0x30*/ bool _handleRfc1950HeaderBytes;
                        /*0x34*/ int wbits;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.InflateBlocks blocks;

                        static /*0x2ae9738*/ InflateManager();
                        /*0x2ae8e4c*/ InflateManager(bool expectRfc1950HeaderBytes);
                        /*0x2ae8e44*/ bool get_HandleRfc1950HeaderBytes();
                        /*0x2ae8e7c*/ int Reset();
                        /*0x2ae8ed0*/ int End();
                        /*0x2ae8f00*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, int w);
                        /*0x2ae9034*/ int Inflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);

                        enum InflateManagerMode
                        {
                            METHOD = 0,
                            FLAG = 1,
                            DICT4 = 2,
                            DICT3 = 3,
                            DICT2 = 4,
                            DICT1 = 5,
                            DICT0 = 6,
                            BLOCKS = 7,
                            CHECK4 = 8,
                            CHECK3 = 9,
                            CHECK2 = 10,
                            CHECK1 = 11,
                            DONE = 12,
                            BAD = 13,
                        }
                    }

                    class InfTree
                    {
                        static /*0x0*/ int[] fixed_tl;
                        static /*0x8*/ int[] fixed_td;
                        static /*0x10*/ int[] cplens;
                        static /*0x18*/ int[] cplext;
                        static /*0x20*/ int[] cpdist;
                        static /*0x28*/ int[] cpdext;
                        /*0x10*/ int[] hn;
                        /*0x18*/ int[] v;
                        /*0x20*/ int[] c;
                        /*0x28*/ int[] r;
                        /*0x30*/ int[] u;
                        /*0x38*/ int[] x;

                        static /*0x2aea124*/ InfTree();
                        static /*0x2ae73d0*/ int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x2ae6130*/ InfTree();
                        /*0x2ae97d8*/ int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v);
                        /*0x2ae7518*/ int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x2ae7634*/ int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x2ae9f5c*/ void initWorkArea(int vsize);
                    }

                    enum FlushType
                    {
                        None = 0,
                        Partial = 1,
                        Sync = 2,
                        Full = 3,
                        Finish = 4,
                    }

                    enum CompressionLevel
                    {
                        None = 0,
                        Level0 = 0,
                        BestSpeed = 1,
                        Level1 = 1,
                        Level2 = 2,
                        Level3 = 3,
                        Level4 = 4,
                        Level5 = 5,
                        Default = 6,
                        Level6 = 6,
                        Level7 = 7,
                        Level8 = 8,
                        BestCompression = 9,
                        Level9 = 9,
                    }

                    enum CompressionStrategy
                    {
                        Default = 0,
                        Filtered = 1,
                        HuffmanOnly = 2,
                    }

                    enum CompressionMode
                    {
                        Compress = 0,
                        Decompress = 1,
                    }

                    class ZlibException : System.Exception
                    {
                        /*0x2ae3580*/ ZlibException(string s);
                    }

                    class SharedUtils
                    {
                        static /*0x2ae9f54*/ int URShift(int number, int bits);
                    }

                    class InternalConstants
                    {
                        static /*0x0*/ int MAX_BITS;
                        static /*0x4*/ int BL_CODES;
                        static /*0x8*/ int D_CODES;
                        static /*0xc*/ int LITERALS;
                        static /*0x10*/ int LENGTH_CODES;
                        static /*0x14*/ int L_CODES;
                        static /*0x18*/ int MAX_BL_BITS;
                        static /*0x1c*/ int REP_3_6;
                        static /*0x20*/ int REPZ_3_10;
                        static /*0x24*/ int REPZ_11_138;

                        static /*0x2aea328*/ InternalConstants();
                    }

                    class StaticTree
                    {
                        static /*0x0*/ short[] lengthAndLiteralsTreeCodes;
                        static /*0x8*/ short[] distTreeCodes;
                        static /*0x10*/ Best.HTTP.Shared.Compression.Zlib.StaticTree Literals;
                        static /*0x18*/ Best.HTTP.Shared.Compression.Zlib.StaticTree Distances;
                        static /*0x20*/ Best.HTTP.Shared.Compression.Zlib.StaticTree BitLengths;
                        /*0x10*/ short[] treeCodes;
                        /*0x18*/ int[] extraBits;
                        /*0x20*/ int extraBase;
                        /*0x24*/ int elems;
                        /*0x28*/ int maxLength;

                        static /*0x2aea3f8*/ StaticTree();
                        /*0x2aea38c*/ StaticTree(short[] treeCodes, int[] extraBits, int extraBase, int elems, int maxLength);
                    }

                    class Adler
                    {
                        static /*0x0*/ uint BASE;
                        static /*0x4*/ int NMAX;

                        static /*0x2aea64c*/ Adler();
                        static /*0x2ae36f8*/ uint Adler32(uint adler, byte[] buf, int index, int len);
                    }

                    enum ZlibStreamFlavor
                    {
                        ZLIB = 1950,
                        DEFLATE = 1951,
                        GZIP = 1952,
                    }

                    class ZlibBaseStream : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _z;
                        /*0x30*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream.StreamMode _streamMode;
                        /*0x34*/ Best.HTTP.Shared.Compression.Zlib.FlushType _flushMode;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor _flavor;
                        /*0x3c*/ Best.HTTP.Shared.Compression.Zlib.CompressionMode _compressionMode;
                        /*0x40*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel _level;
                        /*0x44*/ bool _leaveOpen;
                        /*0x48*/ byte[] _workingBuffer;
                        /*0x50*/ int _bufferSize;
                        /*0x54*/ int windowBitsMax;
                        /*0x58*/ byte[] _buf1;
                        /*0x60*/ System.IO.Stream _stream;
                        /*0x68*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy Strategy;
                        /*0x70*/ Best.HTTP.Shared.Compression.Crc.CRC32 crc;
                        /*0x78*/ string _GzipFileName;
                        /*0x80*/ string _GzipComment;
                        /*0x88*/ System.DateTime _GzipMtime;
                        /*0x90*/ int _gzipHeaderByteCount;
                        /*0x94*/ bool nomoreinput;

                        /*0x2ae4afc*/ ZlibBaseStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode compressionMode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor flavor, bool leaveOpen);
                        /*0x2ae4be4*/ ZlibBaseStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode compressionMode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor flavor, bool leaveOpen, int windowBits);
                        /*0x2ae5614*/ int get_Crc32();
                        /*0x2ae5a6c*/ bool get__wantCompress();
                        /*0x2aea69c*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec get_z();
                        /*0x2aea770*/ byte[] get_workingBuffer();
                        /*0x2aea7f8*/ void Write(byte[] buffer, int offset, int count);
                        /*0x2aeaa48*/ void finish();
                        /*0x2aeb18c*/ void end();
                        /*0x2aeb24c*/ void Close();
                        /*0x2aeb30c*/ void Flush();
                        /*0x2aeb32c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x2aeb364*/ void SetLength(long value);
                        /*0x2aeb394*/ string ReadZeroTerminatedString();
                        /*0x2aeb550*/ int _ReadAndValidateGzipHeader();
                        /*0x2aeb944*/ int Read(byte[] buffer, int offset, int count);
                        /*0x2aebd98*/ bool get_CanRead();
                        /*0x2aebdb4*/ bool get_CanSeek();
                        /*0x2aebdd0*/ bool get_CanWrite();
                        /*0x2aebdec*/ long get_Length();
                        /*0x2aebe08*/ long get_Position();
                        /*0x2aebe40*/ void set_Position(long value);

                        enum StreamMode
                        {
                            Writer = 0,
                            Reader = 1,
                            Undefined = 2,
                        }
                    }

                    class ZlibCodec
                    {
                        /*0x10*/ byte[] InputBuffer;
                        /*0x18*/ int NextIn;
                        /*0x1c*/ int AvailableBytesIn;
                        /*0x20*/ long TotalBytesIn;
                        /*0x28*/ byte[] OutputBuffer;
                        /*0x30*/ int NextOut;
                        /*0x34*/ int AvailableBytesOut;
                        /*0x38*/ long TotalBytesOut;
                        /*0x40*/ string Message;
                        /*0x48*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager dstate;
                        /*0x50*/ Best.HTTP.Shared.Compression.Zlib.InflateManager istate;
                        /*0x58*/ uint _Adler32;
                        /*0x5c*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel CompressLevel;
                        /*0x60*/ int WindowBits;
                        /*0x64*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy Strategy;

                        /*0x2aebe78*/ ZlibCodec();
                        /*0x2aebe8c*/ int InitializeInflate(int windowBits, bool expectRfc1950Header);
                        /*0x2aebf74*/ int Inflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x2aebfd0*/ int EndInflate();
                        /*0x2aec058*/ int InitializeDeflate(Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int bits, bool wantRfc1950Header);
                        /*0x2aec068*/ int _InternalInitializeDeflate(bool wantRfc1950Header);
                        /*0x2aec150*/ int Deflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x2aec1ac*/ int EndDeflate();
                        /*0x2aec218*/ void flush_pending();
                        /*0x2aec3a4*/ int read_buf(byte[] buf, int start, int size);
                    }

                    class ZTree
                    {
                        static /*0x0*/ int HEAP_SIZE;
                        static /*0x8*/ int[] ExtraLengthBits;
                        static /*0x10*/ int[] ExtraDistanceBits;
                        static /*0x18*/ int[] extra_blbits;
                        static /*0x20*/ sbyte[] bl_order;
                        static /*0x28*/ sbyte[] _dist_code;
                        static /*0x30*/ sbyte[] LengthCode;
                        static /*0x38*/ int[] LengthBase;
                        static /*0x40*/ int[] DistanceBase;
                        /*0x10*/ short[] dyn_tree;
                        /*0x18*/ int max_code;
                        /*0x20*/ Best.HTTP.Shared.Compression.Zlib.StaticTree staticTree;

                        static /*0x2aecf58*/ ZTree();
                        static /*0x2aec49c*/ int DistanceCode(int dist);
                        static /*0x2aecd50*/ void gen_codes(short[] tree, int max_code, short[] bl_count);
                        static /*0x2aecf28*/ int bi_reverse(int code, int len);
                        /*0x2aecf50*/ ZTree();
                        /*0x2aec558*/ void gen_bitlen(Best.HTTP.Shared.Compression.Zlib.DeflateManager s);
                        /*0x2aec8c4*/ void build_tree(Best.HTTP.Shared.Compression.Zlib.DeflateManager s);
                    }
                }

                namespace Crc
                {
                    class CRC32
                    {
                        /*0x10*/ uint dwPolynomial;
                        /*0x18*/ long _TotalBytesRead;
                        /*0x20*/ bool reverseBits;
                        /*0x28*/ uint[] crc32Table;
                        /*0x30*/ uint _register;

                        static /*0x2aed34c*/ uint ReverseBits(uint data);
                        static /*0x2aed354*/ byte ReverseBits(byte data);
                        /*0x2aed4c4*/ CRC32();
                        /*0x2aed4f8*/ CRC32(bool reverseBits);
                        /*0x2aed538*/ CRC32(int polynomial, bool reverseBits);
                        /*0x2aed23c*/ long get_TotalBytesRead();
                        /*0x2aed244*/ int get_Crc32Result();
                        /*0x2aed250*/ void SlurpBlock(byte[] block, int offset, int count);
                        /*0x2aed3a0*/ void GenerateLookupTable();
                    }
                }
            }
        }

        namespace SecureProtocol
        {
            namespace Org
            {
                namespace BouncyCastle
                {
                    namespace Utilities
                    {
                        class Arrays
                        {
                            static /*0x0*/ byte[] EmptyBytes;
                            static /*0x8*/ int[] EmptyInts;

                            static /*0x2aee708*/ Arrays();
                            static /*0x2aed574*/ bool AreAllZeroes(byte[] buf, int off, int len);
                            static /*0x2aed5d8*/ bool AreEqual(byte[] a, byte[] b);
                            static /*0x2aed6b8*/ bool ConstantTimeAreEqual(byte[] a, byte[] b);
                            static /*0x2aed7c4*/ bool ConstantTimeAreEqual(System.Span<byte> a, System.Span<byte> b);
                            static /*0x2aed898*/ bool AreEqual(int[] a, int[] b);
                            static /*0x2aed658*/ bool HaveSameContents(byte[] a, byte[] b);
                            static /*0x2aed918*/ bool HaveSameContents(int[] a, int[] b);
                            static /*0x2aed978*/ int GetHashCode(byte[] data);
                            static /*0x2aed9c8*/ int GetHashCode(byte[] data, int off, int len);
                            static /*0x2aeda20*/ int GetHashCode(int[] data);
                            static /*0x2aeda70*/ int GetHashCode(uint[] data, int off, int len);
                            static /*0x2aedac8*/ int GetHashCode(ulong[] data, int off, int len);
                            static /*0x2aedb28*/ byte[] Clone(byte[] data);
                            static /*0x2aedba0*/ int[] Clone(int[] data);
                            static /*0x2aedc18*/ uint[] Clone(uint[] data);
                            static /*0x2aedc90*/ ulong[] Clone(ulong[] data);
                            static /*0x2aedd08*/ bool Contains(short[] a, short n);
                            static /*0x2aedd6c*/ bool Contains(int[] a, int n);
                            static /*0x2aeddcc*/ void Fill(byte[] buf, byte b);
                            static /*0x2aede1c*/ void Fill(byte[] buf, int from, int to, byte b);
                            static /*0x2aede68*/ byte[] CopyOf(byte[] data, int newLength);
                            static /*0x2aedf20*/ int[] CopyOf(int[] data, int newLength);
                            static /*0x2aedfd8*/ uint[] CopyOf(uint[] data, int newLength);
                            static /*0x2aee090*/ byte[] CopyOfRange(byte[] data, int from, int to);
                            static /*0x2aee188*/ int GetLength(int from, int to);
                            static /*0x2aee224*/ short[] Append(short[] a, short b);
                            static /*0x2aee2f0*/ int[] Append(int[] a, int b);
                            static /*0x2aee3bc*/ byte[] Concatenate(byte[] a, byte[] b);
                            static /*0x2aee4b0*/ byte[] Prepend(byte[] a, byte b);
                            static /*0x2aee564*/ short[] Prepend(short[] a, short b);
                            static /*0x2aee618*/ byte[] Reverse(byte[] a);
                            static /*0x2aee6c4*/ bool IsNullOrContainsNull(object[] array);
                        }

                        class BigIntegers
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Zero;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;

                            static /*0x2aef99c*/ BigIntegers();
                            static /*0x2aee7bc*/ byte[] AsUnsignedByteArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            static /*0x2aee7d0*/ byte[] AsUnsignedByteArray(int length, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            static /*0x2aee8e4*/ void AsUnsignedByteArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, System.Span<byte> buf);
                            static /*0x2aeeac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateRandomBigInteger(int bitLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom secureRandom);
                            static /*0x2aeeb30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateRandomInRange(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger min, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger max, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                            static /*0x2aeed74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModOddInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger M, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X);
                            static /*0x2aef328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModOddInverseVar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger M, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X);
                            static /*0x2aef988*/ int GetUnsignedByteLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                        }

                        class Enums
                        {
                            static /*0x1ffc854*/ TEnum GetEnumValue<TEnum>(string s);
                            static /*0x1f327a0*/ TEnum[] GetEnumValues<TEnum>();
                            static /*0x1ffc854*/ TEnum GetArbitraryValue<TEnum>();
                        }

                        interface IMemoable
                        {
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            /*0x1f30ebc*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                        }

                        class Integers
                        {
                            static /*0x0*/ byte[] DeBruijnTZ;

                            static /*0x2aefbf8*/ Integers();
                            static /*0x2aefa38*/ int HighestOneBit(int i);
                            static /*0x2aefaa0*/ uint HighestOneBit(uint i);
                            static /*0x2aefabc*/ int NumberOfLeadingZeros(int i);
                            static /*0x2aefb34*/ int NumberOfTrailingZeros(int i);
                            static /*0x2aefbd8*/ int RotateLeft(int i, int distance);
                            static /*0x2aefbe4*/ uint RotateLeft(uint i, int distance);
                            static /*0x2aefbf0*/ uint RotateRight(uint i, int distance);
                        }

                        class Longs
                        {
                            static /*0x0*/ byte[] DeBruijnTZ;

                            static /*0x2aefda4*/ Longs();
                            static /*0x2aefc98*/ int NumberOfLeadingZeros(long i);
                            static /*0x2aefd00*/ ulong Reverse(ulong i);
                            static /*0x2aefd90*/ ulong ReverseBytes(ulong i);
                            static /*0x2aefd98*/ ulong RotateLeft(ulong i, int distance);
                        }

                        class MemoableResetException : System.InvalidCastException
                        {
                            /*0x2aefe44*/ MemoableResetException();
                            /*0x2aefe4c*/ MemoableResetException(string message);
                            /*0x2aefe54*/ MemoableResetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Objects
                        {
                            static /*0x2aefe5c*/ int GetHashCode(object obj);
                        }

                        class Platform
                        {
                            static /*0x0*/ System.Globalization.CompareInfo InvariantCompareInfo;

                            static /*0x2af0048*/ Platform();
                            static /*0x2aefe70*/ bool EqualsIgnoreCase(string a, string b);
                            static /*0x2aefe7c*/ string GetEnvironmentVariable(string variable);
                            static /*0x2aeff04*/ int IndexOf(string source, char value, int startIndex);
                            static /*0x2aeff94*/ bool EndsWith(string source, string suffix);
                            static /*0x2af001c*/ string GetTypeName(object obj);
                        }

                        class Spans
                        {
                            static /*0x1ffc854*/ void CopyFrom<T>(System.Span<T> output, System.ReadOnlySpan<T> input);
                            static /*0x1ffc854*/ System.Span<T> FromNullable<T>(T[] array, int start);
                        }

                        class Strings
                        {
                            static /*0x2af00e0*/ string FromByteArray(byte[] bs);
                            static /*0x2af01d0*/ byte[] ToByteArray(string s);
                            static /*0x2af02bc*/ string FromAsciiByteArray(byte[] bytes);
                            static /*0x2af02ec*/ byte[] ToAsciiByteArray(string s);
                            static /*0x2af031c*/ string FromUtf8ByteArray(byte[] bytes);
                            static /*0x2af034c*/ byte[] ToUtf8ByteArray(string s);
                        }

                        namespace IO
                        {
                            class BaseInputStream : System.IO.Stream
                            {
                                /*0x2af072c*/ BaseInputStream();
                                /*0x2af037c*/ bool get_CanRead();
                                /*0x2af0384*/ bool get_CanSeek();
                                /*0x2af038c*/ bool get_CanWrite();
                                /*0x2af0394*/ void Flush();
                                /*0x2af0398*/ long get_Length();
                                /*0x2af03d0*/ long get_Position();
                                /*0x2af0408*/ void set_Position(long value);
                                /*0x2af0440*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2af064c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x2af0684*/ void SetLength(long value);
                                /*0x2af06bc*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2af06f4*/ void Write(System.ReadOnlySpan<byte> buffer);
                            }

                            class BaseOutputStream : System.IO.Stream
                            {
                                /*0x2af09c8*/ BaseOutputStream();
                                /*0x2af0784*/ bool get_CanRead();
                                /*0x2af078c*/ bool get_CanSeek();
                                /*0x2af0794*/ bool get_CanWrite();
                                /*0x2af079c*/ void Flush();
                                /*0x2af07a0*/ long get_Length();
                                /*0x2af07d8*/ long get_Position();
                                /*0x2af0810*/ void set_Position(long value);
                                /*0x2af0848*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2af0880*/ int Read(System.Span<byte> buffer);
                                /*0x2af08b8*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x2af08f0*/ void SetLength(long value);
                                /*0x2af0928*/ void Write(byte[] buffer, int offset, int count);
                            }

                            class FilterStream : System.IO.Stream
                            {
                                /*0x28*/ System.IO.Stream s;

                                /*0x2af0a20*/ FilterStream(System.IO.Stream s);
                                /*0x2af0ae8*/ bool get_CanRead();
                                /*0x2af0b04*/ bool get_CanSeek();
                                /*0x2af0b20*/ bool get_CanWrite();
                                /*0x2af0b3c*/ void Flush();
                                /*0x2af0b5c*/ long get_Length();
                                /*0x2af0b78*/ long get_Position();
                                /*0x2af0b94*/ void set_Position(long value);
                                /*0x2af0bb4*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2af0bd4*/ int Read(System.Span<byte> buffer);
                                /*0x2af0bf4*/ int ReadByte();
                                /*0x2af0c14*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x2af0c34*/ void SetLength(long value);
                                /*0x2af0c54*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2af0c74*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x2af0c94*/ void WriteByte(byte value);
                                /*0x2af0cb4*/ void Dispose(bool disposing);
                            }

                            class Streams
                            {
                                static /*0x2af0cf4*/ void PipeAll(System.IO.Stream inStr, System.IO.Stream outStr);
                                static /*0x2af0d14*/ byte[] ReadAll(System.IO.Stream inStr);
                                static /*0x2af0da0*/ int ReadFully(System.IO.Stream inStr, byte[] buf);
                                static /*0x2af0db8*/ int ReadFully(System.IO.Stream inStr, byte[] buf, int off, int len);
                                static /*0x2af0e38*/ int ReadFully(System.IO.Stream inStr, System.Span<byte> buffer);
                                static /*0x2af0584*/ void ValidateBufferArguments(byte[] buffer, int offset, int count);
                            }

                            class TeeInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                            {
                                /*0x28*/ System.IO.Stream input;
                                /*0x30*/ System.IO.Stream tee;

                                /*0x2af0f44*/ TeeInputStream(System.IO.Stream input, System.IO.Stream tee);
                                /*0x2af0f84*/ void Dispose(bool disposing);
                                /*0x2af0fd4*/ int Read(byte[] buffer, int offset, int count);
                                /*0x2af104c*/ int Read(System.Span<byte> buffer);
                                /*0x2af1178*/ int ReadByte();
                            }
                        }

                        namespace Encoders
                        {
                            class Hex
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Encoders.HexEncoder encoder;

                                static /*0x2af1700*/ Hex();
                                static /*0x2af11d4*/ string ToHexString(byte[] data);
                                static /*0x2af1238*/ string ToHexString(byte[] data, int off, int length);
                                static /*0x2af12a8*/ byte[] Encode(byte[] data, int off, int length);
                                static /*0x2af1450*/ byte[] DecodeStrict(string str);
                            }

                            class HexEncoder
                            {
                                /*0x10*/ byte[] encodingTable;
                                /*0x18*/ byte[] decodingTable;

                                /*0x2af1778*/ HexEncoder();
                                /*0x2af182c*/ void InitialiseDecodingTable();
                                /*0x2af1988*/ int Encode(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2af1378*/ int Encode(byte[] buf, int off, int len, System.IO.Stream outStream);
                                /*0x2af1a78*/ int Encode(System.ReadOnlySpan<byte> data, System.IO.Stream outStream);
                                /*0x2af14c4*/ byte[] DecodeStrict(string str, int off, int len);
                            }
                        }

                        namespace Date
                        {
                            class DateTimeUtilities
                            {
                                static /*0x0*/ System.DateTime UnixEpoch;
                                static /*0x8*/ long MaxUnixMs;
                                static /*0x10*/ long MinUnixMs;

                                static /*0x2af1ff4*/ DateTimeUtilities();
                                static /*0x2af1df4*/ long DateTimeToUnixMs(System.DateTime dateTime);
                                static /*0x2af1f70*/ long CurrentUnixMs();
                            }
                        }

                        namespace Collections
                        {
                            class CollectionUtilities
                            {
                                static /*0x1ffc854*/ T GetValueOrKey<T>(System.Collections.Generic.IDictionary<T, T> d, T k);
                                static /*0x1ffc854*/ V GetValueOrNull<K, V>(System.Collections.Generic.IDictionary<K, V> d, K k);
                                static /*0x1f327cc*/ System.Collections.Generic.IDictionary<K, V> ReadOnly<K, V>(System.Collections.Generic.IDictionary<K, V> d);
                                static /*0x1f327cc*/ string ToString<T>(System.Collections.Generic.IEnumerable<T> c);
                            }

                            class ReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
                            {
                                /*0x1f309e4*/ ReadOnlyCollection();
                                /*0x1f30214*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                                /*0x1f2fe14*/ bool get_IsReadOnly();
                                /*0x1ffc854*/ void Add(T item);
                                /*0x1f309e4*/ void Clear();
                                /*0x1ffc854*/ bool Remove(T item);
                                /*0x1ffc854*/ bool Contains(T item);
                                /*0x1f2ffc8*/ int get_Count();
                                /*0x1f30ee8*/ void CopyTo(T[] array, int arrayIndex);
                                /*0x1f30214*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                            }

                            class ReadOnlyCollectionProxy<T> : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Collections.ReadOnlyCollection<T>
                            {
                                /*0x0*/ System.Collections.Generic.ICollection<T> m_target;

                                /*0x1f30ebc*/ ReadOnlyCollectionProxy(System.Collections.Generic.ICollection<T> target);
                                /*0x1ffc854*/ bool Contains(T item);
                                /*0x1f2ffc8*/ int get_Count();
                                /*0x1f30ee8*/ void CopyTo(T[] array, int arrayIndex);
                                /*0x1f30214*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                            }

                            class ReadOnlyDictionary<K, V> : System.Collections.Generic.IDictionary<K, V>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>, System.Collections.IEnumerable
                            {
                                /*0x1f309e4*/ ReadOnlyDictionary();
                                /*0x1ffc854*/ V get_Item(K key);
                                /*0x1ffc854*/ void set_Item(K key, V value);
                                /*0x1f30214*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                                /*0x1f2fe14*/ bool get_IsReadOnly();
                                /*0x1ffc854*/ void Add(K key, V value);
                                /*0x1ffc854*/ void Add(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x1f309e4*/ void Clear();
                                /*0x1ffc854*/ bool Remove(K key);
                                /*0x1ffc854*/ bool Remove(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x1ffc854*/ bool Contains(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x1ffc854*/ bool ContainsKey(K key);
                                /*0x1f30ee8*/ void CopyTo(System.Collections.Generic.KeyValuePair<K, V> array, int arrayIndex);
                                /*0x1f2ffc8*/ int get_Count();
                                /*0x1f30214*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>> GetEnumerator();
                                /*0x1f30214*/ System.Collections.Generic.ICollection<K> get_Keys();
                                /*0x1ffc854*/ bool TryGetValue(K key, ref V value);
                                /*0x1f30214*/ System.Collections.Generic.ICollection<V> get_Values();
                                /*0x1ffc854*/ V Lookup(K key);
                            }

                            class ReadOnlyDictionaryProxy<K, V> : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Collections.ReadOnlyDictionary<K, V>
                            {
                                /*0x0*/ System.Collections.Generic.IDictionary<K, V> m_target;

                                /*0x1f30ebc*/ ReadOnlyDictionaryProxy(System.Collections.Generic.IDictionary<K, V> target);
                                /*0x1ffc854*/ bool Contains(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x1ffc854*/ bool ContainsKey(K key);
                                /*0x1f30ee8*/ void CopyTo(System.Collections.Generic.KeyValuePair<K, V> array, int arrayIndex);
                                /*0x1f2ffc8*/ int get_Count();
                                /*0x1f30214*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>> GetEnumerator();
                                /*0x1f30214*/ System.Collections.Generic.ICollection<K> get_Keys();
                                /*0x1ffc854*/ bool TryGetValue(K key, ref V value);
                                /*0x1f30214*/ System.Collections.Generic.ICollection<V> get_Values();
                                /*0x1ffc854*/ V Lookup(K key);
                            }
                        }
                    }

                    namespace Tls
                    {
                        class AbstractTlsClient : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsPeer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext m_context;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] m_protocolVersions;
                            /*0x30*/ int[] m_cipherSuites;
                            /*0x38*/ System.Collections.Generic.IList<int> m_supportedGroups;
                            /*0x40*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithms;
                            /*0x48*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithmsCert;

                            /*0x2af20d0*/ AbstractTlsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x2af2130*/ bool AllowUnexpectedServerExtension(int extensionType, byte[] extensionData);
                            /*0x2af2174*/ System.Collections.Generic.IList<int> GetNamedGroupRoles();
                            /*0x2af2290*/ void CheckForUnexpectedServerExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions, int extensionType);
                            /*0x2af235c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity GetPskIdentity();
                            /*0x2af2364*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity GetSrpIdentity();
                            /*0x2af236c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier GetDHGroupVerifier();
                            /*0x2af241c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier GetSrpConfigVerifier();
                            /*0x2af24cc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> GetCertificateAuthorities();
                            /*0x2af24d4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> GetProtocolNames();
                            /*0x2af24dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest GetCertificateStatusRequest();
                            /*0x2af2648*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> GetMultiCertStatusRequest();
                            /*0x2af2650*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetSniServerNames();
                            /*0x2af2658*/ System.Collections.Generic.IList<int> GetSupportedGroups(System.Collections.Generic.IList<int> namedGroupRoles);
                            /*0x2af29d0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithms();
                            /*0x2af2a2c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithmsCert();
                            /*0x2af2a34*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> GetTrustedCAIndication();
                            /*0x2af2a3c*/ short[] GetAllowedClientCertificateTypes();
                            /*0x2af2a44*/ short[] GetAllowedServerCertificateTypes();
                            /*0x2af2a4c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext context);
                            /*0x2af2aa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x2af2ab0*/ int[] GetCipherSuites();
                            /*0x2af2ab8*/ void NotifyHandshakeBeginning();
                            /*0x2af2af4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession GetSessionToResume();
                            /*0x2af2afc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal> GetExternalPsks();
                            /*0x2af2b04*/ bool IsFallback();
                            /*0x2af2b0c*/ System.Collections.Generic.IDictionary<int, System.Byte[]> GetClientExtensions();
                            /*0x2af317c*/ System.Collections.Generic.IList<int> GetEarlyKeyShareGroups();
                            /*0x2af3440*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion serverVersion);
                            /*0x2af3444*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x2af3448*/ void NotifySessionID(byte[] sessionID);
                            /*0x2af344c*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                            /*0x2af3450*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                            /*0x2af3454*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            /*0x2af3604*/ void ProcessServerSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                            /*0x2af3648*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> GetClientSupplementalData();
                            /*0x2af3650*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                        }

                        class AbstractTlsContext : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                            static /*0x0*/ long counter;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x18*/ int m_connectionEnd;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator m_nonceGenerator;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters m_securityParameters;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] m_clientSupportedVersions;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_clientVersion;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_rsaPreMasterSecretVersion;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession m_session;
                            /*0x50*/ bool m_connected;

                            static /*0x2af40d0*/ AbstractTlsContext();
                            static /*0x2af3654*/ long NextCounterValue();
                            static /*0x2af36ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int connectionEnd);
                            /*0x2af39e8*/ AbstractTlsContext(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int connectionEnd);
                            /*0x2af3a84*/ void HandshakeBeginning(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer peer);
                            /*0x2af3d14*/ void HandshakeComplete(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer peer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x2af3edc*/ bool get_IsHandshaking();
                            /*0x2af3fb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x2af3fc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            /*0x2af3fc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                            /*0x1f2fe14*/ bool get_IsServer();
                            /*0x2af4084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] get_ClientSupportedVersions();
                            /*0x2af408c*/ void SetClientSupportedVersions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] clientSupportedVersions);
                            /*0x2af4094*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ClientVersion();
                            /*0x2af409c*/ void SetClientVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                            /*0x2af40a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_RsaPreMasterSecretVersion();
                            /*0x2af40ac*/ void SetRsaPreMasterSecretVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion rsaPreMasterSecretVersion);
                            /*0x2af40b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                        }

                        class AbstractTlsKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange
                        {
                            /*0x10*/ int m_keyExchange;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;

                            /*0x2af4158*/ AbstractTlsKeyExchange(int keyExchange);
                            /*0x2af4180*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x1f309e4*/ void SkipServerCredentials();
                            /*0x2af4188*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2af41c4*/ bool get_RequiresServerKeyExchange();
                            /*0x2af41cc*/ void SkipServerKeyExchange();
                            /*0x2af4224*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2af427c*/ short[] GetClientCertificateTypes();
                            /*0x2af4284*/ void SkipClientCredentials();
                            /*0x1f30ebc*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x1f30ebc*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class AbstractTlsKeyExchangeFactory : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory
                        {
                            /*0x2af44a4*/ AbstractTlsKeyExchangeFactory();
                            /*0x2af4288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            /*0x2af42c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2af4300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2af433c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x2af4378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x2af43b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x2af43f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2af442c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x2af4468*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class AbstractTlsPeer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable m_closeHandle;

                            /*0x2af2100*/ AbstractTlsPeer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x2af44ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetSupportedVersions();
                            /*0x1f30214*/ int[] GetSupportedCipherSuites();
                            /*0x2af4690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x2af4698*/ void NotifyCloseHandle(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable closeHandle);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x1f30214*/ int[] GetCipherSuites();
                            /*0x2af2af0*/ void NotifyHandshakeBeginning();
                            /*0x2af46c4*/ bool AllowLegacyResumption();
                            /*0x2af46cc*/ int GetMaxCertificateChainLength();
                            /*0x2af46d4*/ int GetMaxHandshakeMessageSize();
                            /*0x2af46dc*/ short[] GetPskKeyExchangeModes();
                            /*0x2af4740*/ bool RequiresCloseNotify();
                            /*0x2af4748*/ bool RequiresExtendedMasterSecret();
                            /*0x2af4750*/ bool ShouldUseExtendedMasterSecret();
                            /*0x2af4758*/ bool ShouldUseExtendedPadding();
                            /*0x2af4760*/ bool ShouldUseGmtUnixTime();
                            /*0x2af4768*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                            /*0x2af47ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory GetKeyExchangeFactory();
                            /*0x2af4808*/ void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                            /*0x2af480c*/ void NotifyAlertReceived(short alertLevel, short alertDescription);
                            /*0x2af4810*/ void NotifyHandshakeComplete();
                        }

                        class AlertDescription
                        {
                            static /*0x2af4814*/ string GetName(short alertDescription);
                            static /*0x2af4b1c*/ string GetText(short alertDescription);
                        }

                        class ByteQueue
                        {
                            /*0x10*/ byte[] m_databuf;
                            /*0x18*/ int m_skipped;
                            /*0x1c*/ int m_available;
                            /*0x20*/ bool m_readOnlyBuf;

                            static /*0x2af4bac*/ int GetAllocationSize(int i);
                            /*0x2af4c04*/ ByteQueue();
                            /*0x2af4c0c*/ ByteQueue(int capacity);
                            /*0x2af4cb4*/ ByteQueue(byte[] buf, int off, int len);
                            /*0x2af4d04*/ void AddData(byte[] buf, int off, int len);
                            /*0x2af4dd4*/ void AddData(System.ReadOnlySpan<byte> buffer);
                            /*0x2af4fe4*/ int get_Available();
                            /*0x2af4fec*/ void Read(byte[] buf, int offset, int len, int skip);
                            /*0x2af519c*/ void Read(System.Span<byte> buffer, int skip);
                            /*0x2af5344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput ReadHandshakeMessage(int length);
                            /*0x2af54a8*/ int ReadInt32();
                            /*0x2af5560*/ void RemoveData(int i);
                            /*0x2af562c*/ void RemoveData(byte[] buf, int off, int len, int skip);
                            /*0x2af5658*/ void RemoveData(System.Span<byte> buffer, int skip);
                            /*0x2af56c0*/ byte[] RemoveData(int len, int skip);
                            /*0x2af5748*/ void Shrink();
                        }

                        class ByteQueueInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_buffer;

                            /*0x2af5838*/ ByteQueueInputStream();
                            /*0x2af58a0*/ void AddBytes(byte[] buf, int bufOff, int bufLen);
                            /*0x2af58b4*/ int Peek(byte[] buf);
                            /*0x2af5954*/ int Read(byte[] buffer, int offset, int count);
                            /*0x2af5a1c*/ int Read(System.Span<byte> buffer);
                            /*0x2af5b38*/ int ReadByte();
                            /*0x2af5b80*/ int get_Available();
                        }

                        class ByteQueueOutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_buffer;

                            /*0x2af5b98*/ ByteQueueOutputStream();
                            /*0x2af5c00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue get_Buffer();
                            /*0x2af5c08*/ void Write(byte[] buffer, int offset, int count);
                            /*0x2af5c5c*/ void Write(System.ReadOnlySpan<byte> buffer);
                            /*0x2af5c70*/ void WriteByte(byte value);
                        }

                        class Certificate
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] EmptyCerts;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] EmptyCertEntries;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate EmptyChain;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate EmptyChainTls13;
                            /*0x10*/ byte[] m_certificateRequestContext;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] m_certificateEntryList;
                            /*0x20*/ short m_certificateType;

                            static /*0x2af6e64*/ Certificate();
                            static /*0x2af5cf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] Convert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] certificateList);
                            static /*0x2af678c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate.ParseOptions options, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream messageInput, System.IO.Stream endPointHashOutput);
                            static /*0x2af66cc*/ void CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate cert, byte[] encoding, System.IO.Stream output);
                            /*0x2af5f20*/ Certificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] certificateList);
                            /*0x2af5f94*/ Certificate(byte[] certificateRequestContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] certificateEntryList);
                            /*0x2af5fa4*/ Certificate(short certificateType, byte[] certificateRequestContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] certificateEntryList);
                            /*0x2af6114*/ byte[] GetCertificateRequestContext();
                            /*0x2af6170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate GetCertificateAt(int index);
                            /*0x2af61a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] GetCertificateEntryList();
                            /*0x2af6268*/ short get_CertificateType();
                            /*0x2af6270*/ int get_Length();
                            /*0x2af6288*/ bool get_IsEmpty();
                            /*0x2af62a8*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream messageOutput, System.IO.Stream endPointHashOutput);
                            /*0x2af61ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] CloneCertificateEntryList();

                            class ParseOptions
                            {
                                /*0x10*/ short <CertificateType>k__BackingField;
                                /*0x14*/ int <MaxChainLength>k__BackingField;

                                /*0x2af6fd4*/ ParseOptions();
                                /*0x2af6fb4*/ short get_CertificateType();
                                /*0x2af6fbc*/ void set_CertificateType(short value);
                                /*0x2af6fc4*/ int get_MaxChainLength();
                                /*0x2af6fcc*/ void set_MaxChainLength(int value);
                            }
                        }

                        class CertificateEntry
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_certificate;
                            /*0x18*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;

                            /*0x2af5e90*/ CertificateEntry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            /*0x2af6fe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate get_Certificate();
                            /*0x2af6fec*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                        }

                        class CertificateRequest
                        {
                            /*0x10*/ byte[] m_certificateRequestContext;
                            /*0x18*/ short[] m_certificateTypes;
                            /*0x20*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithms;
                            /*0x28*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithmsCert;
                            /*0x30*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> m_certificateAuthorities;

                            static /*0x2af6ff4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CheckSupportedSignatureAlgorithms(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, short alertDescription);
                            static /*0x2af7360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x2af7054*/ CertificateRequest(short[] certificateTypes, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x2af7228*/ CertificateRequest(byte[] certificateRequestContext, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithmsCert, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x2af706c*/ CertificateRequest(byte[] certificateRequestContext, short[] certificateTypes, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithmsCert, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x2af727c*/ byte[] GetCertificateRequestContext();
                            /*0x2af72d8*/ short[] get_CertificateTypes();
                            /*0x2af72e0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_SupportedSignatureAlgorithms();
                            /*0x2af72e8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_SupportedSignatureAlgorithmsCert();
                            /*0x2af72f0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> get_CertificateAuthorities();
                            /*0x2af72f8*/ bool HasCertificateRequestContext(byte[] certificateRequestContext);
                        }

                        class CertificateStatus
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_response;

                            static /*0x2af7900*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            static /*0x2af7804*/ bool IsCorrectType(short statusType, object response);
                            static /*0x2af7d54*/ bool IsOcspResponseList(object response);
                            static /*0x2af7cdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponse ParseOcspResponse(byte[] derEncoding);
                            static /*0x2af7c94*/ void RequireStatusRequestVersion(int minVersion, int statusRequestVersion);
                            /*0x2af7760*/ CertificateStatus(short statusType, object response);
                        }

                        class CertificateStatusRequest
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_request;

                            static /*0x2af7e1c*/ bool IsCorrectType(short statusType, object request);
                            /*0x2af25a4*/ CertificateStatusRequest(short statusType, object request);
                            /*0x2af7ee4*/ void Encode(System.IO.Stream output);
                        }

                        class CertificateStatusRequestItemV2
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_request;

                            /*0x2af84f0*/ void Encode(System.IO.Stream output);
                        }

                        class CertificateVerify
                        {
                            /*0x10*/ int m_algorithm;
                            /*0x18*/ byte[] m_signature;

                            static /*0x2af8764*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x2af8648*/ CertificateVerify(int algorithm, byte[] signature);
                            /*0x2af8754*/ int get_Algorithm();
                            /*0x2af875c*/ byte[] get_Signature();
                        }

                        class CipherSuite
                        {
                            static /*0x2af8868*/ bool IsScsv(int cipherSuite);
                        }

                        class ClientHello
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_version;
                            /*0x18*/ byte[] m_random;
                            /*0x20*/ byte[] m_sessionID;
                            /*0x28*/ byte[] m_cookie;
                            /*0x30*/ int[] m_cipherSuites;
                            /*0x38*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;
                            /*0x40*/ int m_bindersSize;

                            /*0x2af887c*/ ClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] random, byte[] sessionID, byte[] cookie, int[] cipherSuites, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            /*0x2af8934*/ int get_BindersSize();
                            /*0x2af893c*/ int[] get_CipherSuites();
                            /*0x2af8944*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                            /*0x2af894c*/ byte[] get_SessionID();
                            /*0x2af8954*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream output);
                        }

                        class CombinedHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_md5;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_sha1;

                            /*0x2af8ac8*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash md5, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash sha1);
                            /*0x2af8bc4*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x2af8d08*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CombinedHash t);
                            /*0x2af8e6c*/ void Update(byte[] input, int inOff, int len);
                            /*0x2af8fa0*/ void Update(System.ReadOnlySpan<byte> input);
                            /*0x2af90c8*/ byte[] CalculateHash();
                            /*0x2af94dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                            /*0x2af9534*/ void Reset();
                        }

                        class ContentType
                        {
                            static /*0x2af963c*/ string GetName(short contentType);
                            static /*0x2af96dc*/ string GetText(short contentType);
                        }

                        class DefaultTlsDHGroupVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier
                        {
                            static /*0x0*/ int DefaultMinimumPrimeBits;
                            static /*0x8*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> DefaultGroups;
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> m_groups;
                            /*0x18*/ int m_minimumPrimeBits;

                            static /*0x2af97ec*/ DefaultTlsDHGroupVerifier();
                            static /*0x2af976c*/ void AddDefaultGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x2af23bc*/ DefaultTlsDHGroupVerifier();
                            /*0x2af9950*/ DefaultTlsDHGroupVerifier(int minimumPrimeBits);
                            /*0x2af99c0*/ DefaultTlsDHGroupVerifier(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> groups, int minimumPrimeBits);
                            /*0x2af9a64*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x2af9ab0*/ int get_MinimumPrimeBits();
                            /*0x2af9ab8*/ bool AreGroupsEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup b);
                            /*0x2af9b88*/ bool AreParametersEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                            /*0x2af9bb4*/ bool CheckGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x2af9e84*/ bool CheckMinimumPrimeBits(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                        }

                        class DefaultTlsKeyExchangeFactory : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory
                        {
                            /*0x2af4800*/ DefaultTlsKeyExchangeFactory();
                            /*0x2af9ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            /*0x2af9f3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2af9fa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2afa014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x2afa070*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x2afa0cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x2afa128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2afa19c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x2afa1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class DefaultTlsSrpConfigVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier
                        {
                            static /*0x0*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> DefaultGroups;
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> m_groups;

                            static /*0x2afa26c*/ DefaultTlsSrpConfigVerifier();
                            /*0x2af246c*/ DefaultTlsSrpConfigVerifier();
                            /*0x2afa440*/ DefaultTlsSrpConfigVerifier(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> groups);
                            /*0x2afa4d0*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                            /*0x2afa7a0*/ bool AreGroupsEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group b);
                            /*0x2afa868*/ bool AreParametersEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                        }

                        class DeferredHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer m_buf;
                            /*0x20*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash> m_hashes;
                            /*0x28*/ bool m_forceBuffering;
                            /*0x29*/ bool m_sealed;

                            /*0x2afa894*/ DeferredHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x2afa980*/ void CopyBufferTo(System.IO.Stream output);
                            /*0x2afa9f4*/ void ForceBuffering();
                            /*0x2afaa54*/ void NotifyPrfDetermined();
                            /*0x2afad50*/ void TrackHashAlgorithm(int cryptoHashAlgorithm);
                            /*0x2afada8*/ void SealHashAlgorithms();
                            /*0x2afb0c0*/ void StopTracking();
                            /*0x2afb2f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash ForkPrfHash();
                            /*0x2afb5d0*/ byte[] GetFinalHash(int cryptoHashAlgorithm);
                            /*0x2afb814*/ void Update(byte[] input, int inOff, int len);
                            /*0x2afbbf4*/ void Update(System.ReadOnlySpan<byte> input);
                            /*0x2afbfcc*/ byte[] CalculateHash();
                            /*0x2afc018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                            /*0x2afc064*/ void Reset();
                            /*0x2afae08*/ void CheckStopBuffering();
                            /*0x2afab28*/ void CheckTrackingHash(int cryptoHashAlgorithm);
                            /*0x2afb438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash(int cryptoHashAlgorithm);
                            /*0x2afb214*/ void CloneHash(System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash> newHashes, int cryptoHashAlgorithm);
                        }

                        class DigestInputBuffer : System.IO.MemoryStream
                        {
                            /*0x2afa978*/ DigestInputBuffer();
                            /*0x2afb558*/ void UpdateDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                            /*0x2afa9e4*/ void CopyInputTo(System.IO.Stream output);
                        }

                        class DigitallySigned
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm m_algorithm;
                            /*0x18*/ byte[] m_signature;

                            static /*0x2afc5a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x2afc418*/ DigitallySigned(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm algorithm, byte[] signature);
                            /*0x2afc4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm get_Algorithm();
                            /*0x2afc4b0*/ byte[] get_Signature();
                            /*0x2afc4b8*/ void Encode(System.IO.Stream output);
                        }

                        class ExtensionType
                        {
                            static /*0x2afc784*/ string GetName(int extensionType);
                            static /*0x2afc9d4*/ string GetText(int extensionType);
                            static /*0x2afca64*/ bool IsRecognized(int extensionType);
                        }

                        class HandshakeMessageInput : System.IO.MemoryStream
                        {
                            /*0x50*/ int m_offset;

                            /*0x2af5478*/ HandshakeMessageInput(byte[] buf, int offset, int length);
                            /*0x2afcaa8*/ void UpdateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                        }

                        class HandshakeMessageOutput : System.IO.MemoryStream
                        {
                            static /*0x2afcb20*/ int GetLength(int bodyLength);
                            static /*0x2afcb28*/ void Send(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol protocol, short handshakeType, byte[] body);
                            /*0x2afcda4*/ HandshakeMessageOutput(short handshakeType);
                            /*0x2afcbc4*/ HandshakeMessageOutput(short handshakeType, int bodyLength);
                            /*0x2afcc68*/ void Send(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol protocol);
                            /*0x2afcdac*/ void PrepareClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, int bindersSize);
                            /*0x2afcf64*/ void SendClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol clientProtocol, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, int bindersSize);
                        }

                        class HandshakeType
                        {
                            static /*0x2afd0c0*/ string GetName(short handshakeType);
                            static /*0x2afd230*/ string GetText(short handshakeType);
                            static /*0x2afd2c0*/ bool IsRecognized(short handshakeType);
                        }

                        class HashAlgorithm
                        {
                            static /*0x2afd2e8*/ string GetName(short hashAlgorithm);
                            static /*0x2afd3ac*/ string GetText(short hashAlgorithm);
                            static /*0x2afd43c*/ bool IsRecognized(short hashAlgorithm);
                        }

                        class KeyExchangeAlgorithm
                        {
                            static /*0x2afd458*/ bool IsAnonymous(int keyExchangeAlgorithm);
                        }

                        class KeyShareEntry
                        {
                            /*0x10*/ int m_namedGroup;
                            /*0x18*/ byte[] m_keyExchange;

                            static /*0x2afd46c*/ bool CheckKeyExchangeLength(int length);
                            static /*0x2afd670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry Parse(System.IO.Stream input);
                            /*0x2afd480*/ KeyShareEntry(int namedGroup, byte[] keyExchange);
                            /*0x2afd5e4*/ int get_NamedGroup();
                            /*0x2afd5ec*/ byte[] get_KeyExchange();
                            /*0x2afd5f4*/ void Encode(System.IO.Stream output);
                        }

                        class KeyUpdateRequest
                        {
                            static /*0x2afd718*/ bool IsValid(short keyUpdateRequest);
                        }

                        class MacAlgorithm
                        {
                            static /*0x2afd728*/ string GetName(int macAlgorithm);
                            static /*0x2afd7cc*/ string GetText(int macAlgorithm);
                        }

                        class MaxFragmentLength
                        {
                            static /*0x2afd85c*/ bool IsValid(short maxFragmentLength);
                        }

                        class NamedGroup
                        {
                            static /*0x0*/ string[] CurveNames;
                            static /*0x8*/ string[] FiniteFieldNames;

                            static /*0x2afdbd0*/ NamedGroup();
                            static /*0x2afd870*/ bool CanBeNegotiated(int namedGroup, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2afda18*/ string GetCurveName(int namedGroup);
                            static /*0x2afdac8*/ bool IsPrivate(int namedGroup);
                            static /*0x2afd974*/ bool IsValid(int namedGroup);
                            static /*0x2afdb64*/ bool RefersToAnECDHCurve(int namedGroup);
                            static /*0x2afdab8*/ bool RefersToASpecificCurve(int namedGroup);
                            static /*0x2afdbc0*/ bool RefersToASpecificFiniteField(int namedGroup);
                            static /*0x2afdae4*/ bool RefersToASpecificGroup(int namedGroup);
                        }

                        class NewSessionTicket
                        {
                            /*0x10*/ long m_ticketLifetimeHint;
                            /*0x18*/ byte[] m_ticket;

                            static /*0x2afe5a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket Parse(System.IO.Stream input);
                            /*0x2afe568*/ NewSessionTicket(long ticketLifetimeHint, byte[] ticket);
                        }

                        class OcspStatusRequest
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponderID> m_responderIDList;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions m_requestExtensions;

                            /*0x2af2560*/ OcspStatusRequest(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponderID> responderIDList, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions requestExtensions);
                            /*0x2af7fd0*/ void Encode(System.IO.Stream output);
                        }

                        class OfferedPsks
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> m_identities;
                            /*0x18*/ System.Collections.Generic.IList<System.Byte[]> m_binders;
                            /*0x20*/ int m_bindersSize;

                            static /*0x2aff370*/ void EncodeBinders(System.IO.Stream output, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig bindersConfig);
                            static /*0x2aff76c*/ int GetBindersSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks);
                            /*0x2afe654*/ OfferedPsks(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> identities);
                            /*0x2afe660*/ OfferedPsks(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> identities, System.Collections.Generic.IList<System.Byte[]> binders, int bindersSize);
                            /*0x2afe8f8*/ void Encode(System.IO.Stream output);

                            class BindersConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] m_psks;
                                /*0x18*/ short[] m_pskKeyExchangeModes;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] m_earlySecrets;
                                /*0x28*/ int m_bindersSize;

                                /*0x2aff8e0*/ BindersConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, short[] pskKeyExchangeModes, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] earlySecrets, int bindersSize);
                            }
                        }

                        class PrfAlgorithm
                        {
                            static /*0x2aff94c*/ string GetName(int prfAlgorithm);
                            static /*0x2aff9fc*/ string GetText(int prfAlgorithm);
                        }

                        class ProtocolName
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_1_1;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_1;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_2;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_3;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Stun_Turn;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Stun_Nat_Discovery;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_2_Tls;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_2_Tcp;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName WebRtc;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName WebRtc_Confidential;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Ftp;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Imap;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Pop3;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName ManageSieve;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Coap;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Xmpp_Client;
                            static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Xmpp_Server;
                            static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Acme_Tls_1;
                            static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Oasis_Mqtt;
                            static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Dns_Over_Tls;
                            static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Ntske_1;
                            static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Sun_Rpc;
                            static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_3;
                            static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Smb_2;
                            static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Irc;
                            static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Nntp_Reading;
                            static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Nntp_Transit;
                            static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Dns_Over_Quic;
                            /*0x10*/ byte[] m_bytes;

                            static /*0x2affdc4*/ ProtocolName();
                            static /*0x2affa8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName AsUtf8Encoding(string name);
                            static /*0x2affc3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Parse(System.IO.Stream input);
                            /*0x2affaf4*/ ProtocolName(byte[] bytes);
                            /*0x2affbc8*/ string GetUtf8Decoding();
                            /*0x2affbd0*/ void Encode(System.IO.Stream output);
                            /*0x2affcd0*/ bool Equals(object obj);
                            /*0x2affd6c*/ int GetHashCode();
                        }

                        class ProtocolVersion
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SSLv3;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv10;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv11;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv12;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv13;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv10;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv12;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv13;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_EARLIEST_SUPPORTED_DTLS;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_EARLIEST_SUPPORTED_TLS;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_LATEST_SUPPORTED_DTLS;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_LATEST_SUPPORTED_TLS;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_EARLIEST_SUPPORTED_DTLS;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_EARLIEST_SUPPORTED_TLS;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_LATEST_SUPPORTED_DTLS;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_LATEST_SUPPORTED_TLS;
                            /*0x10*/ int version;
                            /*0x18*/ string name;

                            static /*0x2b00e88*/ ProtocolVersion();
                            static /*0x2b003d0*/ bool Contains(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b00448*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetEarliestTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x2b004c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetLatestTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x2b0052c*/ bool IsSupportedTlsVersionClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b008b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion Get(int major, int minor);
                            static /*0x2b00dcc*/ void CheckUint8(int versionOctet);
                            static /*0x2b00c9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetUnknownVersion(int major, int minor, string prefix);
                            /*0x2b005d4*/ ProtocolVersion(int v, string name);
                            /*0x2af4510*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] DownTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion min);
                            /*0x2b00740*/ int get_FullVersion();
                            /*0x2b00748*/ int get_MajorVersion();
                            /*0x2b004c0*/ int get_MinorVersion();
                            /*0x2b00754*/ bool get_IsDtls();
                            /*0x2b00768*/ bool get_IsSsl();
                            /*0x2b004ac*/ bool get_IsTls();
                            /*0x2b007cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetEquivalentTlsVersion();
                            /*0x2b0065c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetPreviousVersion();
                            /*0x2b00b38*/ bool IsEarlierVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x2b00b80*/ bool IsEqualOrEarlierVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x2b00610*/ bool IsEqualOrLaterVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x2b00bcc*/ bool IsLaterVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x2b00c14*/ bool Equals(object other);
                            /*0x2b00428*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion other);
                            /*0x2b00c94*/ int GetHashCode();
                            /*0x2b00dc4*/ string ToString();
                        }

                        class PskIdentity
                        {
                            /*0x10*/ byte[] m_identity;
                            /*0x18*/ long m_obfuscatedTicketAge;

                            /*0x2b01248*/ PskIdentity(byte[] identity, long obfuscatedTicketAge);
                            /*0x2aff2d8*/ int GetEncodedLength();
                            /*0x2b013cc*/ byte[] get_Identity();
                            /*0x2b013d4*/ long get_ObfuscatedTicketAge();
                            /*0x2aff2f4*/ void Encode(System.IO.Stream output);
                            /*0x2b013dc*/ bool Equals(object obj);
                            /*0x2b01488*/ int GetHashCode();
                        }

                        class RecordPreview
                        {
                            /*0x10*/ int recordSize;
                            /*0x14*/ int contentLimit;

                            /*0x2b0150c*/ RecordPreview(int recordSize, int contentLimit);
                            /*0x2b01538*/ int get_RecordSize();
                        }

                        class RecordStream
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.Record m_inputRecord;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.SequenceNumber m_readSeqNo;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.SequenceNumber m_writeSeqNo;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol m_handler;
                            /*0x30*/ System.IO.Stream m_input;
                            /*0x38*/ System.IO.Stream m_output;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_pendingCipher;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_readCipher;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_readCipherDeferred;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_writeCipher;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_writeVersion;
                            /*0x68*/ int m_plaintextLimit;
                            /*0x6c*/ int m_ciphertextLimit;
                            /*0x70*/ bool m_ignoreChangeCipherSpec;

                            static /*0x2b021e0*/ void CheckLength(int length, int limit, short alertDescription);
                            /*0x2b01540*/ RecordStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol handler, System.IO.Stream input, System.IO.Stream output);
                            /*0x2b01748*/ int get_PlaintextLimit();
                            /*0x2b01750*/ void SetPlaintextLimit(int plaintextLimit);
                            /*0x2b01804*/ void SetWriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion writeVersion);
                            /*0x2b0180c*/ void SetIgnoreChangeCipherSpec(bool ignoreChangeCipherSpec);
                            /*0x2b01814*/ void SetPendingCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher tlsCipher);
                            /*0x2b0181c*/ void NotifyChangeCipherSpecReceived();
                            /*0x2b0187c*/ void EnablePendingCipherRead(bool deferred);
                            /*0x2b01a64*/ void EnablePendingCipherWrite();
                            /*0x2b01acc*/ void FinaliseHandshake();
                            /*0x2b01b30*/ bool NeedsKeyUpdate();
                            /*0x2b01c10*/ void NotifyKeyUpdateReceived();
                            /*0x2b01cc0*/ void NotifyKeyUpdateSent();
                            /*0x2b01d70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordPreview PreviewRecordHeader(byte[] recordHeader);
                            /*0x2b02230*/ bool ReadFullRecord(byte[] input, int inputOff, int inputLen);
                            /*0x2b0259c*/ bool ReadRecord();
                            /*0x2b02430*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeAndVerify(short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int off, int len);
                            /*0x2b02a34*/ void WriteRecord(short contentType, byte[] plaintext, int plaintextOffset, int plaintextLength);
                            /*0x2b02b04*/ void WriteRecord(short contentType, System.ReadOnlySpan<byte> plaintext);
                            /*0x2b02d34*/ void Close();
                            /*0x2b02388*/ void CheckChangeCipherSpec(byte[] buf, int off, int len);
                            /*0x2b01f4c*/ short CheckRecordType(byte[] buf, int off);

                            class Record
                            {
                                /*0x10*/ byte[] m_header;
                                /*0x18*/ byte[] m_buf;
                                /*0x20*/ int m_pos;

                                /*0x2b016b4*/ Record();
                                /*0x2b02f34*/ void FillTo(System.IO.Stream input, int length);
                                /*0x2b02884*/ void ReadFragment(System.IO.Stream input, int fragmentLength);
                                /*0x2b0280c*/ bool ReadHeader(System.IO.Stream input);
                                /*0x2b02e90*/ void Reset();
                                /*0x2b02fd8*/ void Resize(int length);
                            }

                            class SequenceNumber
                            {
                                /*0x10*/ long m_value;
                                /*0x18*/ bool m_exhausted;

                                /*0x2b01740*/ SequenceNumber();
                                /*0x2b01b54*/ long get_CurrentValue();
                                /*0x2b02900*/ long NextValue(short alertDescription);
                                /*0x2b019ac*/ void Reset();
                            }
                        }

                        class SecurityParameters
                        {
                            /*0x10*/ int m_entity;
                            /*0x14*/ bool m_resumedSession;
                            /*0x15*/ bool m_secureRenegotiation;
                            /*0x18*/ int m_cipherSuite;
                            /*0x1c*/ short m_maxFragmentLength;
                            /*0x20*/ int m_prfAlgorithm;
                            /*0x24*/ int m_prfCryptoHashAlgorithm;
                            /*0x28*/ int m_prfHashLength;
                            /*0x2c*/ int m_verifyDataLength;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_baseKeyClient;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_baseKeyServer;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_earlyExporterMasterSecret;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_earlySecret;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_exporterMasterSecret;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_handshakeSecret;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_trafficSecretClient;
                            /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_trafficSecretServer;
                            /*0x78*/ byte[] m_clientRandom;
                            /*0x80*/ byte[] m_serverRandom;
                            /*0x88*/ byte[] m_sessionHash;
                            /*0x90*/ byte[] m_sessionID;
                            /*0x98*/ byte[] m_pskIdentity;
                            /*0xa0*/ byte[] m_srpIdentity;
                            /*0xa8*/ byte[] m_tlsServerEndPoint;
                            /*0xb0*/ byte[] m_tlsUnique;
                            /*0xb8*/ bool m_encryptThenMac;
                            /*0xb9*/ bool m_extendedMasterSecret;
                            /*0xba*/ bool m_extendedPadding;
                            /*0xbb*/ bool m_truncatedHmac;
                            /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName m_applicationProtocol;
                            /*0xc8*/ bool m_applicationProtocolSet;
                            /*0xd0*/ short[] m_clientCertTypes;
                            /*0xd8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> m_clientServerNames;
                            /*0xe0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_clientSigAlgs;
                            /*0xe8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_clientSigAlgsCert;
                            /*0xf0*/ int[] m_clientSupportedGroups;
                            /*0xf8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_serverSigAlgs;
                            /*0x100*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_serverSigAlgsCert;
                            /*0x108*/ int[] m_serverSupportedGroups;
                            /*0x110*/ int m_keyExchangeAlgorithm;
                            /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                            /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                            /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                            /*0x130*/ int m_statusRequestVersion;
                            /*0x134*/ short m_clientCertificateType;
                            /*0x138*/ byte[] m_localVerifyData;
                            /*0x140*/ byte[] m_peerVerifyData;
                            /*0x148*/ bool <IsRenegotiating>k__BackingField;
                            /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate <PreRenegotiatingServerCert>k__BackingField;

                            static /*0x2b03270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ClearSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                            /*0x2af3cec*/ SecurityParameters();
                            /*0x2b030fc*/ void Clear();
                            /*0x2b03314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName get_ApplicationProtocol();
                            /*0x2b0331c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_BaseKeyClient();
                            /*0x2b03324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_BaseKeyServer();
                            /*0x2b0332c*/ int get_CipherSuite();
                            /*0x2b03334*/ byte[] get_ClientRandom();
                            /*0x2b0333c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ClientSigAlgs();
                            /*0x2b03344*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ClientSigAlgsCert();
                            /*0x2b0334c*/ int[] get_ClientSupportedGroups();
                            /*0x2b03354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_HandshakeSecret();
                            /*0x2b0335c*/ bool get_IsEncryptThenMac();
                            /*0x2b03364*/ bool get_IsExtendedMasterSecret();
                            /*0x2b0336c*/ bool get_IsExtendedPadding();
                            /*0x2b03374*/ bool get_IsResumedSession();
                            /*0x2b0337c*/ bool get_IsSecureRenegotiation();
                            /*0x2b03384*/ bool get_IsTruncatedHmac();
                            /*0x2b0338c*/ int get_KeyExchangeAlgorithm();
                            /*0x2b03394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_LocalCertificate();
                            /*0x2b0339c*/ byte[] get_LocalVerifyData();
                            /*0x2b033a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_MasterSecret();
                            /*0x2b033ac*/ short get_MaxFragmentLength();
                            /*0x2b033b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_NegotiatedVersion();
                            /*0x2b033bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PeerCertificate();
                            /*0x2b033c4*/ byte[] get_PeerVerifyData();
                            /*0x2b033cc*/ int get_PrfAlgorithm();
                            /*0x2b033d4*/ int get_PrfCryptoHashAlgorithm();
                            /*0x2b033dc*/ int get_PrfHashLength();
                            /*0x2b033e4*/ byte[] get_PskIdentity();
                            /*0x2b033ec*/ byte[] get_ServerRandom();
                            /*0x2b033f4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ServerSigAlgs();
                            /*0x2b033fc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ServerSigAlgsCert();
                            /*0x2b03404*/ byte[] get_SessionHash();
                            /*0x2b0340c*/ byte[] get_SessionID();
                            /*0x2b03414*/ byte[] get_SrpIdentity();
                            /*0x2b0341c*/ int get_StatusRequestVersion();
                            /*0x2b03424*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_TrafficSecretClient();
                            /*0x2b0342c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_TrafficSecretServer();
                            /*0x2b03434*/ int get_VerifyDataLength();
                            /*0x2b0343c*/ bool get_IsRenegotiating();
                            /*0x2b03444*/ void set_IsRenegotiating(bool value);
                            /*0x2b0344c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PreRenegotiatingServerCert();
                            /*0x2b03454*/ void set_PreRenegotiatingServerCert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate value);
                        }

                        class ServerHello
                        {
                            static /*0x0*/ byte[] HelloRetryRequestMagic;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_version;
                            /*0x18*/ byte[] m_random;
                            /*0x20*/ byte[] m_sessionID;
                            /*0x28*/ int m_cipherSuite;
                            /*0x30*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;

                            static /*0x2b036e8*/ ServerHello();
                            static /*0x2b035a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello Parse(System.IO.MemoryStream input);
                            /*0x2b03464*/ ServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] random, byte[] sessionID, int cipherSuite, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            /*0x2b034e8*/ int get_CipherSuite();
                            /*0x2b034f0*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                            /*0x2b034f8*/ byte[] get_Random();
                            /*0x2b03500*/ byte[] get_SessionID();
                            /*0x2b03508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_Version();
                            /*0x2b03510*/ bool IsHelloRetryRequest();
                        }

                        class ServerName
                        {
                            /*0x10*/ short nameType;
                            /*0x18*/ byte[] nameData;

                            static /*0x2b0398c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName Parse(System.IO.Stream input);
                            /*0x2b03788*/ ServerName(short nameType, byte[] nameData);
                            /*0x2b03908*/ short get_NameType();
                            /*0x2b03910*/ void Encode(System.IO.Stream output);
                        }

                        class ServerNameList
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> m_serverNameList;

                            static /*0x2b03f6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerNameList Parse(System.IO.Stream input);
                            static /*0x2b03ed4*/ short[] CheckNameType(short[] nameTypesSeen, short nameType);
                            /*0x2b03a34*/ ServerNameList(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            /*0x2b03ab0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> get_ServerNames();
                            /*0x2b03ab8*/ void Encode(System.IO.Stream output);
                        }

                        class ServerSrpParams
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_N;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_B;
                            /*0x28*/ byte[] m_s;

                            static /*0x2b04244*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerSrpParams Parse(System.IO.Stream input);
                            /*0x2b04164*/ ServerSrpParams(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, byte[] s, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B);
                            /*0x2b04224*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_B();
                            /*0x2b0422c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                            /*0x2b04234*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            /*0x2b0423c*/ byte[] get_S();
                        }

                        class SessionParameters
                        {
                            /*0x10*/ int m_cipherSuite;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                            /*0x38*/ byte[] m_pskIdentity;
                            /*0x40*/ byte[] m_srpIdentity;
                            /*0x48*/ byte[] m_encodedServerExtensions;
                            /*0x50*/ bool m_extendedMasterSecret;

                            /*0x2b04320*/ SessionParameters(int cipherSuite, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate localCertificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate peerCertificate, byte[] pskIdentity, byte[] srpIdentity, byte[] encodedServerExtensions, bool extendedMasterSecret);
                            /*0x2b0444c*/ int get_CipherSuite();
                            /*0x2b04454*/ void Clear();
                            /*0x2b04500*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters Copy();
                            /*0x2b045b8*/ bool get_IsExtendedMasterSecret();
                            /*0x2b045c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_LocalCertificate();
                            /*0x2b045c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_MasterSecret();
                            /*0x2b045d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_NegotiatedVersion();
                            /*0x2b045d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PeerCertificate();
                            /*0x2b045e0*/ byte[] get_PskIdentity();
                            /*0x2b045e8*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadServerExtensions();
                            /*0x2b04664*/ byte[] get_SrpIdentity();

                            class Builder
                            {
                                /*0x10*/ int m_cipherSuite;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                                /*0x38*/ byte[] m_pskIdentity;
                                /*0x40*/ byte[] m_srpIdentity;
                                /*0x48*/ byte[] m_encodedServerExtensions;
                                /*0x50*/ bool m_extendedMasterSecret;

                                /*0x2b0466c*/ Builder();
                                /*0x2b0467c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters Build();
                                /*0x2b04804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetCipherSuite(int cipherSuite);
                                /*0x2b0480c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetExtendedMasterSecret(bool extendedMasterSecret);
                                /*0x2b04814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetLocalCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate localCertificate);
                                /*0x2b04830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret);
                                /*0x2b0484c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetNegotiatedVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion);
                                /*0x2b04868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetPeerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate peerCertificate);
                                /*0x2b04884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetPskIdentity(byte[] pskIdentity);
                                /*0x2b048a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetSrpIdentity(byte[] srpIdentity);
                                /*0x2b048bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                                /*0x2b04784*/ void Validate(bool condition, string parameter);
                            }
                        }

                        class SignatureAlgorithm
                        {
                            static /*0x2b049dc*/ string GetName(short signatureAlgorithm);
                            static /*0x2b04b2c*/ string GetText(short signatureAlgorithm);
                        }

                        class SignatureAndHashAlgorithm
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP256r1tls13_sha256;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP384r1tls13_sha384;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP512r1tls13_sha512;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ed25519;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ed448;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm gostr34102012_256;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm gostr34102012_512;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha256;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha384;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha512;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha256;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha384;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha512;
                            /*0x10*/ short m_hash;
                            /*0x12*/ short m_signature;

                            static /*0x2b052d4*/ SignatureAndHashAlgorithm();
                            static /*0x2b04bbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetInstance(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x2b04c48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetInstanceIntrinsic(short signatureAlgorithm);
                            static /*0x2b04fa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Create(int signatureScheme);
                            static /*0x2b04f40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Create(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x2afc6e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Parse(System.IO.Stream input);
                            /*0x2b05010*/ SignatureAndHashAlgorithm(short hash, short signature);
                            /*0x2b050ec*/ short get_Hash();
                            /*0x2b050f4*/ short get_Signature();
                            /*0x2afc52c*/ void Encode(System.IO.Stream output);
                            /*0x2b050fc*/ bool Equals(object obj);
                            /*0x2b0517c*/ int GetHashCode();
                            /*0x2b0518c*/ string ToString();
                        }

                        class SignatureScheme
                        {
                            static /*0x2b054b8*/ int From(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlg);
                            static /*0x2b05504*/ int From(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x2b05510*/ int GetCryptoHashAlgorithm(int signatureScheme);
                            static /*0x2b0562c*/ int GetCryptoHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x2b05000*/ short GetHashAlgorithm(int signatureScheme);
                            static /*0x2b05008*/ short GetSignatureAlgorithm(int signatureScheme);
                            static /*0x2b0563c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(int signatureScheme);
                            static /*0x2b05694*/ bool IsRsaPss(int signatureScheme);
                        }

                        class Ssl3Utilities
                        {
                            static /*0x0*/ byte[] SSL_CLIENT;
                            static /*0x8*/ byte[] SSL_SERVER;
                            static /*0x10*/ byte[] IPAD;
                            static /*0x18*/ byte[] OPAD;

                            static /*0x2b05c5c*/ Ssl3Utilities();
                            static /*0x2b056ac*/ byte[] CalculateVerifyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, bool isServer);
                            static /*0x2af928c*/ void CompleteCombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash md5, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash sha1);
                            static /*0x2b05890*/ void CompleteHash(byte[] master_secret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash, int padLength);
                            static /*0x2b05b90*/ byte[] GenPad(byte b, int count);
                            static /*0x2b05c24*/ void WriteEncryptedPms(byte[] encryptedPms, System.IO.Stream output);
                        }

                        class SupplementalDataEntry
                        {
                            /*0x10*/ int m_dataType;
                            /*0x18*/ byte[] m_data;

                            /*0x2b05d88*/ SupplementalDataEntry(int dataType, byte[] data);
                            /*0x2b05dc0*/ int get_DataType();
                            /*0x2b05dc8*/ byte[] get_Data();
                        }

                        interface TlsAuthentication
                        {
                            /*0x1f30ebc*/ void NotifyServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate serverCertificate);
                            /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials GetClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                        }

                        interface TlsClient : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x1f30ebc*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext context);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession GetSessionToResume();
                            /*0x1f30214*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal> GetExternalPsks();
                            /*0x1f2fe14*/ bool IsFallback();
                            /*0x1f30214*/ System.Collections.Generic.IDictionary<int, System.Byte[]> GetClientExtensions();
                            /*0x1f30214*/ System.Collections.Generic.IList<int> GetEarlyKeyShareGroups();
                            /*0x1f30ebc*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion selectedVersion);
                            /*0x1f30ebc*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x1f30ebc*/ void NotifySessionID(byte[] sessionID);
                            /*0x1f30b78*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                            /*0x1f30ebc*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                            /*0x1f30ebc*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            /*0x1f30ebc*/ void ProcessServerSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity GetPskIdentity();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity GetSrpIdentity();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier GetDHGroupVerifier();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier GetSrpConfigVerifier();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                            /*0x1f30214*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> GetClientSupplementalData();
                            /*0x1f30ebc*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                        }

                        interface TlsClientContext : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                        }

                        class TlsClientContextImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                            /*0x2b05dd0*/ TlsClientContextImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x2b05e3c*/ bool get_IsServer();
                        }

                        class TlsClientProtocol : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol
                        {
                            /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient m_tlsClient;
                            /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContextImpl m_tlsClientContext;
                            /*0xb8*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> m_clientAgreements;
                            /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig m_clientBinders;
                            /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ClientHello m_clientHello;
                            /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange m_keyExchange;
                            /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication m_authentication;
                            /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus m_certificateStatus;
                            /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest m_certificateRequest;

                            /*0x2b05e44*/ TlsClientProtocol();
                            /*0x2b05ff8*/ void Connect(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient tlsClient);
                            /*0x2b06298*/ void BeginHandshake(bool renegotiation);
                            /*0x2b06508*/ void CleanupHandshake();
                            /*0x2b066b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext get_Context();
                            /*0x2b066c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext get_ContextAdmin();
                            /*0x2b066c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer get_Peer();
                            /*0x2b066d0*/ void Handle13HandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x2b0722c*/ void HandleHandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x2b0968c*/ void HandleServerCertificate();
                            /*0x2b09a5c*/ void HandleSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x2b09cbc*/ void Process13HelloRetryRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello helloRetryRequest);
                            /*0x2b0b0c0*/ void Process13ServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello, bool afterHelloRetryRequest);
                            /*0x2b0bebc*/ void Process13ServerHelloCoda(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello, bool afterHelloRetryRequest);
                            /*0x2b0c0d0*/ void ProcessServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello);
                            /*0x2b0d47c*/ void Receive13CertificateRequest(System.IO.MemoryStream buf, bool postHandshakeAuth);
                            /*0x2b0d688*/ void Send13CertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate);
                            /*0x2b0d898*/ void Receive13EncryptedExtensions(System.IO.MemoryStream buf);
                            /*0x2b0e11c*/ void Receive13NewSessionTicket(System.IO.MemoryStream buf);
                            /*0x2b0e304*/ void Receive13ServerCertificate(System.IO.MemoryStream buf);
                            /*0x2b0e6f0*/ void Receive13ServerCertificateVerify(System.IO.MemoryStream buf);
                            /*0x2b0e904*/ void Receive13ServerFinished(System.IO.MemoryStream buf);
                            /*0x2b0e914*/ void ReceiveCertificateRequest(System.IO.MemoryStream buf);
                            /*0x2b0eb8c*/ void ReceiveNewSessionTicket(System.IO.MemoryStream buf);
                            /*0x2b0ec50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello ReceiveServerHelloMessage(System.IO.MemoryStream buf);
                            /*0x2b0eca8*/ void Send13ClientHelloRetry();
                            /*0x2b0f7c4*/ void SendCertificateVerifyMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned certificateVerify);
                            /*0x2b0f850*/ void SendClientHello();
                            /*0x2b11060*/ void SendClientHelloMessage();
                            /*0x2b11134*/ void SendClientKeyExchange();
                            /*0x2b1121c*/ void Skip13CertificateRequest();
                            /*0x2b11228*/ void Skip13ServerCertificate();
                        }

                        interface TlsCloseable
                        {
                        }

                        interface TlsContext
                        {
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                            /*0x1f2fe14*/ bool get_IsServer();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ClientVersion();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_RsaPreMasterSecretVersion();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                        }

                        interface TlsCredentialedAgreement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                            /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate peerCertificate);
                        }

                        interface TlsCredentialedDecryptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                        }

                        interface TlsCredentialedSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                            /*0x1f302cc*/ byte[] GenerateRawSignature(byte[] hash);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm get_SignatureAndHashAlgorithm();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamSigner GetStreamSigner();
                        }

                        interface TlsCredentials
                        {
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_Certificate();
                        }

                        class TlsDHanonKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x2b113d8*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b11448*/ TlsDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2b11450*/ TlsDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            /*0x2b114a4*/ void SkipServerCredentials();
                            /*0x2b114a8*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b114e0*/ bool get_RequiresServerKeyExchange();
                            /*0x2b114e8*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2b11ab4*/ short[] GetClientCertificateTypes();
                            /*0x2b11abc*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b11af4*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b11c60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsDheKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x2b11d04*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b11d7c*/ TlsDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2b11d84*/ TlsDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            /*0x2b11de4*/ void SkipServerCredentials();
                            /*0x2b11e1c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b11e50*/ bool get_RequiresServerKeyExchange();
                            /*0x2b11e58*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2b12590*/ short[] GetClientCertificateTypes();
                            /*0x2b12600*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b12700*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b127dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsDHGroupVerifier
                        {
                            /*0x1f2fec8*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                        }

                        class TlsDHKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement m_agreementCredentials;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_dhPeerCertificate;

                            static /*0x2b12880*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b128f8*/ TlsDHKeyExchange(int keyExchange);
                            /*0x2b12928*/ void SkipServerCredentials();
                            /*0x2b12960*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b12a30*/ short[] GetClientCertificateTypes();
                            /*0x2b12aa4*/ void SkipClientCredentials();
                            /*0x2b12adc*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b12bf8*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b12bfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsDHUtilities
                        {
                            static /*0x2b12ca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetDHGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            static /*0x2b12ce0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetNamedDHGroup(int namedGroup);
                            static /*0x2b12e14*/ int GetNamedGroupForDHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                            static /*0x2b12f34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetStandardGroupForDHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                            static /*0x2b11768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig ReceiveDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, System.IO.Stream input);
                            static /*0x2b133a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReadDHParameter(System.IO.Stream input);
                        }

                        class TlsEccUtilities
                        {
                            static /*0x2b13438*/ bool IsEccCipherSuite(int cipherSuite);
                            static /*0x2b135c4*/ void CheckPointEncoding(int namedGroup, byte[] encoding);
                            static /*0x2b136a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ReceiveECDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                        }

                        class TlsECDHanonKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x2b13984*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b139f4*/ TlsECDHanonKeyExchange(int keyExchange);
                            /*0x2b139fc*/ TlsECDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x2b13a3c*/ void SkipServerCredentials();
                            /*0x2b13a40*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b13a78*/ bool get_RequiresServerKeyExchange();
                            /*0x2b13a80*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2b13d58*/ short[] GetClientCertificateTypes();
                            /*0x2b13d60*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b13d98*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b13da8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x2b13e4c*/ void GenerateEphemeral(System.IO.Stream output);
                            /*0x2b13fc4*/ void ProcessEphemeral(byte[] point);
                        }

                        class TlsECDheKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x2b1408c*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b14100*/ TlsECDheKeyExchange(int keyExchange);
                            /*0x2b14108*/ TlsECDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x2b1414c*/ void SkipServerCredentials();
                            /*0x2b14184*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b141b8*/ bool get_RequiresServerKeyExchange();
                            /*0x2b141c0*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2b14454*/ short[] GetClientCertificateTypes();
                            /*0x2b144c4*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b14518*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b14528*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x2b145cc*/ void GenerateEphemeral(System.IO.Stream output);
                            /*0x2b146a8*/ void ProcessEphemeral(byte[] point);
                        }

                        class TlsECDHKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement m_agreementCredentials;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_ecdhPeerCertificate;

                            static /*0x2b14770*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b147e4*/ TlsECDHKeyExchange(int keyExchange);
                            /*0x2b14814*/ void SkipServerCredentials();
                            /*0x2b1484c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b1491c*/ short[] GetClientCertificateTypes();
                            /*0x2b14990*/ void SkipClientCredentials();
                            /*0x2b149c8*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b14a38*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b14a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsException : System.IO.IOException
                        {
                            /*0x2b14ae4*/ TlsException();
                            /*0x2b14aec*/ TlsException(string message);
                            /*0x2b14af4*/ TlsException(string message, System.Exception innerException);
                            /*0x2b14afc*/ TlsException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class TlsExtensionsUtilities
                        {
                            static /*0x2b105e4*/ System.Collections.Generic.IDictionary<int, System.Byte[]> EnsureExtensionsInitialised(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b14b04*/ void AddAlpnExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocolNameList);
                            static /*0x2b14f68*/ void AddCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> authorities);
                            static /*0x2b1540c*/ void AddClientCertificateTypeExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] certificateTypes);
                            static /*0x2b0f030*/ void AddCookieExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, byte[] cookie);
                            static /*0x2b15664*/ void AddEncryptThenMacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b10fb0*/ void AddExtendedMasterSecretExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b157b4*/ void AddKeyShareClientHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x2b15c20*/ void AddPreSharedKeyClientHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks offeredPsks);
                            static /*0x2b15d8c*/ void AddPskKeyExchangeModesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] modes);
                            static /*0x2b15f14*/ void AddServerCertificateTypeExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] certificateTypes);
                            static /*0x2b15fcc*/ void AddServerNameExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            static /*0x2b16168*/ void AddSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x2b162c4*/ void AddSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x2b16380*/ void AddStatusRequestExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest statusRequest);
                            static /*0x2b164ec*/ void AddStatusRequestV2Extension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> statusRequestV2);
                            static /*0x2b16950*/ void AddSupportedGroupsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<int> namedGroups);
                            static /*0x2b16c40*/ void AddSupportedPointFormatsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] ecPointFormats);
                            static /*0x2b10654*/ void AddSupportedVersionsExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x2b16f30*/ void AddTrustedCAKeysExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> trustedAuthoritiesList);
                            static /*0x2b0d214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName GetAlpnExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b17444*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> GetCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0d608*/ short GetClientCertificateTypeExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short defaultValue);
                            static /*0x2b0ad74*/ byte[] GetCookieExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0abc4*/ int GetKeyShareHelloRetryRequest(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0b8f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry GetKeyShareServerHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b178c0*/ short GetMaxFragmentLengthExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0b880*/ int GetPreSharedKeyServerHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b179d8*/ short GetServerCertificateTypeExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short defaultValue);
                            static /*0x2b1070c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetServerNameExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b17b24*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b17c74*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b10858*/ int[] GetSupportedGroupsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b17e14*/ short[] GetSupportedPointFormatsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0aa38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetSupportedVersionsExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0d280*/ bool HasEncryptThenMacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0d1a0*/ bool HasExtendedMasterSecretExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b0d354*/ bool HasTruncatedHmacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b14bbc*/ byte[] CreateAlpnExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocolNameList);
                            static /*0x2b15020*/ byte[] CreateCertificateAuthoritiesExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> authorities);
                            static /*0x2b154c4*/ byte[] CreateCertificateTypeExtensionClient(short[] certificateTypes);
                            static /*0x2b15594*/ byte[] CreateCookieExtension(byte[] cookie);
                            static /*0x2b182e0*/ byte[] CreateEmptyExtensionData();
                            static /*0x2b15714*/ byte[] CreateEncryptThenMacExtension();
                            static /*0x2b15764*/ byte[] CreateExtendedMasterSecretExtension();
                            static /*0x2b1586c*/ byte[] CreateKeyShareClientHello(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x2b15cd8*/ byte[] CreatePreSharedKeyClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks offeredPsks);
                            static /*0x2b15e44*/ byte[] CreatePskKeyExchangeModesExtension(short[] modes);
                            static /*0x2b16084*/ byte[] CreateServerNameExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            static /*0x2b16220*/ byte[] CreateSignatureAlgorithmsExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x2b1637c*/ byte[] CreateSignatureAlgorithmsCertExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x2b16438*/ byte[] CreateStatusRequestExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest statusRequest);
                            static /*0x2b165a4*/ byte[] CreateStatusRequestV2Extension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> statusRequestV2);
                            static /*0x2b16a08*/ byte[] CreateSupportedGroupsExtension(System.Collections.Generic.IList<int> namedGroups);
                            static /*0x2b16cf8*/ byte[] CreateSupportedPointFormatsExtension(short[] ecPointFormats);
                            static /*0x2b16dac*/ byte[] CreateSupportedVersionsExtensionClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x2b16fe8*/ byte[] CreateTrustedCAKeysExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> trustedAuthoritiesList);
                            static /*0x2b189c4*/ bool ReadEmptyExtensionData(byte[] extensionData);
                            static /*0x2b18a48*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> ReadAlpnExtensionClient(byte[] extensionData);
                            static /*0x2b172ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName ReadAlpnExtensionServer(byte[] extensionData);
                            static /*0x2b174b0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> ReadCertificateAuthoritiesExtension(byte[] extensionData);
                            static /*0x2b176fc*/ short ReadCertificateTypeExtensionServer(byte[] extensionData);
                            static /*0x2b17750*/ byte[] ReadCookieExtension(byte[] extensionData);
                            static /*0x2b18020*/ bool ReadEncryptThenMacExtension(byte[] extensionData);
                            static /*0x2b18034*/ bool ReadExtendedMasterSecretExtension(byte[] extensionData);
                            static /*0x2b177a8*/ int ReadKeyShareHelloRetryRequest(byte[] extensionData);
                            static /*0x2b177fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry ReadKeyShareServerHello(byte[] extensionData);
                            static /*0x2b17930*/ short ReadMaxFragmentLengthExtension(byte[] extensionData);
                            static /*0x2b17984*/ int ReadPreSharedKeyServerHello(byte[] extensionData);
                            static /*0x2b17a58*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> ReadServerNameExtensionClient(byte[] extensionData);
                            static /*0x2b17b90*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ReadSignatureAlgorithmsExtension(byte[] extensionData);
                            static /*0x2b17ce0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ReadSignatureAlgorithmsCertExtension(byte[] extensionData);
                            static /*0x2b17ce4*/ int[] ReadSupportedGroupsExtension(byte[] extensionData);
                            static /*0x2b17e80*/ short[] ReadSupportedPointFormatsExtension(byte[] extensionData);
                            static /*0x2b17f50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadSupportedVersionsExtensionServer(byte[] extensionData);
                            static /*0x2b18048*/ bool ReadTruncatedHmacExtension(byte[] extensionData);
                            static /*0x2b180ac*/ byte[] PatchOpaque16(System.IO.MemoryStream buf);
                        }

                        class TlsFatalAlert : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsException
                        {
                            /*0x8c*/ byte m_alertDescription;

                            static /*0x2b19578*/ string GetMessage(short alertDescription, string detailMessage);
                            /*0x2b06c3c*/ TlsFatalAlert(short alertDescription);
                            /*0x2b196c8*/ TlsFatalAlert(short alertDescription, string detailMessage);
                            /*0x2b196d0*/ TlsFatalAlert(short alertDescription, System.Exception alertCause);
                            /*0x2b195e4*/ TlsFatalAlert(short alertDescription, string detailMessage, System.Exception alertCause);
                            /*0x2b196ec*/ TlsFatalAlert(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x2b19774*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x2b197f8*/ short get_AlertDescription();
                        }

                        class TlsFatalAlertReceived : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsException
                        {
                            /*0x8c*/ byte m_alertDescription;

                            /*0x2b19800*/ TlsFatalAlertReceived(short alertDescription);
                            /*0x2b198d0*/ TlsFatalAlertReceived(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x2b19958*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface TlsHandshakeHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x1f30ebc*/ void CopyBufferTo(System.IO.Stream output);
                            /*0x1f309e4*/ void ForceBuffering();
                            /*0x1f309e4*/ void NotifyPrfDetermined();
                            /*0x1f30b78*/ void TrackHashAlgorithm(int cryptoHashAlgorithm);
                            /*0x1f309e4*/ void SealHashAlgorithms();
                            /*0x1f309e4*/ void StopTracking();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash ForkPrfHash();
                            /*0x1f30240*/ byte[] GetFinalHash(int cryptoHashAlgorithm);
                        }

                        interface TlsKeyExchange
                        {
                            /*0x1f30ebc*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x1f309e4*/ void SkipServerCredentials();
                            /*0x1f30ebc*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x1f309e4*/ void SkipServerKeyExchange();
                            /*0x1f30ebc*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x1f30214*/ short[] GetClientCertificateTypes();
                            /*0x1f309e4*/ void SkipClientCredentials();
                            /*0x1f30ebc*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x1f30ebc*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsKeyExchangeFactory
                        {
                            /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class TlsNoCloseNotifyException : System.IO.EndOfStreamException
                        {
                            /*0x2b199dc*/ TlsNoCloseNotifyException();
                            /*0x2b19a28*/ TlsNoCloseNotifyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class TlsObjectIdentifiers
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_pe_tlsfeature;

                            static /*0x2b19a30*/ TlsObjectIdentifiers();
                        }

                        interface TlsPeer
                        {
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x1f30ebc*/ void NotifyCloseHandle(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable closehandle);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x1f30214*/ int[] GetCipherSuites();
                            /*0x1f309e4*/ void NotifyHandshakeBeginning();
                            /*0x1f2fe14*/ bool AllowLegacyResumption();
                            /*0x1f2ffc8*/ int GetMaxCertificateChainLength();
                            /*0x1f2ffc8*/ int GetMaxHandshakeMessageSize();
                            /*0x1f30214*/ short[] GetPskKeyExchangeModes();
                            /*0x1f2fe14*/ bool RequiresCloseNotify();
                            /*0x1f2fe14*/ bool RequiresExtendedMasterSecret();
                            /*0x1f2fe14*/ bool ShouldUseExtendedMasterSecret();
                            /*0x1f2fe14*/ bool ShouldUseExtendedPadding();
                            /*0x1f2fe14*/ bool ShouldUseGmtUnixTime();
                            /*0x1f30a84*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory GetKeyExchangeFactory();
                            void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                            void NotifyAlertReceived(short alertLevel, short alertDescription);
                            /*0x1f309e4*/ void NotifyHandshakeComplete();
                        }

                        class TlsProtocol : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_applicationDataQueue;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_alertQueue;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_handshakeQueue;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream m_recordStream;
                            /*0x30*/ int m_maxHandshakeMessageSize;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash m_handshakeHash;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsStream m_tlsStream;
                            /*0x48*/ bool m_closed;
                            /*0x49*/ bool m_failedWithError;
                            /*0x4a*/ bool m_appDataReady;
                            /*0x4b*/ bool m_appDataSplitEnabled;
                            /*0x4c*/ bool m_keyUpdateEnabled;
                            /*0x4d*/ bool m_keyUpdatePendingSend;
                            /*0x50*/ int m_appDataSplitMode;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession m_tlsSession;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters m_sessionParameters;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_sessionMasterSecret;
                            /*0x70*/ byte[] m_retryCookie;
                            /*0x78*/ int m_retryGroup;
                            /*0x80*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_clientExtensions;
                            /*0x88*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_serverExtensions;
                            /*0x90*/ short m_connectionState;
                            /*0x92*/ bool m_selectedPsk13;
                            /*0x93*/ bool m_receivedChangeCipherSpec;
                            /*0x94*/ bool m_expectSessionTicket;
                            /*0x95*/ bool m_blocking;
                            /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueueInputStream m_inputBuffers;
                            /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueueOutputStream m_outputBuffer;

                            static /*0x2b082e4*/ void AssertEmpty(System.IO.MemoryStream buf);
                            static /*0x2b103a4*/ byte[] CreateRandomBlock(bool useGmtUnixTime, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b0d14c*/ byte[] CreateRenegotiationInfo(byte[] renegotiated_connection);
                            static /*0x2b08c80*/ void EstablishMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange);
                            static /*0x2b1f058*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensions(System.IO.MemoryStream input);
                            static /*0x2b1f104*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensionsData(byte[] extBytes);
                            static /*0x2b0deec*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensionsData13(int handshakeType, byte[] extBytes);
                            static /*0x2b08518*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> ReadSupplementalDataMessage(System.IO.MemoryStream input);
                            static /*0x2b1f470*/ void WriteExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b1f478*/ void WriteExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x2b1f638*/ byte[] WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x2b1f5b0*/ byte[] WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x2b1f640*/ void WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.IO.MemoryStream buf, int bindersSize);
                            static /*0x2b1fac4*/ void WritePreSharedKeyExtension(System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x2b1f68c*/ void WriteSelectedExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, bool selectEmpty);
                            static /*0x2b1e90c*/ void WriteSupplementalData(System.IO.Stream output, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> supplementalData);
                            /*0x2b05e48*/ TlsProtocol();
                            /*0x2b07f10*/ bool IsLegacyConnectionState();
                            /*0x2b06c1c*/ bool IsTlsV13ConnectionState();
                            /*0x2b19ae0*/ void CloseConnection();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext get_Context();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext get_ContextAdmin();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer get_Peer();
                            /*0x2b19af8*/ void HandleAlertMessage(short alertLevel, short alertDescription);
                            /*0x2b19c28*/ void HandleAlertWarningMessage(short alertDescription);
                            /*0x2b19cd0*/ void HandleChangeCipherSpecMessage();
                            /*0x2b19cd4*/ void HandleClose(bool user_canceled);
                            /*0x2b19db8*/ void HandleException(short alertDescription, string message, System.Exception e);
                            /*0x2b19e30*/ void HandleFailure();
                            void HandleHandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x2b19e9c*/ void ApplyMaxFragmentLengthExtension(short maxFragmentLength);
                            /*0x2b19f28*/ void CheckReceivedChangeCipherSpec(bool expected);
                            /*0x2b19f74*/ void BlockForHandshake();
                            /*0x2b19ffc*/ void handleRenegotiation();
                            /*0x2b062c8*/ void BeginHandshake(bool renegotiation);
                            /*0x2b06588*/ void CleanupHandshake();
                            /*0x2b1a010*/ void CompleteHandshake();
                            /*0x2b1a700*/ void ProcessRecord(short protocol, byte[] buf, int off, int len);
                            /*0x2b1ab50*/ void ProcessHandshakeQueue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue queue);
                            /*0x2b1a95c*/ void ProcessApplicationDataQueue();
                            /*0x2b1a8ec*/ void ProcessAlertQueue();
                            /*0x2b1a960*/ void ProcessChangeCipherSpec(byte[] buf, int off, int len);
                            /*0x2b1afd8*/ int get_ApplicationDataAvailable();
                            /*0x2b1aff0*/ int ReadApplicationData(byte[] buffer, int offset, int count);
                            /*0x2b1b0b4*/ int ReadApplicationData(System.Span<byte> buffer);
                            /*0x2b1b2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordPreview SafePreviewRecordHeader(byte[] recordHeader);
                            /*0x2b1b460*/ void SafeReadRecord();
                            /*0x2b1b788*/ bool SafeReadFullRecord(byte[] input, int inputOff, int inputLen);
                            /*0x2b1b944*/ void SafeWriteRecord(short type, byte[] buf, int offset, int len);
                            /*0x2b1baf8*/ void SafeWriteRecord(short type, System.ReadOnlySpan<byte> buffer);
                            /*0x2b1bcac*/ void WriteApplicationData(byte[] buffer, int offset, int count);
                            /*0x2b1bd9c*/ void WriteApplicationData(System.ReadOnlySpan<byte> buffer);
                            /*0x2b1c1c0*/ void WriteHandshakeMessage(byte[] buf, int off, int len);
                            /*0x2b1c48c*/ void OfferInput(byte[] input, int inputOff, int inputLen);
                            /*0x2b1c6ac*/ int GetAvailableInputBytes();
                            /*0x2b1c710*/ int ReadInput(byte[] buf, int off, int len);
                            /*0x2b1c82c*/ int GetAvailableOutputBytes();
                            /*0x2b1c8a0*/ int ReadOutput(byte[] buffer, int offset, int length);
                            /*0x2b1c9b4*/ bool EstablishSession(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession sessionToResume);
                            /*0x2b1ceb4*/ void InvalidateSession();
                            /*0x2b1d020*/ void ProcessFinishedMessage(System.IO.MemoryStream buf);
                            /*0x2b1d6a0*/ void Process13FinishedMessage(System.IO.MemoryStream buf);
                            /*0x2b1da04*/ void RaiseAlertFatal(short alertDescription, string message, System.Exception cause);
                            /*0x2b1dbcc*/ void RaiseAlertWarning(short alertDescription, string message);
                            /*0x2b1dd08*/ void Receive13KeyUpdate(System.IO.MemoryStream buf);
                            /*0x2b1df30*/ void SendCertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate, System.IO.Stream endPointHash);
                            /*0x2b0d728*/ void Send13CertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate);
                            /*0x2b1e198*/ void Send13CertificateVerifyMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned certificateVerify);
                            /*0x2b1e224*/ void SendChangeCipherSpec();
                            /*0x2b1e254*/ void SendChangeCipherSpecMessage();
                            /*0x2b1e2d8*/ void SendFinishedMessage();
                            /*0x2b1e488*/ void Send13FinishedMessage();
                            /*0x2b1e620*/ void Send13KeyUpdate(bool updateRequested);
                            /*0x2b1e888*/ void SendSupplementalDataMessage(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> supplementalData);
                            /*0x2b1ec74*/ void Close();
                            /*0x2b1ec84*/ void Flush();
                            /*0x2b09674*/ bool get_IsApplicationDataReady();
                            /*0x2b1ec88*/ bool get_IsClosed();
                            /*0x2b1eca0*/ bool get_IsHandshaking();
                            /*0x2b1ecec*/ short ProcessMaxFragmentLengthExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions, short alertDescription);
                        }

                        interface TlsPsk
                        {
                            /*0x1f30214*/ byte[] get_Identity();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_Key();
                            /*0x1f2ffc8*/ int get_PrfAlgorithm();
                        }

                        interface TlsPskExternal : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk
                        {
                        }

                        interface TlsPskIdentity
                        {
                            /*0x1f309e4*/ void SkipIdentityHint();
                            /*0x1f30ebc*/ void NotifyIdentityHint(byte[] psk_identity_hint);
                            /*0x1f30214*/ byte[] GetPskIdentity();
                            /*0x1f30214*/ byte[] GetPsk();
                        }

                        interface TlsPskIdentityManager
                        {
                        }

                        class TlsPskKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity m_pskIdentity;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentityManager m_pskIdentityManager;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x38*/ byte[] m_psk_identity_hint;
                            /*0x40*/ byte[] m_psk;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor m_serverEncryptor;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_preMasterSecret;

                            static /*0x2b1fc98*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b1fd14*/ TlsPskKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x2b1fd28*/ TlsPskKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentityManager pskIdentityManager, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x2b1fdcc*/ void SkipServerCredentials();
                            /*0x2b1fe14*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b1ff20*/ bool get_RequiresServerKeyExchange();
                            /*0x2b1ff34*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2b20354*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b2038c*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b209ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x2b20bc4*/ void GenerateEphemeralDH(System.IO.Stream output);
                            /*0x2b20ca0*/ void GenerateEphemeralECDH(System.IO.Stream output);
                            /*0x2b20d7c*/ byte[] GenerateOtherSecret(int pskLength);
                            /*0x2b20f74*/ void ProcessEphemeralDH(byte[] y);
                            /*0x2b21020*/ void ProcessEphemeralECDH(byte[] point);
                        }

                        class TlsRsaKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor m_serverEncryptor;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_preMasterSecret;

                            static /*0x2b210e8*/ int CheckKeyExchange(int keyExchange);
                            /*0x2b21158*/ TlsRsaKeyExchange(int keyExchange);
                            /*0x2b2117c*/ void SkipServerCredentials();
                            /*0x2b211b4*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b21280*/ short[] GetClientCertificateTypes();
                            /*0x2b212f0*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b21344*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b213c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsServerCertificate
                        {
                        }

                        class TlsServerCertificateImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_certificate;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus m_certificateStatus;

                            /*0x2b213e0*/ TlsServerCertificateImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus certificateStatus);
                        }

                        interface TlsSession
                        {
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters ExportSessionParameters();
                            /*0x1f30214*/ byte[] get_SessionID();
                            /*0x1f309e4*/ void Invalidate();
                            /*0x1f2fe14*/ bool get_IsResumable();
                        }

                        class TlsSessionImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession
                        {
                            /*0x10*/ byte[] m_sessionID;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters m_sessionParameters;
                            /*0x20*/ bool m_resumable;

                            /*0x2b21424*/ TlsSessionImpl(byte[] sessionID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters sessionParameters);
                            /*0x2b21570*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters ExportSessionParameters();
                            /*0x2b2164c*/ byte[] get_SessionID();
                            /*0x2b21708*/ void Invalidate();
                            /*0x2b217bc*/ bool get_IsResumable();
                        }

                        interface TlsSrpConfigVerifier
                        {
                            /*0x1f2fec8*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                        }

                        interface TlsSrpIdentity
                        {
                            /*0x1f30214*/ byte[] GetSrpIdentity();
                            /*0x1f30214*/ byte[] GetSrpPassword();
                        }

                        class TlsSrpKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity m_srpIdentity;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier m_srpConfigVerifier;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x38*/ byte[] m_srpSalt;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client m_srpClient;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Server m_srpServer;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_srpPeerCredentials;

                            static /*0x2b21880*/ int CheckKeyExchange(int keyExchange);
                            static /*0x2b21db0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePublicValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x2b218f4*/ TlsSrpKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                            /*0x2b21954*/ void SkipServerCredentials();
                            /*0x2b2199c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x2b21a10*/ bool get_RequiresServerKeyExchange();
                            /*0x2b21a18*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x2b21e7c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x2b21eb4*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x2b221c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsSrpUtilities
                        {
                            static /*0x2b223ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReadSrpParameter(System.IO.Stream input);
                            static /*0x2b22128*/ void WriteSrpParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, System.IO.Stream output);
                        }

                        class TlsStream : System.IO.Stream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol m_handler;
                            /*0x30*/ byte[] oneByteBuf;

                            /*0x2b1a65c*/ TlsStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol handler);
                            /*0x2b22484*/ bool get_CanRead();
                            /*0x2b2248c*/ bool get_CanSeek();
                            /*0x2b22494*/ bool get_CanWrite();
                            /*0x2b2249c*/ void Dispose(bool disposing);
                            /*0x2b224e4*/ void Flush();
                            /*0x2b22504*/ long get_Length();
                            /*0x2b2253c*/ long get_Position();
                            /*0x2b22574*/ void set_Position(long value);
                            /*0x2b225ac*/ int Read(byte[] buffer, int offset, int count);
                            /*0x2b225cc*/ int Read(System.Span<byte> buffer);
                            /*0x2b225ec*/ int ReadByte();
                            /*0x2b2264c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                            /*0x2b22684*/ void SetLength(long value);
                            /*0x2b226bc*/ void Write(byte[] buffer, int offset, int count);
                            /*0x2b226dc*/ void Write(System.ReadOnlySpan<byte> buffer);
                            /*0x2b226fc*/ void WriteByte(byte value);
                        }

                        class TlsUtilities
                        {
                            static /*0x0*/ byte[] DowngradeTlsV11;
                            static /*0x8*/ byte[] DowngradeTlsV12;
                            static /*0x10*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CertSigAlgOids;
                            static /*0x18*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> DefaultSupportedSigAlgs;
                            static /*0x20*/ byte[] EmptyBytes;
                            static /*0x28*/ short[] EmptyShorts;
                            static /*0x30*/ int[] EmptyInts;
                            static /*0x38*/ long[] EmptyLongs;
                            static /*0x40*/ string[] EmptyStrings;
                            static /*0x48*/ short MinimumHashStrict;
                            static /*0x4a*/ short MinimumHashPreferred;

                            static /*0x2b2bf38*/ TlsUtilities();
                            static /*0x2b2273c*/ void AddCertSigAlgOid(System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHash);
                            static /*0x2b227fc*/ void AddCertSigAlgOid(System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, short hashAlgorithm, short signatureAlgorithm);
                            static /*0x2b228b0*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CreateCertSigAlgOids();
                            static /*0x2b22e4c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CreateDefaultSupportedSigAlgs();
                            static /*0x2b2319c*/ void CheckUint8(short i);
                            static /*0x2b2322c*/ void CheckUint8(int i);
                            static /*0x2b194a4*/ void CheckUint16(int i);
                            static /*0x2b232d0*/ void CheckUint16(long i);
                            static /*0x2b23368*/ void CheckUint24(int i);
                            static /*0x2b23404*/ void CheckUint24(long i);
                            static /*0x2b196dc*/ bool IsValidUint8(short i);
                            static /*0x2b232b8*/ bool IsValidUint8(int i);
                            static /*0x2b232c4*/ bool IsValidUint16(int i);
                            static /*0x2b2335c*/ bool IsValidUint16(long i);
                            static /*0x2b233f4*/ bool IsValidUint24(int i);
                            static /*0x2b23490*/ bool IsValidUint24(long i);
                            static /*0x2b234a0*/ bool IsValidUint32(long i);
                            static /*0x2b08bd4*/ bool IsSsl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b1a5dc*/ bool IsTlsV11(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b234b0*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b23530*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b07e90*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b23604*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b236d8*/ void WriteUint8(short i, System.IO.Stream output);
                            static /*0x2b23700*/ void WriteUint8(int i, System.IO.Stream output);
                            static /*0x2b23728*/ void WriteUint8(short i, byte[] buf, int offset);
                            static /*0x2b18928*/ void WriteUint8(int i, byte[] buf, int offset);
                            static /*0x2b23754*/ void WriteUint8(int i, System.Span<byte> buf);
                            static /*0x2b1805c*/ void WriteUint16(int i, System.IO.Stream output);
                            static /*0x2b19530*/ void WriteUint16(int i, byte[] buf, int offset);
                            static /*0x2b23768*/ void WriteUint16(int i, System.Span<byte> buf);
                            static /*0x2b23790*/ void WriteUint24(int i, System.IO.Stream output);
                            static /*0x2b237f8*/ void WriteUint24(int i, byte[] buf, int offset);
                            static /*0x2b2385c*/ void WriteUint32(long i, System.IO.Stream output);
                            static /*0x2b238dc*/ void WriteUint64(long i, byte[] buf, int offset);
                            static /*0x2b13f28*/ void WriteOpaque8(byte[] buf, System.IO.Stream output);
                            static /*0x2b239cc*/ void WriteOpaque8(System.ReadOnlySpan<byte> data, System.Span<byte> buf);
                            static /*0x2b11bd0*/ void WriteOpaque16(byte[] buf, System.IO.Stream output);
                            static /*0x2b1fc08*/ void WriteOpaque24(byte[] buf, System.IO.Stream output);
                            static /*0x2b23ae8*/ void WriteUint8Array(short[] u8s, System.IO.Stream output);
                            static /*0x2b23ba8*/ void WriteUint8Array(short[] u8s, byte[] buf, int offset);
                            static /*0x2b23c64*/ void WriteUint8ArrayWithUint8Length(short[] u8s, System.IO.Stream output);
                            static /*0x2b23cec*/ void WriteUint8ArrayWithUint8Length(short[] u8s, byte[] buf, int offset);
                            static /*0x2b23d78*/ void WriteUint16Array(int[] u16s, System.IO.Stream output);
                            static /*0x2b23e28*/ void WriteUint16Array(int[] u16s, byte[] buf, int offset);
                            static /*0x2b23ee4*/ void WriteUint16ArrayWithUint16Length(int[] u16s, System.IO.Stream output);
                            static /*0x2b23f64*/ void WriteUint16ArrayWithUint16Length(int[] u16s, byte[] buf, int offset);
                            static /*0x2b18eac*/ byte[] DecodeOpaque16(byte[] buf, int minLength);
                            static /*0x2b18dd4*/ short DecodeUint8(byte[] buf);
                            static /*0x2b192b0*/ short[] DecodeUint8ArrayWithUint8Length(byte[] buf);
                            static /*0x2b18fb8*/ int DecodeUint16(byte[] buf);
                            static /*0x2b1ee6c*/ byte[] EncodeOpaque8(byte[] buf);
                            static /*0x2b18224*/ byte[] EncodeOpaque16(byte[] buf);
                            static /*0x2b1e720*/ byte[] EncodeUint8(short u8);
                            static /*0x2b1818c*/ byte[] EncodeUint8ArrayWithUint8Length(short[] u8s);
                            static /*0x2b18338*/ byte[] EncodeUint16(int u16);
                            static /*0x2b1888c*/ byte[] EncodeUint16ArrayWithUint16Length(int[] u16s);
                            static /*0x2b240bc*/ int ReadInt32(byte[] buf, int offset);
                            static /*0x2b138a4*/ short ReadUint8(System.IO.Stream input);
                            static /*0x2b1afac*/ short ReadUint8(byte[] buf, int offset);
                            static /*0x2b13900*/ int ReadUint16(System.IO.Stream input);
                            static /*0x2b23ff8*/ int ReadUint16(byte[] buf, int offset);
                            static /*0x2b24130*/ int ReadUint24(System.IO.Stream input);
                            static /*0x2b0e1dc*/ long ReadUint32(System.IO.Stream input);
                            static /*0x2b241d4*/ byte[] ReadFully(int length, System.IO.Stream input);
                            static /*0x2b1d39c*/ void ReadFully(System.Span<byte> buf, System.IO.Stream input);
                            static /*0x2b0e2a4*/ byte[] ReadOpaque8(System.IO.Stream input);
                            static /*0x2b13c9c*/ byte[] ReadOpaque8(System.IO.Stream input, int minLength);
                            static /*0x2b242b0*/ byte[] ReadOpaque8(System.IO.Stream input, int minLength, int maxLength);
                            static /*0x2b0de90*/ byte[] ReadOpaque16(System.IO.Stream input);
                            static /*0x2b119f8*/ byte[] ReadOpaque16(System.IO.Stream input, int minLength);
                            static /*0x2b1f3b4*/ byte[] ReadOpaque24(System.IO.Stream input, int minLength);
                            static /*0x2b24378*/ short[] ReadUint8Array(int count, System.IO.Stream input);
                            static /*0x2b24448*/ short[] ReadUint8ArrayWithUint8Length(System.IO.Stream input, int minLength);
                            static /*0x2b191e0*/ int[] ReadUint16Array(int count, System.IO.Stream input);
                            static /*0x2b19410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadVersion(byte[] buf, int offset);
                            static /*0x2b24504*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadVersion(System.IO.Stream input);
                            static /*0x2b18c48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadAsn1Object(byte[] encoding);
                            static /*0x2b18d04*/ void RequireDerEncoding(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable asn1, byte[] encoding);
                            static /*0x2b1ed78*/ void WriteGmtUnixTime(byte[] buf, int offset);
                            static /*0x2b245d0*/ void WriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, System.IO.Stream output);
                            static /*0x2b18954*/ void WriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] buf, int offset);
                            static /*0x2b24638*/ void AddIfSupported(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedAlgs, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm alg);
                            static /*0x2b24778*/ void AddIfSupported(System.Collections.Generic.IList<int> supportedGroups, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int namedGroup);
                            static /*0x2b248b8*/ void AddIfSupported(System.Collections.Generic.IList<int> supportedGroups, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] namedGroups);
                            static /*0x1ffc854*/ bool AddToSet<T>(System.Collections.Generic.IList<T> s, T i);
                            static /*0x2b24970*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetDefaultSupportedSignatureAlgorithms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b249d0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> candidates);
                            static /*0x2b087d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner);
                            static /*0x2b0a96c*/ byte[] GetExtensionData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int extensionType);
                            static /*0x2b0d3c8*/ bool HasExpectedEmptyExtensionData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int extensionType, short alertDescription);
                            static /*0x2b0960c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession ImportSession(byte[] sessionID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters sessionParameters);
                            static /*0x2b10ee4*/ bool IsExtendedMasterSecretOptionalTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] activeProtocolVersions);
                            static /*0x2b24dd0*/ bool IsNullOrContainsNull(object[] array);
                            static /*0x1f31840*/ bool IsNullOrEmpty<T>(T[] array);
                            static /*0x1f31840*/ bool IsNullOrEmpty<T>(System.Collections.Generic.IList<T> v);
                            static /*0x2b10778*/ bool IsSignatureAlgorithmsExtensionAllowed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b24e14*/ short GetLegacySignatureAlgorithmServer(int keyExchangeAlgorithm);
                            static /*0x2b24e38*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetLegacySupportedSignatureAlgorithms();
                            static /*0x2b183c8*/ void EncodeSupportedSignatureAlgorithms(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.IO.Stream output);
                            static /*0x2b19088*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ParseSupportedSignatureAlgorithms(System.IO.Stream input);
                            static /*0x2b24f4c*/ void VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm);
                            static /*0x2b088f4*/ void VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm, short alertDescription);
                            static /*0x2b24fb4*/ bool ContainsSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm);
                            static /*0x2b25284*/ bool ContainsAnySignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, short signatureAlgorithm);
                            static /*0x2b2554c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret Prf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string asciiLabel, byte[] seed, int length);
                            static /*0x2b25624*/ byte[] Clone(byte[] data);
                            static /*0x2b256d8*/ bool ConstantTimeAreEqual(int len, byte[] a, int aOff, byte[] b, int bOff);
                            static /*0x2b24038*/ byte[] CopyOfRangeExact(byte[] original, int from, int to);
                            static /*0x2b2576c*/ byte[] Concat(byte[] a, byte[] b);
                            static /*0x2b25810*/ byte[] CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, byte[] enc);
                            static /*0x2b2588c*/ byte[] CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, byte[] enc, int encOff, int encLen);
                            static /*0x2b25e90*/ byte[] CalculateFinishedHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret baseKey, byte[] transcriptHash);
                            static /*0x2b25f0c*/ byte[] CalculateFinishedHmac(int prfCryptoHashAlgorithm, int prfHashLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret baseKey, byte[] transcriptHash);
                            static /*0x2b1eefc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret preMasterSecret);
                            static /*0x2b26150*/ byte[] CalculatePskBinder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, bool isExternalPsk, int pskCryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret earlySecret, byte[] transcriptHash);
                            static /*0x2b1d43c*/ byte[] CalculateVerifyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, bool isServer);
                            static /*0x2b0b95c*/ void Establish13PhaseSecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret pskEarlySecret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret sharedSecret);
                            static /*0x2b265b4*/ void Establish13TrafficSecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] transcriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret phaseSecret, string clientLabel, string serverLabel, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x2b070c0*/ void Establish13PhaseApplication(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] serverFinishedTranscriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x2b0bf84*/ void Establish13PhaseHandshake(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] serverHelloTranscriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x2b1e7b0*/ void Update13TrafficSecretLocal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b1de54*/ void Update13TrafficSecretPeer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b26738*/ void Update13TrafficSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, bool forServer);
                            static /*0x2b268ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret Update13TrafficSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                            static /*0x2b269b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOidForHashAlgorithm(short hashAlgorithm);
                            static /*0x2b26b98*/ int GetPrfAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, int cipherSuite);
                            static /*0x2b26dbc*/ int GetPrfAlgorithm13(int cipherSuite);
                            static /*0x2b26df8*/ int[] GetPrfAlgorithms13(int[] cipherSuites);
                            static /*0x2b27038*/ byte[] CalculateSignatureHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm algorithm, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer buf);
                            static /*0x2b27414*/ void SendSignatureInput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer buf, System.IO.Stream output);
                            static /*0x2b091e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned GenerateCertificateVerifyClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner clientAuthSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm clientAuthAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamSigner clientAuthStreamSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x2b06e3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned Generate13CertificateVerify(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x2b27574*/ byte[] Generate13CertificateVerify(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner, string contextString, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x2b0e7dc*/ void Verify13CertificateVerifyServer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify certificateVerify);
                            static /*0x2b27a80*/ void Verify13CertificateVerify(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedAlgorithms, string contextString, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify certificateVerify);
                            static /*0x2b2797c*/ byte[] GetCertificateVerifyHeader(string contextString);
                            static /*0x2b12150*/ void VerifyServerKeyExchangeSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream signatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate serverCertificate, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer digestBuffer);
                            static /*0x2b08b0c*/ void TrackHashAlgorithmClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x1ffc854*/ System.Collections.Generic.IList<T> VectorOfOne<T>(T obj);
                            static /*0x2b27ecc*/ int GetCipherType(int cipherSuite);
                            static /*0x2b27f24*/ int GetEncryptionAlgorithm(int cipherSuite);
                            static /*0x2b27fc4*/ int GetEncryptionAlgorithmType(int encryptionAlgorithm);
                            static /*0x2b134a0*/ int GetKeyExchangeAlgorithm(int cipherSuite);
                            static /*0x2b27fe4*/ System.Collections.Generic.IList<int> GetKeyExchangeAlgorithms(int[] cipherSuites);
                            static /*0x2b2812c*/ int GetMacAlgorithm(int cipherSuite);
                            static /*0x2b281c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetMinimumVersion(int cipherSuite);
                            static /*0x2b28370*/ System.Collections.Generic.IList<int> GetNamedGroupRoles(int[] cipherSuites);
                            static /*0x2b283c8*/ System.Collections.Generic.IList<int> GetNamedGroupRoles(System.Collections.Generic.IList<int> keyExchangeAlgorithms);
                            static /*0x2b0d2f4*/ bool IsBlockCipherSuite(int cipherSuite);
                            static /*0x2b0a518*/ bool IsValidCipherSuiteSelection(int[] offeredCipherSuites, int cipherSuite);
                            static /*0x2b0ac34*/ bool IsValidKeyShareSelection(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, int[] clientSupportedGroups, System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> clientAgreements, int keyShareGroup);
                            static /*0x2b27e14*/ bool IsValidSignatureAlgorithmForServerKeyExchange(short signatureAlgorithm, int keyExchangeAlgorithm);
                            static /*0x2b0aaa4*/ bool IsValidVersionForCipherSuite(int cipherSuite, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x2b28800*/ int[] GetSupportedCipherSuites(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] suites);
                            static /*0x2b2886c*/ int[] GetSupportedCipherSuites(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] suites, int suitesOff, int suitesCount);
                            static /*0x2b289e4*/ bool IsSupportedCipherSuite(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int cipherSuite);
                            static /*0x2b28b8c*/ bool IsSupportedKeyExchange(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int keyExchangeAlgorithm);
                            static /*0x2b29128*/ bool HasAnyRsaSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            static /*0x2b06c48*/ byte[] GetCurrentPrfHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x2b25dac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, short hashAlgorithm);
                            static /*0x2b2735c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x2b293e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateKeyExchangeClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, int keyExchange);
                            static /*0x2b09b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange InitKeyExchangeClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client);
                            static /*0x2b08fb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher InitCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x2b29c0c*/ void CheckTlsFeatures(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x2b09714*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus serverCertificateStatus, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x2b0ea1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest ValidateCertificateRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange);
                            static /*0x2b2a24c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest NormalizeCertificateRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest, short[] validClientCertificateTypes);
                            static /*0x2b2a340*/ bool ContainsAll(short[] container, short[] elements);
                            static /*0x2b2a404*/ short[] RetainAll(short[] retainer, short[] elements);
                            static /*0x2b2a584*/ short[] Truncate(short[] a, int n);
                            static /*0x2b26fac*/ int[] Truncate(int[] a, int n);
                            static /*0x2b12b4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement RequireAgreementCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x2b12654*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner RequireSignerCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x2b2a610*/ void CheckDowngradeMarker(byte[] randomBlock, byte[] downgradeMarker);
                            static /*0x2b0d018*/ void CheckDowngradeMarker(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] randomBlock);
                            static /*0x2b2a6c8*/ bool areCertificatesEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate b);
                            static /*0x2b2a938*/ bool isSafeRenegotiationServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            static /*0x2b07f30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication ReceiveServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x2b0e3d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication Receive13ServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x2b112cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication Skip13ServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext);
                            static /*0x2b10bc4*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> AddKeyShareToClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x2b0f554*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> AddKeyShareToClientHelloRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, int keyShareGroup);
                            static /*0x2b2aa28*/ void CollectKeyShares(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] supportedGroups, System.Collections.Generic.IList<int> keyShareGroups, System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> clientAgreements, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x2b2b188*/ void WriteEncryptedPms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] encryptedPms, System.IO.Stream output);
                            static /*0x2b10500*/ byte[] GetSessionID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession tlsSession);
                            static /*0x2b08360*/ void AdjustTranscriptForRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x2b086f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials EstablishClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x2b06d60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner Establish13ClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x2b10808*/ void EstablishClientSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x2b09594*/ void EstablishServerSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x2b2b24c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials ValidateCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x2b2b340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner Validate13Credentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x2b0af9c*/ void NegotiatedCipherSuite(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, int cipherSuite);
                            static /*0x2b2b3ec*/ void NegotiatedVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters);
                            static /*0x2b0ade0*/ void NegotiatedVersionTlsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client);
                            static /*0x2b26530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string label, byte[] transcriptHash);
                            static /*0x2b26460*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveSecret(int prfCryptoHashAlgorithm, int prfHashLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string label, byte[] transcriptHash);
                            static /*0x2b1ccc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GetSessionMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret);
                            static /*0x2b1f2f4*/ bool IsPermittedExtensionType13(int handshakeType, int extensionType);
                            static /*0x2b0a5a8*/ void CheckExtensionData13(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int handshakeType, short alertDescription);
                            static /*0x2b20764*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateEncryptedPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor, System.IO.Stream output);
                            static /*0x2b2b4c0*/ void AddPreSharedKeyToClientExtensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x2b108c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig AddPreSharedKeyToClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, int[] offeredCipherSuites);
                            static /*0x2b0f0e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig AddPreSharedKeyToClientHelloRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig clientBinders, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x2b2bcf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GetPskEarlySecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk psk);
                            static /*0x2b2ba5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] GetPskEarlySecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks);
                            static /*0x2b2b688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal[] GetPskExternalsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, int[] offeredCipherSuites);
                            static /*0x2b2bb88*/ System.Collections.Generic.IList<int> GetPskIndices(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, int prfAlgorithm);
                        }

                        class TrustedAuthority
                        {
                            /*0x10*/ short m_identifierType;
                            /*0x18*/ object m_identifier;

                            /*0x2b2c188*/ void Encode(System.IO.Stream output);
                        }

                        namespace Crypto
                        {
                            class DHGroup
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x28*/ int l;

                                /*0x2b2c364*/ DHGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int l);
                                /*0x2b2c3d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x2b2c3d8*/ int get_L();
                                /*0x2b2c3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x2b2c3e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                            }

                            class DHStandardGroups
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                                static /*0x8*/ string rfc2409_768_p;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc2409_768;
                                static /*0x18*/ string rfc2409_1024_p;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc2409_1024;
                                static /*0x28*/ string rfc3526_1536_p;
                                static /*0x30*/ int rfc3526_1536_l;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_1536;
                                static /*0x40*/ string rfc3526_2048_p;
                                static /*0x48*/ int rfc3526_2048_l;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_2048;
                                static /*0x58*/ string rfc3526_3072_p;
                                static /*0x60*/ int rfc3526_3072_l;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_3072;
                                static /*0x70*/ string rfc3526_4096_p;
                                static /*0x78*/ int rfc3526_4096_l;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_4096;
                                static /*0x88*/ string rfc3526_6144_p;
                                static /*0x90*/ int rfc3526_6144_l;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_6144;
                                static /*0xa0*/ string rfc3526_8192_p;
                                static /*0xa8*/ int rfc3526_8192_l;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_8192;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc4306_768;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc4306_1024;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc5996_768;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc5996_1024;
                                static /*0xd8*/ string rfc7919_ffdhe2048_p;
                                static /*0xe0*/ int rfc7919_ffdhe2048_l;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe2048;
                                static /*0xf0*/ string rfc7919_ffdhe3072_p;
                                static /*0xf8*/ int rfc7919_ffdhe3072_l;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe3072;
                                static /*0x108*/ string rfc7919_ffdhe4096_p;
                                static /*0x110*/ int rfc7919_ffdhe4096_l;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe4096;
                                static /*0x120*/ string rfc7919_ffdhe6144_p;
                                static /*0x128*/ int rfc7919_ffdhe6144_l;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe6144;
                                static /*0x138*/ string rfc7919_ffdhe8192_p;
                                static /*0x140*/ int rfc7919_ffdhe8192_l;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe8192;

                                static /*0x2b2c7a8*/ DHStandardGroups();
                                static /*0x2b2c3f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2b2c49c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup SafePrimeGen2(string hexP);
                                static /*0x2b2c4f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup SafePrimeGen2(string hexP, int l);
                            }

                            class Srp6Group
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;

                                /*0x2b2cdd4*/ Srp6Group(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x2b2ce18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x2b2ce20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            }

                            class Srp6StandardGroups
                            {
                                static /*0x0*/ string rfc5054_1024_N;
                                static /*0x8*/ string rfc5054_1024_g;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_1024;
                                static /*0x18*/ string rfc5054_1536_N;
                                static /*0x20*/ string rfc5054_1536_g;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_1536;
                                static /*0x30*/ string rfc5054_2048_N;
                                static /*0x38*/ string rfc5054_2048_g;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_2048;
                                static /*0x48*/ string rfc5054_3072_N;
                                static /*0x50*/ string rfc5054_3072_g;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_3072;
                                static /*0x60*/ string rfc5054_4096_N;
                                static /*0x68*/ string rfc5054_4096_g;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_4096;
                                static /*0x78*/ string rfc5054_6144_N;
                                static /*0x80*/ string rfc5054_6144_g;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_6144;
                                static /*0x90*/ string rfc5054_8192_N;
                                static /*0x98*/ string rfc5054_8192_g;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_8192;

                                static /*0x2b2cf64*/ Srp6StandardGroups();
                                static /*0x2b2ce28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2b2cebc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group FromNG(string hexN, string hexG);
                            }

                            interface Tls13Verifier
                            {
                                /*0x1f30214*/ System.IO.Stream get_Stream();
                                /*0x1f2fec8*/ bool VerifySignature(byte[] signature);
                            }

                            interface TlsAgreement
                            {
                                /*0x1f30214*/ byte[] GenerateEphemeral();
                                /*0x1f30ebc*/ void ReceivePeerValue(byte[] peerValue);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                            }

                            interface TlsCertificate
                            {
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor CreateEncryptor(int tlsCertificateRole);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier CreateVerifier(short signatureAlgorithm);
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier CreateVerifier(int signatureScheme);
                                /*0x1f30214*/ byte[] GetEncoded();
                                /*0x1f302cc*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                /*0x1f30214*/ string get_SigAlgOid();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CheckUsageInRole(int tlsCertificateRole);
                            }

                            interface TlsCipher
                            {
                                int GetCiphertextDecodeLimit(int plaintextLimit);
                                int GetPlaintextLimit(int ciphertextLimit);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                /*0x1f309e4*/ void RekeyDecoder();
                                /*0x1f309e4*/ void RekeyEncoder();
                                /*0x1f2fe14*/ bool get_UsesOpaqueRecordType();
                            }

                            interface TlsCrypto
                            {
                                /*0x1f2fe14*/ bool HasDHAgreement();
                                /*0x1f2fe14*/ bool HasECDHAgreement();
                                /*0x1f2fe40*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                /*0x1f2fe40*/ bool HasMacAlgorithm(int macAlgorithm);
                                /*0x1f2fe40*/ bool HasNamedGroup(int namedGroup);
                                /*0x1f2fe14*/ bool HasRsaEncryption();
                                bool HasSignatureAlgorithm(short signatureAlgorithm);
                                /*0x1f2fec8*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                /*0x1f2fe14*/ bool HasSrpAuthentication();
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                /*0x1f30348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret AdoptSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                            }

                            class TlsCryptoParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;

                                /*0x2b2d2bc*/ TlsCryptoParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                                /*0x2b2d2ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                                /*0x2b2d390*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                                /*0x2b2d434*/ bool get_IsServer();
                                /*0x2b2d4d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            }

                            class TlsCryptoUtilities
                            {
                                static /*0x0*/ byte[] Tls13Prefix;

                                static /*0x2b2e0fc*/ TlsCryptoUtilities();
                                static /*0x2b2d57c*/ int GetHash(short hashAlgorithm);
                                static /*0x2b2d5fc*/ int GetHashForHmac(int macAlgorithm);
                                static /*0x2b2d680*/ int GetHashForPrf(int prfAlgorithm);
                                static /*0x2b2d788*/ int GetHashOutputSize(int cryptoHashAlgorithm);
                                static /*0x2b2d7dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOidForHash(int cryptoHashAlgorithm);
                                static /*0x2b2d988*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpandLabel(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm, string label, byte[] context, int length);
                                static /*0x2b2dad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpandLabel(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> context, int length);
                            }

                            class TlsDecodeResult
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int off;
                                /*0x1c*/ int len;
                                /*0x20*/ short contentType;
                                /*0x22*/ bool fromBufferPool;

                                /*0x2b2e19c*/ TlsDecodeResult(byte[] buf, int off, int len, short contentType);
                            }

                            class TlsDHConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup m_explicitGroup;
                                /*0x18*/ int m_namedGroup;
                                /*0x1c*/ bool m_padded;

                                /*0x2b2e1f0*/ TlsDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup explicitGroup);
                                /*0x2b2e230*/ TlsDHConfig(int namedGroup, bool padded);
                                /*0x2b2e270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup get_ExplicitGroup();
                                /*0x2b2e278*/ int get_NamedGroup();
                                /*0x2b2e280*/ bool get_IsPadded();
                            }

                            interface TlsDHDomain
                            {
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateDH();
                            }

                            class TlsECConfig
                            {
                                /*0x10*/ int m_namedGroup;

                                /*0x2b2e288*/ TlsECConfig(int namedGroup);
                                /*0x2b2e2b0*/ int get_NamedGroup();
                            }

                            interface TlsECDomain
                            {
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                            }

                            struct TlsEncodeResult
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int off;
                                /*0x1c*/ int len;
                                /*0x20*/ short recordType;
                                /*0x22*/ bool fromBufferPool;

                                /*0x2b2e2b8*/ TlsEncodeResult(byte[] buf, int off, int len, short recordType);
                            }

                            interface TlsEncryptor
                            {
                                /*0x1f30348*/ byte[] Encrypt(byte[] input, int inOff, int length);
                            }

                            interface TlsHash
                            {
                                void Update(byte[] input, int inOff, int length);
                                void Update(System.ReadOnlySpan<byte> input);
                                /*0x1f30214*/ byte[] CalculateHash();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                                /*0x1f309e4*/ void Reset();
                            }

                            class TlsHashSink : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_hash;

                                /*0x2b2e2f8*/ TlsHashSink(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                                /*0x2b2e328*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2b2e414*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x2b2e4f8*/ void WriteByte(byte value);
                            }

                            interface TlsHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                            {
                                /*0x1f2ffc8*/ int get_InternalBlockSize();
                            }

                            interface TlsMac
                            {
                                void SetKey(byte[] key, int keyOff, int keyLen);
                                void SetKey(System.ReadOnlySpan<byte> key);
                                void Update(byte[] input, int inOff, int length);
                                void Update(System.ReadOnlySpan<byte> input);
                                /*0x1f30214*/ byte[] CalculateMac();
                                /*0x1f2ffc8*/ int get_MacLength();
                                /*0x1f309e4*/ void Reset();
                            }

                            interface TlsNonceGenerator
                            {
                                /*0x1f30240*/ byte[] GenerateNonce(int size);
                            }

                            class TlsNullNullCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher Instance;

                                static /*0x2b2e81c*/ TlsNullNullCipher();
                                /*0x2b2e814*/ TlsNullNullCipher();
                                /*0x2b2e5e8*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                /*0x2b2e5f0*/ int GetPlaintextLimit(int ciphertextLimit);
                                /*0x2b2e5f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                /*0x2b2e704*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                /*0x2b2e794*/ void RekeyDecoder();
                                /*0x2b2e7d0*/ void RekeyEncoder();
                                /*0x2b2e80c*/ bool get_UsesOpaqueRecordType();
                            }

                            interface TlsSecret
                            {
                                byte[] CalculateHmac(int cryptoHashAlgorithm, byte[] buf, int off, int len);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                /*0x1f309e4*/ void Destroy();
                                /*0x1f302cc*/ byte[] Encrypt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor);
                                /*0x1f30214*/ byte[] Extract();
                                void ExtractTo(System.Span<byte> output);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                /*0x1f2fe14*/ bool IsAlive();
                            }

                            interface TlsSrp6Client
                            {
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                /*0x1f303d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password);
                            }

                            interface TlsSrp6Server
                            {
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger clientA);
                            }

                            class TlsSrpConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] m_explicitNG;

                                /*0x2b2e9ac*/ TlsSrpConfig();
                                /*0x2b2e884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetExplicitNG();
                                /*0x2b2e8fc*/ void SetExplicitNG(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] explicitNG);
                            }

                            interface TlsStreamSigner
                            {
                                /*0x1f30214*/ System.IO.Stream get_Stream();
                                /*0x1f30214*/ byte[] GetSignature();
                            }

                            interface TlsStreamVerifier
                            {
                                /*0x1f30214*/ System.IO.Stream get_Stream();
                                /*0x1f2fe14*/ bool IsVerified();
                            }

                            interface TlsVerifier
                            {
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                /*0x1f2ff00*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                            }

                            namespace Impl
                            {
                                class AbstractTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto
                                {
                                    /*0x2b2eac0*/ AbstractTlsCrypto();
                                    /*0x1f2fe14*/ bool HasDHAgreement();
                                    /*0x1f2fe14*/ bool HasECDHAgreement();
                                    /*0x1f2fe40*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                    /*0x1f2fe40*/ bool HasMacAlgorithm(int macAlgorithm);
                                    /*0x1f2fe40*/ bool HasNamedGroup(int namedGroup);
                                    /*0x1f2fe14*/ bool HasRsaEncryption();
                                    bool HasSignatureAlgorithm(short signatureAlgorithm);
                                    /*0x1f2fec8*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                    /*0x1f2fe14*/ bool HasSrpAuthentication();
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                                    /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_SecureRandom();
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                    /*0x1f30348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                    /*0x2b2e9b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret AdoptSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                    /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                    /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac(int macAlgorithm);
                                    /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmacForHash(int cryptoHashAlgorithm);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                    /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                                }

                                class AbstractTlsSecret : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret
                                {
                                    /*0x10*/ byte[] m_data;

                                    static /*0x2b2eac8*/ byte[] CopyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret other);
                                    /*0x2b2eae4*/ AbstractTlsSecret(byte[] data);
                                    /*0x2b2eb14*/ void CheckAlive();
                                    /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto get_Crypto();
                                    /*0x2b2eb6c*/ byte[] CalculateHmac(int cryptoHashAlgorithm, byte[] buf, int off, int len);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                    /*0x2b2ee14*/ void Destroy();
                                    /*0x2b2eeec*/ byte[] Encrypt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor);
                                    /*0x2b2f070*/ byte[] Extract();
                                    /*0x2b2f154*/ void ExtractTo(System.Span<byte> output);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                    /*0x2b2f2c0*/ bool IsAlive();
                                    /*0x2b2f384*/ byte[] CopyData();
                                }

                                class LegacyTls13Verifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier
                                {
                                    /*0x10*/ int m_signatureScheme;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier m_tls13Verifier;

                                    /*0x2b2f498*/ LegacyTls13Verifier(int signatureScheme, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier tls13Verifier);
                                    /*0x2b2f5a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                    /*0x2b2f6fc*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);

                                    class TlsStreamVerifierImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier m_tls13Verifier;
                                        /*0x18*/ byte[] m_signature;

                                        /*0x2b2f6b8*/ TlsStreamVerifierImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier tls13Verifier, byte[] signature);
                                        /*0x2b2f734*/ System.IO.Stream get_Stream();
                                        /*0x2b2f7d4*/ bool IsVerified();
                                    }
                                }

                                class RsaUtilities
                                {
                                    static /*0x0*/ byte[] RSAPSSParams_256_A;
                                    static /*0x8*/ byte[] RSAPSSParams_384_A;
                                    static /*0x10*/ byte[] RSAPSSParams_512_A;
                                    static /*0x18*/ byte[] RSAPSSParams_256_B;
                                    static /*0x20*/ byte[] RSAPSSParams_384_B;
                                    static /*0x28*/ byte[] RSAPSSParams_512_B;

                                    static /*0x2b2f880*/ RsaUtilities();
                                    static /*0x2b2fef4*/ bool SupportsPkcs1(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                    static /*0x2b2ffd0*/ bool SupportsPss_Pss(short signatureAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                    static /*0x2b30298*/ bool SupportsPss_Rsae(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                }

                                class TlsAeadCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ int m_keySize;
                                    /*0x1c*/ int m_macSize;
                                    /*0x20*/ int m_fixed_iv_length;
                                    /*0x24*/ int m_record_iv_length;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_decryptCipher;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_encryptCipher;
                                    /*0x38*/ byte[] m_decryptNonce;
                                    /*0x40*/ byte[] m_encryptNonce;
                                    /*0x48*/ bool m_isTlsV13;
                                    /*0x4c*/ int m_nonceMode;

                                    static /*0x2b312b4*/ int GetNonceMode(bool isTLSv13, int aeadType);
                                    /*0x2b30320*/ TlsAeadCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl decryptCipher, int keySize, int macSize, int aeadType);
                                    /*0x2b3171c*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x2b31738*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x2b31754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x2b31d28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int ciphertextOffset, int ciphertextLength);
                                    /*0x2b322f8*/ void RekeyDecoder();
                                    /*0x2b32368*/ void RekeyEncoder();
                                    /*0x2b323d4*/ bool get_UsesOpaqueRecordType();
                                    /*0x2b323dc*/ byte[] GetAdditionalData(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int ciphertextLength, int plaintextLength);
                                    /*0x2b32534*/ void RekeyCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, bool serverSecret);
                                    /*0x2b325c0*/ void Setup13Cipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm);
                                }

                                interface TlsAeadCipherImpl
                                {
                                    void SetKey(byte[] key, int keyOff, int keyLen);
                                    void SetKey(System.ReadOnlySpan<byte> key);
                                    /*0x1f30f2c*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                    int GetOutputSize(int inputLength);
                                    int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                    /*0x1f309e4*/ void Reset();
                                }

                                class TlsBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ byte[] m_randomData;
                                    /*0x20*/ bool m_encryptThenMac;
                                    /*0x21*/ bool m_useExplicitIV;
                                    /*0x22*/ bool m_acceptExtraPadding;
                                    /*0x23*/ bool m_useExtraPadding;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_decryptCipher;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_encryptCipher;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_readMac;
                                    /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_writeMac;

                                    /*0x2b328d8*/ TlsBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl decryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac, int cipherKeySize);
                                    /*0x2b33f6c*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x2b340b8*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x2b34220*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x2b34828*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                    /*0x2b34d34*/ void RekeyDecoder();
                                    /*0x2b34d70*/ void RekeyEncoder();
                                    /*0x2b34dac*/ bool get_UsesOpaqueRecordType();
                                    /*0x2b34db4*/ int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize);
                                    /*0x2b34f60*/ int ChooseExtraPadBlocks(int max);
                                    /*0x2b35134*/ int GetCiphertextLength(int blockSize, int macSize, int maxPadding, int plaintextLength);
                                }

                                interface TlsBlockCipherImpl
                                {
                                    void SetKey(System.ReadOnlySpan<byte> key);
                                    void Init(System.ReadOnlySpan<byte> iv);
                                    int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                    /*0x1f2ffc8*/ int GetBlockSize();
                                }

                                class TlsImplUtilities
                                {
                                    static /*0x2b35174*/ bool IsSsl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                    static /*0x2b33d54*/ bool IsTlsV11(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x2b311b4*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x2b31234*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x2b3519c*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                    static /*0x2b3131c*/ void CalculateKeyBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, System.Span<byte> keyBlock);
                                }

                                class TlsNullCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac m_readMac;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac m_writeMac;

                                    /*0x2b351bc*/ TlsNullCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac);
                                    /*0x2b35a1c*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x2b35a48*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x2b35a74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x2b35c2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                    /*0x2b35db0*/ void RekeyDecoder();
                                    /*0x2b35dec*/ void RekeyEncoder();
                                    /*0x2b35e28*/ bool get_UsesOpaqueRecordType();
                                }

                                class TlsSuiteHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac m_mac;
                                    /*0x20*/ int m_digestBlockSize;
                                    /*0x24*/ int m_digestOverhead;
                                    /*0x28*/ int m_macSize;

                                    static /*0x2b35e30*/ int GetMacSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac mac);
                                    /*0x2b33dd4*/ TlsSuiteHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac mac);
                                    /*0x2b35f34*/ int get_Size();
                                    /*0x2b35f3c*/ byte[] CalculateMac(long seqNo, short type, byte[] msg, int msgOff, int msgLen);
                                    /*0x2b36024*/ byte[] CalculateMac(long seqNo, short type, System.ReadOnlySpan<byte> message);
                                    /*0x2b36310*/ byte[] CalculateMacConstantTime(long seqNo, short type, byte[] msg, int msgOff, int msgLen, int fullLength, byte[] dummyData);
                                    /*0x2b3655c*/ int GetDigestBlockCount(int inputLength);
                                    /*0x2b3656c*/ byte[] Truncate(byte[] bs);
                                }

                                interface TlsSuiteMac
                                {
                                    /*0x1f2ffc8*/ int get_Size();
                                    byte[] CalculateMac(long seqNo, short type, byte[] message, int offset, int length);
                                    byte[] CalculateMac(long seqNo, short type, System.ReadOnlySpan<byte> message);
                                    byte[] CalculateMacConstantTime(long seqNo, short type, byte[] message, int offset, int length, int expectedLength, byte[] randomData);
                                }

                                namespace BC
                                {
                                    class BcChaCha20Poly1305 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                                    {
                                        static /*0x0*/ byte[] Zeroes;
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine m_cipher;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.Poly1305 m_mac;
                                        /*0x20*/ bool m_isEncrypting;
                                        /*0x24*/ int m_additionalDataLength;

                                        static /*0x2b37030*/ BcChaCha20Poly1305();
                                        /*0x2b365f4*/ BcChaCha20Poly1305(bool isEncrypting);
                                        /*0x2b366b0*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x2b369cc*/ int GetOutputSize(int inputLength);
                                        /*0x2b369e4*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                        /*0x2b36d74*/ void Reset();
                                        /*0x2b36da8*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x2b36eb4*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x2b36b10*/ void InitMac();
                                        /*0x2b368fc*/ void UpdateMac(byte[] buf, int off, int len);
                                    }

                                    class BcSsl3Hmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                                    {
                                        static /*0x0*/ byte[] IPAD;
                                        static /*0x8*/ byte[] OPAD;
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest m_digest;
                                        /*0x18*/ int m_padLength;
                                        /*0x20*/ byte[] m_secret;

                                        static /*0x2b37c10*/ BcSsl3Hmac();
                                        static /*0x2b37b78*/ byte[] GenPad(byte b, int count);
                                        /*0x2b370a4*/ BcSsl3Hmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x2b37178*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x2b37218*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x2b37294*/ void Update(byte[] input, int inOff, int len);
                                        /*0x2b37358*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x2b37414*/ byte[] CalculateMac();
                                        /*0x2b37860*/ int get_InternalBlockSize();
                                        /*0x2b37904*/ int get_MacLength();
                                        /*0x2b379a4*/ void Reset();
                                        /*0x2b374f4*/ void DoFinal(byte[] output, int outOff);
                                    }

                                    class BcTls13Verifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IO.SignerSink m_output;

                                        /*0x2b37c94*/ BcTls13Verifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner verifier);
                                        /*0x2b37d54*/ System.IO.Stream get_Stream();
                                        /*0x2b37d5c*/ bool VerifySignature(byte[] signature);
                                    }

                                    class BcTlsAeadCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                                    {
                                        /*0x10*/ bool m_isEncrypting;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher m_cipher;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                                        /*0x2b37e10*/ BcTlsAeadCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher cipher, bool isEncrypting);
                                        /*0x2b37e4c*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x2b37ed4*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x2b37f4c*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                        /*0x2b38050*/ int GetOutputSize(int inputLength);
                                        /*0x2b380fc*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x2b3830c*/ void Reset();
                                    }

                                    class BcTlsBlockCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl
                                    {
                                        /*0x10*/ bool m_isEncrypting;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher m_cipher;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                                        /*0x2b383b0*/ BcTlsBlockCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, bool isEncrypting);
                                        /*0x2b383ec*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x2b38464*/ void Init(System.ReadOnlySpan<byte> iv);
                                        /*0x2b38560*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x2b386d0*/ int GetBlockSize();
                                    }

                                    class BcTlsCertificate : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate
                                    {
                                        /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure m_certificate;

                                        static /*0x2b38774*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure ParseCertificate(byte[] encoding);
                                        /*0x2b3888c*/ BcTlsCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] encoding);
                                        /*0x2b388bc*/ BcTlsCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure certificate);
                                        /*0x2b38950*/ byte[] GetEncoded();
                                        /*0x2b389a4*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                        /*0x2b38a5c*/ string get_SigAlgOid();
                                        /*0x2b38a90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                        /*0x2b38ab8*/ bool SupportsKeyUsage(int keyUsageBits);
                                    }

                                    class BcTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom m_entropySource;

                                        /*0x2b38b28*/ BcTlsCrypto(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom entropySource);
                                        /*0x2b38ba4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret AdoptLocalSecret(byte[] data);
                                        /*0x2b38c50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_SecureRandom();
                                        /*0x2b38c58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                        /*0x2b38d8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                        /*0x2b38f14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x2b38fd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        /*0x2b39170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                        /*0x2b3940c*/ bool HasDHAgreement();
                                        /*0x2b39414*/ bool HasECDHAgreement();
                                        /*0x2b3941c*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                        /*0x2b39438*/ bool HasMacAlgorithm(int macAlgorithm);
                                        /*0x2b39448*/ bool HasNamedGroup(int namedGroup);
                                        /*0x2b394a0*/ bool HasRsaEncryption();
                                        /*0x2b394a8*/ bool HasSignatureAlgorithm(short signatureAlgorithm);
                                        /*0x2b394c4*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                        /*0x2b39500*/ bool HasSrpAuthentication();
                                        /*0x2b39508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                        /*0x2b39584*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                        /*0x2b39658*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CloneDigest(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x2b39a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CreateDigest(int cryptoHashAlgorithm);
                                        /*0x2b39c14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                        /*0x2b39ccc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateBlockCipher(int encryptionAlgorithm);
                                        /*0x2b39dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher blockCipher);
                                        /*0x2b39e1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(int encryptionAlgorithm);
                                        /*0x2b39e50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateChaCha20Poly1305(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x2b39f00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aes_Ccm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x2b3a030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aes_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x2b3a160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aria_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x2b3a290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Camellia_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x2b3a3c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher_Cbc(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int cipherKeySize, int macAlgorithm);
                                        /*0x2b3a540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_SM4_Ccm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x2b3a660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_SM4_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x2b3a780*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher CreateNullCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int macAlgorithm);
                                        /*0x2b3a834*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAesEngine();
                                        /*0x2b3a83c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAriaEngine();
                                        /*0x2b3a890*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCamelliaEngine();
                                        /*0x2b3a8e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateDesEdeEngine();
                                        /*0x2b3a938*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateSeedEngine();
                                        /*0x2b3a98c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateSM4Engine();
                                        /*0x2b3a9e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateCcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                                        /*0x2b3aa3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateGcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                                        /*0x2b3aa98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aes_Ccm();
                                        /*0x2b3aacc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aes_Gcm();
                                        /*0x2b3ab00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aria_Gcm();
                                        /*0x2b3ab34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Camellia_Gcm();
                                        /*0x2b3ab68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_SM4_Ccm();
                                        /*0x2b3ab9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_SM4_Gcm();
                                        /*0x2b3abd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac(int macAlgorithm);
                                        /*0x2b3acbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmacForHash(int cryptoHashAlgorithm);
                                        /*0x2b3adac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac_Ssl(int macAlgorithm);
                                        /*0x2b3aed0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int macAlgorithm);
                                        /*0x2b3af24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                        /*0x2b3b09c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                                    }

                                    class BcTlsDH : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain m_domain;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair m_localKeyPair;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters m_peerPublicKey;

                                        /*0x2b3b138*/ BcTlsDH(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain domain);
                                        /*0x2b3b168*/ byte[] GenerateEphemeral();
                                        /*0x2b3b228*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x2b3b25c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcTlsDHDomain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_config;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters m_domainParameters;

                                        static /*0x2b3b2fc*/ byte[] EncodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dh, bool padded, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x2b3b3a4*/ int GetValueLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dh);
                                        static /*0x2b3b408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey, bool padded);
                                        static /*0x2b3b4d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters GetDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x2b38f7c*/ BcTlsDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x2b3b5f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey);
                                        /*0x2b3b640*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateDH();
                                        /*0x2b3b6a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DecodeParameter(byte[] encoding);
                                        /*0x2b3b774*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters DecodePublicKey(byte[] encoding);
                                        /*0x2b3b8a4*/ byte[] EncodePublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey);
                                        /*0x2b3b8dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                    }

                                    class BcTlsDsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier
                                    {
                                        /*0x2b3b9b4*/ BcTlsDsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters publicKey);
                                        /*0x2b3b9bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x2b3ba10*/ short get_SignatureAlgorithm();
                                    }

                                    class BcTlsDssVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x2b3b9b8*/ BcTlsDssVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicKey);
                                        /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        short get_SignatureAlgorithm();
                                        /*0x2b3bb1c*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsECDH : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain m_domain;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair m_localKeyPair;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters m_peerPublicKey;

                                        /*0x2b3be28*/ BcTlsECDH(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain domain);
                                        /*0x2b3be58*/ byte[] GenerateEphemeral();
                                        /*0x2b3bf18*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x2b3bf4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcTlsECDomain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_config;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters m_domainParameters;

                                        static /*0x2b3bfec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateECDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        static /*0x2b3c0e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters GetDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        static /*0x2b3c108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters GetDomainParameters(int namedGroup);
                                        /*0x2b39114*/ BcTlsECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        /*0x2b3c20c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateECDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x2b3c214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                        /*0x2b3c27c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(byte[] encoding);
                                        /*0x2b3c2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters DecodePublicKey(byte[] encoding);
                                        /*0x2b3c414*/ byte[] EncodePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                        /*0x2b3c438*/ byte[] EncodePublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x2b3c454*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                    }

                                    class BcTlsECDsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier
                                    {
                                        /*0x2b3c524*/ BcTlsECDsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x2b3c528*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x2b3c57c*/ short get_SignatureAlgorithm();
                                    }

                                    class BcTlsHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ int m_cryptoHashAlgorithm;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest m_digest;

                                        /*0x2b39c7c*/ BcTlsHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, int cryptoHashAlgorithm);
                                        /*0x2b3c584*/ BcTlsHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x2b3c5d8*/ void Update(byte[] data, int offSet, int length);
                                        /*0x2b3c69c*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x2b3c758*/ byte[] CalculateHash();
                                        /*0x2b3c89c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                                        /*0x2b3c938*/ void Reset();
                                    }

                                    class BcTlsHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.HMac m_hmac;

                                        /*0x2b3ad7c*/ BcTlsHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.HMac hmac);
                                        /*0x2b3c9dc*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x2b3ca74*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x2b3cafc*/ void Update(byte[] input, int inOff, int length);
                                        /*0x2b3cb1c*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x2b3cb3c*/ byte[] CalculateMac();
                                        /*0x2b3cbd0*/ int get_InternalBlockSize();
                                        /*0x2b3cc88*/ int get_MacLength();
                                        /*0x2b3cca4*/ void Reset();
                                    }

                                    class BcTlsNonceGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator m_randomGenerator;

                                        /*0x2b393dc*/ BcTlsNonceGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator randomGenerator);
                                        /*0x2b3ccc4*/ byte[] GenerateNonce(int size);
                                    }

                                    class BcTlsRawKeyCertificate : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo m_keyInfo;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters m_pubKeyDH;
                                        /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters m_pubKeyEC;
                                        /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters m_pubKeyRsa;

                                        /*0x2b38d58*/ BcTlsRawKeyCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] encoding);
                                        /*0x2b3890c*/ BcTlsRawKeyCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                                        /*0x2b3cda4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor CreateEncryptor(int tlsCertificateRole);
                                        /*0x2b3ced4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier CreateVerifier(short signatureAlgorithm);
                                        /*0x2b3d1e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier CreateVerifier(int signatureScheme);
                                        /*0x2b3d7f8*/ byte[] GetEncoded();
                                        /*0x2b3d84c*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                        /*0x2b3d854*/ string get_SigAlgOid();
                                        /*0x2b3d85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                        /*0x2b3d864*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters GetPubKeyDH();
                                        /*0x2b3d998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters GetPubKeyDss();
                                        /*0x2b3dacc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters GetPubKeyEC();
                                        /*0x2b3dc00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters GetPubKeyEd25519();
                                        /*0x2b3dd18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters GetPubKeyEd448();
                                        /*0x2b3de30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters GetPubKeyRsa();
                                        /*0x2b3df64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CheckUsageInRole(int tlsCertificateRole);
                                        /*0x2b3e038*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPublicKey();
                                        /*0x2b3f554*/ bool SupportsKeyUsage(int keyUsageBits);
                                        /*0x2b3f55c*/ bool SupportsRsa_Pkcs1();
                                        /*0x2b3f5c0*/ bool SupportsRsa_Pss_Pss(short signatureAlgorithm);
                                        /*0x2b3f62c*/ bool SupportsRsa_Pss_Rsae();
                                        /*0x2b3f690*/ void ValidateKeyUsage(int keyUsageBits);
                                        /*0x2b3f6e8*/ void ValidateRsa_Pkcs1();
                                        /*0x2b3f740*/ void ValidateRsa_Pss_Pss(short signatureAlgorithm);
                                        /*0x2b3f798*/ void ValidateRsa_Pss_Rsae();
                                    }

                                    class BcTlsRsaEncryptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters m_pubKeyRsa;

                                        static /*0x2b3f7f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters CheckPublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters pubKeyRsa);
                                        /*0x2b3ce88*/ BcTlsRsaEncryptor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters pubKeyRsa);
                                        /*0x2b3f864*/ byte[] Encrypt(byte[] input, int inOff, int length);
                                    }

                                    class BcTlsRsaPssVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x20*/ int m_signatureScheme;

                                        /*0x2b3d168*/ BcTlsRsaPssVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey, int signatureScheme);
                                        /*0x2b3fa48*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsRsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x2b3d164*/ BcTlsRsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey);
                                        /*0x2b3fc64*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsSecret : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret
                                    {
                                        static /*0x0*/ byte[] Ssl3Const;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        static /*0x2b421f4*/ BcTlsSecret();
                                        static /*0x2b3ff9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret Convert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                        static /*0x2b400f8*/ byte[] GenerateSsl3Constants();
                                        /*0x2b38c0c*/ BcTlsSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] data);
                                        /*0x2b4019c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                        /*0x2b403d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                        /*0x2b40634*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                        /*0x2b40cdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                        /*0x2b40f78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto get_Crypto();
                                        /*0x2b40f80*/ void HmacHash(int cryptoHashAlgorithm, byte[] secret, int secretOff, int secretLen, byte[] seed, byte[] output);
                                        /*0x2b411f4*/ byte[] Prf(int prfAlgorithm, string label, byte[] seed, int length);
                                        /*0x2b412f0*/ byte[] Prf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                        /*0x2b414a8*/ byte[] Prf_Ssl(byte[] seed, int length);
                                        /*0x2b41574*/ byte[] Prf_Ssl(System.ReadOnlySpan<byte> seed, int length);
                                        /*0x2b41e4c*/ byte[] Prf_1_0(byte[] labelSeed, int length);
                                        /*0x2b41fa4*/ byte[] Prf_1_2(int prfAlgorithm, byte[] labelSeed, int length);
                                        /*0x2b4207c*/ void UpdateMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac mac);
                                    }

                                    class BcTlsSrp6Client : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client m_srp6Client;

                                        /*0x2b3b06c*/ BcTlsSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client srpClient);
                                        /*0x2b4224c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                        /*0x2b42328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] srpSalt, byte[] identity, byte[] password);
                                    }

                                    class BcTlsVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter m_publicKey;

                                        /*0x2b3ba18*/ BcTlsVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicKey);
                                        /*0x2b42344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                        /*0x2b4234c*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcX25519 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ byte[] m_privateKey;
                                        /*0x20*/ byte[] m_peerPublicKey;

                                        /*0x2b42384*/ BcX25519(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x2b42420*/ byte[] GenerateEphemeral();
                                        /*0x2b424c0*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x2b42528*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcX25519Domain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        /*0x2b390b4*/ BcX25519Domain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x2b426b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                    }

                                    class BcX448 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ byte[] m_privateKey;
                                        /*0x20*/ byte[] m_peerPublicKey;

                                        /*0x2b42710*/ BcX448(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x2b427ac*/ byte[] GenerateEphemeral();
                                        /*0x2b4284c*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x2b428b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcX448Domain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        /*0x2b390e4*/ BcX448Domain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x2b42a40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                    }
                                }
                            }
                        }
                    }

                    namespace Security
                    {
                        class DigestUtilities
                        {
                            static /*0x0*/ System.Collections.Generic.IDictionary<string, string> Aliases;
                            static /*0x8*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> Oids;

                            static /*0x2b42a9c*/ DigestUtilities();
                            static /*0x2b46a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest GetDigest(string algorithm);

                            enum DigestAlgorithm
                            {
                                BLAKE2B_160 = 0,
                                BLAKE2B_256 = 1,
                                BLAKE2B_384 = 2,
                                BLAKE2B_512 = 3,
                                BLAKE2S_128 = 4,
                                BLAKE2S_160 = 5,
                                BLAKE2S_224 = 6,
                                BLAKE2S_256 = 7,
                                BLAKE3_256 = 8,
                                DSTU7564_256 = 9,
                                DSTU7564_384 = 10,
                                DSTU7564_512 = 11,
                                GOST3411 = 12,
                                GOST3411_2012_256 = 13,
                                GOST3411_2012_512 = 14,
                                KECCAK_224 = 15,
                                KECCAK_256 = 16,
                                KECCAK_288 = 17,
                                KECCAK_384 = 18,
                                KECCAK_512 = 19,
                                MD2 = 20,
                                MD4 = 21,
                                MD5 = 22,
                                NONE = 23,
                                RIPEMD128 = 24,
                                RIPEMD160 = 25,
                                RIPEMD256 = 26,
                                RIPEMD320 = 27,
                                SHA_1 = 28,
                                SHA_224 = 29,
                                SHA_256 = 30,
                                SHA_384 = 31,
                                SHA_512 = 32,
                                SHA_512_224 = 33,
                                SHA_512_256 = 34,
                                SHA3_224 = 35,
                                SHA3_256 = 36,
                                SHA3_384 = 37,
                                SHA3_512 = 38,
                                SHAKE128_256 = 39,
                                SHAKE256_512 = 40,
                                SM3 = 41,
                                TIGER = 42,
                                WHIRLPOOL = 43,
                            }
                        }

                        class GeneralSecurityException : System.Exception
                        {
                            /*0x2b474bc*/ GeneralSecurityException();
                            /*0x2b47514*/ GeneralSecurityException(string message);
                            /*0x2b4757c*/ GeneralSecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class InvalidKeyException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.KeyException
                        {
                            /*0x2b475fc*/ InvalidKeyException();
                            /*0x2b47604*/ InvalidKeyException(string message);
                            /*0x2b4760c*/ InvalidKeyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class InvalidParameterException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.KeyException
                        {
                            /*0x2b47614*/ InvalidParameterException();
                            /*0x2b47618*/ InvalidParameterException(string message);
                            /*0x2b4761c*/ InvalidParameterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class KeyException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.GeneralSecurityException
                        {
                            /*0x2b47600*/ KeyException();
                            /*0x2b47608*/ KeyException(string message);
                            /*0x2b47610*/ KeyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class PublicKeyFactory
                        {
                            static /*0x2b3e100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter CreateKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                            static /*0x2b478d4*/ byte[] GetRawKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                            static /*0x2b47620*/ bool IsPkcsDHParam(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                            static /*0x2b4775c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters ReadPkcsDHParam(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algOid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                        }

                        class SecureRandom : System.Random
                        {
                            static /*0x0*/ long counter;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom MasterRandom;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom ArbitraryRandom;
                            static /*0x18*/ double DoubleScale;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator;

                            static /*0x2b4867c*/ SecureRandom();
                            static /*0x2b47af8*/ long NextCounterValue();
                            static /*0x2b47b50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator CreatePrng(string digestName, bool autoSeed);
                            static /*0x2b47c9c*/ void AutoSeed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator, int seedLength);
                            /*0x2b47fa4*/ SecureRandom();
                            /*0x2b4801c*/ SecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator);
                            /*0x2b48094*/ SecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator, int autoSeedLengthInBytes);
                            /*0x2b48140*/ int Next();
                            /*0x2b4815c*/ int Next(int maxValue);
                            /*0x2b48238*/ int Next(int minValue, int maxValue);
                            /*0x2b482f4*/ void NextBytes(byte[] buf);
                            /*0x2b483a0*/ void NextBytes(System.Span<byte> buffer);
                            /*0x2b4851c*/ int NextInt();
                        }

                        class SecurityUtilityException : System.Exception
                        {
                            /*0x2b48800*/ SecurityUtilityException();
                            /*0x2b47454*/ SecurityUtilityException(string message);
                            /*0x2b48858*/ SecurityUtilityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }
                    }

                    namespace Math
                    {
                        class BigInteger : System.IComparable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger>, System.IEquatable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger>
                        {
                            static /*0x0*/ int[][] primeLists;
                            static /*0x8*/ int[] primeProducts;
                            static /*0x10*/ int[] ZeroMagnitude;
                            static /*0x18*/ byte[] ZeroEncoding;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] SMALL_CONSTANTS;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Zero;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Three;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Four;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Ten;
                            static /*0x58*/ byte[] BitLengthTable;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix2;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix2E;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix8;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix8E;
                            static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix10;
                            static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix10E;
                            static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix16;
                            static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix16E;
                            static /*0xa0*/ int[] ExpWindowThresholds;
                            /*0x10*/ int[] magnitude;
                            /*0x18*/ int sign;
                            /*0x1c*/ int nBits;
                            /*0x20*/ int nBitLength;

                            static /*0x2b488d8*/ BigInteger();
                            static /*0x2b4a60c*/ int GetByteLength(int nBits);
                            static /*0x2b4a624*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Arbitrary(int sizeInBits);
                            static /*0x2b4b87c*/ int[] MakeMagnitude(byte[] bytes, int offset, int length);
                            static /*0x2b4b724*/ int[] MakeMagnitude(System.ReadOnlySpan<byte> bytes);
                            static /*0x2b4bc80*/ int[] AddMagnitudes(int[] a, int[] b);
                            static /*0x2b4c108*/ int BitCnt(int i);
                            static /*0x2b4c13c*/ int CalcBitLength(int sign, int indx, int[] mag);
                            static /*0x2b4c3b4*/ int BitLen(byte b);
                            static /*0x2b4c26c*/ int BitLen(int w);
                            static /*0x2b4c4f8*/ int CompareTo(int xIndx, int[] x, int yIndx, int[] y);
                            static /*0x2b4c454*/ int CompareNoLeadingZeroes(int xIndx, int[] x, int yIndx, int[] y);
                            static /*0x2b4df5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ExtEuclid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u1Out);
                            static /*0x2b4e394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPowBarrett(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            static /*0x2b4eea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReduceBarrett(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger mr, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger yu);
                            static /*0x2b4e79c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPowMonty(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, bool convert);
                            static /*0x2b4efb0*/ int[] GetWindowList(int[] mag, int extraBits);
                            static /*0x2b4fd14*/ int CreateWindowEntry(int mult, int zeroes);
                            static /*0x2b4fd30*/ int[] Square(int[] w, int[] x);
                            static /*0x2b4febc*/ int[] Multiply(int[] x, int[] y, int[] z);
                            static /*0x2b4fbb8*/ void MontgomeryReduce(int[] x, int[] m, uint mDash);
                            static /*0x2b4f818*/ void MultiplyMonty(int[] a, int[] x, int[] y, int[] m, uint mDash, bool smallMontyModulus);
                            static /*0x2b4f3a8*/ void SquareMonty(int[] a, int[] x, int[] m, uint mDash, bool smallMontyModulus);
                            static /*0x2b4ffa0*/ uint MultiplyMontyNIsOne(uint x, uint y, uint m, uint mDash);
                            static /*0x2b50030*/ int[] Remainder(int[] x, int[] y);
                            static /*0x2b4cad8*/ int[] ShiftLeft(int[] mag, int n);
                            static /*0x2b4cd98*/ void ShiftRightInPlace(int start, int[] mag, int n);
                            static /*0x2b4ccfc*/ void ShiftRightOneInPlace(int start, int[] mag);
                            static /*0x2b4cc5c*/ int[] Subtract(int xStart, int[] x, int yStart, int[] y);
                            static /*0x2b4d850*/ int[] doSubBigLil(int[] bigMag, int[] lilMag);
                            static /*0x2b512f4*/ void ToString(System.Text.StringBuilder sb, int radix, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger> moduli, int scale, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pos);
                            static /*0x2b51298*/ void AppendZeroExtendedString(System.Text.StringBuilder sb, string s, int minLength);
                            static /*0x2b4a30c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateUValueOf(ulong value);
                            static /*0x2b51544*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateValueOf(long value);
                            static /*0x2b47980*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValueOf(long value);
                            /*0x2b4a1a4*/ BigInteger(int signum, int[] mag, bool checkMag);
                            /*0x2b4aa28*/ BigInteger(string value);
                            /*0x2b4aa30*/ BigInteger(string str, int radix);
                            /*0x2b4b2d8*/ BigInteger(byte[] bytes);
                            /*0x2b4b2f0*/ BigInteger(byte[] bytes, int offset, int length);
                            /*0x2b2c484*/ BigInteger(int sign, byte[] bytes);
                            /*0x2b4b968*/ BigInteger(int sign, byte[] bytes, int offset, int length);
                            /*0x2b4bac0*/ BigInteger(int sign, System.ReadOnlySpan<byte> bytes);
                            /*0x2b4a6b0*/ BigInteger(int sizeInBits, System.Random random);
                            /*0x2b4a600*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
                            /*0x2b4bc04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Abs();
                            /*0x2b4b24c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x2b4be78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger AddToMagnitude(int[] magToAdd);
                            /*0x2b4bfec*/ int get_BitCount();
                            /*0x2b478fc*/ int get_BitLength();
                            /*0x2b4c430*/ bool QuickPow2Check();
                            /*0x2b47a50*/ int CompareTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger other);
                            /*0x2b4c5e4*/ int[] Divide(int[] x, int[] y);
                            /*0x2b4ceb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x2b4d09c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DivideAndRemainder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x2b4d4d8*/ bool Equals(object obj);
                            /*0x2b4d5dc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger other);
                            /*0x2b4d568*/ bool IsEqualMagnitude(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            /*0x2b4d60c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Gcd(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x2b4d6f4*/ int GetHashCode();
                            /*0x2b4d74c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Inc();
                            /*0x2b47888*/ int get_IntValue();
                            /*0x2b4d90c*/ int get_IntValueExact();
                            /*0x2b4d974*/ long get_LongValue();
                            /*0x2b4d668*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Mod(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x2b4dc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x2b4dda0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInversePow2(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x2b4e154*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPow(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x2b4f36c*/ int GetMQuote();
                            /*0x2b4b080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x2b4ed6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Square();
                            /*0x2b4bc14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Negate();
                            /*0x2b4c0f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Not();
                            /*0x2b4a440*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Pow(int exp);
                            /*0x2b4ffcc*/ int Remainder(int m);
                            /*0x2b4d9d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Remainder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            /*0x2b4d384*/ int[] LastNBits(int n);
                            /*0x2b4f1b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DivideWords(int w);
                            /*0x2b4f2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger RemainderWords(int w);
                            /*0x2b4af50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ShiftLeft(int n);
                            /*0x2b2c5b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ShiftRight(int n);
                            /*0x2b503d8*/ int get_SignValue();
                            /*0x2b4bd28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            /*0x2b503e0*/ int GetLengthofByteArrayUnsigned();
                            /*0x2b5045c*/ byte[] ToByteArray();
                            /*0x2b50740*/ byte[] ToByteArrayUnsigned();
                            /*0x2b50748*/ void ToByteArrayUnsigned(System.Span<byte> output);
                            /*0x2b50464*/ byte[] ToByteArray(bool unsigned);
                            /*0x2b50758*/ void ToByteArray(bool unsigned, System.Span<byte> output);
                            /*0x2b50ba0*/ string ToString();
                            /*0x2b50ba8*/ string ToString(int radix);
                            /*0x2b515f4*/ int GetLowestSetBit();
                            /*0x2b5160c*/ int GetLowestSetBitMaskFirst(int firstWordMask);
                            /*0x2b4e07c*/ bool TestBit(int n);
                            /*0x2b516a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Or(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x2b51910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Xor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x2b51b78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SetBit(int n);
                            /*0x2b51c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FlipExistingBit(int n);
                        }

                        class Primes
                        {
                            static /*0x0*/ int SmallFactorLimit;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Three;

                            static /*0x2b52bc8*/ Primes();
                            static /*0x2b51d80*/ bool HasAnySmallFactors(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger candidate);
                            static /*0x2b5280c*/ bool IsMRProbablePrime(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger candidate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, int iterations);
                            static /*0x2b51df4*/ void CheckCandidate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, string name);
                            static /*0x2b51e78*/ bool ImplHasAnySmallFactors(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            static /*0x2b52a74*/ bool ImplMRProbablePrimeToBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger w, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger wSubOne, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, int a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                        }

                        namespace Raw
                        {
                            class Bits
                            {
                                static /*0x2b52c8c*/ uint BitPermuteStep(uint x, uint m, int s);
                                static /*0x2b52ca8*/ ulong BitPermuteStep(ulong x, ulong m, int s);
                                static /*0x2b52cc4*/ ulong BitPermuteStepSimple(ulong x, ulong m, int s);
                            }

                            class Interleave
                            {
                                static /*0x2b52cdc*/ uint Expand8to16(uint x);
                                static /*0x2b52cfc*/ ulong Expand32to64(uint x);
                                static /*0x2b52d50*/ void Expand64To128(ulong x, ulong[] z, int zOff);
                                static /*0x2b52df8*/ void Expand64To128(ulong[] xs, int xsOff, int xsLen, ulong[] zs, int zsOff);
                                static /*0x2b52e70*/ ulong Expand64To128Rev(ulong x, ref ulong low);
                                static /*0x2b52ed8*/ uint Shuffle2(uint x);
                                static /*0x2b52f28*/ ulong Unshuffle(ulong x);
                                static /*0x2b52f80*/ ulong Unshuffle(ulong x, ref ulong even);
                                static /*0x2b52fa4*/ ulong Unshuffle(ulong x0, ulong x1, ref ulong even);
                            }

                            class Mod
                            {
                                static /*0x2b52fe0*/ void CheckedModOddInverse(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x2b5390c*/ uint Inverse32(uint d);
                                static /*0x2b53934*/ ulong Inverse64(ulong d);
                                static /*0x2b53964*/ uint ModOddInverse(uint[] m, uint[] x, uint[] z);
                                static /*0x2b5303c*/ uint ModOddInverse(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x2b54228*/ bool ModOddInverseVar(uint[] m, uint[] x, uint[] z);
                                static /*0x2b54364*/ bool ModOddInverseVar(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x2b550a4*/ uint[] Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, uint[] p);
                                static /*0x2b54f38*/ int Add30(int len30, System.Span<int> D, System.ReadOnlySpan<int> M);
                                static /*0x2b53edc*/ void CNegate30(int len30, int cond, System.Span<int> D);
                                static /*0x2b53f58*/ void CNormalize30(int len30, int condNegate, System.Span<int> D, System.ReadOnlySpan<int> M);
                                static /*0x2b54080*/ void Decode30(int bits, System.ReadOnlySpan<int> x, System.Span<uint> z);
                                static /*0x2b53bb8*/ int Divsteps30(int delta, int f0, int g0, System.Span<int> t);
                                static /*0x2b54d3c*/ int Divsteps30Var(int eta, int f0, int g0, System.Span<int> t);
                                static /*0x2b53a9c*/ void Encode30(int bits, System.ReadOnlySpan<uint> x, System.Span<int> z);
                                static /*0x2b54184*/ int EqualTo(int len, System.ReadOnlySpan<int> x, int y);
                                static /*0x2b541e0*/ int EqualToZero(int len, System.ReadOnlySpan<int> x);
                                static /*0x2b53b84*/ int GetMaximumDivsteps(int bits);
                                static /*0x2b55040*/ bool IsOne(int len, System.ReadOnlySpan<int> x);
                                static /*0x2b54ed8*/ bool IsZero(int len, System.ReadOnlySpan<int> x);
                                static /*0x2b54fd0*/ int Negate30(int len30, System.Span<int> D);
                                static /*0x2b53c74*/ void UpdateDE30(int len30, System.Span<int> D, System.Span<int> E, System.ReadOnlySpan<int> t, int m0Inv32, System.ReadOnlySpan<int> M);
                                static /*0x2b53dec*/ void UpdateFG30(int len30, System.Span<int> F, System.Span<int> G, System.ReadOnlySpan<int> t);
                            }

                            class Nat
                            {
                                static /*0x2b55278*/ uint Add(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x2b5530c*/ uint Add33To(int len, uint x, uint[] z);
                                static /*0x2b553d8*/ uint AddBothTo(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x2b55474*/ uint AddTo(int len, uint[] x, uint[] z);
                                static /*0x2b554f4*/ uint AddTo(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b5558c*/ uint AddWordAt(int len, uint x, uint[] z, int zPos);
                                static /*0x2b555e0*/ uint AddWordTo(int len, uint x, uint[] z);
                                static /*0x2b55628*/ uint CAdd(int len, int mask, System.ReadOnlySpan<uint> x, System.ReadOnlySpan<uint> y, System.Span<uint> z);
                                static /*0x2b556a0*/ int Compare(int len, uint[] x, uint[] y);
                                static /*0x2b5571c*/ void Copy(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b551bc*/ uint[] Create(int len);
                                static /*0x2b5573c*/ ulong[] Create64(int len);
                                static /*0x2b55784*/ int Dec(int len, uint[] z);
                                static /*0x2b557dc*/ int DecAt(int len, uint[] z, int zPos);
                                static /*0x2b55840*/ bool Eq(int len, uint[] x, uint[] y);
                                static /*0x2b558a0*/ uint[] FromBigInteger(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                static /*0x2b55a00*/ void FromBigInteger(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, System.Span<uint> z);
                                static /*0x2b55b24*/ ulong[] FromBigInteger64(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                static /*0x2b55c84*/ uint GetBit(uint[] x, int bit);
                                static /*0x2b559b4*/ int GetLengthForBits(int bits);
                                static /*0x2b55c38*/ int GetLengthForBits64(int bits);
                                static /*0x2b55204*/ bool Gte(int len, uint[] x, uint[] y);
                                static /*0x2b55ce0*/ uint Inc(int len, uint[] z);
                                static /*0x2b55d38*/ uint Inc(int len, uint[] x, uint[] z);
                                static /*0x2b55374*/ uint IncAt(int len, uint[] z, int zPos);
                                static /*0x2b55df0*/ uint IncAt(int len, uint[] z, int zOff, int zPos);
                                static /*0x2b55e54*/ bool IsOne(int len, uint[] x);
                                static /*0x2b55ec4*/ bool IsZero(int len, uint[] x);
                                static /*0x2b55f30*/ int LessThan(int len, uint[] x, uint[] y);
                                static /*0x2b55fac*/ uint Mul31BothAdd(int len, uint a, uint[] x, uint b, uint[] y, uint[] z, int zOff);
                                static /*0x2b56058*/ uint MulWordAddTo(int len, uint x, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b560e8*/ uint ShiftDownBit(int len, System.Span<uint> z, uint c);
                                static /*0x2b5613c*/ uint ShiftDownBits(int len, uint[] z, int bits, uint c);
                                static /*0x2b561b8*/ uint ShiftDownBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff);
                                static /*0x2b56250*/ uint ShiftDownWord(int len, uint[] z, uint c);
                                static /*0x2b562a8*/ uint ShiftUpBit(int len, uint[] x, uint c, uint[] z);
                                static /*0x2b563b4*/ uint ShiftUpBit(int len, System.ReadOnlySpan<uint> x, uint c, System.Span<uint> z);
                                static /*0x2b564f4*/ ulong ShiftUpBit64(int len, ulong[] x, int xOff, ulong c, ulong[] z, int zOff);
                                static /*0x2b56610*/ ulong ShiftUpBit64(int len, System.ReadOnlySpan<ulong> x, ulong c, System.Span<ulong> z);
                                static /*0x2b56750*/ uint ShiftUpBits(int len, uint[] z, int bits, uint c);
                                static /*0x2b567fc*/ uint ShiftUpBits(int len, System.Span<uint> z, int bits, uint c);
                                static /*0x2b56924*/ uint ShiftUpBits(int len, uint[] x, int bits, uint c, uint[] z);
                                static /*0x2b56a40*/ uint ShiftUpBits(int len, System.ReadOnlySpan<uint> x, int bits, uint c, System.Span<uint> z);
                                static /*0x2b56bd0*/ ulong ShiftUpBits64(int len, ulong[] z, int zOff, int bits, ulong c);
                                static /*0x2b56c80*/ ulong ShiftUpBits64(int len, System.Span<ulong> z, int bits, ulong c);
                                static /*0x2b56dbc*/ ulong ShiftUpBits64(int len, ulong[] x, int xOff, int bits, ulong c, ulong[] z, int zOff);
                                static /*0x2b56ee8*/ ulong ShiftUpBits64(int len, System.ReadOnlySpan<ulong> x, int bits, ulong c, System.Span<ulong> z);
                                static /*0x2b57078*/ int Sub(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x2b5710c*/ int Sub33From(int len, uint x, uint[] z);
                                static /*0x2b5716c*/ int SubFrom(int len, uint[] x, uint[] z);
                                static /*0x2b571ec*/ int SubFrom(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b57284*/ int SubWordFrom(int len, uint x, uint[] z);
                                static /*0x2b572cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(int len, uint[] x);
                                static /*0x2b57384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(int len, System.ReadOnlySpan<uint> x);
                                static /*0x2b57694*/ void Xor64(int len, ulong[] x, ulong[] y, ulong[] z);
                                static /*0x2b57a98*/ void Xor64(int len, ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                static /*0x2b577f4*/ void Xor64(int len, System.ReadOnlySpan<ulong> x, System.ReadOnlySpan<ulong> y, System.Span<ulong> z);
                                static /*0x2b57c0c*/ void XorTo64(int len, ulong[] x, ulong[] z);
                                static /*0x2b57f18*/ void XorTo64(int len, ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x2b57d10*/ void XorTo64(int len, System.ReadOnlySpan<ulong> x, System.Span<ulong> z);
                                static /*0x2b5802c*/ void Zero(int len, uint[] z);
                            }

                            class Nat128
                            {
                                static /*0x2b580e8*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x2b581c4*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x2b582bc*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b58378*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x2b583c8*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x2b5843c*/ uint[] Create();
                                static /*0x2b58480*/ ulong[] Create64();
                                static /*0x2b584c4*/ uint[] CreateExt();
                                static /*0x2b58508*/ ulong[] CreateExt64();
                                static /*0x2b5854c*/ bool Eq(uint[] x, uint[] y);
                                static /*0x2b585b0*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x2b58614*/ uint GetBit(uint[] x, int bit);
                                static /*0x2b58678*/ bool Gte(uint[] x, uint[] y);
                                static /*0x2b586e4*/ bool IsOne(uint[] x);
                                static /*0x2b5874c*/ bool IsOne64(ulong[] x);
                                static /*0x2b58794*/ bool IsZero(uint[] x);
                                static /*0x2b587e4*/ bool IsZero64(ulong[] x);
                                static /*0x2b58838*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b58974*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b58a8c*/ void Square(uint[] x, uint[] zz);
                                static /*0x2b58c14*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x2b58cec*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x2b58da0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x2b58e80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat160
                            {
                                static /*0x2b58f5c*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x2b59068*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x2b59198*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b5927c*/ uint[] Create();
                                static /*0x2b592c0*/ uint[] CreateExt();
                                static /*0x2b59304*/ bool Eq(uint[] x, uint[] y);
                                static /*0x2b59368*/ uint GetBit(uint[] x, int bit);
                                static /*0x2b593cc*/ bool Gte(uint[] x, uint[] y);
                                static /*0x2b59438*/ bool IsOne(uint[] x);
                                static /*0x2b594a0*/ bool IsZero(uint[] x);
                                static /*0x2b594f0*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b59658*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5979c*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b59934*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x2b59a04*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x2b59ac8*/ uint MulWordsAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x2b59b70*/ void Square(uint[] x, uint[] zz);
                                static /*0x2b59d64*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x2b59e6c*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x2b59f48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                            }

                            class Nat192
                            {
                                static /*0x2b5a028*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5a164*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5a2cc*/ uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn);
                                static /*0x2b5a438*/ uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff);
                                static /*0x2b5a5b4*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b5a6c0*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x2b5a72c*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x2b5a7d0*/ uint[] Create();
                                static /*0x2b5a814*/ ulong[] Create64();
                                static /*0x2b5a858*/ uint[] CreateExt();
                                static /*0x2b5a89c*/ ulong[] CreateExt64();
                                static /*0x2b5a8e0*/ bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5aba0*/ bool Eq(uint[] x, uint[] y);
                                static /*0x2b5ac04*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x2b5ac68*/ uint GetBit(uint[] x, int bit);
                                static /*0x2b5accc*/ bool Gte(uint[] x, uint[] y);
                                static /*0x2b5a95c*/ bool Gte(uint[] x, int xOff, uint[] y, int yOff);
                                static /*0x2b5ad38*/ bool IsOne(uint[] x);
                                static /*0x2b5ada0*/ bool IsOne64(ulong[] x);
                                static /*0x2b5ae08*/ bool IsZero(uint[] x);
                                static /*0x2b5ae58*/ bool IsZero64(ulong[] x);
                                static /*0x2b5aea8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5b040*/ void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff);
                                static /*0x2b5b2d4*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5b440*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5b624*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x2b5b710*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x2b5b7d4*/ void Square(uint[] x, uint[] zz);
                                static /*0x2b5ba38*/ void Square(uint[] x, int xOff, uint[] zz, int zzOff);
                                static /*0x2b5bd74*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5a9d8*/ int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5beac*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x2b5bfb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x2b5c090*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat224
                            {
                                static /*0x2b5c170*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5c2dc*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5c47c*/ void Copy(uint[] x, uint[] z);
                                static /*0x2b5c540*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b5c674*/ uint[] Create();
                                static /*0x2b5c6b8*/ uint[] CreateExt();
                                static /*0x2b5c6fc*/ bool Eq(uint[] x, uint[] y);
                                static /*0x2b5c760*/ uint GetBit(uint[] x, int bit);
                                static /*0x2b5c7c4*/ bool Gte(uint[] x, uint[] y);
                                static /*0x2b5c830*/ bool IsOne(uint[] x);
                                static /*0x2b5c898*/ bool IsZero(uint[] x);
                                static /*0x2b5c8e8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5cabc*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5cc54*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5ce84*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x2b5cf70*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x2b5d034*/ void Square(uint[] x, uint[] zz);
                                static /*0x2b5d320*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5d488*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x2b5d5b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                            }

                            class Nat256
                            {
                                static /*0x2b5d694*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5d830*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5da08*/ uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn);
                                static /*0x2b5dbe4*/ uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff);
                                static /*0x2b5ddd8*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x2b5df34*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x2b5dfbc*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x2b5e090*/ uint[] Create();
                                static /*0x2b5e0d4*/ ulong[] Create64();
                                static /*0x2b5e118*/ uint[] CreateExt();
                                static /*0x2b5e15c*/ ulong[] CreateExt64();
                                static /*0x2b5e1a0*/ bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5e4f0*/ bool Eq(uint[] x, uint[] y);
                                static /*0x2b5e554*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x2b5e5b8*/ uint GetBit(uint[] x, int bit);
                                static /*0x2b5e61c*/ bool Gte(uint[] x, uint[] y);
                                static /*0x2b5e21c*/ bool Gte(uint[] x, int xOff, uint[] y, int yOff);
                                static /*0x2b5e688*/ bool IsOne(uint[] x);
                                static /*0x2b5e6f0*/ bool IsOne64(ulong[] x);
                                static /*0x2b5e758*/ bool IsZero(uint[] x);
                                static /*0x2b5e7a8*/ bool IsZero64(ulong[] x);
                                static /*0x2b5e7f8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5ea04*/ void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff);
                                static /*0x2b5ed60*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x2b5ef28*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5f1a4*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x2b5f290*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x2b5f350*/ void Square(uint[] x, uint[] zz);
                                static /*0x2b5f6c8*/ void Square(uint[] x, int xOff, uint[] zz, int zzOff);
                                static /*0x2b5fb6c*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x2b5e298*/ int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x2b5fd04*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x2b5fe58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x2b5ff38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat320
                            {
                                static /*0x296747c*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x2967520*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x2967624*/ ulong[] Create64();
                                static /*0x2967668*/ ulong[] CreateExt64();
                                static /*0x29676ac*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x2967710*/ bool IsOne64(ulong[] x);
                                static /*0x2967778*/ bool IsZero64(ulong[] x);
                                static /*0x29677c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat384
                            {
                                static /*0x29678a8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2967a18*/ void Square(uint[] x, uint[] zz);
                            }

                            class Nat448
                            {
                                static /*0x2967b34*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x2967c10*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x2967d74*/ ulong[] Create64();
                                static /*0x2967db8*/ ulong[] CreateExt64();
                                static /*0x2967dfc*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x2967e60*/ bool IsOne64(ulong[] x);
                                static /*0x2967ec8*/ bool IsZero64(ulong[] x);
                                static /*0x2967f18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat512
                            {
                                static /*0x2967ff8*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x2968168*/ void Square(uint[] x, uint[] zz);
                                static /*0x2968284*/ void Xor64(System.ReadOnlySpan<ulong> x, System.ReadOnlySpan<ulong> y, System.Span<ulong> z);
                                static /*0x2968364*/ void XorTo64(System.ReadOnlySpan<ulong> x, System.Span<ulong> z);
                            }

                            class Nat576
                            {
                                static /*0x2968420*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x2968534*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x29686f8*/ ulong[] Create64();
                                static /*0x296873c*/ ulong[] CreateExt64();
                                static /*0x2968780*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x29687e4*/ bool IsOne64(ulong[] x);
                                static /*0x296884c*/ bool IsZero64(ulong[] x);
                                static /*0x296889c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }
                        }

                        namespace Field
                        {
                            class FiniteFields
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GF_2;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GF_3;

                                static /*0x2968d5c*/ FiniteFields();
                                static /*0x296897c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomialExtensionField GetBinaryExtensionField(int[] exponents);
                                static /*0x2968bc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GetPrimeField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic);
                            }

                            class GenericPolynomialExtensionField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomialExtensionField, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField subfield;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial minimalPolynomial;

                                /*0x2968b7c*/ GenericPolynomialExtensionField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField subfield, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial polynomial);
                                /*0x2968e74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x2968f14*/ int get_Dimension();
                                /*0x2969038*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial get_MinimalPolynomial();
                                /*0x2969040*/ bool Equals(object obj);
                                /*0x2969108*/ int GetHashCode();
                            }

                            class GF2Polynomial : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial
                            {
                                /*0x10*/ int[] exponents;

                                /*0x2968afc*/ GF2Polynomial(int[] exponents);
                                /*0x29691a8*/ int get_Degree();
                                /*0x29691dc*/ int[] GetExponentsPresent();
                                /*0x2969238*/ bool Equals(object obj);
                                /*0x2969304*/ int GetHashCode();
                            }

                            interface IFiniteField
                            {
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x1f2ffc8*/ int get_Dimension();
                            }

                            interface IPolynomial
                            {
                                /*0x1f2ffc8*/ int get_Degree();
                                /*0x1f30214*/ int[] GetExponentsPresent();
                            }

                            interface IPolynomialExtensionField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial get_MinimalPolynomial();
                            }

                            class PrimeField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic;

                                /*0x2968d2c*/ PrimeField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic);
                                /*0x2969360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x2969368*/ int get_Dimension();
                                /*0x2969370*/ bool Equals(object obj);
                                /*0x2969418*/ int GetHashCode();
                            }
                        }

                        namespace EC
                        {
                            class AbstractECLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable
                            {
                                /*0x2969440*/ AbstractECLookupTable();
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                /*0x1f2ffc8*/ int get_Size();
                                /*0x2969434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                            }

                            class ECAlgorithms
                            {
                                static /*0x2969448*/ bool IsF2mCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                static /*0x296946c*/ bool IsF2mField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                static /*0x29695ec*/ bool IsFpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                static /*0x2969610*/ bool IsFpField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                static /*0x29696bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint SumOfTwoMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                static /*0x2969934*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x296a1b8*/ void MontgomeryTrick(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs, int off, int len, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                static /*0x296a4f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ReferenceMultiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                static /*0x296a638*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CleanPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x29699e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplCheckResult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x2969e28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                                static /*0x296b054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                                static /*0x296ad94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompP, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompNegP, byte[] wnafP, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompQ, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompNegQ, byte[] wnafQ);
                                static /*0x296b3b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks);
                                static /*0x2969a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultipliesGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism);
                                static /*0x296b9a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks);
                                static /*0x296b670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(bool[] negs, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo[] infos, byte[][] wnafs);
                                static /*0x296a908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickFixedPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                            }

                            class ECCurve
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField m_field;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_a;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_b;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_order;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_cofactor;
                                /*0x38*/ int m_coord;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier m_multiplier;

                                /*0x296be7c*/ ECCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                /*0x1f2ffc8*/ int get_FieldSize();
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x1f2fec8*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x296beac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve.Config Configure();
                                /*0x296bf88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ValidatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x296c014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x1f30394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x1f303d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x296c068*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                /*0x296c11c*/ bool SupportsCoordinateSystem(int coord);
                                /*0x296c128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback callback);
                                /*0x296c4c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x296c5c8*/ void NormalizeAll(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points);
                                /*0x296c5f0*/ void NormalizeAll(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement iso);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x296c904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField get_Field();
                                /*0x296c90c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_A();
                                /*0x296c914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_B();
                                /*0x296c91c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x296c924*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Cofactor();
                                /*0x296c92c*/ int get_CoordinateSystem();
                                /*0x296c934*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                /*0x296cba8*/ void CheckPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                /*0x296cc3c*/ void CheckPoints(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                /*0x296cd8c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve other);
                                /*0x296ced4*/ bool Equals(object obj);
                                /*0x296cf60*/ int GetHashCode();
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                                /*0x296d074*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism GetEndomorphism();
                                /*0x296d07c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier GetMultiplier();
                                /*0x296d0c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(byte[] encoded);
                                /*0x296d18c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(System.ReadOnlySpan<byte> encoded);

                                class Config
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer;
                                    /*0x18*/ int coord;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier multiplier;

                                    /*0x296bf20*/ Config(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer, int coord, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier multiplier);
                                    /*0x296d8d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve.Config SetEndomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism);
                                    /*0x296d8f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve Create();
                                }

                                class DefaultLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_outer;
                                    /*0x18*/ byte[] m_table;
                                    /*0x20*/ int m_size;

                                    /*0x296cb50*/ DefaultLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer, byte[] table, int size);
                                    /*0x296d9ec*/ int get_Size();
                                    /*0x296d9f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                    /*0x296dc88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                    /*0x296db98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(byte[] x, byte[] y);
                                }
                            }

                            class AbstractFpCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve
                            {
                                static /*0x296e060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ImplRandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p);
                                /*0x296dddc*/ AbstractFpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q);
                                /*0x296de5c*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x296df40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x296e114*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                            }

                            class FpCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                            {
                                static /*0x0*/ System.Collections.Generic.HashSet<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger> KnownQs;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_q;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_r;
                                /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpPoint m_infinity;

                                static /*0x296f080*/ FpCurve();
                                /*0x296e284*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x296e28c*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor, bool isInternal);
                                /*0x296ea68*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x296eb78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x296ec00*/ bool SupportsCoordinateSystem(int coord);
                                /*0x296ec18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x296ec20*/ int get_FieldSize();
                                /*0x296ec38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x296ed84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x296edf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x296ee78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x296e804*/ int GetNumberOfIterations(int bits, int certainty);
                                /*0x296e780*/ int AsInteger(string envVariable, int defaultValue);
                            }

                            class AbstractF2mCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve
                            {
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] si;

                                static /*0x296f118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField BuildField(int m, int k1, int k2, int k3);
                                static /*0x296f4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ImplRandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, int m);
                                /*0x296f228*/ AbstractF2mCurve(int m, int k1, int k2, int k3);
                                /*0x296f270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x296f3c0*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x296f414*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x296f520*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                                /*0x296f72c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SolveQuadraticEquation(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement beta);
                                /*0x296fa20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetSi();
                                /*0x296fb50*/ bool get_IsKoblitz();
                            }

                            class F2mCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                            {
                                /*0x58*/ int m;
                                /*0x5c*/ int k1;
                                /*0x60*/ int k2;
                                /*0x64*/ int k3;
                                /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mPoint m_infinity;

                                /*0x296fbd4*/ F2mCurve(int m, int k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x296fc08*/ F2mCurve(int m, int k1, int k2, int k3, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x296fe04*/ F2mCurve(int m, int k1, int k2, int k3, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x296ff18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x296ffc4*/ bool SupportsCoordinateSystem(int coord);
                                /*0x296ffdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                /*0x297005c*/ int get_FieldSize();
                                /*0x2970064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x29704c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2970534*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x29705b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x29705c0*/ bool IsTrinomial();
                                /*0x29705e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                class DefaultF2mLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mCurve m_outer;
                                    /*0x18*/ ulong[] m_table;
                                    /*0x20*/ int m_size;

                                    /*0x29707d8*/ DefaultF2mLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mCurve outer, ulong[] table, int size);
                                    /*0x2970830*/ int get_Size();
                                    /*0x2970838*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                    /*0x2970b50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                    /*0x29709c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                }
                            }

                            class ECFieldElement
                            {
                                /*0x2971184*/ ECFieldElement();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x1f2ffc8*/ int get_FieldSize();
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x2970c90*/ int get_BitLength();
                                /*0x2970cb4*/ bool get_IsOne();
                                /*0x2970cd8*/ bool get_IsZero();
                                /*0x2970d04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2970d60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2970dbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2970e1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                /*0x2970e50*/ bool TestBitZero();
                                /*0x2970e78*/ bool Equals(object obj);
                                /*0x2970f04*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                /*0x2970f74*/ int GetHashCode();
                                /*0x2970f9c*/ string ToString();
                                /*0x2970fc4*/ byte[] GetEncoded();
                                /*0x2971050*/ int GetEncodedLength();
                                /*0x297107c*/ void EncodeTo(System.Span<byte> buf);
                            }

                            class AbstractFpFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement
                            {
                                /*0x297118c*/ AbstractFpFieldElement();
                            }

                            class FpFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;

                                static /*0x296e8bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateResidue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p);
                                /*0x296ed24*/ FpFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x2971194*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x297119c*/ int get_FieldSize();
                                /*0x29711b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x297126c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x2971354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x297140c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x29714c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x29715f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2971798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x2971868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x2971904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x2971994*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2971b1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x2971ba8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x29721b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement CheckSqrt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement z);
                                /*0x2972204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] LucasSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                /*0x2972738*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModAdd(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x297279c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModDouble(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x2972800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModHalfAbs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x2972860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x29728cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x2972908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModReduce(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x2972c14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModSubtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x2972c58*/ bool Equals(object obj);
                                /*0x2972d00*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpFieldElement other);
                                /*0x2972d54*/ int GetHashCode();
                            }

                            class AbstractF2mFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement
                            {
                                /*0x29730bc*/ AbstractF2mFieldElement();
                                /*0x2972d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                /*0x2972f10*/ bool get_HasFastTrace();
                                /*0x2972f18*/ int Trace();
                            }

                            class F2mFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                            {
                                /*0x10*/ int representation;
                                /*0x14*/ int m;
                                /*0x18*/ int[] ks;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray x;

                                static /*0x2973450*/ void CheckFieldElements(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x2970454*/ F2mFieldElement(int m, int[] ks, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray x);
                                /*0x29730c4*/ int get_BitLength();
                                /*0x297311c*/ bool get_IsOne();
                                /*0x2973190*/ bool get_IsZero();
                                /*0x29731f8*/ bool TestBitZero();
                                /*0x2973238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x2973448*/ int get_FieldSize();
                                /*0x29735d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x29737bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x2973934*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x2973940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x2973dc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2973dd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x29743dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x297441c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x2974420*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x2974580*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2974790*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                /*0x2974948*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x2974dac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x2974df8*/ bool Equals(object obj);
                                /*0x2974ea0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mFieldElement other);
                                /*0x297500c*/ int GetHashCode();
                            }

                            interface ECLookupTable
                            {
                                /*0x1f2ffc8*/ int get_Size();
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                            }

                            class ECPoint
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_x;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_y;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] m_zs;
                                /*0x30*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo> m_preCompTable;

                                static /*0x2976228*/ ECPoint();
                                static /*0x29750fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] GetInitialZCoords(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                /*0x29753f0*/ ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2975478*/ ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x1f2fe14*/ bool SatisfiesCurveEquation();
                                /*0x29754ec*/ bool SatisfiesOrder();
                                /*0x29755e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x29755ec*/ int get_CurveCoordinateSystem();
                                /*0x2975608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_AffineXCoord();
                                /*0x2975634*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_AffineYCoord();
                                /*0x2975660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_XCoord();
                                /*0x2975668*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                /*0x2975670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(int index);
                                /*0x29756a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_RawXCoord();
                                /*0x29756ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_RawYCoord();
                                /*0x29756b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] get_RawZCoords();
                                /*0x29756bc*/ void CheckNormalized();
                                /*0x2975724*/ bool IsNormalized();
                                /*0x2975794*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Normalize();
                                /*0x2975924*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Normalize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement zInv);
                                /*0x2975a10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateScaledPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement sx, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement sy);
                                /*0x296c5a8*/ bool get_IsInfinity();
                                /*0x296c008*/ bool IsValid();
                                /*0x296a8fc*/ bool IsValidPartial();
                                /*0x296d790*/ bool ImplIsValid(bool decompressed, bool checkOrder);
                                /*0x2975af0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x2975b7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleY(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x2975c1c*/ bool Equals(object obj);
                                /*0x2975ca8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint other);
                                /*0x2975f2c*/ int GetHashCode();
                                /*0x2975ff0*/ string ToString();
                                byte[] GetEncoded(bool compressed);
                                int GetEncodedLength(bool compressed);
                                void EncodeTo(bool compressed, System.Span<byte> buf);
                                /*0x1f2fe14*/ bool get_CompressionYTilde();
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                /*0x2976138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TimesPow2(int e);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                /*0x29761d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x2976214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();

                                class ValidityCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_outer;
                                    /*0x18*/ bool m_decompressed;
                                    /*0x19*/ bool m_checkOrder;

                                    /*0x2975aa4*/ ValidityCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint outer, bool decompressed, bool checkOrder);
                                    /*0x297629c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                }
                            }

                            class ECPointBase : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint
                            {
                                /*0x29763b8*/ ECPointBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2976434*/ ECPointBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x29764b8*/ byte[] GetEncoded(bool compressed);
                                /*0x297667c*/ int GetEncodedLength(bool compressed);
                                /*0x2976728*/ void EncodeTo(bool compressed, System.Span<byte> buf);
                                /*0x29769b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                            }

                            class AbstractFpPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointBase
                            {
                                /*0x2976a80*/ AbstractFpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2976a84*/ AbstractFpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x2976a88*/ bool get_CompressionYTilde();
                                /*0x2976ab4*/ bool SatisfiesCurveEquation();
                                /*0x2976d58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                            }

                            class FpPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                            {
                                /*0x296e9e8*/ FpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x296ee74*/ FpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x2976db8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(int index);
                                /*0x2976e3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x2977968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x29783fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x297885c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                /*0x2978c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TimesPow2(int e);
                                /*0x2979370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Two(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x297938c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Three(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x29793c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Four(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x29793f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Eight(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x2979428*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                /*0x2979538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement CalculateJacobianModifiedW(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Z, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement ZSquared);
                                /*0x2979690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetJacobianModifiedW();
                                /*0x297972c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpPoint TwiceJacobianModified(bool calculateW);
                            }

                            class AbstractF2mPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointBase
                            {
                                /*0x2979a70*/ AbstractF2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x2979a74*/ AbstractF2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x2979a78*/ bool SatisfiesCurveEquation();
                                /*0x2979e6c*/ bool SatisfiesOrder();
                                /*0x297a120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x297a38c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleY(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x297a470*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x297a4d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint TauPow(int pow);
                            }

                            class F2mPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                            {
                                /*0x296fd44*/ F2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x29705b4*/ F2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x297a770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                /*0x297a870*/ bool get_CompressionYTilde();
                                /*0x297a940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x297b560*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x297bdfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x297c308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                            }

                            interface ECPointMap
                            {
                                /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Map(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                            }

                            struct LongArray
                            {
                                /*0x10*/ ulong[] m_data;

                                static /*0x2974300*/ bool AreAliased(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray a, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray b);
                                static /*0x297c784*/ int BitLength(ulong w);
                                static /*0x297c908*/ ulong ShiftUp(ulong[] x, int xOff, ulong[] z, int zOff, int count, int shift);
                                static /*0x297ca6c*/ ulong AddShiftedUp(ulong[] x, int xOff, ulong[] y, int yOff, int count, int shift);
                                static /*0x297cb1c*/ ulong AddShiftedDown(ulong[] x, int xOff, ulong[] y, int yOff, int count, int shift);
                                static /*0x297ca48*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, int count);
                                static /*0x297cbb4*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff, int count);
                                static /*0x297cbe0*/ void AddBoth(ulong[] x, int xOff, ulong[] y1, int y1Off, ulong[] y2, int y2Off, int count);
                                static /*0x297cc98*/ void FlipWord(ulong[] buf, int off, int bit, ulong word);
                                static /*0x297cd24*/ bool TestBit(ulong[] buf, int off, int n);
                                static /*0x297cd5c*/ void FlipBit(ulong[] buf, int off, int n);
                                static /*0x297cd9c*/ void MultiplyWord(ulong a, ulong[] b, int bLen, ulong[] c, int cOff);
                                static /*0x297ce70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ReduceResult(ulong[] buf, int off, int len, int m, int[] ks);
                                static /*0x297ceac*/ int ReduceInPlace(ulong[] buf, int off, int len, int m, int[] ks);
                                static /*0x297d2a4*/ void ReduceBitWise(ulong[] buf, int off, int BitLength, int m, int[] ks);
                                static /*0x297d314*/ void ReduceBit(ulong[] buf, int off, int bit, int m, int[] ks);
                                static /*0x297d184*/ void ReduceWordWise(ulong[] buf, int off, int len, int toBit, int m, int[] ks);
                                static /*0x297d3a8*/ void ReduceWord(ulong[] buf, int off, int bit, ulong word, int m, int[] ks);
                                static /*0x297d0d0*/ void ReduceVectorWise(ulong[] buf, int off, int len, int words, int m, int[] ks);
                                static /*0x297d43c*/ void FlipVector(ulong[] x, int xOff, ulong[] y, int yOff, int yLen, int bits);
                                /*0x297c560*/ LongArray(int intLen);
                                /*0x297c5c4*/ LongArray(ulong[] data);
                                /*0x297c5cc*/ LongArray(ulong[] data, int off, int len);
                                /*0x29701f4*/ LongArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt);
                                /*0x29707b0*/ void CopyTo(ulong[] z, int zOff);
                                /*0x2973124*/ bool IsOne();
                                /*0x2973198*/ bool IsZero();
                                /*0x297c688*/ int GetUsedLength();
                                /*0x297c6a0*/ int GetUsedLengthFrom(int from);
                                /*0x29730cc*/ int Degree();
                                /*0x297c7e8*/ int DegreeFrom(int limit);
                                /*0x297c84c*/ ulong[] ResizedData(int newLen);
                                /*0x2973240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x297383c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray AddOne();
                                /*0x297c9ac*/ void AddShiftedByBitsSafe(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int otherDegree, int bits);
                                /*0x2973724*/ void AddShiftedByWords(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int words);
                                /*0x2973200*/ bool TestBitZero();
                                /*0x2973a0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModMultiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int m, int[] ks);
                                /*0x2973f84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int m, int[] ks);
                                /*0x2974314*/ void Reduce(int m, int[] ks);
                                /*0x29744a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModSquare(int m, int[] ks);
                                /*0x2974828*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModSquareN(int n, int m, int[] ks);
                                /*0x29746e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Square(int m, int[] ks);
                                /*0x29749d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModInverse(int m, int[] ks);
                                /*0x2974f80*/ bool Equals(object obj);
                                /*0x297d4c0*/ bool Equals(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other);
                                /*0x2975088*/ int GetHashCode();
                                /*0x29736a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Copy();
                                /*0x297d578*/ string ToString();
                            }

                            class ScaleXPointMap : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale;

                                /*0x297d890*/ ScaleXPointMap(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x297d8c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Map(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                            }

                            namespace Rfc8032
                            {
                                class Ed25519
                                {
                                    static /*0x0*/ int PrehashSize;
                                    static /*0x4*/ int PublicKeySize;
                                    static /*0x8*/ int SecretKeySize;
                                    static /*0xc*/ int SignatureSize;
                                    static /*0x10*/ byte[] Dom2Prefix;
                                    static /*0x18*/ uint[] P;
                                    static /*0x20*/ uint[] L;
                                    static /*0x28*/ int[] B_x;
                                    static /*0x30*/ int[] B_y;
                                    static /*0x38*/ int[] C_d;
                                    static /*0x40*/ int[] C_d2;
                                    static /*0x48*/ int[] C_d4;
                                    static /*0x50*/ object PrecompLock;
                                    static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp[] PrecompBaseWnaf;
                                    static /*0x60*/ int[] PrecompBaseComb;

                                    static /*0x2982e94*/ Ed25519();
                                    static /*0x297d8e8*/ bool CheckContextVar(byte[] ctx, byte phflag);
                                    static /*0x297d90c*/ int CheckPoint(int[] x, int[] y);
                                    static /*0x297e3fc*/ int CheckPoint(int[] x, int[] y, int[] z);
                                    static /*0x297e5c4*/ bool CheckPointVar(byte[] p);
                                    static /*0x297e770*/ bool CheckScalarVar(byte[] s, uint[] n);
                                    static /*0x297e870*/ byte[] Copy(byte[] buf, int off, int len);
                                    static /*0x297e8f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CreateDigest();
                                    static /*0x297e944*/ uint Decode24(byte[] bs, int off);
                                    static /*0x297e99c*/ uint Decode32(byte[] bs, int off);
                                    static /*0x297ea0c*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x297e6a0*/ void Decode32(byte[] bs, int bsOff, uint[] n, int nOff, int nLen);
                                    static /*0x297ea54*/ void Decode32(System.ReadOnlySpan<byte> bs, System.Span<uint> n);
                                    static /*0x297eb84*/ bool DecodePointVar(byte[] p, int pOff, bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine r);
                                    static /*0x297e7fc*/ void DecodeScalar(byte[] k, int kOff, uint[] n);
                                    static /*0x297f0cc*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x297f1b4*/ void Dom2(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest d, byte phflag, byte[] ctx);
                                    static /*0x297f368*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x297f3cc*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x297f44c*/ void Encode56(ulong n, byte[] bs, int off);
                                    static /*0x297f4c8*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, byte[] r, int rOff);
                                    static /*0x297f568*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, System.Span<byte> r);
                                    static /*0x297f948*/ sbyte[] GetWnafVar(uint[] n, int width);
                                    static /*0x297fb00*/ bool ImplVerify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte phflag, byte[] m, int mOff, int mLen);
                                    static /*0x29804fc*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x297ffe8*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine r);
                                    static /*0x29807ac*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x2980848*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp r);
                                    static /*0x29808d0*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ r);
                                    static /*0x298096c*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp r);
                                    static /*0x29809e0*/ void InvertDoubleZs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended[] points);
                                    static /*0x2980df4*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended q, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x298101c*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x2981134*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x2981264*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x29813b0*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x2981458*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x2981544*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ r);
                                    static /*0x2981610*/ void PointDouble(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x298183c*/ void PointLookup(int block, int index, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p);
                                    static /*0x29819ec*/ void PointPrecompute(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended[] points, int count, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x2981b34*/ void PointPrecomputeZ(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ[] points, int count, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x2981c6c*/ void PointSetNeutral(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p);
                                    static /*0x2981d24*/ void Precompute();
                                    static /*0x29825d4*/ void PruneScalar(System.ReadOnlySpan<byte> n, System.Span<byte> r);
                                    static /*0x298005c*/ byte[] ReduceScalar(byte[] n);
                                    static /*0x29826f0*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x2982a8c*/ void ScalarMultBaseYZ(System.ReadOnlySpan<byte> k, System.Span<int> y, System.Span<int> z);
                                    static /*0x29805ac*/ void ScalarMultStrausVar(uint[] nb, uint[] np, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x2982de0*/ bool Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] m, int mOff, int mLen);

                                    struct PointAccum
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                        /*0x20*/ int[] z;
                                        /*0x28*/ int[] u;
                                        /*0x30*/ int[] v;
                                    }

                                    struct PointAffine
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                    }

                                    struct PointExtended
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                        /*0x20*/ int[] z;
                                        /*0x28*/ int[] t;
                                    }

                                    struct PointPrecomp
                                    {
                                        /*0x10*/ int[] ymx_h;
                                        /*0x18*/ int[] ypx_h;
                                        /*0x20*/ int[] xyd;
                                    }

                                    struct PointPrecompZ
                                    {
                                        /*0x10*/ int[] ymx_h;
                                        /*0x18*/ int[] ypx_h;
                                        /*0x20*/ int[] xyd;
                                        /*0x28*/ int[] z;
                                    }

                                    struct PointTemp
                                    {
                                        /*0x10*/ int[] r0;
                                        /*0x18*/ int[] r1;
                                    }
                                }

                                class Ed448
                                {
                                    static /*0x0*/ int PrehashSize;
                                    static /*0x4*/ int PublicKeySize;
                                    static /*0x8*/ int SecretKeySize;
                                    static /*0xc*/ int SignatureSize;
                                    static /*0x10*/ byte[] Dom4Prefix;
                                    static /*0x18*/ uint[] P;
                                    static /*0x20*/ uint[] L;
                                    static /*0x28*/ uint[] B_x;
                                    static /*0x30*/ uint[] B_y;
                                    static /*0x38*/ object PrecompLock;
                                    static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine[] PrecompBaseWnaf;
                                    static /*0x48*/ uint[] PrecompBaseComb;

                                    static /*0x2989350*/ Ed448();
                                    static /*0x29831c0*/ bool CheckContextVar(byte[] ctx);
                                    static /*0x29831d4*/ int CheckPoint(uint[] x, uint[] y);
                                    static /*0x2984608*/ int CheckPoint(uint[] x, uint[] y, uint[] z);
                                    static /*0x2984aa0*/ bool CheckPointVar(byte[] p);
                                    static /*0x2984c50*/ bool CheckScalarVar(byte[] s, uint[] n);
                                    static /*0x2984d74*/ byte[] Copy(byte[] buf, int off, int len);
                                    static /*0x2984df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof CreateXof();
                                    static /*0x2984e4c*/ uint Decode16(byte[] bs, int off);
                                    static /*0x2984e8c*/ uint Decode24(byte[] bs, int off);
                                    static /*0x2984ee4*/ uint Decode32(byte[] bs, int off);
                                    static /*0x2984f54*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x2984b80*/ void Decode32(byte[] bs, int bsOff, uint[] n, int nOff, int nLen);
                                    static /*0x2984f9c*/ void Decode32(System.ReadOnlySpan<byte> bs, System.Span<uint> n);
                                    static /*0x29850cc*/ bool DecodePointVar(byte[] p, int pOff, bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2984d00*/ void DecodeScalar(byte[] k, int kOff, uint[] n);
                                    static /*0x2985678*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x2985760*/ void Dom4(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof d, byte phflag, byte[] ctx);
                                    static /*0x2985900*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x2985964*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x29859e4*/ void Encode56(ulong n, byte[] bs, int off);
                                    static /*0x2985a60*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, byte[] r, int rOff);
                                    static /*0x2985dac*/ sbyte[] GetWnafVar(uint[] n, int width);
                                    static /*0x2985f68*/ bool ImplVerify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte phflag, byte[] m, int mOff, int mLen);
                                    static /*0x2986f68*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine r);
                                    static /*0x2986400*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2986fdc*/ void InvertZs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective[] points);
                                    static /*0x29873dc*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2987718*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x29878f8*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2987b3c*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2987da8*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2987e44*/ void PointDouble(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2987fa0*/ void PointLookup(int block, int index, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p);
                                    static /*0x298812c*/ void PointPrecomputeVar(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective[] points, int count);
                                    static /*0x2988270*/ void PointSetNeutral(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p);
                                    static /*0x2988318*/ void Precompute();
                                    static /*0x2988a58*/ void PruneScalar(System.ReadOnlySpan<byte> n, System.Span<byte> r);
                                    static /*0x2986488*/ byte[] ReduceScalar(byte[] n);
                                    static /*0x2988b7c*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2988f34*/ void ScalarMultBaseXY(System.ReadOnlySpan<byte> k, System.Span<uint> x, System.Span<uint> y);
                                    static /*0x2986d8c*/ void ScalarMultStrausVar(uint[] nb, uint[] np, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x2989290*/ bool Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte[] m, int mOff, int mLen);

                                    struct PointAffine
                                    {
                                        /*0x10*/ uint[] x;
                                        /*0x18*/ uint[] y;
                                    }

                                    struct PointProjective
                                    {
                                        /*0x10*/ uint[] x;
                                        /*0x18*/ uint[] y;
                                        /*0x20*/ uint[] z;
                                    }
                                }
                            }

                            namespace Rfc7748
                            {
                                class X25519
                                {
                                    static /*0x298959c*/ bool CalculateAgreement(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x2989738*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x2989780*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x29898a8*/ void PointDouble(int[] x, int[] z);
                                    static /*0x2989650*/ void ScalarMult(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x2989af8*/ void ScalarMult(System.ReadOnlySpan<byte> k, System.ReadOnlySpan<byte> u, System.Span<byte> r);
                                    static /*0x298a094*/ void ScalarMultBase(byte[] k, int kOff, byte[] r, int rOff);
                                    static /*0x298a144*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, System.Span<byte> r);
                                }

                                class X25519Field
                                {
                                    static /*0x0*/ uint[] P32;
                                    static /*0x8*/ int[] RootNegOne;

                                    static /*0x298b74c*/ X25519Field();
                                    static /*0x297e554*/ void Add(int[] x, int[] y, int[] z);
                                    static /*0x297e2f8*/ void AddOne(int[] z);
                                    static /*0x2980f90*/ void Apm(int[] x, int[] y, int[] zp, int[] zm);
                                    static /*0x2981734*/ void Carry(int[] z);
                                    static /*0x2981964*/ void CMov(int cond, int[] x, int xOff, int[] z, int zOff);
                                    static /*0x2982a3c*/ void CNegate(int negate, int[] z);
                                    static /*0x2980c64*/ void Copy(int[] x, int xOff, int[] z, int zOff);
                                    static /*0x2982cf0*/ void Copy(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x297da20*/ int[] Create();
                                    static /*0x2980c18*/ int[] CreateTable(int n);
                                    static /*0x298a024*/ void CSwap(int swap, int[] a, int[] b);
                                    static /*0x298a2b0*/ void Decode(System.ReadOnlySpan<uint> x, System.Span<int> z);
                                    static /*0x297ed70*/ void Decode(byte[] x, int xOff, int[] z);
                                    static /*0x2989e70*/ void Decode(System.ReadOnlySpan<byte> x, System.Span<int> z);
                                    static /*0x298a464*/ void Decode128(System.ReadOnlySpan<uint> x, System.Span<int> z);
                                    static /*0x298a4f0*/ void Decode128(byte[] bs, int off, int[] z, int zOff);
                                    static /*0x298a628*/ void Decode128(System.ReadOnlySpan<byte> bs, System.Span<int> z);
                                    static /*0x298a874*/ uint Decode32(byte[] bs, int off);
                                    static /*0x298a8e4*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x298a92c*/ void Encode(System.ReadOnlySpan<int> x, System.Span<uint> z);
                                    static /*0x297f7c8*/ void Encode(System.ReadOnlySpan<int> x, System.Span<byte> z);
                                    static /*0x298aaac*/ void Encode128(System.ReadOnlySpan<int> x, System.Span<uint> z);
                                    static /*0x298ab34*/ void Encode128(System.ReadOnlySpan<int> x, System.Span<byte> bs);
                                    static /*0x298ad5c*/ void Encode32(uint n, System.Span<byte> bs);
                                    static /*0x297f6b0*/ void Inv(int[] x, int[] z);
                                    static /*0x298ada4*/ void Inv(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x2980cdc*/ void InvVar(int[] x, int[] z);
                                    static /*0x298b0dc*/ void InvVar(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x297e3a8*/ int IsZero(int[] x);
                                    static /*0x297f014*/ bool IsZeroVar(int[] x);
                                    static /*0x2989990*/ void Mul(int[] x, int y, int[] z);
                                    static /*0x297dda0*/ void Mul(int[] x, int[] y, int[] z);
                                    static /*0x297f074*/ void Negate(int[] x, int[] z);
                                    static /*0x297e324*/ void Normalize(int[] z);
                                    static /*0x298b058*/ void Normalize(System.Span<int> z);
                                    static /*0x29814f4*/ void One(int[] z);
                                    static /*0x298b4e0*/ void PowPm5d8(int[] x, int[] rx2, int[] rz);
                                    static /*0x298b390*/ void Reduce(int[] z, int x);
                                    static /*0x298b440*/ void Reduce(System.Span<int> z, int x);
                                    static /*0x297da64*/ void Sqr(int[] x, int[] z);
                                    static /*0x298b6ac*/ void Sqr(int[] x, int n, int[] z);
                                    static /*0x297ee48*/ bool SqrtRatioVar(int[] u, int[] v, int[] z);
                                    static /*0x297e288*/ void Sub(int[] x, int[] y, int[] z);
                                    static /*0x297ee1c*/ void SubOne(int[] z);
                                    static /*0x2981ce4*/ void Zero(int[] z);
                                }

                                class X448
                                {
                                    static /*0x298b84c*/ bool CalculateAgreement(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x298b9e8*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x298ba30*/ void DecodeScalar(System.ReadOnlySpan<byte> k, uint[] n);
                                    static /*0x298bb64*/ void PointDouble(uint[] x, uint[] z);
                                    static /*0x298b900*/ void ScalarMult(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x298bc54*/ void ScalarMult(System.ReadOnlySpan<byte> k, System.ReadOnlySpan<byte> u, System.Span<byte> r);
                                    static /*0x298cd9c*/ void ScalarMultBase(byte[] k, int kOff, byte[] r, int rOff);
                                    static /*0x298ce4c*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, System.Span<byte> r);
                                }

                                class X448Field
                                {
                                    static /*0x0*/ uint[] P32;

                                    static /*0x298e458*/ X448Field();
                                    static /*0x298426c*/ void Add(uint[] x, uint[] y, uint[] z);
                                    static /*0x2985434*/ void AddOne(uint[] z);
                                    static /*0x298759c*/ void Carry(uint[] z);
                                    static /*0x29880a4*/ void CMov(int cond, uint[] x, int xOff, uint[] z, int zOff);
                                    static /*0x2988eb0*/ void CNegate(int negate, uint[] z);
                                    static /*0x298724c*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                    static /*0x29891a0*/ void Copy(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x29832b4*/ uint[] Create();
                                    static /*0x2987204*/ uint[] CreateTable(int n);
                                    static /*0x298c678*/ void CSwap(int swap, uint[] a, uint[] b);
                                    static /*0x298cfb0*/ void Decode(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x29852d0*/ void Decode(byte[] x, int xOff, uint[] z);
                                    static /*0x298bfc4*/ void Decode(System.ReadOnlySpan<byte> x, System.Span<uint> z);
                                    static /*0x298d130*/ void Decode224(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x298d404*/ uint Decode24(byte[] bs, int off);
                                    static /*0x298d45c*/ uint Decode24(System.ReadOnlySpan<byte> bs);
                                    static /*0x298d494*/ uint Decode32(byte[] bs, int off);
                                    static /*0x298d504*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x298d218*/ void Decode56(byte[] bs, int off, uint[] z, int zOff);
                                    static /*0x298d2dc*/ void Decode56(System.ReadOnlySpan<byte> bs, System.Span<uint> z);
                                    static /*0x298d54c*/ void Encode(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x2985cb0*/ void Encode(uint[] x, byte[] z, int zOff);
                                    static /*0x298c6e8*/ void Encode(System.ReadOnlySpan<uint> x, System.Span<byte> z);
                                    static /*0x298d6cc*/ void Encode224(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x298d96c*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x298d9d0*/ void Encode24(uint n, System.Span<byte> bs);
                                    static /*0x298da08*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x298da88*/ void Encode32(uint n, System.Span<byte> bs);
                                    static /*0x298d7ac*/ void Encode56(uint[] x, int xOff, byte[] bs, int off);
                                    static /*0x298d860*/ void Encode56(System.ReadOnlySpan<uint> x, System.Span<byte> bs);
                                    static /*0x2985b98*/ void Inv(uint[] x, uint[] z);
                                    static /*0x298dad0*/ void Inv(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x29872c4*/ void InvVar(uint[] x, uint[] z);
                                    static /*0x298dddc*/ void InvVar(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x29845b4*/ int IsZero(uint[] x);
                                    static /*0x29855c8*/ bool IsZeroVar(uint[] x);
                                    static /*0x29842dc*/ void Mul(uint[] x, uint y, uint[] z);
                                    static /*0x29838e4*/ void Mul(uint[] x, uint[] y, uint[] z);
                                    static /*0x29853cc*/ void Negate(uint[] x, uint[] z);
                                    static /*0x2984550*/ void Normalize(uint[] z);
                                    static /*0x298dd64*/ void Normalize(System.Span<uint> z);
                                    static /*0x2985628*/ void One(uint[] z);
                                    static /*0x298e190*/ void PowPm3d4(uint[] x, uint[] z);
                                    static /*0x298e070*/ void Reduce(uint[] z, int x);
                                    static /*0x298e108*/ void Reduce(System.Span<uint> z, int x);
                                    static /*0x29832f8*/ void Sqr(uint[] x, uint[] z);
                                    static /*0x298e3b8*/ void Sqr(uint[] x, int n, uint[] z);
                                    static /*0x2985460*/ bool SqrtRatioVar(uint[] u, uint[] v, uint[] z);
                                    static /*0x298472c*/ void Sub(uint[] x, uint[] y, uint[] z);
                                    static /*0x29844d4*/ void SubOne(uint[] z);
                                    static /*0x29882d8*/ void Zero(uint[] z);
                                }
                            }

                            namespace Multiplier
                            {
                                class AbstractECMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier
                                {
                                    /*0x298e730*/ AbstractECMultiplier();
                                    /*0x298e648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x1f30394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x298e724*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CheckResult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                }

                                interface ECMultiplier
                                {
                                    /*0x1f30394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class FixedPointCombMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x298ecf4*/ FixedPointCombMultiplier();
                                    /*0x298e738*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class FixedPointPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_offset;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable m_lookupTable;
                                    /*0x20*/ int m_width;

                                    /*0x298ed2c*/ FixedPointPreCompInfo();
                                    /*0x298ecfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable get_LookupTable();
                                    /*0x298ed04*/ void set_LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable value);
                                    /*0x298ed0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Offset();
                                    /*0x298ed14*/ void set_Offset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                    /*0x298ed1c*/ int get_Width();
                                    /*0x298ed24*/ void set_Width(int value);
                                }

                                class FixedPointUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x298ed6c*/ FixedPointUtilities();
                                    static /*0x298eb80*/ int GetCombSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                    static /*0x298ebcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);

                                    class FixedPointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_p;

                                        /*0x298ed3c*/ FixedPointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                        /*0x298edd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x298f26c*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo existingFP, int n);
                                        /*0x298f2a4*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable table, int n);
                                    }
                                }

                                class GlvMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism;

                                    /*0x298f354*/ GlvMultiplier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism);
                                    /*0x298f410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                interface IPreCompCallback
                                {
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                }

                                interface PreCompInfo
                                {
                                }

                                class ValidityPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    static /*0x0*/ string PRECOMP_NAME;
                                    /*0x10*/ bool failed;
                                    /*0x11*/ bool curveEquationPassed;
                                    /*0x12*/ bool orderPassed;

                                    static /*0x298f7dc*/ ValidityPreCompInfo();
                                    /*0x298f7d4*/ ValidityPreCompInfo();
                                    /*0x298f798*/ bool HasFailed();
                                    /*0x298f7a0*/ void ReportFailed();
                                    /*0x298f7ac*/ bool HasCurveEquationPassed();
                                    /*0x298f7b4*/ void ReportCurveEquationPassed();
                                    /*0x298f7c0*/ bool HasOrderPassed();
                                    /*0x298f7c8*/ void ReportOrderPassed();
                                }

                                class WNafL2RMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x2990000*/ WNafL2RMultiplier();
                                    /*0x298f844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class WNafPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ int m_promotionCountdown;
                                    /*0x14*/ int m_confWidth;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] m_preComp;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] m_preCompNeg;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_twice;
                                    /*0x30*/ int m_width;

                                    /*0x29900e8*/ WNafPreCompInfo();
                                    /*0x2990008*/ int DecrementPromotionCountdown();
                                    /*0x2990040*/ int get_PromotionCountdown();
                                    /*0x2990058*/ void set_PromotionCountdown(int value);
                                    /*0x299007c*/ bool get_IsPromoted();
                                    /*0x2990098*/ int get_ConfWidth();
                                    /*0x29900a0*/ void set_ConfWidth(int value);
                                    /*0x29900a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] get_PreComp();
                                    /*0x29900b0*/ void set_PreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] value);
                                    /*0x29900b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] get_PreCompNeg();
                                    /*0x29900c0*/ void set_PreCompNeg(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] value);
                                    /*0x29900c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Twice();
                                    /*0x29900d0*/ void set_Twice(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                    /*0x29900d8*/ int get_Width();
                                    /*0x29900e0*/ void set_Width(int value);
                                }

                                class WNafUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;
                                    static /*0x8*/ int[] DEFAULT_WINDOW_SIZE_CUTOFFS;
                                    static /*0x10*/ int MAX_WIDTH;
                                    static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS;

                                    static /*0x2990eb0*/ WNafUtilities();
                                    static /*0x2990118*/ void ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                    static /*0x29902dc*/ int[] GenerateCompactNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x298fd04*/ int[] GenerateCompactWindowNaf(int width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x29905cc*/ byte[] GenerateNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x2990750*/ byte[] GenerateWindowNaf(int width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x2990aa0*/ int GetNafWeight(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x298fb5c*/ int GetWindowSize(int bits);
                                    static /*0x2990bcc*/ int GetWindowSize(int bits, int maxWidth);
                                    static /*0x2990b04*/ int GetWindowSize(int bits, int[] windowSizeCutoffs, int maxWidth);
                                    static /*0x298fbc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, int minWidth, bool includeNegated);
                                    static /*0x2990c88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo PrecomputeWithPointMap(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap pointMap, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, bool includeNegated);
                                    static /*0x2990a1c*/ byte[] Trim(byte[] a, int length);
                                    static /*0x2990548*/ int[] Trim(int[] a, int length);
                                    static /*0x2990e2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ResizeTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] a, int length);

                                    class ConfigureBasepointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                        /*0x18*/ int m_confWidth;

                                        /*0x29902a0*/ ConfigureBasepointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, int confWidth);
                                        /*0x2990fc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                    }

                                    class PrecomputeCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_p;
                                        /*0x18*/ int m_minWidth;
                                        /*0x1c*/ bool m_includeNegated;

                                        /*0x2990c3c*/ PrecomputeCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, int minWidth, bool includeNegated);
                                        /*0x2991168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x29919c0*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo existingWNaf, int width, int reqPreCompLen, bool includeNegated);
                                        /*0x2991ac8*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] table, int reqLen);
                                    }

                                    class PrecomputeWithPointMapCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_point;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap m_pointMap;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo m_fromWNaf;
                                        /*0x28*/ bool m_includeNegated;

                                        /*0x2990dc0*/ PrecomputeWithPointMapCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap pointMap, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, bool includeNegated);
                                        /*0x2991ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x2991f08*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo existingWNaf, int width, int reqPreCompLen, bool includeNegated);
                                        /*0x2991fac*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] table, int reqLen);
                                    }
                                }

                                class WTauNafMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x2992788*/ WTauNafMultiplier();
                                    static /*0x29922f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyFromWTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte[] u);
                                    /*0x2992780*/ WTauNafMultiplier();
                                    /*0x2991fc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x29921b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyWTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda, sbyte a, sbyte mu);

                                    class WTauNafCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint m_p;
                                        /*0x18*/ sbyte m_a;

                                        /*0x2992744*/ WTauNafCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte a);
                                        /*0x29927f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                    }
                                }

                                class WTauNafPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] m_preComp;

                                    /*0x29928d8*/ WTauNafPreCompInfo();
                                    /*0x29928e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] get_PreComp();
                                    /*0x29928e8*/ void set_PreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] value);
                                }
                            }

                            namespace Endo
                            {
                                interface ECEndomorphism
                                {
                                    /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap get_PointMap();
                                    /*0x1f2fe14*/ bool get_HasEfficientPointMap();
                                }

                                class EndoPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_mappedPoint;

                                    /*0x2992910*/ EndoPreCompInfo();
                                    /*0x29928f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism get_Endomorphism();
                                    /*0x29928f8*/ void set_Endomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism value);
                                    /*0x2992900*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_MappedPoint();
                                    /*0x2992908*/ void set_MappedPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                }

                                class EndoUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x2992c70*/ EndoUtilities();
                                    static /*0x2992918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x298f674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MapPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                    static /*0x2992b2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateB(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int t);

                                    class MapPointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_point;

                                        /*0x2992c2c*/ MapPointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                        /*0x2992cd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x2992ecc*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo existingEndo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism);
                                    }
                                }

                                interface GlvEndomorphism : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
                                {
                                    /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class GlvTypeBEndomorphism : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters m_parameters;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap m_pointMap;

                                    /*0x2992f2c*/ GlvTypeBEndomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters parameters);
                                    /*0x2992ff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x2993070*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap get_PointMap();
                                    /*0x2993078*/ bool get_HasEfficientPointMap();
                                }

                                class GlvTypeBParameters
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_beta;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_lambda;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters m_splitParams;

                                    /*0x2993080*/ GlvTypeBParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger beta, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger lambda, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters splitParams);
                                    /*0x29930e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Beta();
                                    /*0x29930e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters get_SplitParams();
                                }

                                class ScalarSplitParameters
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v1A;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v1B;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v2A;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v2B;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g1;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g2;
                                    /*0x40*/ int m_bits;

                                    static /*0x29930f0*/ void CheckVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v, string name);
                                    /*0x299316c*/ ScalarSplitParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v2, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g2, int bits);
                                    /*0x29932ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V1A();
                                    /*0x29932b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V1B();
                                    /*0x29932bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V2A();
                                    /*0x29932c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V2B();
                                    /*0x29932cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G1();
                                    /*0x29932d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G2();
                                    /*0x29932dc*/ int get_Bits();
                                }
                            }

                            namespace Custom
                            {
                                namespace Sec
                                {
                                    class SecP128R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP128R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Point m_infinity;

                                        static /*0x2993bc8*/ SecP128R1Curve();
                                        /*0x29932e4*/ SecP128R1Curve();
                                        /*0x299353c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x299358c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x2993598*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29935a0*/ int get_FieldSize();
                                        /*0x2993604*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x2993778*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29937ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x2993878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x2993a84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP128R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x2993a2c*/ SecP128R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Curve outer, uint[] table, int size);
                                            /*0x2993d18*/ int get_Size();
                                            /*0x2993d20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x2993f2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x2993e38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP128R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x2994c94*/ SecP128R1Field();
                                        static /*0x2993ff8*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x2994150*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x299421c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29942ec*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29943d0*/ int IsZero(uint[] x);
                                        static /*0x2994424*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29945c4*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29946b8*/ void Negate(uint[] x, uint[] z);
                                        static /*0x2994768*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x2993b2c*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29944ac*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x2994840*/ void Reduce32(uint x, uint[] z);
                                        static /*0x2994970*/ void Square(uint[] x, uint[] z);
                                        static /*0x29949f0*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x2994abc*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x2994bc4*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29940d4*/ void AddPInvTo(uint[] z);
                                        static /*0x2994b48*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP128R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29958f0*/ SecP128R1FieldElement();
                                        /*0x299365c*/ SecP128R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x2993b98*/ SecP128R1FieldElement(uint[] x);
                                        /*0x2994dc4*/ bool get_IsZero();
                                        /*0x2994dd0*/ bool get_IsOne();
                                        /*0x2994ddc*/ bool TestBitZero();
                                        /*0x2994e00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x2994e0c*/ int get_FieldSize();
                                        /*0x2994e70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x2994f68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x2995014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299510c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x2995204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x2995304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29953b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x299545c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x2995508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29956f4*/ bool Equals(object obj);
                                        /*0x2995780*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x299580c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1FieldElement other);
                                        /*0x2995838*/ int GetHashCode();
                                    }

                                    class SecP128R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x2993534*/ SecP128R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x2993870*/ SecP128R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29959c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x2996084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x2996550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x299661c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x299668c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Point m_infinity;

                                        static /*0x2996fb4*/ SecP160K1Curve();
                                        /*0x299674c*/ SecP160K1Curve();
                                        /*0x2996920*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x2996970*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x299697c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x2996984*/ int get_FieldSize();
                                        /*0x29969e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x2996b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x2996bd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x2996c5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x2996e70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x2996e18*/ SecP160K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Curve outer, uint[] table, int size);
                                            /*0x2997104*/ int get_Size();
                                            /*0x299710c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x299732c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x2997238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x2996918*/ SecP160K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x2996c54*/ SecP160K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x2997414*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x2997fb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29984cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x2998598*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x2998608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Point m_infinity;

                                        static /*0x2998fb4*/ SecP160R1Curve();
                                        /*0x29986c8*/ SecP160R1Curve();
                                        /*0x2998920*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x2998970*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x299897c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x2998984*/ int get_FieldSize();
                                        /*0x29989e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x2998b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x2998bd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x2998c5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x2998e70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x2998e18*/ SecP160R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Curve outer, uint[] table, int size);
                                            /*0x2999104*/ int get_Size();
                                            /*0x299910c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x299932c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x2999238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x2999f48*/ SecP160R1Field();
                                        static /*0x2999414*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29994ec*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29995b4*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x2999684*/ void Inv(uint[] x, uint[] z);
                                        static /*0x2999768*/ int IsZero(uint[] x);
                                        static /*0x29997bc*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x2999974*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x2999aa4*/ void Negate(uint[] x, uint[] z);
                                        static /*0x2999b54*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x2998f18*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x2999844*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x2999c2c*/ void Reduce32(uint x, uint[] z);
                                        static /*0x2999cfc*/ void Square(uint[] x, uint[] z);
                                        static /*0x2999d7c*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x2999e48*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x2999e7c*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP160R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x299abb0*/ SecP160R1FieldElement();
                                        /*0x2998a40*/ SecP160R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x2998f84*/ SecP160R1FieldElement(uint[] x);
                                        /*0x299a078*/ bool get_IsZero();
                                        /*0x299a084*/ bool get_IsOne();
                                        /*0x299a090*/ bool TestBitZero();
                                        /*0x299a0b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x299a0c0*/ int get_FieldSize();
                                        /*0x299a124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299a21c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x299a2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299a3c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299a4b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299a5b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x299a664*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x299a710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x299a7bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x299a9b4*/ bool Equals(object obj);
                                        /*0x299aa40*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x299aacc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1FieldElement other);
                                        /*0x299aaf8*/ int GetHashCode();
                                    }

                                    class SecP160R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x2998918*/ SecP160R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x2998c54*/ SecP160R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x299ac80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x299b344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x299b810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x299b8dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x299b94c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160R2_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Point m_infinity;

                                        static /*0x299c140*/ SecP160R2Curve();
                                        /*0x299ba0c*/ SecP160R2Curve();
                                        /*0x299bc64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x299bcb4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x299bcc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x299bcc8*/ int get_FieldSize();
                                        /*0x299bd2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x299bd84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x299bdf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x299be84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x299c098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x299c040*/ SecP160R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Curve outer, uint[] table, int size);
                                            /*0x299c290*/ int get_Size();
                                            /*0x299c298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x299c4b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x299c3c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160R2Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x299caec*/ SecP160R2Field();
                                        static /*0x299c5a0*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x299c678*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x299c740*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x299c810*/ void Inv(uint[] x, uint[] z);
                                        static /*0x299c8f4*/ int IsZero(uint[] x);
                                        static /*0x2997b58*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x2997d94*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x2997c14*/ void Negate(uint[] x, uint[] z);
                                        static /*0x299c948*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x2996f18*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x2997ec4*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x2997cc4*/ void Reduce32(uint x, uint[] z);
                                        static /*0x2997ad8*/ void Square(uint[] x, uint[] z);
                                        static /*0x299ca20*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x2997be0*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x2998400*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP160R2FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x299d854*/ SecP160R2FieldElement();
                                        /*0x2996a40*/ SecP160R2FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x2996f84*/ SecP160R2FieldElement(uint[] x);
                                        /*0x299cc1c*/ bool get_IsZero();
                                        /*0x299cc28*/ bool get_IsOne();
                                        /*0x299cc34*/ bool TestBitZero();
                                        /*0x299cc58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x299cc64*/ int get_FieldSize();
                                        /*0x299ccc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299cdc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x299ce6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299cf64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299d05c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x299d15c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x299d208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x299d2b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x299d360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x299d658*/ bool Equals(object obj);
                                        /*0x299d6e4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x299d770*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2FieldElement other);
                                        /*0x299d79c*/ int GetHashCode();
                                    }

                                    class SecP160R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x299bc5c*/ SecP160R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x299be7c*/ SecP160R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x299d924*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x299dfe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x299e4b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x299e580*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x299e5f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP192K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP192K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Point m_infinity;

                                        static /*0x299ef18*/ SecP192K1Curve();
                                        /*0x299e6b0*/ SecP192K1Curve();
                                        /*0x299e884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x299e8d4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x299e8e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x299e8e8*/ int get_FieldSize();
                                        /*0x299e94c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x299eac0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x299eb34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x299ebc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x299edd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP192K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x299ed7c*/ SecP192K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Curve outer, uint[] table, int size);
                                            /*0x299f068*/ int get_Size();
                                            /*0x299f070*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x299f294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x299f1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP192K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x299fe70*/ SecP192K1Field();
                                        static /*0x299f37c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x299f454*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x299f51c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x299f5ec*/ void Inv(uint[] x, uint[] z);
                                        static /*0x299f6d0*/ int IsZero(uint[] x);
                                        static /*0x299f724*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x299f89c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x299f9cc*/ void Negate(uint[] x, uint[] z);
                                        static /*0x299fa7c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x299ee7c*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x299f7ac*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x299fb54*/ void Reduce32(uint x, uint[] z);
                                        static /*0x299fc24*/ void Square(uint[] x, uint[] z);
                                        static /*0x299fca4*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x299fd70*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x299fda4*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP192K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29a0b94*/ SecP192K1FieldElement();
                                        /*0x299e9a4*/ SecP192K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x299eee8*/ SecP192K1FieldElement(uint[] x);
                                        /*0x299ffa0*/ bool get_IsZero();
                                        /*0x299ffac*/ bool get_IsOne();
                                        /*0x299ffb8*/ bool TestBitZero();
                                        /*0x299ffdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x299ffe8*/ int get_FieldSize();
                                        /*0x29a004c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a0144*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29a01f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a02e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a03e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a04e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29a058c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29a0638*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29a06e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29a0998*/ bool Equals(object obj);
                                        /*0x29a0a24*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29a0ab0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1FieldElement other);
                                        /*0x29a0adc*/ int GetHashCode();
                                    }

                                    class SecP192K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x299e87c*/ SecP192K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x299ebb8*/ SecP192K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29a0c64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29a1328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29a1774*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29a1840*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29a18b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP192R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP192R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Point m_infinity;

                                        static /*0x29a225c*/ SecP192R1Curve();
                                        /*0x29a1970*/ SecP192R1Curve();
                                        /*0x29a1bc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29a1c18*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29a1c24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29a1c2c*/ int get_FieldSize();
                                        /*0x29a1c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29a1e04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29a1e78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29a1f04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29a2118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP192R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29a20c0*/ SecP192R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Curve outer, uint[] table, int size);
                                            /*0x29a23ac*/ int get_Size();
                                            /*0x29a23b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29a25d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29a24e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP192R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x29a3474*/ SecP192R1Field();
                                        static /*0x29a26c0*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a2824*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29a28f0*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29a29c0*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29a2aa4*/ int IsZero(uint[] x);
                                        static /*0x29a2af8*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a2d54*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29a2e84*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29a2f34*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29a21c0*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29a2b80*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29a300c*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29a3144*/ void Square(uint[] x, uint[] z);
                                        static /*0x29a31c4*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x29a3290*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a33a4*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29a279c*/ void AddPInvTo(uint[] z);
                                        static /*0x29a331c*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP192R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29a40c0*/ SecP192R1FieldElement();
                                        /*0x29a1ce8*/ SecP192R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29a222c*/ SecP192R1FieldElement(uint[] x);
                                        /*0x29a35a4*/ bool get_IsZero();
                                        /*0x29a35b0*/ bool get_IsOne();
                                        /*0x29a35bc*/ bool TestBitZero();
                                        /*0x29a35e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29a35ec*/ int get_FieldSize();
                                        /*0x29a3650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a3748*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29a37f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a38ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a39e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a3ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29a3b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29a3c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29a3ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29a3ec4*/ bool Equals(object obj);
                                        /*0x29a3f50*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29a3fdc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1FieldElement other);
                                        /*0x29a4008*/ int GetHashCode();
                                    }

                                    class SecP192R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29a1bc0*/ SecP192R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29a1efc*/ SecP192R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29a4190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29a4854*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29a4d20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29a4dec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29a4e5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP224K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP224K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Point m_infinity;

                                        static /*0x29a5774*/ SecP224K1Curve();
                                        /*0x29a4f1c*/ SecP224K1Curve();
                                        /*0x29a50e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29a5138*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29a5144*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29a514c*/ int get_FieldSize();
                                        /*0x29a51b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29a5324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29a5398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29a541c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29a5630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP224K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29a55d8*/ SecP224K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Curve outer, uint[] table, int size);
                                            /*0x29a58c4*/ int get_Size();
                                            /*0x29a58cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29a5aec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29a59f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP224K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x29a66c8*/ SecP224K1Field();
                                        static /*0x29a5bd4*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a5cac*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29a5d74*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29a5e44*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29a5f28*/ int IsZero(uint[] x);
                                        static /*0x29a5f7c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a60f4*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29a6224*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29a62d4*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29a56d8*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29a6004*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29a63ac*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29a647c*/ void Square(uint[] x, uint[] z);
                                        static /*0x29a64fc*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x29a65c8*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a65fc*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP224K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        static /*0x8*/ uint[] PRECOMP_POW2;
                                        /*0x10*/ uint[] x;

                                        static /*0x29a74a0*/ SecP224K1FieldElement();
                                        /*0x29a5208*/ SecP224K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29a5744*/ SecP224K1FieldElement(uint[] x);
                                        /*0x29a67f8*/ bool get_IsZero();
                                        /*0x29a6804*/ bool get_IsOne();
                                        /*0x29a6810*/ bool TestBitZero();
                                        /*0x29a6834*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29a6840*/ int get_FieldSize();
                                        /*0x29a68a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a699c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29a6a48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a6b40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a6c38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29a6d38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29a6de4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29a6e90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29a6f3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29a72a4*/ bool Equals(object obj);
                                        /*0x29a7330*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29a73bc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1FieldElement other);
                                        /*0x29a73e8*/ int GetHashCode();
                                    }

                                    class SecP224K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29a75d8*/ SecP224K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29a75e0*/ SecP224K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29a75e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29a7ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29a8144*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29a8210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29a8280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP224R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP224R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Point m_infinity;

                                        static /*0x29a8c2c*/ SecP224R1Curve();
                                        /*0x29a8340*/ SecP224R1Curve();
                                        /*0x29a8598*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29a85e8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29a85f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29a85fc*/ int get_FieldSize();
                                        /*0x29a8660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29a87d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29a8848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29a88d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29a8ae8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP224R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29a8a90*/ SecP224R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Curve outer, uint[] table, int size);
                                            /*0x29a8d7c*/ int get_Size();
                                            /*0x29a8d84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29a8fa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29a8eb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP224R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x29a9ea8*/ SecP224R1Field();
                                        static /*0x29a908c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a9204*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29a92d0*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29a93a0*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29a9484*/ int IsZero(uint[] x);
                                        static /*0x29a94d8*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a975c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29a988c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29a993c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29a8b90*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29a9560*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29a9a14*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29a9b64*/ void Square(uint[] x, uint[] z);
                                        static /*0x29a9be4*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x29a9cb0*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29a9dd8*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29a9168*/ void AddPInvTo(uint[] z);
                                        static /*0x29a9d3c*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP224R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29ab0a0*/ SecP224R1FieldElement();
                                        static /*0x29aa8e8*/ bool IsSquare(uint[] x);
                                        static /*0x29aad84*/ void RM(uint[] nc, uint[] d0, uint[] e0, uint[] d1, uint[] e1, uint[] f1, uint[] t);
                                        static /*0x29aae9c*/ void RP(uint[] nc, uint[] d1, uint[] e1, uint[] f1, uint[] t);
                                        static /*0x29aafd0*/ void RS(uint[] d, uint[] e, uint[] f, uint[] t);
                                        static /*0x29aa9d4*/ bool TrySqrt(uint[] nc, uint[] r, uint[] t);
                                        /*0x29a86b8*/ SecP224R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29a8bfc*/ SecP224R1FieldElement(uint[] x);
                                        /*0x29a9fd8*/ bool get_IsZero();
                                        /*0x29a9fe4*/ bool get_IsOne();
                                        /*0x29a9ff0*/ bool TestBitZero();
                                        /*0x29aa014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29aa020*/ int get_FieldSize();
                                        /*0x29aa084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29aa17c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29aa228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29aa320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29aa418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29aa518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29aa5c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29aa670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29aa71c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29aab88*/ bool Equals(object obj);
                                        /*0x29aac14*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29aaca0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1FieldElement other);
                                        /*0x29aaccc*/ int GetHashCode();
                                    }

                                    class SecP224R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29a8590*/ SecP224R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29a88cc*/ SecP224R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29ab170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29ab834*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29abd00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29abdcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29abe3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP256K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP256K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Point m_infinity;

                                        static /*0x29ac75c*/ SecP256K1Curve();
                                        /*0x29abefc*/ SecP256K1Curve();
                                        /*0x29ac0d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29ac120*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29ac12c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29ac134*/ int get_FieldSize();
                                        /*0x29ac198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29ac30c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29ac380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29ac40c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29ac618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP256K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29ac5c0*/ SecP256K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Curve outer, uint[] table, int size);
                                            /*0x29ac8ac*/ int get_Size();
                                            /*0x29ac8b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29acac0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29ac9cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP256K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x29ad780*/ SecP256K1Field();
                                        static /*0x29acb8c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29acc64*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29acd2c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29acdfc*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29acee0*/ int IsZero(uint[] x);
                                        static /*0x29acf34*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29ad0ac*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x29ad134*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29ad264*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29ad314*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29ac6c0*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29acfbc*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29ad3ec*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29ad4bc*/ void Square(uint[] x, uint[] z);
                                        static /*0x29ad53c*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x29ad5b4*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x29ad680*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29ad6b4*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP256K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29ae54c*/ SecP256K1FieldElement();
                                        /*0x29ac1f0*/ SecP256K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29ac72c*/ SecP256K1FieldElement(uint[] x);
                                        /*0x29ad8b0*/ bool get_IsZero();
                                        /*0x29ad8bc*/ bool get_IsOne();
                                        /*0x29ad8c8*/ bool TestBitZero();
                                        /*0x29ad8ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29ad8f8*/ int get_FieldSize();
                                        /*0x29ad95c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ada54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29adb00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29adbf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29adcf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29addf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29ade9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29adf48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29adff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29ae350*/ bool Equals(object obj);
                                        /*0x29ae3dc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29ae468*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1FieldElement other);
                                        /*0x29ae494*/ int GetHashCode();
                                    }

                                    class SecP256K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29ac0c8*/ SecP256K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29ac404*/ SecP256K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29ae61c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29aed3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29af1c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29af290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29af300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP256R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP256R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Point m_infinity;

                                        static /*0x29afca4*/ SecP256R1Curve();
                                        /*0x29af3c0*/ SecP256R1Curve();
                                        /*0x29af618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29af668*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29af674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29af67c*/ int get_FieldSize();
                                        /*0x29af6e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29af854*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29af8c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29af954*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29afb60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP256R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29afb08*/ SecP256R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Curve outer, uint[] table, int size);
                                            /*0x29afdf4*/ int get_Size();
                                            /*0x29afdfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29b0008*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29aff14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP256R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;

                                        static /*0x29b1084*/ SecP256R1Field();
                                        static /*0x29b00d4*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b0298*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29b0364*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29b0434*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29b0518*/ int IsZero(uint[] x);
                                        static /*0x29b056c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b07e0*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x29b0868*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29b095c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29b0a0c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29afc08*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29b05f4*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29b0ae4*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29b0c80*/ void Square(uint[] x, uint[] z);
                                        static /*0x29b0d00*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x29b0d78*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x29b0e44*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b0fb4*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29b01b0*/ void AddPInvTo(uint[] z);
                                        static /*0x29b0ed0*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP256R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29b1cdc*/ SecP256R1FieldElement();
                                        /*0x29af738*/ SecP256R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29afc74*/ SecP256R1FieldElement(uint[] x);
                                        /*0x29b1168*/ bool get_IsZero();
                                        /*0x29b1174*/ bool get_IsOne();
                                        /*0x29b1180*/ bool TestBitZero();
                                        /*0x29b11a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29b11b0*/ int get_FieldSize();
                                        /*0x29b1214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b130c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29b13b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b14b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b15a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b16a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29b1754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29b1800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29b18ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29b1ae0*/ bool Equals(object obj);
                                        /*0x29b1b6c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29b1bf8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1FieldElement other);
                                        /*0x29b1c24*/ int GetHashCode();
                                    }

                                    class SecP256R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29af610*/ SecP256R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29af94c*/ SecP256R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29b1dac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29b24cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29b29c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29b2a90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29b2b00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP384R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP384R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Point m_infinity;

                                        static /*0x29b34b8*/ SecP384R1Curve();
                                        /*0x29b2bc0*/ SecP384R1Curve();
                                        /*0x29b2e18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29b2e68*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29b2e74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29b2e7c*/ int get_FieldSize();
                                        /*0x29b2ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29b3054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29b30c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29b3154*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29b3370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP384R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29b3318*/ SecP384R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Curve outer, uint[] table, int size);
                                            /*0x29b3608*/ int get_Size();
                                            /*0x29b3610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29b383c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29b3748*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP384R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x29b4954*/ SecP384R1Field();
                                        static /*0x29b392c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b3ac8*/ void AddExt(uint[] xx, uint[] yy, uint[] zz);
                                        static /*0x29b3bfc*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29b3ccc*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29b3da4*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29b3e88*/ int IsZero(uint[] x);
                                        static /*0x29b3edc*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b41ec*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x29b4274*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29b432c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29b341c*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29b3f68*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29b4404*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29b4574*/ void Square(uint[] x, uint[] z);
                                        static /*0x29b45f8*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x29b4670*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x29b473c*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b4880*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29b3a10*/ void AddPInvTo(uint[] z);
                                        static /*0x29b47cc*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP384R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29b5760*/ SecP384R1FieldElement();
                                        /*0x29b2f38*/ SecP384R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29b3488*/ SecP384R1FieldElement(uint[] x);
                                        /*0x29b4a84*/ bool get_IsZero();
                                        /*0x29b4a98*/ bool get_IsOne();
                                        /*0x29b4aac*/ bool TestBitZero();
                                        /*0x29b4ad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29b4ae4*/ int get_FieldSize();
                                        /*0x29b4b48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b4c44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29b4cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b4df0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b4eec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b4ff0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29b50a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29b5150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29b5200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29b555c*/ bool Equals(object obj);
                                        /*0x29b55e8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29b5674*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1FieldElement other);
                                        /*0x29b56a8*/ int GetHashCode();
                                    }

                                    class SecP384R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29b2e10*/ SecP384R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29b314c*/ SecP384R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29b5830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29b5f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29b64ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29b6578*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29b65e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP521R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP521R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Point m_infinity;

                                        static /*0x29b6fa0*/ SecP521R1Curve();
                                        /*0x29b66a8*/ SecP521R1Curve();
                                        /*0x29b6900*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29b6950*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29b695c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29b6964*/ int get_FieldSize();
                                        /*0x29b69c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29b6b3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29b6bb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29b6c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29b6e58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP521R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29b6e00*/ SecP521R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Curve outer, uint[] table, int size);
                                            /*0x29b70f0*/ int get_Size();
                                            /*0x29b70f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29b7320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29b722c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP521R1Field
                                    {
                                        static /*0x0*/ uint[] P;

                                        static /*0x29b806c*/ SecP521R1Field();
                                        static /*0x29b7410*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b7520*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29b7608*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29b76a4*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29b7788*/ int IsZero(uint[] x);
                                        static /*0x29b77d8*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b7a14*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x29b7a98*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29b7b50*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29b6f04*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29b7900*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29b7c48*/ void Reduce23(uint[] z);
                                        static /*0x29b7d2c*/ void Square(uint[] x, uint[] z);
                                        static /*0x29b7e28*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x29b7e9c*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x29b7f60*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29b8000*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29b7864*/ void ImplMultiply(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29b7db0*/ void ImplSquare(uint[] x, uint[] zz);
                                    }

                                    class SecP521R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29b8bc0*/ SecP521R1FieldElement();
                                        /*0x29b6a20*/ SecP521R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29b6f70*/ SecP521R1FieldElement(uint[] x);
                                        /*0x29b810c*/ bool get_IsZero();
                                        /*0x29b8120*/ bool get_IsOne();
                                        /*0x29b8134*/ bool TestBitZero();
                                        /*0x29b8158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29b816c*/ int get_FieldSize();
                                        /*0x29b81d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b82cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29b837c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b8478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b8574*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29b8678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29b8728*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29b87d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29b8888*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29b89bc*/ bool Equals(object obj);
                                        /*0x29b8a48*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29b8ad4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1FieldElement other);
                                        /*0x29b8b08*/ int GetHashCode();
                                    }

                                    class SecP521R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29b68f8*/ SecP521R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29b6c34*/ SecP521R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29b8c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29b93d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29b98e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29b99b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29b9a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT113Field
                                    {
                                        static /*0x29b9ae0*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29b9b58*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29b9c30*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29b9c84*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29b9ce4*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29b9cf4*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29b9e4c*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29ba010*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29ba2c4*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29b9db8*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29ba340*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29b9fc4*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29ba3c0*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29ba088*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29ba410*/ uint Trace(ulong[] x);
                                        static /*0x29ba124*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29ba438*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29b9da0*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT113FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29ba57c*/ SecT113FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29ba638*/ SecT113FieldElement(ulong[] x);
                                        /*0x29ba668*/ bool get_IsOne();
                                        /*0x29ba674*/ bool get_IsZero();
                                        /*0x29ba680*/ bool TestBitZero();
                                        /*0x29ba6ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29ba6b8*/ int get_FieldSize();
                                        /*0x29ba6c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ba78c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29ba810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ba81c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ba8e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29ba8f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29baa6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29baaac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29baab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29bab34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bac64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29bad00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29bad84*/ bool get_HasFastTrace();
                                        /*0x29bad8c*/ int Trace();
                                        /*0x29bad94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29bae18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29bae9c*/ bool Equals(object obj);
                                        /*0x29baf28*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29bafb4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113FieldElement other);
                                        /*0x29bafe0*/ int GetHashCode();
                                    }

                                    class SecT113R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT113R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Point m_infinity;

                                        static /*0x29bb65c*/ SecT113R1Curve();
                                        /*0x29bb054*/ SecT113R1Curve();
                                        /*0x29bb284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29bb2d4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29bb2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29bb2e8*/ int get_FieldSize();
                                        /*0x29bb2f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29bb348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bb3bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29bb448*/ bool get_IsKoblitz();
                                        /*0x29bb450*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT113R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29bb604*/ SecT113R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Curve outer, ulong[] table, int size);
                                            /*0x29bb780*/ int get_Size();
                                            /*0x29bb788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29bb994*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29bb8a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT113R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29bb27c*/ SecT113R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bb440*/ SecT113R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29bba68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29bbb38*/ bool get_CompressionYTilde();
                                        /*0x29bbbb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29bc2dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29bc63c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29bcb38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT113R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT113R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Point m_infinity;

                                        static /*0x29bd2a0*/ SecT113R2Curve();
                                        /*0x29bcc98*/ SecT113R2Curve();
                                        /*0x29bcec8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29bcf18*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29bcf24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29bcf2c*/ int get_FieldSize();
                                        /*0x29bcf34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29bcf8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bd000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29bd08c*/ bool get_IsKoblitz();
                                        /*0x29bd094*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT113R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29bd248*/ SecT113R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Curve outer, ulong[] table, int size);
                                            /*0x29bd3c4*/ int get_Size();
                                            /*0x29bd3cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29bd5d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29bd4e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT113R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29bcec0*/ SecT113R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bd084*/ SecT113R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29bd6ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29bd77c*/ bool get_CompressionYTilde();
                                        /*0x29bd7f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29bdf20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29be280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29be77c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT131Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x29bf930*/ SecT131Field();
                                        static /*0x29be8dc*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29be984*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29bea8c*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29beafc*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29beb80*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29beb90*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29beda8*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29befe8*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29bf4a8*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29becc8*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29bf554*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29bef64*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29bf678*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29bf090*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29bf700*/ uint Trace(ulong[] x);
                                        static /*0x29bf748*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29bf15c*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29bf7d0*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29bec58*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT131FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29bf9d0*/ SecT131FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29bfac8*/ SecT131FieldElement(ulong[] x);
                                        /*0x29bfaf8*/ bool get_IsOne();
                                        /*0x29bfb04*/ bool get_IsZero();
                                        /*0x29bfb10*/ bool TestBitZero();
                                        /*0x29bfb3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29bfb48*/ int get_FieldSize();
                                        /*0x29bfb50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29bfc48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29bfcf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29bfd00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29bfdf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bfe08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29bffa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29bffe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29bffec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29c0098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c01fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29c02c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29c036c*/ bool get_HasFastTrace();
                                        /*0x29c0374*/ int Trace();
                                        /*0x29c03cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29c0478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29c0524*/ bool Equals(object obj);
                                        /*0x29c05b0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29c063c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131FieldElement other);
                                        /*0x29c0668*/ int GetHashCode();
                                    }

                                    class SecT131R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT131R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Point m_infinity;

                                        static /*0x29c0cec*/ SecT131R1Curve();
                                        /*0x29c06dc*/ SecT131R1Curve();
                                        /*0x29c090c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29c095c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29c0968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29c0970*/ int get_FieldSize();
                                        /*0x29c0978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29c09d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c0a44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c0ad0*/ bool get_IsKoblitz();
                                        /*0x29c0ad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT131R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29c0c94*/ SecT131R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Curve outer, ulong[] table, int size);
                                            /*0x29c0e10*/ int get_Size();
                                            /*0x29c0e18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29c1038*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29c0f44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT131R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29c0904*/ SecT131R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c0ac8*/ SecT131R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c1120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29c11f0*/ bool get_CompressionYTilde();
                                        /*0x29c126c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c1994*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29c1cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c21f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT131R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT131R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Point m_infinity;

                                        static /*0x29c2960*/ SecT131R2Curve();
                                        /*0x29c2350*/ SecT131R2Curve();
                                        /*0x29c2580*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29c25d0*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29c25dc*/ int get_FieldSize();
                                        /*0x29c25e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29c263c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c26b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c273c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29c2744*/ bool get_IsKoblitz();
                                        /*0x29c274c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT131R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29c2908*/ SecT131R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Curve outer, ulong[] table, int size);
                                            /*0x29c2a84*/ int get_Size();
                                            /*0x29c2a8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29c2cac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29c2bb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT131R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29c2578*/ SecT131R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c2734*/ SecT131R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c2d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29c2e64*/ bool get_CompressionYTilde();
                                        /*0x29c2ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c3608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29c3968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c3e64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x29c5028*/ SecT163Field();
                                        static /*0x29c3fc4*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29c406c*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29c41a4*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29c4214*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29c4298*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29c42a8*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29c449c*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29c47f8*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29c4be0*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29c43a4*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29c4c8c*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29c4680*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29c4db0*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29c4710*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29c4e44*/ uint Trace(ulong[] x);
                                        static /*0x29c4e7c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29c48a0*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29c4f08*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29c438c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT163FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29c50c8*/ SecT163FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29c51c0*/ SecT163FieldElement(ulong[] x);
                                        /*0x29c51f0*/ bool get_IsOne();
                                        /*0x29c51fc*/ bool get_IsZero();
                                        /*0x29c5208*/ bool TestBitZero();
                                        /*0x29c5234*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29c5240*/ int get_FieldSize();
                                        /*0x29c5248*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29c5340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29c53ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29c53f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29c54f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c5500*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c569c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29c56dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29c56e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29c578c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c58ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29c59b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29c5a5c*/ bool get_HasFastTrace();
                                        /*0x29c5a64*/ int Trace();
                                        /*0x29c5abc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29c5b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29c5c14*/ bool Equals(object obj);
                                        /*0x29c5ca0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29c5d2c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163FieldElement other);
                                        /*0x29c5d58*/ int GetHashCode();
                                    }

                                    class SecT163K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Point m_infinity;

                                        static /*0x29c6398*/ SecT163K1Curve();
                                        /*0x29c5dcc*/ SecT163K1Curve();
                                        /*0x29c5f64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29c5fb4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29c5fc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x29c6014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29c601c*/ int get_FieldSize();
                                        /*0x29c6024*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29c607c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c60f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c617c*/ bool get_IsKoblitz();
                                        /*0x29c6184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29c6340*/ SecT163K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Curve outer, ulong[] table, int size);
                                            /*0x29c64bc*/ int get_Size();
                                            /*0x29c64c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29c66e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29c65f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29c5f5c*/ SecT163K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c6174*/ SecT163K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c67cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29c689c*/ bool get_CompressionYTilde();
                                        /*0x29c6918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c6ffc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29c7324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c77c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Point m_infinity;

                                        static /*0x29c7f38*/ SecT163R1Curve();
                                        /*0x29c7928*/ SecT163R1Curve();
                                        /*0x29c7b58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29c7ba8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29c7bb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29c7bbc*/ int get_FieldSize();
                                        /*0x29c7bc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29c7c1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c7c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c7d1c*/ bool get_IsKoblitz();
                                        /*0x29c7d24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29c7ee0*/ SecT163R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Curve outer, ulong[] table, int size);
                                            /*0x29c805c*/ int get_Size();
                                            /*0x29c8064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29c8284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29c8190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29c7b50*/ SecT163R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c7d14*/ SecT163R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c836c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29c843c*/ bool get_CompressionYTilde();
                                        /*0x29c84b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c8be0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29c8f40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29c943c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Point m_infinity;

                                        static /*0x29c9b68*/ SecT163R2Curve();
                                        /*0x29c959c*/ SecT163R2Curve();
                                        /*0x29c9788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29c97d8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29c97e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29c97ec*/ int get_FieldSize();
                                        /*0x29c97f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29c984c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c98c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c994c*/ bool get_IsKoblitz();
                                        /*0x29c9954*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29c9b10*/ SecT163R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Curve outer, ulong[] table, int size);
                                            /*0x29c9c8c*/ int get_Size();
                                            /*0x29c9c94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29c9eb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29c9dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29c9780*/ SecT163R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29c9944*/ SecT163R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29c9f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29ca06c*/ bool get_CompressionYTilde();
                                        /*0x29ca0e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29ca7f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29cab20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29cafd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT193Field
                                    {
                                        static /*0x29cb138*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29cb210*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29cb378*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29cb404*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29cb4ac*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29cb4bc*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29cb694*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29cb8d0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29cbcac*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29cb5b0*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29cbcfc*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29cb818*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29cbde4*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29cb854*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29cbe24*/ uint Trace(ulong[] x);
                                        static /*0x29cbe4c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29cbf00*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x29cb91c*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29cbf8c*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29cb548*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT193FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29cc0d8*/ SecT193FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29cc194*/ SecT193FieldElement(ulong[] x);
                                        /*0x29cc1c4*/ bool get_IsOne();
                                        /*0x29cc1d0*/ bool get_IsZero();
                                        /*0x29cc1dc*/ bool TestBitZero();
                                        /*0x29cc208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29cc214*/ int get_FieldSize();
                                        /*0x29cc21c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29cc2e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29cc36c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29cc378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29cc444*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29cc454*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29cc5c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29cc608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29cc60c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29cc690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29cc7c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29cc85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29cc8e0*/ bool get_HasFastTrace();
                                        /*0x29cc8e8*/ int Trace();
                                        /*0x29cc8f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29cc974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29cc9f8*/ bool Equals(object obj);
                                        /*0x29cca84*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29ccb10*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193FieldElement other);
                                        /*0x29ccb3c*/ int GetHashCode();
                                    }

                                    class SecT193R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT193R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Point m_infinity;

                                        static /*0x29cd1b8*/ SecT193R1Curve();
                                        /*0x29ccbb0*/ SecT193R1Curve();
                                        /*0x29ccde0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29cce30*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29cce3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29cce44*/ int get_FieldSize();
                                        /*0x29cce4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29ccea4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29ccf18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29ccfa4*/ bool get_IsKoblitz();
                                        /*0x29ccfac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT193R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29cd160*/ SecT193R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Curve outer, ulong[] table, int size);
                                            /*0x29cd2dc*/ int get_Size();
                                            /*0x29cd2e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29cd4f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29cd3fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT193R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29ccdd8*/ SecT193R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29ccf9c*/ SecT193R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29cd5bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29cd68c*/ bool get_CompressionYTilde();
                                        /*0x29cd708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29cde30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29ce190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29ce68c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT193R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT193R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Point m_infinity;

                                        static /*0x29cedf4*/ SecT193R2Curve();
                                        /*0x29ce7ec*/ SecT193R2Curve();
                                        /*0x29cea1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29cea6c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29cea78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29cea80*/ int get_FieldSize();
                                        /*0x29cea88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29ceae0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29ceb54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29cebe0*/ bool get_IsKoblitz();
                                        /*0x29cebe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT193R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29ced9c*/ SecT193R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Curve outer, ulong[] table, int size);
                                            /*0x29cef18*/ int get_Size();
                                            /*0x29cef20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29cf12c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29cf038*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT193R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29cea14*/ SecT193R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29cebd8*/ SecT193R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29cf1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29cf2c8*/ bool get_CompressionYTilde();
                                        /*0x29cf344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29cfa6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29cfdcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d02c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT233Field
                                    {
                                        static /*0x29d0428*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29d0500*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29d0698*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29d0724*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29d07cc*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29d07dc*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29d09a0*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29d0ba0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29d1018*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29d08a0*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29d1068*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29d0b54*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29d128c*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29d0bec*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29d12dc*/ uint Trace(ulong[] x);
                                        static /*0x29d1314*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29d13c8*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x29d0c88*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29d1454*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29d0888*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT233FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29d157c*/ SecT233FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29d1638*/ SecT233FieldElement(ulong[] x);
                                        /*0x29d1668*/ bool get_IsOne();
                                        /*0x29d1674*/ bool get_IsZero();
                                        /*0x29d1680*/ bool TestBitZero();
                                        /*0x29d16ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29d16b8*/ int get_FieldSize();
                                        /*0x29d16c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d178c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29d1810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d181c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d18e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d18f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d1a6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d1aac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29d1ab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29d1b34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d1c64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29d1d00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29d1d84*/ bool get_HasFastTrace();
                                        /*0x29d1d8c*/ int Trace();
                                        /*0x29d1d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29d1e18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29d1e9c*/ bool Equals(object obj);
                                        /*0x29d1f28*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29d1fb4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233FieldElement other);
                                        /*0x29d1fe0*/ int GetHashCode();
                                    }

                                    class SecT233K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT233K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Point m_infinity;

                                        static /*0x29d2634*/ SecT233K1Curve();
                                        /*0x29d2054*/ SecT233K1Curve();
                                        /*0x29d2208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29d2258*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29d2264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x29d22b8*/ int get_FieldSize();
                                        /*0x29d22c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29d2318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d238c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29d2418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29d2420*/ bool get_IsKoblitz();
                                        /*0x29d2428*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT233K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29d25dc*/ SecT233K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Curve outer, ulong[] table, int size);
                                            /*0x29d2758*/ int get_Size();
                                            /*0x29d2760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29d296c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29d2878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT233K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29d2200*/ SecT233K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d2410*/ SecT233K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29d2a38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29d2b08*/ bool get_CompressionYTilde();
                                        /*0x29d2b84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d3258*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29d35cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d3a54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT233R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT233R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Point m_infinity;

                                        static /*0x29d4168*/ SecT233R1Curve();
                                        /*0x29d3bb4*/ SecT233R1Curve();
                                        /*0x29d3d98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29d3de8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29d3df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29d3dfc*/ int get_FieldSize();
                                        /*0x29d3e04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29d3e5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d3ed0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29d3f54*/ bool get_IsKoblitz();
                                        /*0x29d3f5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT233R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29d4110*/ SecT233R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Curve outer, ulong[] table, int size);
                                            /*0x29d428c*/ int get_Size();
                                            /*0x29d4294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29d44a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29d43ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT233R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29d456c*/ SecT233R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d4574*/ SecT233R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29d457c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29d464c*/ bool get_CompressionYTilde();
                                        /*0x29d46c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d4dd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29d5100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d55b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT239Field
                                    {
                                        static /*0x29d5718*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29d57f0*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29d5988*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29d5a14*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29d5abc*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29d5acc*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29d5c80*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29d5eb8*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29d6330*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29d5b90*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29d6380*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29d5e6c*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29d65b4*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29d5f04*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29d6604*/ uint Trace(ulong[] x);
                                        static /*0x29d6650*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29d6704*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x29d5fa0*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29d6790*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29d5b78*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT239FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29d68dc*/ SecT239FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29d6998*/ SecT239FieldElement(ulong[] x);
                                        /*0x29d69c8*/ bool get_IsOne();
                                        /*0x29d69d4*/ bool get_IsZero();
                                        /*0x29d69e0*/ bool TestBitZero();
                                        /*0x29d6a0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29d6a18*/ int get_FieldSize();
                                        /*0x29d6a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d6aec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29d6b70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d6b7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d6c48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d6c58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d6dcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29d6e0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29d6e10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29d6e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d6fc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29d7060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29d70e4*/ bool get_HasFastTrace();
                                        /*0x29d70ec*/ int Trace();
                                        /*0x29d70f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29d7178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29d71fc*/ bool Equals(object obj);
                                        /*0x29d7288*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29d7314*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239FieldElement other);
                                        /*0x29d7340*/ int GetHashCode();
                                    }

                                    class SecT239K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT239K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Point m_infinity;

                                        static /*0x29d7994*/ SecT239K1Curve();
                                        /*0x29d73b4*/ SecT239K1Curve();
                                        /*0x29d7568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29d75b8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29d75c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x29d7618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29d7620*/ int get_FieldSize();
                                        /*0x29d7628*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29d7680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d76f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29d7780*/ bool get_IsKoblitz();
                                        /*0x29d7788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT239K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29d793c*/ SecT239K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Curve outer, ulong[] table, int size);
                                            /*0x29d7ab8*/ int get_Size();
                                            /*0x29d7ac0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29d7ccc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29d7bd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT239K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29d7560*/ SecT239K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29d7778*/ SecT239K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29d7d98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29d7e68*/ bool get_CompressionYTilde();
                                        /*0x29d7ee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d85b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29d892c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29d8db4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT283Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x29da548*/ SecT283Field();
                                        static /*0x29d8f14*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29d901c*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29d91e4*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29d928c*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29d9358*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29d9368*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29d95e8*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29d9880*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29d9fbc*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29d949c*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29da048*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29d97fc*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29da1bc*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29d9908*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29da244*/ uint Trace(ulong[] x);
                                        static /*0x29da27c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29da358*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x29d99d4*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29da404*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29d9430*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT283FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29da5e8*/ SecT283FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29da6e0*/ SecT283FieldElement(ulong[] x);
                                        /*0x29da710*/ bool get_IsOne();
                                        /*0x29da71c*/ bool get_IsZero();
                                        /*0x29da728*/ bool TestBitZero();
                                        /*0x29da754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29da760*/ int get_FieldSize();
                                        /*0x29da768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29da860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29da90c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29da918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29daa10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29daa20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29dabc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29dac00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29dac04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29dacb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29dae14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29daed8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29daf84*/ bool get_HasFastTrace();
                                        /*0x29daf8c*/ int Trace();
                                        /*0x29dafe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29db090*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29db13c*/ bool Equals(object obj);
                                        /*0x29db1c8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29db254*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283FieldElement other);
                                        /*0x29db280*/ int GetHashCode();
                                    }

                                    class SecT283K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT283K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Point m_infinity;

                                        static /*0x29db8dc*/ SecT283K1Curve();
                                        /*0x29db2f4*/ SecT283K1Curve();
                                        /*0x29db4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29db4f8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29db504*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x29db558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29db560*/ int get_FieldSize();
                                        /*0x29db568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29db5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29db634*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29db6c0*/ bool get_IsKoblitz();
                                        /*0x29db6c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT283K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29db884*/ SecT283K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Curve outer, ulong[] table, int size);
                                            /*0x29dba00*/ int get_Size();
                                            /*0x29dba08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29dbc28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29dbb34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT283K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29db4a0*/ SecT283K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29db6b8*/ SecT283K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29dbd10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29dbde0*/ bool get_CompressionYTilde();
                                        /*0x29dbe5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29dc530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29dc8a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29dcd2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT283R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT283R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Point m_infinity;

                                        static /*0x29dd458*/ SecT283R1Curve();
                                        /*0x29dce8c*/ SecT283R1Curve();
                                        /*0x29dd078*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29dd0c8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29dd0d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29dd0dc*/ int get_FieldSize();
                                        /*0x29dd0e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29dd13c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29dd1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29dd23c*/ bool get_IsKoblitz();
                                        /*0x29dd244*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT283R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29dd400*/ SecT283R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Curve outer, ulong[] table, int size);
                                            /*0x29dd57c*/ int get_Size();
                                            /*0x29dd584*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29dd7a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29dd6b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT283R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29dd070*/ SecT283R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29dd234*/ SecT283R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29dd88c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29dd95c*/ bool get_CompressionYTilde();
                                        /*0x29dd9d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29de0e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29de410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29de8c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT409Field
                                    {
                                        static /*0x29dea28*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29deb90*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29dec00*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29dece0*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29dedf4*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29dee04*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29df060*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29df2f0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29dfb98*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29def00*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29dfbe8*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29df230*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29dfd54*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29df270*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29dfd98*/ uint Trace(ulong[] x);
                                        static /*0x29dfdc0*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x29dfee8*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x29df33c*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29dffd0*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29dee94*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT409FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29e00f8*/ SecT409FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29e01b4*/ SecT409FieldElement(ulong[] x);
                                        /*0x29e01e4*/ bool get_IsOne();
                                        /*0x29e01f0*/ bool get_IsZero();
                                        /*0x29e01fc*/ bool TestBitZero();
                                        /*0x29e0228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29e0234*/ int get_FieldSize();
                                        /*0x29e023c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e0308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29e038c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e0398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e0464*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e0474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e05ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e062c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29e0630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29e06b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e07e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29e0884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29e0908*/ bool get_HasFastTrace();
                                        /*0x29e0910*/ int Trace();
                                        /*0x29e0918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29e099c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29e0a20*/ bool Equals(object obj);
                                        /*0x29e0aac*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29e0b38*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409FieldElement other);
                                        /*0x29e0b64*/ int GetHashCode();
                                    }

                                    class SecT409K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT409K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Point m_infinity;

                                        static /*0x29e11c0*/ SecT409K1Curve();
                                        /*0x29e0bd8*/ SecT409K1Curve();
                                        /*0x29e0d8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29e0ddc*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29e0de8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x29e0e3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29e0e44*/ int get_FieldSize();
                                        /*0x29e0e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29e0ea4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e0f18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e0fa4*/ bool get_IsKoblitz();
                                        /*0x29e0fac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT409K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29e1168*/ SecT409K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Curve outer, ulong[] table, int size);
                                            /*0x29e12e4*/ int get_Size();
                                            /*0x29e12ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29e150c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29e1418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT409K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29e0d84*/ SecT409K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e0f9c*/ SecT409K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e15f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29e16c4*/ bool get_CompressionYTilde();
                                        /*0x29e1740*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29e1e14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29e2188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29e2610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT409R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT409R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Point m_infinity;

                                        static /*0x29e2d3c*/ SecT409R1Curve();
                                        /*0x29e2770*/ SecT409R1Curve();
                                        /*0x29e295c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29e29ac*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29e29b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29e29c0*/ int get_FieldSize();
                                        /*0x29e29c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29e2a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e2a94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e2b20*/ bool get_IsKoblitz();
                                        /*0x29e2b28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT409R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29e2ce4*/ SecT409R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Curve outer, ulong[] table, int size);
                                            /*0x29e2e60*/ int get_Size();
                                            /*0x29e2e68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29e3088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29e2f94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT409R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29e2954*/ SecT409R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e2b18*/ SecT409R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e3170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29e3240*/ bool get_CompressionYTilde();
                                        /*0x29e32bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29e39c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29e3cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29e41ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT571Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x29e618c*/ SecT571Field();
                                        static /*0x29e430c*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29e4328*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                        static /*0x29e4350*/ void AddBothTo(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29e43c8*/ void AddBothTo(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                        static /*0x29e447c*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x29e4498*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x29e450c*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x29e4520*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29e4530*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x29e4780*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x29e4a58*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x29e5908*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29e599c*/ void MultiplyPrecomp(ulong[] x, ulong[] precomp, ulong[] z);
                                        static /*0x29e5bb8*/ ulong[] PrecompMultiplicand(ulong[] x);
                                        static /*0x29e4634*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x29e5ce8*/ void Reduce5(ulong[] z, int zOff);
                                        static /*0x29e5d54*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x29e49c8*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x29e5f38*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x29e4ae0*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x29e5fd4*/ uint Trace(ulong[] x);
                                        static /*0x29e4bc8*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x29e5a24*/ void ImplMultiplyPrecomp(ulong[] x, ulong[] precomp, ulong[] zz);
                                        static /*0x29e6018*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x29e461c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT571FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x29e622c*/ SecT571FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29e6324*/ SecT571FieldElement(ulong[] x);
                                        /*0x29e6354*/ bool get_IsOne();
                                        /*0x29e6360*/ bool get_IsZero();
                                        /*0x29e636c*/ bool TestBitZero();
                                        /*0x29e6398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29e63a4*/ int get_FieldSize();
                                        /*0x29e63ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e64ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29e6558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e6564*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e665c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e666c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e6808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29e6848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29e684c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29e68f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e6a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x29e6b1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x29e6bc8*/ bool get_HasFastTrace();
                                        /*0x29e6bd0*/ int Trace();
                                        /*0x29e6c28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29e6cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29e6d80*/ bool Equals(object obj);
                                        /*0x29e6e0c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29e6e98*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement other);
                                        /*0x29e6ec4*/ int GetHashCode();
                                    }

                                    class SecT571K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT571K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Point m_infinity;

                                        static /*0x29e7520*/ SecT571K1Curve();
                                        /*0x29e6f38*/ SecT571K1Curve();
                                        /*0x29e70ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29e713c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29e7148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x29e719c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29e71a4*/ int get_FieldSize();
                                        /*0x29e71ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29e7204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e7278*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e7304*/ bool get_IsKoblitz();
                                        /*0x29e730c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT571K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29e74c8*/ SecT571K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Curve outer, ulong[] table, int size);
                                            /*0x29e7644*/ int get_Size();
                                            /*0x29e764c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29e786c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29e7778*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT571K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29e70e4*/ SecT571K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e72fc*/ SecT571K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e7954*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29e7a24*/ bool get_CompressionYTilde();
                                        /*0x29e7aa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29e8520*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29e8894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29e8d1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT571R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT571R1_AFFINE_ZS;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement SecT571R1_B;
                                        static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement SecT571R1_B_SQRT;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Point m_infinity;

                                        static /*0x29e941c*/ SecT571R1Curve();
                                        /*0x29e8e7c*/ SecT571R1Curve();
                                        /*0x29e903c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29e908c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29e9098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29e90a0*/ int get_FieldSize();
                                        /*0x29e90a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29e9100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e9174*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e9200*/ bool get_IsKoblitz();
                                        /*0x29e9208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT571R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29e93c4*/ SecT571R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Curve outer, ulong[] table, int size);
                                            /*0x29e9678*/ int get_Size();
                                            /*0x29e9680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29e98a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29e97ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT571R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x29e9034*/ SecT571R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29e91f8*/ SecT571R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29e9988*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x29e9a58*/ bool get_CompressionYTilde();
                                        /*0x29e9ad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29ea56c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29eaaa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29eaf58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }
                                }

                                namespace GM
                                {
                                    class SM2P256V1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SM2P256V1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Point m_infinity;

                                        static /*0x29eb99c*/ SM2P256V1Curve();
                                        /*0x29eb0b8*/ SM2P256V1Curve();
                                        /*0x29eb310*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x29eb360*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x29eb36c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x29eb374*/ int get_FieldSize();
                                        /*0x29eb3d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29eb54c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29eb5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29eb64c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x29eb858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SM2P256V1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x29eb800*/ SM2P256V1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Curve outer, uint[] table, int size);
                                            /*0x29ebaec*/ int get_Size();
                                            /*0x29ebaf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x29ebd00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x29ebc0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SM2P256V1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;

                                        static /*0x29ecd8c*/ SM2P256V1Field();
                                        static /*0x29ebdcc*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x29ebf88*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x29ec054*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x29ec124*/ void Inv(uint[] x, uint[] z);
                                        static /*0x29ec208*/ int IsZero(uint[] x);
                                        static /*0x29ec25c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x29ec4c4*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x29ec5b8*/ void Negate(uint[] x, uint[] z);
                                        static /*0x29ec668*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29eb900*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x29ec2e4*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x29ec868*/ void Reduce32(uint x, uint[] z);
                                        static /*0x29eca00*/ void Square(uint[] x, uint[] z);
                                        static /*0x29eca80*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x29ecb4c*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x29eccbc*/ void Twice(uint[] x, uint[] z);
                                        static /*0x29ebea8*/ void AddPInvTo(uint[] z);
                                        static /*0x29ecbd8*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SM2P256V1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x29eda48*/ SM2P256V1FieldElement();
                                        /*0x29eb430*/ SM2P256V1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x29eb96c*/ SM2P256V1FieldElement(uint[] x);
                                        /*0x29ece70*/ bool get_IsZero();
                                        /*0x29ece7c*/ bool get_IsOne();
                                        /*0x29ece88*/ bool TestBitZero();
                                        /*0x29eceac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x29eceb8*/ int get_FieldSize();
                                        /*0x29ecf1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ed014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x29ed0c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ed1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ed2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x29ed3b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x29ed45c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x29ed508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x29ed5b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x29ed84c*/ bool Equals(object obj);
                                        /*0x29ed8d8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x29ed964*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1FieldElement other);
                                        /*0x29ed990*/ int GetHashCode();
                                    }

                                    class SM2P256V1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x29eb308*/ SM2P256V1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x29eb644*/ SM2P256V1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x29edb18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29ee1dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x29ee6a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x29ee774*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x29ee7e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }
                                }
                            }

                            namespace Abc
                            {
                                class SimpleBigDecimal
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt;
                                    /*0x18*/ int scale;

                                    /*0x29ee8a4*/ SimpleBigDecimal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt, int scale);
                                    /*0x29ee92c*/ void CheckScale(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x29ee998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal AdjustScale(int newScale);
                                    /*0x29eea6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x29eeb00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Negate();
                                    /*0x29eeb7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x29eeba4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                    /*0x29eec40*/ int CompareTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                                    /*0x29eec7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Floor();
                                    /*0x29eec9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Round();
                                    /*0x29eed58*/ int get_Scale();
                                    /*0x29eed60*/ string ToString();
                                    /*0x29ef03c*/ bool Equals(object obj);
                                    /*0x29ef0f4*/ int GetHashCode();
                                }

                                class Tnaf
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusOne;
                                    static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusTwo;
                                    static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusThree;
                                    static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Four;
                                    static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] Alpha0;
                                    static /*0x28*/ sbyte[][] Alpha0Tnaf;
                                    static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] Alpha1;
                                    static /*0x38*/ sbyte[][] Alpha1Tnaf;

                                    static /*0x29f08c0*/ Tnaf();
                                    static /*0x29ef124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Norm(sbyte mu, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda);
                                    static /*0x29ef23c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement Round(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal lambda0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal lambda1, sbyte mu);
                                    static /*0x29ef638*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal ApproximateDivisionByN(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger vm, sbyte a, int m, int c);
                                    static /*0x29ef7ac*/ sbyte GetMu(int curveA);
                                    static /*0x29ef7bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetLucas(sbyte mu, int k, bool doV);
                                    static /*0x29ef98c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GetTw(sbyte mu, int w);
                                    static /*0x29efb00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetSi(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve curve);
                                    static /*0x29efdd4*/ int GetShiftsForCofactor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h);
                                    static /*0x29efe68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement PartModReduction(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, int m, sbyte a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] s, sbyte mu, sbyte c);
                                    static /*0x29f0110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyFromTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte[] u);
                                    static /*0x29f0308*/ sbyte[] TauAdicWNaf(sbyte mu, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda, sbyte width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pow2w, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger tw, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] alpha);
                                    static /*0x29f06ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] GetPreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte a);
                                }

                                class ZTauElement
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger v;

                                    /*0x29ef5f4*/ ZTauElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger v);
                                }
                            }
                        }
                    }

                    namespace Crypto
                    {
                        class AesUtilities
                        {
                            static /*0x29f1024*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateEngine();
                        }

                        class AsymmetricCipherKeyPair
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter;

                            /*0x29f1078*/ AsymmetricCipherKeyPair(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter);
                            /*0x29f1164*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Public();
                            /*0x29f116c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Private();
                        }

                        class AsymmetricKeyParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                        {
                            /*0x10*/ bool privateKey;

                            /*0x29f1174*/ AsymmetricKeyParameter(bool privateKey);
                            /*0x29f119c*/ bool get_IsPrivate();
                            /*0x29f11a4*/ bool Equals(object obj);
                            /*0x29f1230*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter other);
                            /*0x29f1250*/ int GetHashCode();
                        }

                        class Check
                        {
                            static /*0x29f1288*/ void DataLength(byte[] buf, int off, int len, string msg);
                            static /*0x29f12f0*/ void OutputLength(byte[] buf, int off, int len, string msg);
                            static /*0x29f1358*/ void DataLength(System.ReadOnlySpan<byte> input, int len, string msg);
                            static /*0x29f13dc*/ void OutputLength(System.Span<byte> output, int len, string msg);
                        }

                        class CryptoException : System.Exception
                        {
                            /*0x29f1460*/ CryptoException();
                            /*0x29f14b8*/ CryptoException(string message);
                            /*0x29f1520*/ CryptoException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class CryptoServicesRegistrar
                        {
                            static /*0x29f15a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom GetSecureRandom();
                            static /*0x29f15f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom GetSecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom secureRandom);
                        }

                        class DataLengthException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x29f1650*/ DataLengthException();
                            /*0x29f12ec*/ DataLengthException(string message);
                            /*0x29f1654*/ DataLengthException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface IAsymmetricBlockCipher
                        {
                            /*0x1f30ac0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x1f2ffc8*/ int GetInputBlockSize();
                            /*0x1f2ffc8*/ int GetOutputBlockSize();
                            /*0x1f30348*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                        }

                        interface IBlockCipher
                        {
                            /*0x1f30ac0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x1f2ffc8*/ int GetBlockSize();
                            int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);
                            int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        }

                        interface ICipherParameters
                        {
                        }

                        interface IDigest
                        {
                            /*0x1f2ffc8*/ int GetDigestSize();
                            /*0x1f2ffc8*/ int GetByteLength();
                            /*0x1f30a84*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            int DoFinal(byte[] output, int outOff);
                            int DoFinal(System.Span<byte> output);
                            /*0x1f309e4*/ void Reset();
                        }

                        interface IDsa
                        {
                            /*0x1f30ac0*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                            bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                        }

                        interface IMac
                        {
                            /*0x1f30ebc*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x1f2ffc8*/ int GetMacSize();
                            /*0x1f30a84*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            int DoFinal(System.Span<byte> output);
                        }

                        class InvalidCipherTextException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x29f1658*/ InvalidCipherTextException();
                            /*0x29f165c*/ InvalidCipherTextException(string message);
                            /*0x29f1660*/ InvalidCipherTextException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface IRsa
                        {
                            /*0x1f30ac0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x1f2ffc8*/ int GetInputBlockSize();
                            /*0x1f2ffc8*/ int GetOutputBlockSize();
                            /*0x1f30348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ConvertInput(byte[] buf, int off, int len);
                            /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ProcessBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger input);
                            /*0x1f302cc*/ byte[] ConvertOutput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger result);
                        }

                        interface ISigner
                        {
                            /*0x1f30ac0*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x1f30a84*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            /*0x1f2fec8*/ bool VerifySignature(byte[] signature);
                        }

                        interface IXof : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                        {
                            int OutputFinal(byte[] output, int outOff, int outLen);
                        }

                        class KeyGenerationParameters
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                            /*0x18*/ int strength;

                            /*0x29f1664*/ KeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, int strength);
                            /*0x29f173c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_Random();
                            /*0x29f1744*/ int get_Strength();
                        }

                        class MaxBytesExceededException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x29f174c*/ MaxBytesExceededException();
                            /*0x29f1750*/ MaxBytesExceededException(string message);
                            /*0x29f1754*/ MaxBytesExceededException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class OutputLengthException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.DataLengthException
                        {
                            /*0x29f1758*/ OutputLengthException();
                            /*0x29f1354*/ OutputLengthException(string message);
                            /*0x29f175c*/ OutputLengthException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        namespace Utilities
                        {
                            class Pack
                            {
                                static /*0x29f1760*/ void UInt32_To_BE(uint n, byte[] bs, int off);
                                static /*0x29f1818*/ void UInt32_To_BE(uint[] ns, byte[] bs, int off);
                                static /*0x29f1890*/ uint BE_To_UInt32(byte[] bs, int off);
                                static /*0x29f195c*/ void BE_To_UInt32(byte[] bs, int off, uint[] ns);
                                static /*0x29f19d0*/ void BE_To_UInt32(byte[] bs, int bsOff, uint[] ns, int nsOff, int nsLen);
                                static /*0x29f1a58*/ void UInt64_To_BE(ulong n, byte[] bs, int off);
                                static /*0x29f1b10*/ void UInt64_To_BE(ulong[] ns, byte[] bs, int off);
                                static /*0x29f1b88*/ ulong BE_To_UInt64(byte[] bs, int off);
                                static /*0x29f1c54*/ void BE_To_UInt64(byte[] bs, int off, ulong[] ns);
                                static /*0x29f1ccc*/ void UInt32_To_LE(uint n, byte[] bs, int off);
                                static /*0x29f1d7c*/ void UInt32_To_LE(uint[] ns, byte[] bs, int off);
                                static /*0x29f1e84*/ uint LE_To_UInt32(byte[] bs, int off);
                                static /*0x29f1f4c*/ void LE_To_UInt32(byte[] bs, int off, uint[] ns);
                                static /*0x29ec73c*/ void LE_To_UInt32(byte[] bs, int bOff, uint[] ns, int nOff, int count);
                                static /*0x29f2068*/ uint[] LE_To_UInt32(byte[] bs, int off, int count);
                                static /*0x29f21c0*/ void UInt64_To_LE(ulong n, byte[] bs);
                                static /*0x29f2260*/ void UInt64_To_LE(ulong n, byte[] bs, int off);
                                static /*0x29f2310*/ void UInt64_To_LE(ulong[] ns, int nsOff, int nsLen, byte[] bs, int bsOff);
                                static /*0x29f2398*/ ulong LE_To_UInt64(byte[] bs, int off);
                                static /*0x29f2460*/ uint BE_To_UInt32(System.ReadOnlySpan<byte> bs);
                                static /*0x29f24c8*/ void BE_To_UInt32(System.ReadOnlySpan<byte> bs, System.Span<uint> ns);
                                static /*0x29f260c*/ ulong BE_To_UInt64(System.ReadOnlySpan<byte> bs);
                                static /*0x29f2674*/ uint LE_To_UInt32(System.ReadOnlySpan<byte> bs);
                                static /*0x29f26d8*/ void LE_To_UInt32(System.ReadOnlySpan<byte> bs, System.Span<uint> ns);
                                static /*0x29f2818*/ ulong LE_To_UInt64(System.ReadOnlySpan<byte> bs);
                                static /*0x29f287c*/ void LE_To_UInt64(System.ReadOnlySpan<byte> bs, System.Span<ulong> ns);
                                static /*0x29f29bc*/ void UInt32_To_BE(uint n, System.Span<byte> bs);
                                static /*0x29f2a2c*/ void UInt32_To_BE(System.ReadOnlySpan<uint> ns, System.Span<byte> bs);
                                static /*0x29f2b70*/ void UInt32_To_LE(uint n, System.Span<byte> bs);
                                static /*0x29f2bd4*/ void UInt32_To_LE(System.ReadOnlySpan<uint> ns, System.Span<byte> bs);
                                static /*0x29f2d10*/ void UInt64_To_BE(ulong n, System.Span<byte> bs);
                                static /*0x29f2d80*/ void UInt64_To_BE(System.ReadOnlySpan<ulong> ns, System.Span<byte> bs);
                                static /*0x29f2ec4*/ void UInt64_To_LE(ulong n, System.Span<byte> bs);
                                static /*0x29f2f28*/ void UInt64_To_LE(System.ReadOnlySpan<ulong> ns, System.Span<byte> bs);
                            }
                        }

                        namespace Signers
                        {
                            class DsaDigestSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding encoding;
                                /*0x28*/ bool forSigning;

                                /*0x29f3064*/ DsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x29f30dc*/ DsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding encoding);
                                /*0x29f313c*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f3358*/ void Update(byte input);
                                /*0x29f3404*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x29f34c8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x29f3584*/ bool VerifySignature(byte[] signature);
                                /*0x29f38ec*/ void Reset();
                                /*0x29f3990*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GetOrder();
                            }

                            class DsaSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator kCalculator;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                /*0x29f3a34*/ DsaSigner();
                                /*0x29f3aa8*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f3d50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x29f3d74*/ bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x29f3fac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateE(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] message);
                                /*0x29f4088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom InitSecureRandom(bool needed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom provided);
                            }

                            class ECDsaSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Eight;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator kCalculator;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                static /*0x29f48cc*/ ECDsaSigner();
                                /*0x29f409c*/ ECDsaSigner();
                                /*0x29f4108*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f43b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x29f43d4*/ bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x29f4770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateE(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] message);
                                /*0x29f4830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetDenominator(int coordinateSystem, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x29f48b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom InitSecureRandom(bool needed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom provided);
                            }

                            class Ed25519Signer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.Ed25519Signer.Buffer buffer;
                                /*0x18*/ bool forSigning;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters privateKey;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters publicKey;

                                /*0x29f4950*/ Ed25519Signer();
                                /*0x29f49c4*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f4ae0*/ void Update(byte b);
                                /*0x29f4b00*/ void BlockUpdate(byte[] buf, int off, int len);
                                /*0x29f4b20*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x29f4b40*/ bool VerifySignature(byte[] signature);
                                /*0x29f4dc4*/ void Reset();

                                class Buffer : System.IO.MemoryStream
                                {
                                    /*0x29f49bc*/ Buffer();
                                    /*0x29f4bb4*/ bool VerifySignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters publicKey, byte[] signature);
                                    /*0x29f4dd8*/ void Reset();
                                }
                            }

                            class Ed448Signer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.Ed448Signer.Buffer buffer;
                                /*0x18*/ byte[] context;
                                /*0x20*/ bool forSigning;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters privateKey;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters publicKey;

                                /*0x29f4f94*/ Ed448Signer(byte[] context);
                                /*0x29f5054*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f5170*/ void Update(byte b);
                                /*0x29f5190*/ void BlockUpdate(byte[] buf, int off, int len);
                                /*0x29f51b0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x29f51d0*/ bool VerifySignature(byte[] signature);
                                /*0x29f5464*/ void Reset();

                                class Buffer : System.IO.MemoryStream
                                {
                                    /*0x29f504c*/ Buffer();
                                    /*0x29f524c*/ bool VerifySignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters publicKey, byte[] ctx, byte[] signature);
                                    /*0x29f5478*/ void Reset();
                                }
                            }

                            class GenericSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x20*/ bool forSigning;

                                /*0x29f5634*/ GenericSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x29f5678*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f5894*/ void Update(byte input);
                                /*0x29f5940*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x29f5a04*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x29f5ac0*/ bool VerifySignature(byte[] signature);
                                /*0x29f5e18*/ void Reset();
                            }

                            interface IDsaEncoding
                            {
                                /*0x1f30394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] Decode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] encoding);
                            }

                            interface IDsaKCalculator
                            {
                                /*0x1f2fe14*/ bool get_IsDeterministic();
                            }

                            class PssSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest1;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest2;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                                /*0x38*/ int hLen;
                                /*0x3c*/ int mgfhLen;
                                /*0x40*/ int sLen;
                                /*0x44*/ bool sSet;
                                /*0x48*/ int emBits;
                                /*0x50*/ byte[] salt;
                                /*0x58*/ byte[] mDash;
                                /*0x60*/ byte[] block;
                                /*0x68*/ byte trailer;

                                static /*0x29f5ebc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.PssSigner CreateRawSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte trailer);
                                /*0x29f6180*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, int saltLen);
                                /*0x29f61ac*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, int saltLen, byte trailer);
                                /*0x29f61d8*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte trailer);
                                /*0x29f5f84*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest2, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte[] salt, byte trailer);
                                /*0x29f6204*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f6468*/ void ClearBlock(byte[] block);
                                /*0x29f6488*/ void Update(byte input);
                                /*0x29f6534*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x29f65f8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x29f66b4*/ bool VerifySignature(byte[] signature);
                                /*0x29f6e40*/ void ItoOSP(int i, byte[] sp);
                                /*0x29f6c40*/ byte[] MaskGeneratorFunction(byte[] Z, int zOff, int zLen, int length);
                                /*0x29f6e94*/ byte[] MaskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length);
                            }

                            class RandomDsaKCalculator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator
                            {
                                /*0x29f3aa0*/ RandomDsaKCalculator();
                                /*0x29f7304*/ bool get_IsDeterministic();
                            }

                            class RsaDigestSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                static /*0x0*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> OidMap;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher rsaEngine;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x28*/ bool forSigning;

                                static /*0x29f730c*/ RsaDigestSigner();
                                /*0x29f7ed0*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestOid);
                                /*0x29f7f78*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x29f7fec*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x29f8070*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher rsaEngine, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x29f811c*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29f8338*/ void Update(byte input);
                                /*0x29f83e4*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x29f84a8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x29f8564*/ bool VerifySignature(byte[] signature);
                                /*0x29f8a24*/ void Reset();
                                /*0x29f899c*/ byte[] DerEncode(byte[] hash);
                            }

                            class StandardDsaEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding Instance;

                                static /*0x29f8fb4*/ StandardDsaEncoding();
                                /*0x29f8fac*/ StandardDsaEncoding();
                                /*0x29f8ac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] Decode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] encoding);
                                /*0x29f8ce4*/ byte[] Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x29f8dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CheckValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x29f8e5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DecodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence s, int pos);
                                /*0x29f8f20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger EncodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            }
                        }

                        namespace Prng
                        {
                            class CryptoApiRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator, System.IDisposable
                            {
                                /*0x10*/ System.Security.Cryptography.RandomNumberGenerator m_randomNumberGenerator;

                                /*0x29f901c*/ CryptoApiRandomGenerator();
                                /*0x29f903c*/ CryptoApiRandomGenerator(System.Security.Cryptography.RandomNumberGenerator randomNumberGenerator);
                                /*0x29f90c0*/ void AddSeedMaterial(System.ReadOnlySpan<byte> inSeed);
                                /*0x29f90c4*/ void AddSeedMaterial(long seed);
                                /*0x29f90c8*/ void NextBytes(byte[] bytes);
                                /*0x29f90e4*/ void NextBytes(System.Span<byte> bytes);
                                /*0x29f9100*/ void Dispose();
                            }

                            class DigestRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator
                            {
                                /*0x10*/ long stateCounter;
                                /*0x18*/ long seedCounter;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x28*/ byte[] state;
                                /*0x30*/ byte[] seed;

                                /*0x29f9118*/ DigestRandomGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x29f92a0*/ void AddSeedMaterial(System.ReadOnlySpan<byte> inSeed);
                                /*0x29f95a0*/ void AddSeedMaterial(long rSeed);
                                /*0x29f9904*/ void NextBytes(byte[] bytes);
                                /*0x29f991c*/ void NextBytes(byte[] bytes, int start, int len);
                                /*0x29f99c0*/ void NextBytes(System.Span<byte> bytes);
                                /*0x29f9c3c*/ void CycleSeed();
                                /*0x29f9b28*/ void GenerateState();
                                /*0x29f9700*/ void DigestAddCounter(long seedVal);
                                /*0x29f9428*/ void DigestUpdate(System.ReadOnlySpan<byte> inSeed);
                                /*0x29f94e4*/ void DigestDoFinal(System.Span<byte> result);
                            }

                            interface IRandomGenerator
                            {
                                void AddSeedMaterial(System.ReadOnlySpan<byte> seed);
                                /*0x1f30d60*/ void AddSeedMaterial(long seed);
                                /*0x1f30ebc*/ void NextBytes(byte[] bytes);
                                void NextBytes(System.Span<byte> bytes);
                            }

                            class VmpcRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator
                            {
                                /*0x10*/ byte[] P;
                                /*0x18*/ byte s;
                                /*0x19*/ byte n;

                                /*0x29f9cf0*/ VmpcRandomGenerator();
                                /*0x29f9d88*/ void AddSeedMaterial(System.ReadOnlySpan<byte> seed);
                                /*0x29f9e70*/ void AddSeedMaterial(long seed);
                                /*0x29f9ff8*/ void NextBytes(byte[] bytes);
                                /*0x29fa010*/ void NextBytes(byte[] bytes, int start, int len);
                                /*0x29fa0b4*/ void NextBytes(System.Span<byte> bytes);
                            }
                        }

                        namespace Parameters
                        {
                            class AeadParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ byte[] associatedText;
                                /*0x18*/ byte[] nonce;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;
                                /*0x28*/ int macSize;

                                /*0x29fa2bc*/ AeadParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key, int macSize, byte[] nonce, byte[] associatedText);
                                /*0x29fa324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter get_Key();
                                /*0x29fa32c*/ int get_MacSize();
                                /*0x29fa334*/ byte[] GetAssociatedText();
                                /*0x29fa33c*/ byte[] GetNonce();
                            }

                            class Blake3Parameters
                            {
                                /*0x10*/ byte[] m_theKey;
                                /*0x18*/ byte[] m_theContext;

                                /*0x29fa344*/ byte[] GetKey();
                                /*0x29fa3a0*/ byte[] GetContext();
                            }

                            class DHKeyGenerationParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters;

                                static /*0x29fa440*/ int GetStrength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x29fa3fc*/ DHKeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x29fa474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters get_Parameters();
                            }

                            class DHKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid;

                                /*0x29fa47c*/ DHKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x29fa4f4*/ DHKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid);
                                /*0x29fa548*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters get_Parameters();
                                /*0x29fa550*/ bool Equals(object obj);
                                /*0x29fa5ec*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters other);
                                /*0x29fa63c*/ int GetHashCode();
                            }

                            class DHParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j;
                                /*0x30*/ int m;
                                /*0x34*/ int l;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation;

                                static /*0x29fa674*/ int GetDefaultMParam(int lParam);
                                /*0x29fa6e4*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, int l);
                                /*0x29faaf4*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation);
                                /*0x29fa748*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, int m, int l, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation);
                                /*0x29fab1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x29fab24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x29fab2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x29fab34*/ int get_M();
                                /*0x29fab3c*/ int get_L();
                                /*0x29fab44*/ bool Equals(object obj);
                                /*0x29fabe8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters other);
                                /*0x29fac58*/ int GetHashCode();
                            }

                            class DHPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;

                                /*0x29facc8*/ DHPrivateKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x29facf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_X();
                                /*0x29fad00*/ bool Equals(object obj);
                                /*0x29fad9c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters other);
                                /*0x29fadf0*/ int GetHashCode();
                            }

                            class DHPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                static /*0x29fae30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams);
                                static /*0x29fb074*/ int Legendre(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                /*0x29fb264*/ DHPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x29fb2a4*/ DHPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid);
                                /*0x29fb2e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Y();
                                /*0x29fb2ec*/ bool Equals(object obj);
                                /*0x29fb388*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters other);
                                /*0x29fb3dc*/ int GetHashCode();
                            }

                            class DHValidationParameters
                            {
                                /*0x10*/ byte[] seed;
                                /*0x18*/ int counter;

                                /*0x29fb41c*/ DHValidationParameters(byte[] seed, int counter);
                                /*0x29fb53c*/ bool Equals(object obj);
                                /*0x29fb5d8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters other);
                                /*0x29fb668*/ int GetHashCode();
                            }

                            class DsaKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters;

                                /*0x29fb6f0*/ DsaKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x29fb728*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters get_Parameters();
                                /*0x29fb730*/ bool Equals(object obj);
                                /*0x29fb7cc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters other);
                                /*0x29fb81c*/ int GetHashCode();
                            }

                            class DsaParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters validation;

                                /*0x29fb854*/ DsaParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x29fb85c*/ DsaParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters parameters);
                                /*0x29fb964*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x29fb96c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x29fb974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x29fb97c*/ bool Equals(object obj);
                                /*0x29fba18*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters other);
                                /*0x29fba8c*/ int GetHashCode();
                            }

                            class DsaPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters
                            {
                            }

                            class DsaPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                static /*0x29fbafc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x29fbc5c*/ DsaPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x29fbcfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Y();
                                /*0x29fbd04*/ bool Equals(object obj);
                                /*0x29fbda0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters other);
                                /*0x29fbdf4*/ int GetHashCode();
                            }

                            class DsaValidationParameters
                            {
                            }

                            class ECDomainParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x18*/ byte[] seed;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger hInv;

                                static /*0x29fbff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ValidatePublicPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q);
                                /*0x29fbe34*/ ECDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters x9);
                                /*0x29fbe7c*/ ECDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x29fc118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x29fc120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_G();
                                /*0x29fc128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                                /*0x29fc130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_H();
                                /*0x29fc138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_HInv();
                                /*0x29fc26c*/ byte[] GetSeed();
                                /*0x29fc2c8*/ bool Equals(object obj);
                                /*0x29fc36c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters other);
                                /*0x29fc3f0*/ int GetHashCode();
                                /*0x29fc470*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePrivateScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d);
                            }

                            class ECGost3410Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters
                            {
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _publicKeyParamSet;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _digestParamSet;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _encryptionParamSet;

                                /*0x29fc5a0*/ ECGost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters dp, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestParamSet, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier encryptionParamSet);
                            }

                            class ECKeyGenerationParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domainParams;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                /*0x29fc694*/ ECKeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domainParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x29fc6e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters get_DomainParameters();
                                /*0x29fc6f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_PublicKeyParamSet();
                            }

                            class ECKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, string> Algorithms;
                                /*0x18*/ string algorithm;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                static /*0x29fcc70*/ ECKeyParameters();
                                static /*0x29fc804*/ string VerifyAlgorithmName(string algorithm);
                                static /*0x29fca2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters LookupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x29fc6f8*/ ECKeyParameters(string algorithm, bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x29fc908*/ ECKeyParameters(string algorithm, bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x29fcb2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters get_Parameters();
                                /*0x29fcb34*/ bool Equals(object obj);
                                /*0x29fcbd8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters other);
                                /*0x29fcc30*/ int GetHashCode();
                            }

                            class ECNamedDomainParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters
                            {
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name;

                                /*0x29fce90*/ ECNamedDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters x9);
                                /*0x29fc654*/ ECNamedDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x29fce88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Name();
                            }

                            class ECPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters
                            {
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d;

                                /*0x29fcec0*/ ECPrivateKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x29fcf60*/ ECPrivateKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x29fd000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_D();
                                /*0x29fd008*/ bool Equals(object obj);
                                /*0x29fd0a4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters other);
                                /*0x29fd0f8*/ int GetHashCode();
                            }

                            class ECPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters
                            {
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q;

                                /*0x29fd138*/ ECPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x29fd198*/ ECPublicKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x29fd23c*/ ECPublicKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x29fd2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Q();
                                /*0x29fd2e8*/ bool Equals(object obj);
                                /*0x29fd384*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters other);
                                /*0x29fd3e0*/ int GetHashCode();
                            }

                            class Ed25519PrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                static /*0x4*/ int SignatureSize;

                                static /*0x29fd420*/ Ed25519PrivateKeyParameters();
                            }

                            class Ed25519PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x29fd6ec*/ Ed25519PublicKeyParameters();
                                static /*0x29fd508*/ byte[] Validate(byte[] buf);
                                /*0x29fd498*/ Ed25519PublicKeyParameters(byte[] buf);
                                /*0x29fd620*/ Ed25519PublicKeyParameters(byte[] buf, int off);
                                /*0x29f4f38*/ byte[] GetEncoded();
                            }

                            class Ed448PrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                static /*0x4*/ int SignatureSize;

                                static /*0x29fd764*/ Ed448PrivateKeyParameters();
                            }

                            class Ed448PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x29fda30*/ Ed448PublicKeyParameters();
                                static /*0x29fd84c*/ byte[] Validate(byte[] buf);
                                /*0x29fd7dc*/ Ed448PublicKeyParameters(byte[] buf);
                                /*0x29fd964*/ Ed448PublicKeyParameters(byte[] buf, int off);
                                /*0x29f55d8*/ byte[] GetEncoded();
                            }

                            class ElGamalKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters;

                                /*0x29fdaa8*/ ElGamalKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters);
                                /*0x29fdae0*/ bool Equals(object obj);
                                /*0x29fdb7c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters other);
                                /*0x29fdbcc*/ int GetHashCode();
                            }

                            class ElGamalParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x20*/ int l;

                                /*0x29fdc04*/ ElGamalParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x29fdc0c*/ ElGamalParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int l);
                                /*0x29fdcd4*/ bool Equals(object obj);
                                /*0x29fdd70*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters other);
                                /*0x29fdddc*/ int GetHashCode();
                            }

                            class ElGamalPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                /*0x29fde34*/ ElGamalPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters);
                                /*0x29fdec8*/ bool Equals(object obj);
                                /*0x29fdf64*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters other);
                                /*0x29fdfb8*/ int GetHashCode();
                            }

                            class Gost3410KeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                static /*0x29fe048*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters LookupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x29fdff8*/ Gost3410KeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x29fe1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters get_Parameters();
                            }

                            class Gost3410Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters validation;

                                /*0x29fe1b8*/ Gost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a);
                                /*0x29fe1c0*/ Gost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters validation);
                                /*0x29fe2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x29fe2d0*/ bool Equals(object obj);
                                /*0x29fe36c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters other);
                                /*0x29fe3e0*/ int GetHashCode();
                            }

                            class Gost3410PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                /*0x29fe450*/ Gost3410PublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                            }

                            class Gost3410ValidationParameters
                            {
                            }

                            class KeyParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ byte[] m_key;

                                /*0x29fe50c*/ KeyParameter(byte[] key);
                                /*0x29fe60c*/ KeyParameter(byte[] key, int keyOff, int keyLen);
                                /*0x29fe75c*/ KeyParameter(System.ReadOnlySpan<byte> key);
                                /*0x29fe7d0*/ byte[] GetKey();
                            }

                            class ParametersWithIV : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters m_parameters;
                                /*0x18*/ byte[] m_iv;

                                /*0x29fe848*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] iv);
                                /*0x29fe860*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] iv, int ivOff, int ivLen);
                                /*0x29fe90c*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, System.ReadOnlySpan<byte> iv);
                                /*0x29fe99c*/ byte[] GetIV();
                                /*0x29fea14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                            }

                            class ParametersWithRandom : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters m_parameters;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom m_random;

                                /*0x29fea1c*/ ParametersWithRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x29fead0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                                /*0x29fead8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_Random();
                            }

                            class ParametersWithSBox : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters;
                                /*0x18*/ byte[] sBox;

                                /*0x29feae0*/ ParametersWithSBox(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] sBox);
                                /*0x29feb24*/ byte[] GetSBox();
                                /*0x29feb2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                            }

                            class RsaBlindingParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey;

                                /*0x29feb34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters get_PublicKey();
                            }

                            class RsaKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SmallPrimesProduct;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger exponent;

                                static /*0x29ff0d0*/ RsaKeyParameters();
                                static /*0x29feb3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus);
                                static /*0x29fed0c*/ int AsInteger(string envVariable, int defaultValue);
                                /*0x29fed90*/ RsaKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger exponent);
                                /*0x29fef60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Modulus();
                                /*0x29fef68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Exponent();
                                /*0x29fef70*/ bool Equals(object obj);
                                /*0x29ff040*/ int GetHashCode();
                            }

                            class RsaPrivateCrtKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger dP;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger dQ;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger qInv;

                                /*0x29ff170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PublicExponent();
                                /*0x29ff178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x29ff180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x29ff188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_DP();
                                /*0x29ff190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_DQ();
                                /*0x29ff198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_QInv();
                            }

                            class Srp6GroupParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;

                                /*0x29ff1a0*/ Srp6GroupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x29ff1e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x29ff1ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            }

                            class X25519PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x29ff448*/ X25519PublicKeyParameters();
                                static /*0x29ff264*/ byte[] Validate(byte[] buf);
                                /*0x29ff1f4*/ X25519PublicKeyParameters(byte[] buf);
                                /*0x29ff37c*/ X25519PublicKeyParameters(byte[] buf, int off);
                            }

                            class X448PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x29ff6e8*/ X448PublicKeyParameters();
                                static /*0x29ff504*/ byte[] Validate(byte[] buf);
                                /*0x29ff494*/ X448PublicKeyParameters(byte[] buf);
                                /*0x29ff61c*/ X448PublicKeyParameters(byte[] buf, int off);
                            }
                        }

                        namespace Paddings
                        {
                            interface IBlockCipherPadding
                            {
                                int AddPadding(byte[] input, int inOff);
                            }
                        }

                        namespace Modes
                        {
                            class CbcBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x10*/ byte[] IV;
                                /*0x18*/ byte[] cbcV;
                                /*0x20*/ byte[] cbcNextV;
                                /*0x28*/ int blockSize;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x38*/ bool encrypting;

                                /*0x29ff734*/ CbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x29ff860*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x29ffa8c*/ int GetBlockSize();
                                /*0x29ffb30*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a00124*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x29ffa44*/ void Reset();
                                /*0x29ffe9c*/ int EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x29ffc10*/ int DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class CcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                            {
                                static /*0x0*/ int BlockSize;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ byte[] macBlock;
                                /*0x20*/ bool forEncryption;
                                /*0x28*/ byte[] nonce;
                                /*0x30*/ byte[] initialAssociatedText;
                                /*0x38*/ int macSize;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters keyParam;
                                /*0x48*/ System.IO.MemoryStream associatedText;
                                /*0x50*/ System.IO.MemoryStream data;

                                static /*0x2a024b0*/ CcmBlockCipher();
                                /*0x2a00134*/ CcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x2a0037c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a005fc*/ int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff);
                                /*0x2a00698*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a006c4*/ int DoFinal(byte[] outBytes, int outOff);
                                /*0x2a00744*/ int DoFinal(System.Span<byte> output);
                                /*0x2a008b4*/ void Reset();
                                /*0x2a008fc*/ int GetOutputSize(int len);
                                /*0x2a0099c*/ int ProcessPacket(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a01b40*/ int CalculateMac(System.ReadOnlySpan<byte> data, System.Span<byte> macBlock);
                                /*0x2a00590*/ int GetMacSize(bool forEncryption, int requestedMacBits);
                                /*0x2a02424*/ int GetAssociatedTextLength();
                                /*0x2a0240c*/ bool HasAssociatedText();
                            }

                            class GcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                            {
                                /*0x10*/ byte[] ctrBlock;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier multiplier;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator exp;
                                /*0x30*/ bool forEncryption;
                                /*0x31*/ bool initialised;
                                /*0x34*/ int macSize;
                                /*0x38*/ byte[] lastKey;
                                /*0x40*/ byte[] nonce;
                                /*0x48*/ byte[] initialAssociatedText;
                                /*0x50*/ byte[] H;
                                /*0x58*/ byte[] J0;
                                /*0x60*/ byte[] bufBlock;
                                /*0x68*/ byte[] macBlock;
                                /*0x70*/ byte[] S;
                                /*0x78*/ byte[] S_at;
                                /*0x80*/ byte[] S_atPre;
                                /*0x88*/ byte[] counter;
                                /*0x90*/ uint counter32;
                                /*0x94*/ uint blocksRemaining;
                                /*0x98*/ int bufOff;
                                /*0xa0*/ ulong totalLength;
                                /*0xa8*/ byte[] atBlock;
                                /*0xb0*/ int atBlockPos;
                                /*0xb8*/ ulong atLength;
                                /*0xc0*/ ulong atLengthPre;

                                static /*0x2a024fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier CreateGcmMultiplier();
                                /*0x2a02550*/ GcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c);
                                /*0x2a02558*/ GcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier m);
                                /*0x2a02708*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a03024*/ int GetOutputSize(int len);
                                /*0x2a02f54*/ void ProcessAadBytes(byte[] inBytes, int inOff, int len);
                                /*0x2a0304c*/ void ProcessAadBytes(System.ReadOnlySpan<byte> input);
                                /*0x2a033e0*/ void InitCipher();
                                /*0x2a03554*/ int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff);
                                /*0x2a036c4*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a054b0*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a05524*/ int DoFinal(System.Span<byte> output);
                                /*0x2a06380*/ void Reset();
                                /*0x2a061e4*/ void Reset(bool clearMac);
                                /*0x2a04a60*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a04df0*/ void DecryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a04034*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a043c4*/ void EncryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a06388*/ void GetNextCtrBlock(System.Span<byte> block);
                                /*0x2a05f9c*/ void ProcessPartial(System.Span<byte> partialBlock, System.Span<byte> output);
                                /*0x2a02ea0*/ void gHASH(byte[] Y, byte[] b, int len);
                                /*0x2a064e0*/ void gHASHBlock(byte[] Y, System.ReadOnlySpan<byte> b);
                                /*0x2a065d4*/ void gHASHPartial(byte[] Y, System.ReadOnlySpan<byte> b);
                                /*0x2a03474*/ void gHASHPartial(byte[] Y, byte[] b, int off, int len);
                                /*0x2a03368*/ void CheckStatus();
                            }

                            interface IAeadCipher
                            {
                                /*0x1f30ac0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff);
                                int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                int DoFinal(byte[] outBytes, int outOff);
                                int GetOutputSize(int len);
                                /*0x1f309e4*/ void Reset();
                            }

                            interface IBlockCipherMode : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x1f309e4*/ void Reset();
                            }

                            class SicBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ int blockSize;
                                /*0x20*/ byte[] counter;
                                /*0x28*/ byte[] counterOut;
                                /*0x30*/ byte[] IV;

                                /*0x2a06e88*/ SicBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x2a06fb4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a07294*/ int GetBlockSize();
                                /*0x2a07338*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a074fc*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a07684*/ void Reset();
                            }

                            namespace Gcm
                            {
                                class BasicGcmExponentiator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x;

                                    /*0x2a07a38*/ BasicGcmExponentiator();
                                    /*0x2a07708*/ void Init(byte[] x);
                                    /*0x2a0774c*/ void ExponentiateX(long pow, byte[] output);
                                }

                                class GcmUtilities
                                {
                                    static /*0x2a077ec*/ void One(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x2a07a40*/ void AsBytes(ulong x0, ulong x1, byte[] z);
                                    static /*0x2a07a7c*/ void AsBytes(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, byte[] z);
                                    static /*0x2a07ab8*/ void AsFieldElement(byte[] x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x2a07af8*/ void DivideP(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x2a07b18*/ void Multiply(byte[] x, byte[] y);
                                    static /*0x2a077fc*/ void Multiply(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y);
                                    static /*0x2a07c70*/ void MultiplyP7(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x2a07c94*/ void MultiplyP8(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y);
                                    static /*0x2a079b0*/ void Square(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x2a07cb8*/ void Xor(byte[] x, byte[] y);
                                    static /*0x2a07da8*/ void Xor(byte[] x, byte[] y, int yOff, int yLen);
                                    static /*0x2a07e14*/ void Xor(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x2a07e28*/ void Xor(System.Span<byte> x, System.ReadOnlySpan<byte> y);
                                    static /*0x2a07f00*/ void Xor(System.Span<byte> x, System.ReadOnlySpan<byte> y, int len);
                                    static /*0x2a07bc0*/ ulong ImplMul64(ulong x, ulong y);

                                    struct FieldElement
                                    {
                                        /*0x10*/ ulong n0;
                                        /*0x18*/ ulong n1;
                                    }
                                }

                                interface IGcmExponentiator
                                {
                                    /*0x1f30ebc*/ void Init(byte[] x);
                                    void ExponentiateX(long pow, byte[] output);
                                }

                                interface IGcmMultiplier
                                {
                                    /*0x1f30ebc*/ void Init(byte[] H);
                                    /*0x1f30ebc*/ void MultiplyH(byte[] x);
                                }

                                class Tables4kGcmMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier
                                {
                                    /*0x10*/ byte[] H;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement[] T;

                                    /*0x2a081e4*/ Tables4kGcmMultiplier();
                                    /*0x2a07f4c*/ void Init(byte[] H);
                                    /*0x2a08124*/ void MultiplyH(byte[] x);
                                }
                            }
                        }

                        namespace Macs
                        {
                            class CbcBlockCipherMac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int bufOff;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode m_cipherMode;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding padding;
                                /*0x30*/ int macSize;

                                /*0x2a081ec*/ CbcBlockCipherMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, int macSizeInBits);
                                /*0x2a081f4*/ CbcBlockCipherMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, int macSizeInBits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding padding);
                                /*0x2a08398*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a08508*/ int GetMacSize();
                                /*0x2a08510*/ void Update(byte input);
                                /*0x2a08624*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x2a08740*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a08b64*/ int DoFinal(System.Span<byte> output);
                                /*0x2a0844c*/ void Reset();
                            }

                            class HMac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x18*/ int digestSize;
                                /*0x1c*/ int blockLength;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable ipadState;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable opadState;
                                /*0x30*/ byte[] inputPad;
                                /*0x38*/ byte[] outputBuf;

                                static /*0x2a095e4*/ void XorPad(byte[] pad, int len, byte n);
                                /*0x2a08f08*/ HMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x2a09080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest GetUnderlyingDigest();
                                /*0x2a09088*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a09634*/ int GetMacSize();
                                /*0x2a0963c*/ void Update(byte input);
                                /*0x2a096e8*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x2a097ac*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a09868*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a098e8*/ int DoFinal(System.Span<byte> output);
                                /*0x2a09dd4*/ void Reset();
                            }

                            class Poly1305 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ uint r0;
                                /*0x1c*/ uint r1;
                                /*0x20*/ uint r2;
                                /*0x24*/ uint r3;
                                /*0x28*/ uint r4;
                                /*0x2c*/ uint s1;
                                /*0x30*/ uint s2;
                                /*0x34*/ uint s3;
                                /*0x38*/ uint s4;
                                /*0x3c*/ uint k0;
                                /*0x40*/ uint k1;
                                /*0x44*/ uint k2;
                                /*0x48*/ uint k3;
                                /*0x50*/ byte[] currentBlock;
                                /*0x58*/ int currentBlockOffset;
                                /*0x5c*/ uint h0;
                                /*0x60*/ uint h1;
                                /*0x64*/ uint h2;
                                /*0x68*/ uint h3;
                                /*0x6c*/ uint h4;

                                /*0x2a09fcc*/ Poly1305();
                                /*0x2a0a040*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a0a1d4*/ void SetKey(byte[] key, byte[] nonce);
                                /*0x2a0a8b4*/ int GetMacSize();
                                /*0x2a0a8bc*/ void Update(byte input);
                                /*0x2a0ace4*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x2a0ade0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a0a964*/ void ProcessBlock(System.ReadOnlySpan<byte> block);
                                /*0x2a0b0c4*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a0b140*/ int DoFinal(System.Span<byte> output);
                                /*0x2a0a8a8*/ void Reset();
                            }
                        }

                        namespace IO
                        {
                            class SignerSink : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner m_signer;

                                /*0x2a0b560*/ SignerSink(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner signer);
                                /*0x2a0b590*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner get_Signer();
                                /*0x2a0b598*/ void Write(byte[] buffer, int offset, int count);
                                /*0x2a0b688*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x2a0b76c*/ void WriteByte(byte value);
                            }
                        }

                        namespace Generators
                        {
                            class DHBasicKeyPairGenerator
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters param;

                                /*0x2a0bc14*/ DHBasicKeyPairGenerator();
                                /*0x2a0b818*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters parameters);
                                /*0x2a0b8c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                            }

                            class DHKeyGeneratorHelper
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Generators.DHKeyGeneratorHelper Instance;

                                static /*0x2a0bc24*/ DHKeyGeneratorHelper();
                                /*0x2a0bc1c*/ DHKeyGeneratorHelper();
                                /*0x2a0ba00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculatePrivate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x2a0bbe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculatePublic(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            }

                            class ECKeyPairGenerator
                            {
                                /*0x10*/ string algorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                static /*0x2a0c438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters FindECCurveByName(string name);
                                static /*0x2a0c0a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters FindECCurveByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x2a0bc8c*/ ECKeyPairGenerator();
                                /*0x2a0bcd4*/ ECKeyPairGenerator(string algorithm);
                                /*0x2a0bd98*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters parameters);
                                /*0x2a0c118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                /*0x2a0c3e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateBasePointMultiplier();
                            }
                        }

                        namespace Engines
                        {
                            class AesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] S;
                                static /*0x8*/ byte[] Si;
                                static /*0x10*/ byte[] rcon;
                                static /*0x18*/ uint[] T0;
                                static /*0x20*/ uint[] Tinv0;
                                /*0x10*/ int ROUNDS;
                                /*0x18*/ uint[][] WorkingKey;
                                /*0x20*/ bool forEncryption;
                                /*0x28*/ byte[] s;

                                static /*0x2a0f898*/ AesEngine();
                                static /*0x2a0c4ac*/ uint Shift(uint r, int shift);
                                static /*0x2a0c4b4*/ uint FFmulX(uint x);
                                static /*0x2a0c4d4*/ uint FFmulX2(uint x);
                                static /*0x2a0c4f0*/ uint Inv_Mcol(uint x);
                                static /*0x2a0c588*/ uint SubWord(uint x);
                                /*0x2a0d98c*/ AesEngine();
                                /*0x2a0c64c*/ uint[][] GenerateWorkingKey(byte[] key, bool forEncryption);
                                /*0x2a0d994*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a0db50*/ int GetBlockSize();
                                /*0x2a0db58*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a0f774*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a0dcdc*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                                /*0x2a0ea34*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                            }

                            class AriaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[][] C;
                                static /*0x8*/ byte[] SB1_sbox;
                                static /*0x10*/ byte[] SB2_sbox;
                                static /*0x18*/ byte[] SB3_sbox;
                                static /*0x20*/ byte[] SB4_sbox;
                                /*0x10*/ byte[][] m_roundKeys;

                                static /*0x2a114ec*/ AriaEngine();
                                static /*0x2a10c50*/ void A(byte[] z);
                                static /*0x2a10584*/ void FE(byte[] D, byte[] RK);
                                static /*0x2a10510*/ void FO(byte[] D, byte[] RK);
                                static /*0x2a0fbb0*/ byte[][] KeySchedule(bool forEncryption, byte[] K);
                                static /*0x2a11124*/ byte[] KeyScheduleRound(byte[] w, byte[] wr, int n);
                                static /*0x2a11238*/ void ReverseKeys(byte[][] keys);
                                static /*0x2a112f4*/ byte SB1(byte x);
                                static /*0x2a11370*/ byte SB2(byte x);
                                static /*0x2a113ec*/ byte SB3(byte x);
                                static /*0x2a11468*/ byte SB4(byte x);
                                static /*0x2a10ec8*/ void SL1(byte[] z);
                                static /*0x2a10654*/ void SL2(byte[] z);
                                static /*0x2a105f8*/ void Xor(byte[] z, byte[] x);
                                /*0x2a114e4*/ AriaEngine();
                                /*0x2a0fa6c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a10264*/ int GetBlockSize();
                                /*0x2a1026c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a108b0*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class CamelliaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ uint[] SIGMA;
                                static /*0x8*/ uint[] SBOX1_1110;
                                static /*0x10*/ uint[] SBOX4_4404;
                                static /*0x18*/ uint[] SBOX2_0222;
                                static /*0x20*/ uint[] SBOX3_3033;
                                /*0x10*/ bool initialised;
                                /*0x11*/ bool _keyIs128;
                                /*0x18*/ uint[] subkey;
                                /*0x20*/ uint[] kw;
                                /*0x28*/ uint[] ke;

                                static /*0x2a13c74*/ CamelliaEngine();
                                static /*0x2a11784*/ uint rightRotate(uint x, int s);
                                static /*0x2a11798*/ uint leftRotate(uint x, int s);
                                static /*0x2a117ac*/ void roldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x2a118d0*/ void decroldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x2a119f4*/ void roldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x2a11b18*/ void decroldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x2a11c3c*/ void camelliaF2(uint[] s, uint[] skey, int keyoff);
                                static /*0x2a11f24*/ void camelliaFLs(uint[] s, uint[] fkey, int keyoff);
                                /*0x2a13830*/ CamelliaEngine();
                                /*0x2a12058*/ void setKey(bool forEncryption, byte[] key);
                                /*0x2a12dd8*/ int ProcessBlock128(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a132e4*/ int ProcessBlock192or256(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a138cc*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a139b8*/ int GetBlockSize();
                                /*0x2a139c0*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a13b40*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class ChaCha7539Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.Salsa20Engine
                            {
                                /*0x2a13e34*/ ChaCha7539Engine();
                                /*0x2a13ee8*/ string get_AlgorithmName();
                                /*0x2a13f28*/ int get_NonceSize();
                                /*0x2a13f30*/ void AdvanceCounter();
                                /*0x2a13fb0*/ void ResetCounter();
                                /*0x2a13fdc*/ void SetKey(byte[] keyBytes, byte[] ivBytes);
                                /*0x2a141f0*/ void GenerateKeyStream(byte[] output);
                                /*0x2a15048*/ void DoFinal(byte[] inBuf, int inOff, int inLen, byte[] outBuf, int outOff);
                                /*0x2a153cc*/ void ProcessBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a15738*/ void ImplProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class ChaChaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.Salsa20Engine
                            {
                                static /*0x2a14208*/ void ChachaCore(int rounds, uint[] input, byte[] output);
                            }

                            class DesEdeEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.DesEngine
                            {
                                /*0x18*/ int[] workingKey1;
                                /*0x20*/ int[] workingKey2;
                                /*0x28*/ int[] workingKey3;
                                /*0x30*/ bool forEncryption;

                                /*0x2a16968*/ DesEdeEngine();
                                /*0x2a157e4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a15fcc*/ int GetBlockSize();
                                /*0x2a15fd4*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a165a8*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class DesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ short[] bytebit;
                                static /*0x8*/ int[] bigbyte;
                                static /*0x10*/ byte[] pc1;
                                static /*0x18*/ byte[] totrot;
                                static /*0x20*/ byte[] pc2;
                                static /*0x28*/ uint[] SP1;
                                static /*0x30*/ uint[] SP2;
                                static /*0x38*/ uint[] SP3;
                                static /*0x40*/ uint[] SP4;
                                static /*0x48*/ uint[] SP5;
                                static /*0x50*/ uint[] SP6;
                                static /*0x58*/ uint[] SP7;
                                static /*0x60*/ uint[] SP8;
                                /*0x10*/ int[] workingKey;

                                static /*0x2a16ff0*/ DesEngine();
                                static /*0x2a15a9c*/ int[] GenerateWorkingKey(bool encrypting, byte[] key);
                                static /*0x2a161c8*/ void DesFunc(int[] wKey, ref uint hi32, ref uint lo32);
                                /*0x2a169c0*/ DesEngine();
                                /*0x2a169c8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a16b0c*/ int GetBlockSize();
                                /*0x2a16b14*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a16ca4*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class Gost28147Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] Sbox_Default;
                                static /*0x8*/ byte[] ESbox_Test;
                                static /*0x10*/ byte[] ESbox_A;
                                static /*0x18*/ byte[] ESbox_B;
                                static /*0x20*/ byte[] ESbox_C;
                                static /*0x28*/ byte[] ESbox_D;
                                static /*0x30*/ byte[] DSbox_Test;
                                static /*0x38*/ byte[] DSbox_A;
                                static /*0x40*/ System.Collections.Generic.Dictionary<string, System.Byte[]> m_sBoxes;
                                /*0x10*/ int[] workingKey;
                                /*0x18*/ bool forEncryption;
                                /*0x20*/ byte[] S;

                                static /*0x2a17414*/ Gost28147Engine();
                                static /*0x2a17890*/ void AddSBox(string sBoxName, byte[] sBox);
                                static /*0x2a18500*/ byte[] GetSBox(string sBoxName);
                                /*0x2a17920*/ Gost28147Engine();
                                /*0x2a17990*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a17db8*/ int GetBlockSize();
                                /*0x2a17dc0*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a182f0*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a17c10*/ int[] GenerateWorkingKey(bool forEncryption, byte[] userKey);
                                /*0x2a18404*/ int Gost28147_mainStep(int n1, int key);
                                /*0x2a17f38*/ void Gost28147Func(int[] workingKey, System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class RsaBlindedEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa core;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                /*0x2a18614*/ RsaBlindedEngine();
                                /*0x2a18688*/ RsaBlindedEngine(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa);
                                /*0x2a186b8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters param);
                                /*0x2a18960*/ int GetInputBlockSize();
                                /*0x2a18a04*/ int GetOutputBlockSize();
                                /*0x2a18aa8*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                            }

                            class RsaCoreEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters key;
                                /*0x18*/ bool forEncryption;
                                /*0x1c*/ int bitSize;

                                /*0x2a18680*/ RsaCoreEngine();
                                /*0x2a18ee8*/ void CheckInitialised();
                                /*0x2a18f40*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a190b4*/ int GetInputBlockSize();
                                /*0x2a190f0*/ int GetOutputBlockSize();
                                /*0x2a1912c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ConvertInput(byte[] inBuf, int inOff, int inLen);
                                /*0x2a19238*/ byte[] ConvertOutput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger result);
                                /*0x2a192e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ProcessBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger input);
                            }

                            class RsaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa core;

                                /*0x2a1944c*/ RsaEngine();
                                /*0x2a194b8*/ RsaEngine(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa);
                                /*0x2a194e8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a195a0*/ int GetInputBlockSize();
                                /*0x2a19644*/ int GetOutputBlockSize();
                                /*0x2a196e8*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                            }

                            class Salsa20Engine
                            {
                                static /*0x0*/ int DEFAULT_ROUNDS;
                                static /*0x8*/ uint[] TAU_SIGMA;
                                /*0x10*/ int rounds;
                                /*0x14*/ int index;
                                /*0x18*/ uint[] engineState;
                                /*0x20*/ uint[] x;
                                /*0x28*/ byte[] keyStream;
                                /*0x30*/ bool initialised;
                                /*0x34*/ uint cW0;
                                /*0x38*/ uint cW1;
                                /*0x3c*/ uint cW2;

                                static /*0x2a1aadc*/ Salsa20Engine();
                                static /*0x2a1a2cc*/ void SalsaCore(int rounds, System.ReadOnlySpan<uint> input, System.Span<uint> output);
                                static /*0x2a1a9ec*/ void QuarterRound(ref uint a, ref uint b, ref uint c, ref uint d);
                                /*0x2a13e88*/ Salsa20Engine();
                                /*0x2a1988c*/ Salsa20Engine(int rounds);
                                /*0x2a140bc*/ void PackTauOrSigma(int keyLength, uint[] state, int stateOffset);
                                /*0x2a199a4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a19c84*/ int get_NonceSize();
                                /*0x2a19c8c*/ string get_AlgorithmName();
                                /*0x2a19d58*/ void AdvanceCounter();
                                /*0x2a19da4*/ void ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a19fa8*/ void Reset();
                                /*0x2a19fcc*/ void ResetCounter();
                                /*0x2a19ff8*/ void SetKey(byte[] keyBytes, byte[] ivBytes);
                                /*0x2a1a1e8*/ void GenerateKeyStream(byte[] output);
                                /*0x2a19fc0*/ void ResetLimitCounter();
                                /*0x2a156f8*/ bool LimitExceeded(uint len);
                            }

                            class SeedEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ uint[] SS0;
                                static /*0x8*/ uint[] SS1;
                                static /*0x10*/ uint[] SS2;
                                static /*0x18*/ uint[] SS3;
                                static /*0x20*/ uint[] KC;
                                /*0x10*/ int[] wKey;
                                /*0x18*/ bool forEncryption;

                                static /*0x2a1b6d0*/ SeedEngine();
                                /*0x2a1b6c8*/ SeedEngine();
                                /*0x2a1acb0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a1af48*/ int GetBlockSize();
                                /*0x2a1af50*/ int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);
                                /*0x2a1b1ac*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x2a1ad68*/ int[] CreateWorkingKey(byte[] inKey);
                                /*0x2a1b568*/ int extractW1(long lVal);
                                /*0x2a1b560*/ int extractW0(long lVal);
                                /*0x2a1b664*/ long rotateLeft8(long x);
                                /*0x2a1b65c*/ long rotateRight8(long x);
                                /*0x2a1b570*/ int G(int x);
                                /*0x2a1b148*/ long F(int ki0, int ki1, long r);
                                /*0x2a1b6a8*/ int phaseCalc1(int r0, int ki0, int r1, int ki1);
                                /*0x2a1b66c*/ int phaseCalc2(int r0, int ki0, int r1, int ki1);
                            }

                            class SM4Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] Sbox;
                                static /*0x8*/ uint[] CK;
                                static /*0x10*/ uint[] FK;
                                /*0x10*/ uint[] rk;

                                static /*0x2a1cbe0*/ SM4Engine();
                                static /*0x2a1b890*/ uint tau(uint A);
                                static /*0x2a1b958*/ uint L_ap(uint B);
                                static /*0x2a1bfb8*/ uint L(uint B);
                                static /*0x2a1c06c*/ uint T(uint Z);
                                /*0x2a1cbd8*/ SM4Engine();
                                /*0x2a1b9d4*/ uint T_ap(uint Z);
                                /*0x2a1ba2c*/ void ExpandKey(bool forEncryption, byte[] key);
                                /*0x2a1c0c4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a1c294*/ int GetBlockSize();
                                /*0x2a1c29c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x2a1c550*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }
                        }

                        namespace Encodings
                        {
                            class Pkcs1Encoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                static /*0x0*/ bool[] strictLengthEnabled;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine;
                                /*0x20*/ bool forEncryption;
                                /*0x21*/ bool forPrivateKey;
                                /*0x22*/ bool useStrictLength;
                                /*0x24*/ int pLen;
                                /*0x28*/ byte[] fallback;
                                /*0x30*/ byte[] blockBuffer;

                                static /*0x2a1cd94*/ Pkcs1Encoding();
                                static /*0x2a1cd24*/ bool get_StrictLengthEnabled();
                                static /*0x2a1d980*/ int CheckPkcs1Encoding(byte[] encoded, int pLen);
                                /*0x2a1cebc*/ Pkcs1Encoding(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher);
                                /*0x2a1cf48*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a1d21c*/ int GetInputBlockSize();
                                /*0x2a1d2d4*/ int GetOutputBlockSize();
                                /*0x2a1d38c*/ byte[] ProcessBlock(byte[] input, int inOff, int length);
                                /*0x2a1d684*/ byte[] EncodeBlock(byte[] input, int inOff, int inLen);
                                /*0x2a1da20*/ byte[] DecodeBlockOrRandom(byte[] input, int inOff, int inLen);
                                /*0x2a1d39c*/ byte[] DecodeBlock(byte[] input, int inOff, int inLen);
                                /*0x2a1dd14*/ int FindStart(byte type, byte[] block);
                            }
                        }

                        namespace EC
                        {
                            class CustomNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2a1e138*/ CustomNamedCurves();
                                static /*0x2a1dd9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x2a1de8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2a1de90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurveGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters p);
                                static /*0x2a1df34*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2a1e030*/ void DefineCurveAlias(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a1f0b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2a1f1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a1f21c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a1f138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class SecP128R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a1f470*/ SecP128R1Holder();
                                    /*0x2a1f294*/ SecP128R1Holder();
                                    /*0x2a1f29c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a1f314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a1f934*/ SecP160K1Holder();
                                    /*0x2a1f4d8*/ SecP160K1Holder();
                                    /*0x2a1f4e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a1f828*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a1fb78*/ SecP160R1Holder();
                                    /*0x2a1f99c*/ SecP160R1Holder();
                                    /*0x2a1f9a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a1fa1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a1fdbc*/ SecP160R2Holder();
                                    /*0x2a1fbe0*/ SecP160R2Holder();
                                    /*0x2a1fbe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a1fc60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP192K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a20280*/ SecP192K1Holder();
                                    /*0x2a1fe24*/ SecP192K1Holder();
                                    /*0x2a1fe2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a20174*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP192R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a204c4*/ SecP192R1Holder();
                                    /*0x2a202e8*/ SecP192R1Holder();
                                    /*0x2a202f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a20368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP224K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a20988*/ SecP224K1Holder();
                                    /*0x2a2052c*/ SecP224K1Holder();
                                    /*0x2a20534*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a2087c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP224R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a20bcc*/ SecP224R1Holder();
                                    /*0x2a209f0*/ SecP224R1Holder();
                                    /*0x2a209f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a20a70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP256K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a21090*/ SecP256K1Holder();
                                    /*0x2a20c34*/ SecP256K1Holder();
                                    /*0x2a20c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a20f84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP256R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a212d4*/ SecP256R1Holder();
                                    /*0x2a210f8*/ SecP256R1Holder();
                                    /*0x2a21100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a21178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP384R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a21518*/ SecP384R1Holder();
                                    /*0x2a2133c*/ SecP384R1Holder();
                                    /*0x2a21344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a213bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP521R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a2175c*/ SecP521R1Holder();
                                    /*0x2a21580*/ SecP521R1Holder();
                                    /*0x2a21588*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a21600*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT113R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a219a0*/ SecT113R1Holder();
                                    /*0x2a217c4*/ SecT113R1Holder();
                                    /*0x2a217cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a21844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT113R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a21be4*/ SecT113R2Holder();
                                    /*0x2a21a08*/ SecT113R2Holder();
                                    /*0x2a21a10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a21a88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT131R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a21e28*/ SecT131R1Holder();
                                    /*0x2a21c4c*/ SecT131R1Holder();
                                    /*0x2a21c54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a21ccc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT131R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a2206c*/ SecT131R2Holder();
                                    /*0x2a21e90*/ SecT131R2Holder();
                                    /*0x2a21e98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a21f10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a22260*/ SecT163K1Holder();
                                    /*0x2a220d4*/ SecT163K1Holder();
                                    /*0x2a220dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a22154*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a224a4*/ SecT163R1Holder();
                                    /*0x2a222c8*/ SecT163R1Holder();
                                    /*0x2a222d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a22348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a226e8*/ SecT163R2Holder();
                                    /*0x2a2250c*/ SecT163R2Holder();
                                    /*0x2a22514*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a2258c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT193R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a2292c*/ SecT193R1Holder();
                                    /*0x2a22750*/ SecT193R1Holder();
                                    /*0x2a22758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a227d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT193R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a22b70*/ SecT193R2Holder();
                                    /*0x2a22994*/ SecT193R2Holder();
                                    /*0x2a2299c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a22a14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT233K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a22d64*/ SecT233K1Holder();
                                    /*0x2a22bd8*/ SecT233K1Holder();
                                    /*0x2a22be0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a22c58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT233R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a22fa8*/ SecT233R1Holder();
                                    /*0x2a22dcc*/ SecT233R1Holder();
                                    /*0x2a22dd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a22e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT239K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a2319c*/ SecT239K1Holder();
                                    /*0x2a23010*/ SecT239K1Holder();
                                    /*0x2a23018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a23090*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT283K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a23390*/ SecT283K1Holder();
                                    /*0x2a23204*/ SecT283K1Holder();
                                    /*0x2a2320c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a23284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT283R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a235d4*/ SecT283R1Holder();
                                    /*0x2a233f8*/ SecT283R1Holder();
                                    /*0x2a23400*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a23478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT409K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a237c8*/ SecT409K1Holder();
                                    /*0x2a2363c*/ SecT409K1Holder();
                                    /*0x2a23644*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a236bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT409R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a23a0c*/ SecT409R1Holder();
                                    /*0x2a23830*/ SecT409R1Holder();
                                    /*0x2a23838*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a238b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT571K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a23c00*/ SecT571K1Holder();
                                    /*0x2a23a74*/ SecT571K1Holder();
                                    /*0x2a23a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a23af4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT571R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a23e44*/ SecT571R1Holder();
                                    /*0x2a23c68*/ SecT571R1Holder();
                                    /*0x2a23c70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a23ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SM2P256V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a24038*/ SM2P256V1Holder();
                                    /*0x2a23eac*/ SM2P256V1Holder();
                                    /*0x2a23eb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a23f2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }
                        }

                        namespace Digests
                        {
                            class Blake2bDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x0*/ ulong[] blake2b_IV;
                                static /*0x8*/ byte[,] blake2b_sigma;
                                /*0x10*/ int digestLength;
                                /*0x14*/ int keyLength;
                                /*0x18*/ byte[] salt;
                                /*0x20*/ byte[] personalization;
                                /*0x28*/ byte[] key;
                                /*0x30*/ byte[] buffer;
                                /*0x38*/ int bufferPos;
                                /*0x40*/ ulong[] internalState;
                                /*0x48*/ ulong[] chainValue;
                                /*0x50*/ ulong t0;
                                /*0x58*/ ulong t1;
                                /*0x60*/ ulong f0;

                                static /*0x2a257f8*/ Blake2bDigest();
                                static /*0x2a257e0*/ ulong Rotr64(ulong x, int rot);
                                /*0x2a240a0*/ Blake2bDigest(int digestSize);
                                /*0x2a241b4*/ void Init();
                                /*0x2a24448*/ void InitializeInternalState();
                                /*0x2a24590*/ void Update(byte b);
                                /*0x2a24c74*/ void BlockUpdate(byte[] message, int offset, int len);
                                /*0x2a24d44*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a25104*/ int DoFinal(byte[] output, int outOffset);
                                /*0x2a25178*/ int DoFinal(System.Span<byte> output);
                                /*0x2a25554*/ void Reset();
                                /*0x2a24684*/ void Compress(System.ReadOnlySpan<byte> message);
                                /*0x2a255d4*/ void G(ulong m1, ulong m2, int posA, int posB, int posC, int posD);
                                /*0x2a257e8*/ int GetDigestSize();
                                /*0x2a257f0*/ int GetByteLength();
                            }

                            class Blake2sDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x0*/ uint[] blake2s_IV;
                                static /*0x8*/ byte[,] blake2s_sigma;
                                /*0x10*/ int digestLength;
                                /*0x14*/ int keyLength;
                                /*0x18*/ byte[] salt;
                                /*0x20*/ byte[] personalization;
                                /*0x28*/ byte[] key;
                                /*0x30*/ int fanout;
                                /*0x34*/ int depth;
                                /*0x38*/ int leafLength;
                                /*0x40*/ long nodeOffset;
                                /*0x48*/ int nodeDepth;
                                /*0x4c*/ int innerHashLength;
                                /*0x50*/ byte[] buffer;
                                /*0x58*/ int bufferPos;
                                /*0x60*/ uint[] internalState;
                                /*0x68*/ uint[] chainValue;
                                /*0x70*/ uint t0;
                                /*0x74*/ uint t1;
                                /*0x78*/ uint f0;

                                static /*0x2a2744c*/ Blake2sDigest();
                                /*0x2a25914*/ Blake2sDigest(int digestBits);
                                /*0x2a25a0c*/ void Init(byte[] salt, byte[] personalization, byte[] key);
                                /*0x2a260d8*/ void InitializeInternalState();
                                /*0x2a26214*/ void Update(byte b);
                                /*0x2a268fc*/ void BlockUpdate(byte[] message, int offset, int len);
                                /*0x2a269cc*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a26d8c*/ int DoFinal(byte[] output, int outOffset);
                                /*0x2a26e00*/ int DoFinal(System.Span<byte> output);
                                /*0x2a2717c*/ void Reset();
                                /*0x2a26308*/ void Compress(System.ReadOnlySpan<byte> message);
                                /*0x2a2720c*/ void G(uint m1, uint m2, int posA, int posB, int posC, int posD);
                                /*0x2a2743c*/ int GetDigestSize();
                                /*0x2a27444*/ int GetByteLength();
                            }

                            class Blake3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof
                            {
                                static /*0x0*/ byte[] SIGMA;
                                static /*0x8*/ uint[] IV;
                                /*0x10*/ byte[] m_theBuffer;
                                /*0x18*/ uint[] m_theK;
                                /*0x20*/ uint[] m_theChaining;
                                /*0x28*/ uint[] m_theV;
                                /*0x30*/ uint[] m_theM;
                                /*0x38*/ byte[] m_theIndices;
                                /*0x40*/ System.Collections.Generic.List<System.UInt32[]> m_theStack;
                                /*0x48*/ int m_theDigestLen;
                                /*0x4c*/ bool m_outputting;
                                /*0x50*/ long m_outputAvailable;
                                /*0x58*/ int m_theMode;
                                /*0x5c*/ int m_theOutputMode;
                                /*0x60*/ int m_theOutputDataLen;
                                /*0x68*/ long m_theCounter;
                                /*0x70*/ int m_theCurrBytes;
                                /*0x74*/ int m_thePos;

                                static /*0x2a29a48*/ Blake3Digest();
                                /*0x2a27568*/ Blake3Digest(int pDigestSize);
                                /*0x2a27824*/ Blake3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Blake3Digest pSource);
                                /*0x2a27d14*/ int GetByteLength();
                                /*0x2a27d1c*/ int GetDigestSize();
                                /*0x2a276ec*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Blake3Parameters pParams);
                                /*0x2a27fcc*/ void Update(byte b);
                                /*0x2a27e28*/ void BlockUpdate(byte[] pMessage, int pOffset, int pLen);
                                /*0x2a28164*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a27efc*/ int DoFinal(byte[] pOutput, int pOutOffset);
                                /*0x2a285b0*/ int OutputFinal(byte[] pOut, int pOutOffset, int pOutLen);
                                /*0x2a28654*/ int DoFinal(System.Span<byte> output);
                                /*0x2a28534*/ int OutputFinal(System.Span<byte> output);
                                /*0x2a2870c*/ int Output(System.Span<byte> output);
                                /*0x2a27d24*/ void Reset();
                                /*0x2a279a4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable pSource);
                                /*0x2a28bd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a28108*/ void CompressBlock(System.ReadOnlySpan<byte> block);
                                /*0x2a28dbc*/ void InitM(System.ReadOnlySpan<byte> block);
                                /*0x2a29060*/ void AdjustStack();
                                /*0x2a28a50*/ void CompressFinalBlock(int pDataLen);
                                /*0x2a292bc*/ void ProcessStack();
                                /*0x2a28e2c*/ void Compress();
                                /*0x2a2967c*/ void PerformRound();
                                /*0x2a29560*/ void AdjustChaining();
                                /*0x2a29784*/ void MixG(int msgIdx, int posA, int posB, int posC, int posD);
                                /*0x2a29440*/ void InitIndices();
                                /*0x2a2947c*/ void PermuteIndices();
                                /*0x2a27db8*/ void InitNullKey();
                                /*0x2a27d8c*/ void InitKey(byte[] pKey);
                                /*0x2a27f98*/ void InitKeyFromContext();
                                /*0x2a28c30*/ void InitChunkBlock(int pDataLen, bool pFinal);
                                /*0x2a291dc*/ void InitParentBlock();
                                /*0x2a28adc*/ void NextOutputBlock();
                                /*0x2a29a34*/ void IncrementBlockCount();
                                /*0x2a28bcc*/ void ResetBlockCount();
                                /*0x2a293d4*/ void SetRoot();
                            }

                            class Dstu7564Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] S0;
                                static /*0x8*/ byte[] S1;
                                static /*0x10*/ byte[] S2;
                                static /*0x18*/ byte[] S3;
                                /*0x10*/ int hashSize;
                                /*0x14*/ int blockSize;
                                /*0x18*/ int columns;
                                /*0x1c*/ int rounds;
                                /*0x20*/ ulong[] state;
                                /*0x28*/ ulong[] tempState1;
                                /*0x30*/ ulong[] tempState2;
                                /*0x38*/ ulong inputBlocks;
                                /*0x40*/ int bufOff;
                                /*0x48*/ byte[] buf;

                                static /*0x2a2b6b0*/ Dstu7564Digest();
                                static /*0x2a2b508*/ ulong MixColumn(ulong c);
                                static /*0x2a2b5c0*/ ulong Rotate(int n, ulong x);
                                /*0x2a29b48*/ Dstu7564Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Dstu7564Digest digest);
                                /*0x2a29cc8*/ Dstu7564Digest(int hashSizeBits);
                                /*0x2a29b74*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Dstu7564Digest digest);
                                /*0x2a29e54*/ int GetDigestSize();
                                /*0x2a29e5c*/ int GetByteLength();
                                /*0x2a29e64*/ void Update(byte input);
                                /*0x2a29ee0*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a2a00c*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a2a214*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a2a5b4*/ int DoFinal(System.Span<byte> output);
                                /*0x2a2a970*/ void Reset();
                                /*0x2a2a9c0*/ void ProcessBlock(byte[] input, int inOff);
                                /*0x2a2abe8*/ void ProcessBlock(System.ReadOnlySpan<byte> input);
                                /*0x2a2a500*/ void P(ulong[] s);
                                /*0x2a2ab14*/ void Q(ulong[] s);
                                /*0x2a2b44c*/ void MixColumns(ulong[] s);
                                /*0x2a2ae1c*/ void ShiftRows(ulong[] s);
                                /*0x2a2b298*/ void SubBytes(ulong[] s);
                                /*0x2a2b5c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a2b62c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class GeneralDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                /*0x10*/ byte[] xBuf;
                                /*0x18*/ int xBufOff;
                                /*0x20*/ long byteCount;

                                /*0x2a2b824*/ GeneralDigest();
                                /*0x2a2b888*/ GeneralDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest t);
                                /*0x2a2b90c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest t);
                                /*0x2a2b960*/ void Update(byte input);
                                /*0x2a2b9e0*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a2bbb0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a2bd9c*/ void Finish();
                                /*0x2a2bdfc*/ void Reset();
                                /*0x2a2be28*/ int GetByteLength();
                                /*0x1f30ee8*/ void ProcessWord(byte[] input, int inOff);
                                void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x1f30d60*/ void ProcessLength(long bitLength);
                                /*0x1f309e4*/ void ProcessBlock();
                                /*0x1f2ffc8*/ int GetDigestSize();
                                int DoFinal(byte[] output, int outOff);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x1f30ebc*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable t);
                                int DoFinal(System.Span<byte> output);
                            }

                            class Gost3411Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] C2;
                                /*0x10*/ byte[] H;
                                /*0x18*/ byte[] L;
                                /*0x20*/ byte[] M;
                                /*0x28*/ byte[] Sum;
                                /*0x30*/ byte[][] C;
                                /*0x38*/ byte[] xBuf;
                                /*0x40*/ int xBufOff;
                                /*0x48*/ ulong byteCount;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x58*/ byte[] sBox;
                                /*0x60*/ byte[] K;
                                /*0x68*/ byte[] a;
                                /*0x70*/ short[] wS;
                                /*0x78*/ short[] w_S;
                                /*0x80*/ byte[] S;
                                /*0x88*/ byte[] U;
                                /*0x90*/ byte[] V;
                                /*0x98*/ byte[] W;

                                static /*0x2a2d848*/ Gost3411Digest();
                                static /*0x2a2be30*/ byte[][] MakeC();
                                static /*0x2a2d55c*/ void cpyBytesToShort(byte[] S, short[] wS);
                                static /*0x2a2d5e0*/ void cpyShortToBytes(short[] wS, byte[] S);
                                /*0x2a2beec*/ Gost3411Digest();
                                /*0x2a2c390*/ Gost3411Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411Digest t);
                                /*0x2a2c8cc*/ int GetDigestSize();
                                /*0x2a2c8d4*/ void Update(byte input);
                                /*0x2a2cd00*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a2ce30*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a2d110*/ byte[] P(byte[] input);
                                /*0x2a2d21c*/ byte[] A(byte[] input);
                                /*0x2a2d2dc*/ void E(byte[] key, byte[] s, int sOff, byte[] input, int inOff);
                                /*0x2a2d450*/ void fw(byte[] input);
                                /*0x2a2c9cc*/ void processBlock(byte[] input, int inOff);
                                /*0x2a2d684*/ void Finish();
                                /*0x2a2d6dc*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a2d728*/ int DoFinal(System.Span<byte> output);
                                /*0x2a2c230*/ void Reset();
                                /*0x2a2c954*/ void sumByteArray(byte[] input);
                                /*0x2a2d7e8*/ int GetByteLength();
                                /*0x2a2d7f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a2c5e8*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Gost3411_2012Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[][] C;
                                static /*0x8*/ byte[] Zero;
                                static /*0x10*/ ulong[][] T;
                                /*0x10*/ byte[] IV;
                                /*0x18*/ byte[] N;
                                /*0x20*/ byte[] Sigma;
                                /*0x28*/ byte[] Ki;
                                /*0x30*/ byte[] m;
                                /*0x38*/ byte[] h;
                                /*0x40*/ byte[] tmp;
                                /*0x48*/ byte[] block;
                                /*0x50*/ int bOff;

                                static /*0x2a2f2dc*/ Gost3411_2012Digest();
                                /*0x2a2d8e8*/ Gost3411_2012Digest(byte[] IV);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a2da5c*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a2de3c*/ int DoFinal(System.Span<byte> output);
                                /*0x2a2e014*/ int GetByteLength();
                                /*0x1f2ffc8*/ int GetDigestSize();
                                /*0x2a2dd98*/ void Reset();
                                /*0x2a2e01c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                                /*0x2a2e168*/ void Update(byte input);
                                /*0x2a2e1e4*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x2a2e328*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a2e5ec*/ void F(byte[] V);
                                /*0x2a2f140*/ void xor512(byte[] A, byte[] B);
                                /*0x2a2f19c*/ void E(byte[] K, byte[] m);
                                /*0x2a2dbd8*/ void g_N(byte[] h, byte[] N, byte[] m);
                                /*0x2a2dc58*/ void addMod512(byte[] A, int num);
                                /*0x2a2dcd0*/ void addMod512(byte[] A, byte[] B);
                                /*0x2a2dd30*/ void reverse(byte[] src, byte[] dst);
                            }

                            class Gost3411_2012_256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
                            {
                                static /*0x0*/ byte[] IV;

                                static /*0x2a30a0c*/ Gost3411_2012_256Digest();
                                /*0x2a30614*/ Gost3411_2012_256Digest();
                                /*0x2a306a4*/ Gost3411_2012_256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest other);
                                /*0x2a30750*/ int GetDigestSize();
                                /*0x2a30758*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a307ec*/ int DoFinal(System.Span<byte> output);
                                /*0x2a309b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class Gost3411_2012_512Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
                            {
                                static /*0x0*/ byte[] IV;

                                static /*0x2a30c48*/ Gost3411_2012_512Digest();
                                /*0x2a30aac*/ Gost3411_2012_512Digest();
                                /*0x2a30b3c*/ Gost3411_2012_512Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest other);
                                /*0x2a30be8*/ int GetDigestSize();
                                /*0x2a30bf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class KeccakDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ ulong[] KeccakRoundConstants;
                                /*0x10*/ ulong[] state;
                                /*0x18*/ byte[] dataQueue;
                                /*0x20*/ int rate;
                                /*0x24*/ int bitsInQueue;
                                /*0x28*/ int fixedOutputLength;
                                /*0x2c*/ bool squeezing;

                                static /*0x2a327d8*/ KeccakDigest();
                                /*0x2a30cbc*/ KeccakDigest(int bitLength);
                                /*0x2a30e14*/ KeccakDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest source);
                                /*0x2a30ec0*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest source);
                                /*0x2a30f3c*/ int GetDigestSize();
                                /*0x2a30f48*/ void Update(byte input);
                                /*0x2a31028*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x2a31198*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a31524*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a316a0*/ int DoFinal(System.Span<byte> output);
                                /*0x2a31970*/ void Reset();
                                /*0x2a31978*/ int GetByteLength();
                                /*0x2a30d68*/ void Init(int bitLength);
                                /*0x2a31984*/ void InitSponge(int rate);
                                /*0x2a30f4c*/ void Absorb(byte data);
                                /*0x2a3102c*/ void Absorb(byte[] data, int off, int len);
                                /*0x2a3119c*/ void Absorb(System.ReadOnlySpan<byte> data);
                                /*0x2a31c88*/ void AbsorbBits(int data, int bits);
                                /*0x2a31dac*/ void PadAndSwitchToSqueezingPhase();
                                /*0x2a31560*/ void Squeeze(byte[] output, int offset, long outputLength);
                                /*0x2a31788*/ void Squeeze(System.Span<byte> output);
                                /*0x2a31a7c*/ void KeccakAbsorb(byte[] data, int off);
                                /*0x2a31b10*/ void KeccakAbsorb(System.ReadOnlySpan<byte> data);
                                /*0x2a31f20*/ void KeccakExtract();
                                /*0x2a31f58*/ void KeccakPermutation();
                                /*0x2a326fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a32754*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class LongDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ ulong[] K;
                                /*0x10*/ int MyByteLength;
                                /*0x18*/ byte[] xBuf;
                                /*0x20*/ int xBufOff;
                                /*0x28*/ long byteCount1;
                                /*0x30*/ long byteCount2;
                                /*0x38*/ ulong H1;
                                /*0x40*/ ulong H2;
                                /*0x48*/ ulong H3;
                                /*0x50*/ ulong H4;
                                /*0x58*/ ulong H5;
                                /*0x60*/ ulong H6;
                                /*0x68*/ ulong H7;
                                /*0x70*/ ulong H8;
                                /*0x78*/ ulong[] W;
                                /*0x80*/ int wOff;

                                static /*0x2a335d4*/ LongDigest();
                                static /*0x2a33598*/ ulong Ch(ulong x, ulong y, ulong z);
                                static /*0x2a335b8*/ ulong Maj(ulong x, ulong y, ulong z);
                                static /*0x2a335a8*/ ulong Sum0(ulong x);
                                static /*0x2a33588*/ ulong Sum1(ulong x);
                                static /*0x2a33578*/ ulong Sigma0(ulong x);
                                static /*0x2a33568*/ ulong Sigma1(ulong x);
                                /*0x2a32878*/ LongDigest();
                                /*0x2a32930*/ LongDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest t);
                                /*0x2a329f4*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest t);
                                /*0x2a32a90*/ void Update(byte input);
                                /*0x2a32b78*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a32c88*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a32efc*/ void Finish();
                                /*0x2a334fc*/ void Reset();
                                /*0x2a32b04*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a32e44*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a32f64*/ void AdjustByteCounts();
                                /*0x2a32f88*/ void ProcessLength(long lowW, long hiW);
                                /*0x2a32fe8*/ void ProcessBlock();
                                /*0x2a335cc*/ int GetByteLength();
                                /*0x1f2ffc8*/ int GetDigestSize();
                                int DoFinal(byte[] output, int outOff);
                                int DoFinal(System.Span<byte> output);
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x1f30ebc*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable t);
                            }

                            class MD2Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] S;
                                /*0x10*/ byte[] X;
                                /*0x18*/ int xOff;
                                /*0x20*/ byte[] M;
                                /*0x28*/ int mOff;
                                /*0x30*/ byte[] C;
                                /*0x38*/ int COff;

                                static /*0x2a34284*/ MD2Digest();
                                /*0x2a33674*/ MD2Digest();
                                /*0x2a337d0*/ MD2Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD2Digest t);
                                /*0x2a33884*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD2Digest t);
                                /*0x2a33920*/ int GetDigestSize();
                                /*0x2a33928*/ int GetByteLength();
                                /*0x2a33930*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a33c74*/ int DoFinal(System.Span<byte> output);
                                /*0x2a33718*/ void Reset();
                                /*0x2a33db4*/ void Update(byte input);
                                /*0x2a33e1c*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a33f38*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a339e0*/ void ProcessChecksum(byte[] m);
                                /*0x2a33af8*/ void ProcessBlock(byte[] m);
                                /*0x2a341a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a34200*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class MD4Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H1;
                                /*0x2c*/ int H2;
                                /*0x30*/ int H3;
                                /*0x34*/ int H4;
                                /*0x38*/ int[] X;
                                /*0x40*/ int xOff;

                                /*0x2a34324*/ MD4Digest();
                                /*0x2a3439c*/ MD4Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD4Digest t);
                                /*0x2a3441c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD4Digest t);
                                /*0x2a34478*/ int GetDigestSize();
                                /*0x2a34480*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a3459c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a3465c*/ void ProcessLength(long bitLength);
                                /*0x2a346c8*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a348f0*/ int DoFinal(System.Span<byte> output);
                                /*0x2a34b8c*/ void Reset();
                                /*0x2a34be0*/ int F(int u, int v, int w);
                                /*0x2a34bf0*/ int G(int u, int v, int w);
                                /*0x2a34c04*/ int H(int u, int v, int w);
                                /*0x2a34c10*/ void ProcessBlock();
                                /*0x2a35890*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a358e8*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class MD5Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ int S11;
                                static /*0x4*/ int S12;
                                static /*0x8*/ int S13;
                                static /*0xc*/ int S14;
                                static /*0x10*/ int S21;
                                static /*0x14*/ int S22;
                                static /*0x18*/ int S23;
                                static /*0x1c*/ int S24;
                                static /*0x20*/ int S31;
                                static /*0x24*/ int S32;
                                static /*0x28*/ int S33;
                                static /*0x2c*/ int S34;
                                static /*0x30*/ int S41;
                                static /*0x34*/ int S42;
                                static /*0x38*/ int S43;
                                static /*0x3c*/ int S44;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint[] X;
                                /*0x40*/ int xOff;

                                static /*0x2a36ec8*/ MD5Digest();
                                static /*0x2a36280*/ uint RotateLeft(uint x, int n);
                                static /*0x2a3628c*/ uint F(uint u, uint v, uint w);
                                static /*0x2a3629c*/ uint G(uint u, uint v, uint w);
                                static /*0x2a362ac*/ uint H(uint u, uint v, uint w);
                                static /*0x2a362b8*/ uint K(uint u, uint v, uint w);
                                /*0x2a3596c*/ MD5Digest();
                                /*0x2a359e4*/ MD5Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD5Digest t);
                                /*0x2a35a64*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD5Digest t);
                                /*0x2a35ac0*/ int GetDigestSize();
                                /*0x2a35ac8*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a35be4*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a35ca4*/ void ProcessLength(long bitLength);
                                /*0x2a35d68*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a35f90*/ int DoFinal(System.Span<byte> output);
                                /*0x2a3622c*/ void Reset();
                                /*0x2a362c4*/ void ProcessBlock();
                                /*0x2a36dec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a36e44*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class NullDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                /*0x10*/ System.IO.MemoryStream bOut;

                                /*0x2a37380*/ NullDigest();
                                /*0x2a36f34*/ int GetByteLength();
                                /*0x2a36f3c*/ int GetDigestSize();
                                /*0x2a36fb4*/ void Update(byte b);
                                /*0x2a36fd4*/ void BlockUpdate(byte[] inBytes, int inOff, int len);
                                /*0x2a36ff4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a37014*/ int DoFinal(byte[] outBytes, int outOff);
                                /*0x2a37184*/ int DoFinal(System.Span<byte> output);
                                /*0x2a3735c*/ void Reset();
                            }

                            class RipeMD128Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int[] X;
                                /*0x40*/ int xOff;

                                /*0x2a373ec*/ RipeMD128Digest();
                                /*0x2a37464*/ RipeMD128Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD128Digest t);
                                /*0x2a374e4*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD128Digest t);
                                /*0x2a37540*/ int GetDigestSize();
                                /*0x2a37548*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a37664*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a37724*/ void ProcessLength(long bitLength);
                                /*0x2a37790*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a379b8*/ int DoFinal(System.Span<byte> output);
                                /*0x2a37c54*/ void Reset();
                                /*0x2a37ca8*/ int RL(int x, int n);
                                /*0x2a37cb4*/ int F1(int x, int y, int z);
                                /*0x2a37cc0*/ int F2(int x, int y, int z);
                                /*0x2a37cd0*/ int F3(int x, int y, int z);
                                /*0x2a37cdc*/ int F4(int x, int y, int z);
                                /*0x2a37cec*/ int F1(int a, int b, int c, int d, int x, int s);
                                /*0x2a37d08*/ int F2(int a, int b, int c, int d, int x, int s);
                                /*0x2a37d34*/ int F3(int a, int b, int c, int d, int x, int s);
                                /*0x2a37d5c*/ int F4(int a, int b, int c, int d, int x, int s);
                                /*0x2a37d88*/ int FF1(int a, int b, int c, int d, int x, int s);
                                /*0x2a37da4*/ int FF2(int a, int b, int c, int d, int x, int s);
                                /*0x2a37dd0*/ int FF3(int a, int b, int c, int d, int x, int s);
                                /*0x2a37df8*/ int FF4(int a, int b, int c, int d, int x, int s);
                                /*0x2a37e24*/ void ProcessBlock();
                                /*0x2a38d4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a38da4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD160Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x40*/ int[] X;
                                /*0x48*/ int xOff;

                                /*0x2a38e28*/ RipeMD160Digest();
                                /*0x2a38ea0*/ RipeMD160Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD160Digest t);
                                /*0x2a38f20*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD160Digest t);
                                /*0x2a38f84*/ int GetDigestSize();
                                /*0x2a38f8c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a390a8*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a39168*/ void ProcessLength(long bitLength);
                                /*0x2a391d4*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a39468*/ int DoFinal(System.Span<byte> output);
                                /*0x2a3979c*/ void Reset();
                                /*0x2a397fc*/ int RL(int x, int n);
                                /*0x2a39808*/ int F1(int x, int y, int z);
                                /*0x2a39814*/ int F2(int x, int y, int z);
                                /*0x2a39824*/ int F3(int x, int y, int z);
                                /*0x2a39830*/ int F4(int x, int y, int z);
                                /*0x2a39840*/ int F5(int x, int y, int z);
                                /*0x2a3984c*/ void ProcessBlock();
                                /*0x2a3afdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a3b034*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x3c*/ int H5;
                                /*0x40*/ int H6;
                                /*0x44*/ int H7;
                                /*0x48*/ int[] X;
                                /*0x50*/ int xOff;

                                /*0x2a3b0c0*/ RipeMD256Digest();
                                /*0x2a3b138*/ RipeMD256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD256Digest t);
                                /*0x2a3b0b8*/ int GetDigestSize();
                                /*0x2a3b1b8*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD256Digest t);
                                /*0x2a3b21c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a3b338*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a3b3f8*/ void ProcessLength(long bitLength);
                                /*0x2a3b464*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a3b83c*/ int DoFinal(System.Span<byte> output);
                                /*0x2a3bd3c*/ void Reset();
                                /*0x2a3bd9c*/ int RL(int x, int n);
                                /*0x2a3bda8*/ int F1(int x, int y, int z);
                                /*0x2a3bdb4*/ int F2(int x, int y, int z);
                                /*0x2a3bdc4*/ int F3(int x, int y, int z);
                                /*0x2a3bdd0*/ int F4(int x, int y, int z);
                                /*0x2a3bde0*/ int F1(int a, int b, int c, int d, int x, int s);
                                /*0x2a3bdfc*/ int F2(int a, int b, int c, int d, int x, int s);
                                /*0x2a3be28*/ int F3(int a, int b, int c, int d, int x, int s);
                                /*0x2a3be50*/ int F4(int a, int b, int c, int d, int x, int s);
                                /*0x2a3be7c*/ int FF1(int a, int b, int c, int d, int x, int s);
                                /*0x2a3be98*/ int FF2(int a, int b, int c, int d, int x, int s);
                                /*0x2a3bec4*/ int FF3(int a, int b, int c, int d, int x, int s);
                                /*0x2a3beec*/ int FF4(int a, int b, int c, int d, int x, int s);
                                /*0x2a3bf18*/ void ProcessBlock();
                                /*0x2a3ce7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a3ced4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD320Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x3c*/ int H5;
                                /*0x40*/ int H6;
                                /*0x44*/ int H7;
                                /*0x48*/ int H8;
                                /*0x4c*/ int H9;
                                /*0x50*/ int[] X;
                                /*0x58*/ int xOff;

                                /*0x2a5b9f4*/ RipeMD320Digest();
                                /*0x2a5ba6c*/ RipeMD320Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD320Digest t);
                                /*0x2a5b9ec*/ int GetDigestSize();
                                /*0x2a5baec*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD320Digest t);
                                /*0x2a5bb58*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a5bc74*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a5bd34*/ void ProcessLength(long bitLength);
                                /*0x2a5bda0*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a5c250*/ int DoFinal(System.Span<byte> output);
                                /*0x2a5c880*/ void Reset();
                                /*0x2a5c8ec*/ int RL(int x, int n);
                                /*0x2a5c8f8*/ int F1(int x, int y, int z);
                                /*0x2a5c904*/ int F2(int x, int y, int z);
                                /*0x2a5c914*/ int F3(int x, int y, int z);
                                /*0x2a5c920*/ int F4(int x, int y, int z);
                                /*0x2a5c930*/ int F5(int x, int y, int z);
                                /*0x2a5c93c*/ void ProcessBlock();
                                /*0x2a5e0e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a5e13c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha1Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x40*/ uint[] X;
                                /*0x48*/ int xOff;

                                static /*0x2a5e920*/ uint F(uint u, uint v, uint w);
                                static /*0x2a5e930*/ uint H(uint u, uint v, uint w);
                                static /*0x2a5e93c*/ uint G(uint u, uint v, uint w);
                                /*0x2a5e1c0*/ Sha1Digest();
                                /*0x2a5e238*/ Sha1Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha1Digest t);
                                /*0x2a5e2b8*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha1Digest t);
                                /*0x2a5e31c*/ int GetDigestSize();
                                /*0x2a5e324*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a5e3a4*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a5e468*/ void ProcessLength(long bitLength);
                                /*0x2a5e4d4*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a5e578*/ int DoFinal(System.Span<byte> output);
                                /*0x2a5e8d4*/ void Reset();
                                /*0x2a5e950*/ void ProcessBlock();
                                /*0x2a5ee8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a5eee4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha224Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] K;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x3c*/ uint H6;
                                /*0x40*/ uint H7;
                                /*0x44*/ uint H8;
                                /*0x48*/ uint[] X;
                                /*0x50*/ int xOff;

                                static /*0x2a5fe60*/ Sha224Digest();
                                static /*0x2a5fd50*/ uint Ch(uint x, uint y, uint z);
                                static /*0x2a5fd70*/ uint Maj(uint x, uint y, uint z);
                                static /*0x2a5fd60*/ uint Sum0(uint x);
                                static /*0x2a5fd40*/ uint Sum1(uint x);
                                static /*0x2a5fd30*/ uint Theta0(uint x);
                                static /*0x2a5fd20*/ uint Theta1(uint x);
                                /*0x2a5ef68*/ Sha224Digest();
                                /*0x2a5efe0*/ Sha224Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha224Digest t);
                                /*0x2a5f060*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha224Digest t);
                                /*0x2a5f0c4*/ int GetDigestSize();
                                /*0x2a5f0cc*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a5f14c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a5f210*/ void ProcessLength(long bitLength);
                                /*0x2a5f27c*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a5f348*/ int DoFinal(System.Span<byte> output);
                                /*0x2a5f7e8*/ void Reset();
                                /*0x2a5f834*/ void ProcessBlock();
                                /*0x2a5fd84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a5fddc*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] K;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x3c*/ uint H6;
                                /*0x40*/ uint H7;
                                /*0x44*/ uint H8;
                                /*0x48*/ uint[] X;
                                /*0x50*/ int xOff;

                                static /*0x2a60ed0*/ Sha256Digest();
                                static /*0x2a60db0*/ uint Sum1Ch(uint x, uint y, uint z);
                                static /*0x2a60dd0*/ uint Sum0Maj(uint x, uint y, uint z);
                                static /*0x2a60da0*/ uint Theta0(uint x);
                                static /*0x2a60d90*/ uint Theta1(uint x);
                                /*0x2a5ff00*/ Sha256Digest();
                                /*0x2a5ff9c*/ Sha256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha256Digest t);
                                /*0x2a6001c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha256Digest t);
                                /*0x2a60080*/ int GetDigestSize();
                                /*0x2a60088*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a60108*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a601cc*/ void ProcessLength(long bitLength);
                                /*0x2a60238*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a60318*/ int DoFinal(System.Span<byte> output);
                                /*0x2a60858*/ void Reset();
                                /*0x2a5ff80*/ void initHs();
                                /*0x2a608a4*/ void ProcessBlock();
                                /*0x2a60df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a60e4c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha384Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x2a60f70*/ Sha384Digest();
                                /*0x2a60fc8*/ Sha384Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha384Digest t);
                                /*0x2a61030*/ int GetDigestSize();
                                /*0x2a61038*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a610f0*/ int DoFinal(System.Span<byte> output);
                                /*0x2a614f0*/ void Reset();
                                /*0x2a61538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a61590*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest
                            {
                                static /*0x2a61618*/ int CheckBitLength(int bitLength);
                                /*0x2a616d8*/ Sha3Digest(int bitLength);
                                /*0x2a61748*/ Sha3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha3Digest source);
                                /*0x2a617b0*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a617f0*/ int DoFinal(System.Span<byte> output);
                                /*0x2a61830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class Sha512Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x2a61888*/ Sha512Digest();
                                /*0x2a618e0*/ Sha512Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha512Digest t);
                                /*0x2a61948*/ int GetDigestSize();
                                /*0x2a61950*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a61a30*/ int DoFinal(System.Span<byte> output);
                                /*0x2a61f70*/ void Reset();
                                /*0x2a61fb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a62010*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha512tDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x84*/ int digestLength;
                                /*0x88*/ ulong H1t;
                                /*0x90*/ ulong H2t;
                                /*0x98*/ ulong H3t;
                                /*0xa0*/ ulong H4t;
                                /*0xa8*/ ulong H5t;
                                /*0xb0*/ ulong H6t;
                                /*0xb8*/ ulong H7t;
                                /*0xc0*/ ulong H8t;

                                static /*0x2a62500*/ void UInt64_To_BE(ulong n, byte[] bs, int off, int max);
                                static /*0x2a62724*/ void UInt32_To_BE(uint n, byte[] bs, int off, int max);
                                static /*0x2a62680*/ void UInt64_To_BE(ulong n, System.Span<byte> bs, int off, int max);
                                static /*0x2a627f0*/ void UInt32_To_BE(uint n, System.Span<byte> bs, int off, int max);
                                /*0x2a62098*/ Sha512tDigest(int bitLength);
                                /*0x2a6236c*/ Sha512tDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha512tDigest t);
                                /*0x2a623fc*/ int GetDigestSize();
                                /*0x2a62404*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a62564*/ int DoFinal(System.Span<byte> output);
                                /*0x2a626ec*/ void Reset();
                                /*0x2a621e8*/ void tIvGenerate(int bitLength);
                                /*0x2a628b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a62908*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class ShakeDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x2a62a10*/ int CheckBitLength(int bitLength);
                                /*0x2a62ab4*/ ShakeDigest(int bitLength);
                                /*0x2a62b24*/ ShakeDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.ShakeDigest source);
                                /*0x2a62b8c*/ int GetDigestSize();
                                /*0x2a62b98*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a62be8*/ int OutputFinal(byte[] output, int outOff, int outLen);
                                /*0x2a62c2c*/ int Output(byte[] output, int outOff, int outLen);
                                /*0x2a62c90*/ int DoFinal(System.Span<byte> output);
                                /*0x2a62d68*/ int OutputFinal(System.Span<byte> output);
                                /*0x2a62dac*/ int Output(System.Span<byte> output);
                                /*0x2a62e28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class SM3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] T;
                                /*0x28*/ uint[] V;
                                /*0x30*/ uint[] inwords;
                                /*0x38*/ int xOff;
                                /*0x40*/ uint[] W;

                                static /*0x2a62e80*/ SM3Digest();
                                /*0x2a62f94*/ SM3Digest();
                                /*0x2a63044*/ SM3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.SM3Digest t);
                                /*0x2a630fc*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.SM3Digest t);
                                /*0x2a63168*/ int GetDigestSize();
                                /*0x2a63170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a631c8*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                                /*0x2a6325c*/ void Reset();
                                /*0x2a63328*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a6337c*/ int DoFinal(System.Span<byte> output);
                                /*0x2a6340c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x2a6348c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x2a63550*/ void ProcessLength(long bitLength);
                                /*0x2a63644*/ uint P0(uint x);
                                /*0x2a63654*/ uint P1(uint x);
                                /*0x2a63664*/ uint FF0(uint x, uint y, uint z);
                                /*0x2a63670*/ uint FF1(uint x, uint y, uint z);
                                /*0x2a63684*/ uint GG0(uint x, uint y, uint z);
                                /*0x2a63690*/ uint GG1(uint x, uint y, uint z);
                                /*0x2a636a0*/ void ProcessBlock();
                            }

                            class TigerDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ long[] t1;
                                static /*0x8*/ long[] t2;
                                static /*0x10*/ long[] t3;
                                static /*0x18*/ long[] t4;
                                /*0x10*/ long a;
                                /*0x18*/ long b;
                                /*0x20*/ long c;
                                /*0x28*/ long byteCount;
                                /*0x30*/ byte[] m_buffer;
                                /*0x38*/ int bOff;
                                /*0x40*/ long[] x;
                                /*0x48*/ int xOff;

                                static /*0x2a64e58*/ TigerDigest();
                                /*0x2a63aac*/ TigerDigest();
                                /*0x2a63bf4*/ TigerDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.TigerDigest t);
                                /*0x2a63d88*/ int GetDigestSize();
                                /*0x2a63d90*/ int GetByteLength();
                                /*0x2a63d98*/ void ProcessWord(byte[] b, int off);
                                /*0x2a641f8*/ void ProcessWord(System.ReadOnlySpan<byte> b);
                                /*0x2a642bc*/ void Update(byte input);
                                /*0x2a6432c*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a64430*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a645dc*/ void RoundABC(long x, long mul);
                                /*0x2a64760*/ void RoundBCA(long x, long mul);
                                /*0x2a648e0*/ void RoundCAB(long x, long mul);
                                /*0x2a64a60*/ void KeySchedule();
                                /*0x2a63e14*/ void ProcessBlock();
                                /*0x2a64b2c*/ void ProcessLength(long bitLength);
                                /*0x2a64b58*/ void Finish();
                                /*0x2a64ba0*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a64c0c*/ int DoFinal(System.Span<byte> output);
                                /*0x2a63b50*/ void Reset();
                                /*0x2a64e00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a63ca0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class WhirlpoolDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ int[] SBOX;
                                static /*0x8*/ ulong[] C0;
                                static /*0x10*/ ulong[] C1;
                                static /*0x18*/ ulong[] C2;
                                static /*0x20*/ ulong[] C3;
                                static /*0x28*/ ulong[] C4;
                                static /*0x30*/ ulong[] C5;
                                static /*0x38*/ ulong[] C6;
                                static /*0x40*/ ulong[] C7;
                                static /*0x48*/ short[] EIGHT;
                                /*0x10*/ ulong[] _rc;
                                /*0x18*/ byte[] _buffer;
                                /*0x20*/ int _bufferPos;
                                /*0x28*/ short[] _bitCount;
                                /*0x30*/ ulong[] _hash;
                                /*0x38*/ ulong[] _K;
                                /*0x40*/ ulong[] _L;
                                /*0x48*/ ulong[] _block;
                                /*0x50*/ ulong[] _state;

                                static /*0x2a64fcc*/ WhirlpoolDigest();
                                static /*0x2a65490*/ int MulX(int input);
                                static /*0x2a654a4*/ ulong PackIntoUInt64(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0);
                                /*0x2a654d8*/ WhirlpoolDigest();
                                /*0x2a657e8*/ WhirlpoolDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest originalDigest);
                                /*0x2a65ac0*/ int GetDigestSize();
                                /*0x2a65ac8*/ int DoFinal(byte[] output, int outOff);
                                /*0x2a65ca0*/ int DoFinal(System.Span<byte> output);
                                /*0x2a65be4*/ void Reset();
                                /*0x2a65d20*/ void ProcessFilledBuffer();
                                /*0x2a65d68*/ void ProcessBlock();
                                /*0x2a66484*/ void Update(byte input);
                                /*0x2a664e8*/ void Increment();
                                /*0x2a665d8*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x2a66644*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x2a65b0c*/ void Finish();
                                /*0x2a666ac*/ byte[] CopyBitLength();
                                /*0x2a66750*/ int GetByteLength();
                                /*0x2a66758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x2a65958*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }
                        }

                        namespace Agreement
                        {
                            class DHBasicAgreement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters key;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams;

                                /*0x2a66b74*/ DHBasicAgreement();
                                /*0x2a667b0*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a6690c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters pubKey);
                            }

                            class ECDHBasicAgreement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privKey;

                                /*0x2a66f1c*/ ECDHBasicAgreement();
                                /*0x2a66b7c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x2a66c78*/ int GetFieldSize();
                                /*0x2a66cc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters pubKey);
                            }

                            namespace Srp
                            {
                                class Srp6Client
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger privA;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pubA;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;
                                    /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u;
                                    /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger S;
                                    /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                    /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                    /*0x2a66f24*/ Srp6Client();
                                    /*0x2a66f2c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    /*0x2a66f8c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters group, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    /*0x2a66fb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password);
                                    /*0x2a671a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                    /*0x2a673cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SelectPrivateValue();
                                    /*0x2a672fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateS();
                                }

                                class Srp6Utilities
                                {
                                    static /*0x2a67508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateK(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                    static /*0x2a672f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateU(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger A, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B);
                                    static /*0x2a6704c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, byte[] salt, byte[] identity, byte[] password);
                                    static /*0x2a67a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, System.ReadOnlySpan<byte> salt, System.ReadOnlySpan<byte> identity, System.ReadOnlySpan<byte> password);
                                    static /*0x2a673d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GeneratePrivateValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    static /*0x2a67218*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePublicValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                                    static /*0x2a67514*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger HashPaddedPair(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n2);
                                }
                            }
                        }
                    }

                    namespace Asn1
                    {
                        interface Asn1BitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x1f30214*/ System.IO.Stream GetBitStream();
                            /*0x1f2ffc8*/ int get_PadBits();
                        }

                        class Asn1Encodable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x2a68644*/ Asn1Encodable();
                            /*0x2a68294*/ void EncodeTo(System.IO.Stream output);
                            /*0x2a682c8*/ void EncodeTo(System.IO.Stream output, string encoding);
                            /*0x2a6830c*/ byte[] GetEncoded();
                            /*0x2a6839c*/ byte[] GetEncoded(string encoding);
                            /*0x2a6843c*/ byte[] GetDerEncoded();
                            /*0x2a684fc*/ int GetHashCode();
                            /*0x2a68530*/ bool Equals(object obj);
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class Asn1EncodableVector : System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] EmptyElements;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;
                            /*0x18*/ int elementCount;
                            /*0x1c*/ bool copyOnWrite;

                            static /*0x2a68f78*/ Asn1EncodableVector();
                            static /*0x2a68ec4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] CloneElements(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a6864c*/ Asn1EncodableVector();
                            /*0x2a68654*/ Asn1EncodableVector(int initialCapacity);
                            /*0x2a68768*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a6888c*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x2a688c8*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] v);
                            /*0x2a68794*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a68a38*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x2a688f4*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] objs);
                            /*0x2a68a60*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a68a6c*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x2a68aac*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a68b18*/ void AddOptionalTagged(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a68bcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x2a68c94*/ int get_Count();
                            /*0x2a68c9c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x2a68ca0*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x2a68d48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] CopyElements();
                            /*0x2a68df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] TakeElements();
                            /*0x2a68960*/ void Reallocate(int minCapacity);
                        }

                        class Asn1Exception : System.IO.IOException
                        {
                            /*0x2a68fec*/ Asn1Exception();
                            /*0x2a68ff4*/ Asn1Exception(string message);
                            /*0x2a68ffc*/ Asn1Exception(string message, System.Exception innerException);
                            /*0x2a69004*/ Asn1Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Asn1GeneralizedTime : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string m_timeString;
                            /*0x18*/ bool m_timeStringCanonical;
                            /*0x20*/ System.DateTime m_dateTime;

                            static /*0x2a69c98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1GeneralizedTime CreatePrimitive(byte[] contents);
                            static /*0x2a69190*/ System.DateTime FromString(string s);
                            static /*0x2a69d94*/ int IndexOfSign(string s, int startIndex);
                            static /*0x2a69e38*/ System.DateTime ParseLocal(string s, string format);
                            static /*0x2a69edc*/ System.DateTime ParseTimeZone(string s, string format);
                            static /*0x2a69cf0*/ System.DateTime ParseUtc(string s, string format);
                            static /*0x2a6991c*/ string ToStringCanonical(System.DateTime dateTime);
                            /*0x2a6900c*/ Asn1GeneralizedTime(string timeString);
                            /*0x2a69860*/ Asn1GeneralizedTime(byte[] contents);
                            /*0x2a698a8*/ System.DateTime ToDateTime();
                            /*0x2a698b0*/ byte[] GetContents(int encoding);
                            /*0x2a699e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a69ab8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a69b54*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a69c2c*/ int Asn1GetHashCode();
                        }

                        class Asn1InputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.FilterStream
                        {
                            /*0x30*/ int limit;
                            /*0x38*/ byte[][] tmpBuffers;

                            static /*0x2a6b2e4*/ int ReadTagNumber(System.IO.Stream s, int tagHdr);
                            static /*0x2a6b434*/ int ReadLength(System.IO.Stream s, int limit, bool isParsing);
                            static /*0x2a6c2a4*/ byte[] GetBuffer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn, byte[][] tmpBuffers);
                            static /*0x2a6c588*/ char[] GetBmpCharBuffer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            static /*0x2a6a434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreatePrimitiveDerObject(int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn, byte[][] tmpBuffers);
                            /*0x2a69f80*/ Asn1InputStream(byte[] input);
                            /*0x2a69ffc*/ Asn1InputStream(System.IO.Stream input, int limit);
                            /*0x2a6a07c*/ Asn1InputStream(System.IO.Stream input, int limit, byte[][] tmpBuffers);
                            /*0x2a6a0b4*/ void Dispose(bool disposing);
                            /*0x2a6a0e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object BuildObject(int tagHdr, int tagNo, int length);
                            /*0x2a6a81c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadTaggedObjectDL(int tagClass, int tagNo, bool constructed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x2a6acac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector();
                            /*0x2a6b080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x2a6b15c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence CreateDLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x2a6b1dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set CreateDLSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x2a6ad48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadObject();
                            /*0x2a6ba8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString BuildConstructedBitString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            /*0x2a6bee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString BuildConstructedOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                        }

                        class Asn1Null : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x2a6d0d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Null CreatePrimitive(byte[] contents);
                            /*0x2a6d588*/ Asn1Null();
                            /*0x2a6d590*/ string ToString();
                        }

                        class Asn1Object : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                        {
                            static /*0x2a6d8c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromByteArray(byte[] data);
                            /*0x2a69188*/ Asn1Object();
                            /*0x2a6d5d0*/ void EncodeTo(System.IO.Stream output);
                            /*0x2a6d70c*/ void EncodeTo(System.IO.Stream output, string encoding);
                            /*0x2a6d8a8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object other);
                            /*0x2a6dab8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            /*0x1f30240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x1f2fec8*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x1f2ffc8*/ int Asn1GetHashCode();
                            /*0x2a68638*/ bool CallAsn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object obj);
                            /*0x2a68524*/ int CallAsn1GetHashCode();
                        }

                        class Asn1ObjectDescriptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString m_baseGraphicString;

                            static /*0x2a6d1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1ObjectDescriptor CreatePrimitive(byte[] contents);
                            /*0x2a6dabc*/ Asn1ObjectDescriptor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString baseGraphicString);
                            /*0x2a6db38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a6db5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a6db78*/ int Asn1GetHashCode();
                            /*0x2a6dba0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class Asn1OctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            static /*0x0*/ byte[] EmptyOctets;
                            /*0x10*/ byte[] contents;

                            static /*0x2a6e3b0*/ Asn1OctetString();
                            static /*0x2a6dc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString GetInstance(object obj);
                            static /*0x2a6df9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            static /*0x2a6d248*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString CreatePrimitive(byte[] contents);
                            /*0x2a6e0e8*/ Asn1OctetString(byte[] contents);
                            /*0x2a6e164*/ System.IO.Stream GetOctetStream();
                            /*0x2a6e1c8*/ byte[] GetOctets();
                            /*0x2a6e1d0*/ int Asn1GetHashCode();
                            /*0x2a6e244*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a6e32c*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a6e514*/ Meta();
                                /*0x2a6e424*/ Meta();
                                /*0x2a6e4e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                                /*0x2a6e4f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }
                        }

                        interface Asn1OctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x1f30214*/ System.IO.Stream GetOctetStream();
                        }

                        class Asn1OutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.FilterStream
                        {
                            static /*0x2a6d6ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream Create(System.IO.Stream output);
                            static /*0x2a6d7f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream Create(System.IO.Stream output, string encoding);
                            static /*0x2a6e98c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] GetContentsEncodings(int encoding, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            static /*0x2a6eaa0*/ int GetLengthOfContents(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsEncodings);
                            static /*0x2a6eba0*/ int GetLengthOfDL(int dl);
                            static /*0x2a6ebd4*/ int GetLengthOfIdentifier(int tagNo);
                            /*0x2a6e578*/ Asn1OutputStream(System.IO.Stream os);
                            /*0x2a6e588*/ void EncodeContents(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsEncodings);
                            /*0x2a6e678*/ int get_Encoding();
                            /*0x2a6d708*/ void FlushInternal();
                            /*0x2a6e680*/ void WriteDL(int dl);
                            /*0x2a6e768*/ void WriteIdentifier(int tagClass, int tagNo);
                        }

                        class Asn1ParsingException : System.InvalidOperationException
                        {
                            /*0x2a6ec08*/ Asn1ParsingException();
                            /*0x2a6ec10*/ Asn1ParsingException(string message);
                            /*0x2a6ec18*/ Asn1ParsingException(string message, System.Exception innerException);
                            /*0x2a6ec20*/ Asn1ParsingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Asn1RelativeOid : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string identifier;
                            /*0x18*/ byte[] contents;

                            static /*0x2a6d2fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1RelativeOid CreatePrimitive(byte[] contents, bool clone);
                            static /*0x2a6f8c0*/ bool IsValidIdentifier(string identifier, int from);
                            static /*0x2a6f37c*/ void WriteField(System.IO.Stream outputStream, long fieldValue);
                            static /*0x2a6f5b0*/ void WriteField(System.IO.Stream outputStream, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger fieldValue);
                            static /*0x2a6eccc*/ string ParseContents(byte[] contents);
                            /*0x2a6ec28*/ Asn1RelativeOid(byte[] contents, bool clone);
                            /*0x2a6eeac*/ string ToString();
                            /*0x2a6eeb4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a6ef44*/ int Asn1GetHashCode();
                            /*0x2a6ef60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a6f138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a6f1c4*/ void DoOutput(System.IO.MemoryStream bOut);
                            /*0x2a6efe4*/ byte[] GetContents();
                        }

                        class Asn1Sequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;

                            static /*0x2a6f9b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence GetInstance(object obj);
                            static /*0x2a6fcfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            /*0x2a6fdc0*/ Asn1Sequence();
                            /*0x2a6fe30*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a6ff2c*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x2a70088*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a70180*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a70204*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x2a70214*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x2a702b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x2a702e4*/ int get_Count();
                            /*0x1f302cc*/ T[] MapElements<T>(System.Func<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, T> func);
                            /*0x2a702fc*/ int Asn1GetHashCode();
                            /*0x2a70390*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a704f8*/ string ToString();
                            /*0x2a70540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] GetConstructedOctetStrings();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a70670*/ Meta();
                                /*0x2a705f4*/ Meta();
                                /*0x2a70668*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }
                        }

                        class Asn1Set : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;
                            /*0x18*/ bool isSorted;

                            static /*0x2a706d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set GetInstance(object obj);
                            static /*0x2a70b80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] Sort(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a70a20*/ Asn1Set();
                            /*0x2a70a9c*/ Asn1Set(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector, bool doSort);
                            /*0x2a70cb4*/ Asn1Set(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a70d10*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x2a70d20*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x2a70dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x2a70df0*/ int get_Count();
                            /*0x2a70e08*/ int Asn1GetHashCode();
                            /*0x2a70e9c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a71004*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a710ec*/ Meta();
                                /*0x2a71054*/ Meta();
                                /*0x2a710c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }

                            class DerComparer : System.Collections.Generic.IComparer<System.Byte[]>
                            {
                                /*0x2a7104c*/ DerComparer();
                                /*0x2a71150*/ int Compare(byte[] a, byte[] b);
                            }
                        }

                        class Asn1StreamParser
                        {
                            /*0x10*/ System.IO.Stream _in;
                            /*0x18*/ int _limit;
                            /*0x20*/ byte[][] tmpBuffers;

                            /*0x2a6b6b4*/ Asn1StreamParser(System.IO.Stream input, int limit, byte[][] tmpBuffers);
                            /*0x2a712dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ReadObject();
                            /*0x2a71320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ImplParseObject(int tagHdr);
                            /*0x2a71c10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object LoadTaggedDL(int tagClass, int tagNo, bool constructed);
                            /*0x2a6b780*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object LoadTaggedIL(int tagClass, int tagNo);
                            /*0x2a71a98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitConstructedDL(int univTagNo);
                            /*0x2a716bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitConstructedIL(int univTagNo);
                            /*0x2a71834*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitPrimitive(int univTagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x2a71cd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector();
                            /*0x2a715e0*/ void Set00Check(bool enabled);
                        }

                        class Asn1Tag
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;

                            static /*0x2a720d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Tag Create(int tagClass, int tagNo);
                            /*0x2a72140*/ Asn1Tag(int tagClass, int tagNo);
                        }

                        class Asn1TaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ int explicitness;
                            /*0x14*/ int tagClass;
                            /*0x18*/ int tagNo;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj;

                            static /*0x2a7216c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject GetInstance(object obj);
                            static /*0x2a6abc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreateConstructedDL(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            static /*0x2a71e24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreateConstructedIL(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            static /*0x2a6ab1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreatePrimitive(int tagClass, int tagNo, byte[] contentsOctets);
                            static /*0x2a7242c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject CheckedCast(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a72514*/ Asn1TaggedObject(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a72530*/ Asn1TaggedObject(bool isExplicit, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a72540*/ Asn1TaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a726b0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a728d0*/ int Asn1GetHashCode();
                            /*0x2a72940*/ int get_TagClass();
                            /*0x2a72948*/ int get_TagNo();
                            /*0x2a728bc*/ bool IsExplicit();
                            /*0x2a72950*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetObject();
                            /*0x2a729c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetBaseObject();
                            /*0x2a729cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExplicitBaseObject();
                            /*0x2a72a30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetBaseUniversal(bool declaredExplicit, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType universalType);
                            /*0x2a72cd0*/ string ToString();
                            /*0x1f302cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class Asn1Type
                        {
                            /*0x10*/ System.Type m_platformType;

                            /*0x2a72e8c*/ Asn1Type(System.Type platformType);
                            /*0x2a72ebc*/ System.Type get_PlatformType();
                            /*0x2a72ec4*/ bool Equals(object that);
                            /*0x2a72ed0*/ int GetHashCode();
                        }

                        class Asn1UniversalType : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Type
                        {
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Tag m_tag;

                            /*0x2a6e498*/ Asn1UniversalType(System.Type platformType, int tagNo);
                            /*0x2a72c20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CheckedCast(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a72ed8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            /*0x2a72f24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            /*0x2a6df7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromByteArray(byte[] bytes);
                            /*0x2a6e060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetContextInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                        }

                        class Asn1UtcTime : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string m_timeString;
                            /*0x18*/ System.DateTime m_dateTime;
                            /*0x20*/ bool m_dateTimeLocked;
                            /*0x24*/ int m_twoDigitYearMax;

                            static /*0x2a6d41c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UtcTime CreatePrimitive(byte[] contents);
                            static /*0x2a730f0*/ System.DateTime FromString(string s, ref int twoDigitYearMax);
                            static /*0x2a73440*/ bool InRange(System.DateTime dateTime, int twoDigitYearMax);
                            static /*0x2a73524*/ string ToStringCanonical(System.DateTime dateTime);
                            /*0x2a72f70*/ Asn1UtcTime(string timeString);
                            /*0x2a732b0*/ Asn1UtcTime(byte[] contents);
                            /*0x2a732f8*/ System.DateTime ToDateTime(int twoDigitYearMax);
                            /*0x2a734b4*/ byte[] GetContents(int encoding);
                            /*0x2a735d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a73664*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a73700*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a737d8*/ int Asn1GetHashCode();
                            /*0x2a73844*/ string ToString();
                        }

                        class Asn1Utilities
                        {
                            static /*0x2a72d1c*/ string GetTagText(int tagClass, int tagNo);
                        }

                        class BerBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                        {
                            /*0x18*/ int segmentLimit;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString[] elements;

                            static /*0x2a6bc78*/ byte[] FlattenBitStrings(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString[] bitStrings);
                            /*0x2a7384c*/ BerBitString(byte[] data, int padBits);
                            /*0x2a73854*/ BerBitString(byte[] data, int padBits, int segmentLimit);
                            /*0x2a73a48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a73c54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerBitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.ConstructedBitStream m_bitStream;

                            static /*0x2a6b7ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerBitString Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x2a71f10*/ BerBitStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a73e30*/ System.IO.Stream GetBitStream();
                            /*0x2a73efc*/ int get_PadBits();
                            /*0x2a73f14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerOctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString
                        {
                            /*0x18*/ int segmentLimit;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements;

                            static /*0x2a6c0c8*/ byte[] FlattenOctetStrings(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] octetStrings);
                            /*0x2a74010*/ BerOctetString(byte[] contents);
                            /*0x2a74070*/ BerOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements);
                            /*0x2a7403c*/ BerOctetString(byte[] contents, int segmentLimit);
                            /*0x2a74078*/ BerOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements, int segmentLimit);
                            /*0x2a740c0*/ BerOctetString(byte[] contents, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements, int segmentLimit);
                            /*0x2a740f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a74238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerOctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x2a6b870*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerOctetString Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x2a71f70*/ BerOctetStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a74394*/ System.IO.Stream GetOctetStream();
                            /*0x2a74440*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence Empty;

                            static /*0x2a74ac4*/ BerSequence();
                            static /*0x2a72e00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a745a0*/ BerSequence();
                            /*0x2a745f8*/ BerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a7453c*/ BerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a74664*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7477c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a748b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x2a7498c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x2a749f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class BerSequenceParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x2a6b93c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x2a72000*/ BerSequenceParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a74b28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSet Empty;

                            static /*0x2a74e5c*/ BerSet();
                            /*0x2a74b30*/ BerSet();
                            /*0x2a74b88*/ BerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a74a58*/ BerSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a74bf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a74d18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerSetParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x2a6b9ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSet Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x2a72030*/ BerSetParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a74ec0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerTaggedObject
                        {
                            /*0x2a72e88*/ BerTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a74ecc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a75180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7544c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class BerTaggedObjectParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x2a71678*/ BerTaggedObjectParser(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a754a4*/ int get_TagClass();
                            /*0x2a754ac*/ int get_TagNo();
                            /*0x2a754b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class ConstructedBitStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x30*/ bool m_octetAligned;
                            /*0x31*/ bool m_first;
                            /*0x34*/ int m_padBits;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser m_currentParser;
                            /*0x40*/ System.IO.Stream m_currentStream;

                            /*0x2a73eb8*/ ConstructedBitStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser, bool octetAligned);
                            /*0x2a755b4*/ int get_PadBits();
                            /*0x2a755bc*/ int Read(byte[] buffer, int offset, int count);
                            /*0x2a75680*/ int Read(System.Span<byte> buffer);
                            /*0x2a75b10*/ int ReadByte();
                            /*0x2a75990*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser GetNextParser();
                        }

                        class ConstructedDLEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] m_contentsElements;
                            /*0x20*/ int m_contentsLength;

                            /*0x2a75cf8*/ ConstructedDLEncoding(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsElements);
                            /*0x2a75d4c*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x2a75d94*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class ConstructedILEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] m_contentsElements;

                            /*0x2a73c10*/ ConstructedILEncoding(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsElements);
                            /*0x2a75e04*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x2a75e88*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class ConstructedOctetStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x30*/ bool m_first;
                            /*0x38*/ System.IO.Stream m_currentStream;

                            /*0x2a74408*/ ConstructedOctetStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a75ed0*/ int Read(byte[] buffer, int offset, int count);
                            /*0x2a75f94*/ int Read(System.Span<byte> buffer);
                            /*0x2a76318*/ int ReadByte();
                            /*0x2a76218*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser GetNextParser();
                        }

                        class DefiniteLengthInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.LimitedInputStream
                        {
                            static /*0x0*/ byte[] EmptyBytes;
                            /*0x34*/ int _originalLength;
                            /*0x38*/ int _remaining;

                            static /*0x2a76a04*/ DefiniteLengthInputStream();
                            /*0x2a6a374*/ DefiniteLengthInputStream(System.IO.Stream inStream, int length, int limit);
                            /*0x2a7653c*/ int get_Remaining();
                            /*0x2a76544*/ int ReadByte();
                            /*0x2a76680*/ int Read(byte[] buf, int off, int len);
                            /*0x2a76804*/ int Read(System.Span<byte> buffer);
                            /*0x2a6c384*/ void ReadAllIntoByteArray(byte[] buf);
                            /*0x2a6a90c*/ byte[] ToArray();
                        }

                        class DerBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            static /*0x0*/ char[] table;
                            /*0x10*/ byte[] contents;

                            static /*0x2a77528*/ DerBitString();
                            static /*0x2a76a78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString GetInstance(object obj);
                            static /*0x2a76d08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool isExplicit);
                            static /*0x2a6ce04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString CreatePrimitive(byte[] contents);
                            /*0x2a76e20*/ DerBitString(byte[] data);
                            /*0x2a738e4*/ DerBitString(byte[] data, int padBits);
                            /*0x2a76e30*/ DerBitString(byte[] contents, bool check);
                            /*0x2a76f60*/ byte[] GetOctets();
                            /*0x2a77028*/ byte[] GetBytes();
                            /*0x2a7710c*/ int get_PadBits();
                            /*0x2a73b10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a73d30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a77184*/ int Asn1GetHashCode();
                            /*0x2a7722c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a77340*/ System.IO.Stream GetBitStream();
                            /*0x2a773b8*/ string GetString();
                        }

                        class DerBmpString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ string m_str;

                            static /*0x2a6c87c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBmpString CreatePrimitive(char[] str);
                            /*0x2a775c8*/ DerBmpString(char[] str);
                            /*0x2a77654*/ string GetString();
                            /*0x2a7765c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a776f4*/ int Asn1GetHashCode();
                            /*0x2a77710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a77878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a77794*/ byte[] GetContents();
                        }

                        class DerBoolean : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean False;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean True;
                            /*0x10*/ byte value;

                            static /*0x2a77fe0*/ DerBoolean();
                            static /*0x2a77904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean GetInstance(object obj);
                            static /*0x2a6c8d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean CreatePrimitive(byte[] contents);
                            /*0x2a77c08*/ DerBoolean(byte[] val);
                            /*0x2a77ca4*/ DerBoolean(bool value);
                            /*0x2a77cd8*/ bool get_IsTrue();
                            /*0x2a77ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a77e00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a77e9c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a77f34*/ int Asn1GetHashCode();
                            /*0x2a77f74*/ string ToString();
                            /*0x2a77d7c*/ byte[] GetContents(int encoding);

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a78174*/ Meta();
                                /*0x2a78088*/ Meta();
                                /*0x2a780fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerEnumerated : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated[] cache;
                            /*0x10*/ byte[] contents;
                            /*0x18*/ int start;

                            static /*0x2a78b40*/ DerEnumerated();
                            static /*0x2a781d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated GetInstance(object obj);
                            static /*0x2a6c9e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated CreatePrimitive(byte[] contents, bool clone);
                            /*0x2a784dc*/ DerEnumerated(int val);
                            /*0x2a785cc*/ DerEnumerated(byte[] contents, bool clone);
                            /*0x2a787d4*/ int get_IntValueExact();
                            /*0x2a78930*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a789a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a78a28*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a78ae4*/ int Asn1GetHashCode();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a78ca4*/ Meta();
                                /*0x2a78bb4*/ Meta();
                                /*0x2a78c28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerExternal : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier directReference;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger indirectReference;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1ObjectDescriptor dataValueDescriptor;
                            /*0x28*/ int encoding;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object externalContent;

                            static /*0x2a79154*/ int CheckEncoding(int encoding);
                            static /*0x2a791d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetExternalContent(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject encoding);
                            static /*0x2a79098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetObjFromSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence, int index);
                            /*0x2a78d08*/ DerExternal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector vector);
                            /*0x2a78d70*/ DerExternal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            /*0x2a79324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence BuildSequence();
                            /*0x2a794ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7951c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7955c*/ int Asn1GetHashCode();
                            /*0x2a795e4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerExternalParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            static /*0x2a6ba1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x2a71f40*/ DerExternalParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a796dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerGeneralString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6cf60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGeneralString CreatePrimitive(byte[] contents);
                            /*0x2a796e4*/ DerGeneralString(byte[] contents, bool clone);
                            /*0x2a797c4*/ string GetString();
                            /*0x2a797d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a79848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a798c8*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a79984*/ int Asn1GetHashCode();
                        }

                        class DerGraphicString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6cfbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString CreatePrimitive(byte[] contents);
                            /*0x2a799e0*/ DerGraphicString(byte[] contents, bool clone);
                            /*0x2a79ac0*/ string GetString();
                            /*0x2a79acc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a79b44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a79bc4*/ int Asn1GetHashCode();
                            /*0x2a79c20*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerIA5String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerIA5String CreatePrimitive(byte[] contents);
                            /*0x2a79cdc*/ DerIA5String(byte[] contents, bool clone);
                            /*0x2a79dbc*/ string GetString();
                            /*0x2a79dc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a79e40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a79ec0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a79f7c*/ int Asn1GetHashCode();
                        }

                        class DerInteger : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ byte[] bytes;
                            /*0x18*/ int start;

                            static /*0x2a79fd8*/ bool AllowUnsafe();
                            static /*0x2a7a088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger GetInstance(object obj);
                            static /*0x2a7a38c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            static /*0x2a6d074*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger CreatePrimitive(byte[] contents);
                            static /*0x2a78850*/ int IntValue(byte[] bytes, int start, int signExt);
                            static /*0x2a78710*/ bool IsMalformed(byte[] bytes);
                            static /*0x2a78764*/ int SignBytesToSkip(byte[] bytes);
                            /*0x2a7a450*/ DerInteger(int value);
                            /*0x2a7a4e8*/ DerInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x2a7a578*/ DerInteger(byte[] bytes, bool clone);
                            /*0x2a7a684*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PositiveValue();
                            /*0x2a7a6e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Value();
                            /*0x2a7a748*/ bool HasValue(int x);
                            /*0x2a7a794*/ int get_IntValueExact();
                            /*0x2a7a810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7a888*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7a908*/ int Asn1GetHashCode();
                            /*0x2a7a964*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7aa20*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a7aae0*/ Meta();
                                /*0x2a7aa40*/ Meta();
                                /*0x2a7aab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerNull : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Null
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerNull Instance;
                            static /*0x8*/ byte[] ZeroBytes;

                            static /*0x2a7ad14*/ DerNull();
                            /*0x2a7ab44*/ DerNull();
                            /*0x2a7ab4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7abec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7ac94*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7ad0c*/ int Asn1GetHashCode();
                        }

                        class DerNumericString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerNumericString CreatePrimitive(byte[] contents);
                            /*0x2a7adb4*/ DerNumericString(byte[] contents, bool clone);
                            /*0x2a7ae94*/ string GetString();
                            /*0x2a7aea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7af18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7af98*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7b054*/ int Asn1GetHashCode();
                        }

                        class DerObjectIdentifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier[] cache;
                            /*0x10*/ string identifier;
                            /*0x18*/ byte[] contents;

                            static /*0x2a7bf20*/ DerObjectIdentifier();
                            static /*0x2a7b0b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetInstance(object obj);
                            static /*0x2a6cbb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CreatePrimitive(byte[] contents, bool clone);
                            static /*0x2a7b52c*/ bool IsValidIdentifier(string identifier);
                            static /*0x2a7b77c*/ string ParseContents(byte[] contents);
                            /*0x2a7b3fc*/ DerObjectIdentifier(string identifier);
                            /*0x2a7b5a0*/ DerObjectIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string branchID);
                            /*0x2a7b6b4*/ DerObjectIdentifier(byte[] contents, bool clone);
                            /*0x2a7b9f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Branch(string branchID);
                            /*0x2a7ba60*/ string get_Id();
                            /*0x2a7ba68*/ string ToString();
                            /*0x2a7ba70*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7bb00*/ int Asn1GetHashCode();
                            /*0x2a7bb1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7bcf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7bd80*/ void DoOutput(System.IO.MemoryStream bOut);
                            /*0x2a7bba0*/ byte[] GetContents();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x2a7c084*/ Meta();
                                /*0x2a7bf94*/ Meta();
                                /*0x2a7c008*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerOctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString
                        {
                            /*0x2a6c240*/ DerOctetString(byte[] contents);
                            /*0x2a741c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a74314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DerOctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream;

                            /*0x2a72090*/ DerOctetStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream);
                            /*0x2a7c0e8*/ System.IO.Stream GetOctetStream();
                            /*0x2a7c0f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerOutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream
                        {
                            /*0x2a6e580*/ DerOutputStream(System.IO.Stream os);
                            /*0x2a7c248*/ int get_Encoding();
                        }

                        class DerPrintableString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerPrintableString CreatePrimitive(byte[] contents);
                            /*0x2a7c250*/ DerPrintableString(byte[] contents, bool clone);
                            /*0x2a7c330*/ string GetString();
                            /*0x2a7c33c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7c3b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7c434*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7c4f0*/ int Asn1GetHashCode();
                        }

                        class DerSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence Empty;

                            static /*0x2a7c6e4*/ DerSequence();
                            /*0x2a745f4*/ DerSequence();
                            /*0x2a7465c*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a7c54c*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x2a7c550*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a74660*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a74708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a74834*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7c554*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x2a7c5ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x2a7c618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class DerSequenceParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x2a71fd0*/ DerSequenceParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a7c748*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet Empty;

                            static /*0x2a7c8d4*/ DerSet();
                            /*0x2a74b84*/ DerSet();
                            /*0x2a7c7b4*/ DerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a74bf0*/ DerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector, bool doSort);
                            /*0x2a74bf4*/ DerSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a74c9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a74dd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7c7bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] GetSortedElements();
                        }

                        class DerSetParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x2a71fa0*/ DerSetParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a7c938*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerStringBase : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1String
                        {
                            /*0x2a76e28*/ DerStringBase();
                            /*0x1f30214*/ string GetString();
                            /*0x2a7c9a4*/ string ToString();
                            /*0x2a7c9b4*/ int Asn1GetHashCode();
                        }

                        class DerT61String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d364*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerT61String CreatePrimitive(byte[] contents);
                            /*0x2a7c9e0*/ DerT61String(byte[] contents, bool clone);
                            /*0x2a7cac0*/ string GetString();
                            /*0x2a7cacc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7cb44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7cbc4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7cc80*/ int Asn1GetHashCode();
                        }

                        class DerTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject
                        {
                            /*0x2a68bb0*/ DerTaggedObject(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a74ec8*/ DerTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a7503c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a75300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7ccdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerUniversalString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            static /*0x0*/ char[] table;
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a7d398*/ DerUniversalString();
                            static /*0x2a6d3c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerUniversalString CreatePrimitive(byte[] contents);
                            static /*0x2a7d0bc*/ void EncodeHexByte(System.Text.StringBuilder buf, int i);
                            static /*0x2a7cf74*/ void EncodeHexDL(System.Text.StringBuilder buf, int dl);
                            /*0x2a7cd34*/ DerUniversalString(byte[] contents, bool clone);
                            /*0x2a7ce14*/ string GetString();
                            /*0x2a7d188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7d200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7d280*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7d33c*/ int Asn1GetHashCode();
                        }

                        class DerUtf8String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerUtf8String CreatePrimitive(byte[] contents);
                            /*0x2a7d438*/ DerUtf8String(byte[] contents, bool clone);
                            /*0x2a7d518*/ string GetString();
                            /*0x2a7d524*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7d5e0*/ int Asn1GetHashCode();
                            /*0x2a7d63c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7d6b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DerVideotexString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d4d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerVideotexString CreatePrimitive(byte[] contents);
                            /*0x2a7d734*/ DerVideotexString(byte[] contents, bool clone);
                            /*0x2a7d814*/ string GetString();
                            /*0x2a7d820*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7d898*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7d918*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7d9d4*/ int Asn1GetHashCode();
                        }

                        class DerVisibleString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x2a6d52c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerVisibleString CreatePrimitive(byte[] contents);
                            /*0x2a7da30*/ DerVisibleString(byte[] contents, bool clone);
                            /*0x2a7db10*/ string GetString();
                            /*0x2a7db1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7db94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7dc14*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x2a7dcd0*/ int Asn1GetHashCode();
                        }

                        class DLBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                        {
                            /*0x2a6be74*/ DLBitString(byte[] contents, bool check);
                            /*0x2a7dd2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7ddc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DLBitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream m_stream;
                            /*0x18*/ int m_padBits;

                            /*0x2a72060*/ DLBitStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream);
                            /*0x2a7de68*/ System.IO.Stream GetBitStream();
                            /*0x2a7dfc8*/ int get_PadBits();
                            /*0x2a7dfd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            /*0x2a7de70*/ System.IO.Stream GetBitStream(bool octetAligned);
                        }

                        class DLSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSequence Empty;

                            static /*0x2a7e3dc*/ DLSequence();
                            static /*0x2a6a884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSequence FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a7e188*/ DLSequence();
                            /*0x2a7e1dc*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x2a74928*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a7e124*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a7e240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7e2d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7e37c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class DLSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSet Empty;

                            static /*0x2a7e638*/ DLSet();
                            static /*0x2a6b25c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSet FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a7e4a8*/ DLSet();
                            /*0x2a7e440*/ DLSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x2a7c678*/ DLSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x2a7e4fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7e58c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DLTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerTaggedObject
                        {
                            /*0x2a72dfc*/ DLTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x2a7e69c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x2a7e800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x2a7e974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DLTaggedObjectParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerTaggedObjectParser
                        {
                            /*0x20*/ bool m_constructed;

                            /*0x2a71a48*/ DLTaggedObjectParser(int tagClass, int tagNo, bool constructed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x2a7e9cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        interface IAsn1Choice
                        {
                        }

                        interface IAsn1Convertible
                        {
                            /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        interface IAsn1Encoding
                        {
                            /*0x1f30ebc*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x1f2ffc8*/ int GetLength();
                        }

                        interface IAsn1String
                        {
                            /*0x1f30214*/ string GetString();
                        }

                        class IndefiniteLengthInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.LimitedInputStream
                        {
                            /*0x34*/ int _lookAhead;
                            /*0x38*/ bool _eofOn00;

                            /*0x2a6b650*/ IndefiniteLengthInputStream(System.IO.Stream inStream, int limit);
                            /*0x2a720c0*/ void SetEofOn00(bool eofOn00);
                            /*0x2a7eb20*/ void CheckEndOfContents();
                            /*0x2a7eb8c*/ int Read(byte[] buffer, int offset, int count);
                            /*0x2a7ec90*/ int Read(System.Span<byte> buffer);
                            /*0x2a7ee00*/ int ReadByte();
                            /*0x2a7eac0*/ int RequireByte();
                        }

                        class LimitedInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ System.IO.Stream _in;
                            /*0x30*/ int _limit;

                            /*0x2a76470*/ LimitedInputStream(System.IO.Stream inStream, int limit);
                            /*0x2a7ee50*/ int get_Limit();
                            /*0x2a764ac*/ void SetParentEofDetect();
                        }

                        class OidTokenizer
                        {
                            /*0x10*/ string oid;
                            /*0x18*/ int index;

                            /*0x2a6f2c4*/ OidTokenizer(string oid);
                            /*0x2a6f8b0*/ bool get_HasMoreTokens();
                            /*0x2a6f2f4*/ string NextToken();
                        }

                        class PrimitiveEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ byte[] m_contentsOctets;

                            /*0x2a69a74*/ PrimitiveEncoding(int tagClass, int tagNo, byte[] contentsOctets);
                            /*0x2a7ee58*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x2a7eebc*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class PrimitiveEncodingSuffixed : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ byte[] m_contentsOctets;
                            /*0x20*/ byte m_contentsSuffix;

                            /*0x2a77134*/ PrimitiveEncodingSuffixed(int tagClass, int tagNo, byte[] contentsOctets, byte contentsSuffix);
                            /*0x2a7ef40*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x2a7efc0*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        namespace X9
                        {
                            class DHDomainParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger j;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms validationParms;

                                static /*0x2a7f044*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHDomainParameters GetInstance(object obj);
                                static /*0x2a7f3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetNext(System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> e);
                                /*0x2a7f1c0*/ DHDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a7f678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_P();
                                /*0x2a7f680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_G();
                                /*0x2a7f688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_Q();
                                /*0x2a7f690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_J();
                                /*0x2a7f698*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms get_ValidationParms();
                                /*0x2a7f6a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DHPublicKey : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger y;

                                static /*0x2a7f824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHPublicKey GetInstance(object obj);
                                /*0x2a7f9a0*/ DHPublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger y);
                                /*0x2a7fa1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_Y();
                                /*0x2a7fa24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DHValidationParms : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString seed;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger pgenCounter;

                                static /*0x2a7f4fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms GetInstance(object obj);
                                /*0x2a7fa2c*/ DHValidationParms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a7fbb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString get_Seed();
                                /*0x2a7fbbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_PgenCounter();
                                /*0x2a7fbc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class ECNamedCurveTable
                            {
                                static /*0x2a7fc24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2a7fe3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                            }

                            class X962NamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2a80294*/ X962NamedCurves();
                                static /*0x2a8000c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x2a800fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2a80100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2a80198*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2a7fdbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2a7ffa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a80d2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a80cb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Prime192v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a81068*/ Prime192v1Holder();
                                    /*0x2a80da4*/ Prime192v1Holder();
                                    /*0x2a80dac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a80f0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime192v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a81394*/ Prime192v2Holder();
                                    /*0x2a810d0*/ Prime192v2Holder();
                                    /*0x2a810d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a81238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime192v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a816c0*/ Prime192v3Holder();
                                    /*0x2a813fc*/ Prime192v3Holder();
                                    /*0x2a81404*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a81564*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a819f4*/ Prime239v1Holder();
                                    /*0x2a81728*/ Prime239v1Holder();
                                    /*0x2a81730*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a81898*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a81d28*/ Prime239v2Holder();
                                    /*0x2a81a5c*/ Prime239v2Holder();
                                    /*0x2a81a64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a81bcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a8205c*/ Prime239v3Holder();
                                    /*0x2a81d90*/ Prime239v3Holder();
                                    /*0x2a81d98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a81f00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime256v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a82390*/ Prime256v1Holder();
                                    /*0x2a820c4*/ Prime256v1Holder();
                                    /*0x2a820cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a82234*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a826a4*/ C2pnb163v1Holder();
                                    /*0x2a823f8*/ C2pnb163v1Holder();
                                    /*0x2a82400*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a82548*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a82968*/ C2pnb163v2Holder();
                                    /*0x2a8270c*/ C2pnb163v2Holder();
                                    /*0x2a82714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a8285c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a82c2c*/ C2pnb163v3Holder();
                                    /*0x2a829d0*/ C2pnb163v3Holder();
                                    /*0x2a829d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a82b20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb176w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a82ef0*/ C2pnb176w1Holder();
                                    /*0x2a82c94*/ C2pnb176w1Holder();
                                    /*0x2a82c9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a82de4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a831f0*/ C2tnb191v1Holder();
                                    /*0x2a82f58*/ C2tnb191v1Holder();
                                    /*0x2a82f60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a83094*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a834a8*/ C2tnb191v2Holder();
                                    /*0x2a83258*/ C2tnb191v2Holder();
                                    /*0x2a83260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a8339c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a83760*/ C2tnb191v3Holder();
                                    /*0x2a83510*/ C2tnb191v3Holder();
                                    /*0x2a83518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a83654*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb208w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a83a0c*/ C2pnb208w1Holder();
                                    /*0x2a837c8*/ C2pnb208w1Holder();
                                    /*0x2a837d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a83900*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a83cc4*/ C2tnb239v1Holder();
                                    /*0x2a83a74*/ C2tnb239v1Holder();
                                    /*0x2a83a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a83bb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a83f7c*/ C2tnb239v2Holder();
                                    /*0x2a83d2c*/ C2tnb239v2Holder();
                                    /*0x2a83d34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a83e70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a84234*/ C2tnb239v3Holder();
                                    /*0x2a83fe4*/ C2tnb239v3Holder();
                                    /*0x2a83fec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a84128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb272w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a844f8*/ C2pnb272w1Holder();
                                    /*0x2a8429c*/ C2pnb272w1Holder();
                                    /*0x2a842a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a843ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb304w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a847bc*/ C2pnb304w1Holder();
                                    /*0x2a84560*/ C2pnb304w1Holder();
                                    /*0x2a84568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a846b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb359v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a84a74*/ C2tnb359v1Holder();
                                    /*0x2a84824*/ C2tnb359v1Holder();
                                    /*0x2a8482c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a84968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb368w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a84d38*/ C2pnb368w1Holder();
                                    /*0x2a84adc*/ C2pnb368w1Holder();
                                    /*0x2a84ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a84c2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb431r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a84ff0*/ C2tnb431r1Holder();
                                    /*0x2a84da0*/ C2tnb431r1Holder();
                                    /*0x2a84da8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a84ee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class X962Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object _params;

                                static /*0x2a85058*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X962Parameters GetInstance(object obj);
                                /*0x2a85300*/ X962Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object obj);
                                /*0x2a85330*/ bool get_IsNamedCurve();
                                /*0x2a853ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object get_Parameters();
                                /*0x2a853b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x18*/ byte[] seed;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier fieldIdentifier;

                                /*0x2a853bc*/ X9Curve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, byte[] seed);
                                /*0x2a85554*/ X9Curve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID fieldID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a85d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x2a85d48*/ byte[] GetSeed();
                                /*0x2a85da4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9ECParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID fieldID;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h;
                                /*0x38*/ byte[] seed;

                                /*0x2a85fd0*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a864a4*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h);
                                /*0x2a864ac*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x2a86c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x2a86c98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_G();
                                /*0x2a86d38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                                /*0x2a86d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_H();
                                /*0x2a86d48*/ byte[] GetSeed();
                                /*0x2a86d50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9ECParametersHolder
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters m_parameters;

                                /*0x2a87218*/ X9ECParametersHolder();
                                /*0x2a87014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x2a87104*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters get_Parameters();
                                /*0x2a871f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                /*0x1f30214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                            }

                            class X9ECPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString encoding;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p;

                                /*0x2a87220*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, bool compressed);
                                /*0x2a872ec*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, byte[] encoding);
                                /*0x2a86460*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString s);
                                /*0x2a86cac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Point();
                                /*0x2a873b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement f;

                                /*0x2a873bc*/ X9FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement f);
                                /*0x2a873ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9FieldID : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object parameters;

                                static /*0x2a863c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID GetInstance(object obj);
                                /*0x2a86884*/ X9FieldID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger primeP);
                                /*0x2a8693c*/ X9FieldID(int m, int k1);
                                /*0x2a86948*/ X9FieldID(int m, int k1, int k2, int k3);
                                /*0x2a875b4*/ X9FieldID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a8768c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Identifier();
                                /*0x2a87694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object get_Parameters();
                                /*0x2a8769c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9IntegerConverter
                            {
                                static /*0x2a8749c*/ int GetByteLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement fe);
                                static /*0x2a874d0*/ byte[] IntegerToBytes(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s, int qLength);
                            }

                            class X9ObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ansi_X9_62;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdFieldType;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrimeField;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CharacteristicTwoField;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GNBasis;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TPBasis;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PPBasis;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_ecSigType;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_publicKeyType;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdECPublicKey;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha2;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha224;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha384;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha512;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CTwoCurve;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v2;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v3;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb176w1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v1;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v2;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v3;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb191v4;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb191v5;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb208w1;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v1;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v3;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb239v4;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb239v5;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb272w1;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb304w1;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb359v1;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb368w1;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb431r1;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrimeCurve;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v1;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v2;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v3;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v1;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v2;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v3;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime256v1;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsa;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha1;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X9x63Scheme;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHSinglePassStdDHSha1KdfScheme;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHSinglePassCofactorDHSha1KdfScheme;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MqvSinglePassSha1KdfScheme;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ansi_x9_42;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHPublicNumber;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X9x42Schemes;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHStatic;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHEphem;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHOneFlow;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybrid1;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybrid2;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybridOneFlow;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Mqv2;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Mqv1;

                                static /*0x2a87700*/ X9ObjectIdentifiers();
                            }
                        }

                        namespace X509
                        {
                            class AlgorithmIdentifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable parameters;

                                static /*0x2a887a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool explicitly);
                                static /*0x2a887b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier GetInstance(object obj);
                                /*0x2a88a04*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm);
                                /*0x2a88a34*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable parameters);
                                /*0x2a88854*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a88a78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Algorithm();
                                /*0x2a88a80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Parameters();
                                /*0x2a88a88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DigestInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ byte[] digest;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID;

                                /*0x2a88b2c*/ DigestInfo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID, byte[] digest);
                                /*0x2a88b70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DsaParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;

                                static /*0x2a88c08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.DsaParameter GetInstance(object obj);
                                /*0x2a88d70*/ DsaParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a88ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x2a88ef8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x2a88f10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x2a88f28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class KeyUsage : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                            {
                                static /*0x2a89064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.KeyUsage GetInstance(object obj);
                                static /*0x2a89310*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.KeyUsage FromExtensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions);
                                /*0x2a89278*/ KeyUsage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString usage);
                                /*0x2a89390*/ string ToString();
                            }

                            class RsaPublicKeyStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger publicExponent;

                                static /*0x2a89450*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure GetInstance(object obj);
                                /*0x2a895b8*/ RsaPublicKeyStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a896fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Modulus();
                                /*0x2a89704*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PublicExponent();
                                /*0x2a8970c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class SubjectPublicKeyInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString keyData;

                                static /*0x2a897c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo GetInstance(object obj);
                                /*0x2a8985c*/ SubjectPublicKeyInfo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a899e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_AlgorithmID();
                                /*0x2a899f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ParsePublicKey();
                                /*0x2a89a1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString get_PublicKeyData();
                                /*0x2a89a24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class TbsCertificateStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger version;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger serialNumber;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier signature;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name issuer;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time startDate;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time endDate;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name subject;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo subjectPublicKeyInfo;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString issuerUniqueID;
                                /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString subjectUniqueID;
                                /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions;

                                static /*0x2a89a88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure GetInstance(object obj);
                                /*0x2a89b24*/ TbsCertificateStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a8a52c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
                                /*0x2a8a534*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions get_Extensions();
                                /*0x2a8a53c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class Time : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object m_timeObject;

                                static /*0x2a8a1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time GetInstance(object obj);
                                /*0x2a8a8f8*/ Time(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1GeneralizedTime generalizedTime);
                                /*0x2a8a86c*/ Time(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UtcTime utcTime);
                                /*0x2a8a97c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                                /*0x2a8a984*/ string ToString();
                            }

                            class X509CertificateStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure tbsCert;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier sigAlgID;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString sig;

                                static /*0x2a8ab40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure GetInstance(object obj);
                                /*0x2a8abdc*/ X509CertificateStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a8ad4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure get_TbsCertificate();
                                /*0x2a8ad54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
                                /*0x2a8ad6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_SignatureAlgorithm();
                                /*0x2a8ad74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X509Extension
                            {
                                /*0x10*/ bool critical;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString value;

                                static /*0x2a89170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ConvertValueToObject(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension ext);
                                /*0x2a8aeb0*/ X509Extension(bool critical, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString value);
                                /*0x2a8aee8*/ bool get_IsCritical();
                                /*0x2a8aef0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString get_Value();
                                /*0x2a8aef8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetParsedValue();
                                /*0x2a8aefc*/ int GetHashCode();
                                /*0x2a8af30*/ bool Equals(object obj);
                            }

                            class X509Extensions : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectDirectoryAttributes;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectKeyIdentifier;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier KeyUsage;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrivateKeyUsagePeriod;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectAlternativeName;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IssuerAlternativeName;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BasicConstraints;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlNumber;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ReasonCode;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InstructionCode;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InvalidityDate;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DeltaCrlIndicator;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IssuingDistributionPoint;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertificateIssuer;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NameConstraints;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlDistributionPoints;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertificatePolicies;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PolicyMappings;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuthorityKeyIdentifier;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PolicyConstraints;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ExtendedKeyUsage;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier FreshestCrl;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InhibitAnyPolicy;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuthorityInfoAccess;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectInfoAccess;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier LogoType;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BiometricInfo;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier QCStatements;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuditIdentity;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NoRevAvail;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TargetInformation;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ExpiredCertsOnCrl;
                                /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension> m_extensions;
                                /*0x18*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> m_ordering;

                                static /*0x2a8bbdc*/ X509Extensions();
                                static /*0x2a89384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExtensionParsedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a8a34c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions GetInstance(object obj);
                                /*0x2a8b000*/ X509Extensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a8b734*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x2a8afe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExtensionParsedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x2a8b78c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X509Name : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier O;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OU;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier T;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CN;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Street;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SerialNumber;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier L;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ST;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Surname;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GivenName;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Initials;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Generation;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UniqueIdentifier;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BusinessCategory;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PostalCode;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DnQualifier;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pseudonym;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DateOfBirth;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PlaceOfBirth;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Gender;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryOfCitizenship;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryOfResidence;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NameAtBirth;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PostalAddress;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DmdName;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TelephoneNumber;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OrganizationIdentifier;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Name;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EmailAddress;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UnstructuredName;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UnstructuredAddress;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier E;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DC;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UID;
                                static /*0x118*/ bool[] defaultReverse;
                                static /*0x120*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> DefaultSymbolsInternal;
                                static /*0x128*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> DefaultSymbols;
                                static /*0x130*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC2253SymbolsInternal;
                                static /*0x138*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC2253Symbols;
                                static /*0x140*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC1779SymbolsInternal;
                                static /*0x148*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC1779Symbols;
                                static /*0x150*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> DefaultLookupInternal;
                                static /*0x158*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> DefaultLookup;
                                /*0x10*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> ordering;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509NameEntryConverter converter;
                                /*0x20*/ System.Collections.Generic.IList<string> values;
                                /*0x28*/ System.Collections.Generic.IList<bool> added;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq;
                                /*0x38*/ string cachedStrRepresentation;

                                static /*0x2a8c594*/ X509Name();
                                static /*0x2a8c450*/ bool get_DefaultReverse();
                                static /*0x2a8a11c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name GetInstance(object obj);
                                /*0x2a8fc18*/ X509Name(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a904f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                                /*0x2a90820*/ void AppendValue(System.Text.StringBuilder buf, System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> oidSymbols, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string val);
                                /*0x2a90ab8*/ string ToString(bool reverse, System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> oidSymbols);
                                /*0x2a90f30*/ string ToString();
                            }

                            class X509NameEntryConverter
                            {
                                /*0x1f30394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetConvertedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string value);
                            }

                            class X509ObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CommonName;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryName;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier LocalityName;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier StateOrProvinceName;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Organization;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OrganizationalUnitName;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_telephoneNumber;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_name;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_organizationIdentifier;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160WithRsaEncryption;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEARsa;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPkix;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPE;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAD;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdADCAIssuers;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdADOcsp;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OcspAccessMethod;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlAccessMethod;

                                static /*0x2a90fc0*/ X509ObjectIdentifiers();
                            }
                        }

                        namespace UA
                        {
                            class UAObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UaOid;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu4145le;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu4145be;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_256;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_384;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_512;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_256;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_384;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_512;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_128;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_256;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_512;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_128;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_512;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_128;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_256;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_512;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_128;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_256;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_512;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_128;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_256;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_512;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_128;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_256;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_512;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_128;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_256;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_512;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_128;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_256;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_512;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_128;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_256;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_512;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_128;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_256;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_512;

                                static /*0x2a91588*/ UAObjectIdentifiers();
                            }
                        }

                        namespace TeleTrust
                        {
                            class TeleTrusTNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2a923f0*/ TeleTrusTNamedCurves();
                                static /*0x2a92170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x2a92258*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2a9225c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2a922f4*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2a92ad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2a92bcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a92c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a92b54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class BrainpoolP160r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a92f14*/ BrainpoolP160r1Holder();
                                    /*0x2a92cac*/ BrainpoolP160r1Holder();
                                    /*0x2a92cb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a92e10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP160t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a931e4*/ BrainpoolP160t1Holder();
                                    /*0x2a92f7c*/ BrainpoolP160t1Holder();
                                    /*0x2a92f84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a930e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP192r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a934b4*/ BrainpoolP192r1Holder();
                                    /*0x2a9324c*/ BrainpoolP192r1Holder();
                                    /*0x2a93254*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a933b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP192t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a93784*/ BrainpoolP192t1Holder();
                                    /*0x2a9351c*/ BrainpoolP192t1Holder();
                                    /*0x2a93524*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a93680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP224r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a93a54*/ BrainpoolP224r1Holder();
                                    /*0x2a937ec*/ BrainpoolP224r1Holder();
                                    /*0x2a937f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a93950*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP224t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a93d24*/ BrainpoolP224t1Holder();
                                    /*0x2a93abc*/ BrainpoolP224t1Holder();
                                    /*0x2a93ac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a93c20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP256r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a93ff4*/ BrainpoolP256r1Holder();
                                    /*0x2a93d8c*/ BrainpoolP256r1Holder();
                                    /*0x2a93d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a93ef0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP256t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a942c4*/ BrainpoolP256t1Holder();
                                    /*0x2a9405c*/ BrainpoolP256t1Holder();
                                    /*0x2a94064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a941c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP320r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a94594*/ BrainpoolP320r1Holder();
                                    /*0x2a9432c*/ BrainpoolP320r1Holder();
                                    /*0x2a94334*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a94490*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP320t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a94864*/ BrainpoolP320t1Holder();
                                    /*0x2a945fc*/ BrainpoolP320t1Holder();
                                    /*0x2a94604*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a94760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP384r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a94b34*/ BrainpoolP384r1Holder();
                                    /*0x2a948cc*/ BrainpoolP384r1Holder();
                                    /*0x2a948d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a94a30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP384t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a94e04*/ BrainpoolP384t1Holder();
                                    /*0x2a94b9c*/ BrainpoolP384t1Holder();
                                    /*0x2a94ba4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a94d00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP512r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a950d4*/ BrainpoolP512r1Holder();
                                    /*0x2a94e6c*/ BrainpoolP512r1Holder();
                                    /*0x2a94e74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a94fd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP512t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a953a4*/ BrainpoolP512t1Holder();
                                    /*0x2a9513c*/ BrainpoolP512t1Holder();
                                    /*0x2a95144*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a952a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class TeleTrusTObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TeleTrusTAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD128;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD256;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD160;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD128;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD256;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSign;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSignWithSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSignWithRipeMD160;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EccBrainpool;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VersionOne;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP160R1;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP160T1;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP192R1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP192T1;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP224R1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP224T1;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP256R1;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP256T1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP320R1;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP320T1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP384R1;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP384T1;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP512R1;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP512T1;

                                static /*0x2a9540c*/ TeleTrusTObjectIdentifiers();
                            }
                        }

                        namespace Sec
                        {
                            class SecNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2a96320*/ SecNamedCurves();
                                static /*0x2a95ffc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x2a960e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2a960e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurveGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters p);
                                static /*0x2a9618c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2a96224*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2a970d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2a971d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a97238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2a97158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Secp112r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9756c*/ Secp112r1Holder();
                                    /*0x2a972b0*/ Secp112r1Holder();
                                    /*0x2a972b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a97418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp112r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a97898*/ Secp112r2Holder();
                                    /*0x2a975d4*/ Secp112r2Holder();
                                    /*0x2a975dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a97744*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp128r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a97bbc*/ Secp128r1Holder();
                                    /*0x2a97900*/ Secp128r1Holder();
                                    /*0x2a97908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a97a68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp128r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a97ee8*/ Secp128r2Holder();
                                    /*0x2a97c24*/ Secp128r2Holder();
                                    /*0x2a97c2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a97d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a98448*/ Secp160k1Holder();
                                    /*0x2a97f50*/ Secp160k1Holder();
                                    /*0x2a97f58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a98344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9876c*/ Secp160r1Holder();
                                    /*0x2a984b0*/ Secp160r1Holder();
                                    /*0x2a984b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a98618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a98a90*/ Secp160r2Holder();
                                    /*0x2a987d4*/ Secp160r2Holder();
                                    /*0x2a987dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9893c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp192k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a98ff0*/ Secp192k1Holder();
                                    /*0x2a98af8*/ Secp192k1Holder();
                                    /*0x2a98b00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a98eec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp192r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a99314*/ Secp192r1Holder();
                                    /*0x2a99058*/ Secp192r1Holder();
                                    /*0x2a99060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a991c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp224k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a99874*/ Secp224k1Holder();
                                    /*0x2a9937c*/ Secp224k1Holder();
                                    /*0x2a99384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a99770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp224r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a99b98*/ Secp224r1Holder();
                                    /*0x2a998dc*/ Secp224r1Holder();
                                    /*0x2a998e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a99a44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp256k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9a0f8*/ Secp256k1Holder();
                                    /*0x2a99c00*/ Secp256k1Holder();
                                    /*0x2a99c08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a99ff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp256r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9a41c*/ Secp256r1Holder();
                                    /*0x2a9a160*/ Secp256r1Holder();
                                    /*0x2a9a168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9a2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp384r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9a740*/ Secp384r1Holder();
                                    /*0x2a9a484*/ Secp384r1Holder();
                                    /*0x2a9a48c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9a5ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp521r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9aa64*/ Secp521r1Holder();
                                    /*0x2a9a7a8*/ Secp521r1Holder();
                                    /*0x2a9a7b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9a910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect113r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9ad64*/ Sect113r1Holder();
                                    /*0x2a9aacc*/ Sect113r1Holder();
                                    /*0x2a9aad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9ac10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect113r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9b064*/ Sect113r2Holder();
                                    /*0x2a9adcc*/ Sect113r2Holder();
                                    /*0x2a9add4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9af10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect131r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9b370*/ Sect131r1Holder();
                                    /*0x2a9b0cc*/ Sect131r1Holder();
                                    /*0x2a9b0d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9b21c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect131r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9b67c*/ Sect131r2Holder();
                                    /*0x2a9b3d8*/ Sect131r2Holder();
                                    /*0x2a9b3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9b528*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9b8fc*/ Sect163k1Holder();
                                    /*0x2a9b6e4*/ Sect163k1Holder();
                                    /*0x2a9b6ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9b7f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9bc08*/ Sect163r1Holder();
                                    /*0x2a9b964*/ Sect163r1Holder();
                                    /*0x2a9b96c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9bab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9befc*/ Sect163r2Holder();
                                    /*0x2a9bc70*/ Sect163r2Holder();
                                    /*0x2a9bc78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9bda8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect193r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9c1fc*/ Sect193r1Holder();
                                    /*0x2a9bf64*/ Sect193r1Holder();
                                    /*0x2a9bf6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9c0a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect193r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9c4fc*/ Sect193r2Holder();
                                    /*0x2a9c264*/ Sect193r2Holder();
                                    /*0x2a9c26c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9c3a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect233k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9c770*/ Sect233k1Holder();
                                    /*0x2a9c564*/ Sect233k1Holder();
                                    /*0x2a9c56c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9c66c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect233r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9ca58*/ Sect233r1Holder();
                                    /*0x2a9c7d8*/ Sect233r1Holder();
                                    /*0x2a9c7e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9c904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect239k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9cccc*/ Sect239k1Holder();
                                    /*0x2a9cac0*/ Sect239k1Holder();
                                    /*0x2a9cac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9cbc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect283k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9cf4c*/ Sect283k1Holder();
                                    /*0x2a9cd34*/ Sect283k1Holder();
                                    /*0x2a9cd3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9ce48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect283r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9d240*/ Sect283r1Holder();
                                    /*0x2a9cfb4*/ Sect283r1Holder();
                                    /*0x2a9cfbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9d0ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect409k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9d4b4*/ Sect409k1Holder();
                                    /*0x2a9d2a8*/ Sect409k1Holder();
                                    /*0x2a9d2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9d3b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect409r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9d79c*/ Sect409r1Holder();
                                    /*0x2a9d51c*/ Sect409r1Holder();
                                    /*0x2a9d524*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9d648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect571k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9da1c*/ Sect571k1Holder();
                                    /*0x2a9d804*/ Sect571k1Holder();
                                    /*0x2a9d80c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9d918*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect571r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2a9dd10*/ Sect571r1Holder();
                                    /*0x2a9da84*/ Sect571r1Holder();
                                    /*0x2a9da8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2a9dbbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class SecObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163k1;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163r1;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT239k1;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT113r1;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT113r2;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP112r1;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP112r2;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160r1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160k1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP256k1;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163r2;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT283k1;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT283r1;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT131r1;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT131r2;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT193r1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT193r2;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT233k1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT233r1;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP128r1;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP128r2;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160r2;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP192k1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP224k1;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP224r1;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP384r1;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP521r1;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT409k1;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT409r1;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT571k1;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT571r1;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP192r1;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP256r1;

                                static /*0x2a9dd78*/ SecObjectIdentifiers();
                            }
                        }

                        namespace Rosstandart
                        {
                            class RosstandartObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier rosstandart;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3411_12_256;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3411_12_512;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_hmac_gost_3411_12_256;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_hmac_gost_3411_12_512;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_256;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_512;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement_gost_3410_12_256;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement_gost_3410_12_512;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256_paramSet;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256_paramSetA;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSet;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetA;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetB;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetC;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_28147_param_Z;

                                static /*0x2a9ec10*/ RosstandartObjectIdentifiers();
                            }
                        }

                        namespace Pkcs
                        {
                            class DHParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger l;

                                /*0x2a9f204*/ DHParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2a9f624*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x2a9f63c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x2a9f654*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_L();
                                /*0x2a9f668*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class PkcsObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs1Oid;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaEncryption;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD2WithRsaEncryption;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsaEncryption;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5WithRsaEncryption;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha1WithRsaEncryption;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SrsaOaepEncryptionSet;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsaesOaep;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdMgf1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPSpecified;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPss;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha256WithRsaEncryption;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha384WithRsaEncryption;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512WithRsaEncryption;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha224WithRsaEncryption;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512_224WithRSAEncryption;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512_256WithRSAEncryption;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DhKeyAgreement;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD2AndDesCbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD2AndRC2Cbc;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD5AndDesCbc;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD5AndRC2Cbc;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithSha1AndDesCbc;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithSha1AndRC2Cbc;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPbeS2;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPbkdf2;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEde3Cbc;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RC2Cbc;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier rc4;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha1;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha224;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha256;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha384;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha512;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Data;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SignedData;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EnvelopedData;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SignedAndEnvelopedData;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DigestedData;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EncryptedData;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtEmailAddress;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtUnstructuredName;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtContentType;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtMessageDigest;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSigningTime;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtCounterSignature;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtChallengePassword;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtUnstructuredAddress;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtExtendedCertificateAttributes;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSigningDescription;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtExtensionRequest;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSmimeCapabilities;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSmime;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtFriendlyName;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtLocalKeyID;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X509Certificate;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SdsiCertificate;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X509Crl;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlg;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgEsdh;
                                static /*0x1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgCms3DesWrap;
                                static /*0x200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgCmsRC2Wrap;
                                static /*0x208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgZlibCompress;
                                static /*0x210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgPwriKek;
                                static /*0x218*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgSsdh;
                                static /*0x220*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsaKem;
                                static /*0x228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgAeadChaCha20Poly1305;
                                static /*0x230*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgHssLmsHashsig;
                                static /*0x238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PreferSignedData;
                                static /*0x240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CannotDecryptAny;
                                static /*0x248*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SmimeCapabilitiesVersions;
                                static /*0x250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAReceiptRequest;
                                static /*0x258*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTAuthData;
                                static /*0x260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTTstInfo;
                                static /*0x268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTCompressedData;
                                static /*0x270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTAuthEnvelopedData;
                                static /*0x278*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTTimestampedData;
                                static /*0x280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfOrigin;
                                static /*0x288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfReceipt;
                                static /*0x290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfDelivery;
                                static /*0x298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfSender;
                                static /*0x2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfApproval;
                                static /*0x2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfCreation;
                                static /*0x2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAOid;
                                static /*0x2b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentHint;
                                static /*0x2c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAMsgSigDigest;
                                static /*0x2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentReference;
                                static /*0x2d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEncrypKeyPref;
                                static /*0x2d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASigningCertificate;
                                static /*0x2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASigningCertificateV2;
                                static /*0x2e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentIdentifier;
                                static /*0x2f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASignatureTimeStampToken;
                                static /*0x2f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSigPolicyID;
                                static /*0x300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCommitmentType;
                                static /*0x308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSignerLocation;
                                static /*0x310*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSignerAttr;
                                static /*0x318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsOtherSigCert;
                                static /*0x320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsContentTimestamp;
                                static /*0x328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertificateRefs;
                                static /*0x330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsRevocationRefs;
                                static /*0x338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertValues;
                                static /*0x340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsRevocationValues;
                                static /*0x348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsEscTimeStamp;
                                static /*0x350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertCrlTimestamp;
                                static /*0x358*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsArchiveTimestamp;
                                static /*0x360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAADecryptKeyID;
                                static /*0x368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAImplCryptoAlgs;
                                static /*0x370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAAsymmDecryptKeyID;
                                static /*0x378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAImplCompressAlgs;
                                static /*0x380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAACommunityIdentifiers;
                                static /*0x388*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSpqEtsUri;
                                static /*0x390*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSpqEtsUNotice;
                                static /*0x398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier KeyBag;
                                static /*0x3a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs8ShroudedKeyBag;
                                static /*0x3a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertBag;
                                static /*0x3b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlBag;
                                static /*0x3b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecretBag;
                                static /*0x3c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SafeContentsBag;
                                static /*0x3c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd128BitRC4;
                                static /*0x3d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd40BitRC4;
                                static /*0x3d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd3KeyTripleDesCbc;
                                static /*0x3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd2KeyTripleDesCbc;
                                static /*0x3e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd128BitRC2Cbc;
                                static /*0x3f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbewithShaAnd40BitRC2Cbc;

                                static /*0x2a9f718*/ PkcsObjectIdentifiers();
                            }

                            class RsassaPssParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier DefaultHashAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier DefaultMaskGenFunction;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger DefaultSaltLength;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger DefaultTrailerField;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier hashAlgorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier maskGenAlgorithm;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger saltLength;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger trailerField;

                                static /*0x2aa2080*/ RsassaPssParameters();
                                static /*0x2aa1998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters GetInstance(object obj);
                                /*0x2aa1d7c*/ RsassaPssParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier hashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier maskGenAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger saltLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger trailerField);
                                /*0x2aa1b14*/ RsassaPssParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2aa1df0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_HashAlgorithm();
                                /*0x2aa1df8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Oiw
                        {
                            class ElGamalParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;

                                /*0x2aa2248*/ ElGamalParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2aa2348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x2aa2360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x2aa2378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class OiwObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsa;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5WithRsa;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsaEncryption;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEcb;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesCbc;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesOfb;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesCfb;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEde;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha1WithRsa;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ElGamalAlgorithm;

                                static /*0x2aa23dc*/ OiwObjectIdentifiers();
                            }
                        }

                        namespace Ocsp
                        {
                            class OcspResponse : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus responseStatus;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes responseBytes;

                                static /*0x2aa2750*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponse GetInstance(object obj);
                                /*0x2aa28cc*/ OcspResponse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2aa2ad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class OcspResponseStatus : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated
                            {
                                /*0x2aa2a50*/ OcspResponseStatus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated value);
                            }

                            class ResponderID : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable id;

                                /*0x2aa2b84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class ResponseBytes : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier responseType;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString response;

                                static /*0x2aa2ac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool explicitly);
                                static /*0x2aa2c48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes GetInstance(object obj);
                                /*0x2aa2dc4*/ ResponseBytes(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2aa2f44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Nist
                        {
                            class NistNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2aa30d0*/ NistNamedCurves();
                                static /*0x2aa2fa8*/ void DefineCurveAlias(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa34b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2aa35a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa3610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa3530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);
                            }

                            class NistObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NistAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier HashAlgs;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha256;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha384;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha224;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512_224;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512_256;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_224;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_256;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_384;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_512;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake128;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_224;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_256;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_384;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_512;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake128Len;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake256Len;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdKmacWithShake128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdKmacWithShake256;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Aes;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ecb;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Cbc;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ofb;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Cfb;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Wrap;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Gcm;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ccm;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ecb;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Cbc;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ofb;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Cfb;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Wrap;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Gcm;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ccm;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ecb;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Cbc;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ofb;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Cfb;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Wrap;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Gcm;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ccm;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha2;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha224;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha256;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha384;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha512;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_224;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_256;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_384;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_512;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_224;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_256;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_384;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_512;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_224;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_256;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_384;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_512;

                                static /*0x2aa36d0*/ NistObjectIdentifiers();
                            }
                        }

                        namespace Misc
                        {
                            class MiscObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Netscape;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCertType;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeBaseUrl;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeRevocationUrl;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCARevocationUrl;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeRenewalUrl;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCAPolicyUrl;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeSslServerName;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCertComment;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Verisign;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignCzagExtension;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignPrivate_6_9;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignOnSiteJurisdictionHash;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignBitString_6_13;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignDnbDunsNumber;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignIssStrongCrypto;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Novell;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NovellSecurityAttribs;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Entrust;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EntrustVersionExtension;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cast5CBC;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier HMAC_SHA1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier as_sys_sec_alg_ideaCBC;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_ECB;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_CBC;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_CFB;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_OFB;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b160;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b256;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b384;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b512;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s128;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s160;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s224;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s256;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake3;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake3_256;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_scrypt;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_alg_composite;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_composite_key;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_oracle_pkcs12_trusted_key_usage;

                                static /*0x2aa4e90*/ MiscObjectIdentifiers();
                            }
                        }

                        namespace Gnu
                        {
                            class GnuObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Gnu;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GnuPG;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Notation;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PkaAddress;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GnuRadar;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DigestAlgorithm;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Tiger192;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EncryptionAlgorithm;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Ecb;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Cbc;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Ofb;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Cfb;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Ecb;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Cbc;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Ofb;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Cfb;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Ecb;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Cbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Ofb;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Cfb;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Crc;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Crc32;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Ed25519;

                                static /*0x2aa5b80*/ GnuObjectIdentifiers();
                            }
                        }

                        namespace GM
                        {
                            class GMNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2aa64cc*/ GMNamedCurves();
                                static /*0x2aa6244*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x2aa6334*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2aa6338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2aa63d0*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2aa6760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2aa6858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa68c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa67e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class SM2P256V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aa6bb0*/ SM2P256V1Holder();
                                    /*0x2aa693c*/ SM2P256V1Holder();
                                    /*0x2aa6944*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aa6aa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class WapiP192V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aa6e8c*/ WapiP192V1Holder();
                                    /*0x2aa6c18*/ WapiP192V1Holder();
                                    /*0x2aa6c20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aa6d80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class GMObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm_scheme;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_ecb;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_cbc;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_ofb128;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_cfb128;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_ecb;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cbc;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_ofb128;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb128;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb8;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_ecb;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cbc;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_ofb128;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb128;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb1;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb8;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ecb;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ofb128;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb8;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ctr;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_gcm;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ccm;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_xts;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_wrap;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_wrap_pad;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ocb;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm5;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2p256v1;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2exchange;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier wapip192v1;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_recommendedParameters;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_specifiedParameters;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sm3;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha1;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha224;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha256;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha384;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha512;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_rmd160;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_whirlpool;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_blake2b512;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_blake2s256;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_md5;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_sm9PublicKey;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9sign;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9keyagreement;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9encrypt;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm3;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier hmac_sm3;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sm3;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha1;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha256;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha512;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha224;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha384;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_rmd160;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_whirlpool;
                                static /*0x1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_blake2b512;
                                static /*0x200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_blake2s256;

                                static /*0x2aa6ef4*/ GMObjectIdentifiers();
                            }
                        }

                        namespace EdEC
                        {
                            class EdECObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_edwards_curve_algs;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_X25519;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_X448;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_Ed25519;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_Ed448;

                                static /*0x2aa8280*/ EdECObjectIdentifiers();
                            }
                        }

                        namespace Eac
                        {
                            class EacObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier bsi_de;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK_DH;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK_ECDH;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_DH;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_DH_3DES_CBC_CBC;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_ECDH;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_ECDH_3DES_CBC_CBC;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_v1_5_SHA_1;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_v1_5_SHA_256;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_PSS_SHA_1;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_PSS_SHA_256;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_224;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_256;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_384;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_512;

                                static /*0x2aa8450*/ EacObjectIdentifiers();
                            }
                        }

                        namespace CryptoPro
                        {
                            class CryptoProObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411Hmac;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR28147Gcfb;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR28147Cbc;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ID_Gost28147_89_CryptoPro_A_ParamSet;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94WithGostR3410x94;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94WithGostR3410x2001;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94CryptoProParamSet;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProA;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProB;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProC;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProD;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchA;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchB;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchC;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProA;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProB;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProC;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProXchA;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProXchB;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostElSgDH3410Default;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostElSgDH3410x1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProESDH;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001DH;

                                static /*0x2aa8ccc*/ CryptoProObjectIdentifiers();
                            }

                            class ECGost3410NamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2aa95cc*/ ECGost3410NamedCurves();
                                static /*0x2aa936c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                static /*0x2aa9434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2aa9438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2aa94d0*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2aa9ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2aa9bdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa9c48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aa9b64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Holder_gostR3410_2001_CryptoPro_A : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aa9f70*/ Holder_gostR3410_2001_CryptoPro_A();
                                    /*0x2aa9cc0*/ Holder_gostR3410_2001_CryptoPro_A();
                                    /*0x2aa9cc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aa9e28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_B : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aaa288*/ Holder_gostR3410_2001_CryptoPro_B();
                                    /*0x2aa9fd8*/ Holder_gostR3410_2001_CryptoPro_B();
                                    /*0x2aa9fe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aaa140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_C : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aaa5a0*/ Holder_gostR3410_2001_CryptoPro_C();
                                    /*0x2aaa2f0*/ Holder_gostR3410_2001_CryptoPro_C();
                                    /*0x2aaa2f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aaa458*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_XchB : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aaa8b8*/ Holder_gostR3410_2001_CryptoPro_XchB();
                                    /*0x2aaa608*/ Holder_gostR3410_2001_CryptoPro_XchB();
                                    /*0x2aaa610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aaa770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_256_paramSetA : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aaabc4*/ Holder_id_tc26_gost_3410_12_256_paramSetA();
                                    /*0x2aaa920*/ Holder_id_tc26_gost_3410_12_256_paramSetA();
                                    /*0x2aaa928*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aaaa88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetA : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aaaedc*/ Holder_id_tc26_gost_3410_12_512_paramSetA();
                                    /*0x2aaac2c*/ Holder_id_tc26_gost_3410_12_512_paramSetA();
                                    /*0x2aaac34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aaad94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetB : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aab1f4*/ Holder_id_tc26_gost_3410_12_512_paramSetB();
                                    /*0x2aaaf44*/ Holder_id_tc26_gost_3410_12_512_paramSetB();
                                    /*0x2aaaf4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aab0ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetC : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aab500*/ Holder_id_tc26_gost_3410_12_512_paramSetC();
                                    /*0x2aab25c*/ Holder_id_tc26_gost_3410_12_512_paramSetC();
                                    /*0x2aab264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aab3c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class Gost3410NamedParameters
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProA;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProB;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProXchA;
                                static /*0x18*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x20*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters> parameters;

                                static /*0x2aab630*/ Gost3410NamedParameters();
                                static /*0x2aab568*/ void DefineParameters(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters parameterSet);
                                static /*0x2aabb88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                            }

                            class Gost3410ParamSetParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ int keySize;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger a;

                                /*0x2aabaa4*/ Gost3410ParamSetParameters(int keySize, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a);
                                /*0x2aabc00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x2aabc18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x2aabc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_A();
                                /*0x2aabc48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class Gost3410PublicKeyAlgParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestParamSet;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier encryptionParamSet;

                                static /*0x2aabdf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters GetInstance(object obj);
                                /*0x2aabe90*/ Gost3410PublicKeyAlgParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x2aac0b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_PublicKeyParamSet();
                                /*0x2aac0b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_DigestParamSet();
                                /*0x2aac0c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_EncryptionParamSet();
                                /*0x2aac0c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Cryptlib
                        {
                            class CryptlibObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecc;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier curvey25519;

                                static /*0x2aac178*/ CryptlibObjectIdentifiers();
                            }
                        }

                        namespace Bsi
                        {
                            class BsiObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier bsi_de;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_ecc;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_signatures;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA1;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA224;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA256;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA384;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA512;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_RIPEMD160;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA1;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA224;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA256;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA384;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA512;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_RIPEMD160;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_3DES;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES192;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES256;

                                static /*0x2aac2b0*/ BsiObjectIdentifiers();
                            }
                        }

                        namespace Anssi
                        {
                            class AnssiNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x2aacb64*/ AnssiNamedCurves();
                                static /*0x2aac8dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x2aac9cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x2aac9d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x2aaca68*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x2aacd9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x2aace94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aacf00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x2aace1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Frp256v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x2aad1ec*/ Frp256v1Holder();
                                    /*0x2aacf78*/ Frp256v1Holder();
                                    /*0x2aacf80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x2aad0e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class AnssiObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier FRP256v1;

                                static /*0x2aad254*/ AnssiObjectIdentifiers();
                            }
                        }
                    }
                }
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 02D050046D7A21C15C1A6D6755439B5EDAD147FABD9152C932359BA3A4E82039;
    static /*0x14*/ <PrivateImplementationDetails> 064CACC4978353DFD6979BF0975E06366B0F3E9C5631CFFF32EC2184BCF492E5;
    static /*0xb4*/ <PrivateImplementationDetails> 07FA6E88C946B2528C09C16C2FB8E9CDA49AFFAFC601774C437FD9F2DF3ECE01;
    static /*0xec*/ <PrivateImplementationDetails> 0828E49183AB306042032EA09C5BD83C67BC8CD26D7C08C504962517913861E2;
    static /*0xfc*/ <PrivateImplementationDetails> 0A29D64AE97E7FBAAE0678A4F4F9364668E9827F23F305D51DF55D902CF19C4D;
    static /*0x102*/ <PrivateImplementationDetails> 0A4E21484641E9782ED1A1B3410F9F2DDC54F0F6D8807BF52C299807D9C4DF5C;
    static /*0x14a*/ <PrivateImplementationDetails> 0AEC099C87E7062A57D1C79734EDDD28A07A1684746EE8640132BB252E6BF5A1;
    static /*0x182*/ <PrivateImplementationDetails> 0C9B53D0417CF5539EA98A771F400E930B4B4F55363A296A9E5A5F941AB71C86;
    static /*0x582*/ <PrivateImplementationDetails> 0CF9F5E38BA692F10436AAC17AC6DCB62396F9AFC9CA013B3D640C1C95E31A39;
    static /*0x682*/ <PrivateImplementationDetails> 10D88DF8B06E47788DBE42F876B642A928A3AD8EEFFE352C59F031CCFFECD49D;
    static /*0x702*/ <PrivateImplementationDetails> 111B15B20E0428A22EEAA1E54B0D3B008A7A3E79C8F7F4E783710F569E9CEF15;
    static /*0x715*/ <PrivateImplementationDetails> 120918433B634757ADE589703127976B7C5C2009E8DB37632123F45FA2B87F2E;
    static /*0x755*/ <PrivateImplementationDetails> 125CF2084D7EEC18DC9795BE4BAA221655C0EABAB89E90A74FB0370378A60293;
    static /*0x9d5*/ <PrivateImplementationDetails> 12F486CDF1F8927BF7289003288EFE6D3B6C674279639905EEEE24D0B6EA9688;
    static /*0x9e1*/ <PrivateImplementationDetails> 1313B2EF301CE83F294FFD8C012777CAA44B3F5F35B6CC5232786F43AEE29084;
    static /*0x9ed*/ <PrivateImplementationDetails> 13F3BEDA950D7627802C21F7681A2553BBC40FDD07FCA3F52FAB662EE65B6F90;
    static /*0x11ed*/ <PrivateImplementationDetails> 141785EC78A7C41133C5B71ACBF4AA8735D3C599E0EA82B1AFA2C71A46FAD265;
    static /*0x11f9*/ <PrivateImplementationDetails> 14A5D850C255623F9472E3C650ABCE0C78D32F0276B315B3A276A0462D97A1AC;
    static /*0x12f9*/ <PrivateImplementationDetails> 16599A4F9A12ECCBFC361B547840304B9E48CBC431F387243C6859C475427D16;
    static /*0x1331*/ <PrivateImplementationDetails> 1674D0631A2E37B60EC748BC3899FEE1550C108AF30B85CE96A70C5CA4682D03;
    static /*0x1431*/ <PrivateImplementationDetails> 1B993D34192A33EB10CEE61C1093A6FE7D3D4B41F751F550CF8515DC4A215207;
    static /*0x1831*/ <PrivateImplementationDetails> 1C200EEC7E0EAFD19F23190A1ED9B95D60EDE114EDE39BD917D1565839CB48DC;
    static /*0x183d*/ <PrivateImplementationDetails> 1C3EF802E30F355C14A57C8AFAF6BFC22F3E40631D30059D87C30496D784EC9B;
    static /*0x1849*/ <PrivateImplementationDetails> 20EC21674E2CB9D3BA7B2F74AA5874381BAD58B7EDF526BDE000F175D1C5E5F1;
    static /*0x1859*/ <PrivateImplementationDetails> 2338F1330733829B7EA276F350452E34DC02E35AEA142145F1294F417A412FE5;
    static /*0x18d9*/ <PrivateImplementationDetails> 241460699808ED5F8D48C6B09EED448CDAE597EBF52B010901CD6F75A767B047;
    static /*0x18e5*/ <PrivateImplementationDetails> 24CB9F17C8326D8BB8EC908716519DF7F265AE825F0DD13BB04E03A90B07D90E;
    static /*0x18f5*/ <PrivateImplementationDetails> 252A0A8312BC1F5202CB599BCF172BEFA6F2A40195E72E2410AF5D81AC8B69D5;
    static /*0x19f5*/ <PrivateImplementationDetails> 265DD563A3E754D1DA09E056E784DF1550AD6EFA252EDC9A8B6F2F537C4D98A9;
    static /*0x1a1d*/ <PrivateImplementationDetails> 2A1FE1596DB0F5D1893C1AF50592965E1C09B1EE1E35A8A87C181A9EB2F391F5;
    static /*0x1e1d*/ <PrivateImplementationDetails> 2B371DA34C2A942BAF37EBEF498C2EE84813B4AB0266066695C4152B6E3FF082;
    static /*0x261d*/ <PrivateImplementationDetails> 2C6817528AB91D87A379BAA924F0BB642ED5C1AE839AEA5BBAA51F1E950796C0;
    static /*0x2623*/ <PrivateImplementationDetails> 2DE8C8D0A909D9D152B7752E0C1650FB43AFEBF9F20DF52091B69C394BD9F0FB;
    static /*0x2633*/ <PrivateImplementationDetails> 2DEB754CF447D0DE35ACB7F4311F9AAB1D4CFC0638E101CCAA8A0A4948AB3600;
    static /*0x2673*/ <PrivateImplementationDetails> 2EE1A8E6F4E2FE0BB69872A9C314399B1B0FDEE75772244F204ABF4D6DEC2F97;
    static /*0x26b7*/ <PrivateImplementationDetails> 2EF83B43314F8CD03190EEE30ECCF048DA37791237F27C62A579F23EACE9FD70;
    static /*0x26d7*/ <PrivateImplementationDetails> 301841C47353B7791BE25BC1F60F93D0EB2090AB5714FA5CA3939E8DFF75D218;
    static /*0x2717*/ <PrivateImplementationDetails> 3106DB6422088B231F12C749BC9CC57B08BBDE65695641C166393B42EFF14871;
    static /*0x2797*/ <PrivateImplementationDetails> 312F5C5395AE18520F30256771C66AE46BAFF85D08FBD0CAC1542927216E8489;
    static /*0x27df*/ <PrivateImplementationDetails> 343E404502DABEA303159A8C37BB2A4405B20A9B230D1C3BA9D496F05879019E;
    static /*0x280f*/ <PrivateImplementationDetails> 356608BFA95B39A5AA624D4852D37A19FCFB1302C897E1A4B7EA5EFD1A20120E;
    static /*0x281b*/ <PrivateImplementationDetails> 36003BEAAFC125A5D50EBAE8C98A6971BE6134DD89E286DD699E012687422A22;
    static /*0x2827*/ <PrivateImplementationDetails> 360E7DADB4427717AF4CB4E82F530229193E21B1BFB8DBEDBC46F77FF251CA15;
    static /*0x2927*/ <PrivateImplementationDetails> 36B8FDA0BFB1D93A07326EE7CAC8EB99FF1AF237D234FFA3210F64D3EB774C38;
    static /*0x2da7*/ <PrivateImplementationDetails> 3936FEF22F74028ACFB35A545386FE1C4F4A2C8CE55E88B5DF4FF605D474D8B4;
    static /*0x2db3*/ <PrivateImplementationDetails> 394D174022AB9D27D329C8DE3DADB69831311870F91A3896EFFB406411F7472C;
    static /*0x2dcb*/ <PrivateImplementationDetails> 3AF2ACD8D2D27336879BC958CFB6B4271FA89EC7C3EC62B7AD1E0E20B7AF303D;
    static /*0x2df3*/ <PrivateImplementationDetails> 3B520286F14349D61645FDE2088337584857AF213F1E9694D9DA4F5C489E6A0E;
    static /*0x2e0f*/ <PrivateImplementationDetails> 3B721FB05904288533A0C3F44162AA4631530BCFEBD22C3E57DBC4994E38F83D;
    static /*0x2e4f*/ <PrivateImplementationDetails> 3CA024F96B6FA0D283063E7C2B60A83C2B07F26AE1788CDFAEEB231C7725ED92;
    static /*0x364f*/ <PrivateImplementationDetails> 3E4FB5FE52BF269D6EE955711016291D6D327A4AAC39B2464C53C6BD0D73242A;
    static /*0x384f*/ <PrivateImplementationDetails> 3F580014EE7F27F024FC40AE120394FAC1A8E4CD1B40FD0F0089E89856152138;
    static /*0x385f*/ <PrivateImplementationDetails> 405634CB2F08D8E4A65CF85762D7BE4356E6DE1C0C941DA950F3034F3F8C6ED0;
    static /*0x388b*/ <PrivateImplementationDetails> 40866F3E76BC07D89281D2593C42AD252FB2D84E0A91FA3C78CA3C1FCC17643D;
    static /*0x398b*/ <PrivateImplementationDetails> 42E57F5A26F7D53A24B69FF9F56FA7550A23B8BAB2F5993357E4C53EA06141E9;
    static /*0x3a8b*/ <PrivateImplementationDetails> 439231575950B2ADCDE8DC0E470192ADA8DDC05EB55836596636563B6403A6B5;
    static /*0x3b0b*/ <PrivateImplementationDetails> 43B9A42341477A51FB3329FA943298FB43910D3EDCAB69BFB04D0E68D84C0247;
    static /*0x3b17*/ <PrivateImplementationDetails> 43C8B8D4786B6331EFC85B21E235E3E39940C427680D2C6B73ABF19738EF5186;
    static /*0x3b2f*/ <PrivateImplementationDetails> 4654FB5A717A0EB7C9078754B15F325C2F156519CFF821AAA495495741FF153A;
    static /*0x3b47*/ <PrivateImplementationDetails> 490FE1E40F08589851422F9DAF5012280352D005653B5D2CE872268A1A743ACF;
    static /*0x3b87*/ <PrivateImplementationDetails> 4993FAA5B9060FAAFC80E9F6CE26AF291965C0B1E8F5BBDC87C6CE9AEF6FFA24;
    static /*0x3b93*/ <PrivateImplementationDetails> 49D826830B5D920448F74BBBEDB361F17C9DD461E0DC3DED114E6E13E0173981;
    static /*0x3b9f*/ <PrivateImplementationDetails> 49FC72E2BC139CDC89193D013C3CBAD8CB75E78CA254B8466A03D26581D08BE4;
    static /*0x3bab*/ <PrivateImplementationDetails> 4A46F89E77BB78FA4C62BBA3B2F1EA2D55099E9ACCBC2AF76E05A4A07536FD67;
    static /*0x3bb1*/ <PrivateImplementationDetails> 4ADFA71AB9AF20C1C372C92FF8D26609A11DA05E167BBA62C0ABFD18F4C1EAF8;
    static /*0x3bd1*/ <PrivateImplementationDetails> 4D30B965ABF4D17A678F232D7C2491E37B61B203A6E807BB9E09C4BA2614F72D;
    static /*0x3be9*/ <PrivateImplementationDetails> 4D487DD66D80886D292C3C7B64CC41FEBA1E313A26A9D05333B42E895741FF81;
    static /*0x3ce9*/ <PrivateImplementationDetails> 4D7CAD3DEBDBD349390304F3A59AD3F66B4A1FB02F88749C4E393FF3A1EDD411;
    static /*0x3cf5*/ <PrivateImplementationDetails> 4DDDF66BF035F6ECA9C5F21404F3E8DC72D452D7CC13051DAA425BC248F0F060;
    static /*0x3d15*/ <PrivateImplementationDetails> 4FDCD793D71BE141D8E85C48B61B68F00848ACEF69905D47D935786C44D07D92;
    static /*0x3d21*/ <PrivateImplementationDetails> 513BA924C2DC996CAF3DC690D42BEB815316271C0CDAC0812BC0F2C2ED45DEA4;
    static /*0x3d35*/ <PrivateImplementationDetails> 5218271C2AB140CF1F8F18D070924F6EA8F08F5FB59C9E4F05AF36C0740D172A;
    static /*0x3d41*/ <PrivateImplementationDetails> 542A4AD813E0CA853A400A4DC81182DB6803BEC6EA63ED0D54E0E90660DFDC2B;
    static /*0x4541*/ <PrivateImplementationDetails> 55D0BF716B334D123E0088CFB3F8E2FEA17AF5025BB527F95EEB09BA978EA329;
    static /*0x4641*/ <PrivateImplementationDetails> 55D90ED526CE6FF4309EE00834C4060B1A37CB6D5E65BAA01366C72FB2A68CB4;
    static /*0x464d*/ <PrivateImplementationDetails> 58693A8E9871A51CE017A5CCB2219B320C7893E49E1761EF867DEB94E0466F4D;
    static /*0x474d*/ <PrivateImplementationDetails> 586CB2936F35105D4A71FF1186E81528F1980A2E5BB1E2719E0D86809CB1080A;
    static /*0x4f4d*/ <PrivateImplementationDetails> 5961BF1FCF83803CE7775E15E9DB8D21AF741539B85CCFDD643F9E22CC7820D6;
    static /*0x4fc5*/ <PrivateImplementationDetails> 5A33FCFEC23C49D91BCF58CE2472DC9F3662CD086BD29FC44AF2E14567238A30;
    static /*0x4fe5*/ <PrivateImplementationDetails> 5BBB9265FCB4E834C68440328645B1A187F68D3275881FC46B21564B11326DA5;
    static /*0x500d*/ <PrivateImplementationDetails> 5D34088B4ABB1F3FE88DCF84DD5C145EFD5EA01DF1B05BB8FEAD12305B0979B7;
    static /*0x518d*/ <PrivateImplementationDetails> 5D6878AD6E68B2CCB04A7CD7942BE07C15F947CCA8824203021DD465D90712AD;
    static /*0x5209*/ <PrivateImplementationDetails> 5DF5DA3512C124C2BB3C3676FFEDA4E6CC5E902C2A6027D37EB4B5AB64ED4382;
    static /*0x5229*/ <PrivateImplementationDetails> 5F2BD6104C620DE24A78538B659D1218F81A8DC50ED6645B5A040194E0CDC663;
    static /*0x5245*/ <PrivateImplementationDetails> 61358F81002F15B87F2746D4CD7FE28FD2CB45B8F0840B807B18C5A23F791CB1;
    static /*0x52c1*/ <PrivateImplementationDetails> 6164463B7C304A53288FDCF4DD2136E0E9A441D9930215FB691E3D2F692C3993;
    static /*0x52f1*/ <PrivateImplementationDetails> 624B1BC8BE6B6F8CF39572731AD0E5BDF2AAB137D0AB4A0F473B3D00666D766B;
    static /*0x56f1*/ <PrivateImplementationDetails> 663A2D6435FFB6C16D9382D8E22490E109514E59C03574E825F6B491AD8C8AAC;
    static /*0x5731*/ <PrivateImplementationDetails> 6708B572BDBE5D5E79701DBB9744AF74B50FED7608218F2D7BF1B5D87E5A53ED;
    static /*0x5761*/ <PrivateImplementationDetails> 684F74091FEFCDCDE9B282E317592631CA48B75F46340A11B95A474700E656D4;
    static /*0x576d*/ <PrivateImplementationDetails> 6965AC9D48CA477E9A17658D33A217051648138AD7024514DE014D8001B533C3;
    static /*0x578d*/ <PrivateImplementationDetails> 6A5953C1A0D67EA77DC8A5D34D0055B3D6A7A3C4CA3F6FE599471C40B9B017FC;
    static /*0x57b5*/ <PrivateImplementationDetails> 6A5EAF956411330E0B28CAD097D9698CBF4098D268AD1C0E04FE294F0607E53D;
    static /*0x57f5*/ <PrivateImplementationDetails> 6C99A25F0D00AE5BC45EE7F62CFC963F5DFC8FE4F7CE82ACEB0B5A1CDB51E3AB;
    static /*0x580d*/ <PrivateImplementationDetails> 6CB004567F6DA8572C921962EDECA8ABB063258E4B378E85E52017698A655056;
    static /*0x5819*/ <PrivateImplementationDetails> 6D4410134564FFF8B73800035CA093523750DF325139D004701C67D97488B8D5;
    static /*0x5859*/ <PrivateImplementationDetails> 6F055E07140AF36F1C17E348B39AB7ACB0647B788E869F4236E285C89C2C89EF;
    static /*0x5875*/ <PrivateImplementationDetails> 7017794F4FA285E1AA4C6FF9994A3DC0EDC472CB13D08BCA7B5CC287C51E0E3E;
    static /*0x5881*/ <PrivateImplementationDetails> 715F5EB09E6B0F8E87AD50BDAB729CF129E723B95990CE21DF233461DC29304E;
    static /*0x5981*/ <PrivateImplementationDetails> 74EF7306E7452D6859B6463CE496B8DF30925F69E1B2969E1F3F34BBC9C6AF04;
    static /*0x5a81*/ <PrivateImplementationDetails> 76387D5ADFE12720EE7A21E3C30296DE8356BE159BD422D9900C8146F914CADE;
    static /*0x5a8d*/ <PrivateImplementationDetails> 7650DB5F7D0AD39E75A5BB512A98F9763E302328E120F06230159AC1AD1C6B5D;
    static /*0x5a99*/ <PrivateImplementationDetails> 7854BA783A61F0B4D74198AF22A2D285EF70C526BDE4BE78FEDF180436FB621D;
    static /*0x5aa5*/ <PrivateImplementationDetails> 78A70FA0E21C85F13BDFA3D7B70E095EC5B61E51F34D2C1D531142B0634B30E5;
    static /*0x5ab1*/ <PrivateImplementationDetails> 79478AF14CB42EC0951669D5D1D864E43C211CBA631D8FFE7F6CD79FF60756C6;
    static /*0x5af5*/ <PrivateImplementationDetails> 7A36979350F6A229EB7206BEE580F51563EE52B71CD2132680B0AC33B3C31E27;
    static /*0x5b01*/ <PrivateImplementationDetails> 7BDD3F08BE488F1D6DCBF05D01C69BA80DF49A9E9E415F0205D575B4B5F32A34;
    static /*0x5b11*/ <PrivateImplementationDetails> 7C8975E1E60A5C8337F28EDF8C33C3B180360B7279644A9BC1AF3C51E6220BF5;
    static /*0x5b51*/ <PrivateImplementationDetails> 7C97C06F982D2F598F71BCF85A27244685EC039BC414EB391EC3EC449A619F37;
    static /*0x5b6f*/ <PrivateImplementationDetails> 7DDF88204E7E265240211841F0AB290A5E77EE4F9223EB2E39F9B89C30C41B9D;
    static /*0x5be3*/ <PrivateImplementationDetails> 7F034CF9D8AC0293D0C9535AF26B5452C6E916CE62FBBF765077BD958E69B7B9;
    static /*0x5c24*/ int 7FBDBBC598B2DE18BB5191FF9D66727F552A54412C9314CA5782824A150B3CD3;
    static /*0x5c28*/ long 800BC83FA3E127EC8C14A6282B05D6F224B8A8E2B2D3DAB222E5BADAB4A31ACB;
    static /*0x5c30*/ <PrivateImplementationDetails> 8051E141AAFE935BB42C7E96A9A525BAAC26F6867F1F455120DCC6E165AF17B1;
    static /*0x5c50*/ <PrivateImplementationDetails> 81C0F0D213E5735AED08C328CC9CC2E61B3AB83C9BF016A666B4144F8BF64457;
    static /*0x5c64*/ <PrivateImplementationDetails> 83E8FA01EECEC207D12DA40AEFC466B15F6412FFE2C30DBEF0C65B9B7FF01672;
    static /*0x5c84*/ <PrivateImplementationDetails> 85332E00AFFFDBE44E7421AA4236274F9495AC6C2204C59B9ADFC872D4215E12;
    static /*0x6084*/ <PrivateImplementationDetails> 86ECB4ABD964707BAF5ABF589057FBB2ED63DB1D7F0115A7DA45921043B6A96F;
    static /*0x60b4*/ <PrivateImplementationDetails> 874805F2B76BD7887959F02FE0B2A8C07C1E1D41F41AAD4D2AA1D0AB21A1780F;
    static /*0x60c4*/ <PrivateImplementationDetails> 896FB86C1BE3DBE6C3CC4FBE122562D75A4EBC6616D3393CF1AFE12377908B95;
    static /*0x6144*/ <PrivateImplementationDetails> 8AE83CF30C3CEAC5F4B9F025200D65EFAEC851DE0098817DB69F0E547407C095;
    static /*0x7944*/ <PrivateImplementationDetails> 8CB850AC259DD215242199AD8F1B0BC74C182B564124B84C0D56BDB7A8FF7286;
    static /*0x7950*/ <PrivateImplementationDetails> 8FC498A953A183E1FE81A183AE59047435BB9B33D657C625FAB03D38BE19F92E;
    static /*0x799c*/ <PrivateImplementationDetails> 93631B0726F6FE6629DAA743EE51B49F4477ED07391B68EEEA0672A4A90018AA;
    static /*0x7a9c*/ <PrivateImplementationDetails> 9476220840D3CE82203B4A722E278773B1DA458A22F49FCB9FC45B851DF7D503;
    static /*0x7b14*/ <PrivateImplementationDetails> 960F02F165C0EF9AC4C160FC98BE9273C245853BA32663BB1B6F1588077F95F4;
    static /*0x7b20*/ <PrivateImplementationDetails> 96883F56416393F42C830BCD6033BE079690C482BC73119EBBE5DC98834BACBF;
    static /*0x7b48*/ <PrivateImplementationDetails> 97467041703B2DF5571DCACC6A702C0C6DE68CE9A9470AA240F57D69C09AF7D3;
    static /*0x7b54*/ <PrivateImplementationDetails> 97CAAC7D5BE7722352C1AB556BFE01D3F3CCA0F50B5A648195D6415006620C8F;
    static /*0x7b7c*/ <PrivateImplementationDetails> 99FD541BFD4CF8DD3C18069CA1D5F4B622333DDBA412F00D5A6B642626034EDF;
    static /*0x7c7c*/ <PrivateImplementationDetails> 9ADB15F070E9316F84A156DD2B7F2EB5E3881C621225107D0AB86E6BB18F8B59;
    static /*0x7cbc*/ <PrivateImplementationDetails> 9B29692916637801E748ABDF9CE9D3A8AED3F375C84C7346C11C2BB150BD720B;
    static /*0x7cdc*/ <PrivateImplementationDetails> 9C28EF1A620E00413BBFC7E6ED40092033A3C250583DD7FAD355D2A306A7427B;
    static /*0x80dc*/ <PrivateImplementationDetails> 9CB8BF99E695FF4E0E3E01770F3E96060FC79466F1325C60B375349C591ADF02;
    static /*0x80fc*/ <PrivateImplementationDetails> 9CCC11CED0AD12118416B3C3C73453E6480B671C0EF2F753B6900DA2060F5B44;
    static /*0x812c*/ <PrivateImplementationDetails> 9CFF23020B5A7E24467474237978D4CB52A601FBC0B3E504B9ABC64C062A499C;
    static /*0x8138*/ <PrivateImplementationDetails> 9DA5D1DADE776A467199AC96E9412AD7A5CA1E62BCDAC527079912B1185A5C63;
    static /*0x8238*/ <PrivateImplementationDetails> 9DA6DC3BEB35D0E411A5D1E407E011542CC032FD6BD76CFFEB5EF327331840FD;
    static /*0x8244*/ <PrivateImplementationDetails> 9DC840E2F2B5B0E9B3B12C6585295C61986721911DA7AE18C9B18EFF2F01ABE5;
    static /*0x8260*/ <PrivateImplementationDetails> 9DDE3528C5CCCCD4D7C730403ABE54766C6645E371ED7ACB70584C320D87F670;
    static /*0x826c*/ <PrivateImplementationDetails> 9EF35AA995725D55C515A807B1D2BE31B36269235146245330CFB2683FA9A840;
    static /*0x828c*/ <PrivateImplementationDetails> 9F9F5111F7B27A781F1F1DDDE5EBC2DD2B796BFC7365C9C28B548E564176929F;
    static /*0x829c*/ <PrivateImplementationDetails> A08110AAECF4B88CA5A7F070B68E448ED895A5DE752B84C57651DA54D9BB5814;
    static /*0x82bc*/ <PrivateImplementationDetails> A1486177999A77F2FD76EAB02D2517803BFF5B0C5A01CFB95B3F1DA7B7D6DCE8;
    static /*0x82fc*/ <PrivateImplementationDetails> A4083C0BA9FBB6424F75B75603FBC0855756A32C2F4497CE3D79702E675882A9;
    static /*0x8302*/ <PrivateImplementationDetails> A4241EDCB474331DF94C96B4F24A3A8773452488FD0458F8C0C30F7C24B89E07;
    static /*0x830e*/ <PrivateImplementationDetails> A589B8F1C215FA773BA2724EB825E8B2D1792FB955349574454E18C63537F2A6;
    static /*0x838e*/ <PrivateImplementationDetails> A5A95A17B27BD47489B7BEB4A8AA145D08C838C183CD5A77A1A5EFD96AA3AB99;
    static /*0x83ce*/ <PrivateImplementationDetails> A719D1E9DB9C1628AF05DD49B4AA5D095CF0AD06D01C396B1777588A04D9D13E;
    static /*0x83da*/ <PrivateImplementationDetails> A935391692FCA9A4CF6CE823B9DBED3DB708352BB4ACEDDA9EADCA78ADD23DB7;
    static /*0x83e8*/ int A9DD1527A5845A7B2E82F3427251AD622D570D0B8CDA4A0AF9644EB34E69B2FC;
    static /*0x83ec*/ <PrivateImplementationDetails> AB3F6EE9927AC1C89E7F3D250F8DAC9A070249930D4A758B98F4D5B9A8E202B3;
    static /*0x8424*/ <PrivateImplementationDetails> AB60EEBC1B8BF85AD5AF219745EEA4317E0C780D22675F7A33A0929A34D17DE5;
    static /*0x8824*/ <PrivateImplementationDetails> AC7FC16C704375F0F1DB433E70C6C2B90B1D797B17806DD74E7664CAD8BFA778;
    static /*0x9024*/ <PrivateImplementationDetails> AD220A499D7A196B0FE1E8BCDAA020369A8BA1C4CF21B15A3E21935ED7B09D54;
    static /*0x9030*/ <PrivateImplementationDetails> AF0312129020B258B5B582D3F8EA8A3DAB35467AE93C8C6DBE5D6681CCD7D489;
    static /*0x9050*/ <PrivateImplementationDetails> B09C22565E577648AD57A0C5D1F44C38D4C01E2BF7727269A1E20A3717CC77D0;
    static /*0x9078*/ <PrivateImplementationDetails> B17AF625BB8EA7C85766DBFB60A73BAE2A82560C68B4F03D08B576CD43E911DA;
    static /*0x9084*/ <PrivateImplementationDetails> B1FFCD775449513A059F2F3A2DF44C39E6542C6474D6BAE3DC3FA1BC256255F0;
    static /*0x9094*/ <PrivateImplementationDetails> B23D510F520CB4BA8AFA847F8A40E757C40CB6A55B237EFA1AC6D3984911B114;
    static /*0x910c*/ <PrivateImplementationDetails> B2A10F44FFEE5755DDFA6587F62D7F83F24AF24429D3ACA46E56F3F295251DEB;
    static /*0x9118*/ <PrivateImplementationDetails> B3985439AEF8A4DF51A3369D7C0211EEF12CB0E510F6630E110C6DCC10B11A8E;
    static /*0x9158*/ <PrivateImplementationDetails> B48C3FCBDCCF3473EF494DC9D3E37B24CF9202AB511EEEB8FCBB48B626340059;
    static /*0x9164*/ <PrivateImplementationDetails> B6338EE68F3FD438E03D596B6D76554714958953358DF7320F5073C3CB779758;
    static /*0x9178*/ <PrivateImplementationDetails> B67F32BB12BAA41BEAF505F53EECD4F1409EF3E782F8CD077B511553999CE297;
    static /*0x9278*/ <PrivateImplementationDetails> B68ACFAD2A3D93FE2B8963E29978E6D3FADFFF5E7FE6C13590E8888CCA7AD7DD;
    static /*0x9284*/ <PrivateImplementationDetails> B698262446F5CFFF6CD492B8DBB1298BC61F0135EEE69366BD94E81ADE1D5C5A;
    static /*0x92a8*/ <PrivateImplementationDetails> B6FF5DB8C0FA699CD97E8EDF68219F0D1D9E509B4911710791D74AD7DF2DA1AD;
    static /*0x92cc*/ <PrivateImplementationDetails> B77E3D4019880A0C0F03E4214418983FD00C0107BB2632899FE6C3230F97B82C;
    static /*0x92dc*/ <PrivateImplementationDetails> B9D4AF390AFC6A0F149B843D651CFEBC1C4EC496A0263B72207836F9C525E1C4;
    static /*0x93dc*/ <PrivateImplementationDetails> BABB01CD1E2AD140F7D2AF35515DA38E8936F0BA0298BCF0245EB5692A3F69CC;
    static /*0x9404*/ <PrivateImplementationDetails> BB288FA00D4BBE2546E0D29F7D8BC6AF483CD4275D692B451B2E39A404E33EBF;
    static /*0x9804*/ <PrivateImplementationDetails> BD01644841E6B289961C01E9D8319807BB25F791DB6A990F60D44DA36533D5AD;
    static /*0x9810*/ <PrivateImplementationDetails> BD6174A7C16E1AF07272966A9C071C8A3CF16B2726C50D672A09F60636B08901;
    static /*0x9830*/ <PrivateImplementationDetails> BD71964D35F553A9E1D0CDDCB5864E0811BE84354BEEE68A301D5DFD1F0BEAD9;
    static /*0x9848*/ <PrivateImplementationDetails> BDB6BB299E50984399E0FD8F6BA60FC85EF8CAF6AD5154D53E6DAC34E2E0B381;
    static /*0x98a8*/ <PrivateImplementationDetails> BEDA989D5939125AA1831BFE35ED2E4F0F05DD63851049C646ACE173A2D0827C;
    static /*0x98b4*/ <PrivateImplementationDetails> BF3DB37CB55FF90EEE410403506E7AFB17B3B6ED163AEC657F4E4F47532D1E85;
    static /*0x98c0*/ <PrivateImplementationDetails> C0BCAD52BB24771C2430DFC75321628F5503FDDC5A0E05E93F3DD624A60B10BD;
    static /*0x9980*/ <PrivateImplementationDetails> C133E473E5E653C5C4AEDB8BCC1C1A3A44D384FC0B6C0FCF04672B1B325EC01B;
    static /*0x99cc*/ <PrivateImplementationDetails> C199D37D9A06A0F4C75F70A8ABD3D0C2FAEB17B255174C5E67392D81CF5FF0EC;
    static /*0x9dcc*/ <PrivateImplementationDetails> C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2;
    static /*0x9ecc*/ <PrivateImplementationDetails> C4E613C844059E36B3D4EE786C4236B8E641E7D49F520B003540BB274F7E12F7;
    static /*0xa6cc*/ <PrivateImplementationDetails> C7B696E5CE2020FEC8F611D5047339850FECC787C3DBC5D36589354D8ADF98C1;
    static /*0xa6d8*/ <PrivateImplementationDetails> C854B091EA9394BFC39C4324F63BF827E324ABA5F68693B00E4DB8B247ED2023;
    static /*0xaad8*/ <PrivateImplementationDetails> CB11E26FF20D3318A5A76F5FC0E725883F81ED29DAD7E32947BA8779AA3DE37F;
    static /*0xab38*/ <PrivateImplementationDetails> CC07D4A4B4FC6D98A85528D499B36F8489D6438071F4AADA11701D134678AFB1;
    static /*0xab58*/ <PrivateImplementationDetails> CC9BD9D64572985ECFB6E2A723B6DD347BB34F5AFECDBFB98444028D2DF4844D;
    static /*0xab64*/ <PrivateImplementationDetails> CCD83CF06E3CE2D4A938C42BAEA101B30335EAF483F59E5EDCB41DF7C4807E1B;
    static /*0xb364*/ <PrivateImplementationDetails> CF64D219C0BA56CECE4E41E0C8BF3AF538F4510FA9A2B00F38DA09E548270E5C;
    static /*0xb3a8*/ <PrivateImplementationDetails> D15388770BF0AB6F544906F0A1A3375BE05BB7FEB2B215CED8A8E41C42972549;
    static /*0xb3c8*/ <PrivateImplementationDetails> D1FAE5443A715D6F96387473C649F557670B8A92E175272491DFC646754F4A9D;
    static /*0xb3d4*/ <PrivateImplementationDetails> D38868B99B6C1AB9F2E65E75D07BA90CAF6DA7F4D74F9142A44413647473B362;
    static /*0xbbd4*/ <PrivateImplementationDetails> D3ADE9315DD51AE00C4C2D80ED119F3D1B1743E64ADC7FDDDE505286274C877D;
    static /*0xbbe0*/ <PrivateImplementationDetails> D6380FB2FF2DD88C9290D88B81E78BCA13AAAB4BE827B103062AFBB1085B0793;
    static /*0xbc08*/ <PrivateImplementationDetails> D916EBA7A5A5D84BB85D26EE65A08CC18219FACEB615519209ABB469C0B35D32;
    static /*0xbc14*/ <PrivateImplementationDetails> D9388FECE7A168D1EFFA85FA9C8DA1AEED48DDCE2E3799E07F41A9B60E389722;
    static /*0xbc4c*/ <PrivateImplementationDetails> DB1CCE19AFD5123D31DCDAC6656A6DB5AF929CA39192511B8C042DD0513E7497;
    static /*0xbc58*/ <PrivateImplementationDetails> DC196B5ACC67550E50DDC963D9192AEB816537E6A74CFB7DFE3A0453E5F4FB82;
    static /*0xbc98*/ <PrivateImplementationDetails> DC94C6E04C48743338670B79BCDA997FEEBD39A7A2DBACD46FC5A27D37AD9F71;
    static /*0xbca4*/ <PrivateImplementationDetails> DD2B2ACED61DA9A12AEE4F581C0D33D6D76A9722CDC6355B23FB5DF6B2032B18;
    static /*0xbce4*/ <PrivateImplementationDetails> DDA4EDB734C11C20B2D8A7BE67E2BB03E2F67B7928B0DAEB15EBF2EDD9A5150B;
    static /*0xbcf0*/ <PrivateImplementationDetails> DE56C9263420A7B28A6286EB62AFBE2C1D5164698C518792FD8CEAAF2CB2CD03;
    static /*0xbd30*/ <PrivateImplementationDetails> DE65050FB26A30C376E77EC7E5BE136721540CCE3760EAA1E14854746CADF7E8;
    static /*0xbdb0*/ <PrivateImplementationDetails> DE9FD94010C5C932FEB066B288CE65EBEB81EDE0E87B31B900BF855BFA2A2B5D;
    static /*0xbdbc*/ <PrivateImplementationDetails> DF93C334B40CA305A5AC46FA2BA7DB2C63404A699767F59982006C623702D568;
    static /*0xbebc*/ <PrivateImplementationDetails> E09120C0E7B92A532558D22D44D52452DFE460D6205D1009963B69AABD0F8185;
    static /*0xbec8*/ <PrivateImplementationDetails> E27F6E9719BC23F7138A27009F35243C6F94F6530A37FC26DE498AB64784DDDA;
    static /*0xbf08*/ <PrivateImplementationDetails> E3668879E09A70694ED6FEE919E303D7EA1266D783955D4DEEDC99CCC5AA6A8D;
    static /*0xbf14*/ <PrivateImplementationDetails> E3B4E767F318263A8E7A64E1D61F6D3368A3B59AF34CBB94E657E7FCC58F5BA5;
    static /*0xbf54*/ <PrivateImplementationDetails> E3DB1BCE79976D586D8B218DCAC26CAD32EA98C00E0A2CD37172FCAF14157178;
    static /*0xbf68*/ <PrivateImplementationDetails> E45C3F86EC68FBD407D74FAEC9A50DFBAA5589A6FB63CCC5F7AA901D2ACA48B6;
    static /*0xc768*/ <PrivateImplementationDetails> E5325952F9FF2214CCE24E320F2BCD6A71C6EB4127F6069352CE065883AE80D0;
    static /*0xcf68*/ <PrivateImplementationDetails> E75B7154F674F25D54E89CB7D91F35CC111C8A67EE585938E07D12CB4761637F;
    static /*0xd068*/ <PrivateImplementationDetails> E7C6C4296C6C2B00D1062AA69054CAB58A57C3ACCE5ECFA4084E7E94CF805F87;
    static /*0xd084*/ <PrivateImplementationDetails> E87A3B2C4C5D7247B7E149126C3503D3AE2878A02155EA6153E057FE35D9656C;
    static /*0xd090*/ <PrivateImplementationDetails> E8D46701532BBEB9F3FF8A63C0D74D8C417C782DEE2C085A6D940A8B5B38DA18;
    static /*0xd490*/ <PrivateImplementationDetails> ECA151F23D399F9FE976255B143D0691D0BE043E033B0E2814C0A547336D6545;
    static /*0xd4b8*/ <PrivateImplementationDetails> EF7F3D1F9F5FC7985E4AE3D48BF986867BA544C1D2FEA6A7745FEA4A2FCAB381;
    static /*0xd4c8*/ <PrivateImplementationDetails> F2CD85BDEF1E84E95EA92E2B686CEEC9FC518118A4342FAB46BECECE253D71F4;
    static /*0xd4d4*/ <PrivateImplementationDetails> F509AE84659919EA56BFF8D829ED41E971314D3D46ED9B0F8F5670D72EB1688B;
    static /*0xd514*/ <PrivateImplementationDetails> F8D7861760C88CC514F66095AF0AED47ECBA063ADB65F47125ED07BCC2CF9842;
    static /*0xd588*/ <PrivateImplementationDetails> F8E6964ADFFC257265537256D21E93496A17B9271DC5D64F40869EEEAAFF6FBB;
    static /*0xd648*/ <PrivateImplementationDetails> F915BC5619C5EB2C4D315B5409BC531F55FA3E3A6167F57B7A4F5F7F9C5F022B;
    static /*0xd748*/ <PrivateImplementationDetails> F93A6E9A709B14FD05706C119D157EEE96F24DE3FDFA34F6D0AFF9537DE8ACC0;
    static /*0xd788*/ <PrivateImplementationDetails> FA624E5847BD2E5A00CCA1B3515D315FA5C3450C3E832077935CEBA18E9F5571;
    static /*0xd794*/ <PrivateImplementationDetails> FA9320F15F87607CD9E1033E6DD907B11EEDF491D7EBBFD29EC8D07E12A822CD;
    static /*0xd894*/ <PrivateImplementationDetails> FB7A6532989D730F69E4757D690D25A43E71041FCFF7355747E274F956BB03E9;
    static /*0xe094*/ <PrivateImplementationDetails> FC216F5C5AE2947D800794ECD5F752EE8381073C2E5D0D095FDA040F541702F3;
    static /*0xe10c*/ <PrivateImplementationDetails> FD85B0A9251A04B1D271AF14FD041B4606FA95DDB116F92CB14470653A62AD19;
    static /*0xe11c*/ <PrivateImplementationDetails> FF4D5896EDB9E12991ECB7FA7807EEB0F7ACD30F57ECB63DD9943F5245752A0F;
    static /*0xe19c*/ <PrivateImplementationDetails> FFC55B79B9BE7817954A4672A75C8603D1D1FE85A61786D63BD3B0AA239FFA58;

    static /*0x2aad2f0*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=19
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=28
    {
    }

    struct __StaticArrayInitTypeSize=30
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=68
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=96
    {
    }

    struct __StaticArrayInitTypeSize=116
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=124
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=160
    {
    }

    struct __StaticArrayInitTypeSize=192
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=384
    {
    }

    struct __StaticArrayInitTypeSize=512
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1152
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=6144
    {
    }
}

class $BurstDirectCallInitializer
{
    static /*0x2aad36c*/ void Initialize();
}

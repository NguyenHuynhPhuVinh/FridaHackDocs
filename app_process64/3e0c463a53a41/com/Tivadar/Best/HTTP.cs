class <Module>
{
}

namespace Microsoft
{
    namespace CodeAnalysis
    {
        class EmbeddedAttribute : System.Attribute
        {
            /*0x3d2f484*/ EmbeddedAttribute();
        }
    }
}

namespace System
{
    namespace Runtime
    {
        namespace CompilerServices
        {
            class NullableAttribute : System.Attribute
            {
                /*0x10*/ byte[] NullableFlags;

                /*0x3d2f48c*/ NullableAttribute(byte[] );
            }
        }
    }
}

namespace Best
{
    namespace HTTP
    {
        enum HTTPMethods
        {
            Get = 0,
            Head = 1,
            Post = 2,
            Put = 3,
            Delete = 4,
            Patch = 5,
            Trace = 6,
            Merge = 7,
            Options = 8,
            Connect = 9,
            Query = 10,
        }

        class HTTPRange
        {
            /*0x10*/ long <FirstBytePos>k__BackingField;
            /*0x18*/ long <LastBytePos>k__BackingField;
            /*0x20*/ long <ContentLength>k__BackingField;
            /*0x28*/ bool <IsValid>k__BackingField;

            /*0x3d2f500*/ HTTPRange(int contentLength);
            /*0x3d2f530*/ HTTPRange(long firstBytePosition, long lastBytePosition, long contentLength);
            /*0x3d2f4bc*/ long get_FirstBytePos();
            /*0x3d2f4c4*/ void set_FirstBytePos(long value);
            /*0x3d2f4cc*/ long get_LastBytePos();
            /*0x3d2f4d4*/ void set_LastBytePos(long value);
            /*0x3d2f4dc*/ long get_ContentLength();
            /*0x3d2f4e4*/ void set_ContentLength(long value);
            /*0x3d2f4ec*/ bool get_IsValid();
            /*0x3d2f4f4*/ void set_IsValid(bool value);
            /*0x3d2f584*/ string ToString();
        }

        class OnRequestFinishedDelegate : System.MulticastDelegate
        {
            /*0x3d2f754*/ OnRequestFinishedDelegate(object object, nint method);
            /*0x3d2f808*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp);
        }

        class OnHeaderEnumerationDelegate : System.MulticastDelegate
        {
            /*0x3d2f81c*/ OnHeaderEnumerationDelegate(object object, nint method);
            /*0x3d2f8d0*/ void Invoke(string header, System.Collections.Generic.List<string> values);
        }

        class HTTPRequest : System.Collections.IEnumerator
        {
            static /*0x0*/ string[] MethodNames;
            /*0x10*/ Best.HTTP.HTTPMethods <MethodType>k__BackingField;
            /*0x18*/ System.Uri <Uri>k__BackingField;
            /*0x20*/ Best.HTTP.HTTPResponse <Response>k__BackingField;
            /*0x28*/ Best.HTTP.Request.Settings.DownloadSettings DownloadSettings;
            /*0x30*/ Best.HTTP.Request.Settings.UploadSettings UploadSettings;
            /*0x38*/ Best.HTTP.Request.Settings.TimeoutSettings TimeoutSettings;
            /*0x40*/ Best.HTTP.Request.Settings.RetrySettings RetrySettings;
            /*0x48*/ Best.HTTP.Request.Settings.ProxySettings ProxySettings;
            /*0x50*/ Best.HTTP.Request.Settings.RedirectSettings <RedirectSettings>k__BackingField;
            /*0x58*/ Best.HTTP.OnRequestFinishedDelegate <Callback>k__BackingField;
            /*0x60*/ System.Threading.CancellationTokenSource <CancellationTokenSource>k__BackingField;
            /*0x68*/ System.Action<Best.HTTP.HTTPRequest> OnCancellationRequested;
            /*0x70*/ System.Exception <Exception>k__BackingField;
            /*0x78*/ object <Tag>k__BackingField;
            /*0x80*/ Best.HTTP.HTTPRequestStates _state;
            /*0x88*/ Best.HTTP.Request.Timings.TimingCollector <Timing>k__BackingField;
            /*0x90*/ Best.HTTP.Request.Authenticators.IAuthenticator Authenticator;
            /*0x98*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
            /*0xa0*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;

            static /*0x3d32164*/ HTTPRequest();
            /*0x3d2ff10*/ HTTPRequest(System.Uri uri, Best.HTTP.OnRequestFinishedDelegate callback);
            /*0x3d2ff1c*/ HTTPRequest(System.Uri uri, Best.HTTP.HTTPMethods methodType, Best.HTTP.OnRequestFinishedDelegate callback);
            /*0x3d2f8e4*/ Best.HTTP.HTTPMethods get_MethodType();
            /*0x3d2f8ec*/ void set_MethodType(Best.HTTP.HTTPMethods value);
            /*0x3d2f8f4*/ System.Uri get_Uri();
            /*0x3d2f8fc*/ void set_Uri(System.Uri value);
            /*0x3d2f904*/ System.Uri get_CurrentUri();
            /*0x3d2f934*/ Best.HTTP.HostSetting.HostKey get_CurrentHostKey();
            /*0x3d2f9a0*/ Best.HTTP.HTTPResponse get_Response();
            /*0x3d2f9a8*/ void set_Response(Best.HTTP.HTTPResponse value);
            /*0x3d2f9b0*/ Best.HTTP.Request.Settings.RedirectSettings get_RedirectSettings();
            /*0x3d2f9b8*/ Best.HTTP.OnRequestFinishedDelegate get_Callback();
            /*0x3d2f9c0*/ void set_Callback(Best.HTTP.OnRequestFinishedDelegate value);
            /*0x3d2f9c8*/ bool get_IsCancellationRequested();
            /*0x3d2f9e0*/ System.Threading.CancellationTokenSource get_CancellationTokenSource();
            /*0x3d2f9e8*/ void set_CancellationTokenSource(System.Threading.CancellationTokenSource value);
            /*0x3d2f9f0*/ System.Exception get_Exception();
            /*0x3d2f9f8*/ void set_Exception(System.Exception value);
            /*0x3d2fa00*/ object get_Tag();
            /*0x3d2fa08*/ void set_Tag(object value);
            /*0x3d2fa10*/ Best.HTTP.HTTPRequestStates get_State();
            /*0x3d2fa28*/ void set_State(Best.HTTP.HTTPRequestStates value);
            /*0x3d2fee0*/ Best.HTTP.Request.Timings.TimingCollector get_Timing();
            /*0x3d2fee8*/ void set_Timing(Best.HTTP.Request.Timings.TimingCollector value);
            /*0x3d2fef0*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
            /*0x3d2fef8*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
            /*0x3d2ff00*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
            /*0x3d2ff08*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
            /*0x3d30548*/ void AddHeader(string name, string value);
            /*0x3d305cc*/ void SetHeader(string name, string value);
            /*0x3d30650*/ bool RemoveHeader(string name);
            /*0x3d306bc*/ bool HasHeader(string name);
            /*0x3d30728*/ string GetFirstHeaderValue(string name);
            /*0x3d30794*/ void RemoveUnsafeHeaders();
            /*0x3d309dc*/ void Prepare();
            /*0x3d309fc*/ void EnumerateHeaders(Best.HTTP.OnHeaderEnumerationDelegate callback, bool callBeforeSendCallback);
            /*0x3d317ec*/ Best.HTTP.HTTPRequest Send();
            /*0x3d31854*/ void Abort();
            /*0x3d31dec*/ object get_Current();
            /*0x3d31df4*/ bool MoveNext();
            /*0x3d31e10*/ void Reset();
            /*0x3d31e48*/ void Dispose();
            /*0x3d31f64*/ string ToString();
        }

        enum HTTPRequestStates
        {
            Initial = 0,
            Queued = 1,
            Processing = 2,
            Finished = 3,
            Error = 4,
            Aborted = 5,
            ConnectionTimedOut = 6,
            TimedOut = 7,
        }

        class HTTPResponse : System.IDisposable
        {
            /*0x10*/ System.Version <HTTPVersion>k__BackingField;
            /*0x18*/ int <StatusCode>k__BackingField;
            /*0x20*/ string <Message>k__BackingField;
            /*0x28*/ bool <IsFromCache>k__BackingField;
            /*0x30*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;
            /*0x38*/ byte[] _data;
            /*0x40*/ bool <IsUpgraded>k__BackingField;
            /*0x48*/ string dataAsText;
            /*0x50*/ Best.HTTP.Response.DownloadContentStream <DownStream>k__BackingField;
            /*0x58*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
            /*0x60*/ Best.HTTP.HTTPRequest <Request>k__BackingField;
            /*0x68*/ Best.HTTP.Caching.HTTPCacheContentWriter _cacheWriter;
            /*0x70*/ bool _isDisposed;

            static /*0x3d32f34*/ string ReadTo(System.IO.Stream stream, byte blocker);
            static /*0x3d3322c*/ string ReadTo(System.IO.Stream stream, byte blocker1, byte blocker2);
            static /*0x3d3353c*/ string NoTrimReadTo(System.IO.Stream stream, byte blocker1, byte blocker2);
            /*0x3d329b8*/ HTTPResponse(Best.HTTP.HTTPRequest request, bool isFromCache);
            /*0x3d324d8*/ System.Version get_HTTPVersion();
            /*0x3d324e0*/ void set_HTTPVersion(System.Version value);
            /*0x3d324e8*/ int get_StatusCode();
            /*0x3d324f0*/ void set_StatusCode(int value);
            /*0x3d324f8*/ string get_Message();
            /*0x3d32500*/ void set_Message(string value);
            /*0x3d32508*/ bool get_IsSuccess();
            /*0x3d32528*/ bool get_IsFromCache();
            /*0x3d32530*/ void set_IsFromCache(bool value);
            /*0x3d3253c*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
            /*0x3d32544*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
            /*0x3d3254c*/ byte[] get_Data();
            /*0x3d328ac*/ bool get_IsUpgraded();
            /*0x3d328b4*/ void set_IsUpgraded(bool value);
            /*0x3d328c0*/ string get_DataAsText();
            /*0x3d32988*/ Best.HTTP.Response.DownloadContentStream get_DownStream();
            /*0x3d32990*/ void set_DownStream(Best.HTTP.Response.DownloadContentStream value);
            /*0x3d32998*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
            /*0x3d329a0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
            /*0x3d329a8*/ Best.HTTP.HTTPRequest get_Request();
            /*0x3d329b0*/ void set_Request(Best.HTTP.HTTPRequest value);
            /*0x3d32a84*/ void AddHeader(string name, string value);
            /*0x3d32b08*/ System.Collections.Generic.List<string> GetHeaderValues(string name);
            /*0x3d32b74*/ string GetFirstHeaderValue(string name);
            /*0x3d32be0*/ bool HasHeaderWithValue(string headerName, string value);
            /*0x3d32c54*/ bool HasHeader(string headerName);
            /*0x3d32cc0*/ Best.HTTP.HTTPRange GetRange();
            /*0x3d337d4*/ void BeginReceiveContent();
            /*0x3d338f0*/ void FeedDownloadedContentChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
            /*0x3d33a24*/ void FinishedContentReceiving();
            /*0x3d33a70*/ void CreateDownloadStream(Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailable);
            /*0x3d32834*/ void CheckDisposed();
            /*0x3d31ef8*/ void Dispose();
            /*0x3d33cb8*/ void Dispose(bool disposing);
        }

        namespace Profiler
        {
            namespace Network
            {
                class NetworkStats
                {
                    static /*0x0*/ Unity.Profiling.ProfilerCategory Category;
                    static /*0x2*/ Unity.Profiling.ProfilerCounterValue<long> BufferedToSend;
                    static /*0x3*/ Unity.Profiling.ProfilerCounterValue<long> SentSinceLastFrame;
                    static /*0x4*/ Unity.Profiling.ProfilerCounterValue<long> SentTotal;
                    static /*0x5*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedSinceLastFrame;
                    static /*0x6*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedAndUnprocessed;
                    static /*0x7*/ Unity.Profiling.ProfilerCounterValue<long> ReceivedTotal;
                    static /*0x8*/ Unity.Profiling.ProfilerCounterValue<int> OpenConnectionsCounter;
                    static /*0x9*/ Unity.Profiling.ProfilerCounterValue<int> TotalConnectionsCounter;
                    static /*0xa*/ Unity.Profiling.ProfilerCounterValue<int> TotalDNSCacheHitsCounter;
                    static /*0xb*/ Unity.Profiling.ProfilerCounterValue<int> TotalDNSCacheMissCounter;

                    static /*0x3d33d48*/ NetworkStats();
                }

                class NetworkStatsCollector
                {
                    static /*0x0*/ long _totalNetworkBytesReceived;
                    static /*0x8*/ long _totalNetworkBytesSent;
                    static /*0x10*/ int _totalConnections;
                    static /*0x14*/ int _openConnections;
                    static /*0x18*/ int _bufferedToSend;
                    static /*0x1c*/ int _receivedAndUnprocessed;

                    static /*0x3d33ec4*/ long get_TotalNetworkBytesReceived();
                    static /*0x3d33f0c*/ long get_TotalNetworkBytesSent();
                    static /*0x3d33f54*/ int get_TotalConnections();
                    static /*0x3d33f9c*/ int get_OpenConnections();
                    static /*0x3d33fe4*/ int get_BufferedToSend();
                    static /*0x3d3402c*/ int get_ReceivedAndUnprocessed();
                    static /*0x3d34074*/ void IncrementCurrentConnections();
                    static /*0x3d340d4*/ void DecrementCurrentConnections();
                    static /*0x3d34120*/ void IncrementTotalNetworkBytesReceived(int amount);
                    static /*0x3d34170*/ void IncrementTotalNetworkBytesSent(int amount);
                    static /*0x3d341c4*/ void IncrementBufferedToSend(int amount);
                    static /*0x3d34218*/ void IncrementReceivedAndUnprocessed(int amount);
                }
            }

            namespace Memory
            {
                class MemoryStats
                {
                    static /*0x0*/ Unity.Profiling.ProfilerCategory Category;
                    static /*0x2*/ Unity.Profiling.ProfilerCounterValue<long> Borrowed;
                    static /*0x3*/ Unity.Profiling.ProfilerCounterValue<long> Pooled;
                    static /*0x4*/ Unity.Profiling.ProfilerCounterValue<long> CacheHits;
                    static /*0x5*/ Unity.Profiling.ProfilerCounterValue<long> ArrayAllocations;

                    static /*0x3d3426c*/ MemoryStats();
                }
            }
        }

        namespace Response
        {
            class DownloadContentStream : System.IO.Stream
            {
                /*0x28*/ Best.HTTP.HTTPResponse <Response>k__BackingField;
                /*0x30*/ long _length;
                /*0x38*/ long <MaxBuffered>k__BackingField;
                /*0x40*/ bool _isDetached;
                /*0x48*/ Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable _bufferAvailableHandler;
                /*0x50*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segments;
                /*0x58*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment _currentSegment;
                /*0x68*/ bool _isCompleted;
                /*0x70*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x78*/ int _isFullCheckCount;
                /*0x7c*/ bool _isDisposed;

                /*0x3d34550*/ DownloadContentStream(Best.HTTP.HTTPResponse response, long maxBuffered, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                /*0x3d34358*/ Best.HTTP.HTTPResponse get_Response();
                /*0x3d34360*/ void set_Response(Best.HTTP.HTTPResponse value);
                /*0x3d34368*/ long get_Length();
                /*0x3d34374*/ long get_MaxBuffered();
                /*0x3d3437c*/ void set_MaxBuffered(long value);
                /*0x3d34384*/ bool get_IsFull();
                /*0x3d343ac*/ bool get_IsDetached();
                /*0x3d343b4*/ void set_IsDetached(bool value);
                /*0x3d34544*/ void EmergencyIncreaseMaxBuffered();
                /*0x3d3467c*/ void CompleteAdding(System.Exception error);
                /*0x3d34884*/ int Read(byte[] buffer, int offset, int count);
                /*0x3d34d1c*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                /*0x3d34e14*/ bool DoFullCheck(int limit);
                /*0x3d34e68*/ void Dispose(bool disposing);
                /*0x3d35030*/ bool get_CanRead();
                /*0x3d35038*/ bool get_CanSeek();
                /*0x3d35040*/ bool get_CanWrite();
                /*0x3d35048*/ long get_Position();
                /*0x3d35080*/ void set_Position(long value);
                /*0x3d350b8*/ void Flush();
                /*0x3d350f0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x3d35128*/ void SetLength(long value);
                /*0x3d35160*/ void Write(byte[] buffer, int offset, int count);
            }

            namespace Decompression
            {
                class BrotliDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferSegmentStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ System.IO.Compression.BrotliStream decompressorStream;
                    /*0x28*/ byte[] copyBuffer;
                    /*0x30*/ int _minLengthToDecompress;

                    static /*0x3d35198*/ bool IsSupported();
                    /*0x3d351a0*/ BrotliDecompressor(int minLengthToDecompress);
                    /*0x3d351c8*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d3550c*/ void Dispose();
                }

                class DecompressorFactory
                {
                    static /*0x0*/ string AcceptEncoding;

                    static /*0x3d31188*/ void SetupHeaders(Best.HTTP.HTTPRequest request);
                    static /*0x3d355e4*/ Best.HTTP.Response.Decompression.IDecompressor GetDecompressor(string encoding, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class DeflateDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    static /*0x0*/ bool IsSupported;
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ Best.HTTP.Shared.Compression.Zlib.DeflateStream decompressorStream;
                    /*0x28*/ int MinLengthToDecompress;

                    static /*0x3d35eb0*/ DeflateDecompressor();
                    /*0x3d358f4*/ DeflateDecompressor(int minLengthToDecompress);
                    /*0x3d35924*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d35ce8*/ void Finalize();
                    /*0x3d35d7c*/ void Dispose();
                }

                class GZipDecompressor : Best.HTTP.Response.Decompression.IDecompressor, System.IDisposable
                {
                    static /*0x0*/ bool IsSupported;
                    /*0x10*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorInputStream;
                    /*0x18*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream decompressorOutputStream;
                    /*0x20*/ Best.HTTP.Shared.Compression.Zlib.GZipStream decompressorStream;
                    /*0x28*/ int MinLengthToDecompress;

                    static /*0x3d36488*/ GZipDecompressor();
                    /*0x3d358c4*/ GZipDecompressor(int minLengthToDecompress);
                    /*0x3d35efc*/ System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d362c0*/ void Finalize();
                    /*0x3d36354*/ void Dispose();
                }

                interface IDecompressor : System.IDisposable
                {
                    System.ValueTuple<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment, bool> Decompress(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment, bool forceDecompress, bool dataCanBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                }
            }
        }

        namespace Request
        {
            namespace Upload
            {
                class UploadStreamBase : System.IO.Stream
                {
                    /*0x28*/ Best.HTTP.Hosts.Connections.IThreadSignaler <Signaler>k__BackingField;

                    /*0x3d364d4*/ void set_Signaler(Best.HTTP.Hosts.Connections.IThreadSignaler value);
                    /*0x3d364dc*/ long get_Length();
                    /*0x380d83c*/ void BeforeSendHeaders(Best.HTTP.HTTPRequest request);
                    /*0x3d36514*/ void BeforeSendBody(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.IThreadSignaler threadSignaler);
                }
            }

            namespace Timings
            {
                struct PartialEvent
                {
                    /*0x10*/ string EventName;
                    /*0x18*/ System.DateTime StartedAt;

                    /*0x3d36520*/ PartialEvent(string eventName, System.DateTime startedAt);
                    /*0x3d36548*/ bool IsSet();
                    /*0x3d365d0*/ string ToString();
                }

                class TimingCollector
                {
                    /*0x10*/ Best.HTTP.HTTPRequest <ParentRequest>k__BackingField;
                    /*0x18*/ System.DateTime <Created>k__BackingField;
                    /*0x20*/ System.DateTime <Finished>k__BackingField;
                    /*0x28*/ System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> <Events>k__BackingField;
                    /*0x30*/ Best.HTTP.Request.Timings.PartialEvent _partialEvent;

                    /*0x3d3046c*/ TimingCollector(Best.HTTP.HTTPRequest parentRequest);
                    /*0x3d36758*/ Best.HTTP.HTTPRequest get_ParentRequest();
                    /*0x3d36760*/ System.DateTime get_Created();
                    /*0x3d36768*/ void set_Created(System.DateTime value);
                    /*0x3d36770*/ System.DateTime get_Finished();
                    /*0x3d36778*/ void set_Finished(System.DateTime value);
                    /*0x3d36780*/ System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> get_Events();
                    /*0x3d36788*/ void set_Events(System.Collections.Generic.List<Best.HTTP.Request.Timings.TimingEvent> value);
                    /*0x3d36790*/ void StartNext(string eventName);
                    /*0x3d368f8*/ void AddEvent(Best.HTTP.Request.Timings.TimingEventInfo timingEvent);
                    /*0x3d36e64*/ void AddEvent(string name, System.DateTime when, System.TimeSpan duration);
                    /*0x3d36ff8*/ string ToString();
                }

                struct TimingEvent : System.IEquatable<Best.HTTP.Request.Timings.TimingEvent>
                {
                    static /*0x0*/ Best.HTTP.Request.Timings.TimingEvent Empty;
                    /*0x10*/ string Name;
                    /*0x18*/ System.TimeSpan Duration;
                    /*0x20*/ System.DateTime Start;

                    static /*0x3d376c4*/ TimingEvent();
                    /*0x3d37300*/ TimingEvent(string name, System.TimeSpan duration);
                    /*0x3d36fcc*/ TimingEvent(string name, System.DateTime when, System.TimeSpan duration);
                    /*0x3d37380*/ bool Equals(Best.HTTP.Request.Timings.TimingEvent other);
                    /*0x3d37458*/ bool Equals(object obj);
                    /*0x3d37518*/ int GetHashCode();
                    /*0x3d375e0*/ string ToString();
                }

                enum TimingEvents
                {
                    StartNext = 0,
                    Finish = 1,
                }

                struct TimingEventInfo
                {
                    /*0x10*/ Best.HTTP.HTTPRequest SourceRequest;
                    /*0x18*/ Best.HTTP.Request.Timings.TimingEvents Event;
                    /*0x20*/ string Name;
                    /*0x28*/ System.DateTime Time;

                    /*0x3d3685c*/ TimingEventInfo(Best.HTTP.HTTPRequest parentRequest, Best.HTTP.Request.Timings.TimingEvents timingEvent, string eventName);
                    /*0x3d37774*/ string ToString();
                }
            }

            namespace Settings
            {
                class OnHeadersReceivedDelegate : System.MulticastDelegate
                {
                    /*0x3d37970*/ OnHeadersReceivedDelegate(object object, nint method);
                    /*0x3d37a24*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                }

                class OnProgressDelegate : System.MulticastDelegate
                {
                    /*0x3d37a38*/ OnProgressDelegate(object object, nint method);
                    /*0x3d37aec*/ void Invoke(Best.HTTP.HTTPRequest req, long progress, long length);
                }

                class OnDownloadStartedDelegate : System.MulticastDelegate
                {
                    /*0x3d37b00*/ OnDownloadStartedDelegate(object object, nint method);
                    /*0x3d37bb4*/ void Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Response.DownloadContentStream stream);
                }

                class OnCreateDownloadStreamDelegate : System.MulticastDelegate
                {
                    /*0x3d37bc8*/ OnCreateDownloadStreamDelegate(object object, nint method);
                    /*0x3d37c7c*/ Best.HTTP.Response.DownloadContentStream Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                }

                class OnUpgradedDelegate : System.MulticastDelegate
                {
                    /*0x3d37c90*/ OnUpgradedDelegate(object object, nint method);
                    /*0x3d37d44*/ bool Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                }

                class DownloadSettings
                {
                    /*0x10*/ long ContentStreamMaxBuffered;
                    /*0x18*/ bool <DisableCache>k__BackingField;
                    /*0x19*/ bool <CacheOnly>k__BackingField;
                    /*0x20*/ Best.HTTP.Request.Settings.OnHeadersReceivedDelegate OnHeadersReceived;
                    /*0x28*/ Best.HTTP.Request.Settings.OnCreateDownloadStreamDelegate DownloadStreamFactory;
                    /*0x30*/ Best.HTTP.Request.Settings.OnDownloadStartedDelegate OnDownloadStarted;
                    /*0x38*/ Best.HTTP.Request.Settings.OnProgressDelegate OnDownloadProgress;
                    /*0x40*/ Best.HTTP.Request.Settings.OnUpgradedDelegate OnUpgraded;

                    /*0x3d30240*/ DownloadSettings();
                    /*0x3d37d58*/ bool get_DisableCache();
                    /*0x3d37d60*/ void set_DisableCache(bool value);
                    /*0x3d37d6c*/ bool get_CacheOnly();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Request.Settings.DownloadSettings.<> <>9;
                        static /*0x8*/ Best.HTTP.Request.Settings.OnCreateDownloadStreamDelegate <>9__14_0;

                        static /*0x3d37d74*/ <>c();
                        /*0x3d37ddc*/ <>c();
                        /*0x3d37de4*/ Best.HTTP.Response.DownloadContentStream <.ctor>b__14_0(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                    }
                }

                class ProxySettings
                {
                    /*0x10*/ Best.HTTP.Proxies.Proxy <Proxy>k__BackingField;

                    /*0x3d303a4*/ ProxySettings();
                    /*0x3d37e68*/ bool HasProxyFor(System.Uri uri);
                    /*0x3d37fd4*/ Best.HTTP.Proxies.Proxy get_Proxy();
                    /*0x3d37fdc*/ void set_Proxy(Best.HTTP.Proxies.Proxy value);
                    /*0x3d37fe4*/ bool Handle407(Best.HTTP.HTTPRequest request);
                    /*0x3d37ffc*/ void AddToHash(System.Uri requestUri, ref UnityEngine.Hash128 hash);
                    /*0x3d38120*/ string ToString();
                }

                class OnBeforeRedirectionDelegate : System.MulticastDelegate
                {
                    /*0x3d38144*/ OnBeforeRedirectionDelegate(object object, nint method);
                    /*0x3d381f8*/ bool Invoke(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Uri redirectUri);
                }

                class RedirectSettings
                {
                    /*0x10*/ bool <IsRedirected>k__BackingField;
                    /*0x18*/ System.Uri <RedirectUri>k__BackingField;
                    /*0x20*/ int <MaxRedirects>k__BackingField;
                    /*0x24*/ int <RedirectCount>k__BackingField;
                    /*0x28*/ Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate onBeforeRedirection;

                    /*0x3d3034c*/ RedirectSettings(int maxRedirects);
                    /*0x3d3820c*/ bool get_IsRedirected();
                    /*0x3d38214*/ void set_IsRedirected(bool value);
                    /*0x3d38220*/ System.Uri get_RedirectUri();
                    /*0x3d38228*/ void set_RedirectUri(System.Uri value);
                    /*0x3d38230*/ int get_MaxRedirects();
                    /*0x3d38238*/ void set_MaxRedirects(int value);
                    /*0x3d38240*/ int get_RedirectCount();
                    /*0x3d38248*/ void set_RedirectCount(int value);
                    /*0x3d38250*/ void add_OnBeforeRedirection(Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate value);
                    /*0x3d382e0*/ void remove_OnBeforeRedirection(Best.HTTP.Request.Settings.OnBeforeRedirectionDelegate value);
                    /*0x3d38370*/ bool CallOnBeforeRedirection(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp, System.Uri redirectUri);
                }

                class RetrySettings
                {
                    /*0x10*/ int <Retries>k__BackingField;
                    /*0x14*/ int <MaxRetries>k__BackingField;

                    /*0x3d30444*/ RetrySettings(int maxRetries);
                    /*0x3d38390*/ int get_Retries();
                    /*0x3d38398*/ void set_Retries(int value);
                    /*0x3d383a0*/ int get_MaxRetries();
                    /*0x3d383a8*/ void set_MaxRetries(int value);
                }

                class TimeoutSettings
                {
                    /*0x10*/ System.DateTime <QueuedAt>k__BackingField;
                    /*0x18*/ System.DateTime <ProcessingStarted>k__BackingField;
                    /*0x20*/ System.Nullable<System.TimeSpan> _connectTimeout;
                    /*0x30*/ System.Nullable<System.TimeSpan> _timeout;
                    /*0x40*/ Best.HTTP.HTTPRequest _request;

                    /*0x3d30374*/ TimeoutSettings(Best.HTTP.HTTPRequest request);
                    /*0x3d383b0*/ System.DateTime get_QueuedAt();
                    /*0x3d383b8*/ void set_QueuedAt(System.DateTime value);
                    /*0x3d383c0*/ System.DateTime get_ProcessingStarted();
                    /*0x3d383c8*/ void set_ProcessingStarted(System.DateTime value);
                    /*0x3d383d0*/ System.TimeSpan get_ConnectTimeout();
                    /*0x3d38558*/ System.TimeSpan get_Timeout();
                    /*0x3d3866c*/ void set_Timeout(System.TimeSpan value);
                    /*0x3d31cf4*/ bool IsConnectTimedOut(System.DateTime now);
                    /*0x3d31bec*/ bool IsTimedOut(System.DateTime now);
                    /*0x3d386dc*/ void SetProcessing(System.DateTime now);
                }

                class OnHeadersSentDelegate : System.MulticastDelegate
                {
                    /*0x3d38748*/ OnHeadersSentDelegate(object object, nint method);
                    /*0x3d387f8*/ void Invoke(Best.HTTP.HTTPRequest req);
                }

                class UploadSettings : System.IDisposable
                {
                    /*0x10*/ int UploadChunkSize;
                    /*0x18*/ System.IO.Stream UploadStream;
                    /*0x20*/ bool DisposeStream;
                    /*0x28*/ Best.HTTP.Request.Settings.OnProgressDelegate OnUploadProgress;
                    /*0x30*/ Best.HTTP.Request.Settings.OnHeadersSentDelegate _onHeadersSent;
                    /*0x38*/ bool isDisposed;

                    /*0x3d30334*/ UploadSettings();
                    /*0x3d3880c*/ void SetupRequest(Best.HTTP.HTTPRequest request, bool dispatchHeadersSentCallback);
                    /*0x3d38a44*/ void call_onBeforeHeaderSend(Best.HTTP.HTTPRequest request);
                    /*0x3d38bd8*/ void Dispose(bool disposing);
                    /*0x3d31e8c*/ void Dispose();

                    class <>c__DisplayClass9_0
                    {
                        /*0x10*/ Best.HTTP.Request.Settings.UploadSettings <>4__this;
                        /*0x18*/ Best.HTTP.HTTPRequest request;

                        /*0x3d38a3c*/ <>c__DisplayClass9_0();
                        /*0x3d38c30*/ void <SetupRequest>b__0();
                    }
                }
            }

            namespace Authenticators
            {
                interface IAuthenticator
                {
                    /*0x380d83c*/ void SetupRequest(Best.HTTP.HTTPRequest request);
                    /*0x380b32c*/ bool HandleChallange(Best.HTTP.HTTPRequest req, Best.HTTP.HTTPResponse resp);
                }
            }

            namespace Authentication
            {
                enum AuthenticationTypes
                {
                    Unknown = 0,
                    Basic = 1,
                    Digest = 2,
                }

                class Credentials
                {
                    /*0x10*/ Best.HTTP.Request.Authentication.AuthenticationTypes <Type>k__BackingField;
                    /*0x18*/ string <UserName>k__BackingField;
                    /*0x20*/ string <Password>k__BackingField;

                    /*0x3d38c50*/ Best.HTTP.Request.Authentication.AuthenticationTypes get_Type();
                    /*0x3d38c58*/ string get_UserName();
                    /*0x3d38c60*/ string get_Password();
                }

                class Digest
                {
                    /*0x10*/ System.Uri <Uri>k__BackingField;
                    /*0x18*/ Best.HTTP.Request.Authentication.AuthenticationTypes <Type>k__BackingField;
                    /*0x20*/ string <Realm>k__BackingField;
                    /*0x28*/ bool <Stale>k__BackingField;
                    /*0x30*/ string <Nonce>k__BackingField;
                    /*0x38*/ string <Opaque>k__BackingField;
                    /*0x40*/ string <Algorithm>k__BackingField;
                    /*0x48*/ System.Collections.Generic.List<string> <ProtectedUris>k__BackingField;
                    /*0x50*/ string <QualityOfProtections>k__BackingField;
                    /*0x58*/ int <NonceCount>k__BackingField;
                    /*0x60*/ string <HA1Sess>k__BackingField;

                    /*0x3d38d1c*/ Digest(System.Uri uri);
                    /*0x3d38c68*/ System.Uri get_Uri();
                    /*0x3d38c70*/ void set_Uri(System.Uri value);
                    /*0x3d38c78*/ Best.HTTP.Request.Authentication.AuthenticationTypes get_Type();
                    /*0x3d38c80*/ void set_Type(Best.HTTP.Request.Authentication.AuthenticationTypes value);
                    /*0x3d38c88*/ string get_Realm();
                    /*0x3d38c90*/ void set_Realm(string value);
                    /*0x3d38c98*/ bool get_Stale();
                    /*0x3d38ca0*/ void set_Stale(bool value);
                    /*0x3d38cac*/ string get_Nonce();
                    /*0x3d38cb4*/ void set_Nonce(string value);
                    /*0x3d38cbc*/ string get_Opaque();
                    /*0x3d38cc4*/ void set_Opaque(string value);
                    /*0x3d38ccc*/ string get_Algorithm();
                    /*0x3d38cd4*/ void set_Algorithm(string value);
                    /*0x3d38cdc*/ System.Collections.Generic.List<string> get_ProtectedUris();
                    /*0x3d38ce4*/ void set_ProtectedUris(System.Collections.Generic.List<string> value);
                    /*0x3d38cec*/ string get_QualityOfProtections();
                    /*0x3d38cf4*/ void set_QualityOfProtections(string value);
                    /*0x3d38cfc*/ int get_NonceCount();
                    /*0x3d38d04*/ void set_NonceCount(int value);
                    /*0x3d38d0c*/ string get_HA1Sess();
                    /*0x3d38d14*/ void set_HA1Sess(string value);
                    /*0x3d38d90*/ void ParseChallange(string header);
                    /*0x3d394cc*/ string GenerateResponseHeader(Best.HTTP.Request.Authentication.Credentials credentials, bool isProxy, Best.HTTP.HTTPMethods methodType, System.Uri currentUri);
                    /*0x3d3a338*/ bool IsUriProtected(System.Uri uri);
                }

                class DigestStore
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, Best.HTTP.Request.Authentication.Digest> Digests;
                    static /*0x8*/ string[] SupportedAlgorithms;

                    static /*0x3d3a8f8*/ DigestStore();
                    static /*0x3d3a448*/ Best.HTTP.Request.Authentication.Digest Get(System.Uri uri);
                    static /*0x3d3a514*/ Best.HTTP.Request.Authentication.Digest GetOrCreate(System.Uri uri);
                    static /*0x3d3a5e4*/ void Clear();
                    static /*0x3d3a65c*/ string FindBest(System.Collections.Generic.List<string> authHeaders);

                    class <>c__DisplayClass6_0
                    {
                        /*0x10*/ int i;

                        /*0x3d3a8f0*/ <>c__DisplayClass6_0();
                        /*0x3d3aa34*/ bool <FindBest>b__0(string header);
                    }
                }

                class WWWAuthenticateHeaderParser : Best.HTTP.Shared.Extensions.KeyValuePairList
                {
                    /*0x3d39494*/ WWWAuthenticateHeaderParser(string headerValue);
                    /*0x3d3aacc*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> ParseQuotedHeader(string str);

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Request.Authentication.WWWAuthenticateHeaderParser.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__1_0;

                        static /*0x3d3ad88*/ <>c();
                        /*0x3d3adf0*/ <>c();
                        /*0x3d3adf8*/ bool <ParseQuotedHeader>b__1_0(char ch);
                    }
                }
            }
        }

        namespace Proxies
        {
            class HTTPProxy : Best.HTTP.Proxies.Proxy
            {
                /*0x28*/ bool <IsTransparent>k__BackingField;
                /*0x29*/ bool <SendWholeUri>k__BackingField;
                /*0x2a*/ bool <NonTransparentForHTTPS>k__BackingField;

                /*0x3d3aea0*/ HTTPProxy(System.Uri address);
                /*0x3d3aec8*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent);
                /*0x3d3aef8*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent, bool sendWholeUri);
                /*0x3d3af34*/ HTTPProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials, bool isTransparent, bool sendWholeUri, bool nonTransparentForHTTPS);
                /*0x3d3ae64*/ bool get_IsTransparent();
                /*0x3d3ae6c*/ void set_IsTransparent(bool value);
                /*0x3d3ae78*/ bool get_SendWholeUri();
                /*0x3d3ae80*/ void set_SendWholeUri(bool value);
                /*0x3d3ae8c*/ bool get_NonTransparentForHTTPS();
                /*0x3d3ae94*/ void set_NonTransparentForHTTPS(bool value);
                /*0x3d3afc0*/ string GetRequestPath(System.Uri uri);
                /*0x3d3b040*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x3d3b2a0*/ void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x3d3c01c*/ void OnProxyResponse(Best.HTTP.Proxies.ProxyConnectParameters connectParameters, Best.HTTP.Proxies.HTTPProxyResponse resp, System.Exception error);
            }

            class HTTPProxyResponse : Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer
            {
                /*0x10*/ int <VersionMajor>k__BackingField;
                /*0x14*/ int <VersionMinor>k__BackingField;
                /*0x18*/ int <StatusCode>k__BackingField;
                /*0x20*/ string <Message>k__BackingField;
                /*0x28*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> <Headers>k__BackingField;
                /*0x30*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                /*0x38*/ Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState _readState;
                /*0x3c*/ Best.HTTP.Proxies.HTTPProxyResponse.ContentDeliveryMode _deliveryMode;
                /*0x40*/ Best.HTTP.Proxies.ProxyConnectParameters _parameters;
                /*0x80*/ long _expectedLength;
                /*0x88*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream _output;
                /*0x90*/ int _chunkLength;
                /*0x94*/ Best.HTTP.Proxies.HTTPProxyResponse.ReadChunkedStates _readChunkedState;
                /*0x98*/ long _downloaded;
                /*0xa0*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters, Best.HTTP.Proxies.HTTPProxyResponse, System.Exception> OnFinished;
                /*0xa8*/ string <DataAsText>k__BackingField;

                /*0x3d3bef0*/ HTTPProxyResponse(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x3d3c6ac*/ Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState get_ReadState();
                /*0x3d3c6b4*/ void set_ReadState(Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState value);
                /*0x3d3c840*/ int get_VersionMajor();
                /*0x3d3c848*/ void set_VersionMajor(int value);
                /*0x3d3c850*/ int get_VersionMinor();
                /*0x3d3c858*/ void set_VersionMinor(int value);
                /*0x3d3c860*/ int get_StatusCode();
                /*0x3d3c868*/ void set_StatusCode(int value);
                /*0x3d3c870*/ string get_Message();
                /*0x3d3c878*/ void set_Message(string value);
                /*0x3d3c880*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> get_Headers();
                /*0x3d3c888*/ void set_Headers(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> value);
                /*0x3d3c890*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                /*0x3d3c898*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                /*0x3d3c8a0*/ string get_DataAsText();
                /*0x3d3c8a8*/ void set_DataAsText(string value);
                /*0x3d3c8b0*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                /*0x3d3c8b8*/ void UnsetBinding();
                /*0x3d3c8c4*/ void OnConnectionClosed();
                /*0x3d3cb00*/ void OnError(System.Exception ex);
                /*0x3d3ca94*/ void CallFinished(System.Exception error);
                /*0x3d3cb38*/ void OnContent();
                /*0x3d3c614*/ System.Collections.Generic.List<string> GetHeaderValues(string name);
                /*0x3d3d770*/ bool HasHeaderWithValue(string headerName, string value);
                /*0x3d3dfbc*/ void AddHeader(string name, string value);
                /*0x3d3d3b4*/ void VerboseLogging(string v);
                /*0x3d3d338*/ bool IsNewLinePresent(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d3d4b8*/ void ProcessReadHeaders(Best.HTTP.Shared.Streams.PeekableStream peekable, Best.HTTP.Proxies.HTTPProxyResponse.PeekableReadState targetState);
                /*0x3d3da88*/ void ProcessReadRawUnknownLength(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d3e214*/ bool TryReadChunkLength(Best.HTTP.Shared.Streams.PeekableStream peekable, ref int result);
                /*0x3d3dc84*/ void ProcessReadChunked(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d3d838*/ void ProcessReadRaw(Best.HTTP.Shared.Streams.PeekableStream peekable);
                /*0x3d3e1dc*/ void ProcessChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment chunk);
                /*0x3d3c9cc*/ void PostProcessContent();
                /*0x3d3e298*/ string ToString();

                enum ContentDeliveryMode
                {
                    Raw = 0,
                    RawUnknownLength = 1,
                    Chunked = 2,
                }

                enum PeekableReadState
                {
                    StatusLine = 0,
                    Headers = 1,
                    PrepareForContent = 2,
                    ContentSetup = 3,
                    RawContent = 4,
                    Content = 5,
                    Finished = 6,
                }

                enum ReadChunkedStates
                {
                    ReadChunkLength = 0,
                    ReadChunk = 1,
                    ReadTrailingCRLF = 2,
                    ReadTrailingHeaders = 3,
                }
            }

            struct ProxyConnectParameters
            {
                /*0x10*/ Best.HTTP.Proxies.Proxy proxy;
                /*0x18*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream stream;
                /*0x20*/ System.Uri uri;
                /*0x28*/ System.Threading.CancellationToken token;
                /*0x30*/ int AuthenticationAttempts;
                /*0x34*/ bool createTunel;
                /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext context;
                /*0x40*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters> OnSuccess;
                /*0x48*/ System.Action<Best.HTTP.Proxies.ProxyConnectParameters, System.Exception, bool> OnError;
            }

            class Proxy
            {
                /*0x10*/ System.Uri <Address>k__BackingField;
                /*0x18*/ Best.HTTP.Request.Authentication.Credentials <Credentials>k__BackingField;
                /*0x20*/ System.Collections.Generic.List<string> <Exceptions>k__BackingField;

                /*0x3d3af7c*/ Proxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials);
                /*0x3d3e318*/ System.Uri get_Address();
                /*0x3d3e320*/ void set_Address(System.Uri value);
                /*0x3d3e328*/ Best.HTTP.Request.Authentication.Credentials get_Credentials();
                /*0x3d3e330*/ void set_Credentials(Best.HTTP.Request.Authentication.Credentials value);
                /*0x3d3e338*/ System.Collections.Generic.List<string> get_Exceptions();
                /*0x3d3e340*/ void set_Exceptions(System.Collections.Generic.List<string> value);
                void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                /*0x380bb68*/ string GetRequestPath(System.Uri uri);
                /*0x380b2f0*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x3d37e78*/ bool UseProxyForAddress(System.Uri address);
            }

            class SOCKSProxy : Best.HTTP.Proxies.Proxy
            {
                /*0x3d3e348*/ SOCKSProxy(System.Uri address, Best.HTTP.Request.Authentication.Credentials credentials);
                /*0x3d3e34c*/ string GetRequestPath(System.Uri uri);
                /*0x3d3e3a4*/ bool SetupRequest(Best.HTTP.HTTPRequest request);
                /*0x3d3e3ac*/ void BeginConnect(Best.HTTP.Proxies.ProxyConnectParameters parameters);
            }

            namespace Implementations
            {
                enum SOCKSVersions
                {
                    Unknown = 0,
                    V5 = 5,
                }

                enum SOCKSMethods
                {
                    NoAuthenticationRequired = 0,
                    GSSAPI = 1,
                    UsernameAndPassword = 2,
                    NoAcceptableMethods = 255,
                }

                enum SOCKSReplies
                {
                    Succeeded = 0,
                    GeneralSOCKSServerFailure = 1,
                    ConnectionNotAllowedByRuleset = 2,
                    NetworkUnreachable = 3,
                    HostUnreachable = 4,
                    ConnectionRefused = 5,
                    TTLExpired = 6,
                    CommandNotSupported = 7,
                    AddressTypeNotSupported = 8,
                }

                class SOCKSV5Negotiator : Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer
                {
                    /*0x10*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                    /*0x18*/ Best.HTTP.Proxies.Implementations.SOCKSV5Negotiator.NegotiationStates _state;
                    /*0x20*/ Best.HTTP.Proxies.SOCKSProxy _proxy;
                    /*0x28*/ Best.HTTP.Proxies.ProxyConnectParameters _parameters;

                    /*0x3d3e424*/ SOCKSV5Negotiator(Best.HTTP.Proxies.SOCKSProxy proxy, Best.HTTP.Proxies.ProxyConnectParameters parameters);
                    /*0x3d3e4a8*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                    /*0x3d3e4b0*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                    /*0x3d3e964*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                    /*0x3d3e96c*/ void UnsetBinding();
                    /*0x3d3e978*/ void OnConnectionClosed();
                    /*0x3d3ea84*/ void OnError(System.Exception ex);
                    /*0x3d3e4b8*/ void SendHandshake();
                    /*0x3d3ea88*/ void SendConnect();
                    /*0x3d3f084*/ void OnContent();
                    /*0x3d3e9f4*/ void CallOnError(System.Exception ex);
                    /*0x3d404d8*/ void CallOnSuccess();
                    /*0x3d3ef5c*/ void WriteString(byte[] buffer, ref int count, string str);
                    /*0x3d3ef0c*/ void WriteBytes(byte[] buffer, ref int count, byte[] bytes);

                    enum NegotiationStates
                    {
                        MethodSelection = 0,
                        ExpectAuthenticationResponse = 1,
                        ConnectResponse = 2,
                    }
                }
            }

            namespace Autodetect
            {
                class AndroidProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    static /*0x3907c14*/ T Call<T>(string methodName, object[] args);
                    /*0x3d40b3c*/ AndroidProxyDetector();
                    /*0x3d4055c*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x3d40a68*/ string FindFor(string uriStr);
                }

                class EnvironmentProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x10*/ Best.HTTP.Proxies.Proxy _cachedProxy;

                    /*0x3d41360*/ EnvironmentProxyDetector();
                    /*0x3d40b44*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x3d41320*/ string GetEnv(string key);
                }

                class FrameworkProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x3d418b4*/ FrameworkProxyDetector();
                    /*0x3d41368*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                    /*0x3d41718*/ Best.HTTP.Proxies.Proxy SetExceptionList(Best.HTTP.Proxies.Proxy proxy, System.Net.WebProxy detectedProxy);
                }

                class ProgrammaticallyAddedProxyDetector : Best.HTTP.Proxies.Autodetect.IProxyDetector
                {
                    /*0x3d41944*/ ProgrammaticallyAddedProxyDetector();
                    /*0x3d418bc*/ Best.HTTP.Proxies.Proxy Best.HTTP.Proxies.Autodetect.IProxyDetector.GetProxy(Best.HTTP.HTTPRequest request);
                }

                interface IProxyDetector
                {
                    /*0x380bb68*/ Best.HTTP.Proxies.Proxy GetProxy(Best.HTTP.HTTPRequest request);
                }

                enum ProxyDetectionMode
                {
                    Continuous = 0,
                    CacheFirstFound = 1,
                }

                class ProxyDetector
                {
                    /*0x10*/ Best.HTTP.Proxies.Autodetect.IProxyDetector[] _proxyDetectors;
                    /*0x18*/ Best.HTTP.Proxies.Autodetect.ProxyDetectionMode _detectionMode;
                    /*0x1c*/ bool _attached;

                    static /*0x3d4194c*/ Best.HTTP.Proxies.Autodetect.IProxyDetector[] GetDefaultDetectors();
                    /*0x3d41b24*/ ProxyDetector();
                    /*0x3d41b44*/ ProxyDetector(Best.HTTP.Proxies.Autodetect.ProxyDetectionMode detectionMode, Best.HTTP.Proxies.Autodetect.IProxyDetector[] proxyDetectors);
                    /*0x3d41ba8*/ void Reattach();
                    /*0x3d41e14*/ void Detach();
                    /*0x3d4207c*/ void OnRequestEvent(Best.HTTP.Hosts.Connections.RequestEventInfo event);
                }
            }
        }

        namespace HostSetting
        {
            struct HostKey
            {
                /*0x10*/ System.Uri Uri;
                /*0x18*/ Best.HTTP.Request.Settings.ProxySettings Proxy;
                /*0x20*/ UnityEngine.Hash128 Key;

                static /*0x3d42bb0*/ UnityEngine.Hash128 CalculateHash(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                static /*0x3d38048*/ void Append(System.Uri uri, ref UnityEngine.Hash128 hash);
                static /*0x3d2f95c*/ Best.HTTP.HostSetting.HostKey From(Best.HTTP.HTTPRequest request);
                static /*0x3d42ec4*/ Best.HTTP.HostSetting.HostKey From(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                /*0x3d42b68*/ HostKey(System.Uri uri, Best.HTTP.Request.Settings.ProxySettings proxy);
                /*0x3d384e4*/ string get_Host();
                /*0x3d42bf8*/ bool Equals(object obj);
                /*0x3d42c94*/ bool Equals(Best.HTTP.HostSetting.HostKey hostKey);
                /*0x3d42cc8*/ int GetHashCode();
                /*0x3d42cf0*/ string ToString();
            }

            class HostKeyEqualityComparer : System.Collections.Generic.IEqualityComparer<Best.HTTP.HostSetting.HostKey>
            {
                /*0x3d42f34*/ HostKeyEqualityComparer();
                /*0x3d42edc*/ bool Equals(Best.HTTP.HostSetting.HostKey x, Best.HTTP.HostSetting.HostKey y);
                /*0x3d42f0c*/ int GetHashCode(Best.HTTP.HostSetting.HostKey obj);
            }

            class HostManager
            {
                static /*0x0*/ System.Collections.Generic.Dictionary<Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> hosts;

                static /*0x3d439b0*/ HostManager();
                static /*0x3d42f3c*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.HTTPRequest request);
                static /*0x3d432c8*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.Hosts.Connections.ConnectionBase connection);
                static /*0x3d42fc0*/ Best.HTTP.HostSetting.HostVariant GetHostVariant(Best.HTTP.HostSetting.HostKey key);
                static /*0x3d435ec*/ void Shutdown();
                static /*0x3d43850*/ void Clear();
            }

            enum HostProtocolSupport
            {
                Unknown = 0,
                HTTP1 = 1,
                HTTP2 = 2,
                File = 3,
            }

            class HostVariant
            {
                /*0x10*/ Best.HTTP.HostSetting.HostKey <Host>k__BackingField;
                /*0x30*/ Best.HTTP.HostSetting.HostProtocolSupport <ProtocolSupport>k__BackingField;
                /*0x38*/ System.DateTime <LastProtocolSupportUpdate>k__BackingField;
                /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                /*0x48*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.ConnectionBase> Connections;
                /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.HTTPRequest> Queue;
                /*0x58*/ Best.HTTP.Hosts.Settings.HostVariantSettings _settings;
                /*0x60*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> availableConnections;

                /*0x3d43370*/ HostVariant(Best.HTTP.HostSetting.HostKey host);
                /*0x3d43a74*/ Best.HTTP.HostSetting.HostKey get_Host();
                /*0x3d43a80*/ void set_Host(Best.HTTP.HostSetting.HostKey value);
                /*0x3d43a98*/ Best.HTTP.HostSetting.HostProtocolSupport get_ProtocolSupport();
                /*0x3d43aa0*/ void set_ProtocolSupport(Best.HTTP.HostSetting.HostProtocolSupport value);
                /*0x3d43aa8*/ void set_LastProtocolSupportUpdate(System.DateTime value);
                /*0x3d43ab0*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                /*0x3d43ab8*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                /*0x3d43b08*/ void AddProtocol(Best.HTTP.HostSetting.HostProtocolSupport protocolSupport);
                /*0x3d43cec*/ Best.HTTP.HostSetting.HostVariant Send(Best.HTTP.HTTPRequest request);
                /*0x3d43f0c*/ Best.HTTP.HostSetting.HostVariant TryToSendQueuedRequests();
                /*0x3d44680*/ System.ValueTuple<int, int, int> QueryAnyAvailableOrNew(ref System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> connectionCollector);
                /*0x3d44990*/ Best.HTTP.Hosts.Connections.ConnectionBase CreateNew();
                /*0x3d44ca0*/ void OnConnectionStartedProcessingRequest(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.HTTPRequest request);
                /*0x3d44ca4*/ Best.HTTP.HostSetting.HostVariant RecycleConnection(Best.HTTP.Hosts.Connections.ConnectionBase conn);
                /*0x3d44dc0*/ bool RemoveConnectionImpl(Best.HTTP.Hosts.Connections.ConnectionBase conn, Best.HTTP.Hosts.Connections.HTTPConnectionStates setState);
                /*0x3d45148*/ Best.HTTP.HostSetting.HostVariant RemoveConnection(Best.HTTP.Hosts.Connections.ConnectionBase conn, Best.HTTP.Hosts.Connections.HTTPConnectionStates setState);
                /*0x3d45168*/ Best.HTTP.Hosts.Connections.ConnectionBase Find(System.Predicate<Best.HTTP.Hosts.Connections.ConnectionBase> match);
                /*0x3d451c0*/ bool CloseConnectionAfterInactivity(System.DateTime now, object context);
                /*0x3d45674*/ void Shutdown();
                /*0x3d45880*/ string ToString();

                class <>c
                {
                    static /*0x0*/ Best.HTTP.HostSetting.HostVariant.<> <>9;
                    static /*0x8*/ System.Comparison<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> <>9__23_0;
                    static /*0x10*/ System.Comparison<System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase>> <>9__23_1;

                    static /*0x3d45ae0*/ <>c();
                    /*0x3d45b48*/ <>c();
                    /*0x3d45b50*/ int <TryToSendQueuedRequests>b__23_0(System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> a, System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> b);
                    /*0x3d45b90*/ int <TryToSendQueuedRequests>b__23_1(System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> a, System.Collections.Generic.KeyValuePair<int, Best.HTTP.Hosts.Connections.ConnectionBase> b);
                }
            }
        }

        namespace Hosts
        {
            namespace Settings
            {
                class AsteriskStringComparer : System.Collections.Generic.IComparer<string>
                {
                    static /*0x0*/ Best.HTTP.Hosts.Settings.AsteriskStringComparer Instance;

                    static /*0x3d45c84*/ AsteriskStringComparer();
                    /*0x3d45c7c*/ AsteriskStringComparer();
                    /*0x3d45bd0*/ int Compare(string x, string y);
                }

                class TlsClientFactoryDelegate : System.MulticastDelegate
                {
                    /*0x3d45cec*/ TlsClientFactoryDelegate(object object, nint method);
                    /*0x3d45df8*/ Best.HTTP.Shared.TLS.AbstractTls13Client Invoke(System.Uri uri, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class HTTRequestSettings
                {
                    /*0x10*/ System.TimeSpan ConnectTimeout;
                    /*0x18*/ System.TimeSpan RequestTimeout;

                    /*0x3d45e0c*/ HTTRequestSettings();
                }

                class HTTP1ConnectionSettings
                {
                    /*0x10*/ bool TryToReuseConnections;
                    /*0x18*/ System.TimeSpan MaxConnectionIdleTime;
                    /*0x20*/ bool ForceUseThreadPool;

                    /*0x3d45e84*/ HTTP1ConnectionSettings();
                }

                class ClientCertificateSelector : System.MulticastDelegate
                {
                    /*0x3d45ef4*/ ClientCertificateSelector(object object, nint method);
                    /*0x3d45fa8*/ System.Security.Cryptography.X509Certificates.X509Certificate Invoke(string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
                }

                enum TLSHandlers
                {
                    BouncyCastle = 0,
                    Framework = 1,
                }

                class BouncyCastleSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.TlsClientFactoryDelegate TlsClientFactory;

                    static /*0x3d45fbc*/ Best.HTTP.Shared.TLS.AbstractTls13Client DefaultTlsClientFactory(System.Uri uri, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3d46190*/ BouncyCastleSettings();
                }

                class FrameworkTLSSettings
                {
                    static /*0x0*/ System.Func<string, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> DefaultCertificationValidator;
                    /*0x10*/ System.Security.Authentication.SslProtocols TlsVersions;
                    /*0x14*/ bool CheckCertificateRevocation;
                    /*0x18*/ System.Func<string, System.Security.Cryptography.X509Certificates.X509Certificate, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> CertificationValidator;
                    /*0x20*/ Best.HTTP.Hosts.Settings.ClientCertificateSelector ClientCertificationProvider;

                    static /*0x3d46218*/ FrameworkTLSSettings();
                    /*0x3d46198*/ FrameworkTLSSettings();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Settings.FrameworkTLSSettings.<> <>9;

                        static /*0x3d462e8*/ <>c();
                        /*0x3d46350*/ <>c();
                        /*0x3d46358*/ bool <.cctor>b__6_0(string host, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
                    }
                }

                class TLSSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.TLSHandlers TLSHandler;
                    /*0x18*/ Best.HTTP.Hosts.Settings.BouncyCastleSettings BouncyCastleSettings;
                    /*0x20*/ Best.HTTP.Hosts.Settings.FrameworkTLSSettings FrameworkTLSSettings;

                    /*0x3d46360*/ TLSSettings();
                }

                class HostVariantSettings
                {
                    /*0x10*/ int MaxConnectionPerVariant;
                    /*0x14*/ float MaxAssignedRequestsFactor;
                    /*0x18*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> VariantFactory;
                    /*0x20*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostVariant, Best.HTTP.Hosts.Connections.ConnectionBase> ConnectionFactory;

                    /*0x3d46408*/ HostVariantSettings();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Settings.HostVariantSettings.<> <>9;
                        static /*0x8*/ System.Func<Best.HTTP.Hosts.Settings.HostVariantSettings, Best.HTTP.HostSetting.HostKey, Best.HTTP.HostSetting.HostVariant> <>9__4_0;

                        static /*0x3d46508*/ <>c();
                        /*0x3d46570*/ <>c();
                        /*0x3d46578*/ Best.HTTP.HostSetting.HostVariant <.ctor>b__4_0(Best.HTTP.Hosts.Settings.HostVariantSettings settings, Best.HTTP.HostSetting.HostKey key);
                    }
                }

                class LowLevelConnectionSettings
                {
                    /*0x10*/ uint TCPWriteBufferSize;
                    /*0x14*/ uint ReadBufferSize;

                    /*0x3d465e0*/ LowLevelConnectionSettings();
                }

                class HostSettings
                {
                    /*0x10*/ Best.HTTP.Hosts.Settings.LowLevelConnectionSettings LowLevelConnectionSettings;
                    /*0x18*/ Best.HTTP.Hosts.Settings.HTTRequestSettings RequestSettings;
                    /*0x20*/ Best.HTTP.Hosts.Settings.HTTP1ConnectionSettings HTTP1ConnectionSettings;
                    /*0x28*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRingmasterSettings TCPRingmasterSettings;
                    /*0x30*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings HTTP2ConnectionSettings;
                    /*0x38*/ Best.HTTP.Hosts.Settings.TLSSettings TLSSettings;
                    /*0x40*/ Best.HTTP.Hosts.Settings.HostVariantSettings HostVariantSettings;

                    /*0x3d465f0*/ HostSettings();
                }

                class HostSettingsManager
                {
                    /*0x10*/ System.Collections.Generic.SortedList<string, Best.HTTP.Hosts.Settings.Node> _rootNodes;
                    /*0x18*/ System.Collections.Generic.List<string> _segments;
                    /*0x20*/ System.Collections.Concurrent.ConcurrentDictionary<string, Best.HTTP.Hosts.Settings.HostSettings> _cache;

                    /*0x3d467bc*/ HostSettingsManager();
                    /*0x3d46974*/ Best.HTTP.Hosts.Settings.HostSettings Add(string hostname, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x3d43ac0*/ Best.HTTP.Hosts.Settings.HostSettings Get(Best.HTTP.HostSetting.HostVariant variant, bool fallbackToWildcard);
                    /*0x3d43340*/ Best.HTTP.Hosts.Settings.HostSettings Get(Best.HTTP.HostSetting.HostKey hostKey, bool fallbackToWildcard);
                    /*0x3d46fbc*/ Best.HTTP.Hosts.Settings.HostSettings Get(System.Uri uri, bool fallbackToWildcard);
                    /*0x3d313a0*/ Best.HTTP.Hosts.Settings.HostSettings Get(string hostname, bool fallbackToWildcard);

                    class <>c__DisplayClass12_0
                    {
                        /*0x10*/ Best.HTTP.Hosts.Settings.HostSettings foundSettings;

                        /*0x3d46ff8*/ <>c__DisplayClass12_0();
                        /*0x3d47110*/ Best.HTTP.Hosts.Settings.HostSettings <Get>b__0(string key, Best.HTTP.Hosts.Settings.HostSettings settings);
                    }
                }

                class Node
                {
                    /*0x10*/ string key;
                    /*0x18*/ System.Collections.Generic.SortedList<string, Best.HTTP.Hosts.Settings.Node> childNodes;
                    /*0x20*/ Best.HTTP.Hosts.Settings.HostSettings hostSettings;

                    /*0x3d47118*/ Node(string key);
                    /*0x3d46d88*/ Node(string key, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x3d46dcc*/ void Add(System.Collections.Generic.List<string> segments, Best.HTTP.Hosts.Settings.HostSettings settings);
                    /*0x3d47000*/ Best.HTTP.Hosts.Settings.HostSettings Find(System.Collections.Generic.List<string> segments);
                }
            }

            namespace Connections
            {
                class ConnectionBase : System.IDisposable
                {
                    /*0x10*/ Best.HTTP.HostSetting.HostKey <HostKey>k__BackingField;
                    /*0x30*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates <State>k__BackingField;
                    /*0x38*/ Best.HTTP.HTTPRequest <CurrentRequest>k__BackingField;
                    /*0x40*/ System.TimeSpan <KeepAliveTime>k__BackingField;
                    /*0x48*/ int <MaxAssignedRequests>k__BackingField;
                    /*0x50*/ System.Uri <LastProcessedUri>k__BackingField;
                    /*0x58*/ System.DateTime <LastProcessTime>k__BackingField;
                    /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                    /*0x68*/ bool IsThreaded;
                    /*0x6c*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;

                    /*0x3d471f8*/ ConnectionBase(Best.HTTP.HostSetting.HostKey hostKey);
                    /*0x3d47220*/ ConnectionBase(Best.HTTP.HostSetting.HostKey hostKey, bool threaded);
                    /*0x3d47148*/ Best.HTTP.HostSetting.HostKey get_HostKey();
                    /*0x3d47154*/ void set_HostKey(Best.HTTP.HostSetting.HostKey value);
                    /*0x3d4716c*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates get_State();
                    /*0x3d47174*/ void set_State(Best.HTTP.Hosts.Connections.HTTPConnectionStates value);
                    /*0x3d4717c*/ Best.HTTP.HTTPRequest get_CurrentRequest();
                    /*0x3d47184*/ void set_CurrentRequest(Best.HTTP.HTTPRequest value);
                    /*0x3d4718c*/ System.TimeSpan get_KeepAliveTime();
                    /*0x3d47194*/ void set_KeepAliveTime(System.TimeSpan value);
                    /*0x3d4719c*/ bool get_CanProcessMultiple();
                    /*0x3d471a4*/ int get_AssignedRequests();
                    /*0x3d471c0*/ int get_MaxAssignedRequests();
                    /*0x3d471c8*/ System.Uri get_LastProcessedUri();
                    /*0x3d471d0*/ void set_LastProcessedUri(System.Uri value);
                    /*0x3d471d8*/ System.DateTime get_LastProcessTime();
                    /*0x3d471e0*/ void set_LastProcessTime(System.DateTime value);
                    /*0x3d471e8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x3d471f0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x3d47400*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x3d47558*/ void ThreadFunc();
                    /*0x3d4755c*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                    /*0x3d47564*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                    /*0x3d4756c*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                    /*0x3d450d8*/ void Dispose();
                    /*0x3d47574*/ void Dispose(bool disposing);
                    /*0x3d47578*/ void Finalize();
                    /*0x3d4761c*/ string ToString();
                }

                enum ConnectionEvents
                {
                    StateChange = 0,
                    ProtocolSupport = 1,
                }

                struct ConnectionEventInfo
                {
                    /*0x10*/ Best.HTTP.Hosts.Connections.ConnectionBase Source;
                    /*0x18*/ Best.HTTP.Hosts.Connections.ConnectionEvents Event;
                    /*0x1c*/ Best.HTTP.Hosts.Connections.HTTPConnectionStates State;
                    /*0x20*/ Best.HTTP.HostSetting.HostProtocolSupport ProtocolSupport;
                    /*0x28*/ Best.HTTP.HTTPRequest Request;
                    /*0x30*/ Best.HTTP.HTTPRequestStates RequestState;

                    /*0x3d476a0*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.Hosts.Connections.HTTPConnectionStates newState);
                    /*0x3d476e0*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.HostSetting.HostProtocolSupport protocolSupport);
                    /*0x3d47728*/ ConnectionEventInfo(Best.HTTP.Hosts.Connections.ConnectionBase sourceConn, Best.HTTP.HTTPRequest request);
                    /*0x3d47770*/ string ToString();
                }

                class ConnectionEventHelper
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.ConnectionEventInfo> connectionEventQueue;
                    static /*0x8*/ System.Action<Best.HTTP.Hosts.Connections.ConnectionEventInfo> OnEvent;

                    static /*0x3d48580*/ ConnectionEventHelper();
                    static /*0x3d47a30*/ void EnqueueConnectionEvent(Best.HTTP.Hosts.Connections.ConnectionEventInfo event);
                    static /*0x3d47c68*/ void Clear();
                    static /*0x3d47ce0*/ void ProcessQueue();
                    static /*0x3d4816c*/ void HandleConnectionStateChange(Best.HTTP.Hosts.Connections.ConnectionEventInfo event);
                }

                class KeepAliveHeader
                {
                    /*0x10*/ System.TimeSpan <TimeOut>k__BackingField;
                    /*0x18*/ int <MaxRequests>k__BackingField;

                    /*0x3d48828*/ KeepAliveHeader();
                    /*0x3d48618*/ System.TimeSpan get_TimeOut();
                    /*0x3d48620*/ void set_TimeOut(System.TimeSpan value);
                    /*0x3d48628*/ int get_MaxRequests();
                    /*0x3d48630*/ void set_MaxRequests(int value);
                    /*0x3d48638*/ void Parse(System.Collections.Generic.List<string> headerValues);
                }

                class ConnectionHelper
                {
                    static /*0x3d48830*/ void ResendRequestAndCloseConnection(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.HTTPRequest request);
                    static /*0x3d488f0*/ void EnqueueEvents(Best.HTTP.Hosts.Connections.ConnectionBase connection, Best.HTTP.Hosts.Connections.HTTPConnectionStates connectionState, Best.HTTP.HTTPRequest request, Best.HTTP.HTTPRequestStates requestState, System.Exception error);
                    static /*0x3d48a2c*/ System.Exception HandleResponse(Best.HTTP.HTTPRequest request, ref bool resendRequest, ref Best.HTTP.Hosts.Connections.HTTPConnectionStates proposedConnectionState, ref Best.HTTP.Hosts.Connections.KeepAliveHeader keepAlive, Best.HTTP.Shared.Logger.LoggingContext loggingContext);
                    static /*0x3d496f8*/ System.Uri GetRedirectUri(Best.HTTP.HTTPRequest request, string location);
                }

                enum HTTPConnectionStates
                {
                    Initial = 0,
                    Processing = 1,
                    WaitForProtocolShutdown = 2,
                    Recycle = 3,
                    Free = 4,
                    Closed = 5,
                    ClosedResendRequest = 6,
                }

                class HTTPOverTCPConnection : Best.HTTP.Hosts.Connections.ConnectionBase, Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer
                {
                    /*0x70*/ Best.HTTP.Hosts.Connections.IHTTPRequestHandler requestHandler;
                    /*0x78*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator _negotiator;

                    /*0x3d4a0b0*/ HTTPOverTCPConnection(Best.HTTP.HostSetting.HostKey hostKey);
                    /*0x3d49bf4*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_TopStream();
                    /*0x3d49c10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer get_Streamer();
                    /*0x3d49c2c*/ int get_AssignedRequests();
                    /*0x3d49ce0*/ int get_MaxAssignedRequests();
                    /*0x3d49d90*/ System.TimeSpan get_KeepAliveTime();
                    /*0x3d49ff4*/ void set_KeepAliveTime(System.TimeSpan value);
                    /*0x3d49ffc*/ bool get_CanProcessMultiple();
                    /*0x3d4a0d8*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x3d4a940*/ System.Collections.Generic.List<string> Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.GetSupportedProtocolNames(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator);
                    /*0x3d4ac28*/ bool Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.MustStopAdvancingToNextStep(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps finishedStep, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps nextStep, System.Exception error);
                    /*0x3d4ae58*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.EvaluateProxyNegotiationFailure(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error, bool resendForAuthentication);
                    /*0x3d4b23c*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.OnNegotiationFailed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error);
                    /*0x3d4b55c*/ void Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer.OnNegotiationFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string negotiatedProtocol);
                    /*0x3d4be0c*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                    /*0x3d4b244*/ bool PreprocessRequestState(System.Exception error);
                    /*0x3d4a728*/ bool TrySetErrorState(Best.HTTP.HTTPRequest request, System.Exception ex);
                    /*0x3d4b5a0*/ void StartWithNegotiatedProtocol(string negotiatedProtocol, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream);
                    /*0x3d4c4d8*/ void ThreadFunc();
                    /*0x3d4c57c*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                    /*0x3d4c684*/ void Dispose(bool disposing);
                }

                enum SupportedProtocols
                {
                    Unknown = 0,
                    HTTP = 1,
                    WebSocket = 2,
                    ServerSentEvents = 3,
                }

                class HTTPProtocolFactory
                {
                    static /*0x3d4aaec*/ Best.HTTP.Hosts.Connections.SupportedProtocols GetProtocolFromUri(System.Uri uri);
                    static /*0x3d4a5f4*/ bool IsSecureProtocol(System.Uri uri);
                }

                interface IDownloadContentBufferAvailable
                {
                    /*0x380d83c*/ void BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                }

                interface IHTTPRequestHandler : System.IDisposable
                {
                    /*0x380b9e8*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                    /*0x380b128*/ bool get_CanProcessMultiple();
                    /*0x380b6a0*/ int get_AssignedRequests();
                    /*0x380b6a0*/ int get_MaxAssignedRequests();
                    /*0x380b9e8*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x380d83c*/ void Process(Best.HTTP.HTTPRequest request);
                    /*0x380cb08*/ void RunHandler();
                    /*0x380cffc*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                }

                interface IThreadSignaler
                {
                    /*0x380cb08*/ void SignalThread();
                }

                enum RequestEvents
                {
                    Upgraded = 0,
                    DownloadProgress = 1,
                    UploadProgress = 2,
                    StreamingData = 3,
                    DownloadStarted = 4,
                    StateChange = 5,
                    SetState = 6,
                    QueuedResend = 7,
                    Resend = 8,
                    Headers = 9,
                    Timing = 10,
                }

                struct RequestEventInfo
                {
                    /*0x10*/ Best.HTTP.HTTPRequest SourceRequest;
                    /*0x18*/ Best.HTTP.Hosts.Connections.RequestEvents Event;
                    /*0x1c*/ Best.HTTP.HTTPRequestStates State;
                    /*0x20*/ System.Exception Error;
                    /*0x28*/ long Progress;
                    /*0x30*/ long ProgressLength;
                    /*0x38*/ byte[] Data;
                    /*0x40*/ int DataLength;
                    /*0x48*/ Best.HTTP.Request.Timings.TimingEventInfo timingEvent;
                    /*0x68*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Headers;

                    /*0x3d4af90*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.RequestEvents event);
                    /*0x3d4c814*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.HTTPRequestStates newState, System.Exception error);
                    /*0x3d4c884*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Hosts.Connections.RequestEvents event, long progress, long progressLength);
                    /*0x3d4c8fc*/ RequestEventInfo(Best.HTTP.HTTPRequest request, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                    /*0x3d4c96c*/ RequestEventInfo(Best.HTTP.HTTPRequest request, Best.HTTP.Request.Timings.TimingEventInfo timingEvent);
                    /*0x3d4c9e4*/ string ToString();
                }

                class ProgressFlattener
                {
                    /*0x10*/ Best.HTTP.Hosts.Connections.ProgressFlattener.FlattenedProgress[] progresses;
                    /*0x18*/ bool hasProgress;

                    /*0x3d4d1ec*/ ProgressFlattener();
                    /*0x3d4ce04*/ void InsertOrUpdate(Best.HTTP.Hosts.Connections.RequestEventInfo info, Best.HTTP.Request.Settings.OnProgressDelegate onProgress);
                    /*0x3d4cfd0*/ void DispatchProgressCallbacks();

                    struct FlattenedProgress
                    {
                        /*0x10*/ Best.HTTP.HTTPRequest request;
                        /*0x18*/ Best.HTTP.Request.Settings.OnProgressDelegate onProgress;
                        /*0x20*/ long progress;
                        /*0x28*/ long length;
                    }
                }

                class RequestEventHelper
                {
                    static /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.RequestEventInfo> requestEventQueue;
                    static /*0x8*/ System.Action<Best.HTTP.Hosts.Connections.RequestEventInfo> OnEvent;
                    static /*0x10*/ Best.HTTP.Hosts.Connections.ProgressFlattener downloadProgress;
                    static /*0x18*/ Best.HTTP.Hosts.Connections.ProgressFlattener uploadProgress;
                    static /*0x20*/ string[] RequestStateNames;

                    static /*0x3d4f8f8*/ RequestEventHelper();
                    static /*0x3d4aff8*/ void EnqueueRequestEvent(Best.HTTP.Hosts.Connections.RequestEventInfo ev);
                    static /*0x3d4d1f4*/ void Clear();
                    static /*0x3d4d26c*/ void ProcessQueue();
                    static /*0x3d4f288*/ bool AbortRequestWhenTimedOut(System.DateTime now, object context);
                    static /*0x3d4e724*/ void HandleQueued(Best.HTTP.HTTPRequest source);
                    static /*0x3d4e8d0*/ void HandleRequestStateChange(ref Best.HTTP.Hosts.Connections.RequestEventInfo event);
                    static /*0x3d4f71c*/ bool OnDelayedDisposeTimer(System.DateTime time, object request);
                }

                namespace HTTP2
                {
                    class BufferHelper
                    {
                        static /*0x3d4fb6c*/ void SetUInt16(byte[] buffer, int offset, ushort value);
                        static /*0x3d4fbb4*/ void SetUInt24(byte[] buffer, int offset, uint value);
                        static /*0x3d4fc18*/ void SetUInt31(byte[] buffer, int offset, uint value);
                        static /*0x3d4fc98*/ void SetUInt32(byte[] buffer, int offset, uint value);
                        static /*0x3d4fd18*/ void SetLong(byte[] buffer, int offset, long value);
                        static /*0x3d4fe08*/ byte SetBit(byte value, byte bitIdx, bool bitValue);
                        static /*0x3d4fe98*/ byte SetBit(byte value, byte bitIdx, byte bitValue);
                        static /*0x3d4fec0*/ byte ReadBit(byte value, byte bitIdx);
                        static /*0x3d4fedc*/ byte ReadValue(byte value, byte fromBit, byte toBit);
                        static /*0x3d4ff40*/ ushort ReadUInt16(byte[] buffer, int offset);
                        static /*0x3d4ff80*/ uint ReadUInt24(byte[] buffer, int offset);
                        static /*0x3d4ffd8*/ uint ReadUInt31(byte[] buffer, int offset);
                        static /*0x3d5004c*/ uint ReadUInt31(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                        static /*0x3d500c0*/ uint ReadUInt32(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                        static /*0x3d50134*/ long ReadLong(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer, int offset);
                    }

                    interface IFrameDataView : System.IDisposable
                    {
                        /*0x380b828*/ long get_Length();
                        /*0x380b828*/ long get_Position();
                        void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x380b6a0*/ int ReadByte();
                        int Read(byte[] buffer, int offset, int count);
                    }

                    class CommonFrameView : Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView, System.IDisposable
                    {
                        /*0x10*/ long <Length>k__BackingField;
                        /*0x18*/ long <Position>k__BackingField;
                        /*0x20*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> frames;
                        /*0x28*/ int currentFrameIdx;
                        /*0x30*/ byte[] data;
                        /*0x38*/ int dataOffset;
                        /*0x3c*/ int maxOffset;

                        /*0x3d50728*/ CommonFrameView();
                        /*0x3d50204*/ long get_Length();
                        /*0x3d5020c*/ void set_Length(long value);
                        /*0x3d50214*/ long get_Position();
                        /*0x3d5021c*/ void set_Position(long value);
                        void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        long CalculateDataLengthForFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d50224*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3d5035c*/ int ReadByte();
                        /*0x380b128*/ bool AdvanceFrame();
                        /*0x3d503d4*/ void Dispose();
                        /*0x3d504f8*/ string ToString();
                    }

                    class HeaderFrameView : Best.HTTP.Hosts.Connections.HTTP2.CommonFrameView
                    {
                        /*0x3d50d0c*/ HeaderFrameView();
                        /*0x3d507b8*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d50968*/ long CalculateDataLengthForFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d50bdc*/ bool AdvanceFrame();
                    }

                    class FramesAsStreamView : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView view;

                        /*0x3d50ea4*/ FramesAsStreamView(Best.HTTP.Hosts.Connections.HTTP2.IFrameDataView view);
                        /*0x3d50d10*/ bool get_CanRead();
                        /*0x3d50d18*/ bool get_CanSeek();
                        /*0x3d50d20*/ bool get_CanWrite();
                        /*0x3d50d28*/ long get_Length();
                        /*0x3d50dc8*/ long get_Position();
                        /*0x3d50e6c*/ void set_Position(long value);
                        /*0x3d50f18*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d50fec*/ int ReadByte();
                        /*0x3d51090*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3d51154*/ void Close();
                        /*0x3d51200*/ void Flush();
                        /*0x3d51204*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3d5123c*/ void SetLength(long value);
                        /*0x3d51274*/ void Write(byte[] buffer, int offset, int count);
                        /*0x3d512ac*/ string ToString();
                    }

                    class HeaderTable
                    {
                        static /*0x0*/ string[] StaticTableValues;
                        static /*0x8*/ string[] StaticTable;
                        /*0x10*/ uint <DynamicTableSize>k__BackingField;
                        /*0x14*/ uint _maxDynamicTableSize;
                        /*0x18*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> DynamicTable;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry settingsRegistry;

                        static /*0x3d51e44*/ HeaderTable();
                        /*0x3d513e0*/ HeaderTable(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry);
                        /*0x3d512cc*/ uint get_DynamicTableSize();
                        /*0x3d512d4*/ void set_DynamicTableSize(uint value);
                        /*0x3d512dc*/ uint get_MaxDynamicTableSize();
                        /*0x3d512e4*/ void set_MaxDynamicTableSize(uint value);
                        /*0x3d514d4*/ System.Collections.Generic.KeyValuePair<uint, uint> GetIndex(string key, string value);
                        /*0x3d517bc*/ string GetKey(uint index);
                        /*0x3d518cc*/ System.Collections.Generic.KeyValuePair<string, string> GetHeader(uint index);
                        /*0x3d51a54*/ void Add(System.Collections.Generic.KeyValuePair<string, string> header);
                        /*0x3d51afc*/ uint CalculateEntrySize(System.Collections.Generic.KeyValuePair<string, string> entry);
                        /*0x3d512f0*/ void EvictEntries(uint newHeaderSize);
                        /*0x3d51b8c*/ string ToString();
                    }

                    class HPACKEncoder
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settingsRegistry;
                        /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HeaderTable requestTable;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HeaderTable responseTable;
                        /*0x28*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                        static /*0x3d532ac*/ void WriteIndexedHeaderField(System.IO.Stream stream, uint index);
                        static /*0x3d553ac*/ void WriteLiteralHeaderFieldWithIncrementalIndexing_IndexedName(System.IO.Stream stream, uint index, string value);
                        static /*0x3d55298*/ void WriteLiteralHeaderFieldWithIncrementalIndexing_NewName(System.IO.Stream stream, string header, string value);
                        static /*0x3d533b0*/ void WriteLiteralHeaderFieldWithoutIndexing_IndexedName(System.IO.Stream stream, uint index, string value);
                        static /*0x3d555f0*/ uint RequiredBytesToEncodeString(string str);
                        static /*0x3d55698*/ void EncodeString(string str, byte[] buffer, ref uint offset);
                        static /*0x3d55790*/ uint RequiredBytesToEncodeStringWithHuffman(string str);
                        static /*0x3d55ae8*/ void EncodeStringWithHuffman(string str, uint encodedLength, byte[] buffer, ref uint offset);
                        static /*0x3d55d54*/ void AddCodePointToBuffer(Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry code, byte[] buffer, ref uint offset, ref byte bufferBitIdx, bool finishOnBoundary);
                        static /*0x3d55730*/ uint RequiredBytesToEncodeRawString(string str);
                        static /*0x3d5590c*/ void EncodeRawStringTo(string str, byte[] buffer, ref uint offset);
                        static /*0x3d554dc*/ byte RequiredBytesToEncodeInteger(uint value, byte N);
                        static /*0x3d55518*/ void EncodeInteger(uint value, byte N, byte[] buffer, ref uint offset);
                        static /*0x3d54acc*/ uint DecodeInteger(byte N, byte data, System.IO.Stream stream);
                        /*0x3d52d94*/ HPACKEncoder(Best.HTTP.Shared.Logger.LoggingContext context, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry);
                        /*0x3d52e78*/ void Encode(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context, Best.HTTP.HTTPRequest request, System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> to, uint streamId);
                        /*0x3d53754*/ void Decode(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context, System.IO.Stream stream, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> to);
                        /*0x3d54740*/ System.Collections.Generic.KeyValuePair<string, string> ReadIndexedHeader(byte firstByte, System.IO.Stream stream);
                        /*0x3d547e4*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldWithIncrementalIndexing_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x3d5476c*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldWithIncrementalIndexing_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x3d54904*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldwithoutIndexing_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x3d5488c*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldwithoutIndexing_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x3d54a24*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldNeverIndexed_IndexedName(byte firstByte, System.IO.Stream stream);
                        /*0x3d549ac*/ System.Collections.Generic.KeyValuePair<string, string> ReadLiteralHeaderFieldNeverIndexed_NewName(byte firstByte, System.IO.Stream stream);
                        /*0x3d54b48*/ string DecodeString(System.IO.Stream stream);
                        /*0x3d534dc*/ void CreateHeaderFrames(System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> to, uint streamId, byte[] dataToSend, uint payloadLength, bool hasBody);
                        /*0x3d55190*/ void WriteHeader(System.IO.Stream stream, string header, string value);
                        /*0x3d55e30*/ string ToString();

                        class <>c__DisplayClass5_0
                        {
                            /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder <>4__this;
                            /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream context;
                            /*0x20*/ Best.HTTP.Shared.Streams.BufferPoolMemoryStream bufferStream;

                            /*0x3d532a4*/ <>c__DisplayClass5_0();
                            /*0x3d55e80*/ void <Encode>b__0(string header, System.Collections.Generic.List<string> values);
                        }
                    }

                    class WebSocketOverHTTP2Settings
                    {
                        /*0x10*/ bool <EnableWebSocketOverHTTP2>k__BackingField;
                        /*0x11*/ bool <EnableImplementationFallback>k__BackingField;

                        /*0x3d5646c*/ WebSocketOverHTTP2Settings();
                        /*0x3d5645c*/ bool get_EnableWebSocketOverHTTP2();
                        /*0x3d56464*/ bool get_EnableImplementationFallback();
                    }

                    class HTTP2ConnectionSettings
                    {
                        /*0x10*/ bool EnableHTTP2Connections;
                        /*0x14*/ uint HeaderTableSize;
                        /*0x18*/ uint MaxConcurrentStreams;
                        /*0x1c*/ uint InitialStreamWindowSize;
                        /*0x20*/ uint InitialConnectionWindowSize;
                        /*0x24*/ uint MaxFrameSize;
                        /*0x28*/ uint MaxHeaderListSize;
                        /*0x30*/ System.TimeSpan MaxIdleTime;
                        /*0x38*/ System.TimeSpan PingFrequency;
                        /*0x40*/ System.TimeSpan Timeout;
                        /*0x48*/ bool EnableConnectProtocol;
                        /*0x50*/ Best.HTTP.Hosts.Connections.HTTP2.WebSocketOverHTTP2Settings WebSocketOverHTTP2Settings;

                        /*0x3d5647c*/ HTTP2ConnectionSettings();
                    }

                    class CustomHTTP2StreamFactory : System.MulticastDelegate
                    {
                        /*0x3d56568*/ CustomHTTP2StreamFactory(object object, nint method);
                        /*0x3d5661c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream Invoke(Best.HTTP.HTTPRequest request, uint streamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer parentHandler, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry, Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder hpackEncoder);
                    }

                    class HTTP2ContentConsumer : Best.HTTP.Hosts.Connections.IHTTPRequestHandler, System.IDisposable, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IThreadSignaler
                    {
                        static /*0x0*/ int RTTBufferCapacity;
                        /*0x10*/ int _assignedRequest;
                        /*0x14*/ int _maxAssignedRequests;
                        /*0x18*/ double <Latency>k__BackingField;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settings;
                        /*0x28*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder HPACKEncoder;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x38*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x40*/ System.DateTime lastPingSent;
                        /*0x48*/ int waitingForPingAck;
                        /*0x50*/ Best.HTTP.Shared.Extensions.CircularBuffer<double> rtts;
                        /*0x58*/ bool isRunning;
                        /*0x60*/ System.Threading.AutoResetEvent newFrameSignal;
                        /*0x68*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.HTTPRequest> requestQueue;
                        /*0x70*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream> clientInitiatedStreams;
                        /*0x78*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> newFrames;
                        /*0x80*/ System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames;
                        /*0x88*/ uint remoteWindow;
                        /*0x90*/ System.DateTime lastInteraction;
                        /*0x98*/ System.DateTime goAwaySentAt;
                        /*0xa0*/ Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn;
                        /*0xa8*/ long LastStreamId;
                        /*0xb0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings _connectionSettings;
                        /*0xb8*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;

                        static /*0x3d5cec4*/ HTTP2ContentConsumer();
                        /*0x3d4c0a4*/ HTTP2ContentConsumer(Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn);
                        /*0x3d56630*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                        /*0x3d56638*/ bool get_CanProcessMultiple();
                        /*0x3d566e0*/ int get_AssignedRequests();
                        /*0x3d566e8*/ int get_MaxAssignedRequests();
                        /*0x3d566f0*/ double get_Latency();
                        /*0x3d566f8*/ void set_Latency(double value);
                        /*0x3d56700*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3d56708*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3d56710*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x3d56718*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x3d56678*/ bool get_SentGoAwayFrame();
                        /*0x3d56720*/ System.TimeSpan get_MaxGoAwayWaitTime();
                        /*0x3d56938*/ void Process(Best.HTTP.HTTPRequest request);
                        /*0x3d56b00*/ void SignalThread();
                        /*0x3d56b14*/ void RunHandler();
                        /*0x3d5bccc*/ void OnRemoteSettingChanged(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint oldValue, uint newValue);
                        /*0x3d5bcec*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x3d5bcf4*/ void UnsetBinding();
                        /*0x3d5bd00*/ void OnContent();
                        /*0x3d5c5b8*/ void OnConnectionClosed();
                        /*0x3d5c740*/ void OnError(System.Exception ex);
                        /*0x3d5a5c4*/ double CalculateLatency();
                        /*0x3d5a0e8*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Stream FindStreamById(uint streamId);
                        /*0x3d5c8d4*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                        /*0x3d5c8dc*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                        /*0x3d5c8e4*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                        /*0x3d5c940*/ void Dispose();
                    }

                    enum HTTP2ErrorCodes
                    {
                        NO_ERROR = 0,
                        PROTOCOL_ERROR = 1,
                        INTERNAL_ERROR = 2,
                        FLOW_CONTROL_ERROR = 3,
                        SETTINGS_TIMEOUT = 4,
                        STREAM_CLOSED = 5,
                        FRAME_SIZE_ERROR = 6,
                        REFUSED_STREAM = 7,
                        CANCEL = 8,
                        COMPRESSION_ERROR = 9,
                        CONNECT_ERROR = 10,
                        ENHANCE_YOUR_CALM = 11,
                        INADEQUATE_SECURITY = 12,
                        HTTP_1_1_REQUIRED = 13,
                    }

                    class HTTP2FrameHelper
                    {
                        static /*0x3d5a67c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2WindowUpdateFrame ReadWindowUpdateFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5a708*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2GoAwayFrame ReadGoAwayFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5a54c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFrame ReadPingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5d09c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2RSTStreamFrame ReadRST_StreamFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d509b8*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2HeadersFrame ReadHeadersFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5d1c0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2DataFrame ReadDataFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5d3b0*/ void StreamRead(System.IO.Stream stream, byte[] buffer, int offset, uint count);
                        static /*0x3d5d47c*/ void StreamRead(System.IO.Stream stream, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                        static /*0x3d5bbf0*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer HeaderAsBinary(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5c4c0*/ bool CanReadFullFrame(Best.HTTP.Shared.Streams.PeekableStream stream);
                        static /*0x3d5c140*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload ReadHeader(System.IO.Stream stream, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d5d54c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsFrame ReadSettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        static /*0x3d5d758*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateACKSettingsFrame();
                        static /*0x3d5d774*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateSettingsFrame(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> settings, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d59ff8*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreatePingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFlags flags, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d59ef0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateWindowUpdateFrame(uint streamId, uint windowSizeIncrement, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d5b874*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateGoAwayFrame(uint lastStreamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes error, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3d5d920*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateRSTFrame(uint streamId, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes errorCode, Best.HTTP.Shared.Logger.LoggingContext context);
                    }

                    enum HTTP2FrameTypes
                    {
                        DATA = 0,
                        HEADERS = 1,
                        PRIORITY = 2,
                        RST_STREAM = 3,
                        SETTINGS = 4,
                        PUSH_PROMISE = 5,
                        PING = 6,
                        GOAWAY = 7,
                        WINDOW_UPDATE = 8,
                        CONTINUATION = 9,
                        ALT_SVC = 10,
                    }

                    enum HTTP2DataFlags
                    {
                        None = 0,
                        END_STREAM = 1,
                        PADDED = 8,
                    }

                    enum HTTP2HeadersFlags
                    {
                        None = 0,
                        END_STREAM = 1,
                        END_HEADERS = 4,
                        PADDED = 8,
                        PRIORITY = 32,
                    }

                    enum HTTP2SettingsFlags
                    {
                        None = 0,
                        ACK = 1,
                    }

                    enum HTTP2PingFlags
                    {
                        None = 0,
                        ACK = 1,
                    }

                    struct HTTP2FrameHeaderAndPayload
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameTypes Type;
                        /*0x11*/ byte Flags;
                        /*0x14*/ uint StreamId;
                        /*0x18*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Payload;
                        /*0x28*/ bool DontUseMemPool;

                        /*0x3d5b98c*/ string ToString();
                        /*0x3d506d0*/ string PayloadAsHex();
                    }

                    struct HTTP2SettingsFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> Settings;

                        /*0x3d5d728*/ HTTP2SettingsFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5da28*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsFlags get_Flags();
                        /*0x3d5da30*/ string ToString();
                    }

                    struct HTTP2DataFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Nullable<byte> PadLength;
                        /*0x38*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Data;

                        /*0x3d5d31c*/ HTTP2DataFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5d3a8*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2DataFlags get_Flags();
                        /*0x3d5dd54*/ string ToString();
                    }

                    struct HTTP2HeadersFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ System.Nullable<byte> PadLength;
                        /*0x32*/ System.Nullable<byte> IsExclusive;
                        /*0x34*/ System.Nullable<uint> StreamDependency;
                        /*0x3c*/ System.Nullable<byte> Weight;
                        /*0x40*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment HeaderBlockFragment;

                        /*0x3d5d128*/ HTTP2HeadersFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5d1b8*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2HeadersFlags get_Flags();
                        /*0x3d5dfac*/ string ToString();
                    }

                    struct HTTP2RSTStreamFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ uint ErrorCode;

                        /*0x3d5d100*/ HTTP2RSTStreamFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5e384*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes get_Error();
                        /*0x3d5e38c*/ string ToString();
                    }

                    struct HTTP2PingFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment OpaqueData;

                        /*0x3d5cfcc*/ HTTP2PingFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5a5bc*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2PingFlags get_Flags();
                        /*0x3d5e454*/ string ToString();
                    }

                    struct HTTP2GoAwayFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ byte ReservedBit;
                        /*0x34*/ uint LastStreamId;
                        /*0x38*/ uint ErrorCode;
                        /*0x40*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AdditionalDebugData;

                        /*0x3d5cf3c*/ HTTP2GoAwayFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5e528*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ErrorCodes get_Error();
                        /*0x3d5a874*/ string ToString();
                    }

                    struct HTTP2WindowUpdateFrame
                    {
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload Header;
                        /*0x30*/ byte ReservedBit;
                        /*0x34*/ uint WindowSizeIncrement;

                        /*0x3d5cf10*/ HTTP2WindowUpdateFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload header);
                        /*0x3d5e530*/ string ToString();
                    }

                    class HTTP2Response : Best.HTTP.HTTPResponse
                    {
                        /*0x78*/ long <ExpectedContentLength>k__BackingField;
                        /*0x80*/ string contentEncoding;
                        /*0x88*/ bool isPrepared;
                        /*0x90*/ Best.HTTP.Response.Decompression.IDecompressor _decompressor;

                        /*0x3d5e5f4*/ HTTP2Response(Best.HTTP.HTTPRequest request, bool isFromCache);
                        /*0x3d5e5e4*/ long get_ExpectedContentLength();
                        /*0x3d5e5ec*/ void set_ExpectedContentLength(long value);
                        /*0x3d5e680*/ void AddHeaders(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> headers);
                        /*0x3d5ec6c*/ void Prepare(Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailable);
                        /*0x3d5eca4*/ void ProcessData(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment payload);
                        /*0x3d5ef40*/ void FinishProcessData();
                        /*0x3d5f11c*/ void Dispose(bool disposing);
                    }

                    enum HTTP2Settings
                    {
                        HEADER_TABLE_SIZE = 1,
                        ENABLE_PUSH = 2,
                        MAX_CONCURRENT_STREAMS = 3,
                        INITIAL_WINDOW_SIZE = 4,
                        MAX_FRAME_SIZE = 5,
                        MAX_HEADER_LIST_SIZE = 6,
                        RESERVED = 7,
                        ENABLE_CONNECT_PROTOCOL = 8,
                        NO_RFC7540_PRIORITIES = 9,
                    }

                    class HTTP2SettingsRegistry
                    {
                        /*0x10*/ bool <IsReadOnly>k__BackingField;
                        /*0x18*/ System.Action<Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint, uint> OnSettingChangedEvent;
                        /*0x20*/ uint[] values;
                        /*0x28*/ bool[] changeFlags;
                        /*0x30*/ bool <IsChanged>k__BackingField;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager _parent;

                        /*0x3d5f284*/ HTTP2SettingsRegistry(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager parent, bool readOnly, bool treatItAsAlreadyChanged);
                        /*0x3d5f25c*/ bool get_IsReadOnly();
                        /*0x3d5f264*/ void set_IsReadOnly(bool value);
                        /*0x3d514a4*/ uint get_Item(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting);
                        /*0x3d59b38*/ void set_Item(Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint value);
                        /*0x3d5f270*/ bool get_IsChanged();
                        /*0x3d5f278*/ void set_IsChanged(bool value);
                        /*0x3d5f438*/ void Merge(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings, uint>> settings);
                        /*0x3d5f7a8*/ void Merge(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry from);
                        /*0x3d5f87c*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload CreateFrame(Best.HTTP.Shared.Logger.LoggingContext context);
                    }

                    class HTTP2SettingsManager
                    {
                        static /*0x0*/ int KnownSettingsCount;
                        /*0x10*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <MySettings>k__BackingField;
                        /*0x18*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <InitiatedMySettings>k__BackingField;
                        /*0x20*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry <RemoteSettings>k__BackingField;
                        /*0x28*/ System.DateTime <SettingsChangesSentAt>k__BackingField;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings _connectionSettings;

                        static /*0x3d5fac0*/ HTTP2SettingsManager();
                        /*0x3d567fc*/ HTTP2SettingsManager(Best.HTTP.Shared.Logger.LoggingContext context, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ConnectionSettings connectionSettings);
                        /*0x3d5fa70*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_MySettings();
                        /*0x3d5fa78*/ void set_MySettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x3d5fa80*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_InitiatedMySettings();
                        /*0x3d5fa88*/ void set_InitiatedMySettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x3d5fa90*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry get_RemoteSettings();
                        /*0x3d5fa98*/ void set_RemoteSettings(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry value);
                        /*0x3d5faa0*/ System.DateTime get_SettingsChangesSentAt();
                        /*0x3d5faa8*/ void set_SettingsChangesSentAt(System.DateTime value);
                        /*0x3d5fab0*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3d5fab8*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3d5a204*/ void Process(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame, System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d59c2c*/ void SendChanges(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                    }

                    enum HTTP2StreamStates
                    {
                        Idle = 0,
                        Open = 1,
                        HalfClosedLocal = 2,
                        HalfClosedRemote = 3,
                        Closed = 4,
                    }

                    class HTTP2Stream : Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable
                    {
                        /*0x10*/ uint <Id>k__BackingField;
                        /*0x14*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates _state;
                        /*0x18*/ System.TimeSpan <NextInteraction>k__BackingField;
                        /*0x20*/ Best.HTTP.HTTPRequest <AssignedRequest>k__BackingField;
                        /*0x28*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x30*/ uint downloaded;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager settings;
                        /*0x40*/ Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder encoder;
                        /*0x48*/ System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoing;
                        /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> incomingFrames;
                        /*0x58*/ Best.HTTP.Hosts.Connections.HTTP2.FramesAsStreamView headerView;
                        /*0x60*/ long localWindow;
                        /*0x68*/ long remoteWindow;
                        /*0x70*/ uint windowUpdateThreshold;
                        /*0x78*/ long sentData;
                        /*0x80*/ long uploadLength;
                        /*0x88*/ bool isRSTFrameSent;
                        /*0x89*/ bool isEndSTRReceived;
                        /*0x90*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2Response response;
                        /*0x98*/ int lastReadCount;
                        /*0xa0*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer _parentHandler;

                        /*0x3d5af88*/ HTTP2Stream(uint id, Best.HTTP.Hosts.Connections.HTTP2.HTTP2ContentConsumer parentHandler, Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsManager registry, Best.HTTP.Hosts.Connections.HTTP2.HPACKEncoder hpackEncoder);
                        /*0x3d5fb78*/ uint get_Id();
                        /*0x3d5fb80*/ void set_Id(uint value);
                        /*0x3d5fb88*/ Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates get_State();
                        /*0x3d5fb90*/ void set_State(Best.HTTP.Hosts.Connections.HTTP2.HTTP2StreamStates value);
                        /*0x3d5fdc8*/ bool get_HasFrameToSend();
                        /*0x3d5fe4c*/ System.TimeSpan get_NextInteraction();
                        /*0x3d5fe54*/ Best.HTTP.HTTPRequest get_AssignedRequest();
                        /*0x3d5fe5c*/ void set_AssignedRequest(Best.HTTP.HTTPRequest value);
                        /*0x3d5fe64*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3d5fe6c*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3d5fe74*/ void Assign(Best.HTTP.HTTPRequest request);
                        /*0x3d5b250*/ void Process(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d5a188*/ void AddFrame(Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame, System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d5ab14*/ void Abort(string msg);
                        /*0x3d60080*/ void ProcessIncomingFrames(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d61704*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x3d61730*/ void ProcessIncomingDATAFrame(ref Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload frame);
                        /*0x3d60d94*/ void ProcessState(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d619e8*/ void ProcessOpenState(System.Collections.Generic.List<Best.HTTP.Hosts.Connections.HTTP2.HTTP2FrameHeaderAndPayload> outgoingFrames);
                        /*0x3d61ecc*/ void OnRemoteSettingChanged(Best.HTTP.Hosts.Connections.HTTP2.HTTP2SettingsRegistry registry, Best.HTTP.Hosts.Connections.HTTP2.HTTP2Settings setting, uint oldValue, uint newValue);
                        /*0x3d61328*/ void FinishRequest();
                        /*0x3d5b618*/ void Removed();
                    }

                    struct HuffmanTableEntry
                    {
                        /*0x10*/ uint Code;
                        /*0x14*/ byte Bits;

                        /*0x3d62234*/ HuffmanTableEntry(uint code, byte bits);
                        /*0x3d55e18*/ byte GetBitAtIdx(byte idx);
                        /*0x3d62240*/ string ToString();
                    }

                    struct HuffmanTreeNode
                    {
                        /*0x10*/ ushort Value;
                        /*0x12*/ ushort NextZeroIdx;
                        /*0x14*/ ushort NextOneIdx;

                        /*0x3d622d4*/ HuffmanTreeNode(ushort value, ushort nextZeroIdx, ushort nextOneIdx);
                        /*0x3d622e4*/ string ToString();
                    }

                    class HuffmanEncoder
                    {
                        static /*0x0*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry[] StaticTable;
                        static /*0x8*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode[] HuffmanTree;

                        static /*0x3d6239c*/ HuffmanEncoder();
                        static /*0x3d54fd0*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode GetRoot();
                        static /*0x3d55048*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode GetNext(Best.HTTP.Hosts.Connections.HTTP2.HuffmanTreeNode current, byte bit);
                        static /*0x3d55cd8*/ Best.HTTP.Hosts.Connections.HTTP2.HuffmanTableEntry GetEntryForCodePoint(ushort codePoint);
                    }
                }

                namespace HTTP1
                {
                    class Constants
                    {
                        static /*0x0*/ byte[] EOL;
                        static /*0x8*/ byte[] HeaderValueSeparator;

                        static /*0x3e378f0*/ Constants();
                    }

                    class HTTP1ContentConsumer : Best.HTTP.Hosts.Connections.IHTTPRequestHandler, System.IDisposable, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable, Best.HTTP.Hosts.Connections.IThreadSignaler
                    {
                        /*0x10*/ Best.HTTP.Shared.ShutdownTypes <ShutdownType>k__BackingField;
                        /*0x18*/ Best.HTTP.Hosts.Connections.KeepAliveHeader _keepAlive;
                        /*0x20*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                        /*0x28*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x30*/ Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn;
                        /*0x38*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response _response;
                        /*0x40*/ int _isAlreadyProcessingContent;
                        /*0x48*/ System.Threading.AutoResetEvent _are;

                        /*0x3e37a30*/ HTTP1ContentConsumer(Best.HTTP.Hosts.Connections.HTTPOverTCPConnection conn);
                        /*0x3e379c4*/ Best.HTTP.Shared.ShutdownTypes get_ShutdownType();
                        /*0x3e379cc*/ void set_ShutdownType(Best.HTTP.Shared.ShutdownTypes value);
                        /*0x3e379d4*/ Best.HTTP.Hosts.Connections.KeepAliveHeader get_KeepAlive();
                        /*0x3e379dc*/ bool get_CanProcessMultiple();
                        /*0x3e379e4*/ int get_AssignedRequests();
                        /*0x3e37a08*/ int get_MaxAssignedRequests();
                        /*0x3e37a10*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                        /*0x3e37a18*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                        /*0x3e37a20*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x3e37a28*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x3e37af8*/ void RunHandler();
                        /*0x3e381bc*/ void SendOutTo(Best.HTTP.HTTPRequest request, System.IO.Stream stream);
                        /*0x3e390c4*/ void SendContent();
                        /*0x3e399f8*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x3e39d40*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x3e39d48*/ void UnsetBinding();
                        /*0x3e39a08*/ void OnContent();
                        /*0x3e3ad4c*/ void OnConnectionClosed();
                        /*0x3e3b138*/ void OnError(System.Exception e);
                        /*0x3e3b3a4*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                        /*0x3e389a4*/ void FinishedProcessing(System.Exception ex);
                        /*0x3e3b5ac*/ void Process(Best.HTTP.HTTPRequest request);
                        /*0x3e3b7d4*/ void Shutdown(Best.HTTP.Shared.ShutdownTypes type);
                        /*0x3e3b9a8*/ void Dispose();
                        /*0x3e3ba0c*/ void Dispose(bool disposing);
                        /*0x3e3ba48*/ void Best.HTTP.Hosts.Connections.IThreadSignaler.SignalThread();
                        /*0x3e3ba5c*/ void <OnConnectionClosed>b__33_0();

                        class <>c__DisplayClass27_0
                        {
                            /*0x10*/ Best.HTTP.HTTPRequest request;
                            /*0x18*/ Best.HTTP.Shared.Streams.WriteOnlyBufferedStream bufferStream;

                            /*0x3e390bc*/ <>c__DisplayClass27_0();
                            /*0x3e3bd88*/ void <SendOutTo>b__0(string header, System.Collections.Generic.List<string> values);
                        }
                    }

                    class PeekableHTTP1Response : Best.HTTP.HTTPResponse
                    {
                        /*0x74*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState _readState;
                        /*0x78*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ContentDeliveryMode _deliveryMode;
                        /*0x80*/ long _expectedLength;
                        /*0x88*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> _newHeaders;
                        /*0x90*/ long _downloaded;
                        /*0x98*/ Best.HTTP.Response.Decompression.IDecompressor _decompressor;
                        /*0xa0*/ bool _compressed;
                        /*0xa1*/ bool sendProgressChanged;
                        /*0xa4*/ int _chunkLength;
                        /*0xa8*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ReadChunkedStates _readChunkedState;
                        /*0xb0*/ Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable _bufferAvailableHandler;
                        /*0xb8*/ int _isProccessing;

                        /*0x3e38180*/ PeekableHTTP1Response(Best.HTTP.HTTPRequest request, bool isFromCache, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable bufferAvailableHandler);
                        /*0x3e3c330*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState get_ReadState();
                        /*0x3e3c338*/ void set_ReadState(Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState value);
                        /*0x3e3c53c*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.ContentDeliveryMode get_DeliveryMode();
                        /*0x3e39d54*/ void ProcessPeekable(Best.HTTP.Shared.Streams.PeekableContentProviderStream peekable);
                        /*0x3e3c544*/ bool IsNewLinePresent(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e3c5c0*/ void ProcessReadHeaders(Best.HTTP.Shared.Streams.PeekableStream peekable, Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response.PeekableReadState targetState);
                        /*0x3e3cd1c*/ void ProcessReadRawUnknownLength(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e3d6a8*/ bool TryReadChunkLength(Best.HTTP.Shared.Streams.PeekableStream peekable, ref int result);
                        /*0x3e3cf48*/ void ProcessReadChunked(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e3ca9c*/ void ProcessReadRaw(Best.HTTP.Shared.Streams.PeekableStream peekable);
                        /*0x3e3d4e8*/ void ProcessChunk(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment chunk);
                        /*0x3e3d310*/ void PostProcessContent();
                        /*0x3e3d730*/ void Dispose(bool disposing);

                        enum ContentDeliveryMode
                        {
                            Raw = 0,
                            RawUnknownLength = 1,
                            Chunked = 2,
                        }

                        enum PeekableReadState
                        {
                            StatusLine = 0,
                            Headers = 1,
                            WaitForContentSent = 2,
                            PrepareForContent = 3,
                            ContentSetup = 4,
                            Content = 5,
                            Finished = 6,
                        }

                        enum ReadChunkedStates
                        {
                            ReadChunkLength = 0,
                            ReadChunk = 1,
                            ReadTrailingCRLF = 2,
                            ReadTrailingHeaders = 3,
                        }
                    }
                }

                namespace File
                {
                    class FileConnection : Best.HTTP.Hosts.Connections.ConnectionBase, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer, Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable
                    {
                        /*0x70*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream <ContentProvider>k__BackingField;
                        /*0x78*/ Best.HTTP.Hosts.Connections.HTTP1.PeekableHTTP1Response _response;
                        /*0x80*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingUnderlyingStream _stream;
                        /*0x88*/ UnityEngine.Hash128 _cacheHash;

                        /*0x3e3d7fc*/ FileConnection(Best.HTTP.HostSetting.HostKey hostKey);
                        /*0x3e3d7ec*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_ContentProvider();
                        /*0x3e3d7f4*/ void set_ContentProvider(Best.HTTP.Shared.Streams.PeekableContentProviderStream value);
                        /*0x3e3d824*/ void ThreadFunc();
                        /*0x3e3edc4*/ void Best.HTTP.Hosts.Connections.IDownloadContentBufferAvailable.BufferAvailable(Best.HTTP.Response.DownloadContentStream stream);
                        /*0x3e3efd8*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                        /*0x3e3efe0*/ void UnsetBinding();
                        /*0x3e3edd4*/ void OnContent();
                        /*0x3e3efec*/ void OnConnectionClosed();
                        /*0x3e3f2c4*/ void OnError(System.Exception e);
                        /*0x3e3f530*/ void OnCancellationRequested(Best.HTTP.HTTPRequest req);
                        /*0x3e3e664*/ void FinishedProcessing(System.Exception ex);
                    }
                }
            }
        }

        namespace Cookies
        {
            class Cookie : System.IComparable<Best.HTTP.Cookies.Cookie>, System.IEquatable<Best.HTTP.Cookies.Cookie>
            {
                /*0x10*/ string <Name>k__BackingField;
                /*0x18*/ string <Value>k__BackingField;
                /*0x20*/ System.DateTime <Date>k__BackingField;
                /*0x28*/ System.DateTime <LastAccess>k__BackingField;
                /*0x30*/ System.DateTime <Expires>k__BackingField;
                /*0x38*/ long <MaxAge>k__BackingField;
                /*0x40*/ bool <IsSession>k__BackingField;
                /*0x48*/ string <Domain>k__BackingField;
                /*0x50*/ string <Path>k__BackingField;
                /*0x58*/ bool <IsSecure>k__BackingField;
                /*0x59*/ bool <IsHttpOnly>k__BackingField;
                /*0x60*/ string <SameSite>k__BackingField;

                static /*0x3e3fc48*/ Best.HTTP.Cookies.Cookie Parse(string header, System.Uri defaultDomain, Best.HTTP.Shared.Logger.LoggingContext context);
                static /*0x3e40ed4*/ string ReadValue(string str, ref int pos);
                static /*0x3e406e0*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> ParseCookieHeader(string str);
                /*0x3e3fa00*/ Cookie();
                /*0x3e3f934*/ string get_Name();
                /*0x3e3f93c*/ void set_Name(string value);
                /*0x3e3f944*/ string get_Value();
                /*0x3e3f94c*/ void set_Value(string value);
                /*0x3e3f954*/ System.DateTime get_Date();
                /*0x3e3f95c*/ void set_Date(System.DateTime value);
                /*0x3e3f964*/ System.DateTime get_LastAccess();
                /*0x3e3f96c*/ void set_LastAccess(System.DateTime value);
                /*0x3e3f974*/ System.DateTime get_Expires();
                /*0x3e3f97c*/ void set_Expires(System.DateTime value);
                /*0x3e3f984*/ long get_MaxAge();
                /*0x3e3f98c*/ void set_MaxAge(long value);
                /*0x3e3f994*/ bool get_IsSession();
                /*0x3e3f99c*/ void set_IsSession(bool value);
                /*0x3e3f9a8*/ string get_Domain();
                /*0x3e3f9b0*/ void set_Domain(string value);
                /*0x3e3f9b8*/ string get_Path();
                /*0x3e3f9c0*/ void set_Path(string value);
                /*0x3e3f9c8*/ bool get_IsSecure();
                /*0x3e3f9d0*/ void set_IsSecure(bool value);
                /*0x3e3f9dc*/ bool get_IsHttpOnly();
                /*0x3e3f9e4*/ void set_IsHttpOnly(bool value);
                /*0x3e3f9f0*/ string get_SameSite();
                /*0x3e3f9f8*/ void set_SameSite(string value);
                /*0x3e3fa78*/ bool WillExpireInTheFuture();
                /*0x3e3fbd8*/ uint GuessSize();
                /*0x3e40978*/ void SaveTo(System.IO.BinaryWriter stream);
                /*0x3e40b90*/ void LoadFrom(System.IO.BinaryReader stream);
                /*0x3e40d5c*/ string ToString();
                /*0x3e40da8*/ bool Equals(object obj);
                /*0x3e40e14*/ bool Equals(Best.HTTP.Cookies.Cookie cookie);
                /*0x3e40eac*/ int GetHashCode();
                /*0x3e40f60*/ int CompareTo(Best.HTTP.Cookies.Cookie other);

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Cookies.Cookie.<> <>9;
                    static /*0x8*/ System.Func<char, bool> <>9__65_0;

                    static /*0x3e40fe4*/ <>c();
                    /*0x3e4104c*/ <>c();
                    /*0x3e41054*/ bool <ParseCookieHeader>b__65_0(char ch);
                }
            }

            class CookieJar
            {
                static /*0x0*/ uint <MaximumSize>k__BackingField;
                static /*0x8*/ System.TimeSpan AccessThreshold;
                static /*0x10*/ bool IsSessionOverride;
                static /*0x11*/ bool IsEnabled;
                static /*0x18*/ System.Collections.Generic.List<Best.HTTP.Cookies.Cookie> Cookies;
                static /*0x20*/ string <CookieFolder>k__BackingField;
                static /*0x28*/ string <LibraryPath>k__BackingField;
                static /*0x30*/ System.Threading.ReaderWriterLockSlim rwLock;
                static /*0x38*/ bool _isSavingSupported;
                static /*0x39*/ bool IsSupportCheckDone;
                static /*0x3a*/ bool Loaded;
                static /*0x40*/ Best.HTTP.Shared.Extensions.RunOnceOnMainThread _saveLibraryRunner;

                static /*0x3e444c8*/ CookieJar();
                static /*0x3e41070*/ uint get_MaximumSize();
                static /*0x3e410c8*/ bool get_IsSavingSupported();
                static /*0x3e41774*/ string get_CookieFolder();
                static /*0x3e417cc*/ void set_CookieFolder(string value);
                static /*0x3e4182c*/ string get_LibraryPath();
                static /*0x3e41884*/ void set_LibraryPath(string value);
                static /*0x3e418e4*/ void SetupFolder();
                static /*0x3e41bf4*/ bool SetFromRequest(Best.HTTP.HTTPResponse response);
                static /*0x3e423b4*/ void SetupRequest(Best.HTTP.HTTPRequest request);
                static /*0x3e42b9c*/ void Maintain(bool sendEvent);
                static /*0x3e430f4*/ void Persist();
                static /*0x3e43aa8*/ void Load();
                static /*0x3e426c0*/ System.Collections.Generic.List<Best.HTTP.Cookies.Cookie> Get(System.Uri uri);
                static /*0x3e422b4*/ Best.HTTP.Cookies.Cookie Find(Best.HTTP.Cookies.Cookie cookie, ref int idx);
            }
        }

        namespace Caching
        {
            class HTTPCacheAcquireLockException : System.Exception
            {
                /*0x3e3e540*/ HTTPCacheAcquireLockException(string message);
            }

            enum ErrorTypeForValidation
            {
                None = 0,
                ServerError = 1,
                ConnectionError = 2,
            }

            class OnBeforeBeginCacheDelegate : System.MulticastDelegate
            {
                /*0x3e44680*/ OnBeforeBeginCacheDelegate(object object, nint method);
                /*0x3e44720*/ void Invoke(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
            }

            class OnCacheSizeChangedDelegate : System.MulticastDelegate
            {
                /*0x3e44734*/ OnCacheSizeChangedDelegate(object object, nint method);
                /*0x3e447d0*/ void Invoke();
            }

            class HTTPCache : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
            {
                /*0x10*/ Best.HTTP.Caching.OnCacheSizeChangedDelegate OnCacheSizeChanged;
                /*0x18*/ Best.HTTP.Caching.HTTPCacheOptions <Options>k__BackingField;
                /*0x20*/ long _cacheSize;
                /*0x28*/ Best.HTTP.Caching.OnBeforeBeginCacheDelegate OnBeforeBeginCache;
                /*0x30*/ int _subscribed;
                /*0x34*/ bool _isSupported;
                /*0x38*/ Best.HTTP.Caching.HTTPCacheDatabase _database;
                /*0x40*/ string _baseDirectory;

                static /*0x3e44ee8*/ UnityEngine.Hash128 CalculateHash(Best.HTTP.HTTPMethods method, System.Uri uri);
                static /*0x3e48530*/ void WriteHeaders(System.IO.Stream headerStream, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                static /*0x3e4b2c4*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> LoadHeaders(System.IO.Stream headersStream);
                static /*0x3e47468*/ void LogCachingHeaders(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e447fc*/ HTTPCache(Best.HTTP.Caching.HTTPCacheOptions options);
                /*0x3e447e4*/ Best.HTTP.Caching.HTTPCacheOptions get_Options();
                /*0x3e447ec*/ void set_Options(Best.HTTP.Caching.HTTPCacheOptions value);
                /*0x3e447f4*/ long get_CacheSize();
                /*0x3e44f40*/ string GetHashDirectory(UnityEngine.Hash128 hash);
                /*0x3e3e5a8*/ string GetHeaderPathFromHash(UnityEngine.Hash128 hash);
                /*0x3e44fdc*/ string GetContentPathFromHash(UnityEngine.Hash128 hash);
                /*0x3e45098*/ bool AreCacheFilesExists(UnityEngine.Hash128 hash);
                /*0x3e45248*/ void SetupValidationHeaders(Best.HTTP.HTTPRequest request);
                /*0x3e460c0*/ bool IsThereEnoughSpaceAfterMaintain(ulong spaceNeeded, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e46440*/ Best.HTTP.Caching.HTTPCacheContentWriter BeginCache(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e48a94*/ void EndCache(Best.HTTP.Caching.HTTPCacheContentWriter cacheResult, bool completedWithoutIssue, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e3e248*/ System.IO.Stream BeginReadContent(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e3f718*/ void EndReadContent(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e458c0*/ void Delete(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4a628*/ bool RefreshHeaders(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> newHeaders, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e47b18*/ bool IsCacheble(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
                /*0x3e473bc*/ bool IsCacheble(Best.HTTP.HTTPMethods method, System.Uri uri, int statusCode);
                /*0x3e4b464*/ bool CanServeWithoutValidation(UnityEngine.Hash128 hash, Best.HTTP.Caching.ErrorTypeForValidation errorType, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4bb18*/ void Redirect(Best.HTTP.HTTPRequest request, UnityEngine.Hash128 hash);
                /*0x3e4612c*/ void Maintain(ulong contentLength, bool deleteLockedEntries, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4c8bc*/ void ZeroOutCacheSize();
                /*0x3e49240*/ void IncrementCacheSize(ulong withSize);
                /*0x3e4a58c*/ void DecrementCacheSize(ulong withSize);
                /*0x3e4be74*/ void MaintainImplementation(ulong contentLength, bool deleteLockedEntries, System.DateTime now, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4ca18*/ void Dispose();
                /*0x3e4cd58*/ void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Caching.HTTPCache.<> <>9;
                    static /*0x8*/ System.Comparison<Best.HTTP.Caching.CacheMetadata> <>9__41_0;

                    static /*0x3e4cf28*/ <>c();
                    /*0x3e4cf90*/ <>c();
                    /*0x3e4cf98*/ int <MaintainImplementation>b__41_0(Best.HTTP.Caching.CacheMetadata x, Best.HTTP.Caching.CacheMetadata y);
                }

                class <>c__DisplayClass33_0
                {
                    /*0x10*/ bool hasValidMaxAge;

                    /*0x3e4b45c*/ <>c__DisplayClass33_0();
                    /*0x3e4d020*/ bool <IsCacheble>g__CheckHeader|0(string headerValue);
                }
            }

            class HTTPCacheContentWriter
            {
                /*0x10*/ Best.HTTP.Caching.HTTPCache <Cache>k__BackingField;
                /*0x18*/ UnityEngine.Hash128 <Hash>k__BackingField;
                /*0x28*/ ulong <ExpectedLength>k__BackingField;
                /*0x30*/ ulong <ProcessedLength>k__BackingField;
                /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;
                /*0x40*/ System.IO.Stream _contentStream;

                /*0x3e48a18*/ HTTPCacheContentWriter(Best.HTTP.Caching.HTTPCache cache, UnityEngine.Hash128 hash, System.IO.Stream contentStream, ulong expectedLength, Best.HTTP.Shared.Logger.LoggingContext loggingContext);
                /*0x3e4d198*/ Best.HTTP.Caching.HTTPCache get_Cache();
                /*0x3e4d1a0*/ void set_Cache(Best.HTTP.Caching.HTTPCache value);
                /*0x3e4d1a8*/ UnityEngine.Hash128 get_Hash();
                /*0x3e4d1b4*/ void set_Hash(UnityEngine.Hash128 value);
                /*0x3e4d1bc*/ ulong get_ExpectedLength();
                /*0x3e4d1c4*/ void set_ExpectedLength(ulong value);
                /*0x3e4d1cc*/ ulong get_ProcessedLength();
                /*0x3e4d1d4*/ void set_ProcessedLength(ulong value);
                /*0x3e4d1dc*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                /*0x3e4d1e4*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                /*0x3e4d1ec*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                /*0x3e48d00*/ void Close();
                /*0x3e4d5b0*/ string ToString();
            }

            struct v128View
            {
                /*0x10*/ ulong low;
                /*0x18*/ ulong high;
            }

            enum LockTypes
            {
                Unlocked = 0,
                Write = 1,
                Read = 2,
            }

            class CacheMetadata : Best.HTTP.Shared.Databases.Metadata
            {
                /*0x20*/ UnityEngine.Hash128 <Hash>k__BackingField;
                /*0x30*/ ulong <ContentLength>k__BackingField;
                /*0x38*/ System.DateTime <LastAccessTime>k__BackingField;
                /*0x40*/ Best.HTTP.Caching.LockTypes <Lock>k__BackingField;
                /*0x44*/ int <ReadLockCount>k__BackingField;

                /*0x3e4da70*/ CacheMetadata();
                /*0x3e4d678*/ UnityEngine.Hash128 get_Hash();
                /*0x3e4d684*/ void set_Hash(UnityEngine.Hash128 value);
                /*0x3e4d68c*/ ulong get_ContentLength();
                /*0x3e4d694*/ void set_ContentLength(ulong value);
                /*0x3e4d69c*/ System.DateTime get_LastAccessTime();
                /*0x3e4d6a4*/ void set_LastAccessTime(System.DateTime value);
                /*0x3e4d6ac*/ Best.HTTP.Caching.LockTypes get_Lock();
                /*0x3e4d6b4*/ void set_Lock(Best.HTTP.Caching.LockTypes value);
                /*0x3e4d6bc*/ int get_ReadLockCount();
                /*0x3e4d6c4*/ void set_ReadLockCount(int value);
                /*0x3e4d6cc*/ void SaveTo(System.IO.Stream stream);
                /*0x3e4d7a8*/ void LoadFrom(System.IO.Stream stream);
                /*0x3e4d878*/ string ToString();
            }

            enum CacheFlags
            {
                None = 0,
                MustRevalidate = 1,
                NoCache = 2,
            }

            class CacheMetadataContent
            {
                /*0x10*/ string ETag;
                /*0x18*/ System.DateTime LastModified;
                /*0x20*/ System.DateTime Expires;
                /*0x28*/ uint Age;
                /*0x2c*/ uint MaxAge;
                /*0x30*/ System.DateTime Date;
                /*0x38*/ uint StaleWhileRevalidate;
                /*0x3c*/ uint StaleIfError;
                /*0x40*/ Best.HTTP.Caching.CacheFlags Flags;
                /*0x48*/ System.DateTime RequestTime;
                /*0x50*/ System.DateTime ResponseTime;

                /*0x3e4da78*/ CacheMetadataContent();
                /*0x3e4db10*/ void From(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers);
            }

            class CacheMetadataContentParser : Best.HTTP.Shared.Databases.IDiskContentParser<Best.HTTP.Caching.CacheMetadataContent>
            {
                /*0x3e4e2e8*/ CacheMetadataContentParser();
                /*0x3e4e024*/ void Encode(System.IO.Stream stream, Best.HTTP.Caching.CacheMetadataContent content);
                /*0x3e4e168*/ Best.HTTP.Caching.CacheMetadataContent Parse(System.IO.Stream stream, int length);
            }

            class CacheMetadataIndexingService : Best.HTTP.Shared.Databases.IndexingService<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata>
            {
                /*0x10*/ Best.HTTP.Shared.Databases.Indexing.AVLTree<UnityEngine.Hash128, int> index_Hash;

                /*0x3e4e4c0*/ CacheMetadataIndexingService();
                /*0x3e4e2f0*/ void Index(Best.HTTP.Caching.CacheMetadata metadata);
                /*0x3e4e380*/ void Remove(Best.HTTP.Caching.CacheMetadata metadata);
                /*0x3e4e408*/ System.Collections.Generic.IEnumerable<int> GetOptimizedIndexes();
                /*0x3e4e458*/ System.Collections.Generic.List<int> FindByHash(UnityEngine.Hash128 hash);
            }

            class CacheMetadataService : Best.HTTP.Shared.Databases.MetadataService<Best.HTTP.Caching.CacheMetadata, Best.HTTP.Caching.CacheMetadataContent>
            {
                /*0x3e4e590*/ CacheMetadataService(Best.HTTP.Shared.Databases.IndexingService<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> indexingService, Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<Best.HTTP.Caching.CacheMetadata> emptyMetadataIndexFinder);
                /*0x3e4e5f0*/ Best.HTTP.Caching.CacheMetadata CreateFrom(System.IO.Stream stream);
                /*0x3e4e648*/ Best.HTTP.Caching.CacheMetadata Create(UnityEngine.Hash128 hash, Best.HTTP.Caching.CacheMetadataContent value, int filePos, int length);

                class <>c__DisplayClass2_0
                {
                    /*0x10*/ UnityEngine.Hash128 hash;

                    /*0x3e4e744*/ <>c__DisplayClass2_0();
                    /*0x3e4e74c*/ void <Create>b__0(Best.HTTP.Caching.CacheMetadataContent content, Best.HTTP.Caching.CacheMetadata metadata);
                }
            }

            class CacheDatabaseOptions : Best.HTTP.Shared.Databases.DatabaseOptions
            {
                /*0x3e4e768*/ CacheDatabaseOptions();
            }

            class HTTPCacheDatabase : Best.HTTP.Shared.Databases.Database<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata, Best.HTTP.Caching.CacheMetadataIndexingService, Best.HTTP.Caching.CacheMetadataService>
            {
                /*0x3e44e58*/ HTTPCacheDatabase(string directory);
                /*0x3e4e7bc*/ HTTPCacheDatabase(string directory, Best.HTTP.Shared.Databases.DatabaseOptions options, Best.HTTP.Caching.CacheMetadataIndexingService indexingService);
                /*0x3e455c8*/ Best.HTTP.Caching.CacheMetadataContent FindByHashAndUpdateRequestTime(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e47db0*/ bool TryAcquireWriteLock(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4af18*/ bool Update(UnityEngine.Hash128 hash, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e48d48*/ void ReleaseWriteLock(UnityEngine.Hash128 hash, ulong length, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e492dc*/ bool TryAcquireReadLock(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e49a18*/ void ReleaseReadLock(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4a204*/ ulong Delete(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4a064*/ void EnterWriteLock(Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4ec0c*/ void ExitWriteLock(Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4971c*/ void UpdateLastAccessTime(UnityEngine.Hash128 hash, Best.HTTP.Shared.Logger.LoggingContext context);
                /*0x3e4eafc*/ Best.HTTP.Caching.CacheMetadata FindMetadata(UnityEngine.Hash128 hash);
                /*0x3e4ba40*/ System.ValueTuple<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> FindContentAndMetadataLocked(UnityEngine.Hash128 hash);
                /*0x3e4e8f8*/ System.ValueTuple<Best.HTTP.Caching.CacheMetadataContent, Best.HTTP.Caching.CacheMetadata> FindContentAndMetadata(UnityEngine.Hash128 hash);
                /*0x3e4ea64*/ void UpdateMetadataAndContent(Best.HTTP.Shared.Databases.Metadata metadata, Best.HTTP.Caching.CacheMetadataContent content);
            }

            class HTTPCacheOptions
            {
                /*0x10*/ System.TimeSpan <DeleteOlder>k__BackingField;
                /*0x18*/ ulong <MaxCacheSize>k__BackingField;

                /*0x3e44dec*/ HTTPCacheOptions();
                /*0x3e4edac*/ System.TimeSpan get_DeleteOlder();
                /*0x3e4edb4*/ ulong get_MaxCacheSize();
            }
        }

        namespace JSON
        {
            class Json
            {
                static /*0x3e4edbc*/ object Decode(string json);
                static /*0x3e4edd8*/ object Decode(string json, ref bool success);
                static /*0x3e4ef44*/ System.Collections.Generic.Dictionary<string, object> ParseObject(char[] json, ref int index, ref bool success);
                static /*0x3e4f5f4*/ System.Collections.Generic.List<object> ParseArray(char[] json, ref int index, ref bool success);
                static /*0x3e4ee18*/ object ParseValue(char[] json, ref int index, ref bool success);
                static /*0x3e4f308*/ string ParseString(char[] json, ref int index, ref bool success);
                static /*0x3e4f75c*/ double ParseNumber(char[] json, ref int index, ref bool success);
                static /*0x3e4f8d4*/ int GetLastIndexOfNumber(char[] json, int index);
                static /*0x3e4f834*/ void EatWhitespace(char[] json, ref int index);
                static /*0x3e4f2f0*/ int LookAhead(char[] json, int index);
                static /*0x3e4f090*/ int NextToken(char[] json, ref int index);
            }
        }

        namespace Shared
        {
            enum ShutdownTypes
            {
                Running = 0,
                Gentle = 1,
                Immediate = 2,
            }

            class OnSetupFinishedDelegate : System.MulticastDelegate
            {
                /*0x3e4f97c*/ OnSetupFinishedDelegate(object object, nint method);
                /*0x3e4fa18*/ void Invoke();
            }

            class HTTPManager
            {
                static /*0x0*/ Best.HTTP.Shared.OnSetupFinishedDelegate OnSetupFinished;
                static /*0x8*/ Best.HTTP.Hosts.Settings.HostSettingsManager <PerHostSettings>k__BackingField;
                static /*0x10*/ System.DateTime <CurrentFrameDateTime>k__BackingField;
                static /*0x18*/ System.Func<string> <RootSaveFolderProvider>k__BackingField;
                static /*0x20*/ Best.HTTP.Proxies.Autodetect.ProxyDetector _proxyDetector;
                static /*0x28*/ Best.HTTP.Proxies.Proxy <Proxy>k__BackingField;
                static /*0x30*/ Best.HTTP.Shared.Extensions.HeartbeatManager heartbeats;
                static /*0x38*/ Best.HTTP.Shared.Logger.ILogger logger;
                static /*0x40*/ Best.HTTP.Shared.PlatformSupport.FileSystem.IIOService IOService;
                static /*0x48*/ string UserAgent;
                static /*0x50*/ bool _isQuitting;
                static /*0x58*/ string RootFolderName;
                static /*0x60*/ Best.HTTP.Caching.HTTPCache _httpCache;
                static /*0x68*/ bool IsSetupCalled;
                static /*0x70*/ long _lastNetworkBytesSent;
                static /*0x78*/ long _lastNetworkBytesReceived;
                static /*0x80*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferPoolStats bufferPoolStats;

                static /*0x3e4fa2c*/ HTTPManager();
                static /*0x3e4fdec*/ Best.HTTP.Hosts.Settings.HostSettingsManager get_PerHostSettings();
                static /*0x3e4fe44*/ System.DateTime get_CurrentFrameDateTime();
                static /*0x3e4fe9c*/ void set_CurrentFrameDateTime(System.DateTime value);
                static /*0x3e4fef8*/ System.Func<string> get_RootSaveFolderProvider();
                static /*0x3e4fd60*/ void set_ProxyDetector(Best.HTTP.Proxies.Autodetect.ProxyDetector value);
                static /*0x3e4ff50*/ Best.HTTP.Proxies.Proxy get_Proxy();
                static /*0x3e4ffa8*/ void set_Proxy(Best.HTTP.Proxies.Proxy value);
                static /*0x3e4c954*/ Best.HTTP.Shared.Extensions.HeartbeatManager get_Heartbeats();
                static /*0x3e38034*/ Best.HTTP.Shared.Logger.ILogger get_Logger();
                static /*0x3e50008*/ bool get_IsQuitting();
                static /*0x3e50068*/ void set_IsQuitting(bool value);
                static /*0x3e500cc*/ Best.HTTP.Caching.HTTPCache get_LocalCache();
                static /*0x3e50124*/ void set_LocalCache(Best.HTTP.Caching.HTTPCache value);
                static /*0x3e501d0*/ void Setup();
                static /*0x3e50b28*/ Best.HTTP.HTTPRequest SendRequest(Best.HTTP.HTTPRequest request);
                static /*0x3e41464*/ string GetRootSaveFolder();
                static /*0x3e50d1c*/ void OnUpdate();
                static /*0x3e516b0*/ void OnQuit();
                static /*0x3e5185c*/ void AbortAll();

                class <>c
                {
                    static /*0x0*/ Best.HTTP.Shared.HTTPManager.<> <>9;
                    static /*0x8*/ System.Action<Best.HTTP.HTTPRequest> <>9__42_0;

                    static /*0x3e519ec*/ <>c();
                    /*0x3e51a54*/ <>c();
                    /*0x3e51a5c*/ void <SendRequest>b__42_0(Best.HTTP.HTTPRequest request);
                }
            }

            enum ThreadingMode
            {
                UnityUpdate = 0,
                Threaded = 1,
                None = 2,
            }

            class HTTPUpdateDelegator : UnityEngine.MonoBehaviour
            {
                static /*0x0*/ Best.HTTP.Shared.HTTPUpdateDelegator instance;
                static /*0x8*/ bool <IsCreated>k__BackingField;
                static /*0x9*/ bool <IsThreadRunning>k__BackingField;
                static /*0xc*/ int <ThreadFrequencyInMS>k__BackingField;
                static /*0x10*/ System.Func<bool> OnBeforeApplicationQuit;
                static /*0x18*/ System.Action<bool> OnApplicationForegroundStateChanged;
                static /*0x20*/ bool isSetupCalled;
                /*0x20*/ Best.HTTP.Shared.ThreadingMode _currentThreadingMode;
                /*0x24*/ int isHTTPManagerOnUpdateRunning;
                /*0x28*/ System.Threading.AutoResetEvent pingEvent;
                /*0x30*/ int updateThreadCount;
                /*0x34*/ int mainThreadId;

                static /*0x3e520d4*/ HTTPUpdateDelegator();
                static /*0x3e4bdf4*/ Best.HTTP.Shared.HTTPUpdateDelegator get_Instance();
                static /*0x3e51c00*/ bool get_IsCreated();
                static /*0x3e51c58*/ void set_IsCreated(bool value);
                static /*0x3e51cb8*/ bool get_IsThreadRunning();
                static /*0x3e51d10*/ void set_IsThreadRunning(bool value);
                static /*0x3e52018*/ int get_ThreadFrequencyInMS();
                static /*0x3e52070*/ void set_ThreadFrequencyInMS(int value);
                static /*0x3e505a0*/ Best.HTTP.Shared.HTTPUpdateDelegator CheckInstance();
                static /*0x3e52aec*/ bool UnityApplication_WantsToQuit();
                /*0x3e53128*/ HTTPUpdateDelegator();
                /*0x3e51d70*/ Best.HTTP.Shared.ThreadingMode get_CurrentThreadingMode();
                /*0x3e51d78*/ void set_CurrentThreadingMode(Best.HTTP.Shared.ThreadingMode value);
                /*0x3e520cc*/ int get_MainThreadId();
                /*0x3e52128*/ void Setup();
                /*0x3e4be40*/ bool IsMainThread();
                /*0x3e51d7c*/ void SetThreadingMode(Best.HTTP.Shared.ThreadingMode mode);
                /*0x3e52470*/ void SwapThreadingMode();
                /*0x3e52454*/ void PingUpdateThread();
                /*0x3e52490*/ void ThreadFunc();
                /*0x3e52938*/ void Update();
                /*0x3e52844*/ void CallOnUpdate();
                /*0x3e529b8*/ void OnDisable();
                /*0x3e52f70*/ void OnApplicationPause(bool isPaused);
            }

            namespace TLS
            {
                class AbstractTls13Client : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsClient, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication
                {
                    static /*0x0*/ int[] DefaultCipherSuites;
                    /*0x50*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> _sniServerNames;
                    /*0x58*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> _protocols;
                    /*0x60*/ Best.HTTP.Shared.Logger.LoggingContext <Context>k__BackingField;

                    static /*0x3e54a58*/ AbstractTls13Client();
                    /*0x3e531a8*/ AbstractTls13Client(System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> sniServerNames, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3e53198*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                    /*0x3e531a0*/ void set_Context(Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x3e5320c*/ string GetNegotiatedApplicationProtocol();
                    /*0x3e532d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetSupportedVersions();
                    /*0x3e53338*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> GetProtocolNames();
                    /*0x3e53340*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetSniServerNames();
                    /*0x3e53348*/ int[] GetSupportedCipherSuites();
                    /*0x3e534e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                    /*0x3e53600*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials GetClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                    /*0x3e5371c*/ void NotifyServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate serverCertificate);
                    /*0x3e53830*/ void NotifyAlertReceived(short alertLevel, short alertDescription);
                    /*0x3e539d0*/ void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                    /*0x3e53cd8*/ void NotifyHandshakeBeginning();
                    /*0x3e53dec*/ void NotifyHandshakeComplete();
                    /*0x3e53f00*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                    /*0x3e54030*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                    /*0x3e5419c*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                    /*0x3e54314*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                    /*0x3e5456c*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion serverVersion);
                    /*0x3e546c8*/ void NotifySessionID(byte[] sessionID);
                    /*0x3e547f8*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                    /*0x3e54928*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                }

                class DefaultTls13Client : Best.HTTP.Shared.TLS.AbstractTls13Client
                {
                    /*0x3e54af8*/ DefaultTls13Client(System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> sniServerNames, System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocols, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                namespace Crypto
                {
                    class FastTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto
                    {
                        /*0x3e54bd4*/ FastTlsCrypto(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom entropySource);
                        /*0x3e54bdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                        /*0x3e553c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAesEngine();
                        /*0x3e5541c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateCcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                        /*0x3e55478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateGcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                        /*0x3e554d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher blockCipher);
                    }

                    class FastCbcBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                    {
                        /*0x10*/ byte[] IV;
                        /*0x18*/ byte[] cbcV;
                        /*0x20*/ byte[] cbcNextV;
                        /*0x28*/ int blockSize;
                        /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                        /*0x38*/ bool encrypting;

                        /*0x3e5552c*/ FastCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                        /*0x3e55658*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                        /*0x3e55888*/ int GetBlockSize();
                        /*0x3e5592c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                        /*0x3e55f40*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        /*0x3e55840*/ void Reset();
                        /*0x3e55ce4*/ int EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        /*0x3e55a88*/ int DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                    }

                    namespace Impl
                    {
                        class BurstTables8kGcmMultiplier
                        {
                            /*0x10*/ byte[] H;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement[][] T;

                            static /*0x3ea74c0*/ void MultiplyHImpl(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            static /*0x3ea7920*/ void MultiplyHImpl$BurstManaged(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            /*0x3ea7918*/ BurstTables8kGcmMultiplier();
                            /*0x3ea74c4*/ void Init(byte[] H);
                            /*0x3ea77d4*/ void MultiplyH(byte[] x);

                            class MultiplyHImpl_00000730$PostfixBurstDelegate : System.MulticastDelegate
                            {
                                /*0x3ea7a34*/ MultiplyHImpl_00000730$PostfixBurstDelegate(object , nint );
                                /*0x3ea7ae8*/ void Invoke(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            }

                            class MultiplyHImpl_00000730$BurstDirectCall
                            {
                                static /*0x0*/ nint Pointer;

                                static /*0x3ea7afc*/ void GetFunctionPointerDiscard(ref nint );
                                static /*0x3ea7bec*/ nint GetFunctionPointer();
                                static /*0x3ea7860*/ void Invoke(byte* px, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement* pT1);
                            }
                        }

                        class FastAesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                        {
                            static /*0x0*/ byte[] S;
                            static /*0x8*/ byte[] Si;
                            static /*0x10*/ byte[] rcon;
                            static /*0x18*/ uint[] T0;
                            static /*0x20*/ uint[] Tinv0;
                            /*0x10*/ uint[][] W;
                            /*0x18*/ int ROUNDS;
                            /*0x20*/ uint[][] WorkingKey;
                            /*0x28*/ bool forEncryption;
                            /*0x30*/ byte[] s;

                            static /*0x3eabc2c*/ FastAesEngine();
                            static /*0x3ea7c08*/ uint Shift(uint r, int shift);
                            static /*0x3ea7c10*/ uint FFmulX(uint x);
                            static /*0x3ea7c30*/ uint FFmulX2(uint x);
                            static /*0x3ea7c4c*/ uint Inv_Mcol(uint x);
                            static /*0x3ea7ce4*/ uint SubWord(uint x);
                            /*0x3ea89fc*/ FastAesEngine();
                            /*0x3ea7da8*/ uint[][] GenerateWorkingKey(byte[] key, bool forEncryption);
                            /*0x3ea8a04*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3ea8b74*/ int GetBlockSize();
                            /*0x3ea8b7c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                            /*0x3eaa7ac*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3ea8d7c*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                            /*0x3ea999c*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                        }

                        class FastCcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                        {
                            static /*0x0*/ int BlockSize;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                            /*0x18*/ byte[] macBlock;
                            /*0x20*/ bool forEncryption;
                            /*0x28*/ byte[] nonce;
                            /*0x30*/ byte[] initialAssociatedText;
                            /*0x38*/ int macSize;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters keyParam;
                            /*0x48*/ System.IO.MemoryStream associatedText;
                            /*0x50*/ System.IO.MemoryStream data;

                            static /*0x3eade60*/ FastCcmBlockCipher();
                            /*0x3eabe00*/ FastCcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                            /*0x3eac038*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3eac2bc*/ int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff);
                            /*0x3eac35c*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eac388*/ int DoFinal(byte[] outBytes, int outOff);
                            /*0x3eac43c*/ int DoFinal(System.Span<byte> output);
                            /*0x3eac5b8*/ void Reset();
                            /*0x3eac600*/ int GetOutputSize(int len);
                            /*0x3eac6a0*/ int ProcessPacket(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3ead4ec*/ int CalculateMac(System.ReadOnlySpan<byte> data, System.Span<byte> macBlock);
                            /*0x3eac250*/ int GetMacSize(bool forEncryption, int requestedMacBits);
                            /*0x3eaddd4*/ int GetAssociatedTextLength();
                            /*0x3eaddbc*/ bool HasAssociatedText();
                        }

                        class FastGcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                        {
                            /*0x10*/ byte[] ctrBlock;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                            /*0x20*/ Best.HTTP.Shared.TLS.Crypto.Impl.BurstTables8kGcmMultiplier multiplier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator exp;
                            /*0x30*/ bool forEncryption;
                            /*0x31*/ bool initialised;
                            /*0x34*/ int macSize;
                            /*0x38*/ byte[] lastKey;
                            /*0x40*/ byte[] nonce;
                            /*0x48*/ byte[] initialAssociatedText;
                            /*0x50*/ byte[] H;
                            /*0x58*/ byte[] J0;
                            /*0x60*/ byte[] bufBlock;
                            /*0x68*/ byte[] macBlock;
                            /*0x70*/ byte[] S;
                            /*0x78*/ byte[] S_at;
                            /*0x80*/ byte[] S_atPre;
                            /*0x88*/ byte[] counter;
                            /*0x90*/ uint counter32;
                            /*0x94*/ uint blocksRemaining;
                            /*0x98*/ int bufOff;
                            /*0xa0*/ ulong totalLength;
                            /*0xa8*/ byte[] atBlock;
                            /*0xb0*/ int atBlockPos;
                            /*0xb8*/ ulong atLength;
                            /*0xc0*/ ulong atLengthPre;

                            /*0x3eadeac*/ FastGcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c);
                            /*0x3eadeb0*/ FastGcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier m);
                            /*0x3eae070*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x3eae9b0*/ int GetOutputSize(int len);
                            /*0x3eae8cc*/ void ProcessAadBytes(byte[] inBytes, int inOff, int len);
                            /*0x3eae9d8*/ void ProcessAadBytes(System.ReadOnlySpan<byte> input);
                            /*0x3eaed60*/ void InitCipher();
                            /*0x3eaee8c*/ int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff);
                            /*0x3eaf030*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb0c10*/ int DoFinal(byte[] output, int outOff);
                            /*0x3eb0cb8*/ int DoFinal(System.Span<byte> output);
                            /*0x3eb1984*/ void Reset();
                            /*0x3eb17e4*/ void Reset(bool clearMac);
                            /*0x3eb0a18*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb0168*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb0464*/ void EncryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            /*0x3eb198c*/ void GetNextCtrBlock(System.Span<byte> block);
                            /*0x3eb1614*/ void ProcessPartial(System.Span<byte> partialBlock, System.Span<byte> output);
                            /*0x3eae788*/ void gHASH(byte[] Y, byte[] b, int len);
                            /*0x3eb1ae8*/ void gHASHBlock(byte[] Y, System.ReadOnlySpan<byte> b);
                            /*0x3eb1be4*/ void gHASHPartial(byte[] Y, System.ReadOnlySpan<byte> b);
                            /*0x3eb1cf0*/ void gHASHPartial(byte[] Y, byte[] b, int off, int len);
                            /*0x3eaece8*/ void CheckStatus();
                        }

                        class FastGcmBlockCipherHelper
                        {
                            static /*0x3eb1dac*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, System.Span<byte> ctrBlock, System.Span<byte> S, int BlockSize);
                            static /*0x3eb1da8*/ void DecryptBlock_Impl(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            static /*0x3eb1f94*/ void DecryptBlock_Impl$BurstManaged(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);

                            class DecryptBlock_Impl_000007A2$PostfixBurstDelegate : System.MulticastDelegate
                            {
                                /*0x3eb212c*/ DecryptBlock_Impl_000007A2$PostfixBurstDelegate(object , nint );
                                /*0x3eb21e0*/ void Invoke(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            }

                            class DecryptBlock_Impl_000007A2$BurstDirectCall
                            {
                                static /*0x0*/ nint Pointer;

                                static /*0x3eb21f8*/ void GetFunctionPointerDiscard(ref nint );
                                static /*0x3eb22e8*/ nint GetFunctionPointer();
                                static /*0x3eb1e94*/ void Invoke(byte* pinput, int inLen, byte* poutput, int outLen, byte* pctrBlock, byte* pS, int BlockSize);
                            }
                        }

                        class FastTlsAeadCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                            /*0x18*/ int m_keySize;
                            /*0x1c*/ int m_macSize;
                            /*0x20*/ int m_fixed_iv_length;
                            /*0x24*/ int m_record_iv_length;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_decryptCipher;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_encryptCipher;
                            /*0x38*/ byte[] m_decryptNonce;
                            /*0x40*/ byte[] m_encryptNonce;
                            /*0x48*/ bool m_isTlsV13;
                            /*0x4c*/ int m_nonceMode;

                            static /*0x3eb2de0*/ int GetNonceMode(bool isTLSv13, int aeadType);
                            /*0x3eb2304*/ FastTlsAeadCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl decryptCipher, int keySize, int macSize, int aeadType);
                            /*0x3eb2ec4*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                            /*0x3eb2ee0*/ int GetPlaintextLimit(int ciphertextLimit);
                            /*0x3eb2efc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                            /*0x3eb3628*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int ciphertextOffset, int ciphertextLength);
                            /*0x3eb3b4c*/ void RekeyDecoder();
                            /*0x3eb3bb8*/ void RekeyEncoder();
                            /*0x3eb3c20*/ bool get_UsesOpaqueRecordType();
                            /*0x3eb34d4*/ byte[] GetAdditionalData(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int ciphertextLength, int plaintextLength);
                            /*0x3eb2e48*/ void RekeyCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, bool serverSecret);
                            /*0x3eb3c28*/ void Setup13Cipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm);
                        }

                        class FastTlsAeadCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                        {
                            /*0x10*/ bool m_isEncrypting;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher m_cipher;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                            /*0x3eb3f44*/ FastTlsAeadCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher cipher, bool isEncrypting);
                            /*0x3eb3f80*/ void SetKey(byte[] key, int keyOff, int keyLen);
                            /*0x3eb4008*/ void SetKey(System.ReadOnlySpan<byte> key);
                            /*0x3eb4080*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                            /*0x3eb418c*/ int GetOutputSize(int inputLength);
                            /*0x3eb4238*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                            /*0x3eb4550*/ void Reset();
                        }

                        class FastTlsBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                            /*0x18*/ byte[] m_randomData;
                            /*0x20*/ bool m_encryptThenMac;
                            /*0x21*/ bool m_useExplicitIV;
                            /*0x22*/ bool m_acceptExtraPadding;
                            /*0x23*/ bool m_useExtraPadding;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_decryptCipher;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_encryptCipher;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_readMac;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_writeMac;

                            /*0x3eb45f4*/ FastTlsBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl decryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac, int cipherKeySize);
                            /*0x3eb56c8*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                            /*0x3eb5814*/ int GetPlaintextLimit(int ciphertextLimit);
                            /*0x3eb5978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                            /*0x3eb5fdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                            /*0x3eb64dc*/ void RekeyDecoder();
                            /*0x3eb6518*/ void RekeyEncoder();
                            /*0x3eb6554*/ bool get_UsesOpaqueRecordType();
                            /*0x3eb655c*/ int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize);
                            /*0x3eb66fc*/ int ChooseExtraPadBlocks(int max);
                            /*0x3eb683c*/ int GetCiphertextLength(int blockSize, int macSize, int maxPadding, int plaintextLength);
                        }

                        class FastTlsBlockCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl
                        {
                            /*0x10*/ bool m_isEncrypting;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher m_cipher;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                            /*0x3eb6880*/ FastTlsBlockCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, bool isEncrypting);
                            /*0x3eb68bc*/ void SetKey(System.ReadOnlySpan<byte> key);
                            /*0x3eb6934*/ void Init(System.ReadOnlySpan<byte> iv);
                            /*0x3eb6a30*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                            /*0x3eb6ba0*/ int GetBlockSize();
                        }
                    }
                }
            }

            namespace Streams
            {
                class BufferPoolMemoryStream : System.IO.Stream
                {
                    /*0x28*/ bool canWrite;
                    /*0x29*/ bool allowGetBuffer;
                    /*0x2c*/ int capacity;
                    /*0x30*/ int length;
                    /*0x38*/ byte[] internalBuffer;
                    /*0x40*/ int initialIndex;
                    /*0x44*/ bool expandable;
                    /*0x45*/ bool streamClosed;
                    /*0x48*/ int position;
                    /*0x4c*/ int dirty_bytes;
                    /*0x50*/ bool releaseInternalBuffer;

                    /*0x3eb6c44*/ BufferPoolMemoryStream();
                    /*0x3eb6c4c*/ BufferPoolMemoryStream(int capacity);
                    /*0x3eb6ed8*/ BufferPoolMemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible, bool releaseBuffer, bool canExpand);
                    /*0x3eb6d8c*/ void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible, bool releaseBuffer, bool canExpand);
                    /*0x3eb6f90*/ void CheckIfClosedThrowDisposed();
                    /*0x3eb6fec*/ bool get_CanRead();
                    /*0x3eb6ffc*/ bool get_CanSeek();
                    /*0x3eb700c*/ bool get_CanWrite();
                    /*0x3eb702c*/ void set_Capacity(int value);
                    /*0x3eb7238*/ long get_Length();
                    /*0x3eb725c*/ long get_Position();
                    /*0x3eb7280*/ void set_Position(long value);
                    /*0x3eb7348*/ void Dispose(bool disposing);
                    /*0x3eb73d0*/ void Flush();
                    /*0x3eb73d4*/ byte[] GetBuffer();
                    /*0x3eb7420*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3eb757c*/ int ReadByte();
                    /*0x3eb75d4*/ long Seek(long offset, System.IO.SeekOrigin loc);
                    /*0x3eb774c*/ int CalculateNewCapacity(int minimum);
                    /*0x3eb7790*/ void Expand(int newSize);
                    /*0x3eb77e4*/ void SetLength(long value);
                    /*0x3eb7908*/ byte[] ToArray();
                    /*0x3eb7914*/ byte[] ToArray(bool canBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3eb7a14*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment ToBufferSegment();
                    /*0x3eb7ae8*/ void Write(byte[] buffer, int offset, int count);
                    /*0x3eb7c78*/ void WriteByte(byte value);
                }

                class BufferSegmentStream : System.IO.Stream
                {
                    /*0x28*/ long _length;
                    /*0x30*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> bufferList;
                    /*0x38*/ byte[] _tempByteArray;

                    /*0x3eb8224*/ BufferSegmentStream();
                    /*0x3eb7d38*/ bool get_CanRead();
                    /*0x3eb7d40*/ bool get_CanSeek();
                    /*0x3eb7d48*/ bool get_CanWrite();
                    /*0x3eb7d50*/ long get_Length();
                    /*0x3eb7d58*/ long get_Position();
                    /*0x3eb7d60*/ void set_Position(long value);
                    /*0x3eb7d64*/ int ReadByte();
                    /*0x3eb7db8*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3eb7fd0*/ void Write(byte[] buffer, int offset, int count);
                    /*0x3eb8010*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                    /*0x3eb80dc*/ void Reset();
                    /*0x3eb8184*/ void Dispose(bool disposing);
                    /*0x3eb81b0*/ void Flush();
                    /*0x3eb81b4*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x3eb81ec*/ void SetLength(long value);
                }

                class PeekableContentProviderStream : Best.HTTP.Shared.Streams.PeekableStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.IPeekableContentProvider
                {
                    /*0x40*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer <Consumer>k__BackingField;

                    /*0x3eb8e54*/ PeekableContentProviderStream();
                    /*0x3eb8bf4*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer get_Consumer();
                    /*0x3eb8bfc*/ void set_Consumer(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer value);
                    /*0x3eb8c04*/ void SetTwoWayBinding(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                    /*0x3eb8cc8*/ void Unbind();
                    /*0x3eb8d78*/ void UnbindIf(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                }

                class PeekableIncomingSegmentStream : Best.HTTP.Shared.Streams.PeekableStream
                {
                    /*0x40*/ int peek_listIdx;
                    /*0x44*/ int peek_pos;

                    /*0x3eb8fc0*/ PeekableIncomingSegmentStream();
                    /*0x3eb8e64*/ void BeginPeek();
                    /*0x3eb8ee4*/ int PeekByte();
                }

                class PeekableStream : Best.HTTP.Shared.Streams.BufferSegmentStream
                {
                    /*0x3eb8e5c*/ PeekableStream();
                    /*0x380cb08*/ void BeginPeek();
                    /*0x380b6a0*/ int PeekByte();
                }

                class StreamList : System.IO.Stream
                {
                    /*0x28*/ System.IO.Stream[] Streams;
                    /*0x30*/ int CurrentIdx;

                    /*0x3eb8fc8*/ StreamList(System.IO.Stream[] streams);
                    /*0x3eb9044*/ void AppendStream(System.IO.Stream stream);
                    /*0x3eb90f4*/ bool get_CanRead();
                    /*0x3eb9148*/ bool get_CanSeek();
                    /*0x3eb9150*/ bool get_CanWrite();
                    /*0x3eb91a4*/ void Flush();
                    /*0x3eb9224*/ long get_Length();
                    /*0x3eb92b0*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3eb9580*/ void Write(byte[] buffer, int offset, int count);
                    /*0x3eb95d4*/ void Dispose(bool disposing);
                    /*0x3eb97b8*/ long get_Position();
                    /*0x3eb9804*/ void set_Position(long value);
                    /*0x3eb9850*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x3eb98a8*/ void SetLength(long value);
                }

                class WriteOnlyBufferedStream : System.IO.Stream
                {
                    /*0x28*/ int _position;
                    /*0x30*/ byte[] buffer;
                    /*0x38*/ int _bufferSize;
                    /*0x40*/ System.IO.Stream stream;
                    /*0x48*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                    /*0x3eb997c*/ WriteOnlyBufferedStream(System.IO.Stream stream, int bufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3eb98f4*/ bool get_CanRead();
                    /*0x3eb98fc*/ bool get_CanSeek();
                    /*0x3eb9904*/ bool get_CanWrite();
                    /*0x3eb990c*/ long get_Length();
                    /*0x3eb9928*/ long get_Position();
                    /*0x3eb9930*/ void set_Position(long value);
                    /*0x3eb9ce4*/ void Flush();
                    /*0x3eb9ec4*/ void Write(byte[] bufferFrom, int offset, int count);
                    /*0x3eb9fc0*/ int Read(byte[] buffer, int offset, int count);
                    /*0x3eb9fc8*/ long Seek(long offset, System.IO.SeekOrigin origin);
                    /*0x3eb9fd0*/ void SetLength(long value);
                    /*0x3eb9fd4*/ void Dispose(bool disposing);
                }
            }

            namespace PlatformSupport
            {
                namespace Threading
                {
                    struct ReadLock : System.IDisposable
                    {
                        /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                        /*0x18*/ bool locked;

                        /*0x3eba0b0*/ ReadLock(System.Threading.ReaderWriterLockSlim rwLock);
                        /*0x3eba0fc*/ void Dispose();
                    }

                    struct WriteLock : System.IDisposable
                    {
                        /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                        /*0x18*/ bool locked;

                        /*0x3eba128*/ WriteLock(System.Threading.ReaderWriterLockSlim rwLock);
                        /*0x3eba184*/ void Dispose();
                    }

                    class ThreadedRunner
                    {
                        static /*0x0*/ int _shortLivingThreads;
                        static /*0x4*/ int _LongLivingThreads;

                        static /*0x3eba1b0*/ void SetThreadName(string name);
                        static /*0x3907c14*/ void RunShortLiving<T>(System.Action<T> job, T param);
                        static /*0x3907c14*/ void RunShortLiving<T1, T2, T3, T4>(System.Action<T1, T2, T3, T4> job, T1 param1, T2 param2, T3 param3, T4 param4);
                        static /*0x3eba3c8*/ void RunShortLiving(System.Action job);
                        static /*0x3eba490*/ void RunLongLiving(System.Action job);

                        struct IncDecShortLiving : System.IDisposable
                        {
                            /*0x3eba598*/ IncDecShortLiving(bool dummy);
                            /*0x3eba5e0*/ void Dispose();
                        }

                        struct IncDecLongLiving : System.IDisposable
                        {
                            /*0x3eba628*/ IncDecLongLiving(bool dummy);
                            /*0x3eba674*/ void Dispose();
                        }

                        class <>c__DisplayClass10_0<T1, T2, T3, T4>
                        {
                            /*0x0*/ System.Action<T1, T2, T3, T4> job;
                            /*0x0*/ T1 param1;
                            /*0x0*/ T2 param2;
                            /*0x0*/ T3 param3;
                            /*0x0*/ T4 param4;

                            /*0x380cb08*/ <>c__DisplayClass10_0();
                            /*0x380d83c*/ void <RunShortLiving>b__0(object _);
                        }

                        class <>c__DisplayClass11_0
                        {
                            /*0x10*/ System.Action job;

                            /*0x3eba488*/ <>c__DisplayClass11_0();
                            /*0x3eba6c0*/ void <RunShortLiving>b__0(object param);
                        }

                        class <>c__DisplayClass12_0
                        {
                            /*0x10*/ System.Action job;

                            /*0x3eba590*/ <>c__DisplayClass12_0();
                            /*0x3eba75c*/ void <RunLongLiving>b__0(object param);
                        }

                        class <>c__DisplayClass7_0<T>
                        {
                            /*0x0*/ System.Action<T> job;
                            /*0x0*/ T param;

                            /*0x380cb08*/ <>c__DisplayClass7_0();
                            /*0x380d83c*/ void <RunShortLiving>b__0(object _);
                        }
                    }
                }

                namespace Text
                {
                    class StringBuilderPool
                    {
                        static /*0x0*/ bool _isEnabled;
                        static /*0x8*/ System.TimeSpan RemoveOlderThan;
                        static /*0x10*/ System.TimeSpan RunMaintenanceEvery;
                        static /*0x18*/ System.DateTime lastMaintenance;
                        static /*0x20*/ System.Threading.ReaderWriterLockSlim rwLock;
                        static /*0x28*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Text.StringBuilderPool.BuilderShelf> pooledBuilders;

                        static /*0x3ebb048*/ StringBuilderPool();
                        static /*0x3eba7f8*/ System.Text.StringBuilder Get(int lengthHint);
                        static /*0x3ebab0c*/ string ReleaseAndGrab(System.Text.StringBuilder builder);
                        static /*0x3ebad68*/ void Maintain();

                        struct BuilderShelf
                        {
                            /*0x10*/ System.Text.StringBuilder builder;
                            /*0x18*/ System.DateTime released;

                            /*0x3ebacf0*/ BuilderShelf(System.Text.StringBuilder sb);
                        }
                    }
                }

                namespace Network
                {
                    namespace Tcp
                    {
                        interface IPeekableContentProvider
                        {
                            /*0x380d83c*/ void SetTwoWayBinding(Best.HTTP.Shared.PlatformSupport.Network.Tcp.IContentConsumer consumer);
                        }

                        interface IContentConsumer
                        {
                            /*0x380d83c*/ void SetBinding(Best.HTTP.Shared.Streams.PeekableContentProviderStream contentProvider);
                            /*0x380cb08*/ void UnsetBinding();
                            /*0x380cb08*/ void OnContent();
                            /*0x380cb08*/ void OnConnectionClosed();
                            /*0x380d83c*/ void OnError(System.Exception ex);
                        }

                        enum NegotiationSteps
                        {
                            Start = 0,
                            DNSQuery = 1,
                            TCPRace = 2,
                            Proxy = 3,
                            TLSNegotiation = 4,
                            Finish = 5,
                        }

                        interface INegotiationPeer
                        {
                            /*0x380bb68*/ System.Collections.Generic.List<string> GetSupportedProtocolNames(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator);
                            bool MustStopAdvancingToNextStep(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps finishedStep, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationSteps nextStep, System.Exception error);
                            void EvaluateProxyNegotiationFailure(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error, bool resendForAuthentication);
                            /*0x380d93c*/ void OnNegotiationFailed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, System.Exception error);
                            /*0x380da84*/ void OnNegotiationFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Negotiator negotiator, Best.HTTP.Shared.Streams.PeekableContentProviderStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string negotiatedProtocol);
                        }

                        class NegotiationParameters
                        {
                            /*0x10*/ Best.HTTP.Proxies.Proxy proxy;
                            /*0x18*/ bool createProxyTunel;
                            /*0x20*/ System.Uri targetUri;
                            /*0x28*/ bool negotiateTLS;
                            /*0x30*/ System.Threading.CancellationToken token;
                            /*0x38*/ Best.HTTP.Hosts.Settings.HostSettings hostSettings;
                            /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext context;

                            /*0x3ebb1bc*/ NegotiationParameters();
                        }

                        class Negotiator
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer _peer;
                            /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters _parameters;
                            /*0x20*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                            /*0x28*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream _stream;

                            /*0x3ebb1dc*/ Negotiator(Best.HTTP.Shared.PlatformSupport.Network.Tcp.INegotiationPeer peer, Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters parameters);
                            /*0x3ebb1c4*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.NegotiationParameters get_Parameters();
                            /*0x3ebb1cc*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer get_Streamer();
                            /*0x3ebb1d4*/ Best.HTTP.Shared.Streams.PeekableContentProviderStream get_Stream();
                            /*0x3ebb220*/ void Start();
                            /*0x3ebc630*/ void OnCancellationRequested();
                            /*0x3ebc8a0*/ void OnDNSCacheQueryFinished(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters dnsParameters, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryResult result);
                            /*0x3ebd4ec*/ void OnTCPRaceFinished(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters parameters, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceResult raceResult);
                            /*0x3ebee44*/ void OnProxyNegotiated(Best.HTTP.Proxies.ProxyConnectParameters parameters);
                            /*0x3ebf0fc*/ void OnProxyNegotiationFailed(Best.HTTP.Proxies.ProxyConnectParameters parameters, System.Exception error, bool resendForAuthentication);
                            /*0x3ebe174*/ void NegotiateTLS();
                            /*0x3ebf984*/ void OnFramework_TLSNegotiated(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string alpn, System.Exception error);
                            /*0x3ebfc80*/ void OnBC_TLSNegotiated(Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingBCTLSStream stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.Shared.TLS.AbstractTls13Client tlsClient, System.Exception error);
                            /*0x3ebdbc0*/ void SetupSocket(System.Net.Sockets.Socket socket, Best.HTTP.Hosts.Settings.HostSettings hostSettings);
                        }

                        class TCPRingmasterSettings
                        {
                            /*0x10*/ int MaxSimultaneousRacers;
                            /*0x14*/ bool ShuffleAddresses;
                            /*0x18*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters> CustomAddressShuffleAlgorithm;
                            /*0x20*/ System.TimeSpan CancellationCheckingGranularity;

                            /*0x3ec017c*/ TCPRingmasterSettings();
                            /*0x3ebff94*/ string ToString();
                        }

                        class TCPRaceResult
                        {
                            /*0x10*/ System.Net.Sockets.Socket WinningSocket;
                            /*0x18*/ System.Exception Error;

                            /*0x3ec01f8*/ TCPRaceResult(System.Net.Sockets.Socket socket, System.Exception ex);
                            /*0x3ec023c*/ string ToString();
                        }

                        class Race
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters Parameters;
                            /*0x18*/ int NextAddressIndex;
                            /*0x1c*/ int RunningLanes;

                            /*0x3ec0460*/ Race();
                            /*0x3ec02a8*/ string ToString();
                        }

                        class RacingLane
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Race Race;
                            /*0x18*/ int AddressIndex;
                            /*0x1c*/ int LaneIndex;
                            /*0x20*/ System.Net.Sockets.Socket Socket;

                            /*0x3ec0658*/ RacingLane();
                            /*0x3ec0468*/ string ToString();
                        }

                        class TCPRaceParameters
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] Addresses;
                            /*0x18*/ string Hostname;
                            /*0x20*/ int Port;
                            /*0x28*/ System.Threading.CancellationToken Token;
                            /*0x30*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceResult> AnnounceWinnerCallback;
                            /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext Context;

                            /*0x3ebcc50*/ TCPRaceParameters();
                            /*0x3ec0660*/ string ToString();
                        }

                        class TCPRingmaster
                        {
                            static /*0x3ebcc58*/ void StartCompetion(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPRaceParameters parameters);
                            static /*0x3ec0a58*/ void OnLaneFinished(System.IAsyncResult ar);
                            static /*0x3ec2254*/ void OnSocketDisconnect(System.IAsyncResult ar);
                            static /*0x3ec095c*/ void ShuffleAddresses(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] addresses);
                            static /*0x3ec26a8*/ bool CheckForCanceled(System.DateTime now, object context);
                        }

                        interface ITCPStreamerContentConsumer
                        {
                            /*0x380d438*/ void set_MaxBufferSize(long value);
                            /*0x380cdac*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                            /*0x380d83c*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                            /*0x380d83c*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                        }

                        class ReadState
                        {
                            /*0x10*/ int minReceiveBufferSize;
                            /*0x18*/ byte[] receiveBuffer;
                            /*0x20*/ int isReceiving;
                            /*0x28*/ long totalReceived;
                            /*0x30*/ long bufferedLength;
                            /*0x38*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> bufferedSegments;

                            /*0x3ec2b0c*/ ReadState();
                        }

                        class WriteState
                        {
                            /*0x10*/ byte[] _writeBuffer;
                            /*0x18*/ int _writeInProgress;
                            /*0x20*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segmentsToWrite;
                            /*0x28*/ long bufferedLength;
                            /*0x30*/ System.Threading.AutoResetEvent blockEvent;

                            /*0x3ec2b94*/ WriteState();
                        }

                        class TCPStreamer : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
                        {
                            /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer _contentConsumer;
                            /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ReadState readState;
                            /*0x20*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.WriteState writeState;
                            /*0x28*/ System.Net.Sockets.Socket _socket;
                            /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext _loggingContext;
                            /*0x38*/ bool _disposed;
                            /*0x3c*/ int _closed;
                            /*0x40*/ int _isDisconnected;
                            /*0x44*/ bool _closeInitiatedByServer;
                            /*0x48*/ uint MaxBufferedReadAmount;
                            /*0x4c*/ uint MaxBufferedWriteAmount;

                            /*0x3ebde00*/ TCPStreamer(System.Net.Sockets.Socket socket, uint maxReadBufferSize, uint maxWriteBufferSize, Best.HTTP.Shared.Logger.LoggingContext _parentLoggingContext);
                            /*0x3ec2c58*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer get_ContentConsumer();
                            /*0x3ec2c60*/ void set_ContentConsumer(Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer value);
                            /*0x3ec2c68*/ System.Net.Sockets.Socket get_Socket();
                            /*0x3ec2c70*/ Best.HTTP.Shared.Logger.LoggingContext get_Context();
                            /*0x3ec2c78*/ bool get_IsConnectionClosed();
                            /*0x3ec2ca4*/ long get_Length();
                            /*0x3ec3240*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment DequeueReceived();
                            /*0x3ec2ebc*/ void BeginReceive();
                            /*0x3ec3358*/ void OnReceived(System.IAsyncResult asyncResult);
                            /*0x3ec39d4*/ void EnqueueToSend(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                            /*0x3ec3ca0*/ bool SendFromQueue();
                            /*0x3ec3ddc*/ void OnWroteToNetwork(System.IAsyncResult ar);
                            /*0x3ebc7ec*/ void Dispose();
                            /*0x3ec46c4*/ void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                            /*0x3ec43b8*/ void Close();
                            /*0x3ec4774*/ void OnDisconnected(System.IAsyncResult ar);
                        }

                        namespace Streams
                        {
                            class FrameworkTLSByteForwarder : System.IO.Stream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x28*/ long _length;
                                /*0x30*/ long _maxBufferSize;
                                /*0x38*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x40*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x48*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer _contentConsumer;
                                /*0x50*/ System.Collections.Generic.Queue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> _segmentsToReadFrom;
                                /*0x58*/ System.Threading.AutoResetEvent _are;
                                /*0x60*/ System.Threading.ReaderWriterLockSlim _rws;
                                /*0x68*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment _currentReadSegment;
                                /*0x78*/ int _pullContentInProgress;

                                /*0x3ec4cbc*/ FrameworkTLSByteForwarder(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer contentConsumer, long maxBufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x3ec4c08*/ bool get_CanRead();
                                /*0x3ec4c10*/ bool get_CanSeek();
                                /*0x3ec4c18*/ bool get_CanWrite();
                                /*0x3ec4c20*/ long get_Length();
                                /*0x3ec4c28*/ long get_Position();
                                /*0x3ec4c60*/ void set_Position(long value);
                                /*0x3ec4c98*/ long get_MaxBufferSize();
                                /*0x3ec4cb0*/ void set_MaxBufferSize(long value);
                                /*0x3ec4ea0*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                                /*0x3ec4fec*/ void PullContentFromStreamer();
                                /*0x3ec52f0*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec5538*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec55ec*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ec5f18*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ec61d8*/ void Flush();
                                /*0x3ec61dc*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ec6214*/ void SetLength(long value);
                                /*0x3ec624c*/ void Dispose(bool disposing);
                            }

                            class FrameworkTLSStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                static /*0x0*/ bool loggedWarning;
                                /*0x48*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer, string, System.Exception> OnNegotiated;
                                /*0x50*/ long _maxBufferSize;
                                /*0x58*/ string _targetHost;
                                /*0x60*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x68*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSByteForwarder _forwarder;
                                /*0x70*/ System.Net.Security.SslStream _sslStream;
                                /*0x78*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x80*/ Best.HTTP.Hosts.Settings.HostSettings _hostSettings;
                                /*0x88*/ int peek_listIdx;
                                /*0x8c*/ int peek_pos;
                                /*0x90*/ object locker;
                                /*0x98*/ int _reading;

                                /*0x3ebf670*/ FrameworkTLSStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, string targetHost, Best.HTTP.Hosts.Settings.HostSettings hostSettings);
                                /*0x3ec62cc*/ long get_MaxBufferSize();
                                /*0x3ec62e4*/ void set_MaxBufferSize(long value);
                                /*0x3ec62f0*/ bool OnUserCertificationValidation(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
                                /*0x3ec6634*/ System.Security.Cryptography.X509Certificates.X509Certificate OnUserCertificationSelection(object sender, string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
                                /*0x3ec69cc*/ void OnAuthenticatedAsClient(System.IAsyncResult ar);
                                /*0x3ec702c*/ bool CallOnNegotiated(string alpn, System.Exception error);
                                /*0x3ec7628*/ void BeginPeek();
                                /*0x3ec76a8*/ int PeekByte();
                                /*0x3ec7784*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec72f4*/ void BeginRead();
                                /*0x3ec77c8*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec7874*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ec7968*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ec798c*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                                /*0x3ec7ab0*/ void Flush();
                                /*0x3ec7ad4*/ void Dispose(bool disposing);
                                /*0x3ec7b0c*/ void <>n__0(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);

                                class <>c__DisplayClass24_0
                                {
                                    /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.FrameworkTLSStream <>4__this;
                                    /*0x18*/ byte[] buffer;

                                    /*0x3ec77c0*/ <>c__DisplayClass24_0();
                                    /*0x3ec7b14*/ void <BeginRead>b__0(System.Threading.Tasks.Task<int> ti);
                                }
                            }

                            class NonblockingBCTLSStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x48*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.Tcp.Streams.NonblockingBCTLSStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer, Best.HTTP.Shared.TLS.AbstractTls13Client, System.Exception> OnNegotiated;
                                /*0x50*/ long _maxBufferSize;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol _tlsClientProtocol;
                                /*0x60*/ Best.HTTP.Shared.TLS.AbstractTls13Client _tlsClient;
                                /*0x68*/ object locker;
                                /*0x70*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x78*/ int _sendBufferSize;
                                /*0x7c*/ bool _disposeStreamer;
                                /*0x80*/ int peek_listIdx;
                                /*0x84*/ int peek_pos;
                                /*0x88*/ bool _disposed;

                                /*0x3ebf4d0*/ NonblockingBCTLSStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol tlsClientProtocol, Best.HTTP.Shared.TLS.AbstractTls13Client tlsClient, bool disposeStreamer, uint maxBufferSize);
                                /*0x3ec8030*/ long get_MaxBufferSize();
                                /*0x3ec8048*/ void set_MaxBufferSize(long value);
                                /*0x3ec8208*/ void BeginPeek();
                                /*0x3ec8330*/ int PeekByte();
                                /*0x3ec84d8*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec8b8c*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec886c*/ void PullContentFromStreamer();
                                /*0x3ec8c80*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ec8ea4*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ec9190*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment bufferSegment);
                                /*0x3ec8054*/ bool CallOnNegotiated(System.Exception error);
                                /*0x3ec9354*/ void Dispose(bool disposing);
                            }

                            class NonblockingTCPStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream, Best.HTTP.Shared.PlatformSupport.Network.Tcp.ITCPStreamerContentConsumer
                            {
                                /*0x48*/ long _maxBufferSize;
                                /*0x50*/ Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer _streamer;
                                /*0x58*/ bool _disposeStreamer;
                                /*0x5c*/ int peek_listIdx;
                                /*0x60*/ int peek_pos;
                                /*0x68*/ object _locker;

                                /*0x3ebe0ac*/ NonblockingTCPStream(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer, bool disposeStreamer, uint maxBufferSize);
                                /*0x3ec94f4*/ long get_MaxBufferSize();
                                /*0x3ec950c*/ void set_MaxBufferSize(long value);
                                /*0x3ec9518*/ void BeginPeek();
                                /*0x3ec9640*/ int PeekByte();
                                /*0x3ec97e8*/ void Dispose(bool disposing);
                                /*0x3ec98f0*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ec9a5c*/ void Write(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                                /*0x3ec9a74*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ec9c20*/ void OnContent(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec9d70*/ void OnConnectionClosed(Best.HTTP.Shared.PlatformSupport.Network.Tcp.TCPStreamer streamer);
                                /*0x3ec9ba0*/ void DequeueFromStreamer();
                            }

                            class NonblockingUnderlyingStream : Best.HTTP.Shared.Streams.PeekableContentProviderStream
                            {
                                /*0x48*/ System.IO.Stream _stream;
                                /*0x50*/ int _receiving;
                                /*0x54*/ uint _maxBufferSize;
                                /*0x58*/ Best.HTTP.Shared.Logger.LoggingContext _context;
                                /*0x60*/ object _locker;
                                /*0x68*/ int peek_listIdx;
                                /*0x6c*/ int peek_pos;

                                /*0x3ec9e1c*/ NonblockingUnderlyingStream(System.IO.Stream stream, uint maxBufferSize, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x3ec9f30*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3eca040*/ void BeginReceive();
                                /*0x3eca57c*/ void OnReceived(System.IAsyncResult ar);
                                /*0x3ecac4c*/ void BeginPeek();
                                /*0x3ecad74*/ int PeekByte();
                                /*0x3ecaf1c*/ void Dispose(bool disposing);
                            }
                        }
                    }

                    namespace DNS
                    {
                        namespace Cache
                        {
                            struct DNSQueryResult
                            {
                                /*0x10*/ string HostName;
                                /*0x18*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] Addresses;
                                /*0x20*/ System.Exception Error;

                                /*0x3ecaf48*/ DNSQueryResult(string hostName, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] addresses, System.Exception error);
                                /*0x3ecaf8c*/ string ToString();
                            }

                            class DNSIPAddress
                            {
                                /*0x10*/ System.Net.IPAddress <IPAddress>k__BackingField;
                                /*0x18*/ bool <IsWorkedLastTime>k__BackingField;

                                /*0x3ecb22c*/ DNSIPAddress(System.Net.IPAddress iPAddress);
                                /*0x3ecb208*/ System.Net.IPAddress get_IPAddress();
                                /*0x3ecb210*/ void set_IPAddress(System.Net.IPAddress value);
                                /*0x3ecb218*/ bool get_IsWorkedLastTime();
                                /*0x3ecb220*/ void set_IsWorkedLastTime(bool value);
                                /*0x3ecb268*/ string ToString();
                            }

                            class DNSCacheOptions
                            {
                                /*0x10*/ System.TimeSpan RefreshAfter;
                                /*0x18*/ System.TimeSpan RemoveAfter;
                                /*0x20*/ System.TimeSpan CancellationCheckGranularity;
                                /*0x28*/ System.TimeSpan MaintenanceFrequency;

                                /*0x3ecb300*/ DNSCacheOptions();
                            }

                            class DNSQueryParameters
                            {
                                /*0x10*/ UnityEngine.Hash128 <Key>k__BackingField;
                                /*0x20*/ System.Uri <Address>k__BackingField;
                                /*0x28*/ System.Threading.CancellationToken Token;
                                /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext Context;
                                /*0x38*/ System.Action<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryResult> Callback;

                                /*0x3ebb580*/ DNSQueryParameters(System.Uri address);
                                /*0x3ecb3a0*/ UnityEngine.Hash128 get_Key();
                                /*0x3ecb3ac*/ void set_Key(UnityEngine.Hash128 value);
                                /*0x3ecb3b4*/ string get_Hostname();
                                /*0x3ecb3d0*/ System.Uri get_Address();
                                /*0x3ecb3d8*/ void set_Address(System.Uri value);
                                /*0x3ecb3e0*/ bool get_IsPrefetch();
                                /*0x3ecb3f0*/ string ToString();
                            }

                            class DNSCache
                            {
                                static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheOptions Options;
                                static /*0x8*/ System.Collections.Concurrent.ConcurrentDictionary<UnityEngine.Hash128, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry> _cache;
                                static /*0x10*/ int _isMaintenanceScheduled;

                                static /*0x3ecdd34*/ DNSCache();
                                static /*0x3ecb480*/ void Prefetch(string hostName);
                                static /*0x3ec1fb4*/ void ReportAsNonWorking(string hostName, System.Net.IPAddress address, Best.HTTP.Shared.Logger.LoggingContext context);
                                static /*0x3ebb5d8*/ void Query(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters parameters);
                                static /*0x3ecb81c*/ void OnGetHostAddresses(System.IAsyncResult ar);
                                static /*0x3eccb64*/ bool CheckForCanceled(System.DateTime now, object context);
                                static /*0x3eccfcc*/ bool Maintenance(System.DateTime now, object context);

                                class <>c__DisplayClass7_0
                                {
                                    /*0x10*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSQueryParameters parameters;
                                    /*0x18*/ System.Net.IPAddress[] addresses;

                                    /*0x3eccb5c*/ <>c__DisplayClass7_0();
                                    /*0x3ecde14*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry <OnGetHostAddresses>g__AddCacheEntry|0(UnityEngine.Hash128 key);
                                    /*0x3ece0d8*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry <OnGetHostAddresses>g__UpdateCacheEntry|1(UnityEngine.Hash128 key, Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry oldEntry);
                                }
                            }

                            class DNSCacheEntry
                            {
                                /*0x10*/ UnityEngine.Hash128 Key;
                                /*0x20*/ string Host;
                                /*0x28*/ System.DateTime ResolvedAt;
                                /*0x30*/ long _lastUsedTicks;
                                /*0x38*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> _resolvedAddresses;
                                /*0x40*/ int _isRefreshing;

                                /*0x3ece028*/ DNSCacheEntry(UnityEngine.Hash128 key, string host, System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x3ece340*/ DNSCacheEntry(UnityEngine.Hash128 key, string host, long lastUsedTicks, System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x3ece31c*/ System.DateTime get_LastUsed();
                                /*0x3ece294*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSCacheEntry DeriveWith(System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress> resolvedAddresses);
                                /*0x3ecdbe0*/ bool IsStalled(System.DateTime now);
                                /*0x3ecdb10*/ bool IsReadyToRemove(System.DateTime now);
                                /*0x3ecdca8*/ void Refresh();
                                /*0x3ecb76c*/ Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress[] GetAddresses();
                                /*0x3ecb67c*/ void ReportNonWorking(System.Net.IPAddress nonWorking, Best.HTTP.Shared.Logger.LoggingContext context);
                                /*0x3ece3fc*/ string ToString();

                                class <>c__DisplayClass15_0
                                {
                                    /*0x10*/ System.Net.IPAddress nonWorking;

                                    /*0x3ece3f4*/ <>c__DisplayClass15_0();
                                    /*0x3ece800*/ bool <ReportNonWorking>b__0(Best.HTTP.Shared.PlatformSupport.Network.DNS.Cache.DNSIPAddress adr);
                                }
                            }
                        }
                    }
                }

                namespace Memory
                {
                    struct AutoReleaseBuffer : System.IDisposable
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer Empty;
                        /*0x10*/ byte[] Data;
                        /*0x18*/ int Offset;
                        /*0x1c*/ int Count;

                        static /*0x3eced00*/ AutoReleaseBuffer();
                        /*0x3ece824*/ AutoReleaseBuffer(byte[] data);
                        /*0x3ec4fc4*/ AutoReleaseBuffer(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment segment);
                        /*0x3ece860*/ bool Equals(object obj);
                        /*0x3ece93c*/ bool Equals(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment other);
                        /*0x3ece970*/ int GetHashCode();
                        /*0x3ece9b0*/ string ToString();
                        /*0x3ecec94*/ void Dispose();
                    }

                    class UserModeLock
                    {
                        /*0x10*/ int _locked;

                        /*0x3eceee8*/ UserModeLock();
                        /*0x3eced78*/ void Acquire();
                        /*0x3ecee0c*/ bool TryAcquire();
                        /*0x3eceed8*/ void Release();
                    }

                    struct BufferStats
                    {
                        /*0x10*/ long Size;
                        /*0x18*/ int Count;
                    }

                    struct BufferPoolStats
                    {
                        /*0x10*/ long GetBuffers;
                        /*0x18*/ long ReleaseBuffers;
                        /*0x20*/ long PoolSize;
                        /*0x28*/ long MaxPoolSize;
                        /*0x30*/ long MinBufferSize;
                        /*0x38*/ long MaxBufferSize;
                        /*0x40*/ long Borrowed;
                        /*0x48*/ long ArrayAllocations;
                        /*0x50*/ int FreeBufferCount;
                        /*0x58*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferStats> FreeBufferStats;
                        /*0x60*/ System.TimeSpan NextMaintenance;
                    }

                    class BufferPool
                    {
                        static /*0x0*/ byte[] NoData;
                        static /*0x8*/ bool _isEnabled;
                        static /*0x10*/ System.TimeSpan RemoveOlderThan;
                        static /*0x18*/ System.TimeSpan RunMaintenanceEvery;
                        static /*0x20*/ long MinBufferSize;
                        static /*0x28*/ long MaxBufferSize;
                        static /*0x30*/ long MaxPoolSize;
                        static /*0x38*/ bool RemoveEmptyLists;
                        static /*0x39*/ bool IsDoubleReleaseCheckEnabled;
                        static /*0x40*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferStore> FreeBuffers;
                        static /*0x48*/ System.DateTime lastMaintenance;
                        static /*0x50*/ long PoolSize;
                        static /*0x58*/ long GetBuffers;
                        static /*0x60*/ long ReleaseBuffers;
                        static /*0x68*/ long Borrowed;
                        static /*0x70*/ long ArrayAllocations;
                        static /*0x78*/ Best.HTTP.Shared.PlatformSupport.Memory.UserModeLock _lock;

                        static /*0x3eceef0*/ BufferPool();
                        static /*0x3ecf180*/ void OnLowMemory();
                        static /*0x3eb9aac*/ byte[] Get(long size, bool canBeLarger, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3ecf448*/ void ReleaseBulk(System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> segments);
                        static /*0x3ecf8a8*/ void ReleaseBulk(System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment> segments);
                        static /*0x3eba058*/ void Release(byte[] buffer);
                        static /*0x3ecf61c*/ void Release(byte[] buffer, bool acquireLock);
                        static /*0x3ecfab4*/ byte[] Resize(ref byte[] buffer, int newSize, bool canBeLarger, bool clear, Best.HTTP.Shared.Logger.LoggingContext context);
                        static /*0x3ecfc2c*/ void GetStatistics(ref Best.HTTP.Shared.PlatformSupport.Memory.BufferPoolStats stats);
                        static /*0x3ecf2b8*/ void Clear();
                        static /*0x3ed0030*/ void Maintain();
                        static /*0x3ed0474*/ bool IsPowerOfTwo(long x);
                        static /*0x3ed0484*/ long NextPowerOf2(long x);
                        static /*0x3ed04a0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc FindFreeBuffer(long size, bool canBeLarger);
                        static /*0x3ed0770*/ void AddFreeBuffer(byte[] buffer);
                    }

                    struct BufferSegment
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Empty;
                        /*0x10*/ byte[] Data;
                        /*0x18*/ int Offset;
                        /*0x1c*/ int Count;

                        static /*0x3ed112c*/ BufferSegment();
                        static /*0x3ec5db4*/ bool op_Equality(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment right);
                        static /*0x3ec5e44*/ bool op_Inequality(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment right);
                        static /*0x3ed0e44*/ byte[] op_Implicit(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment left);
                        /*0x3ec332c*/ BufferSegment(byte[] data, int offset, int count);
                        /*0x3ec5ed4*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Slice(int newOffset);
                        /*0x3ed0ccc*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment Slice(int offset, int count);
                        /*0x3ed0d08*/ bool Equals(object obj);
                        /*0x3ed0dd0*/ bool Equals(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment other);
                        /*0x3ed0e04*/ int GetHashCode();
                        /*0x3ed0e48*/ string ToString();
                    }

                    struct BufferStore
                    {
                        /*0x10*/ long Size;
                        /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc> buffers;

                        /*0x3ed11a4*/ BufferStore(long size);
                        /*0x3ed0bec*/ BufferStore(long size, byte[] buffer);
                        /*0x3ed1228*/ string ToString();
                    }

                    struct BufferDesc
                    {
                        static /*0x0*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferDesc Empty;
                        /*0x10*/ byte[] buffer;
                        /*0x18*/ System.DateTime released;

                        static /*0x3ed13cc*/ BufferDesc();
                        /*0x3ed0b74*/ BufferDesc(byte[] buff);
                        /*0x3ed12d4*/ string ToString();
                    }
                }

                namespace IL2CPP
                {
                    class Il2CppEagerStaticClassConstructionAttribute : System.Attribute
                    {
                        /*0x3ed1440*/ Il2CppEagerStaticClassConstructionAttribute();
                    }

                    class PreserveAttribute : System.Attribute
                    {
                        /*0x3ed1448*/ PreserveAttribute();
                    }
                }

                namespace FileSystem
                {
                    class DefaultIOService : Best.HTTP.Shared.PlatformSupport.FileSystem.IIOService
                    {
                        /*0x3ed162c*/ DefaultIOService();
                        /*0x3ed1450*/ System.IO.Stream CreateFileStream(string path, Best.HTTP.Shared.PlatformSupport.FileSystem.FileStreamModes mode);
                        /*0x3ed15ec*/ void DirectoryCreate(string path);
                        /*0x3ed15f8*/ void DirectoryDelete(string path);
                        /*0x3ed1608*/ bool DirectoryExists(string path);
                        /*0x3ed1614*/ void FileDelete(string path);
                        /*0x3ed1620*/ bool FileExists(string path);
                    }

                    enum FileStreamModes
                    {
                        Create = 0,
                        OpenRead = 1,
                        OpenReadWrite = 2,
                        Append = 3,
                    }

                    interface IIOService
                    {
                        /*0x380d83c*/ void DirectoryCreate(string path);
                        /*0x380b2f0*/ bool DirectoryExists(string path);
                        /*0x380d83c*/ void DirectoryDelete(string path);
                        /*0x380d83c*/ void FileDelete(string path);
                        /*0x380b2f0*/ bool FileExists(string path);
                        /*0x380bc74*/ System.IO.Stream CreateFileStream(string path, Best.HTTP.Shared.PlatformSupport.FileSystem.FileStreamModes mode);
                    }
                }
            }

            namespace Logger
            {
                enum Loglevels
                {
                    All = 0,
                    Information = 1,
                    Warning = 2,
                    Error = 3,
                    Exception = 4,
                    None = 5,
                }

                interface ILogOutput : System.IDisposable
                {
                    /*0x380b128*/ bool get_AcceptColor();
                    /*0x380d170*/ void Write(Best.HTTP.Shared.Logger.Loglevels level, string logEntry);
                    /*0x380cb08*/ void Flush();
                }

                interface IFilter
                {
                    /*0x380b2f0*/ bool Include(string division);
                }

                interface ILogger
                {
                    /*0x380b6a0*/ Best.HTTP.Shared.Logger.Loglevels get_Level();
                    /*0x380cffc*/ void set_Level(Best.HTTP.Shared.Logger.Loglevels value);
                    /*0x380b128*/ bool get_IsDiagnostic();
                    /*0x380da4c*/ void Verbose(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x380da4c*/ void Information(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x380da4c*/ void Warning(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x380da4c*/ void Error(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x380da84*/ void Exception(string division, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                }

                class LoggingContext
                {
                    /*0x10*/ string <Hash>k__BackingField;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField> fields;

                    static /*0x3ed1cc0*/ string Escape(string original);
                    /*0x3ec2cc0*/ LoggingContext(object boundto);
                    /*0x3ed1634*/ string get_Hash();
                    /*0x3ed163c*/ void set_Hash(string value);
                    /*0x3ed16b8*/ void Add(string key, long value);
                    /*0x3ed1644*/ void Add(string key, string value);
                    /*0x3ec2e44*/ void Add(string key, Best.HTTP.Shared.Logger.LoggingContext value);
                    /*0x3ed1714*/ void Add(Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField field);
                    /*0x3ed1900*/ string GetStringField(string fieldName);
                    /*0x3ed1814*/ void Remove(string key);
                    /*0x3ed1a04*/ void ToJson(System.Text.StringBuilder sb);

                    enum LoggingContextFieldType
                    {
                        Long = 0,
                        Bool = 1,
                        String = 2,
                        AnotherContext = 3,
                    }

                    struct LoggingContextField
                    {
                        /*0x10*/ string key;
                        /*0x18*/ long longValue;
                        /*0x20*/ bool boolValue;
                        /*0x28*/ string stringValue;
                        /*0x30*/ Best.HTTP.Shared.Logger.LoggingContext loggingContextValue;
                        /*0x38*/ Best.HTTP.Shared.Logger.LoggingContext.LoggingContextFieldType fieldType;

                        /*0x3ed1f0c*/ string ToString();
                    }

                    class <>c__DisplayClass13_0
                    {
                        /*0x10*/ string fieldName;

                        /*0x3ed19fc*/ <>c__DisplayClass13_0();
                        /*0x3ed1fc8*/ bool <GetStringField>b__0(Best.HTTP.Shared.Logger.LoggingContext.LoggingContextField f);
                    }
                }

                class ThreadedLogger : Best.HTTP.Shared.Logger.ILogger, System.IDisposable
                {
                    /*0x10*/ Best.HTTP.Shared.Logger.Loglevels <Level>k__BackingField;
                    /*0x18*/ Best.HTTP.Shared.Logger.ILogOutput _output;
                    /*0x20*/ Best.HTTP.Shared.Logger.IFilter <Filter>k__BackingField;
                    /*0x28*/ int InitialStringBufferCapacity;
                    /*0x30*/ System.TimeSpan ExitThreadAfterInactivity;
                    /*0x38*/ System.Collections.Concurrent.ConcurrentQueue<Best.HTTP.Shared.Logger.LogJob> jobs;
                    /*0x40*/ System.Threading.AutoResetEvent newJobEvent;
                    /*0x48*/ int threadCreated;
                    /*0x4c*/ bool isDisposed;
                    /*0x50*/ System.Text.StringBuilder sb;

                    /*0x3ed20d0*/ ThreadedLogger();
                    /*0x3ed1fdc*/ Best.HTTP.Shared.Logger.Loglevels get_Level();
                    /*0x3ed1fe4*/ void set_Level(Best.HTTP.Shared.Logger.Loglevels value);
                    /*0x3ed1fec*/ bool get_IsDiagnostic();
                    /*0x3ed1ffc*/ Best.HTTP.Shared.Logger.ILogOutput get_Output();
                    /*0x3ed2004*/ void set_Output(Best.HTTP.Shared.Logger.ILogOutput value);
                    /*0x3ed20c8*/ Best.HTTP.Shared.Logger.IFilter get_Filter();
                    /*0x3ed22e8*/ void Verbose(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed2858*/ void Information(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed2870*/ void Warning(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed2888*/ void Error(string division, string msg, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed28a0*/ void Exception(string division, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed2300*/ void AddJob(Best.HTTP.Shared.Logger.Loglevels level, string div, string msg, System.Exception ex, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed2cb0*/ void ThreadFunc();
                    /*0x3ed3090*/ void WriteJob(ref Best.HTTP.Shared.Logger.LogJob job);
                    /*0x3ed3274*/ void Dispose();
                }

                struct LogJob
                {
                    static /*0x0*/ string[] LevelStrings;
                    /*0x10*/ Best.HTTP.Shared.Logger.Loglevels level;
                    /*0x18*/ string division;
                    /*0x20*/ string msg;
                    /*0x28*/ System.Exception ex;
                    /*0x30*/ System.DateTime time;
                    /*0x38*/ int threadId;
                    /*0x40*/ string stackTrace;
                    /*0x48*/ string context;

                    static /*0x3ed34a8*/ LogJob();
                    static /*0x3ed33b0*/ string WrapInColor(string str, string color, bool acceptColor);
                    /*0x3ed28b8*/ string ToJson(System.Text.StringBuilder sb, bool acceptColor);
                    /*0x3ed33b4*/ void ProcessStackTrace(System.Text.StringBuilder sb);
                }

                class UnityOutput : Best.HTTP.Shared.Logger.ILogOutput, System.IDisposable
                {
                    /*0x10*/ bool <AcceptColor>k__BackingField;

                    /*0x3ed2280*/ UnityOutput();
                    /*0x3ed3628*/ bool get_AcceptColor();
                    /*0x3ed3630*/ void Write(Best.HTTP.Shared.Logger.Loglevels level, string logEntry);
                    /*0x3ed370c*/ void Best.HTTP.Shared.Logger.ILogOutput.Flush();
                    /*0x3ed3710*/ void System.IDisposable.Dispose();
                }
            }

            namespace Extensions
            {
                class CircularBuffer<T>
                {
                    /*0x0*/ int <Capacity>k__BackingField;
                    /*0x0*/ int <Count>k__BackingField;
                    /*0x0*/ T[] buffer;
                    /*0x0*/ int startIdx;
                    /*0x0*/ int endIdx;

                    /*0x380cffc*/ CircularBuffer(int capacity);
                    /*0x380b6a0*/ int get_Capacity();
                    /*0x380cffc*/ void set_Capacity(int value);
                    /*0x380b6a0*/ int get_Count();
                    /*0x380cffc*/ void set_Count(int value);
                    /*0x3907c14*/ T get_Item(int idx);
                    /*0x3907c14*/ void Add(T element);
                    /*0x380b9e8*/ string ToString();
                }

                class Extensions
                {
                    static /*0x0*/ System.Text.RegularExpressions.Regex validIpV4AddressRegex;

                    static /*0x3ed54fc*/ Extensions();
                    static /*0x3ed3768*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment GetASCIIBytes(string str);
                    static /*0x3ed3860*/ void SendAsASCII(System.IO.BinaryWriter stream, string str);
                    static /*0x3ed38e0*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> AddHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name, string value);
                    static /*0x3ed3ae0*/ System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> SetHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name, string value);
                    static /*0x3ed3d18*/ bool RemoveHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x3ed3d7c*/ System.Collections.Generic.List<string> GetHeaderValues(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x3ed3e14*/ string GetFirstHeaderValue(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string name);
                    static /*0x3ed3ec8*/ bool HasHeaderWithValue(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string headerName, string value);
                    static /*0x3ed3fb4*/ bool HasHeader(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> headers, string headerName);
                    static /*0x3ed4018*/ void WriteString(System.IO.Stream fs, string value);
                    static /*0x3ed41a4*/ void WriteLine(System.IO.Stream fs);
                    static /*0x3ed4220*/ Best.HTTP.Shared.PlatformSupport.Memory.AutoReleaseBuffer AsAutoRelease(byte[] buffer);
                    static /*0x3eb9e94*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AsBuffer(byte[] bytes, int length);
                    static /*0x3ec437c*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment AsBuffer(byte[] bytes, int offset, int length);
                    static /*0x3ec998c*/ Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment CopyAsBuffer(byte[] bytes, int offset, int length);
                    static /*0x3ed4264*/ string GetRequestPathAndQueryURL(System.Uri uri);
                    static /*0x3ed42d8*/ void WriteArray(System.IO.Stream stream, byte[] array);
                    static /*0x3ed4304*/ void WriteBufferSegment(System.IO.Stream stream, Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment buffer);
                    static /*0x3ed4328*/ bool IsHostIsAnIPAddress(System.Uri uri);
                    static /*0x3ed4418*/ bool IsIpV4AddressValid(string address);
                    static /*0x3ed44b8*/ bool IsIpV6AddressValid(string address);
                    static /*0x3ed4554*/ uint ToUInt32(string str, uint defaultValue);
                    static /*0x3ed4588*/ long ToInt64(string str, long defaultValue);
                    static /*0x3ed45bc*/ System.DateTime ToDateTime(string str, System.DateTime defaultValue);
                    static /*0x3ed46e8*/ string ToStr(string str, string defaultVale);
                    static /*0x3ed46f4*/ string ToBinaryStr(byte value);
                    static /*0x3ed4768*/ string CalculateMD5Hash(string input);
                    static /*0x3ed4824*/ string CalculateMD5Hash(Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment input);
                    static /*0x3ed4adc*/ string Read(string str, ref int pos, char block, bool needResult);
                    static /*0x3ed4bd8*/ string Read(string str, ref int pos, System.Func<char, bool> block, bool needResult);
                    static /*0x3ed4d8c*/ string ReadPossibleQuotedText(string str, ref int pos);
                    static /*0x3ed4cfc*/ void SkipWhiteSpace(string str, ref int pos);
                    static /*0x3ed4ff0*/ string TrimAndLower(string str);
                    static /*0x3ed5144*/ System.Nullable<char> Peek(string str, int pos);
                    static /*0x3ed51dc*/ void ReadBuffer(System.IO.Stream stream, byte[] buffer, int length);
                    static /*0x3ed52d0*/ void WriteString(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms, string str);
                    static /*0x3ed53c0*/ void WriteLine(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms);
                    static /*0x3ed5440*/ void WriteLine(Best.HTTP.Shared.Streams.BufferPoolMemoryStream ms, string str);

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Shared.Extensions.Extensions.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__41_0;
                        static /*0x10*/ System.Func<char, bool> <>9__41_1;

                        static /*0x3ed559c*/ <>c();
                        /*0x3ed5604*/ <>c();
                        /*0x3ed560c*/ bool <ReadPossibleQuotedText>b__41_0(char ch);
                        /*0x3ed5628*/ bool <ReadPossibleQuotedText>b__41_1(char ch);
                    }

                    class <>c__DisplayClass39_0
                    {
                        /*0x10*/ char block;

                        /*0x3ed4bd0*/ <>c__DisplayClass39_0();
                        /*0x3ed5644*/ bool <Read>b__0(char ch);
                    }
                }

                class ExceptionHelper
                {
                    static /*0x3ed5264*/ System.Exception ServerClosedTCPStream();
                }

                class HeaderParser : Best.HTTP.Shared.Extensions.KeyValuePairList
                {
                    /*0x3ed5654*/ HeaderParser(string headerStr);
                    /*0x3ed568c*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> Parse(string headerStr);
                }

                class HeaderValue
                {
                    /*0x10*/ string <Key>k__BackingField;
                    /*0x18*/ string <Value>k__BackingField;
                    /*0x20*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> <Options>k__BackingField;

                    /*0x3ed593c*/ HeaderValue();
                    /*0x3ed599c*/ HeaderValue(string key);
                    /*0x3ed594c*/ string get_Key();
                    /*0x3ed5954*/ void set_Key(string value);
                    /*0x3ed595c*/ string get_Value();
                    /*0x3ed5964*/ void set_Value(string value);
                    /*0x3ed596c*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> get_Options();
                    /*0x3ed5974*/ void set_Options(System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> value);
                    /*0x3ed597c*/ bool get_HasValue();
                    /*0x3ed5944*/ void Parse(string headerStr, ref int pos);
                    /*0x3ed5e6c*/ bool TryGetOption(string key, ref Best.HTTP.Shared.Extensions.HeaderValue option);
                    /*0x3ed59cc*/ void ParseImplementation(string headerStr, ref int pos, bool isOptionIsAnOption);
                    /*0x3ed5f68*/ string ToString();

                    class <>c
                    {
                        static /*0x0*/ Best.HTTP.Shared.Extensions.HeaderValue.<> <>9;
                        static /*0x8*/ System.Func<char, bool> <>9__18_0;

                        static /*0x3ed68bc*/ <>c();
                        /*0x3ed6924*/ <>c();
                        /*0x3ed692c*/ bool <ParseImplementation>b__18_0(char ch);
                    }
                }

                class RunOnceOnMainThread : Best.HTTP.Shared.Extensions.IHeartbeat
                {
                    /*0x10*/ System.Action _action;
                    /*0x18*/ int _subscribed;
                    /*0x20*/ Best.HTTP.Shared.Logger.LoggingContext _context;

                    /*0x3ed6958*/ RunOnceOnMainThread(System.Action action, Best.HTTP.Shared.Logger.LoggingContext context);
                    /*0x3ed699c*/ void Subscribe();
                    /*0x3ed6b98*/ void OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                }

                interface IHeartbeat
                {
                    void OnHeartbeatUpdate(System.DateTime utcNow, System.TimeSpan dif);
                }

                class HeartbeatManager
                {
                    /*0x10*/ System.Threading.ReaderWriterLockSlim rwLock;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.IHeartbeat> Heartbeats;
                    /*0x20*/ Best.HTTP.Shared.Extensions.IHeartbeat[] UpdateArray;
                    /*0x28*/ System.DateTime LastUpdate;

                    /*0x3ed73c8*/ HeartbeatManager();
                    /*0x3ed6a24*/ void Subscribe(Best.HTTP.Shared.Extensions.IHeartbeat heartbeat);
                    /*0x3ed6e0c*/ void Unsubscribe(Best.HTTP.Shared.Extensions.IHeartbeat heartbeat);
                    /*0x3ed6ef8*/ void Update();
                    /*0x3ed72d4*/ void Clear();
                }

                class KeyValuePairList
                {
                    /*0x10*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> <Values>k__BackingField;

                    /*0x3ed75c8*/ KeyValuePairList();
                    /*0x3ed74c8*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> get_Values();
                    /*0x3ed74d0*/ void set_Values(System.Collections.Generic.List<Best.HTTP.Shared.Extensions.HeaderValue> value);
                    /*0x3ed74d8*/ bool TryGet(string valueKeyName, ref Best.HTTP.Shared.Extensions.HeaderValue param);
                }

                struct TimerData
                {
                    /*0x10*/ System.DateTime Created;
                    /*0x18*/ System.TimeSpan Interval;
                    /*0x20*/ object Context;
                    /*0x28*/ System.Func<System.DateTime, object, bool> OnTimer;

                    /*0x3ed764c*/ TimerData(System.TimeSpan interval, object context, System.Func<System.DateTime, object, bool> onTimer);
                    /*0x3ed75d0*/ bool IsOnTime(System.DateTime now);
                    /*0x3ed76e0*/ Best.HTTP.Shared.Extensions.TimerData CreateNew();
                    /*0x3ed76f8*/ string ToString();
                }

                class Timer
                {
                    static /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Extensions.TimerData> _timers;
                    static /*0x8*/ System.Threading.ReaderWriterLockSlim _lock;
                    static /*0x10*/ int _isSubscribed;

                    static /*0x3ed7b30*/ Timer();
                    static /*0x3ed7830*/ void Add(Best.HTTP.Shared.Extensions.TimerData timer);

                    class TimerImplementation : Best.HTTP.Shared.Extensions.IHeartbeat
                    {
                        /*0x3ed7b28*/ TimerImplementation();
                        /*0x3ed7c08*/ void OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                    }
                }
            }

            namespace Databases
            {
                class FolderAndFileOptions
                {
                    /*0x10*/ string FolderName;
                    /*0x18*/ string DatabaseFolderName;
                    /*0x20*/ string MetadataExtension;
                    /*0x28*/ string DatabaseExtension;
                    /*0x30*/ string DatabaseFreeListExtension;
                    /*0x38*/ string HashExtension;

                    /*0x3ed8260*/ FolderAndFileOptions();
                }

                class Database<ContentType, MetadataType, IndexingServiceType, MetadataServiceType> : System.IDisposable, Best.HTTP.Shared.Extensions.IHeartbeat
                {
                    static /*0x0*/ Best.HTTP.Shared.Databases.FolderAndFileOptions FolderAndFileOptions;
                    /*0x0*/ string <SaveDir>k__BackingField;
                    /*0x0*/ MetadataServiceType <MetadataService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.DatabaseOptions <Options>k__BackingField;
                    /*0x0*/ IndexingServiceType <IndexingService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.DiskManager<ContentType> <DiskManager>k__BackingField;
                    /*0x0*/ int isDirty;
                    /*0x0*/ System.Threading.ReaderWriterLockSlim rwlock;

                    static /*0x38358cc*/ Database();
                    /*0x3907c14*/ Database(string directory, Best.HTTP.Shared.Databases.DatabaseOptions options, IndexingServiceType indexingService, Best.HTTP.Shared.Databases.IDiskContentParser<ContentType> diskContentParser, MetadataServiceType metadataService);
                    /*0x380b9e8*/ string get_SaveDir();
                    /*0x380d83c*/ void set_SaveDir(string value);
                    /*0x380b9e8*/ string get_Name();
                    /*0x380b9e8*/ string get_MetadataFileName();
                    /*0x380b9e8*/ string get_DatabaseFileName();
                    /*0x380b9e8*/ string get_DatabaseFreeListFileName();
                    /*0x380b9e8*/ string get_HashFileName();
                    /*0x3907c14*/ MetadataServiceType get_MetadataService();
                    /*0x3907c14*/ void set_MetadataService(MetadataServiceType value);
                    /*0x380b9e8*/ Best.HTTP.Shared.Databases.DatabaseOptions get_Options();
                    /*0x380d83c*/ void set_Options(Best.HTTP.Shared.Databases.DatabaseOptions value);
                    /*0x3907c14*/ IndexingServiceType get_IndexingService();
                    /*0x3907c14*/ void set_IndexingService(IndexingServiceType value);
                    /*0x380b9e8*/ Best.HTTP.Shared.Databases.DiskManager<ContentType> get_DiskManager();
                    /*0x380d83c*/ void set_DiskManager(Best.HTTP.Shared.Databases.DiskManager<ContentType> value);
                    /*0x3907c14*/ bool DeleteMetadata(MetadataType metadata);
                    /*0x3907c14*/ ContentType FromMetadataIndex(int metadataIndex);
                    /*0x3907c14*/ ContentType FromMetadata(MetadataType metadata);
                    /*0x380cffc*/ void FlagDirty(int dirty);
                    /*0x380b128*/ bool Save();
                    void Best.HTTP.Shared.Extensions.IHeartbeat.OnHeartbeatUpdate(System.DateTime now, System.TimeSpan dif);
                    /*0x380cb08*/ void Dispose();
                }

                class DatabaseOptions
                {
                    /*0x10*/ string Name;
                    /*0x18*/ bool UseHashFile;
                    /*0x20*/ Best.HTTP.Shared.Databases.DiskManagerOptions DiskManager;

                    /*0x3ed8384*/ DatabaseOptions(string dbName);
                }

                class DiskManagerOptions
                {
                    /*0x10*/ int MaxCacheSizeInBytes;
                    /*0x18*/ string HashDigest;

                    /*0x3ed8408*/ DiskManagerOptions();
                }

                interface IDiskContentParser<T>
                {
                    /*0x3907c14*/ T Parse(System.IO.Stream stream, int length);
                    /*0x3907c14*/ void Encode(System.IO.Stream stream, T content);
                }

                class DiskManager<T> : System.IDisposable
                {
                    /*0x0*/ int <CacheSize>k__BackingField;
                    /*0x0*/ System.IO.Stream stream;
                    /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, T>> cache;
                    /*0x0*/ Best.HTTP.Shared.Databases.IDiskContentParser<T> diskContentParser;
                    /*0x0*/ Best.HTTP.Shared.Databases.DiskManagerOptions options;
                    /*0x0*/ Best.HTTP.Shared.Databases.FreeListManager freeListManager;
                    /*0x0*/ System.Threading.ReaderWriterLockSlim rwLock;

                    /*0x380da84*/ DiskManager(System.IO.Stream stream, System.IO.Stream freeListStream, Best.HTTP.Shared.Databases.IDiskContentParser<T> contentParser, Best.HTTP.Shared.Databases.DiskManagerOptions options);
                    /*0x380b6a0*/ int get_CacheSize();
                    /*0x380cffc*/ void set_CacheSize(int value);
                    /*0x3907c14*/ System.ValueTuple<int, int> Append(T content);
                    /*0x3907c14*/ void SaveChanged(Best.HTTP.Shared.Databases.Metadata metadata, T content);
                    /*0x380d83c*/ void Delete(Best.HTTP.Shared.Databases.Metadata metadata);
                    /*0x3907c14*/ T Load(Best.HTTP.Shared.Databases.Metadata metadata);
                    /*0x3907c14*/ Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, T> GetCached(int position);
                    /*0x3907c14*/ void AddToCache(T parsedContent, int pos, int length);
                    Best.HTTP.Shared.PlatformSupport.Memory.BufferSegment CalculateHash();
                    /*0x380cb08*/ void Save();
                    /*0x380cb08*/ void Dispose();

                    struct CachePointer`1<T, CacheType>
                    {
                        static /*0x0*/ Best.HTTP.Shared.Databases.DiskManager.CachePointer<T, CacheType> Empty;
                        /*0x0*/ int Position;
                        /*0x0*/ int Length;
                        /*0x0*/ CacheType Content;

                        static /*0x38358cc*/ CachePointer`1();
                        /*0x380b9e8*/ string ToString();
                    }
                }

                class FreeListManager : System.IDisposable
                {
                    /*0x10*/ System.IO.Stream stream;
                    /*0x18*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.FreeListManager.FreeSpot> freeList;

                    /*0x3ed8468*/ FreeListManager(System.IO.Stream stream);
                    /*0x3ed850c*/ void Load();
                    /*0x3ed8760*/ void Save();
                    /*0x3ed88c8*/ int FindFreeIndex(int length);
                    /*0x3ed8968*/ int Occupy(int idx, int length);
                    /*0x3ed8ac8*/ void Add(int pos, int length);
                    /*0x3ed8d64*/ void Dispose();

                    struct FreeSpot
                    {
                        /*0x10*/ int pos;
                        /*0x14*/ int length;
                    }
                }

                class IndexingService<ContentType, MetadataType>
                {
                    /*0x380cb08*/ IndexingService();
                    /*0x3907c14*/ void Index(MetadataType metadata);
                    /*0x3907c14*/ void Remove(MetadataType metadata);
                    /*0x380b9e8*/ System.Collections.Generic.IEnumerable<int> GetOptimizedIndexes();
                }

                class Metadata
                {
                    /*0x10*/ int Index;
                    /*0x14*/ int FilePosition;
                    /*0x18*/ int Length;

                    /*0x3ed9100*/ Metadata();
                    /*0x3ed8de8*/ bool get_IsDeleted();
                    /*0x3ed8e0c*/ void MarkForDelete();
                    /*0x3ed8e18*/ void SaveTo(System.IO.Stream stream);
                    /*0x3ed8ee0*/ void LoadFrom(System.IO.Stream stream);
                    /*0x3ed8f14*/ string ToString();
                }

                class MetadataService<MetadataType, ContentType>
                {
                    /*0x0*/ System.Collections.Generic.List<MetadataType> <Metadatas>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> <IndexingService>k__BackingField;
                    /*0x0*/ Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> <EmptyMetadataIndexFinder>k__BackingField;

                    /*0x380d93c*/ MetadataService(Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> indexingService, Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> emptyMetadataIndexFinder);
                    /*0x380b9e8*/ System.Collections.Generic.List<MetadataType> get_Metadatas();
                    /*0x380d83c*/ void set_Metadatas(System.Collections.Generic.List<MetadataType> value);
                    /*0x380b9e8*/ Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> get_IndexingService();
                    /*0x380d83c*/ void set_IndexingService(Best.HTTP.Shared.Databases.IndexingService<ContentType, MetadataType> value);
                    /*0x380b9e8*/ Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> get_EmptyMetadataIndexFinder();
                    /*0x380d83c*/ void set_EmptyMetadataIndexFinder(Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType> value);
                    /*0x3907c14*/ MetadataType CreateFrom(System.IO.Stream stream);
                    /*0x3907c14*/ MetadataType CreateDefault(ContentType content, int filePos, int length, System.Action<ContentType, MetadataType> setupCallback);
                    /*0x3907c14*/ void Remove(MetadataType metadata);
                    /*0x380d83c*/ void SaveTo(System.IO.Stream stream);
                    /*0x380d83c*/ void LoadFrom(System.IO.Stream stream);
                }

                namespace Utils
                {
                    class StreamUtil
                    {
                        static /*0x3ed9108*/ void WriteLengthPrefixedString(System.IO.Stream stream, string str);
                        static /*0x3ed92bc*/ string ReadLengthPrefixedString(System.IO.Stream stream);
                        static /*0x3ed8878*/ void EncodeUnsignedVariableByteInteger(System.IO.Stream encodeTo, ulong value);
                        static /*0x3ed8710*/ ulong DecodeUnsignedVariableByteInteger(System.IO.Stream decodeFrom);
                        static /*0x3ed93a0*/ void EncodeSignedVariableByteInteger(System.IO.Stream encodeTo, long value);
                        static /*0x3ed9414*/ long DecodeSignedVariableByteInteger(System.IO.Stream stream);
                    }
                }

                namespace MetadataIndexFinders
                {
                    class FindDeletedMetadataIndexFinder<MetadataType> : Best.HTTP.Shared.Databases.MetadataIndexFinders.IEmptyMetadataIndexFinder<MetadataType>
                    {
                        /*0x380cb08*/ FindDeletedMetadataIndexFinder();
                        /*0x380b7a8*/ int FindFreeIndex(System.Collections.Generic.List<MetadataType> metadatas);
                    }

                    interface IEmptyMetadataIndexFinder<MetadataType>
                    {
                        /*0x380b7a8*/ int FindFreeIndex(System.Collections.Generic.List<MetadataType> metadatas);
                    }
                }

                namespace Indexing
                {
                    enum Side
                    {
                        Left = 0,
                        Right = 1,
                    }

                    struct NoAllocList<T>
                    {
                        /*0x0*/ T _value;
                        /*0x0*/ bool _hasValue;
                        /*0x0*/ System.Collections.Generic.List<T> _values;

                        /*0x3907c14*/ NoAllocList(T value);
                        /*0x3907c14*/ T get_Item(int index);
                        /*0x380b6a0*/ int get_Count();
                        /*0x3907c14*/ void Add(T item);
                    }

                    class Node<KeyT, ValueT>
                    {
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Parent;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Left;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> Right;
                        /*0x0*/ KeyT <Key>k__BackingField;
                        /*0x0*/ int Depth;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.NoAllocList<ValueT> _item;

                        /*0x3907c14*/ Node(Best.HTTP.Shared.Databases.Indexing.Node<KeyT, ValueT> parent, KeyT key, ValueT value);
                        /*0x3907c14*/ KeyT get_Key();
                        /*0x3907c14*/ void set_Key(KeyT value);
                        /*0x380b6a0*/ int get_BalanceFactor();
                        /*0x380b6a0*/ int get_LeftDepth();
                        /*0x380b6a0*/ int get_RightDepth();
                        /*0x380b128*/ bool get_IsRoot();
                        /*0x380b6a0*/ int get_ChildCount();
                        /*0x380cb08*/ void BubbleUpDepthChange();
                        /*0x3907c14*/ ValueT get_Item(int index);
                        /*0x380b6a0*/ int get_Count();
                        /*0x380cb08*/ void Clear();
                        /*0x3907c14*/ void Add(ValueT value);
                        /*0x380b9e8*/ System.Collections.Generic.List<ValueT> ToList();
                        /*0x380b9e8*/ string ToString();
                    }

                    class AVLTree<Key, Value>
                    {
                        /*0x0*/ int <ElemCount>k__BackingField;
                        /*0x0*/ int <NodeCount>k__BackingField;
                        /*0x0*/ System.Collections.Generic.IComparer<Key> Comparer;
                        /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> <RootNode>k__BackingField;
                        /*0x0*/ System.Collections.Generic.List<Best.HTTP.Shared.Databases.Indexing.Side> path;

                        /*0x380d83c*/ AVLTree(System.Collections.Generic.IComparer<Key> comparer);
                        /*0x380b6a0*/ int get_ElemCount();
                        /*0x380cffc*/ void set_ElemCount(int value);
                        /*0x380b6a0*/ int get_NodeCount();
                        /*0x380cffc*/ void set_NodeCount(int value);
                        /*0x380b9e8*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> get_RootNode();
                        /*0x380d83c*/ void set_RootNode(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> value);
                        /*0x3907c14*/ void Add(Key key, Value item, bool clearValues);
                        /*0x380bb68*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RebalanceFrom(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> newNode);
                        /*0x3907c14*/ System.Collections.Generic.List<Value> Remove(Key key);
                        /*0x380d83c*/ void RemoveNode(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> node);
                        /*0x380bc74*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RebalanceForRemoval(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> removedParentNode, Best.HTTP.Shared.Databases.Indexing.Side side);
                        /*0x380bb68*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> FindMin(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> node);
                        /*0x3907c14*/ System.Collections.Generic.List<Value> Find(Key key);
                        /*0x380b9e8*/ System.Collections.Generic.IEnumerable<Value> WalkHorizontal();
                        /*0x380bb68*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RotateRight(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> current);
                        /*0x380bb68*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> RotateLeft(Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> current);

                        class <WalkHorizontal>d__27<Key, Value> : System.Collections.Generic.IEnumerable<Value>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<Value>, System.Collections.IEnumerator, System.IDisposable
                        {
                            /*0x0*/ int <>1__state;
                            /*0x0*/ Value <>2__current;
                            /*0x0*/ int <>l__initialThreadId;
                            /*0x0*/ Best.HTTP.Shared.Databases.Indexing.AVLTree<Key, Value> <>4__this;
                            /*0x0*/ System.Collections.Generic.Queue<Best.HTTP.Shared.Databases.Indexing.Node<Key, Value>> <toWalk>5__2;
                            /*0x0*/ Best.HTTP.Shared.Databases.Indexing.Node<Key, Value> <current>5__3;
                            /*0x0*/ int <i>5__4;

                            /*0x380cffc*/ <WalkHorizontal>d__27(int <>1__state);
                            /*0x380cb08*/ void System.IDisposable.Dispose();
                            /*0x380b128*/ bool MoveNext();
                            /*0x3907c14*/ Value System.Collections.Generic.IEnumerator<Value>.get_Current();
                            /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                            /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                            /*0x380b9e8*/ System.Collections.Generic.IEnumerator<Value> System.Collections.Generic.IEnumerable<Value>.GetEnumerator();
                            /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                        }
                    }

                    namespace Comparers
                    {
                        class Hash128Comparer : System.Collections.Generic.IComparer<UnityEngine.Hash128>
                        {
                            /*0x3ed9510*/ Hash128Comparer();
                            /*0x3ed94e4*/ int Compare(UnityEngine.Hash128 x, UnityEngine.Hash128 y);
                        }
                    }
                }
            }

            namespace Compression
            {
                namespace Zlib
                {
                    enum BlockState
                    {
                        NeedMore = 0,
                        BlockDone = 1,
                        FinishStarted = 2,
                        FinishDone = 3,
                    }

                    enum DeflateFlavor
                    {
                        Store = 0,
                        Fast = 1,
                        Slow = 2,
                    }

                    class DeflateManager
                    {
                        static /*0x0*/ int MEM_LEVEL_MAX;
                        static /*0x4*/ int MEM_LEVEL_DEFAULT;
                        static /*0x8*/ string[] _ErrorMessage;
                        static /*0x10*/ int PRESET_DICT;
                        static /*0x14*/ int INIT_STATE;
                        static /*0x18*/ int BUSY_STATE;
                        static /*0x1c*/ int FINISH_STATE;
                        static /*0x20*/ int Z_DEFLATED;
                        static /*0x24*/ int STORED_BLOCK;
                        static /*0x28*/ int STATIC_TREES;
                        static /*0x2c*/ int DYN_TREES;
                        static /*0x30*/ int Z_BINARY;
                        static /*0x34*/ int Z_ASCII;
                        static /*0x38*/ int Z_UNKNOWN;
                        static /*0x3c*/ int Buf_size;
                        static /*0x40*/ int MIN_MATCH;
                        static /*0x44*/ int MAX_MATCH;
                        static /*0x48*/ int MIN_LOOKAHEAD;
                        static /*0x4c*/ int HEAP_SIZE;
                        static /*0x50*/ int END_BLOCK;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.CompressFunc DeflateFunction;
                        /*0x18*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x20*/ int status;
                        /*0x28*/ byte[] pending;
                        /*0x30*/ int nextPending;
                        /*0x34*/ int pendingCount;
                        /*0x38*/ sbyte data_type;
                        /*0x3c*/ int last_flush;
                        /*0x40*/ int w_size;
                        /*0x44*/ int w_bits;
                        /*0x48*/ int w_mask;
                        /*0x50*/ byte[] window;
                        /*0x58*/ int window_size;
                        /*0x60*/ short[] prev;
                        /*0x68*/ short[] head;
                        /*0x70*/ int ins_h;
                        /*0x74*/ int hash_size;
                        /*0x78*/ int hash_bits;
                        /*0x7c*/ int hash_mask;
                        /*0x80*/ int hash_shift;
                        /*0x84*/ int block_start;
                        /*0x88*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config config;
                        /*0x90*/ int match_length;
                        /*0x94*/ int prev_match;
                        /*0x98*/ int match_available;
                        /*0x9c*/ int strstart;
                        /*0xa0*/ int match_start;
                        /*0xa4*/ int lookahead;
                        /*0xa8*/ int prev_length;
                        /*0xac*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel compressionLevel;
                        /*0xb0*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy compressionStrategy;
                        /*0xb8*/ short[] dyn_ltree;
                        /*0xc0*/ short[] dyn_dtree;
                        /*0xc8*/ short[] bl_tree;
                        /*0xd0*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeLiterals;
                        /*0xd8*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeDistances;
                        /*0xe0*/ Best.HTTP.Shared.Compression.Zlib.ZTree treeBitLengths;
                        /*0xe8*/ short[] bl_count;
                        /*0xf0*/ int[] heap;
                        /*0xf8*/ int heap_len;
                        /*0xfc*/ int heap_max;
                        /*0x100*/ sbyte[] depth;
                        /*0x108*/ int _lengthOffset;
                        /*0x10c*/ int lit_bufsize;
                        /*0x110*/ int last_lit;
                        /*0x114*/ int _distanceOffset;
                        /*0x118*/ int opt_len;
                        /*0x11c*/ int static_len;
                        /*0x120*/ int matches;
                        /*0x124*/ int last_eob_len;
                        /*0x128*/ short bi_buf;
                        /*0x12c*/ int bi_valid;
                        /*0x130*/ bool Rfc1950BytesEmitted;
                        /*0x131*/ bool _WantRfc1950HeaderBytes;

                        static /*0x3edd54c*/ DeflateManager();
                        static /*0x3ed9e2c*/ bool _IsSmaller(short[] tree, int n, int m, sbyte[] depth);
                        /*0x3ed9518*/ DeflateManager();
                        /*0x3ed9774*/ void _InitializeLazyMatch();
                        /*0x3ed99ac*/ void _InitializeTreeData();
                        /*0x3ed9aa8*/ void _InitializeBlocks();
                        /*0x3ed9c78*/ void pqdownheap(short[] tree, int k);
                        /*0x3ed9eb8*/ void scan_tree(short[] tree, int max_code);
                        /*0x3eda0f8*/ int build_bl_tree();
                        /*0x3eda254*/ void send_all_trees(int lcodes, int dcodes, int blcodes);
                        /*0x3eda4b8*/ void send_tree(short[] tree, int max_code);
                        /*0x3eda6f8*/ void put_bytes(byte[] p, int start, int len);
                        /*0x3eda6b4*/ void send_code(int c, short[] tree);
                        /*0x3eda384*/ void send_bits(int value, int length);
                        /*0x3eda740*/ void _tr_align();
                        /*0x3eda960*/ bool _tr_tally(int dist, int lc);
                        /*0x3edac74*/ void send_compressed_block(short[] ltree, short[] dtree);
                        /*0x3edaf70*/ void set_data_type();
                        /*0x3eda88c*/ void bi_flush();
                        /*0x3edb0dc*/ void bi_windup();
                        /*0x3edb18c*/ void copy_block(int buf, int len, bool header);
                        /*0x3edb2a4*/ void flush_block_only(bool eof);
                        /*0x3edb500*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateNone(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3edb8c4*/ void _tr_stored_block(int buf, int stored_len, bool eof);
                        /*0x3edb2ec*/ void _tr_flush_block(int buf, int stored_len, bool eof);
                        /*0x3edb67c*/ void _fillWindow();
                        /*0x3edb968*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateFast(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3edc294*/ Best.HTTP.Shared.Compression.Zlib.BlockState DeflateSlow(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3edbdd8*/ int longest_match(int cur_match);
                        /*0x3edc818*/ bool get_WantRfc1950HeaderBytes();
                        /*0x3edc820*/ void set_WantRfc1950HeaderBytes(bool value);
                        /*0x3edc82c*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int bits, Best.HTTP.Shared.Compression.Zlib.CompressionStrategy compressionStrategy);
                        /*0x3edc8c4*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int windowBits, int memLevel, Best.HTTP.Shared.Compression.Zlib.CompressionStrategy strategy);
                        /*0x3edcc04*/ void Reset();
                        /*0x3ed98d4*/ void SetDeflater();
                        /*0x3edcda0*/ int Deflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);

                        class CompressFunc : System.MulticastDelegate
                        {
                            /*0x3edcd00*/ CompressFunc(object object, nint method);
                            /*0x3edd858*/ Best.HTTP.Shared.Compression.Zlib.BlockState Invoke(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        }

                        class Config
                        {
                            static /*0x0*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config[] Table;
                            /*0x10*/ int GoodLength;
                            /*0x14*/ int MaxLazy;
                            /*0x18*/ int NiceLength;
                            /*0x1c*/ int MaxChainLength;
                            /*0x20*/ Best.HTTP.Shared.Compression.Zlib.DeflateFlavor Flavor;

                            static /*0x3edd8bc*/ Config();
                            static /*0x3ed9858*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager.Config Lookup(Best.HTTP.Shared.Compression.Zlib.CompressionLevel level);
                            /*0x3edd86c*/ Config(int goodLength, int maxLazy, int niceLength, int maxChainLength, Best.HTTP.Shared.Compression.Zlib.DeflateFlavor flavor);
                        }
                    }

                    class DeflateStream : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream _baseStream;
                        /*0x30*/ System.IO.Stream _innerStream;
                        /*0x38*/ bool _disposed;

                        /*0x3eddcb0*/ DeflateStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen);
                        /*0x3eddd84*/ DeflateStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen, int windowBits);
                        /*0x3edde68*/ void set_FlushMode(Best.HTTP.Shared.Compression.Zlib.FlushType value);
                        /*0x3edded4*/ void Dispose(bool disposing);
                        /*0x3eddfa0*/ bool get_CanRead();
                        /*0x3ede018*/ bool get_CanSeek();
                        /*0x3ede020*/ bool get_CanWrite();
                        /*0x3ede098*/ void Flush();
                        /*0x3ede10c*/ long get_Length();
                        /*0x3ede144*/ long get_Position();
                        /*0x3ede194*/ void set_Position(long value);
                        /*0x3ede1cc*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3ede240*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3ede278*/ void SetLength(long value);
                        /*0x3ede29c*/ void Write(byte[] buffer, int offset, int count);
                    }

                    class GZipStream : System.IO.Stream
                    {
                        static /*0x0*/ System.DateTime _unixEpoch;
                        static /*0x8*/ System.Text.Encoding iso8859dash1;
                        /*0x28*/ System.Nullable<System.DateTime> LastModified;
                        /*0x38*/ int _headerByteCount;
                        /*0x40*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream _baseStream;
                        /*0x48*/ bool _disposed;
                        /*0x49*/ bool _firstReadDone;
                        /*0x50*/ string _FileName;
                        /*0x58*/ string _Comment;
                        /*0x60*/ int _Crc32;

                        static /*0x3edefb4*/ GZipStream();
                        /*0x3ede534*/ GZipStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode mode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, bool leaveOpen);
                        /*0x3ede310*/ string get_Comment();
                        /*0x3ede318*/ void set_Comment(string value);
                        /*0x3ede378*/ string get_FileName();
                        /*0x3ede380*/ void set_FileName(string value);
                        /*0x3ede5f8*/ void set_FlushMode(Best.HTTP.Shared.Compression.Zlib.FlushType value);
                        /*0x3ede664*/ void Dispose(bool disposing);
                        /*0x3ede750*/ bool get_CanRead();
                        /*0x3ede7c8*/ bool get_CanSeek();
                        /*0x3ede7d0*/ bool get_CanWrite();
                        /*0x3ede848*/ void Flush();
                        /*0x3ede8bc*/ long get_Length();
                        /*0x3ede8f4*/ long get_Position();
                        /*0x3ede954*/ void set_Position(long value);
                        /*0x3ede98c*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3edea50*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3edea88*/ void SetLength(long value);
                        /*0x3edeaac*/ void Write(byte[] buffer, int offset, int count);
                        /*0x3edeba0*/ int EmitHeader();
                    }

                    class InflateBlocks
                    {
                        static /*0x0*/ int[] border;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.InflateBlocks.InflateBlockMode mode;
                        /*0x14*/ int left;
                        /*0x18*/ int table;
                        /*0x1c*/ int index;
                        /*0x20*/ int[] blens;
                        /*0x28*/ int[] bb;
                        /*0x30*/ int[] tb;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.InflateCodes codes;
                        /*0x40*/ int last;
                        /*0x48*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x50*/ int bitk;
                        /*0x54*/ int bitb;
                        /*0x58*/ int[] hufts;
                        /*0x60*/ byte[] window;
                        /*0x68*/ int end;
                        /*0x6c*/ int readAt;
                        /*0x70*/ int writeAt;
                        /*0x78*/ object checkfn;
                        /*0x80*/ uint check;
                        /*0x88*/ Best.HTTP.Shared.Compression.Zlib.InfTree inftree;

                        static /*0x3ee14ec*/ InflateBlocks();
                        /*0x3edf068*/ InflateBlocks(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, object checkfn, int w);
                        /*0x3edf220*/ uint Reset();
                        /*0x3edf2bc*/ int Process(int r);
                        /*0x3ee145c*/ void Free();
                        /*0x3ee03a0*/ int Flush(int r);

                        enum InflateBlockMode
                        {
                            TYPE = 0,
                            LENS = 1,
                            STORED = 2,
                            TABLE = 3,
                            BTREE = 4,
                            DTREE = 5,
                            CODES = 6,
                            DRY = 7,
                            DONE = 8,
                            BAD = 9,
                        }
                    }

                    class InternalInflateConstants
                    {
                        static /*0x0*/ int[] InflateMask;

                        static /*0x3ee158c*/ InternalInflateConstants();
                    }

                    class InflateCodes
                    {
                        /*0x10*/ int mode;
                        /*0x14*/ int len;
                        /*0x18*/ int[] tree;
                        /*0x20*/ int tree_index;
                        /*0x24*/ int need;
                        /*0x28*/ int lit;
                        /*0x2c*/ int bitsToGet;
                        /*0x30*/ int dist;
                        /*0x34*/ byte lbits;
                        /*0x35*/ byte dbits;
                        /*0x38*/ int[] ltree;
                        /*0x40*/ int ltree_index;
                        /*0x48*/ int[] dtree;
                        /*0x50*/ int dtree_index;

                        /*0x3edf210*/ InflateCodes();
                        /*0x3ee0618*/ void Init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index);
                        /*0x3ee09f0*/ int Process(Best.HTTP.Shared.Compression.Zlib.InflateBlocks blocks, int r);
                        /*0x3ee162c*/ int InflateFast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, Best.HTTP.Shared.Compression.Zlib.InflateBlocks s, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                    }

                    class InflateManager
                    {
                        static /*0x0*/ byte[] mark;
                        /*0x10*/ Best.HTTP.Shared.Compression.Zlib.InflateManager.InflateManagerMode mode;
                        /*0x18*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _codec;
                        /*0x20*/ int method;
                        /*0x24*/ uint computedCheck;
                        /*0x28*/ uint expectedCheck;
                        /*0x2c*/ int marker;
                        /*0x30*/ bool _handleRfc1950HeaderBytes;
                        /*0x34*/ int wbits;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.InflateBlocks blocks;

                        static /*0x3ee27bc*/ InflateManager();
                        /*0x3ee1ea8*/ InflateManager(bool expectRfc1950HeaderBytes);
                        /*0x3ee1ea0*/ bool get_HandleRfc1950HeaderBytes();
                        /*0x3ee1ed8*/ int Reset();
                        /*0x3ee1f2c*/ int End();
                        /*0x3ee1f5c*/ int Initialize(Best.HTTP.Shared.Compression.Zlib.ZlibCodec codec, int w);
                        /*0x3ee2098*/ int Inflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);

                        enum InflateManagerMode
                        {
                            METHOD = 0,
                            FLAG = 1,
                            DICT4 = 2,
                            DICT3 = 3,
                            DICT2 = 4,
                            DICT1 = 5,
                            DICT0 = 6,
                            BLOCKS = 7,
                            CHECK4 = 8,
                            CHECK3 = 9,
                            CHECK2 = 10,
                            CHECK1 = 11,
                            DONE = 12,
                            BAD = 13,
                        }
                    }

                    class InfTree
                    {
                        static /*0x0*/ int[] fixed_tl;
                        static /*0x8*/ int[] fixed_td;
                        static /*0x10*/ int[] cplens;
                        static /*0x18*/ int[] cplext;
                        static /*0x20*/ int[] cpdist;
                        static /*0x28*/ int[] cpdext;
                        /*0x10*/ int[] hn;
                        /*0x18*/ int[] v;
                        /*0x20*/ int[] c;
                        /*0x28*/ int[] r;
                        /*0x30*/ int[] u;
                        /*0x38*/ int[] x;

                        static /*0x3ee31a4*/ InfTree();
                        static /*0x3ee0538*/ int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x3edf218*/ InfTree();
                        /*0x3ee285c*/ int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v);
                        /*0x3ee0680*/ int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x3ee079c*/ int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, Best.HTTP.Shared.Compression.Zlib.ZlibCodec z);
                        /*0x3ee2fdc*/ void initWorkArea(int vsize);
                    }

                    enum FlushType
                    {
                        None = 0,
                        Partial = 1,
                        Sync = 2,
                        Full = 3,
                        Finish = 4,
                    }

                    enum CompressionLevel
                    {
                        None = 0,
                        Level0 = 0,
                        BestSpeed = 1,
                        Level1 = 1,
                        Level2 = 2,
                        Level3 = 3,
                        Level4 = 4,
                        Level5 = 5,
                        Default = 6,
                        Level6 = 6,
                        Level7 = 7,
                        Level8 = 8,
                        BestCompression = 9,
                        Level9 = 9,
                    }

                    enum CompressionStrategy
                    {
                        Default = 0,
                        Filtered = 1,
                        HuffmanOnly = 2,
                    }

                    enum CompressionMode
                    {
                        Compress = 0,
                        Decompress = 1,
                    }

                    class ZlibException : System.Exception
                    {
                        /*0x3edcb9c*/ ZlibException(string s);
                    }

                    class SharedUtils
                    {
                        static /*0x3ee2fd4*/ int URShift(int number, int bits);
                    }

                    class InternalConstants
                    {
                        static /*0x0*/ int MAX_BITS;
                        static /*0x4*/ int BL_CODES;
                        static /*0x8*/ int D_CODES;
                        static /*0xc*/ int LITERALS;
                        static /*0x10*/ int LENGTH_CODES;
                        static /*0x14*/ int L_CODES;
                        static /*0x18*/ int MAX_BL_BITS;
                        static /*0x1c*/ int REP_3_6;
                        static /*0x20*/ int REPZ_3_10;
                        static /*0x24*/ int REPZ_11_138;

                        static /*0x3ee33a8*/ InternalConstants();
                    }

                    class StaticTree
                    {
                        static /*0x0*/ short[] lengthAndLiteralsTreeCodes;
                        static /*0x8*/ short[] distTreeCodes;
                        static /*0x10*/ Best.HTTP.Shared.Compression.Zlib.StaticTree Literals;
                        static /*0x18*/ Best.HTTP.Shared.Compression.Zlib.StaticTree Distances;
                        static /*0x20*/ Best.HTTP.Shared.Compression.Zlib.StaticTree BitLengths;
                        /*0x10*/ short[] treeCodes;
                        /*0x18*/ int[] extraBits;
                        /*0x20*/ int extraBase;
                        /*0x24*/ int elems;
                        /*0x28*/ int maxLength;

                        static /*0x3ee3478*/ StaticTree();
                        /*0x3ee340c*/ StaticTree(short[] treeCodes, int[] extraBits, int extraBase, int elems, int maxLength);
                    }

                    class Adler
                    {
                        static /*0x0*/ uint BASE;
                        static /*0x4*/ int NMAX;

                        static /*0x3ee3a4c*/ Adler();
                        static /*0x3ee36cc*/ uint Adler32(uint adler, byte[] buf, int index, int len);
                    }

                    enum ZlibStreamFlavor
                    {
                        ZLIB = 1950,
                        DEFLATE = 1951,
                        GZIP = 1952,
                    }

                    class ZlibBaseStream : System.IO.Stream
                    {
                        /*0x28*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec _z;
                        /*0x30*/ Best.HTTP.Shared.Compression.Zlib.ZlibBaseStream.StreamMode _streamMode;
                        /*0x34*/ Best.HTTP.Shared.Compression.Zlib.FlushType _flushMode;
                        /*0x38*/ Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor _flavor;
                        /*0x3c*/ Best.HTTP.Shared.Compression.Zlib.CompressionMode _compressionMode;
                        /*0x40*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel _level;
                        /*0x44*/ bool _leaveOpen;
                        /*0x48*/ byte[] _workingBuffer;
                        /*0x50*/ int _bufferSize;
                        /*0x54*/ int windowBitsMax;
                        /*0x58*/ byte[] _buf1;
                        /*0x60*/ System.IO.Stream _stream;
                        /*0x68*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy Strategy;
                        /*0x70*/ Best.HTTP.Shared.Compression.Crc.CRC32 crc;
                        /*0x78*/ string _GzipFileName;
                        /*0x80*/ string _GzipComment;
                        /*0x88*/ System.DateTime _GzipMtime;
                        /*0x90*/ int _gzipHeaderByteCount;
                        /*0x94*/ bool nomoreinput;

                        /*0x3ee3ac4*/ ZlibBaseStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode compressionMode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor flavor, bool leaveOpen);
                        /*0x3ee3ad0*/ ZlibBaseStream(System.IO.Stream stream, Best.HTTP.Shared.Compression.Zlib.CompressionMode compressionMode, Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, Best.HTTP.Shared.Compression.Zlib.ZlibStreamFlavor flavor, bool leaveOpen, int windowBits);
                        /*0x3ee3a9c*/ int get_Crc32();
                        /*0x3ee3c78*/ bool get__wantCompress();
                        /*0x3ee3c88*/ Best.HTTP.Shared.Compression.Zlib.ZlibCodec get_z();
                        /*0x3ee3e70*/ byte[] get_workingBuffer();
                        /*0x3ee3ef8*/ void Write(byte[] buffer, int offset, int count);
                        /*0x3ee4308*/ void finish();
                        /*0x3ee4a6c*/ void end();
                        /*0x3ee4c18*/ void Close();
                        /*0x3ee4d04*/ void Flush();
                        /*0x3ee4d28*/ long Seek(long offset, System.IO.SeekOrigin origin);
                        /*0x3ee4d60*/ void SetLength(long value);
                        /*0x3ee4d90*/ string ReadZeroTerminatedString();
                        /*0x3ee4f80*/ int _ReadAndValidateGzipHeader();
                        /*0x3ee5360*/ int Read(byte[] buffer, int offset, int count);
                        /*0x3ee57b8*/ bool get_CanRead();
                        /*0x3ee57d8*/ bool get_CanSeek();
                        /*0x3ee57f8*/ bool get_CanWrite();
                        /*0x3ee5818*/ long get_Length();
                        /*0x3ee5838*/ long get_Position();
                        /*0x3ee5870*/ void set_Position(long value);

                        enum StreamMode
                        {
                            Writer = 0,
                            Reader = 1,
                            Undefined = 2,
                        }
                    }

                    class ZlibCodec
                    {
                        /*0x10*/ byte[] InputBuffer;
                        /*0x18*/ int NextIn;
                        /*0x1c*/ int AvailableBytesIn;
                        /*0x20*/ long TotalBytesIn;
                        /*0x28*/ byte[] OutputBuffer;
                        /*0x30*/ int NextOut;
                        /*0x34*/ int AvailableBytesOut;
                        /*0x38*/ long TotalBytesOut;
                        /*0x40*/ string Message;
                        /*0x48*/ Best.HTTP.Shared.Compression.Zlib.DeflateManager dstate;
                        /*0x50*/ Best.HTTP.Shared.Compression.Zlib.InflateManager istate;
                        /*0x58*/ uint _Adler32;
                        /*0x5c*/ Best.HTTP.Shared.Compression.Zlib.CompressionLevel CompressLevel;
                        /*0x60*/ int WindowBits;
                        /*0x64*/ Best.HTTP.Shared.Compression.Zlib.CompressionStrategy Strategy;

                        /*0x3ee3d64*/ ZlibCodec();
                        /*0x3ee3d78*/ int InitializeInflate(int windowBits, bool expectRfc1950Header);
                        /*0x3ee4248*/ int Inflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ee4b90*/ int EndInflate();
                        /*0x3ee3e60*/ int InitializeDeflate(Best.HTTP.Shared.Compression.Zlib.CompressionLevel level, int bits, bool wantRfc1950Header);
                        /*0x3ee58a8*/ int _InternalInitializeDeflate(bool wantRfc1950Header);
                        /*0x3ee42a8*/ int Deflate(Best.HTTP.Shared.Compression.Zlib.FlushType flush);
                        /*0x3ee4b24*/ int EndDeflate();
                        /*0x3ee5990*/ void flush_pending();
                        /*0x3ee5b24*/ int read_buf(byte[] buf, int start, int size);
                    }

                    class ZTree
                    {
                        static /*0x0*/ int HEAP_SIZE;
                        static /*0x8*/ int[] ExtraLengthBits;
                        static /*0x10*/ int[] ExtraDistanceBits;
                        static /*0x18*/ int[] extra_blbits;
                        static /*0x20*/ sbyte[] bl_order;
                        static /*0x28*/ sbyte[] _dist_code;
                        static /*0x30*/ sbyte[] LengthCode;
                        static /*0x38*/ int[] LengthBase;
                        static /*0x40*/ int[] DistanceBase;
                        /*0x10*/ short[] dyn_tree;
                        /*0x18*/ int max_code;
                        /*0x20*/ Best.HTTP.Shared.Compression.Zlib.StaticTree staticTree;

                        static /*0x3ee66e0*/ ZTree();
                        static /*0x3ee5c18*/ int DistanceCode(int dist);
                        static /*0x3ee64d8*/ void gen_codes(short[] tree, int max_code, short[] bl_count);
                        static /*0x3ee66b0*/ int bi_reverse(int code, int len);
                        /*0x3ee66d8*/ ZTree();
                        /*0x3ee5cc0*/ void gen_bitlen(Best.HTTP.Shared.Compression.Zlib.DeflateManager s);
                        /*0x3ee6048*/ void build_tree(Best.HTTP.Shared.Compression.Zlib.DeflateManager s);
                    }
                }

                namespace Crc
                {
                    class CRC32
                    {
                        /*0x10*/ uint dwPolynomial;
                        /*0x18*/ long _TotalBytesRead;
                        /*0x20*/ bool reverseBits;
                        /*0x28*/ uint[] crc32Table;
                        /*0x30*/ uint _register;

                        static /*0x3ee69cc*/ uint ReverseBits(uint data);
                        static /*0x3ee69d4*/ byte ReverseBits(byte data);
                        /*0x3ee3c44*/ CRC32();
                        /*0x3ee6b60*/ CRC32(bool reverseBits);
                        /*0x3ee6ba0*/ CRC32(int polynomial, bool reverseBits);
                        /*0x3ee69c4*/ long get_TotalBytesRead();
                        /*0x3ee3ab8*/ int get_Crc32Result();
                        /*0x3ee4148*/ void SlurpBlock(byte[] block, int offset, int count);
                        /*0x3ee6a20*/ void GenerateLookupTable();
                    }
                }
            }
        }

        namespace SecureProtocol
        {
            namespace Org
            {
                namespace BouncyCastle
                {
                    namespace Utilities
                    {
                        class Arrays
                        {
                            static /*0x0*/ byte[] EmptyBytes;
                            static /*0x8*/ int[] EmptyInts;

                            static /*0x3ee7d74*/ Arrays();
                            static /*0x3ee6bdc*/ bool AreAllZeroes(byte[] buf, int off, int len);
                            static /*0x3ee6c48*/ bool AreEqual(byte[] a, byte[] b);
                            static /*0x3ee6d34*/ bool ConstantTimeAreEqual(byte[] a, byte[] b);
                            static /*0x3ee6e40*/ bool ConstantTimeAreEqual(System.Span<byte> a, System.Span<byte> b);
                            static /*0x3ee6f1c*/ bool AreEqual(int[] a, int[] b);
                            static /*0x3ee6cc8*/ bool HaveSameContents(byte[] a, byte[] b);
                            static /*0x3ee6f9c*/ bool HaveSameContents(int[] a, int[] b);
                            static /*0x3ee7008*/ int GetHashCode(byte[] data);
                            static /*0x3ee7044*/ int GetHashCode(byte[] data, int off, int len);
                            static /*0x3ee7098*/ int GetHashCode(int[] data);
                            static /*0x3ee70d4*/ int GetHashCode(uint[] data, int off, int len);
                            static /*0x3ee7128*/ int GetHashCode(ulong[] data, int off, int len);
                            static /*0x3ee7184*/ byte[] Clone(byte[] data);
                            static /*0x3ee71fc*/ int[] Clone(int[] data);
                            static /*0x3ee7274*/ uint[] Clone(uint[] data);
                            static /*0x3ee72ec*/ ulong[] Clone(ulong[] data);
                            static /*0x3ee7364*/ bool Contains(short[] a, short n);
                            static /*0x3ee73c0*/ bool Contains(int[] a, int n);
                            static /*0x3ee741c*/ void Fill(byte[] buf, byte b);
                            static /*0x3ee7478*/ void Fill(byte[] buf, int from, int to, byte b);
                            static /*0x3ee74c4*/ byte[] CopyOf(byte[] data, int newLength);
                            static /*0x3ee757c*/ int[] CopyOf(int[] data, int newLength);
                            static /*0x3ee7634*/ uint[] CopyOf(uint[] data, int newLength);
                            static /*0x3ee76ec*/ byte[] CopyOfRange(byte[] data, int from, int to);
                            static /*0x3ee77e4*/ int GetLength(int from, int to);
                            static /*0x3ee7880*/ short[] Append(short[] a, short b);
                            static /*0x3ee7950*/ int[] Append(int[] a, int b);
                            static /*0x3ee7a20*/ byte[] Concatenate(byte[] a, byte[] b);
                            static /*0x3ee7b14*/ byte[] Prepend(byte[] a, byte b);
                            static /*0x3ee7bc8*/ short[] Prepend(short[] a, short b);
                            static /*0x3ee7c7c*/ byte[] Reverse(byte[] a);
                            static /*0x3ee7d28*/ bool IsNullOrContainsNull(object[] array);
                        }

                        class BigIntegers
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Zero;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;

                            static /*0x3ee8c68*/ BigIntegers();
                            static /*0x3ee7e28*/ byte[] AsUnsignedByteArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            static /*0x3ee7e3c*/ byte[] AsUnsignedByteArray(int length, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            static /*0x3ee7f90*/ void AsUnsignedByteArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, System.Span<byte> buf);
                            static /*0x3ee8104*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateRandomBigInteger(int bitLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom secureRandom);
                            static /*0x3ee8170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateRandomInRange(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger min, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger max, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                            static /*0x3ee83b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModOddInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger M, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X);
                            static /*0x3ee87ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModOddInverseVar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger M, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X);
                            static /*0x3ee8c54*/ int GetUnsignedByteLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                        }

                        class Enums
                        {
                            static /*0x3907c14*/ TEnum GetEnumValue<TEnum>(string s);
                            static /*0x382dee4*/ TEnum[] GetEnumValues<TEnum>();
                            static /*0x3907c14*/ TEnum GetArbitraryValue<TEnum>();
                        }

                        interface IMemoable
                        {
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            /*0x380d83c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                        }

                        class Integers
                        {
                            static /*0x0*/ byte[] DeBruijnTZ;

                            static /*0x3ee8ec4*/ Integers();
                            static /*0x3ee8d04*/ int HighestOneBit(int i);
                            static /*0x3ee8d6c*/ uint HighestOneBit(uint i);
                            static /*0x3ee8d88*/ int NumberOfLeadingZeros(int i);
                            static /*0x3ee8e00*/ int NumberOfTrailingZeros(int i);
                            static /*0x3ee8ea4*/ int RotateLeft(int i, int distance);
                            static /*0x3ee8eb0*/ uint RotateLeft(uint i, int distance);
                            static /*0x3ee8ebc*/ uint RotateRight(uint i, int distance);
                        }

                        class Longs
                        {
                            static /*0x0*/ byte[] DeBruijnTZ;

                            static /*0x3ee9070*/ Longs();
                            static /*0x3ee8f64*/ int NumberOfLeadingZeros(long i);
                            static /*0x3ee8fcc*/ ulong Reverse(ulong i);
                            static /*0x3ee905c*/ ulong ReverseBytes(ulong i);
                            static /*0x3ee9064*/ ulong RotateLeft(ulong i, int distance);
                        }

                        class MemoableResetException : System.InvalidCastException
                        {
                            /*0x3ee9110*/ MemoableResetException();
                            /*0x3ee9118*/ MemoableResetException(string message);
                            /*0x3ee9120*/ MemoableResetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Objects
                        {
                            static /*0x3ee9128*/ int GetHashCode(object obj);
                        }

                        class Platform
                        {
                            static /*0x0*/ System.Globalization.CompareInfo InvariantCompareInfo;

                            static /*0x3ee930c*/ Platform();
                            static /*0x3ee913c*/ bool EqualsIgnoreCase(string a, string b);
                            static /*0x3ee9148*/ string GetEnvironmentVariable(string variable);
                            static /*0x3ee91d0*/ int IndexOf(string source, char value, int startIndex);
                            static /*0x3ee925c*/ bool EndsWith(string source, string suffix);
                            static /*0x3ee92e0*/ string GetTypeName(object obj);
                        }

                        class Spans
                        {
                            static /*0x3907c14*/ void CopyFrom<T>(System.Span<T> output, System.ReadOnlySpan<T> input);
                            static /*0x3907c14*/ System.Span<T> FromNullable<T>(T[] array, int start);
                        }

                        class Strings
                        {
                            static /*0x3ee93a0*/ string FromByteArray(byte[] bs);
                            static /*0x3ee9490*/ byte[] ToByteArray(string s);
                            static /*0x3ee957c*/ string FromAsciiByteArray(byte[] bytes);
                            static /*0x3ee95ac*/ byte[] ToAsciiByteArray(string s);
                            static /*0x3ee95dc*/ string FromUtf8ByteArray(byte[] bytes);
                            static /*0x3ee960c*/ byte[] ToUtf8ByteArray(string s);
                        }

                        namespace IO
                        {
                            class BaseInputStream : System.IO.Stream
                            {
                                /*0x3ee99ec*/ BaseInputStream();
                                /*0x3ee963c*/ bool get_CanRead();
                                /*0x3ee9644*/ bool get_CanSeek();
                                /*0x3ee964c*/ bool get_CanWrite();
                                /*0x3ee9654*/ void Flush();
                                /*0x3ee9658*/ long get_Length();
                                /*0x3ee9690*/ long get_Position();
                                /*0x3ee96c8*/ void set_Position(long value);
                                /*0x3ee9700*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ee990c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ee9944*/ void SetLength(long value);
                                /*0x3ee997c*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ee99b4*/ void Write(System.ReadOnlySpan<byte> buffer);
                            }

                            class BaseOutputStream : System.IO.Stream
                            {
                                /*0x3ee9cc0*/ BaseOutputStream();
                                /*0x3ee9a44*/ bool get_CanRead();
                                /*0x3ee9a4c*/ bool get_CanSeek();
                                /*0x3ee9a54*/ bool get_CanWrite();
                                /*0x3ee9a5c*/ void CopyTo(System.IO.Stream destination, int bufferSize);
                                /*0x3ee9a94*/ void Flush();
                                /*0x3ee9a98*/ long get_Length();
                                /*0x3ee9ad0*/ long get_Position();
                                /*0x3ee9b08*/ void set_Position(long value);
                                /*0x3ee9b40*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ee9b78*/ int Read(System.Span<byte> buffer);
                                /*0x3ee9bb0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ee9be8*/ void SetLength(long value);
                                /*0x3ee9c20*/ void Write(byte[] buffer, int offset, int count);
                            }

                            class FilterStream : System.IO.Stream
                            {
                                /*0x28*/ System.IO.Stream s;

                                /*0x3ee9d18*/ FilterStream(System.IO.Stream s);
                                /*0x3ee9de4*/ bool get_CanRead();
                                /*0x3ee9e04*/ bool get_CanSeek();
                                /*0x3ee9e24*/ bool get_CanWrite();
                                /*0x3ee9e44*/ void CopyTo(System.IO.Stream destination, int bufferSize);
                                /*0x3ee9e68*/ void Flush();
                                /*0x3ee9e8c*/ long get_Length();
                                /*0x3ee9eac*/ long get_Position();
                                /*0x3ee9ed0*/ void set_Position(long value);
                                /*0x3ee9ef4*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3ee9f18*/ int Read(System.Span<byte> buffer);
                                /*0x3ee9f3c*/ int ReadByte();
                                /*0x3ee9f60*/ long Seek(long offset, System.IO.SeekOrigin origin);
                                /*0x3ee9f84*/ void SetLength(long value);
                                /*0x3ee9fa8*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3ee9fcc*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x3ee9ff0*/ void WriteByte(byte value);
                                /*0x3eea014*/ void Dispose(bool disposing);
                            }

                            class Streams
                            {
                                static /*0x3eea054*/ void PipeAll(System.IO.Stream inStr, System.IO.Stream outStr);
                                static /*0x3eea078*/ byte[] ReadAll(System.IO.Stream inStr);
                                static /*0x3eea104*/ int ReadFully(System.IO.Stream inStr, byte[] buf);
                                static /*0x3eea120*/ int ReadFully(System.IO.Stream inStr, byte[] buf, int off, int len);
                                static /*0x3eea1a0*/ int ReadFully(System.IO.Stream inStr, System.Span<byte> buffer);
                                static /*0x3ee9844*/ void ValidateBufferArguments(byte[] buffer, int offset, int count);
                            }

                            class TeeInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                            {
                                /*0x28*/ System.IO.Stream input;
                                /*0x30*/ System.IO.Stream tee;

                                /*0x3eea278*/ TeeInputStream(System.IO.Stream input, System.IO.Stream tee);
                                /*0x3eea2b8*/ void Dispose(bool disposing);
                                /*0x3eea308*/ int Read(byte[] buffer, int offset, int count);
                                /*0x3eea380*/ int Read(System.Span<byte> buffer);
                                /*0x3eea478*/ int ReadByte();
                            }
                        }

                        namespace Encoders
                        {
                            class Hex
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Encoders.HexEncoder encoder;

                                static /*0x3eeaa10*/ Hex();
                                static /*0x3eea4d4*/ string ToHexString(byte[] data);
                                static /*0x3eea538*/ string ToHexString(byte[] data, int off, int length);
                                static /*0x3eea5a8*/ byte[] Encode(byte[] data, int off, int length);
                                static /*0x3eea764*/ byte[] DecodeStrict(string str);
                            }

                            class HexEncoder
                            {
                                /*0x10*/ byte[] encodingTable;
                                /*0x18*/ byte[] decodingTable;

                                /*0x3eeaa88*/ HexEncoder();
                                /*0x3eeab3c*/ void InitialiseDecodingTable();
                                /*0x3eeac9c*/ int Encode(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3eea678*/ int Encode(byte[] buf, int off, int len, System.IO.Stream outStream);
                                /*0x3eead98*/ int Encode(System.ReadOnlySpan<byte> data, System.IO.Stream outStream);
                                /*0x3eea7d8*/ byte[] DecodeStrict(string str, int off, int len);
                            }
                        }

                        namespace Date
                        {
                            class DateTimeUtilities
                            {
                                static /*0x0*/ System.DateTime UnixEpoch;
                                static /*0x8*/ long MaxUnixMs;
                                static /*0x10*/ long MinUnixMs;

                                static /*0x3eeb1e4*/ DateTimeUtilities();
                                static /*0x3eeaff4*/ long DateTimeToUnixMs(System.DateTime dateTime);
                                static /*0x3eeb160*/ long CurrentUnixMs();
                            }
                        }

                        namespace Collections
                        {
                            class CollectionUtilities
                            {
                                static /*0x3907c14*/ T GetValueOrKey<T>(System.Collections.Generic.IDictionary<T, T> d, T k);
                                static /*0x3907c14*/ V GetValueOrNull<K, V>(System.Collections.Generic.IDictionary<K, V> d, K k);
                                static /*0x382eaf0*/ System.Collections.Generic.IDictionary<K, V> ReadOnly<K, V>(System.Collections.Generic.IDictionary<K, V> d);
                                static /*0x382eaf0*/ string ToString<T>(System.Collections.Generic.IEnumerable<T> c);
                            }

                            class ReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
                            {
                                /*0x380cb08*/ ReadOnlyCollection();
                                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                                /*0x380b128*/ bool get_IsReadOnly();
                                /*0x3907c14*/ void Add(T item);
                                /*0x380cb08*/ void Clear();
                                /*0x3907c14*/ bool Remove(T item);
                                /*0x3907c14*/ bool Contains(T item);
                                /*0x380b6a0*/ int get_Count();
                                /*0x380d8b8*/ void CopyTo(T[] array, int arrayIndex);
                                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                            }

                            class ReadOnlyCollectionProxy<T> : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Collections.ReadOnlyCollection<T>
                            {
                                /*0x0*/ System.Collections.Generic.ICollection<T> m_target;

                                /*0x380d83c*/ ReadOnlyCollectionProxy(System.Collections.Generic.ICollection<T> target);
                                /*0x3907c14*/ bool Contains(T item);
                                /*0x380b6a0*/ int get_Count();
                                /*0x380d8b8*/ void CopyTo(T[] array, int arrayIndex);
                                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                            }

                            class ReadOnlyDictionary<K, V> : System.Collections.Generic.IDictionary<K, V>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<K, V>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K, V>>, System.Collections.IEnumerable
                            {
                                /*0x380cb08*/ ReadOnlyDictionary();
                                /*0x3907c14*/ V get_Item(K key);
                                /*0x3907c14*/ void set_Item(K key, V value);
                                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                                /*0x380b128*/ bool get_IsReadOnly();
                                /*0x3907c14*/ void Add(K key, V value);
                                /*0x3907c14*/ void Add(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x380cb08*/ void Clear();
                                /*0x3907c14*/ bool Remove(K key);
                                /*0x3907c14*/ bool Remove(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x3907c14*/ bool Contains(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x3907c14*/ bool ContainsKey(K key);
                                /*0x380d8b8*/ void CopyTo(System.Collections.Generic.KeyValuePair<K, V> array, int arrayIndex);
                                /*0x380b6a0*/ int get_Count();
                                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>> GetEnumerator();
                                /*0x380b9e8*/ System.Collections.Generic.ICollection<K> get_Keys();
                                /*0x3907c14*/ bool TryGetValue(K key, ref V value);
                                /*0x380b9e8*/ System.Collections.Generic.ICollection<V> get_Values();
                                /*0x3907c14*/ V Lookup(K key);
                            }

                            class ReadOnlyDictionaryProxy<K, V> : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.Collections.ReadOnlyDictionary<K, V>
                            {
                                /*0x0*/ System.Collections.Generic.IDictionary<K, V> m_target;

                                /*0x380d83c*/ ReadOnlyDictionaryProxy(System.Collections.Generic.IDictionary<K, V> target);
                                /*0x3907c14*/ bool Contains(System.Collections.Generic.KeyValuePair<K, V> item);
                                /*0x3907c14*/ bool ContainsKey(K key);
                                /*0x380d8b8*/ void CopyTo(System.Collections.Generic.KeyValuePair<K, V> array, int arrayIndex);
                                /*0x380b6a0*/ int get_Count();
                                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>> GetEnumerator();
                                /*0x380b9e8*/ System.Collections.Generic.ICollection<K> get_Keys();
                                /*0x3907c14*/ bool TryGetValue(K key, ref V value);
                                /*0x380b9e8*/ System.Collections.Generic.ICollection<V> get_Values();
                                /*0x3907c14*/ V Lookup(K key);
                            }
                        }
                    }

                    namespace Tls
                    {
                        class AbstractTlsClient : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsPeer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext m_context;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] m_protocolVersions;
                            /*0x30*/ int[] m_cipherSuites;
                            /*0x38*/ System.Collections.Generic.IList<int> m_supportedGroups;
                            /*0x40*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithms;
                            /*0x48*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithmsCert;

                            /*0x3eeb2b4*/ AbstractTlsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3eeb314*/ bool AllowUnexpectedServerExtension(int extensionType, byte[] extensionData);
                            /*0x3eeb358*/ System.Collections.Generic.IList<int> GetNamedGroupRoles();
                            /*0x3eeb46c*/ void CheckForUnexpectedServerExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions, int extensionType);
                            /*0x3eeb538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity GetPskIdentity();
                            /*0x3eeb540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity GetSrpIdentity();
                            /*0x3eeb548*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier GetDHGroupVerifier();
                            /*0x3eeb5f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier GetSrpConfigVerifier();
                            /*0x3eeb6a8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> GetCertificateAuthorities();
                            /*0x3eeb6b0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> GetProtocolNames();
                            /*0x3eeb6b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest GetCertificateStatusRequest();
                            /*0x3eeb824*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> GetMultiCertStatusRequest();
                            /*0x3eeb82c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetSniServerNames();
                            /*0x3eeb834*/ System.Collections.Generic.IList<int> GetSupportedGroups(System.Collections.Generic.IList<int> namedGroupRoles);
                            /*0x3eebbac*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithms();
                            /*0x3eebc08*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithmsCert();
                            /*0x3eebc10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> GetTrustedCAIndication();
                            /*0x3eebc18*/ short[] GetAllowedClientCertificateTypes();
                            /*0x3eebc20*/ short[] GetAllowedServerCertificateTypes();
                            /*0x3eebc28*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext context);
                            /*0x3eebc84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x3eebc8c*/ int[] GetCipherSuites();
                            /*0x3eebc94*/ void NotifyHandshakeBeginning();
                            /*0x3eebcd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession GetSessionToResume();
                            /*0x3eebcd8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal> GetExternalPsks();
                            /*0x3eebce0*/ bool IsFallback();
                            /*0x3eebce8*/ System.Collections.Generic.IDictionary<int, System.Byte[]> GetClientExtensions();
                            /*0x3eec358*/ System.Collections.Generic.IList<int> GetEarlyKeyShareGroups();
                            /*0x3eec5fc*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion serverVersion);
                            /*0x3eec600*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x3eec604*/ void NotifySessionID(byte[] sessionID);
                            /*0x3eec608*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                            /*0x3eec60c*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                            /*0x3eec610*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            /*0x3eec7c0*/ void ProcessServerSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                            /*0x3eec804*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> GetClientSupplementalData();
                            /*0x3eec80c*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                        }

                        class AbstractTlsContext : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                            static /*0x0*/ long counter;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x18*/ int m_connectionEnd;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator m_nonceGenerator;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters m_securityParameters;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] m_clientSupportedVersions;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_clientVersion;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_rsaPreMasterSecretVersion;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession m_session;
                            /*0x50*/ bool m_connected;

                            static /*0x3eed1a4*/ AbstractTlsContext();
                            static /*0x3eec810*/ long NextCounterValue();
                            static /*0x3eec868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int connectionEnd);
                            /*0x3eecb2c*/ AbstractTlsContext(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int connectionEnd);
                            /*0x3eecbc8*/ void HandshakeBeginning(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer peer);
                            /*0x3eece08*/ void HandshakeComplete(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer peer, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x3eecfc0*/ bool get_IsHandshaking();
                            /*0x3eed090*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x3eed098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            /*0x3eed0a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                            /*0x380b128*/ bool get_IsServer();
                            /*0x3eed158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] get_ClientSupportedVersions();
                            /*0x3eed160*/ void SetClientSupportedVersions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] clientSupportedVersions);
                            /*0x3eed168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ClientVersion();
                            /*0x3eed170*/ void SetClientVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                            /*0x3eed178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_RsaPreMasterSecretVersion();
                            /*0x3eed180*/ void SetRsaPreMasterSecretVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion rsaPreMasterSecretVersion);
                            /*0x3eed188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                        }

                        class AbstractTlsKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange
                        {
                            /*0x10*/ int m_keyExchange;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;

                            /*0x3eed22c*/ AbstractTlsKeyExchange(int keyExchange);
                            /*0x3eed254*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x380cb08*/ void SkipServerCredentials();
                            /*0x3eed25c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3eed298*/ bool get_RequiresServerKeyExchange();
                            /*0x3eed2a0*/ void SkipServerKeyExchange();
                            /*0x3eed2f8*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3eed350*/ short[] GetClientCertificateTypes();
                            /*0x3eed358*/ void SkipClientCredentials();
                            /*0x380d83c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x380d83c*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class AbstractTlsKeyExchangeFactory : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory
                        {
                            /*0x3eed578*/ AbstractTlsKeyExchangeFactory();
                            /*0x3eed35c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            /*0x3eed398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3eed3d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3eed410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x3eed44c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x3eed488*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x3eed4c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3eed500*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x3eed53c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class AbstractTlsPeer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable m_closeHandle;

                            /*0x3eeb2e4*/ AbstractTlsPeer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3eed580*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetSupportedVersions();
                            /*0x380b9e8*/ int[] GetSupportedCipherSuites();
                            /*0x3eed800*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x3eed808*/ void NotifyCloseHandle(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable closeHandle);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x380b9e8*/ int[] GetCipherSuites();
                            /*0x3eebccc*/ void NotifyHandshakeBeginning();
                            /*0x3eed834*/ bool AllowLegacyResumption();
                            /*0x3eed83c*/ int GetMaxCertificateChainLength();
                            /*0x3eed844*/ int GetMaxHandshakeMessageSize();
                            /*0x3eed84c*/ short[] GetPskKeyExchangeModes();
                            /*0x3eed8b0*/ bool RequiresCloseNotify();
                            /*0x3eed8b8*/ bool RequiresExtendedMasterSecret();
                            /*0x3eed8c0*/ bool ShouldUseExtendedMasterSecret();
                            /*0x3eed8c8*/ bool ShouldUseExtendedPadding();
                            /*0x3eed8d0*/ bool ShouldUseGmtUnixTime();
                            /*0x3eed8d8*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                            /*0x3eed91c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory GetKeyExchangeFactory();
                            /*0x3eed978*/ void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                            /*0x3eed97c*/ void NotifyAlertReceived(short alertLevel, short alertDescription);
                            /*0x3eed980*/ void NotifyHandshakeComplete();
                        }

                        class AlertDescription
                        {
                            static /*0x3eed984*/ string GetName(short alertDescription);
                            static /*0x3eedca4*/ string GetText(short alertDescription);
                        }

                        class ByteQueue
                        {
                            /*0x10*/ byte[] m_databuf;
                            /*0x18*/ int m_skipped;
                            /*0x1c*/ int m_available;
                            /*0x20*/ bool m_readOnlyBuf;

                            static /*0x3eedd34*/ int GetAllocationSize(int i);
                            /*0x3eedd8c*/ ByteQueue();
                            /*0x3eedd94*/ ByteQueue(int capacity);
                            /*0x3eede3c*/ ByteQueue(byte[] buf, int off, int len);
                            /*0x3eede8c*/ void AddData(byte[] buf, int off, int len);
                            /*0x3eedf70*/ void AddData(System.ReadOnlySpan<byte> buffer);
                            /*0x3eee1c0*/ int get_Available();
                            /*0x3eee1c8*/ void Read(byte[] buf, int offset, int len, int skip);
                            /*0x3eee39c*/ void Read(System.Span<byte> buffer, int skip);
                            /*0x3eee558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput ReadHandshakeMessage(int length);
                            /*0x3eee6bc*/ int ReadInt32();
                            /*0x3eee774*/ void RemoveData(int i);
                            /*0x3eee840*/ void RemoveData(byte[] buf, int off, int len, int skip);
                            /*0x3eee86c*/ void RemoveData(System.Span<byte> buffer, int skip);
                            /*0x3eee8d4*/ byte[] RemoveData(int len, int skip);
                            /*0x3eee95c*/ void Shrink();
                        }

                        class ByteQueueInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_buffer;

                            /*0x3eeea4c*/ ByteQueueInputStream();
                            /*0x3eeeab4*/ void AddBytes(byte[] buf, int bufOff, int bufLen);
                            /*0x3eeeacc*/ int Peek(byte[] buf);
                            /*0x3eeeb6c*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3eeec34*/ int Read(System.Span<byte> buffer);
                            /*0x3eeed1c*/ int ReadByte();
                            /*0x3eeed64*/ int get_Available();
                        }

                        class ByteQueueOutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_buffer;

                            /*0x3eeed80*/ ByteQueueOutputStream();
                            /*0x3eeede8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue get_Buffer();
                            /*0x3eeedf0*/ void Write(byte[] buffer, int offset, int count);
                            /*0x3eeee44*/ void Write(System.ReadOnlySpan<byte> buffer);
                            /*0x3eeee5c*/ void WriteByte(byte value);
                        }

                        class Certificate
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] EmptyCerts;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] EmptyCertEntries;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate EmptyChain;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate EmptyChainTls13;
                            /*0x10*/ byte[] m_certificateRequestContext;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] m_certificateEntryList;
                            /*0x20*/ short m_certificateType;

                            static /*0x3ef012c*/ Certificate();
                            static /*0x3eeeee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] Convert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] certificateList);
                            static /*0x3eefa18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate.ParseOptions options, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream messageInput, System.IO.Stream endPointHashOutput);
                            static /*0x3eef958*/ void CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate cert, byte[] encoding, System.IO.Stream output);
                            /*0x3eef10c*/ Certificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate[] certificateList);
                            /*0x3eef180*/ Certificate(byte[] certificateRequestContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] certificateEntryList);
                            /*0x3eef190*/ Certificate(short certificateType, byte[] certificateRequestContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] certificateEntryList);
                            /*0x3eef300*/ byte[] GetCertificateRequestContext();
                            /*0x3eef35c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate GetCertificateAt(int index);
                            /*0x3eef394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] GetCertificateEntryList();
                            /*0x3eef454*/ short get_CertificateType();
                            /*0x3eef45c*/ int get_Length();
                            /*0x3eef478*/ bool get_IsEmpty();
                            /*0x3eef49c*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream messageOutput, System.IO.Stream endPointHashOutput);
                            /*0x3eef398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateEntry[] CloneCertificateEntryList();

                            class ParseOptions
                            {
                                /*0x10*/ short <CertificateType>k__BackingField;
                                /*0x14*/ int <MaxChainLength>k__BackingField;

                                /*0x3ef029c*/ ParseOptions();
                                /*0x3ef027c*/ short get_CertificateType();
                                /*0x3ef0284*/ void set_CertificateType(short value);
                                /*0x3ef028c*/ int get_MaxChainLength();
                                /*0x3ef0294*/ void set_MaxChainLength(int value);
                            }
                        }

                        class CertificateEntry
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_certificate;
                            /*0x18*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;

                            /*0x3eef07c*/ CertificateEntry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            /*0x3ef02ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate get_Certificate();
                            /*0x3ef02b4*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                        }

                        class CertificateRequest
                        {
                            /*0x10*/ byte[] m_certificateRequestContext;
                            /*0x18*/ short[] m_certificateTypes;
                            /*0x20*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithms;
                            /*0x28*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_supportedSignatureAlgorithmsCert;
                            /*0x30*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> m_certificateAuthorities;

                            static /*0x3ef02bc*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CheckSupportedSignatureAlgorithms(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, short alertDescription);
                            static /*0x3ef0628*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x3ef031c*/ CertificateRequest(short[] certificateTypes, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x3ef04f0*/ CertificateRequest(byte[] certificateRequestContext, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithmsCert, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x3ef0334*/ CertificateRequest(byte[] certificateRequestContext, short[] certificateTypes, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithmsCert, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> certificateAuthorities);
                            /*0x3ef0544*/ byte[] GetCertificateRequestContext();
                            /*0x3ef05a0*/ short[] get_CertificateTypes();
                            /*0x3ef05a8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_SupportedSignatureAlgorithms();
                            /*0x3ef05b0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_SupportedSignatureAlgorithmsCert();
                            /*0x3ef05b8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> get_CertificateAuthorities();
                            /*0x3ef05c0*/ bool HasCertificateRequestContext(byte[] certificateRequestContext);
                        }

                        class CertificateStatus
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_response;

                            static /*0x3ef0bd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            static /*0x3ef0ad8*/ bool IsCorrectType(short statusType, object response);
                            static /*0x3ef10d0*/ bool IsOcspResponseList(object response);
                            static /*0x3ef1058*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponse ParseOcspResponse(byte[] derEncoding);
                            static /*0x3ef1010*/ void RequireStatusRequestVersion(int minVersion, int statusRequestVersion);
                            /*0x3ef0a34*/ CertificateStatus(short statusType, object response);
                        }

                        class CertificateStatusRequest
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_request;

                            static /*0x3ef1198*/ bool IsCorrectType(short statusType, object request);
                            /*0x3eeb780*/ CertificateStatusRequest(short statusType, object request);
                            /*0x3ef1260*/ void Encode(System.IO.Stream output);
                        }

                        class CertificateStatusRequestItemV2
                        {
                            /*0x10*/ short m_statusType;
                            /*0x18*/ object m_request;

                            /*0x3ef18cc*/ void Encode(System.IO.Stream output);
                        }

                        class CertificateVerify
                        {
                            /*0x10*/ int m_algorithm;
                            /*0x18*/ byte[] m_signature;

                            static /*0x3ef1b40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x3ef1a24*/ CertificateVerify(int algorithm, byte[] signature);
                            /*0x3ef1b30*/ int get_Algorithm();
                            /*0x3ef1b38*/ byte[] get_Signature();
                        }

                        class CipherSuite
                        {
                            static /*0x3ef1c44*/ bool IsScsv(int cipherSuite);
                        }

                        class ClientHello
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_version;
                            /*0x18*/ byte[] m_random;
                            /*0x20*/ byte[] m_sessionID;
                            /*0x28*/ byte[] m_cookie;
                            /*0x30*/ int[] m_cipherSuites;
                            /*0x38*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;
                            /*0x40*/ int m_bindersSize;

                            /*0x3ef1c6c*/ ClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] random, byte[] sessionID, byte[] cookie, int[] cipherSuites, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            /*0x3ef1d24*/ int get_BindersSize();
                            /*0x3ef1d2c*/ int[] get_CipherSuites();
                            /*0x3ef1d34*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                            /*0x3ef1d3c*/ byte[] get_SessionID();
                            /*0x3ef1d44*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream output);
                        }

                        class CombinedHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto m_crypto;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_md5;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_sha1;

                            /*0x3ef1eb8*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash md5, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash sha1);
                            /*0x3ef1fb4*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3ef20f8*/ CombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CombinedHash t);
                            /*0x3ef225c*/ void Update(byte[] input, int inOff, int len);
                            /*0x3ef2390*/ void Update(System.ReadOnlySpan<byte> input);
                            /*0x3ef24b8*/ byte[] CalculateHash();
                            /*0x3ef2680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                            /*0x3ef26d8*/ void Reset();
                        }

                        class ContentType
                        {
                            static /*0x3ef27e0*/ string GetName(short contentType);
                            static /*0x3ef2880*/ string GetText(short contentType);
                        }

                        class DefaultTlsDHGroupVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier
                        {
                            static /*0x0*/ int DefaultMinimumPrimeBits;
                            static /*0x8*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> DefaultGroups;
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> m_groups;
                            /*0x18*/ int m_minimumPrimeBits;

                            static /*0x3ef29e4*/ DefaultTlsDHGroupVerifier();
                            static /*0x3ef2910*/ void AddDefaultGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x3eeb598*/ DefaultTlsDHGroupVerifier();
                            /*0x3ef2b48*/ DefaultTlsDHGroupVerifier(int minimumPrimeBits);
                            /*0x3ef2bb8*/ DefaultTlsDHGroupVerifier(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup> groups, int minimumPrimeBits);
                            /*0x3ef2c5c*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x3ef2ca8*/ int get_MinimumPrimeBits();
                            /*0x3ef2cb0*/ bool AreGroupsEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup b);
                            /*0x3ef2d80*/ bool AreParametersEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                            /*0x3ef2dac*/ bool CheckGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                            /*0x3ef30ac*/ bool CheckMinimumPrimeBits(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                        }

                        class DefaultTlsKeyExchangeFactory : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchangeFactory
                        {
                            /*0x3eed970*/ DefaultTlsKeyExchangeFactory();
                            /*0x3ef3108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            /*0x3ef3164*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3ef31d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3ef323c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x3ef3298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x3ef32f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x3ef3350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3ef33c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x3ef3420*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class DefaultTlsSrpConfigVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier
                        {
                            static /*0x0*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> DefaultGroups;
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> m_groups;

                            static /*0x3ef3494*/ DefaultTlsSrpConfigVerifier();
                            /*0x3eeb648*/ DefaultTlsSrpConfigVerifier();
                            /*0x3ef3880*/ DefaultTlsSrpConfigVerifier(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group> groups);
                            /*0x3ef3910*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                            /*0x3ef3c10*/ bool AreGroupsEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group b);
                            /*0x3ef3cd8*/ bool AreParametersEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                        }

                        class DeferredHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer m_buf;
                            /*0x20*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash> m_hashes;
                            /*0x28*/ bool m_forceBuffering;
                            /*0x29*/ bool m_sealed;

                            /*0x3ef3d04*/ DeferredHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x3ef3df0*/ void CopyBufferTo(System.IO.Stream output);
                            /*0x3ef3e68*/ void ForceBuffering();
                            /*0x3ef3ecc*/ void NotifyPrfDetermined();
                            /*0x3ef41c8*/ void TrackHashAlgorithm(int cryptoHashAlgorithm);
                            /*0x3ef4224*/ void SealHashAlgorithms();
                            /*0x3ef46b0*/ void StopTracking();
                            /*0x3ef48e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash ForkPrfHash();
                            /*0x3ef4bc0*/ byte[] GetFinalHash(int cryptoHashAlgorithm);
                            /*0x3ef4e00*/ void Update(byte[] input, int inOff, int len);
                            /*0x3ef5220*/ void Update(System.ReadOnlySpan<byte> input);
                            /*0x3ef562c*/ byte[] CalculateHash();
                            /*0x3ef5678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                            /*0x3ef56c4*/ void Reset();
                            /*0x3ef4288*/ void CheckStopBuffering();
                            /*0x3ef3fa0*/ void CheckTrackingHash(int cryptoHashAlgorithm);
                            /*0x3ef4a28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash(int cryptoHashAlgorithm);
                            /*0x3ef4804*/ void CloneHash(System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash> newHashes, int cryptoHashAlgorithm);
                        }

                        class DigestInputBuffer : System.IO.MemoryStream
                        {
                            /*0x3ef3de8*/ DigestInputBuffer();
                            /*0x3ef4b48*/ void UpdateDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                            /*0x3ef3e58*/ void CopyInputTo(System.IO.Stream output);
                        }

                        class DigitallySigned
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm m_algorithm;
                            /*0x18*/ byte[] m_signature;

                            static /*0x3ef5bc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                            /*0x3ef5aac*/ DigitallySigned(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm algorithm, byte[] signature);
                            /*0x3ef5b3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm get_Algorithm();
                            /*0x3ef5b44*/ byte[] get_Signature();
                            /*0x3ef5b4c*/ void Encode(System.IO.Stream output);
                        }

                        class ExtensionType
                        {
                            static /*0x3ef5d04*/ string GetName(int extensionType);
                            static /*0x3ef5f54*/ string GetText(int extensionType);
                            static /*0x3ef5fe4*/ bool IsRecognized(int extensionType);
                        }

                        class HandshakeMessageInput : System.IO.MemoryStream
                        {
                            /*0x50*/ int m_offset;

                            /*0x3eee68c*/ HandshakeMessageInput(byte[] buf, int offset, int length);
                            /*0x3ef602c*/ void UpdateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                        }

                        class HandshakeMessageOutput : System.IO.MemoryStream
                        {
                            static /*0x3ef60a4*/ int GetLength(int bodyLength);
                            static /*0x3ef60ac*/ void Send(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol protocol, short handshakeType, byte[] body);
                            /*0x3ef6328*/ HandshakeMessageOutput(short handshakeType);
                            /*0x3ef6148*/ HandshakeMessageOutput(short handshakeType, int bodyLength);
                            /*0x3ef61ec*/ void Send(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol protocol);
                            /*0x3ef6330*/ void PrepareClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, int bindersSize);
                            /*0x3ef64e8*/ void SendClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientProtocol clientProtocol, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, int bindersSize);
                        }

                        class HandshakeType
                        {
                            static /*0x3ef6644*/ string GetName(short handshakeType);
                            static /*0x3ef67b4*/ string GetText(short handshakeType);
                            static /*0x3ef6844*/ bool IsRecognized(short handshakeType);
                        }

                        class HashAlgorithm
                        {
                            static /*0x3ef6870*/ string GetName(short hashAlgorithm);
                            static /*0x3ef6934*/ string GetText(short hashAlgorithm);
                            static /*0x3ef69c4*/ bool IsRecognized(short hashAlgorithm);
                        }

                        class KeyExchangeAlgorithm
                        {
                            static /*0x3ef69e8*/ bool IsAnonymous(int keyExchangeAlgorithm);
                        }

                        class KeyShareEntry
                        {
                            /*0x10*/ int m_namedGroup;
                            /*0x18*/ byte[] m_keyExchange;

                            static /*0x3ef6a04*/ bool CheckKeyExchangeLength(int length);
                            static /*0x3ef6c08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry Parse(System.IO.Stream input);
                            /*0x3ef6a18*/ KeyShareEntry(int namedGroup, byte[] keyExchange);
                            /*0x3ef6b7c*/ int get_NamedGroup();
                            /*0x3ef6b84*/ byte[] get_KeyExchange();
                            /*0x3ef6b8c*/ void Encode(System.IO.Stream output);
                        }

                        class KeyUpdateRequest
                        {
                            static /*0x3ef6cb0*/ bool IsValid(short keyUpdateRequest);
                        }

                        class MacAlgorithm
                        {
                            static /*0x3ef6cc0*/ string GetName(int macAlgorithm);
                            static /*0x3ef6d64*/ string GetText(int macAlgorithm);
                        }

                        class MaxFragmentLength
                        {
                            static /*0x3ef6df4*/ bool IsValid(short maxFragmentLength);
                        }

                        class NamedGroup
                        {
                            static /*0x0*/ string[] CurveNames;
                            static /*0x8*/ string[] FiniteFieldNames;

                            static /*0x3ef715c*/ NamedGroup();
                            static /*0x3ef6e08*/ bool CanBeNegotiated(int namedGroup, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3ef6fa0*/ string GetCurveName(int namedGroup);
                            static /*0x3ef7050*/ bool IsPrivate(int namedGroup);
                            static /*0x3ef6f00*/ bool IsValid(int namedGroup);
                            static /*0x3ef70f0*/ bool RefersToAnECDHCurve(int namedGroup);
                            static /*0x3ef7040*/ bool RefersToASpecificCurve(int namedGroup);
                            static /*0x3ef714c*/ bool RefersToASpecificFiniteField(int namedGroup);
                            static /*0x3ef7070*/ bool RefersToASpecificGroup(int namedGroup);
                        }

                        class NewSessionTicket
                        {
                            /*0x10*/ long m_ticketLifetimeHint;
                            /*0x18*/ byte[] m_ticket;

                            static /*0x3ef7b2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket Parse(System.IO.Stream input);
                            /*0x3ef7af4*/ NewSessionTicket(long ticketLifetimeHint, byte[] ticket);
                        }

                        class OcspStatusRequest
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponderID> m_responderIDList;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions m_requestExtensions;

                            /*0x3eeb73c*/ OcspStatusRequest(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponderID> responderIDList, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions requestExtensions);
                            /*0x3ef134c*/ void Encode(System.IO.Stream output);
                        }

                        class OfferedPsks
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> m_identities;
                            /*0x18*/ System.Collections.Generic.IList<System.Byte[]> m_binders;
                            /*0x20*/ int m_bindersSize;

                            static /*0x3ef89c4*/ void EncodeBinders(System.IO.Stream output, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig bindersConfig);
                            static /*0x3ef8dc0*/ int GetBindersSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks);
                            /*0x3ef7be0*/ OfferedPsks(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> identities);
                            /*0x3ef7bec*/ OfferedPsks(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.PskIdentity> identities, System.Collections.Generic.IList<System.Byte[]> binders, int bindersSize);
                            /*0x3ef7e78*/ void Encode(System.IO.Stream output);

                            class BindersConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] m_psks;
                                /*0x18*/ short[] m_pskKeyExchangeModes;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] m_earlySecrets;
                                /*0x28*/ int m_bindersSize;

                                /*0x3ef8f34*/ BindersConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, short[] pskKeyExchangeModes, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] earlySecrets, int bindersSize);
                            }
                        }

                        class PrfAlgorithm
                        {
                            static /*0x3ef8fa0*/ string GetName(int prfAlgorithm);
                            static /*0x3ef9050*/ string GetText(int prfAlgorithm);
                        }

                        class ProtocolName
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_1_1;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_1;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_2;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Spdy_3;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Stun_Turn;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Stun_Nat_Discovery;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_2_Tls;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_2_Tcp;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName WebRtc;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName WebRtc_Confidential;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Ftp;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Imap;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Pop3;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName ManageSieve;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Coap;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Xmpp_Client;
                            static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Xmpp_Server;
                            static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Acme_Tls_1;
                            static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Oasis_Mqtt;
                            static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Dns_Over_Tls;
                            static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Ntske_1;
                            static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Sun_Rpc;
                            static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Http_3;
                            static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Smb_2;
                            static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Irc;
                            static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Nntp_Reading;
                            static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Nntp_Transit;
                            static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Dns_Over_Quic;
                            /*0x10*/ byte[] m_bytes;

                            static /*0x3ef9454*/ ProtocolName();
                            static /*0x3ef90e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName AsUtf8Encoding(string name);
                            static /*0x3ef9290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName Parse(System.IO.Stream input);
                            /*0x3ef9148*/ ProtocolName(byte[] bytes);
                            /*0x3ef921c*/ string GetUtf8Decoding();
                            /*0x3ef9224*/ void Encode(System.IO.Stream output);
                            /*0x3ef9324*/ bool Equals(object obj);
                            /*0x3ef93c0*/ int GetHashCode();
                        }

                        class ProtocolVersion
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SSLv3;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv10;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv11;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv12;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion TLSv13;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv10;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv12;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion DTLSv13;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_EARLIEST_SUPPORTED_DTLS;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_EARLIEST_SUPPORTED_TLS;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_LATEST_SUPPORTED_DTLS;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion CLIENT_LATEST_SUPPORTED_TLS;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_EARLIEST_SUPPORTED_DTLS;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_EARLIEST_SUPPORTED_TLS;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_LATEST_SUPPORTED_DTLS;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion SERVER_LATEST_SUPPORTED_TLS;
                            /*0x10*/ int version;
                            /*0x18*/ string name;

                            static /*0x3efa5b0*/ ProtocolVersion();
                            static /*0x3ef9a60*/ bool Contains(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3ef9af4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetEarliestTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3ef9b90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetLatestTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3ef9c10*/ bool IsSupportedTlsVersionClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3ef9f9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion Get(int major, int minor);
                            static /*0x3efa4f4*/ void CheckUint8(int versionOctet);
                            static /*0x3efa3c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetUnknownVersion(int major, int minor, string prefix);
                            /*0x3ef9cb8*/ ProtocolVersion(int v, string name);
                            /*0x3eed5e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] DownTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion min);
                            /*0x3ef9e24*/ int get_FullVersion();
                            /*0x3ef9e2c*/ int get_MajorVersion();
                            /*0x3ef9b88*/ int get_MinorVersion();
                            /*0x3ef9e38*/ bool get_IsDtls();
                            /*0x3ef9e4c*/ bool get_IsSsl();
                            /*0x3ef9b74*/ bool get_IsTls();
                            /*0x3ef9eb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetEquivalentTlsVersion();
                            /*0x3ef9d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetPreviousVersion();
                            /*0x3efa260*/ bool IsEarlierVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3efa2a8*/ bool IsEqualOrEarlierVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3ef9cf4*/ bool IsEqualOrLaterVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3efa2f4*/ bool IsLaterVersionOf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            /*0x3efa33c*/ bool Equals(object other);
                            /*0x3ef9ad4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion other);
                            /*0x3efa3bc*/ int GetHashCode();
                            /*0x3efa4ec*/ string ToString();
                        }

                        class PskIdentity
                        {
                            /*0x10*/ byte[] m_identity;
                            /*0x18*/ long m_obfuscatedTicketAge;

                            /*0x3efa970*/ PskIdentity(byte[] identity, long obfuscatedTicketAge);
                            /*0x3ef8928*/ int GetEncodedLength();
                            /*0x3efaaf4*/ byte[] get_Identity();
                            /*0x3efaafc*/ long get_ObfuscatedTicketAge();
                            /*0x3ef8948*/ void Encode(System.IO.Stream output);
                            /*0x3efab04*/ bool Equals(object obj);
                            /*0x3efabbc*/ int GetHashCode();
                        }

                        class RecordPreview
                        {
                            /*0x10*/ int recordSize;
                            /*0x14*/ int contentLimit;

                            /*0x3efac60*/ RecordPreview(int recordSize, int contentLimit);
                            /*0x3efac8c*/ int get_RecordSize();
                        }

                        class RecordStream
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.Record m_inputRecord;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.SequenceNumber m_readSeqNo;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream.SequenceNumber m_writeSeqNo;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol m_handler;
                            /*0x30*/ System.IO.Stream m_input;
                            /*0x38*/ System.IO.Stream m_output;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_pendingCipher;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_readCipher;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_readCipherDeferred;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher m_writeCipher;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_writeVersion;
                            /*0x68*/ int m_plaintextLimit;
                            /*0x6c*/ int m_ciphertextLimit;
                            /*0x70*/ bool m_ignoreChangeCipherSpec;

                            static /*0x3efb940*/ void CheckLength(int length, int limit, short alertDescription);
                            /*0x3efac94*/ RecordStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol handler, System.IO.Stream input, System.IO.Stream output);
                            /*0x3efae9c*/ int get_PlaintextLimit();
                            /*0x3efaea4*/ void SetPlaintextLimit(int plaintextLimit);
                            /*0x3efaf58*/ void SetWriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion writeVersion);
                            /*0x3efaf60*/ void SetIgnoreChangeCipherSpec(bool ignoreChangeCipherSpec);
                            /*0x3efaf6c*/ void SetPendingCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher tlsCipher);
                            /*0x3efaf74*/ void NotifyChangeCipherSpecReceived();
                            /*0x3efafd8*/ void EnablePendingCipherRead(bool deferred);
                            /*0x3efb1bc*/ void EnablePendingCipherWrite();
                            /*0x3efb224*/ void FinaliseHandshake();
                            /*0x3efb290*/ bool NeedsKeyUpdate();
                            /*0x3efb36c*/ void NotifyKeyUpdateReceived();
                            /*0x3efb41c*/ void NotifyKeyUpdateSent();
                            /*0x3efb4cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordPreview PreviewRecordHeader(byte[] recordHeader);
                            /*0x3efb990*/ bool ReadFullRecord(byte[] input, int inputOff, int inputLen);
                            /*0x3efbcfc*/ bool ReadRecord();
                            /*0x3efbb90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeAndVerify(short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int off, int len);
                            /*0x3efc190*/ void WriteRecord(short contentType, byte[] plaintext, int plaintextOffset, int plaintextLength);
                            /*0x3efc274*/ void WriteRecord(short contentType, System.ReadOnlySpan<byte> plaintext);
                            /*0x3efc4a4*/ void Close();
                            /*0x3efbae8*/ void CheckChangeCipherSpec(byte[] buf, int off, int len);
                            /*0x3efb6ac*/ short CheckRecordType(byte[] buf, int off);

                            class Record
                            {
                                /*0x10*/ byte[] m_header;
                                /*0x18*/ byte[] m_buf;
                                /*0x20*/ int m_pos;

                                /*0x3efae08*/ Record();
                                /*0x3efc6a4*/ void FillTo(System.IO.Stream input, int length);
                                /*0x3efbfe8*/ void ReadFragment(System.IO.Stream input, int fragmentLength);
                                /*0x3efbf70*/ bool ReadHeader(System.IO.Stream input);
                                /*0x3efc600*/ void Reset();
                                /*0x3efc748*/ void Resize(int length);
                            }

                            class SequenceNumber
                            {
                                /*0x10*/ long m_value;
                                /*0x18*/ bool m_exhausted;

                                /*0x3efae94*/ SequenceNumber();
                                /*0x3efb2b4*/ long get_CurrentValue();
                                /*0x3efc064*/ long NextValue(short alertDescription);
                                /*0x3efb108*/ void Reset();
                            }
                        }

                        class SecurityParameters
                        {
                            /*0x10*/ int m_entity;
                            /*0x14*/ bool m_resumedSession;
                            /*0x15*/ bool m_secureRenegotiation;
                            /*0x18*/ int m_cipherSuite;
                            /*0x1c*/ short m_maxFragmentLength;
                            /*0x20*/ int m_prfAlgorithm;
                            /*0x24*/ int m_prfCryptoHashAlgorithm;
                            /*0x28*/ int m_prfHashLength;
                            /*0x2c*/ int m_verifyDataLength;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_baseKeyClient;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_baseKeyServer;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_earlyExporterMasterSecret;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_earlySecret;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_exporterMasterSecret;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_handshakeSecret;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_trafficSecretClient;
                            /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_trafficSecretServer;
                            /*0x78*/ byte[] m_clientRandom;
                            /*0x80*/ byte[] m_serverRandom;
                            /*0x88*/ byte[] m_sessionHash;
                            /*0x90*/ byte[] m_sessionID;
                            /*0x98*/ byte[] m_pskIdentity;
                            /*0xa0*/ byte[] m_srpIdentity;
                            /*0xa8*/ byte[] m_tlsServerEndPoint;
                            /*0xb0*/ byte[] m_tlsUnique;
                            /*0xb8*/ bool m_encryptThenMac;
                            /*0xb9*/ bool m_extendedMasterSecret;
                            /*0xba*/ bool m_extendedPadding;
                            /*0xbb*/ bool m_truncatedHmac;
                            /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName m_applicationProtocol;
                            /*0xc8*/ bool m_applicationProtocolSet;
                            /*0xd0*/ short[] m_clientCertTypes;
                            /*0xd8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> m_clientServerNames;
                            /*0xe0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_clientSigAlgs;
                            /*0xe8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_clientSigAlgsCert;
                            /*0xf0*/ int[] m_clientSupportedGroups;
                            /*0xf8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_serverSigAlgs;
                            /*0x100*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> m_serverSigAlgsCert;
                            /*0x108*/ int[] m_serverSupportedGroups;
                            /*0x110*/ int m_keyExchangeAlgorithm;
                            /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                            /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                            /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                            /*0x130*/ int m_statusRequestVersion;
                            /*0x134*/ short m_clientCertificateType;
                            /*0x138*/ byte[] m_localVerifyData;
                            /*0x140*/ byte[] m_peerVerifyData;
                            /*0x148*/ bool <IsRenegotiating>k__BackingField;
                            /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate <PreRenegotiatingServerCert>k__BackingField;

                            static /*0x3efc9e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ClearSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                            /*0x3efcbd8*/ SecurityParameters();
                            /*0x3efc86c*/ void Clear();
                            /*0x3efca84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName get_ApplicationProtocol();
                            /*0x3efca8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_BaseKeyClient();
                            /*0x3efca94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_BaseKeyServer();
                            /*0x3efca9c*/ int get_CipherSuite();
                            /*0x3efcaa4*/ byte[] get_ClientRandom();
                            /*0x3efcaac*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ClientSigAlgs();
                            /*0x3efcab4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ClientSigAlgsCert();
                            /*0x3efcabc*/ int[] get_ClientSupportedGroups();
                            /*0x3efcac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_HandshakeSecret();
                            /*0x3efcacc*/ bool get_IsEncryptThenMac();
                            /*0x3efcad4*/ bool get_IsExtendedMasterSecret();
                            /*0x3efcadc*/ bool get_IsExtendedPadding();
                            /*0x3efcae4*/ bool get_IsResumedSession();
                            /*0x3efcaec*/ bool get_IsSecureRenegotiation();
                            /*0x3efcaf4*/ bool get_IsTruncatedHmac();
                            /*0x3efcafc*/ int get_KeyExchangeAlgorithm();
                            /*0x3efcb04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_LocalCertificate();
                            /*0x3efcb0c*/ byte[] get_LocalVerifyData();
                            /*0x3efcb14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_MasterSecret();
                            /*0x3efcb1c*/ short get_MaxFragmentLength();
                            /*0x3efcb24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_NegotiatedVersion();
                            /*0x3efcb2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PeerCertificate();
                            /*0x3efcb34*/ byte[] get_PeerVerifyData();
                            /*0x3efcb3c*/ int get_PrfAlgorithm();
                            /*0x3efcb44*/ int get_PrfCryptoHashAlgorithm();
                            /*0x3efcb4c*/ int get_PrfHashLength();
                            /*0x3efcb54*/ byte[] get_PskIdentity();
                            /*0x3efcb5c*/ byte[] get_ServerRandom();
                            /*0x3efcb64*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ServerSigAlgs();
                            /*0x3efcb6c*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> get_ServerSigAlgsCert();
                            /*0x3efcb74*/ byte[] get_SessionHash();
                            /*0x3efcb7c*/ byte[] get_SessionID();
                            /*0x3efcb84*/ byte[] get_SrpIdentity();
                            /*0x3efcb8c*/ int get_StatusRequestVersion();
                            /*0x3efcb94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_TrafficSecretClient();
                            /*0x3efcb9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_TrafficSecretServer();
                            /*0x3efcba4*/ int get_VerifyDataLength();
                            /*0x3efcbac*/ bool get_IsRenegotiating();
                            /*0x3efcbb4*/ void set_IsRenegotiating(bool value);
                            /*0x3efcbc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PreRenegotiatingServerCert();
                            /*0x3efcbc8*/ void set_PreRenegotiatingServerCert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate value);
                        }

                        class ServerHello
                        {
                            static /*0x0*/ byte[] HelloRetryRequestMagic;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_version;
                            /*0x18*/ byte[] m_random;
                            /*0x20*/ byte[] m_sessionID;
                            /*0x28*/ int m_cipherSuite;
                            /*0x30*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_extensions;

                            static /*0x3efd274*/ ServerHello();
                            static /*0x3efcd3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello Parse(System.IO.MemoryStream input);
                            /*0x3efcc00*/ ServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] random, byte[] sessionID, int cipherSuite, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            /*0x3efcc84*/ int get_CipherSuite();
                            /*0x3efcc8c*/ System.Collections.Generic.IDictionary<int, System.Byte[]> get_Extensions();
                            /*0x3efcc94*/ byte[] get_Random();
                            /*0x3efcc9c*/ byte[] get_SessionID();
                            /*0x3efcca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_Version();
                            /*0x3efccac*/ bool IsHelloRetryRequest();
                        }

                        class ServerName
                        {
                            /*0x10*/ short nameType;
                            /*0x18*/ byte[] nameData;

                            static /*0x3efd5f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName Parse(System.IO.Stream input);
                            /*0x3efd314*/ ServerName(short nameType, byte[] nameData);
                            /*0x3efd4a4*/ short get_NameType();
                            /*0x3efd4ac*/ void Encode(System.IO.Stream output);
                        }

                        class ServerNameList
                        {
                            /*0x10*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> m_serverNameList;

                            static /*0x3efdda8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerNameList Parse(System.IO.Stream input);
                            static /*0x3efdc2c*/ short[] CheckNameType(short[] nameTypesSeen, short nameType);
                            /*0x3efd74c*/ ServerNameList(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            /*0x3efd7c8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> get_ServerNames();
                            /*0x3efd7d0*/ void Encode(System.IO.Stream output);
                        }

                        class ServerSrpParams
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_N;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_B;
                            /*0x28*/ byte[] m_s;

                            static /*0x3efe0d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerSrpParams Parse(System.IO.Stream input);
                            /*0x3efdfec*/ ServerSrpParams(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, byte[] s, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B);
                            /*0x3efe0b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_B();
                            /*0x3efe0b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                            /*0x3efe0c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            /*0x3efe0c8*/ byte[] get_S();
                        }

                        class SessionParameters
                        {
                            /*0x10*/ int m_cipherSuite;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                            /*0x38*/ byte[] m_pskIdentity;
                            /*0x40*/ byte[] m_srpIdentity;
                            /*0x48*/ byte[] m_encodedServerExtensions;
                            /*0x50*/ bool m_extendedMasterSecret;

                            /*0x3efe2f0*/ SessionParameters(int cipherSuite, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate localCertificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate peerCertificate, byte[] pskIdentity, byte[] srpIdentity, byte[] encodedServerExtensions, bool extendedMasterSecret);
                            /*0x3efe424*/ int get_CipherSuite();
                            /*0x3efe42c*/ void Clear();
                            /*0x3efe4d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters Copy();
                            /*0x3efe590*/ bool get_IsExtendedMasterSecret();
                            /*0x3efe598*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_LocalCertificate();
                            /*0x3efe5a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_MasterSecret();
                            /*0x3efe5a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_NegotiatedVersion();
                            /*0x3efe5b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_PeerCertificate();
                            /*0x3efe5b8*/ byte[] get_PskIdentity();
                            /*0x3efe5c0*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadServerExtensions();
                            /*0x3efe638*/ byte[] get_SrpIdentity();

                            class Builder
                            {
                                /*0x10*/ int m_cipherSuite;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_localCertificate;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_masterSecret;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion m_negotiatedVersion;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_peerCertificate;
                                /*0x38*/ byte[] m_pskIdentity;
                                /*0x40*/ byte[] m_srpIdentity;
                                /*0x48*/ byte[] m_encodedServerExtensions;
                                /*0x50*/ bool m_extendedMasterSecret;

                                /*0x3efe640*/ Builder();
                                /*0x3efe650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters Build();
                                /*0x3efe7d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetCipherSuite(int cipherSuite);
                                /*0x3efe7e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetExtendedMasterSecret(bool extendedMasterSecret);
                                /*0x3efe7ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetLocalCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate localCertificate);
                                /*0x3efe808*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret);
                                /*0x3efe824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetNegotiatedVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion);
                                /*0x3efe840*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetPeerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate peerCertificate);
                                /*0x3efe85c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetPskIdentity(byte[] pskIdentity);
                                /*0x3efe878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetSrpIdentity(byte[] srpIdentity);
                                /*0x3efe894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters.Builder SetServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                                /*0x3efe758*/ void Validate(bool condition, string parameter);
                            }
                        }

                        class SignatureAlgorithm
                        {
                            static /*0x3efe9bc*/ string GetName(short signatureAlgorithm);
                            static /*0x3efeb0c*/ string GetText(short signatureAlgorithm);
                        }

                        class SignatureAndHashAlgorithm
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP256r1tls13_sha256;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP384r1tls13_sha384;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ecdsa_brainpoolP512r1tls13_sha512;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ed25519;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm ed448;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm gostr34102012_256;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm gostr34102012_512;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha256;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha384;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_rsae_sha512;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha256;
                            static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha384;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm rsa_pss_pss_sha512;
                            /*0x10*/ short m_hash;
                            /*0x12*/ short m_signature;

                            static /*0x3eff390*/ SignatureAndHashAlgorithm();
                            static /*0x3efeb9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetInstance(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3efec20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetInstanceIntrinsic(short signatureAlgorithm);
                            static /*0x3efef34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Create(int signatureScheme);
                            static /*0x3efeecc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Create(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3eff11c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm Parse(System.IO.Stream input);
                            /*0x3efef9c*/ SignatureAndHashAlgorithm(short hash, short signature);
                            /*0x3eff078*/ short get_Hash();
                            /*0x3eff080*/ short get_Signature();
                            /*0x3eff088*/ void Encode(System.IO.Stream output);
                            /*0x3eff1b4*/ bool Equals(object obj);
                            /*0x3eff234*/ int GetHashCode();
                            /*0x3eff244*/ string ToString();
                        }

                        class SignatureScheme
                        {
                            static /*0x3eff574*/ int From(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlg);
                            static /*0x3eff5c4*/ int From(short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3eff5d0*/ int GetCryptoHashAlgorithm(int signatureScheme);
                            static /*0x3eff6a0*/ int GetCryptoHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3efef8c*/ short GetHashAlgorithm(int signatureScheme);
                            static /*0x3efef94*/ short GetSignatureAlgorithm(int signatureScheme);
                            static /*0x3eff6b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(int signatureScheme);
                            static /*0x3eff708*/ bool IsRsaPss(int signatureScheme);
                        }

                        class Ssl3Utilities
                        {
                            static /*0x0*/ byte[] SSL_CLIENT;
                            static /*0x8*/ byte[] SSL_SERVER;
                            static /*0x10*/ byte[] IPAD;
                            static /*0x18*/ byte[] OPAD;

                            static /*0x3efff1c*/ Ssl3Utilities();
                            static /*0x3eff72c*/ byte[] CalculateVerifyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, bool isServer);
                            static /*0x3eff8fc*/ void CompleteCombinedHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash md5, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash sha1);
                            static /*0x3effb4c*/ void CompleteHash(byte[] master_secret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash, int padLength);
                            static /*0x3effe4c*/ byte[] GenPad(byte b, int count);
                            static /*0x3effee4*/ void WriteEncryptedPms(byte[] encryptedPms, System.IO.Stream output);
                        }

                        class SupplementalDataEntry
                        {
                            /*0x10*/ int m_dataType;
                            /*0x18*/ byte[] m_data;

                            /*0x3f00048*/ SupplementalDataEntry(int dataType, byte[] data);
                            /*0x3f00080*/ int get_DataType();
                            /*0x3f00088*/ byte[] get_Data();
                        }

                        interface TlsAuthentication
                        {
                            /*0x380d83c*/ void NotifyServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate serverCertificate);
                            /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials GetClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                        }

                        interface TlsClient : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer
                        {
                            /*0x380d83c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext context);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession GetSessionToResume();
                            /*0x380b9e8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal> GetExternalPsks();
                            /*0x380b128*/ bool IsFallback();
                            /*0x380b9e8*/ System.Collections.Generic.IDictionary<int, System.Byte[]> GetClientExtensions();
                            /*0x380b9e8*/ System.Collections.Generic.IList<int> GetEarlyKeyShareGroups();
                            /*0x380d83c*/ void NotifyServerVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion selectedVersion);
                            /*0x380d83c*/ void NotifySessionToResume(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession session);
                            /*0x380d83c*/ void NotifySessionID(byte[] sessionID);
                            /*0x380cffc*/ void NotifySelectedCipherSuite(int selectedCipherSuite);
                            /*0x380d83c*/ void NotifySelectedPsk(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk selectedPsk);
                            /*0x380d83c*/ void ProcessServerExtensions(System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            /*0x380d83c*/ void ProcessServerSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity GetPskIdentity();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity GetSrpIdentity();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier GetDHGroupVerifier();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier GetSrpConfigVerifier();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication GetAuthentication();
                            /*0x380b9e8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> GetClientSupplementalData();
                            /*0x380d83c*/ void NotifyNewSessionTicket(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.NewSessionTicket newSessionTicket);
                        }

                        interface TlsClientContext : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                        }

                        class TlsClientContextImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext
                        {
                            /*0x3f00090*/ TlsClientContextImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            /*0x3f000fc*/ bool get_IsServer();
                        }

                        class TlsClientProtocol : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol
                        {
                            /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient m_tlsClient;
                            /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContextImpl m_tlsClientContext;
                            /*0xb8*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> m_clientAgreements;
                            /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig m_clientBinders;
                            /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ClientHello m_clientHello;
                            /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange m_keyExchange;
                            /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication m_authentication;
                            /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus m_certificateStatus;
                            /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest m_certificateRequest;

                            /*0x3f00104*/ TlsClientProtocol();
                            /*0x3f002b8*/ void Connect(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient tlsClient);
                            /*0x3f00558*/ void BeginHandshake(bool renegotiation);
                            /*0x3f007c8*/ void CleanupHandshake();
                            /*0x3f00974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext get_Context();
                            /*0x3f0097c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext get_ContextAdmin();
                            /*0x3f00984*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer get_Peer();
                            /*0x3f0098c*/ void Handle13HandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x3f014c0*/ void HandleHandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x3f03db0*/ void HandleServerCertificate();
                            /*0x3f04180*/ void HandleSupplementalData(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> serverSupplementalData);
                            /*0x3f043e0*/ void Process13HelloRetryRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello helloRetryRequest);
                            /*0x3f0585c*/ void Process13ServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello, bool afterHelloRetryRequest);
                            /*0x3f06660*/ void Process13ServerHelloCoda(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello, bool afterHelloRetryRequest);
                            /*0x3f06874*/ void ProcessServerHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello serverHello);
                            /*0x3f07c6c*/ void Receive13CertificateRequest(System.IO.MemoryStream buf, bool postHandshakeAuth);
                            /*0x3f07e74*/ void Send13CertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate);
                            /*0x3f08088*/ void Receive13EncryptedExtensions(System.IO.MemoryStream buf);
                            /*0x3f08948*/ void Receive13NewSessionTicket(System.IO.MemoryStream buf);
                            /*0x3f08b30*/ void Receive13ServerCertificate(System.IO.MemoryStream buf);
                            /*0x3f08f18*/ void Receive13ServerCertificateVerify(System.IO.MemoryStream buf);
                            /*0x3f0912c*/ void Receive13ServerFinished(System.IO.MemoryStream buf);
                            /*0x3f0913c*/ void ReceiveCertificateRequest(System.IO.MemoryStream buf);
                            /*0x3f093b4*/ void ReceiveNewSessionTicket(System.IO.MemoryStream buf);
                            /*0x3f09478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerHello ReceiveServerHelloMessage(System.IO.MemoryStream buf);
                            /*0x3f094cc*/ void Send13ClientHelloRetry();
                            /*0x3f09fc4*/ void SendCertificateVerifyMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned certificateVerify);
                            /*0x3f0a050*/ void SendClientHello();
                            /*0x3f0b84c*/ void SendClientHelloMessage();
                            /*0x3f0b920*/ void SendClientKeyExchange();
                            /*0x3f0ba08*/ void Skip13CertificateRequest();
                            /*0x3f0ba14*/ void Skip13ServerCertificate();
                        }

                        interface TlsCloseable
                        {
                        }

                        interface TlsContext
                        {
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                            /*0x380b128*/ bool get_IsServer();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ClientVersion();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_RsaPreMasterSecretVersion();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                        }

                        interface TlsCredentialedAgreement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                            /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate peerCertificate);
                        }

                        interface TlsCredentialedDecryptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                        }

                        interface TlsCredentialedSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials
                        {
                            /*0x380bb68*/ byte[] GenerateRawSignature(byte[] hash);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm get_SignatureAndHashAlgorithm();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamSigner GetStreamSigner();
                        }

                        interface TlsCredentials
                        {
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate get_Certificate();
                        }

                        class TlsDHanonKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f0bbc4*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f0bc34*/ TlsDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3f0bc3c*/ TlsDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            /*0x3f0bc9c*/ void SkipServerCredentials();
                            /*0x3f0bca0*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f0bcd8*/ bool get_RequiresServerKeyExchange();
                            /*0x3f0bce0*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f0c1f0*/ short[] GetClientCertificateTypes();
                            /*0x3f0c1f8*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f0c230*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f0c30c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsDheKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f0c3b0*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f0c428*/ TlsDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3f0c430*/ TlsDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            /*0x3f0c490*/ void SkipServerCredentials();
                            /*0x3f0c4c8*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f0c4fc*/ bool get_RequiresServerKeyExchange();
                            /*0x3f0c504*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f0cc3c*/ short[] GetClientCertificateTypes();
                            /*0x3f0ccac*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f0cdac*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f0ce88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsDHGroupVerifier
                        {
                            /*0x380b2f0*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup dhGroup);
                        }

                        class TlsDHKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement m_agreementCredentials;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_dhPeerCertificate;

                            static /*0x3f0cf2c*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f0cfa4*/ TlsDHKeyExchange(int keyExchange);
                            /*0x3f0cfd4*/ void SkipServerCredentials();
                            /*0x3f0d00c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f0d0dc*/ short[] GetClientCertificateTypes();
                            /*0x3f0d150*/ void SkipClientCredentials();
                            /*0x3f0d188*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f0d2a4*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f0d2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsDHUtilities
                        {
                            static /*0x3f0d350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetDHGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                            static /*0x3f0d38c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetNamedDHGroup(int namedGroup);
                            static /*0x3f0d4a8*/ int GetNamedGroupForDHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                            static /*0x3f0d5c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup GetStandardGroupForDHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                            static /*0x3f0bf60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig ReceiveDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, System.IO.Stream input);
                            static /*0x3f0da34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReadDHParameter(System.IO.Stream input);
                        }

                        class TlsEccUtilities
                        {
                            static /*0x3f0dacc*/ bool IsEccCipherSuite(int cipherSuite);
                            static /*0x3f0dc1c*/ void CheckPointEncoding(int namedGroup, byte[] encoding);
                            static /*0x3f0dcfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ReceiveECDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream input);
                        }

                        class TlsECDHanonKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f0defc*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f0df6c*/ TlsECDHanonKeyExchange(int keyExchange);
                            /*0x3f0df74*/ TlsECDHanonKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x3f0dfb8*/ void SkipServerCredentials();
                            /*0x3f0dfbc*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f0dff4*/ bool get_RequiresServerKeyExchange();
                            /*0x3f0dffc*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f0e218*/ short[] GetClientCertificateTypes();
                            /*0x3f0e220*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f0e258*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f0e268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x3f0e30c*/ void GenerateEphemeral(System.IO.Stream output);
                            /*0x3f0e484*/ void ProcessEphemeral(byte[] point);
                        }

                        class TlsECDheKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;

                            static /*0x3f0e54c*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f0e5c0*/ TlsECDheKeyExchange(int keyExchange);
                            /*0x3f0e5c8*/ TlsECDheKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x3f0e60c*/ void SkipServerCredentials();
                            /*0x3f0e644*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f0e678*/ bool get_RequiresServerKeyExchange();
                            /*0x3f0e680*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f0e914*/ short[] GetClientCertificateTypes();
                            /*0x3f0e984*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f0e9d8*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f0e9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x3f0ea8c*/ void GenerateEphemeral(System.IO.Stream output);
                            /*0x3f0eb68*/ void ProcessEphemeral(byte[] point);
                        }

                        class TlsECDHKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement m_agreementCredentials;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_ecdhPeerCertificate;

                            static /*0x3f0ec30*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f0eca4*/ TlsECDHKeyExchange(int keyExchange);
                            /*0x3f0ecd4*/ void SkipServerCredentials();
                            /*0x3f0ed0c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f0eddc*/ short[] GetClientCertificateTypes();
                            /*0x3f0ee50*/ void SkipClientCredentials();
                            /*0x3f0ee88*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f0eef8*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f0eefc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsException : System.IO.IOException
                        {
                            /*0x3f0efa4*/ TlsException();
                            /*0x3f0efac*/ TlsException(string message);
                            /*0x3f0efb4*/ TlsException(string message, System.Exception innerException);
                            /*0x3f0efbc*/ TlsException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class TlsExtensionsUtilities
                        {
                            static /*0x3f0add0*/ System.Collections.Generic.IDictionary<int, System.Byte[]> EnsureExtensionsInitialised(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f0efc4*/ void AddAlpnExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocolNameList);
                            static /*0x3f0f450*/ void AddCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> authorities);
                            static /*0x3f0f924*/ void AddClientCertificateTypeExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] certificateTypes);
                            static /*0x3f09854*/ void AddCookieExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, byte[] cookie);
                            static /*0x3f0fb7c*/ void AddEncryptThenMacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f0b79c*/ void AddExtendedMasterSecretExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f0fccc*/ void AddKeyShareClientHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x3f1017c*/ void AddPreSharedKeyClientHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks offeredPsks);
                            static /*0x3f102e8*/ void AddPskKeyExchangeModesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] modes);
                            static /*0x3f10470*/ void AddServerCertificateTypeExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] certificateTypes);
                            static /*0x3f10528*/ void AddServerNameExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            static /*0x3f106bc*/ void AddSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f10818*/ void AddSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f108d4*/ void AddStatusRequestExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest statusRequest);
                            static /*0x3f10a40*/ void AddStatusRequestV2Extension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> statusRequestV2);
                            static /*0x3f10ecc*/ void AddSupportedGroupsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<int> namedGroups);
                            static /*0x3f111bc*/ void AddSupportedPointFormatsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short[] ecPointFormats);
                            static /*0x3f0ae40*/ void AddSupportedVersionsExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3f114ac*/ void AddTrustedCAKeysExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> trustedAuthoritiesList);
                            static /*0x3f07a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName GetAlpnExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f119f8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> GetCertificateAuthoritiesExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f07df4*/ short GetClientCertificateTypeExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short defaultValue);
                            static /*0x3f0550c*/ byte[] GetCookieExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f0535c*/ int GetKeyShareHelloRetryRequest(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f06094*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry GetKeyShareServerHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f11ec8*/ short GetMaxFragmentLengthExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f06024*/ int GetPreSharedKeyServerHello(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f11fe0*/ short GetServerCertificateTypeExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, short defaultValue);
                            static /*0x3f0aef8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> GetServerNameExtensionClient(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f12128*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSignatureAlgorithmsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f12278*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSignatureAlgorithmsCertExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f0b044*/ int[] GetSupportedGroupsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f12418*/ short[] GetSupportedPointFormatsExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f051d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetSupportedVersionsExtensionServer(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f07a70*/ bool HasEncryptThenMacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f07990*/ bool HasExtendedMasterSecretExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f07b44*/ bool HasTruncatedHmacExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f0f07c*/ byte[] CreateAlpnExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> protocolNameList);
                            static /*0x3f0f508*/ byte[] CreateCertificateAuthoritiesExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> authorities);
                            static /*0x3f0f9dc*/ byte[] CreateCertificateTypeExtensionClient(short[] certificateTypes);
                            static /*0x3f0faac*/ byte[] CreateCookieExtension(byte[] cookie);
                            static /*0x3f12890*/ byte[] CreateEmptyExtensionData();
                            static /*0x3f0fc2c*/ byte[] CreateEncryptThenMacExtension();
                            static /*0x3f0fc7c*/ byte[] CreateExtendedMasterSecretExtension();
                            static /*0x3f0fd84*/ byte[] CreateKeyShareClientHello(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x3f10234*/ byte[] CreatePreSharedKeyClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks offeredPsks);
                            static /*0x3f103a0*/ byte[] CreatePskKeyExchangeModesExtension(short[] modes);
                            static /*0x3f105e0*/ byte[] CreateServerNameExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> serverNameList);
                            static /*0x3f10774*/ byte[] CreateSignatureAlgorithmsExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f108d0*/ byte[] CreateSignatureAlgorithmsCertExtension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms);
                            static /*0x3f1098c*/ byte[] CreateStatusRequestExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequest statusRequest);
                            static /*0x3f10af8*/ byte[] CreateStatusRequestV2Extension(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatusRequestItemV2> statusRequestV2);
                            static /*0x3f10f84*/ byte[] CreateSupportedGroupsExtension(System.Collections.Generic.IList<int> namedGroups);
                            static /*0x3f11274*/ byte[] CreateSupportedPointFormatsExtension(short[] ecPointFormats);
                            static /*0x3f11328*/ byte[] CreateSupportedVersionsExtensionClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] versions);
                            static /*0x3f11564*/ byte[] CreateTrustedCAKeysExtensionClient(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TrustedAuthority> trustedAuthoritiesList);
                            static /*0x3f12fcc*/ bool ReadEmptyExtensionData(byte[] extensionData);
                            static /*0x3f13050*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName> ReadAlpnExtensionClient(byte[] extensionData);
                            static /*0x3f1189c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolName ReadAlpnExtensionServer(byte[] extensionData);
                            static /*0x3f11a64*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name> ReadCertificateAuthoritiesExtension(byte[] extensionData);
                            static /*0x3f11d04*/ short ReadCertificateTypeExtensionServer(byte[] extensionData);
                            static /*0x3f11d58*/ byte[] ReadCookieExtension(byte[] extensionData);
                            static /*0x3f12624*/ bool ReadEncryptThenMacExtension(byte[] extensionData);
                            static /*0x3f12638*/ bool ReadExtendedMasterSecretExtension(byte[] extensionData);
                            static /*0x3f11db0*/ int ReadKeyShareHelloRetryRequest(byte[] extensionData);
                            static /*0x3f11e04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry ReadKeyShareServerHello(byte[] extensionData);
                            static /*0x3f11f38*/ short ReadMaxFragmentLengthExtension(byte[] extensionData);
                            static /*0x3f11f8c*/ int ReadPreSharedKeyServerHello(byte[] extensionData);
                            static /*0x3f12060*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ServerName> ReadServerNameExtensionClient(byte[] extensionData);
                            static /*0x3f12194*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ReadSignatureAlgorithmsExtension(byte[] extensionData);
                            static /*0x3f122e4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ReadSignatureAlgorithmsCertExtension(byte[] extensionData);
                            static /*0x3f122e8*/ int[] ReadSupportedGroupsExtension(byte[] extensionData);
                            static /*0x3f12484*/ short[] ReadSupportedPointFormatsExtension(byte[] extensionData);
                            static /*0x3f12554*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadSupportedVersionsExtensionServer(byte[] extensionData);
                            static /*0x3f1264c*/ bool ReadTruncatedHmacExtension(byte[] extensionData);
                            static /*0x3f12660*/ byte[] PatchOpaque16(System.IO.MemoryStream buf);
                        }

                        class TlsFatalAlert : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsException
                        {
                            /*0x8c*/ byte m_alertDescription;

                            static /*0x3f13b90*/ string GetMessage(short alertDescription, string detailMessage);
                            /*0x3efd1b8*/ TlsFatalAlert(short alertDescription);
                            /*0x3f13ce0*/ TlsFatalAlert(short alertDescription, string detailMessage);
                            /*0x3f13ce8*/ TlsFatalAlert(short alertDescription, System.Exception alertCause);
                            /*0x3f13bfc*/ TlsFatalAlert(short alertDescription, string detailMessage, System.Exception alertCause);
                            /*0x3f13cf4*/ TlsFatalAlert(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x3f13d7c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x3f13e00*/ short get_AlertDescription();
                        }

                        class TlsFatalAlertReceived : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsException
                        {
                            /*0x8c*/ byte m_alertDescription;

                            /*0x3f13e08*/ TlsFatalAlertReceived(short alertDescription);
                            /*0x3f13ed8*/ TlsFatalAlertReceived(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                            /*0x3f13f60*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface TlsHandshakeHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                        {
                            /*0x380d83c*/ void CopyBufferTo(System.IO.Stream output);
                            /*0x380cb08*/ void ForceBuffering();
                            /*0x380cb08*/ void NotifyPrfDetermined();
                            /*0x380cffc*/ void TrackHashAlgorithm(int cryptoHashAlgorithm);
                            /*0x380cb08*/ void SealHashAlgorithms();
                            /*0x380cb08*/ void StopTracking();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash ForkPrfHash();
                            /*0x380ba90*/ byte[] GetFinalHash(int cryptoHashAlgorithm);
                        }

                        interface TlsKeyExchange
                        {
                            /*0x380d83c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            /*0x380cb08*/ void SkipServerCredentials();
                            /*0x380d83c*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x380cb08*/ void SkipServerKeyExchange();
                            /*0x380d83c*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x380b9e8*/ short[] GetClientCertificateTypes();
                            /*0x380cb08*/ void SkipClientCredentials();
                            /*0x380d83c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x380d83c*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsKeyExchangeFactory
                        {
                            /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHKeyExchange(int keyExchange);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHKeyExchange(int keyExchange);
                            /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange);
                            /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange);
                            /*0x380bad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateRsaKeyExchange(int keyExchange);
                            /*0x380bad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                        }

                        class TlsNoCloseNotifyException : System.IO.EndOfStreamException
                        {
                            /*0x3f13fe4*/ TlsNoCloseNotifyException();
                            /*0x3f14030*/ TlsNoCloseNotifyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class TlsObjectIdentifiers
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_pe_tlsfeature;

                            static /*0x3f14038*/ TlsObjectIdentifiers();
                        }

                        interface TlsPeer
                        {
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto get_Crypto();
                            /*0x380d83c*/ void NotifyCloseHandle(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable closehandle);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] GetProtocolVersions();
                            /*0x380b9e8*/ int[] GetCipherSuites();
                            /*0x380cb08*/ void NotifyHandshakeBeginning();
                            /*0x380b128*/ bool AllowLegacyResumption();
                            /*0x380b6a0*/ int GetMaxCertificateChainLength();
                            /*0x380b6a0*/ int GetMaxHandshakeMessageSize();
                            /*0x380b9e8*/ short[] GetPskKeyExchangeModes();
                            /*0x380b128*/ bool RequiresCloseNotify();
                            /*0x380b128*/ bool RequiresExtendedMasterSecret();
                            /*0x380b128*/ bool ShouldUseExtendedMasterSecret();
                            /*0x380b128*/ bool ShouldUseExtendedPadding();
                            /*0x380b128*/ bool ShouldUseGmtUnixTime();
                            /*0x380cdf0*/ void NotifySecureRenegotiation(bool secureRenegotiation);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchangeFactory GetKeyExchangeFactory();
                            void NotifyAlertRaised(short alertLevel, short alertDescription, string message, System.Exception cause);
                            void NotifyAlertReceived(short alertLevel, short alertDescription);
                            /*0x380cb08*/ void NotifyHandshakeComplete();
                        }

                        class TlsProtocol : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCloseable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_applicationDataQueue;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_alertQueue;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue m_handshakeQueue;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream m_recordStream;
                            /*0x30*/ int m_maxHandshakeMessageSize;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash m_handshakeHash;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsStream m_tlsStream;
                            /*0x48*/ bool m_closed;
                            /*0x49*/ bool m_failedWithError;
                            /*0x4a*/ bool m_appDataReady;
                            /*0x4b*/ bool m_appDataSplitEnabled;
                            /*0x4c*/ bool m_keyUpdateEnabled;
                            /*0x4d*/ bool m_keyUpdatePendingSend;
                            /*0x50*/ int m_appDataSplitMode;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession m_tlsSession;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters m_sessionParameters;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_sessionMasterSecret;
                            /*0x70*/ byte[] m_retryCookie;
                            /*0x78*/ int m_retryGroup;
                            /*0x80*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_clientExtensions;
                            /*0x88*/ System.Collections.Generic.IDictionary<int, System.Byte[]> m_serverExtensions;
                            /*0x90*/ short m_connectionState;
                            /*0x92*/ bool m_selectedPsk13;
                            /*0x93*/ bool m_receivedChangeCipherSpec;
                            /*0x94*/ bool m_expectSessionTicket;
                            /*0x95*/ bool m_blocking;
                            /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueueInputStream m_inputBuffers;
                            /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueueOutputStream m_outputBuffer;

                            static /*0x3f02970*/ void AssertEmpty(System.IO.MemoryStream buf);
                            static /*0x3f0ab90*/ byte[] CreateRandomBlock(bool useGmtUnixTime, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f0793c*/ byte[] CreateRenegotiationInfo(byte[] renegotiated_connection);
                            static /*0x3f03364*/ void EstablishMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange);
                            static /*0x3efd1c4*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensions(System.IO.MemoryStream input);
                            static /*0x3f194a4*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensionsData(byte[] extBytes);
                            static /*0x3f0871c*/ System.Collections.Generic.IDictionary<int, System.Byte[]> ReadExtensionsData13(int handshakeType, byte[] extBytes);
                            static /*0x3f02ba8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> ReadSupplementalDataMessage(System.IO.MemoryStream input);
                            static /*0x3efe9b4*/ void WriteExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f19844*/ void WriteExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x3f19a08*/ byte[] WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions);
                            static /*0x3f19980*/ byte[] WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x3f19a10*/ void WriteExtensionsData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, System.IO.MemoryStream buf, int bindersSize);
                            static /*0x3f19dc8*/ void WritePreSharedKeyExtension(System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int bindersSize);
                            static /*0x3f19a5c*/ void WriteSelectedExtensions(System.IO.Stream output, System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, bool selectEmpty);
                            static /*0x3f18d30*/ void WriteSupplementalData(System.IO.Stream output, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> supplementalData);
                            /*0x3f00108*/ TlsProtocol();
                            /*0x3f02594*/ bool IsLegacyConnectionState();
                            /*0x3f00eb4*/ bool IsTlsV13ConnectionState();
                            /*0x3f140e8*/ void CloseConnection();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext get_Context();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsContext get_ContextAdmin();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPeer get_Peer();
                            /*0x3f14104*/ void HandleAlertMessage(short alertLevel, short alertDescription);
                            /*0x3f14234*/ void HandleAlertWarningMessage(short alertDescription);
                            /*0x3f142dc*/ void HandleChangeCipherSpecMessage();
                            /*0x3f142e0*/ void HandleClose(bool user_canceled);
                            /*0x3f143c4*/ void HandleException(short alertDescription, string message, System.Exception e);
                            /*0x3f1443c*/ void HandleFailure();
                            void HandleHandshakeMessage(short type, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.HandshakeMessageInput buf);
                            /*0x3f144a8*/ void ApplyMaxFragmentLengthExtension(short maxFragmentLength);
                            /*0x3f14534*/ void CheckReceivedChangeCipherSpec(bool expected);
                            /*0x3f14584*/ void BlockForHandshake();
                            /*0x3f1460c*/ void handleRenegotiation();
                            /*0x3f0058c*/ void BeginHandshake(bool renegotiation);
                            /*0x3f00848*/ void CleanupHandshake();
                            /*0x3f14620*/ void CompleteHandshake();
                            /*0x3f14c88*/ void ProcessRecord(short protocol, byte[] buf, int off, int len);
                            /*0x3f150d4*/ void ProcessHandshakeQueue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ByteQueue queue);
                            /*0x3f14ee0*/ void ProcessApplicationDataQueue();
                            /*0x3f14e70*/ void ProcessAlertQueue();
                            /*0x3f14ee4*/ void ProcessChangeCipherSpec(byte[] buf, int off, int len);
                            /*0x3f155a4*/ int get_ApplicationDataAvailable();
                            /*0x3f155c0*/ int ReadApplicationData(byte[] buffer, int offset, int count);
                            /*0x3f1569c*/ int ReadApplicationData(System.Span<byte> buffer);
                            /*0x3f1585c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordPreview SafePreviewRecordHeader(byte[] recordHeader);
                            /*0x3f15a14*/ void SafeReadRecord();
                            /*0x3f15d3c*/ bool SafeReadFullRecord(byte[] input, int inputOff, int inputLen);
                            /*0x3f15ef8*/ void SafeWriteRecord(short type, byte[] buf, int offset, int len);
                            /*0x3f160ac*/ void SafeWriteRecord(short type, System.ReadOnlySpan<byte> buffer);
                            /*0x3f16260*/ void WriteApplicationData(byte[] buffer, int offset, int count);
                            /*0x3f16364*/ void WriteApplicationData(System.ReadOnlySpan<byte> buffer);
                            /*0x3f166c0*/ void WriteHandshakeMessage(byte[] buf, int off, int len);
                            /*0x3f16988*/ void OfferInput(byte[] input, int inputOff, int inputLen);
                            /*0x3f16ba8*/ int GetAvailableInputBytes();
                            /*0x3f16c10*/ int ReadInput(byte[] buf, int off, int len);
                            /*0x3f16d2c*/ int GetAvailableOutputBytes();
                            /*0x3f16da0*/ int ReadOutput(byte[] buffer, int offset, int length);
                            /*0x3f16eb4*/ bool EstablishSession(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession sessionToResume);
                            /*0x3f173f4*/ void InvalidateSession();
                            /*0x3f1755c*/ void ProcessFinishedMessage(System.IO.MemoryStream buf);
                            /*0x3f17b50*/ void Process13FinishedMessage(System.IO.MemoryStream buf);
                            /*0x3f17e2c*/ void RaiseAlertFatal(short alertDescription, string message, System.Exception cause);
                            /*0x3f17ff4*/ void RaiseAlertWarning(short alertDescription, string message);
                            /*0x3f18130*/ void Receive13KeyUpdate(System.IO.MemoryStream buf);
                            /*0x3f18358*/ void SendCertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate, System.IO.Stream endPointHash);
                            /*0x3f07f14*/ void Send13CertificateMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate);
                            /*0x3f185c0*/ void Send13CertificateVerifyMessage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned certificateVerify);
                            /*0x3f1864c*/ void SendChangeCipherSpec();
                            /*0x3f1867c*/ void SendChangeCipherSpecMessage();
                            /*0x3f18700*/ void SendFinishedMessage();
                            /*0x3f188b0*/ void Send13FinishedMessage();
                            /*0x3f18a48*/ void Send13KeyUpdate(bool updateRequested);
                            /*0x3f18cac*/ void SendSupplementalDataMessage(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SupplementalDataEntry> supplementalData);
                            /*0x3f190c0*/ void Close();
                            /*0x3f190d0*/ void Flush();
                            /*0x3f03d98*/ bool get_IsApplicationDataReady();
                            /*0x3f190d4*/ bool get_IsClosed();
                            /*0x3f190ec*/ bool get_IsHandshaking();
                            /*0x3f19138*/ short ProcessMaxFragmentLengthExtension(System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions, short alertDescription);
                        }

                        interface TlsPsk
                        {
                            /*0x380b9e8*/ byte[] get_Identity();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret get_Key();
                            /*0x380b6a0*/ int get_PrfAlgorithm();
                        }

                        interface TlsPskExternal : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk
                        {
                        }

                        interface TlsPskIdentity
                        {
                            /*0x380cb08*/ void SkipIdentityHint();
                            /*0x380d83c*/ void NotifyIdentityHint(byte[] psk_identity_hint);
                            /*0x380b9e8*/ byte[] GetPskIdentity();
                            /*0x380b9e8*/ byte[] GetPsk();
                        }

                        interface TlsPskIdentityManager
                        {
                        }

                        class TlsPskKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity m_pskIdentity;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentityManager m_pskIdentityManager;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier m_dhGroupVerifier;
                            /*0x38*/ byte[] m_psk_identity_hint;
                            /*0x40*/ byte[] m_psk;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_dhConfig;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_ecConfig;
                            /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement m_agreement;
                            /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor m_serverEncryptor;
                            /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_preMasterSecret;

                            static /*0x3f19fa0*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f1a01c*/ TlsPskKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier);
                            /*0x3f1a030*/ TlsPskKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentity pskIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskIdentityManager pskIdentityManager, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsDHGroupVerifier dhGroupVerifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                            /*0x3f1a0d4*/ void SkipServerCredentials();
                            /*0x3f1a120*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f1a22c*/ bool get_RequiresServerKeyExchange();
                            /*0x3f1a24c*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f1a66c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f1a6a4*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f1acc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                            /*0x3f1aedc*/ void GenerateEphemeralDH(System.IO.Stream output);
                            /*0x3f1afb8*/ void GenerateEphemeralECDH(System.IO.Stream output);
                            /*0x3f1b094*/ byte[] GenerateOtherSecret(int pskLength);
                            /*0x3f1b28c*/ void ProcessEphemeralDH(byte[] y);
                            /*0x3f1b338*/ void ProcessEphemeralECDH(byte[] point);
                        }

                        class TlsRsaKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor m_serverEncryptor;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret m_preMasterSecret;

                            static /*0x3f1b400*/ int CheckKeyExchange(int keyExchange);
                            /*0x3f1b470*/ TlsRsaKeyExchange(int keyExchange);
                            /*0x3f1b4a0*/ void SkipServerCredentials();
                            /*0x3f1b4d8*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f1b5a4*/ short[] GetClientCertificateTypes();
                            /*0x3f1b614*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f1b668*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f1b6e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        interface TlsServerCertificate
                        {
                        }

                        class TlsServerCertificateImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsServerCertificate
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate m_certificate;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus m_certificateStatus;

                            /*0x3f1b704*/ TlsServerCertificateImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate certificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus certificateStatus);
                        }

                        interface TlsSession
                        {
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters ExportSessionParameters();
                            /*0x380b9e8*/ byte[] get_SessionID();
                            /*0x380cb08*/ void Invalidate();
                            /*0x380b128*/ bool get_IsResumable();
                        }

                        class TlsSessionImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession
                        {
                            /*0x10*/ byte[] m_sessionID;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters m_sessionParameters;
                            /*0x20*/ bool m_resumable;

                            /*0x3f1b748*/ TlsSessionImpl(byte[] sessionID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters sessionParameters);
                            /*0x3f1b89c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters ExportSessionParameters();
                            /*0x3f1b96c*/ byte[] get_SessionID();
                            /*0x3f1ba24*/ void Invalidate();
                            /*0x3f1bad4*/ bool get_IsResumable();
                        }

                        interface TlsSrpConfigVerifier
                        {
                            /*0x380b2f0*/ bool Accept(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                        }

                        interface TlsSrpIdentity
                        {
                            /*0x380b9e8*/ byte[] GetSrpIdentity();
                            /*0x380b9e8*/ byte[] GetSrpPassword();
                        }

                        class TlsSrpKeyExchange : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.AbstractTlsKeyExchange
                        {
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity m_srpIdentity;
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier m_srpConfigVerifier;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate m_serverCertificate;
                            /*0x38*/ byte[] m_srpSalt;
                            /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client m_srpClient;
                            /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Server m_srpServer;
                            /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_srpPeerCredentials;

                            static /*0x3f1bb94*/ int CheckKeyExchange(int keyExchange);
                            static /*0x3f1c0c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePublicValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f1bc08*/ TlsSrpKeyExchange(int keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpIdentity srpIdentity, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSrpConfigVerifier srpConfigVerifier);
                            /*0x3f1bc68*/ void SkipServerCredentials();
                            /*0x3f1bcb4*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            /*0x3f1bd28*/ bool get_RequiresServerKeyExchange();
                            /*0x3f1bd30*/ void ProcessServerKeyExchange(System.IO.Stream input);
                            /*0x3f1c18c*/ void ProcessClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials clientCredentials);
                            /*0x3f1c1c4*/ void GenerateClientKeyExchange(System.IO.Stream output);
                            /*0x3f1c4d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GeneratePreMasterSecret();
                        }

                        class TlsSrpUtilities
                        {
                            static /*0x3efe19c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReadSrpParameter(System.IO.Stream input);
                            static /*0x3f1c438*/ void WriteSrpParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, System.IO.Stream output);
                        }

                        class TlsStream : System.IO.Stream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol m_handler;
                            /*0x30*/ byte[] oneByteBuf;

                            /*0x3f14be4*/ TlsStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsProtocol handler);
                            /*0x3f1c6fc*/ bool get_CanRead();
                            /*0x3f1c704*/ bool get_CanSeek();
                            /*0x3f1c70c*/ bool get_CanWrite();
                            /*0x3f1c714*/ void Dispose(bool disposing);
                            /*0x3f1c75c*/ void Flush();
                            /*0x3f1c780*/ long get_Length();
                            /*0x3f1c7b8*/ long get_Position();
                            /*0x3f1c7f0*/ void set_Position(long value);
                            /*0x3f1c828*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3f1c84c*/ int Read(System.Span<byte> buffer);
                            /*0x3f1c870*/ int ReadByte();
                            /*0x3f1c8d0*/ long Seek(long offset, System.IO.SeekOrigin origin);
                            /*0x3f1c908*/ void SetLength(long value);
                            /*0x3f1c940*/ void Write(byte[] buffer, int offset, int count);
                            /*0x3f1c964*/ void Write(System.ReadOnlySpan<byte> buffer);
                            /*0x3f1c988*/ void WriteByte(byte value);
                        }

                        class TlsUtilities
                        {
                            static /*0x0*/ byte[] DowngradeTlsV11;
                            static /*0x8*/ byte[] DowngradeTlsV12;
                            static /*0x10*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CertSigAlgOids;
                            static /*0x18*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> DefaultSupportedSigAlgs;
                            static /*0x20*/ byte[] EmptyBytes;
                            static /*0x28*/ short[] EmptyShorts;
                            static /*0x30*/ int[] EmptyInts;
                            static /*0x38*/ long[] EmptyLongs;
                            static /*0x40*/ string[] EmptyStrings;
                            static /*0x48*/ short MinimumHashStrict;
                            static /*0x4a*/ short MinimumHashPreferred;

                            static /*0x3f26830*/ TlsUtilities();
                            static /*0x3f1c9c8*/ void AddCertSigAlgOid(System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHash);
                            static /*0x3f1ca88*/ void AddCertSigAlgOid(System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, short hashAlgorithm, short signatureAlgorithm);
                            static /*0x3f1cb38*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CreateCertSigAlgOids();
                            static /*0x3f1d0d4*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> CreateDefaultSupportedSigAlgs();
                            static /*0x3f1da74*/ void CheckUint8(short i);
                            static /*0x3f1db04*/ void CheckUint8(int i);
                            static /*0x3efdccc*/ void CheckUint16(int i);
                            static /*0x3f1db9c*/ void CheckUint16(long i);
                            static /*0x3f1dc34*/ void CheckUint24(int i);
                            static /*0x3f1dcd0*/ void CheckUint24(long i);
                            static /*0x3efd488*/ bool IsValidUint8(short i);
                            static /*0x3f1db90*/ bool IsValidUint8(int i);
                            static /*0x3efd498*/ bool IsValidUint16(int i);
                            static /*0x3f1dc28*/ bool IsValidUint16(long i);
                            static /*0x3f1dcc0*/ bool IsValidUint24(int i);
                            static /*0x3f1dd5c*/ bool IsValidUint24(long i);
                            static /*0x3f1dd6c*/ bool IsValidUint32(long i);
                            static /*0x3f032b8*/ bool IsSsl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f14b64*/ bool IsTlsV11(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f1dd7c*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f1ddfc*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f02514*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f1ded0*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3efd534*/ void WriteUint8(short i, System.IO.Stream output);
                            static /*0x3f1dfa4*/ void WriteUint8(int i, System.IO.Stream output);
                            static /*0x3f1dfd0*/ void WriteUint8(short i, byte[] buf, int offset);
                            static /*0x3f12f30*/ void WriteUint8(int i, byte[] buf, int offset);
                            static /*0x3f1dffc*/ void WriteUint8(int i, System.Span<byte> buf);
                            static /*0x3efdd58*/ void WriteUint16(int i, System.IO.Stream output);
                            static /*0x3f13b48*/ void WriteUint16(int i, byte[] buf, int offset);
                            static /*0x3f1e014*/ void WriteUint16(int i, System.Span<byte> buf);
                            static /*0x3f1e03c*/ void WriteUint24(int i, System.IO.Stream output);
                            static /*0x3f1e0a4*/ void WriteUint24(int i, byte[] buf, int offset);
                            static /*0x3f1e108*/ void WriteUint32(long i, System.IO.Stream output);
                            static /*0x3f1e188*/ void WriteUint64(long i, byte[] buf, int offset);
                            static /*0x3f0e3e8*/ void WriteOpaque8(byte[] buf, System.IO.Stream output);
                            static /*0x3f1e278*/ void WriteOpaque8(System.ReadOnlySpan<byte> data, System.Span<byte> buf);
                            static /*0x3efd560*/ void WriteOpaque16(byte[] buf, System.IO.Stream output);
                            static /*0x3f19f10*/ void WriteOpaque24(byte[] buf, System.IO.Stream output);
                            static /*0x3f1e360*/ void WriteUint8Array(short[] u8s, System.IO.Stream output);
                            static /*0x3f1e420*/ void WriteUint8Array(short[] u8s, byte[] buf, int offset);
                            static /*0x3f1e4dc*/ void WriteUint8ArrayWithUint8Length(short[] u8s, System.IO.Stream output);
                            static /*0x3f1e564*/ void WriteUint8ArrayWithUint8Length(short[] u8s, byte[] buf, int offset);
                            static /*0x3f1e5f0*/ void WriteUint16Array(int[] u16s, System.IO.Stream output);
                            static /*0x3f1e6a0*/ void WriteUint16Array(int[] u16s, byte[] buf, int offset);
                            static /*0x3f1e75c*/ void WriteUint16ArrayWithUint16Length(int[] u16s, System.IO.Stream output);
                            static /*0x3f1e7dc*/ void WriteUint16ArrayWithUint16Length(int[] u16s, byte[] buf, int offset);
                            static /*0x3f13504*/ byte[] DecodeOpaque16(byte[] buf, int minLength);
                            static /*0x3f1342c*/ short DecodeUint8(byte[] buf);
                            static /*0x3f13950*/ short[] DecodeUint8ArrayWithUint8Length(byte[] buf);
                            static /*0x3f13610*/ int DecodeUint16(byte[] buf);
                            static /*0x3f192b8*/ byte[] EncodeOpaque8(byte[] buf);
                            static /*0x3f127d4*/ byte[] EncodeOpaque16(byte[] buf);
                            static /*0x3f18b44*/ byte[] EncodeUint8(short u8);
                            static /*0x3f1273c*/ byte[] EncodeUint8ArrayWithUint8Length(short[] u8s);
                            static /*0x3f128e8*/ byte[] EncodeUint16(int u16);
                            static /*0x3f12e94*/ byte[] EncodeUint16ArrayWithUint16Length(int[] u16s);
                            static /*0x3f1e934*/ int ReadInt32(byte[] buf, int offset);
                            static /*0x3efd15c*/ short ReadUint8(System.IO.Stream input);
                            static /*0x3f15578*/ short ReadUint8(byte[] buf, int offset);
                            static /*0x3efd0d8*/ int ReadUint16(System.IO.Stream input);
                            static /*0x3f1e870*/ int ReadUint16(byte[] buf, int offset);
                            static /*0x3f1e9a8*/ int ReadUint24(System.IO.Stream input);
                            static /*0x3f08a08*/ long ReadUint32(System.IO.Stream input);
                            static /*0x3efcf34*/ byte[] ReadFully(int length, System.IO.Stream input);
                            static /*0x3f17850*/ void ReadFully(System.Span<byte> buf, System.IO.Stream input);
                            static /*0x3f08ad0*/ byte[] ReadOpaque8(System.IO.Stream input);
                            static /*0x3efe234*/ byte[] ReadOpaque8(System.IO.Stream input, int minLength);
                            static /*0x3efd010*/ byte[] ReadOpaque8(System.IO.Stream input, int minLength, int maxLength);
                            static /*0x3f086c0*/ byte[] ReadOpaque16(System.IO.Stream input);
                            static /*0x3efd690*/ byte[] ReadOpaque16(System.IO.Stream input, int minLength);
                            static /*0x3f19788*/ byte[] ReadOpaque24(System.IO.Stream input, int minLength);
                            static /*0x3f1ea4c*/ short[] ReadUint8Array(int count, System.IO.Stream input);
                            static /*0x3f1eb1c*/ short[] ReadUint8ArrayWithUint8Length(System.IO.Stream input, int minLength);
                            static /*0x3f13880*/ int[] ReadUint16Array(int count, System.IO.Stream input);
                            static /*0x3f13ab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadVersion(byte[] buf, int offset);
                            static /*0x3efce68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion ReadVersion(System.IO.Stream input);
                            static /*0x3f132a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadAsn1Object(byte[] encoding);
                            static /*0x3f1335c*/ void RequireDerEncoding(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable asn1, byte[] encoding);
                            static /*0x3f191c4*/ void WriteGmtUnixTime(byte[] buf, int offset);
                            static /*0x3f1ebd8*/ void WriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, System.IO.Stream output);
                            static /*0x3f12f5c*/ void WriteVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] buf, int offset);
                            static /*0x3f1ec40*/ void AddIfSupported(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedAlgs, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm alg);
                            static /*0x3f1ed80*/ void AddIfSupported(System.Collections.Generic.IList<int> supportedGroups, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int namedGroup);
                            static /*0x3f1eec0*/ void AddIfSupported(System.Collections.Generic.IList<int> supportedGroups, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] namedGroups);
                            static /*0x3907c14*/ bool AddToSet<T>(System.Collections.Generic.IList<T> s, T i);
                            static /*0x3f1ef78*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetDefaultSupportedSignatureAlgorithms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f1efd8*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetSupportedSignatureAlgorithms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> candidates);
                            static /*0x3f02eb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner);
                            static /*0x3f05104*/ byte[] GetExtensionData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int extensionType);
                            static /*0x3f07bb8*/ bool HasExpectedEmptyExtensionData(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int extensionType, short alertDescription);
                            static /*0x3f03d30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession ImportSession(byte[] sessionID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SessionParameters sessionParameters);
                            static /*0x3f0b6d0*/ bool IsExtendedMasterSecretOptionalTls(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion[] activeProtocolVersions);
                            static /*0x3f1f40c*/ bool IsNullOrContainsNull(object[] array);
                            static /*0x381ac0c*/ bool IsNullOrEmpty<T>(T[] array);
                            static /*0x381ac0c*/ bool IsNullOrEmpty<T>(System.Collections.Generic.IList<T> v);
                            static /*0x3f0af64*/ bool IsSignatureAlgorithmsExtensionAllowed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f1f458*/ short GetLegacySignatureAlgorithmServer(int keyExchangeAlgorithm);
                            static /*0x3f1f498*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> GetLegacySupportedSignatureAlgorithms();
                            static /*0x3f12978*/ void EncodeSupportedSignatureAlgorithms(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, System.IO.Stream output);
                            static /*0x3f136e0*/ System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> ParseSupportedSignatureAlgorithms(System.IO.Stream input);
                            static /*0x3f1f678*/ void VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm);
                            static /*0x3f02fd8*/ void VerifySupportedSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm, short alertDescription);
                            static /*0x3f1f6e0*/ bool ContainsSignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAlgorithm);
                            static /*0x3f1f9e0*/ bool ContainsAnySignatureAlgorithm(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedSignatureAlgorithms, short signatureAlgorithm);
                            static /*0x3f1fcd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret Prf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string asciiLabel, byte[] seed, int length);
                            static /*0x3f1fdac*/ byte[] Clone(byte[] data);
                            static /*0x3f1fe60*/ bool ConstantTimeAreEqual(int len, byte[] a, int aOff, byte[] b, int bOff);
                            static /*0x3f1e8b0*/ byte[] CopyOfRangeExact(byte[] original, int from, int to);
                            static /*0x3f1feec*/ byte[] Concat(byte[] a, byte[] b);
                            static /*0x3f1ff90*/ byte[] CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, byte[] enc);
                            static /*0x3f2000c*/ byte[] CalculateEndPointHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, byte[] enc, int encOff, int encLen);
                            static /*0x3f20608*/ byte[] CalculateFinishedHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret baseKey, byte[] transcriptHash);
                            static /*0x3f20684*/ byte[] CalculateFinishedHmac(int prfCryptoHashAlgorithm, int prfHashLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret baseKey, byte[] transcriptHash);
                            static /*0x3f19348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret preMasterSecret);
                            static /*0x3f20914*/ byte[] CalculatePskBinder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, bool isExternalPsk, int pskCryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret earlySecret, byte[] transcriptHash);
                            static /*0x3f178f0*/ byte[] CalculateVerifyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, bool isServer);
                            static /*0x3f06100*/ void Establish13PhaseSecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret pskEarlySecret, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret sharedSecret);
                            static /*0x3f20dc4*/ void Establish13TrafficSecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] transcriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret phaseSecret, string clientLabel, string serverLabel, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x3f01354*/ void Establish13PhaseApplication(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] serverFinishedTranscriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x3f06728*/ void Establish13PhaseHandshake(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] serverHelloTranscriptHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.RecordStream recordStream);
                            static /*0x3f18bd4*/ void Update13TrafficSecretLocal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f1827c*/ void Update13TrafficSecretPeer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f20f48*/ void Update13TrafficSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, bool forServer);
                            static /*0x3f210ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret Update13TrafficSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                            static /*0x3f211b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOidForHashAlgorithm(short hashAlgorithm);
                            static /*0x3f2136c*/ int GetPrfAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, int cipherSuite);
                            static /*0x3f21570*/ int GetPrfAlgorithm13(int cipherSuite);
                            static /*0x3f215ac*/ int[] GetPrfAlgorithms13(int[] cipherSuites);
                            static /*0x3f217ec*/ byte[] CalculateSignatureHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm algorithm, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer buf);
                            static /*0x3f21bc8*/ void SendSignatureInput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer buf, System.IO.Stream output);
                            static /*0x3f03908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned GenerateCertificateVerifyClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner clientAuthSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm clientAuthAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamSigner clientAuthStreamSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f010d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned Generate13CertificateVerify(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f21d28*/ byte[] Generate13CertificateVerify(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner credentialedSigner, string contextString, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3f09004*/ void Verify13CertificateVerifyServer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify certificateVerify);
                            static /*0x3f22234*/ void Verify13CertificateVerify(System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm> supportedAlgorithms, string contextString, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate certificate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateVerify certificateVerify);
                            static /*0x3f22130*/ byte[] GetCertificateVerifyHeader(string contextString);
                            static /*0x3f0c7fc*/ void VerifyServerKeyExchangeSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, System.IO.Stream signatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate serverCertificate, byte[] extraSignatureInput, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigestInputBuffer digestBuffer);
                            static /*0x3f031f0*/ void TrackHashAlgorithmClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3907c14*/ System.Collections.Generic.IList<T> VectorOfOne<T>(T obj);
                            static /*0x3f2267c*/ int GetCipherType(int cipherSuite);
                            static /*0x3f226d4*/ int GetEncryptionAlgorithm(int cipherSuite);
                            static /*0x3f22770*/ int GetEncryptionAlgorithmType(int encryptionAlgorithm);
                            static /*0x3f0db40*/ int GetKeyExchangeAlgorithm(int cipherSuite);
                            static /*0x3f22790*/ System.Collections.Generic.IList<int> GetKeyExchangeAlgorithms(int[] cipherSuites);
                            static /*0x3f228c4*/ int GetMacAlgorithm(int cipherSuite);
                            static /*0x3f22954*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion GetMinimumVersion(int cipherSuite);
                            static /*0x3f22ad0*/ System.Collections.Generic.IList<int> GetNamedGroupRoles(int[] cipherSuites);
                            static /*0x3f22b28*/ System.Collections.Generic.IList<int> GetNamedGroupRoles(System.Collections.Generic.IList<int> keyExchangeAlgorithms);
                            static /*0x3f07ae4*/ bool IsBlockCipherSuite(int cipherSuite);
                            static /*0x3f04c78*/ bool IsValidCipherSuiteSelection(int[] offeredCipherSuites, int cipherSuite);
                            static /*0x3f053cc*/ bool IsValidKeyShareSelection(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion negotiatedVersion, int[] clientSupportedGroups, System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> clientAgreements, int keyShareGroup);
                            static /*0x3f225c8*/ bool IsValidSignatureAlgorithmForServerKeyExchange(short signatureAlgorithm, int keyExchangeAlgorithm);
                            static /*0x3f0523c*/ bool IsValidVersionForCipherSuite(int cipherSuite, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                            static /*0x3f22f50*/ int[] GetSupportedCipherSuites(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] suites);
                            static /*0x3f22fbc*/ int[] GetSupportedCipherSuites(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] suites, int suitesOff, int suitesCount);
                            static /*0x3f23134*/ bool IsSupportedCipherSuite(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int cipherSuite);
                            static /*0x3f232dc*/ bool IsSupportedKeyExchange(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int keyExchangeAlgorithm);
                            static /*0x3f238f8*/ bool HasAnyRsaSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto);
                            static /*0x3f00edc*/ byte[] GetCurrentPrfHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f20524*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, short hashAlgorithm);
                            static /*0x3f21b10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm);
                            static /*0x3f23c04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange CreateKeyExchangeClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, int keyExchange);
                            static /*0x3f04280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange InitKeyExchangeClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client);
                            static /*0x3f036d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher InitCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                            static /*0x3f24420*/ void CheckTlsFeatures(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f03e38*/ void ProcessServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateStatus serverCertificateStatus, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f09244*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest ValidateCertificateRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsKeyExchange keyExchange);
                            static /*0x3f24a98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest NormalizeCertificateRequest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest, short[] validClientCertificateTypes);
                            static /*0x3f24b90*/ bool ContainsAll(short[] container, short[] elements);
                            static /*0x3f24c5c*/ short[] RetainAll(short[] retainer, short[] elements);
                            static /*0x3f24de4*/ short[] Truncate(short[] a, int n);
                            static /*0x3f21760*/ int[] Truncate(int[] a, int n);
                            static /*0x3f0d1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedAgreement RequireAgreementCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f0cd00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner RequireSignerCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f24e70*/ void CheckDowngradeMarker(byte[] randomBlock, byte[] downgradeMarker);
                            static /*0x3f07808*/ void CheckDowngradeMarker(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version, byte[] randomBlock);
                            static /*0x3f24f28*/ bool areCertificatesEqual(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate b);
                            static /*0x3f251a0*/ bool isSafeRenegotiationServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Certificate serverCertificate);
                            static /*0x3f025bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication ReceiveServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f08c04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication Receive13ServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.IO.MemoryStream buf, System.Collections.Generic.IDictionary<int, System.Byte[]> serverExtensions);
                            static /*0x3f0bab8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication Skip13ServerCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext);
                            static /*0x3f0b3b0*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> AddKeyShareToClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f09d60*/ System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> AddKeyShareToClientHelloRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, int keyShareGroup);
                            static /*0x3f25290*/ void CollectKeyShares(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, int[] supportedGroups, System.Collections.Generic.IList<int> keyShareGroups, System.Collections.Generic.IDictionary<int, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement> clientAgreements, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.KeyShareEntry> clientShares);
                            static /*0x3f259f0*/ void WriteEncryptedPms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, byte[] encryptedPms, System.IO.Stream output);
                            static /*0x3f0acec*/ byte[] GetSessionID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsSession tlsSession);
                            static /*0x3f029f0*/ void AdjustTranscriptForRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsHandshakeHash handshakeHash);
                            static /*0x3f02ddc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials EstablishClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x3f00ff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner Establish13ClientCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsAuthentication clientAuthentication, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x3f0aff4*/ void EstablishClientSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f03cb4*/ void EstablishServerSigAlgs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.CertificateRequest certificateRequest);
                            static /*0x3f25ab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials ValidateCredentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f25ba8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentialedSigner Validate13Credentials(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsCredentials credentials);
                            static /*0x3f0573c*/ void NegotiatedCipherSuite(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, int cipherSuite);
                            static /*0x3f25c54*/ void NegotiatedVersion(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters);
                            static /*0x3f05578*/ void NegotiatedVersionTlsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client);
                            static /*0x3f20d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string label, byte[] transcriptHash);
                            static /*0x3f20c70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveSecret(int prfCryptoHashAlgorithm, int prfHashLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, string label, byte[] transcriptHash);
                            static /*0x3f1720c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GetSessionMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret masterSecret);
                            static /*0x3f19688*/ bool IsPermittedExtensionType13(int handshakeType, int extensionType);
                            static /*0x3f04d08*/ void CheckExtensionData13(System.Collections.Generic.IDictionary<int, System.Byte[]> extensions, int handshakeType, short alertDescription);
                            static /*0x3f1aa7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateEncryptedPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor, System.IO.Stream output);
                            static /*0x3f25d2c*/ void AddPreSharedKeyToClientExtensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f0b0b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig AddPreSharedKeyToClientHello(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions, int[] offeredCipherSuites);
                            static /*0x3f0990c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig AddPreSharedKeyToClientHelloRetry(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClientContext clientContext, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.OfferedPsks.BindersConfig clientBinders, System.Collections.Generic.IDictionary<int, System.Byte[]> clientExtensions);
                            static /*0x3f265f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GetPskEarlySecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk psk);
                            static /*0x3f2630c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret[] GetPskEarlySecrets(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks);
                            static /*0x3f25f40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPskExternal[] GetPskExternalsClient(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsClient client, int[] offeredCipherSuites);
                            static /*0x3f26448*/ System.Collections.Generic.IList<int> GetPskIndices(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsPsk[] psks, int prfAlgorithm);
                        }

                        class TrustedAuthority
                        {
                            /*0x10*/ short m_identifierType;
                            /*0x18*/ object m_identifier;

                            /*0x3f26a80*/ void Encode(System.IO.Stream output);
                        }

                        namespace Crypto
                        {
                            class DHGroup
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x28*/ int l;

                                /*0x3f26c58*/ DHGroup(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int l);
                                /*0x3f26cc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3f26ccc*/ int get_L();
                                /*0x3f26cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3f26cdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                            }

                            class DHStandardGroups
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                                static /*0x8*/ string rfc2409_768_p;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc2409_768;
                                static /*0x18*/ string rfc2409_1024_p;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc2409_1024;
                                static /*0x28*/ string rfc3526_1536_p;
                                static /*0x30*/ int rfc3526_1536_l;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_1536;
                                static /*0x40*/ string rfc3526_2048_p;
                                static /*0x48*/ int rfc3526_2048_l;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_2048;
                                static /*0x58*/ string rfc3526_3072_p;
                                static /*0x60*/ int rfc3526_3072_l;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_3072;
                                static /*0x70*/ string rfc3526_4096_p;
                                static /*0x78*/ int rfc3526_4096_l;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_4096;
                                static /*0x88*/ string rfc3526_6144_p;
                                static /*0x90*/ int rfc3526_6144_l;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_6144;
                                static /*0xa0*/ string rfc3526_8192_p;
                                static /*0xa8*/ int rfc3526_8192_l;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc3526_8192;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc4306_768;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc4306_1024;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc5996_768;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc5996_1024;
                                static /*0xd8*/ string rfc7919_ffdhe2048_p;
                                static /*0xe0*/ int rfc7919_ffdhe2048_l;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe2048;
                                static /*0xf0*/ string rfc7919_ffdhe3072_p;
                                static /*0xf8*/ int rfc7919_ffdhe3072_l;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe3072;
                                static /*0x108*/ string rfc7919_ffdhe4096_p;
                                static /*0x110*/ int rfc7919_ffdhe4096_l;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe4096;
                                static /*0x120*/ string rfc7919_ffdhe6144_p;
                                static /*0x128*/ int rfc7919_ffdhe6144_l;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe6144;
                                static /*0x138*/ string rfc7919_ffdhe8192_p;
                                static /*0x140*/ int rfc7919_ffdhe8192_l;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup rfc7919_ffdhe8192;

                                static /*0x3f270d0*/ DHStandardGroups();
                                static /*0x3f26ce4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3f26d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup SafePrimeGen2(string hexP);
                                static /*0x3f26dec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup SafePrimeGen2(string hexP, int l);
                            }

                            class Srp6Group
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;

                                /*0x3f27724*/ Srp6Group(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3f27768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3f27770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            }

                            class Srp6StandardGroups
                            {
                                static /*0x0*/ string rfc5054_1024_N;
                                static /*0x8*/ string rfc5054_1024_g;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_1024;
                                static /*0x18*/ string rfc5054_1536_N;
                                static /*0x20*/ string rfc5054_1536_g;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_1536;
                                static /*0x30*/ string rfc5054_2048_N;
                                static /*0x38*/ string rfc5054_2048_g;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_2048;
                                static /*0x48*/ string rfc5054_3072_N;
                                static /*0x50*/ string rfc5054_3072_g;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_3072;
                                static /*0x60*/ string rfc5054_4096_N;
                                static /*0x68*/ string rfc5054_4096_g;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_4096;
                                static /*0x78*/ string rfc5054_6144_N;
                                static /*0x80*/ string rfc5054_6144_g;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_6144;
                                static /*0x90*/ string rfc5054_8192_N;
                                static /*0x98*/ string rfc5054_8192_g;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group rfc5054_8192;

                                static /*0x3f278b4*/ Srp6StandardGroups();
                                static /*0x3f27778*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3f2780c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Srp6Group FromNG(string hexN, string hexG);
                            }

                            interface Tls13Verifier
                            {
                                /*0x380b9e8*/ System.IO.Stream get_Stream();
                                /*0x380b2f0*/ bool VerifySignature(byte[] signature);
                            }

                            interface TlsAgreement
                            {
                                /*0x380b9e8*/ byte[] GenerateEphemeral();
                                /*0x380d83c*/ void ReceivePeerValue(byte[] peerValue);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                            }

                            interface TlsCertificate
                            {
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor CreateEncryptor(int tlsCertificateRole);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier CreateVerifier(short signatureAlgorithm);
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier CreateVerifier(int signatureScheme);
                                /*0x380b9e8*/ byte[] GetEncoded();
                                /*0x380bb68*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                /*0x380b9e8*/ string get_SigAlgOid();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CheckUsageInRole(int tlsCertificateRole);
                            }

                            interface TlsCipher
                            {
                                /*0x380b6cc*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                /*0x380b6cc*/ int GetPlaintextLimit(int ciphertextLimit);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                /*0x380cb08*/ void RekeyDecoder();
                                /*0x380cb08*/ void RekeyEncoder();
                                /*0x380b128*/ bool get_UsesOpaqueRecordType();
                            }

                            interface TlsCrypto
                            {
                                /*0x380b128*/ bool HasDHAgreement();
                                /*0x380b128*/ bool HasECDHAgreement();
                                /*0x380b228*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                /*0x380b228*/ bool HasMacAlgorithm(int macAlgorithm);
                                /*0x380b228*/ bool HasNamedGroup(int namedGroup);
                                /*0x380b128*/ bool HasRsaEncryption();
                                bool HasSignatureAlgorithm(short signatureAlgorithm);
                                /*0x380b2f0*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                /*0x380b128*/ bool HasSrpAuthentication();
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret AdoptSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                            }

                            class TlsCryptoParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext m_context;

                                /*0x3f27c10*/ TlsCryptoParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.TlsContext context);
                                /*0x3f27c40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters get_SecurityParameters();
                                /*0x3f27ce4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion get_ServerVersion();
                                /*0x3f27d88*/ bool get_IsServer();
                                /*0x3f27e2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator get_NonceGenerator();
                            }

                            class TlsCryptoUtilities
                            {
                                static /*0x0*/ byte[] Tls13Prefix;

                                static /*0x3f288a8*/ TlsCryptoUtilities();
                                static /*0x3f27ed0*/ int GetHash(short hashAlgorithm);
                                static /*0x3f27f50*/ int GetHashForHmac(int macAlgorithm);
                                static /*0x3f27fdc*/ int GetHashForPrf(int prfAlgorithm);
                                static /*0x3f280c8*/ int GetHashOutputSize(int cryptoHashAlgorithm);
                                static /*0x3f28120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOidForHash(int cryptoHashAlgorithm);
                                static /*0x3f282a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpandLabel(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm, string label, byte[] context, int length);
                                static /*0x3f283d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpandLabel(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> context, int length);
                            }

                            class TlsDecodeResult
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int off;
                                /*0x1c*/ int len;
                                /*0x20*/ short contentType;
                                /*0x22*/ bool fromBufferPool;

                                /*0x3f28948*/ TlsDecodeResult(byte[] buf, int off, int len, short contentType);
                            }

                            class TlsDHConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup m_explicitGroup;
                                /*0x18*/ int m_namedGroup;
                                /*0x1c*/ bool m_padded;

                                /*0x3f2899c*/ TlsDHConfig(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup explicitGroup);
                                /*0x3f289dc*/ TlsDHConfig(int namedGroup, bool padded);
                                /*0x3f28a1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.DHGroup get_ExplicitGroup();
                                /*0x3f28a24*/ int get_NamedGroup();
                                /*0x3f28a2c*/ bool get_IsPadded();
                            }

                            interface TlsDHDomain
                            {
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateDH();
                            }

                            class TlsECConfig
                            {
                                /*0x10*/ int m_namedGroup;

                                /*0x3f28a34*/ TlsECConfig(int namedGroup);
                                /*0x3f28a5c*/ int get_NamedGroup();
                            }

                            interface TlsECDomain
                            {
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                            }

                            struct TlsEncodeResult
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int off;
                                /*0x1c*/ int len;
                                /*0x20*/ short recordType;
                                /*0x22*/ bool fromBufferPool;

                                /*0x3f28a64*/ TlsEncodeResult(byte[] buf, int off, int len, short recordType);
                            }

                            interface TlsEncryptor
                            {
                                byte[] Encrypt(byte[] input, int inOff, int length);
                            }

                            interface TlsHash
                            {
                                void Update(byte[] input, int inOff, int length);
                                void Update(System.ReadOnlySpan<byte> input);
                                /*0x380b9e8*/ byte[] CalculateHash();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                                /*0x380cb08*/ void Reset();
                            }

                            class TlsHashSink : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash m_hash;

                                /*0x3f28aa4*/ TlsHashSink(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash hash);
                                /*0x3f28ad4*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3f28bc0*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x3f28ca4*/ void WriteByte(byte value);
                            }

                            interface TlsHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                            {
                                /*0x380b6a0*/ int get_InternalBlockSize();
                            }

                            interface TlsMac
                            {
                                void SetKey(byte[] key, int keyOff, int keyLen);
                                void SetKey(System.ReadOnlySpan<byte> key);
                                void Update(byte[] input, int inOff, int length);
                                void Update(System.ReadOnlySpan<byte> input);
                                /*0x380b9e8*/ byte[] CalculateMac();
                                /*0x380b6a0*/ int get_MacLength();
                                /*0x380cb08*/ void Reset();
                            }

                            interface TlsNonceGenerator
                            {
                                /*0x380ba90*/ byte[] GenerateNonce(int size);
                            }

                            class TlsNullNullCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNullNullCipher Instance;

                                static /*0x3f28ff8*/ TlsNullNullCipher();
                                /*0x3f28ff0*/ TlsNullNullCipher();
                                /*0x3f28d94*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                /*0x3f28d9c*/ int GetPlaintextLimit(int ciphertextLimit);
                                /*0x3f28da4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                /*0x3f28ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                /*0x3f28f70*/ void RekeyDecoder();
                                /*0x3f28fac*/ void RekeyEncoder();
                                /*0x3f28fe8*/ bool get_UsesOpaqueRecordType();
                            }

                            interface TlsSecret
                            {
                                byte[] CalculateHmac(int cryptoHashAlgorithm, byte[] buf, int off, int len);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                /*0x380cb08*/ void Destroy();
                                /*0x380bb68*/ byte[] Encrypt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor);
                                /*0x380b9e8*/ byte[] Extract();
                                void ExtractTo(System.Span<byte> output);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                /*0x380b128*/ bool IsAlive();
                            }

                            interface TlsSrp6Client
                            {
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                /*0x380bd40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password);
                            }

                            interface TlsSrp6Server
                            {
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger clientA);
                            }

                            class TlsSrpConfig
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] m_explicitNG;

                                /*0x3f29188*/ TlsSrpConfig();
                                /*0x3f29060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetExplicitNG();
                                /*0x3f290d8*/ void SetExplicitNG(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] explicitNG);
                            }

                            interface TlsStreamSigner
                            {
                                /*0x380b9e8*/ System.IO.Stream get_Stream();
                                /*0x380b9e8*/ byte[] GetSignature();
                            }

                            interface TlsStreamVerifier
                            {
                                /*0x380b9e8*/ System.IO.Stream get_Stream();
                                /*0x380b128*/ bool IsVerified();
                            }

                            interface TlsVerifier
                            {
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                /*0x380b32c*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                            }

                            namespace Impl
                            {
                                class AbstractTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCrypto
                                {
                                    /*0x3f2929c*/ AbstractTlsCrypto();
                                    /*0x380b128*/ bool HasDHAgreement();
                                    /*0x380b128*/ bool HasECDHAgreement();
                                    /*0x380b228*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                    /*0x380b228*/ bool HasMacAlgorithm(int macAlgorithm);
                                    /*0x380b228*/ bool HasNamedGroup(int namedGroup);
                                    /*0x380b128*/ bool HasRsaEncryption();
                                    bool HasSignatureAlgorithm(short signatureAlgorithm);
                                    /*0x380b2f0*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                    /*0x380b128*/ bool HasSrpAuthentication();
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion clientVersion);
                                    /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_SecureRandom();
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                    /*0x3f29190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret AdoptSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                    /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                    /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac(int macAlgorithm);
                                    /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmacForHash(int cryptoHashAlgorithm);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                    /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                                }

                                class AbstractTlsSecret : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret
                                {
                                    /*0x10*/ byte[] m_data;

                                    static /*0x3f292a4*/ byte[] CopyData(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret other);
                                    /*0x3f292c4*/ AbstractTlsSecret(byte[] data);
                                    /*0x3f292f4*/ void CheckAlive();
                                    /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto get_Crypto();
                                    /*0x3f29350*/ byte[] CalculateHmac(int cryptoHashAlgorithm, byte[] buf, int off, int len);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                    /*0x3f295f4*/ void Destroy();
                                    /*0x3f296d8*/ byte[] Encrypt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor encryptor);
                                    /*0x3f29858*/ byte[] Extract();
                                    /*0x3f29938*/ void ExtractTo(System.Span<byte> output);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                    Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                    /*0x3f29aa8*/ bool IsAlive();
                                    /*0x3f29b68*/ byte[] CopyData();
                                }

                                class LegacyTls13Verifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier
                                {
                                    /*0x10*/ int m_signatureScheme;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier m_tls13Verifier;

                                    /*0x3f29c74*/ LegacyTls13Verifier(int signatureScheme, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier tls13Verifier);
                                    /*0x3f29d80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                    /*0x3f29ed8*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);

                                    class TlsStreamVerifierImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier m_tls13Verifier;
                                        /*0x18*/ byte[] m_signature;

                                        /*0x3f29e94*/ TlsStreamVerifierImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier tls13Verifier, byte[] signature);
                                        /*0x3f29f10*/ System.IO.Stream get_Stream();
                                        /*0x3f29fb0*/ bool IsVerified();
                                    }
                                }

                                class RsaUtilities
                                {
                                    static /*0x0*/ byte[] RSAPSSParams_256_A;
                                    static /*0x8*/ byte[] RSAPSSParams_384_A;
                                    static /*0x10*/ byte[] RSAPSSParams_512_A;
                                    static /*0x18*/ byte[] RSAPSSParams_256_B;
                                    static /*0x20*/ byte[] RSAPSSParams_384_B;
                                    static /*0x28*/ byte[] RSAPSSParams_512_B;

                                    static /*0x3f2a05c*/ RsaUtilities();
                                    static /*0x3f2a6dc*/ bool SupportsPkcs1(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                    static /*0x3f2a7b8*/ bool SupportsPss_Pss(short signatureAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                    static /*0x3f2aa80*/ bool SupportsPss_Rsae(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier pubKeyAlgID);
                                }

                                class TlsAeadCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ int m_keySize;
                                    /*0x1c*/ int m_macSize;
                                    /*0x20*/ int m_fixed_iv_length;
                                    /*0x24*/ int m_record_iv_length;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_decryptCipher;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl m_encryptCipher;
                                    /*0x38*/ byte[] m_decryptNonce;
                                    /*0x40*/ byte[] m_encryptNonce;
                                    /*0x48*/ bool m_isTlsV13;
                                    /*0x4c*/ int m_nonceMode;

                                    static /*0x3f2b6e8*/ int GetNonceMode(bool isTLSv13, int aeadType);
                                    /*0x3f2ab08*/ TlsAeadCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl decryptCipher, int keySize, int macSize, int aeadType);
                                    /*0x3f2ba9c*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x3f2bab8*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x3f2bad4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x3f2c0bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int ciphertextOffset, int ciphertextLength);
                                    /*0x3f2c6d8*/ void RekeyDecoder();
                                    /*0x3f2c748*/ void RekeyEncoder();
                                    /*0x3f2c7b4*/ bool get_UsesOpaqueRecordType();
                                    /*0x3f2c7bc*/ byte[] GetAdditionalData(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int ciphertextLength, int plaintextLength);
                                    /*0x3f2c910*/ void RekeyCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SecurityParameters securityParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, bool serverSecret);
                                    /*0x3f2c998*/ void Setup13Cipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl cipher, byte[] nonce, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret, int cryptoHashAlgorithm);
                                }

                                interface TlsAeadCipherImpl
                                {
                                    void SetKey(byte[] key, int keyOff, int keyLen);
                                    void SetKey(System.ReadOnlySpan<byte> key);
                                    void Init(byte[] nonce, int macSize, byte[] additionalData);
                                    /*0x380b6cc*/ int GetOutputSize(int inputLength);
                                    int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                    /*0x380cb08*/ void Reset();
                                }

                                class TlsBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ byte[] m_randomData;
                                    /*0x20*/ bool m_encryptThenMac;
                                    /*0x21*/ bool m_useExplicitIV;
                                    /*0x22*/ bool m_acceptExtraPadding;
                                    /*0x23*/ bool m_useExtraPadding;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_decryptCipher;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl m_encryptCipher;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_readMac;
                                    /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac m_writeMac;

                                    /*0x3f2ccac*/ TlsBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl encryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl decryptCipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac, int cipherKeySize);
                                    /*0x3f2df70*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x3f2e0bc*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x3f2e220*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x3f2e884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                    /*0x3f2ed90*/ void RekeyDecoder();
                                    /*0x3f2edcc*/ void RekeyEncoder();
                                    /*0x3f2ee08*/ bool get_UsesOpaqueRecordType();
                                    /*0x3f2ee10*/ int CheckPaddingConstantTime(byte[] buf, int off, int len, int blockSize, int macSize);
                                    /*0x3f2efb0*/ int ChooseExtraPadBlocks(int max);
                                    /*0x3f2f0ec*/ int GetCiphertextLength(int blockSize, int macSize, int maxPadding, int plaintextLength);
                                }

                                interface TlsBlockCipherImpl
                                {
                                    void SetKey(System.ReadOnlySpan<byte> key);
                                    void Init(System.ReadOnlySpan<byte> iv);
                                    int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                    /*0x380b6a0*/ int GetBlockSize();
                                }

                                class TlsImplUtilities
                                {
                                    static /*0x3f2f130*/ bool IsSsl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                    static /*0x3f2dd58*/ bool IsTlsV11(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x3f2b5e8*/ bool IsTlsV12(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x3f2b668*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                    static /*0x3f2f158*/ bool IsTlsV13(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                    static /*0x3f2b750*/ void CalculateKeyBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, System.Span<byte> keyBlock);
                                }

                                class TlsNullCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac m_readMac;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteHmac m_writeMac;

                                    /*0x3f2f178*/ TlsNullCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac clientMac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac serverMac);
                                    /*0x3f2f834*/ int GetCiphertextDecodeLimit(int plaintextLimit);
                                    /*0x3f2f860*/ int GetPlaintextLimit(int ciphertextLimit);
                                    /*0x3f2f88c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncodeResult EncodePlaintext(long seqNo, short contentType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, int headerAllocation, System.ReadOnlySpan<byte> plaintext);
                                    /*0x3f2fabc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDecodeResult DecodeCiphertext(long seqNo, short recordType, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion recordVersion, byte[] ciphertext, int offset, int len);
                                    /*0x3f2fc44*/ void RekeyDecoder();
                                    /*0x3f2fc80*/ void RekeyEncoder();
                                    /*0x3f2fcbc*/ bool get_UsesOpaqueRecordType();
                                }

                                class TlsSuiteHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsSuiteMac
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters m_cryptoParams;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac m_mac;
                                    /*0x20*/ int m_digestBlockSize;
                                    /*0x24*/ int m_digestOverhead;
                                    /*0x28*/ int m_macSize;

                                    static /*0x3f2fcc4*/ int GetMacSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac mac);
                                    /*0x3f2ddd8*/ TlsSuiteHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac mac);
                                    /*0x3f2fdc8*/ int get_Size();
                                    /*0x3f2fdd0*/ byte[] CalculateMac(long seqNo, short type, byte[] msg, int msgOff, int msgLen);
                                    /*0x3f2fecc*/ byte[] CalculateMac(long seqNo, short type, System.ReadOnlySpan<byte> message);
                                    /*0x3f301b8*/ byte[] CalculateMacConstantTime(long seqNo, short type, byte[] msg, int msgOff, int msgLen, int fullLength, byte[] dummyData);
                                    /*0x3f30400*/ int GetDigestBlockCount(int inputLength);
                                    /*0x3f30410*/ byte[] Truncate(byte[] bs);
                                }

                                interface TlsSuiteMac
                                {
                                    /*0x380b6a0*/ int get_Size();
                                    byte[] CalculateMac(long seqNo, short type, byte[] message, int offset, int length);
                                    byte[] CalculateMac(long seqNo, short type, System.ReadOnlySpan<byte> message);
                                    byte[] CalculateMacConstantTime(long seqNo, short type, byte[] message, int offset, int length, int expectedLength, byte[] randomData);
                                }

                                namespace BC
                                {
                                    class BcChaCha20Poly1305 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                                    {
                                        static /*0x0*/ byte[] Zeroes;
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.ChaCha7539Engine m_cipher;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.Poly1305 m_mac;
                                        /*0x20*/ bool m_isEncrypting;
                                        /*0x24*/ int m_additionalDataLength;

                                        static /*0x3f30e24*/ BcChaCha20Poly1305();
                                        /*0x3f30498*/ BcChaCha20Poly1305(bool isEncrypting);
                                        /*0x3f30554*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x3f30874*/ int GetOutputSize(int inputLength);
                                        /*0x3f3088c*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                        /*0x3f30b64*/ void Reset();
                                        /*0x3f30b98*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f30ca4*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f309b8*/ void InitMac();
                                        /*0x3f307a0*/ void UpdateMac(byte[] buf, int off, int len);
                                    }

                                    class BcSsl3Hmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                                    {
                                        static /*0x0*/ byte[] IPAD;
                                        static /*0x8*/ byte[] OPAD;
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest m_digest;
                                        /*0x18*/ int m_padLength;
                                        /*0x20*/ byte[] m_secret;

                                        static /*0x3f31a04*/ BcSsl3Hmac();
                                        static /*0x3f3196c*/ byte[] GenPad(byte b, int count);
                                        /*0x3f30e98*/ BcSsl3Hmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x3f30f6c*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f3100c*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f31088*/ void Update(byte[] input, int inOff, int len);
                                        /*0x3f3114c*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x3f31208*/ byte[] CalculateMac();
                                        /*0x3f31654*/ int get_InternalBlockSize();
                                        /*0x3f316f8*/ int get_MacLength();
                                        /*0x3f31798*/ void Reset();
                                        /*0x3f312e8*/ void DoFinal(byte[] output, int outOff);
                                    }

                                    class BcTls13Verifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IO.SignerSink m_output;

                                        /*0x3f31a88*/ BcTls13Verifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner verifier);
                                        /*0x3f31b48*/ System.IO.Stream get_Stream();
                                        /*0x3f31b50*/ bool VerifySignature(byte[] signature);
                                    }

                                    class BcTlsAeadCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipherImpl
                                    {
                                        /*0x10*/ bool m_isEncrypting;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher m_cipher;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                                        /*0x3f31c04*/ BcTlsAeadCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher cipher, bool isEncrypting);
                                        /*0x3f31c40*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f31cc8*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f31d40*/ void Init(byte[] nonce, int macSize, byte[] additionalData);
                                        /*0x3f31e4c*/ int GetOutputSize(int inputLength);
                                        /*0x3f31ef8*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x3f32108*/ void Reset();
                                    }

                                    class BcTlsBlockCipherImpl : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsBlockCipherImpl
                                    {
                                        /*0x10*/ bool m_isEncrypting;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher m_cipher;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;

                                        /*0x3f321ac*/ BcTlsBlockCipherImpl(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, bool isEncrypting);
                                        /*0x3f321e8*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f32260*/ void Init(System.ReadOnlySpan<byte> iv);
                                        /*0x3f3235c*/ int DoFinal(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);
                                        /*0x3f324cc*/ int GetBlockSize();
                                    }

                                    class BcTlsCertificate : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsRawKeyCertificate
                                    {
                                        /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure m_certificate;

                                        static /*0x3f32570*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure ParseCertificate(byte[] encoding);
                                        /*0x3f32688*/ BcTlsCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] encoding);
                                        /*0x3f326b8*/ BcTlsCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure certificate);
                                        /*0x3f3274c*/ byte[] GetEncoded();
                                        /*0x3f327a0*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                        /*0x3f32858*/ string get_SigAlgOid();
                                        /*0x3f3288c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                        /*0x3f328b4*/ bool SupportsKeyUsage(int keyUsageBits);
                                    }

                                    class BcTlsCrypto : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom m_entropySource;

                                        /*0x3f32924*/ BcTlsCrypto(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom entropySource);
                                        /*0x3f329a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret AdoptLocalSecret(byte[] data);
                                        /*0x3f32a4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_SecureRandom();
                                        /*0x3f32a54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CreateCertificate(short type, byte[] encoding);
                                        /*0x3f32b88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm);
                                        /*0x3f32d20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain CreateDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x3f32de4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain CreateECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        /*0x3f32f7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator CreateNonceGenerator(System.ReadOnlySpan<byte> additionalSeedMaterial);
                                        /*0x3f33190*/ bool HasDHAgreement();
                                        /*0x3f33198*/ bool HasECDHAgreement();
                                        /*0x3f331a0*/ bool HasEncryptionAlgorithm(int encryptionAlgorithm);
                                        /*0x3f331c4*/ bool HasMacAlgorithm(int macAlgorithm);
                                        /*0x3f331d4*/ bool HasNamedGroup(int namedGroup);
                                        /*0x3f3322c*/ bool HasRsaEncryption();
                                        /*0x3f33234*/ bool HasSignatureAlgorithm(short signatureAlgorithm);
                                        /*0x3f33258*/ bool HasSignatureAndHashAlgorithm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.SignatureAndHashAlgorithm sigAndHashAlgorithm);
                                        /*0x3f3329c*/ bool HasSrpAuthentication();
                                        /*0x3f332a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CreateSecret(byte[] data);
                                        /*0x3f33320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret GenerateRsaPreMasterSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.ProtocolVersion version);
                                        /*0x3f333f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CloneDigest(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x3f3377c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CreateDigest(int cryptoHashAlgorithm);
                                        /*0x3f33968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CreateHash(int cryptoHashAlgorithm);
                                        /*0x3f33a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateBlockCipher(int encryptionAlgorithm);
                                        /*0x3f33af8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher blockCipher);
                                        /*0x3f33b54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCbcBlockCipher(int encryptionAlgorithm);
                                        /*0x3f33b88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateChaCha20Poly1305(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x3f33c38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aes_Ccm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f33d68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aes_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f33e98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Aria_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f33fc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_Camellia_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int cipherKeySize, int macSize);
                                        /*0x3f340f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCipher CreateCipher_Cbc(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int cipherKeySize, int macAlgorithm);
                                        /*0x3f34278*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_SM4_Ccm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x3f34398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsAeadCipher CreateCipher_SM4_Gcm(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams);
                                        /*0x3f344b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.TlsNullCipher CreateNullCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int macAlgorithm);
                                        /*0x3f3456c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAesEngine();
                                        /*0x3f34574*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateAriaEngine();
                                        /*0x3f345c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateCamelliaEngine();
                                        /*0x3f3461c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateDesEdeEngine();
                                        /*0x3f34670*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateSeedEngine();
                                        /*0x3f346c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateSM4Engine();
                                        /*0x3f34718*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateCcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                                        /*0x3f34774*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateGcmMode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher engine);
                                        /*0x3f347d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aes_Ccm();
                                        /*0x3f34804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aes_Gcm();
                                        /*0x3f34838*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Aria_Gcm();
                                        /*0x3f3486c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_Camellia_Gcm();
                                        /*0x3f348a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_SM4_Ccm();
                                        /*0x3f348d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher CreateAeadCipher_SM4_Gcm();
                                        /*0x3f34908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac(int macAlgorithm);
                                        /*0x3f349f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmacForHash(int cryptoHashAlgorithm);
                                        /*0x3f34ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateHmac_Ssl(int macAlgorithm);
                                        /*0x3f34be8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac CreateMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCryptoParameters cryptoParams, int macAlgorithm);
                                        /*0x3f34c30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client CreateSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrpConfig srpConfig);
                                        /*0x3f34da8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfInit(int cryptoHashAlgorithm);
                                    }

                                    class BcTlsDH : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain m_domain;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair m_localKeyPair;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters m_peerPublicKey;

                                        /*0x3f34e44*/ BcTlsDH(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDHDomain domain);
                                        /*0x3f34e74*/ byte[] GenerateEphemeral();
                                        /*0x3f34f34*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f34f68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcTlsDHDomain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig m_config;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters m_domainParameters;

                                        static /*0x3f35008*/ byte[] EncodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dh, bool padded, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3f350b0*/ int GetValueLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dh);
                                        static /*0x3f35114*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey, bool padded);
                                        static /*0x3f351e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters GetDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x3f32d88*/ BcTlsDHDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsDHConfig dhConfig);
                                        /*0x3f352fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey);
                                        /*0x3f35348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateDH();
                                        /*0x3f353b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DecodeParameter(byte[] encoding);
                                        /*0x3f3547c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters DecodePublicKey(byte[] encoding);
                                        /*0x3f355ac*/ byte[] EncodePublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters publicKey);
                                        /*0x3f355e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                    }

                                    class BcTlsDsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier
                                    {
                                        /*0x3f356bc*/ BcTlsDsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters publicKey);
                                        /*0x3f356c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x3f35718*/ short get_SignatureAlgorithm();
                                    }

                                    class BcTlsDssVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x3f356c0*/ BcTlsDssVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicKey);
                                        /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x380b674*/ short get_SignatureAlgorithm();
                                        /*0x3f35824*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsECDH : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain m_domain;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair m_localKeyPair;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters m_peerPublicKey;

                                        /*0x3f35b30*/ BcTlsECDH(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsECDomain domain);
                                        /*0x3f35b60*/ byte[] GenerateEphemeral();
                                        /*0x3f35c20*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f35c54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcTlsECDomain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig m_config;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters m_domainParameters;

                                        static /*0x3f35cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateECDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        static /*0x3f35df0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters GetDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        static /*0x3f35e10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters GetDomainParameters(int namedGroup);
                                        /*0x3f32f20*/ BcTlsECDomain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECConfig ecConfig);
                                        /*0x3f35f10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret CalculateECDHAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privateKey, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x3f35f18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                        /*0x3f35f80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(byte[] encoding);
                                        /*0x3f35fac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters DecodePublicKey(byte[] encoding);
                                        /*0x3f36118*/ byte[] EncodePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                        /*0x3f36140*/ byte[] EncodePublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x3f36160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                    }

                                    class BcTlsECDsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsDssVerifier
                                    {
                                        /*0x3f36230*/ BcTlsECDsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters publicKey);
                                        /*0x3f36234*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa CreateDsaImpl();
                                        /*0x3f36288*/ short get_SignatureAlgorithm();
                                    }

                                    class BcTlsHash : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ int m_cryptoHashAlgorithm;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest m_digest;

                                        /*0x3f339d0*/ BcTlsHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, int cryptoHashAlgorithm);
                                        /*0x3f36290*/ BcTlsHash(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                        /*0x3f362e4*/ void Update(byte[] data, int offSet, int length);
                                        /*0x3f363a8*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x3f36464*/ byte[] CalculateHash();
                                        /*0x3f365a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHash CloneHash();
                                        /*0x3f36644*/ void Reset();
                                    }

                                    class BcTlsHmac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsHmac, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsMac
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.HMac m_hmac;

                                        /*0x3f34ab4*/ BcTlsHmac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Macs.HMac hmac);
                                        /*0x3f366e8*/ void SetKey(byte[] key, int keyOff, int keyLen);
                                        /*0x3f36780*/ void SetKey(System.ReadOnlySpan<byte> key);
                                        /*0x3f36808*/ void Update(byte[] input, int inOff, int length);
                                        /*0x3f3682c*/ void Update(System.ReadOnlySpan<byte> input);
                                        /*0x3f36850*/ byte[] CalculateMac();
                                        /*0x3f368e4*/ int get_InternalBlockSize();
                                        /*0x3f3699c*/ int get_MacLength();
                                        /*0x3f369bc*/ void Reset();
                                    }

                                    class BcTlsNonceGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsNonceGenerator
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator m_randomGenerator;

                                        /*0x3f33160*/ BcTlsNonceGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator randomGenerator);
                                        /*0x3f369e0*/ byte[] GenerateNonce(int size);
                                    }

                                    class BcTlsRawKeyCertificate : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo m_keyInfo;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters m_pubKeyDH;
                                        /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters m_pubKeyEC;
                                        /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters m_pubKeyRsa;

                                        /*0x3f32b54*/ BcTlsRawKeyCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] encoding);
                                        /*0x3f32708*/ BcTlsRawKeyCertificate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                                        /*0x3f36ac0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor CreateEncryptor(int tlsCertificateRole);
                                        /*0x3f36bf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier CreateVerifier(short signatureAlgorithm);
                                        /*0x3f36eec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Tls13Verifier CreateVerifier(int signatureScheme);
                                        /*0x3f374ac*/ byte[] GetEncoded();
                                        /*0x3f37500*/ byte[] GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier extensionOid);
                                        /*0x3f37508*/ string get_SigAlgOid();
                                        /*0x3f37510*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetSigAlgParams();
                                        /*0x3f37518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters GetPubKeyDH();
                                        /*0x3f3764c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters GetPubKeyDss();
                                        /*0x3f37780*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters GetPubKeyEC();
                                        /*0x3f378b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters GetPubKeyEd25519();
                                        /*0x3f379cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters GetPubKeyEd448();
                                        /*0x3f37ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters GetPubKeyRsa();
                                        /*0x3f37c18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsCertificate CheckUsageInRole(int tlsCertificateRole);
                                        /*0x3f37cec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPublicKey();
                                        /*0x3f39380*/ bool SupportsKeyUsage(int keyUsageBits);
                                        /*0x3f39388*/ bool SupportsRsa_Pkcs1();
                                        /*0x3f393ec*/ bool SupportsRsa_Pss_Pss(short signatureAlgorithm);
                                        /*0x3f39458*/ bool SupportsRsa_Pss_Rsae();
                                        /*0x3f394bc*/ void ValidateKeyUsage(int keyUsageBits);
                                        /*0x3f39514*/ void ValidateRsa_Pkcs1();
                                        /*0x3f3956c*/ void ValidateRsa_Pss_Pss(short signatureAlgorithm);
                                        /*0x3f395c4*/ void ValidateRsa_Pss_Rsae();
                                    }

                                    class BcTlsRsaEncryptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsEncryptor
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters m_pubKeyRsa;

                                        static /*0x3f3961c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters CheckPublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters pubKeyRsa);
                                        /*0x3f36ba4*/ BcTlsRsaEncryptor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters pubKeyRsa);
                                        /*0x3f39698*/ byte[] Encrypt(byte[] input, int inOff, int length);
                                    }

                                    class BcTlsRsaPssVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x20*/ int m_signatureScheme;

                                        /*0x3f36e70*/ BcTlsRsaPssVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey, int signatureScheme);
                                        /*0x3f3987c*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsRsaVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsVerifier
                                    {
                                        /*0x3f36e6c*/ BcTlsRsaVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey);
                                        /*0x3f39a98*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcTlsSecret : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsSecret
                                    {
                                        static /*0x0*/ byte[] Ssl3Const;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        static /*0x3f3bf4c*/ BcTlsSecret();
                                        static /*0x3f39dd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsSecret Convert(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret secret);
                                        static /*0x3f39f2c*/ byte[] GenerateSsl3Constants();
                                        /*0x3f32a08*/ BcTlsSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, byte[] data);
                                        /*0x3f39fd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, string label, byte[] seed, int length);
                                        /*0x3f3a1f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret DeriveUsingPrf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                        /*0x3f3a448*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExpand(int cryptoHashAlgorithm, System.ReadOnlySpan<byte> info, int length);
                                        /*0x3f3aa5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret HkdfExtract(int cryptoHashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret ikm);
                                        /*0x3f3acf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto get_Crypto();
                                        /*0x3f3acf8*/ void HmacHash(int cryptoHashAlgorithm, byte[] secret, int secretOff, int secretLen, byte[] seed, byte[] output);
                                        /*0x3f3af6c*/ byte[] Prf(int prfAlgorithm, string label, byte[] seed, int length);
                                        /*0x3f3b068*/ byte[] Prf(int prfAlgorithm, System.ReadOnlySpan<char> label, System.ReadOnlySpan<byte> seed, int length);
                                        /*0x3f3b250*/ byte[] Prf_Ssl(byte[] seed, int length);
                                        /*0x3f3b308*/ byte[] Prf_Ssl(System.ReadOnlySpan<byte> seed, int length);
                                        /*0x3f3bba8*/ byte[] Prf_1_0(byte[] labelSeed, int length);
                                        /*0x3f3bd00*/ byte[] Prf_1_2(int prfAlgorithm, byte[] labelSeed, int length);
                                        /*0x3f3bdd8*/ void UpdateMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac mac);
                                    }

                                    class BcTlsSrp6Client : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSrp6Client
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client m_srp6Client;

                                        /*0x3f34d78*/ BcTlsSrp6Client(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client srpClient);
                                        /*0x3f3bfa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                        /*0x3f3c080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] srpSalt, byte[] identity, byte[] password);
                                    }

                                    class BcTlsVerifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsVerifier
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter m_publicKey;

                                        /*0x3f35720*/ BcTlsVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicKey);
                                        /*0x3f3c0a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsStreamVerifier GetStreamVerifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned);
                                        /*0x3f3c0a8*/ bool VerifyRawSignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.DigitallySigned digitallySigned, byte[] hash);
                                    }

                                    class BcX25519 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ byte[] m_privateKey;
                                        /*0x20*/ byte[] m_peerPublicKey;

                                        /*0x3f3c0e0*/ BcX25519(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f3c17c*/ byte[] GenerateEphemeral();
                                        /*0x3f3c21c*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f3c288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcX25519Domain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        /*0x3f32ec0*/ BcX25519Domain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f3c42c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                    }

                                    class BcX448 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;
                                        /*0x18*/ byte[] m_privateKey;
                                        /*0x20*/ byte[] m_peerPublicKey;

                                        /*0x3f3c488*/ BcX448(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f3c524*/ byte[] GenerateEphemeral();
                                        /*0x3f3c5c4*/ void ReceivePeerValue(byte[] peerValue);
                                        /*0x3f3c630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsSecret CalculateSecret();
                                    }

                                    class BcX448Domain : Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsECDomain
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto m_crypto;

                                        /*0x3f32ef0*/ BcX448Domain(Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.Impl.BC.BcTlsCrypto crypto);
                                        /*0x3f3c7d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Tls.Crypto.TlsAgreement CreateECDH();
                                    }
                                }
                            }
                        }
                    }

                    namespace Security
                    {
                        class DigestUtilities
                        {
                            static /*0x0*/ System.Collections.Generic.IDictionary<string, string> Aliases;
                            static /*0x8*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> Oids;

                            static /*0x3f3c830*/ DigestUtilities();
                            static /*0x3f407e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest GetDigest(string algorithm);

                            enum DigestAlgorithm
                            {
                                BLAKE2B_160 = 0,
                                BLAKE2B_256 = 1,
                                BLAKE2B_384 = 2,
                                BLAKE2B_512 = 3,
                                BLAKE2S_128 = 4,
                                BLAKE2S_160 = 5,
                                BLAKE2S_224 = 6,
                                BLAKE2S_256 = 7,
                                BLAKE3_256 = 8,
                                DSTU7564_256 = 9,
                                DSTU7564_384 = 10,
                                DSTU7564_512 = 11,
                                GOST3411 = 12,
                                GOST3411_2012_256 = 13,
                                GOST3411_2012_512 = 14,
                                KECCAK_224 = 15,
                                KECCAK_256 = 16,
                                KECCAK_288 = 17,
                                KECCAK_384 = 18,
                                KECCAK_512 = 19,
                                MD2 = 20,
                                MD4 = 21,
                                MD5 = 22,
                                NONE = 23,
                                RIPEMD128 = 24,
                                RIPEMD160 = 25,
                                RIPEMD256 = 26,
                                RIPEMD320 = 27,
                                SHA_1 = 28,
                                SHA_224 = 29,
                                SHA_256 = 30,
                                SHA_384 = 31,
                                SHA_512 = 32,
                                SHA_512_224 = 33,
                                SHA_512_256 = 34,
                                SHA3_224 = 35,
                                SHA3_256 = 36,
                                SHA3_384 = 37,
                                SHA3_512 = 38,
                                SHAKE128_256 = 39,
                                SHAKE256_512 = 40,
                                SM3 = 41,
                                TIGER = 42,
                                WHIRLPOOL = 43,
                            }
                        }

                        class GeneralSecurityException : System.Exception
                        {
                            /*0x3f41214*/ GeneralSecurityException();
                            /*0x3f4126c*/ GeneralSecurityException(string message);
                            /*0x3f412d4*/ GeneralSecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class InvalidKeyException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.KeyException
                        {
                            /*0x3f41354*/ InvalidKeyException();
                            /*0x3f4135c*/ InvalidKeyException(string message);
                            /*0x3f41364*/ InvalidKeyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class InvalidParameterException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.KeyException
                        {
                            /*0x3f4136c*/ InvalidParameterException();
                            /*0x3f41370*/ InvalidParameterException(string message);
                            /*0x3f41374*/ InvalidParameterException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class KeyException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.GeneralSecurityException
                        {
                            /*0x3f41358*/ KeyException();
                            /*0x3f41360*/ KeyException(string message);
                            /*0x3f41368*/ KeyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class PublicKeyFactory
                        {
                            static /*0x3f37db4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter CreateKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                            static /*0x3f4162c*/ byte[] GetRawKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo keyInfo);
                            static /*0x3f41378*/ bool IsPkcsDHParam(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                            static /*0x3f414b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters ReadPkcsDHParam(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algOid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                        }

                        class SecureRandom : System.Random
                        {
                            static /*0x0*/ long counter;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom MasterRandom;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom ArbitraryRandom;
                            static /*0x18*/ double DoubleScale;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator;

                            static /*0x3f424e0*/ SecureRandom();
                            static /*0x3f41850*/ long NextCounterValue();
                            static /*0x3f418a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator CreatePrng(string digestName, bool autoSeed);
                            static /*0x3f419f4*/ void AutoSeed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator, int seedLength);
                            /*0x3f41c74*/ SecureRandom();
                            /*0x3f41cec*/ SecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator);
                            /*0x3f41d64*/ SecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator, int autoSeedLengthInBytes);
                            /*0x3f41e10*/ int Next();
                            /*0x3f41e2c*/ int Next(int maxValue);
                            /*0x3f41f0c*/ int Next(int minValue, int maxValue);
                            /*0x3f41fcc*/ void NextBytes(byte[] buf);
                            /*0x3f42078*/ void NextBytes(System.Span<byte> buffer);
                            /*0x3f421f4*/ double NextDouble();
                            /*0x3f422a8*/ int NextInt();
                            /*0x3f423c4*/ long NextLong();
                        }

                        class SecurityUtilityException : System.Exception
                        {
                            /*0x3f42660*/ SecurityUtilityException();
                            /*0x3f411ac*/ SecurityUtilityException(string message);
                            /*0x3f426b8*/ SecurityUtilityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }
                    }

                    namespace Math
                    {
                        class BigInteger : System.IComparable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger>, System.IEquatable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger>
                        {
                            static /*0x0*/ int[][] primeLists;
                            static /*0x8*/ int[] primeProducts;
                            static /*0x10*/ int[] ZeroMagnitude;
                            static /*0x18*/ byte[] ZeroEncoding;
                            static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] SMALL_CONSTANTS;
                            static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Zero;
                            static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;
                            static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                            static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Three;
                            static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Four;
                            static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Ten;
                            static /*0x58*/ byte[] BitLengthTable;
                            static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix2;
                            static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix2E;
                            static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix8;
                            static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix8E;
                            static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix10;
                            static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix10E;
                            static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix16;
                            static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger radix16E;
                            static /*0xa0*/ int[] ExpWindowThresholds;
                            /*0x10*/ int[] magnitude;
                            /*0x18*/ int sign;
                            /*0x1c*/ int nBits;
                            /*0x20*/ int nBitLength;

                            static /*0x3f42738*/ BigInteger();
                            static /*0x3f44464*/ int GetByteLength(int nBits);
                            static /*0x3f4447c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Arbitrary(int sizeInBits);
                            static /*0x3f45528*/ int[] MakeMagnitude(byte[] bytes, int offset, int length);
                            static /*0x3f453a4*/ int[] MakeMagnitude(System.ReadOnlySpan<byte> bytes);
                            static /*0x3f45940*/ int[] AddMagnitudes(int[] a, int[] b);
                            static /*0x3f45db4*/ int BitCnt(int i);
                            static /*0x3f45de8*/ int CalcBitLength(int sign, int indx, int[] mag);
                            static /*0x3f4603c*/ int BitLen(byte b);
                            static /*0x3f45f18*/ int BitLen(int w);
                            static /*0x3f46184*/ int CompareTo(int xIndx, int[] x, int yIndx, int[] y);
                            static /*0x3f460dc*/ int CompareNoLeadingZeroes(int xIndx, int[] x, int yIndx, int[] y);
                            static /*0x3f47bfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ExtEuclid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u1Out);
                            static /*0x3f48030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPowBarrett(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            static /*0x3f48b40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ReduceBarrett(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger mr, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger yu);
                            static /*0x3f4843c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPowMonty(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, bool convert);
                            static /*0x3f48c54*/ int[] GetWindowList(int[] mag, int extraBits);
                            static /*0x3f499b0*/ int CreateWindowEntry(int mult, int zeroes);
                            static /*0x3f499cc*/ int[] Square(int[] w, int[] x);
                            static /*0x3f49b44*/ int[] Multiply(int[] x, int[] y, int[] z);
                            static /*0x3f4984c*/ void MontgomeryReduce(int[] x, int[] m, uint mDash);
                            static /*0x3f494bc*/ void MultiplyMonty(int[] a, int[] x, int[] y, int[] m, uint mDash, bool smallMontyModulus);
                            static /*0x3f49054*/ void SquareMonty(int[] a, int[] x, int[] m, uint mDash, bool smallMontyModulus);
                            static /*0x3f49c24*/ uint MultiplyMontyNIsOne(uint x, uint y, uint m, uint mDash);
                            static /*0x3f49cbc*/ int[] Remainder(int[] x, int[] y);
                            static /*0x3f46740*/ int[] ShiftLeft(int[] mag, int n);
                            static /*0x3f469fc*/ void ShiftRightInPlace(int start, int[] mag, int n);
                            static /*0x3f46968*/ void ShiftRightOneInPlace(int start, int[] mag);
                            static /*0x3f468c4*/ int[] Subtract(int xStart, int[] x, int yStart, int[] y);
                            static /*0x3f474e4*/ int[] doSubBigLil(int[] bigMag, int[] lilMag);
                            static /*0x3f4afc4*/ void ToString(System.Text.StringBuilder sb, int radix, System.Collections.Generic.IList<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger> moduli, int scale, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pos);
                            static /*0x3f4af64*/ void AppendZeroExtendedString(System.Text.StringBuilder sb, string s, int minLength);
                            static /*0x3f44164*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateUValueOf(ulong value);
                            static /*0x3f4b214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CreateValueOf(long value);
                            static /*0x3f416d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValueOf(long value);
                            /*0x3f44000*/ BigInteger(int signum, int[] mag, bool checkMag);
                            /*0x3f447a4*/ BigInteger(string value);
                            /*0x3f447ac*/ BigInteger(string str, int radix);
                            /*0x3f45050*/ BigInteger(byte[] bytes);
                            /*0x3f4506c*/ BigInteger(byte[] bytes, int offset, int length);
                            /*0x3f26d78*/ BigInteger(int sign, byte[] bytes);
                            /*0x3f45620*/ BigInteger(int sign, byte[] bytes, int offset, int length);
                            /*0x3f45778*/ BigInteger(int sign, System.ReadOnlySpan<byte> bytes);
                            /*0x3f44508*/ BigInteger(int sizeInBits, System.Random random);
                            /*0x3f44458*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
                            /*0x3f458bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Abs();
                            /*0x3f44fc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f45b24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger AddToMagnitude(int[] magToAdd);
                            /*0x3f45c98*/ int get_BitCount();
                            /*0x3f41654*/ int get_BitLength();
                            /*0x3f460b8*/ bool QuickPow2Check();
                            /*0x3f417a8*/ int CompareTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger other);
                            /*0x3f46278*/ int[] Divide(int[] x, int[] y);
                            /*0x3f46b08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f46ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DivideAndRemainder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f47130*/ bool Equals(object obj);
                            /*0x3f4725c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger other);
                            /*0x3f471c8*/ bool IsEqualMagnitude(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            /*0x3f4728c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Gcd(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f47384*/ int GetHashCode();
                            /*0x3f473e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Inc();
                            /*0x3f415e0*/ int get_IntValue();
                            /*0x3f475a0*/ int get_IntValueExact();
                            /*0x3f47608*/ long get_LongValue();
                            /*0x3f472f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Mod(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f478d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f47a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInversePow2(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f47df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModPow(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m);
                            /*0x3f49018*/ int GetMQuote();
                            /*0x3f44e00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                            /*0x3f48a10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Square();
                            /*0x3f458cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Negate();
                            /*0x3f45d9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Not();
                            /*0x3f4429c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Pow(int exp);
                            /*0x3f49c50*/ int Remainder(int m);
                            /*0x3f47674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Remainder(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            /*0x3f46fdc*/ int[] LastNBits(int n);
                            /*0x3f48e58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DivideWords(int w);
                            /*0x3f48f44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger RemainderWords(int w);
                            /*0x3f44cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ShiftLeft(int n);
                            /*0x3f26eb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ShiftRight(int n);
                            /*0x3f4a04c*/ int get_SignValue();
                            /*0x3f459d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n);
                            /*0x3f4a054*/ int GetLengthofByteArrayUnsigned();
                            /*0x3f4a0d0*/ byte[] ToByteArray();
                            /*0x3f4a3a8*/ byte[] ToByteArrayUnsigned();
                            /*0x3f4a3b0*/ void ToByteArrayUnsigned(System.Span<byte> output);
                            /*0x3f4a0d8*/ byte[] ToByteArray(bool unsigned);
                            /*0x3f4a3c0*/ void ToByteArray(bool unsigned, System.Span<byte> output);
                            /*0x3f4a804*/ string ToString();
                            /*0x3f4a80c*/ string ToString(int radix);
                            /*0x3f4b2bc*/ int GetLowestSetBit();
                            /*0x3f4b2d4*/ int GetLowestSetBitMaskFirst(int firstWordMask);
                            /*0x3f47d1c*/ bool TestBit(int n);
                            /*0x3f4b368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Or(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f4b5e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Xor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3f4b840*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SetBit(int n);
                            /*0x3f4b958*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FlipExistingBit(int n);
                        }

                        class Primes
                        {
                            static /*0x0*/ int SmallFactorLimit;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger One;
                            static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Two;
                            static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Three;

                            static /*0x3f4c844*/ Primes();
                            static /*0x3f4ba48*/ bool HasAnySmallFactors(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger candidate);
                            static /*0x3f4c48c*/ bool IsMRProbablePrime(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger candidate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, int iterations);
                            static /*0x3f4babc*/ void CheckCandidate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, string name);
                            static /*0x3f4bb40*/ bool ImplHasAnySmallFactors(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            static /*0x3f4c6f0*/ bool ImplMRProbablePrimeToBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger w, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger wSubOne, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m, int a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                        }

                        namespace Raw
                        {
                            class Bits
                            {
                                static /*0x3f4c908*/ uint BitPermuteStep(uint x, uint m, int s);
                                static /*0x3f4c924*/ ulong BitPermuteStep(ulong x, ulong m, int s);
                                static /*0x3f4c940*/ ulong BitPermuteStepSimple(ulong x, ulong m, int s);
                            }

                            class Interleave
                            {
                                static /*0x3f4c958*/ uint Expand8to16(uint x);
                                static /*0x3f4c978*/ ulong Expand32to64(uint x);
                                static /*0x3f4c9cc*/ void Expand64To128(ulong x, ulong[] z, int zOff);
                                static /*0x3f4ca74*/ void Expand64To128(ulong[] xs, int xsOff, int xsLen, ulong[] zs, int zsOff);
                                static /*0x3f4cae8*/ ulong Expand64To128Rev(ulong x, ref ulong low);
                                static /*0x3f4cb50*/ uint Shuffle2(uint x);
                                static /*0x3f4cba0*/ ulong Unshuffle(ulong x);
                                static /*0x3f4cbf8*/ ulong Unshuffle(ulong x, ref ulong even);
                                static /*0x3f4cc18*/ ulong Unshuffle(ulong x0, ulong x1, ref ulong even);
                            }

                            class Mod
                            {
                                static /*0x3f4cc54*/ void CheckedModOddInverse(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x3f4d2dc*/ uint Inverse32(uint d);
                                static /*0x3f4d304*/ ulong Inverse64(ulong d);
                                static /*0x3f4d334*/ uint ModOddInverse(uint[] m, uint[] x, uint[] z);
                                static /*0x3f4ccb0*/ uint ModOddInverse(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x3f4dc00*/ bool ModOddInverseVar(uint[] m, uint[] x, uint[] z);
                                static /*0x3f4dd1c*/ bool ModOddInverseVar(System.ReadOnlySpan<uint> m, System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                static /*0x3f4e7e8*/ uint[] Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, uint[] p);
                                static /*0x3f4e674*/ int Add30(int len30, System.Span<int> D, System.ReadOnlySpan<int> M);
                                static /*0x3f4d8a4*/ void CNegate30(int len30, int cond, System.Span<int> D);
                                static /*0x3f4d920*/ void CNormalize30(int len30, int condNegate, System.Span<int> D, System.ReadOnlySpan<int> M);
                                static /*0x3f4da44*/ void Decode30(int bits, System.ReadOnlySpan<int> x, System.Span<uint> z);
                                static /*0x3f4d56c*/ int Divsteps30(int delta, int f0, int g0, System.Span<int> t);
                                static /*0x3f4e46c*/ int Divsteps30Var(int eta, int f0, int g0, System.Span<int> t);
                                static /*0x3f4d450*/ void Encode30(int bits, System.ReadOnlySpan<uint> x, System.Span<int> z);
                                static /*0x3f4db5c*/ int EqualTo(int len, System.ReadOnlySpan<int> x, int y);
                                static /*0x3f4dbb8*/ int EqualToZero(int len, System.ReadOnlySpan<int> x);
                                static /*0x3f4d538*/ int GetMaximumDivsteps(int bits);
                                static /*0x3f4e780*/ bool IsOne(int len, System.ReadOnlySpan<int> x);
                                static /*0x3f4e610*/ bool IsZero(int len, System.ReadOnlySpan<int> x);
                                static /*0x3f4e710*/ int Negate30(int len30, System.Span<int> D);
                                static /*0x3f4d624*/ void UpdateDE30(int len30, System.Span<int> D, System.Span<int> E, System.ReadOnlySpan<int> t, int m0Inv32, System.ReadOnlySpan<int> M);
                                static /*0x3f4d7b0*/ void UpdateFG30(int len30, System.Span<int> F, System.Span<int> G, System.ReadOnlySpan<int> t);
                            }

                            class Nat
                            {
                                static /*0x3f4e9b8*/ uint Add(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x3f4ea4c*/ uint Add33To(int len, uint x, uint[] z);
                                static /*0x3f4eb08*/ uint AddBothTo(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x3f4eba4*/ uint AddTo(int len, uint[] x, uint[] z);
                                static /*0x3f4ec24*/ uint AddTo(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f4ecb4*/ uint AddWordAt(int len, uint x, uint[] z, int zPos);
                                static /*0x3f4ed08*/ uint AddWordTo(int len, uint x, uint[] z);
                                static /*0x3f4ed54*/ uint CAdd(int len, int mask, System.ReadOnlySpan<uint> x, System.ReadOnlySpan<uint> y, System.Span<uint> z);
                                static /*0x3f4edd4*/ int Compare(int len, uint[] x, uint[] y);
                                static /*0x3f4ee44*/ void Copy(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f4e908*/ uint[] Create(int len);
                                static /*0x3f4ee64*/ ulong[] Create64(int len);
                                static /*0x3f4eeac*/ int Dec(int len, uint[] z);
                                static /*0x3f4ef08*/ int DecAt(int len, uint[] z, int zPos);
                                static /*0x3f4ef60*/ bool Eq(int len, uint[] x, uint[] y);
                                static /*0x3f4efbc*/ uint[] FromBigInteger(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                static /*0x3f4f11c*/ void FromBigInteger(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, System.Span<uint> z);
                                static /*0x3f4f240*/ ulong[] FromBigInteger64(int bits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                static /*0x3f4f3a0*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f4f0d0*/ int GetLengthForBits(int bits);
                                static /*0x3f4f354*/ int GetLengthForBits64(int bits);
                                static /*0x3f4e950*/ bool Gte(int len, uint[] x, uint[] y);
                                static /*0x3f4f400*/ uint Inc(int len, uint[] z);
                                static /*0x3f4f45c*/ uint Inc(int len, uint[] x, uint[] z);
                                static /*0x3f4eab0*/ uint IncAt(int len, uint[] z, int zPos);
                                static /*0x3f4f530*/ uint IncAt(int len, uint[] z, int zOff, int zPos);
                                static /*0x3f4f590*/ bool IsOne(int len, uint[] x);
                                static /*0x3f4f608*/ bool IsZero(int len, uint[] x);
                                static /*0x3f4f67c*/ int LessThan(int len, uint[] x, uint[] y);
                                static /*0x3f4f6f8*/ uint Mul31BothAdd(int len, uint a, uint[] x, uint b, uint[] y, uint[] z, int zOff);
                                static /*0x3f4f7a8*/ uint MulWordAddTo(int len, uint x, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f4f830*/ uint ShiftDownBit(int len, System.Span<uint> z, uint c);
                                static /*0x3f4f878*/ uint ShiftDownBits(int len, uint[] z, int bits, uint c);
                                static /*0x3f4f8e8*/ uint ShiftDownBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff);
                                static /*0x3f4f974*/ uint ShiftDownWord(int len, uint[] z, uint c);
                                static /*0x3f4f9c0*/ uint ShiftUpBit(int len, uint[] x, uint c, uint[] z);
                                static /*0x3f4fae4*/ uint ShiftUpBit(int len, System.ReadOnlySpan<uint> x, uint c, System.Span<uint> z);
                                static /*0x3f4fc34*/ ulong ShiftUpBit64(int len, ulong[] x, int xOff, ulong c, ulong[] z, int zOff);
                                static /*0x3f4fd88*/ ulong ShiftUpBit64(int len, System.ReadOnlySpan<ulong> x, ulong c, System.Span<ulong> z);
                                static /*0x3f4fed8*/ uint ShiftUpBits(int len, uint[] z, int bits, uint c);
                                static /*0x3f4ff8c*/ uint ShiftUpBits(int len, System.Span<uint> z, int bits, uint c);
                                static /*0x3f500cc*/ uint ShiftUpBits(int len, uint[] x, int bits, uint c, uint[] z);
                                static /*0x3f501f8*/ uint ShiftUpBits(int len, System.ReadOnlySpan<uint> x, int bits, uint c, System.Span<uint> z);
                                static /*0x3f50398*/ ulong ShiftUpBits64(int len, ulong[] z, int zOff, int bits, ulong c);
                                static /*0x3f50460*/ ulong ShiftUpBits64(int len, System.Span<ulong> z, int bits, ulong c);
                                static /*0x3f505a0*/ ulong ShiftUpBits64(int len, ulong[] x, int xOff, int bits, ulong c, ulong[] z, int zOff);
                                static /*0x3f506fc*/ ulong ShiftUpBits64(int len, System.ReadOnlySpan<ulong> x, int bits, ulong c, System.Span<ulong> z);
                                static /*0x3f5089c*/ int Sub(int len, uint[] x, uint[] y, uint[] z);
                                static /*0x3f50930*/ int Sub33From(int len, uint x, uint[] z);
                                static /*0x3f50994*/ int SubFrom(int len, uint[] x, uint[] z);
                                static /*0x3f50a14*/ int SubFrom(int len, uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f50aa4*/ int SubWordFrom(int len, uint x, uint[] z);
                                static /*0x3f50af0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(int len, uint[] x);
                                static /*0x3f50b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(int len, System.ReadOnlySpan<uint> x);
                                static /*0x3f50e24*/ void Xor64(int len, ulong[] x, ulong[] y, ulong[] z);
                                static /*0x3f511b0*/ void Xor64(int len, ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                static /*0x3f50fa8*/ void Xor64(int len, System.ReadOnlySpan<ulong> x, System.ReadOnlySpan<ulong> y, System.Span<ulong> z);
                                static /*0x3f51378*/ void XorTo64(int len, ulong[] x, ulong[] z);
                                static /*0x3f5162c*/ void XorTo64(int len, ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f5148c*/ void XorTo64(int len, System.ReadOnlySpan<ulong> x, System.Span<ulong> z);
                                static /*0x3f51770*/ void Zero(int len, uint[] z);
                            }

                            class Nat128
                            {
                                static /*0x3f51838*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f51914*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f51a0c*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f51ac8*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3f51b18*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f51b8c*/ uint[] Create();
                                static /*0x3f51bd0*/ ulong[] Create64();
                                static /*0x3f51c14*/ uint[] CreateExt();
                                static /*0x3f51c58*/ ulong[] CreateExt64();
                                static /*0x3f51c9c*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f51d04*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3f51d68*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f51dcc*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f51e38*/ bool IsOne(uint[] x);
                                static /*0x3f51ea4*/ bool IsOne64(ulong[] x);
                                static /*0x3f51ef0*/ bool IsZero(uint[] x);
                                static /*0x3f51f44*/ bool IsZero64(ulong[] x);
                                static /*0x3f51f98*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f520cc*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f521dc*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f52380*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5245c*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f52510*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x3f525f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat160
                            {
                                static /*0x3f526d0*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f527dc*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5290c*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f529f0*/ uint[] Create();
                                static /*0x3f52a34*/ uint[] CreateExt();
                                static /*0x3f52a78*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f52ad8*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f52b3c*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f52ba8*/ bool IsOne(uint[] x);
                                static /*0x3f52c14*/ bool IsZero(uint[] x);
                                static /*0x3f52c68*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f52dd4*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f52f10*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f530a8*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f53178*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f5323c*/ uint MulWordsAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f532e0*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f534f0*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f535fc*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f536d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                            }

                            class Nat192
                            {
                                static /*0x3f537b8*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f538f4*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f53a5c*/ uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn);
                                static /*0x3f53bc8*/ uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff);
                                static /*0x3f53d54*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f53e60*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3f53ecc*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f53f70*/ uint[] Create();
                                static /*0x3f53fb4*/ ulong[] Create64();
                                static /*0x3f53ff8*/ uint[] CreateExt();
                                static /*0x3f5403c*/ ulong[] CreateExt64();
                                static /*0x3f54080*/ bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f54344*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f543a4*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3f54404*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f54468*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f540fc*/ bool Gte(uint[] x, int xOff, uint[] y, int yOff);
                                static /*0x3f544d4*/ bool IsOne(uint[] x);
                                static /*0x3f54540*/ bool IsOne64(ulong[] x);
                                static /*0x3f545ac*/ bool IsZero(uint[] x);
                                static /*0x3f54600*/ bool IsZero64(ulong[] x);
                                static /*0x3f54654*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f547f0*/ void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff);
                                static /*0x3f54a8c*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f54bf0*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f54dd4*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f54ec0*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f54f84*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f55208*/ void Square(uint[] x, int xOff, uint[] zz, int zzOff);
                                static /*0x3f55558*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f54178*/ int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f55694*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f55798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x3f55878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat224
                            {
                                static /*0x3f55958*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f55ac4*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f55c64*/ void Copy(uint[] x, uint[] z);
                                static /*0x3f55d28*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f55e5c*/ uint[] Create();
                                static /*0x3f55ea0*/ uint[] CreateExt();
                                static /*0x3f55ee4*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f55f44*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f55fa8*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f56014*/ bool IsOne(uint[] x);
                                static /*0x3f56080*/ bool IsZero(uint[] x);
                                static /*0x3f560d4*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f562a8*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f56438*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f56668*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f56754*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f56818*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f56b28*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f56c94*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f56dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                            }

                            class Nat256
                            {
                                static /*0x3f56ea0*/ uint Add(uint[] x, uint[] y, uint[] z);
                                static /*0x3f5703c*/ uint AddBothTo(uint[] x, uint[] y, uint[] z);
                                static /*0x3f57214*/ uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn);
                                static /*0x3f573f0*/ uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff);
                                static /*0x3f575fc*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                static /*0x3f57758*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3f577e0*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3f578b4*/ uint[] Create();
                                static /*0x3f578f8*/ ulong[] Create64();
                                static /*0x3f5793c*/ uint[] CreateExt();
                                static /*0x3f57980*/ ulong[] CreateExt64();
                                static /*0x3f579c4*/ bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f57d18*/ bool Eq(uint[] x, uint[] y);
                                static /*0x3f57d78*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3f57dd8*/ uint GetBit(uint[] x, int bit);
                                static /*0x3f57e3c*/ bool Gte(uint[] x, uint[] y);
                                static /*0x3f57a40*/ bool Gte(uint[] x, int xOff, uint[] y, int yOff);
                                static /*0x3f57ea8*/ bool IsOne(uint[] x);
                                static /*0x3f57f14*/ bool IsOne64(ulong[] x);
                                static /*0x3f57f80*/ bool IsZero(uint[] x);
                                static /*0x3f57fd4*/ bool IsZero64(ulong[] x);
                                static /*0x3f58028*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f5822c*/ void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff);
                                static /*0x3f58598*/ uint MulAddTo(uint[] x, uint[] y, uint[] zz);
                                static /*0x3f58750*/ ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f589cc*/ uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff);
                                static /*0x3f58ab8*/ uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff);
                                static /*0x3f58b78*/ void Square(uint[] x, uint[] zz);
                                static /*0x3f58f28*/ void Square(uint[] x, int xOff, uint[] zz, int zzOff);
                                static /*0x3f593f0*/ int Sub(uint[] x, uint[] y, uint[] z);
                                static /*0x3f57abc*/ int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff);
                                static /*0x3f5958c*/ int SubFrom(uint[] x, uint[] z);
                                static /*0x3f596e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger(uint[] x);
                                static /*0x3f597c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat320
                            {
                                static /*0x3d664b4*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3d66558*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3d6665c*/ ulong[] Create64();
                                static /*0x3d666a0*/ ulong[] CreateExt64();
                                static /*0x3d666e4*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3d66744*/ bool IsOne64(ulong[] x);
                                static /*0x3d667b0*/ bool IsZero64(ulong[] x);
                                static /*0x3d66804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat384
                            {
                                static /*0x3d668e4*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3d66a54*/ void Square(uint[] x, uint[] zz);
                            }

                            class Nat448
                            {
                                static /*0x3d66b68*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3d66c44*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3d66da8*/ ulong[] Create64();
                                static /*0x3d66dec*/ ulong[] CreateExt64();
                                static /*0x3d66e30*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3d66e90*/ bool IsOne64(ulong[] x);
                                static /*0x3d66efc*/ bool IsZero64(ulong[] x);
                                static /*0x3d66f50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }

                            class Nat512
                            {
                                static /*0x3d67030*/ void Mul(uint[] x, uint[] y, uint[] zz);
                                static /*0x3d671a0*/ void Square(uint[] x, uint[] zz);
                                static /*0x3d672b4*/ void Xor64(System.ReadOnlySpan<ulong> x, System.ReadOnlySpan<ulong> y, System.Span<ulong> z);
                                static /*0x3d67394*/ void XorTo64(System.ReadOnlySpan<ulong> x, System.Span<ulong> z);
                            }

                            class Nat576
                            {
                                static /*0x3d67450*/ void Copy64(ulong[] x, ulong[] z);
                                static /*0x3d67564*/ void Copy64(ulong[] x, int xOff, ulong[] z, int zOff);
                                static /*0x3d67728*/ ulong[] Create64();
                                static /*0x3d6776c*/ ulong[] CreateExt64();
                                static /*0x3d677b0*/ bool Eq64(ulong[] x, ulong[] y);
                                static /*0x3d67810*/ bool IsOne64(ulong[] x);
                                static /*0x3d6787c*/ bool IsZero64(ulong[] x);
                                static /*0x3d678d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger64(ulong[] x);
                            }
                        }

                        namespace Field
                        {
                            class FiniteFields
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GF_2;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GF_3;

                                static /*0x3d67d94*/ FiniteFields();
                                static /*0x3d679b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomialExtensionField GetBinaryExtensionField(int[] exponents);
                                static /*0x3d67bf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField GetPrimeField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic);
                            }

                            class GenericPolynomialExtensionField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomialExtensionField, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField subfield;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial minimalPolynomial;

                                /*0x3d67bb4*/ GenericPolynomialExtensionField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField subfield, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial polynomial);
                                /*0x3d67eac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x3d67f4c*/ int get_Dimension();
                                /*0x3d68070*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial get_MinimalPolynomial();
                                /*0x3d68078*/ bool Equals(object obj);
                                /*0x3d68148*/ int GetHashCode();
                            }

                            class GF2Polynomial : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial
                            {
                                /*0x10*/ int[] exponents;

                                /*0x3d67b34*/ GF2Polynomial(int[] exponents);
                                /*0x3d681e8*/ int get_Degree();
                                /*0x3d6821c*/ int[] GetExponentsPresent();
                                /*0x3d68278*/ bool Equals(object obj);
                                /*0x3d68350*/ int GetHashCode();
                            }

                            interface IFiniteField
                            {
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x380b6a0*/ int get_Dimension();
                            }

                            interface IPolynomial
                            {
                                /*0x380b6a0*/ int get_Degree();
                                /*0x380b9e8*/ int[] GetExponentsPresent();
                            }

                            interface IPolynomialExtensionField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IPolynomial get_MinimalPolynomial();
                            }

                            class PrimeField : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic;

                                /*0x3d67d64*/ PrimeField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger characteristic);
                                /*0x3d683ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Characteristic();
                                /*0x3d683b4*/ int get_Dimension();
                                /*0x3d683bc*/ bool Equals(object obj);
                                /*0x3d6846c*/ int GetHashCode();
                            }
                        }

                        namespace EC
                        {
                            class AbstractECLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable
                            {
                                /*0x3d68498*/ AbstractECLookupTable();
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                /*0x380b6a0*/ int get_Size();
                                /*0x3d6848c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                            }

                            class ECAlgorithms
                            {
                                static /*0x3d684a0*/ bool IsF2mCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                static /*0x3d684c4*/ bool IsF2mField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                static /*0x3d68644*/ bool IsFpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                static /*0x3d68668*/ bool IsFpField(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                static /*0x3d68714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint SumOfTwoMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                static /*0x3d6898c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x3d691b8*/ void MontgomeryTrick(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs, int off, int len, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                static /*0x3d694c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ReferenceMultiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                static /*0x3d69608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CleanPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x3d68a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplCheckResult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                static /*0x3d68e58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                                static /*0x3d69f68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                                static /*0x3d69ccc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickWNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompP, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompNegP, byte[] wnafP, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompQ, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] preCompNegQ, byte[] wnafQ);
                                static /*0x3d6a294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks);
                                static /*0x3d68ab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultipliesGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism);
                                static /*0x3d6a814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ps, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] ks);
                                static /*0x3d6a50c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplSumOfMultiplies(bool[] negs, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo[] infos, byte[][] wnafs);
                                static /*0x3d69840*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImplShamirsTrickFixedPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger l);
                            }

                            class ECCurve
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField m_field;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_a;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_b;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_order;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_cofactor;
                                /*0x38*/ int m_coord;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier m_multiplier;

                                /*0x3d6accc*/ ECCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField field);
                                /*0x380b6a0*/ int get_FieldSize();
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x380b2f0*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x3d6acfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve.Config Configure();
                                /*0x3d6add8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ValidatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x3d6ae64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x380bcbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x380bd40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d6aeb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                /*0x3d6af6c*/ bool SupportsCoordinateSystem(int coord);
                                /*0x3d6af78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback callback);
                                /*0x3d6b32c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x3d6b434*/ void NormalizeAll(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points);
                                /*0x3d6b460*/ void NormalizeAll(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement iso);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x3d6b758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField get_Field();
                                /*0x3d6b760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_A();
                                /*0x3d6b768*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_B();
                                /*0x3d6b770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x3d6b778*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Cofactor();
                                /*0x3d6b780*/ int get_CoordinateSystem();
                                /*0x3d6b788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                /*0x3d6b9e0*/ void CheckPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                /*0x3d6ba74*/ void CheckPoints(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                /*0x3d6bbd4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve other);
                                /*0x3d6bd1c*/ bool Equals(object obj);
                                /*0x3d6bda8*/ int GetHashCode();
                                Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                                /*0x3d6bebc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism GetEndomorphism();
                                /*0x3d6bec4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier GetMultiplier();
                                /*0x3d6bf10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(byte[] encoded);
                                /*0x3d6bfc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecodePoint(System.ReadOnlySpan<byte> encoded);

                                class Config
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer;
                                    /*0x18*/ int coord;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier multiplier;

                                    /*0x3d6ad70*/ Config(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer, int coord, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier multiplier);
                                    /*0x3d6c62c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve.Config SetEndomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism);
                                    /*0x3d6c648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve Create();
                                }

                                class DefaultLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_outer;
                                    /*0x18*/ byte[] m_table;
                                    /*0x20*/ int m_size;

                                    /*0x3d6b988*/ DefaultLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve outer, byte[] table, int size);
                                    /*0x3d6c740*/ int get_Size();
                                    /*0x3d6c748*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                    /*0x3d6c9bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                    /*0x3d6c8cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(byte[] x, byte[] y);
                                }
                            }

                            class AbstractFpCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve
                            {
                                static /*0x3d6cd88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ImplRandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p);
                                /*0x3d6cb04*/ AbstractFpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q);
                                /*0x3d6cb84*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d6cc68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x3d6ce3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                            }

                            class FpCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                            {
                                static /*0x0*/ System.Collections.Generic.HashSet<Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger> KnownQs;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_q;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_r;
                                /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpPoint m_infinity;

                                static /*0x3d6dde8*/ FpCurve();
                                /*0x3d6cfac*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d6cfb4*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor, bool isInternal);
                                /*0x3d6d7c4*/ FpCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d6d8d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x3d6d95c*/ bool SupportsCoordinateSystem(int coord);
                                /*0x3d6d97c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x3d6d984*/ int get_FieldSize();
                                /*0x3d6d9a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d6daec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6db5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d6dbe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ImportPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x3d6d530*/ int GetNumberOfIterations(int bits, int certainty);
                                /*0x3d6d4ac*/ int AsInteger(string envVariable, int defaultValue);
                            }

                            class AbstractF2mCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve
                            {
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] si;

                                static /*0x3d6de80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.Field.IFiniteField BuildField(int m, int k1, int k2, int k3);
                                static /*0x3d6e208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ImplRandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, int m);
                                /*0x3d6df90*/ AbstractF2mCurve(int m, int k1, int k2, int k3);
                                /*0x3d6dfd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                /*0x3d6e120*/ bool IsValidFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d6e174*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);
                                /*0x3d6e280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint DecompressPoint(int yTilde, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger X1);
                                /*0x3d6e484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SolveQuadraticEquation(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement beta);
                                /*0x3d6e76c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetSi();
                                /*0x3d6e894*/ bool get_IsKoblitz();
                            }

                            class F2mCurve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                            {
                                /*0x58*/ int m;
                                /*0x5c*/ int k1;
                                /*0x60*/ int k2;
                                /*0x64*/ int k3;
                                /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mPoint m_infinity;

                                /*0x3d6e918*/ F2mCurve(int m, int k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d6e94c*/ F2mCurve(int m, int k1, int k2, int k3, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d6eb48*/ F2mCurve(int m, int k1, int k2, int k3, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor);
                                /*0x3d6ec5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                /*0x3d6ed08*/ bool SupportsCoordinateSystem(int coord);
                                /*0x3d6ed28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                /*0x3d6eda8*/ int get_FieldSize();
                                /*0x3d6edb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d6f220*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6f290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d6f314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                /*0x3d6f31c*/ bool IsTrinomial();
                                /*0x3d6f33c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                class DefaultF2mLookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mCurve m_outer;
                                    /*0x18*/ ulong[] m_table;
                                    /*0x20*/ int m_size;

                                    /*0x3d6f51c*/ DefaultF2mLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mCurve outer, ulong[] table, int size);
                                    /*0x3d6f574*/ int get_Size();
                                    /*0x3d6f57c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                    /*0x3d6f87c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                    /*0x3d6f6f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                }
                            }

                            class ECFieldElement
                            {
                                /*0x3d6fe74*/ ECFieldElement();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x380b6a0*/ int get_FieldSize();
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x3d6f9b4*/ int get_BitLength();
                                /*0x3d6f9d8*/ bool get_IsOne();
                                /*0x3d6f9fc*/ bool get_IsZero();
                                /*0x3d6fa28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6fa84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6fae0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6fb40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                /*0x3d6fb74*/ bool TestBitZero();
                                /*0x3d6fb9c*/ bool Equals(object obj);
                                /*0x3d6fc28*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                /*0x3d6fc98*/ int GetHashCode();
                                /*0x3d6fcc0*/ string ToString();
                                /*0x3d6fce8*/ byte[] GetEncoded();
                                /*0x3d6fd74*/ int GetEncodedLength();
                                /*0x3d6fda0*/ void EncodeTo(System.Span<byte> buf);
                            }

                            class AbstractFpFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement
                            {
                                /*0x3d6fe7c*/ AbstractFpFieldElement();
                            }

                            class FpFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;

                                static /*0x3d6d618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateResidue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p);
                                /*0x3d6da8c*/ FpFieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d6fe84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3d6fe8c*/ int get_FieldSize();
                                /*0x3d6fea8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d6ff60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x3d70048*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d70100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d701b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d702e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7048c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7055c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x3d705f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x3d70688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d70810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x3d7089c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x3d70e7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement CheckSqrt(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement z);
                                /*0x3d70ed0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] LucasSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger P, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                /*0x3d713ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModAdd(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x3d71450*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModDouble(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d714b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModHalfAbs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d71518*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModInverse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d71584*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x3d715c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModReduce(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3d718d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ModSubtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x2);
                                /*0x3d71918*/ bool Equals(object obj);
                                /*0x3d719c0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpFieldElement other);
                                /*0x3d71a14*/ int GetHashCode();
                            }

                            class AbstractF2mFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement
                            {
                                /*0x3d71d5c*/ AbstractF2mFieldElement();
                                /*0x3d71a54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                /*0x3d71bd0*/ bool get_HasFastTrace();
                                /*0x3d71bd8*/ int Trace();
                            }

                            class F2mFieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                            {
                                /*0x10*/ int representation;
                                /*0x14*/ int m;
                                /*0x18*/ int[] ks;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray x;

                                static /*0x3d720f4*/ void CheckFieldElements(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d6f1b0*/ F2mFieldElement(int m, int[] ks, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray x);
                                /*0x3d71d64*/ int get_BitLength();
                                /*0x3d71dc4*/ bool get_IsOne();
                                /*0x3d71e3c*/ bool get_IsZero();
                                /*0x3d71ea0*/ bool TestBitZero();
                                /*0x3d71ee0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3d720ec*/ int get_FieldSize();
                                /*0x3d72274*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d7245c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                /*0x3d725d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d725e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d72a68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d72a78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d73068*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                /*0x3d730a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                /*0x3d730ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                /*0x3d7320c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d73418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                /*0x3d735cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                /*0x3d73a4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                /*0x3d73aa8*/ bool Equals(object obj);
                                /*0x3d73b50*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.F2mFieldElement other);
                                /*0x3d73cc0*/ int GetHashCode();
                            }

                            interface ECLookupTable
                            {
                                /*0x380b6a0*/ int get_Size();
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                            }

                            class ECPoint
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_x;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement m_y;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] m_zs;
                                /*0x30*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo> m_preCompTable;

                                static /*0x3d74f34*/ ECPoint();
                                static /*0x3d73db8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] GetInitialZCoords(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                /*0x3d740a4*/ ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d7412c*/ ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x380b128*/ bool SatisfiesCurveEquation();
                                /*0x3d741a0*/ bool SatisfiesOrder();
                                /*0x3d74298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3d742a0*/ int get_CurveCoordinateSystem();
                                /*0x3d742bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_AffineXCoord();
                                /*0x3d742e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_AffineYCoord();
                                /*0x3d74314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_XCoord();
                                /*0x3d7431c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                /*0x3d74324*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(int index);
                                /*0x3d74364*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_RawXCoord();
                                /*0x3d7436c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_RawYCoord();
                                /*0x3d74374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] get_RawZCoords();
                                /*0x3d7437c*/ void CheckNormalized();
                                /*0x3d743e4*/ bool IsNormalized();
                                /*0x3d74454*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Normalize();
                                /*0x3d745e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Normalize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement zInv);
                                /*0x3d746d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateScaledPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement sx, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement sy);
                                /*0x3d6b414*/ bool get_IsInfinity();
                                /*0x3d6ae58*/ bool IsValid();
                                /*0x3d69834*/ bool IsValidPartial();
                                /*0x3d6c4e4*/ bool ImplIsValid(bool decompressed, bool checkOrder);
                                /*0x3d747b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d7483c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleY(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d748dc*/ bool Equals(object obj);
                                /*0x3d74968*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint other);
                                /*0x3d74c38*/ int GetHashCode();
                                /*0x3d74cfc*/ string ToString();
                                byte[] GetEncoded(bool compressed);
                                int GetEncodedLength(bool compressed);
                                void EncodeTo(bool compressed, System.Span<byte> buf);
                                /*0x380b128*/ bool get_CompressionYTilde();
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                /*0x3d74e48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TimesPow2(int e);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                /*0x3d74ee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d74f20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();

                                class ValidityCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_outer;
                                    /*0x18*/ bool m_decompressed;
                                    /*0x19*/ bool m_checkOrder;

                                    /*0x3d74764*/ ValidityCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint outer, bool decompressed, bool checkOrder);
                                    /*0x3d74fa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                }
                            }

                            class ECPointBase : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint
                            {
                                /*0x3d750c4*/ ECPointBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d75140*/ ECPointBase(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d751c4*/ byte[] GetEncoded(bool compressed);
                                /*0x3d75380*/ int GetEncodedLength(bool compressed);
                                /*0x3d75418*/ void EncodeTo(bool compressed, System.Span<byte> buf);
                                /*0x3d75600*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                            }

                            class AbstractFpPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointBase
                            {
                                /*0x3d756d0*/ AbstractFpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d756d4*/ AbstractFpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d756d8*/ bool get_CompressionYTilde();
                                /*0x3d75704*/ bool SatisfiesCurveEquation();
                                /*0x3d759c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                            }

                            class FpPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                            {
                                /*0x3d6d744*/ FpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6dbdc*/ FpPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d75a24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(int index);
                                /*0x3d75a84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d76614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x3d77094*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d774f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                /*0x3d778d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TimesPow2(int e);
                                /*0x3d78080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Two(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d780a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Three(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d780d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Four(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d78108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Eight(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x);
                                /*0x3d7813c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                /*0x3d78238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement CalculateJacobianModifiedW(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Z, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement ZSquared);
                                /*0x3d78384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetJacobianModifiedW();
                                /*0x3d78420*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.FpPoint TwiceJacobianModified(bool calculateW);
                            }

                            class AbstractF2mPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointBase
                            {
                                /*0x3d78764*/ AbstractF2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d78768*/ AbstractF2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d7876c*/ bool SatisfiesCurveEquation();
                                /*0x3d78b60*/ bool SatisfiesOrder();
                                /*0x3d78e14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d79088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ScaleY(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d7916c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d791cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint TauPow(int pow);
                            }

                            class F2mPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                            {
                                /*0x3d6ea88*/ F2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                /*0x3d6f310*/ F2mPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                /*0x3d79468*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                /*0x3d79568*/ bool get_CompressionYTilde();
                                /*0x3d79630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d7a260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                /*0x3d7aaf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                /*0x3d7b014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                            }

                            interface ECPointMap
                            {
                                /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Map(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                            }

                            struct LongArray
                            {
                                /*0x10*/ ulong[] m_data;

                                static /*0x3d72f8c*/ bool AreAliased(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray a, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray b);
                                static /*0x3d7b494*/ int BitLength(ulong w);
                                static /*0x3d7b618*/ ulong ShiftUp(ulong[] x, int xOff, ulong[] z, int zOff, int count, int shift);
                                static /*0x3d7b778*/ ulong AddShiftedUp(ulong[] x, int xOff, ulong[] y, int yOff, int count, int shift);
                                static /*0x3d7b818*/ ulong AddShiftedDown(ulong[] x, int xOff, ulong[] y, int yOff, int count, int shift);
                                static /*0x3d7b754*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, int count);
                                static /*0x3d7b8a4*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff, int count);
                                static /*0x3d7b8cc*/ void AddBoth(ulong[] x, int xOff, ulong[] y1, int y1Off, ulong[] y2, int y2Off, int count);
                                static /*0x3d7b964*/ void FlipWord(ulong[] buf, int off, int bit, ulong word);
                                static /*0x3d7b9dc*/ bool TestBit(ulong[] buf, int off, int n);
                                static /*0x3d7ba14*/ void FlipBit(ulong[] buf, int off, int n);
                                static /*0x3d7ba54*/ void MultiplyWord(ulong a, ulong[] b, int bLen, ulong[] c, int cOff);
                                static /*0x3d7bb28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ReduceResult(ulong[] buf, int off, int len, int m, int[] ks);
                                static /*0x3d7bb64*/ int ReduceInPlace(ulong[] buf, int off, int len, int m, int[] ks);
                                static /*0x3d7bf48*/ void ReduceBitWise(ulong[] buf, int off, int BitLength, int m, int[] ks);
                                static /*0x3d7bfb8*/ void ReduceBit(ulong[] buf, int off, int bit, int m, int[] ks);
                                static /*0x3d7be38*/ void ReduceWordWise(ulong[] buf, int off, int len, int toBit, int m, int[] ks);
                                static /*0x3d7c050*/ void ReduceWord(ulong[] buf, int off, int bit, ulong word, int m, int[] ks);
                                static /*0x3d7bd88*/ void ReduceVectorWise(ulong[] buf, int off, int len, int words, int m, int[] ks);
                                static /*0x3d7c0e8*/ void FlipVector(ulong[] x, int xOff, ulong[] y, int yOff, int yLen, int bits);
                                /*0x3d7b26c*/ LongArray(int intLen);
                                /*0x3d7b2d0*/ LongArray(ulong[] data);
                                /*0x3d7b2d8*/ LongArray(ulong[] data, int off, int len);
                                /*0x3d6ef40*/ LongArray(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt);
                                /*0x3d6f4f0*/ void CopyTo(ulong[] z, int zOff);
                                /*0x3d71dcc*/ bool IsOne();
                                /*0x3d71e44*/ bool IsZero();
                                /*0x3d7b394*/ int GetUsedLength();
                                /*0x3d7b3b0*/ int GetUsedLengthFrom(int from);
                                /*0x3d71d6c*/ int Degree();
                                /*0x3d7b4f8*/ int DegreeFrom(int limit);
                                /*0x3d7b55c*/ ulong[] ResizedData(int newLen);
                                /*0x3d71ee8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                /*0x3d724dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray AddOne();
                                /*0x3d7b6b0*/ void AddShiftedByBitsSafe(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int otherDegree, int bits);
                                /*0x3d723c4*/ void AddShiftedByWords(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int words);
                                /*0x3d71ea8*/ bool TestBitZero();
                                /*0x3d726ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModMultiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int m, int[] ks);
                                /*0x3d72c1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other, int m, int[] ks);
                                /*0x3d72fa0*/ void Reduce(int m, int[] ks);
                                /*0x3d73134*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModSquare(int m, int[] ks);
                                /*0x3d734b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModSquareN(int n, int m, int[] ks);
                                /*0x3d73368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Square(int m, int[] ks);
                                /*0x3d73654*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray ModInverse(int m, int[] ks);
                                /*0x3d73c34*/ bool Equals(object obj);
                                /*0x3d7c16c*/ bool Equals(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray other);
                                /*0x3d73d3c*/ int GetHashCode();
                                /*0x3d72348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.LongArray Copy();
                                /*0x3d7c22c*/ string ToString();
                            }

                            class ScaleXPointMap : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale;

                                /*0x3d7c3d4*/ ScaleXPointMap(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement scale);
                                /*0x3d7c404*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Map(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                            }

                            namespace Rfc8032
                            {
                                class Ed25519
                                {
                                    static /*0x0*/ int PrehashSize;
                                    static /*0x4*/ int PublicKeySize;
                                    static /*0x8*/ int SecretKeySize;
                                    static /*0xc*/ int SignatureSize;
                                    static /*0x10*/ byte[] Dom2Prefix;
                                    static /*0x18*/ uint[] P;
                                    static /*0x20*/ uint[] L;
                                    static /*0x28*/ int[] B_x;
                                    static /*0x30*/ int[] B_y;
                                    static /*0x38*/ int[] C_d;
                                    static /*0x40*/ int[] C_d2;
                                    static /*0x48*/ int[] C_d4;
                                    static /*0x50*/ object PrecompLock;
                                    static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp[] PrecompBaseWnaf;
                                    static /*0x60*/ int[] PrecompBaseComb;

                                    static /*0x3d817e8*/ Ed25519();
                                    static /*0x3d7c430*/ bool CheckContextVar(byte[] ctx, byte phflag);
                                    static /*0x3d7c450*/ int CheckPoint(int[] x, int[] y);
                                    static /*0x3d7cfbc*/ int CheckPoint(int[] x, int[] y, int[] z);
                                    static /*0x3d7d184*/ bool CheckPointVar(byte[] p);
                                    static /*0x3d7d330*/ bool CheckScalarVar(byte[] s, uint[] n);
                                    static /*0x3d7d430*/ byte[] Copy(byte[] buf, int off, int len);
                                    static /*0x3d7d4b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest CreateDigest();
                                    static /*0x3d7d504*/ uint Decode24(byte[] bs, int off);
                                    static /*0x3d7d55c*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d7d5d0*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d7d260*/ void Decode32(byte[] bs, int bsOff, uint[] n, int nOff, int nLen);
                                    static /*0x3d7d61c*/ void Decode32(System.ReadOnlySpan<byte> bs, System.Span<uint> n);
                                    static /*0x3d7d71c*/ bool DecodePointVar(byte[] p, int pOff, bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine r);
                                    static /*0x3d7d3bc*/ void DecodeScalar(byte[] k, int kOff, uint[] n);
                                    static /*0x3d7dc60*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x3d7dd14*/ void Dom2(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest d, byte phflag, byte[] ctx);
                                    static /*0x3d7dec8*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x3d7df2c*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x3d7dfac*/ void Encode56(ulong n, byte[] bs, int off);
                                    static /*0x3d7e028*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, byte[] r, int rOff);
                                    static /*0x3d7e0f8*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, System.Span<byte> r);
                                    static /*0x3d7e448*/ sbyte[] GetWnafVar(uint[] n, int width);
                                    static /*0x3d7e5e8*/ bool ImplVerify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte phflag, byte[] m, int mOff, int mLen);
                                    static /*0x3d7efe4*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d7ead0*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine r);
                                    static /*0x3d7f28c*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x3d7f328*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp r);
                                    static /*0x3d7f3b0*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ r);
                                    static /*0x3d7f44c*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp r);
                                    static /*0x3d7f4c0*/ void InvertDoubleZs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended[] points);
                                    static /*0x3d7f8a4*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended q, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d7facc*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d7fbe4*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d7fd14*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d7fe60*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x3d7ff08*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended r);
                                    static /*0x3d7fff8*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ r);
                                    static /*0x3d800c4*/ void PointDouble(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d802f0*/ void PointLookup(int block, int index, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecomp p);
                                    static /*0x3d80494*/ void PointPrecompute(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointExtended[] points, int count, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d805e0*/ void PointPrecomputeZ(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointPrecompZ[] points, int count, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointTemp t);
                                    static /*0x3d80718*/ void PointSetNeutral(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum p);
                                    static /*0x3d807cc*/ void Precompute();
                                    static /*0x3d81088*/ void PruneScalar(System.ReadOnlySpan<byte> n, System.Span<byte> r);
                                    static /*0x3d7eb44*/ byte[] ReduceScalar(byte[] n);
                                    static /*0x3d81170*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d8149c*/ void ScalarMultBaseYZ(System.ReadOnlySpan<byte> k, System.Span<int> y, System.Span<int> z);
                                    static /*0x3d7f094*/ void ScalarMultStrausVar(uint[] nb, uint[] np, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed25519.PointAccum r);
                                    static /*0x3d81734*/ bool Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] m, int mOff, int mLen);

                                    struct PointAccum
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                        /*0x20*/ int[] z;
                                        /*0x28*/ int[] u;
                                        /*0x30*/ int[] v;
                                    }

                                    struct PointAffine
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                    }

                                    struct PointExtended
                                    {
                                        /*0x10*/ int[] x;
                                        /*0x18*/ int[] y;
                                        /*0x20*/ int[] z;
                                        /*0x28*/ int[] t;
                                    }

                                    struct PointPrecomp
                                    {
                                        /*0x10*/ int[] ymx_h;
                                        /*0x18*/ int[] ypx_h;
                                        /*0x20*/ int[] xyd;
                                    }

                                    struct PointPrecompZ
                                    {
                                        /*0x10*/ int[] ymx_h;
                                        /*0x18*/ int[] ypx_h;
                                        /*0x20*/ int[] xyd;
                                        /*0x28*/ int[] z;
                                    }

                                    struct PointTemp
                                    {
                                        /*0x10*/ int[] r0;
                                        /*0x18*/ int[] r1;
                                    }
                                }

                                class Ed448
                                {
                                    static /*0x0*/ int PrehashSize;
                                    static /*0x4*/ int PublicKeySize;
                                    static /*0x8*/ int SecretKeySize;
                                    static /*0xc*/ int SignatureSize;
                                    static /*0x10*/ byte[] Dom4Prefix;
                                    static /*0x18*/ uint[] P;
                                    static /*0x20*/ uint[] L;
                                    static /*0x28*/ uint[] B_x;
                                    static /*0x30*/ uint[] B_y;
                                    static /*0x38*/ object PrecompLock;
                                    static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine[] PrecompBaseWnaf;
                                    static /*0x48*/ uint[] PrecompBaseComb;

                                    static /*0x3d87898*/ Ed448();
                                    static /*0x3d81b14*/ bool CheckContextVar(byte[] ctx);
                                    static /*0x3d81b28*/ int CheckPoint(uint[] x, uint[] y);
                                    static /*0x3d82e5c*/ int CheckPoint(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d832f0*/ bool CheckPointVar(byte[] p);
                                    static /*0x3d834a0*/ bool CheckScalarVar(byte[] s, uint[] n);
                                    static /*0x3d835c4*/ byte[] Copy(byte[] buf, int off, int len);
                                    static /*0x3d83644*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof CreateXof();
                                    static /*0x3d8369c*/ uint Decode16(byte[] bs, int off);
                                    static /*0x3d836dc*/ uint Decode24(byte[] bs, int off);
                                    static /*0x3d83734*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d837a8*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d833d0*/ void Decode32(byte[] bs, int bsOff, uint[] n, int nOff, int nLen);
                                    static /*0x3d837f4*/ void Decode32(System.ReadOnlySpan<byte> bs, System.Span<uint> n);
                                    static /*0x3d838f4*/ bool DecodePointVar(byte[] p, int pOff, bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d83550*/ void DecodeScalar(byte[] k, int kOff, uint[] n);
                                    static /*0x3d83ea0*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x3d83f54*/ void Dom4(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof d, byte phflag, byte[] ctx);
                                    static /*0x3d840f4*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x3d84158*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x3d841d8*/ void Encode56(ulong n, byte[] bs, int off);
                                    static /*0x3d84254*/ int EncodePoint(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, byte[] r, int rOff);
                                    static /*0x3d84578*/ sbyte[] GetWnafVar(uint[] n, int width);
                                    static /*0x3d84718*/ bool ImplVerify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte phflag, byte[] m, int mOff, int mLen);
                                    static /*0x3d85690*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine r);
                                    static /*0x3d84bb0*/ void Init(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d85704*/ void InvertZs(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective[] points);
                                    static /*0x3d85ad4*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d85e10*/ void PointAdd(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d85ff0*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d8621c*/ void PointAddVar(bool negate, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d86478*/ void PointCopy(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d86514*/ void PointDouble(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d86670*/ void PointLookup(int block, int index, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointAffine p);
                                    static /*0x3d867f0*/ void PointPrecomputeVar(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective[] points, int count);
                                    static /*0x3d86938*/ void PointSetNeutral(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p);
                                    static /*0x3d869dc*/ void Precompute();
                                    static /*0x3d87114*/ void PruneScalar(System.ReadOnlySpan<byte> n, System.Span<byte> r);
                                    static /*0x3d84c38*/ byte[] ReduceScalar(byte[] n);
                                    static /*0x3d87204*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d87538*/ void ScalarMultBaseXY(System.ReadOnlySpan<byte> k, System.Span<uint> x, System.Span<uint> y);
                                    static /*0x3d854bc*/ void ScalarMultStrausVar(uint[] nb, uint[] np, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective p, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Rfc8032.Ed448.PointProjective r);
                                    static /*0x3d877d8*/ bool Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte[] m, int mOff, int mLen);

                                    struct PointAffine
                                    {
                                        /*0x10*/ uint[] x;
                                        /*0x18*/ uint[] y;
                                    }

                                    struct PointProjective
                                    {
                                        /*0x10*/ uint[] x;
                                        /*0x18*/ uint[] y;
                                        /*0x20*/ uint[] z;
                                    }
                                }
                            }

                            namespace Rfc7748
                            {
                                class X25519
                                {
                                    static /*0x3d87ae4*/ bool CalculateAgreement(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d87d40*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d87d8c*/ void DecodeScalar(System.ReadOnlySpan<byte> k, System.Span<uint> n);
                                    static /*0x3d87e80*/ void PointDouble(int[] x, int[] z);
                                    static /*0x3d87b98*/ void ScalarMult(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d880c8*/ void ScalarMult(System.ReadOnlySpan<byte> k, System.ReadOnlySpan<byte> u, System.Span<byte> r);
                                    static /*0x3d88600*/ void ScalarMultBase(byte[] k, int kOff, byte[] r, int rOff);
                                    static /*0x3d8872c*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, System.Span<byte> r);
                                }

                                class X25519Field
                                {
                                    static /*0x0*/ uint[] P32;
                                    static /*0x8*/ int[] RootNegOne;

                                    static /*0x3d89960*/ X25519Field();
                                    static /*0x3d7d114*/ void Add(int[] x, int[] y, int[] z);
                                    static /*0x3d7ceb8*/ void AddOne(int[] z);
                                    static /*0x3d7fa40*/ void Apm(int[] x, int[] y, int[] zp, int[] zm);
                                    static /*0x3d801e8*/ void Carry(int[] z);
                                    static /*0x3d80414*/ void CMov(int cond, int[] x, int xOff, int[] z, int zOff);
                                    static /*0x3d81450*/ void CNegate(int negate, int[] z);
                                    static /*0x3d7f744*/ void Copy(int[] x, int xOff, int[] z, int zOff);
                                    static /*0x3d81678*/ void Copy(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x3d7c564*/ int[] Create();
                                    static /*0x3d7f6f8*/ int[] CreateTable(int n);
                                    static /*0x3d88590*/ void CSwap(int swap, int[] a, int[] b);
                                    static /*0x3d88898*/ void Decode(System.ReadOnlySpan<uint> x, System.Span<int> z);
                                    static /*0x3d7d904*/ void Decode(byte[] x, int xOff, int[] z);
                                    static /*0x3d88444*/ void Decode(System.ReadOnlySpan<byte> x, System.Span<int> z);
                                    static /*0x3d889e4*/ void Decode128(System.ReadOnlySpan<uint> x, System.Span<int> z);
                                    static /*0x3d88a70*/ void Decode128(byte[] bs, int off, int[] z, int zOff);
                                    static /*0x3d88ba8*/ void Decode128(System.ReadOnlySpan<byte> bs, System.Span<int> z);
                                    static /*0x3d88d58*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d88dcc*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d88e18*/ void Encode(System.ReadOnlySpan<int> x, System.Span<uint> z);
                                    static /*0x3d7e330*/ void Encode(System.ReadOnlySpan<int> x, System.Span<byte> z);
                                    static /*0x3d88f30*/ void Encode128(System.ReadOnlySpan<int> x, System.Span<uint> z);
                                    static /*0x3d88fb8*/ void Encode128(System.ReadOnlySpan<int> x, System.Span<byte> bs);
                                    static /*0x3d89144*/ void Encode32(uint n, System.Span<byte> bs);
                                    static /*0x3d7e240*/ void Inv(int[] x, int[] z);
                                    static /*0x3d8918c*/ void Inv(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x3d7f7b4*/ void InvVar(int[] x, int[] z);
                                    static /*0x3d893d8*/ void InvVar(System.ReadOnlySpan<int> x, System.Span<int> z);
                                    static /*0x3d7cf68*/ int IsZero(int[] x);
                                    static /*0x3d7dba8*/ bool IsZeroVar(int[] x);
                                    static /*0x3d87f68*/ void Mul(int[] x, int y, int[] z);
                                    static /*0x3d7c91c*/ void Mul(int[] x, int[] y, int[] z);
                                    static /*0x3d7dc08*/ void Negate(int[] x, int[] z);
                                    static /*0x3d7cee4*/ void Normalize(int[] z);
                                    static /*0x3d89354*/ void Normalize(System.Span<int> z);
                                    static /*0x3d7ffa4*/ void One(int[] z);
                                    static /*0x3d896f4*/ void PowPm5d8(int[] x, int[] rx2, int[] rz);
                                    static /*0x3d895a0*/ void Reduce(int[] z, int x);
                                    static /*0x3d89650*/ void Reduce(System.Span<int> z, int x);
                                    static /*0x3d7c5a8*/ void Sqr(int[] x, int[] z);
                                    static /*0x3d898c0*/ void Sqr(int[] x, int n, int[] z);
                                    static /*0x3d7d9dc*/ bool SqrtRatioVar(int[] u, int[] v, int[] z);
                                    static /*0x3d7ce48*/ void Sub(int[] x, int[] y, int[] z);
                                    static /*0x3d7d9b0*/ void SubOne(int[] z);
                                    static /*0x3d80790*/ void Zero(int[] z);
                                }

                                class X448
                                {
                                    static /*0x3d89a60*/ bool CalculateAgreement(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d89cbc*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d89d08*/ void DecodeScalar(System.ReadOnlySpan<byte> k, uint[] n);
                                    static /*0x3d89e08*/ void PointDouble(uint[] x, uint[] z);
                                    static /*0x3d89b14*/ void ScalarMult(byte[] k, int kOff, byte[] u, int uOff, byte[] r, int rOff);
                                    static /*0x3d89ef8*/ void ScalarMult(System.ReadOnlySpan<byte> k, System.ReadOnlySpan<byte> u, System.Span<byte> r);
                                    static /*0x3d8aaa4*/ void ScalarMultBase(byte[] k, int kOff, byte[] r, int rOff);
                                    static /*0x3d8abd0*/ void ScalarMultBase(System.ReadOnlySpan<byte> k, System.Span<byte> r);
                                }

                                class X448Field
                                {
                                    static /*0x0*/ uint[] P32;

                                    static /*0x3d8bf10*/ X448Field();
                                    static /*0x3d82ac0*/ void Add(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d83c58*/ void AddOne(uint[] z);
                                    static /*0x3d85c94*/ void Carry(uint[] z);
                                    static /*0x3d86770*/ void CMov(int cond, uint[] x, int xOff, uint[] z, int zOff);
                                    static /*0x3d874b4*/ void CNegate(int negate, uint[] z);
                                    static /*0x3d85974*/ void Copy(uint[] x, int xOff, uint[] z, int zOff);
                                    static /*0x3d8771c*/ void Copy(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d81c08*/ uint[] Create();
                                    static /*0x3d8592c*/ uint[] CreateTable(int n);
                                    static /*0x3d8a650*/ void CSwap(int swap, uint[] a, uint[] b);
                                    static /*0x3d8ad34*/ void Decode(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d83af4*/ void Decode(byte[] x, int xOff, uint[] z);
                                    static /*0x3d8a26c*/ void Decode(System.ReadOnlySpan<byte> x, System.Span<uint> z);
                                    static /*0x3d8ae4c*/ void Decode224(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d8b0ec*/ uint Decode24(byte[] bs, int off);
                                    static /*0x3d8b144*/ uint Decode24(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d8b180*/ uint Decode32(byte[] bs, int off);
                                    static /*0x3d8b1f4*/ uint Decode32(System.ReadOnlySpan<byte> bs);
                                    static /*0x3d8af34*/ void Decode56(byte[] bs, int off, uint[] z, int zOff);
                                    static /*0x3d8aff8*/ void Decode56(System.ReadOnlySpan<byte> bs, System.Span<uint> z);
                                    static /*0x3d8b240*/ void Encode(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d8447c*/ void Encode(uint[] x, byte[] z, int zOff);
                                    static /*0x3d8a6c0*/ void Encode(System.ReadOnlySpan<uint> x, System.Span<byte> z);
                                    static /*0x3d8b358*/ void Encode224(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d8b5c4*/ void Encode24(uint n, byte[] bs, int off);
                                    static /*0x3d8b628*/ void Encode24(uint n, System.Span<byte> bs);
                                    static /*0x3d8b660*/ void Encode32(uint n, byte[] bs, int off);
                                    static /*0x3d8b6e0*/ void Encode32(uint n, System.Span<byte> bs);
                                    static /*0x3d8b438*/ void Encode56(uint[] x, int xOff, byte[] bs, int off);
                                    static /*0x3d8b4ec*/ void Encode56(System.ReadOnlySpan<uint> x, System.Span<byte> bs);
                                    static /*0x3d8438c*/ void Inv(uint[] x, uint[] z);
                                    static /*0x3d8b728*/ void Inv(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d859e4*/ void InvVar(uint[] x, uint[] z);
                                    static /*0x3d8b950*/ void InvVar(System.ReadOnlySpan<uint> x, System.Span<uint> z);
                                    static /*0x3d82e08*/ int IsZero(uint[] x);
                                    static /*0x3d83dec*/ bool IsZeroVar(uint[] x);
                                    static /*0x3d82b30*/ void Mul(uint[] x, uint y, uint[] z);
                                    static /*0x3d821d8*/ void Mul(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d83bf0*/ void Negate(uint[] x, uint[] z);
                                    static /*0x3d82da4*/ void Normalize(uint[] z);
                                    static /*0x3d8b8d8*/ void Normalize(System.Span<uint> z);
                                    static /*0x3d83e4c*/ void One(uint[] z);
                                    static /*0x3d8bc48*/ void PowPm3d4(uint[] x, uint[] z);
                                    static /*0x3d8bb00*/ void Reduce(uint[] z, int x);
                                    static /*0x3d8bbac*/ void Reduce(System.Span<uint> z, int x);
                                    static /*0x3d81c4c*/ void Sqr(uint[] x, uint[] z);
                                    static /*0x3d8be70*/ void Sqr(uint[] x, int n, uint[] z);
                                    static /*0x3d83c84*/ bool SqrtRatioVar(uint[] u, uint[] v, uint[] z);
                                    static /*0x3d82f80*/ void Sub(uint[] x, uint[] y, uint[] z);
                                    static /*0x3d82d28*/ void SubOne(uint[] z);
                                    static /*0x3d869a0*/ void Zero(uint[] z);
                                }
                            }

                            namespace Multiplier
                            {
                                class AbstractECMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier
                                {
                                    /*0x3d8c098*/ AbstractECMultiplier();
                                    /*0x3d8bfb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x380bcbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3d8c08c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CheckResult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                }

                                interface ECMultiplier
                                {
                                    /*0x380bcbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class FixedPointCombMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x3d8c5ac*/ FixedPointCombMultiplier();
                                    /*0x3d8c0a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class FixedPointPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_offset;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable m_lookupTable;
                                    /*0x20*/ int m_width;

                                    /*0x3d8c5e4*/ FixedPointPreCompInfo();
                                    /*0x3d8c5b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable get_LookupTable();
                                    /*0x3d8c5bc*/ void set_LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable value);
                                    /*0x3d8c5c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Offset();
                                    /*0x3d8c5cc*/ void set_Offset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                    /*0x3d8c5d4*/ int get_Width();
                                    /*0x3d8c5dc*/ void set_Width(int value);
                                }

                                class FixedPointUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x3d8c624*/ FixedPointUtilities();
                                    static /*0x3d8c438*/ int GetCombSize(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c);
                                    static /*0x3d8c484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);

                                    class FixedPointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_p;

                                        /*0x3d8c5f4*/ FixedPointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                        /*0x3d8c690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d8cb0c*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo existingFP, int n);
                                        /*0x3d8cb44*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable table, int n);
                                    }
                                }

                                class GlvMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism;

                                    /*0x3d8cbf4*/ GlvMultiplier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism glvEndomorphism);
                                    /*0x3d8ccb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                interface IPreCompCallback
                                {
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                }

                                interface PreCompInfo
                                {
                                }

                                class ValidityPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    static /*0x0*/ string PRECOMP_NAME;
                                    /*0x10*/ bool failed;
                                    /*0x11*/ bool curveEquationPassed;
                                    /*0x12*/ bool orderPassed;

                                    static /*0x3d8d07c*/ ValidityPreCompInfo();
                                    /*0x3d8d074*/ ValidityPreCompInfo();
                                    /*0x3d8d038*/ bool HasFailed();
                                    /*0x3d8d040*/ void ReportFailed();
                                    /*0x3d8d04c*/ bool HasCurveEquationPassed();
                                    /*0x3d8d054*/ void ReportCurveEquationPassed();
                                    /*0x3d8d060*/ bool HasOrderPassed();
                                    /*0x3d8d068*/ void ReportOrderPassed();
                                }

                                class WNafL2RMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    /*0x3d8d8c0*/ WNafL2RMultiplier();
                                    /*0x3d8d0e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class WNafPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ int m_promotionCountdown;
                                    /*0x14*/ int m_confWidth;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] m_preComp;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] m_preCompNeg;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_twice;
                                    /*0x30*/ int m_width;

                                    /*0x3d8d9a8*/ WNafPreCompInfo();
                                    /*0x3d8d8c8*/ int DecrementPromotionCountdown();
                                    /*0x3d8d900*/ int get_PromotionCountdown();
                                    /*0x3d8d918*/ void set_PromotionCountdown(int value);
                                    /*0x3d8d93c*/ bool get_IsPromoted();
                                    /*0x3d8d958*/ int get_ConfWidth();
                                    /*0x3d8d960*/ void set_ConfWidth(int value);
                                    /*0x3d8d968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] get_PreComp();
                                    /*0x3d8d970*/ void set_PreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] value);
                                    /*0x3d8d978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] get_PreCompNeg();
                                    /*0x3d8d980*/ void set_PreCompNeg(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] value);
                                    /*0x3d8d988*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Twice();
                                    /*0x3d8d990*/ void set_Twice(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                    /*0x3d8d998*/ int get_Width();
                                    /*0x3d8d9a0*/ void set_Width(int value);
                                }

                                class WNafUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;
                                    static /*0x8*/ int[] DEFAULT_WINDOW_SIZE_CUTOFFS;
                                    static /*0x10*/ int MAX_WIDTH;
                                    static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS;

                                    static /*0x3d8e778*/ WNafUtilities();
                                    static /*0x3d8d9d8*/ void ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                    static /*0x3d8db9c*/ int[] GenerateCompactNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d8d5b8*/ int[] GenerateCompactWindowNaf(int width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d8de90*/ byte[] GenerateNaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d8e018*/ byte[] GenerateWindowNaf(int width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d8e368*/ int GetNafWeight(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d8d410*/ int GetWindowSize(int bits);
                                    static /*0x3d8e494*/ int GetWindowSize(int bits, int maxWidth);
                                    static /*0x3d8e3cc*/ int GetWindowSize(int bits, int[] windowSizeCutoffs, int maxWidth);
                                    static /*0x3d8d474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, int minWidth, bool includeNegated);
                                    static /*0x3d8e550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo PrecomputeWithPointMap(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap pointMap, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, bool includeNegated);
                                    static /*0x3d8e2e4*/ byte[] Trim(byte[] a, int length);
                                    static /*0x3d8de0c*/ int[] Trim(int[] a, int length);
                                    static /*0x3d8e6f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] ResizeTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] a, int length);

                                    class ConfigureBasepointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                        /*0x18*/ int m_confWidth;

                                        /*0x3d8db60*/ ConfigureBasepointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, int confWidth);
                                        /*0x3d8e894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                    }

                                    class PrecomputeCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_p;
                                        /*0x18*/ int m_minWidth;
                                        /*0x1c*/ bool m_includeNegated;

                                        /*0x3d8e504*/ PrecomputeCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, int minWidth, bool includeNegated);
                                        /*0x3d8ea3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d8f25c*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo existingWNaf, int width, int reqPreCompLen, bool includeNegated);
                                        /*0x3d8f364*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] table, int reqLen);
                                    }

                                    class PrecomputeWithPointMapCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_point;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap m_pointMap;
                                        /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo m_fromWNaf;
                                        /*0x28*/ bool m_includeNegated;

                                        /*0x3d8e688*/ PrecomputeWithPointMapCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap pointMap, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, bool includeNegated);
                                        /*0x3d8f380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d8f798*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo existingWNaf, int width, int reqPreCompLen, bool includeNegated);
                                        /*0x3d8f834*/ bool CheckTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] table, int reqLen);
                                    }
                                }

                                class WTauNafMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.AbstractECMultiplier
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x3d9003c*/ WTauNafMultiplier();
                                    static /*0x3d8fb8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyFromWTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte[] u);
                                    /*0x3d90034*/ WTauNafMultiplier();
                                    /*0x3d8f850*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MultiplyPositive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3d8fa40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyWTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda, sbyte a, sbyte mu);

                                    class WTauNafCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint m_p;
                                        /*0x18*/ sbyte m_a;

                                        /*0x3d8fff8*/ WTauNafCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte a);
                                        /*0x3d900a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                    }
                                }

                                class WTauNafPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] m_preComp;

                                    /*0x3d90190*/ WTauNafPreCompInfo();
                                    /*0x3d90198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] get_PreComp();
                                    /*0x3d901a0*/ void set_PreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] value);
                                }
                            }

                            namespace Endo
                            {
                                interface ECEndomorphism
                                {
                                    /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap get_PointMap();
                                    /*0x380b128*/ bool get_HasEfficientPointMap();
                                }

                                class EndoPreCompInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_mappedPoint;

                                    /*0x3d901c8*/ EndoPreCompInfo();
                                    /*0x3d901a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism get_Endomorphism();
                                    /*0x3d901b0*/ void set_Endomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism value);
                                    /*0x3d901b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_MappedPoint();
                                    /*0x3d901c0*/ void set_MappedPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint value);
                                }

                                class EndoUtilities
                                {
                                    static /*0x0*/ string PRECOMP_NAME;

                                    static /*0x3d90528*/ EndoUtilities();
                                    static /*0x3d901d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    static /*0x3d8cf14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint MapPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                    static /*0x3d903e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateB(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int t);

                                    class MapPointCallback : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.IPreCompCallback
                                    {
                                        /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism m_endomorphism;
                                        /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint m_point;

                                        /*0x3d904e4*/ MapPointCallback(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint point);
                                        /*0x3d90594*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo Precompute(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo existing);
                                        /*0x3d9078c*/ bool CheckExisting(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.EndoPreCompInfo existingEndo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism endomorphism);
                                    }
                                }

                                interface GlvEndomorphism : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
                                {
                                    /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                }

                                class GlvTypeBEndomorphism : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ECEndomorphism
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters m_parameters;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap m_pointMap;

                                    /*0x3d907e4*/ GlvTypeBEndomorphism(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters parameters);
                                    /*0x3d908ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k);
                                    /*0x3d90928*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPointMap get_PointMap();
                                    /*0x3d90930*/ bool get_HasEfficientPointMap();
                                }

                                class GlvTypeBParameters
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_beta;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_lambda;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters m_splitParams;

                                    /*0x3d90938*/ GlvTypeBParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger beta, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger lambda, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters splitParams);
                                    /*0x3d90998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Beta();
                                    /*0x3d909a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.ScalarSplitParameters get_SplitParams();
                                }

                                class ScalarSplitParameters
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v1A;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v1B;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v2A;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_v2B;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g1;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger m_g2;
                                    /*0x40*/ int m_bits;

                                    static /*0x3d909a8*/ void CheckVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v, string name);
                                    /*0x3d90a2c*/ ScalarSplitParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] v2, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g2, int bits);
                                    /*0x3d90b6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V1A();
                                    /*0x3d90b74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V1B();
                                    /*0x3d90b7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V2A();
                                    /*0x3d90b84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_V2B();
                                    /*0x3d90b8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G1();
                                    /*0x3d90b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G2();
                                    /*0x3d90b9c*/ int get_Bits();
                                }
                            }

                            namespace Custom
                            {
                                namespace Sec
                                {
                                    class SecP128R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP128R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Point m_infinity;

                                        static /*0x3d91474*/ SecP128R1Curve();
                                        /*0x3d90ba4*/ SecP128R1Curve();
                                        /*0x3d90dfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d90e4c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d90e58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d90e60*/ int get_FieldSize();
                                        /*0x3d90ec4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d91038*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d910ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d91138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d91330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP128R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d912d8*/ SecP128R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Curve outer, uint[] table, int size);
                                            /*0x3d915c4*/ int get_Size();
                                            /*0x3d915cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d917d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d916e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP128R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3d92524*/ SecP128R1Field();
                                        static /*0x3d9189c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d919f8*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3d91ac4*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3d91b94*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3d91c78*/ int IsZero(uint[] x);
                                        static /*0x3d91ccc*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d91e6c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3d91f60*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3d91ff8*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d913d8*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d91d54*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3d920d0*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3d921fc*/ void Square(uint[] x, uint[] z);
                                        static /*0x3d9227c*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3d92348*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d92454*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3d91978*/ void AddPInvTo(uint[] z);
                                        static /*0x3d923d4*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP128R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3d93180*/ SecP128R1FieldElement();
                                        /*0x3d90f1c*/ SecP128R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d91444*/ SecP128R1FieldElement(uint[] x);
                                        /*0x3d92654*/ bool get_IsZero();
                                        /*0x3d92660*/ bool get_IsOne();
                                        /*0x3d9266c*/ bool TestBitZero();
                                        /*0x3d92690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3d9269c*/ int get_FieldSize();
                                        /*0x3d92700*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d927f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3d928a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9299c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d92a94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d92b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3d92c40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3d92cec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3d92d98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3d92f84*/ bool Equals(object obj);
                                        /*0x3d93010*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3d9309c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP128R1FieldElement other);
                                        /*0x3d930c8*/ int GetHashCode();
                                    }

                                    class SecP128R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d90df4*/ SecP128R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d91130*/ SecP128R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d93250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d93908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3d93dd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d93ea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3d93f10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Point m_infinity;

                                        static /*0x3d94820*/ SecP160K1Curve();
                                        /*0x3d93fd0*/ SecP160K1Curve();
                                        /*0x3d941a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d941f4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d94200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d94208*/ int get_FieldSize();
                                        /*0x3d9426c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d943e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d94454*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d944e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d946dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d94684*/ SecP160K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Curve outer, uint[] table, int size);
                                            /*0x3d94970*/ int get_Size();
                                            /*0x3d94978*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d94b74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d94a80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d9419c*/ SecP160K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d944d8*/ SecP160K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d94c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d957b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3d95cd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d95d9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3d95e0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Point m_infinity;

                                        static /*0x3d967a0*/ SecP160R1Curve();
                                        /*0x3d95ecc*/ SecP160R1Curve();
                                        /*0x3d96124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d96174*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d96180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d96188*/ int get_FieldSize();
                                        /*0x3d961ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d96360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d963d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d96460*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d9665c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d96604*/ SecP160R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Curve outer, uint[] table, int size);
                                            /*0x3d968f0*/ int get_Size();
                                            /*0x3d968f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d96af4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d96a00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3d976d8*/ SecP160R1Field();
                                        static /*0x3d96bbc*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d96c94*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3d96d5c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3d96e2c*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3d96f10*/ int IsZero(uint[] x);
                                        static /*0x3d96f64*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9711c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3d9724c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3d972e4*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d96704*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d96fec*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3d973bc*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3d9748c*/ void Square(uint[] x, uint[] z);
                                        static /*0x3d9750c*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3d975d8*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9760c*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP160R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3d98340*/ SecP160R1FieldElement();
                                        /*0x3d96244*/ SecP160R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d96770*/ SecP160R1FieldElement(uint[] x);
                                        /*0x3d97808*/ bool get_IsZero();
                                        /*0x3d97814*/ bool get_IsOne();
                                        /*0x3d97820*/ bool TestBitZero();
                                        /*0x3d97844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3d97850*/ int get_FieldSize();
                                        /*0x3d978b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d979ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3d97a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d97b50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d97c48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d97d48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3d97df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3d97ea0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3d97f4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3d98144*/ bool Equals(object obj);
                                        /*0x3d981d0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3d9825c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R1FieldElement other);
                                        /*0x3d98288*/ int GetHashCode();
                                    }

                                    class SecP160R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d9611c*/ SecP160R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d96458*/ SecP160R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d98410*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d98ac8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3d98f94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d99060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3d990d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP160R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP160R2_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Point m_infinity;

                                        static /*0x3d998ac*/ SecP160R2Curve();
                                        /*0x3d99190*/ SecP160R2Curve();
                                        /*0x3d993e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d99438*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d99444*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d9944c*/ int get_FieldSize();
                                        /*0x3d994b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d99508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9957c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d99608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d99804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP160R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d997ac*/ SecP160R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Curve outer, uint[] table, int size);
                                            /*0x3d999fc*/ int get_Size();
                                            /*0x3d99a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d99c00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d99b0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP160R2Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3d9a214*/ SecP160R2Field();
                                        static /*0x3d99cc8*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d99da0*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3d99e68*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3d99f38*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3d9a01c*/ int IsZero(uint[] x);
                                        static /*0x3d95374*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d95598*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3d95430*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3d9a070*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d94784*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d956c8*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3d954c8*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3d952f4*/ void Square(uint[] x, uint[] z);
                                        static /*0x3d9a148*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3d953fc*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d95c04*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP160R2FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3d9af7c*/ SecP160R2FieldElement();
                                        /*0x3d942c4*/ SecP160R2FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d947f0*/ SecP160R2FieldElement(uint[] x);
                                        /*0x3d9a344*/ bool get_IsZero();
                                        /*0x3d9a350*/ bool get_IsOne();
                                        /*0x3d9a35c*/ bool TestBitZero();
                                        /*0x3d9a380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3d9a38c*/ int get_FieldSize();
                                        /*0x3d9a3f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9a4e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3d9a594*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9a68c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9a784*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9a884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3d9a930*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3d9a9dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3d9aa88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3d9ad80*/ bool Equals(object obj);
                                        /*0x3d9ae0c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3d9ae98*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP160R2FieldElement other);
                                        /*0x3d9aec4*/ int GetHashCode();
                                    }

                                    class SecP160R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d993e0*/ SecP160R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d99600*/ SecP160R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d9b04c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d9b704*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3d9bbd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d9bc9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3d9bd0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP192K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP192K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Point m_infinity;

                                        static /*0x3d9c61c*/ SecP192K1Curve();
                                        /*0x3d9bdcc*/ SecP192K1Curve();
                                        /*0x3d9bfa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d9bff0*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d9bffc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d9c004*/ int get_FieldSize();
                                        /*0x3d9c068*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d9c1dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9c250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d9c2dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d9c4d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP192K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d9c480*/ SecP192K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Curve outer, uint[] table, int size);
                                            /*0x3d9c76c*/ int get_Size();
                                            /*0x3d9c774*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d9c970*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d9c87c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP192K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3d9d514*/ SecP192K1Field();
                                        static /*0x3d9ca38*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9cb10*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3d9cbd8*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3d9cca8*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3d9cd8c*/ int IsZero(uint[] x);
                                        static /*0x3d9cde0*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9cf58*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3d9d088*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3d9d120*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d9c580*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d9ce68*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3d9d1f8*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3d9d2c8*/ void Square(uint[] x, uint[] z);
                                        static /*0x3d9d348*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3d9d414*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9d448*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP192K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3d9e238*/ SecP192K1FieldElement();
                                        /*0x3d9c0c0*/ SecP192K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d9c5ec*/ SecP192K1FieldElement(uint[] x);
                                        /*0x3d9d644*/ bool get_IsZero();
                                        /*0x3d9d650*/ bool get_IsOne();
                                        /*0x3d9d65c*/ bool TestBitZero();
                                        /*0x3d9d680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3d9d68c*/ int get_FieldSize();
                                        /*0x3d9d6f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9d7e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3d9d894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9d98c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9da84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3d9db84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3d9dc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3d9dcdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3d9dd88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3d9e03c*/ bool Equals(object obj);
                                        /*0x3d9e0c8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3d9e154*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192K1FieldElement other);
                                        /*0x3d9e180*/ int GetHashCode();
                                    }

                                    class SecP192K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d9bf98*/ SecP192K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9c2d4*/ SecP192K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d9e308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d9e9c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3d9ee0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3d9eed8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3d9ef48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP192R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP192R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Point m_infinity;

                                        static /*0x3d9f8dc*/ SecP192R1Curve();
                                        /*0x3d9f008*/ SecP192R1Curve();
                                        /*0x3d9f260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3d9f2b0*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3d9f2bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3d9f2c4*/ int get_FieldSize();
                                        /*0x3d9f328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d9f49c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9f510*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3d9f59c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3d9f798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP192R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3d9f740*/ SecP192R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Curve outer, uint[] table, int size);
                                            /*0x3d9fa2c*/ int get_Size();
                                            /*0x3d9fa34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3d9fc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3d9fb3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP192R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3da0a9c*/ SecP192R1Field();
                                        static /*0x3d9fcf8*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3d9fe60*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3d9ff2c*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3d9fffc*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3da00e0*/ int IsZero(uint[] x);
                                        static /*0x3da0134*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da0390*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3da04c0*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3da0558*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3d9f840*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da01bc*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3da0630*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3da0768*/ void Square(uint[] x, uint[] z);
                                        static /*0x3da07e8*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3da08b4*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da09cc*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3d9fdd4*/ void AddPInvTo(uint[] z);
                                        static /*0x3da0940*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP192R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3da16e8*/ SecP192R1FieldElement();
                                        /*0x3d9f380*/ SecP192R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3d9f8ac*/ SecP192R1FieldElement(uint[] x);
                                        /*0x3da0bcc*/ bool get_IsZero();
                                        /*0x3da0bd8*/ bool get_IsOne();
                                        /*0x3da0be4*/ bool TestBitZero();
                                        /*0x3da0c08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3da0c14*/ int get_FieldSize();
                                        /*0x3da0c78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da0d70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3da0e1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da0f14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da100c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da110c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3da11b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3da1264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3da1310*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3da14ec*/ bool Equals(object obj);
                                        /*0x3da1578*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3da1604*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP192R1FieldElement other);
                                        /*0x3da1630*/ int GetHashCode();
                                    }

                                    class SecP192R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3d9f258*/ SecP192R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3d9f594*/ SecP192R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da17b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da1e70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3da233c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da2408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3da2478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP224K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP224K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Point m_infinity;

                                        static /*0x3da2d78*/ SecP224K1Curve();
                                        /*0x3da2538*/ SecP224K1Curve();
                                        /*0x3da2704*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3da2754*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3da2760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3da2768*/ int get_FieldSize();
                                        /*0x3da27cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da2940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da29b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da2a38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da2c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP224K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da2bdc*/ SecP224K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Curve outer, uint[] table, int size);
                                            /*0x3da2ec8*/ int get_Size();
                                            /*0x3da2ed0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da30cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da2fd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP224K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3da3c70*/ SecP224K1Field();
                                        static /*0x3da3194*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da326c*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3da3334*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3da3404*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3da34e8*/ int IsZero(uint[] x);
                                        static /*0x3da353c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da36b4*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3da37e4*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3da387c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da2cdc*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da35c4*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3da3954*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3da3a24*/ void Square(uint[] x, uint[] z);
                                        static /*0x3da3aa4*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3da3b70*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da3ba4*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP224K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        static /*0x8*/ uint[] PRECOMP_POW2;
                                        /*0x10*/ uint[] x;

                                        static /*0x3da4a4c*/ SecP224K1FieldElement();
                                        /*0x3da2824*/ SecP224K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da2d48*/ SecP224K1FieldElement(uint[] x);
                                        /*0x3da3da0*/ bool get_IsZero();
                                        /*0x3da3dac*/ bool get_IsOne();
                                        /*0x3da3db8*/ bool TestBitZero();
                                        /*0x3da3ddc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3da3de8*/ int get_FieldSize();
                                        /*0x3da3e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da3f44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3da3ff0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da40e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da41e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da42e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3da438c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3da4438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3da44e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3da4850*/ bool Equals(object obj);
                                        /*0x3da48dc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3da4968*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224K1FieldElement other);
                                        /*0x3da4994*/ int GetHashCode();
                                    }

                                    class SecP224K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3da4b7c*/ SecP224K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da4b84*/ SecP224K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da4b8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da5280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3da56dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da57a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3da5818*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP224R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP224R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Point m_infinity;

                                        static /*0x3da61ac*/ SecP224R1Curve();
                                        /*0x3da58d8*/ SecP224R1Curve();
                                        /*0x3da5b30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3da5b80*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3da5b8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3da5b94*/ int get_FieldSize();
                                        /*0x3da5bf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da5d6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da5de0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da5e6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da6068*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP224R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da6010*/ SecP224R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Curve outer, uint[] table, int size);
                                            /*0x3da62fc*/ int get_Size();
                                            /*0x3da6304*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da6500*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da640c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP224R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3da73cc*/ SecP224R1Field();
                                        static /*0x3da65c8*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da6744*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3da6810*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3da68e0*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3da69c4*/ int IsZero(uint[] x);
                                        static /*0x3da6a18*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da6c98*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3da6dc8*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3da6e60*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da6110*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da6aa0*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3da6f38*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3da7084*/ void Square(uint[] x, uint[] z);
                                        static /*0x3da7104*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3da71d0*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3da72fc*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3da66a4*/ void AddPInvTo(uint[] z);
                                        static /*0x3da725c*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP224R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3da85b0*/ SecP224R1FieldElement();
                                        static /*0x3da7e08*/ bool IsSquare(uint[] x);
                                        static /*0x3da82a4*/ void RM(uint[] nc, uint[] d0, uint[] e0, uint[] d1, uint[] e1, uint[] f1, uint[] t);
                                        static /*0x3da83bc*/ void RP(uint[] nc, uint[] d1, uint[] e1, uint[] f1, uint[] t);
                                        static /*0x3da84e0*/ void RS(uint[] d, uint[] e, uint[] f, uint[] t);
                                        static /*0x3da7ef4*/ bool TrySqrt(uint[] nc, uint[] r, uint[] t);
                                        /*0x3da5c50*/ SecP224R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da617c*/ SecP224R1FieldElement(uint[] x);
                                        /*0x3da74fc*/ bool get_IsZero();
                                        /*0x3da7508*/ bool get_IsOne();
                                        /*0x3da7514*/ bool TestBitZero();
                                        /*0x3da7538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3da7544*/ int get_FieldSize();
                                        /*0x3da75a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da76a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3da774c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da7844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da793c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3da7a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3da7ae8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3da7b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3da7c40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3da80a8*/ bool Equals(object obj);
                                        /*0x3da8134*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3da81c0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP224R1FieldElement other);
                                        /*0x3da81ec*/ int GetHashCode();
                                    }

                                    class SecP224R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3da5b28*/ SecP224R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da5e64*/ SecP224R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da8680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da8d38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3da9204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3da92d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3da9340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP256K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP256K1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Point m_infinity;

                                        static /*0x3da9c4c*/ SecP256K1Curve();
                                        /*0x3da9400*/ SecP256K1Curve();
                                        /*0x3da95d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3da9624*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3da9630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3da9638*/ int get_FieldSize();
                                        /*0x3da969c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da9810*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da9884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3da9910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3da9b08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP256K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3da9ab0*/ SecP256K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Curve outer, uint[] table, int size);
                                            /*0x3da9d9c*/ int get_Size();
                                            /*0x3da9da4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3da9fb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3da9ebc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP256K1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3daac50*/ SecP256K1Field();
                                        static /*0x3daa074*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3daa14c*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3daa214*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3daa2e4*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3daa3c8*/ int IsZero(uint[] x);
                                        static /*0x3daa41c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3daa594*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3daa61c*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3daa74c*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3daa7e4*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3da9bb0*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3daa4a4*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3daa8bc*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3daa98c*/ void Square(uint[] x, uint[] z);
                                        static /*0x3daaa0c*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3daaa84*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3daab50*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3daab84*/ void Twice(uint[] x, uint[] z);
                                    }

                                    class SecP256K1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3daba1c*/ SecP256K1FieldElement();
                                        /*0x3da96f4*/ SecP256K1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3da9c1c*/ SecP256K1FieldElement(uint[] x);
                                        /*0x3daad80*/ bool get_IsZero();
                                        /*0x3daad8c*/ bool get_IsOne();
                                        /*0x3daad98*/ bool TestBitZero();
                                        /*0x3daadbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3daadc8*/ int get_FieldSize();
                                        /*0x3daae2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3daaf24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3daafd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dab0c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dab1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dab2c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dab36c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dab418*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dab4c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dab820*/ bool Equals(object obj);
                                        /*0x3dab8ac*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dab938*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256K1FieldElement other);
                                        /*0x3dab964*/ int GetHashCode();
                                    }

                                    class SecP256K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3da95cc*/ SecP256K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3da9908*/ SecP256K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dabaec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dac1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dac678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dac744*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3dac7b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP256R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP256R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Point m_infinity;

                                        static /*0x3dad144*/ SecP256R1Curve();
                                        /*0x3dac874*/ SecP256R1Curve();
                                        /*0x3dacacc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dacb1c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dacb28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dacb30*/ int get_FieldSize();
                                        /*0x3dacb94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dacd08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dacd7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dace08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3dad000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP256R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dacfa8*/ SecP256R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Curve outer, uint[] table, int size);
                                            /*0x3dad294*/ int get_Size();
                                            /*0x3dad29c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dad4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dad3b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP256R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;

                                        static /*0x3dae510*/ SecP256R1Field();
                                        static /*0x3dad56c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dad738*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3dad804*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dad8d4*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3dad9b8*/ int IsZero(uint[] x);
                                        static /*0x3dada0c*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dadc7c*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3dadd04*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3daddf8*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3dade90*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dad0a8*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3dada94*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3dadf68*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3dae100*/ void Square(uint[] x, uint[] z);
                                        static /*0x3dae180*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3dae1f8*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3dae2c4*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3dae440*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3dad648*/ void AddPInvTo(uint[] z);
                                        static /*0x3dae350*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP256R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3daf168*/ SecP256R1FieldElement();
                                        /*0x3dacbec*/ SecP256R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dad114*/ SecP256R1FieldElement(uint[] x);
                                        /*0x3dae5f4*/ bool get_IsZero();
                                        /*0x3dae600*/ bool get_IsOne();
                                        /*0x3dae60c*/ bool TestBitZero();
                                        /*0x3dae630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dae63c*/ int get_FieldSize();
                                        /*0x3dae6a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dae798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dae844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dae93c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3daea34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3daeb34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3daebe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3daec8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3daed38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3daef6c*/ bool Equals(object obj);
                                        /*0x3daeff8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3daf084*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP256R1FieldElement other);
                                        /*0x3daf0b0*/ int GetHashCode();
                                    }

                                    class SecP256R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3dacac4*/ SecP256R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dace00*/ SecP256R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3daf238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3daf93c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dafe34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3daff00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3daff70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP384R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP384R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Point m_infinity;

                                        static /*0x3db0910*/ SecP384R1Curve();
                                        /*0x3db0030*/ SecP384R1Curve();
                                        /*0x3db0288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3db02d8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3db02e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3db02ec*/ int get_FieldSize();
                                        /*0x3db0350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db04c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db0538*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db05c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3db07c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP384R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3db0770*/ SecP384R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Curve outer, uint[] table, int size);
                                            /*0x3db0a60*/ int get_Size();
                                            /*0x3db0a68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3db0c6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3db0b78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP384R1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;
                                        static /*0x10*/ uint[] PExtInv;

                                        static /*0x3db1d50*/ SecP384R1Field();
                                        static /*0x3db0d3c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db0edc*/ void AddExt(uint[] xx, uint[] yy, uint[] zz);
                                        static /*0x3db1010*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3db10e0*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3db11b8*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3db129c*/ int IsZero(uint[] x);
                                        static /*0x3db12f0*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db1600*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3db1688*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3db1724*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db0874*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db137c*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3db17fc*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3db1968*/ void Square(uint[] x, uint[] z);
                                        static /*0x3db19ec*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3db1a64*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3db1b30*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db1c7c*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3db0e20*/ void AddPInvTo(uint[] z);
                                        static /*0x3db1bc0*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SecP384R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3db2b50*/ SecP384R1FieldElement();
                                        /*0x3db03a8*/ SecP384R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db08e0*/ SecP384R1FieldElement(uint[] x);
                                        /*0x3db1e80*/ bool get_IsZero();
                                        /*0x3db1e90*/ bool get_IsOne();
                                        /*0x3db1ea0*/ bool TestBitZero();
                                        /*0x3db1ec4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3db1ed4*/ int get_FieldSize();
                                        /*0x3db1f38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db2034*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3db20e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db21e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db22dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db23e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3db2490*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3db2540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3db25f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3db294c*/ bool Equals(object obj);
                                        /*0x3db29d8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3db2a64*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP384R1FieldElement other);
                                        /*0x3db2a98*/ int GetHashCode();
                                    }

                                    class SecP384R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3db0280*/ SecP384R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db05bc*/ SecP384R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db2c20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db3374*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3db3884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db3950*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3db39c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecP521R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECP521R1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Point m_infinity;

                                        static /*0x3db4360*/ SecP521R1Curve();
                                        /*0x3db3a80*/ SecP521R1Curve();
                                        /*0x3db3cd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3db3d28*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3db3d34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3db3d3c*/ int get_FieldSize();
                                        /*0x3db3da0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db3f14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db3f88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db4014*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3db4218*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SecP521R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3db41c0*/ SecP521R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Curve outer, uint[] table, int size);
                                            /*0x3db44b0*/ int get_Size();
                                            /*0x3db44b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3db46bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3db45c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SecP521R1Field
                                    {
                                        static /*0x0*/ uint[] P;

                                        static /*0x3db53cc*/ SecP521R1Field();
                                        static /*0x3db478c*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db489c*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3db4984*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3db4a20*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3db4b04*/ int IsZero(uint[] x);
                                        static /*0x3db4b58*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db4d94*/ void Multiply(uint[] x, uint[] y, uint[] z, uint[] tt);
                                        static /*0x3db4e18*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3db4eb4*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db42c4*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3db4c80*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3db4fac*/ void Reduce23(uint[] z);
                                        static /*0x3db5090*/ void Square(uint[] x, uint[] z);
                                        static /*0x3db518c*/ void Square(uint[] x, uint[] z, uint[] tt);
                                        static /*0x3db5200*/ void SquareN(uint[] x, int n, uint[] z, uint[] tt);
                                        static /*0x3db52c4*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3db5364*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3db4be4*/ void ImplMultiply(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3db5114*/ void ImplSquare(uint[] x, uint[] zz);
                                    }

                                    class SecP521R1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3db5f14*/ SecP521R1FieldElement();
                                        /*0x3db3df8*/ SecP521R1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db4330*/ SecP521R1FieldElement(uint[] x);
                                        /*0x3db546c*/ bool get_IsZero();
                                        /*0x3db547c*/ bool get_IsOne();
                                        /*0x3db548c*/ bool TestBitZero();
                                        /*0x3db54b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3db54c0*/ int get_FieldSize();
                                        /*0x3db5524*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db5620*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3db56d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db57cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db58c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db59cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3db5a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3db5b2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3db5bdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3db5d10*/ bool Equals(object obj);
                                        /*0x3db5d9c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3db5e28*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecP521R1FieldElement other);
                                        /*0x3db5e5c*/ int GetHashCode();
                                    }

                                    class SecP521R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3db3cd0*/ SecP521R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db400c*/ SecP521R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db5fe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db671c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3db6c30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db6cfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3db6d6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT113Field
                                    {
                                        static /*0x3db6e2c*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3db6ea4*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3db6f7c*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3db6fd0*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3db7030*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3db7040*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3db7198*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3db735c*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3db760c*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3db7104*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3db7688*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3db7310*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3db7708*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3db73d4*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3db7758*/ uint Trace(ulong[] x);
                                        static /*0x3db7470*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3db7780*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3db70ec*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT113FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3db78c8*/ SecT113FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db7984*/ SecT113FieldElement(ulong[] x);
                                        /*0x3db79b4*/ bool get_IsOne();
                                        /*0x3db79c0*/ bool get_IsZero();
                                        /*0x3db79cc*/ bool TestBitZero();
                                        /*0x3db79f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3db7a04*/ int get_FieldSize();
                                        /*0x3db7a0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db7ad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3db7b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db7b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db7c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db7c44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db7db0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3db7df0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3db7df4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3db7e78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db7fa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3db8040*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3db80c4*/ bool get_HasFastTrace();
                                        /*0x3db80cc*/ int Trace();
                                        /*0x3db80d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3db8158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3db81dc*/ bool Equals(object obj);
                                        /*0x3db8268*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3db82f4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113FieldElement other);
                                        /*0x3db8320*/ int GetHashCode();
                                    }

                                    class SecT113R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT113R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Point m_infinity;

                                        static /*0x3db8988*/ SecT113R1Curve();
                                        /*0x3db8394*/ SecT113R1Curve();
                                        /*0x3db85c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3db8614*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3db8620*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3db8628*/ int get_FieldSize();
                                        /*0x3db8630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3db8688*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db86fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db8788*/ bool get_IsKoblitz();
                                        /*0x3db8790*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT113R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3db8930*/ SecT113R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Curve outer, ulong[] table, int size);
                                            /*0x3db8aac*/ int get_Size();
                                            /*0x3db8ab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3db8cc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3db8bd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT113R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3db85bc*/ SecT113R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3db8780*/ SecT113R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3db8d9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3db8e6c*/ bool get_CompressionYTilde();
                                        /*0x3db8ee8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db9614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3db9974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3db9e80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT113R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT113R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Point m_infinity;

                                        static /*0x3dba5d4*/ SecT113R2Curve();
                                        /*0x3db9fe0*/ SecT113R2Curve();
                                        /*0x3dba210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dba260*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dba26c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dba274*/ int get_FieldSize();
                                        /*0x3dba27c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dba2d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dba348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dba3d4*/ bool get_IsKoblitz();
                                        /*0x3dba3dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT113R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dba57c*/ SecT113R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Curve outer, ulong[] table, int size);
                                            /*0x3dba6f8*/ int get_Size();
                                            /*0x3dba700*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dba910*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dba81c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT113R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dba208*/ SecT113R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dba3cc*/ SecT113R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dba9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dbaab8*/ bool get_CompressionYTilde();
                                        /*0x3dbab34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbb260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dbb5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbbacc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT131Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3dbcca8*/ SecT131Field();
                                        static /*0x3dbbc2c*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dbbcd4*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dbbddc*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dbbe4c*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dbbed0*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dbbee0*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dbc0f8*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dbc338*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dbc7f0*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dbc018*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dbc89c*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dbc2b4*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dbc9bc*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dbc3e0*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dbca44*/ uint Trace(ulong[] x);
                                        static /*0x3dbca8c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dbc4ac*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dbcb14*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dbbfa8*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT131FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dbcd48*/ SecT131FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dbce40*/ SecT131FieldElement(ulong[] x);
                                        /*0x3dbce70*/ bool get_IsOne();
                                        /*0x3dbce7c*/ bool get_IsZero();
                                        /*0x3dbce88*/ bool TestBitZero();
                                        /*0x3dbceb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dbcec0*/ int get_FieldSize();
                                        /*0x3dbcec8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbcfc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dbd06c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbd078*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbd170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbd180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbd318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dbd358*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dbd35c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dbd408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbd560*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dbd624*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dbd6d0*/ bool get_HasFastTrace();
                                        /*0x3dbd6d8*/ int Trace();
                                        /*0x3dbd730*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dbd7dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dbd888*/ bool Equals(object obj);
                                        /*0x3dbd914*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dbd9a0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131FieldElement other);
                                        /*0x3dbd9cc*/ int GetHashCode();
                                    }

                                    class SecT131R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT131R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Point m_infinity;

                                        static /*0x3dbe038*/ SecT131R1Curve();
                                        /*0x3dbda40*/ SecT131R1Curve();
                                        /*0x3dbdc70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dbdcc0*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dbdccc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dbdcd4*/ int get_FieldSize();
                                        /*0x3dbdcdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dbdd34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbdda8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbde34*/ bool get_IsKoblitz();
                                        /*0x3dbde3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT131R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dbdfe0*/ SecT131R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Curve outer, ulong[] table, int size);
                                            /*0x3dbe15c*/ int get_Size();
                                            /*0x3dbe164*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dbe360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dbe26c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT131R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dbdc68*/ SecT131R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbde2c*/ SecT131R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbe42c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dbe4fc*/ bool get_CompressionYTilde();
                                        /*0x3dbe578*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbeca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dbf004*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dbf510*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT131R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT131R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Point m_infinity;

                                        static /*0x3dbfc68*/ SecT131R2Curve();
                                        /*0x3dbf670*/ SecT131R2Curve();
                                        /*0x3dbf8a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dbf8f0*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dbf8fc*/ int get_FieldSize();
                                        /*0x3dbf904*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dbf95c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbf9d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dbfa5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dbfa64*/ bool get_IsKoblitz();
                                        /*0x3dbfa6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT131R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dbfc10*/ SecT131R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Curve outer, ulong[] table, int size);
                                            /*0x3dbfd8c*/ int get_Size();
                                            /*0x3dbfd94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dbff90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dbfe9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT131R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dbf898*/ SecT131R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dbfa54*/ SecT131R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc005c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dc012c*/ bool get_CompressionYTilde();
                                        /*0x3dc01a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc08d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc0c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc1140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3dc22fc*/ SecT163Field();
                                        static /*0x3dc12a0*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc1348*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dc1480*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dc14f0*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dc1574*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dc1584*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dc1774*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dc1ad0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc1eb4*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc1680*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dc1f60*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dc1958*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dc2080*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dc19e8*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dc2114*/ uint Trace(ulong[] x);
                                        static /*0x3dc214c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dc1b78*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc21d4*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dc1668*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT163FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dc239c*/ SecT163FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc2494*/ SecT163FieldElement(ulong[] x);
                                        /*0x3dc24c4*/ bool get_IsOne();
                                        /*0x3dc24d0*/ bool get_IsZero();
                                        /*0x3dc24dc*/ bool TestBitZero();
                                        /*0x3dc2508*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dc2514*/ int get_FieldSize();
                                        /*0x3dc251c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc2614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dc26c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc26cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc27c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc27d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc2968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc29a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dc29ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dc2a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc2bac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dc2c70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dc2d1c*/ bool get_HasFastTrace();
                                        /*0x3dc2d24*/ int Trace();
                                        /*0x3dc2d7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dc2e28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dc2ed4*/ bool Equals(object obj);
                                        /*0x3dc2f60*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dc2fec*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163FieldElement other);
                                        /*0x3dc3018*/ int GetHashCode();
                                    }

                                    class SecT163K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Point m_infinity;

                                        static /*0x3dc3640*/ SecT163K1Curve();
                                        /*0x3dc308c*/ SecT163K1Curve();
                                        /*0x3dc3224*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dc3274*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dc3280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3dc32d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dc32dc*/ int get_FieldSize();
                                        /*0x3dc32e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc333c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc33b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc343c*/ bool get_IsKoblitz();
                                        /*0x3dc3444*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dc35e8*/ SecT163K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Curve outer, ulong[] table, int size);
                                            /*0x3dc3764*/ int get_Size();
                                            /*0x3dc376c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dc3968*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc3874*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc321c*/ SecT163K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc3434*/ SecT163K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc3a34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dc3b04*/ bool get_CompressionYTilde();
                                        /*0x3dc3b80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc4268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc4590*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc4a44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Point m_infinity;

                                        static /*0x3dc519c*/ SecT163R1Curve();
                                        /*0x3dc4ba4*/ SecT163R1Curve();
                                        /*0x3dc4dd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dc4e24*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dc4e30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dc4e38*/ int get_FieldSize();
                                        /*0x3dc4e40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc4e98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc4f0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc4f98*/ bool get_IsKoblitz();
                                        /*0x3dc4fa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dc5144*/ SecT163R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Curve outer, ulong[] table, int size);
                                            /*0x3dc52c0*/ int get_Size();
                                            /*0x3dc52c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dc54c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc53d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc4dcc*/ SecT163R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc4f90*/ SecT163R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc5590*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dc5660*/ bool get_CompressionYTilde();
                                        /*0x3dc56dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc5e08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc6168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc6674*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT163R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT163R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Point m_infinity;

                                        static /*0x3dc6d88*/ SecT163R2Curve();
                                        /*0x3dc67d4*/ SecT163R2Curve();
                                        /*0x3dc69c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dc6a10*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dc6a1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dc6a24*/ int get_FieldSize();
                                        /*0x3dc6a2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc6a84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc6af8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc6b84*/ bool get_IsKoblitz();
                                        /*0x3dc6b8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT163R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dc6d30*/ SecT163R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Curve outer, ulong[] table, int size);
                                            /*0x3dc6eac*/ int get_Size();
                                            /*0x3dc6eb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dc70b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dc6fbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT163R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc69b8*/ SecT163R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc6b7c*/ SecT163R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dc717c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dc724c*/ bool get_CompressionYTilde();
                                        /*0x3dc72c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc79d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dc7d04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dc81cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT193Field
                                    {
                                        static /*0x3dc832c*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc8404*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dc856c*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dc85f8*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dc86a0*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dc86b0*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dc8888*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dc8ac4*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dc8ebc*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc87a4*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dc8f0c*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dc8a0c*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dc8ff8*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dc8a48*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dc9038*/ uint Trace(ulong[] x);
                                        static /*0x3dc9060*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dc9110*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3dc8b10*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dc919c*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dc873c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT193FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dc92fc*/ SecT193FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dc93b8*/ SecT193FieldElement(ulong[] x);
                                        /*0x3dc93e8*/ bool get_IsOne();
                                        /*0x3dc93f4*/ bool get_IsZero();
                                        /*0x3dc9400*/ bool TestBitZero();
                                        /*0x3dc942c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dc9438*/ int get_FieldSize();
                                        /*0x3dc9440*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc950c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dc9590*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc959c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc9668*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc9678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc97e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dc9824*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dc9828*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dc98ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dc99d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dc9a74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dc9af8*/ bool get_HasFastTrace();
                                        /*0x3dc9b00*/ int Trace();
                                        /*0x3dc9b08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dc9b8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dc9c10*/ bool Equals(object obj);
                                        /*0x3dc9c9c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dc9d28*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193FieldElement other);
                                        /*0x3dc9d54*/ int GetHashCode();
                                    }

                                    class SecT193R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT193R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Point m_infinity;

                                        static /*0x3dca3bc*/ SecT193R1Curve();
                                        /*0x3dc9dc8*/ SecT193R1Curve();
                                        /*0x3dc9ff8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dca048*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dca054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dca05c*/ int get_FieldSize();
                                        /*0x3dca064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dca0bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dca130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dca1bc*/ bool get_IsKoblitz();
                                        /*0x3dca1c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT193R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dca364*/ SecT193R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Curve outer, ulong[] table, int size);
                                            /*0x3dca4e0*/ int get_Size();
                                            /*0x3dca4e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dca6f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dca600*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT193R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dc9ff0*/ SecT193R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dca1b4*/ SecT193R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dca7bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dca88c*/ bool get_CompressionYTilde();
                                        /*0x3dca908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcb034*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dcb394*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcb8a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT193R2Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT193R2_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Point m_infinity;

                                        static /*0x3dcbff4*/ SecT193R2Curve();
                                        /*0x3dcba00*/ SecT193R2Curve();
                                        /*0x3dcbc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dcbc80*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dcbc8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dcbc94*/ int get_FieldSize();
                                        /*0x3dcbc9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dcbcf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcbd68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcbdf4*/ bool get_IsKoblitz();
                                        /*0x3dcbdfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT193R2LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dcbf9c*/ SecT193R2LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Curve outer, ulong[] table, int size);
                                            /*0x3dcc118*/ int get_Size();
                                            /*0x3dcc120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dcc32c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dcc238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT193R2Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dcbc28*/ SecT193R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcbdec*/ SecT193R2Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcc3f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dcc4c4*/ bool get_CompressionYTilde();
                                        /*0x3dcc540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dccc6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dccfcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dcd4d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT233Field
                                    {
                                        static /*0x3dcd638*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dcd710*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dcd8a8*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dcd934*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dcd9dc*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dcd9ec*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dcdbac*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dcddac*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dce240*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dcdab0*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dce290*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dcdd60*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dce4b8*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dcddf8*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dce508*/ uint Trace(ulong[] x);
                                        static /*0x3dce540*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dce5f0*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3dcde94*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dce67c*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dcda98*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT233FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dce7b8*/ SecT233FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dce874*/ SecT233FieldElement(ulong[] x);
                                        /*0x3dce8a4*/ bool get_IsOne();
                                        /*0x3dce8b0*/ bool get_IsZero();
                                        /*0x3dce8bc*/ bool TestBitZero();
                                        /*0x3dce8e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dce8f4*/ int get_FieldSize();
                                        /*0x3dce8fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dce9c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dcea4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dcea58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dceb24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dceb34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dceca0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dcece0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dcece4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dced68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcee94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dcef30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dcefb4*/ bool get_HasFastTrace();
                                        /*0x3dcefbc*/ int Trace();
                                        /*0x3dcefc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dcf048*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dcf0cc*/ bool Equals(object obj);
                                        /*0x3dcf158*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dcf1e4*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233FieldElement other);
                                        /*0x3dcf210*/ int GetHashCode();
                                    }

                                    class SecT233K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT233K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Point m_infinity;

                                        static /*0x3dcf850*/ SecT233K1Curve();
                                        /*0x3dcf284*/ SecT233K1Curve();
                                        /*0x3dcf438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dcf488*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dcf494*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3dcf4e8*/ int get_FieldSize();
                                        /*0x3dcf4f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dcf548*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcf5bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcf648*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dcf650*/ bool get_IsKoblitz();
                                        /*0x3dcf658*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT233K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dcf7f8*/ SecT233K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Curve outer, ulong[] table, int size);
                                            /*0x3dcf974*/ int get_Size();
                                            /*0x3dcf97c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dcfb88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dcfa94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT233K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dcf430*/ SecT233K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dcf640*/ SecT233K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dcfc50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dcfd20*/ bool get_CompressionYTilde();
                                        /*0x3dcfd9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd0474*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd07e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd0c80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT233R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT233R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Point m_infinity;

                                        static /*0x3dd1380*/ SecT233R1Curve();
                                        /*0x3dd0de0*/ SecT233R1Curve();
                                        /*0x3dd0fc4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd1014*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd1020*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd1028*/ int get_FieldSize();
                                        /*0x3dd1030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd1088*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd10fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd1180*/ bool get_IsKoblitz();
                                        /*0x3dd1188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT233R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd1328*/ SecT233R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Curve outer, ulong[] table, int size);
                                            /*0x3dd14a4*/ int get_Size();
                                            /*0x3dd14ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd16b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd15c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT233R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd1780*/ SecT233R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd1788*/ SecT233R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd1790*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd1860*/ bool get_CompressionYTilde();
                                        /*0x3dd18dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd1fec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd2318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd27e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT239Field
                                    {
                                        static /*0x3dd2940*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd2a18*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dd2bb0*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dd2c3c*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dd2ce4*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dd2cf4*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dd2ea4*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dd30dc*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd3570*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd2db8*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dd35c0*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dd3090*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dd3804*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dd3128*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dd3854*/ uint Trace(ulong[] x);
                                        static /*0x3dd38a0*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dd3950*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3dd31c4*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd39dc*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dd2da0*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT239FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dd3b38*/ SecT239FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd3bf4*/ SecT239FieldElement(ulong[] x);
                                        /*0x3dd3c24*/ bool get_IsOne();
                                        /*0x3dd3c30*/ bool get_IsZero();
                                        /*0x3dd3c3c*/ bool TestBitZero();
                                        /*0x3dd3c68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dd3c74*/ int get_FieldSize();
                                        /*0x3dd3c7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd3d48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dd3dcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd3dd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd3ea4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd3eb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd4020*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd4060*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dd4064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dd40e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd4214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dd42b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dd4334*/ bool get_HasFastTrace();
                                        /*0x3dd433c*/ int Trace();
                                        /*0x3dd4344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dd43c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dd444c*/ bool Equals(object obj);
                                        /*0x3dd44d8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dd4564*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239FieldElement other);
                                        /*0x3dd4590*/ int GetHashCode();
                                    }

                                    class SecT239K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT239K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Point m_infinity;

                                        static /*0x3dd4bd0*/ SecT239K1Curve();
                                        /*0x3dd4604*/ SecT239K1Curve();
                                        /*0x3dd47b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd4808*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd4814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3dd4868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd4870*/ int get_FieldSize();
                                        /*0x3dd4878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd48d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd4944*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd49d0*/ bool get_IsKoblitz();
                                        /*0x3dd49d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT239K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd4b78*/ SecT239K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Curve outer, ulong[] table, int size);
                                            /*0x3dd4cf4*/ int get_Size();
                                            /*0x3dd4cfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd4f08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd4e14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT239K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd47b0*/ SecT239K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd49c8*/ SecT239K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd4fd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd50a0*/ bool get_CompressionYTilde();
                                        /*0x3dd511c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd57f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd5b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd6000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT283Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3dd7794*/ SecT283Field();
                                        static /*0x3dd6160*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd6268*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3dd6430*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3dd64d8*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3dd65a4*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3dd65b4*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3dd6834*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3dd6acc*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3dd720c*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd66e8*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3dd7298*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3dd6a48*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3dd7408*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3dd6b54*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3dd7490*/ uint Trace(ulong[] x);
                                        static /*0x3dd74c8*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3dd75a0*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3dd6c20*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3dd764c*/ void ImplMulw(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3dd667c*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT283FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3dd7834*/ SecT283FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd792c*/ SecT283FieldElement(ulong[] x);
                                        /*0x3dd795c*/ bool get_IsOne();
                                        /*0x3dd7968*/ bool get_IsZero();
                                        /*0x3dd7974*/ bool TestBitZero();
                                        /*0x3dd79a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3dd79ac*/ int get_FieldSize();
                                        /*0x3dd79b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd7aac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dd7b58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd7b64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd7c5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd7c6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd7e04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dd7e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dd7e48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dd7ef4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd804c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3dd8110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dd81bc*/ bool get_HasFastTrace();
                                        /*0x3dd81c4*/ int Trace();
                                        /*0x3dd821c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dd82c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dd8374*/ bool Equals(object obj);
                                        /*0x3dd8400*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dd848c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283FieldElement other);
                                        /*0x3dd84b8*/ int GetHashCode();
                                    }

                                    class SecT283K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT283K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Point m_infinity;

                                        static /*0x3dd8afc*/ SecT283K1Curve();
                                        /*0x3dd852c*/ SecT283K1Curve();
                                        /*0x3dd86e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dd8730*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dd873c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3dd8790*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dd8798*/ int get_FieldSize();
                                        /*0x3dd87a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dd87f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd886c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd88f8*/ bool get_IsKoblitz();
                                        /*0x3dd8900*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT283K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dd8aa4*/ SecT283K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Curve outer, ulong[] table, int size);
                                            /*0x3dd8c20*/ int get_Size();
                                            /*0x3dd8c28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dd8e24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dd8d30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT283K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dd86d8*/ SecT283K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dd88f0*/ SecT283K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dd8ef0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dd8fc0*/ bool get_CompressionYTilde();
                                        /*0x3dd903c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd9714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3dd9a88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3dd9f20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT283R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT283R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Point m_infinity;

                                        static /*0x3dda634*/ SecT283R1Curve();
                                        /*0x3dda080*/ SecT283R1Curve();
                                        /*0x3dda26c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dda2bc*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dda2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dda2d0*/ int get_FieldSize();
                                        /*0x3dda2d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dda330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dda3a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dda430*/ bool get_IsKoblitz();
                                        /*0x3dda438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT283R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dda5dc*/ SecT283R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Curve outer, ulong[] table, int size);
                                            /*0x3dda758*/ int get_Size();
                                            /*0x3dda760*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dda95c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dda868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT283R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dda264*/ SecT283R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dda428*/ SecT283R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3ddaa28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3ddaaf8*/ bool get_CompressionYTilde();
                                        /*0x3ddab74*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3ddb284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3ddb5b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3ddba78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT409Field
                                    {
                                        static /*0x3ddbbd8*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3ddbd40*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3ddbdb0*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3ddbe90*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3ddbfa4*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3ddbfb4*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3ddc210*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3ddc4a0*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3ddcd54*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3ddc0b0*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3ddcda4*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3ddc3e0*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3ddcf10*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3ddc420*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3ddcf54*/ uint Trace(ulong[] x);
                                        static /*0x3ddcf7c*/ void ImplCompactExt(ulong[] zz);
                                        static /*0x3ddd0a0*/ void ImplExpand(ulong[] x, ulong[] z);
                                        static /*0x3ddc4ec*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3ddd188*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3ddc044*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT409FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3ddd2c4*/ SecT409FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3ddd380*/ SecT409FieldElement(ulong[] x);
                                        /*0x3ddd3b0*/ bool get_IsOne();
                                        /*0x3ddd3bc*/ bool get_IsZero();
                                        /*0x3ddd3c8*/ bool TestBitZero();
                                        /*0x3ddd3f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3ddd400*/ int get_FieldSize();
                                        /*0x3ddd408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddd4d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3ddd558*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddd564*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddd630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddd640*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddd7b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3ddd7f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3ddd7f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3ddd878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddd9a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3ddda44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3dddac8*/ bool get_HasFastTrace();
                                        /*0x3dddad0*/ int Trace();
                                        /*0x3dddad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dddb5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dddbe0*/ bool Equals(object obj);
                                        /*0x3dddc6c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dddcf8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409FieldElement other);
                                        /*0x3dddd24*/ int GetHashCode();
                                    }

                                    class SecT409K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT409K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Point m_infinity;

                                        static /*0x3dde368*/ SecT409K1Curve();
                                        /*0x3dddd98*/ SecT409K1Curve();
                                        /*0x3dddf4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3dddf9c*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3dddfa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3dddffc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3dde004*/ int get_FieldSize();
                                        /*0x3dde00c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3dde064*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dde0d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dde164*/ bool get_IsKoblitz();
                                        /*0x3dde16c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT409K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3dde310*/ SecT409K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Curve outer, ulong[] table, int size);
                                            /*0x3dde48c*/ int get_Size();
                                            /*0x3dde494*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3dde690*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3dde59c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT409K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3dddf44*/ SecT409K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3dde15c*/ SecT409K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3dde75c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3dde82c*/ bool get_CompressionYTilde();
                                        /*0x3dde8a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3ddef80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3ddf2f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3ddf78c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT409R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT409R1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Point m_infinity;

                                        static /*0x3ddfea0*/ SecT409R1Curve();
                                        /*0x3ddf8ec*/ SecT409R1Curve();
                                        /*0x3ddfad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3ddfb28*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3ddfb34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3ddfb3c*/ int get_FieldSize();
                                        /*0x3ddfb44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3ddfb9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddfc10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3ddfc9c*/ bool get_IsKoblitz();
                                        /*0x3ddfca4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT409R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3ddfe48*/ SecT409R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Curve outer, ulong[] table, int size);
                                            /*0x3ddffc4*/ int get_Size();
                                            /*0x3ddffcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de01c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de00d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT409R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3ddfad0*/ SecT409R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3ddfc94*/ SecT409R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de0294*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3de0364*/ bool get_CompressionYTilde();
                                        /*0x3de03e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de0af0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3de0e1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de12e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT571Field
                                    {
                                        static /*0x0*/ ulong[] ROOT_Z;

                                        static /*0x3de32c8*/ SecT571Field();
                                        static /*0x3de1444*/ void Add(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de1460*/ void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                        static /*0x3de1488*/ void AddBothTo(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de1500*/ void AddBothTo(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff);
                                        static /*0x3de159c*/ void AddExt(ulong[] xx, ulong[] yy, ulong[] zz);
                                        static /*0x3de15b8*/ void AddOne(ulong[] x, ulong[] z);
                                        static /*0x3de162c*/ void AddTo(ulong[] x, ulong[] z);
                                        static /*0x3de1644*/ ulong[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3de1654*/ void HalfTrace(ulong[] x, ulong[] z);
                                        static /*0x3de18a0*/ void Invert(ulong[] x, ulong[] z);
                                        static /*0x3de1b78*/ void Multiply(ulong[] x, ulong[] y, ulong[] z);
                                        static /*0x3de2a54*/ void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3de2ae8*/ void MultiplyPrecomp(ulong[] x, ulong[] precomp, ulong[] z);
                                        static /*0x3de2d04*/ ulong[] PrecompMultiplicand(ulong[] x);
                                        static /*0x3de1758*/ void Reduce(ulong[] xx, ulong[] z);
                                        static /*0x3de2e34*/ void Reduce5(ulong[] z, int zOff);
                                        static /*0x3de2ea0*/ void Sqrt(ulong[] x, ulong[] z);
                                        static /*0x3de1ae8*/ void Square(ulong[] x, ulong[] z);
                                        static /*0x3de3080*/ void SquareAddToExt(ulong[] x, ulong[] zz);
                                        static /*0x3de1c00*/ void SquareN(ulong[] x, int n, ulong[] z);
                                        static /*0x3de311c*/ uint Trace(ulong[] x);
                                        static /*0x3de1ce8*/ void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz);
                                        static /*0x3de2b70*/ void ImplMultiplyPrecomp(ulong[] x, ulong[] precomp, ulong[] zz);
                                        static /*0x3de3160*/ void ImplMulwAcc(ulong[] u, ulong x, ulong y, ulong[] z, int zOff);
                                        static /*0x3de1740*/ void ImplSquare(ulong[] x, ulong[] zz);
                                    }

                                    class SecT571FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mFieldElement
                                    {
                                        /*0x10*/ ulong[] x;

                                        /*0x3de3368*/ SecT571FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de3460*/ SecT571FieldElement(ulong[] x);
                                        /*0x3de3490*/ bool get_IsOne();
                                        /*0x3de349c*/ bool get_IsZero();
                                        /*0x3de34a8*/ bool TestBitZero();
                                        /*0x3de34d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3de34e0*/ int get_FieldSize();
                                        /*0x3de34e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de35e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3de3694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de36a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de3798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyMinusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de37a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement MultiplyPlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de393c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3de397c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3de3980*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3de3a2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePlusProduct(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de3b80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement SquarePow(int pow);
                                        /*0x3de3c44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement HalfTrace();
                                        /*0x3de3cf0*/ bool get_HasFastTrace();
                                        /*0x3de3cf8*/ int Trace();
                                        /*0x3de3d50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3de3dfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3de3ea8*/ bool Equals(object obj);
                                        /*0x3de3f34*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3de3fc0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement other);
                                        /*0x3de3fec*/ int GetHashCode();
                                    }

                                    class SecT571K1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT571K1_AFFINE_ZS;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Point m_infinity;

                                        static /*0x3de4630*/ SecT571K1Curve();
                                        /*0x3de4060*/ SecT571K1Curve();
                                        /*0x3de4214*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de4264*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de4270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateDefaultMultiplier();
                                        /*0x3de42c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de42cc*/ int get_FieldSize();
                                        /*0x3de42d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de432c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de43a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de442c*/ bool get_IsKoblitz();
                                        /*0x3de4434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT571K1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de45d8*/ SecT571K1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Curve outer, ulong[] table, int size);
                                            /*0x3de4754*/ int get_Size();
                                            /*0x3de475c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de4958*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de4864*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT571K1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3de420c*/ SecT571K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de4424*/ SecT571K1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de4a24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3de4af4*/ bool get_CompressionYTilde();
                                        /*0x3de4b70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de564c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3de59c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de5e58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }

                                    class SecT571R1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SECT571R1_AFFINE_ZS;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement SecT571R1_B;
                                        static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571FieldElement SecT571R1_B_SQRT;
                                        /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Point m_infinity;

                                        static /*0x3de6540*/ SecT571R1Curve();
                                        /*0x3de5fb8*/ SecT571R1Curve();
                                        /*0x3de6178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de61c8*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de61d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de61dc*/ int get_FieldSize();
                                        /*0x3de61e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de623c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de62b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de633c*/ bool get_IsKoblitz();
                                        /*0x3de6344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);

                                        class SecT571R1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Curve m_outer;
                                            /*0x18*/ ulong[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de64e8*/ SecT571R1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Curve outer, ulong[] table, int size);
                                            /*0x3de6798*/ int get_Size();
                                            /*0x3de67a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de699c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de68a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(ulong[] x, ulong[] y);
                                        }
                                    }

                                    class SecT571R1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint
                                    {
                                        /*0x3de6170*/ SecT571R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de6334*/ SecT571R1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de6a68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord();
                                        /*0x3de6b38*/ bool get_CompressionYTilde();
                                        /*0x3de6bb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de76b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3de7be8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3de80ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }
                                }

                                namespace GM
                                {
                                    class SM2P256V1Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpCurve
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                        static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] SM2P256V1_AFFINE_ZS;
                                        /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Point m_infinity;

                                        static /*0x3de8adc*/ SM2P256V1Curve();
                                        /*0x3de820c*/ SM2P256V1Curve();
                                        /*0x3de8464*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CloneCurve();
                                        /*0x3de84b4*/ bool SupportsCoordinateSystem(int coord);
                                        /*0x3de84c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Infinity();
                                        /*0x3de84c8*/ int get_FieldSize();
                                        /*0x3de852c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de86a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de8714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreateRawPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3de87a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECLookupTable CreateCacheSafeLookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint[] points, int off, int len);
                                        /*0x3de8998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement RandomFieldElementMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r);

                                        class SM2P256V1LookupTable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractECLookupTable
                                        {
                                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Curve m_outer;
                                            /*0x18*/ uint[] m_table;
                                            /*0x20*/ int m_size;

                                            /*0x3de8940*/ SM2P256V1LookupTable(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1Curve outer, uint[] table, int size);
                                            /*0x3de8c2c*/ int get_Size();
                                            /*0x3de8c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Lookup(int index);
                                            /*0x3de8e40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint LookupVar(int index);
                                            /*0x3de8d4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint CreatePoint(uint[] x, uint[] y);
                                        }
                                    }

                                    class SM2P256V1Field
                                    {
                                        static /*0x0*/ uint[] P;
                                        static /*0x8*/ uint[] PExt;

                                        static /*0x3de9e18*/ SM2P256V1Field();
                                        static /*0x3de8f04*/ void Add(uint[] x, uint[] y, uint[] z);
                                        static /*0x3de90cc*/ void AddOne(uint[] x, uint[] z);
                                        static /*0x3de9198*/ uint[] FromBigInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        static /*0x3de9268*/ void Inv(uint[] x, uint[] z);
                                        static /*0x3de934c*/ int IsZero(uint[] x);
                                        static /*0x3de93a0*/ void Multiply(uint[] x, uint[] y, uint[] z);
                                        static /*0x3de9600*/ void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz);
                                        static /*0x3de96f4*/ void Negate(uint[] x, uint[] z);
                                        static /*0x3de978c*/ void Random(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3de8a40*/ void RandomMult(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom r, uint[] z);
                                        static /*0x3de9428*/ void Reduce(uint[] xx, uint[] z);
                                        static /*0x3de98ec*/ void Reduce32(uint x, uint[] z);
                                        static /*0x3de9a84*/ void Square(uint[] x, uint[] z);
                                        static /*0x3de9b04*/ void SquareN(uint[] x, int n, uint[] z);
                                        static /*0x3de9bd0*/ void Subtract(uint[] x, uint[] y, uint[] z);
                                        static /*0x3de9d48*/ void Twice(uint[] x, uint[] z);
                                        static /*0x3de8fe0*/ void AddPInvTo(uint[] z);
                                        static /*0x3de9c5c*/ void SubPInvFrom(uint[] z);
                                    }

                                    class SM2P256V1FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpFieldElement
                                    {
                                        static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Q;
                                        /*0x10*/ uint[] x;

                                        static /*0x3deaad4*/ SM2P256V1FieldElement();
                                        /*0x3de8584*/ SM2P256V1FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                        /*0x3de8aac*/ SM2P256V1FieldElement(uint[] x);
                                        /*0x3de9efc*/ bool get_IsZero();
                                        /*0x3de9f08*/ bool get_IsOne();
                                        /*0x3de9f14*/ bool TestBitZero();
                                        /*0x3de9f38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ToBigInteger();
                                        /*0x3de9f44*/ int get_FieldSize();
                                        /*0x3de9fa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dea0a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement AddOne();
                                        /*0x3dea14c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dea244*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Multiply(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dea33c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Divide(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement b);
                                        /*0x3dea43c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Negate();
                                        /*0x3dea4e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Square();
                                        /*0x3dea594*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Invert();
                                        /*0x3dea640*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement Sqrt();
                                        /*0x3dea8d8*/ bool Equals(object obj);
                                        /*0x3dea964*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement other);
                                        /*0x3dea9f0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Custom.GM.SM2P256V1FieldElement other);
                                        /*0x3deaa1c*/ int GetHashCode();
                                    }

                                    class SM2P256V1Point : Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractFpPoint
                                    {
                                        /*0x3de845c*/ SM2P256V1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y);
                                        /*0x3de8798*/ SM2P256V1Point(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement[] zs);
                                        /*0x3deaba4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3deb25c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Twice();
                                        /*0x3deb728*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint b);
                                        /*0x3deb7f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ThreeTimes();
                                        /*0x3deb864*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint Negate();
                                    }
                                }
                            }

                            namespace Abc
                            {
                                class SimpleBigDecimal
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt;
                                    /*0x18*/ int scale;

                                    /*0x3deb924*/ SimpleBigDecimal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger bigInt, int scale);
                                    /*0x3deb9ac*/ void CheckScale(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x3deba18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal AdjustScale(int newScale);
                                    /*0x3debaf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x3debb8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Negate();
                                    /*0x3debc08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal b);
                                    /*0x3debc30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal Subtract(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                    /*0x3debccc*/ int CompareTo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                                    /*0x3debd08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Floor();
                                    /*0x3debd2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Round();
                                    /*0x3debde8*/ int get_Scale();
                                    /*0x3debdf0*/ string ToString();
                                    /*0x3dec0dc*/ bool Equals(object obj);
                                    /*0x3dec19c*/ int GetHashCode();
                                }

                                class Tnaf
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusOne;
                                    static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusTwo;
                                    static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger MinusThree;
                                    static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Four;
                                    static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] Alpha0;
                                    static /*0x28*/ sbyte[][] Alpha0Tnaf;
                                    static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] Alpha1;
                                    static /*0x38*/ sbyte[][] Alpha1Tnaf;

                                    static /*0x3ded8cc*/ Tnaf();
                                    static /*0x3dec1cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Norm(sbyte mu, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda);
                                    static /*0x3dec2e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement Round(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal lambda0, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal lambda1, sbyte mu);
                                    static /*0x3dec6d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.SimpleBigDecimal ApproximateDivisionByN(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger vm, sbyte a, int m, int c);
                                    static /*0x3dec848*/ sbyte GetMu(int curveA);
                                    static /*0x3dec858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetLucas(sbyte mu, int k, bool doV);
                                    static /*0x3deca18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GetTw(sbyte mu, int w);
                                    static /*0x3decb84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] GetSi(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mCurve curve);
                                    static /*0x3dece58*/ int GetShiftsForCofactor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h);
                                    static /*0x3deceec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement PartModReduction(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger k, int m, sbyte a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] s, sbyte mu, sbyte c);
                                    static /*0x3ded170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint MultiplyFromTnaf(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte[] u);
                                    static /*0x3ded360*/ sbyte[] TauAdicWNaf(sbyte mu, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement lambda, sbyte width, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pow2w, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger tw, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Abc.ZTauElement[] alpha);
                                    static /*0x3ded714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint[] GetPreComp(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.AbstractF2mPoint p, sbyte a);
                                }

                                class ZTauElement
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger v;

                                    /*0x3dec690*/ ZTauElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger v);
                                }
                            }
                        }
                    }

                    namespace Crypto
                    {
                        class AesUtilities
                        {
                            static /*0x3dee030*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher CreateEngine();
                        }

                        class AsymmetricCipherKeyPair
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter;

                            /*0x3dee084*/ AsymmetricCipherKeyPair(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter);
                            /*0x3dee170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Public();
                            /*0x3dee178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Private();
                        }

                        class AsymmetricKeyParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                        {
                            /*0x10*/ bool privateKey;

                            /*0x3dee180*/ AsymmetricKeyParameter(bool privateKey);
                            /*0x3dee1a8*/ bool get_IsPrivate();
                            /*0x3dee1b0*/ bool Equals(object obj);
                            /*0x3dee248*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter other);
                            /*0x3dee26c*/ int GetHashCode();
                        }

                        class Check
                        {
                            static /*0x3dee2a0*/ void DataLength(byte[] buf, int off, int len, string msg);
                            static /*0x3dee308*/ void OutputLength(byte[] buf, int off, int len, string msg);
                            static /*0x3dee370*/ void DataLength(System.ReadOnlySpan<byte> input, int len, string msg);
                            static /*0x3dee3f4*/ void OutputLength(System.Span<byte> output, int len, string msg);
                        }

                        class CryptoException : System.Exception
                        {
                            /*0x3dee478*/ CryptoException();
                            /*0x3dee4d0*/ CryptoException(string message);
                            /*0x3dee538*/ CryptoException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class CryptoServicesRegistrar
                        {
                            static /*0x3dee5b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom GetSecureRandom();
                            static /*0x3dee60c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom GetSecureRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom secureRandom);
                        }

                        class DataLengthException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x3dee668*/ DataLengthException();
                            /*0x3dee304*/ DataLengthException(string message);
                            /*0x3dee66c*/ DataLengthException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface IAsymmetricBlockCipher
                        {
                            void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x380b6a0*/ int GetInputBlockSize();
                            /*0x380b6a0*/ int GetOutputBlockSize();
                            byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                        }

                        interface IBlockCipher
                        {
                            void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x380b6a0*/ int GetBlockSize();
                            int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);
                            int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                        }

                        interface ICipherParameters
                        {
                        }

                        interface IDigest
                        {
                            /*0x380b6a0*/ int GetDigestSize();
                            /*0x380b6a0*/ int GetByteLength();
                            /*0x380cdf0*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            int DoFinal(byte[] output, int outOff);
                            int DoFinal(System.Span<byte> output);
                            /*0x380cb08*/ void Reset();
                        }

                        interface IDsa
                        {
                            void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                            bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                        }

                        interface IMac
                        {
                            /*0x380d83c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x380b6a0*/ int GetMacSize();
                            /*0x380cdf0*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            int DoFinal(System.Span<byte> output);
                        }

                        class InvalidCipherTextException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x3dee670*/ InvalidCipherTextException();
                            /*0x3dee674*/ InvalidCipherTextException(string message);
                            /*0x3dee678*/ InvalidCipherTextException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        interface IRsa
                        {
                            void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x380b6a0*/ int GetInputBlockSize();
                            /*0x380b6a0*/ int GetOutputBlockSize();
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ConvertInput(byte[] buf, int off, int len);
                            /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ProcessBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger input);
                            /*0x380bb68*/ byte[] ConvertOutput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger result);
                        }

                        interface ISigner
                        {
                            void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                            /*0x380cdf0*/ void Update(byte input);
                            void BlockUpdate(byte[] input, int inOff, int inLen);
                            void BlockUpdate(System.ReadOnlySpan<byte> input);
                            /*0x380b2f0*/ bool VerifySignature(byte[] signature);
                        }

                        interface IXof : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                        {
                            int OutputFinal(byte[] output, int outOff, int outLen);
                        }

                        class KeyGenerationParameters
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                            /*0x18*/ int strength;

                            /*0x3dee67c*/ KeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, int strength);
                            /*0x3dee754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_Random();
                            /*0x3dee75c*/ int get_Strength();
                        }

                        class MaxBytesExceededException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.CryptoException
                        {
                            /*0x3dee764*/ MaxBytesExceededException();
                            /*0x3dee768*/ MaxBytesExceededException(string message);
                            /*0x3dee76c*/ MaxBytesExceededException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class OutputLengthException : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.DataLengthException
                        {
                            /*0x3dee770*/ OutputLengthException();
                            /*0x3dee36c*/ OutputLengthException(string message);
                            /*0x3dee774*/ OutputLengthException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        namespace Utilities
                        {
                            class Pack
                            {
                                static /*0x3dee778*/ void UInt32_To_BE(uint n, byte[] bs, int off);
                                static /*0x3dee89c*/ void UInt32_To_BE(uint[] ns, byte[] bs, int off);
                                static /*0x3dee914*/ uint BE_To_UInt32(byte[] bs, int off);
                                static /*0x3deea54*/ void BE_To_UInt32(byte[] bs, int off, uint[] ns);
                                static /*0x3deeac8*/ void BE_To_UInt32(byte[] bs, int bsOff, uint[] ns, int nsOff, int nsLen);
                                static /*0x3deeb50*/ void UInt64_To_BE(ulong n, byte[] bs, int off);
                                static /*0x3deec74*/ void UInt64_To_BE(ulong[] ns, byte[] bs, int off);
                                static /*0x3deecec*/ ulong BE_To_UInt64(byte[] bs, int off);
                                static /*0x3deee2c*/ void BE_To_UInt64(byte[] bs, int off, ulong[] ns);
                                static /*0x3deeea0*/ void UInt32_To_LE(uint n, byte[] bs, int off);
                                static /*0x3deefc0*/ void UInt32_To_LE(uint[] ns, byte[] bs, int off);
                                static /*0x3def03c*/ uint LE_To_UInt32(byte[] bs, int off);
                                static /*0x3def178*/ void LE_To_UInt32(byte[] bs, int off, uint[] ns);
                                static /*0x3de9860*/ void LE_To_UInt32(byte[] bs, int bOff, uint[] ns, int nOff, int count);
                                static /*0x3def1f0*/ uint[] LE_To_UInt32(byte[] bs, int off, int count);
                                static /*0x3def2a4*/ void UInt64_To_LE(ulong n, byte[] bs);
                                static /*0x3def380*/ void UInt64_To_LE(ulong n, byte[] bs, int off);
                                static /*0x3def4a0*/ void UInt64_To_LE(ulong[] ns, int nsOff, int nsLen, byte[] bs, int bsOff);
                                static /*0x3def528*/ ulong LE_To_UInt64(byte[] bs, int off);
                                static /*0x3def664*/ uint BE_To_UInt32(System.ReadOnlySpan<byte> bs);
                                static /*0x3def700*/ void BE_To_UInt32(System.ReadOnlySpan<byte> bs, System.Span<uint> ns);
                                static /*0x3def84c*/ ulong BE_To_UInt64(System.ReadOnlySpan<byte> bs);
                                static /*0x3def8e8*/ uint LE_To_UInt32(System.ReadOnlySpan<byte> bs);
                                static /*0x3def980*/ void LE_To_UInt32(System.ReadOnlySpan<byte> bs, System.Span<uint> ns);
                                static /*0x3defac8*/ ulong LE_To_UInt64(System.ReadOnlySpan<byte> bs);
                                static /*0x3defb60*/ void LE_To_UInt64(System.ReadOnlySpan<byte> bs, System.Span<ulong> ns);
                                static /*0x3defca8*/ void UInt32_To_BE(uint n, System.Span<byte> bs);
                                static /*0x3defd50*/ void UInt32_To_BE(System.ReadOnlySpan<uint> ns, System.Span<byte> bs);
                                static /*0x3defe9c*/ void UInt32_To_LE(uint n, System.Span<byte> bs);
                                static /*0x3deff40*/ void UInt32_To_LE(System.ReadOnlySpan<uint> ns, System.Span<byte> bs);
                                static /*0x3df0088*/ void UInt64_To_BE(ulong n, System.Span<byte> bs);
                                static /*0x3df0130*/ void UInt64_To_BE(System.ReadOnlySpan<ulong> ns, System.Span<byte> bs);
                                static /*0x3df027c*/ void UInt64_To_LE(ulong n, System.Span<byte> bs);
                                static /*0x3df0320*/ void UInt64_To_LE(System.ReadOnlySpan<ulong> ns, System.Span<byte> bs);
                            }
                        }

                        namespace Signers
                        {
                            class DsaDigestSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding encoding;
                                /*0x28*/ bool forSigning;

                                /*0x3df0468*/ DsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3df04e0*/ DsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa dsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding encoding);
                                /*0x3df0540*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df075c*/ void Update(byte input);
                                /*0x3df0808*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3df08cc*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3df0988*/ bool VerifySignature(byte[] signature);
                                /*0x3df0cf0*/ void Reset();
                                /*0x3df0d94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GetOrder();
                            }

                            class DsaSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator kCalculator;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                /*0x3df0e38*/ DsaSigner();
                                /*0x3df0eac*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df114c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x3df1170*/ bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x3df13a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateE(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] message);
                                /*0x3df1484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom InitSecureRandom(bool needed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom provided);
                            }

                            class ECDsaSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDsa
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Eight;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator kCalculator;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                static /*0x3df1cc0*/ ECDsaSigner();
                                /*0x3df1498*/ ECDsaSigner();
                                /*0x3df1504*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df17a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Order();
                                /*0x3df17c8*/ bool VerifySignature(byte[] message, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x3df1b64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateE(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] message);
                                /*0x3df1c24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement GetDenominator(int coordinateSystem, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p);
                                /*0x3df1cac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom InitSecureRandom(bool needed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom provided);
                            }

                            class Ed25519Signer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.Ed25519Signer.Buffer buffer;
                                /*0x18*/ bool forSigning;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PrivateKeyParameters privateKey;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters publicKey;

                                /*0x3df1d44*/ Ed25519Signer();
                                /*0x3df1db8*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df1ed4*/ void Update(byte b);
                                /*0x3df1ef8*/ void BlockUpdate(byte[] buf, int off, int len);
                                /*0x3df1f1c*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3df1f40*/ bool VerifySignature(byte[] signature);
                                /*0x3df21b4*/ void Reset();

                                class Buffer : System.IO.MemoryStream
                                {
                                    /*0x3df1db0*/ Buffer();
                                    /*0x3df1fb4*/ bool VerifySignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed25519PublicKeyParameters publicKey, byte[] signature);
                                    /*0x3df21cc*/ void Reset();
                                }
                            }

                            class Ed448Signer : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.Ed448Signer.Buffer buffer;
                                /*0x18*/ byte[] context;
                                /*0x20*/ bool forSigning;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PrivateKeyParameters privateKey;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters publicKey;

                                /*0x3df2380*/ Ed448Signer(byte[] context);
                                /*0x3df2440*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df255c*/ void Update(byte b);
                                /*0x3df2580*/ void BlockUpdate(byte[] buf, int off, int len);
                                /*0x3df25a4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3df25c8*/ bool VerifySignature(byte[] signature);
                                /*0x3df2854*/ void Reset();

                                class Buffer : System.IO.MemoryStream
                                {
                                    /*0x3df2438*/ Buffer();
                                    /*0x3df2644*/ bool VerifySignature(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Ed448PublicKeyParameters publicKey, byte[] ctx, byte[] signature);
                                    /*0x3df286c*/ void Reset();
                                }
                            }

                            class GenericSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x20*/ bool forSigning;

                                /*0x3df2a20*/ GenericSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3df2a64*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df2c80*/ void Update(byte input);
                                /*0x3df2d2c*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3df2df0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3df2eac*/ bool VerifySignature(byte[] signature);
                                /*0x3df3204*/ void Reset();
                            }

                            interface IDsaEncoding
                            {
                                /*0x380bcbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] Decode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] encoding);
                            }

                            interface IDsaKCalculator
                            {
                                /*0x380b128*/ bool get_IsDeterministic();
                            }

                            class PssSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest1;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest2;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                                /*0x38*/ int hLen;
                                /*0x3c*/ int mgfhLen;
                                /*0x40*/ int sLen;
                                /*0x44*/ bool sSet;
                                /*0x48*/ int emBits;
                                /*0x50*/ byte[] salt;
                                /*0x58*/ byte[] mDash;
                                /*0x60*/ byte[] block;
                                /*0x68*/ byte trailer;

                                static /*0x3df32a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.PssSigner CreateRawSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte trailer);
                                /*0x3df356c*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, int saltLen);
                                /*0x3df3598*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, int saltLen, byte trailer);
                                /*0x3df35c4*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte trailer);
                                /*0x3df3370*/ PssSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest contentDigest2, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest mgfDigest, int saltLen, byte[] salt, byte trailer);
                                /*0x3df35f0*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df385c*/ void ClearBlock(byte[] block);
                                /*0x3df3880*/ void Update(byte input);
                                /*0x3df392c*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3df39f0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3df3aac*/ bool VerifySignature(byte[] signature);
                                /*0x3df4240*/ void ItoOSP(int i, byte[] sp);
                                /*0x3df4040*/ byte[] MaskGeneratorFunction(byte[] Z, int zOff, int zLen, int length);
                                /*0x3df4294*/ byte[] MaskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length);
                            }

                            class RandomDsaKCalculator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaKCalculator
                            {
                                /*0x3df0ea4*/ RandomDsaKCalculator();
                                /*0x3df4704*/ bool get_IsDeterministic();
                            }

                            class RsaDigestSigner : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner
                            {
                                static /*0x0*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> OidMap;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher rsaEngine;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x28*/ bool forSigning;

                                static /*0x3df470c*/ RsaDigestSigner();
                                /*0x3df52d0*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestOid);
                                /*0x3df5378*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x3df53ec*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x3df5470*/ RsaDigestSigner(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher rsaEngine, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algId);
                                /*0x3df551c*/ void Init(bool forSigning, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3df5738*/ void Update(byte input);
                                /*0x3df57e4*/ void BlockUpdate(byte[] input, int inOff, int inLen);
                                /*0x3df58a8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3df5964*/ bool VerifySignature(byte[] signature);
                                /*0x3df5e20*/ void Reset();
                                /*0x3df5d98*/ byte[] DerEncode(byte[] hash);
                            }

                            class StandardDsaEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.IDsaEncoding
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Signers.StandardDsaEncoding Instance;

                                static /*0x3df63b4*/ StandardDsaEncoding();
                                /*0x3df63ac*/ StandardDsaEncoding();
                                /*0x3df5ec4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger[] Decode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, byte[] encoding);
                                /*0x3df60e4*/ byte[] Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger r, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s);
                                /*0x3df61c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CheckValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                                /*0x3df625c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger DecodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence s, int pos);
                                /*0x3df6320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger EncodeValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            }
                        }

                        namespace Prng
                        {
                            class CryptoApiRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator, System.IDisposable
                            {
                                /*0x10*/ System.Security.Cryptography.RandomNumberGenerator m_randomNumberGenerator;

                                /*0x3df641c*/ CryptoApiRandomGenerator();
                                /*0x3df643c*/ CryptoApiRandomGenerator(System.Security.Cryptography.RandomNumberGenerator randomNumberGenerator);
                                /*0x3df64c4*/ void AddSeedMaterial(System.ReadOnlySpan<byte> inSeed);
                                /*0x3df64c8*/ void AddSeedMaterial(long seed);
                                /*0x3df64cc*/ void NextBytes(byte[] bytes);
                                /*0x3df64ec*/ void NextBytes(System.Span<byte> bytes);
                                /*0x3df650c*/ void Dispose();
                            }

                            class DigestRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator
                            {
                                /*0x10*/ long stateCounter;
                                /*0x18*/ long seedCounter;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x28*/ byte[] state;
                                /*0x30*/ byte[] seed;

                                /*0x3df6528*/ DigestRandomGenerator(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3df66b0*/ void AddSeedMaterial(System.ReadOnlySpan<byte> inSeed);
                                /*0x3df69a8*/ void AddSeedMaterial(long rSeed);
                                /*0x3df6c7c*/ void NextBytes(byte[] bytes);
                                /*0x3df6c98*/ void NextBytes(byte[] bytes, int start, int len);
                                /*0x3df6d54*/ void NextBytes(System.Span<byte> bytes);
                                /*0x3df6fc8*/ void CycleSeed();
                                /*0x3df6eb0*/ void GenerateState();
                                /*0x3df6b00*/ void DigestAddCounter(long seedVal);
                                /*0x3df6830*/ void DigestUpdate(System.ReadOnlySpan<byte> inSeed);
                                /*0x3df68ec*/ void DigestDoFinal(System.Span<byte> result);
                            }

                            interface IRandomGenerator
                            {
                                void AddSeedMaterial(System.ReadOnlySpan<byte> seed);
                                /*0x380d438*/ void AddSeedMaterial(long seed);
                                /*0x380d83c*/ void NextBytes(byte[] bytes);
                                void NextBytes(System.Span<byte> bytes);
                            }

                            class VmpcRandomGenerator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Prng.IRandomGenerator
                            {
                                /*0x10*/ byte[] P;
                                /*0x18*/ byte s;
                                /*0x19*/ byte n;

                                /*0x3df707c*/ VmpcRandomGenerator();
                                /*0x3df7114*/ void AddSeedMaterial(System.ReadOnlySpan<byte> seed);
                                /*0x3df7204*/ void AddSeedMaterial(long seed);
                                /*0x3df7310*/ void NextBytes(byte[] bytes);
                                /*0x3df732c*/ void NextBytes(byte[] bytes, int start, int len);
                                /*0x3df73e8*/ void NextBytes(System.Span<byte> bytes);
                            }
                        }

                        namespace Parameters
                        {
                            class AeadParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ byte[] associatedText;
                                /*0x18*/ byte[] nonce;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key;
                                /*0x28*/ int macSize;

                                /*0x3df75ec*/ AeadParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter key, int macSize, byte[] nonce, byte[] associatedText);
                                /*0x3df7654*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.KeyParameter get_Key();
                                /*0x3df765c*/ int get_MacSize();
                                /*0x3df7664*/ byte[] GetAssociatedText();
                                /*0x3df766c*/ byte[] GetNonce();
                            }

                            class Blake3Parameters
                            {
                                /*0x10*/ byte[] m_theKey;
                                /*0x18*/ byte[] m_theContext;

                                /*0x3df7674*/ byte[] GetKey();
                                /*0x3df76d0*/ byte[] GetContext();
                            }

                            class DHKeyGenerationParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters;

                                static /*0x3df7770*/ int GetStrength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3df772c*/ DHKeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3df77a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters get_Parameters();
                            }

                            class DHKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid;

                                /*0x3df77ac*/ DHKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3df7824*/ DHKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid);
                                /*0x3df7878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters get_Parameters();
                                /*0x3df7880*/ bool Equals(object obj);
                                /*0x3df791c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters other);
                                /*0x3df796c*/ int GetHashCode();
                            }

                            class DHParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j;
                                /*0x30*/ int m;
                                /*0x34*/ int l;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation;

                                static /*0x3df79a4*/ int GetDefaultMParam(int lParam);
                                /*0x3df7a14*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, int l);
                                /*0x3df7e24*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation);
                                /*0x3df7a78*/ DHParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, int m, int l, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger j, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters validation);
                                /*0x3df7e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3df7e54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3df7e5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3df7e64*/ int get_M();
                                /*0x3df7e6c*/ int get_L();
                                /*0x3df7e74*/ bool Equals(object obj);
                                /*0x3df7f18*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters other);
                                /*0x3df7f88*/ int GetHashCode();
                            }

                            class DHPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;

                                /*0x3df7ff8*/ DHPrivateKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3df8028*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_X();
                                /*0x3df8030*/ bool Equals(object obj);
                                /*0x3df80cc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters other);
                                /*0x3df8120*/ int GetHashCode();
                            }

                            class DHPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                static /*0x3df8160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams);
                                static /*0x3df83a4*/ int Legendre(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger b);
                                /*0x3df8594*/ DHPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters);
                                /*0x3df85d4*/ DHPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithmOid);
                                /*0x3df8614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Y();
                                /*0x3df861c*/ bool Equals(object obj);
                                /*0x3df86b8*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters other);
                                /*0x3df870c*/ int GetHashCode();
                            }

                            class DHValidationParameters
                            {
                                /*0x10*/ byte[] seed;
                                /*0x18*/ int counter;

                                /*0x3df874c*/ DHValidationParameters(byte[] seed, int counter);
                                /*0x3df886c*/ bool Equals(object obj);
                                /*0x3df8908*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHValidationParameters other);
                                /*0x3df8998*/ int GetHashCode();
                            }

                            class DsaKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters;

                                /*0x3df8a10*/ DsaKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x3df8a48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters get_Parameters();
                                /*0x3df8a50*/ bool Equals(object obj);
                                /*0x3df8aec*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters other);
                                /*0x3df8b3c*/ int GetHashCode();
                            }

                            class DsaParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters validation;

                                /*0x3df8b74*/ DsaParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3df8b7c*/ DsaParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaValidationParameters parameters);
                                /*0x3df8c84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3df8c8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3df8c94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3df8c9c*/ bool Equals(object obj);
                                /*0x3df8d38*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters other);
                                /*0x3df8dac*/ int GetHashCode();
                            }

                            class DsaPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters
                            {
                            }

                            class DsaPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaKeyParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                static /*0x3df8e1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x3df8f7c*/ DsaPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaParameters parameters);
                                /*0x3df901c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Y();
                                /*0x3df9024*/ bool Equals(object obj);
                                /*0x3df90c0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters other);
                                /*0x3df9114*/ int GetHashCode();
                            }

                            class DsaValidationParameters
                            {
                            }

                            class ECDomainParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x18*/ byte[] seed;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger hInv;

                                static /*0x3df9314*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint ValidatePublicPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q);
                                /*0x3df9154*/ ECDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters x9);
                                /*0x3df919c*/ ECDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x3df9438*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3df9440*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_G();
                                /*0x3df9448*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                                /*0x3df9450*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_H();
                                /*0x3df9458*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_HInv();
                                /*0x3df9584*/ byte[] GetSeed();
                                /*0x3df95e0*/ bool Equals(object obj);
                                /*0x3df9684*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters other);
                                /*0x3df9708*/ int GetHashCode();
                                /*0x3df9788*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePrivateScalar(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d);
                            }

                            class ECGost3410Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters
                            {
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _publicKeyParamSet;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _digestParamSet;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier _encryptionParamSet;

                                /*0x3df98b8*/ ECGost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECNamedDomainParameters dp, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestParamSet, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier encryptionParamSet);
                            }

                            class ECKeyGenerationParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domainParams;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                /*0x3df99ac*/ ECKeyGenerationParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domainParameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x3df9a00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters get_DomainParameters();
                                /*0x3df9a08*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_PublicKeyParamSet();
                            }

                            class ECKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, string> Algorithms;
                                /*0x18*/ string algorithm;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                static /*0x3df9f88*/ ECKeyParameters();
                                static /*0x3df9b1c*/ string VerifyAlgorithmName(string algorithm);
                                static /*0x3df9d44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters LookupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3df9a10*/ ECKeyParameters(string algorithm, bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3df9c20*/ ECKeyParameters(string algorithm, bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3df9e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters get_Parameters();
                                /*0x3df9e4c*/ bool Equals(object obj);
                                /*0x3df9ef0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters other);
                                /*0x3df9f48*/ int GetHashCode();
                            }

                            class ECNamedDomainParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters
                            {
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name;

                                /*0x3dfa1a8*/ ECNamedDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters x9);
                                /*0x3df996c*/ ECNamedDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x3dfa1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Name();
                            }

                            class ECPrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters
                            {
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d;

                                /*0x3dfa1d8*/ ECPrivateKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3dfa278*/ ECPrivateKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger d, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3dfa318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_D();
                                /*0x3dfa320*/ bool Equals(object obj);
                                /*0x3dfa3bc*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters other);
                                /*0x3dfa410*/ int GetHashCode();
                            }

                            class ECPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECKeyParameters
                            {
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q;

                                /*0x3dfa450*/ ECPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3dfa4b0*/ ECPublicKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters);
                                /*0x3dfa554*/ ECPublicKeyParameters(string algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3dfa5f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Q();
                                /*0x3dfa600*/ bool Equals(object obj);
                                /*0x3dfa69c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters other);
                                /*0x3dfa6f8*/ int GetHashCode();
                            }

                            class Ed25519PrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                static /*0x4*/ int SignatureSize;

                                static /*0x3dfa738*/ Ed25519PrivateKeyParameters();
                            }

                            class Ed25519PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3dfa9f4*/ Ed25519PublicKeyParameters();
                                static /*0x3dfa820*/ byte[] Validate(byte[] buf);
                                /*0x3dfa7b0*/ Ed25519PublicKeyParameters(byte[] buf);
                                /*0x3dfa928*/ Ed25519PublicKeyParameters(byte[] buf, int off);
                                /*0x3df2324*/ byte[] GetEncoded();
                            }

                            class Ed448PrivateKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                static /*0x4*/ int SignatureSize;

                                static /*0x3dfaa6c*/ Ed448PrivateKeyParameters();
                            }

                            class Ed448PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3dfad28*/ Ed448PublicKeyParameters();
                                static /*0x3dfab54*/ byte[] Validate(byte[] buf);
                                /*0x3dfaae4*/ Ed448PublicKeyParameters(byte[] buf);
                                /*0x3dfac5c*/ Ed448PublicKeyParameters(byte[] buf, int off);
                                /*0x3df29c4*/ byte[] GetEncoded();
                            }

                            class ElGamalKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters;

                                /*0x3dfada0*/ ElGamalKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters);
                                /*0x3dfadd8*/ bool Equals(object obj);
                                /*0x3dfae74*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters other);
                                /*0x3dfaec4*/ int GetHashCode();
                            }

                            class ElGamalParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                /*0x20*/ int l;

                                /*0x3dfaefc*/ ElGamalParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3dfaf04*/ ElGamalParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, int l);
                                /*0x3dfafcc*/ bool Equals(object obj);
                                /*0x3dfb068*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters other);
                                /*0x3dfb0d4*/ int GetHashCode();
                            }

                            class ElGamalPublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters
                            {
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                /*0x3dfb12c*/ ElGamalPublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalParameters parameters);
                                /*0x3dfb1c0*/ bool Equals(object obj);
                                /*0x3dfb25c*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ElGamalPublicKeyParameters other);
                                /*0x3dfb2b0*/ int GetHashCode();
                            }

                            class Gost3410KeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;

                                static /*0x3dfb340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters LookupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3dfb2f0*/ Gost3410KeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                                /*0x3dfb4a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters get_Parameters();
                            }

                            class Gost3410Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters validation;

                                /*0x3dfb4b0*/ Gost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a);
                                /*0x3dfb4b8*/ Gost3410Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410ValidationParameters validation);
                                /*0x3dfb5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3dfb5c8*/ bool Equals(object obj);
                                /*0x3dfb664*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410Parameters other);
                                /*0x3dfb6d8*/ int GetHashCode();
                            }

                            class Gost3410PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Gost3410KeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y;

                                /*0x3dfb748*/ Gost3410PublicKeyParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet);
                            }

                            class Gost3410ValidationParameters
                            {
                            }

                            class KeyParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ byte[] m_key;

                                /*0x3dfb804*/ KeyParameter(byte[] key);
                                /*0x3dfb904*/ KeyParameter(byte[] key, int keyOff, int keyLen);
                                /*0x3dfba54*/ KeyParameter(System.ReadOnlySpan<byte> key);
                                /*0x3dfbac8*/ byte[] GetKey();
                            }

                            class ParametersWithIV : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters m_parameters;
                                /*0x18*/ byte[] m_iv;

                                /*0x3dfbb40*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] iv);
                                /*0x3dfbb5c*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] iv, int ivOff, int ivLen);
                                /*0x3dfbc08*/ ParametersWithIV(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, System.ReadOnlySpan<byte> iv);
                                /*0x3dfbc98*/ byte[] GetIV();
                                /*0x3dfbd10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                            }

                            class ParametersWithRandom : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters m_parameters;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom m_random;

                                /*0x3dfbd18*/ ParametersWithRandom(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x3dfbdcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                                /*0x3dfbdd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom get_Random();
                            }

                            class ParametersWithSBox : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters;
                                /*0x18*/ byte[] sBox;

                                /*0x3dfbddc*/ ParametersWithSBox(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters, byte[] sBox);
                                /*0x3dfbe20*/ byte[] GetSBox();
                                /*0x3dfbe28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters get_Parameters();
                            }

                            class RsaBlindingParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters publicKey;

                                /*0x3dfbe30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters get_PublicKey();
                            }

                            class RsaKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SmallPrimesProduct;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger exponent;

                                static /*0x3dfc3d0*/ RsaKeyParameters();
                                static /*0x3dfbe38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger Validate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus);
                                static /*0x3dfc008*/ int AsInteger(string envVariable, int defaultValue);
                                /*0x3dfc08c*/ RsaKeyParameters(bool isPrivate, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger exponent);
                                /*0x3dfc25c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Modulus();
                                /*0x3dfc264*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Exponent();
                                /*0x3dfc26c*/ bool Equals(object obj);
                                /*0x3dfc344*/ int GetHashCode();
                            }

                            class RsaPrivateCrtKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger e;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger dP;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger dQ;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger qInv;

                                /*0x3dfc470*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PublicExponent();
                                /*0x3dfc478*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3dfc480*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3dfc488*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_DP();
                                /*0x3dfc490*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_DQ();
                                /*0x3dfc498*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_QInv();
                            }

                            class Srp6GroupParameters
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;

                                /*0x3dfc4a0*/ Srp6GroupParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                /*0x3dfc4e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3dfc4ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                            }

                            class X25519PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3dfc738*/ X25519PublicKeyParameters();
                                static /*0x3dfc564*/ byte[] Validate(byte[] buf);
                                /*0x3dfc4f4*/ X25519PublicKeyParameters(byte[] buf);
                                /*0x3dfc66c*/ X25519PublicKeyParameters(byte[] buf, int off);
                            }

                            class X448PublicKeyParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricKeyParameter
                            {
                                static /*0x0*/ int KeySize;
                                /*0x18*/ byte[] data;

                                static /*0x3dfc9c8*/ X448PublicKeyParameters();
                                static /*0x3dfc7f4*/ byte[] Validate(byte[] buf);
                                /*0x3dfc784*/ X448PublicKeyParameters(byte[] buf);
                                /*0x3dfc8fc*/ X448PublicKeyParameters(byte[] buf, int off);
                            }
                        }

                        namespace Paddings
                        {
                            interface IBlockCipherPadding
                            {
                                int AddPadding(byte[] input, int inOff);
                            }
                        }

                        namespace Modes
                        {
                            class CbcBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x10*/ byte[] IV;
                                /*0x18*/ byte[] cbcV;
                                /*0x20*/ byte[] cbcNextV;
                                /*0x28*/ int blockSize;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x38*/ bool encrypting;

                                /*0x3dfca14*/ CbcBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x3dfcb40*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfcd6c*/ int GetBlockSize();
                                /*0x3dfce10*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3dfd414*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3dfcd24*/ void Reset();
                                /*0x3dfd1c0*/ int EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3dfcf6c*/ int DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class CcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                            {
                                static /*0x0*/ int BlockSize;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ byte[] macBlock;
                                /*0x20*/ bool forEncryption;
                                /*0x28*/ byte[] nonce;
                                /*0x30*/ byte[] initialAssociatedText;
                                /*0x38*/ int macSize;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters keyParam;
                                /*0x48*/ System.IO.MemoryStream associatedText;
                                /*0x50*/ System.IO.MemoryStream data;

                                static /*0x3dff474*/ CcmBlockCipher();
                                /*0x3dfd424*/ CcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x3dfd65c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfd8dc*/ int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff);
                                /*0x3dfd978*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3dfd9a4*/ int DoFinal(byte[] outBytes, int outOff);
                                /*0x3dfda58*/ int DoFinal(System.Span<byte> output);
                                /*0x3dfdbd4*/ void Reset();
                                /*0x3dfdc1c*/ int GetOutputSize(int len);
                                /*0x3dfdcbc*/ int ProcessPacket(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3dfeb00*/ int CalculateMac(System.ReadOnlySpan<byte> data, System.Span<byte> macBlock);
                                /*0x3dfd870*/ int GetMacSize(bool forEncryption, int requestedMacBits);
                                /*0x3dff3e8*/ int GetAssociatedTextLength();
                                /*0x3dff3d0*/ bool HasAssociatedText();
                            }

                            class GcmBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IAeadCipher
                            {
                                /*0x10*/ byte[] ctrBlock;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier multiplier;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator exp;
                                /*0x30*/ bool forEncryption;
                                /*0x31*/ bool initialised;
                                /*0x34*/ int macSize;
                                /*0x38*/ byte[] lastKey;
                                /*0x40*/ byte[] nonce;
                                /*0x48*/ byte[] initialAssociatedText;
                                /*0x50*/ byte[] H;
                                /*0x58*/ byte[] J0;
                                /*0x60*/ byte[] bufBlock;
                                /*0x68*/ byte[] macBlock;
                                /*0x70*/ byte[] S;
                                /*0x78*/ byte[] S_at;
                                /*0x80*/ byte[] S_atPre;
                                /*0x88*/ byte[] counter;
                                /*0x90*/ uint counter32;
                                /*0x94*/ uint blocksRemaining;
                                /*0x98*/ int bufOff;
                                /*0xa0*/ ulong totalLength;
                                /*0xa8*/ byte[] atBlock;
                                /*0xb0*/ int atBlockPos;
                                /*0xb8*/ ulong atLength;
                                /*0xc0*/ ulong atLengthPre;

                                static /*0x3dff4c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier CreateGcmMultiplier();
                                /*0x3dff514*/ GcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c);
                                /*0x3dff51c*/ GcmBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier m);
                                /*0x3dff6cc*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3dfffd0*/ int GetOutputSize(int len);
                                /*0x3dffeec*/ void ProcessAadBytes(byte[] inBytes, int inOff, int len);
                                /*0x3dffff8*/ void ProcessAadBytes(System.ReadOnlySpan<byte> input);
                                /*0x3e00380*/ void InitCipher();
                                /*0x3e004f4*/ int ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff);
                                /*0x3e00694*/ int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e02010*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e020b8*/ int DoFinal(System.Span<byte> output);
                                /*0x3e02ce4*/ void Reset();
                                /*0x3e02b48*/ void Reset(bool clearMac);
                                /*0x3e01778*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e01a6c*/ void DecryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e00ee0*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e011d4*/ void EncryptBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e02cec*/ void GetNextCtrBlock(System.Span<byte> block);
                                /*0x3e02978*/ void ProcessPartial(System.Span<byte> partialBlock, System.Span<byte> output);
                                /*0x3dffe38*/ void gHASH(byte[] Y, byte[] b, int len);
                                /*0x3e02e44*/ void gHASHBlock(byte[] Y, System.ReadOnlySpan<byte> b);
                                /*0x3e02f38*/ void gHASHPartial(byte[] Y, System.ReadOnlySpan<byte> b);
                                /*0x3e00414*/ void gHASHPartial(byte[] Y, byte[] b, int off, int len);
                                /*0x3e00308*/ void CheckStatus();
                            }

                            interface IAeadCipher
                            {
                                void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff);
                                int ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                int DoFinal(byte[] outBytes, int outOff);
                                /*0x380b6cc*/ int GetOutputSize(int len);
                                /*0x380cb08*/ void Reset();
                            }

                            interface IBlockCipherMode : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x380cb08*/ void Reset();
                            }

                            class SicBlockCipher : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ int blockSize;
                                /*0x20*/ byte[] counter;
                                /*0x28*/ byte[] counterOut;
                                /*0x30*/ byte[] IV;

                                /*0x3e035d4*/ SicBlockCipher(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher);
                                /*0x3e03700*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e039e8*/ int GetBlockSize();
                                /*0x3e03a8c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e03c48*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e03dd8*/ void Reset();
                            }

                            namespace Gcm
                            {
                                class BasicGcmExponentiator : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmExponentiator
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x;

                                    /*0x3e04180*/ BasicGcmExponentiator();
                                    /*0x3e03e5c*/ void Init(byte[] x);
                                    /*0x3e03ea0*/ void ExponentiateX(long pow, byte[] output);
                                }

                                class GcmUtilities
                                {
                                    static /*0x3e03f3c*/ void One(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x3e04188*/ void AsBytes(ulong x0, ulong x1, byte[] z);
                                    static /*0x3e041c4*/ void AsBytes(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, byte[] z);
                                    static /*0x3e04200*/ void AsFieldElement(byte[] x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x3e04240*/ void DivideP(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x3e04260*/ void Multiply(byte[] x, byte[] y);
                                    static /*0x3e03f4c*/ void Multiply(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y);
                                    static /*0x3e043b8*/ void MultiplyP7(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x3e043e4*/ void MultiplyP8(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y);
                                    static /*0x3e040f0*/ void Square(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x);
                                    static /*0x3e04410*/ void Xor(byte[] x, byte[] y);
                                    static /*0x3e04500*/ void Xor(byte[] x, byte[] y, int yOff, int yLen);
                                    static /*0x3e04578*/ void Xor(ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement x, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement y, ref Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement z);
                                    static /*0x3e0458c*/ void Xor(System.Span<byte> x, System.ReadOnlySpan<byte> y);
                                    static /*0x3e04664*/ void Xor(System.Span<byte> x, System.ReadOnlySpan<byte> y, int len);
                                    static /*0x3e04308*/ ulong ImplMul64(ulong x, ulong y);

                                    struct FieldElement
                                    {
                                        /*0x10*/ ulong n0;
                                        /*0x18*/ ulong n1;
                                    }
                                }

                                interface IGcmExponentiator
                                {
                                    /*0x380d83c*/ void Init(byte[] x);
                                    void ExponentiateX(long pow, byte[] output);
                                }

                                interface IGcmMultiplier
                                {
                                    /*0x380d83c*/ void Init(byte[] H);
                                    /*0x380d83c*/ void MultiplyH(byte[] x);
                                }

                                class Tables4kGcmMultiplier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.IGcmMultiplier
                                {
                                    /*0x10*/ byte[] H;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities.FieldElement[] T;

                                    /*0x3e04948*/ Tables4kGcmMultiplier();
                                    /*0x3e046b0*/ void Init(byte[] H);
                                    /*0x3e04888*/ void MultiplyH(byte[] x);
                                }
                            }
                        }

                        namespace Macs
                        {
                            class CbcBlockCipherMac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ byte[] buf;
                                /*0x18*/ int bufOff;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Modes.IBlockCipherMode m_cipherMode;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding padding;
                                /*0x30*/ int macSize;

                                /*0x3e04950*/ CbcBlockCipherMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, int macSizeInBits);
                                /*0x3e04958*/ CbcBlockCipherMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher, int macSizeInBits, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Paddings.IBlockCipherPadding padding);
                                /*0x3e04b08*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e04c78*/ int GetMacSize();
                                /*0x3e04c80*/ void Update(byte input);
                                /*0x3e04d94*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e04ebc*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e052ec*/ int DoFinal(System.Span<byte> output);
                                /*0x3e04bbc*/ void Reset();
                            }

                            class HMac : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                /*0x18*/ int digestSize;
                                /*0x1c*/ int blockLength;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable ipadState;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable opadState;
                                /*0x30*/ byte[] inputPad;
                                /*0x38*/ byte[] outputBuf;

                                static /*0x3e05d78*/ void XorPad(byte[] pad, int len, byte n);
                                /*0x3e0569c*/ HMac(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest);
                                /*0x3e05814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest GetUnderlyingDigest();
                                /*0x3e0581c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e05dc8*/ int GetMacSize();
                                /*0x3e05dd0*/ void Update(byte input);
                                /*0x3e05e7c*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e05f40*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e05ffc*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e060b0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e06600*/ void Reset();
                            }

                            class Poly1305 : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IMac
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x18*/ uint r0;
                                /*0x1c*/ uint r1;
                                /*0x20*/ uint r2;
                                /*0x24*/ uint r3;
                                /*0x28*/ uint r4;
                                /*0x2c*/ uint s1;
                                /*0x30*/ uint s2;
                                /*0x34*/ uint s3;
                                /*0x38*/ uint s4;
                                /*0x3c*/ uint k0;
                                /*0x40*/ uint k1;
                                /*0x44*/ uint k2;
                                /*0x48*/ uint k3;
                                /*0x50*/ byte[] currentBlock;
                                /*0x58*/ int currentBlockOffset;
                                /*0x5c*/ uint h0;
                                /*0x60*/ uint h1;
                                /*0x64*/ uint h2;
                                /*0x68*/ uint h3;
                                /*0x6c*/ uint h4;

                                /*0x3e067f8*/ Poly1305();
                                /*0x3e0686c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e06a00*/ void SetKey(byte[] key, byte[] nonce);
                                /*0x3e06d40*/ int GetMacSize();
                                /*0x3e06d48*/ void Update(byte input);
                                /*0x3e071e8*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e072f8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e06df0*/ void ProcessBlock(System.ReadOnlySpan<byte> block);
                                /*0x3e075f8*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e076a8*/ int DoFinal(System.Span<byte> output);
                                /*0x3e06d34*/ void Reset();
                            }
                        }

                        namespace IO
                        {
                            class SignerSink : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseOutputStream
                            {
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner m_signer;

                                /*0x3e07b38*/ SignerSink(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner signer);
                                /*0x3e07b68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ISigner get_Signer();
                                /*0x3e07b70*/ void Write(byte[] buffer, int offset, int count);
                                /*0x3e07c60*/ void Write(System.ReadOnlySpan<byte> buffer);
                                /*0x3e07d44*/ void WriteByte(byte value);
                            }
                        }

                        namespace Generators
                        {
                            class DHBasicKeyPairGenerator
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHKeyGenerationParameters param;

                                /*0x3e081e8*/ DHBasicKeyPairGenerator();
                                /*0x3e07df0*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters parameters);
                                /*0x3e07e9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                            }

                            class DHKeyGeneratorHelper
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Generators.DHKeyGeneratorHelper Instance;

                                static /*0x3e081f8*/ DHKeyGeneratorHelper();
                                /*0x3e081f0*/ DHKeyGeneratorHelper();
                                /*0x3e07fd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculatePrivate(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                /*0x3e081bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculatePublic(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x);
                            }

                            class ECKeyPairGenerator
                            {
                                /*0x10*/ string algorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECDomainParameters parameters;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                static /*0x3e089f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters FindECCurveByName(string name);
                                static /*0x3e08664*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters FindECCurveByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x3e08260*/ ECKeyPairGenerator();
                                /*0x3e082a8*/ ECKeyPairGenerator(string algorithm);
                                /*0x3e0836c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.KeyGenerationParameters parameters);
                                /*0x3e086d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair GenerateKeyPair();
                                /*0x3e089a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Multiplier.ECMultiplier CreateBasePointMultiplier();
                            }
                        }

                        namespace Engines
                        {
                            class AesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] S;
                                static /*0x8*/ byte[] Si;
                                static /*0x10*/ byte[] rcon;
                                static /*0x18*/ uint[] T0;
                                static /*0x20*/ uint[] Tinv0;
                                /*0x10*/ int ROUNDS;
                                /*0x18*/ uint[][] WorkingKey;
                                /*0x20*/ bool forEncryption;
                                /*0x28*/ byte[] s;

                                static /*0x3e0b5e0*/ AesEngine();
                                static /*0x3e08a6c*/ uint Shift(uint r, int shift);
                                static /*0x3e08a74*/ uint FFmulX(uint x);
                                static /*0x3e08a94*/ uint FFmulX2(uint x);
                                static /*0x3e08ab0*/ uint Inv_Mcol(uint x);
                                static /*0x3e08b48*/ uint SubWord(uint x);
                                /*0x3e096d0*/ AesEngine();
                                /*0x3e08c0c*/ uint[][] GenerateWorkingKey(byte[] key, bool forEncryption);
                                /*0x3e096d8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e09884*/ int GetBlockSize();
                                /*0x3e0988c*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e0b4bc*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e09a8c*/ void EncryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                                /*0x3e0a6ac*/ void DecryptBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output, uint[][] KW);
                            }

                            class AriaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[][] C;
                                static /*0x8*/ byte[] SB1_sbox;
                                static /*0x10*/ byte[] SB2_sbox;
                                static /*0x18*/ byte[] SB3_sbox;
                                static /*0x20*/ byte[] SB4_sbox;
                                /*0x10*/ byte[][] m_roundKeys;

                                static /*0x3e0d164*/ AriaEngine();
                                static /*0x3e0c8c8*/ void A(byte[] z);
                                static /*0x3e0c290*/ void FE(byte[] D, byte[] RK);
                                static /*0x3e0c21c*/ void FO(byte[] D, byte[] RK);
                                static /*0x3e0b8f8*/ byte[][] KeySchedule(bool forEncryption, byte[] K);
                                static /*0x3e0cd98*/ byte[] KeyScheduleRound(byte[] w, byte[] wr, int n);
                                static /*0x3e0ceac*/ void ReverseKeys(byte[][] keys);
                                static /*0x3e0cf6c*/ byte SB1(byte x);
                                static /*0x3e0cfe8*/ byte SB2(byte x);
                                static /*0x3e0d064*/ byte SB3(byte x);
                                static /*0x3e0d0e0*/ byte SB4(byte x);
                                static /*0x3e0cb3c*/ void SL1(byte[] z);
                                static /*0x3e0c360*/ void SL2(byte[] z);
                                static /*0x3e0c304*/ void Xor(byte[] z, byte[] x);
                                /*0x3e0d15c*/ AriaEngine();
                                /*0x3e0b7b4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e0bfd8*/ int GetBlockSize();
                                /*0x3e0bfe0*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e0c5bc*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class CamelliaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ uint[] SIGMA;
                                static /*0x8*/ uint[] SBOX1_1110;
                                static /*0x10*/ uint[] SBOX4_4404;
                                static /*0x18*/ uint[] SBOX2_0222;
                                static /*0x20*/ uint[] SBOX3_3033;
                                /*0x10*/ bool initialised;
                                /*0x11*/ bool _keyIs128;
                                /*0x18*/ uint[] subkey;
                                /*0x20*/ uint[] kw;
                                /*0x28*/ uint[] ke;

                                static /*0x3e0fa14*/ CamelliaEngine();
                                static /*0x3e0d3fc*/ uint rightRotate(uint x, int s);
                                static /*0x3e0d410*/ uint leftRotate(uint x, int s);
                                static /*0x3e0d424*/ void roldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e0d54c*/ void decroldq(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e0d674*/ void roldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e0d79c*/ void decroldqo32(int rot, uint[] ki, int ioff, uint[] ko, int ooff);
                                static /*0x3e0d8c4*/ void camelliaF2(uint[] s, uint[] skey, int keyoff);
                                static /*0x3e0dbac*/ void camelliaFLs(uint[] s, uint[] fkey, int keyoff);
                                /*0x3e0f554*/ CamelliaEngine();
                                /*0x3e0dce0*/ void setKey(bool forEncryption, byte[] key);
                                /*0x3e0ea24*/ int ProcessBlock128(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0ef9c*/ int ProcessBlock192or256(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e0f5f0*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e0f6dc*/ int GetBlockSize();
                                /*0x3e0f6e4*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e0f8e0*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class ChaCha7539Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.Salsa20Engine
                            {
                                /*0x3e0fbd4*/ ChaCha7539Engine();
                                /*0x3e0fc88*/ string get_AlgorithmName();
                                /*0x3e0fcc8*/ int get_NonceSize();
                                /*0x3e0fcd0*/ void AdvanceCounter();
                                /*0x3e0fd50*/ void ResetCounter();
                                /*0x3e0fd7c*/ void SetKey(byte[] keyBytes, byte[] ivBytes);
                                /*0x3e0ff90*/ void GenerateKeyStream(byte[] output);
                                /*0x3e10770*/ void DoFinal(byte[] inBuf, int inOff, int inLen, byte[] outBuf, int outOff);
                                /*0x3e10c14*/ void ProcessBlocks2(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e10f1c*/ void ImplProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class ChaChaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.Salsa20Engine
                            {
                                static /*0x3e0ffa8*/ void ChachaCore(int rounds, uint[] input, byte[] output);
                            }

                            class DesEdeEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Engines.DesEngine
                            {
                                /*0x18*/ int[] workingKey1;
                                /*0x20*/ int[] workingKey2;
                                /*0x28*/ int[] workingKey3;
                                /*0x30*/ bool forEncryption;

                                /*0x3e121dc*/ DesEdeEngine();
                                /*0x3e10fc8*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e117b8*/ int GetBlockSize();
                                /*0x3e117c0*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e11da4*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class DesEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ short[] bytebit;
                                static /*0x8*/ int[] bigbyte;
                                static /*0x10*/ byte[] pc1;
                                static /*0x18*/ byte[] totrot;
                                static /*0x20*/ byte[] pc2;
                                static /*0x28*/ uint[] SP1;
                                static /*0x30*/ uint[] SP2;
                                static /*0x38*/ uint[] SP3;
                                static /*0x40*/ uint[] SP4;
                                static /*0x48*/ uint[] SP5;
                                static /*0x50*/ uint[] SP6;
                                static /*0x58*/ uint[] SP7;
                                static /*0x60*/ uint[] SP8;
                                /*0x10*/ int[] workingKey;

                                static /*0x3e128e8*/ DesEngine();
                                static /*0x3e11280*/ int[] GenerateWorkingKey(bool encrypting, byte[] key);
                                static /*0x3e119b4*/ void DesFunc(int[] wKey, ref uint hi32, ref uint lo32);
                                /*0x3e12234*/ DesEngine();
                                /*0x3e1223c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e12380*/ int GetBlockSize();
                                /*0x3e12388*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e12518*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class Gost28147Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] Sbox_Default;
                                static /*0x8*/ byte[] ESbox_Test;
                                static /*0x10*/ byte[] ESbox_A;
                                static /*0x18*/ byte[] ESbox_B;
                                static /*0x20*/ byte[] ESbox_C;
                                static /*0x28*/ byte[] ESbox_D;
                                static /*0x30*/ byte[] DSbox_Test;
                                static /*0x38*/ byte[] DSbox_A;
                                static /*0x40*/ System.Collections.Generic.Dictionary<string, System.Byte[]> m_sBoxes;
                                /*0x10*/ int[] workingKey;
                                /*0x18*/ bool forEncryption;
                                /*0x20*/ byte[] S;

                                static /*0x3e12d0c*/ Gost28147Engine();
                                static /*0x3e13188*/ void AddSBox(string sBoxName, byte[] sBox);
                                static /*0x3e13e58*/ byte[] GetSBox(string sBoxName);
                                /*0x3e13218*/ Gost28147Engine();
                                /*0x3e13288*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e13610*/ int GetBlockSize();
                                /*0x3e13618*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e13c48*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e13508*/ int[] GenerateWorkingKey(bool forEncryption, byte[] userKey);
                                /*0x3e13d5c*/ int Gost28147_mainStep(int n1, int key);
                                /*0x3e1380c*/ void Gost28147Func(int[] workingKey, System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }

                            class RsaBlindedEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa core;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters key;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                /*0x3e13f6c*/ RsaBlindedEngine();
                                /*0x3e13fe0*/ RsaBlindedEngine(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa);
                                /*0x3e14010*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters param);
                                /*0x3e142b0*/ int GetInputBlockSize();
                                /*0x3e14354*/ int GetOutputBlockSize();
                                /*0x3e143f8*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                            }

                            class RsaCoreEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters key;
                                /*0x18*/ bool forEncryption;
                                /*0x1c*/ int bitSize;

                                /*0x3e13fd8*/ RsaCoreEngine();
                                /*0x3e14838*/ void CheckInitialised();
                                /*0x3e14894*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e14a04*/ int GetInputBlockSize();
                                /*0x3e14a40*/ int GetOutputBlockSize();
                                /*0x3e14a7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ConvertInput(byte[] inBuf, int inOff, int inLen);
                                /*0x3e14b88*/ byte[] ConvertOutput(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger result);
                                /*0x3e14c34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ProcessBlock(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger input);
                            }

                            class RsaEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa core;

                                /*0x3e14d9c*/ RsaEngine();
                                /*0x3e14e08*/ RsaEngine(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IRsa rsa);
                                /*0x3e14e38*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e14ef0*/ int GetInputBlockSize();
                                /*0x3e14f94*/ int GetOutputBlockSize();
                                /*0x3e15038*/ byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
                            }

                            class Salsa20Engine
                            {
                                static /*0x0*/ int DEFAULT_ROUNDS;
                                static /*0x8*/ uint[] TAU_SIGMA;
                                /*0x10*/ int rounds;
                                /*0x14*/ int index;
                                /*0x18*/ uint[] engineState;
                                /*0x20*/ uint[] x;
                                /*0x28*/ byte[] keyStream;
                                /*0x30*/ bool initialised;
                                /*0x34*/ uint cW0;
                                /*0x38*/ uint cW1;
                                /*0x3c*/ uint cW2;

                                static /*0x3e165c0*/ Salsa20Engine();
                                static /*0x3e15c40*/ void SalsaCore(int rounds, System.ReadOnlySpan<uint> input, System.Span<uint> output);
                                static /*0x3e164d0*/ void QuarterRound(ref uint a, ref uint b, ref uint c, ref uint d);
                                /*0x3e0fc28*/ Salsa20Engine();
                                /*0x3e151dc*/ Salsa20Engine(int rounds);
                                /*0x3e0fe5c*/ void PackTauOrSigma(int keyLength, uint[] state, int stateOffset);
                                /*0x3e152f4*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e155e8*/ int get_NonceSize();
                                /*0x3e155f0*/ string get_AlgorithmName();
                                /*0x3e156bc*/ void AdvanceCounter();
                                /*0x3e15708*/ void ProcessBytes(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e1590c*/ void Reset();
                                /*0x3e15930*/ void ResetCounter();
                                /*0x3e1595c*/ void SetKey(byte[] keyBytes, byte[] ivBytes);
                                /*0x3e15b5c*/ void GenerateKeyStream(byte[] output);
                                /*0x3e15924*/ void ResetLimitCounter();
                                /*0x3e10ee0*/ bool LimitExceeded(uint len);
                            }

                            class SeedEngine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ uint[] SS0;
                                static /*0x8*/ uint[] SS1;
                                static /*0x10*/ uint[] SS2;
                                static /*0x18*/ uint[] SS3;
                                static /*0x20*/ uint[] KC;
                                /*0x10*/ int[] wKey;
                                /*0x18*/ bool forEncryption;

                                static /*0x3e17248*/ SeedEngine();
                                /*0x3e17240*/ SeedEngine();
                                /*0x3e1679c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e16a38*/ int GetBlockSize();
                                /*0x3e16a40*/ int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);
                                /*0x3e16c9c*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                                /*0x3e16854*/ int[] CreateWorkingKey(byte[] inKey);
                                /*0x3e170dc*/ int extractW1(long lVal);
                                /*0x3e170d4*/ int extractW0(long lVal);
                                /*0x3e171d8*/ long rotateLeft8(long x);
                                /*0x3e171d0*/ long rotateRight8(long x);
                                /*0x3e170e4*/ int G(int x);
                                /*0x3e16c38*/ long F(int ki0, int ki1, long r);
                                /*0x3e17220*/ int phaseCalc1(int r0, int ki0, int r1, int ki1);
                                /*0x3e171e0*/ int phaseCalc2(int r0, int ki0, int r1, int ki1);
                            }

                            class SM4Engine : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher
                            {
                                static /*0x0*/ byte[] Sbox;
                                static /*0x8*/ uint[] CK;
                                static /*0x10*/ uint[] FK;
                                /*0x10*/ uint[] rk;

                                static /*0x3e187e4*/ SM4Engine();
                                static /*0x3e17408*/ uint tau(uint A);
                                static /*0x3e174d0*/ uint L_ap(uint B);
                                static /*0x3e17b08*/ uint L(uint B);
                                static /*0x3e17bbc*/ uint T(uint Z);
                                /*0x3e187dc*/ SM4Engine();
                                /*0x3e1754c*/ uint T_ap(uint Z);
                                /*0x3e175a4*/ void ExpandKey(bool forEncryption, byte[] key);
                                /*0x3e17c14*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e17de4*/ int GetBlockSize();
                                /*0x3e17dec*/ int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff);
                                /*0x3e1809c*/ int ProcessBlock(System.ReadOnlySpan<byte> input, System.Span<byte> output);
                            }
                        }

                        namespace Encodings
                        {
                            class Pkcs1Encoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
                            {
                                static /*0x0*/ bool[] strictLengthEnabled;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine;
                                /*0x20*/ bool forEncryption;
                                /*0x21*/ bool forPrivateKey;
                                /*0x22*/ bool useStrictLength;
                                /*0x24*/ int pLen;
                                /*0x28*/ byte[] fallback;
                                /*0x30*/ byte[] blockBuffer;

                                static /*0x3e18998*/ Pkcs1Encoding();
                                static /*0x3e18928*/ bool get_StrictLengthEnabled();
                                static /*0x3e19588*/ int CheckPkcs1Encoding(byte[] encoded, int pLen);
                                /*0x3e18ac0*/ Pkcs1Encoding(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher);
                                /*0x3e18b4c*/ void Init(bool forEncryption, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e18e20*/ int GetInputBlockSize();
                                /*0x3e18ed8*/ int GetOutputBlockSize();
                                /*0x3e18f90*/ byte[] ProcessBlock(byte[] input, int inOff, int length);
                                /*0x3e19288*/ byte[] EncodeBlock(byte[] input, int inOff, int inLen);
                                /*0x3e1962c*/ byte[] DecodeBlockOrRandom(byte[] input, int inOff, int inLen);
                                /*0x3e18fa0*/ byte[] DecodeBlock(byte[] input, int inOff, int inLen);
                                /*0x3e19924*/ int FindStart(byte type, byte[] block);
                            }
                        }

                        namespace EC
                        {
                            class CustomNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e19d5c*/ CustomNamedCurves();
                                static /*0x3e199c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e19ab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e19ab4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurveGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters p);
                                static /*0x3e19b58*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e19c54*/ void DefineCurveAlias(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e1acdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e1add4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e1ae40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e1ad5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class SecP128R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1b094*/ SecP128R1Holder();
                                    /*0x3e1aeb8*/ SecP128R1Holder();
                                    /*0x3e1aec0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1af38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1b558*/ SecP160K1Holder();
                                    /*0x3e1b0fc*/ SecP160K1Holder();
                                    /*0x3e1b104*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1b44c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1b79c*/ SecP160R1Holder();
                                    /*0x3e1b5c0*/ SecP160R1Holder();
                                    /*0x3e1b5c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1b640*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP160R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1b9e0*/ SecP160R2Holder();
                                    /*0x3e1b804*/ SecP160R2Holder();
                                    /*0x3e1b80c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1b884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP192K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1bea4*/ SecP192K1Holder();
                                    /*0x3e1ba48*/ SecP192K1Holder();
                                    /*0x3e1ba50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1bd98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP192R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1c0e8*/ SecP192R1Holder();
                                    /*0x3e1bf0c*/ SecP192R1Holder();
                                    /*0x3e1bf14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1bf8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP224K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1c5ac*/ SecP224K1Holder();
                                    /*0x3e1c150*/ SecP224K1Holder();
                                    /*0x3e1c158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1c4a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP224R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1c7f0*/ SecP224R1Holder();
                                    /*0x3e1c614*/ SecP224R1Holder();
                                    /*0x3e1c61c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1c694*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP256K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1ccb4*/ SecP256K1Holder();
                                    /*0x3e1c858*/ SecP256K1Holder();
                                    /*0x3e1c860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1cba8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP256R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1cef8*/ SecP256R1Holder();
                                    /*0x3e1cd1c*/ SecP256R1Holder();
                                    /*0x3e1cd24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1cd9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP384R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1d13c*/ SecP384R1Holder();
                                    /*0x3e1cf60*/ SecP384R1Holder();
                                    /*0x3e1cf68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1cfe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecP521R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1d380*/ SecP521R1Holder();
                                    /*0x3e1d1a4*/ SecP521R1Holder();
                                    /*0x3e1d1ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1d224*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT113R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1d5c4*/ SecT113R1Holder();
                                    /*0x3e1d3e8*/ SecT113R1Holder();
                                    /*0x3e1d3f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1d468*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT113R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1d808*/ SecT113R2Holder();
                                    /*0x3e1d62c*/ SecT113R2Holder();
                                    /*0x3e1d634*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1d6ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT131R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1da4c*/ SecT131R1Holder();
                                    /*0x3e1d870*/ SecT131R1Holder();
                                    /*0x3e1d878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1d8f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT131R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1dc90*/ SecT131R2Holder();
                                    /*0x3e1dab4*/ SecT131R2Holder();
                                    /*0x3e1dabc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1db34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1de84*/ SecT163K1Holder();
                                    /*0x3e1dcf8*/ SecT163K1Holder();
                                    /*0x3e1dd00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1dd78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1e0c8*/ SecT163R1Holder();
                                    /*0x3e1deec*/ SecT163R1Holder();
                                    /*0x3e1def4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1df6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT163R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1e30c*/ SecT163R2Holder();
                                    /*0x3e1e130*/ SecT163R2Holder();
                                    /*0x3e1e138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1e1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT193R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1e550*/ SecT193R1Holder();
                                    /*0x3e1e374*/ SecT193R1Holder();
                                    /*0x3e1e37c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1e3f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT193R2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1e794*/ SecT193R2Holder();
                                    /*0x3e1e5b8*/ SecT193R2Holder();
                                    /*0x3e1e5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1e638*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT233K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1e988*/ SecT233K1Holder();
                                    /*0x3e1e7fc*/ SecT233K1Holder();
                                    /*0x3e1e804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1e87c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT233R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1ebcc*/ SecT233R1Holder();
                                    /*0x3e1e9f0*/ SecT233R1Holder();
                                    /*0x3e1e9f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1ea70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT239K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1edc0*/ SecT239K1Holder();
                                    /*0x3e1ec34*/ SecT239K1Holder();
                                    /*0x3e1ec3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1ecb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT283K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1efb4*/ SecT283K1Holder();
                                    /*0x3e1ee28*/ SecT283K1Holder();
                                    /*0x3e1ee30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1eea8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT283R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1f1f8*/ SecT283R1Holder();
                                    /*0x3e1f01c*/ SecT283R1Holder();
                                    /*0x3e1f024*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1f09c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT409K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1f3ec*/ SecT409K1Holder();
                                    /*0x3e1f260*/ SecT409K1Holder();
                                    /*0x3e1f268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1f2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT409R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1f630*/ SecT409R1Holder();
                                    /*0x3e1f454*/ SecT409R1Holder();
                                    /*0x3e1f45c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1f4d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT571K1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1f824*/ SecT571K1Holder();
                                    /*0x3e1f698*/ SecT571K1Holder();
                                    /*0x3e1f6a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1f718*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SecT571R1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1fa68*/ SecT571R1Holder();
                                    /*0x3e1f88c*/ SecT571R1Holder();
                                    /*0x3e1f894*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1f90c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class SM2P256V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e1fc5c*/ SM2P256V1Holder();
                                    /*0x3e1fad0*/ SM2P256V1Holder();
                                    /*0x3e1fad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e1fb50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }
                        }

                        namespace Digests
                        {
                            class Blake2bDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x0*/ ulong[] blake2b_IV;
                                static /*0x8*/ byte[,] blake2b_sigma;
                                /*0x10*/ int digestLength;
                                /*0x14*/ int keyLength;
                                /*0x18*/ byte[] salt;
                                /*0x20*/ byte[] personalization;
                                /*0x28*/ byte[] key;
                                /*0x30*/ byte[] buffer;
                                /*0x38*/ int bufferPos;
                                /*0x40*/ ulong[] internalState;
                                /*0x48*/ ulong[] chainValue;
                                /*0x50*/ ulong t0;
                                /*0x58*/ ulong t1;
                                /*0x60*/ ulong f0;

                                static /*0x3e212a4*/ Blake2bDigest();
                                static /*0x3e2128c*/ ulong Rotr64(ulong x, int rot);
                                /*0x3e1fcc4*/ Blake2bDigest(int digestSize);
                                /*0x3e1fdd8*/ void Init();
                                /*0x3e20064*/ void InitializeInternalState();
                                /*0x3e201ac*/ void Update(byte b);
                                /*0x3e207fc*/ void BlockUpdate(byte[] message, int offset, int len);
                                /*0x3e208d0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e20c74*/ int DoFinal(byte[] output, int outOffset);
                                /*0x3e20d1c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e21004*/ void Reset();
                                /*0x3e202a0*/ void Compress(System.ReadOnlySpan<byte> message);
                                /*0x3e21084*/ void G(ulong m1, ulong m2, int posA, int posB, int posC, int posD);
                                /*0x3e21294*/ int GetDigestSize();
                                /*0x3e2129c*/ int GetByteLength();
                            }

                            class Blake2sDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x0*/ uint[] blake2s_IV;
                                static /*0x8*/ byte[,] blake2s_sigma;
                                /*0x10*/ int digestLength;
                                /*0x14*/ int keyLength;
                                /*0x18*/ byte[] salt;
                                /*0x20*/ byte[] personalization;
                                /*0x28*/ byte[] key;
                                /*0x30*/ int fanout;
                                /*0x34*/ int depth;
                                /*0x38*/ int leafLength;
                                /*0x40*/ long nodeOffset;
                                /*0x48*/ int nodeDepth;
                                /*0x4c*/ int innerHashLength;
                                /*0x50*/ byte[] buffer;
                                /*0x58*/ int bufferPos;
                                /*0x60*/ uint[] internalState;
                                /*0x68*/ uint[] chainValue;
                                /*0x70*/ uint t0;
                                /*0x74*/ uint t1;
                                /*0x78*/ uint f0;

                                static /*0x3e22bb4*/ Blake2sDigest();
                                /*0x3e213c0*/ Blake2sDigest(int digestBits);
                                /*0x3e214b8*/ void Init(byte[] salt, byte[] personalization, byte[] key);
                                /*0x3e2194c*/ void InitializeInternalState();
                                /*0x3e21a88*/ void Update(byte b);
                                /*0x3e220d0*/ void BlockUpdate(byte[] message, int offset, int len);
                                /*0x3e221a4*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e22548*/ int DoFinal(byte[] output, int outOffset);
                                /*0x3e225f0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e228c0*/ void Reset();
                                /*0x3e21b7c*/ void Compress(System.ReadOnlySpan<byte> message);
                                /*0x3e22950*/ void G(uint m1, uint m2, int posA, int posB, int posC, int posD);
                                /*0x3e22ba4*/ int GetDigestSize();
                                /*0x3e22bac*/ int GetByteLength();
                            }

                            class Blake3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof
                            {
                                static /*0x0*/ byte[] SIGMA;
                                static /*0x8*/ uint[] IV;
                                /*0x10*/ byte[] m_theBuffer;
                                /*0x18*/ uint[] m_theK;
                                /*0x20*/ uint[] m_theChaining;
                                /*0x28*/ uint[] m_theV;
                                /*0x30*/ uint[] m_theM;
                                /*0x38*/ byte[] m_theIndices;
                                /*0x40*/ System.Collections.Generic.List<System.UInt32[]> m_theStack;
                                /*0x48*/ int m_theDigestLen;
                                /*0x4c*/ bool m_outputting;
                                /*0x50*/ long m_outputAvailable;
                                /*0x58*/ int m_theMode;
                                /*0x5c*/ int m_theOutputMode;
                                /*0x60*/ int m_theOutputDataLen;
                                /*0x68*/ long m_theCounter;
                                /*0x70*/ int m_theCurrBytes;
                                /*0x74*/ int m_thePos;

                                static /*0x3e25050*/ Blake3Digest();
                                /*0x3e22cd0*/ Blake3Digest(int pDigestSize);
                                /*0x3e22f8c*/ Blake3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Blake3Digest pSource);
                                /*0x3e23430*/ int GetByteLength();
                                /*0x3e23438*/ int GetDigestSize();
                                /*0x3e22e54*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Blake3Parameters pParams);
                                /*0x3e236fc*/ void Update(byte b);
                                /*0x3e23544*/ void BlockUpdate(byte[] pMessage, int pOffset, int pLen);
                                /*0x3e23894*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e23614*/ int DoFinal(byte[] pOutput, int pOutOffset);
                                /*0x3e23cb8*/ int OutputFinal(byte[] pOut, int pOutOffset, int pOutLen);
                                /*0x3e23d74*/ int DoFinal(System.Span<byte> output);
                                /*0x3e23c3c*/ int OutputFinal(System.Span<byte> output);
                                /*0x3e23df8*/ int Output(System.Span<byte> output);
                                /*0x3e23440*/ void Reset();
                                /*0x3e2310c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable pSource);
                                /*0x3e2428c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e23838*/ void CompressBlock(System.ReadOnlySpan<byte> block);
                                /*0x3e24468*/ void InitM(System.ReadOnlySpan<byte> block);
                                /*0x3e24610*/ void AdjustStack();
                                /*0x3e24104*/ void CompressFinalBlock(int pDataLen);
                                /*0x3e248b0*/ void ProcessStack();
                                /*0x3e244d8*/ void Compress();
                                /*0x3e24c6c*/ void PerformRound();
                                /*0x3e24b64*/ void AdjustChaining();
                                /*0x3e24d74*/ void MixG(int msgIdx, int posA, int posB, int posC, int posD);
                                /*0x3e24a34*/ void InitIndices();
                                /*0x3e24a7c*/ void PermuteIndices();
                                /*0x3e234d4*/ void InitNullKey();
                                /*0x3e234a8*/ void InitKey(byte[] pKey);
                                /*0x3e236c8*/ void InitKeyFromContext();
                                /*0x3e242e4*/ void InitChunkBlock(int pDataLen, bool pFinal);
                                /*0x3e247d0*/ void InitParentBlock();
                                /*0x3e24190*/ void NextOutputBlock();
                                /*0x3e2503c*/ void IncrementBlockCount();
                                /*0x3e24280*/ void ResetBlockCount();
                                /*0x3e249c8*/ void SetRoot();
                            }

                            class Dstu7564Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] S0;
                                static /*0x8*/ byte[] S1;
                                static /*0x10*/ byte[] S2;
                                static /*0x18*/ byte[] S3;
                                /*0x10*/ int hashSize;
                                /*0x14*/ int blockSize;
                                /*0x18*/ int columns;
                                /*0x1c*/ int rounds;
                                /*0x20*/ ulong[] state;
                                /*0x28*/ ulong[] tempState1;
                                /*0x30*/ ulong[] tempState2;
                                /*0x38*/ ulong inputBlocks;
                                /*0x40*/ int bufOff;
                                /*0x48*/ byte[] buf;

                                static /*0x3e26b3c*/ Dstu7564Digest();
                                static /*0x3e26998*/ ulong MixColumn(ulong c);
                                static /*0x3e26a4c*/ ulong Rotate(int n, ulong x);
                                /*0x3e25150*/ Dstu7564Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Dstu7564Digest digest);
                                /*0x3e252d4*/ Dstu7564Digest(int hashSizeBits);
                                /*0x3e2517c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Dstu7564Digest digest);
                                /*0x3e25460*/ int GetDigestSize();
                                /*0x3e25468*/ int GetByteLength();
                                /*0x3e25470*/ void Update(byte input);
                                /*0x3e254ec*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e25618*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e257a4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e25ac0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e25e08*/ void Reset();
                                /*0x3e25e58*/ void ProcessBlock(byte[] input, int inOff);
                                /*0x3e26078*/ void ProcessBlock(System.ReadOnlySpan<byte> input);
                                /*0x3e25a0c*/ void P(ulong[] s);
                                /*0x3e25fa8*/ void Q(ulong[] s);
                                /*0x3e268dc*/ void MixColumns(ulong[] s);
                                /*0x3e262ac*/ void ShiftRows(ulong[] s);
                                /*0x3e26728*/ void SubBytes(ulong[] s);
                                /*0x3e26a54*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e26ab8*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class GeneralDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                /*0x10*/ byte[] xBuf;
                                /*0x18*/ int xBufOff;
                                /*0x20*/ long byteCount;

                                /*0x3e26cb0*/ GeneralDigest();
                                /*0x3e26d14*/ GeneralDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest t);
                                /*0x3e26d98*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest t);
                                /*0x3e26dec*/ void Update(byte input);
                                /*0x3e26e6c*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e27024*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e271ec*/ void Finish();
                                /*0x3e2724c*/ void Reset();
                                /*0x3e2727c*/ int GetByteLength();
                                /*0x380d8b8*/ void ProcessWord(byte[] input, int inOff);
                                void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x380d438*/ void ProcessLength(long bitLength);
                                /*0x380cb08*/ void ProcessBlock();
                                /*0x380b6a0*/ int GetDigestSize();
                                int DoFinal(byte[] output, int outOff);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x380d83c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable t);
                                int DoFinal(System.Span<byte> output);
                            }

                            class Gost3411Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] C2;
                                /*0x10*/ byte[] H;
                                /*0x18*/ byte[] L;
                                /*0x20*/ byte[] M;
                                /*0x28*/ byte[] Sum;
                                /*0x30*/ byte[][] C;
                                /*0x38*/ byte[] xBuf;
                                /*0x40*/ int xBufOff;
                                /*0x48*/ ulong byteCount;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IBlockCipher cipher;
                                /*0x58*/ byte[] sBox;
                                /*0x60*/ byte[] K;
                                /*0x68*/ byte[] a;
                                /*0x70*/ short[] wS;
                                /*0x78*/ short[] w_S;
                                /*0x80*/ byte[] S;
                                /*0x88*/ byte[] U;
                                /*0x90*/ byte[] V;
                                /*0x98*/ byte[] W;

                                static /*0x3e28bec*/ Gost3411Digest();
                                static /*0x3e27284*/ byte[][] MakeC();
                                static /*0x3e28908*/ void cpyBytesToShort(byte[] S, short[] wS);
                                static /*0x3e2898c*/ void cpyShortToBytes(short[] wS, byte[] S);
                                /*0x3e27340*/ Gost3411Digest();
                                /*0x3e277e4*/ Gost3411Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411Digest t);
                                /*0x3e27d20*/ int GetDigestSize();
                                /*0x3e27d28*/ void Update(byte input);
                                /*0x3e28160*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e28290*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e284b8*/ byte[] P(byte[] input);
                                /*0x3e285c8*/ byte[] A(byte[] input);
                                /*0x3e28688*/ void E(byte[] key, byte[] s, int sOff, byte[] input, int inOff);
                                /*0x3e287fc*/ void fw(byte[] input);
                                /*0x3e27e20*/ void processBlock(byte[] input, int inOff);
                                /*0x3e28a28*/ void Finish();
                                /*0x3e28a80*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e28acc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e27684*/ void Reset();
                                /*0x3e27da8*/ void sumByteArray(byte[] input);
                                /*0x3e28b8c*/ int GetByteLength();
                                /*0x3e28b94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e27a3c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Gost3411_2012Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[][] C;
                                static /*0x8*/ byte[] Zero;
                                static /*0x10*/ ulong[][] T;
                                /*0x10*/ byte[] IV;
                                /*0x18*/ byte[] N;
                                /*0x20*/ byte[] Sigma;
                                /*0x28*/ byte[] Ki;
                                /*0x30*/ byte[] m;
                                /*0x38*/ byte[] h;
                                /*0x40*/ byte[] tmp;
                                /*0x48*/ byte[] block;
                                /*0x50*/ int bOff;

                                static /*0x3e2a590*/ Gost3411_2012Digest();
                                /*0x3e28c8c*/ Gost3411_2012Digest(byte[] IV);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e28e00*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e291e8*/ int DoFinal(System.Span<byte> output);
                                /*0x3e293bc*/ int GetByteLength();
                                /*0x380b6a0*/ int GetDigestSize();
                                /*0x3e29144*/ void Reset();
                                /*0x3e293c4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                                /*0x3e29510*/ void Update(byte input);
                                /*0x3e2958c*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e296d0*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e298c4*/ void F(byte[] V);
                                /*0x3e2a418*/ void xor512(byte[] A, byte[] B);
                                /*0x3e2a474*/ void E(byte[] K, byte[] m);
                                /*0x3e28f78*/ void g_N(byte[] h, byte[] N, byte[] m);
                                /*0x3e28ff8*/ void addMod512(byte[] A, int num);
                                /*0x3e29074*/ void addMod512(byte[] A, byte[] B);
                                /*0x3e290d4*/ void reverse(byte[] src, byte[] dst);
                            }

                            class Gost3411_2012_256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
                            {
                                static /*0x0*/ byte[] IV;

                                static /*0x3e2bc78*/ Gost3411_2012_256Digest();
                                /*0x3e2b928*/ Gost3411_2012_256Digest();
                                /*0x3e2b9b8*/ Gost3411_2012_256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012_256Digest other);
                                /*0x3e2ba64*/ int GetDigestSize();
                                /*0x3e2ba6c*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e2bb00*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2bc20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class Gost3411_2012_512Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
                            {
                                static /*0x0*/ byte[] IV;

                                static /*0x3e2beb4*/ Gost3411_2012_512Digest();
                                /*0x3e2bd18*/ Gost3411_2012_512Digest();
                                /*0x3e2bda8*/ Gost3411_2012_512Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Gost3411_2012_512Digest other);
                                /*0x3e2be54*/ int GetDigestSize();
                                /*0x3e2be5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class KeccakDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ ulong[] KeccakRoundConstants;
                                /*0x10*/ ulong[] state;
                                /*0x18*/ byte[] dataQueue;
                                /*0x20*/ int rate;
                                /*0x24*/ int bitsInQueue;
                                /*0x28*/ int fixedOutputLength;
                                /*0x2c*/ bool squeezing;

                                static /*0x3e2da70*/ KeccakDigest();
                                /*0x3e2bf28*/ KeccakDigest(int bitLength);
                                /*0x3e2c080*/ KeccakDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest source);
                                /*0x3e2c12c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest source);
                                /*0x3e2c1a8*/ int GetDigestSize();
                                /*0x3e2c1b4*/ void Update(byte input);
                                /*0x3e2c294*/ void BlockUpdate(byte[] input, int inOff, int len);
                                /*0x3e2c404*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e2c76c*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e2c8e8*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2cb7c*/ void Reset();
                                /*0x3e2cb84*/ int GetByteLength();
                                /*0x3e2bfd4*/ void Init(int bitLength);
                                /*0x3e2cb90*/ void InitSponge(int rate);
                                /*0x3e2c1b8*/ void Absorb(byte data);
                                /*0x3e2c298*/ void Absorb(byte[] data, int off, int len);
                                /*0x3e2c408*/ void Absorb(System.ReadOnlySpan<byte> data);
                                /*0x3e2cea8*/ void AbsorbBits(int data, int bits);
                                /*0x3e2cfcc*/ void PadAndSwitchToSqueezingPhase();
                                /*0x3e2c7a8*/ void Squeeze(byte[] output, int offset, long outputLength);
                                /*0x3e2c99c*/ void Squeeze(System.Span<byte> output);
                                /*0x3e2cc88*/ void KeccakAbsorb(byte[] data, int off);
                                /*0x3e2cd24*/ void KeccakAbsorb(System.ReadOnlySpan<byte> data);
                                /*0x3e2d150*/ void KeccakExtract();
                                /*0x3e2d188*/ void KeccakPermutation();
                                /*0x3e2d994*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e2d9ec*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class LongDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ ulong[] K;
                                /*0x10*/ int MyByteLength;
                                /*0x18*/ byte[] xBuf;
                                /*0x20*/ int xBufOff;
                                /*0x28*/ long byteCount1;
                                /*0x30*/ long byteCount2;
                                /*0x38*/ ulong H1;
                                /*0x40*/ ulong H2;
                                /*0x48*/ ulong H3;
                                /*0x50*/ ulong H4;
                                /*0x58*/ ulong H5;
                                /*0x60*/ ulong H6;
                                /*0x68*/ ulong H7;
                                /*0x70*/ ulong H8;
                                /*0x78*/ ulong[] W;
                                /*0x80*/ int wOff;

                                static /*0x3e2e8d8*/ LongDigest();
                                static /*0x3e2e89c*/ ulong Ch(ulong x, ulong y, ulong z);
                                static /*0x3e2e8bc*/ ulong Maj(ulong x, ulong y, ulong z);
                                static /*0x3e2e8ac*/ ulong Sum0(ulong x);
                                static /*0x3e2e88c*/ ulong Sum1(ulong x);
                                static /*0x3e2e87c*/ ulong Sigma0(ulong x);
                                static /*0x3e2e86c*/ ulong Sigma1(ulong x);
                                /*0x3e2db10*/ LongDigest();
                                /*0x3e2dbc8*/ LongDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest t);
                                /*0x3e2dc8c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest t);
                                /*0x3e2dd28*/ void Update(byte input);
                                /*0x3e2de10*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e2df20*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e2e1a4*/ void Finish();
                                /*0x3e2e800*/ void Reset();
                                /*0x3e2dd9c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e2e0a0*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e2e20c*/ void AdjustByteCounts();
                                /*0x3e2e230*/ void ProcessLength(long lowW, long hiW);
                                /*0x3e2e290*/ void ProcessBlock();
                                /*0x3e2e8d0*/ int GetByteLength();
                                /*0x380b6a0*/ int GetDigestSize();
                                int DoFinal(byte[] output, int outOff);
                                int DoFinal(System.Span<byte> output);
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x380d83c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable t);
                            }

                            class MD2Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ byte[] S;
                                /*0x10*/ byte[] X;
                                /*0x18*/ int xOff;
                                /*0x20*/ byte[] M;
                                /*0x28*/ int mOff;
                                /*0x30*/ byte[] C;
                                /*0x38*/ int COff;

                                static /*0x3e2f4f8*/ MD2Digest();
                                /*0x3e2e978*/ MD2Digest();
                                /*0x3e2ead4*/ MD2Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD2Digest t);
                                /*0x3e2eb88*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD2Digest t);
                                /*0x3e2ec24*/ int GetDigestSize();
                                /*0x3e2ec2c*/ int GetByteLength();
                                /*0x3e2ec34*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e2ef84*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2ea1c*/ void Reset();
                                /*0x3e2f0e4*/ void Update(byte input);
                                /*0x3e2f14c*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e2f268*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e2ecec*/ void ProcessChecksum(byte[] m);
                                /*0x3e2ee04*/ void ProcessBlock(byte[] m);
                                /*0x3e2f41c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e2f474*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class MD4Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H1;
                                /*0x2c*/ int H2;
                                /*0x30*/ int H3;
                                /*0x34*/ int H4;
                                /*0x38*/ int[] X;
                                /*0x40*/ int xOff;

                                /*0x3e2f598*/ MD4Digest();
                                /*0x3e2f610*/ MD4Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD4Digest t);
                                /*0x3e2f690*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD4Digest t);
                                /*0x3e2f6ec*/ int GetDigestSize();
                                /*0x3e2f6f4*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e2f774*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e2f880*/ void ProcessLength(long bitLength);
                                /*0x3e2f8ec*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e2f97c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e2fc6c*/ void Reset();
                                /*0x3e2fccc*/ int F(int u, int v, int w);
                                /*0x3e2fcdc*/ int G(int u, int v, int w);
                                /*0x3e2fcf0*/ int H(int u, int v, int w);
                                /*0x3e2fcfc*/ void ProcessBlock();
                                /*0x3e30984*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e309dc*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class MD5Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ int S11;
                                static /*0x4*/ int S12;
                                static /*0x8*/ int S13;
                                static /*0xc*/ int S14;
                                static /*0x10*/ int S21;
                                static /*0x14*/ int S22;
                                static /*0x18*/ int S23;
                                static /*0x1c*/ int S24;
                                static /*0x20*/ int S31;
                                static /*0x24*/ int S32;
                                static /*0x28*/ int S33;
                                static /*0x2c*/ int S34;
                                static /*0x30*/ int S41;
                                static /*0x34*/ int S42;
                                static /*0x38*/ int S43;
                                static /*0x3c*/ int S44;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint[] X;
                                /*0x40*/ int xOff;

                                static /*0x3e31e74*/ MD5Digest();
                                static /*0x3e311f0*/ uint RotateLeft(uint x, int n);
                                static /*0x3e311fc*/ uint F(uint u, uint v, uint w);
                                static /*0x3e3120c*/ uint G(uint u, uint v, uint w);
                                static /*0x3e3121c*/ uint H(uint u, uint v, uint w);
                                static /*0x3e31228*/ uint K(uint u, uint v, uint w);
                                /*0x3e30a60*/ MD5Digest();
                                /*0x3e30ad8*/ MD5Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD5Digest t);
                                /*0x3e30b58*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.MD5Digest t);
                                /*0x3e30bb4*/ int GetDigestSize();
                                /*0x3e30bbc*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e30c3c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e30d48*/ void ProcessLength(long bitLength);
                                /*0x3e30e10*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e30ea0*/ int DoFinal(System.Span<byte> output);
                                /*0x3e31190*/ void Reset();
                                /*0x3e31234*/ void ProcessBlock();
                                /*0x3e31d98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e31df0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class NullDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                /*0x10*/ System.IO.MemoryStream bOut;

                                /*0x3e3236c*/ NullDigest();
                                /*0x3e31ee0*/ int GetByteLength();
                                /*0x3e31ee8*/ int GetDigestSize();
                                /*0x3e31f60*/ void Update(byte b);
                                /*0x3e31f84*/ void BlockUpdate(byte[] inBytes, int inOff, int len);
                                /*0x3e31fa8*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e31fcc*/ int DoFinal(byte[] outBytes, int outOff);
                                /*0x3e32144*/ int DoFinal(System.Span<byte> output);
                                /*0x3e32344*/ void Reset();
                            }

                            class RipeMD128Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int[] X;
                                /*0x40*/ int xOff;

                                /*0x3e323d8*/ RipeMD128Digest();
                                /*0x3e32450*/ RipeMD128Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD128Digest t);
                                /*0x3e324d0*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD128Digest t);
                                /*0x3e3252c*/ int GetDigestSize();
                                /*0x3e32534*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e325b4*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e326c0*/ void ProcessLength(long bitLength);
                                /*0x3e3272c*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e327bc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e32aac*/ void Reset();
                                /*0x3e32b0c*/ int RL(int x, int n);
                                /*0x3e32b18*/ int F1(int x, int y, int z);
                                /*0x3e32b24*/ int F2(int x, int y, int z);
                                /*0x3e32b34*/ int F3(int x, int y, int z);
                                /*0x3e32b40*/ int F4(int x, int y, int z);
                                /*0x3e32b50*/ int F1(int a, int b, int c, int d, int x, int s);
                                /*0x3e32b6c*/ int F2(int a, int b, int c, int d, int x, int s);
                                /*0x3e32b98*/ int F3(int a, int b, int c, int d, int x, int s);
                                /*0x3e32bc0*/ int F4(int a, int b, int c, int d, int x, int s);
                                /*0x3e32bec*/ int FF1(int a, int b, int c, int d, int x, int s);
                                /*0x3e32c08*/ int FF2(int a, int b, int c, int d, int x, int s);
                                /*0x3e32c34*/ int FF3(int a, int b, int c, int d, int x, int s);
                                /*0x3e32c5c*/ int FF4(int a, int b, int c, int d, int x, int s);
                                /*0x3e32c88*/ void ProcessBlock();
                                /*0x3e33b88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e33be0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD160Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x40*/ int[] X;
                                /*0x48*/ int xOff;

                                /*0x3e33c64*/ RipeMD160Digest();
                                /*0x3e33cdc*/ RipeMD160Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD160Digest t);
                                /*0x3e33d5c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD160Digest t);
                                /*0x3e33dc0*/ int GetDigestSize();
                                /*0x3e33dc8*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e33e48*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e33f54*/ void ProcessLength(long bitLength);
                                /*0x3e33fc0*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e34064*/ int DoFinal(System.Span<byte> output);
                                /*0x3e343f4*/ void Reset();
                                /*0x3e34460*/ int RL(int x, int n);
                                /*0x3e3446c*/ int F1(int x, int y, int z);
                                /*0x3e34478*/ int F2(int x, int y, int z);
                                /*0x3e34488*/ int F3(int x, int y, int z);
                                /*0x3e34494*/ int F4(int x, int y, int z);
                                /*0x3e344a4*/ int F5(int x, int y, int z);
                                /*0x3e344b0*/ void ProcessBlock();
                                /*0x3e35c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e35c94*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x3c*/ int H5;
                                /*0x40*/ int H6;
                                /*0x44*/ int H7;
                                /*0x48*/ int[] X;
                                /*0x50*/ int xOff;

                                /*0x3e35d20*/ RipeMD256Digest();
                                /*0x3e35d98*/ RipeMD256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD256Digest t);
                                /*0x3e35d18*/ int GetDigestSize();
                                /*0x3e35e18*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD256Digest t);
                                /*0x3e35e7c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e35efc*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e36008*/ void ProcessLength(long bitLength);
                                /*0x3e36074*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e36154*/ int DoFinal(System.Span<byte> output);
                                /*0x3e366c4*/ void Reset();
                                /*0x3e36730*/ int RL(int x, int n);
                                /*0x3e3673c*/ int F1(int x, int y, int z);
                                /*0x3e36748*/ int F2(int x, int y, int z);
                                /*0x3e36758*/ int F3(int x, int y, int z);
                                /*0x3e36764*/ int F4(int x, int y, int z);
                                /*0x3e36774*/ int F1(int a, int b, int c, int d, int x, int s);
                                /*0x3e36790*/ int F2(int a, int b, int c, int d, int x, int s);
                                /*0x3e367bc*/ int F3(int a, int b, int c, int d, int x, int s);
                                /*0x3e367e4*/ int F4(int a, int b, int c, int d, int x, int s);
                                /*0x3e36810*/ int FF1(int a, int b, int c, int d, int x, int s);
                                /*0x3e3682c*/ int FF2(int a, int b, int c, int d, int x, int s);
                                /*0x3e36858*/ int FF3(int a, int b, int c, int d, int x, int s);
                                /*0x3e36880*/ int FF4(int a, int b, int c, int d, int x, int s);
                                /*0x3e368ac*/ void ProcessBlock();
                                /*0x3e37814*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e3786c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class RipeMD320Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ int H0;
                                /*0x2c*/ int H1;
                                /*0x30*/ int H2;
                                /*0x34*/ int H3;
                                /*0x38*/ int H4;
                                /*0x3c*/ int H5;
                                /*0x40*/ int H6;
                                /*0x44*/ int H7;
                                /*0x48*/ int H8;
                                /*0x4c*/ int H9;
                                /*0x50*/ int[] X;
                                /*0x58*/ int xOff;

                                /*0x3e55f58*/ RipeMD320Digest();
                                /*0x3e55fd0*/ RipeMD320Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD320Digest t);
                                /*0x3e55f50*/ int GetDigestSize();
                                /*0x3e56050*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.RipeMD320Digest t);
                                /*0x3e560bc*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e5613c*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e56248*/ void ProcessLength(long bitLength);
                                /*0x3e562b4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e563bc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e56a6c*/ void Reset();
                                /*0x3e56ae4*/ int RL(int x, int n);
                                /*0x3e56af0*/ int F1(int x, int y, int z);
                                /*0x3e56afc*/ int F2(int x, int y, int z);
                                /*0x3e56b0c*/ int F3(int x, int y, int z);
                                /*0x3e56b18*/ int F4(int x, int y, int z);
                                /*0x3e56b28*/ int F5(int x, int y, int z);
                                /*0x3e56b34*/ void ProcessBlock();
                                /*0x3e58338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e58390*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha1Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x40*/ uint[] X;
                                /*0x48*/ int xOff;

                                static /*0x3e58c08*/ uint F(uint u, uint v, uint w);
                                static /*0x3e58c18*/ uint H(uint u, uint v, uint w);
                                static /*0x3e58c24*/ uint G(uint u, uint v, uint w);
                                /*0x3e58414*/ Sha1Digest();
                                /*0x3e5848c*/ Sha1Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha1Digest t);
                                /*0x3e5850c*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha1Digest t);
                                /*0x3e58570*/ int GetDigestSize();
                                /*0x3e58578*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e585f8*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e58708*/ void ProcessLength(long bitLength);
                                /*0x3e58774*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e58818*/ int DoFinal(System.Span<byte> output);
                                /*0x3e58bbc*/ void Reset();
                                /*0x3e58c38*/ void ProcessBlock();
                                /*0x3e59154*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e591ac*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha224Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] K;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x3c*/ uint H6;
                                /*0x40*/ uint H7;
                                /*0x44*/ uint H8;
                                /*0x48*/ uint[] X;
                                /*0x50*/ int xOff;

                                static /*0x3e5a224*/ Sha224Digest();
                                static /*0x3e5a114*/ uint Ch(uint x, uint y, uint z);
                                static /*0x3e5a134*/ uint Maj(uint x, uint y, uint z);
                                static /*0x3e5a124*/ uint Sum0(uint x);
                                static /*0x3e5a104*/ uint Sum1(uint x);
                                static /*0x3e5a0f4*/ uint Theta0(uint x);
                                static /*0x3e5a0e4*/ uint Theta1(uint x);
                                /*0x3e59230*/ Sha224Digest();
                                /*0x3e592a8*/ Sha224Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha224Digest t);
                                /*0x3e59328*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha224Digest t);
                                /*0x3e5938c*/ int GetDigestSize();
                                /*0x3e59394*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e59414*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e59524*/ void ProcessLength(long bitLength);
                                /*0x3e59590*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5965c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e59b48*/ void Reset();
                                /*0x3e59b94*/ void ProcessBlock();
                                /*0x3e5a148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5a1a0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha256Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] K;
                                /*0x28*/ uint H1;
                                /*0x2c*/ uint H2;
                                /*0x30*/ uint H3;
                                /*0x34*/ uint H4;
                                /*0x38*/ uint H5;
                                /*0x3c*/ uint H6;
                                /*0x40*/ uint H7;
                                /*0x44*/ uint H8;
                                /*0x48*/ uint[] X;
                                /*0x50*/ int xOff;

                                static /*0x3e5b394*/ Sha256Digest();
                                static /*0x3e5b274*/ uint Sum1Ch(uint x, uint y, uint z);
                                static /*0x3e5b294*/ uint Sum0Maj(uint x, uint y, uint z);
                                static /*0x3e5b264*/ uint Theta0(uint x);
                                static /*0x3e5b254*/ uint Theta1(uint x);
                                /*0x3e5a2c4*/ Sha256Digest();
                                /*0x3e5a360*/ Sha256Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha256Digest t);
                                /*0x3e5a3e0*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha256Digest t);
                                /*0x3e5a444*/ int GetDigestSize();
                                /*0x3e5a44c*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e5a4cc*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e5a5dc*/ void ProcessLength(long bitLength);
                                /*0x3e5a648*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5a728*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5acb8*/ void Reset();
                                /*0x3e5a344*/ void initHs();
                                /*0x3e5ad04*/ void ProcessBlock();
                                /*0x3e5b2b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5b310*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha384Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x3e5b434*/ Sha384Digest();
                                /*0x3e5b48c*/ Sha384Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha384Digest t);
                                /*0x3e5b4f4*/ int GetDigestSize();
                                /*0x3e5b4fc*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5b5b4*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5b9fc*/ void Reset();
                                /*0x3e5ba44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5ba9c*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest
                            {
                                static /*0x3e5bb24*/ int CheckBitLength(int bitLength);
                                /*0x3e5bbe4*/ Sha3Digest(int bitLength);
                                /*0x3e5bc5c*/ Sha3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha3Digest source);
                                /*0x3e5bcc4*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5bd04*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5bd44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class Sha512Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x3e5bd9c*/ Sha512Digest();
                                /*0x3e5bdf4*/ Sha512Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha512Digest t);
                                /*0x3e5be5c*/ int GetDigestSize();
                                /*0x3e5be64*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5bf44*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5c4d4*/ void Reset();
                                /*0x3e5c51c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5c574*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class Sha512tDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.LongDigest
                            {
                                /*0x84*/ int digestLength;
                                /*0x88*/ ulong H1t;
                                /*0x90*/ ulong H2t;
                                /*0x98*/ ulong H3t;
                                /*0xa0*/ ulong H4t;
                                /*0xa8*/ ulong H5t;
                                /*0xb0*/ ulong H6t;
                                /*0xb8*/ ulong H7t;
                                /*0xc0*/ ulong H8t;

                                static /*0x3e5ca78*/ void UInt64_To_BE(ulong n, byte[] bs, int off, int max);
                                static /*0x3e5cc9c*/ void UInt32_To_BE(uint n, byte[] bs, int off, int max);
                                static /*0x3e5cbf8*/ void UInt64_To_BE(ulong n, System.Span<byte> bs, int off, int max);
                                static /*0x3e5cd5c*/ void UInt32_To_BE(uint n, System.Span<byte> bs, int off, int max);
                                /*0x3e5c5fc*/ Sha512tDigest(int bitLength);
                                /*0x3e5c8e4*/ Sha512tDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.Sha512tDigest t);
                                /*0x3e5c974*/ int GetDigestSize();
                                /*0x3e5c97c*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5cadc*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5cc64*/ void Reset();
                                /*0x3e5c758*/ void tIvGenerate(int bitLength);
                                /*0x3e5ce10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5ce68*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class ShakeDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.KeccakDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IXof, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest
                            {
                                static /*0x3e5cf70*/ int CheckBitLength(int bitLength);
                                /*0x3e5d014*/ ShakeDigest(int bitLength);
                                /*0x3e5d08c*/ ShakeDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.ShakeDigest source);
                                /*0x3e5d0f4*/ int GetDigestSize();
                                /*0x3e5d100*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5d150*/ int OutputFinal(byte[] output, int outOff, int outLen);
                                /*0x3e5d194*/ int Output(byte[] output, int outOff, int outLen);
                                /*0x3e5d1f8*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5d29c*/ int OutputFinal(System.Span<byte> output);
                                /*0x3e5d2e0*/ int Output(System.Span<byte> output);
                                /*0x3e5d35c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                            }

                            class SM3Digest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.GeneralDigest
                            {
                                static /*0x0*/ uint[] T;
                                /*0x28*/ uint[] V;
                                /*0x30*/ uint[] inwords;
                                /*0x38*/ int xOff;
                                /*0x40*/ uint[] W;

                                static /*0x3e5d3b4*/ SM3Digest();
                                /*0x3e5d4b0*/ SM3Digest();
                                /*0x3e5d560*/ SM3Digest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.SM3Digest t);
                                /*0x3e5d618*/ void CopyIn(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.SM3Digest t);
                                /*0x3e5d684*/ int GetDigestSize();
                                /*0x3e5d68c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5d6e4*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                                /*0x3e5d778*/ void Reset();
                                /*0x3e5d844*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5d898*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5d928*/ void ProcessWord(byte[] input, int inOff);
                                /*0x3e5d9a8*/ void ProcessWord(System.ReadOnlySpan<byte> word);
                                /*0x3e5dab8*/ void ProcessLength(long bitLength);
                                /*0x3e5dbac*/ uint P0(uint x);
                                /*0x3e5dbb8*/ uint P1(uint x);
                                /*0x3e5dbc4*/ uint FF0(uint x, uint y, uint z);
                                /*0x3e5dbd0*/ uint FF1(uint x, uint y, uint z);
                                /*0x3e5dbe4*/ uint GG0(uint x, uint y, uint z);
                                /*0x3e5dbf0*/ uint GG1(uint x, uint y, uint z);
                                /*0x3e5dc00*/ void ProcessBlock();
                            }

                            class TigerDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ long[] t1;
                                static /*0x8*/ long[] t2;
                                static /*0x10*/ long[] t3;
                                static /*0x18*/ long[] t4;
                                /*0x10*/ long a;
                                /*0x18*/ long b;
                                /*0x20*/ long c;
                                /*0x28*/ long byteCount;
                                /*0x30*/ byte[] m_buffer;
                                /*0x38*/ int bOff;
                                /*0x40*/ long[] x;
                                /*0x48*/ int xOff;

                                static /*0x3e5f3f4*/ TigerDigest();
                                /*0x3e5dfdc*/ TigerDigest();
                                /*0x3e5e124*/ TigerDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.TigerDigest t);
                                /*0x3e5e2b8*/ int GetDigestSize();
                                /*0x3e5e2c0*/ int GetByteLength();
                                /*0x3e5e2c8*/ void ProcessWord(byte[] b, int off);
                                /*0x3e5e728*/ void ProcessWord(System.ReadOnlySpan<byte> b);
                                /*0x3e5e828*/ void Update(byte input);
                                /*0x3e5e898*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e5e99c*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e5eb1c*/ void RoundABC(long x, long mul);
                                /*0x3e5eca0*/ void RoundBCA(long x, long mul);
                                /*0x3e5ee20*/ void RoundCAB(long x, long mul);
                                /*0x3e5efa0*/ void KeySchedule();
                                /*0x3e5e344*/ void ProcessBlock();
                                /*0x3e5f07c*/ void ProcessLength(long bitLength);
                                /*0x3e5f0a8*/ void Finish();
                                /*0x3e5f0f0*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e5f15c*/ int DoFinal(System.Span<byte> output);
                                /*0x3e5e080*/ void Reset();
                                /*0x3e5f39c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5e1d0*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }

                            class WhirlpoolDigest : Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable
                            {
                                static /*0x0*/ int[] SBOX;
                                static /*0x8*/ ulong[] C0;
                                static /*0x10*/ ulong[] C1;
                                static /*0x18*/ ulong[] C2;
                                static /*0x20*/ ulong[] C3;
                                static /*0x28*/ ulong[] C4;
                                static /*0x30*/ ulong[] C5;
                                static /*0x38*/ ulong[] C6;
                                static /*0x40*/ ulong[] C7;
                                static /*0x48*/ short[] EIGHT;
                                /*0x10*/ ulong[] _rc;
                                /*0x18*/ byte[] _buffer;
                                /*0x20*/ int _bufferPos;
                                /*0x28*/ short[] _bitCount;
                                /*0x30*/ ulong[] _hash;
                                /*0x38*/ ulong[] _K;
                                /*0x40*/ ulong[] _L;
                                /*0x48*/ ulong[] _block;
                                /*0x50*/ ulong[] _state;

                                static /*0x3e5f568*/ WhirlpoolDigest();
                                static /*0x3e5fa0c*/ int MulX(int input);
                                static /*0x3e5fa20*/ ulong PackIntoUInt64(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0);
                                /*0x3e5fa54*/ WhirlpoolDigest();
                                /*0x3e5fd68*/ WhirlpoolDigest(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Digests.WhirlpoolDigest originalDigest);
                                /*0x3e60040*/ int GetDigestSize();
                                /*0x3e60048*/ int DoFinal(byte[] output, int outOff);
                                /*0x3e60220*/ int DoFinal(System.Span<byte> output);
                                /*0x3e60164*/ void Reset();
                                /*0x3e602a0*/ void ProcessFilledBuffer();
                                /*0x3e602e8*/ void ProcessBlock();
                                /*0x3e60974*/ void Update(byte input);
                                /*0x3e609d8*/ void Increment();
                                /*0x3e60abc*/ void BlockUpdate(byte[] input, int inOff, int length);
                                /*0x3e60b28*/ void BlockUpdate(System.ReadOnlySpan<byte> input);
                                /*0x3e6008c*/ void Finish();
                                /*0x3e60b90*/ byte[] CopyBitLength();
                                /*0x3e60c38*/ int GetByteLength();
                                /*0x3e60c40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable Copy();
                                /*0x3e5fed8*/ void Reset(Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IMemoable other);
                            }
                        }

                        namespace Agreement
                        {
                            class DHBasicAgreement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters key;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.DHParameters dhParams;

                                /*0x3e61060*/ DHBasicAgreement();
                                /*0x3e60c98*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e60df0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters pubKey);
                            }

                            class ECDHBasicAgreement
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters privKey;

                                /*0x3e6140c*/ ECDHBasicAgreement();
                                /*0x3e61068*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters parameters);
                                /*0x3e61160*/ int GetFieldSize();
                                /*0x3e611a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateAgreement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.ICipherParameters pubKey);
                            }

                            namespace Srp
                            {
                                class Srp6Client
                                {
                                    /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N;
                                    /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g;
                                    /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger privA;
                                    /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger pubA;
                                    /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B;
                                    /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x;
                                    /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger u;
                                    /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger S;
                                    /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest;
                                    /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random;

                                    /*0x3e61414*/ Srp6Client();
                                    /*0x3e6141c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    /*0x3e6147c*/ void Init(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.Parameters.Srp6GroupParameters group, Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    /*0x3e614a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password);
                                    /*0x3e61680*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateSecret(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger serverB);
                                    /*0x3e618a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger SelectPrivateValue();
                                    /*0x3e617d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateS();
                                }

                                class Srp6Utilities
                                {
                                    static /*0x3e619e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateK(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g);
                                    static /*0x3e617d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateU(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger A, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger B);
                                    static /*0x3e61540*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, byte[] salt, byte[] identity, byte[] password);
                                    static /*0x3e61e58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger CalculateX(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, System.ReadOnlySpan<byte> salt, System.ReadOnlySpan<byte> identity, System.ReadOnlySpan<byte> password);
                                    static /*0x3e618b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger GeneratePrivateValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Security.SecureRandom random);
                                    static /*0x3e616f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger ValidatePublicValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger val);
                                    static /*0x3e619f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger HashPaddedPair(Best.HTTP.SecureProtocol.Org.BouncyCastle.Crypto.IDigest digest, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger N, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n2);
                                }
                            }
                        }
                    }

                    namespace Asn1
                    {
                        interface Asn1BitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x380b9e8*/ System.IO.Stream GetBitStream();
                            /*0x380b6a0*/ int get_PadBits();
                        }

                        class Asn1Encodable : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x3e62990*/ Asn1Encodable();
                            /*0x3e625e0*/ void EncodeTo(System.IO.Stream output);
                            /*0x3e62614*/ void EncodeTo(System.IO.Stream output, string encoding);
                            /*0x3e62658*/ byte[] GetEncoded();
                            /*0x3e626e8*/ byte[] GetEncoded(string encoding);
                            /*0x3e62788*/ byte[] GetDerEncoded();
                            /*0x3e62848*/ int GetHashCode();
                            /*0x3e6287c*/ bool Equals(object obj);
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class Asn1EncodableVector : System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] EmptyElements;
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;
                            /*0x18*/ int elementCount;
                            /*0x1c*/ bool copyOnWrite;

                            static /*0x3e632c4*/ Asn1EncodableVector();
                            static /*0x3e63210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] CloneElements(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e62998*/ Asn1EncodableVector();
                            /*0x3e629a0*/ Asn1EncodableVector(int initialCapacity);
                            /*0x3e62ab4*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e62bd8*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e62c14*/ Asn1EncodableVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] v);
                            /*0x3e62ae0*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e62d84*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e62c40*/ void Add(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] objs);
                            /*0x3e62dac*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e62db8*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e62df8*/ void AddOptional(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e62e64*/ void AddOptionalTagged(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e62f18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x3e62fe0*/ int get_Count();
                            /*0x3e62fe8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x3e62fec*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x3e63094*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] CopyElements();
                            /*0x3e63140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] TakeElements();
                            /*0x3e62cac*/ void Reallocate(int minCapacity);
                        }

                        class Asn1Exception : System.IO.IOException
                        {
                            /*0x3e63338*/ Asn1Exception();
                            /*0x3e63340*/ Asn1Exception(string message);
                            /*0x3e63348*/ Asn1Exception(string message, System.Exception innerException);
                            /*0x3e63350*/ Asn1Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Asn1GeneralizedTime : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string m_timeString;
                            /*0x18*/ bool m_timeStringCanonical;
                            /*0x20*/ System.DateTime m_dateTime;

                            static /*0x3e63ec8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1GeneralizedTime CreatePrimitive(byte[] contents);
                            static /*0x3e634dc*/ System.DateTime FromString(string s);
                            static /*0x3e63fc4*/ int IndexOfSign(string s, int startIndex);
                            static /*0x3e64068*/ System.DateTime ParseLocal(string s, string format);
                            static /*0x3e6410c*/ System.DateTime ParseTimeZone(string s, string format);
                            static /*0x3e63f20*/ System.DateTime ParseUtc(string s, string format);
                            static /*0x3e63b50*/ string ToStringCanonical(System.DateTime dateTime);
                            /*0x3e63358*/ Asn1GeneralizedTime(string timeString);
                            /*0x3e63a94*/ Asn1GeneralizedTime(byte[] contents);
                            /*0x3e63adc*/ System.DateTime ToDateTime();
                            /*0x3e63ae4*/ byte[] GetContents(int encoding);
                            /*0x3e63c10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e63ce8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e63d84*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e63e5c*/ int Asn1GetHashCode();
                        }

                        class Asn1InputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.FilterStream
                        {
                            /*0x30*/ int limit;
                            /*0x38*/ byte[][] tmpBuffers;

                            static /*0x3e6550c*/ int ReadTagNumber(System.IO.Stream s, int tagHdr);
                            static /*0x3e6565c*/ int ReadLength(System.IO.Stream s, int limit, bool isParsing);
                            static /*0x3e664ac*/ byte[] GetBuffer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn, byte[][] tmpBuffers);
                            static /*0x3e66764*/ char[] GetBmpCharBuffer(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            static /*0x3e64660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreatePrimitiveDerObject(int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn, byte[][] tmpBuffers);
                            /*0x3e641b0*/ Asn1InputStream(byte[] input);
                            /*0x3e6422c*/ Asn1InputStream(System.IO.Stream input, int limit);
                            /*0x3e642ac*/ Asn1InputStream(System.IO.Stream input, int limit, byte[][] tmpBuffers);
                            /*0x3e642e4*/ void Dispose(bool disposing);
                            /*0x3e64318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object BuildObject(int tagHdr, int tagNo, int length);
                            /*0x3e64a48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadTaggedObjectDL(int tagClass, int tagNo, bool constructed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e64ecc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector();
                            /*0x3e652a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e65384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence CreateDLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e65404*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set CreateDLSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e64f70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ReadObject();
                            /*0x3e65cac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString BuildConstructedBitString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            /*0x3e660f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString BuildConstructedOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                        }

                        class Asn1Null : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x3e672f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Null CreatePrimitive(byte[] contents);
                            /*0x3e677b0*/ Asn1Null();
                            /*0x3e677b8*/ string ToString();
                        }

                        class Asn1Object : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                        {
                            static /*0x3e67aec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromByteArray(byte[] data);
                            /*0x3e634d4*/ Asn1Object();
                            /*0x3e677f8*/ void EncodeTo(System.IO.Stream output);
                            /*0x3e67934*/ void EncodeTo(System.IO.Stream output, string encoding);
                            /*0x3e67ad0*/ bool Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object other);
                            /*0x3e67ce4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            /*0x380ba90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x380b2f0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x380b6a0*/ int Asn1GetHashCode();
                            /*0x3e62984*/ bool CallAsn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object obj);
                            /*0x3e62870*/ int CallAsn1GetHashCode();
                        }

                        class Asn1ObjectDescriptor : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString m_baseGraphicString;

                            static /*0x3e67408*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1ObjectDescriptor CreatePrimitive(byte[] contents);
                            /*0x3e67ce8*/ Asn1ObjectDescriptor(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString baseGraphicString);
                            /*0x3e67d64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e67d8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e67dac*/ int Asn1GetHashCode();
                            /*0x3e67dd4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class Asn1OctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            static /*0x0*/ byte[] EmptyOctets;
                            /*0x10*/ byte[] contents;

                            static /*0x3e685d4*/ Asn1OctetString();
                            static /*0x3e67e64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString GetInstance(object obj);
                            static /*0x3e681c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            static /*0x3e67470*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString CreatePrimitive(byte[] contents);
                            /*0x3e6830c*/ Asn1OctetString(byte[] contents);
                            /*0x3e68388*/ System.IO.Stream GetOctetStream();
                            /*0x3e683ec*/ byte[] GetOctets();
                            /*0x3e683f4*/ int Asn1GetHashCode();
                            /*0x3e68468*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e68550*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e6873c*/ Meta();
                                /*0x3e68648*/ Meta();
                                /*0x3e6870c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                                /*0x3e68714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }
                        }

                        interface Asn1OctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x380b9e8*/ System.IO.Stream GetOctetStream();
                        }

                        class Asn1OutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.FilterStream
                        {
                            static /*0x3e678d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream Create(System.IO.Stream output);
                            static /*0x3e67a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream Create(System.IO.Stream output, string encoding);
                            static /*0x3e68b18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] GetContentsEncodings(int encoding, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            static /*0x3e68c2c*/ int GetLengthOfContents(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsEncodings);
                            static /*0x3e68d2c*/ int GetLengthOfDL(int dl);
                            static /*0x3e68d60*/ int GetLengthOfIdentifier(int tagNo);
                            /*0x3e687a0*/ Asn1OutputStream(System.IO.Stream os);
                            /*0x3e687b0*/ void EncodeContents(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsEncodings);
                            /*0x3e688a4*/ int get_Encoding();
                            /*0x3e67930*/ void FlushInternal();
                            /*0x3e688ac*/ void WriteDL(int dl);
                            /*0x3e689a8*/ void WriteIdentifier(int tagClass, int tagNo);
                        }

                        class Asn1ParsingException : System.InvalidOperationException
                        {
                            /*0x3e68d94*/ Asn1ParsingException();
                            /*0x3e68d9c*/ Asn1ParsingException(string message);
                            /*0x3e68da4*/ Asn1ParsingException(string message, System.Exception innerException);
                            /*0x3e68dac*/ Asn1ParsingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                        }

                        class Asn1RelativeOid : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string identifier;
                            /*0x18*/ byte[] contents;

                            static /*0x3e67524*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1RelativeOid CreatePrimitive(byte[] contents, bool clone);
                            static /*0x3e698a8*/ bool IsValidIdentifier(string identifier, int from);
                            static /*0x3e69504*/ void WriteField(System.IO.Stream outputStream, long fieldValue);
                            static /*0x3e69654*/ void WriteField(System.IO.Stream outputStream, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger fieldValue);
                            static /*0x3e68e58*/ string ParseContents(byte[] contents);
                            /*0x3e68db4*/ Asn1RelativeOid(byte[] contents, bool clone);
                            /*0x3e69038*/ string ToString();
                            /*0x3e69040*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e690d0*/ int Asn1GetHashCode();
                            /*0x3e690f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e692c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e6934c*/ void DoOutput(System.IO.MemoryStream bOut);
                            /*0x3e69174*/ byte[] GetContents();
                        }

                        class Asn1Sequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;

                            static /*0x3e69998*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence GetInstance(object obj);
                            static /*0x3e69cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            /*0x3e69d98*/ Asn1Sequence();
                            /*0x3e69e08*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e69f04*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e6a060*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6a158*/ Asn1Sequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e6a1dc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x3e6a1ec*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x3e6a28c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x3e6a2bc*/ int get_Count();
                            /*0x380bb68*/ T[] MapElements<T>(System.Func<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, T> func);
                            /*0x3e6a2d8*/ int Asn1GetHashCode();
                            /*0x3e6a364*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6a4d4*/ string ToString();
                            /*0x3e6a51c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] GetConstructedOctetStrings();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e6a64c*/ Meta();
                                /*0x3e6a5d0*/ Meta();
                                /*0x3e6a644*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }
                        }

                        class Asn1Set : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, System.Collections.Generic.IEnumerable<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable>, System.Collections.IEnumerable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements;
                            /*0x18*/ bool isSorted;

                            static /*0x3e6a6b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set GetInstance(object obj);
                            static /*0x3e6ab4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] Sort(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6a9ec*/ Asn1Set();
                            /*0x3e6aa68*/ Asn1Set(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector, bool doSort);
                            /*0x3e6ac78*/ Asn1Set(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6acd4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                            /*0x3e6ace4*/ System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> GetEnumerator();
                            /*0x3e6ad84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Item(int index);
                            /*0x3e6adb4*/ int get_Count();
                            /*0x3e6add0*/ int Asn1GetHashCode();
                            /*0x3e6ae5c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6afcc*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e6b0b8*/ Meta();
                                /*0x3e6b01c*/ Meta();
                                /*0x3e6b090*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            }

                            class DerComparer : System.Collections.Generic.IComparer<System.Byte[]>
                            {
                                /*0x3e6b014*/ DerComparer();
                                /*0x3e6b11c*/ int Compare(byte[] a, byte[] b);
                            }
                        }

                        class Asn1StreamParser
                        {
                            /*0x10*/ System.IO.Stream _in;
                            /*0x18*/ int _limit;
                            /*0x20*/ byte[][] tmpBuffers;

                            /*0x3e658d4*/ Asn1StreamParser(System.IO.Stream input, int limit, byte[][] tmpBuffers);
                            /*0x3e6b2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ReadObject();
                            /*0x3e6b2f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ImplParseObject(int tagHdr);
                            /*0x3e6bc0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object LoadTaggedDL(int tagClass, int tagNo, bool constructed);
                            /*0x3e659a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object LoadTaggedIL(int tagClass, int tagNo);
                            /*0x3e6ba94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitConstructedDL(int univTagNo);
                            /*0x3e6b6b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitConstructedIL(int univTagNo);
                            /*0x3e6b830*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible ParseImplicitPrimitive(int univTagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream defIn);
                            /*0x3e6bcd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector ReadVector();
                            /*0x3e6b5d0*/ void Set00Check(bool enabled);
                        }

                        class Asn1Tag
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;

                            static /*0x3e6c0d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Tag Create(int tagClass, int tagNo);
                            /*0x3e6c140*/ Asn1Tag(int tagClass, int tagNo);
                        }

                        class Asn1TaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ int explicitness;
                            /*0x14*/ int tagClass;
                            /*0x18*/ int tagNo;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj;

                            static /*0x3e6c16c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject GetInstance(object obj);
                            static /*0x3e64de0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreateConstructedDL(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            static /*0x3e6be20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreateConstructedIL(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector contentsElements);
                            static /*0x3e64d3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CreatePrimitive(int tagClass, int tagNo, byte[] contentsOctets);
                            static /*0x3e6c424*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject CheckedCast(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6c50c*/ Asn1TaggedObject(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6c528*/ Asn1TaggedObject(bool isExplicit, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6c538*/ Asn1TaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6c6ac*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6c8d8*/ int Asn1GetHashCode();
                            /*0x3e6c978*/ int get_TagClass();
                            /*0x3e6c980*/ int get_TagNo();
                            /*0x3e6c8b8*/ bool IsExplicit();
                            /*0x3e6c988*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetObject();
                            /*0x3e6c9fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetBaseObject();
                            /*0x3e6ca04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExplicitBaseObject();
                            /*0x3e6ca6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetBaseUniversal(bool declaredExplicit, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType universalType);
                            /*0x3e6cd18*/ string ToString();
                            /*0x380bb68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class Asn1Type
                        {
                            /*0x10*/ System.Type m_platformType;

                            /*0x3e6ced0*/ Asn1Type(System.Type platformType);
                            /*0x3e6cf00*/ System.Type get_PlatformType();
                            /*0x3e6cf08*/ bool Equals(object that);
                            /*0x3e6cf14*/ int GetHashCode();
                        }

                        class Asn1UniversalType : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Type
                        {
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Tag m_tag;

                            /*0x3e686bc*/ Asn1UniversalType(System.Type platformType, int tagNo);
                            /*0x3e6cc68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object CheckedCast(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6cf1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            /*0x3e6cf68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            /*0x3e681a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromByteArray(byte[] bytes);
                            /*0x3e68284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetContextInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                        }

                        class Asn1UtcTime : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ string m_timeString;
                            /*0x18*/ System.DateTime m_dateTime;
                            /*0x20*/ bool m_dateTimeLocked;
                            /*0x24*/ int m_twoDigitYearMax;

                            static /*0x3e67644*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UtcTime CreatePrimitive(byte[] contents);
                            static /*0x3e6d134*/ System.DateTime FromString(string s, ref int twoDigitYearMax);
                            static /*0x3e6d480*/ bool InRange(System.DateTime dateTime, int twoDigitYearMax);
                            static /*0x3e6d564*/ string ToStringCanonical(System.DateTime dateTime);
                            /*0x3e6cfb4*/ Asn1UtcTime(string timeString);
                            /*0x3e6d300*/ Asn1UtcTime(byte[] contents);
                            /*0x3e6d348*/ System.DateTime ToDateTime(int twoDigitYearMax);
                            /*0x3e6d4f4*/ byte[] GetContents(int encoding);
                            /*0x3e6d610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6d6a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e6d740*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e6d818*/ int Asn1GetHashCode();
                            /*0x3e6d884*/ string ToString();
                        }

                        class Asn1Utilities
                        {
                            static /*0x3e6cd64*/ string GetTagText(int tagClass, int tagNo);
                        }

                        class BerBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                        {
                            /*0x18*/ int segmentLimit;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString[] elements;

                            static /*0x3e65e88*/ byte[] FlattenBitStrings(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString[] bitStrings);
                            /*0x3e6d88c*/ BerBitString(byte[] data, int padBits);
                            /*0x3e6d894*/ BerBitString(byte[] data, int padBits, int segmentLimit);
                            /*0x3e6da88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6dc94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerBitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.ConstructedBitStream m_bitStream;

                            static /*0x3e659cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerBitString Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e6bf0c*/ BerBitStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e6de70*/ System.IO.Stream GetBitStream();
                            /*0x3e6df3c*/ int get_PadBits();
                            /*0x3e6df58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerOctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString
                        {
                            /*0x18*/ int segmentLimit;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements;

                            static /*0x3e662d0*/ byte[] FlattenOctetStrings(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] octetStrings);
                            /*0x3e6e054*/ BerOctetString(byte[] contents);
                            /*0x3e6e0b4*/ BerOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements);
                            /*0x3e6e080*/ BerOctetString(byte[] contents, int segmentLimit);
                            /*0x3e6e0bc*/ BerOctetString(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements, int segmentLimit);
                            /*0x3e6e104*/ BerOctetString(byte[] contents, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString[] elements, int segmentLimit);
                            /*0x3e6e13c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6e27c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerOctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x3e65a90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerOctetString Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e6bf6c*/ BerOctetStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e6e3d8*/ System.IO.Stream GetOctetStream();
                            /*0x3e6e484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence Empty;

                            static /*0x3e6eb08*/ BerSequence();
                            static /*0x3e6ce44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e6e5e4*/ BerSequence();
                            /*0x3e6e63c*/ BerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e6e580*/ BerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e6e6a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6e7c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e6e8fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x3e6e9d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x3e6ea3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class BerSequenceParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x3e65b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSequence Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e6bffc*/ BerSequenceParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e6eb6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSet Empty;

                            static /*0x3e6eea8*/ BerSet();
                            /*0x3e6eb74*/ BerSet();
                            /*0x3e6ebcc*/ BerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e6ea9c*/ BerSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6ec44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6ed64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class BerSetParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser _parser;

                            static /*0x3e65bcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerSet Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e6c02c*/ BerSetParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e6ef0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class BerTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerTaggedObject
                        {
                            /*0x3e6cecc*/ BerTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6ef18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6f1ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e6f4b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class BerTaggedObjectParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x3e6b674*/ BerTaggedObjectParser(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e6f510*/ int get_TagClass();
                            /*0x3e6f518*/ int get_TagNo();
                            /*0x3e6f520*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class ConstructedBitStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x30*/ bool m_octetAligned;
                            /*0x31*/ bool m_first;
                            /*0x34*/ int m_padBits;
                            /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser m_currentParser;
                            /*0x40*/ System.IO.Stream m_currentStream;

                            /*0x3e6def8*/ ConstructedBitStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser, bool octetAligned);
                            /*0x3e6f620*/ int get_PadBits();
                            /*0x3e6f628*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3e6f704*/ int Read(System.Span<byte> buffer);
                            /*0x3e6fb70*/ int ReadByte();
                            /*0x3e6f9f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser GetNextParser();
                        }

                        class ConstructedDLEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] m_contentsElements;
                            /*0x20*/ int m_contentsLength;

                            /*0x3e6fd94*/ ConstructedDLEncoding(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsElements);
                            /*0x3e6fde8*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e6fe30*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class ConstructedILEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] m_contentsElements;

                            /*0x3e6dc50*/ ConstructedILEncoding(int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding[] contentsElements);
                            /*0x3e6fea0*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e6ff24*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class ConstructedOctetStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;
                            /*0x30*/ bool m_first;
                            /*0x38*/ System.IO.Stream m_currentStream;

                            /*0x3e6e44c*/ ConstructedOctetStream(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e6ff6c*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3e70048*/ int Read(System.Span<byte> buffer);
                            /*0x3e703a4*/ int ReadByte();
                            /*0x3e702a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser GetNextParser();
                        }

                        class DefiniteLengthInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.LimitedInputStream
                        {
                            static /*0x0*/ byte[] EmptyBytes;
                            /*0x34*/ int _originalLength;
                            /*0x38*/ int _remaining;

                            static /*0x3e70a20*/ DefiniteLengthInputStream();
                            /*0x3e645a0*/ DefiniteLengthInputStream(System.IO.Stream inStream, int length, int limit);
                            /*0x3e705c8*/ int get_Remaining();
                            /*0x3e705d0*/ int ReadByte();
                            /*0x3e706f8*/ int Read(byte[] buf, int off, int len);
                            /*0x3e7086c*/ int Read(System.Span<byte> buffer);
                            /*0x3e6657c*/ void ReadAllIntoByteArray(byte[] buf);
                            /*0x3e64b38*/ byte[] ToArray();
                        }

                        class DerBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            static /*0x0*/ char[] table;
                            /*0x10*/ byte[] contents;

                            static /*0x3e71548*/ DerBitString();
                            static /*0x3e70a94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString GetInstance(object obj);
                            static /*0x3e70d1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool isExplicit);
                            static /*0x3e6702c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString CreatePrimitive(byte[] contents);
                            /*0x3e70e34*/ DerBitString(byte[] data);
                            /*0x3e6d924*/ DerBitString(byte[] data, int padBits);
                            /*0x3e70e44*/ DerBitString(byte[] contents, bool check);
                            /*0x3e70f74*/ byte[] GetOctets();
                            /*0x3e7103c*/ byte[] GetBytes();
                            /*0x3e71120*/ int get_PadBits();
                            /*0x3e6db50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6dd70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e71198*/ int Asn1GetHashCode();
                            /*0x3e71244*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e71360*/ System.IO.Stream GetBitStream();
                            /*0x3e713d8*/ string GetString();
                        }

                        class DerBmpString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ string m_str;

                            static /*0x3e66a6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBmpString CreatePrimitive(char[] str);
                            /*0x3e715e8*/ DerBmpString(char[] str);
                            /*0x3e71674*/ string GetString();
                            /*0x3e7167c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e71714*/ int Asn1GetHashCode();
                            /*0x3e71734*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e718a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e717b8*/ byte[] GetContents();
                        }

                        class DerBoolean : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean False;
                            static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean True;
                            /*0x10*/ byte value;

                            static /*0x3e71ffc*/ DerBoolean();
                            static /*0x3e7192c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean GetInstance(object obj);
                            static /*0x3e66ac4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBoolean CreatePrimitive(byte[] contents);
                            /*0x3e71c20*/ DerBoolean(byte[] val);
                            /*0x3e71cbc*/ DerBoolean(bool value);
                            /*0x3e71cf0*/ bool get_IsTrue();
                            /*0x3e71d00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e71e18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e71eb4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e71f4c*/ int Asn1GetHashCode();
                            /*0x3e71f90*/ string ToString();
                            /*0x3e71d94*/ byte[] GetContents(int encoding);

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e72190*/ Meta();
                                /*0x3e720a4*/ Meta();
                                /*0x3e72118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerEnumerated : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated[] cache;
                            /*0x10*/ byte[] contents;
                            /*0x18*/ int start;

                            static /*0x3e72b50*/ DerEnumerated();
                            static /*0x3e721f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated GetInstance(object obj);
                            static /*0x3e66bec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated CreatePrimitive(byte[] contents, bool clone);
                            /*0x3e724e8*/ DerEnumerated(int val);
                            /*0x3e725d8*/ DerEnumerated(byte[] contents, bool clone);
                            /*0x3e727e0*/ int get_IntValueExact();
                            /*0x3e72940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e729b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e72a38*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e72af4*/ int Asn1GetHashCode();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e72cb4*/ Meta();
                                /*0x3e72bc4*/ Meta();
                                /*0x3e72c38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerExternal : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier directReference;
                            /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger indirectReference;
                            /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1ObjectDescriptor dataValueDescriptor;
                            /*0x28*/ int encoding;
                            /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object externalContent;

                            static /*0x3e73158*/ int CheckEncoding(int encoding);
                            static /*0x3e731dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetExternalContent(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject encoding);
                            static /*0x3e7309c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetObjFromSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence, int index);
                            /*0x3e72d18*/ DerExternal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector vector);
                            /*0x3e72d80*/ DerExternal(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence sequence);
                            /*0x3e73328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence BuildSequence();
                            /*0x3e734f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e73520*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e73560*/ int Asn1GetHashCode();
                            /*0x3e735e8*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerExternalParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            static /*0x3e65c3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal Parse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser sp);
                            /*0x3e6bf3c*/ DerExternalParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e736e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerGeneralString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e67188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGeneralString CreatePrimitive(byte[] contents);
                            /*0x3e736e8*/ DerGeneralString(byte[] contents, bool clone);
                            /*0x3e737c8*/ string GetString();
                            /*0x3e737d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7384c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e738cc*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e73988*/ int Asn1GetHashCode();
                        }

                        class DerGraphicString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e671e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerGraphicString CreatePrimitive(byte[] contents);
                            /*0x3e739e4*/ DerGraphicString(byte[] contents, bool clone);
                            /*0x3e73ac4*/ string GetString();
                            /*0x3e73ad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e73b48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e73bc8*/ int Asn1GetHashCode();
                            /*0x3e73c24*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerIA5String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e67240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerIA5String CreatePrimitive(byte[] contents);
                            /*0x3e73ce0*/ DerIA5String(byte[] contents, bool clone);
                            /*0x3e73dc0*/ string GetString();
                            /*0x3e73dcc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e73e44*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e73ec4*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e73f80*/ int Asn1GetHashCode();
                        }

                        class DerInteger : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            /*0x10*/ byte[] bytes;
                            /*0x18*/ int start;

                            static /*0x3e73fdc*/ bool AllowUnsafe();
                            static /*0x3e7408c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger GetInstance(object obj);
                            static /*0x3e74380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject taggedObject, bool declaredExplicit);
                            static /*0x3e6729c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger CreatePrimitive(byte[] contents);
                            static /*0x3e7285c*/ int IntValue(byte[] bytes, int start, int signExt);
                            static /*0x3e7271c*/ bool IsMalformed(byte[] bytes);
                            static /*0x3e72770*/ int SignBytesToSkip(byte[] bytes);
                            /*0x3e74444*/ DerInteger(int value);
                            /*0x3e744dc*/ DerInteger(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger value);
                            /*0x3e7456c*/ DerInteger(byte[] bytes, bool clone);
                            /*0x3e74678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PositiveValue();
                            /*0x3e746dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Value();
                            /*0x3e7473c*/ bool HasValue(int x);
                            /*0x3e74788*/ int get_IntValueExact();
                            /*0x3e74804*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7487c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e748fc*/ int Asn1GetHashCode();
                            /*0x3e74958*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e74a14*/ string ToString();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e74ad4*/ Meta();
                                /*0x3e74a34*/ Meta();
                                /*0x3e74aa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerNull : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Null
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerNull Instance;
                            static /*0x8*/ byte[] ZeroBytes;

                            static /*0x3e74d08*/ DerNull();
                            /*0x3e74b38*/ DerNull();
                            /*0x3e74b40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e74be0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e74c88*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e74d00*/ int Asn1GetHashCode();
                        }

                        class DerNumericString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e673ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerNumericString CreatePrimitive(byte[] contents);
                            /*0x3e74da8*/ DerNumericString(byte[] contents, bool clone);
                            /*0x3e74e88*/ string GetString();
                            /*0x3e74e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e74f0c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e74f8c*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e75048*/ int Asn1GetHashCode();
                        }

                        class DerObjectIdentifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier[] cache;
                            /*0x10*/ string identifier;
                            /*0x18*/ byte[] contents;

                            static /*0x3e75efc*/ DerObjectIdentifier();
                            static /*0x3e750a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetInstance(object obj);
                            static /*0x3e66dbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CreatePrimitive(byte[] contents, bool clone);
                            static /*0x3e75510*/ bool IsValidIdentifier(string identifier);
                            static /*0x3e75760*/ string ParseContents(byte[] contents);
                            /*0x3e753e0*/ DerObjectIdentifier(string identifier);
                            /*0x3e75584*/ DerObjectIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string branchID);
                            /*0x3e75698*/ DerObjectIdentifier(byte[] contents, bool clone);
                            /*0x3e759d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Branch(string branchID);
                            /*0x3e75a40*/ string get_Id();
                            /*0x3e75a48*/ string ToString();
                            /*0x3e75a50*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e75ae0*/ int Asn1GetHashCode();
                            /*0x3e75b00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e75cd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e75d5c*/ void DoOutput(System.IO.MemoryStream bOut);
                            /*0x3e75b84*/ byte[] GetContents();

                            class Meta : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UniversalType Instance;

                                static /*0x3e76060*/ Meta();
                                /*0x3e75f70*/ Meta();
                                /*0x3e75fe4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object FromImplicitPrimitive(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerOctetString octetString);
                            }
                        }

                        class DerOctetString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString
                        {
                            /*0x3e66448*/ DerOctetString(byte[] contents);
                            /*0x3e6e204*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6e358*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DerOctetStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream;

                            /*0x3e6c08c*/ DerOctetStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream);
                            /*0x3e760c4*/ System.IO.Stream GetOctetStream();
                            /*0x3e760cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerOutputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream
                        {
                            /*0x3e687a8*/ DerOutputStream(System.IO.Stream os);
                            /*0x3e76224*/ int get_Encoding();
                        }

                        class DerPrintableString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e674c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerPrintableString CreatePrimitive(byte[] contents);
                            /*0x3e7622c*/ DerPrintableString(byte[] contents, bool clone);
                            /*0x3e7630c*/ string GetString();
                            /*0x3e76318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e76390*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e76410*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e764cc*/ int Asn1GetHashCode();
                        }

                        class DerSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence Empty;

                            static /*0x3e766c0*/ DerSequence();
                            /*0x3e6e638*/ DerSequence();
                            /*0x3e6e6a0*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e76528*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element1, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element2);
                            /*0x3e7652c*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6e6a4*/ DerSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e6e74c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6e878*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e76530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerExternal ToAsn1External();
                            /*0x3e76588*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString ToAsn1OctetString();
                            /*0x3e765f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class DerSequenceParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x3e6bfcc*/ DerSequenceParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e76724*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet Empty;

                            static /*0x3e768b0*/ DerSet();
                            /*0x3e6ebc8*/ DerSet();
                            /*0x3e76790*/ DerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e6ec34*/ DerSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector, bool doSort);
                            /*0x3e6ec3c*/ DerSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e6ece8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6ee1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e76798*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] GetSortedElements();
                        }

                        class DerSetParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser m_parser;

                            /*0x3e6bf9c*/ DerSetParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e76914*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        class DerStringBase : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1String
                        {
                            /*0x3e70e3c*/ DerStringBase();
                            /*0x380b9e8*/ string GetString();
                            /*0x3e76980*/ string ToString();
                            /*0x3e76990*/ int Asn1GetHashCode();
                        }

                        class DerT61String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e6758c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerT61String CreatePrimitive(byte[] contents);
                            /*0x3e769bc*/ DerT61String(byte[] contents, bool clone);
                            /*0x3e76a9c*/ string GetString();
                            /*0x3e76aa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e76b20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e76ba0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e76c5c*/ int Asn1GetHashCode();
                        }

                        class DerTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject
                        {
                            /*0x3e62efc*/ DerTaggedObject(bool isExplicit, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6ef14*/ DerTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e6f098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e6f36c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e76cb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DerUniversalString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            static /*0x0*/ char[] table;
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e77360*/ DerUniversalString();
                            static /*0x3e675e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerUniversalString CreatePrimitive(byte[] contents);
                            static /*0x3e77084*/ void EncodeHexByte(System.Text.StringBuilder buf, int i);
                            static /*0x3e76f54*/ void EncodeHexDL(System.Text.StringBuilder buf, int dl);
                            /*0x3e76d10*/ DerUniversalString(byte[] contents, bool clone);
                            /*0x3e76df0*/ string GetString();
                            /*0x3e77150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e771c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e77248*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e77304*/ int Asn1GetHashCode();
                        }

                        class DerUtf8String : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e6769c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerUtf8String CreatePrimitive(byte[] contents);
                            /*0x3e77400*/ DerUtf8String(byte[] contents, bool clone);
                            /*0x3e774e0*/ string GetString();
                            /*0x3e774ec*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e775a8*/ int Asn1GetHashCode();
                            /*0x3e77604*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e7767c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DerVideotexString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e676f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerVideotexString CreatePrimitive(byte[] contents);
                            /*0x3e776fc*/ DerVideotexString(byte[] contents, bool clone);
                            /*0x3e777dc*/ string GetString();
                            /*0x3e777e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e77860*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e778e0*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e7799c*/ int Asn1GetHashCode();
                        }

                        class DerVisibleString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerStringBase
                        {
                            /*0x10*/ byte[] m_contents;

                            static /*0x3e67754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerVisibleString CreatePrimitive(byte[] contents);
                            /*0x3e779f8*/ DerVisibleString(byte[] contents, bool clone);
                            /*0x3e77ad8*/ string GetString();
                            /*0x3e77ae4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e77b5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e77bdc*/ bool Asn1Equals(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                            /*0x3e77c98*/ int Asn1GetHashCode();
                        }

                        class DLBitString : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                        {
                            /*0x3e6608c*/ DLBitString(byte[] contents, bool check);
                            /*0x3e77cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e77d88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DLBitStringParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1BitStringParser, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Convertible
                        {
                            /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream m_stream;
                            /*0x18*/ int m_padBits;

                            /*0x3e6c05c*/ DLBitStringParser(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DefiniteLengthInputStream stream);
                            /*0x3e77e30*/ System.IO.Stream GetBitStream();
                            /*0x3e77f90*/ int get_PadBits();
                            /*0x3e77f98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            /*0x3e77e38*/ System.IO.Stream GetBitStream(bool octetAligned);
                        }

                        class DLSequence : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSequence
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSequence Empty;

                            static /*0x3e783a4*/ DLSequence();
                            static /*0x3e64ab0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSequence FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e78150*/ DLSequence();
                            /*0x3e781a4*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable element);
                            /*0x3e6e96c*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e780ec*/ DLSequence(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e78208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e78298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e78344*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Set ToAsn1Set();
                        }

                        class DLSet : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerSet
                        {
                            static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSet Empty;

                            static /*0x3e78600*/ DLSet();
                            static /*0x3e65484*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DLSet FromVector(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e78470*/ DLSet();
                            /*0x3e78408*/ DLSet(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector);
                            /*0x3e76654*/ DLSet(bool isSorted, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable[] elements);
                            /*0x3e784c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e78554*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                        }

                        class DLTaggedObject : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerTaggedObject
                        {
                            /*0x3e6ce40*/ DLTaggedObject(int explicitness, int tagClass, int tagNo, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable obj);
                            /*0x3e78664*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncoding(int encoding);
                            /*0x3e787d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding GetEncodingImplicit(int encoding, int tagClass, int tagNo);
                            /*0x3e7894c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence RebuildConstructed(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object asn1Object);
                        }

                        class DLTaggedObjectParser : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.BerTaggedObjectParser
                        {
                            /*0x20*/ bool m_constructed;

                            /*0x3e6ba44*/ DLTaggedObjectParser(int tagClass, int tagNo, bool constructed, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1StreamParser parser);
                            /*0x3e789a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        interface IAsn1Choice
                        {
                        }

                        interface IAsn1Convertible
                        {
                            /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                        }

                        interface IAsn1Encoding
                        {
                            /*0x380d83c*/ void Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x380b6a0*/ int GetLength();
                        }

                        interface IAsn1String
                        {
                            /*0x380b9e8*/ string GetString();
                        }

                        class IndefiniteLengthInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.LimitedInputStream
                        {
                            /*0x34*/ int _lookAhead;
                            /*0x38*/ bool _eofOn00;

                            /*0x3e65870*/ IndefiniteLengthInputStream(System.IO.Stream inStream, int limit);
                            /*0x3e6c0bc*/ void SetEofOn00(bool eofOn00);
                            /*0x3e78af8*/ void CheckEndOfContents();
                            /*0x3e78b64*/ int Read(byte[] buffer, int offset, int count);
                            /*0x3e78c64*/ int Read(System.Span<byte> buffer);
                            /*0x3e78d9c*/ int ReadByte();
                            /*0x3e78a98*/ int RequireByte();
                        }

                        class LimitedInputStream : Best.HTTP.SecureProtocol.Org.BouncyCastle.Utilities.IO.BaseInputStream
                        {
                            /*0x28*/ System.IO.Stream _in;
                            /*0x30*/ int _limit;

                            /*0x3e704fc*/ LimitedInputStream(System.IO.Stream inStream, int limit);
                            /*0x3e78dec*/ int get_Limit();
                            /*0x3e70538*/ void SetParentEofDetect();
                        }

                        class OidTokenizer
                        {
                            /*0x10*/ string oid;
                            /*0x18*/ int index;

                            /*0x3e6944c*/ OidTokenizer(string oid);
                            /*0x3e69898*/ bool get_HasMoreTokens();
                            /*0x3e6947c*/ string NextToken();
                        }

                        class PrimitiveEncoding : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ byte[] m_contentsOctets;

                            /*0x3e63ca4*/ PrimitiveEncoding(int tagClass, int tagNo, byte[] contentsOctets);
                            /*0x3e78df4*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e78e58*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        class PrimitiveEncodingSuffixed : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding
                        {
                            /*0x10*/ int m_tagClass;
                            /*0x14*/ int m_tagNo;
                            /*0x18*/ byte[] m_contentsOctets;
                            /*0x20*/ byte m_contentsSuffix;

                            /*0x3e71148*/ PrimitiveEncodingSuffixed(int tagClass, int tagNo, byte[] contentsOctets, byte contentsSuffix);
                            /*0x3e78edc*/ void Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.Encode(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OutputStream asn1Out);
                            /*0x3e78f5c*/ int Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Encoding.GetLength();
                        }

                        namespace X9
                        {
                            class DHDomainParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger j;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms validationParms;

                                static /*0x3e78fe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHDomainParameters GetInstance(object obj);
                                static /*0x3e79370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetNext(System.Collections.Generic.IEnumerator<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable> e);
                                /*0x3e7915c*/ DHDomainParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e79608*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_P();
                                /*0x3e79610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_G();
                                /*0x3e79618*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_Q();
                                /*0x3e79620*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_J();
                                /*0x3e79628*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms get_ValidationParms();
                                /*0x3e79630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DHPublicKey : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger y;

                                static /*0x3e797b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHPublicKey GetInstance(object obj);
                                /*0x3e79930*/ DHPublicKey(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger y);
                                /*0x3e799ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_Y();
                                /*0x3e799b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DHValidationParms : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString seed;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger pgenCounter;

                                static /*0x3e7948c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.DHValidationParms GetInstance(object obj);
                                /*0x3e799bc*/ DHValidationParms(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e79b38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString get_Seed();
                                /*0x3e79b40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger get_PgenCounter();
                                /*0x3e79b48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class ECNamedCurveTable
                            {
                                static /*0x3e79ba8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e79dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                            }

                            class X962NamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e7a218*/ X962NamedCurves();
                                static /*0x3e79f90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e7a080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e7a084*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3e7a11c*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e79d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e79f24*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e7acb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e7ac38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Prime192v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7afec*/ Prime192v1Holder();
                                    /*0x3e7ad28*/ Prime192v1Holder();
                                    /*0x3e7ad30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7ae90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime192v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7b318*/ Prime192v2Holder();
                                    /*0x3e7b054*/ Prime192v2Holder();
                                    /*0x3e7b05c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7b1bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime192v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7b644*/ Prime192v3Holder();
                                    /*0x3e7b380*/ Prime192v3Holder();
                                    /*0x3e7b388*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7b4e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7b978*/ Prime239v1Holder();
                                    /*0x3e7b6ac*/ Prime239v1Holder();
                                    /*0x3e7b6b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7b81c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7bcac*/ Prime239v2Holder();
                                    /*0x3e7b9e0*/ Prime239v2Holder();
                                    /*0x3e7b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7bb50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime239v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7bfe0*/ Prime239v3Holder();
                                    /*0x3e7bd14*/ Prime239v3Holder();
                                    /*0x3e7bd1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7be84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Prime256v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7c314*/ Prime256v1Holder();
                                    /*0x3e7c048*/ Prime256v1Holder();
                                    /*0x3e7c050*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7c1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7c628*/ C2pnb163v1Holder();
                                    /*0x3e7c37c*/ C2pnb163v1Holder();
                                    /*0x3e7c384*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7c4cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7c8ec*/ C2pnb163v2Holder();
                                    /*0x3e7c690*/ C2pnb163v2Holder();
                                    /*0x3e7c698*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7c7e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb163v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7cbb0*/ C2pnb163v3Holder();
                                    /*0x3e7c954*/ C2pnb163v3Holder();
                                    /*0x3e7c95c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7caa4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb176w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7ce74*/ C2pnb176w1Holder();
                                    /*0x3e7cc18*/ C2pnb176w1Holder();
                                    /*0x3e7cc20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7cd68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7d174*/ C2tnb191v1Holder();
                                    /*0x3e7cedc*/ C2tnb191v1Holder();
                                    /*0x3e7cee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7d018*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7d42c*/ C2tnb191v2Holder();
                                    /*0x3e7d1dc*/ C2tnb191v2Holder();
                                    /*0x3e7d1e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7d320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb191v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7d6e4*/ C2tnb191v3Holder();
                                    /*0x3e7d494*/ C2tnb191v3Holder();
                                    /*0x3e7d49c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7d5d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb208w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7d990*/ C2pnb208w1Holder();
                                    /*0x3e7d74c*/ C2pnb208w1Holder();
                                    /*0x3e7d754*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7d884*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7dc48*/ C2tnb239v1Holder();
                                    /*0x3e7d9f8*/ C2tnb239v1Holder();
                                    /*0x3e7da00*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7db3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7df00*/ C2tnb239v2Holder();
                                    /*0x3e7dcb0*/ C2tnb239v2Holder();
                                    /*0x3e7dcb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7ddf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb239v3Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7e1b8*/ C2tnb239v3Holder();
                                    /*0x3e7df68*/ C2tnb239v3Holder();
                                    /*0x3e7df70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7e0ac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb272w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7e47c*/ C2pnb272w1Holder();
                                    /*0x3e7e220*/ C2pnb272w1Holder();
                                    /*0x3e7e228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7e370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb304w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7e740*/ C2pnb304w1Holder();
                                    /*0x3e7e4e4*/ C2pnb304w1Holder();
                                    /*0x3e7e4ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7e634*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb359v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7e9f8*/ C2tnb359v1Holder();
                                    /*0x3e7e7a8*/ C2tnb359v1Holder();
                                    /*0x3e7e7b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7e8ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2pnb368w1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7ecbc*/ C2pnb368w1Holder();
                                    /*0x3e7ea60*/ C2pnb368w1Holder();
                                    /*0x3e7ea68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7ebb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class C2tnb431r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e7ef74*/ C2tnb431r1Holder();
                                    /*0x3e7ed24*/ C2tnb431r1Holder();
                                    /*0x3e7ed2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e7ee68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class X962Parameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object _params;

                                static /*0x3e7efdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X962Parameters GetInstance(object obj);
                                /*0x3e7f284*/ X962Parameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object obj);
                                /*0x3e7f2b4*/ bool get_IsNamedCurve();
                                /*0x3e7f330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object get_Parameters();
                                /*0x3e7f338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9Curve : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x18*/ byte[] seed;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier fieldIdentifier;

                                /*0x3e7f340*/ X9Curve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, byte[] seed);
                                /*0x3e7f4d8*/ X9Curve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID fieldID, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger order, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger cofactor, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e7fcb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e7fcc0*/ byte[] GetSeed();
                                /*0x3e7fd1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9ECParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID fieldID;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h;
                                /*0x38*/ byte[] seed;

                                /*0x3e7ff48*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e80424*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h);
                                /*0x3e8042c*/ X9ECParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint g, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger n, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger h, byte[] seed);
                                /*0x3e80be4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e80bec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_G();
                                /*0x3e80c90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_N();
                                /*0x3e80c98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_H();
                                /*0x3e80ca0*/ byte[] GetSeed();
                                /*0x3e80ca8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9ECParametersHolder
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve m_curve;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters m_parameters;

                                /*0x3e81160*/ X9ECParametersHolder();
                                /*0x3e80f6c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve get_Curve();
                                /*0x3e81054*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters get_Parameters();
                                /*0x3e8113c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                /*0x380b9e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                            }

                            class X9ECPoint : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString encoding;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p;

                                /*0x3e81168*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint p, bool compressed);
                                /*0x3e81234*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, byte[] encoding);
                                /*0x3e803e0*/ X9ECPoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString s);
                                /*0x3e80c04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECPoint get_Point();
                                /*0x3e812fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9FieldElement : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement f;

                                /*0x3e81304*/ X9FieldElement(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement f);
                                /*0x3e81334*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9FieldID : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object parameters;

                                static /*0x3e8033c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9FieldID GetInstance(object obj);
                                /*0x3e807e8*/ X9FieldID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger primeP);
                                /*0x3e808a0*/ X9FieldID(int m, int k1);
                                /*0x3e808ac*/ X9FieldID(int m, int k1, int k2, int k3);
                                /*0x3e814fc*/ X9FieldID(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e815d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Identifier();
                                /*0x3e815dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object get_Parameters();
                                /*0x3e815e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X9IntegerConverter
                            {
                                static /*0x3e813e4*/ int GetByteLength(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECFieldElement fe);
                                static /*0x3e81418*/ byte[] IntegerToBytes(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger s, int qLength);
                            }

                            class X9ObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ansi_X9_62;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdFieldType;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrimeField;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CharacteristicTwoField;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GNBasis;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TPBasis;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PPBasis;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_ecSigType;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_publicKeyType;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdECPublicKey;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha2;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha224;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha384;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECDsaWithSha512;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CTwoCurve;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v2;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb163v3;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb176w1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v1;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v2;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb191v3;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb191v4;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb191v5;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb208w1;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v1;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb239v3;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb239v4;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Onb239v5;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb272w1;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb304w1;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb359v1;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Pnb368w1;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C2Tnb431r1;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrimeCurve;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v1;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v2;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime192v3;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v1;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v2;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime239v3;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Prime256v1;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsa;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha1;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X9x63Scheme;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHSinglePassStdDHSha1KdfScheme;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHSinglePassCofactorDHSha1KdfScheme;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MqvSinglePassSha1KdfScheme;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ansi_x9_42;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHPublicNumber;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X9x42Schemes;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHStatic;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHEphem;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHOneFlow;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybrid1;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybrid2;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DHHybridOneFlow;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Mqv2;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Mqv1;

                                static /*0x3e81648*/ X9ObjectIdentifiers();
                            }
                        }

                        namespace X509
                        {
                            class AlgorithmIdentifier : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable parameters;

                                static /*0x3e826f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool explicitly);
                                static /*0x3e8270c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier GetInstance(object obj);
                                /*0x3e82960*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm);
                                /*0x3e82990*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable parameters);
                                /*0x3e827b0*/ AlgorithmIdentifier(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e829d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_Algorithm();
                                /*0x3e829dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable get_Parameters();
                                /*0x3e829e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DigestInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ byte[] digest;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID;

                                /*0x3e82a88*/ DigestInfo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID, byte[] digest);
                                /*0x3e82acc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class DsaParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;

                                static /*0x3e82b64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.DsaParameter GetInstance(object obj);
                                /*0x3e82ccc*/ DsaParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e82e30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e82e4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3e82e68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e82e84*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class KeyUsage : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString
                            {
                                static /*0x3e82fc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.KeyUsage GetInstance(object obj);
                                static /*0x3e83274*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.KeyUsage FromExtensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions);
                                /*0x3e831dc*/ KeyUsage(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString usage);
                                /*0x3e832f4*/ string ToString();
                            }

                            class RsaPublicKeyStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger modulus;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger publicExponent;

                                static /*0x3e833b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.RsaPublicKeyStructure GetInstance(object obj);
                                /*0x3e83518*/ RsaPublicKeyStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e83650*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Modulus();
                                /*0x3e83658*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_PublicExponent();
                                /*0x3e83660*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class SubjectPublicKeyInfo : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier algID;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString keyData;

                                static /*0x3e83714*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo GetInstance(object obj);
                                /*0x3e837b8*/ SubjectPublicKeyInfo(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e83938*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_AlgorithmID();
                                /*0x3e83940*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ParsePublicKey();
                                /*0x3e8396c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString get_PublicKeyData();
                                /*0x3e83974*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class TbsCertificateStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger version;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger serialNumber;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier signature;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name issuer;
                                /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time startDate;
                                /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time endDate;
                                /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name subject;
                                /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo subjectPublicKeyInfo;
                                /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString issuerUniqueID;
                                /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString subjectUniqueID;
                                /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions;

                                static /*0x3e839d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure GetInstance(object obj);
                                /*0x3e83a7c*/ TbsCertificateStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e844b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
                                /*0x3e844bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions get_Extensions();
                                /*0x3e844c4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class Time : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object m_timeObject;

                                static /*0x3e8413c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.Time GetInstance(object obj);
                                /*0x3e84880*/ Time(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1GeneralizedTime generalizedTime);
                                /*0x3e847f4*/ Time(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1UtcTime utcTime);
                                /*0x3e84908*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                                /*0x3e84910*/ string ToString();
                            }

                            class X509CertificateStructure : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure tbsCert;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier sigAlgID;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerBitString sig;

                                static /*0x3e84ad8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509CertificateStructure GetInstance(object obj);
                                /*0x3e84b7c*/ X509CertificateStructure(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e84cec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.TbsCertificateStructure get_TbsCertificate();
                                /*0x3e84cf4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo get_SubjectPublicKeyInfo();
                                /*0x3e84d10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_SignatureAlgorithm();
                                /*0x3e84d18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X509Extension
                            {
                                /*0x10*/ bool critical;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString value;

                                static /*0x3e830d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ConvertValueToObject(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension ext);
                                /*0x3e84e54*/ X509Extension(bool critical, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString value);
                                /*0x3e84e8c*/ bool get_IsCritical();
                                /*0x3e84e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString get_Value();
                                /*0x3e84e9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetParsedValue();
                                /*0x3e84ea0*/ int GetHashCode();
                                /*0x3e84ed4*/ bool Equals(object obj);
                            }

                            class X509Extensions : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectDirectoryAttributes;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectKeyIdentifier;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier KeyUsage;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PrivateKeyUsagePeriod;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectAlternativeName;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IssuerAlternativeName;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BasicConstraints;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlNumber;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ReasonCode;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InstructionCode;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InvalidityDate;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DeltaCrlIndicator;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IssuingDistributionPoint;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertificateIssuer;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NameConstraints;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlDistributionPoints;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertificatePolicies;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PolicyMappings;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuthorityKeyIdentifier;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PolicyConstraints;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ExtendedKeyUsage;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier FreshestCrl;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier InhibitAnyPolicy;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuthorityInfoAccess;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SubjectInfoAccess;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier LogoType;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BiometricInfo;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier QCStatements;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier AuditIdentity;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NoRevAvail;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TargetInformation;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ExpiredCertsOnCrl;
                                /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension> m_extensions;
                                /*0x18*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> m_ordering;

                                static /*0x3e85ba0*/ X509Extensions();
                                static /*0x3e832e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExtensionParsedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions extensions, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e842d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extensions GetInstance(object obj);
                                /*0x3e84fac*/ X509Extensions(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e85770*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Extension GetExtension(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x3e84f90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable GetExtensionParsedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                /*0x3e857c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class X509Name : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier C;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier O;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OU;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier T;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CN;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Street;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SerialNumber;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier L;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ST;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Surname;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GivenName;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Initials;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Generation;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UniqueIdentifier;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BusinessCategory;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PostalCode;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DnQualifier;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pseudonym;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DateOfBirth;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PlaceOfBirth;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Gender;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryOfCitizenship;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryOfResidence;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NameAtBirth;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PostalAddress;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DmdName;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TelephoneNumber;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OrganizationIdentifier;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Name;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EmailAddress;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UnstructuredName;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UnstructuredAddress;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier E;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DC;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UID;
                                static /*0x118*/ bool[] defaultReverse;
                                static /*0x120*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> DefaultSymbolsInternal;
                                static /*0x128*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> DefaultSymbols;
                                static /*0x130*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC2253SymbolsInternal;
                                static /*0x138*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC2253Symbols;
                                static /*0x140*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC1779SymbolsInternal;
                                static /*0x148*/ System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> RFC1779Symbols;
                                static /*0x150*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> DefaultLookupInternal;
                                static /*0x158*/ System.Collections.Generic.IDictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> DefaultLookup;
                                /*0x10*/ System.Collections.Generic.List<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> ordering;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509NameEntryConverter converter;
                                /*0x20*/ System.Collections.Generic.IList<string> values;
                                /*0x28*/ System.Collections.Generic.IList<bool> added;
                                /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq;
                                /*0x38*/ string cachedStrRepresentation;

                                static /*0x3e86554*/ X509Name();
                                static /*0x3e86414*/ bool get_DefaultReverse();
                                static /*0x3e84098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.X509Name GetInstance(object obj);
                                /*0x3e89bd8*/ X509Name(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e8a550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                                /*0x3e8a878*/ void AppendValue(System.Text.StringBuilder buf, System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> oidSymbols, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string val);
                                /*0x3e8ab10*/ string ToString(bool reverse, System.Collections.Generic.IDictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> oidSymbols);
                                /*0x3e8afcc*/ string ToString();
                            }

                            class X509NameEntryConverter
                            {
                                /*0x380bcbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object GetConvertedValue(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, string value);
                            }

                            class X509ObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CommonName;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CountryName;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier LocalityName;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier StateOrProvinceName;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Organization;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OrganizationalUnitName;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_telephoneNumber;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_name;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_at_organizationIdentifier;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160WithRsaEncryption;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEARsa;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPkix;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPE;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAD;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdADCAIssuers;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdADOcsp;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier OcspAccessMethod;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlAccessMethod;

                                static /*0x3e8b05c*/ X509ObjectIdentifiers();
                            }
                        }

                        namespace UA
                        {
                            class UAObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier UaOid;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu4145le;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu4145be;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_256;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_384;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564digest_512;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_256;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_384;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7564mac_512;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_128;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_256;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ecb_512;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_128;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ctr_512;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_128;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_256;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cfb_512;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_128;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_256;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cmac_512;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_128;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_256;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624cbc_512;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_128;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_256;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ofb_512;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_128;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_256;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624gmac_512;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_128;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_256;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624ccm_512;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_128;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_256;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624xts_512;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_128;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_256;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier dstu7624kw_512;

                                static /*0x3e8b624*/ UAObjectIdentifiers();
                            }
                        }

                        namespace TeleTrust
                        {
                            class TeleTrusTNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e8c48c*/ TeleTrusTNamedCurves();
                                static /*0x3e8c20c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e8c2f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e8c2f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3e8c390*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e8cb70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e8cc68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e8ccd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e8cbf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class BrainpoolP160r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8cfb0*/ BrainpoolP160r1Holder();
                                    /*0x3e8cd48*/ BrainpoolP160r1Holder();
                                    /*0x3e8cd50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8ceac*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP160t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8d280*/ BrainpoolP160t1Holder();
                                    /*0x3e8d018*/ BrainpoolP160t1Holder();
                                    /*0x3e8d020*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8d17c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP192r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8d550*/ BrainpoolP192r1Holder();
                                    /*0x3e8d2e8*/ BrainpoolP192r1Holder();
                                    /*0x3e8d2f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8d44c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP192t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8d820*/ BrainpoolP192t1Holder();
                                    /*0x3e8d5b8*/ BrainpoolP192t1Holder();
                                    /*0x3e8d5c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8d71c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP224r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8daf0*/ BrainpoolP224r1Holder();
                                    /*0x3e8d888*/ BrainpoolP224r1Holder();
                                    /*0x3e8d890*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8d9ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP224t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8ddc0*/ BrainpoolP224t1Holder();
                                    /*0x3e8db58*/ BrainpoolP224t1Holder();
                                    /*0x3e8db60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8dcbc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP256r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8e090*/ BrainpoolP256r1Holder();
                                    /*0x3e8de28*/ BrainpoolP256r1Holder();
                                    /*0x3e8de30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8df8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP256t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8e360*/ BrainpoolP256t1Holder();
                                    /*0x3e8e0f8*/ BrainpoolP256t1Holder();
                                    /*0x3e8e100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8e25c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP320r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8e630*/ BrainpoolP320r1Holder();
                                    /*0x3e8e3c8*/ BrainpoolP320r1Holder();
                                    /*0x3e8e3d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8e52c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP320t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8e900*/ BrainpoolP320t1Holder();
                                    /*0x3e8e698*/ BrainpoolP320t1Holder();
                                    /*0x3e8e6a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8e7fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP384r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8ebd0*/ BrainpoolP384r1Holder();
                                    /*0x3e8e968*/ BrainpoolP384r1Holder();
                                    /*0x3e8e970*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8eacc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP384t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8eea0*/ BrainpoolP384t1Holder();
                                    /*0x3e8ec38*/ BrainpoolP384t1Holder();
                                    /*0x3e8ec40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8ed9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP512r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8f170*/ BrainpoolP512r1Holder();
                                    /*0x3e8ef08*/ BrainpoolP512r1Holder();
                                    /*0x3e8ef10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8f06c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class BrainpoolP512t1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e8f440*/ BrainpoolP512t1Holder();
                                    /*0x3e8f1d8*/ BrainpoolP512t1Holder();
                                    /*0x3e8f1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e8f33c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class TeleTrusTObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TeleTrusTAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD160;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD128;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RipeMD256;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD160;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD128;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaSignatureWithRipeMD256;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSign;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSignWithSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ECSignWithRipeMD160;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EccBrainpool;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VersionOne;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP160R1;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP160T1;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP192R1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP192T1;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP224R1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP224T1;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP256R1;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP256T1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP320R1;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP320T1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP384R1;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP384T1;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP512R1;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier BrainpoolP512T1;

                                static /*0x3e8f4a8*/ TeleTrusTObjectIdentifiers();
                            }
                        }

                        namespace Sec
                        {
                            class SecNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e903bc*/ SecNamedCurves();
                                static /*0x3e90098*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3e90180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3e90184*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurveGlv(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve c, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters p);
                                static /*0x3e90228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3e902c0*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3e91174*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e9126c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e912d4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e911f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Secp112r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e91608*/ Secp112r1Holder();
                                    /*0x3e9134c*/ Secp112r1Holder();
                                    /*0x3e91354*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e914b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp112r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e91934*/ Secp112r2Holder();
                                    /*0x3e91670*/ Secp112r2Holder();
                                    /*0x3e91678*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e917e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp128r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e91c58*/ Secp128r1Holder();
                                    /*0x3e9199c*/ Secp128r1Holder();
                                    /*0x3e919a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e91b04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp128r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e91f84*/ Secp128r2Holder();
                                    /*0x3e91cc0*/ Secp128r2Holder();
                                    /*0x3e91cc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e91e30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e924f8*/ Secp160k1Holder();
                                    /*0x3e91fec*/ Secp160k1Holder();
                                    /*0x3e91ff4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e923f4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9281c*/ Secp160r1Holder();
                                    /*0x3e92560*/ Secp160r1Holder();
                                    /*0x3e92568*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e926c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp160r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e92b40*/ Secp160r2Holder();
                                    /*0x3e92884*/ Secp160r2Holder();
                                    /*0x3e9288c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e929ec*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp192k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e930b4*/ Secp192k1Holder();
                                    /*0x3e92ba8*/ Secp192k1Holder();
                                    /*0x3e92bb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e92fb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp192r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e933d8*/ Secp192r1Holder();
                                    /*0x3e9311c*/ Secp192r1Holder();
                                    /*0x3e93124*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e93284*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp224k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9394c*/ Secp224k1Holder();
                                    /*0x3e93440*/ Secp224k1Holder();
                                    /*0x3e93448*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e93848*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp224r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e93c70*/ Secp224r1Holder();
                                    /*0x3e939b4*/ Secp224r1Holder();
                                    /*0x3e939bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e93b1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp256k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e941e4*/ Secp256k1Holder();
                                    /*0x3e93cd8*/ Secp256k1Holder();
                                    /*0x3e93ce0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e940e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp256r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e94508*/ Secp256r1Holder();
                                    /*0x3e9424c*/ Secp256r1Holder();
                                    /*0x3e94254*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e943b4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp384r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9482c*/ Secp384r1Holder();
                                    /*0x3e94570*/ Secp384r1Holder();
                                    /*0x3e94578*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e946d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Secp521r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e94b50*/ Secp521r1Holder();
                                    /*0x3e94894*/ Secp521r1Holder();
                                    /*0x3e9489c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e949fc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect113r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e94e50*/ Sect113r1Holder();
                                    /*0x3e94bb8*/ Sect113r1Holder();
                                    /*0x3e94bc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e94cfc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect113r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e95150*/ Sect113r2Holder();
                                    /*0x3e94eb8*/ Sect113r2Holder();
                                    /*0x3e94ec0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e94ffc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect131r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9545c*/ Sect131r1Holder();
                                    /*0x3e951b8*/ Sect131r1Holder();
                                    /*0x3e951c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e95308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect131r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e95768*/ Sect131r2Holder();
                                    /*0x3e954c4*/ Sect131r2Holder();
                                    /*0x3e954cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e95614*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e959e8*/ Sect163k1Holder();
                                    /*0x3e957d0*/ Sect163k1Holder();
                                    /*0x3e957d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e958e4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e95cf4*/ Sect163r1Holder();
                                    /*0x3e95a50*/ Sect163r1Holder();
                                    /*0x3e95a58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e95ba0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect163r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e95fe8*/ Sect163r2Holder();
                                    /*0x3e95d5c*/ Sect163r2Holder();
                                    /*0x3e95d64*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e95e94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect193r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e962e8*/ Sect193r1Holder();
                                    /*0x3e96050*/ Sect193r1Holder();
                                    /*0x3e96058*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e96194*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect193r2Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e965e8*/ Sect193r2Holder();
                                    /*0x3e96350*/ Sect193r2Holder();
                                    /*0x3e96358*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e96494*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect233k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9685c*/ Sect233k1Holder();
                                    /*0x3e96650*/ Sect233k1Holder();
                                    /*0x3e96658*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e96758*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect233r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e96b44*/ Sect233r1Holder();
                                    /*0x3e968c4*/ Sect233r1Holder();
                                    /*0x3e968cc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e969f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect239k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e96db8*/ Sect239k1Holder();
                                    /*0x3e96bac*/ Sect239k1Holder();
                                    /*0x3e96bb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e96cb4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect283k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e97038*/ Sect283k1Holder();
                                    /*0x3e96e20*/ Sect283k1Holder();
                                    /*0x3e96e28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e96f34*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect283r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e9732c*/ Sect283r1Holder();
                                    /*0x3e970a0*/ Sect283r1Holder();
                                    /*0x3e970a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e971d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect409k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e975a0*/ Sect409k1Holder();
                                    /*0x3e97394*/ Sect409k1Holder();
                                    /*0x3e9739c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e9749c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect409r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e97888*/ Sect409r1Holder();
                                    /*0x3e97608*/ Sect409r1Holder();
                                    /*0x3e97610*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e97734*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect571k1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e97b08*/ Sect571k1Holder();
                                    /*0x3e978f0*/ Sect571k1Holder();
                                    /*0x3e978f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e97a04*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Sect571r1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3e97dfc*/ Sect571r1Holder();
                                    /*0x3e97b70*/ Sect571r1Holder();
                                    /*0x3e97b78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3e97ca8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class SecObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163k1;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163r1;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT239k1;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT113r1;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT113r2;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP112r1;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP112r2;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160r1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160k1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP256k1;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT163r2;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT283k1;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT283r1;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT131r1;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT131r2;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT193r1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT193r2;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT233k1;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT233r1;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP128r1;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP128r2;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP160r2;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP192k1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP224k1;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP224r1;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP384r1;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP521r1;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT409k1;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT409r1;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT571k1;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecT571r1;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP192r1;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecP256r1;

                                static /*0x3e97e64*/ SecObjectIdentifiers();
                            }
                        }

                        namespace Rosstandart
                        {
                            class RosstandartObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier rosstandart;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3411_12_256;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3411_12_512;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_hmac_gost_3411_12_256;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_hmac_gost_3411_12_512;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_256;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_signwithdigest_gost_3410_12_512;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement_gost_3410_12_256;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_agreement_gost_3410_12_512;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256_paramSet;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_256_paramSetA;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSet;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetA;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetB;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_3410_12_512_paramSetC;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_tc26_gost_28147_param_Z;

                                static /*0x3e98cfc*/ RosstandartObjectIdentifiers();
                            }
                        }

                        namespace Pkcs
                        {
                            class DHParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger l;

                                /*0x3e992f0*/ DHParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e99704*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e99720*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e9973c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_L();
                                /*0x3e99750*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class PkcsObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs1Oid;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RsaEncryption;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD2WithRsaEncryption;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsaEncryption;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5WithRsaEncryption;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha1WithRsaEncryption;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SrsaOaepEncryptionSet;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsaesOaep;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdMgf1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPSpecified;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPss;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha256WithRsaEncryption;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha384WithRsaEncryption;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512WithRsaEncryption;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha224WithRsaEncryption;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512_224WithRSAEncryption;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha512_256WithRSAEncryption;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DhKeyAgreement;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD2AndDesCbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD2AndRC2Cbc;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD5AndDesCbc;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithMD5AndRC2Cbc;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithSha1AndDesCbc;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithSha1AndRC2Cbc;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPbeS2;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdPbkdf2;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEde3Cbc;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier RC2Cbc;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier rc4;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha1;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha224;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha256;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha384;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHmacWithSha512;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Data;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SignedData;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EnvelopedData;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SignedAndEnvelopedData;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DigestedData;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EncryptedData;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtEmailAddress;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtUnstructuredName;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtContentType;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtMessageDigest;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSigningTime;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtCounterSignature;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtChallengePassword;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtUnstructuredAddress;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtExtendedCertificateAttributes;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSigningDescription;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtExtensionRequest;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtSmimeCapabilities;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSmime;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtFriendlyName;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs9AtLocalKeyID;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X509Certificate;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SdsiCertificate;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier X509Crl;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlg;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgEsdh;
                                static /*0x1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgCms3DesWrap;
                                static /*0x200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgCmsRC2Wrap;
                                static /*0x208*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgZlibCompress;
                                static /*0x210*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgPwriKek;
                                static /*0x218*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgSsdh;
                                static /*0x220*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsaKem;
                                static /*0x228*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgAeadChaCha20Poly1305;
                                static /*0x230*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAlgHssLmsHashsig;
                                static /*0x238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PreferSignedData;
                                static /*0x240*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CannotDecryptAny;
                                static /*0x248*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SmimeCapabilitiesVersions;
                                static /*0x250*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAReceiptRequest;
                                static /*0x258*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTAuthData;
                                static /*0x260*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTTstInfo;
                                static /*0x268*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTCompressedData;
                                static /*0x270*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTAuthEnvelopedData;
                                static /*0x278*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCTTimestampedData;
                                static /*0x280*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfOrigin;
                                static /*0x288*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfReceipt;
                                static /*0x290*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfDelivery;
                                static /*0x298*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfSender;
                                static /*0x2a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfApproval;
                                static /*0x2a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdCtiEtsProofOfCreation;
                                static /*0x2b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAOid;
                                static /*0x2b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentHint;
                                static /*0x2c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAMsgSigDigest;
                                static /*0x2c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentReference;
                                static /*0x2d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEncrypKeyPref;
                                static /*0x2d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASigningCertificate;
                                static /*0x2e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASigningCertificateV2;
                                static /*0x2e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAContentIdentifier;
                                static /*0x2f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAASignatureTimeStampToken;
                                static /*0x2f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSigPolicyID;
                                static /*0x300*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCommitmentType;
                                static /*0x308*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSignerLocation;
                                static /*0x310*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsSignerAttr;
                                static /*0x318*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsOtherSigCert;
                                static /*0x320*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsContentTimestamp;
                                static /*0x328*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertificateRefs;
                                static /*0x330*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsRevocationRefs;
                                static /*0x338*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertValues;
                                static /*0x340*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsRevocationValues;
                                static /*0x348*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsEscTimeStamp;
                                static /*0x350*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsCertCrlTimestamp;
                                static /*0x358*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAEtsArchiveTimestamp;
                                static /*0x360*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAADecryptKeyID;
                                static /*0x368*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAImplCryptoAlgs;
                                static /*0x370*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAAsymmDecryptKeyID;
                                static /*0x378*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAAImplCompressAlgs;
                                static /*0x380*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAACommunityIdentifiers;
                                static /*0x388*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSpqEtsUri;
                                static /*0x390*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSpqEtsUNotice;
                                static /*0x398*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier KeyBag;
                                static /*0x3a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Pkcs8ShroudedKeyBag;
                                static /*0x3a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CertBag;
                                static /*0x3b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier CrlBag;
                                static /*0x3b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SecretBag;
                                static /*0x3c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier SafeContentsBag;
                                static /*0x3c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd128BitRC4;
                                static /*0x3d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd40BitRC4;
                                static /*0x3d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd3KeyTripleDesCbc;
                                static /*0x3e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd2KeyTripleDesCbc;
                                static /*0x3e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbeWithShaAnd128BitRC2Cbc;
                                static /*0x3f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PbewithShaAnd40BitRC2Cbc;

                                static /*0x3e99800*/ PkcsObjectIdentifiers();
                            }

                            class RsassaPssParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier DefaultHashAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier DefaultMaskGenFunction;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger DefaultSaltLength;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger DefaultTrailerField;
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier hashAlgorithm;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier maskGenAlgorithm;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger saltLength;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger trailerField;

                                static /*0x3e9c16c*/ RsassaPssParameters();
                                static /*0x3e9ba80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Pkcs.RsassaPssParameters GetInstance(object obj);
                                /*0x3e9be68*/ RsassaPssParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier hashAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier maskGenAlgorithm, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger saltLength, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger trailerField);
                                /*0x3e9bbfc*/ RsassaPssParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e9bedc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier get_HashAlgorithm();
                                /*0x3e9bee4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Oiw
                        {
                            class ElGamalParameter : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger g;

                                /*0x3e9c334*/ ElGamalParameter(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e9c434*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3e9c450*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_G();
                                /*0x3e9c46c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class OiwObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsa;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD5WithRsa;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier MD4WithRsaEncryption;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEcb;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesCbc;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesOfb;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesCfb;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DesEde;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha1;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Sha1WithRsa;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ElGamalAlgorithm;

                                static /*0x3e9c4d0*/ OiwObjectIdentifiers();
                            }
                        }

                        namespace Ocsp
                        {
                            class OcspResponse : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus responseStatus;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes responseBytes;

                                static /*0x3e9c844*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.OcspResponse GetInstance(object obj);
                                /*0x3e9c9c0*/ OcspResponse(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e9cbd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class OcspResponseStatus : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated
                            {
                                /*0x3e9cb44*/ OcspResponseStatus(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerEnumerated value);
                            }

                            class ResponderID : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.IAsn1Choice
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable id;

                                /*0x3e9cc7c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class ResponseBytes : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier responseType;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1OctetString response;

                                static /*0x3e9cbb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes GetInstance(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1TaggedObject obj, bool explicitly);
                                static /*0x3e9cd48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Ocsp.ResponseBytes GetInstance(object obj);
                                /*0x3e9cec4*/ ResponseBytes(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3e9d044*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Nist
                        {
                            class NistNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3e9d1d0*/ NistNamedCurves();
                                static /*0x3e9d0a8*/ void DefineCurveAlias(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e9d5b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3e9d6a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e9d710*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3e9d630*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);
                            }

                            class NistObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NistAlgorithm;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier HashAlgs;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha256;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha384;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha224;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512_224;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha512_256;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_224;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_256;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_384;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdSha3_512;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake128;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake256;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_224;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_256;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_384;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdHMacWithSha3_512;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake128Len;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdShake256Len;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdKmacWithShake128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdKmacWithShake256;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Aes;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ecb;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Cbc;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ofb;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Cfb;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Wrap;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Gcm;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes128Ccm;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ecb;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Cbc;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ofb;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Cfb;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Wrap;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Gcm;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes192Ccm;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ecb;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Cbc;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ofb;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Cfb;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Wrap;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Gcm;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdAes256Ccm;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha2;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha224;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha256;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha384;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DsaWithSha512;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_224;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_256;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_384;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdDsaWithSha3_512;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_224;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_256;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_384;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdEcdsaWithSha3_512;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_224;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_256;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_384;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier IdRsassaPkcs1V15WithSha3_512;

                                static /*0x3e9d7d0*/ NistObjectIdentifiers();
                            }
                        }

                        namespace Misc
                        {
                            class MiscObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Netscape;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCertType;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeBaseUrl;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeRevocationUrl;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCARevocationUrl;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeRenewalUrl;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCAPolicyUrl;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeSslServerName;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NetscapeCertComment;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Verisign;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignCzagExtension;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignPrivate_6_9;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignOnSiteJurisdictionHash;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignBitString_6_13;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignDnbDunsNumber;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier VerisignIssStrongCrypto;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Novell;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier NovellSecurityAttribs;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Entrust;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EntrustVersionExtension;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cast5CBC;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier HMAC_SHA1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier as_sys_sec_alg_ideaCBC;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_ECB;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_CBC;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_CFB;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib_algorithm_blowfish_OFB;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake2;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b160;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b256;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b384;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2b512;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s128;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s160;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s224;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_blake2s256;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake3;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier blake3_256;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_scrypt;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_alg_composite;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_composite_key;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_oracle_pkcs12_trusted_key_usage;

                                static /*0x3e9ef88*/ MiscObjectIdentifiers();
                            }
                        }

                        namespace Gnu
                        {
                            class GnuObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Gnu;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GnuPG;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Notation;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier PkaAddress;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GnuRadar;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier DigestAlgorithm;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Tiger192;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EncryptionAlgorithm;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Ecb;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Cbc;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Ofb;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent128Cfb;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Ecb;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Cbc;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Ofb;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent192Cfb;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Ecb;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Cbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Ofb;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Serpent256Cfb;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Crc;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Crc32;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier EllipticCurve;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier Ed25519;

                                static /*0x3e9fc78*/ GnuObjectIdentifiers();
                            }
                        }

                        namespace GM
                        {
                            class GMNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3ea05c4*/ GMNamedCurves();
                                static /*0x3ea033c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3ea042c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3ea0430*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3ea04c8*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3ea0858*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3ea0950*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea09bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea08d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class SM2P256V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea0ca8*/ SM2P256V1Holder();
                                    /*0x3ea0a34*/ SM2P256V1Holder();
                                    /*0x3ea0a3c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea0b9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class WapiP192V1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea0f84*/ WapiP192V1Holder();
                                    /*0x3ea0d10*/ WapiP192V1Holder();
                                    /*0x3ea0d18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea0e78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class GMObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm_scheme;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_ecb;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_cbc;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_ofb128;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm6_cfb128;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_ecb;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cbc;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_ofb128;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb128;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb1;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm1_cfb8;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_ecb;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cbc;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_ofb128;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb128;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb1;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ssf33_cfb8;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ecb;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cbc;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ofb128;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb1;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_cfb8;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ctr;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_gcm;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ccm;
                                static /*0xd0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_xts;
                                static /*0xd8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_wrap;
                                static /*0xe0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_wrap_pad;
                                static /*0xe8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sms4_ocb;
                                static /*0xf0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm5;
                                static /*0xf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2p256v1;
                                static /*0x100*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign;
                                static /*0x108*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2exchange;
                                static /*0x110*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt;
                                static /*0x118*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier wapip192v1;
                                static /*0x120*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_recommendedParameters;
                                static /*0x128*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_specifiedParameters;
                                static /*0x130*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sm3;
                                static /*0x138*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha1;
                                static /*0x140*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha224;
                                static /*0x148*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha256;
                                static /*0x150*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha384;
                                static /*0x158*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_sha512;
                                static /*0x160*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_rmd160;
                                static /*0x168*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_whirlpool;
                                static /*0x170*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_blake2b512;
                                static /*0x178*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_blake2s256;
                                static /*0x180*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2encrypt_with_md5;
                                static /*0x188*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_sm9PublicKey;
                                static /*0x190*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9sign;
                                static /*0x198*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9keyagreement;
                                static /*0x1a0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm9encrypt;
                                static /*0x1a8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm3;
                                static /*0x1b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier hmac_sm3;
                                static /*0x1b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sm3;
                                static /*0x1c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha1;
                                static /*0x1c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha256;
                                static /*0x1d0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha512;
                                static /*0x1d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha224;
                                static /*0x1e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_sha384;
                                static /*0x1e8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_rmd160;
                                static /*0x1f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_whirlpool;
                                static /*0x1f8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_blake2b512;
                                static /*0x200*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier sm2sign_with_blake2s256;

                                static /*0x3ea0fec*/ GMObjectIdentifiers();
                            }
                        }

                        namespace EdEC
                        {
                            class EdECObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_edwards_curve_algs;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_X25519;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_X448;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_Ed25519;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_Ed448;

                                static /*0x3ea2378*/ EdECObjectIdentifiers();
                            }
                        }

                        namespace Eac
                        {
                            class EacObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier bsi_de;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK_DH;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_PK_ECDH;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_DH;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_DH_3DES_CBC_CBC;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_ECDH;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_CA_ECDH_3DES_CBC_CBC;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_v1_5_SHA_1;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_v1_5_SHA_256;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_PSS_SHA_1;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_RSA_PSS_SHA_256;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_1;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_224;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_256;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_384;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_TA_ECDSA_SHA_512;

                                static /*0x3ea2548*/ EacObjectIdentifiers();
                            }
                        }

                        namespace CryptoPro
                        {
                            class CryptoProObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411Hmac;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR28147Gcfb;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR28147Cbc;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ID_Gost28147_89_CryptoPro_A_ParamSet;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94WithGostR3410x94;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94WithGostR3410x2001;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3411x94CryptoProParamSet;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProA;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProB;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProC;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProD;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchA;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchB;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x94CryptoProXchC;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProA;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProB;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProC;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProXchA;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProXchB;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostElSgDH3410Default;
                                static /*0xb8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostElSgDH3410x1;
                                static /*0xc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001CryptoProESDH;
                                static /*0xc8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GostR3410x2001DH;

                                static /*0x3ea2dc4*/ CryptoProObjectIdentifiers();
                            }

                            class ECGost3410NamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3ea36c4*/ ECGost3410NamedCurves();
                                static /*0x3ea3464*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger x, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger y);
                                static /*0x3ea352c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3ea3530*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3ea35c8*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3ea3bdc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3ea3cd4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea3d40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea3c5c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Holder_gostR3410_2001_CryptoPro_A : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea4068*/ Holder_gostR3410_2001_CryptoPro_A();
                                    /*0x3ea3db8*/ Holder_gostR3410_2001_CryptoPro_A();
                                    /*0x3ea3dc0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea3f20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_B : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea4380*/ Holder_gostR3410_2001_CryptoPro_B();
                                    /*0x3ea40d0*/ Holder_gostR3410_2001_CryptoPro_B();
                                    /*0x3ea40d8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea4238*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_C : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea4698*/ Holder_gostR3410_2001_CryptoPro_C();
                                    /*0x3ea43e8*/ Holder_gostR3410_2001_CryptoPro_C();
                                    /*0x3ea43f0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea4550*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_gostR3410_2001_CryptoPro_XchB : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea49b0*/ Holder_gostR3410_2001_CryptoPro_XchB();
                                    /*0x3ea4700*/ Holder_gostR3410_2001_CryptoPro_XchB();
                                    /*0x3ea4708*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea4868*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_256_paramSetA : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea4cbc*/ Holder_id_tc26_gost_3410_12_256_paramSetA();
                                    /*0x3ea4a18*/ Holder_id_tc26_gost_3410_12_256_paramSetA();
                                    /*0x3ea4a20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea4b80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetA : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea4fd4*/ Holder_id_tc26_gost_3410_12_512_paramSetA();
                                    /*0x3ea4d24*/ Holder_id_tc26_gost_3410_12_512_paramSetA();
                                    /*0x3ea4d2c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea4e8c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetB : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea52ec*/ Holder_id_tc26_gost_3410_12_512_paramSetB();
                                    /*0x3ea503c*/ Holder_id_tc26_gost_3410_12_512_paramSetB();
                                    /*0x3ea5044*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea51a4*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }

                                class Holder_id_tc26_gost_3410_12_512_paramSetC : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea55f8*/ Holder_id_tc26_gost_3410_12_512_paramSetC();
                                    /*0x3ea5354*/ Holder_id_tc26_gost_3410_12_512_paramSetC();
                                    /*0x3ea535c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea54bc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class Gost3410NamedParameters
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProA;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProB;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters cryptoProXchA;
                                static /*0x18*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x20*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters> parameters;

                                static /*0x3ea5728*/ Gost3410NamedParameters();
                                static /*0x3ea5660*/ void DefineParameters(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters parameterSet);
                                static /*0x3ea5c80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410ParamSetParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                            }

                            class Gost3410ParamSetParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ int keySize;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger p;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger q;
                                /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerInteger a;

                                /*0x3ea5b9c*/ Gost3410ParamSetParameters(int keySize, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger p, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger q, Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger a);
                                /*0x3ea5cf8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_P();
                                /*0x3ea5d14*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_Q();
                                /*0x3ea5d30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger get_A();
                                /*0x3ea5d4c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }

                            class Gost3410PublicKeyAlgParameters : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Encodable
                            {
                                /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier publicKeyParamSet;
                                /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier digestParamSet;
                                /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier encryptionParamSet;

                                static /*0x3ea5ef8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.CryptoPro.Gost3410PublicKeyAlgParameters GetInstance(object obj);
                                /*0x3ea5f9c*/ Gost3410PublicKeyAlgParameters(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Sequence seq);
                                /*0x3ea61b0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_PublicKeyParamSet();
                                /*0x3ea61b8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_DigestParamSet();
                                /*0x3ea61c0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier get_EncryptionParamSet();
                                /*0x3ea61c8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object();
                            }
                        }

                        namespace Cryptlib
                        {
                            class CryptlibObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier cryptlib;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecc;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier curvey25519;

                                static /*0x3ea6278*/ CryptlibObjectIdentifiers();
                            }
                        }

                        namespace Bsi
                        {
                            class BsiObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier bsi_de;
                                static /*0x8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier id_ecc;
                                static /*0x10*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_signatures;
                                static /*0x18*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA1;
                                static /*0x20*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA224;
                                static /*0x28*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA256;
                                static /*0x30*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA384;
                                static /*0x38*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_SHA512;
                                static /*0x40*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecdsa_plain_RIPEMD160;
                                static /*0x48*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier algorithm;
                                static /*0x50*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg;
                                static /*0x58*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf;
                                static /*0x60*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA1;
                                static /*0x68*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA224;
                                static /*0x70*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA256;
                                static /*0x78*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA384;
                                static /*0x80*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_SHA512;
                                static /*0x88*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_X963kdf_RIPEMD160;
                                static /*0x90*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF;
                                static /*0x98*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_3DES;
                                static /*0xa0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES128;
                                static /*0xa8*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES192;
                                static /*0xb0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier ecka_eg_SessionKDF_AES256;

                                static /*0x3ea63b0*/ BsiObjectIdentifiers();
                            }
                        }

                        namespace Anssi
                        {
                            class AnssiNamedCurves
                            {
                                static /*0x0*/ System.Collections.Generic.Dictionary<string, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier> objIds;
                                static /*0x8*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder> curves;
                                static /*0x10*/ System.Collections.Generic.Dictionary<Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier, string> names;

                                static /*0x3ea6c64*/ AnssiNamedCurves();
                                static /*0x3ea69dc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECPoint ConfigureBasepoint(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve, string encoding);
                                static /*0x3ea6acc*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve ConfigureCurve(Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve curve);
                                static /*0x3ea6ad0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.BigInteger FromHex(string hex);
                                static /*0x3ea6b68*/ void DefineCurve(string name, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid, Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder holder);
                                static /*0x3ea6e9c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByName(string name);
                                static /*0x3ea6f94*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters GetByOid(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea7000*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder GetByOidLazy(Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier oid);
                                static /*0x3ea6f1c*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier GetOid(string name);

                                class Frp256v1Holder : Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
                                {
                                    static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParametersHolder Instance;

                                    static /*0x3ea72ec*/ Frp256v1Holder();
                                    /*0x3ea7078*/ Frp256v1Holder();
                                    /*0x3ea7080*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Math.EC.ECCurve CreateCurve();
                                    /*0x3ea71e0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters();
                                }
                            }

                            class AnssiObjectIdentifiers
                            {
                                static /*0x0*/ Best.HTTP.SecureProtocol.Org.BouncyCastle.Asn1.DerObjectIdentifier FRP256v1;

                                static /*0x3ea7354*/ AnssiObjectIdentifiers();
                            }
                        }
                    }
                }
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 02D050046D7A21C15C1A6D6755439B5EDAD147FABD9152C932359BA3A4E82039;
    static /*0x14*/ <PrivateImplementationDetails> 064CACC4978353DFD6979BF0975E06366B0F3E9C5631CFFF32EC2184BCF492E5;
    static /*0xb4*/ <PrivateImplementationDetails> 07FA6E88C946B2528C09C16C2FB8E9CDA49AFFAFC601774C437FD9F2DF3ECE01;
    static /*0xec*/ <PrivateImplementationDetails> 0828E49183AB306042032EA09C5BD83C67BC8CD26D7C08C504962517913861E2;
    static /*0xfc*/ <PrivateImplementationDetails> 0A29D64AE97E7FBAAE0678A4F4F9364668E9827F23F305D51DF55D902CF19C4D;
    static /*0x102*/ <PrivateImplementationDetails> 0A4E21484641E9782ED1A1B3410F9F2DDC54F0F6D8807BF52C299807D9C4DF5C;
    static /*0x14a*/ <PrivateImplementationDetails> 0AEC099C87E7062A57D1C79734EDDD28A07A1684746EE8640132BB252E6BF5A1;
    static /*0x182*/ <PrivateImplementationDetails> 0C9B53D0417CF5539EA98A771F400E930B4B4F55363A296A9E5A5F941AB71C86;
    static /*0x582*/ <PrivateImplementationDetails> 0CF9F5E38BA692F10436AAC17AC6DCB62396F9AFC9CA013B3D640C1C95E31A39;
    static /*0x682*/ <PrivateImplementationDetails> 10D88DF8B06E47788DBE42F876B642A928A3AD8EEFFE352C59F031CCFFECD49D;
    static /*0x702*/ <PrivateImplementationDetails> 111B15B20E0428A22EEAA1E54B0D3B008A7A3E79C8F7F4E783710F569E9CEF15;
    static /*0x715*/ <PrivateImplementationDetails> 120918433B634757ADE589703127976B7C5C2009E8DB37632123F45FA2B87F2E;
    static /*0x755*/ <PrivateImplementationDetails> 125CF2084D7EEC18DC9795BE4BAA221655C0EABAB89E90A74FB0370378A60293;
    static /*0x9d5*/ <PrivateImplementationDetails> 12F486CDF1F8927BF7289003288EFE6D3B6C674279639905EEEE24D0B6EA9688;
    static /*0x9e1*/ <PrivateImplementationDetails> 1313B2EF301CE83F294FFD8C012777CAA44B3F5F35B6CC5232786F43AEE29084;
    static /*0x9ed*/ <PrivateImplementationDetails> 13F3BEDA950D7627802C21F7681A2553BBC40FDD07FCA3F52FAB662EE65B6F90;
    static /*0x11ed*/ <PrivateImplementationDetails> 141785EC78A7C41133C5B71ACBF4AA8735D3C599E0EA82B1AFA2C71A46FAD265;
    static /*0x11f9*/ <PrivateImplementationDetails> 14A5D850C255623F9472E3C650ABCE0C78D32F0276B315B3A276A0462D97A1AC;
    static /*0x12f9*/ <PrivateImplementationDetails> 16599A4F9A12ECCBFC361B547840304B9E48CBC431F387243C6859C475427D16;
    static /*0x1331*/ <PrivateImplementationDetails> 1674D0631A2E37B60EC748BC3899FEE1550C108AF30B85CE96A70C5CA4682D03;
    static /*0x1431*/ <PrivateImplementationDetails> 1B993D34192A33EB10CEE61C1093A6FE7D3D4B41F751F550CF8515DC4A215207;
    static /*0x1831*/ <PrivateImplementationDetails> 1C200EEC7E0EAFD19F23190A1ED9B95D60EDE114EDE39BD917D1565839CB48DC;
    static /*0x183d*/ <PrivateImplementationDetails> 1C3EF802E30F355C14A57C8AFAF6BFC22F3E40631D30059D87C30496D784EC9B;
    static /*0x1849*/ <PrivateImplementationDetails> 20EC21674E2CB9D3BA7B2F74AA5874381BAD58B7EDF526BDE000F175D1C5E5F1;
    static /*0x1859*/ <PrivateImplementationDetails> 2338F1330733829B7EA276F350452E34DC02E35AEA142145F1294F417A412FE5;
    static /*0x18d9*/ <PrivateImplementationDetails> 241460699808ED5F8D48C6B09EED448CDAE597EBF52B010901CD6F75A767B047;
    static /*0x18e5*/ <PrivateImplementationDetails> 24CB9F17C8326D8BB8EC908716519DF7F265AE825F0DD13BB04E03A90B07D90E;
    static /*0x18f5*/ <PrivateImplementationDetails> 252A0A8312BC1F5202CB599BCF172BEFA6F2A40195E72E2410AF5D81AC8B69D5;
    static /*0x19f5*/ <PrivateImplementationDetails> 265DD563A3E754D1DA09E056E784DF1550AD6EFA252EDC9A8B6F2F537C4D98A9;
    static /*0x1a1d*/ <PrivateImplementationDetails> 2A1FE1596DB0F5D1893C1AF50592965E1C09B1EE1E35A8A87C181A9EB2F391F5;
    static /*0x1e1d*/ <PrivateImplementationDetails> 2B371DA34C2A942BAF37EBEF498C2EE84813B4AB0266066695C4152B6E3FF082;
    static /*0x261d*/ <PrivateImplementationDetails> 2C6817528AB91D87A379BAA924F0BB642ED5C1AE839AEA5BBAA51F1E950796C0;
    static /*0x2623*/ <PrivateImplementationDetails> 2DE8C8D0A909D9D152B7752E0C1650FB43AFEBF9F20DF52091B69C394BD9F0FB;
    static /*0x2633*/ <PrivateImplementationDetails> 2DEB754CF447D0DE35ACB7F4311F9AAB1D4CFC0638E101CCAA8A0A4948AB3600;
    static /*0x2673*/ <PrivateImplementationDetails> 2EE1A8E6F4E2FE0BB69872A9C314399B1B0FDEE75772244F204ABF4D6DEC2F97;
    static /*0x26b7*/ <PrivateImplementationDetails> 2EF83B43314F8CD03190EEE30ECCF048DA37791237F27C62A579F23EACE9FD70;
    static /*0x26d7*/ <PrivateImplementationDetails> 301841C47353B7791BE25BC1F60F93D0EB2090AB5714FA5CA3939E8DFF75D218;
    static /*0x2717*/ <PrivateImplementationDetails> 3106DB6422088B231F12C749BC9CC57B08BBDE65695641C166393B42EFF14871;
    static /*0x2797*/ <PrivateImplementationDetails> 312F5C5395AE18520F30256771C66AE46BAFF85D08FBD0CAC1542927216E8489;
    static /*0x27df*/ <PrivateImplementationDetails> 343E404502DABEA303159A8C37BB2A4405B20A9B230D1C3BA9D496F05879019E;
    static /*0x280f*/ <PrivateImplementationDetails> 356608BFA95B39A5AA624D4852D37A19FCFB1302C897E1A4B7EA5EFD1A20120E;
    static /*0x281b*/ <PrivateImplementationDetails> 36003BEAAFC125A5D50EBAE8C98A6971BE6134DD89E286DD699E012687422A22;
    static /*0x2827*/ <PrivateImplementationDetails> 360E7DADB4427717AF4CB4E82F530229193E21B1BFB8DBEDBC46F77FF251CA15;
    static /*0x2927*/ <PrivateImplementationDetails> 36B8FDA0BFB1D93A07326EE7CAC8EB99FF1AF237D234FFA3210F64D3EB774C38;
    static /*0x2da7*/ <PrivateImplementationDetails> 3936FEF22F74028ACFB35A545386FE1C4F4A2C8CE55E88B5DF4FF605D474D8B4;
    static /*0x2db3*/ <PrivateImplementationDetails> 394D174022AB9D27D329C8DE3DADB69831311870F91A3896EFFB406411F7472C;
    static /*0x2dcb*/ <PrivateImplementationDetails> 3AF2ACD8D2D27336879BC958CFB6B4271FA89EC7C3EC62B7AD1E0E20B7AF303D;
    static /*0x2df3*/ <PrivateImplementationDetails> 3B520286F14349D61645FDE2088337584857AF213F1E9694D9DA4F5C489E6A0E;
    static /*0x2e0f*/ <PrivateImplementationDetails> 3B721FB05904288533A0C3F44162AA4631530BCFEBD22C3E57DBC4994E38F83D;
    static /*0x2e4f*/ <PrivateImplementationDetails> 3CA024F96B6FA0D283063E7C2B60A83C2B07F26AE1788CDFAEEB231C7725ED92;
    static /*0x364f*/ <PrivateImplementationDetails> 3E4FB5FE52BF269D6EE955711016291D6D327A4AAC39B2464C53C6BD0D73242A;
    static /*0x384f*/ <PrivateImplementationDetails> 3F580014EE7F27F024FC40AE120394FAC1A8E4CD1B40FD0F0089E89856152138;
    static /*0x385f*/ <PrivateImplementationDetails> 405634CB2F08D8E4A65CF85762D7BE4356E6DE1C0C941DA950F3034F3F8C6ED0;
    static /*0x388b*/ <PrivateImplementationDetails> 40866F3E76BC07D89281D2593C42AD252FB2D84E0A91FA3C78CA3C1FCC17643D;
    static /*0x398b*/ <PrivateImplementationDetails> 42E57F5A26F7D53A24B69FF9F56FA7550A23B8BAB2F5993357E4C53EA06141E9;
    static /*0x3a8b*/ <PrivateImplementationDetails> 439231575950B2ADCDE8DC0E470192ADA8DDC05EB55836596636563B6403A6B5;
    static /*0x3b0b*/ <PrivateImplementationDetails> 43B9A42341477A51FB3329FA943298FB43910D3EDCAB69BFB04D0E68D84C0247;
    static /*0x3b17*/ <PrivateImplementationDetails> 43C8B8D4786B6331EFC85B21E235E3E39940C427680D2C6B73ABF19738EF5186;
    static /*0x3b2f*/ <PrivateImplementationDetails> 4654FB5A717A0EB7C9078754B15F325C2F156519CFF821AAA495495741FF153A;
    static /*0x3b47*/ <PrivateImplementationDetails> 490FE1E40F08589851422F9DAF5012280352D005653B5D2CE872268A1A743ACF;
    static /*0x3b87*/ <PrivateImplementationDetails> 4993FAA5B9060FAAFC80E9F6CE26AF291965C0B1E8F5BBDC87C6CE9AEF6FFA24;
    static /*0x3b93*/ <PrivateImplementationDetails> 49D826830B5D920448F74BBBEDB361F17C9DD461E0DC3DED114E6E13E0173981;
    static /*0x3b9f*/ <PrivateImplementationDetails> 49FC72E2BC139CDC89193D013C3CBAD8CB75E78CA254B8466A03D26581D08BE4;
    static /*0x3bab*/ <PrivateImplementationDetails> 4A46F89E77BB78FA4C62BBA3B2F1EA2D55099E9ACCBC2AF76E05A4A07536FD67;
    static /*0x3bb1*/ <PrivateImplementationDetails> 4ADFA71AB9AF20C1C372C92FF8D26609A11DA05E167BBA62C0ABFD18F4C1EAF8;
    static /*0x3bd1*/ <PrivateImplementationDetails> 4D30B965ABF4D17A678F232D7C2491E37B61B203A6E807BB9E09C4BA2614F72D;
    static /*0x3be9*/ <PrivateImplementationDetails> 4D487DD66D80886D292C3C7B64CC41FEBA1E313A26A9D05333B42E895741FF81;
    static /*0x3ce9*/ <PrivateImplementationDetails> 4D7CAD3DEBDBD349390304F3A59AD3F66B4A1FB02F88749C4E393FF3A1EDD411;
    static /*0x3cf5*/ <PrivateImplementationDetails> 4DDDF66BF035F6ECA9C5F21404F3E8DC72D452D7CC13051DAA425BC248F0F060;
    static /*0x3d15*/ <PrivateImplementationDetails> 4FDCD793D71BE141D8E85C48B61B68F00848ACEF69905D47D935786C44D07D92;
    static /*0x3d21*/ <PrivateImplementationDetails> 513BA924C2DC996CAF3DC690D42BEB815316271C0CDAC0812BC0F2C2ED45DEA4;
    static /*0x3d35*/ <PrivateImplementationDetails> 5218271C2AB140CF1F8F18D070924F6EA8F08F5FB59C9E4F05AF36C0740D172A;
    static /*0x3d41*/ <PrivateImplementationDetails> 542A4AD813E0CA853A400A4DC81182DB6803BEC6EA63ED0D54E0E90660DFDC2B;
    static /*0x4541*/ <PrivateImplementationDetails> 55D0BF716B334D123E0088CFB3F8E2FEA17AF5025BB527F95EEB09BA978EA329;
    static /*0x4641*/ <PrivateImplementationDetails> 55D90ED526CE6FF4309EE00834C4060B1A37CB6D5E65BAA01366C72FB2A68CB4;
    static /*0x464d*/ <PrivateImplementationDetails> 58693A8E9871A51CE017A5CCB2219B320C7893E49E1761EF867DEB94E0466F4D;
    static /*0x474d*/ <PrivateImplementationDetails> 586CB2936F35105D4A71FF1186E81528F1980A2E5BB1E2719E0D86809CB1080A;
    static /*0x4f4d*/ <PrivateImplementationDetails> 5961BF1FCF83803CE7775E15E9DB8D21AF741539B85CCFDD643F9E22CC7820D6;
    static /*0x4fc5*/ <PrivateImplementationDetails> 5A33FCFEC23C49D91BCF58CE2472DC9F3662CD086BD29FC44AF2E14567238A30;
    static /*0x4fe5*/ <PrivateImplementationDetails> 5BBB9265FCB4E834C68440328645B1A187F68D3275881FC46B21564B11326DA5;
    static /*0x500d*/ <PrivateImplementationDetails> 5D34088B4ABB1F3FE88DCF84DD5C145EFD5EA01DF1B05BB8FEAD12305B0979B7;
    static /*0x518d*/ <PrivateImplementationDetails> 5D6878AD6E68B2CCB04A7CD7942BE07C15F947CCA8824203021DD465D90712AD;
    static /*0x5209*/ <PrivateImplementationDetails> 5DF5DA3512C124C2BB3C3676FFEDA4E6CC5E902C2A6027D37EB4B5AB64ED4382;
    static /*0x5229*/ <PrivateImplementationDetails> 5F2BD6104C620DE24A78538B659D1218F81A8DC50ED6645B5A040194E0CDC663;
    static /*0x5245*/ <PrivateImplementationDetails> 61358F81002F15B87F2746D4CD7FE28FD2CB45B8F0840B807B18C5A23F791CB1;
    static /*0x52c1*/ <PrivateImplementationDetails> 6164463B7C304A53288FDCF4DD2136E0E9A441D9930215FB691E3D2F692C3993;
    static /*0x52f1*/ <PrivateImplementationDetails> 624B1BC8BE6B6F8CF39572731AD0E5BDF2AAB137D0AB4A0F473B3D00666D766B;
    static /*0x56f1*/ <PrivateImplementationDetails> 663A2D6435FFB6C16D9382D8E22490E109514E59C03574E825F6B491AD8C8AAC;
    static /*0x5731*/ <PrivateImplementationDetails> 6708B572BDBE5D5E79701DBB9744AF74B50FED7608218F2D7BF1B5D87E5A53ED;
    static /*0x5761*/ <PrivateImplementationDetails> 684F74091FEFCDCDE9B282E317592631CA48B75F46340A11B95A474700E656D4;
    static /*0x576d*/ <PrivateImplementationDetails> 6965AC9D48CA477E9A17658D33A217051648138AD7024514DE014D8001B533C3;
    static /*0x578d*/ <PrivateImplementationDetails> 6A5953C1A0D67EA77DC8A5D34D0055B3D6A7A3C4CA3F6FE599471C40B9B017FC;
    static /*0x57b5*/ <PrivateImplementationDetails> 6A5EAF956411330E0B28CAD097D9698CBF4098D268AD1C0E04FE294F0607E53D;
    static /*0x57f5*/ <PrivateImplementationDetails> 6C99A25F0D00AE5BC45EE7F62CFC963F5DFC8FE4F7CE82ACEB0B5A1CDB51E3AB;
    static /*0x580d*/ <PrivateImplementationDetails> 6CB004567F6DA8572C921962EDECA8ABB063258E4B378E85E52017698A655056;
    static /*0x5819*/ <PrivateImplementationDetails> 6D4410134564FFF8B73800035CA093523750DF325139D004701C67D97488B8D5;
    static /*0x5859*/ <PrivateImplementationDetails> 6F055E07140AF36F1C17E348B39AB7ACB0647B788E869F4236E285C89C2C89EF;
    static /*0x5875*/ <PrivateImplementationDetails> 7017794F4FA285E1AA4C6FF9994A3DC0EDC472CB13D08BCA7B5CC287C51E0E3E;
    static /*0x5881*/ <PrivateImplementationDetails> 715F5EB09E6B0F8E87AD50BDAB729CF129E723B95990CE21DF233461DC29304E;
    static /*0x5981*/ <PrivateImplementationDetails> 74EF7306E7452D6859B6463CE496B8DF30925F69E1B2969E1F3F34BBC9C6AF04;
    static /*0x5a81*/ <PrivateImplementationDetails> 76387D5ADFE12720EE7A21E3C30296DE8356BE159BD422D9900C8146F914CADE;
    static /*0x5a8d*/ <PrivateImplementationDetails> 7650DB5F7D0AD39E75A5BB512A98F9763E302328E120F06230159AC1AD1C6B5D;
    static /*0x5a99*/ <PrivateImplementationDetails> 7854BA783A61F0B4D74198AF22A2D285EF70C526BDE4BE78FEDF180436FB621D;
    static /*0x5aa5*/ <PrivateImplementationDetails> 78A70FA0E21C85F13BDFA3D7B70E095EC5B61E51F34D2C1D531142B0634B30E5;
    static /*0x5ab1*/ <PrivateImplementationDetails> 79478AF14CB42EC0951669D5D1D864E43C211CBA631D8FFE7F6CD79FF60756C6;
    static /*0x5af5*/ <PrivateImplementationDetails> 7A36979350F6A229EB7206BEE580F51563EE52B71CD2132680B0AC33B3C31E27;
    static /*0x5b01*/ <PrivateImplementationDetails> 7BDD3F08BE488F1D6DCBF05D01C69BA80DF49A9E9E415F0205D575B4B5F32A34;
    static /*0x5b11*/ <PrivateImplementationDetails> 7C8975E1E60A5C8337F28EDF8C33C3B180360B7279644A9BC1AF3C51E6220BF5;
    static /*0x5b51*/ <PrivateImplementationDetails> 7C97C06F982D2F598F71BCF85A27244685EC039BC414EB391EC3EC449A619F37;
    static /*0x5b6f*/ <PrivateImplementationDetails> 7DDF88204E7E265240211841F0AB290A5E77EE4F9223EB2E39F9B89C30C41B9D;
    static /*0x5be3*/ <PrivateImplementationDetails> 7F034CF9D8AC0293D0C9535AF26B5452C6E916CE62FBBF765077BD958E69B7B9;
    static /*0x5c24*/ int 7FBDBBC598B2DE18BB5191FF9D66727F552A54412C9314CA5782824A150B3CD3;
    static /*0x5c28*/ long 800BC83FA3E127EC8C14A6282B05D6F224B8A8E2B2D3DAB222E5BADAB4A31ACB;
    static /*0x5c30*/ <PrivateImplementationDetails> 8051E141AAFE935BB42C7E96A9A525BAAC26F6867F1F455120DCC6E165AF17B1;
    static /*0x5c50*/ <PrivateImplementationDetails> 81C0F0D213E5735AED08C328CC9CC2E61B3AB83C9BF016A666B4144F8BF64457;
    static /*0x5c64*/ <PrivateImplementationDetails> 83E8FA01EECEC207D12DA40AEFC466B15F6412FFE2C30DBEF0C65B9B7FF01672;
    static /*0x5c84*/ <PrivateImplementationDetails> 85332E00AFFFDBE44E7421AA4236274F9495AC6C2204C59B9ADFC872D4215E12;
    static /*0x6084*/ <PrivateImplementationDetails> 86ECB4ABD964707BAF5ABF589057FBB2ED63DB1D7F0115A7DA45921043B6A96F;
    static /*0x60b4*/ <PrivateImplementationDetails> 874805F2B76BD7887959F02FE0B2A8C07C1E1D41F41AAD4D2AA1D0AB21A1780F;
    static /*0x60c4*/ <PrivateImplementationDetails> 896FB86C1BE3DBE6C3CC4FBE122562D75A4EBC6616D3393CF1AFE12377908B95;
    static /*0x6144*/ <PrivateImplementationDetails> 8AE83CF30C3CEAC5F4B9F025200D65EFAEC851DE0098817DB69F0E547407C095;
    static /*0x7944*/ <PrivateImplementationDetails> 8CB850AC259DD215242199AD8F1B0BC74C182B564124B84C0D56BDB7A8FF7286;
    static /*0x7950*/ <PrivateImplementationDetails> 8FC498A953A183E1FE81A183AE59047435BB9B33D657C625FAB03D38BE19F92E;
    static /*0x799c*/ <PrivateImplementationDetails> 93631B0726F6FE6629DAA743EE51B49F4477ED07391B68EEEA0672A4A90018AA;
    static /*0x7a9c*/ <PrivateImplementationDetails> 9476220840D3CE82203B4A722E278773B1DA458A22F49FCB9FC45B851DF7D503;
    static /*0x7b14*/ <PrivateImplementationDetails> 960F02F165C0EF9AC4C160FC98BE9273C245853BA32663BB1B6F1588077F95F4;
    static /*0x7b20*/ <PrivateImplementationDetails> 96883F56416393F42C830BCD6033BE079690C482BC73119EBBE5DC98834BACBF;
    static /*0x7b48*/ <PrivateImplementationDetails> 97467041703B2DF5571DCACC6A702C0C6DE68CE9A9470AA240F57D69C09AF7D3;
    static /*0x7b54*/ <PrivateImplementationDetails> 97CAAC7D5BE7722352C1AB556BFE01D3F3CCA0F50B5A648195D6415006620C8F;
    static /*0x7b7c*/ <PrivateImplementationDetails> 99FD541BFD4CF8DD3C18069CA1D5F4B622333DDBA412F00D5A6B642626034EDF;
    static /*0x7c7c*/ <PrivateImplementationDetails> 9ADB15F070E9316F84A156DD2B7F2EB5E3881C621225107D0AB86E6BB18F8B59;
    static /*0x7cbc*/ <PrivateImplementationDetails> 9B29692916637801E748ABDF9CE9D3A8AED3F375C84C7346C11C2BB150BD720B;
    static /*0x7cdc*/ <PrivateImplementationDetails> 9C28EF1A620E00413BBFC7E6ED40092033A3C250583DD7FAD355D2A306A7427B;
    static /*0x80dc*/ <PrivateImplementationDetails> 9CB8BF99E695FF4E0E3E01770F3E96060FC79466F1325C60B375349C591ADF02;
    static /*0x80fc*/ <PrivateImplementationDetails> 9CCC11CED0AD12118416B3C3C73453E6480B671C0EF2F753B6900DA2060F5B44;
    static /*0x812c*/ <PrivateImplementationDetails> 9CFF23020B5A7E24467474237978D4CB52A601FBC0B3E504B9ABC64C062A499C;
    static /*0x8138*/ <PrivateImplementationDetails> 9DA5D1DADE776A467199AC96E9412AD7A5CA1E62BCDAC527079912B1185A5C63;
    static /*0x8238*/ <PrivateImplementationDetails> 9DA6DC3BEB35D0E411A5D1E407E011542CC032FD6BD76CFFEB5EF327331840FD;
    static /*0x8244*/ <PrivateImplementationDetails> 9DC840E2F2B5B0E9B3B12C6585295C61986721911DA7AE18C9B18EFF2F01ABE5;
    static /*0x8260*/ <PrivateImplementationDetails> 9DDE3528C5CCCCD4D7C730403ABE54766C6645E371ED7ACB70584C320D87F670;
    static /*0x826c*/ <PrivateImplementationDetails> 9EF35AA995725D55C515A807B1D2BE31B36269235146245330CFB2683FA9A840;
    static /*0x828c*/ <PrivateImplementationDetails> 9F9F5111F7B27A781F1F1DDDE5EBC2DD2B796BFC7365C9C28B548E564176929F;
    static /*0x829c*/ <PrivateImplementationDetails> A08110AAECF4B88CA5A7F070B68E448ED895A5DE752B84C57651DA54D9BB5814;
    static /*0x82bc*/ <PrivateImplementationDetails> A1486177999A77F2FD76EAB02D2517803BFF5B0C5A01CFB95B3F1DA7B7D6DCE8;
    static /*0x82fc*/ <PrivateImplementationDetails> A4083C0BA9FBB6424F75B75603FBC0855756A32C2F4497CE3D79702E675882A9;
    static /*0x8302*/ <PrivateImplementationDetails> A4241EDCB474331DF94C96B4F24A3A8773452488FD0458F8C0C30F7C24B89E07;
    static /*0x830e*/ <PrivateImplementationDetails> A589B8F1C215FA773BA2724EB825E8B2D1792FB955349574454E18C63537F2A6;
    static /*0x838e*/ <PrivateImplementationDetails> A5A95A17B27BD47489B7BEB4A8AA145D08C838C183CD5A77A1A5EFD96AA3AB99;
    static /*0x83ce*/ <PrivateImplementationDetails> A719D1E9DB9C1628AF05DD49B4AA5D095CF0AD06D01C396B1777588A04D9D13E;
    static /*0x83da*/ <PrivateImplementationDetails> A935391692FCA9A4CF6CE823B9DBED3DB708352BB4ACEDDA9EADCA78ADD23DB7;
    static /*0x83e8*/ int A9DD1527A5845A7B2E82F3427251AD622D570D0B8CDA4A0AF9644EB34E69B2FC;
    static /*0x83ec*/ <PrivateImplementationDetails> AB3F6EE9927AC1C89E7F3D250F8DAC9A070249930D4A758B98F4D5B9A8E202B3;
    static /*0x8424*/ <PrivateImplementationDetails> AB60EEBC1B8BF85AD5AF219745EEA4317E0C780D22675F7A33A0929A34D17DE5;
    static /*0x8824*/ <PrivateImplementationDetails> AC7FC16C704375F0F1DB433E70C6C2B90B1D797B17806DD74E7664CAD8BFA778;
    static /*0x9024*/ <PrivateImplementationDetails> AD220A499D7A196B0FE1E8BCDAA020369A8BA1C4CF21B15A3E21935ED7B09D54;
    static /*0x9030*/ <PrivateImplementationDetails> AF0312129020B258B5B582D3F8EA8A3DAB35467AE93C8C6DBE5D6681CCD7D489;
    static /*0x9050*/ <PrivateImplementationDetails> B09C22565E577648AD57A0C5D1F44C38D4C01E2BF7727269A1E20A3717CC77D0;
    static /*0x9078*/ <PrivateImplementationDetails> B17AF625BB8EA7C85766DBFB60A73BAE2A82560C68B4F03D08B576CD43E911DA;
    static /*0x9084*/ <PrivateImplementationDetails> B1FFCD775449513A059F2F3A2DF44C39E6542C6474D6BAE3DC3FA1BC256255F0;
    static /*0x9094*/ <PrivateImplementationDetails> B23D510F520CB4BA8AFA847F8A40E757C40CB6A55B237EFA1AC6D3984911B114;
    static /*0x910c*/ <PrivateImplementationDetails> B2A10F44FFEE5755DDFA6587F62D7F83F24AF24429D3ACA46E56F3F295251DEB;
    static /*0x9118*/ <PrivateImplementationDetails> B3985439AEF8A4DF51A3369D7C0211EEF12CB0E510F6630E110C6DCC10B11A8E;
    static /*0x9158*/ <PrivateImplementationDetails> B48C3FCBDCCF3473EF494DC9D3E37B24CF9202AB511EEEB8FCBB48B626340059;
    static /*0x9164*/ <PrivateImplementationDetails> B6338EE68F3FD438E03D596B6D76554714958953358DF7320F5073C3CB779758;
    static /*0x9178*/ <PrivateImplementationDetails> B67F32BB12BAA41BEAF505F53EECD4F1409EF3E782F8CD077B511553999CE297;
    static /*0x9278*/ <PrivateImplementationDetails> B68ACFAD2A3D93FE2B8963E29978E6D3FADFFF5E7FE6C13590E8888CCA7AD7DD;
    static /*0x9284*/ <PrivateImplementationDetails> B698262446F5CFFF6CD492B8DBB1298BC61F0135EEE69366BD94E81ADE1D5C5A;
    static /*0x92a8*/ <PrivateImplementationDetails> B6FF5DB8C0FA699CD97E8EDF68219F0D1D9E509B4911710791D74AD7DF2DA1AD;
    static /*0x92cc*/ <PrivateImplementationDetails> B77E3D4019880A0C0F03E4214418983FD00C0107BB2632899FE6C3230F97B82C;
    static /*0x92dc*/ <PrivateImplementationDetails> B9D4AF390AFC6A0F149B843D651CFEBC1C4EC496A0263B72207836F9C525E1C4;
    static /*0x93dc*/ <PrivateImplementationDetails> BABB01CD1E2AD140F7D2AF35515DA38E8936F0BA0298BCF0245EB5692A3F69CC;
    static /*0x9404*/ <PrivateImplementationDetails> BB288FA00D4BBE2546E0D29F7D8BC6AF483CD4275D692B451B2E39A404E33EBF;
    static /*0x9804*/ <PrivateImplementationDetails> BD01644841E6B289961C01E9D8319807BB25F791DB6A990F60D44DA36533D5AD;
    static /*0x9810*/ <PrivateImplementationDetails> BD6174A7C16E1AF07272966A9C071C8A3CF16B2726C50D672A09F60636B08901;
    static /*0x9830*/ <PrivateImplementationDetails> BD71964D35F553A9E1D0CDDCB5864E0811BE84354BEEE68A301D5DFD1F0BEAD9;
    static /*0x9848*/ <PrivateImplementationDetails> BDB6BB299E50984399E0FD8F6BA60FC85EF8CAF6AD5154D53E6DAC34E2E0B381;
    static /*0x98a8*/ <PrivateImplementationDetails> BEDA989D5939125AA1831BFE35ED2E4F0F05DD63851049C646ACE173A2D0827C;
    static /*0x98b4*/ <PrivateImplementationDetails> BF3DB37CB55FF90EEE410403506E7AFB17B3B6ED163AEC657F4E4F47532D1E85;
    static /*0x98c0*/ <PrivateImplementationDetails> C0BCAD52BB24771C2430DFC75321628F5503FDDC5A0E05E93F3DD624A60B10BD;
    static /*0x9980*/ <PrivateImplementationDetails> C133E473E5E653C5C4AEDB8BCC1C1A3A44D384FC0B6C0FCF04672B1B325EC01B;
    static /*0x99cc*/ <PrivateImplementationDetails> C199D37D9A06A0F4C75F70A8ABD3D0C2FAEB17B255174C5E67392D81CF5FF0EC;
    static /*0x9dcc*/ <PrivateImplementationDetails> C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2;
    static /*0x9ecc*/ <PrivateImplementationDetails> C4E613C844059E36B3D4EE786C4236B8E641E7D49F520B003540BB274F7E12F7;
    static /*0xa6cc*/ <PrivateImplementationDetails> C7B696E5CE2020FEC8F611D5047339850FECC787C3DBC5D36589354D8ADF98C1;
    static /*0xa6d8*/ <PrivateImplementationDetails> C854B091EA9394BFC39C4324F63BF827E324ABA5F68693B00E4DB8B247ED2023;
    static /*0xaad8*/ <PrivateImplementationDetails> CB11E26FF20D3318A5A76F5FC0E725883F81ED29DAD7E32947BA8779AA3DE37F;
    static /*0xab38*/ <PrivateImplementationDetails> CC07D4A4B4FC6D98A85528D499B36F8489D6438071F4AADA11701D134678AFB1;
    static /*0xab58*/ <PrivateImplementationDetails> CC9BD9D64572985ECFB6E2A723B6DD347BB34F5AFECDBFB98444028D2DF4844D;
    static /*0xab64*/ <PrivateImplementationDetails> CCD83CF06E3CE2D4A938C42BAEA101B30335EAF483F59E5EDCB41DF7C4807E1B;
    static /*0xb364*/ <PrivateImplementationDetails> CF64D219C0BA56CECE4E41E0C8BF3AF538F4510FA9A2B00F38DA09E548270E5C;
    static /*0xb3a8*/ <PrivateImplementationDetails> D15388770BF0AB6F544906F0A1A3375BE05BB7FEB2B215CED8A8E41C42972549;
    static /*0xb3c8*/ <PrivateImplementationDetails> D1FAE5443A715D6F96387473C649F557670B8A92E175272491DFC646754F4A9D;
    static /*0xb3d4*/ <PrivateImplementationDetails> D38868B99B6C1AB9F2E65E75D07BA90CAF6DA7F4D74F9142A44413647473B362;
    static /*0xbbd4*/ <PrivateImplementationDetails> D3ADE9315DD51AE00C4C2D80ED119F3D1B1743E64ADC7FDDDE505286274C877D;
    static /*0xbbe0*/ <PrivateImplementationDetails> D6380FB2FF2DD88C9290D88B81E78BCA13AAAB4BE827B103062AFBB1085B0793;
    static /*0xbc08*/ <PrivateImplementationDetails> D916EBA7A5A5D84BB85D26EE65A08CC18219FACEB615519209ABB469C0B35D32;
    static /*0xbc14*/ <PrivateImplementationDetails> D9388FECE7A168D1EFFA85FA9C8DA1AEED48DDCE2E3799E07F41A9B60E389722;
    static /*0xbc4c*/ <PrivateImplementationDetails> DB1CCE19AFD5123D31DCDAC6656A6DB5AF929CA39192511B8C042DD0513E7497;
    static /*0xbc58*/ <PrivateImplementationDetails> DC196B5ACC67550E50DDC963D9192AEB816537E6A74CFB7DFE3A0453E5F4FB82;
    static /*0xbc98*/ <PrivateImplementationDetails> DC94C6E04C48743338670B79BCDA997FEEBD39A7A2DBACD46FC5A27D37AD9F71;
    static /*0xbca4*/ <PrivateImplementationDetails> DD2B2ACED61DA9A12AEE4F581C0D33D6D76A9722CDC6355B23FB5DF6B2032B18;
    static /*0xbce4*/ <PrivateImplementationDetails> DDA4EDB734C11C20B2D8A7BE67E2BB03E2F67B7928B0DAEB15EBF2EDD9A5150B;
    static /*0xbcf0*/ <PrivateImplementationDetails> DE56C9263420A7B28A6286EB62AFBE2C1D5164698C518792FD8CEAAF2CB2CD03;
    static /*0xbd30*/ <PrivateImplementationDetails> DE65050FB26A30C376E77EC7E5BE136721540CCE3760EAA1E14854746CADF7E8;
    static /*0xbdb0*/ <PrivateImplementationDetails> DE9FD94010C5C932FEB066B288CE65EBEB81EDE0E87B31B900BF855BFA2A2B5D;
    static /*0xbdbc*/ <PrivateImplementationDetails> DF93C334B40CA305A5AC46FA2BA7DB2C63404A699767F59982006C623702D568;
    static /*0xbebc*/ <PrivateImplementationDetails> E09120C0E7B92A532558D22D44D52452DFE460D6205D1009963B69AABD0F8185;
    static /*0xbec8*/ <PrivateImplementationDetails> E27F6E9719BC23F7138A27009F35243C6F94F6530A37FC26DE498AB64784DDDA;
    static /*0xbf08*/ <PrivateImplementationDetails> E3668879E09A70694ED6FEE919E303D7EA1266D783955D4DEEDC99CCC5AA6A8D;
    static /*0xbf14*/ <PrivateImplementationDetails> E3B4E767F318263A8E7A64E1D61F6D3368A3B59AF34CBB94E657E7FCC58F5BA5;
    static /*0xbf54*/ <PrivateImplementationDetails> E3DB1BCE79976D586D8B218DCAC26CAD32EA98C00E0A2CD37172FCAF14157178;
    static /*0xbf68*/ <PrivateImplementationDetails> E45C3F86EC68FBD407D74FAEC9A50DFBAA5589A6FB63CCC5F7AA901D2ACA48B6;
    static /*0xc768*/ <PrivateImplementationDetails> E5325952F9FF2214CCE24E320F2BCD6A71C6EB4127F6069352CE065883AE80D0;
    static /*0xcf68*/ <PrivateImplementationDetails> E75B7154F674F25D54E89CB7D91F35CC111C8A67EE585938E07D12CB4761637F;
    static /*0xd068*/ <PrivateImplementationDetails> E7C6C4296C6C2B00D1062AA69054CAB58A57C3ACCE5ECFA4084E7E94CF805F87;
    static /*0xd084*/ <PrivateImplementationDetails> E87A3B2C4C5D7247B7E149126C3503D3AE2878A02155EA6153E057FE35D9656C;
    static /*0xd090*/ <PrivateImplementationDetails> E8D46701532BBEB9F3FF8A63C0D74D8C417C782DEE2C085A6D940A8B5B38DA18;
    static /*0xd490*/ <PrivateImplementationDetails> ECA151F23D399F9FE976255B143D0691D0BE043E033B0E2814C0A547336D6545;
    static /*0xd4b8*/ <PrivateImplementationDetails> EF7F3D1F9F5FC7985E4AE3D48BF986867BA544C1D2FEA6A7745FEA4A2FCAB381;
    static /*0xd4c8*/ <PrivateImplementationDetails> F2CD85BDEF1E84E95EA92E2B686CEEC9FC518118A4342FAB46BECECE253D71F4;
    static /*0xd4d4*/ <PrivateImplementationDetails> F509AE84659919EA56BFF8D829ED41E971314D3D46ED9B0F8F5670D72EB1688B;
    static /*0xd514*/ <PrivateImplementationDetails> F8D7861760C88CC514F66095AF0AED47ECBA063ADB65F47125ED07BCC2CF9842;
    static /*0xd588*/ <PrivateImplementationDetails> F8E6964ADFFC257265537256D21E93496A17B9271DC5D64F40869EEEAAFF6FBB;
    static /*0xd648*/ <PrivateImplementationDetails> F915BC5619C5EB2C4D315B5409BC531F55FA3E3A6167F57B7A4F5F7F9C5F022B;
    static /*0xd748*/ <PrivateImplementationDetails> F93A6E9A709B14FD05706C119D157EEE96F24DE3FDFA34F6D0AFF9537DE8ACC0;
    static /*0xd788*/ <PrivateImplementationDetails> FA624E5847BD2E5A00CCA1B3515D315FA5C3450C3E832077935CEBA18E9F5571;
    static /*0xd794*/ <PrivateImplementationDetails> FA9320F15F87607CD9E1033E6DD907B11EEDF491D7EBBFD29EC8D07E12A822CD;
    static /*0xd894*/ <PrivateImplementationDetails> FB7A6532989D730F69E4757D690D25A43E71041FCFF7355747E274F956BB03E9;
    static /*0xe094*/ <PrivateImplementationDetails> FC216F5C5AE2947D800794ECD5F752EE8381073C2E5D0D095FDA040F541702F3;
    static /*0xe10c*/ <PrivateImplementationDetails> FD85B0A9251A04B1D271AF14FD041B4606FA95DDB116F92CB14470653A62AD19;
    static /*0xe11c*/ <PrivateImplementationDetails> FF4D5896EDB9E12991ECB7FA7807EEB0F7ACD30F57ECB63DD9943F5245752A0F;
    static /*0xe19c*/ <PrivateImplementationDetails> FFC55B79B9BE7817954A4672A75C8603D1D1FE85A61786D63BD3B0AA239FFA58;

    static /*0x3ea73f0*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=19
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=28
    {
    }

    struct __StaticArrayInitTypeSize=30
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=68
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=96
    {
    }

    struct __StaticArrayInitTypeSize=116
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=124
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=160
    {
    }

    struct __StaticArrayInitTypeSize=192
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=384
    {
    }

    struct __StaticArrayInitTypeSize=512
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1152
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=6144
    {
    }
}

class $BurstDirectCallInitializer
{
    static /*0x3ea746c*/ void Initialize();
}

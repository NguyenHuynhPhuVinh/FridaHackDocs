class <Module>
{
}

class Interop
{
    static /*0x7001a64*/ System.Exception GetExceptionForIoErrno(Interop.ErrorInfo errorInfo, string path, bool isDirectory);
    static /*0x7001fc0*/ System.Exception GetIOException(Interop.ErrorInfo errorInfo);
    static /*0x7002114*/ void GetRandomBytes(byte* buffer, int length);

    enum Error
    {
        SUCCESS = 0,
        E2BIG = 65537,
        EACCES = 65538,
        EADDRINUSE = 65539,
        EADDRNOTAVAIL = 65540,
        EAFNOSUPPORT = 65541,
        EAGAIN = 65542,
        EALREADY = 65543,
        EBADF = 65544,
        EBADMSG = 65545,
        EBUSY = 65546,
        ECANCELED = 65547,
        ECHILD = 65548,
        ECONNABORTED = 65549,
        ECONNREFUSED = 65550,
        ECONNRESET = 65551,
        EDEADLK = 65552,
        EDESTADDRREQ = 65553,
        EDOM = 65554,
        EDQUOT = 65555,
        EEXIST = 65556,
        EFAULT = 65557,
        EFBIG = 65558,
        EHOSTUNREACH = 65559,
        EIDRM = 65560,
        EILSEQ = 65561,
        EINPROGRESS = 65562,
        EINTR = 65563,
        EINVAL = 65564,
        EIO = 65565,
        EISCONN = 65566,
        EISDIR = 65567,
        ELOOP = 65568,
        EMFILE = 65569,
        EMLINK = 65570,
        EMSGSIZE = 65571,
        EMULTIHOP = 65572,
        ENAMETOOLONG = 65573,
        ENETDOWN = 65574,
        ENETRESET = 65575,
        ENETUNREACH = 65576,
        ENFILE = 65577,
        ENOBUFS = 65578,
        ENODEV = 65580,
        ENOENT = 65581,
        ENOEXEC = 65582,
        ENOLCK = 65583,
        ENOLINK = 65584,
        ENOMEM = 65585,
        ENOMSG = 65586,
        ENOPROTOOPT = 65587,
        ENOSPC = 65588,
        ENOSYS = 65591,
        ENOTCONN = 65592,
        ENOTDIR = 65593,
        ENOTEMPTY = 65594,
        ENOTSOCK = 65596,
        ENOTSUP = 65597,
        ENOTTY = 65598,
        ENXIO = 65599,
        EOVERFLOW = 65600,
        EPERM = 65602,
        EPIPE = 65603,
        EPROTO = 65604,
        EPROTONOSUPPORT = 65605,
        EPROTOTYPE = 65606,
        ERANGE = 65607,
        EROFS = 65608,
        ESPIPE = 65609,
        ESRCH = 65610,
        ESTALE = 65611,
        ETIMEDOUT = 65613,
        ETXTBSY = 65614,
        EXDEV = 65615,
        ESOCKTNOSUPPORT = 65630,
        EPFNOSUPPORT = 65632,
        ESHUTDOWN = 65644,
        EHOSTDOWN = 65648,
        ENODATA = 65649,
        EOPNOTSUPP = 65597,
        EWOULDBLOCK = 65542,
    }

    struct ErrorInfo
    {
        /*0x10*/ Interop.Error _error;
        /*0x14*/ int _rawErrno;

        /*0x700217c*/ ErrorInfo(int errno);
        /*0x70021e8*/ ErrorInfo(Interop.Error error);
        /*0x70021f4*/ Interop.Error get_Error();
        /*0x7002044*/ int get_RawErrno();
        /*0x70020b0*/ string GetErrorMessage();
        /*0x70022fc*/ string ToString();
    }

    class Sys
    {
        static /*0x0*/ bool CanSetHiddenFlag;

        static /*0x7002a7c*/ Sys();
        static /*0x70023bc*/ Interop.ErrorInfo GetLastErrorInfo();
        static /*0x7002200*/ string StrError(int platformErrno);
        static /*0x70021e4*/ Interop.Error ConvertErrorPlatformToPal(int platformErrno);
        static /*0x70021fc*/ int ConvertErrorPalToPlatform(Interop.Error error);
        static /*0x7002424*/ byte* StrErrorR(int platformErrno, byte* buffer, int bufferSize);
        static /*0x7002178*/ void GetNonCryptographicallySecureRandomBytes(byte* buffer, int length);
        static /*0x7002428*/ nint OpenDir(string path);
        static /*0x700245c*/ int GetReadDirRBufferSize();
        static /*0x7002460*/ int ReadDirR(nint dir, byte* buffer, int bufferSize, ref Interop.Sys.DirectoryEntry outputEntry);
        static /*0x7002464*/ int CloseDir(nint dir);
        static /*0x7002480*/ int ReadLink(string path, byte[] buffer, int bufferSize);
        static /*0x70024cc*/ string ReadLink(string path);
        static /*0x70026e4*/ int Stat(string path, ref Interop.Sys.FileStatus output);
        static /*0x7002720*/ uint GetEGid();
        static /*0x7002724*/ uint GetEUid();
        static /*0x7002728*/ int LChflagsCanSetHiddenFlag();
        static /*0x700272c*/ int MkDir(string path, int mode);
        static /*0x7002768*/ int RmDir(string path);
        static /*0x700279c*/ int Stat(ref byte path, ref Interop.Sys.FileStatus output);
        static /*0x70027b8*/ int Stat(System.ReadOnlySpan<char> path, ref Interop.Sys.FileStatus output);
        static /*0x70028f0*/ int LStat(ref byte path, ref Interop.Sys.FileStatus output);
        static /*0x700290c*/ int LStat(System.ReadOnlySpan<char> path, ref Interop.Sys.FileStatus output);
        static /*0x7002a44*/ int Unlink(string pathname);
        static /*0x7002a78*/ int DoubleToString(double value, byte* format, byte* buffer, int bufferLength);

        enum NodeType
        {
            DT_UNKNOWN = 0,
            DT_FIFO = 1,
            DT_CHR = 2,
            DT_DIR = 4,
            DT_BLK = 6,
            DT_REG = 8,
            DT_LNK = 10,
            DT_SOCK = 12,
            DT_WHT = 14,
        }

        struct DirectoryEntry
        {
            /*0x10*/ byte* Name;
            /*0x18*/ int NameLength;
            /*0x1c*/ Interop.Sys.NodeType InodeType;

            /*0x7002ad0*/ System.ReadOnlySpan<char> GetName(System.Span<char> buffer);
        }

        struct FileStatus
        {
            /*0x10*/ Interop.Sys.FileStatusFlags Flags;
            /*0x14*/ int Mode;
            /*0x18*/ uint Uid;
            /*0x1c*/ uint Gid;
            /*0x20*/ long Size;
            /*0x28*/ long ATime;
            /*0x30*/ long ATimeNsec;
            /*0x38*/ long MTime;
            /*0x40*/ long MTimeNsec;
            /*0x48*/ long CTime;
            /*0x50*/ long CTimeNsec;
            /*0x58*/ long BirthTime;
            /*0x60*/ long BirthTimeNsec;
            /*0x68*/ long Dev;
            /*0x70*/ long Ino;
            /*0x78*/ uint UserFlags;
        }

        enum FileStatusFlags
        {
            None = 0,
            HasBirthTime = 1,
        }

        enum Permissions
        {
            Mask = 511,
            S_IRWXU = 448,
            S_IRUSR = 256,
            S_IWUSR = 128,
            S_IXUSR = 64,
            S_IRWXG = 56,
            S_IRGRP = 32,
            S_IWGRP = 16,
            S_IXGRP = 8,
            S_IRWXO = 7,
            S_IROTH = 4,
            S_IWOTH = 2,
            S_IXOTH = 1,
        }
    }
}

class InteropErrorExtensions
{
    static /*0x7002bf4*/ Interop.ErrorInfo Info(Interop.Error error);
}

class Locale
{
    static /*0x7002bfc*/ string GetText(string msg);
    static /*0x7002c00*/ string GetText(string fmt, object[] args);
}

class SR
{
    static /*0x7002c08*/ string GetString(string name, object[] args);
    static /*0x7002c78*/ string GetString(System.Globalization.CultureInfo culture, string name, object[] args);
    static /*0x7002c80*/ string GetString(string name);
    static /*0x7001f50*/ string Format(string resourceFormat, object p1);
    static /*0x7002c84*/ string Format(string resourceFormat, object p1, object p2);
    static /*0x7002cfc*/ string Format(string resourceFormat, object p1, object p2, object p3);
    static /*0x7002d84*/ string GetResourceString(string str);
}

namespace Mono
{
    enum CertificateImportFlags
    {
        None = 0,
        DisableNativeBackend = 1,
        DisableAutomaticFallback = 2,
    }

    class DependencyInjector
    {
        static /*0x0*/ object locker;
        static /*0x8*/ Mono.ISystemDependencyProvider systemDependency;

        static /*0x7003278*/ DependencyInjector();
        static /*0x7002d88*/ Mono.ISystemDependencyProvider get_SystemProvider();
        static /*0x70030d4*/ void Register(Mono.ISystemDependencyProvider provider);
        static /*0x7002f94*/ Mono.ISystemDependencyProvider ReflectionLoad();
    }

    interface ISystemCertificateProvider
    {
        /*0x380bc74*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] data, Mono.CertificateImportFlags importFlags);
        System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] data, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, Mono.CertificateImportFlags importFlags);
        /*0x380bc74*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.CertificateImportFlags importFlags);
    }

    interface ISystemDependencyProvider
    {
        /*0x380b9e8*/ Mono.ISystemCertificateProvider get_CertificateProvider();
    }

    class Runtime
    {
        static /*0x0*/ object dump;

        static /*0x70032f4*/ Runtime();
    }

    struct RuntimeClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.MonoClass* value;

        static /*0x70034c4*/ nint GetTypeFromClass(Mono.RuntimeStructs.MonoClass* klass);
        /*0x7003370*/ RuntimeClassHandle(Mono.RuntimeStructs.MonoClass* value);
        /*0x7003378*/ RuntimeClassHandle(nint ptr);
        /*0x7003398*/ Mono.RuntimeStructs.MonoClass* get_Value();
        /*0x70033a0*/ bool Equals(object obj);
        /*0x7003498*/ int GetHashCode();
        /*0x70034c8*/ System.RuntimeTypeHandle GetTypeHandle();
    }

    struct RuntimeRemoteClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.RemoteClass* value;

        /*0x70034d0*/ Mono.RuntimeClassHandle get_ProxyClass();
    }

    struct RuntimeGenericParamInfoHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GenericParamInfo* value;

        /*0x70034ec*/ RuntimeGenericParamInfoHandle(nint ptr);
        /*0x700350c*/ System.Type[] get_Constraints();
        /*0x700363c*/ System.Reflection.GenericParameterAttributes get_Attributes();
        /*0x7003510*/ System.Type[] GetConstraints();
        /*0x7003658*/ int GetConstraintsCount();
    }

    struct RuntimeEventHandle
    {
        /*0x10*/ nint value;

        /*0x7003698*/ RuntimeEventHandle(nint v);
        /*0x70036a0*/ nint get_Value();
        /*0x70036a8*/ bool Equals(object obj);
        /*0x70037a0*/ int GetHashCode();
    }

    struct RuntimePropertyHandle
    {
        /*0x10*/ nint value;

        /*0x70037a8*/ RuntimePropertyHandle(nint v);
        /*0x70037b0*/ nint get_Value();
        /*0x70037b8*/ bool Equals(object obj);
        /*0x70038b0*/ int GetHashCode();
    }

    struct RuntimeGPtrArrayHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GPtrArray* value;

        static /*0x700395c*/ void GPtrArrayFree(Mono.RuntimeStructs.GPtrArray* value);
        static /*0x7003960*/ void DestroyAndFree(ref Mono.RuntimeGPtrArrayHandle h);
        /*0x70038b8*/ RuntimeGPtrArrayHandle(nint ptr);
        /*0x70038d8*/ int get_Length();
        /*0x70038f4*/ nint get_Item(int i);
        /*0x70038f8*/ nint Lookup(int i);
    }

    class RuntimeMarshal
    {
        static /*0x700397c*/ string PtrToUtf8String(nint ptr);
        static /*0x7003a10*/ Mono.SafeStringMarshal MarshalString(string str);
        static /*0x7003a5c*/ int DecodeBlobSize(nint in_ptr, ref nint out_ptr);
        static /*0x7003ad8*/ byte[] DecodeBlobArray(nint ptr);
        static /*0x7003b90*/ int AsciHexDigitValue(int c);
        static /*0x7003bbc*/ void FreeAssemblyName(ref Mono.MonoAssemblyName name, bool freeStruct);
    }

    class RuntimeStructs
    {
        struct RemoteClass
        {
            /*0x10*/ nint default_vtable;
            /*0x18*/ nint xdomain_vtable;
            /*0x20*/ Mono.RuntimeStructs.MonoClass* proxy_class;
            /*0x28*/ nint proxy_class_name;
            /*0x30*/ uint interface_count;
        }

        struct MonoClass
        {
        }

        struct GenericParamInfo
        {
            /*0x10*/ Mono.RuntimeStructs.MonoClass* pklass;
            /*0x18*/ nint name;
            /*0x20*/ ushort flags;
            /*0x24*/ uint token;
            /*0x28*/ Mono.RuntimeStructs.MonoClass** constraints;
        }

        struct GPtrArray
        {
            /*0x10*/ nint* data;
            /*0x18*/ int len;
        }
    }

    struct MonoAssemblyName
    {
        /*0x10*/ nint name;
        /*0x18*/ nint culture;
        /*0x20*/ nint hash_value;
        /*0x28*/ nint public_key;
        /*0x30*/ Mono.MonoAssemblyName.<public_key_token> public_key_token;
        /*0x44*/ uint hash_alg;
        /*0x48*/ uint hash_len;
        /*0x4c*/ uint flags;
        /*0x50*/ ushort major;
        /*0x52*/ ushort minor;
        /*0x54*/ ushort build;
        /*0x56*/ ushort revision;
        /*0x58*/ ushort arch;

        struct <public_key_token>e__FixedBuffer
        {
            /*0x10*/ byte FixedElementField;
        }
    }

    struct ValueTuple
    {
    }

    struct ValueTuple<T1>
    {
        /*0x0*/ T1 Item1;
    }

    struct ValueTuple<T1, T2>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
    }

    struct ValueTuple<T1, T2, T3>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
    }

    struct ValueTuple<T1, T2, T3, T4>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
    }

    struct ValueTuple<T1, T2, T3, T4, T5>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
    }

    struct SafeGPtrArrayHandle : System.IDisposable
    {
        /*0x10*/ Mono.RuntimeGPtrArrayHandle handle;

        /*0x7003bc4*/ SafeGPtrArrayHandle(nint ptr);
        /*0x7003be4*/ void Dispose();
        /*0x7003c00*/ int get_Length();
        /*0x7003c1c*/ nint get_Item(int i);
    }

    struct SafeStringMarshal : System.IDisposable
    {
        /*0x10*/ string str;
        /*0x18*/ nint marshaled_string;

        static /*0x7003c20*/ nint StringToUtf8_icall(ref string str);
        static /*0x7003c24*/ nint StringToUtf8(string str);
        static /*0x7003c3c*/ void GFree(nint ptr);
        /*0x7003a40*/ SafeStringMarshal(string str);
        /*0x7003c40*/ nint get_Value();
        /*0x7003c80*/ void Dispose();
    }

    namespace Xml
    {
        class SecurityParser : Mono.Xml.SmallXmlParser, Mono.Xml.SmallXmlParser.IContentHandler
        {
            /*0x68*/ System.Security.SecurityElement root;
            /*0x70*/ System.Security.SecurityElement current;
            /*0x78*/ System.Collections.Stack stack;

            /*0x7003ca0*/ SecurityParser();
            /*0x7003e50*/ void LoadXml(string xml);
            /*0x70040cc*/ System.Security.SecurityElement ToXml();
            /*0x70040d4*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
            /*0x70040d8*/ void OnProcessingInstruction(string name, string text);
            /*0x70040dc*/ void OnIgnorableWhitespace(string s);
            /*0x70040e0*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
            /*0x7004380*/ void OnEndElement(string name);
            /*0x7004418*/ void OnChars(string ch);
            /*0x7004498*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
        }

        class SmallXmlParser
        {
            /*0x10*/ Mono.Xml.SmallXmlParser.IContentHandler handler;
            /*0x18*/ System.IO.TextReader reader;
            /*0x20*/ System.Collections.Stack elementNames;
            /*0x28*/ System.Collections.Stack xmlSpaces;
            /*0x30*/ string xmlSpace;
            /*0x38*/ System.Text.StringBuilder buffer;
            /*0x40*/ char[] nameBuffer;
            /*0x48*/ bool isWhitespace;
            /*0x50*/ Mono.Xml.SmallXmlParser.AttrListImpl attributes;
            /*0x58*/ int line;
            /*0x5c*/ int column;
            /*0x60*/ bool resetColumn;

            /*0x7003d08*/ SmallXmlParser();
            /*0x7004548*/ System.Exception Error(string msg);
            /*0x7004678*/ System.Exception UnexpectedEndError();
            /*0x7004764*/ bool IsNameChar(char c, bool start);
            /*0x7004840*/ bool IsWhitespace(int c);
            /*0x7004868*/ void SkipWhitespaces();
            /*0x700491c*/ void HandleWhitespaces();
            /*0x7004870*/ void SkipWhitespaces(bool expected);
            /*0x7004a44*/ int Peek();
            /*0x70049dc*/ int Read();
            /*0x7004a64*/ void Expect(int c);
            /*0x7004b20*/ string ReadUntil(char until, bool handleReferences);
            /*0x7004dc4*/ string ReadName();
            /*0x7003ee8*/ void Parse(System.IO.TextReader input, Mono.Xml.SmallXmlParser.IContentHandler handler);
            /*0x70057ac*/ void Cleanup();
            /*0x7004f7c*/ void ReadContent();
            /*0x7005674*/ void HandleBufferedContent();
            /*0x7005be4*/ void ReadCharacters();
            /*0x7004bfc*/ void ReadReference();
            /*0x7005c6c*/ int ReadCharacterReference();
            /*0x7005a74*/ void ReadAttribute(Mono.Xml.SmallXmlParser.AttrListImpl a);
            /*0x70058f4*/ void ReadCDATASection();
            /*0x70059ec*/ void ReadComment();

            interface IContentHandler
            {
                /*0x380d83c*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x380d83c*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
                /*0x380d93c*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x380d83c*/ void OnEndElement(string name);
                /*0x380d93c*/ void OnProcessingInstruction(string name, string text);
                /*0x380d83c*/ void OnChars(string text);
                /*0x380d83c*/ void OnIgnorableWhitespace(string text);
            }

            interface IAttrList
            {
                /*0x380b6a0*/ int get_Length();
                /*0x380ba90*/ string GetName(int i);
                /*0x380ba90*/ string GetValue(int i);
                /*0x380bb68*/ string GetValue(string name);
                /*0x380b9e8*/ string[] get_Names();
                /*0x380b9e8*/ string[] get_Values();
            }

            class AttrListImpl : Mono.Xml.SmallXmlParser.IAttrList
            {
                /*0x10*/ System.Collections.Generic.List<string> attrNames;
                /*0x18*/ System.Collections.Generic.List<string> attrValues;

                /*0x700449c*/ AttrListImpl();
                /*0x7005e48*/ int get_Length();
                /*0x7005e90*/ string GetName(int i);
                /*0x7005ee8*/ string GetValue(int i);
                /*0x7005f40*/ string GetValue(string name);
                /*0x7006000*/ string[] get_Names();
                /*0x7006050*/ string[] get_Values();
                /*0x7005858*/ void Clear();
                /*0x7005d28*/ void Add(string name, string value);
            }
        }

        class SmallXmlParserException : System.SystemException
        {
            /*0x8c*/ int line;
            /*0x90*/ int column;

            /*0x70045b8*/ SmallXmlParserException(string msg, int line, int column);
        }
    }

    namespace Interop
    {
        class MonoPInvokeCallbackAttribute : System.Attribute
        {
            /*0x70060a0*/ MonoPInvokeCallbackAttribute(System.Type t);
        }
    }

    namespace Globalization
    {
        namespace Unicode
        {
            class CodePointIndexer
            {
                /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer.TableRange[] ranges;
                /*0x18*/ int TotalCount;
                /*0x1c*/ int defaultIndex;
                /*0x20*/ int defaultCP;

                /*0x70060a8*/ CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP);
                /*0x700622c*/ int ToIndex(int cp);

                struct TableRange
                {
                    /*0x10*/ int Start;
                    /*0x14*/ int End;
                    /*0x18*/ int Count;
                    /*0x1c*/ int IndexStart;
                    /*0x20*/ int IndexEnd;

                    /*0x7006214*/ TableRange(int start, int end, int indexStart);
                }
            }

            class TailoringInfo
            {
                /*0x10*/ int LCID;
                /*0x14*/ int TailoringIndex;
                /*0x18*/ int TailoringCount;
                /*0x1c*/ bool FrenchSort;

                /*0x70062b0*/ TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort);
            }

            class Contraction
            {
                /*0x10*/ int Index;
                /*0x18*/ char[] Source;
                /*0x20*/ string Replacement;
                /*0x28*/ byte[] SortKey;

                /*0x70062f4*/ Contraction(int index, char[] source, string replacement, byte[] sortkey);
            }

            class ContractionComparer : System.Collections.Generic.IComparer<Mono.Globalization.Unicode.Contraction>
            {
                static /*0x0*/ Mono.Globalization.Unicode.ContractionComparer Instance;

                static /*0x70063f8*/ ContractionComparer();
                /*0x70063f0*/ ContractionComparer();
                /*0x700635c*/ int Compare(Mono.Globalization.Unicode.Contraction c1, Mono.Globalization.Unicode.Contraction c2);
            }

            class Level2Map
            {
                /*0x10*/ byte Source;
                /*0x11*/ byte Replace;

                /*0x7006460*/ Level2Map(byte source, byte replace);
            }

            class MSCompatUnicodeTable
            {
                static /*0x0*/ int MaxExpansionLength;
                static /*0x8*/ byte* ignorableFlags;
                static /*0x10*/ byte* categories;
                static /*0x18*/ byte* level1;
                static /*0x20*/ byte* level2;
                static /*0x28*/ byte* level3;
                static /*0x30*/ byte* cjkCHScategory;
                static /*0x38*/ byte* cjkCHTcategory;
                static /*0x40*/ byte* cjkJAcategory;
                static /*0x48*/ byte* cjkKOcategory;
                static /*0x50*/ byte* cjkCHSlv1;
                static /*0x58*/ byte* cjkCHTlv1;
                static /*0x60*/ byte* cjkJAlv1;
                static /*0x68*/ byte* cjkKOlv1;
                static /*0x70*/ byte* cjkKOlv2;
                static /*0x78*/ char[] tailoringArr;
                static /*0x80*/ Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos;
                static /*0x88*/ object forLock;
                static /*0x90*/ bool isReady;

                static /*0x70077f4*/ MSCompatUnicodeTable();
                static /*0x7006490*/ Mono.Globalization.Unicode.TailoringInfo GetTailoringInfo(int lcid);
                static /*0x7006594*/ void BuildTailoringTables(System.Globalization.CultureInfo culture, Mono.Globalization.Unicode.TailoringInfo t, ref Mono.Globalization.Unicode.Contraction[] contractions, ref Mono.Globalization.Unicode.Level2Map[] diacriticals);
                static /*0x7006d04*/ void SetCJKReferences(string name, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x7006f88*/ byte Category(int cp);
                static /*0x700702c*/ byte Level1(int cp);
                static /*0x70070d0*/ byte Level2(int cp);
                static /*0x7007174*/ byte Level3(int cp);
                static /*0x7007218*/ bool IsIgnorable(int cp, byte flag);
                static /*0x7007324*/ bool IsIgnorableNonSpacing(int cp);
                static /*0x700737c*/ int ToKanaTypeInsensitive(int i);
                static /*0x7007394*/ int ToWidthCompat(int i);
                static /*0x7007520*/ bool HasSpecialWeight(char c);
                static /*0x70075a0*/ bool IsHalfWidthKana(char c);
                static /*0x70075b4*/ bool IsHiragana(char c);
                static /*0x70075cc*/ bool IsJapaneseSmallLetter(char c);
                static /*0x70076b4*/ bool get_IsReady();
                static /*0x700770c*/ nint GetResource(string name);
                static /*0x70077c4*/ uint UInt32FromBytePtr(byte* raw, uint idx);
                static /*0x7007c30*/ void FillCJK(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x7007d94*/ void FillCJKCore(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer, ref byte* lv2Table);

                class <>c
                {
                    static /*0x0*/ Mono.Globalization.Unicode.MSCompatUnicodeTable.<> <>9;
                    static /*0x8*/ System.Comparison<Mono.Globalization.Unicode.Level2Map> <>9__17_0;

                    static /*0x70081f4*/ <>c();
                    /*0x700825c*/ <>c();
                    /*0x7008264*/ int <BuildTailoringTables>b__17_0(Mono.Globalization.Unicode.Level2Map a, Mono.Globalization.Unicode.Level2Map b);
                }
            }

            class MSCompatUnicodeTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Ignorable;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Category;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Level1;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Level2;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Level3;
                static /*0x28*/ Mono.Globalization.Unicode.CodePointIndexer CjkCHS;
                static /*0x30*/ Mono.Globalization.Unicode.CodePointIndexer Cjk;

                static /*0x7008288*/ MSCompatUnicodeTableUtil();
            }

            class NormalizationTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Prop;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Map;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Combining;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Composite;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Helper;

                static /*0x70086f8*/ NormalizationTableUtil();
                static /*0x7008a6c*/ int PropIdx(int cp);
                static /*0x7008ad4*/ int MapIdx(int cp);
            }

            class SimpleCollator : System.Globalization.ISimpleCollator
            {
                static /*0x0*/ Mono.Globalization.Unicode.SimpleCollator invariant;
                /*0x10*/ System.Globalization.TextInfo textInfo;
                /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer cjkIndexer;
                /*0x20*/ Mono.Globalization.Unicode.Contraction[] contractions;
                /*0x28*/ Mono.Globalization.Unicode.Level2Map[] level2Maps;
                /*0x30*/ byte[] unsafeFlags;
                /*0x38*/ byte* cjkCatTable;
                /*0x40*/ byte* cjkLv1Table;
                /*0x48*/ byte* cjkLv2Table;
                /*0x50*/ Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer;
                /*0x58*/ int lcid;
                /*0x5c*/ bool frenchSort;

                static /*0x700e1b8*/ SimpleCollator();
                static /*0x7008f64*/ System.Globalization.CultureInfo GetNeutralCulture(System.Globalization.CultureInfo info);
                static /*0x7009230*/ bool IsHalfKana(int cp, System.Globalization.CompareOptions opt);
                static /*0x7009910*/ byte ToDashTypeValue(Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                static /*0x7009b40*/ bool IsIgnorable(int i, System.Globalization.CompareOptions opt);
                /*0x7008b3c*/ SimpleCollator(System.Globalization.CultureInfo culture);
                /*0x7008e88*/ void SetCJKTable(System.Globalization.CultureInfo culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                /*0x7008fd4*/ byte Category(int cp);
                /*0x7009068*/ byte Level1(int cp);
                /*0x70090fc*/ byte Level2(int cp, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext);
                /*0x70092a4*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end);
                /*0x7009364*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x700948c*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end);
                /*0x700954c*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x700972c*/ int FilterOptions(int i, System.Globalization.CompareOptions opt);
                /*0x7009810*/ Mono.Globalization.Unicode.SimpleCollator.ExtenderType GetExtenderType(int i);
                /*0x7009930*/ int FilterExtender(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                /*0x7009bbc*/ bool IsSafe(int i);
                /*0x7009c18*/ System.Globalization.SortKey GetSortKey(string s, System.Globalization.CompareOptions options);
                /*0x7009c38*/ System.Globalization.SortKey GetSortKey(string s, int start, int length, System.Globalization.CompareOptions options);
                /*0x7009f1c*/ void GetSortKey(string s, int start, int end, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x700a334*/ void FillSortKeyRaw(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x700a898*/ void FillSurrogateSortKeyRaw(int i, Mono.Globalization.Unicode.SortKeyBuffer buf);
                /*0x700a9e4*/ int System.Globalization.ISimpleCollator.Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x700a9e8*/ int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x700a2b8*/ void ClearBuffer(byte* buffer, int size);
                /*0x700aa9c*/ int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, ref bool targetConsumed, ref bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700bf78*/ int CompareFlagPair(bool b1, bool b2);
                /*0x700bf94*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x700bfb4*/ bool IsPrefix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x700c064*/ bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700c0cc*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x700c0ec*/ bool IsSuffix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x700c308*/ int QuickIndexOf(string s, string target, int start, int length, ref bool testWasUnable);
                /*0x700c470*/ int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x700cb08*/ int IndexOfOrdinal(string s, string target, int start, int length);
                /*0x700cbe0*/ int IndexOfOrdinal(string s, char target, int start, int length);
                /*0x700cc50*/ int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700c660*/ int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700c180*/ int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x700d3e4*/ int LastIndexOfOrdinal(string s, string target, int start, int length);
                /*0x700d518*/ int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700ceb8*/ int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700ccec*/ bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700d794*/ bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700daf0*/ bool MatchesPrimitive(System.Globalization.CompareOptions opt, byte* source, int si, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4);
                /*0x700d5bc*/ bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x700dd18*/ bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);

                struct Context
                {
                    /*0x10*/ System.Globalization.CompareOptions Option;
                    /*0x18*/ byte* NeverMatchFlags;
                    /*0x20*/ byte* AlwaysMatchFlags;
                    /*0x28*/ byte* Buffer1;
                    /*0x30*/ byte* Buffer2;
                    /*0x38*/ int PrevCode;
                    /*0x40*/ byte* PrevSortKey;

                    /*0x700a318*/ Context(System.Globalization.CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1);
                }

                struct PreviousInfo
                {
                    /*0x10*/ int Code;
                    /*0x18*/ byte* SortKey;

                    /*0x700bf68*/ PreviousInfo(bool dummy);
                }

                struct Escape
                {
                    /*0x10*/ string Source;
                    /*0x18*/ int Index;
                    /*0x1c*/ int Start;
                    /*0x20*/ int End;
                    /*0x24*/ int Optional;
                }

                enum ExtenderType
                {
                    None = 0,
                    Simple = 1,
                    Voiced = 2,
                    Conditional = 3,
                    Buggy = 4,
                }
            }

            class SortKeyBuffer
            {
                /*0x10*/ byte[] l1b;
                /*0x18*/ byte[] l2b;
                /*0x20*/ byte[] l3b;
                /*0x28*/ byte[] l4sb;
                /*0x30*/ byte[] l4tb;
                /*0x38*/ byte[] l4kb;
                /*0x40*/ byte[] l4wb;
                /*0x48*/ byte[] l5b;
                /*0x50*/ string source;
                /*0x58*/ int l1;
                /*0x5c*/ int l2;
                /*0x60*/ int l3;
                /*0x64*/ int l4s;
                /*0x68*/ int l4t;
                /*0x6c*/ int l4k;
                /*0x70*/ int l4w;
                /*0x74*/ int l5;
                /*0x78*/ int lcid;
                /*0x7c*/ System.Globalization.CompareOptions options;
                /*0x80*/ bool processLevel2;
                /*0x81*/ bool frenchSort;
                /*0x82*/ bool frenchSorted;

                /*0x7009d00*/ SortKeyBuffer(int lcid);
                /*0x700e254*/ void Reset();
                /*0x7009d08*/ void Initialize(System.Globalization.CompareOptions options, int lcid, string s, bool frenchSort);
                /*0x700a804*/ void AppendCJKExtension(byte lv1msb, byte lv1lsb);
                /*0x700a950*/ void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth);
                /*0x700a6c0*/ void AppendNormal(byte category, byte lv1, byte lv2, byte lv3);
                /*0x700e348*/ void AppendLevel5(byte category, byte lv1);
                /*0x700e268*/ void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx);
                /*0x700a294*/ System.Globalization.SortKey GetResultAndReset();
                /*0x700e8b8*/ int GetOptimizedLength(byte[] data, int len, byte defaultValue);
                /*0x700e3e0*/ System.Globalization.SortKey GetResult();
            }
        }
    }

    namespace Security
    {
        class ASN1
        {
            /*0x10*/ byte m_nTag;
            /*0x18*/ byte[] m_aValue;
            /*0x20*/ System.Collections.ArrayList elist;

            /*0x700e918*/ ASN1(byte tag);
            /*0x700e94c*/ ASN1(byte tag, byte[] data);
            /*0x700e984*/ ASN1(byte[] data);
            /*0x700ec30*/ int get_Count();
            /*0x700ec4c*/ byte[] get_Value();
            /*0x700ecdc*/ Mono.Security.ASN1 Add(Mono.Security.ASN1 asn1);
            /*0x700ed74*/ byte[] GetBytes();
            /*0x700eb04*/ void Decode(byte[] asn1, ref int anPos, int anLength);
            /*0x700f404*/ void DecodeTLV(byte[] asn1, ref int pos, ref byte tag, ref int length, ref byte[] content);
            /*0x700f534*/ string ToString();
        }

        class BitConverterLE
        {
            static /*0x700f7bc*/ byte[] GetUIntBytes(byte* bytes);
            static /*0x700f854*/ byte[] GetULongBytes(byte* bytes);
            static /*0x700f92c*/ byte[] GetBytes(float value);
            static /*0x700f944*/ byte[] GetBytes(double value);
            static /*0x700f95c*/ void UIntFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x700f9e0*/ void ULongFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x700fa34*/ float ToSingle(byte[] value, int startIndex);
            static /*0x700fa58*/ double ToDouble(byte[] value, int startIndex);
        }

        namespace Cryptography
        {
            class KeyBuilder
            {
                static /*0x0*/ System.Security.Cryptography.RandomNumberGenerator rng;

                static /*0x700fa7c*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
                static /*0x700faf4*/ byte[] Key(int size);
                static /*0x700fb64*/ byte[] IV(int size);
            }

            class KeyPairPersistence
            {
                static /*0x0*/ bool _userPathExists;
                static /*0x8*/ string _userPath;
                static /*0x10*/ bool _machinePathExists;
                static /*0x18*/ string _machinePath;
                static /*0x20*/ object lockobj;
                /*0x10*/ System.Security.Cryptography.CspParameters _params;
                /*0x18*/ string _keyvalue;
                /*0x20*/ string _filename;
                /*0x28*/ string _container;

                static /*0x7011508*/ KeyPairPersistence();
                static /*0x7010534*/ string get_UserPath();
                static /*0x700ffe8*/ string get_MachinePath();
                static /*0x7011434*/ bool _CanSecure(char* root);
                static /*0x7011438*/ bool _ProtectUser(char* path);
                static /*0x701143c*/ bool _ProtectMachine(char* path);
                static /*0x7011440*/ bool _IsUserProtected(char* path);
                static /*0x7011444*/ bool _IsMachineProtected(char* path);
                static /*0x7011448*/ bool CanSecure(string path);
                static /*0x7011270*/ bool ProtectUser(string path);
                static /*0x70111e0*/ bool ProtectMachine(string path);
                static /*0x7011314*/ bool IsUserProtected(string path);
                static /*0x70113a4*/ bool IsMachineProtected(string path);
                /*0x700fbd4*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters);
                /*0x700fbdc*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters, string keyPair);
                /*0x700fd0c*/ string get_Filename();
                /*0x7010a80*/ string get_KeyValue();
                /*0x7010a88*/ void set_KeyValue(string value);
                /*0x7010aac*/ bool Load();
                /*0x7010d94*/ void Save();
                /*0x7011300*/ void Remove();
                /*0x7010a9c*/ bool get_CanChange();
                /*0x70114e8*/ bool get_UseDefaultKeyContainer();
                /*0x700ffc8*/ bool get_UseMachineKeyStore();
                /*0x700feb0*/ string get_ContainerName();
                /*0x700fc74*/ System.Security.Cryptography.CspParameters Copy(System.Security.Cryptography.CspParameters p);
                /*0x7010c60*/ void FromXml(string xml);
                /*0x7010fd8*/ string ToXml();
            }

            class MD2 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x701159c*/ Mono.Security.Cryptography.MD2 Create();
                /*0x701157c*/ MD2();
            }

            class MD2Managed : Mono.Security.Cryptography.MD2
            {
                static /*0x0*/ byte[] PI_SUBST;
                /*0x28*/ byte[] state;
                /*0x30*/ byte[] checksum;
                /*0x38*/ byte[] buffer;
                /*0x40*/ int count;
                /*0x48*/ byte[] x;

                static /*0x7011bec*/ MD2Managed();
                /*0x70115ec*/ MD2Managed();
                /*0x70116c0*/ byte[] Padding(int nLength);
                /*0x701175c*/ void Initialize();
                /*0x70117bc*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x7011afc*/ byte[] HashFinal();
                /*0x7011898*/ void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index);
            }

            class MD4 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x7011cac*/ Mono.Security.Cryptography.MD4 Create();
                /*0x7011c8c*/ MD4();
            }

            class MD4Managed : Mono.Security.Cryptography.MD4
            {
                /*0x28*/ uint[] state;
                /*0x30*/ byte[] buffer;
                /*0x38*/ uint[] count;
                /*0x40*/ uint[] x;
                /*0x48*/ byte[] digest;

                /*0x7011cfc*/ MD4Managed();
                /*0x7011e08*/ void Initialize();
                /*0x7011ebc*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x7012658*/ byte[] HashFinal();
                /*0x701284c*/ byte[] Padding(int nLength);
                /*0x70128c4*/ uint F(uint x, uint y, uint z);
                /*0x70128d4*/ uint G(uint x, uint y, uint z);
                /*0x70128e8*/ uint H(uint x, uint y, uint z);
                /*0x70128f4*/ uint ROL(uint x, byte n);
                /*0x7012900*/ void FF(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x7012928*/ void GG(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x7012960*/ void HH(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x7012754*/ void Encode(byte[] output, uint[] input);
                /*0x7012990*/ void Decode(uint[] output, byte[] input, int index);
                /*0x7011fe0*/ void MD4Transform(uint[] state, byte[] block, int index);
            }

            class PKCS1
            {
                static /*0x0*/ byte[] emptySHA1;
                static /*0x8*/ byte[] emptySHA256;
                static /*0x10*/ byte[] emptySHA384;
                static /*0x18*/ byte[] emptySHA512;

                static /*0x70137d0*/ PKCS1();
                static /*0x7012a58*/ bool Compare(byte[] array1, byte[] array2);
                static /*0x7012ae4*/ byte[] I2OSP(byte[] x, int size);
                static /*0x7012b70*/ byte[] OS2IP(byte[] x);
                static /*0x7012c30*/ byte[] RSAVP1(System.Security.Cryptography.RSA rsa, byte[] s);
                static /*0x7012c4c*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, byte[] signature);
                static /*0x7012ea4*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, string hashName, byte[] hashValue, byte[] signature);
                static /*0x7012ccc*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding);
                static /*0x7013470*/ byte[] Encode_v15(System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, int emLength);
                static /*0x701307c*/ System.Security.Cryptography.HashAlgorithm CreateFromName(string name);
            }

            class RSAManaged : System.Security.Cryptography.RSA
            {
                /*0x20*/ bool isCRTpossible;
                /*0x21*/ bool keyBlinding;
                /*0x22*/ bool keypairGenerated;
                /*0x23*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger d;
                /*0x30*/ Mono.Math.BigInteger p;
                /*0x38*/ Mono.Math.BigInteger q;
                /*0x40*/ Mono.Math.BigInteger dp;
                /*0x48*/ Mono.Math.BigInteger dq;
                /*0x50*/ Mono.Math.BigInteger qInv;
                /*0x58*/ Mono.Math.BigInteger n;
                /*0x60*/ Mono.Math.BigInteger e;
                /*0x68*/ Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x7013aa4*/ RSAManaged(int keySize);
                /*0x7013b8c*/ void Finalize();
                /*0x7013c2c*/ void GenerateKeyPair();
                /*0x7014520*/ int get_KeySize();
                /*0x70145bc*/ bool get_PublicOnly();
                /*0x701470c*/ byte[] EncryptValue(byte[] rgb);
                /*0x7014bc4*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x7015084*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x70155cc*/ void Dispose(bool disposing);
                /*0x7015850*/ void add_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x70158ec*/ void remove_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x7015988*/ string ToXmlString(bool includePrivateParameters);
                /*0x7014ac4*/ byte[] GetPaddedValue(Mono.Math.BigInteger value, int length);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x7016010*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x701611c*/ void Invoke(object sender, System.EventArgs e);
                }
            }

            class SymmetricTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x10*/ System.Security.Cryptography.SymmetricAlgorithm algo;
                /*0x18*/ bool encrypt;
                /*0x1c*/ int BlockSizeByte;
                /*0x20*/ byte[] temp;
                /*0x28*/ byte[] temp2;
                /*0x30*/ byte[] workBuff;
                /*0x38*/ byte[] workout;
                /*0x40*/ System.Security.Cryptography.PaddingMode padmode;
                /*0x44*/ int FeedBackByte;
                /*0x48*/ bool m_disposed;
                /*0x49*/ bool lastBlock;
                /*0x50*/ System.Security.Cryptography.RandomNumberGenerator _rng;

                /*0x7016130*/ SymmetricTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV);
                /*0x7016428*/ void Finalize();
                /*0x70164c8*/ void System.IDisposable.Dispose();
                /*0x7016534*/ void Dispose(bool disposing);
                /*0x70165b0*/ bool get_CanTransformMultipleBlocks();
                /*0x70165b8*/ int get_InputBlockSize();
                /*0x70165c0*/ int get_OutputBlockSize();
                /*0x70165c8*/ void Transform(byte[] input, byte[] output);
                /*0x380d93c*/ void ECB(byte[] input, byte[] output);
                /*0x70167d4*/ void CBC(byte[] input, byte[] output);
                /*0x7016938*/ void CFB(byte[] input, byte[] output);
                /*0x7016b00*/ void OFB(byte[] input, byte[] output);
                /*0x7016b4c*/ void CTS(byte[] input, byte[] output);
                /*0x7016b98*/ void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x7016cdc*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x7016ee4*/ bool get_KeepLastBlock();
                /*0x7016f08*/ int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x70170c0*/ void Random(byte[] buffer, int start, int length);
                /*0x701717c*/ void ThrowBadPaddingException(System.Security.Cryptography.PaddingMode padding, int length, int position);
                /*0x7017358*/ byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x70175ec*/ byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x7017884*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class DSAManaged : System.Security.Cryptography.DSA
            {
                /*0x20*/ bool keypairGenerated;
                /*0x21*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger p;
                /*0x30*/ Mono.Math.BigInteger q;
                /*0x38*/ Mono.Math.BigInteger g;
                /*0x40*/ Mono.Math.BigInteger x;
                /*0x48*/ Mono.Math.BigInteger y;
                /*0x50*/ Mono.Math.BigInteger j;
                /*0x58*/ Mono.Math.BigInteger seed;
                /*0x60*/ int counter;
                /*0x64*/ bool j_missing;
                /*0x68*/ System.Security.Cryptography.RandomNumberGenerator rng;
                /*0x70*/ Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x7017934*/ DSAManaged(int dwKeySize);
                /*0x7017a04*/ void Finalize();
                /*0x7017aa4*/ void Generate();
                /*0x7018078*/ void GenerateKeyPair();
                /*0x70182a8*/ void add(byte[] a, byte[] b, int value);
                /*0x7017af0*/ void GenerateParams(int keyLength);
                /*0x7018344*/ System.Security.Cryptography.RandomNumberGenerator get_Random();
                /*0x7018688*/ int get_KeySize();
                /*0x70186b4*/ bool get_PublicOnly();
                /*0x7018728*/ byte[] NormalizeArray(byte[] array);
                /*0x70187cc*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x7018aec*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x7018df8*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x7019284*/ void Dispose(bool disposing);
                /*0x70194c4*/ void add_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);
                /*0x7019560*/ void remove_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x70195fc*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x7019708*/ void Invoke(object sender, System.EventArgs e);
                }
            }
        }
    }

    namespace Math
    {
        class BigInteger
        {
            static /*0x0*/ uint[] smallPrimes;
            static /*0x8*/ System.Security.Cryptography.RandomNumberGenerator rng;
            /*0x10*/ uint length;
            /*0x18*/ uint[] data;

            static /*0x701bab8*/ BigInteger();
            static /*0x7013f40*/ Mono.Math.BigInteger op_Implicit(uint value);
            static /*0x70142e0*/ Mono.Math.BigInteger op_Implicit(int value);
            static /*0x7014384*/ Mono.Math.BigInteger op_Subtraction(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7014004*/ uint op_Modulus(Mono.Math.BigInteger bi, uint ui);
            static /*0x70144f4*/ Mono.Math.BigInteger op_Modulus(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7018648*/ Mono.Math.BigInteger op_Division(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x70140b8*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x701851c*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi, int i);
            static /*0x701a480*/ Mono.Math.BigInteger op_LeftShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x701a668*/ Mono.Math.BigInteger op_RightShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x701a7e4*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
            static /*0x701a890*/ Mono.Math.BigInteger GenerateRandom(int bits, System.Security.Cryptography.RandomNumberGenerator rng);
            static /*0x701816c*/ Mono.Math.BigInteger GenerateRandom(int bits);
            static /*0x7018224*/ bool op_Equality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x7018a80*/ bool op_Inequality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x701465c*/ bool op_Equality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7014008*/ bool op_Inequality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x701ace4*/ bool op_GreaterThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x70142cc*/ bool op_LessThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7018290*/ bool op_GreaterThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7018670*/ bool op_LessThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x7013f98*/ Mono.Math.BigInteger GeneratePseudoPrime(int bits);
            /*0x701971c*/ BigInteger(Mono.Math.BigInteger.Sign sign, uint len);
            /*0x701979c*/ BigInteger(Mono.Math.BigInteger bi);
            /*0x7019884*/ BigInteger(Mono.Math.BigInteger bi, uint len);
            /*0x7014814*/ BigInteger(byte[] inData);
            /*0x70199c4*/ BigInteger(uint ui);
            /*0x701a9f0*/ void Randomize(System.Security.Cryptography.RandomNumberGenerator rng);
            /*0x70181c8*/ void Randomize();
            /*0x7014260*/ int BitCount();
            /*0x701860c*/ bool TestBit(uint bitNum);
            /*0x701ab70*/ bool TestBit(int bitNum);
            /*0x701ac04*/ void SetBit(uint bitNum);
            /*0x701ac0c*/ void SetBit(uint bitNum, bool value);
            /*0x701ac68*/ int LowestSetBit();
            /*0x7014f50*/ byte[] GetBytes();
            /*0x701acfc*/ string ToString(uint radix);
            /*0x701ad54*/ string ToString(uint radix, string characterSet);
            /*0x701996c*/ void Normalize();
            /*0x7014b74*/ void Clear();
            /*0x701b038*/ int GetHashCode();
            /*0x701b090*/ string ToString();
            /*0x701b098*/ bool Equals(object o);
            /*0x70144f0*/ Mono.Math.BigInteger ModInverse(Mono.Math.BigInteger modulus);
            /*0x7014a4c*/ Mono.Math.BigInteger ModPow(Mono.Math.BigInteger exp, Mono.Math.BigInteger n);
            /*0x7018374*/ bool IsProbablePrime();
            /*0x701ba30*/ void Incr2();

            enum Sign
            {
                Negative = -1,
                Zero = 0,
                Positive = 1,
            }

            class ModulusRing
            {
                /*0x10*/ Mono.Math.BigInteger mod;
                /*0x18*/ Mono.Math.BigInteger constant;

                /*0x701b7d8*/ ModulusRing(Mono.Math.BigInteger modulus);
                /*0x701bb58*/ void BarrettReduction(Mono.Math.BigInteger x);
                /*0x701c1ac*/ Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x701c328*/ Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x701b8d8*/ Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k);
                /*0x701c4dc*/ Mono.Math.BigInteger Pow(uint b, Mono.Math.BigInteger exp);
            }

            class Kernel
            {
                static /*0x7019b98*/ Mono.Math.BigInteger Subtract(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x701beec*/ void MinusEq(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x701c01c*/ void PlusEq(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x7019a54*/ Mono.Math.BigInteger.Sign Compare(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x701af88*/ uint SingleByteDivideInPlace(Mono.Math.BigInteger n, uint d);
                static /*0x7019d5c*/ uint DwordMod(Mono.Math.BigInteger n, uint d);
                static /*0x701c54c*/ Mono.Math.BigInteger[] DwordDivMod(Mono.Math.BigInteger n, uint d);
                static /*0x7019dc0*/ Mono.Math.BigInteger[] multiByteDivide(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x701a484*/ Mono.Math.BigInteger LeftShift(Mono.Math.BigInteger bi, int n);
                static /*0x701a66c*/ Mono.Math.BigInteger RightShift(Mono.Math.BigInteger bi, int n);
                static /*0x701a390*/ Mono.Math.BigInteger MultiplyByDword(Mono.Math.BigInteger n, uint f);
                static /*0x701a294*/ void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset);
                static /*0x701bdb0*/ void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod);
                static /*0x701c6ec*/ uint modInverse(Mono.Math.BigInteger bi, uint modulus);
                static /*0x701b1c0*/ Mono.Math.BigInteger modInverse(Mono.Math.BigInteger bi, Mono.Math.BigInteger modulus);
            }
        }

        namespace Prime
        {
            enum ConfidenceFactor
            {
                ExtraLow = 0,
                Low = 1,
                Medium = 2,
                High = 3,
                ExtraHigh = 4,
                Provable = 5,
            }

            class PrimalityTest : System.MulticastDelegate
            {
                /*0x701c7ac*/ PrimalityTest(object object, nint method);
                /*0x701c8b8*/ bool Invoke(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            class PrimalityTests
            {
                static /*0x701c8cc*/ int GetSPPRounds(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x701b9dc*/ bool Test(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x701cc30*/ bool RabinMillerTest(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x701ca58*/ bool SmallPrimeSppTest(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            namespace Generator
            {
                class PrimeGeneratorBase
                {
                    /*0x701cf44*/ PrimeGeneratorBase();
                    /*0x701cec8*/ Mono.Math.Prime.ConfidenceFactor get_Confidence();
                    /*0x701ced0*/ Mono.Math.Prime.PrimalityTest get_PrimalityTest();
                    /*0x701cf3c*/ int get_TrialDivisionBounds();
                    /*0x380ba90*/ Mono.Math.BigInteger GenerateNewPrime(int bits);
                }

                class SequentialSearchPrimeGeneratorBase : Mono.Math.Prime.Generator.PrimeGeneratorBase
                {
                    /*0x701ba28*/ SequentialSearchPrimeGeneratorBase();
                    /*0x701cf4c*/ Mono.Math.BigInteger GenerateSearchBase(int bits, object context);
                    /*0x701cfc0*/ Mono.Math.BigInteger GenerateNewPrime(int bits);
                    /*0x701cfd0*/ Mono.Math.BigInteger GenerateNewPrime(int bits, object context);
                    /*0x701d2b4*/ bool IsPrimeAcceptable(Mono.Math.BigInteger bi, object context);
                }
            }
        }
    }
}

namespace Microsoft
{
    namespace Win32
    {
        class Win32Native
        {
            static /*0x701d2bc*/ string GetMessage(int hr);
            static /*0x701d318*/ int MakeHRFromErrorCode(int errorCode);
        }

        namespace SafeHandles
        {
            class SafeHandleCache<T>
            {
                static /*0x0*/ T s_invalidHandle;

                static /*0x381ac0c*/ bool IsCachedInvalidHandle(System.Runtime.InteropServices.SafeHandle handle);
            }

            class SafePasswordHandle : System.Runtime.InteropServices.SafeHandle
            {
                /*0x701d3d8*/ SafePasswordHandle(string password);
                /*0x701d324*/ nint CreateHandle(string password);
                /*0x701d37c*/ void FreeHandle();
                /*0x701d414*/ bool ReleaseHandle();
                /*0x701d44c*/ void Dispose(bool disposing);
                /*0x701d4bc*/ bool get_IsInvalid();
                /*0x701d4e0*/ string Mono_DangerousGetString();
            }

            class SafeFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x701d53c*/ SafeFileHandle(nint preexistingHandle, bool ownsHandle);
                /*0x701d57c*/ bool ReleaseHandle();
            }

            class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x701d5f8*/ SafeWaitHandle(nint existingHandle, bool ownsHandle);
                /*0x701d628*/ bool ReleaseHandle();
            }

            class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0x701d56c*/ SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
                /*0x701d644*/ bool get_IsInvalid();
            }

            class SafeHandleMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0x701d698*/ SafeHandleMinusOneIsInvalid(bool ownsHandle);
                /*0x701d6dc*/ bool get_IsInvalid();
            }
        }
    }
}

namespace Internal
{
    namespace Threading
    {
        namespace Tasks
        {
            namespace Tracing
            {
                class TaskTrace
                {
                    static /*0x0*/ Internal.Runtime.Augments.TaskTraceCallbacks s_callbacks;

                    static /*0x701d714*/ bool get_Enabled();
                    static /*0x701d774*/ void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x701d7f8*/ void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x701d87c*/ void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x701d900*/ void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
                }
            }
        }
    }

    namespace Runtime
    {
        namespace Augments
        {
            enum AsyncStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            class TaskTraceCallbacks
            {
                /*0x380b128*/ bool get_Enabled();
                void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
            }

            class RuntimeAugments
            {
                static /*0x0*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks s_reflectionExecutionDomainCallbacks;

                static /*0x701da18*/ RuntimeAugments();
                static /*0x701d9a0*/ void ReportUnhandledException(System.Exception exception);
                static /*0x701d9c0*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks get_Callbacks();
            }

            class ReflectionExecutionDomainCallbacks
            {
                /*0x701da94*/ ReflectionExecutionDomainCallbacks();
                /*0x701da9c*/ System.Exception CreateMissingMetadataException(System.Type attributeType);
            }

            class RuntimeThread
            {
                static /*0x0*/ int OptimalMaxSpinWaitsPerSpinIteration;
                /*0x10*/ System.Threading.Thread thread;

                static /*0x701dc30*/ RuntimeThread();
                static /*0x701db20*/ Internal.Runtime.Augments.RuntimeThread Create(System.Threading.ParameterizedThreadStart start, int maxStackSize);
                static /*0x701dc00*/ void Sleep(int millisecondsTimeout);
                static /*0x701dc08*/ bool Yield();
                static /*0x701dc10*/ bool SpinWait(int iterations);
                static /*0x701dc28*/ int GetCurrentProcessorId();
                /*0x701daf0*/ RuntimeThread(System.Threading.Thread t);
                /*0x701dbc4*/ void set_IsBackground(bool value);
                /*0x701dbe4*/ void Start(object state);
            }
        }
    }

    namespace Cryptography
    {
        class Helpers
        {
            static /*0x701dc7c*/ byte[] CloneByteArray(byte[] src);
            static /*0x701dcf4*/ char[] ToHexArrayUpper(byte[] bytes);
            static /*0x701ddfc*/ string ToHexStringUpper(byte[] bytes);
            static /*0x701dde0*/ char NibbleToHex(byte b);
        }
    }
}

namespace System
{
    class String : System.IComparable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<char>, System.IComparable<string>, System.IEquatable<string>, System.IConvertible, System.ICloneable
    {
        static int StackallocIntBufferSizeLimit = 128;
        static int PROBABILISTICMAP_BLOCK_INDEX_MASK = 7;
        static int PROBABILISTICMAP_BLOCK_INDEX_SHIFT = 3;
        static int PROBABILISTICMAP_SIZE = 8;
        static /*0x0*/ string Empty;
        /*0x10*/ int _stringLength;
        /*0x14*/ char _firstChar;

        static /*0x701de14*/ bool EqualsHelper(string strA, string strB);
        static /*0x701de48*/ int CompareOrdinalHelper(string strA, int indexA, int countA, string strB, int indexB, int countB);
        static /*0x701de80*/ int CompareOrdinalHelper(string strA, string strB);
        static /*0x701e03c*/ int Compare(string strA, string strB, bool ignoreCase);
        static /*0x701e044*/ int Compare(string strA, string strB, System.StringComparison comparisonType);
        static /*0x701e310*/ int Compare(string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        static /*0x701e3a8*/ int Compare(string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);
        static /*0x701e3b8*/ int Compare(string strA, int indexA, string strB, int indexB, int length);
        static /*0x701e3c0*/ int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);
        static /*0x701e500*/ int Compare(string strA, int indexA, string strB, int indexB, int length, System.StringComparison comparisonType);
        static /*0x701e920*/ int CompareOrdinal(string strA, string strB);
        static /*0x701e964*/ int CompareOrdinal(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
        static /*0x701ea04*/ int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length);
        static /*0x701f2dc*/ bool Equals(string a, string b);
        static /*0x701f328*/ bool Equals(string a, string b, System.StringComparison comparisonType);
        static /*0x701f5c0*/ bool op_Equality(string a, string b);
        static /*0x701f5c4*/ bool op_Inequality(string a, string b);
        static /*0x701e2f4*/ void CheckStringComparison(System.StringComparison comparisonType);
        static /*0x701f97c*/ string Ctor(char[] value);
        static /*0x701fa00*/ string Ctor(char[] value, int startIndex, int length);
        static /*0x701fb90*/ string Ctor(char* ptr, int startIndex, int length);
        static /*0x701fce4*/ string Ctor(sbyte* value, int startIndex, int length);
        static /*0x701fe24*/ string CreateStringForSByteConstructor(byte* pb, int numBytes);
        static /*0x701fe84*/ string Ctor(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        static /*0x702003c*/ string Ctor(char c, int count);
        static /*0x7020134*/ string Ctor(System.ReadOnlySpan<char> value);
        static /*0x3907c14*/ string Create<TState>(int length, TState state, System.Buffers.SpanAction<char, TState> action);
        static /*0x70201e8*/ System.ReadOnlySpan<char> op_Implicit(string value);
        static /*0x702023c*/ string Copy(string str);
        static /*0x7020530*/ bool IsNullOrEmpty(string value);
        static /*0x702054c*/ bool IsNullOrWhiteSpace(string value);
        static /*0x70205dc*/ string CreateStringFromEncoding(byte* bytes, int byteLength, System.Text.Encoding encoding);
        static /*0x7020684*/ string CreateFromChar(char c);
        static /*0x701f9f0*/ void wstrcpy(char* dmem, char* smem, int charCount);
        static /*0x7020768*/ int wcslen(char* ptr);
        static /*0x7020f00*/ void FillStringChecked(string dest, int destPos, string src);
        static /*0x7020f74*/ string Concat(object arg0, object arg1);
        static /*0x7020ffc*/ string Concat(object arg0, object arg1, object arg2);
        static /*0x7021180*/ string Concat(System.Collections.Generic.IEnumerable<string> values);
        static /*0x7016724*/ string Concat(string str0, string str1);
        static /*0x70210c0*/ string Concat(string str0, string str1, string str2);
        static /*0x7021628*/ string Concat(string str0, string str1, string str2, string str3);
        static /*0x7021730*/ string Concat(string[] values);
        static /*0x7017314*/ string Format(string format, object arg0);
        static /*0x7021a30*/ string Format(string format, object arg0, object arg1);
        static /*0x7021a74*/ string Format(string format, object arg0, object arg1, object arg2);
        static /*0x7021ab8*/ string Format(string format, object[] args);
        static /*0x7021b60*/ string Format(System.IFormatProvider provider, string format, object arg0);
        static /*0x7021bb4*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1);
        static /*0x7021c0c*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
        static /*0x7021c68*/ string Format(System.IFormatProvider provider, string format, object[] args);
        static /*0x702192c*/ string FormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
        static /*0x7021e54*/ string Join(string separator, string[] value);
        static /*0x7021ef4*/ string Join(string separator, object[] values);
        static /*0x3830700*/ string Join<T>(string separator, System.Collections.Generic.IEnumerable<T> values);
        static /*0x70220b4*/ string Join(string separator, System.Collections.Generic.IEnumerable<string> values);
        static /*0x7021eb4*/ string Join(string separator, string[] value, int startIndex, int count);
        static /*0x7021f2c*/ string JoinCore(char* separator, int separatorLength, object[] values);
        static /*0x3907c14*/ string JoinCore<T>(char* separator, int separatorLength, System.Collections.Generic.IEnumerable<T> values);
        static /*0x7022574*/ string JoinCore(char* separator, int separatorLength, string[] value, int startIndex, int count);
        static /*0x7024f18*/ void InitializeProbabilisticMap(uint* charMap, System.ReadOnlySpan<char> anyOf);
        static /*0x7025c7c*/ bool ArrayContains(char searchChar, char[] anyOf);
        static /*0x7024ff8*/ bool IsCharBitSet(uint* charMap, byte value);
        static /*0x7025cd8*/ void SetCharBit(uint* charMap, byte value);
        static /*0x701f9ec*/ string FastAllocateString(int length);
        static /*0x7026d3c*/ string InternalIntern(string str);
        static /*0x7026d40*/ void memset(byte* dest, int val, int len);
        static /*0x7026de8*/ void memcpy(byte* dest, byte* src, int size);
        static /*0x7026df0*/ void bzero(byte* dest, int len);
        static /*0x7026dfc*/ void bzero_aligned_1(byte* dest, int len);
        static /*0x7026e04*/ void bzero_aligned_2(byte* dest, int len);
        static /*0x7026e0c*/ void bzero_aligned_4(byte* dest, int len);
        static /*0x7026e14*/ void bzero_aligned_8(byte* dest, int len);
        static /*0x7026e1c*/ void memcpy_aligned_1(byte* dest, byte* src, int size);
        static /*0x7026e28*/ void memcpy_aligned_2(byte* dest, byte* src, int size);
        static /*0x7026e34*/ void memcpy_aligned_4(byte* dest, byte* src, int size);
        static /*0x7026e40*/ void memcpy_aligned_8(byte* dest, byte* src, int size);
        static /*0x7026e98*/ string Intern(string str);
        /*0x701f978*/ String(char[] value);
        /*0x701f9fc*/ String(char[] value, int startIndex, int length);
        /*0x701fb8c*/ String(char* value, int startIndex, int length);
        /*0x701fce0*/ String(sbyte* value, int startIndex, int length);
        /*0x701fe80*/ String(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x7020038*/ String(char c, int count);
        /*0x7020130*/ String(System.ReadOnlySpan<char> value);
        /*0x701ebfc*/ int CompareTo(object value);
        /*0x701ec7c*/ int CompareTo(string strB);
        /*0x701ec84*/ bool EndsWith(string value);
        /*0x701ec8c*/ bool EndsWith(string value, System.StringComparison comparisonType);
        /*0x701ef44*/ bool EndsWith(char value);
        /*0x701ef94*/ bool Equals(object obj);
        /*0x701f004*/ bool Equals(string value);
        /*0x701f044*/ bool Equals(string value, System.StringComparison comparisonType);
        /*0x701f5dc*/ int GetHashCode();
        /*0x701f5e0*/ int GetLegacyNonRandomizedHashCode();
        /*0x701f630*/ bool StartsWith(string value);
        /*0x701f688*/ bool StartsWith(string value, System.StringComparison comparisonType);
        /*0x701f958*/ bool StartsWith(char value);
        /*0x7020238*/ object Clone();
        /*0x70202d0*/ void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);
        /*0x7020444*/ char[] ToCharArray();
        /*0x701de40*/ ref char GetRawStringData();
        /*0x70206a8*/ string ToString();
        /*0x70206ac*/ string ToString(System.IFormatProvider provider);
        /*0x70206b0*/ System.Collections.Generic.IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator();
        /*0x702070c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0x7020870*/ System.TypeCode GetTypeCode();
        /*0x7020878*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x70208e0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x7020948*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x70209b0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7020a18*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7020a80*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7020ae8*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x7020b50*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7020bb8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x7020c20*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x7020c88*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x7020cf0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x7020d58*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x7020dc0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x7020e28*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x7020e98*/ string Normalize(System.Text.NormalizationForm normalizationForm);
        /*0x7021d18*/ string Insert(int startIndex, string value);
        /*0x7022904*/ string PadLeft(int totalWidth, char paddingChar);
        /*0x7022a24*/ string PadRight(int totalWidth, char paddingChar);
        /*0x7022b4c*/ string Remove(int startIndex, int count);
        /*0x7022cc8*/ string Remove(int startIndex);
        /*0x7022ed0*/ string Replace(char oldChar, char newChar);
        /*0x7022fa8*/ string Replace(string oldValue, string newValue);
        /*0x70232b0*/ string ReplaceHelper(int oldValueLength, string newValue, System.ReadOnlySpan<int> indices);
        /*0x70235f0*/ string[] Split(char separator, System.StringSplitOptions options);
        /*0x702397c*/ string[] Split(char separator, int count, System.StringSplitOptions options);
        /*0x70239e0*/ string[] Split(char[] separator);
        /*0x7023a54*/ string[] Split(char[] separator, System.StringSplitOptions options);
        /*0x7023650*/ string[] SplitInternal(System.ReadOnlySpan<char> separators, int count, System.StringSplitOptions options);
        /*0x7024444*/ string[] Split(string separator, System.StringSplitOptions options);
        /*0x702486c*/ string[] Split(string[] separator, System.StringSplitOptions options);
        /*0x702447c*/ string[] SplitInternal(string separator, string[] separators, int count, System.StringSplitOptions options);
        /*0x7024880*/ string[] SplitInternal(string separator, int count, System.StringSplitOptions options);
        /*0x7023f94*/ string[] SplitKeepEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0x7024190*/ string[] SplitOmitEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0x7023acc*/ void MakeSeparatorList(System.ReadOnlySpan<char> separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0x7024d14*/ void MakeSeparatorList(string separator, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0x7024a3c*/ void MakeSeparatorList(string[] separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder, ref System.Collections.Generic.ValueListBuilder<int> lengthListBuilder);
        /*0x7024f0c*/ string Substring(int startIndex);
        /*0x7022d80*/ string Substring(int startIndex, int length);
        /*0x7025014*/ string InternalSubString(int startIndex, int length);
        /*0x702506c*/ string ToLower();
        /*0x70250e8*/ string ToLower(System.Globalization.CultureInfo culture);
        /*0x702516c*/ string ToLowerInvariant();
        /*0x70251e8*/ string ToUpper();
        /*0x7025264*/ string ToUpper(System.Globalization.CultureInfo culture);
        /*0x70252e8*/ string ToUpperInvariant();
        /*0x7025364*/ string Trim();
        /*0x7025484*/ string Trim(char trimChar);
        /*0x7025608*/ string Trim(char[] trimChars);
        /*0x702563c*/ string TrimStart();
        /*0x7025644*/ string TrimStart(char trimChar);
        /*0x7025664*/ string TrimStart(char[] trimChars);
        /*0x7025698*/ string TrimEnd();
        /*0x70256a0*/ string TrimEnd(char trimChar);
        /*0x70256c0*/ string TrimEnd(char[] trimChars);
        /*0x702536c*/ string TrimWhiteSpaceHelper(System.String.TrimType trimType);
        /*0x70254a4*/ string TrimHelper(char* trimChars, int trimCharsLength, System.String.TrimType trimType);
        /*0x70256f4*/ string CreateTrimmedString(int start, int end);
        /*0x7025728*/ bool Contains(string value);
        /*0x702575c*/ bool Contains(string value, System.StringComparison comparisonType);
        /*0x7025780*/ bool Contains(char value);
        /*0x70257a4*/ int IndexOf(char value);
        /*0x70257b4*/ int IndexOf(char value, int startIndex);
        /*0x70257c0*/ int IndexOf(char value, int startIndex, int count);
        /*0x7025898*/ int IndexOfAny(char[] anyOf);
        /*0x7025a60*/ int IndexOfAny(char[] anyOf, int startIndex);
        /*0x70258a4*/ int IndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x7025a6c*/ int IndexOfAny(char value1, char value2, int startIndex, int count);
        /*0x7025af4*/ int IndexOfAny(char value1, char value2, char value3, int startIndex, int count);
        /*0x7025b4c*/ int IndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0x7025cfc*/ int IndexOf(string value);
        /*0x7025d0c*/ int IndexOf(string value, int startIndex);
        /*0x702574c*/ int IndexOf(string value, System.StringComparison comparisonType);
        /*0x7025d1c*/ int IndexOf(string value, int startIndex, System.StringComparison comparisonType);
        /*0x7025d2c*/ int IndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x702607c*/ int LastIndexOf(char value);
        /*0x702608c*/ int LastIndexOf(char value, int startIndex);
        /*0x7026094*/ int LastIndexOf(char value, int startIndex, int count);
        /*0x7026178*/ int LastIndexOfAny(char[] anyOf);
        /*0x70262b0*/ int LastIndexOfAny(char[] anyOf, int startIndex);
        /*0x7026184*/ int LastIndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x70262b8*/ int LastIndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0x70263e8*/ int LastIndexOf(string value);
        /*0x70267a0*/ int LastIndexOf(string value, System.StringComparison comparisonType);
        /*0x70263f8*/ int LastIndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x70267b0*/ int get_Length();
        /*0x70267b8*/ int IndexOfUnchecked(string value, int startIndex, int count);
        /*0x70268b8*/ int IndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0x7026a84*/ int LastIndexOfUnchecked(string value, int startIndex, int count);
        /*0x7026b54*/ int LastIndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0x7026ce4*/ bool StartsWithOrdinalUnchecked(string value);
        /*0x7020028*/ string CreateString(sbyte* value, int startIndex, int length);
        /*0x7026e4c*/ string CreateString(char* value, int startIndex, int length);
        /*0x7026e5c*/ string CreateString(char[] val, int startIndex, int length);
        /*0x701de0c*/ string CreateString(char[] val);
        /*0x7026e6c*/ string CreateString(char c, int count);
        /*0x7026e78*/ string CreateString(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x7026e8c*/ string CreateString(System.ReadOnlySpan<char> value);
        /*0x701affc*/ char get_Chars(int index);

        enum TrimType
        {
            Head = 0,
            Tail = 1,
            Both = 2,
        }

        struct ProbabilisticMap
        {
        }
    }

    class TimeZoneInfo : System.IEquatable<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
    {
        static /*0x0*/ System.TimeZoneInfo s_utcTimeZone;
        static /*0x8*/ System.TimeZoneInfo.CachedData s_cachedData;
        static /*0x10*/ System.DateTime s_maxDateOnly;
        static /*0x18*/ System.DateTime s_minDateOnly;
        static /*0x20*/ System.TimeSpan MaxOffset;
        static /*0x28*/ System.TimeSpan MinOffset;
        /*0x10*/ string _id;
        /*0x18*/ string _displayName;
        /*0x20*/ string _standardDisplayName;
        /*0x28*/ string _daylightDisplayName;
        /*0x30*/ System.TimeSpan _baseUtcOffset;
        /*0x38*/ bool _supportsDaylightSavingTime;
        /*0x40*/ System.TimeZoneInfo.AdjustmentRule[] _adjustmentRules;

        static /*0x7107394*/ TimeZoneInfo();
        static /*0x70fd998*/ System.TimeZoneInfo GetLocalTimeZone(System.TimeZoneInfo.CachedData cachedData);
        static /*0x70fdb48*/ bool TryGetLocalTzFile(ref byte[] rawData, ref string id);
        static /*0x70fdd24*/ string GetTzEnvironmentVariable();
        static /*0x70fddbc*/ bool TryLoadTzFile(string tzFilePath, ref byte[] rawData, ref string id);
        static /*0x70fe0b0*/ string FindTimeZoneIdUsingReadLink(string tzFilePath);
        static /*0x70fe47c*/ string GetDirectoryEntryFullPath(ref Interop.Sys.DirectoryEntry dirent, string currentPath);
        static /*0x70fe5e8*/ void EnumerateFilesRecursively(string path, System.Predicate<string> condition);
        static /*0x70fe1bc*/ string FindTimeZoneId(byte[] rawData);
        static /*0x70feb7c*/ bool CompareTimeZoneFile(string filePath, byte[] buffer, byte[] rawData);
        static /*0x70fd9e4*/ System.TimeZoneInfo GetLocalTimeZoneFromTzFile();
        static /*0x70fef2c*/ System.TimeZoneInfo GetTimeZoneFromTzData(byte[] rawData, string id);
        static /*0x70fdf74*/ string GetTimeZoneDirectory();
        static /*0x70ff5d0*/ System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, ref bool isAmbiguousLocalDst);
        static /*0x70fceec*/ void TZif_GenerateAdjustmentRules(ref System.TimeZoneInfo.AdjustmentRule[] rules, System.TimeSpan baseUtcOffset, System.DateTime[] dts, byte[] typeOfLocalTime, System.TimeZoneInfo.TZifType[] transitionType, bool[] StandardTime, bool[] GmtTime, string futureTransitionsPosixFormat);
        static /*0x70ff998*/ void TZif_GenerateAdjustmentRule(ref int index, System.TimeSpan timeZoneBaseUtcOffset, System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> rulesList, System.DateTime[] dts, byte[] typeOfLocalTime, System.TimeZoneInfo.TZifType[] transitionTypes, bool[] StandardTime, bool[] GmtTime, string futureTransitionsPosixFormat);
        static /*0x7100150*/ System.TimeSpan TZif_CalculateTransitionOffsetFromBase(System.TimeSpan transitionOffset, System.TimeSpan timeZoneBaseUtcOffset);
        static /*0x71000a0*/ System.TimeZoneInfo.TZifType TZif_GetEarlyDateTransitionType(System.TimeZoneInfo.TZifType[] transitionTypes);
        static /*0x71005cc*/ System.TimeZoneInfo.AdjustmentRule TZif_CreateAdjustmentRuleForPosixFormat(string posixFormat, System.DateTime startTransitionDate, System.TimeSpan timeZoneBaseUtcOffset);
        static /*0x7100c4c*/ System.Nullable<System.TimeSpan> TZif_ParseOffsetString(string offset);
        static /*0x71010b0*/ System.DateTime ParseTimeOfDay(string time);
        static /*0x7100e60*/ System.Nullable<System.TimeZoneInfo.TransitionTime> TZif_CreateTransitionTimeFromPosixRule(string date, string time);
        static /*0x7101570*/ void TZif_ParseJulianDay(string date, ref int month, ref int day);
        static /*0x710130c*/ bool TZif_ParseMDateRule(string dateRule, ref int month, ref int week, ref System.DayOfWeek dayOfWeek);
        static /*0x71009b8*/ bool TZif_ParsePosixFormat(string posixFormat, ref string standardName, ref string standardOffset, ref string daylightSavingsName, ref string daylightSavingsOffset, ref string start, ref string startTime, ref string end, ref string endTime);
        static /*0x7101738*/ string TZif_ParsePosixName(string posixFormat, ref int index);
        static /*0x710197c*/ string TZif_ParsePosixOffset(string posixFormat, ref int index);
        static /*0x7101a90*/ void TZif_ParsePosixDateTime(string posixFormat, ref int index, ref string date, ref string time);
        static /*0x7101c38*/ string TZif_ParsePosixDate(string posixFormat, ref int index);
        static /*0x7101d4c*/ string TZif_ParsePosixTime(string posixFormat, ref int index);
        static /*0x7101ba0*/ string TZif_ParsePosixString(string posixFormat, ref int index, System.Func<char, bool> breakCondition);
        static /*0x70fce88*/ string TZif_GetZoneAbbreviation(string zoneAbbreviations, int index);
        static /*0x7101e60*/ int TZif_ToInt32(byte[] value, int startIndex);
        static /*0x7101e90*/ long TZif_ToInt64(byte[] value, int startIndex);
        static /*0x7101ec0*/ long TZif_ToUnixTime(byte[] value, int startIndex, System.TimeZoneInfo.TZVersion version);
        static /*0x7101f48*/ System.DateTime TZif_UnixTimeToDateTime(long unixTime);
        static /*0x70fc8d0*/ void TZif_ParseRaw(byte[] data, ref System.TimeZoneInfo.TZifHead t, ref System.DateTime[] dts, ref byte[] typeOfLocalTime, ref System.TimeZoneInfo.TZifType[] transitionType, ref string zoneAbbreviations, ref bool[] StandardTime, ref bool[] GmtTime, ref string futureTransitionsPosixFormat);
        static /*0x71026d8*/ System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x7102b60*/ System.DateTimeOffset ConvertTime(System.DateTimeOffset dateTimeOffset, System.TimeZoneInfo destinationTimeZone);
        static /*0x71028b0*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags);
        static /*0x7102dcc*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        static /*0x7103ee4*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x70ff648*/ System.TimeZoneInfo get_Local();
        static /*0x7104418*/ System.TimeZoneInfo get_Utc();
        static /*0x710458c*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
        static /*0x7104620*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        static /*0x7103cdc*/ System.DateTime ConvertUtcToTimeZone(long ticks, System.TimeZoneInfo destinationTimeZone, ref bool isAmbiguousLocalDst);
        static /*0x71038fc*/ bool GetIsDaylightSavings(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime, System.TimeZoneInfoOptions flags);
        static /*0x71060e0*/ bool GetIsDaylightSavingsFromUtc(System.DateTime time, int year, System.TimeSpan utc, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex, ref bool isAmbiguousLocalDst, System.TimeZoneInfo zone);
        static /*0x71059b4*/ bool CheckIsDst(System.DateTime startTime, System.DateTime time, System.DateTime endTime, bool ignoreYearAdjustment, System.TimeZoneInfo.AdjustmentRule rule);
        static /*0x7105bdc*/ bool GetIsAmbiguousTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0x7103530*/ bool GetIsInvalidTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0x71029a8*/ System.TimeSpan GetUtcOffset(System.DateTime time, System.TimeZoneInfo zone, System.TimeZoneInfoOptions flags);
        static /*0x7102938*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone);
        static /*0x710542c*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings);
        static /*0x70ff6c8*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings, ref bool isAmbiguousLocalDst);
        static /*0x71054ac*/ System.DateTime TransitionTimeToDateTime(int year, System.TimeZoneInfo.TransitionTime transitionTime);
        static /*0x70fd060*/ void ValidateTimeZoneInfo(string id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, ref bool adjustmentRulesSupportDst);
        static /*0x71068cc*/ bool UtcOffsetOutOfRange(System.TimeSpan offset);
        static /*0x7106a00*/ System.TimeSpan GetUtcOffset(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x710030c*/ bool IsValidAdjustmentRuleOffest(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x7100380*/ void NormalizeAdjustmentRuleOffset(System.TimeSpan baseUtcOffset, ref System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x7106ac8*/ string GetTimeZoneDirectoryUnity();
        static /*0x7106ae0*/ System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> CreateAdjustmentRule(int year, ref long[] data, ref string[] names);
        static /*0x70ff0d4*/ System.TimeZoneInfo CreateLocalUnity();
        /*0x70fc430*/ TimeZoneInfo(byte[] data, string id, bool dstDisabled);
        /*0x7104470*/ TimeZoneInfo(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        /*0x7104ad0*/ TimeZoneInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7107520*/ TimeZoneInfo();
        /*0x70fd3a8*/ System.TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules();
        /*0x710232c*/ string get_DisplayName();
        /*0x7102350*/ string get_StandardName();
        /*0x7102374*/ string get_DaylightName();
        /*0x7102398*/ System.TimeSpan get_BaseUtcOffset();
        /*0x71023a0*/ bool get_SupportsDaylightSavingTime();
        /*0x71023a8*/ System.TimeZoneInfo.AdjustmentRule GetPreviousAdjustmentRule(System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x71024cc*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime);
        /*0x71027ac*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        /*0x7102540*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        /*0x7103fd8*/ bool Equals(System.TimeZoneInfo other);
        /*0x710418c*/ bool Equals(object obj);
        /*0x71041f0*/ int GetHashCode();
        /*0x7104028*/ bool HasSameRules(System.TimeZoneInfo other);
        /*0x71043f4*/ string ToString();
        /*0x7104724*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x71048f8*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7103280*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, ref System.Nullable<int> ruleIndex);
        /*0x7104f14*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, bool dateTimeisUtc, ref System.Nullable<int> ruleIndex);
        /*0x71050c8*/ int CompareAdjustmentRuleToDateTime(System.TimeZoneInfo.AdjustmentRule rule, System.TimeZoneInfo.AdjustmentRule previousRule, System.DateTime dateTime, System.DateTime dateOnly, bool dateTimeisUtc);
        /*0x7105278*/ System.DateTime ConvertToUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0x7105424*/ System.DateTime ConvertFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0x7105280*/ System.DateTime ConvertToFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta, bool convertToUtc);
        /*0x71033f4*/ System.Globalization.DaylightTimeStruct GetDaylightTime(int year, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x7105fa0*/ System.TimeSpan GetDaylightSavingsStartOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x7106068*/ System.TimeSpan GetDaylightSavingsEndOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule);

        struct TZifType
        {
            /*0x10*/ System.TimeSpan UtcOffset;
            /*0x18*/ bool IsDst;
            /*0x19*/ byte AbbreviationIndex;

            /*0x71021f0*/ TZifType(byte[] data, int index);
        }

        struct TZifHead
        {
            /*0x10*/ uint Magic;
            /*0x14*/ System.TimeZoneInfo.TZVersion Version;
            /*0x18*/ uint IsGmtCount;
            /*0x1c*/ uint IsStdCount;
            /*0x20*/ uint LeapCount;
            /*0x24*/ uint TimeCount;
            /*0x28*/ uint TypeCount;
            /*0x2c*/ uint CharCount;

            /*0x7102044*/ TZifHead(byte[] data, int index);
        }

        enum TZVersion
        {
            V1 = 0,
            V2 = 1,
            V3 = 2,
        }

        class AdjustmentRule : System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _dateStart;
            /*0x18*/ System.DateTime _dateEnd;
            /*0x20*/ System.TimeSpan _daylightDelta;
            /*0x28*/ System.TimeZoneInfo.TransitionTime _daylightTransitionStart;
            /*0x40*/ System.TimeZoneInfo.TransitionTime _daylightTransitionEnd;
            /*0x58*/ System.TimeSpan _baseUtcOffsetDelta;
            /*0x60*/ bool _noDaylightTransitions;

            static /*0x70fd890*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd);
            static /*0x7100244*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            static /*0x71077d4*/ void ValidateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, bool noDaylightTransitions);
            /*0x710770c*/ AdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            /*0x7108074*/ AdjustmentRule(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7108458*/ AdjustmentRule();
            /*0x7107558*/ System.DateTime get_DateStart();
            /*0x7107560*/ System.DateTime get_DateEnd();
            /*0x7107568*/ System.TimeSpan get_DaylightDelta();
            /*0x7107570*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionStart();
            /*0x7107584*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionEnd();
            /*0x7107598*/ System.TimeSpan get_BaseUtcOffsetDelta();
            /*0x71075a0*/ bool get_NoDaylightTransitions();
            /*0x710328c*/ bool get_HasDaylightSaving();
            /*0x7104290*/ bool Equals(System.TimeZoneInfo.AdjustmentRule other);
            /*0x71076b4*/ int GetHashCode();
            /*0x710577c*/ bool IsStartDateMarkerForBeginningOfYear();
            /*0x7105898*/ bool IsEndDateMarkerForEndOfYear();
            /*0x7107d20*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x7107e34*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct TransitionTime : System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _timeOfDay;
            /*0x18*/ byte _month;
            /*0x19*/ byte _week;
            /*0x1a*/ byte _day;
            /*0x1c*/ System.DayOfWeek _dayOfWeek;
            /*0x20*/ bool _isFixedDateRule;

            static /*0x71075a8*/ bool op_Inequality(System.TimeZoneInfo.TransitionTime t1, System.TimeZoneInfo.TransitionTime t2);
            static /*0x70fd830*/ System.TimeZoneInfo.TransitionTime CreateFixedDateRule(System.DateTime timeOfDay, int month, int day);
            static /*0x7101508*/ System.TimeZoneInfo.TransitionTime CreateFloatingDateRule(System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek);
            static /*0x71085c8*/ void ValidateTransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek);
            /*0x7108558*/ TransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek, bool isFixedDateRule);
            /*0x7108b08*/ TransitionTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7108490*/ System.DateTime get_TimeOfDay();
            /*0x7108498*/ int get_Month();
            /*0x71084a0*/ int get_Week();
            /*0x71084a8*/ int get_Day();
            /*0x71084b0*/ System.DayOfWeek get_DayOfWeek();
            /*0x71084b8*/ bool get_IsFixedDateRule();
            /*0x71084c0*/ bool Equals(object obj);
            /*0x71075dc*/ bool Equals(System.TimeZoneInfo.TransitionTime other);
            /*0x7108550*/ int GetHashCode();
            /*0x7108874*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x7108960*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class CachedData
        {
            /*0x10*/ System.TimeZoneInfo _localTimeZone;

            /*0x7107518*/ CachedData();
            /*0x7108e34*/ System.TimeZoneInfo CreateLocal();
            /*0x7102774*/ System.TimeZoneInfo get_Local();
            /*0x7102824*/ System.DateTimeKind GetCorrespondingKind(System.TimeZoneInfo timeZone);
        }

        class <>c__DisplayClass16_0
        {
            /*0x10*/ string localtimeFilePath;
            /*0x18*/ string posixrulesFilePath;
            /*0x20*/ byte[] buffer;
            /*0x28*/ byte[] rawData;
            /*0x30*/ string id;
            /*0x38*/ string timeZoneDirectory;

            /*0x70feb74*/ <>c__DisplayClass16_0();
            /*0x7108fc0*/ bool <FindTimeZoneId>b__0(string filePath);
        }

        class <>c
        {
            static /*0x0*/ System.TimeZoneInfo.<> <>9;
            static /*0x8*/ System.Func<char, bool> <>9__34_1;
            static /*0x10*/ System.Func<char, bool> <>9__34_0;
            static /*0x18*/ System.Func<char, bool> <>9__35_0;
            static /*0x20*/ System.Func<char, bool> <>9__37_0;
            static /*0x28*/ System.Func<char, bool> <>9__38_0;
            static /*0x30*/ System.Comparison<System.TimeZoneInfo.AdjustmentRule> <>9__161_0;

            static /*0x71090d0*/ <>c();
            /*0x7109138*/ <>c();
            /*0x7109140*/ bool <TZif_ParsePosixName>b__34_1(char c);
            /*0x7109150*/ bool <TZif_ParsePosixName>b__34_0(char c);
            /*0x71091f8*/ bool <TZif_ParsePosixOffset>b__35_0(char c);
            /*0x7109250*/ bool <TZif_ParsePosixDate>b__37_0(char c);
            /*0x710926c*/ bool <TZif_ParsePosixTime>b__38_0(char c);
            /*0x710927c*/ int <CreateLocalUnity>b__161_0(System.TimeZoneInfo.AdjustmentRule rule1, System.TimeZoneInfo.AdjustmentRule rule2);
        }
    }

    class AccessViolationException : System.SystemException
    {
        /*0x7109304*/ AccessViolationException();
        /*0x7109360*/ AccessViolationException(string message);
        /*0x7109384*/ AccessViolationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Action : System.MulticastDelegate
    {
        /*0x710938c*/ Action(object object, nint method);
        /*0x7109428*/ void Invoke();
    }

    class Action<T> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T obj);
    }

    class Action<T1, T2> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2);
    }

    class Action<T1, T2, T3> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Action<T1, T2, T3, T4> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Action<T1, T2, T3, T4, T5> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Action<T1, T2, T3, T4, T5, T6> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7, T8> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x3907c14*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Func<TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke();
    }

    class Func<T, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T arg);
    }

    class Func<T1, T2, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2);
    }

    class Func<T1, T2, T3, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Func<T1, T2, T3, T4, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Func<T1, T2, T3, T4, T5, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Func<T1, T2, T3, T4, T5, T6, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x3907c14*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Comparison<T> : System.MulticastDelegate
    {
        Comparison(object object, nint method);
        /*0x3907c14*/ int Invoke(T x, T y);
    }

    class Converter<TInput, TOutput> : System.MulticastDelegate
    {
        Converter(object object, nint method);
        /*0x3907c14*/ TOutput Invoke(TInput input);
    }

    class Predicate<T> : System.MulticastDelegate
    {
        Predicate(object object, nint method);
        /*0x3907c14*/ bool Invoke(T obj);
    }

    class AggregateException : System.Exception
    {
        /*0x90*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> m_innerExceptions;

        /*0x710943c*/ AggregateException();
        /*0x7109568*/ AggregateException(System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x710967c*/ AggregateException(System.Exception[] innerExceptions);
        /*0x71095c0*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x71096d4*/ AggregateException(string message, System.Exception[] innerExceptions);
        /*0x71096d8*/ AggregateException(string message, System.Collections.Generic.IList<System.Exception> innerExceptions);
        /*0x7109ae0*/ AggregateException(System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x7109b38*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x7109bf4*/ AggregateException(string message, System.Collections.Generic.IList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x710a050*/ AggregateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710a224*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710a364*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> get_InnerExceptions();
        /*0x710a36c*/ System.AggregateException Flatten();
        /*0x710a72c*/ string get_Message();
        /*0x710a8b8*/ string ToString();
    }

    class ApplicationException : System.Exception
    {
        /*0x710aac0*/ ApplicationException();
        /*0x710ab40*/ ApplicationException(string message);
        /*0x710abb8*/ ApplicationException(string message, System.Exception innerException);
        /*0x710ac38*/ ApplicationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentException : System.SystemException
    {
        /*0x90*/ string _paramName;

        /*0x710acb8*/ ArgumentException();
        /*0x7109abc*/ ArgumentException(string message);
        /*0x710ad14*/ ArgumentException(string message, System.Exception innerException);
        /*0x710ad38*/ ArgumentException(string message, string paramName, System.Exception innerException);
        /*0x7103240*/ ArgumentException(string message, string paramName);
        /*0x710ad7c*/ ArgumentException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710ae0c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710aec4*/ string get_Message();
        /*0x710af64*/ string get_ParamName();
    }

    class ArgumentNullException : System.ArgumentException
    {
        /*0x710af6c*/ ArgumentNullException();
        /*0x7102d54*/ ArgumentNullException(string paramName);
        /*0x710afc8*/ ArgumentNullException(string paramName, string message);
        /*0x710b00c*/ ArgumentNullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentOutOfRangeException : System.ArgumentException
    {
        /*0x98*/ object _actualValue;

        /*0x710b010*/ ArgumentOutOfRangeException();
        /*0x710b06c*/ ArgumentOutOfRangeException(string paramName);
        /*0x71069bc*/ ArgumentOutOfRangeException(string paramName, string message);
        /*0x7107cbc*/ ArgumentOutOfRangeException(string paramName, object actualValue, string message);
        /*0x710b0e4*/ ArgumentOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710b1a0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710b254*/ string get_Message();
    }

    class ArithmeticException : System.SystemException
    {
        /*0x710b300*/ ArithmeticException();
        /*0x710b35c*/ ArithmeticException(string message);
        /*0x710b380*/ ArithmeticException(string message, System.Exception innerException);
        /*0x710b3a4*/ ArithmeticException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ArraySegment<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
    {
        static /*0x0*/ System.ArraySegment<T> <Empty>k__BackingField;
        /*0x0*/ T[] _array;
        /*0x0*/ int _offset;
        /*0x0*/ int _count;

        static /*0x38358cc*/ ArraySegment();
        static /*0x3907c14*/ System.ArraySegment<T> get_Empty();
        /*0x380d83c*/ ArraySegment(T[] array);
        ArraySegment(T[] array, int offset, int count);
        /*0x380b9e8*/ T[] get_Array();
        /*0x380b6a0*/ int get_Offset();
        /*0x380b6a0*/ int get_Count();
        /*0x3907c14*/ System.ArraySegment.Enumerator<T> GetEnumerator();
        /*0x380b6a0*/ int GetHashCode();
        /*0x380d8b8*/ void CopyTo(T[] destination, int destinationIndex);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ArraySegment<T> obj);
        /*0x3907c14*/ T System.Collections.Generic.IList<T>.get_Item(int index);
        /*0x3907c14*/ void System.Collections.Generic.IList<T>.set_Item(int index, T value);
        /*0x3907c14*/ int System.Collections.Generic.IList<T>.IndexOf(T item);
        /*0x3907c14*/ void System.Collections.Generic.IList<T>.Insert(int index, T item);
        /*0x380cffc*/ void System.Collections.Generic.IList<T>.RemoveAt(int index);
        /*0x3907c14*/ T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index);
        /*0x380b128*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
        /*0x3907c14*/ void System.Collections.Generic.ICollection<T>.Add(T item);
        /*0x380cb08*/ void System.Collections.Generic.ICollection<T>.Clear();
        /*0x3907c14*/ bool System.Collections.Generic.ICollection<T>.Contains(T item);
        /*0x3907c14*/ bool System.Collections.Generic.ICollection<T>.Remove(T item);
        /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
        /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0x380cb08*/ void ThrowInvalidOperationIfDefault();

        struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ T[] _array;
            /*0x0*/ int _start;
            /*0x0*/ int _end;
            /*0x0*/ int _current;

            /*0x3907c14*/ Enumerator(System.ArraySegment<T> arraySegment);
            /*0x380b128*/ bool MoveNext();
            /*0x3907c14*/ T get_Current();
            /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
            /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
            /*0x380cb08*/ void Dispose();
        }
    }

    class ArrayTypeMismatchException : System.SystemException
    {
        /*0x710b3ac*/ ArrayTypeMismatchException();
        /*0x710b408*/ ArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class AssemblyLoadEventArgs : System.EventArgs
    {
        /*0x10*/ System.Reflection.Assembly <LoadedAssembly>k__BackingField;

        /*0x710b410*/ AssemblyLoadEventArgs(System.Reflection.Assembly loadedAssembly);
    }

    class AssemblyLoadEventHandler : System.MulticastDelegate
    {
        /*0x710b484*/ AssemblyLoadEventHandler(object object, nint method);
        /*0x710b590*/ void Invoke(object sender, System.AssemblyLoadEventArgs args);
    }

    class AsyncCallback : System.MulticastDelegate
    {
        /*0x710b5a4*/ AsyncCallback(object object, nint method);
        /*0x710b6ac*/ void Invoke(System.IAsyncResult ar);
        /*0x710b6c0*/ System.IAsyncResult BeginInvoke(System.IAsyncResult ar, System.AsyncCallback callback, object object);
        /*0x710b6e0*/ void EndInvoke(System.IAsyncResult result);
    }

    enum AttributeTargets
    {
        Assembly = 1,
        Module = 2,
        Class = 4,
        Struct = 8,
        Enum = 16,
        Constructor = 32,
        Method = 64,
        Property = 128,
        Field = 256,
        Event = 512,
        Interface = 1024,
        Parameter = 2048,
        Delegate = 4096,
        ReturnValue = 8192,
        GenericParameter = 16384,
        All = 32767,
    }

    class AttributeUsageAttribute : System.Attribute
    {
        static /*0x0*/ System.AttributeUsageAttribute Default;
        /*0x10*/ System.AttributeTargets _attributeTarget;
        /*0x14*/ bool _allowMultiple;
        /*0x15*/ bool _inherited;

        static /*0x710b74c*/ AttributeUsageAttribute();
        /*0x710b6ec*/ AttributeUsageAttribute(System.AttributeTargets validOn);
        /*0x710b724*/ bool get_AllowMultiple();
        /*0x710b72c*/ void set_AllowMultiple(bool value);
        /*0x710b738*/ bool get_Inherited();
        /*0x710b740*/ void set_Inherited(bool value);
    }

    class BadImageFormatException : System.SystemException
    {
        /*0x90*/ string _fileName;
        /*0x98*/ string _fusionLog;

        /*0x710b7c8*/ BadImageFormatException();
        /*0x710b824*/ BadImageFormatException(string message);
        /*0x710b848*/ BadImageFormatException(string message, System.Exception inner);
        /*0x710b86c*/ BadImageFormatException(string message, string fileName);
        /*0x710b8a8*/ BadImageFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710b96c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x710ba64*/ string get_Message();
        /*0x710ba7c*/ void SetMessageField();
        /*0x710bb0c*/ string ToString();
    }

    class BitConverter
    {
        static /*0x0*/ bool IsLittleEndian;

        static /*0x710c638*/ BitConverter();
        static /*0x710bcf0*/ byte[] GetBytes(bool value);
        static /*0x710bd58*/ byte[] GetBytes(char value);
        static /*0x710bdbc*/ byte[] GetBytes(short value);
        static /*0x710be20*/ byte[] GetBytes(int value);
        static /*0x710be84*/ byte[] GetBytes(long value);
        static /*0x710bee8*/ byte[] GetBytes(ushort value);
        static /*0x710bf4c*/ byte[] GetBytes(uint value);
        static /*0x710bfb0*/ bool TryWriteBytes(System.Span<byte> destination, uint value);
        static /*0x710c030*/ byte[] GetBytes(ulong value);
        static /*0x710c094*/ byte[] GetBytes(float value);
        static /*0x710c100*/ byte[] GetBytes(double value);
        static /*0x710c16c*/ short ToInt16(byte[] value, int startIndex);
        static /*0x710c1f0*/ int ToInt32(byte[] value, int startIndex);
        static /*0x710c274*/ long ToInt64(byte[] value, int startIndex);
        static /*0x710c2f8*/ ushort ToUInt16(byte[] value, int startIndex);
        static /*0x710c2fc*/ uint ToUInt32(byte[] value, int startIndex);
        static /*0x710c300*/ ulong ToUInt64(byte[] value, int startIndex);
        static /*0x710c304*/ float ToSingle(byte[] value, int startIndex);
        static /*0x710c318*/ string ToString(byte[] value, int startIndex, int length);
        static /*0x710c5f8*/ string ToString(byte[] value);
        static /*0x710c620*/ long DoubleToInt64Bits(double value);
        static /*0x710c628*/ int SingleToInt32Bits(float value);
        static /*0x710c630*/ float Int32BitsToSingle(int value);

        class <>c
        {
            static /*0x0*/ System.BitConverter.<> <>9;
            static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<System.Byte[], int, int>> <>9__38_0;

            static /*0x710c684*/ <>c();
            /*0x710c6ec*/ <>c();
            /*0x710c6f4*/ void <ToString>b__38_0(System.Span<char> dst, System.ValueTuple<System.Byte[], int, int> state);
        }
    }

    struct Boolean : System.IComparable, System.IConvertible, System.IComparable<bool>, System.IEquatable<bool>
    {
        static /*0x0*/ string TrueString;
        static /*0x8*/ string FalseString;
        /*0x10*/ bool m_value;

        static /*0x710e4fc*/ Boolean();
        static /*0x710ca6c*/ bool Parse(string value);
        static /*0x710cb24*/ bool Parse(System.ReadOnlySpan<char> value);
        static /*0x710cebc*/ bool TryParse(string value, ref bool result);
        static /*0x710cbc0*/ bool TryParse(System.ReadOnlySpan<char> value, ref bool result);
        static /*0x710cf48*/ System.ReadOnlySpan<char> TrimWhiteSpaceAndNull(System.ReadOnlySpan<char> value);
        /*0x710c88c*/ int GetHashCode();
        /*0x710c89c*/ string ToString();
        /*0x710c908*/ string ToString(System.IFormatProvider provider);
        /*0x710c938*/ bool Equals(object obj);
        /*0x710c980*/ bool Equals(bool obj);
        /*0x710c994*/ int CompareTo(object obj);
        /*0x710ca44*/ int CompareTo(bool value);
        /*0x710d13c*/ System.TypeCode GetTypeCode();
        /*0x710d144*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x710d154*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x710d1d8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x710d23c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x710d2a0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x710d304*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x710d368*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x710d3cc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x710d430*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x710d494*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x710d4f8*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x710d570*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x710d5e8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x710d69c*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x710d720*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Byte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<byte>, System.IEquatable<byte>, System.ISpanFormattable
    {
        /*0x10*/ byte m_value;

        static /*0x710e670*/ byte Parse(string s, System.IFormatProvider provider);
        static /*0x710e890*/ byte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x710e6fc*/ byte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x710e934*/ bool TryParse(string s, ref byte result);
        static /*0x710ea70*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref byte result);
        static /*0x710e9b4*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref byte result);
        /*0x710e57c*/ int CompareTo(object value);
        /*0x710e604*/ int CompareTo(byte value);
        /*0x710e610*/ bool Equals(object obj);
        /*0x710e658*/ bool Equals(byte obj);
        /*0x710e668*/ int GetHashCode();
        /*0x710eb18*/ string ToString();
        /*0x710ebb0*/ string ToString(string format);
        /*0x710ec64*/ string ToString(System.IFormatProvider provider);
        /*0x710ed00*/ string ToString(string format, System.IFormatProvider provider);
        /*0x710edb8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x710ee5c*/ System.TypeCode GetTypeCode();
        /*0x710ee64*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x710eecc*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x710ef2c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x710efd8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x710efe0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x710f040*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x710f0a0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x710f100*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x710f160*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x710f1c0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x710f220*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x710f284*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x710f2e8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x710f398*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x710f41c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CLSCompliantAttribute : System.Attribute
    {
        /*0x10*/ bool _compliant;

        /*0x710f4b8*/ CLSCompliantAttribute(bool isCompliant);
    }

    struct Char : System.IComparable, System.IComparable<char>, System.IEquatable<char>, System.IConvertible
    {
        static /*0x0*/ byte[] s_categoryForLatin1;
        /*0x10*/ char m_value;

        static /*0x7110f5c*/ Char();
        static /*0x710f4e0*/ bool IsLatin1(char ch);
        static /*0x710f4f0*/ bool IsAscii(char ch);
        static /*0x710f500*/ System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(char ch);
        static /*0x710f658*/ string ToString(char c);
        static /*0x710f694*/ char Parse(string s);
        static /*0x710f730*/ bool TryParse(string s, ref char result);
        static /*0x7109198*/ bool IsDigit(char c);
        static /*0x710f770*/ bool CheckLetter(System.Globalization.UnicodeCategory uc);
        static /*0x710f77c*/ bool IsLetter(char c);
        static /*0x710f838*/ bool IsWhiteSpaceLatin1(char c);
        static /*0x710d0a0*/ bool IsWhiteSpace(char c);
        static /*0x710f874*/ bool IsUpper(char c);
        static /*0x710f914*/ bool IsLower(char c);
        static /*0x710f9b4*/ bool CheckPunctuation(System.Globalization.UnicodeCategory uc);
        static /*0x710f9c4*/ bool IsPunctuation(char c);
        static /*0x710fa54*/ bool CheckLetterOrDigit(System.Globalization.UnicodeCategory uc);
        static /*0x710fa74*/ bool IsLetterOrDigit(char c);
        static /*0x710fb20*/ char ToUpper(char c, System.Globalization.CultureInfo culture);
        static /*0x710fba0*/ char ToUpper(char c);
        static /*0x710fc1c*/ char ToUpperInvariant(char c);
        static /*0x710fc98*/ char ToLower(char c, System.Globalization.CultureInfo culture);
        static /*0x710fd18*/ char ToLower(char c);
        static /*0x710fd94*/ char ToLowerInvariant(char c);
        static /*0x7110540*/ bool IsControl(char c);
        static /*0x71105b0*/ bool CheckNumber(System.Globalization.UnicodeCategory uc);
        static /*0x71105c0*/ bool IsNumber(char c);
        static /*0x711067c*/ bool IsNumber(string s, int index);
        static /*0x71107e0*/ bool CheckSeparator(System.Globalization.UnicodeCategory uc);
        static /*0x71107f0*/ bool IsSeparatorLatin1(char c);
        static /*0x7110804*/ bool IsSeparator(char c);
        static /*0x7110898*/ bool IsSurrogate(char c);
        static /*0x71108a8*/ bool IsSurrogate(string s, int index);
        static /*0x711096c*/ bool IsWhiteSpace(string s, int index);
        static /*0x7110ac4*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char c);
        static /*0x7110b28*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
        static /*0x7110c4c*/ bool IsHighSurrogate(char c);
        static /*0x7110c5c*/ bool IsHighSurrogate(string s, int index);
        static /*0x7110d24*/ bool IsLowSurrogate(char c);
        static /*0x7110d34*/ bool IsSurrogatePair(char highSurrogate, char lowSurrogate);
        static /*0x7110d54*/ string ConvertFromUtf32(int utf32);
        static /*0x7110e5c*/ int ConvertToUtf32(char highSurrogate, char lowSurrogate);
        /*0x710f560*/ int GetHashCode();
        /*0x710f56c*/ bool Equals(object obj);
        /*0x710f5b4*/ bool Equals(char obj);
        /*0x710f5c4*/ int CompareTo(object value);
        /*0x710f64c*/ int CompareTo(char value);
        /*0x70ff59c*/ string ToString();
        /*0x710f660*/ string ToString(System.IFormatProvider provider);
        /*0x710fe10*/ System.TypeCode GetTypeCode();
        /*0x710fe18*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x710fe9c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x710fea4*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x710ff58*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x711000c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71100b8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7110114*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x7110174*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71101d4*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x7110234*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x7110294*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x7110318*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x711039c*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x7110420*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71104a4*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CharEnumerator : System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<char>, System.IDisposable, System.ICloneable
    {
        /*0x10*/ string _str;
        /*0x18*/ int _index;
        /*0x1c*/ char _currentElement;

        /*0x7110fe0*/ CharEnumerator(string str);
        /*0x7111178*/ CharEnumerator();
        /*0x711101c*/ object Clone();
        /*0x7111024*/ bool MoveNext();
        /*0x7111080*/ void Dispose();
        /*0x71110a0*/ object System.Collections.IEnumerator.get_Current();
        /*0x71110cc*/ char get_Current();
        /*0x7111168*/ void Reset();
    }

    class Convert
    {
        static /*0x0*/ sbyte[] s_decodingMap;
        static /*0x8*/ System.Type[] ConvertTypes;
        static /*0x10*/ System.Type EnumType;
        static /*0x18*/ char[] base64Table;
        static /*0x20*/ object DBNull;

        static /*0x7119088*/ Convert();
        static /*0x71111b0*/ bool TryDecodeFromUtf16(System.ReadOnlySpan<char> utf16, System.Span<byte> bytes, ref int consumed, ref int written);
        static /*0x711150c*/ int Decode(ref char encodedChars, ref sbyte decodingMap);
        static /*0x711155c*/ void WriteThreeLowOrderBytes(ref byte destination, int value);
        static /*0x7111574*/ System.TypeCode GetTypeCode(object value);
        static /*0x7111638*/ object ChangeType(object value, System.TypeCode typeCode, System.IFormatProvider provider);
        static /*0x710d7c4*/ object DefaultToType(System.IConvertible value, System.Type targetType, System.IFormatProvider provider);
        static /*0x7111eb8*/ object ChangeType(object value, System.Type conversionType);
        static /*0x7111f54*/ object ChangeType(object value, System.Type conversionType, System.IFormatProvider provider);
        static /*0x7112b80*/ void ThrowCharOverflowException();
        static /*0x7112bcc*/ void ThrowByteOverflowException();
        static /*0x7112c18*/ void ThrowSByteOverflowException();
        static /*0x7112c64*/ void ThrowInt16OverflowException();
        static /*0x7112cb0*/ void ThrowUInt16OverflowException();
        static /*0x7112cfc*/ void ThrowInt32OverflowException();
        static /*0x7112d48*/ void ThrowUInt32OverflowException();
        static /*0x7112d94*/ void ThrowInt64OverflowException();
        static /*0x7112de0*/ void ThrowUInt64OverflowException();
        static /*0x7112e2c*/ bool ToBoolean(object value);
        static /*0x7112f20*/ bool ToBoolean(object value, System.IFormatProvider provider);
        static /*0x7113024*/ bool ToBoolean(sbyte value);
        static /*0x710eec0*/ bool ToBoolean(byte value);
        static /*0x7113030*/ bool ToBoolean(short value);
        static /*0x711303c*/ bool ToBoolean(ushort value);
        static /*0x7113048*/ bool ToBoolean(int value);
        static /*0x7113054*/ bool ToBoolean(uint value);
        static /*0x7113060*/ bool ToBoolean(long value);
        static /*0x711306c*/ bool ToBoolean(ulong value);
        static /*0x7113078*/ bool ToBoolean(string value);
        static /*0x71130ac*/ bool ToBoolean(string value, System.IFormatProvider provider);
        static /*0x71130e0*/ bool ToBoolean(float value);
        static /*0x71130ec*/ bool ToBoolean(double value);
        static /*0x71130f8*/ bool ToBoolean(decimal value);
        static /*0x711316c*/ char ToChar(object value);
        static /*0x7113260*/ char ToChar(object value, System.IFormatProvider provider);
        static /*0x7113364*/ char ToChar(sbyte value);
        static /*0x710ef24*/ char ToChar(byte value);
        static /*0x71133b8*/ char ToChar(short value);
        static /*0x711340c*/ char ToChar(ushort value);
        static /*0x7113410*/ char ToChar(int value);
        static /*0x7113468*/ char ToChar(uint value);
        static /*0x71134c0*/ char ToChar(long value);
        static /*0x7113518*/ char ToChar(ulong value);
        static /*0x7113570*/ char ToChar(string value);
        static /*0x71135c4*/ char ToChar(string value, System.IFormatProvider provider);
        static /*0x7113660*/ sbyte ToSByte(object value);
        static /*0x7113754*/ sbyte ToSByte(object value, System.IFormatProvider provider);
        static /*0x710d234*/ sbyte ToSByte(bool value);
        static /*0x710fefc*/ sbyte ToSByte(char value);
        static /*0x710ef84*/ sbyte ToSByte(byte value);
        static /*0x7113858*/ sbyte ToSByte(short value);
        static /*0x71138b8*/ sbyte ToSByte(ushort value);
        static /*0x7113914*/ sbyte ToSByte(int value);
        static /*0x711396c*/ sbyte ToSByte(uint value);
        static /*0x71139c4*/ sbyte ToSByte(long value);
        static /*0x7113a1c*/ sbyte ToSByte(ulong value);
        static /*0x7113a74*/ sbyte ToSByte(float value);
        static /*0x7113ad0*/ sbyte ToSByte(double value);
        static /*0x7113c30*/ sbyte ToSByte(decimal value);
        static /*0x7113ca4*/ sbyte ToSByte(string value, System.IFormatProvider provider);
        static /*0x7113cb4*/ byte ToByte(object value);
        static /*0x7113da8*/ byte ToByte(object value, System.IFormatProvider provider);
        static /*0x710d298*/ byte ToByte(bool value);
        static /*0x710ffb0*/ byte ToByte(char value);
        static /*0x7113eac*/ byte ToByte(sbyte value);
        static /*0x7113f00*/ byte ToByte(short value);
        static /*0x7113f5c*/ byte ToByte(ushort value);
        static /*0x7113fb8*/ byte ToByte(int value);
        static /*0x7114010*/ byte ToByte(uint value);
        static /*0x7114068*/ byte ToByte(long value);
        static /*0x71140c0*/ byte ToByte(ulong value);
        static /*0x7114118*/ byte ToByte(float value);
        static /*0x7114174*/ byte ToByte(double value);
        static /*0x71141d4*/ byte ToByte(decimal value);
        static /*0x7114248*/ byte ToByte(string value);
        static /*0x71142bc*/ byte ToByte(string value, System.IFormatProvider provider);
        static /*0x71142d0*/ short ToInt16(object value);
        static /*0x71143c4*/ short ToInt16(object value, System.IFormatProvider provider);
        static /*0x710d2fc*/ short ToInt16(bool value);
        static /*0x7110064*/ short ToInt16(char value);
        static /*0x71144c8*/ short ToInt16(sbyte value);
        static /*0x710f038*/ short ToInt16(byte value);
        static /*0x71144d0*/ short ToInt16(ushort value);
        static /*0x7114524*/ short ToInt16(int value);
        static /*0x711457c*/ short ToInt16(uint value);
        static /*0x71145d4*/ short ToInt16(long value);
        static /*0x711462c*/ short ToInt16(ulong value);
        static /*0x7114684*/ short ToInt16(float value);
        static /*0x71146e0*/ short ToInt16(double value);
        static /*0x7114740*/ short ToInt16(decimal value);
        static /*0x71147b4*/ short ToInt16(string value, System.IFormatProvider provider);
        static /*0x71147cc*/ ushort ToUInt16(object value);
        static /*0x71148c0*/ ushort ToUInt16(object value, System.IFormatProvider provider);
        static /*0x710d360*/ ushort ToUInt16(bool value);
        static /*0x7110110*/ ushort ToUInt16(char value);
        static /*0x71149c4*/ ushort ToUInt16(sbyte value);
        static /*0x710f098*/ ushort ToUInt16(byte value);
        static /*0x7114a18*/ ushort ToUInt16(short value);
        static /*0x7114a6c*/ ushort ToUInt16(int value);
        static /*0x7114ac4*/ ushort ToUInt16(uint value);
        static /*0x7114b1c*/ ushort ToUInt16(long value);
        static /*0x7114b74*/ ushort ToUInt16(ulong value);
        static /*0x7114bcc*/ ushort ToUInt16(float value);
        static /*0x7114c28*/ ushort ToUInt16(double value);
        static /*0x7114c88*/ ushort ToUInt16(decimal value);
        static /*0x7114cfc*/ ushort ToUInt16(string value, System.IFormatProvider provider);
        static /*0x7114d14*/ int ToInt32(object value);
        static /*0x7114e08*/ int ToInt32(object value, System.IFormatProvider provider);
        static /*0x710d3c4*/ int ToInt32(bool value);
        static /*0x711016c*/ int ToInt32(char value);
        static /*0x710f0f8*/ int ToInt32(byte value);
        static /*0x7114f0c*/ int ToInt32(short value);
        static /*0x7114f14*/ int ToInt32(ushort value);
        static /*0x7114f1c*/ int ToInt32(uint value);
        static /*0x7114f70*/ int ToInt32(long value);
        static /*0x7114fc8*/ int ToInt32(ulong value);
        static /*0x7115020*/ int ToInt32(float value);
        static /*0x7113b30*/ int ToInt32(double value);
        static /*0x711507c*/ int ToInt32(decimal value);
        static /*0x71150f0*/ int ToInt32(string value);
        static /*0x7115168*/ int ToInt32(string value, System.IFormatProvider provider);
        static /*0x7115180*/ uint ToUInt32(object value);
        static /*0x7115274*/ uint ToUInt32(object value, System.IFormatProvider provider);
        static /*0x710d428*/ uint ToUInt32(bool value);
        static /*0x71101cc*/ uint ToUInt32(char value);
        static /*0x7115378*/ uint ToUInt32(sbyte value);
        static /*0x710f158*/ uint ToUInt32(byte value);
        static /*0x71153cc*/ uint ToUInt32(short value);
        static /*0x7115420*/ uint ToUInt32(ushort value);
        static /*0x7115428*/ uint ToUInt32(int value);
        static /*0x711547c*/ uint ToUInt32(long value);
        static /*0x71154d4*/ uint ToUInt32(ulong value);
        static /*0x711552c*/ uint ToUInt32(float value);
        static /*0x7115588*/ uint ToUInt32(double value);
        static /*0x7115630*/ uint ToUInt32(decimal value);
        static /*0x71156a4*/ uint ToUInt32(string value, System.IFormatProvider provider);
        static /*0x71156bc*/ long ToInt64(object value);
        static /*0x71157b0*/ long ToInt64(object value, System.IFormatProvider provider);
        static /*0x710d48c*/ long ToInt64(bool value);
        static /*0x711022c*/ long ToInt64(char value);
        static /*0x71158b4*/ long ToInt64(sbyte value);
        static /*0x710f1b8*/ long ToInt64(byte value);
        static /*0x71158bc*/ long ToInt64(short value);
        static /*0x71158c4*/ long ToInt64(ushort value);
        static /*0x71158cc*/ long ToInt64(int value);
        static /*0x71158d4*/ long ToInt64(uint value);
        static /*0x71158dc*/ long ToInt64(ulong value);
        static /*0x7115930*/ long ToInt64(float value);
        static /*0x711598c*/ long ToInt64(double value);
        static /*0x7115a9c*/ long ToInt64(decimal value);
        static /*0x7115b10*/ long ToInt64(string value);
        static /*0x7115b88*/ long ToInt64(string value, System.IFormatProvider provider);
        static /*0x7115ba0*/ ulong ToUInt64(object value);
        static /*0x7115c94*/ ulong ToUInt64(object value, System.IFormatProvider provider);
        static /*0x710d4f0*/ ulong ToUInt64(bool value);
        static /*0x711028c*/ ulong ToUInt64(char value);
        static /*0x7115d98*/ ulong ToUInt64(sbyte value);
        static /*0x710f218*/ ulong ToUInt64(byte value);
        static /*0x7115dec*/ ulong ToUInt64(short value);
        static /*0x7115e40*/ ulong ToUInt64(ushort value);
        static /*0x7115e48*/ ulong ToUInt64(int value);
        static /*0x7115e9c*/ ulong ToUInt64(uint value);
        static /*0x7115ea4*/ ulong ToUInt64(long value);
        static /*0x7115ef8*/ ulong ToUInt64(float value);
        static /*0x7115f54*/ ulong ToUInt64(double value);
        static /*0x7116050*/ ulong ToUInt64(decimal value);
        static /*0x71160c4*/ ulong ToUInt64(string value, System.IFormatProvider provider);
        static /*0x71160dc*/ float ToSingle(object value);
        static /*0x71161d0*/ float ToSingle(object value, System.IFormatProvider provider);
        static /*0x71162d4*/ float ToSingle(sbyte value);
        static /*0x710f278*/ float ToSingle(byte value);
        static /*0x71162e0*/ float ToSingle(short value);
        static /*0x71162ec*/ float ToSingle(ushort value);
        static /*0x71162f8*/ float ToSingle(int value);
        static /*0x7116300*/ float ToSingle(uint value);
        static /*0x7116308*/ float ToSingle(long value);
        static /*0x7116310*/ float ToSingle(ulong value);
        static /*0x711631c*/ float ToSingle(double value);
        static /*0x7116324*/ float ToSingle(decimal value);
        static /*0x711638c*/ float ToSingle(string value);
        static /*0x7116404*/ float ToSingle(string value, System.IFormatProvider provider);
        static /*0x710d55c*/ float ToSingle(bool value);
        static /*0x7116420*/ double ToDouble(object value);
        static /*0x7116514*/ double ToDouble(object value, System.IFormatProvider provider);
        static /*0x7116618*/ double ToDouble(sbyte value);
        static /*0x710f2dc*/ double ToDouble(byte value);
        static /*0x7116624*/ double ToDouble(short value);
        static /*0x7116630*/ double ToDouble(ushort value);
        static /*0x711663c*/ double ToDouble(int value);
        static /*0x7116644*/ double ToDouble(uint value);
        static /*0x711664c*/ double ToDouble(long value);
        static /*0x7116654*/ double ToDouble(ulong value);
        static /*0x711665c*/ double ToDouble(float value);
        static /*0x7116664*/ double ToDouble(decimal value);
        static /*0x71166cc*/ double ToDouble(string value, System.IFormatProvider provider);
        static /*0x710d5d4*/ double ToDouble(bool value);
        static /*0x71166e8*/ decimal ToDecimal(object value);
        static /*0x7116804*/ decimal ToDecimal(object value, System.IFormatProvider provider);
        static /*0x711692c*/ decimal ToDecimal(sbyte value);
        static /*0x710f340*/ decimal ToDecimal(byte value);
        static /*0x7116984*/ decimal ToDecimal(short value);
        static /*0x71169dc*/ decimal ToDecimal(ushort value);
        static /*0x7116a34*/ decimal ToDecimal(int value);
        static /*0x7116a8c*/ decimal ToDecimal(uint value);
        static /*0x7116ae4*/ decimal ToDecimal(long value);
        static /*0x7116b3c*/ decimal ToDecimal(ulong value);
        static /*0x7116b94*/ decimal ToDecimal(float value);
        static /*0x7116bf4*/ decimal ToDecimal(double value);
        static /*0x7116c54*/ decimal ToDecimal(string value, System.IFormatProvider provider);
        static /*0x7116cdc*/ decimal ToDecimal(decimal value);
        static /*0x710d644*/ decimal ToDecimal(bool value);
        static /*0x7116ce0*/ System.DateTime ToDateTime(object value, System.IFormatProvider provider);
        static /*0x7116e10*/ System.DateTime ToDateTime(string value, System.IFormatProvider provider);
        static /*0x7116ea0*/ string ToString(object value);
        static /*0x7116ef8*/ string ToString(object value, System.IFormatProvider provider);
        static /*0x711708c*/ string ToString(bool value, System.IFormatProvider provider);
        static /*0x71170c4*/ string ToString(char value, System.IFormatProvider provider);
        static /*0x71170f8*/ string ToString(int value);
        static /*0x7117160*/ string ToString(int value, System.IFormatProvider provider);
        static /*0x711717c*/ byte ToByte(string value, int fromBase);
        static /*0x7117284*/ sbyte ToSByte(string value, int fromBase);
        static /*0x711739c*/ short ToInt16(string value, int fromBase);
        static /*0x71174b4*/ ushort ToUInt16(string value, int fromBase);
        static /*0x71175bc*/ int ToInt32(string value, int fromBase);
        static /*0x7117690*/ uint ToUInt32(string value, int fromBase);
        static /*0x7117764*/ long ToInt64(string value, int fromBase);
        static /*0x7117838*/ ulong ToUInt64(string value, int fromBase);
        static /*0x711790c*/ string ToString(byte value, int toBase);
        static /*0x7117990*/ string ToString(int value, int toBase);
        static /*0x7117a10*/ string ToString(long value, int toBase);
        static /*0x7117a90*/ string ToBase64String(byte[] inArray);
        static /*0x7117ce8*/ string ToBase64String(byte[] inArray, int offset, int length);
        static /*0x7117d58*/ string ToBase64String(byte[] inArray, int offset, int length, System.Base64FormattingOptions options);
        static /*0x7117b44*/ string ToBase64String(System.ReadOnlySpan<byte> bytes, System.Base64FormattingOptions options);
        static /*0x71181e8*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);
        static /*0x7118270*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, System.Base64FormattingOptions options);
        static /*0x7117fa4*/ int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks);
        static /*0x7117ef4*/ int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks);
        static /*0x711857c*/ byte[] FromBase64String(string s);
        static /*0x71187b8*/ bool TryFromBase64Chars(System.ReadOnlySpan<char> chars, System.Span<byte> bytes, ref int bytesWritten);
        static /*0x7118c8c*/ void CopyToTempBufferWithoutWhiteSpace(System.ReadOnlySpan<char> chars, System.Span<char> tempBuffer, ref int consumed, ref int charsWritten);
        static /*0x7118db0*/ bool IsSpace(char c);
        static /*0x7118ddc*/ byte[] FromBase64CharArray(char[] inArray, int offset, int length);
        static /*0x7118630*/ byte[] FromBase64CharPtr(char* inputPtr, int inputLength);
        static /*0x7118fcc*/ int FromBase64_ComputeResultLength(char* inputPtr, int inputLength);
    }

    enum Base64FormattingOptions
    {
        None = 0,
        InsertLineBreaks = 1,
    }

    class CurrentSystemTimeZone : System.TimeZone
    {
        /*0x10*/ long m_ticksOffset;
        /*0x18*/ string m_standardName;
        /*0x20*/ string m_daylightName;
        /*0x28*/ System.Collections.Hashtable m_CachedDaylightChanges;

        static /*0x7180ecc*/ System.Globalization.DaylightTime CreateDaylightChanges(int year);
        static /*0x7181270*/ bool GetTimeZoneData(int year, ref long[] data, ref string[] names, ref bool daylight_inverted);
        /*0x7180280*/ CurrentSystemTimeZone();
        /*0x7180390*/ long GetUtcOffsetFromUniversalTime(System.DateTime time, ref bool isAmbiguousLocalDst);
        /*0x71808d0*/ System.DateTime ToLocalTime(System.DateTime time);
        /*0x7180c20*/ System.Globalization.DaylightTime GetDaylightChanges(int year);
        /*0x7181170*/ System.TimeSpan GetUtcOffset(System.DateTime time);
        /*0x7180cec*/ System.Globalization.DaylightTime GetCachedDaylightChanges(int year);
    }

    class DBNull : System.Runtime.Serialization.ISerializable, System.IConvertible
    {
        static /*0x0*/ System.DBNull Value;

        static /*0x71817b0*/ DBNull();
        /*0x7181274*/ DBNull();
        /*0x718127c*/ DBNull(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71812d0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71812e0*/ string ToString();
        /*0x71812f8*/ string ToString(System.IFormatProvider provider);
        /*0x7181310*/ System.TypeCode GetTypeCode();
        /*0x7181318*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x7181364*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71813b0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71813fc*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7181448*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7181494*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71814e0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x718152c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7181578*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71815c4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x7181610*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x718165c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71816a8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71816f4*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x7181740*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct DateTime : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<System.DateTime>, System.IEquatable<System.DateTime>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable
    {
        static long TicksPerMillisecond = 10000;
        static long TicksPerSecond = 10000000;
        static long TicksPerMinute = 600000000;
        static long TicksPerHour = 36000000000;
        static long TicksPerDay = 864000000000;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static int DaysPerYear = 365;
        static int DaysPer4Years = 1461;
        static int DaysPer100Years = 36524;
        static int DaysPer400Years = 146097;
        static int DaysTo1601 = 584388;
        static int DaysTo1899 = 693593;
        static int DaysTo1970 = 719162;
        static int DaysTo10000 = 3652059;
        static long MinTicks = 0;
        static long MaxTicks = 3155378975999999999;
        static long MaxMillis = 315537897600000;
        static long UnixEpochTicks = 621355968000000000;
        static long FileTimeOffset = 504911232000000000;
        static long DoubleDateOffset = 599264352000000000;
        static long OADateMinAsTicks = 31241376000000000;
        static double OADateMinAsDouble = -657435;
        static double OADateMaxAsDouble = 2958466;
        static int DatePartYear = 0;
        static int DatePartDayOfYear = 1;
        static int DatePartMonth = 2;
        static int DatePartDay = 3;
        static ulong TicksMask = 4611686018427387903;
        static ulong FlagsMask = 13835058055282163712;
        static ulong LocalMask = 9223372036854775808;
        static long TicksCeiling = 4611686018427387904;
        static ulong KindUnspecified = 0;
        static ulong KindUtc = 4611686018427387904;
        static ulong KindLocal = 9223372036854775808;
        static ulong KindLocalAmbiguousDst = 13835058055282163712;
        static int KindShift = 62;
        static string TicksField = "ticks";
        static string DateDataField = "dateData";
        static /*0x0*/ int[] s_daysToMonth365;
        static /*0x8*/ int[] s_daysToMonth366;
        static /*0x10*/ System.DateTime MinValue;
        static /*0x18*/ System.DateTime MaxValue;
        static /*0x20*/ System.DateTime UnixEpoch;
        /*0x10*/ ulong _dateData;

        static /*0x7186588*/ DateTime();
        static /*0x7183154*/ int Compare(System.DateTime t1, System.DateTime t2);
        static /*0x718192c*/ long DateToTicks(int year, int month, int day);
        static /*0x7181b90*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x7182ef0*/ int DaysInMonth(int year, int month);
        static /*0x718350c*/ System.DateTime FromBinary(long dateData);
        static /*0x7183778*/ System.DateTime FromBinaryRaw(long dateData);
        static /*0x71837fc*/ System.DateTime FromFileTime(long fileTime);
        static /*0x718386c*/ System.DateTime FromFileTimeUtc(long fileTime);
        static /*0x7183a68*/ System.DateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind);
        static /*0x7184210*/ System.DateTime get_Now();
        static /*0x7183328*/ bool IsLeapYear(int year);
        static /*0x71844a4*/ System.DateTime Parse(string s);
        static /*0x7184678*/ System.DateTime Parse(string s, System.IFormatProvider provider);
        static /*0x718476c*/ System.DateTime Parse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles);
        static /*0x718489c*/ System.DateTime ParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x7184b3c*/ System.DateTime ParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x7185374*/ bool TryParse(string s, ref System.DateTime result);
        static /*0x718557c*/ bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x71856c0*/ bool TryParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x7185978*/ System.DateTime op_Addition(System.DateTime d, System.TimeSpan t);
        static /*0x7180694*/ System.DateTime op_Subtraction(System.DateTime d, System.TimeSpan t);
        static /*0x7185a78*/ System.TimeSpan op_Subtraction(System.DateTime d1, System.DateTime d2);
        static /*0x7185ae0*/ bool op_Equality(System.DateTime d1, System.DateTime d2);
        static /*0x7185b48*/ bool op_Inequality(System.DateTime d1, System.DateTime d2);
        static /*0x71807f8*/ bool op_LessThan(System.DateTime t1, System.DateTime t2);
        static /*0x7185bb0*/ bool op_LessThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x718078c*/ bool op_GreaterThan(System.DateTime t1, System.DateTime t2);
        static /*0x7180864*/ bool op_GreaterThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x718638c*/ bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, ref System.DateTime result);
        static /*0x7184338*/ System.DateTime get_UtcNow();
        static /*0x718657c*/ long GetSystemTimeAsFileTime();
        /*0x7181818*/ DateTime(long ticks);
        /*0x71818a4*/ DateTime(ulong dateData);
        /*0x7180aa0*/ DateTime(long ticks, System.DateTimeKind kind);
        /*0x7180b80*/ DateTime(long ticks, System.DateTimeKind kind, bool isAmbiguousDst);
        /*0x71818ac*/ DateTime(int year, int month, int day);
        /*0x7181ae4*/ DateTime(int year, int month, int day, int hour, int minute, int second);
        /*0x7181c64*/ DateTime(int year, int month, int day, int hour, int minute, int second, System.DateTimeKind kind);
        /*0x7181d7c*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
        /*0x7181f44*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.DateTimeKind kind);
        /*0x7182164*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);
        /*0x7182390*/ DateTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7182654*/ long get_InternalTicks();
        /*0x7182660*/ ulong get_InternalKind();
        /*0x718266c*/ System.DateTime Add(System.TimeSpan value);
        /*0x71827d8*/ System.DateTime Add(double value, int scale);
        /*0x7182900*/ System.DateTime AddDays(double value);
        /*0x718296c*/ System.DateTime AddHours(double value);
        /*0x71829d8*/ System.DateTime AddMilliseconds(double value);
        /*0x7182a40*/ System.DateTime AddMinutes(double value);
        /*0x7182aa8*/ System.DateTime AddMonths(int months);
        /*0x718301c*/ System.DateTime AddSeconds(double value);
        /*0x71826d0*/ System.DateTime AddTicks(long value);
        /*0x7183084*/ System.DateTime AddYears(int value);
        /*0x71831cc*/ int CompareTo(object value);
        /*0x71832c0*/ int CompareTo(System.DateTime value);
        /*0x71833f0*/ bool Equals(object value);
        /*0x71834a0*/ bool Equals(System.DateTime value);
        /*0x7183970*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7183adc*/ long ToBinary();
        /*0x7183be4*/ System.DateTime get_Date();
        /*0x7183c6c*/ int GetDatePart(int part);
        /*0x7182cf8*/ void GetDatePart(ref int year, ref int month, ref int day);
        /*0x7183e68*/ int get_Day();
        /*0x7183ec0*/ System.DayOfWeek get_DayOfWeek();
        /*0x7183f58*/ int GetHashCode();
        /*0x7183fb4*/ int get_Hour();
        /*0x718403c*/ bool IsAmbiguousDaylightSavingTime();
        /*0x71809d4*/ System.DateTimeKind get_Kind();
        /*0x718409c*/ int get_Millisecond();
        /*0x7184130*/ int get_Minute();
        /*0x71841b8*/ int get_Month();
        /*0x718439c*/ int get_Second();
        /*0x7180a48*/ long get_Ticks();
        /*0x7184424*/ System.TimeSpan get_TimeOfDay();
        /*0x718063c*/ int get_Year();
        /*0x7184d74*/ System.TimeSpan Subtract(System.DateTime value);
        /*0x7183918*/ System.DateTime ToLocalTime();
        /*0x7184de0*/ System.DateTime ToLocalTime(bool throwOnOverflow);
        /*0x7184f9c*/ string ToString();
        /*0x7185074*/ string ToString(string format);
        /*0x71850e0*/ string ToString(System.IFormatProvider provider);
        /*0x718514c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71851bc*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x7185314*/ System.DateTime ToUniversalTime();
        /*0x7185c1c*/ System.TypeCode GetTypeCode();
        /*0x7185c24*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x7185ca8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x7185d2c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x7185db0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7185e34*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7185eb8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7185f3c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x7185fc0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x7186044*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71860c8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x718614c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71861d0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x7186254*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71862d8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71862e0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x7186580*/ long ToBinaryRaw();
    }

    enum DateTimeKind
    {
        Unspecified = 0,
        Utc = 1,
        Local = 2,
    }

    struct DateTimeOffset : System.IComparable, System.IFormattable, System.IComparable<System.DateTimeOffset>, System.IEquatable<System.DateTimeOffset>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static /*0x0*/ System.DateTimeOffset MinValue;
        static /*0x10*/ System.DateTimeOffset MaxValue;
        static /*0x20*/ System.DateTimeOffset UnixEpoch;
        /*0x10*/ System.DateTime _dateTime;
        /*0x18*/ short _offsetMinutes;

        static /*0x7189fd4*/ DateTimeOffset();
        static /*0x7186f5c*/ System.DateTimeOffset get_Now();
        static /*0x7186fc8*/ System.DateTimeOffset get_UtcNow();
        static /*0x7187a30*/ int Compare(System.DateTimeOffset first, System.DateTimeOffset second);
        static /*0x7187e9c*/ System.DateTimeOffset FromFileTime(long fileTime);
        static /*0x7187f10*/ System.DateTimeOffset FromUnixTimeSeconds(long seconds);
        static /*0x71884e4*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider);
        static /*0x7188554*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x71888d4*/ System.DateTimeOffset ParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x7189738*/ bool TryParse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x7189a4c*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x7186750*/ short ValidateOffset(System.TimeSpan offset);
        static /*0x71868a8*/ System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset);
        static /*0x7188700*/ System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
        static /*0x7189dc0*/ System.DateTimeOffset op_Implicit(System.DateTime dateTime);
        static /*0x7189de8*/ System.TimeSpan op_Subtraction(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x7189e8c*/ bool op_Equality(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x7189f30*/ bool op_Inequality(System.DateTimeOffset left, System.DateTimeOffset right);
        /*0x7186698*/ DateTimeOffset(long ticks, System.TimeSpan offset);
        /*0x71869c4*/ DateTimeOffset(System.DateTime dateTime);
        /*0x7186ad8*/ DateTimeOffset(System.DateTime dateTime, System.TimeSpan offset);
        /*0x7186cd0*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, System.TimeSpan offset);
        /*0x7186d9c*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.TimeSpan offset);
        /*0x7186e78*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, System.TimeSpan offset);
        /*0x71882c0*/ DateTimeOffset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7187034*/ System.DateTime get_DateTime();
        /*0x718715c*/ System.DateTime get_UtcDateTime();
        /*0x71871b8*/ System.DateTime get_LocalDateTime();
        /*0x7187250*/ System.DateTimeOffset ToOffset(System.TimeSpan offset);
        /*0x7187088*/ System.DateTime get_ClockDateTime();
        /*0x7187318*/ int get_Day();
        /*0x71873b0*/ int get_Hour();
        /*0x7187448*/ int get_Millisecond();
        /*0x71874e0*/ int get_Minute();
        /*0x7187578*/ int get_Month();
        /*0x71872ec*/ System.TimeSpan get_Offset();
        /*0x7187610*/ int get_Second();
        /*0x71876a8*/ long get_Ticks();
        /*0x7187740*/ System.TimeSpan get_TimeOfDay();
        /*0x71877d8*/ int get_Year();
        /*0x7187870*/ System.DateTimeOffset Add(System.TimeSpan timeSpan);
        /*0x7187950*/ System.DateTimeOffset AddTicks(long ticks);
        /*0x7187ad4*/ int System.IComparable.CompareTo(object obj);
        /*0x7187c20*/ int CompareTo(System.DateTimeOffset other);
        /*0x7187cf4*/ bool Equals(object obj);
        /*0x7187dec*/ bool Equals(System.DateTimeOffset other);
        /*0x7188078*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x71881f8*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x718844c*/ int GetHashCode();
        /*0x7188c40*/ System.TimeSpan Subtract(System.DateTimeOffset value);
        /*0x7188cec*/ System.DateTimeOffset ToLocalTime();
        /*0x7188d44*/ System.DateTimeOffset ToLocalTime(bool throwOnOverflow);
        /*0x7188e00*/ string ToString();
        /*0x718916c*/ string ToString(string format);
        /*0x718922c*/ string ToString(System.IFormatProvider formatProvider);
        /*0x71892ec*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x71893b8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
        /*0x71896c4*/ System.DateTimeOffset ToUniversalTime();
    }

    enum DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    class DivideByZeroException : System.ArithmeticException
    {
        /*0x718a0d8*/ DivideByZeroException();
        /*0x718a134*/ DivideByZeroException(string message);
        /*0x718a158*/ DivideByZeroException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class DllNotFoundException : System.TypeLoadException
    {
        /*0x718a160*/ DllNotFoundException();
        /*0x718a1bc*/ DllNotFoundException(string message);
        /*0x718a1e0*/ DllNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Double : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<double>, System.IEquatable<double>, System.ISpanFormattable
    {
        /*0x10*/ double m_value;

        static /*0x718a1e8*/ bool IsFinite(double d);
        static /*0x718a1fc*/ bool IsInfinity(double d);
        static /*0x718a214*/ bool IsNaN(double d);
        static /*0x718a22c*/ bool IsNegative(double d);
        static /*0x718a238*/ bool IsNegativeInfinity(double d);
        static /*0x718a24c*/ bool IsPositiveInfinity(double d);
        static /*0x718a760*/ double Parse(string s);
        static /*0x718a824*/ double Parse(string s, System.IFormatProvider provider);
        static /*0x718a8f8*/ double Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x718a9dc*/ bool TryParse(string s, ref double result);
        static /*0x718ad14*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref double result);
        static /*0x718aa5c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref double result);
        /*0x718a260*/ int CompareTo(object value);
        /*0x718a338*/ int CompareTo(double value);
        /*0x718a394*/ bool Equals(object obj);
        /*0x718a414*/ bool Equals(double obj);
        /*0x718a460*/ int GetHashCode();
        /*0x718a480*/ string ToString();
        /*0x718a4fc*/ string ToString(string format);
        /*0x718a584*/ string ToString(System.IFormatProvider provider);
        /*0x718a610*/ string ToString(string format, System.IFormatProvider provider);
        /*0x718a6a0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x718adbc*/ System.TypeCode GetTypeCode();
        /*0x718adc4*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x718ae28*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x718aeac*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x718af10*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x718af74*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x718afd8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x718b03c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x718b0a0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x718b104*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x718b168*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x718b1cc*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x718b230*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x718b238*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x718b29c*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x718b320*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class EntryPointNotFoundException : System.TypeLoadException
    {
        /*0x718b3c0*/ EntryPointNotFoundException();
        /*0x718b41c*/ EntryPointNotFoundException(string message);
        /*0x718b440*/ EntryPointNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class EventArgs
    {
        static /*0x0*/ System.EventArgs Empty;

        static /*0x718b450*/ EventArgs();
        /*0x718b448*/ EventArgs();
    }

    class EventHandler : System.MulticastDelegate
    {
        /*0x718b4b8*/ EventHandler(object object, nint method);
        /*0x718b5c4*/ void Invoke(object sender, System.EventArgs e);
    }

    class EventHandler<TEventArgs> : System.MulticastDelegate
    {
        EventHandler(object object, nint method);
        /*0x3907c14*/ void Invoke(object sender, TEventArgs e);
    }

    class ExecutionEngineException : System.SystemException
    {
        /*0x718b5d8*/ ExecutionEngineException();
        /*0x718b634*/ ExecutionEngineException(string message);
        /*0x718b658*/ ExecutionEngineException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FieldAccessException : System.MemberAccessException
    {
        /*0x718b660*/ FieldAccessException();
        /*0x718b6bc*/ FieldAccessException(string message);
        /*0x718b6e0*/ FieldAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FlagsAttribute : System.Attribute
    {
        /*0x718b6e8*/ FlagsAttribute();
    }

    class FormatException : System.SystemException
    {
        /*0x718b6f0*/ FormatException();
        /*0x718b74c*/ FormatException(string message);
        /*0x718b770*/ FormatException(string message, System.Exception innerException);
        /*0x718b794*/ FormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FormattableString : System.IFormattable
    {
        /*0x718b818*/ FormattableString();
        /*0x380b9e8*/ string get_Format();
        /*0x380b9e8*/ object[] GetArguments();
        /*0x380b6a0*/ int get_ArgumentCount();
        /*0x380ba90*/ object GetArgument(int index);
        /*0x380bb68*/ string ToString(System.IFormatProvider formatProvider);
        /*0x718b79c*/ string System.IFormattable.ToString(string ignored, System.IFormatProvider formatProvider);
        /*0x718b7b0*/ string ToString();
    }

    class Gen2GcCallback : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    {
        /*0x10*/ System.Func<object, bool> _callback;
        /*0x18*/ System.Runtime.InteropServices.GCHandle _weakTargetObj;

        static /*0x718b828*/ void Register(System.Func<object, bool> callback, object targetObj);
        /*0x718b820*/ Gen2GcCallback();
        /*0x718b8b4*/ void Setup(System.Func<object, bool> callback, object targetObj);
        /*0x718b8f0*/ void Finalize();
    }

    class DateTimeFormat
    {
        static /*0x0*/ System.TimeSpan NullOffset;
        static /*0x8*/ char[] allStandardFormats;
        static /*0x10*/ System.Globalization.DateTimeFormatInfo InvariantFormatInfo;
        static /*0x18*/ string[] InvariantAbbreviatedMonthNames;
        static /*0x20*/ string[] InvariantAbbreviatedDayNames;
        static /*0x28*/ string[] fixedNumberFormats;

        static /*0x718ece8*/ DateTimeFormat();
        static /*0x718bb00*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len);
        static /*0x718bb70*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit);
        static /*0x718bc68*/ void HebrewFormatDigits(System.Text.StringBuilder outputBuffer, int digits);
        static /*0x718bce4*/ int ParseRepeatPattern(System.ReadOnlySpan<char> format, int pos, char patternChar);
        static /*0x718bd6c*/ string FormatDayOfWeek(int dayOfWeek, int repeat, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x718bda0*/ string FormatMonth(int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x718bdd4*/ string FormatHebrewMonthName(System.DateTime time, int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x718be94*/ int ParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result);
        static /*0x718c03c*/ int ParseNextChar(System.ReadOnlySpan<char> format, int pos);
        static /*0x718c0ac*/ bool IsUseGenitiveForm(System.ReadOnlySpan<char> format, int index, int tokenLen, char patternToMatch);
        static /*0x718c204*/ System.Text.StringBuilder FormatCustomized(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x718d33c*/ void FormatCustomizedTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.ReadOnlySpan<char> format, int tokenLen, bool timeOnly, System.Text.StringBuilder result);
        static /*0x718d6dc*/ void FormatCustomizedRoundripTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x718d92c*/ void Append2DigitNumber(System.Text.StringBuilder result, int val);
        static /*0x718d988*/ string GetRealFormat(System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x718dc2c*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.DateTime dateTime, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.TimeSpan offset);
        static /*0x7184ffc*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider);
        static /*0x7188ebc*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0x718525c*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71894b8*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0x718e824*/ System.Text.StringBuilder FormatStringBuilder(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset);
        static /*0x718dfe4*/ bool TryFormatO(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0x718e4c0*/ bool TryFormatR(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0x718eb50*/ void WriteTwoDecimalDigits(uint value, System.Span<char> destination, int offset);
        static /*0x718eb9c*/ void WriteFourDecimalDigits(uint value, System.Span<char> buffer, int startingIndex);
        static /*0x718ec3c*/ void WriteDigits(ulong value, System.Span<char> buffer);
        static /*0x718dfe0*/ void InvalidFormatForLocal(System.ReadOnlySpan<char> format, System.DateTime dateTime);
    }

    class DateTimeParse
    {
        static /*0x0*/ System.DateTimeParse.MatchNumberDelegate m_hebrewNumberParser;
        static /*0x8*/ System.DateTimeParse.DS[][] dateParsingStates;

        static /*0x7198420*/ DateTimeParse();
        static /*0x7184a34*/ System.DateTime ParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x7188aec*/ System.DateTime ParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.TimeSpan offset);
        static /*0x7185850*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x7189c44*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x718f01c*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x7184c7c*/ System.DateTime ParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x718fb34*/ bool TryParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x718fd9c*/ bool MatchWord(ref System.__DTString str, string target);
        static /*0x718ff48*/ bool GetTimeZoneName(ref System.__DTString str);
        static /*0x718fff8*/ bool IsDigit(char ch);
        static /*0x719000c*/ bool ParseFraction(ref System.__DTString str, ref double result);
        static /*0x71900f8*/ bool ParseTimeZone(ref System.__DTString str, ref System.TimeSpan result);
        static /*0x719040c*/ bool HandleTimeZone(ref System.__DTString str, ref System.DateTimeResult result);
        static /*0x7190598*/ bool Lex(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeToken dtok, ref System.DateTimeRawInfo raw, ref System.DateTimeResult result, ref System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x71916a8*/ System.Globalization.Calendar GetJapaneseCalendarDefaultInstance();
        static /*0x7191790*/ System.Globalization.Calendar GetTaiwanCalendarDefaultInstance();
        static /*0x7191878*/ bool VerifyValidPunctuation(ref System.__DTString str);
        static /*0x7191a38*/ bool GetYearMonthDayOrder(string datePattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x7191cdc*/ bool GetYearMonthOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x7191e98*/ bool GetMonthDayOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x7192094*/ bool TryAdjustYear(ref System.DateTimeResult result, int year, ref int adjustedYear);
        static /*0x7192158*/ bool SetDateYMD(ref System.DateTimeResult result, int year, int month, int day);
        static /*0x71921c8*/ bool SetDateMDY(ref System.DateTimeResult result, int month, int day, int year);
        static /*0x7192244*/ bool SetDateDMY(ref System.DateTimeResult result, int day, int month, int year);
        static /*0x71922c0*/ bool SetDateYDM(ref System.DateTimeResult result, int year, int day, int month);
        static /*0x719233c*/ void GetDefaultYear(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x71924d8*/ bool GetDayOfNN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x719264c*/ bool GetDayOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7192900*/ bool GetDayOfMN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7192b24*/ bool GetHebrewDayOfNM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7192c80*/ bool GetDayOfNM(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7192ea4*/ bool GetDayOfMNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7193188*/ bool GetDayOfYNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71932c0*/ bool GetDayOfNNY(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7193434*/ bool GetDayOfYMN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71934f0*/ bool GetDayOfYN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71935ac*/ bool GetDayOfYM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x7193648*/ void AdjustTimeMark(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeRawInfo raw);
        static /*0x7193708*/ bool AdjustHour(ref int hour, System.DateTimeParse.TM timeMark);
        static /*0x7193750*/ bool GetTimeOfN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71937ac*/ bool GetTimeOfNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x719381c*/ bool GetTimeOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71938a0*/ bool GetDateOfDSN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71938f4*/ bool GetDateOfNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x71939a8*/ bool GetDateOfNNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7193bd4*/ bool ProcessDateTimeSuffix(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, ref System.DateTimeToken dtok);
        static /*0x7193ccc*/ bool ProcessHebrewTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x719132c*/ bool ProcessTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x7184588*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x71887cc*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.TimeSpan offset);
        static /*0x718546c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x71898e8*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x7194048*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x71950a0*/ bool DetermineTimeZoneAdjustments(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles, bool bTimeOnly);
        static /*0x71952ec*/ bool DateTimeOffsetTimeZonePostProcessing(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles);
        static /*0x7195524*/ bool AdjustTimeZoneToUniversal(ref System.DateTimeResult result);
        static /*0x719564c*/ bool AdjustTimeZoneToLocal(ref System.DateTimeResult result, bool bTimeOnly);
        static /*0x7194808*/ bool ParseISO8601(ref System.DateTimeRawInfo raw, ref System.__DTString str, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x7195970*/ bool MatchHebrewDigits(ref System.__DTString str, int digitLen, ref int number);
        static /*0x71958e8*/ bool ParseDigits(ref System.__DTString str, int digitLen, ref int result);
        static /*0x7195a80*/ bool ParseDigits(ref System.__DTString str, int minDigitLen, int maxDigitLen, ref int result);
        static /*0x7195c24*/ bool ParseFractionExact(ref System.__DTString str, int maxDigitLen, ref double result);
        static /*0x7195e8c*/ bool ParseSign(ref System.__DTString str, ref bool result);
        static /*0x7195f44*/ bool ParseTimeZoneOffset(ref System.__DTString str, int len, ref System.TimeSpan result);
        static /*0x7196110*/ bool MatchAbbreviatedMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71962ec*/ bool MatchMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x719651c*/ bool MatchAbbreviatedDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x7196680*/ bool MatchDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x71967e4*/ bool MatchEraName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x7196980*/ bool MatchTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x7196b18*/ bool MatchAbbreviatedTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x7196c68*/ bool CheckNewValue(ref int currentValue, int newValue, char patternChar, ref System.DateTimeResult result);
        static /*0x71923d8*/ System.DateTime GetDateTimeNow(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x7194e18*/ bool CheckDefaultDateTime(ref System.DateTimeResult result, ref System.Globalization.Calendar cal, System.Globalization.DateTimeStyles styles);
        static /*0x7196d18*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.ParsingInfo parseInfo, ref System.DateTimeResult result);
        static /*0x71970ec*/ bool ParseJapaneseEraStart(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x71971f4*/ bool ParseByFormat(ref System.__DTString str, ref System.__DTString format, ref System.ParsingInfo parseInfo, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x7198330*/ bool TryParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result, ref int returnValue);
        static /*0x718f2d4*/ bool DoStrictParse(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> formatParam, System.Globalization.DateTimeStyles styles, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x718f120*/ System.Exception GetDateTimeParseException(ref System.DateTimeResult result);

        class MatchNumberDelegate : System.MulticastDelegate
        {
            /*0x7198d04*/ MatchNumberDelegate(object object, nint method);
            /*0x7198db8*/ bool Invoke(ref System.__DTString str, int digitLen, ref int result);
        }

        enum DTT
        {
            End = 0,
            NumEnd = 1,
            NumAmpm = 2,
            NumSpace = 3,
            NumDatesep = 4,
            NumTimesep = 5,
            MonthEnd = 6,
            MonthSpace = 7,
            MonthDatesep = 8,
            NumDatesuff = 9,
            NumTimesuff = 10,
            DayOfWeek = 11,
            YearSpace = 12,
            YearDateSep = 13,
            YearEnd = 14,
            TimeZone = 15,
            Era = 16,
            NumUTCTimeMark = 17,
            Unk = 18,
            NumLocalTimeMark = 19,
            Max = 20,
        }

        enum TM
        {
            NotSet = -1,
            AM = 0,
            PM = 1,
        }

        enum DS
        {
            BEGIN = 0,
            N = 1,
            NN = 2,
            D_Nd = 3,
            D_NN = 4,
            D_NNd = 5,
            D_M = 6,
            D_MN = 7,
            D_NM = 8,
            D_MNd = 9,
            D_NDS = 10,
            D_Y = 11,
            D_YN = 12,
            D_YNd = 13,
            D_YM = 14,
            D_YMd = 15,
            D_S = 16,
            T_S = 17,
            T_Nt = 18,
            T_NNt = 19,
            ERROR = 20,
            DX_NN = 21,
            DX_NNN = 22,
            DX_MN = 23,
            DX_NM = 24,
            DX_MNN = 25,
            DX_DS = 26,
            DX_DSN = 27,
            DX_NDS = 28,
            DX_NNDS = 29,
            DX_YNN = 30,
            DX_YMN = 31,
            DX_YN = 32,
            DX_YM = 33,
            TX_N = 34,
            TX_NN = 35,
            TX_NNN = 36,
            TX_TS = 37,
            DX_NNY = 38,
        }

        class <>c
        {
            static /*0x0*/ System.DateTimeParse.<> <>9;
            static /*0x8*/ System.Func<System.DateTimeParse.MatchNumberDelegate> <>9__98_0;

            static /*0x7198dcc*/ <>c();
            /*0x7198e34*/ <>c();
            /*0x7198e3c*/ System.DateTimeParse.MatchNumberDelegate <DoStrictParse>b__98_0();
        }
    }

    struct __DTString
    {
        static /*0x0*/ char[] WhiteSpaceChecks;
        /*0x10*/ System.ReadOnlySpan<char> Value;
        /*0x20*/ int Index;
        /*0x24*/ char m_current;
        /*0x28*/ System.Globalization.CompareInfo m_info;
        /*0x30*/ bool m_checkDigitToken;

        static /*0x719ab14*/ __DTString();
        /*0x7198ee4*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi, bool checkDigitToken);
        /*0x7198f70*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi);
        /*0x7198ea8*/ int get_Length();
        /*0x7199034*/ System.Globalization.CompareInfo get_CompareInfo();
        /*0x719903c*/ bool GetNext();
        /*0x71990e8*/ bool AtEnd();
        /*0x7199168*/ bool Advance(int count);
        /*0x7199220*/ void GetRegularToken(ref System.TokenType tokenType, ref int tokenValue, System.Globalization.DateTimeFormatInfo dtfi);
        /*0x7199548*/ System.TokenType GetSeparatorToken(System.Globalization.DateTimeFormatInfo dtfi, ref int indexBeforeSeparator, ref char charBeforeSeparator);
        /*0x71997a8*/ bool MatchSpecifiedWord(string target);
        /*0x71998cc*/ bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength);
        /*0x7199d10*/ bool Match(string str);
        /*0x7199e60*/ bool Match(char ch);
        /*0x7199f34*/ int MatchLongestWords(string[] words, ref int maxMatchStrLen);
        /*0x719a030*/ int GetRepeatCount();
        /*0x719a10c*/ bool GetNextDigit();
        /*0x719a1e8*/ char GetChar();
        /*0x719a210*/ int GetDigit();
        /*0x719a23c*/ void SkipWhiteSpaces();
        /*0x719964c*/ bool SkipWhiteSpaceCurrent();
        /*0x719a328*/ void TrimTail();
        /*0x719a440*/ void RemoveTrailingInQuoteSpaces();
        /*0x719a660*/ void RemoveLeadingInQuoteSpaces();
        /*0x719a8e4*/ System.DTSubString GetSubString();
        /*0x719aa64*/ void ConsumeSubString(System.DTSubString sub);
    }

    enum DTSubStringType
    {
        Unknown = 0,
        Invalid = 1,
        Number = 2,
        End = 3,
        Other = 4,
    }

    struct DTSubString
    {
        /*0x10*/ System.ReadOnlySpan<char> s;
        /*0x20*/ int index;
        /*0x24*/ int length;
        /*0x28*/ System.DTSubStringType type;
        /*0x2c*/ int value;

        /*0x719aba8*/ char get_Item(int relativeIndex);
    }

    struct DateTimeToken
    {
        /*0x10*/ System.DateTimeParse.DTT dtt;
        /*0x14*/ System.TokenType suffix;
        /*0x18*/ int num;
    }

    struct DateTimeRawInfo
    {
        /*0x10*/ int* num;
        /*0x18*/ int numCount;
        /*0x1c*/ int month;
        /*0x20*/ int year;
        /*0x24*/ int dayOfWeek;
        /*0x28*/ int era;
        /*0x2c*/ System.DateTimeParse.TM timeMark;
        /*0x30*/ double fraction;
        /*0x38*/ bool hasSameDateAndTimeSeparators;

        /*0x719abd4*/ void Init(int* numberBuffer);
        /*0x719abf4*/ void AddNumber(int value);
        /*0x719ac0c*/ int GetNumber(int index);
    }

    enum ParseFailureKind
    {
        None = 0,
        ArgumentNull = 1,
        Format = 2,
        FormatWithParameter = 3,
        FormatWithOriginalDateTime = 4,
        FormatWithFormatSpecifier = 5,
        FormatWithOriginalDateTimeAndParameter = 6,
        FormatBadDateTimeCalendar = 7,
    }

    enum ParseFlags
    {
        HaveYear = 1,
        HaveMonth = 2,
        HaveDay = 4,
        HaveHour = 8,
        HaveMinute = 16,
        HaveSecond = 32,
        HaveTime = 64,
        HaveDate = 128,
        TimeZoneUsed = 256,
        TimeZoneUtc = 512,
        ParsedMonthName = 1024,
        CaptureOffset = 2048,
        YearDefault = 4096,
        Rfc1123Pattern = 8192,
        UtcSortPattern = 16384,
    }

    struct DateTimeResult
    {
        /*0x10*/ int Year;
        /*0x14*/ int Month;
        /*0x18*/ int Day;
        /*0x1c*/ int Hour;
        /*0x20*/ int Minute;
        /*0x24*/ int Second;
        /*0x28*/ double fraction;
        /*0x30*/ int era;
        /*0x34*/ System.ParseFlags flags;
        /*0x38*/ System.TimeSpan timeZoneOffset;
        /*0x40*/ System.Globalization.Calendar calendar;
        /*0x48*/ System.DateTime parsedDate;
        /*0x50*/ System.ParseFailureKind failure;
        /*0x58*/ string failureMessageID;
        /*0x60*/ object failureMessageFormatArgument;
        /*0x68*/ string failureArgumentName;
        /*0x70*/ System.ReadOnlySpan<char> originalDateTimeString;
        /*0x80*/ System.ReadOnlySpan<char> failedFormatSpecifier;

        /*0x719ac18*/ void Init(System.ReadOnlySpan<char> originalDateTimeString);
        /*0x719ac3c*/ void SetDate(int year, int month, int day);
        /*0x719ac48*/ void SetBadFormatSpecifierFailure();
        /*0x719acdc*/ void SetBadFormatSpecifierFailure(System.ReadOnlySpan<char> failedFormatSpecifier);
        /*0x719ad40*/ void SetBadDateTimeFailure();
        /*0x719ad90*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID);
        /*0x719ad9c*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
        /*0x719ada8*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName);
    }

    struct ParsingInfo
    {
        /*0x10*/ System.Globalization.Calendar calendar;
        /*0x18*/ int dayOfWeek;
        /*0x1c*/ System.DateTimeParse.TM timeMark;
        /*0x20*/ bool fUseHour12;
        /*0x21*/ bool fUseTwoDigitYear;
        /*0x22*/ bool fAllowInnerWhite;
        /*0x23*/ bool fAllowTrailingWhite;
        /*0x24*/ bool fCustomNumberParser;
        /*0x28*/ System.DateTimeParse.MatchNumberDelegate parseNumberDelegate;

        /*0x719adb8*/ void Init();
    }

    enum TokenType
    {
        NumberToken = 1,
        YearNumberToken = 2,
        Am = 3,
        Pm = 4,
        MonthToken = 5,
        EndOfString = 6,
        DayOfWeekToken = 7,
        TimeZoneToken = 8,
        EraToken = 9,
        DateWordToken = 10,
        UnknownToken = 11,
        HebrewNumber = 12,
        JapaneseEraToken = 13,
        TEraToken = 14,
        IgnorableSymbol = 15,
        SEP_Unk = 256,
        SEP_End = 512,
        SEP_Space = 768,
        SEP_Am = 1024,
        SEP_Pm = 1280,
        SEP_Date = 1536,
        SEP_Time = 1792,
        SEP_YearSuff = 2048,
        SEP_MonthSuff = 2304,
        SEP_DaySuff = 2560,
        SEP_HourSuff = 2816,
        SEP_MinuteSuff = 3072,
        SEP_SecondSuff = 3328,
        SEP_LocalTimeMark = 3584,
        SEP_DateOrOffset = 3840,
        RegularTokenMask = 255,
        SeparatorTokenMask = 65280,
    }

    struct Guid : System.IFormattable, System.IComparable, System.IComparable<System.Guid>, System.IEquatable<System.Guid>, System.ISpanFormattable
    {
        static /*0x0*/ System.Guid Empty;
        /*0x10*/ int _a;
        /*0x14*/ short _b;
        /*0x16*/ short _c;
        /*0x18*/ byte _d;
        /*0x19*/ byte _e;
        /*0x1a*/ byte _f;
        /*0x1b*/ byte _g;
        /*0x1c*/ byte _h;
        /*0x1d*/ byte _i;
        /*0x1e*/ byte _j;
        /*0x1f*/ byte _k;

        static /*0x719adc4*/ System.Guid NewGuid();
        static /*0x719b4b0*/ System.Guid Parse(string input);
        static /*0x719b544*/ System.Guid Parse(System.ReadOnlySpan<char> input);
        static /*0x719b5a8*/ bool TryParse(string input, ref System.Guid result);
        static /*0x719b634*/ bool TryParse(System.ReadOnlySpan<char> input, ref System.Guid result);
        static /*0x719b680*/ bool TryParseExact(string input, string format, ref System.Guid result);
        static /*0x719b744*/ bool TryParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, ref System.Guid result);
        static /*0x719b0f8*/ bool TryParseGuid(System.ReadOnlySpan<char> guidString, System.Guid.GuidStyles flags, ref System.Guid.GuidResult result);
        static /*0x719bb9c*/ bool TryParseGuidWithHexPrefix(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x719c1d8*/ bool TryParseGuidWithNoStyle(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x719b8b0*/ bool TryParseGuidWithDashes(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x719c89c*/ bool StringToShort(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x719cc34*/ bool StringToShort(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x719c870*/ bool StringToInt(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x719ca3c*/ bool StringToInt(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x719c8e0*/ bool StringToLong(System.ReadOnlySpan<char> str, ref int parsePos, int flags, ref long result, ref System.Guid.GuidResult parseResult);
        static /*0x719c570*/ System.ReadOnlySpan<char> EatAllWhitespace(System.ReadOnlySpan<char> str);
        static /*0x719c7a4*/ bool IsHexPrefix(System.ReadOnlySpan<char> str, int i);
        static /*0x719d3dc*/ bool op_Equality(System.Guid a, System.Guid b);
        static /*0x719d418*/ bool op_Inequality(System.Guid a, System.Guid b);
        static /*0x719d458*/ char HexToChar(int a);
        static /*0x719d474*/ int HexsToChars(char* guidChars, int a, int b);
        static /*0x719d4f0*/ int HexsToCharsHexOutput(char* guidChars, int a, int b);
        /*0x719ae10*/ Guid(byte[] b);
        /*0x719aea4*/ Guid(System.ReadOnlySpan<byte> b);
        /*0x719afc8*/ Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
        /*0x719b008*/ Guid(string g);
        /*0x719cc78*/ void WriteByteHelper(System.Span<byte> destination);
        /*0x719cd88*/ byte[] ToByteArray();
        /*0x719ce1c*/ string ToString();
        /*0x719d05c*/ int GetHashCode();
        /*0x719d074*/ bool Equals(object o);
        /*0x719d11c*/ bool Equals(System.Guid g);
        /*0x719d160*/ int GetResult(uint me, uint them);
        /*0x719d170*/ int CompareTo(object value);
        /*0x719d2f8*/ int CompareTo(System.Guid value);
        /*0x719d454*/ string ToString(string format);
        /*0x719ce64*/ string ToString(string format, System.IFormatProvider provider);
        /*0x719d58c*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format);
        /*0x719d9c8*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);

        enum GuidStyles
        {
            None = 0,
            AllowParenthesis = 1,
            AllowBraces = 2,
            AllowDashes = 4,
            AllowHexPrefix = 8,
            RequireParenthesis = 16,
            RequireBraces = 32,
            RequireDashes = 64,
            RequireHexPrefix = 128,
            HexFormat = 160,
            NumberFormat = 0,
            DigitFormat = 64,
            BraceFormat = 96,
            ParenthesisFormat = 80,
            Any = 15,
        }

        enum GuidParseThrowStyle
        {
            None = 0,
            All = 1,
            AllButOverflow = 2,
        }

        enum ParseFailureKind
        {
            None = 0,
            ArgumentNull = 1,
            Format = 2,
            FormatWithParameter = 3,
            NativeException = 4,
            FormatWithInnerException = 5,
        }

        struct GuidResult
        {
            /*0x10*/ System.Guid _parsedGuid;
            /*0x20*/ System.Guid.GuidParseThrowStyle _throwStyle;
            /*0x24*/ System.Guid.ParseFailureKind _failure;
            /*0x28*/ string _failureMessageID;
            /*0x30*/ object _failureMessageFormatArgument;
            /*0x38*/ string _failureArgumentName;
            /*0x40*/ System.Exception _innerException;

            /*0x719d9cc*/ void Init(System.Guid.GuidParseThrowStyle canThrow);
            /*0x719cc68*/ void SetFailure(System.Exception nativeException);
            /*0x719b8a0*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID);
            /*0x719c864*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0x719c4d4*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, System.Exception innerException);
            /*0x719b338*/ System.Exception GetGuidParseException();
        }
    }

    struct HashCode
    {
        static /*0x0*/ uint s_seed;
        /*0x10*/ uint _v1;
        /*0x14*/ uint _v2;
        /*0x18*/ uint _v3;
        /*0x1c*/ uint _v4;
        /*0x20*/ uint _queue1;
        /*0x24*/ uint _queue2;
        /*0x28*/ uint _queue3;
        /*0x2c*/ uint _length;

        static /*0x719e260*/ HashCode();
        static /*0x719d9d4*/ uint GenerateGlobalSeed();
        static /*0x3907c14*/ int Combine<T1>(T1 value1);
        static /*0x3907c14*/ int Combine<T1, T2>(T1 value1, T2 value2);
        static /*0x3907c14*/ int Combine<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4);
        static /*0x3907c14*/ int Combine<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
        static /*0x3907c14*/ int Combine<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
        static /*0x3907c14*/ int Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
        static /*0x719d9f8*/ uint Rol(uint value, int count);
        static /*0x719da04*/ void Initialize(ref uint v1, ref uint v2, ref uint v3, ref uint v4);
        static /*0x719dabc*/ uint Round(uint hash, uint input);
        static /*0x719db34*/ uint QueueRound(uint hash, uint queuedValue);
        static /*0x719dbac*/ uint MixState(uint v1, uint v2, uint v3, uint v4);
        static /*0x719dc50*/ uint MixEmptyState();
        static /*0x719dcb4*/ uint MixFinal(uint hash);
        /*0x3907c14*/ void Add<T>(T value);
        /*0x719dcdc*/ void Add(int value);
        /*0x719df74*/ int ToHashCode();
        /*0x719e1ac*/ int GetHashCode();
        /*0x719e218*/ bool Equals(object obj);
    }

    interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }

    interface IAsyncResult
    {
        /*0x380b128*/ bool get_IsCompleted();
        /*0x380b9e8*/ System.Threading.WaitHandle get_AsyncWaitHandle();
        /*0x380b9e8*/ object get_AsyncState();
        /*0x380b128*/ bool get_CompletedSynchronously();
    }

    interface ICloneable
    {
        /*0x380b9e8*/ object Clone();
    }

    interface IComparable
    {
        /*0x380b7a8*/ int CompareTo(object obj);
    }

    interface IComparable<T>
    {
        /*0x3907c14*/ int CompareTo(T other);
    }

    interface IConvertible
    {
        /*0x380b6a0*/ System.TypeCode GetTypeCode();
        /*0x380b2f0*/ bool ToBoolean(System.IFormatProvider provider);
        char ToChar(System.IFormatProvider provider);
        sbyte ToSByte(System.IFormatProvider provider);
        /*0x380b2f0*/ byte ToByte(System.IFormatProvider provider);
        short ToInt16(System.IFormatProvider provider);
        ushort ToUInt16(System.IFormatProvider provider);
        /*0x380b7a8*/ int ToInt32(System.IFormatProvider provider);
        /*0x380c81c*/ uint ToUInt32(System.IFormatProvider provider);
        long ToInt64(System.IFormatProvider provider);
        ulong ToUInt64(System.IFormatProvider provider);
        float ToSingle(System.IFormatProvider provider);
        double ToDouble(System.IFormatProvider provider);
        decimal ToDecimal(System.IFormatProvider provider);
        System.DateTime ToDateTime(System.IFormatProvider provider);
        /*0x380bb68*/ string ToString(System.IFormatProvider provider);
        /*0x380bcbc*/ object ToType(System.Type conversionType, System.IFormatProvider provider);
    }

    interface ICustomFormatter
    {
        /*0x380bd40*/ string Format(string format, object arg, System.IFormatProvider formatProvider);
    }

    interface IDisposable
    {
        /*0x380cb08*/ void Dispose();
    }

    interface IEquatable<T>
    {
        /*0x3907c14*/ bool Equals(T other);
    }

    interface IFormatProvider
    {
        /*0x380bb68*/ object GetFormat(System.Type formatType);
    }

    interface IFormattable
    {
        /*0x380bcbc*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    interface IObservable<T>
    {
        /*0x380bb68*/ System.IDisposable Subscribe(System.IObserver<T> observer);
    }

    interface IObserver<T>
    {
        /*0x3907c14*/ void OnNext(T value);
        /*0x380d83c*/ void OnError(System.Exception error);
        /*0x380cb08*/ void OnCompleted();
    }

    interface IProgress<T>
    {
        /*0x3907c14*/ void Report(T value);
    }

    interface ISpanFormattable
    {
        bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
    }

    class IndexOutOfRangeException : System.SystemException
    {
        /*0x719e2c0*/ IndexOutOfRangeException();
        /*0x719e31c*/ IndexOutOfRangeException(string message);
        /*0x719e340*/ IndexOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InsufficientExecutionStackException : System.SystemException
    {
        /*0x719e348*/ InsufficientExecutionStackException();
        /*0x719e3a4*/ InsufficientExecutionStackException(string message);
        /*0x719e3c8*/ InsufficientExecutionStackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Int16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<short>, System.IEquatable<short>, System.ISpanFormattable
    {
        /*0x10*/ short m_value;

        static /*0x719f300*/ short Parse(string s, System.IFormatProvider provider);
        static /*0x719f528*/ short Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x719f38c*/ short Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x719f7a0*/ bool TryParse(string s, ref short result);
        static /*0x719f8e4*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref short result);
        static /*0x719f820*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref short result);
        /*0x719e3d0*/ int CompareTo(object value);
        /*0x719e45c*/ int CompareTo(short value);
        /*0x719e468*/ bool Equals(object obj);
        /*0x719e4b0*/ bool Equals(short obj);
        /*0x719e4c0*/ int GetHashCode();
        /*0x719e4cc*/ string ToString();
        /*0x719e7fc*/ string ToString(System.IFormatProvider provider);
        /*0x719e894*/ string ToString(string format, System.IFormatProvider provider);
        /*0x719ec6c*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x719fb18*/ System.TypeCode GetTypeCode();
        /*0x719fb20*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x719fb7c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x719fbd8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x719fc34*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x719fc90*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x719fc98*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x719fcf4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x719fd50*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x719fdac*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x719fe08*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x719fe64*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x719fec0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x719ff1c*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x719ff78*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71a001c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<int>, System.IEquatable<int>, System.ISpanFormattable
    {
        /*0x10*/ int m_value;

        static /*0x71a0508*/ int Parse(string s);
        static /*0x71a05c8*/ int Parse(string s, System.Globalization.NumberStyles style);
        static /*0x71a06a0*/ int Parse(string s, System.IFormatProvider provider);
        static /*0x71a0770*/ int Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71a0850*/ int Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71a08ec*/ bool TryParse(string s, ref int result);
        static /*0x71a09bc*/ bool TryParse(System.ReadOnlySpan<char> s, ref int result);
        static /*0x71a0a40*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        static /*0x71a0b34*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        /*0x71a00bc*/ int CompareTo(object value);
        /*0x71a015c*/ int CompareTo(int value);
        /*0x71a0178*/ bool Equals(object obj);
        /*0x71a01c0*/ bool Equals(int obj);
        /*0x71a01d0*/ int GetHashCode();
        /*0x71a01d8*/ string ToString();
        /*0x71a026c*/ string ToString(string format);
        /*0x71a031c*/ string ToString(System.IFormatProvider provider);
        /*0x71a03b4*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71a0468*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71a0bd8*/ System.TypeCode GetTypeCode();
        /*0x71a0be0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71a0c3c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71a0c98*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71a0cf4*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71a0d50*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71a0dac*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71a0e08*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71a0e10*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71a0e6c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71a0ec8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71a0f24*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71a0f80*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71a0fdc*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71a1038*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71a10b8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<long>, System.IEquatable<long>, System.ISpanFormattable
    {
        /*0x10*/ long m_value;

        static /*0x71a1b1c*/ long Parse(string s);
        static /*0x71a1dbc*/ long Parse(string s, System.IFormatProvider provider);
        static /*0x71a1e8c*/ long Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71a1f6c*/ bool TryParse(string s, ref long result);
        static /*0x71a21c8*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref long result);
        /*0x71a1158*/ int CompareTo(object value);
        /*0x71a11f8*/ int CompareTo(long value);
        /*0x71a1214*/ bool Equals(object obj);
        /*0x71a125c*/ bool Equals(long obj);
        /*0x71a126c*/ int GetHashCode();
        /*0x71a1278*/ string ToString();
        /*0x71a15a4*/ string ToString(System.IFormatProvider provider);
        /*0x71a163c*/ string ToString(string format);
        /*0x71a16ec*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71a17a0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71a22bc*/ System.TypeCode GetTypeCode();
        /*0x71a22c4*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71a2320*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71a237c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71a23d8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71a2434*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71a2490*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71a24ec*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71a2548*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71a25a4*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71a25ac*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71a2608*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71a2664*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71a26c0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71a271c*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71a279c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class InvalidCastException : System.SystemException
    {
        /*0x71a283c*/ InvalidCastException();
        /*0x719fff8*/ InvalidCastException(string message);
        /*0x71a2898*/ InvalidCastException(string message, System.Exception innerException);
        /*0x71a28bc*/ InvalidCastException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidOperationException : System.SystemException
    {
        /*0x71a28c4*/ InvalidOperationException();
        /*0x71a2920*/ InvalidOperationException(string message);
        /*0x71a2944*/ InvalidOperationException(string message, System.Exception innerException);
        /*0x71a2968*/ InvalidOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidProgramException : System.SystemException
    {
        /*0x71a2970*/ InvalidProgramException();
        /*0x71a29cc*/ InvalidProgramException(string message);
        /*0x71a29f0*/ InvalidProgramException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidTimeZoneException : System.Exception
    {
        /*0x71a29f8*/ InvalidTimeZoneException();
        /*0x71a2a50*/ InvalidTimeZoneException(string message);
        /*0x71a2ab8*/ InvalidTimeZoneException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum LazyState
    {
        NoneViaConstructor = 0,
        NoneViaFactory = 1,
        NoneException = 2,
        PublicationOnlyViaConstructor = 3,
        PublicationOnlyViaFactory = 4,
        PublicationOnlyWait = 5,
        PublicationOnlyException = 6,
        ExecutionAndPublicationViaConstructor = 7,
        ExecutionAndPublicationViaFactory = 8,
        ExecutionAndPublicationException = 9,
    }

    class LazyHelper
    {
        static /*0x0*/ System.LazyHelper NoneViaConstructor;
        static /*0x8*/ System.LazyHelper NoneViaFactory;
        static /*0x10*/ System.LazyHelper PublicationOnlyViaConstructor;
        static /*0x18*/ System.LazyHelper PublicationOnlyViaFactory;
        static /*0x20*/ System.LazyHelper PublicationOnlyWaitForOtherThreadToPublish;
        /*0x10*/ System.LazyState <State>k__BackingField;
        /*0x18*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionDispatch;

        static /*0x71a2de8*/ LazyHelper();
        static /*0x71a2bdc*/ System.LazyHelper Create(System.Threading.LazyThreadSafetyMode mode, bool useDefaultConstructor);
        static /*0x71a2d20*/ object CreateViaDefaultConstructor(System.Type type);
        /*0x71a2b40*/ LazyHelper(System.LazyState state);
        /*0x71a2b68*/ LazyHelper(System.Threading.LazyThreadSafetyMode mode, System.Exception exception);
        /*0x71a2b38*/ System.LazyState get_State();
        /*0x71a2bc0*/ void ThrowException();
    }

    class Lazy<T>
    {
        /*0x0*/ System.LazyHelper _state;
        /*0x0*/ System.Func<T> _factory;
        /*0x0*/ T _value;

        static /*0x3907c14*/ T CreateViaDefaultConstructor();
        /*0x380cb08*/ Lazy();
        /*0x380d83c*/ Lazy(System.Func<T> valueFactory);
        Lazy(System.Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode, bool useDefaultConstructor);
        /*0x380cb08*/ void ViaConstructor();
        /*0x380cffc*/ void ViaFactory(System.Threading.LazyThreadSafetyMode mode);
        void ExecutionAndPublication(System.LazyHelper executionAndPublication, bool useDefaultConstructor);
        /*0x3907c14*/ void PublicationOnly(System.LazyHelper publicationOnly, T possibleValue);
        /*0x380d83c*/ void PublicationOnlyViaConstructor(System.LazyHelper initializer);
        /*0x380d83c*/ void PublicationOnlyViaFactory(System.LazyHelper initializer);
        /*0x380cb08*/ void PublicationOnlyWaitForOtherThreadToPublish();
        /*0x3907c14*/ T CreateValue();
        /*0x380b9e8*/ string ToString();
        /*0x380b128*/ bool get_IsValueCreated();
        /*0x3907c14*/ T get_Value();
    }

    class LazyDebugView<T>
    {
    }

    class Marvin
    {
        static /*0x0*/ ulong <DefaultSeed>k__BackingField;

        static /*0x71a34a8*/ Marvin();
        static /*0x71a2f14*/ int ComputeHash32(System.ReadOnlySpan<byte> data, ulong seed);
        static /*0x71a2fc0*/ int ComputeHash32(ref byte data, int count, ulong seed);
        static /*0x71a33b0*/ void Block(ref uint rp0, ref uint rp1);
        static /*0x71a3438*/ uint _rotl(uint value, int shift);
        static /*0x71a3444*/ ulong get_DefaultSeed();
        static /*0x71a349c*/ ulong GenerateSeed();
    }

    class Math
    {
        static /*0x0*/ double doubleRoundLimit;
        static /*0x8*/ double[] roundPower10Double;

        static /*0x71a48a8*/ Math();
        static /*0x71a34f8*/ int Abs(int value);
        static /*0x71a35a0*/ long Abs(long value);
        static /*0x71a35fc*/ decimal Abs(decimal value);
        static /*0x71a3554*/ void ThrowAbsOverflow();
        static /*0x71a3680*/ int DivRem(int a, int b, ref int result);
        static /*0x71a3694*/ uint DivRem(uint a, uint b, ref uint result);
        static /*0x71a36a8*/ byte Clamp(byte value, byte min, byte max);
        static /*0x71a3754*/ decimal Clamp(decimal value, decimal min, decimal max);
        static /*0x71a38a8*/ double Clamp(double value, double min, double max);
        static /*0x71a3950*/ short Clamp(short value, short min, short max);
        static /*0x71a39fc*/ int Clamp(int value, int min, int max);
        static /*0x71a3aa0*/ long Clamp(long value, long min, long max);
        static /*0x71a3b44*/ sbyte Clamp(sbyte value, sbyte min, sbyte max);
        static /*0x71a3bf0*/ float Clamp(float value, float min, float max);
        static /*0x71a3c98*/ ushort Clamp(ushort value, ushort min, ushort max);
        static /*0x71a3d44*/ uint Clamp(uint value, uint min, uint max);
        static /*0x71a3de8*/ ulong Clamp(ulong value, ulong min, ulong max);
        static /*0x71a3e8c*/ double Log(double a, double newBase);
        static /*0x71a3f6c*/ byte Max(byte val1, byte val2);
        static /*0x71a3f7c*/ decimal Max(decimal val1, decimal val2);
        static /*0x71a4014*/ double Max(double val1, double val2);
        static /*0x71a4034*/ short Max(short val1, short val2);
        static /*0x71a4044*/ int Max(int val1, int val2);
        static /*0x71a4050*/ long Max(long val1, long val2);
        static /*0x71a405c*/ sbyte Max(sbyte val1, sbyte val2);
        static /*0x71a406c*/ float Max(float val1, float val2);
        static /*0x71a408c*/ ushort Max(ushort val1, ushort val2);
        static /*0x71a409c*/ uint Max(uint val1, uint val2);
        static /*0x71a40a8*/ ulong Max(ulong val1, ulong val2);
        static /*0x71a40b4*/ byte Min(byte val1, byte val2);
        static /*0x71a40c4*/ decimal Min(decimal val1, decimal val2);
        static /*0x71a415c*/ double Min(double val1, double val2);
        static /*0x71a417c*/ short Min(short val1, short val2);
        static /*0x71a418c*/ int Min(int val1, int val2);
        static /*0x71a4198*/ long Min(long val1, long val2);
        static /*0x71a41a4*/ sbyte Min(sbyte val1, sbyte val2);
        static /*0x71a41b4*/ float Min(float val1, float val2);
        static /*0x71a41d4*/ ushort Min(ushort val1, ushort val2);
        static /*0x71a41e4*/ uint Min(uint val1, uint val2);
        static /*0x71a41f0*/ ulong Min(ulong val1, ulong val2);
        static /*0x71a41fc*/ decimal Round(decimal d);
        static /*0x71a4268*/ decimal Round(decimal d, int decimals, System.MidpointRounding mode);
        static /*0x71a42e8*/ double Round(double a);
        static /*0x71a436c*/ double Round(double value, int digits);
        static /*0x71a43d4*/ double Round(double value, int digits, System.MidpointRounding mode);
        static /*0x71a467c*/ int Sign(double value);
        static /*0x71a46f4*/ int Sign(long value);
        static /*0x71a4708*/ int Sign(float value);
        static /*0x71a4780*/ decimal Truncate(decimal d);
        static /*0x71a47e8*/ double Truncate(double d);
        static /*0x3907c14*/ void ThrowMinMaxException<T>(T min, T max);
        static /*0x71a4854*/ double Abs(double value);
        static /*0x71a485c*/ float Abs(float value);
        static /*0x71a4864*/ double Acos(double d);
        static /*0x71a4868*/ double Asin(double d);
        static /*0x71a486c*/ double Atan(double d);
        static /*0x71a4870*/ double Atan2(double y, double x);
        static /*0x71a4874*/ double Ceiling(double a);
        static /*0x71a487c*/ double Cos(double d);
        static /*0x71a4880*/ double Exp(double d);
        static /*0x71a4884*/ double Floor(double d);
        static /*0x71a488c*/ double Log(double d);
        static /*0x71a4890*/ double Log10(double d);
        static /*0x71a4894*/ double Pow(double x, double y);
        static /*0x71a4898*/ double Sin(double a);
        static /*0x71a489c*/ double Sqrt(double d);
        static /*0x71a48a4*/ double Tan(double a);
        static /*0x71a4678*/ double ModF(double x, double* intptr);
    }

    class MathF
    {
        static /*0x0*/ float[] roundPower10Single;
        static /*0x8*/ float singleRoundLimit;

        static /*0x71a4e88*/ MathF();
        static /*0x71a495c*/ float Abs(float x);
        static /*0x71a49b8*/ float Round(float x);
        static /*0x71a4ac0*/ float Round(float x, int digits);
        static /*0x71a4b28*/ float Round(float x, int digits, System.MidpointRounding mode);
        static /*0x71a4e14*/ int Sign(float x);
        static /*0x71a4aa4*/ float CopySign(float x, float y);
        static /*0x71a4e70*/ float Ceiling(float x);
        static /*0x71a4e78*/ float Floor(float x);
        static /*0x71a4e80*/ float FMod(float x, float y);
        static /*0x71a4e84*/ float ModF(float x, float* intptr);
    }

    class MemberAccessException : System.SystemException
    {
        /*0x71a4f40*/ MemberAccessException();
        /*0x71a4f9c*/ MemberAccessException(string message);
        /*0x71a4fc0*/ MemberAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Memory<T> : System.IEquatable<System.Memory<T>>
    {
        /*0x0*/ object _object;
        /*0x0*/ int _index;
        /*0x0*/ int _length;

        static /*0x3907c14*/ System.Memory<T> op_Implicit(T[] array);
        static /*0x3907c14*/ System.Memory<T> op_Implicit(System.ArraySegment<T> segment);
        static /*0x3907c14*/ System.ReadOnlyMemory<T> op_Implicit(System.Memory<T> memory);
        static /*0x3907c14*/ System.Memory<T> get_Empty();
        static /*0x38243dc*/ int CombineHashCodes(int left, int right);
        static int CombineHashCodes(int h1, int h2, int h3);
        /*0x380d83c*/ Memory(T[] array);
        Memory(T[] array, int start, int length);
        /*0x380d8b8*/ Memory(System.Buffers.MemoryManager<T> manager, int length);
        Memory(object obj, int start, int length);
        /*0x380b6a0*/ int get_Length();
        /*0x380b128*/ bool get_IsEmpty();
        /*0x380b9e8*/ string ToString();
        /*0x3907c14*/ System.Memory<T> Slice(int start);
        /*0x3907c14*/ System.Memory<T> Slice(int start, int length);
        /*0x3907c14*/ System.Span<T> get_Span();
        /*0x3907c14*/ System.Buffers.MemoryHandle Pin();
        /*0x380b9e8*/ T[] ToArray();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.Memory<T> other);
        /*0x380b6a0*/ int GetHashCode();
    }

    class MemoryDebugView<T>
    {
    }

    class MemoryExtensions
    {
        static /*0x71a4fc8*/ bool EqualsOrdinal(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x71a5064*/ bool EqualsOrdinalIgnoreCase(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x71a5110*/ bool Contains(System.ReadOnlySpan<char> source, char value);
        static /*0x71a51a4*/ int ToUpperInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
        static /*0x71a52fc*/ bool EndsWith(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.StringComparison comparisonType);
        static /*0x3907c14*/ System.Span<T> AsSpan<T>(T[] array, int start);
        static /*0x71a5570*/ System.ReadOnlySpan<char> AsSpan(string text);
        static /*0x71a55c8*/ System.ReadOnlySpan<char> AsSpan(string text, int start);
        static /*0x71a5654*/ System.ReadOnlySpan<char> AsSpan(string text, int start, int length);
        static /*0x71a56f4*/ System.ReadOnlyMemory<char> AsMemory(string text, int start, int length);
        static /*0x719b890*/ System.ReadOnlySpan<char> Trim(System.ReadOnlySpan<char> span);
        static /*0x71a579c*/ System.ReadOnlySpan<char> TrimStart(System.ReadOnlySpan<char> span);
        static /*0x71a5884*/ System.ReadOnlySpan<char> TrimEnd(System.ReadOnlySpan<char> span);
        static /*0x3907c14*/ int IndexOf<T>(System.Span<T> span, T value);
        static /*0x3907c14*/ int IndexOf<T>(System.Span<T> span, System.ReadOnlySpan<T> value);
        static /*0x3907c14*/ int SequenceCompareTo<T>(System.Span<T> span, System.ReadOnlySpan<T> other);
        static /*0x3907c14*/ int IndexOf<T>(System.ReadOnlySpan<T> span, T value);
        static /*0x3907c14*/ int IndexOfAny<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> values);
        static /*0x3907c14*/ bool SequenceEqual<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> other);
        static /*0x3907c14*/ bool StartsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static /*0x3907c14*/ bool EndsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static /*0x3907c14*/ System.Span<T> AsSpan<T>(T[] array);
        static /*0x3907c14*/ System.Span<T> AsSpan<T>(T[] array, int start, int length);
        static /*0x3907c14*/ System.Span<T> AsSpan<T>(System.ArraySegment<T> segment);
        static /*0x3907c14*/ System.Span<T> AsSpan<T>(System.ArraySegment<T> segment, int start, int length);
        static /*0x3907c14*/ void CopyTo<T>(T[] source, System.Span<T> destination);
        static /*0x381ac0c*/ bool IsTypeComparableAsBytes<T>(ref ulong size);
    }

    class MethodAccessException : System.MemberAccessException
    {
        /*0x71a595c*/ MethodAccessException();
        /*0x71a59b8*/ MethodAccessException(string message);
        /*0x71a59dc*/ MethodAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum MidpointRounding
    {
        ToEven = 0,
        AwayFromZero = 1,
    }

    class MissingMethodException : System.MissingMemberException
    {
        /*0x71a59e4*/ MissingMethodException();
        /*0x71a5a40*/ MissingMethodException(string message);
        /*0x71a5a64*/ MissingMethodException(string className, string methodName);
        /*0x71a5aa8*/ MissingMethodException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71a5ab0*/ string get_Message();
    }

    class MulticastNotSupportedException : System.SystemException
    {
        /*0x71a5b98*/ MulticastNotSupportedException();
        /*0x71a5bf4*/ MulticastNotSupportedException(string message);
        /*0x71a5c18*/ MulticastNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NonSerializedAttribute : System.Attribute
    {
        /*0x71a5c20*/ NonSerializedAttribute();
    }

    class NotImplementedException : System.SystemException
    {
        /*0x71a5c28*/ NotImplementedException();
        /*0x71a5c84*/ NotImplementedException(string message);
        /*0x71a5ca8*/ NotImplementedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NotSupportedException : System.SystemException
    {
        /*0x71a5cb0*/ NotSupportedException();
        /*0x719e1f4*/ NotSupportedException(string message);
        /*0x71a5d0c*/ NotSupportedException(string message, System.Exception innerException);
        /*0x71a5d30*/ NotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NullReferenceException : System.SystemException
    {
        /*0x71a5d38*/ NullReferenceException();
        /*0x71a5d94*/ NullReferenceException(string message);
        /*0x71a5db8*/ NullReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Nullable<T>
    {
        /*0x0*/ bool hasValue;
        /*0x0*/ T value;

        static /*0x3907c14*/ object Box(System.Nullable<T> o);
        static /*0x3907c14*/ System.Nullable<T> Unbox(object o);
        static /*0x3907c14*/ System.Nullable<T> UnboxExact(object o);
        /*0x3907c14*/ Nullable(T value);
        /*0x380b128*/ bool get_HasValue();
        /*0x3907c14*/ T get_Value();
        /*0x3907c14*/ T GetValueOrDefault();
        /*0x3907c14*/ T GetValueOrDefault(T defaultValue);
        /*0x380b2f0*/ bool Equals(object other);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b9e8*/ string ToString();
    }

    class Nullable
    {
        static /*0x71a5dc0*/ System.Type GetUnderlyingType(System.Type nullableType);
    }

    class Number
    {
        static /*0x0*/ string[] s_posCurrencyFormats;
        static /*0x8*/ string[] s_negCurrencyFormats;
        static /*0x10*/ string[] s_posPercentFormats;
        static /*0x18*/ string[] s_negPercentFormats;
        static /*0x20*/ string[] s_negNumberFormats;
        static /*0x28*/ int[] s_charToHexLookup;
        static /*0x30*/ ulong[] s_rgval64Power10;
        static /*0x38*/ sbyte[] s_rgexp64Power10;
        static /*0x40*/ ulong[] s_rgval64Power10By16;
        static /*0x48*/ short[] s_rgexp64Power10By16;

        static /*0x71b0e40*/ Number();
        static /*0x71a5f00*/ string FormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71a7af8*/ bool TryFormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x71a61f4*/ void DecimalToNumber(decimal value, ref System.Number.NumberBuffer number);
        static /*0x71a7d08*/ string FormatDouble(double value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x71a8134*/ bool TryFormatDouble(double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x71a7e48*/ string FormatDouble(ref System.Text.ValueStringBuilder sb, double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71a8c30*/ string FormatSingle(float value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x71a9068*/ bool TryFormatSingle(float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x71a8d70*/ string FormatSingle(ref System.Text.ValueStringBuilder sb, float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71a8290*/ bool TryCopyTo(string source, System.Span<char> destination, ref int charsWritten);
        static /*0x719e560*/ string FormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x719f020*/ bool TryFormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x719ea08*/ string FormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x719ed80*/ bool TryFormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71a130c*/ string FormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71a1840*/ bool TryFormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71aab3c*/ string FormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x71aaf30*/ bool TryFormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x71ab1cc*/ void Int32ToNumber(int value, ref System.Number.NumberBuffer number);
        static /*0x71a9354*/ string NegativeInt32ToDecStr(int value, int digits, string sNegative);
        static /*0x71a97fc*/ bool TryNegativeInt32ToDecStr(int value, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0x71a9500*/ string Int32ToHexStr(int value, char hexBase, int digits);
        static /*0x71a99e4*/ bool TryInt32ToHexStr(int value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71ab2f8*/ char* Int32ToHexChars(char* buffer, uint value, int hexBase, int digits);
        static /*0x71ab338*/ void UInt32ToNumber(uint value, ref System.Number.NumberBuffer number);
        static /*0x71a7cbc*/ char* UInt32ToDecChars(char* bufferEnd, uint value, int digits);
        static /*0x71a91c4*/ string UInt32ToDecStr(uint value, int digits);
        static /*0x71a9638*/ bool TryUInt32ToDecStr(uint value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71aa240*/ void Int64ToNumber(long input, ref System.Number.NumberBuffer number);
        static /*0x71a9db0*/ string NegativeInt64ToDecStr(long input, int digits, string sNegative);
        static /*0x71aa66c*/ bool TryNegativeInt64ToDecStr(long input, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0x71aa050*/ string Int64ToHexStr(long value, char hexBase, int digits);
        static /*0x71aa938*/ bool TryInt64ToHexStr(long value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71aad9c*/ void UInt64ToNumber(ulong value, ref System.Number.NumberBuffer number);
        static /*0x71a9b58*/ string UInt64ToDecStr(ulong value, int digits);
        static /*0x71aa3e8*/ bool TryUInt64ToDecStr(ulong value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x71a60b0*/ char ParseFormatSpecifier(System.ReadOnlySpan<char> format, ref int digits);
        static /*0x71a6430*/ void NumberToString(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, char format, int nMaxDigits, System.Globalization.NumberFormatInfo info, bool isDecimal);
        static /*0x71a69c0*/ void NumberToStringFormat(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x71ab590*/ void FormatCurrency(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x71ab7f8*/ void FormatFixed(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, int[] groupDigits, string sDecimal, string sGroup);
        static /*0x71abd28*/ void FormatNumber(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x71abf7c*/ void FormatScientific(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar);
        static /*0x71ac940*/ void FormatExponent(ref System.Text.ValueStringBuilder sb, System.Globalization.NumberFormatInfo info, int value, char expChar, int minDigits, bool positiveSign);
        static /*0x71ac1d4*/ void FormatGeneral(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar, bool bSuppressScientific);
        static /*0x71ac58c*/ void FormatPercent(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x71ab494*/ void RoundNumber(ref System.Number.NumberBuffer number, int pos);
        static /*0x71ac7f4*/ int FindSection(System.ReadOnlySpan<char> format, int section);
        static /*0x71ab490*/ uint Low32(ulong value);
        static /*0x71ab488*/ uint High32(ulong value);
        static /*0x71ab450*/ uint Int64DivMod1E9(ref ulong value);
        static /*0x71acbe8*/ bool NumberToInt32(ref System.Number.NumberBuffer number, ref int value);
        static /*0x71acca4*/ bool NumberToInt64(ref System.Number.NumberBuffer number, ref long value);
        static /*0x71acd5c*/ bool NumberToUInt32(ref System.Number.NumberBuffer number, ref uint value);
        static /*0x71ace0c*/ bool NumberToUInt64(ref System.Number.NumberBuffer number, ref ulong value);
        static /*0x719f5cc*/ int ParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71a1bdc*/ long ParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71ae2ec*/ uint ParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71aea7c*/ ulong ParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71af238*/ bool ParseNumber(ref char* str, char* strEnd, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x719f98c*/ bool TryParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result);
        static /*0x71acebc*/ bool TryParseInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result, ref bool failureIsOverflow);
        static /*0x71ad9b0*/ bool TryParseInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result, ref bool failureIsOverflow);
        static /*0x71a203c*/ bool TryParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result);
        static /*0x71afba8*/ bool TryParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result);
        static /*0x71ae4a8*/ bool TryParseUInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0x71ad524*/ bool TryParseUInt32HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0x71afd34*/ bool TryParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result);
        static /*0x71aec38*/ bool TryParseUInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0x71adf9c*/ bool TryParseUInt64HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0x71afec0*/ decimal ParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71affd0*/ bool NumberBufferToDecimal(ref System.Number.NumberBuffer number, ref decimal value);
        static /*0x71b02c8*/ double ParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71b06ac*/ float ParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x71b0a18*/ bool TryParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref decimal result);
        static /*0x71b0b1c*/ bool TryParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref double result);
        static /*0x71b0c20*/ bool TryParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref float result);
        static /*0x71ad874*/ void StringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x71af9e4*/ bool TryStringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x71afb18*/ bool TrailingZeros(System.ReadOnlySpan<char> value, int index);
        static /*0x71af950*/ char* MatchChars(char* p, char* pEnd, string value);
        static /*0x71af934*/ bool IsWhite(int ch);
        static /*0x71af9d4*/ bool IsDigit(int ch);
        static /*0x71ad49c*/ void ThrowOverflowOrFormatException(bool overflow, string overflowResourceKey);
        static /*0x71b0620*/ bool NumberBufferToDouble(ref System.Number.NumberBuffer number, ref double value);
        static /*0x71b0d60*/ uint DigitsToInt(char* p, int count);
        static /*0x71b0d94*/ ulong Mul32x32To64(uint a, uint b);
        static /*0x71b0d9c*/ ulong Mul64Lossy(ulong a, ulong b, ref int pexp);
        static /*0x71b0e34*/ int abs(int value);
        static /*0x71a8748*/ double NumberToDouble(ref System.Number.NumberBuffer number);
        static /*0x71a8368*/ void DoubleToNumber(double value, int precision, ref System.Number.NumberBuffer number);

        struct NumberBuffer
        {
            /*0x10*/ int precision;
            /*0x14*/ int scale;
            /*0x18*/ int _sign;
            /*0x1c*/ System.Number.NumberBuffer.DigitsAndNullTerminator _digits;
            /*0x82*/ char* _allDigits;

            /*0x71b201c*/ bool get_sign();
            /*0x71b202c*/ void set_sign(bool value);
            /*0x71b2038*/ char* get_digits();

            struct DigitsAndNullTerminator
            {
            }
        }
    }

    class ObjectDisposedException : System.InvalidOperationException
    {
        /*0x90*/ string _objectName;

        /*0x71b2040*/ ObjectDisposedException();
        /*0x71b20e8*/ ObjectDisposedException(string objectName);
        /*0x71b20a8*/ ObjectDisposedException(string objectName, string message);
        /*0x71b215c*/ ObjectDisposedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71b21ec*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71b2304*/ string get_Message();
        /*0x71b22ac*/ string get_ObjectName();
    }

    class ObsoleteAttribute : System.Attribute
    {
        /*0x10*/ string _message;
        /*0x18*/ bool _error;

        /*0x71b23b8*/ ObsoleteAttribute();
        /*0x71b23e4*/ ObsoleteAttribute(string message);
        /*0x71b241c*/ ObsoleteAttribute(string message, bool error);
        /*0x71b2458*/ string get_Message();
        /*0x71b2460*/ bool get_IsError();
    }

    class OperationCanceledException : System.SystemException
    {
        /*0x90*/ System.Threading.CancellationToken _cancellationToken;

        /*0x71b247c*/ OperationCanceledException();
        /*0x71b254c*/ OperationCanceledException(string message);
        /*0x71b256c*/ OperationCanceledException(System.Threading.CancellationToken token);
        /*0x71b2598*/ OperationCanceledException(string message, System.Threading.CancellationToken token);
        /*0x71b25d0*/ OperationCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71b2468*/ System.Threading.CancellationToken get_CancellationToken();
        /*0x71b2470*/ void set_CancellationToken(System.Threading.CancellationToken value);
    }

    class OverflowException : System.ArithmeticException
    {
        /*0x71b2654*/ OverflowException();
        /*0x71b26b0*/ OverflowException(string message);
        /*0x71b26d4*/ OverflowException(string message, System.Exception innerException);
        /*0x71b26f8*/ OverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ParamArrayAttribute : System.Attribute
    {
        /*0x71b2700*/ ParamArrayAttribute();
    }

    struct ParamsArray
    {
        static /*0x0*/ object[] s_oneArgArray;
        static /*0x8*/ object[] s_twoArgArray;
        static /*0x10*/ object[] s_threeArgArray;
        /*0x10*/ object _arg0;
        /*0x18*/ object _arg1;
        /*0x20*/ object _arg2;
        /*0x28*/ object[] _args;

        static /*0x71b2a94*/ ParamsArray();
        /*0x71b2708*/ ParamsArray(object arg0);
        /*0x71b27a8*/ ParamsArray(object arg0, object arg1);
        /*0x71b284c*/ ParamsArray(object arg0, object arg1, object arg2);
        /*0x71b28fc*/ ParamsArray(object[] args);
        /*0x71b29b4*/ int get_Length();
        /*0x71b29d0*/ object get_Item(int index);
        /*0x71b2a40*/ object GetAtSlow(int index);
    }

    class ParseNumbers
    {
        static /*0x71b2b50*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags);
        static /*0x71b2b68*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0x71b3184*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags);
        static /*0x71b319c*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0x71b377c*/ string IntToString(int n, int radix, int width, char paddingChar, int flags);
        static /*0x71b3aa4*/ string LongToString(long n, int radix, int width, char paddingChar, int flags);
        static /*0x71b2ed0*/ void EatWhiteSpace(System.ReadOnlySpan<char> s, ref int i);
        static /*0x71b2f90*/ long GrabLongs(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0x71b355c*/ int GrabInts(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0x71b3ed4*/ void ThrowOverflowInt32Exception();
        static /*0x71b3e44*/ void ThrowOverflowInt64Exception();
        static /*0x71b3f1c*/ void ThrowOverflowUInt32Exception();
        static /*0x71b3e8c*/ void ThrowOverflowUInt64Exception();
        static /*0x71b3f64*/ bool IsDigit(char c, int radix, ref int result);
    }

    class PlatformNotSupportedException : System.NotSupportedException
    {
        /*0x71b3fb8*/ PlatformNotSupportedException();
        /*0x71b4014*/ PlatformNotSupportedException(string message);
        /*0x71b4038*/ PlatformNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Random
    {
        static /*0x0*/ System.Random s_globalRandom;
        [ThreadStatic] static System.Random t_threadRandom;
        /*0x10*/ int _inext;
        /*0x14*/ int _inextp;
        /*0x18*/ int[] _seedArray;

        static /*0x71b4848*/ Random();
        static /*0x71b409c*/ int GenerateSeed();
        static /*0x71b44d0*/ int GenerateGlobalSeed();
        /*0x71b4040*/ Random();
        /*0x71b4264*/ Random(int Seed);
        /*0x71b4424*/ double Sample();
        /*0x71b4444*/ int InternalSample();
        /*0x71b44f4*/ int Next();
        /*0x71b44f8*/ double GetSampleForLargeRange();
        /*0x71b4544*/ int Next(int minValue, int maxValue);
        /*0x71b465c*/ int Next(int maxValue);
        /*0x71b4720*/ double NextDouble();
        /*0x71b472c*/ void NextBytes(byte[] buffer);
        /*0x71b47d8*/ void NextBytes(System.Span<byte> buffer);
    }

    class RankException : System.SystemException
    {
        /*0x71b48d4*/ RankException();
        /*0x71b492c*/ RankException(string message);
        /*0x71b494c*/ RankException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ReadOnlyMemory<T> : System.IEquatable<System.ReadOnlyMemory<T>>
    {
        /*0x0*/ object _object;
        /*0x0*/ int _index;
        /*0x0*/ int _length;

        static /*0x3907c14*/ System.ReadOnlyMemory<T> op_Implicit(T[] array);
        static /*0x38243dc*/ int CombineHashCodes(int left, int right);
        static int CombineHashCodes(int h1, int h2, int h3);
        /*0x380d83c*/ ReadOnlyMemory(T[] array);
        ReadOnlyMemory(T[] array, int start, int length);
        ReadOnlyMemory(object obj, int start, int length);
        /*0x380b6a0*/ int get_Length();
        /*0x380b128*/ bool get_IsEmpty();
        /*0x380b9e8*/ string ToString();
        /*0x3907c14*/ System.ReadOnlyMemory<T> Slice(int start);
        /*0x3907c14*/ System.ReadOnlyMemory<T> Slice(int start, int length);
        /*0x3907c14*/ System.ReadOnlySpan<T> get_Span();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ReadOnlyMemory<T> other);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380bcbc*/ object GetObjectStartLength(ref int start, ref int length);
    }

    struct ReadOnlySpan<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static /*0x3907c14*/ bool op_Equality(System.ReadOnlySpan<T> left, System.ReadOnlySpan<T> right);
        static /*0x3907c14*/ System.ReadOnlySpan<T> op_Implicit(T[] array);
        static /*0x3907c14*/ System.ReadOnlySpan<T> op_Implicit(System.ArraySegment<T> segment);
        static /*0x3907c14*/ System.ReadOnlySpan<T> get_Empty();
        /*0x380d83c*/ ReadOnlySpan(T[] array);
        ReadOnlySpan(T[] array, int start, int length);
        /*0x3907c14*/ ReadOnlySpan(void* pointer, int length);
        /*0x380d8b8*/ ReadOnlySpan(ref T ptr, int length);
        /*0x380ba90*/ ref T get_Item(int index);
        /*0x380b9e8*/ ref T GetPinnableReference();
        /*0x3907c14*/ void CopyTo(System.Span<T> destination);
        /*0x3907c14*/ bool TryCopyTo(System.Span<T> destination);
        /*0x380b9e8*/ string ToString();
        /*0x3907c14*/ System.ReadOnlySpan<T> Slice(int start);
        /*0x3907c14*/ System.ReadOnlySpan<T> Slice(int start, int length);
        /*0x380b9e8*/ T[] ToArray();
        /*0x380b6a0*/ int get_Length();
        /*0x380b128*/ bool get_IsEmpty();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b6a0*/ int GetHashCode();
    }

    class ResolveEventArgs : System.EventArgs
    {
        /*0x10*/ string <Name>k__BackingField;
        /*0x18*/ System.Reflection.Assembly <RequestingAssembly>k__BackingField;

        /*0x71b4950*/ ResolveEventArgs(string name);
        /*0x71b49c4*/ ResolveEventArgs(string name, System.Reflection.Assembly requestingAssembly);
    }

    class ResolveEventHandler : System.MulticastDelegate
    {
        /*0x71b4a4c*/ ResolveEventHandler(object object, nint method);
        /*0x71b4b58*/ System.Reflection.Assembly Invoke(object sender, System.ResolveEventArgs args);
    }

    struct SByte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<sbyte>, System.IEquatable<sbyte>, System.ISpanFormattable
    {
        /*0x10*/ sbyte m_value;

        static /*0x71b5034*/ sbyte Parse(string s, System.IFormatProvider provider);
        static /*0x71b5268*/ sbyte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71b50d0*/ sbyte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x71b52f8*/ bool TryParse(string s, ref sbyte result);
        static /*0x71b5440*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref sbyte result);
        static /*0x71b5378*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref sbyte result);
        /*0x71b4b6c*/ int CompareTo(object obj);
        /*0x71b4bf8*/ int CompareTo(sbyte value);
        /*0x71b4c04*/ bool Equals(object obj);
        /*0x71b4c4c*/ bool Equals(sbyte obj);
        /*0x71b4c5c*/ int GetHashCode();
        /*0x71b4c68*/ string ToString();
        /*0x71b4d00*/ string ToString(System.IFormatProvider provider);
        /*0x71b4d9c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71b4f18*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71b54e8*/ System.TypeCode GetTypeCode();
        /*0x71b54f0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71b554c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71b55a8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71b55b0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71b560c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71b5668*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71b56c4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71b56cc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71b5728*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71b5784*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71b57e0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71b583c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71b5898*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71b58f4*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71b5978*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class SerializableAttribute : System.Attribute
    {
        /*0x71b5a18*/ SerializableAttribute();
    }

    struct Single : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<float>, System.IEquatable<float>, System.ISpanFormattable
    {
        /*0x10*/ float m_value;

        static /*0x71b5a20*/ bool IsFinite(float f);
        static /*0x71b5a34*/ bool IsInfinity(float f);
        static /*0x71b5a4c*/ bool IsNaN(float f);
        static /*0x71b5a64*/ bool IsNegativeInfinity(float f);
        static /*0x71b5a78*/ bool IsPositiveInfinity(float f);
        static /*0x71b5f84*/ float Parse(string s, System.IFormatProvider provider);
        static /*0x71b6048*/ float Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71b611c*/ bool TryParse(string s, ref float result);
        static /*0x71b6454*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref float result);
        static /*0x71b619c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref float result);
        /*0x71b5a8c*/ int CompareTo(object value);
        /*0x71b5b64*/ int CompareTo(float value);
        /*0x71b5bc0*/ bool Equals(object obj);
        /*0x71b5c40*/ bool Equals(float obj);
        /*0x71b5c8c*/ int GetHashCode();
        /*0x71b5ca4*/ string ToString();
        /*0x71b5d20*/ string ToString(System.IFormatProvider provider);
        /*0x71b5dac*/ string ToString(string format);
        /*0x71b5e34*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71b5ec4*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71b64fc*/ System.TypeCode GetTypeCode();
        /*0x71b6504*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71b6568*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71b65ec*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71b6650*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71b66b4*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71b6718*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71b677c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71b67e0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71b6844*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71b68a8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71b690c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71b6914*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71b6978*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71b69dc*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71b6a60*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Span<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static /*0x3907c14*/ System.ReadOnlySpan<T> op_Implicit(System.Span<T> span);
        static /*0x3907c14*/ System.Span<T> op_Implicit(T[] array);
        static /*0x3907c14*/ System.Span<T> get_Empty();
        /*0x380d83c*/ Span(T[] array);
        Span(T[] array, int start, int length);
        /*0x3907c14*/ Span(void* pointer, int length);
        /*0x380d8b8*/ Span(ref T ptr, int length);
        /*0x380ba90*/ ref T get_Item(int index);
        /*0x380b9e8*/ ref T GetPinnableReference();
        /*0x380cb08*/ void Clear();
        /*0x3907c14*/ void Fill(T value);
        /*0x3907c14*/ void CopyTo(System.Span<T> destination);
        /*0x3907c14*/ bool TryCopyTo(System.Span<T> destination);
        /*0x380b9e8*/ string ToString();
        /*0x3907c14*/ System.Span<T> Slice(int start);
        /*0x3907c14*/ System.Span<T> Slice(int start, int length);
        /*0x380b9e8*/ T[] ToArray();
        /*0x380b6a0*/ int get_Length();
        /*0x380b128*/ bool get_IsEmpty();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b6a0*/ int GetHashCode();
    }

    class SpanDebugView<T>
    {
    }

    class SpanHelpers
    {
        static /*0x71b6b00*/ int IndexOf(ref byte searchSpace, int searchSpaceLength, ref byte value, int valueLength);
        static /*0x71b6e74*/ int IndexOfAny(ref byte searchSpace, int searchSpaceLength, ref byte value, int valueLength);
        static /*0x71b6bcc*/ int IndexOf(ref byte searchSpace, byte value, int length);
        static /*0x71b6ef4*/ bool SequenceEqual(ref byte first, ref byte second, ulong length);
        static /*0x71b7064*/ int SequenceCompareTo(ref byte first, int firstLength, ref byte second, int secondLength);
        static /*0x71b71a8*/ int SequenceCompareTo(ref char first, int firstLength, ref char second, int secondLength);
        static /*0x71b76dc*/ int IndexOf(ref char searchSpace, char value, int length);
        static /*0x71b7ccc*/ int LastIndexOf(ref char searchSpace, char value, int length);
        static /*0x71b8270*/ int LocateFirstFoundChar(System.Numerics.Vector<ushort> match);
        static /*0x71b844c*/ int LocateFirstFoundChar(ulong match);
        static /*0x71b846c*/ int LocateLastFoundChar(System.Numerics.Vector<ushort> match);
        static /*0x71b8648*/ int LocateLastFoundChar(ulong match);
        static int IndexOf<T>(ref T searchSpace, int searchSpaceLength, ref T value, int valueLength);
        static /*0x3907c14*/ int IndexOf<T>(ref T searchSpace, T value, int length);
        static int IndexOfAny<T>(ref T searchSpace, int searchSpaceLength, ref T value, int valueLength);
        static /*0x381ccdc*/ bool SequenceEqual<T>(ref T first, ref T second, int length);
        static int SequenceCompareTo<T>(ref T first, int firstLength, ref T second, int secondLength);
        static /*0x71b8674*/ bool EndsWithCultureHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0x71b87ac*/ bool EndsWithCultureIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0x71b88cc*/ bool EndsWithOrdinalIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x71b89b0*/ void ClearWithoutReferences(ref byte b, ulong byteLength);
        static /*0x71b8b98*/ void ClearWithReferences(ref nint ip, ulong pointerSizeLength);
    }

    class StackOverflowException : System.SystemException
    {
        /*0x71b8ce8*/ StackOverflowException();
        /*0x71b8d40*/ StackOverflowException(string message);
        /*0x71b8d60*/ StackOverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class StringComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
    {
        static /*0x0*/ System.CultureAwareComparer s_invariantCulture;
        static /*0x8*/ System.CultureAwareComparer s_invariantCultureIgnoreCase;
        static /*0x10*/ System.OrdinalCaseSensitiveComparer s_ordinal;
        static /*0x18*/ System.OrdinalIgnoreCaseComparer s_ordinalIgnoreCase;

        static /*0x71b91dc*/ StringComparer();
        static /*0x71b8d64*/ System.StringComparer get_InvariantCultureIgnoreCase();
        static /*0x71b8dbc*/ System.StringComparer get_Ordinal();
        static /*0x71b8e14*/ System.StringComparer get_OrdinalIgnoreCase();
        static /*0x71b8e6c*/ System.StringComparer Create(System.Globalization.CultureInfo culture, bool ignoreCase);
        /*0x71b91d4*/ StringComparer();
        /*0x71b8f60*/ int Compare(object x, object y);
        /*0x71b90e0*/ bool Equals(object x, object y);
        /*0x71b9148*/ int GetHashCode(object obj);
        int Compare(string x, string y);
        /*0x380b32c*/ bool Equals(string x, string y);
        /*0x380b7a8*/ int GetHashCode(string obj);
    }

    class CultureAwareComparer : System.StringComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ System.Globalization.CompareInfo _compareInfo;
        /*0x18*/ System.Globalization.CompareOptions _options;

        /*0x71b8f1c*/ CultureAwareComparer(System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        /*0x71b9364*/ CultureAwareComparer(System.Globalization.CompareInfo compareInfo, System.Globalization.CompareOptions options);
        /*0x71b9450*/ CultureAwareComparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71b9668*/ int Compare(string x, string y);
        /*0x71b96bc*/ bool Equals(string x, string y);
        /*0x71b970c*/ int GetHashCode(string obj);
        /*0x71b977c*/ bool Equals(object obj);
        /*0x71b9814*/ int GetHashCode();
        /*0x71b9848*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalComparer : System.StringComparer
    {
        /*0x10*/ bool _ignoreCase;

        /*0x71b9934*/ OrdinalComparer(bool ignoreCase);
        /*0x71b99a4*/ int Compare(string x, string y);
        /*0x71b99fc*/ bool Equals(string x, string y);
        /*0x71b9a7c*/ int GetHashCode(string obj);
        /*0x71b9b04*/ bool Equals(object obj);
        /*0x71b9b9c*/ int GetHashCode();
    }

    class OrdinalCaseSensitiveComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x71b9354*/ OrdinalCaseSensitiveComparer();
        /*0x71b9c00*/ int Compare(string x, string y);
        /*0x71b9c10*/ bool Equals(string x, string y);
        /*0x71b9c20*/ int GetHashCode(string obj);
        /*0x71b9c48*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalIgnoreCaseComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x71b935c*/ OrdinalIgnoreCaseComparer();
        /*0x71b9ce8*/ int Compare(string x, string y);
        /*0x71b9d00*/ bool Equals(string x, string y);
        /*0x71b9d18*/ int GetHashCode(string obj);
        /*0x71b9d7c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum StringComparison
    {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    }

    enum StringSplitOptions
    {
        None = 0,
        RemoveEmptyEntries = 1,
    }

    class SystemException : System.Exception
    {
        /*0x71b9e1c*/ SystemException();
        /*0x71b24d4*/ SystemException(string message);
        /*0x71b9e9c*/ SystemException(string message, System.Exception innerException);
        /*0x71b25d4*/ SystemException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class STAThreadAttribute : System.Attribute
    {
        /*0x71b9f1c*/ STAThreadAttribute();
    }

    class ThreadStaticAttribute : System.Attribute
    {
        /*0x71b9f24*/ ThreadStaticAttribute();
    }

    struct TimeSpan : System.IComparable, System.IComparable<System.TimeSpan>, System.IEquatable<System.TimeSpan>, System.IFormattable, System.ISpanFormattable
    {
        static /*0x0*/ System.TimeSpan Zero;
        static /*0x8*/ System.TimeSpan MaxValue;
        static /*0x10*/ System.TimeSpan MinValue;
        /*0x10*/ long _ticks;

        static /*0x71bb0ec*/ TimeSpan();
        static /*0x71ba3e4*/ int Compare(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71ba4dc*/ System.TimeSpan FromDays(double value);
        static /*0x71ba6c8*/ System.TimeSpan FromHours(double value);
        static /*0x71ba540*/ System.TimeSpan Interval(double value, int scale);
        static /*0x71ba72c*/ System.TimeSpan FromMilliseconds(double value);
        static /*0x71ba78c*/ System.TimeSpan FromMinutes(double value);
        static /*0x71ba89c*/ System.TimeSpan FromSeconds(double value);
        static /*0x71ba964*/ System.TimeSpan FromTicks(long value);
        static /*0x71b9fb4*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x71ba968*/ System.TimeSpan Parse(string s);
        static /*0x71ba9c4*/ System.TimeSpan Parse(string input, System.IFormatProvider formatProvider);
        static /*0x71baa24*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, ref System.TimeSpan result);
        static /*0x71bace4*/ System.TimeSpan op_UnaryNegation(System.TimeSpan t);
        static /*0x71bad90*/ System.TimeSpan op_Subtraction(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71badf8*/ System.TimeSpan op_Addition(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bae60*/ System.TimeSpan op_Multiply(System.TimeSpan timeSpan, double factor);
        static /*0x71bb03c*/ double op_Division(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bb0a4*/ bool op_Equality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bb0b0*/ bool op_Inequality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bb0bc*/ bool op_LessThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bb0c8*/ bool op_LessThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bb0d4*/ bool op_GreaterThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x71bb0e0*/ bool op_GreaterThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        /*0x71b9f2c*/ TimeSpan(long ticks);
        /*0x71b9f34*/ TimeSpan(int hours, int minutes, int seconds);
        /*0x71ba04c*/ TimeSpan(int days, int hours, int minutes, int seconds);
        /*0x71ba0d4*/ TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
        /*0x71ba190*/ long get_Ticks();
        /*0x71ba198*/ int get_Days();
        /*0x71ba1c4*/ int get_Hours();
        /*0x71ba208*/ int get_Milliseconds();
        /*0x71ba254*/ int get_Minutes();
        /*0x71ba29c*/ int get_Seconds();
        /*0x71ba2e8*/ double get_TotalDays();
        /*0x71ba300*/ double get_TotalHours();
        /*0x71ba318*/ double get_TotalMilliseconds();
        /*0x71ba34c*/ double get_TotalMinutes();
        /*0x71ba364*/ double get_TotalSeconds();
        /*0x71ba37c*/ System.TimeSpan Add(System.TimeSpan ts);
        /*0x71ba3fc*/ int CompareTo(object value);
        /*0x71ba4c0*/ int CompareTo(System.TimeSpan value);
        /*0x71ba634*/ bool Equals(object value);
        /*0x71ba6ac*/ bool Equals(System.TimeSpan obj);
        /*0x71ba6bc*/ int GetHashCode();
        /*0x71ba7ec*/ System.TimeSpan Negate();
        /*0x71ba8fc*/ System.TimeSpan Subtract(System.TimeSpan ts);
        /*0x71baaf8*/ string ToString();
        /*0x71bab5c*/ string ToString(string format);
        /*0x71babcc*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x71bac40*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
    }

    class TimeZone
    {
        static /*0x0*/ System.TimeZone currentTimeZone;
        static /*0x8*/ object s_InternalSyncObject;

        static /*0x71bb144*/ object get_InternalSyncObject();
        static /*0x71bb1e4*/ System.TimeZone get_CurrentTimeZone();
        static /*0x71bb474*/ System.TimeSpan CalculateUtcOffset(System.DateTime time, System.Globalization.DaylightTime daylightTimes);
        /*0x71bb1dc*/ TimeZone();
        System.TimeSpan GetUtcOffset(System.DateTime time);
        /*0x71bb354*/ System.DateTime ToLocalTime(System.DateTime time);
        /*0x380ba90*/ System.Globalization.DaylightTime GetDaylightChanges(int year);
    }

    enum TimeZoneInfoOptions
    {
        None = 1,
        NoThrowOnInvalidTime = 2,
    }

    class TimeoutException : System.SystemException
    {
        /*0x71bb6dc*/ TimeoutException();
        /*0x71bb734*/ TimeoutException(string message);
        /*0x71bb754*/ TimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    interface ITupleInternal : System.Runtime.CompilerServices.ITuple
    {
        /*0x380bb68*/ string ToString(System.Text.StringBuilder sb);
        /*0x380b7a8*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
    }

    class Tuple
    {
        static /*0x3907c14*/ System.Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static /*0x3907c14*/ System.Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3);
        static /*0x3907c14*/ System.Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4);
        static /*0x71bb758*/ int CombineHashCodes(int h1, int h2);
        static /*0x71bb764*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x71bb778*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x71bb794*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x71bb7b8*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x71bb7e4*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x71bb818*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    }

    class Tuple<T1> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;

        /*0x3907c14*/ Tuple(T1 item1);
        /*0x3907c14*/ T1 get_Item1();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2, T3 item3);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x3907c14*/ T3 get_Item3();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x3907c14*/ T3 get_Item3();
        /*0x3907c14*/ T4 get_Item4();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x3907c14*/ T3 get_Item3();
        /*0x3907c14*/ T4 get_Item4();
        /*0x3907c14*/ T5 get_Item5();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x3907c14*/ T3 get_Item3();
        /*0x3907c14*/ T4 get_Item4();
        /*0x3907c14*/ T5 get_Item5();
        /*0x3907c14*/ T6 get_Item6();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;
        /*0x0*/ T7 m_Item7;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x3907c14*/ T3 get_Item3();
        /*0x3907c14*/ T4 get_Item4();
        /*0x3907c14*/ T5 get_Item5();
        /*0x3907c14*/ T6 get_Item6();
        /*0x3907c14*/ T7 get_Item7();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;
        /*0x0*/ T7 m_Item7;
        /*0x0*/ TRest m_Rest;

        /*0x3907c14*/ Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        /*0x3907c14*/ T1 get_Item1();
        /*0x3907c14*/ T2 get_Item2();
        /*0x3907c14*/ T3 get_Item3();
        /*0x3907c14*/ T4 get_Item4();
        /*0x3907c14*/ T5 get_Item5();
        /*0x3907c14*/ T6 get_Item6();
        /*0x3907c14*/ T7 get_Item7();
        /*0x3907c14*/ TRest get_Rest();
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380bb68*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Type : System.Reflection.MemberInfo
    {
        static /*0x0*/ System.Reflection.Binder s_defaultBinder;
        static /*0x8*/ char Delimiter;
        static /*0x10*/ System.Type[] EmptyTypes;
        static /*0x18*/ object Missing;
        static /*0x20*/ System.Reflection.MemberFilter FilterAttribute;
        static /*0x28*/ System.Reflection.MemberFilter FilterName;
        static /*0x30*/ System.Reflection.MemberFilter FilterNameIgnoreCase;
        /*0x10*/ System.RuntimeTypeHandle _impl;

        static /*0x71befa8*/ Type();
        static /*0x71bbd98*/ int BinarySearch(System.Array array, object value);
        static /*0x71bbbbc*/ bool IsIntegerType(System.Type t);
        static /*0x71bcff4*/ bool FilterAttributeImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x71bd334*/ bool FilterNameImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x71bd48c*/ bool FilterNameIgnoreCaseImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x71be394*/ System.RuntimeTypeHandle GetTypeHandle(object o);
        static /*0x71be40c*/ System.TypeCode GetTypeCode(System.Type type);
        static /*0x71be520*/ System.Type GetTypeFromCLSID(System.Guid clsid);
        static /*0x71be95c*/ System.Type MakeGenericSignatureType(System.Type genericTypeDefinition, System.Type[] typeArguments);
        static /*0x71beb44*/ System.Reflection.Binder get_DefaultBinder();
        static /*0x71b22d0*/ System.Type GetTypeFromHandle(System.RuntimeTypeHandle handle);
        static /*0x71bec08*/ System.Type internal_from_handle(nint handle);
        static /*0x71bec60*/ System.Type GetType(string typeName, bool throwOnError, bool ignoreCase);
        static /*0x71becec*/ System.Type GetType(string typeName, bool throwOnError);
        static /*0x71bed6c*/ System.Type GetType(string typeName);
        static /*0x71bede8*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError);
        static /*0x71bbbb0*/ bool op_Equality(System.Type left, System.Type right);
        static /*0x71bc870*/ bool op_Inequality(System.Type left, System.Type right);
        static /*0x71be568*/ System.Type GetTypeFromCLSID(System.Guid clsid, string server, bool throwOnError);
        /*0x71bd5f8*/ Type();
        /*0x71bb854*/ bool IsEnumDefined(object value);
        /*0x71bbec8*/ string GetEnumName(object value);
        /*0x71bc094*/ string[] GetEnumNames();
        /*0x71bbd74*/ System.Array GetEnumRawConstantValues();
        /*0x71bc138*/ void GetEnumData(ref string[] enumNames, ref System.Array enumValues);
        /*0x71bc6c8*/ bool get_IsSerializable();
        /*0x71bc87c*/ bool get_ContainsGenericParameters();
        /*0x71bc98c*/ System.Type GetRootElementType();
        /*0x71bc9dc*/ bool get_IsVisible();
        /*0x71bcbdc*/ bool IsSubclassOf(System.Type c);
        /*0x71bcc74*/ bool IsAssignableFrom(System.Type c);
        /*0x71bced0*/ bool ImplementInterface(System.Type ifaceType);
        /*0x71bd600*/ System.Reflection.MemberTypes get_MemberType();
        /*0x71bd608*/ System.Type GetType();
        /*0x380b9e8*/ string get_Namespace();
        /*0x380b9e8*/ string get_AssemblyQualifiedName();
        /*0x380b9e8*/ string get_FullName();
        /*0x380b9e8*/ System.Reflection.Assembly get_Assembly();
        /*0x380b9e8*/ System.Reflection.Module get_Module();
        /*0x71bcb74*/ bool get_IsNested();
        /*0x71bd610*/ System.Type get_DeclaringType();
        /*0x71bd618*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x71bd620*/ System.Type get_ReflectedType();
        /*0x380b9e8*/ System.Type get_UnderlyingSystemType();
        /*0x71bd628*/ bool get_IsArray();
        /*0x380b128*/ bool IsArrayImpl();
        /*0x71bd638*/ bool get_IsByRef();
        /*0x380b128*/ bool IsByRefImpl();
        /*0x71bd648*/ bool get_IsPointer();
        /*0x380b128*/ bool IsPointerImpl();
        /*0x71bd658*/ bool get_IsConstructedGenericType();
        /*0x71bd6d0*/ bool get_IsGenericParameter();
        /*0x71bd6d8*/ bool get_IsGenericMethodParameter();
        /*0x71bd724*/ bool get_IsGenericType();
        /*0x71bd72c*/ bool get_IsGenericTypeDefinition();
        /*0x71bd734*/ bool get_IsSZArray();
        /*0x71bd758*/ bool get_IsVariableBoundArray();
        /*0x71bc97c*/ bool get_HasElementType();
        /*0x380b128*/ bool HasElementTypeImpl();
        /*0x380b9e8*/ System.Type GetElementType();
        /*0x71bd7a0*/ int GetArrayRank();
        /*0x71bd7ec*/ System.Type GetGenericTypeDefinition();
        /*0x71bd838*/ System.Type[] get_GenericTypeArguments();
        /*0x71bd914*/ System.Type[] GetGenericArguments();
        /*0x71bd960*/ int get_GenericParameterPosition();
        /*0x71bd9ac*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x71bd9e4*/ System.Type[] GetGenericParameterConstraints();
        /*0x71bda5c*/ System.Reflection.TypeAttributes get_Attributes();
        /*0x380b6a0*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x71bda6c*/ bool get_IsAbstract();
        /*0x71bda8c*/ bool get_IsSealed();
        /*0x71bdaac*/ bool get_IsClass();
        /*0x71bdb04*/ bool get_IsNestedAssembly();
        /*0x71bcb4c*/ bool get_IsNestedPublic();
        /*0x71bdb2c*/ bool get_IsNotPublic();
        /*0x71bcbb4*/ bool get_IsPublic();
        /*0x71bdb50*/ bool get_IsExplicitLayout();
        /*0x71bdb78*/ bool get_IsCOMObject();
        /*0x380b128*/ bool IsCOMObjectImpl();
        /*0x71bdb88*/ bool get_IsContextful();
        /*0x71bdb98*/ bool IsContextfulImpl();
        /*0x71bdc14*/ bool get_IsCollectible();
        /*0x71bdc1c*/ bool get_IsEnum();
        /*0x71bdc70*/ bool get_IsMarshalByRef();
        /*0x71bdc80*/ bool IsMarshalByRefImpl();
        /*0x71bdcfc*/ bool get_IsPrimitive();
        /*0x380b128*/ bool IsPrimitiveImpl();
        /*0x71bdaf4*/ bool get_IsValueType();
        /*0x71bdd0c*/ bool IsValueTypeImpl();
        /*0x71bdd60*/ bool get_IsSignatureType();
        /*0x71bdd68*/ System.Reflection.ConstructorInfo GetConstructor(System.Type[] types);
        /*0x71bdd80*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71bdd90*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71bde9c*/ System.Reflection.ConstructorInfo[] GetConstructors();
        /*0x380ba90*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x380bc74*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71bdeb0*/ System.Reflection.FieldInfo GetField(string name);
        /*0x380bc74*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x380ba90*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x71bdec4*/ System.Reflection.MemberInfo[] GetMember(string name);
        /*0x71bded8*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71bdef0*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x380ba90*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
        /*0x71bdf3c*/ System.Reflection.MethodInfo GetMethod(string name);
        /*0x71bdf44*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71bdfb8*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types);
        /*0x71bdfd0*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71bdfe8*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71bdff8*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71be130*/ System.Reflection.MethodInfo[] GetMethods();
        /*0x380ba90*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0x380bc74*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71be144*/ System.Reflection.PropertyInfo GetProperty(string name);
        /*0x71be14c*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71be1c0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType);
        /*0x71be290*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types);
        /*0x71be2a8*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71be2c0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71be348*/ System.Reflection.PropertyInfo[] GetProperties();
        /*0x380ba90*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x71be35c*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x71be45c*/ System.TypeCode GetTypeCodeImpl();
        /*0x380b600*/ System.Guid get_GUID();
        /*0x380b9e8*/ System.Type get_BaseType();
        object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
        /*0x71be5e8*/ System.Type GetInterface(string name);
        /*0x380bba0*/ System.Type GetInterface(string name, bool ignoreCase);
        /*0x380b9e8*/ System.Type[] GetInterfaces();
        /*0x71be5fc*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType);
        /*0x71be648*/ bool IsInstanceOfType(object o);
        /*0x71be684*/ bool IsEquivalentTo(System.Type other);
        /*0x71be6c4*/ System.Type GetEnumUnderlyingType();
        /*0x71be7ac*/ System.Array GetEnumValues();
        /*0x71be830*/ System.Type MakeArrayType();
        /*0x71be868*/ System.Type MakeArrayType(int rank);
        /*0x71be8a0*/ System.Type MakeByRefType();
        /*0x71be8d8*/ System.Type MakeGenericType(System.Type[] typeArguments);
        /*0x71be924*/ System.Type MakePointerType();
        /*0x71be9c8*/ string ToString();
        /*0x71bea28*/ bool Equals(object o);
        /*0x71bea80*/ int GetHashCode();
        /*0x71beac8*/ bool Equals(System.Type o);
        /*0x71bec0c*/ bool get_IsSzArray();
        /*0x71bec14*/ string FormatTypeName();
        /*0x71bec28*/ string FormatTypeName(bool serialization);
        /*0x71bce0c*/ bool get_IsInterface();
        /*0x71bee10*/ string get_FullNameOrDefault();
        /*0x71bc7e4*/ bool IsRuntimeImplemented();
        /*0x71bef2c*/ string InternalGetNameIfAvailable(ref System.Type rootCauseForFailure);
        /*0x71bef08*/ string get_InternalNameIfAvailable();
        /*0x71bef38*/ string get_NameOrDefault();
    }

    class TypeAccessException : System.TypeLoadException
    {
        /*0x71bf188*/ TypeAccessException();
        /*0x71bf1e4*/ TypeAccessException(string message);
        /*0x71bf208*/ TypeAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum TypeCode
    {
        Empty = 0,
        Object = 1,
        DBNull = 2,
        Boolean = 3,
        Char = 4,
        SByte = 5,
        Byte = 6,
        Int16 = 7,
        UInt16 = 8,
        Int32 = 9,
        UInt32 = 10,
        Int64 = 11,
        UInt64 = 12,
        Single = 13,
        Double = 14,
        Decimal = 15,
        DateTime = 16,
        String = 18,
    }

    class TypeInitializationException : System.SystemException
    {
        /*0x90*/ string _typeName;

        /*0x71bf210*/ TypeInitializationException();
        /*0x71bf268*/ TypeInitializationException(string fullTypeName, System.Exception innerException);
        /*0x71bf2f4*/ TypeInitializationException(string fullTypeName, string message, System.Exception innerException);
        /*0x71bf338*/ TypeInitializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71bf3c4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71bf484*/ string get_TypeName();
    }

    struct UInt16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ushort>, System.IEquatable<ushort>, System.ISpanFormattable
    {
        /*0x10*/ ushort m_value;

        static /*0x71bf830*/ ushort Parse(string s, System.IFormatProvider provider);
        static /*0x71bfa34*/ ushort Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71bf8a8*/ ushort Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x71bfac4*/ bool TryParse(string s, ref ushort result);
        static /*0x71bfc00*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ushort result);
        static /*0x71bfb44*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref ushort result);
        /*0x71bf4a8*/ int CompareTo(object value);
        /*0x71bf534*/ int CompareTo(ushort value);
        /*0x71bf540*/ bool Equals(object obj);
        /*0x71bf588*/ bool Equals(ushort obj);
        /*0x71bf598*/ int GetHashCode();
        /*0x71bf5a0*/ string ToString();
        /*0x71bf638*/ string ToString(System.IFormatProvider provider);
        /*0x71bf6d4*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71bf78c*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71bfca8*/ System.TypeCode GetTypeCode();
        /*0x71bfcb0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71bfd0c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71bfd68*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71bfdc4*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71bfe20*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71bfe7c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71bfe84*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71bfee0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71bff3c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71bff98*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71bfff4*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71c0050*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71c00ac*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71c0108*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71c018c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<uint>, System.IEquatable<uint>, System.ISpanFormattable
    {
        /*0x10*/ uint m_value;

        static /*0x71c068c*/ uint Parse(string s);
        static /*0x71c0740*/ uint Parse(string s, System.IFormatProvider provider);
        static /*0x71c0804*/ uint Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71c08d8*/ bool TryParse(string s, ref uint result);
        static /*0x71c09ac*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref uint result);
        /*0x71c022c*/ int CompareTo(object value);
        /*0x71c02cc*/ int CompareTo(uint value);
        /*0x71c02e8*/ bool Equals(object obj);
        /*0x71c0330*/ bool Equals(uint obj);
        /*0x71c0340*/ int GetHashCode();
        /*0x71c0348*/ string ToString();
        /*0x71c03e0*/ string ToString(System.IFormatProvider provider);
        /*0x71c047c*/ string ToString(string format);
        /*0x71c0530*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71c05e8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71c0aa4*/ System.TypeCode GetTypeCode();
        /*0x71c0aac*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71c0b08*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71c0b64*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71c0bc0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71c0c1c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71c0c78*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71c0cd4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71c0d30*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71c0d38*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71c0d94*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71c0df0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71c0e4c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71c0ea8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71c0f04*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71c0f88*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ulong>, System.IEquatable<ulong>, System.ISpanFormattable
    {
        /*0x10*/ ulong m_value;

        static /*0x71c148c*/ ulong Parse(string s);
        static /*0x71c1540*/ ulong Parse(string s, System.Globalization.NumberStyles style);
        static /*0x71c160c*/ ulong Parse(string s, System.IFormatProvider provider);
        static /*0x71c16d0*/ ulong Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x71c17a4*/ bool TryParse(string s, ref ulong result);
        static /*0x71c1878*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ulong result);
        /*0x71c1028*/ int CompareTo(object value);
        /*0x71c10c8*/ int CompareTo(ulong value);
        /*0x71c10e4*/ bool Equals(object obj);
        /*0x71c112c*/ bool Equals(ulong obj);
        /*0x71c113c*/ int GetHashCode();
        /*0x71c1148*/ string ToString();
        /*0x71c11e0*/ string ToString(System.IFormatProvider provider);
        /*0x71c127c*/ string ToString(string format);
        /*0x71c1330*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71c13e8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71c1970*/ System.TypeCode GetTypeCode();
        /*0x71c1978*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71c19d4*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71c1a30*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71c1a8c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71c1ae8*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71c1b44*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71c1ba0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71c1bfc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71c1c58*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71c1cb4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71c1cbc*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71c1d18*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71c1d74*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71c1dd0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71c1e54*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class UnauthorizedAccessException : System.SystemException
    {
        /*0x71c1ef4*/ UnauthorizedAccessException();
        /*0x71c1f4c*/ UnauthorizedAccessException(string message);
        /*0x71c1f6c*/ UnauthorizedAccessException(string message, System.Exception inner);
        /*0x71c1f8c*/ UnauthorizedAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnhandledExceptionEventArgs : System.EventArgs
    {
        /*0x10*/ object _exception;
        /*0x18*/ bool _isTerminating;

        /*0x71c1f90*/ UnhandledExceptionEventArgs(object exception, bool isTerminating);
        /*0x71c2014*/ object get_ExceptionObject();
        /*0x71c201c*/ bool get_IsTerminating();
    }

    class UnhandledExceptionEventHandler : System.MulticastDelegate
    {
        /*0x71c2024*/ UnhandledExceptionEventHandler(object object, nint method);
        /*0x71c2130*/ void Invoke(object sender, System.UnhandledExceptionEventArgs e);
    }

    interface IValueTupleInternal : System.Runtime.CompilerServices.ITuple
    {
        /*0x380b7a8*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToStringEnd();
    }

    struct ValueTuple : System.IEquatable<System.ValueTuple>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        static /*0x3907c14*/ System.ValueTuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static /*0x71c24d4*/ int CombineHashCodes(int h1, int h2);
        static /*0x71c2550*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x71c25d0*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x71c2660*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x71c26f8*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x71c27a0*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x71c2850*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
        /*0x71c2144*/ bool Equals(object obj);
        /*0x71c21a0*/ bool Equals(System.ValueTuple other);
        /*0x71c21a8*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x71c2204*/ int System.IComparable.CompareTo(object other);
        /*0x71c2318*/ int CompareTo(System.ValueTuple other);
        /*0x71c2320*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x71c2434*/ int GetHashCode();
        /*0x71c243c*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x71c2444*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x71c244c*/ string ToString();
        /*0x71c248c*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x71c24cc*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1> : System.IEquatable<System.ValueTuple<T1>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;

        /*0x3907c14*/ ValueTuple(T1 item1);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2> : System.IEquatable<System.ValueTuple<T1, T2>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3> : System.IEquatable<System.ValueTuple<T1, T2, T3>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2, T3 item3);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2, T3> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2, T3> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2, T3, T4> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;
        /*0x0*/ TRest Rest;

        /*0x3907c14*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        /*0x380b2f0*/ bool Equals(object obj);
        /*0x3907c14*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        /*0x380b32c*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IComparable.CompareTo(object other);
        /*0x3907c14*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x380b6a0*/ int GetHashCode();
        /*0x380b7a8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x380b7a8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x380b9e8*/ string ToString();
        /*0x380b9e8*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x380b6a0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Version : System.ICloneable, System.IComparable, System.IComparable<System.Version>, System.IEquatable<System.Version>, System.ISpanFormattable
    {
        /*0x10*/ int _Major;
        /*0x14*/ int _Minor;
        /*0x18*/ int _Build;
        /*0x1c*/ int _Revision;

        static /*0x71c2c0c*/ System.Version Parse(string input);
        static /*0x71c3840*/ bool TryParse(string input, ref System.Version result);
        static /*0x71c33f4*/ System.Version ParseVersion(System.ReadOnlySpan<char> input, bool throwOnFailure);
        static /*0x71c38f4*/ bool TryParseComponent(System.ReadOnlySpan<char> component, string componentName, bool throwOnFailure, ref int parsedComponent);
        static /*0x71c2e34*/ bool op_Equality(System.Version v1, System.Version v2);
        static /*0x71c38cc*/ bool op_Inequality(System.Version v1, System.Version v2);
        static /*0x71c3a08*/ bool op_LessThan(System.Version v1, System.Version v2);
        /*0x71c2910*/ Version(int major, int minor, int build, int revision);
        /*0x71c2a24*/ Version(int major, int minor, int build);
        /*0x71c2b10*/ Version(int major, int minor);
        /*0x71c2bc8*/ Version(string version);
        /*0x71c2ca4*/ Version();
        /*0x71c2cc8*/ Version(System.Version version);
        /*0x71c2d04*/ object Clone();
        /*0x71c2d5c*/ int get_Major();
        /*0x71c2d64*/ int get_Minor();
        /*0x71c2d6c*/ int get_Build();
        /*0x71c2d74*/ int get_Revision();
        /*0x71c2d7c*/ int CompareTo(object version);
        /*0x71c2e48*/ int CompareTo(System.Version value);
        /*0x71c2eb0*/ bool Equals(object obj);
        /*0x71c2f14*/ bool Equals(System.Version obj);
        /*0x71c2f74*/ int GetHashCode();
        /*0x71c2f90*/ string ToString();
        /*0x71c2fe0*/ string ToString(int fieldCount);
        /*0x71c3274*/ bool TryFormat(System.Span<char> destination, ref int charsWritten);
        /*0x71c32a0*/ bool TryFormat(System.Span<char> destination, int fieldCount, ref int charsWritten);
        /*0x71c33c8*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x71c2fb8*/ int get_DefaultFormatFieldCount();
        /*0x71c302c*/ System.Text.StringBuilder ToCachedStringBuilder(int fieldCount);
    }

    struct Void
    {
    }

    struct MutableDecimal
    {
        /*0x10*/ uint Flags;
        /*0x14*/ uint High;
        /*0x18*/ uint Low;
        /*0x1c*/ uint Mid;

        /*0x71c3a68*/ bool get_IsNegative();
        /*0x71c3a74*/ void set_IsNegative(bool value);
        /*0x71c3a90*/ int get_Scale();
        /*0x71c3a98*/ void set_Scale(int value);
    }

    class NotImplemented
    {
        static /*0x71bd67c*/ System.Exception get_ByDesign();
    }

    interface IServiceProvider
    {
        /*0x380bb68*/ object GetService(System.Type serviceType);
    }

    class ConsoleCancelEventHandler : System.MulticastDelegate
    {
        /*0x71c3aac*/ ConsoleCancelEventHandler(object object, nint method);
        /*0x71c3bb8*/ void Invoke(object sender, System.ConsoleCancelEventArgs e);
    }

    class ConsoleCancelEventArgs : System.EventArgs
    {
        /*0x10*/ System.ConsoleSpecialKey _type;
        /*0x14*/ bool <Cancel>k__BackingField;

        /*0x71c3bcc*/ ConsoleCancelEventArgs(System.ConsoleSpecialKey type);
        /*0x71c3c40*/ ConsoleCancelEventArgs();
        /*0x71c3c38*/ bool get_Cancel();
    }

    enum ConsoleColor
    {
        Black = 0,
        DarkBlue = 1,
        DarkGreen = 2,
        DarkCyan = 3,
        DarkRed = 4,
        DarkMagenta = 5,
        DarkYellow = 6,
        Gray = 7,
        DarkGray = 8,
        Blue = 9,
        Green = 10,
        Cyan = 11,
        Red = 12,
        Magenta = 13,
        Yellow = 14,
        White = 15,
    }

    enum ConsoleKey
    {
        Backspace = 8,
        Tab = 9,
        Clear = 12,
        Enter = 13,
        Pause = 19,
        Escape = 27,
        Spacebar = 32,
        PageUp = 33,
        PageDown = 34,
        End = 35,
        Home = 36,
        LeftArrow = 37,
        UpArrow = 38,
        RightArrow = 39,
        DownArrow = 40,
        Select = 41,
        Print = 42,
        Execute = 43,
        PrintScreen = 44,
        Insert = 45,
        Delete = 46,
        Help = 47,
        D0 = 48,
        D1 = 49,
        D2 = 50,
        D3 = 51,
        D4 = 52,
        D5 = 53,
        D6 = 54,
        D7 = 55,
        D8 = 56,
        D9 = 57,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        LeftWindows = 91,
        RightWindows = 92,
        Applications = 93,
        Sleep = 95,
        NumPad0 = 96,
        NumPad1 = 97,
        NumPad2 = 98,
        NumPad3 = 99,
        NumPad4 = 100,
        NumPad5 = 101,
        NumPad6 = 102,
        NumPad7 = 103,
        NumPad8 = 104,
        NumPad9 = 105,
        Multiply = 106,
        Add = 107,
        Separator = 108,
        Subtract = 109,
        Decimal = 110,
        Divide = 111,
        F1 = 112,
        F2 = 113,
        F3 = 114,
        F4 = 115,
        F5 = 116,
        F6 = 117,
        F7 = 118,
        F8 = 119,
        F9 = 120,
        F10 = 121,
        F11 = 122,
        F12 = 123,
        F13 = 124,
        F14 = 125,
        F15 = 126,
        F16 = 127,
        F17 = 128,
        F18 = 129,
        F19 = 130,
        F20 = 131,
        F21 = 132,
        F22 = 133,
        F23 = 134,
        F24 = 135,
        BrowserBack = 166,
        BrowserForward = 167,
        BrowserRefresh = 168,
        BrowserStop = 169,
        BrowserSearch = 170,
        BrowserFavorites = 171,
        BrowserHome = 172,
        VolumeMute = 173,
        VolumeDown = 174,
        VolumeUp = 175,
        MediaNext = 176,
        MediaPrevious = 177,
        MediaStop = 178,
        MediaPlay = 179,
        LaunchMail = 180,
        LaunchMediaSelect = 181,
        LaunchApp1 = 182,
        LaunchApp2 = 183,
        Oem1 = 186,
        OemPlus = 187,
        OemComma = 188,
        OemMinus = 189,
        OemPeriod = 190,
        Oem2 = 191,
        Oem3 = 192,
        Oem4 = 219,
        Oem5 = 220,
        Oem6 = 221,
        Oem7 = 222,
        Oem8 = 223,
        Oem102 = 226,
        Process = 229,
        Packet = 231,
        Attention = 246,
        CrSel = 247,
        ExSel = 248,
        EraseEndOfFile = 249,
        Play = 250,
        Zoom = 251,
        NoName = 252,
        Pa1 = 253,
        OemClear = 254,
    }

    struct ConsoleKeyInfo
    {
        /*0x10*/ char _keyChar;
        /*0x14*/ System.ConsoleKey _key;
        /*0x18*/ System.ConsoleModifiers _mods;

        /*0x71c3c78*/ ConsoleKeyInfo(char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control);
        /*0x71c3d14*/ char get_KeyChar();
        /*0x71c3d1c*/ System.ConsoleKey get_Key();
        /*0x71c3d24*/ bool Equals(object value);
        /*0x71c3dbc*/ bool Equals(System.ConsoleKeyInfo obj);
        /*0x71c3df0*/ int GetHashCode();
    }

    enum ConsoleModifiers
    {
        Alt = 1,
        Shift = 2,
        Control = 4,
    }

    enum ConsoleSpecialKey
    {
        ControlC = 0,
        ControlBreak = 1,
    }

    class DecimalDecCalc
    {
        static /*0x71c3e04*/ uint D32DivMod1E9(uint hi32, ref uint lo32);
        static /*0x71c3e3c*/ uint DecDivMod1E9(ref System.MutableDecimal value);
        static /*0x71c3eac*/ void DecAddInt32(ref System.MutableDecimal value, uint i);
        static /*0x71c3eec*/ bool D32AddCarry(ref uint value, uint i);
        static /*0x71c3f10*/ void DecMul10(ref System.MutableDecimal value);
        static /*0x71c3f6c*/ void DecShiftLeft(ref System.MutableDecimal value);
        static /*0x71c3f8c*/ void DecAdd(ref System.MutableDecimal value, System.MutableDecimal d);
    }

    struct SequencePosition : System.IEquatable<System.SequencePosition>
    {
        /*0x10*/ object _object;
        /*0x18*/ int _integer;

        /*0x71c3ff8*/ SequencePosition(object object, int integer);
        /*0x71c4020*/ object GetObject();
        /*0x71c4028*/ int GetInteger();
        /*0x71c4030*/ bool Equals(System.SequencePosition other);
        /*0x71c4050*/ bool Equals(object obj);
        /*0x71c40dc*/ int GetHashCode();
    }

    class ThrowHelper
    {
        static /*0x71b50ac*/ void ThrowArgumentNullException(System.ExceptionArgument argument);
        static /*0x71c415c*/ System.Exception CreateArgumentNullException(System.ExceptionArgument argument);
        static /*0x71c4200*/ void ThrowArrayTypeMismatchException();
        static /*0x71c4224*/ System.Exception CreateArrayTypeMismatchException();
        static /*0x71c4278*/ void ThrowArgumentException_DestinationTooShort();
        static /*0x71c429c*/ System.Exception CreateArgumentException_DestinationTooShort();
        static /*0x71c4308*/ void ThrowIndexOutOfRangeException();
        static /*0x71c432c*/ System.Exception CreateIndexOutOfRangeException();
        static /*0x71c4380*/ void ThrowArgumentOutOfRangeException();
        static /*0x71c43a4*/ System.Exception CreateArgumentOutOfRangeException();
        static /*0x71c43f8*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x71c441c*/ System.Exception CreateArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x71c44c0*/ void ThrowArgumentOutOfRangeException_PrecisionTooLarge();
        static /*0x71c44e4*/ System.Exception CreateArgumentOutOfRangeException_PrecisionTooLarge();
        static /*0x71c45a8*/ void ThrowArgumentOutOfRangeException_SymbolDoesNotFit();
        static /*0x71c45cc*/ System.Exception CreateArgumentOutOfRangeException_SymbolDoesNotFit();
        static /*0x71c4658*/ void ThrowInvalidOperationException();
        static /*0x71c467c*/ System.Exception CreateInvalidOperationException();
        static /*0x71c46d0*/ void ThrowInvalidOperationException_EndPositionNotReached();
        static /*0x71c46f4*/ System.Exception CreateInvalidOperationException_EndPositionNotReached();
        static /*0x71c4760*/ void ThrowArgumentOutOfRangeException_PositionOutOfRange();
        static /*0x71c4784*/ System.Exception CreateArgumentOutOfRangeException_PositionOutOfRange();
        static /*0x71c47f0*/ void ThrowArgumentOutOfRangeException_OffsetOutOfRange();
        static /*0x71c4814*/ System.Exception CreateArgumentOutOfRangeException_OffsetOutOfRange();
        static /*0x71c4880*/ void ThrowObjectDisposedException_ArrayMemoryPoolBuffer();
        static /*0x71c48a4*/ System.Exception CreateObjectDisposedException_ArrayMemoryPoolBuffer();
        static /*0x71c490c*/ void ThrowFormatException_BadFormatSpecifier();
        static /*0x71c4930*/ System.Exception CreateFormatException_BadFormatSpecifier();
        static /*0x71c499c*/ void ThrowNotSupportedException();
        static /*0x71c49c0*/ System.Exception CreateThrowNotSupportedException();
        static /*0x71c4a14*/ bool TryFormatThrowFormatException(ref int bytesWritten);
        static /*0x381cca4*/ bool TryParseThrowFormatException<T>(ref T value, ref int bytesConsumed);
        static /*0x383a19c*/ void ThrowArgumentValidationException<T>(System.Buffers.ReadOnlySequenceSegment<T> startSegment, int startIndex, System.Buffers.ReadOnlySequenceSegment<T> endSegment);
        static /*0x383030c*/ System.Exception CreateArgumentValidationException<T>(System.Buffers.ReadOnlySequenceSegment<T> startSegment, int startIndex, System.Buffers.ReadOnlySequenceSegment<T> endSegment);
        static /*0x71c4a20*/ void ThrowStartOrEndArgumentValidationException(long start);
        static /*0x71c4a44*/ System.Exception CreateStartOrEndArgumentValidationException(long start);
        static /*0x71c4a58*/ void ThrowWrongKeyTypeArgumentException(object key, System.Type targetType);
        static /*0x71c4b2c*/ void ThrowWrongValueTypeArgumentException(object value, System.Type targetType);
        static /*0x71c4c00*/ void ThrowArgumentException(System.ExceptionResource resource);
        static /*0x71c4ed0*/ void ThrowArgumentException(System.ExceptionResource resource, System.ExceptionArgument argument);
        static /*0x71c50ac*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x71c5148*/ void ThrowInvalidOperationException(System.ExceptionResource resource);
        static /*0x71c5198*/ void ThrowSerializationException(System.ExceptionResource resource);
        static /*0x71c51e8*/ void ThrowNotSupportedException(System.ExceptionResource resource);
        static /*0x71c5238*/ void ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion();
        static /*0x71c5284*/ void ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen();
        static /*0x71c52d0*/ void ThrowInvalidOperationException_InvalidOperation_EnumNotStarted();
        static /*0x71c531c*/ void ThrowInvalidOperationException_InvalidOperation_EnumEnded();
        static /*0x71c5368*/ void ThrowInvalidOperationException_InvalidOperation_NoValue();
        static /*0x71c53b4*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, string resource);
        static /*0x71c5430*/ void ThrowArgumentOutOfRange_IndexException();
        static /*0x71c5468*/ void ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
        static /*0x71c54a0*/ void ThrowArgumentException_Argument_InvalidArrayType();
        static /*0x71c54ec*/ System.ArgumentException GetAddingDuplicateWithKeyArgumentException(object key);
        static /*0x71c557c*/ void ThrowAddingDuplicateWithKeyArgumentException(object key);
        static /*0x71c55a0*/ System.Collections.Generic.KeyNotFoundException GetKeyNotFoundException(object key);
        static /*0x71c5618*/ void ThrowKeyNotFoundException(object key);
        static /*0x71c5620*/ void ThrowInvalidTypeWithPointersNotSupported(System.Type targetType);
        static /*0x71c5680*/ void ThrowInvalidOperationException_ConcurrentOperationsNotSupported();
        static /*0x71c56b0*/ System.InvalidOperationException GetInvalidOperationException(string str);
        static /*0x71c570c*/ void ThrowArraySegmentCtorValidationFailedExceptions(System.Array array, int offset, int count);
        static /*0x71c5730*/ System.Exception GetArraySegmentCtorValidationFailedException(System.Array array, int offset, int count);
        static /*0x71c5884*/ System.ArgumentException GetArgumentException(System.ExceptionResource resource);
        static /*0x71c5760*/ System.ArgumentNullException GetArgumentNullException(System.ExceptionArgument argument);
        static /*0x3839e58*/ void IfNullAndNullsAreIllegalThenThrow<T>(object value, System.ExceptionArgument argName);
        static /*0x71c4f34*/ string GetArgumentName(System.ExceptionArgument argument);
        static /*0x71c57cc*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x71c5928*/ void ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index();
        static /*0x71c5954*/ void ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count();
        static /*0x71c4c50*/ string GetResourceName(System.ExceptionResource resource);
    }

    class AppDomainUnloadedException : System.SystemException
    {
        /*0x71c5980*/ AppDomainUnloadedException();
        /*0x71c59d8*/ AppDomainUnloadedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class CannotUnloadAppDomainException : System.SystemException
    {
        /*0x71c59dc*/ CannotUnloadAppDomainException();
        /*0x71c5a34*/ CannotUnloadAppDomainException(string message);
        /*0x71c5a54*/ CannotUnloadAppDomainException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OperatingSystem : System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        /*0x10*/ System.Version _version;
        /*0x18*/ System.PlatformID _platform;
        /*0x20*/ string _servicePack;
        /*0x28*/ string _versionString;

        /*0x71c5a58*/ OperatingSystem(System.PlatformID platform, System.Version version);
        /*0x71c5a60*/ OperatingSystem(System.PlatformID platform, System.Version version, string servicePack);
        /*0x71c5bac*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c5be0*/ System.PlatformID get_Platform();
        /*0x71c5be8*/ System.Version get_Version();
        /*0x71c5bf0*/ object Clone();
        /*0x71c5c64*/ string ToString();
        /*0x71c5c68*/ string get_VersionString();
    }

    class InsufficientMemoryException : System.OutOfMemoryException
    {
        /*0x71c5e50*/ InsufficientMemoryException();
        /*0x71c5ec8*/ InsufficientMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MissingFieldException : System.MissingMemberException, System.Runtime.Serialization.ISerializable
    {
        /*0x71c5ed0*/ MissingFieldException();
        /*0x71c5f50*/ MissingFieldException(string message);
        /*0x71c5f74*/ MissingFieldException(string className, string fieldName);
        /*0x71c6010*/ MissingFieldException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c61a0*/ string get_Message();
    }

    class MissingMemberException : System.MemberAccessException
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string MemberName;
        /*0xa0*/ byte[] Signature;

        static /*0x71c64b4*/ string FormatSignature(byte[] signature);
        /*0x71c5fb4*/ MissingMemberException();
        /*0x71c5f2c*/ MissingMemberException(string message);
        /*0x71c6014*/ MissingMemberException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c6370*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71c6288*/ string get_Message();
    }

    class OutOfMemoryException : System.SystemException
    {
        /*0x71c64cc*/ OutOfMemoryException();
        /*0x71c5ea8*/ OutOfMemoryException(string message);
        /*0x71c5ecc*/ OutOfMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable
    {
        static /*0x71c6524*/ System.Array CreateInstance(System.Type elementType, long[] lengths);
        static /*0x382eaf0*/ System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
        static /*0x3839e58*/ void Resize<T>(ref T[] array, int newSize);
        static /*0x71c76cc*/ int CombineHashCodes(int h1, int h2);
        static /*0x71c7848*/ int BinarySearch(System.Array array, object value);
        static /*0x3830700*/ TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, System.Converter<TInput, TOutput> converter);
        static /*0x71c7d6c*/ void Copy(System.Array sourceArray, System.Array destinationArray, long length);
        static /*0x71c7ea0*/ void Copy(System.Array sourceArray, long sourceIndex, System.Array destinationArray, long destinationIndex, long length);
        static /*0x383af28*/ void ForEach<T>(T[] array, System.Action<T> action);
        static /*0x71c84fc*/ int BinarySearch(System.Array array, int index, int length, object value);
        static /*0x71c8504*/ int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer);
        static /*0x71c78d8*/ int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer);
        static /*0x71c85a0*/ int GetMedian(int low, int hi);
        static /*0x3907c14*/ int BinarySearch<T>(T[] array, T value);
        static /*0x3907c14*/ int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x3907c14*/ int BinarySearch<T>(T[] array, int index, int length, T value);
        static /*0x3907c14*/ int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x71c6ae4*/ int IndexOf(System.Array array, object value);
        static /*0x71c8844*/ int IndexOf(System.Array array, object value, int startIndex);
        static /*0x71c85ac*/ int IndexOf(System.Array array, object value, int startIndex, int count);
        static /*0x3907c14*/ int IndexOf<T>(T[] array, T value);
        static /*0x3907c14*/ int IndexOf<T>(T[] array, T value, int startIndex);
        static /*0x3907c14*/ int IndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x71c88e0*/ int LastIndexOf(System.Array array, object value);
        static /*0x71c8c10*/ int LastIndexOf(System.Array array, object value, int startIndex);
        static /*0x71c8968*/ int LastIndexOf(System.Array array, object value, int startIndex, int count);
        static /*0x3907c14*/ int LastIndexOf<T>(T[] array, T value);
        static /*0x3907c14*/ int LastIndexOf<T>(T[] array, T value, int startIndex);
        static /*0x3907c14*/ int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x71c8c68*/ void Reverse(System.Array array);
        static /*0x71c8cec*/ void Reverse(System.Array array, int index, int length);
        static /*0x3837da0*/ void Reverse<T>(T[] array);
        static /*0x3839f7c*/ void Reverse<T>(T[] array, int index, int length);
        static /*0x71c93e4*/ void Sort(System.Array array);
        static /*0x71c96ac*/ void Sort(System.Array array, int index, int length);
        static /*0x71c96c0*/ void Sort(System.Array array, System.Collections.IComparer comparer);
        static /*0x71c9750*/ void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer);
        static /*0x71c9764*/ void Sort(System.Array keys, System.Array items);
        static /*0x71c97f4*/ void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer);
        static /*0x71c9890*/ void Sort(System.Array keys, System.Array items, int index, int length);
        static /*0x71c9470*/ void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static /*0x3837da0*/ void Sort<T>(T[] array);
        static /*0x3839f7c*/ void Sort<T>(T[] array, int index, int length);
        static /*0x383af28*/ void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer);
        static /*0x383a00c*/ void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
        static /*0x383af28*/ void Sort<T>(T[] array, System.Comparison<T> comparison);
        static /*0x383af28*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
        static /*0x383b540*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
        static /*0x383bc84*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
        static /*0x383b584*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
        static /*0x381cca4*/ bool Exists<T>(T[] array, System.Predicate<T> match);
        static /*0x3907c14*/ void Fill<T>(T[] array, T value);
        static /*0x3907c14*/ void Fill<T>(T[] array, T value, int startIndex, int count);
        static /*0x3907c14*/ T Find<T>(T[] array, System.Predicate<T> match);
        static /*0x3830700*/ T[] FindAll<T>(T[] array, System.Predicate<T> match);
        static /*0x3827170*/ int FindIndex<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static /*0x3907c14*/ T FindLast<T>(T[] array, System.Predicate<T> match);
        static /*0x3827170*/ int FindLastIndex<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static /*0x381cca4*/ bool TrueForAll<T>(T[] array, System.Predicate<T> match);
        static /*0x71c9ac0*/ bool FastCopy(System.Array source, int source_idx, System.Array dest, int dest_idx, int length);
        static /*0x71c9ac4*/ System.Array CreateInstanceImpl(System.Type elementType, int[] lengths, int[] bounds);
        static /*0x71c9b00*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x71c9eac*/ System.Array UnsafeCreateInstance(System.Type elementType, int length1, int length2);
        static /*0x71c9f38*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths);
        static /*0x71c9f3c*/ System.Array CreateInstance(System.Type elementType, int length);
        static /*0x71c9eb0*/ System.Array CreateInstance(System.Type elementType, int length1, int length2);
        static /*0x71c9fb4*/ System.Array CreateInstance(System.Type elementType, int length1, int length2, int length3);
        static /*0x71c669c*/ System.Array CreateInstance(System.Type elementType, int[] lengths);
        static /*0x71c9b04*/ System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x71c6bac*/ void Clear(System.Array array, int index, int length);
        static /*0x71ca054*/ void ClearInternal(System.Array a, int index, int count);
        static /*0x71c7ddc*/ void Copy(System.Array sourceArray, System.Array destinationArray, int length);
        static /*0x71c6e60*/ void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x71ca058*/ System.ArrayTypeMismatchException CreateArrayTypeMismatchException();
        static /*0x71ca0ac*/ bool CanAssignArrayElement(System.Type source, System.Type target);
        static /*0x71ca180*/ void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x382dee4*/ T[] Empty<T>();
        static /*0x3907c14*/ int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x3907c14*/ int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x71c9898*/ void SortImpl(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static /*0x3907c14*/ T UnsafeLoad<T>(T[] array, int index);
        static /*0x3907c14*/ void UnsafeStore<T>(T[] array, int index, T value);
        static /*0x3907c14*/ R UnsafeMov<S, R>(S instance);
        /*0x71c99f0*/ Array();
        /*0x71c68f0*/ int System.Collections.ICollection.get_Count();
        /*0x71c68f4*/ bool System.Collections.IList.get_IsReadOnly();
        /*0x71c68fc*/ object System.Collections.IList.get_Item(int index);
        /*0x71c6900*/ void System.Collections.IList.set_Item(int index, object value);
        /*0x71c6a80*/ int System.Collections.IList.Add(object value);
        /*0x71c6acc*/ bool System.Collections.IList.Contains(object value);
        /*0x71c6b70*/ void System.Collections.IList.Clear();
        /*0x71c6cc4*/ int System.Collections.IList.IndexOf(object value);
        /*0x71c6cc8*/ void System.Collections.IList.Insert(int index, object value);
        /*0x71c6d14*/ void System.Collections.IList.Remove(object value);
        /*0x71c6d60*/ void System.Collections.IList.RemoveAt(int index);
        /*0x71c6dac*/ void CopyTo(System.Array array, int index);
        /*0x71c7368*/ object Clone();
        /*0x71c7370*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x71c7544*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x71c76d8*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x71c7f68*/ void CopyTo(System.Array array, long index);
        /*0x71c7fd8*/ long get_LongLength();
        /*0x71c8040*/ long GetLongLength(int dimension);
        /*0x71c8054*/ object GetValue(long index);
        /*0x71c80c4*/ object GetValue(long index1, long index2);
        /*0x71c81ec*/ object GetValue(long index1, long index2, long index3);
        /*0x71c8354*/ object GetValue(long[] indices);
        /*0x71c84e0*/ bool get_IsFixedSize();
        /*0x71c84e8*/ bool get_IsReadOnly();
        /*0x71c84f0*/ bool get_IsSynchronized();
        /*0x71c84f8*/ object get_SyncRoot();
        /*0x71c8f30*/ void SetValue(object value, long index);
        /*0x71c8fa0*/ void SetValue(object value, long index1, long index2);
        /*0x71c90d8*/ void SetValue(object value, long index1, long index2, long index3);
        /*0x71c9248*/ void SetValue(object value, long[] indices);
        /*0x71c9994*/ System.Collections.IEnumerator GetEnumerator();
        /*0x71c99f8*/ int InternalArray__ICollection_get_Count();
        /*0x71c99fc*/ bool InternalArray__ICollection_get_IsReadOnly();
        /*0x71c9a04*/ ref byte GetRawSzArrayData();
        /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
        /*0x71c9a18*/ void InternalArray__ICollection_Clear();
        /*0x3907c14*/ void InternalArray__ICollection_Add<T>(T item);
        /*0x3907c14*/ bool InternalArray__ICollection_Remove<T>(T item);
        /*0x3907c14*/ bool InternalArray__ICollection_Contains<T>(T item);
        /*0x380d8b8*/ void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
        /*0x3907c14*/ T InternalArray__IReadOnlyList_get_Item<T>(int index);
        /*0x71c9a64*/ int InternalArray__IReadOnlyCollection_get_Count();
        /*0x3907c14*/ void InternalArray__Insert<T>(int index, T item);
        /*0x71c9a68*/ void InternalArray__RemoveAt(int index);
        /*0x3907c14*/ int InternalArray__IndexOf<T>(T item);
        /*0x3907c14*/ T InternalArray__get_Item<T>(int index);
        /*0x3907c14*/ void InternalArray__set_Item<T>(int index, T item);
        /*0x380d170*/ void GetGenericValueImpl<T>(int pos, ref T value);
        /*0x380d170*/ void SetGenericValueImpl<T>(int pos, ref T value);
        /*0x71bc500*/ int get_Length();
        /*0x71c6e5c*/ int get_Rank();
        /*0x71c9ab4*/ int GetRank();
        /*0x71c803c*/ int GetLength(int dimension);
        /*0x71c6ba8*/ int GetLowerBound(int dimension);
        /*0x71c84dc*/ object GetValue(int[] indices);
        /*0x71c93e0*/ void SetValue(object value, int[] indices);
        /*0x71c9ab8*/ object GetValueImpl(int pos);
        /*0x71c9abc*/ void SetValueImpl(object value, int pos);
        /*0x71c9ac8*/ int GetUpperBound(int dimension);
        /*0x71bc560*/ object GetValue(int index);
        /*0x71c8164*/ object GetValue(int index1, int index2);
        /*0x71c82b4*/ object GetValue(int index1, int index2, int index3);
        /*0x71c6910*/ void SetValue(object value, int index);
        /*0x71c9040*/ void SetValue(object value, int index1, int index2);
        /*0x71c91a0*/ void SetValue(object value, int index1, int index2, int index3);
        /*0x71ca184*/ void Initialize();

        class ArrayEnumerator : System.Collections.IEnumerator, System.ICloneable
        {
            /*0x10*/ System.Array _array;
            /*0x18*/ int _index;
            /*0x1c*/ int _endIndex;

            /*0x71ca540*/ ArrayEnumerator(System.Array array);
            /*0x71ca598*/ bool MoveNext();
            /*0x71ca5c0*/ void Reset();
            /*0x71ca5cc*/ object Clone();
            /*0x71ca5d4*/ object get_Current();
        }

        class RawData
        {
            /*0x10*/ nint Bounds;
            /*0x18*/ nint Count;
            /*0x20*/ byte Data;
        }

        struct InternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ System.Array array;
            /*0x0*/ int idx;

            /*0x380d83c*/ InternalEnumerator(System.Array array);
            /*0x380cb08*/ void Dispose();
            /*0x380b128*/ bool MoveNext();
            /*0x3907c14*/ T get_Current();
            /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
            /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
        }

        class EmptyInternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            static /*0x0*/ System.Array.EmptyInternalEnumerator<T> Value;

            static /*0x38358cc*/ EmptyInternalEnumerator();
            /*0x380cb08*/ EmptyInternalEnumerator();
            /*0x380cb08*/ void Dispose();
            /*0x380b128*/ bool MoveNext();
            /*0x3907c14*/ T get_Current();
            /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
            /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
        }

        struct SorterObjectArray
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0x71ca6e0*/ SorterObjectArray(object[] keys, object[] items, System.Collections.IComparer comparer);
            /*0x71ca780*/ void SwapIfGreaterWithItems(int a, int b);
            /*0x71ca9ec*/ void Swap(int i, int j);
            /*0x71cab8c*/ void Sort(int left, int length);
            /*0x71cab90*/ void IntrospectiveSort(int left, int length);
            /*0x71cacdc*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0x71cb158*/ int PickPivotAndPartition(int lo, int hi);
            /*0x71cb0b8*/ void Heapsort(int lo, int hi);
            /*0x71cb384*/ void DownHeap(int i, int n, int lo);
            /*0x71cadf0*/ void InsertionSort(int lo, int hi);
        }

        struct SorterGenericArray
        {
            /*0x10*/ System.Array keys;
            /*0x18*/ System.Array items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0x71cb71c*/ SorterGenericArray(System.Array keys, System.Array items, System.Collections.IComparer comparer);
            /*0x71cb7bc*/ void SwapIfGreaterWithItems(int a, int b);
            /*0x71cb98c*/ void Swap(int i, int j);
            /*0x71cba78*/ void Sort(int left, int length);
            /*0x71cba7c*/ void IntrospectiveSort(int left, int length);
            /*0x71cbbd0*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0x71cbf6c*/ int PickPivotAndPartition(int lo, int hi);
            /*0x71cbecc*/ void Heapsort(int lo, int hi);
            /*0x71cc188*/ void DownHeap(int i, int n, int lo);
            /*0x71cbce4*/ void InsertionSort(int lo, int hi);
        }
    }

    struct ByReference<T>
    {
        /*0x0*/ nint _value;

        /*0x380d83c*/ ByReference(ref T value);
        /*0x380b9e8*/ ref T get_Value();
    }

    class MonoTODOAttribute : System.Attribute
    {
        /*0x10*/ string comment;

        /*0x71cc458*/ MonoTODOAttribute();
        /*0x71cc468*/ MonoTODOAttribute(string comment);
    }

    class MonoLimitationAttribute : System.MonoTODOAttribute
    {
        /*0x71cc498*/ MonoLimitationAttribute(string comment);
    }

    class AppContext
    {
        static /*0x0*/ System.Collections.Generic.Dictionary<string, System.AppContext.SwitchValueState> s_switchMap;
        static /*0x8*/ bool s_defaultsInitialized;

        static /*0x71cca4c*/ AppContext();
        static /*0x71cc4c8*/ void InitializeDefaultSwitchValues();
        static /*0x71cc640*/ bool TryGetSwitch(string switchName, ref bool isEnabled);

        enum SwitchValueState
        {
            HasFalseValue = 1,
            HasTrueValue = 2,
            HasLookedForOverride = 4,
            UnknownValue = 8,
        }
    }

    class AppContextSwitches
    {
        static /*0x0*/ bool SetActorAsReferenceWhenCopyingClaimsIdentity;
        static /*0x1*/ bool NoAsyncCurrentCulture;
        static /*0x2*/ bool EnforceJapaneseEraYearRanges;
        static /*0x3*/ bool FormatJapaneseFirstYearAsANumber;
        static /*0x4*/ bool EnforceLegacyJapaneseDateParsing;
    }

    class LocalDataStoreHolder
    {
        /*0x10*/ System.LocalDataStore m_Store;

        /*0x71ccaf8*/ LocalDataStoreHolder(System.LocalDataStore store);
        /*0x71ccb28*/ void Finalize();
        /*0x71ccbe0*/ System.LocalDataStore get_Store();
    }

    class LocalDataStoreElement
    {
        /*0x10*/ object m_value;
        /*0x18*/ long m_cookie;

        /*0x71ccbe8*/ LocalDataStoreElement(long cookie);
        /*0x71ccc10*/ object get_Value();
        /*0x71ccc18*/ void set_Value(object value);
        /*0x71ccc20*/ long get_Cookie();
    }

    class LocalDataStore
    {
        /*0x10*/ System.LocalDataStoreElement[] m_DataTable;
        /*0x18*/ System.LocalDataStoreMgr m_Manager;

        /*0x71ccc28*/ LocalDataStore(System.LocalDataStoreMgr mgr, int InitialCapacity);
        /*0x71ccbc4*/ void Dispose();
        /*0x71ccdb0*/ object GetData(System.LocalDataStoreSlot slot);
        /*0x71ccef4*/ void SetData(System.LocalDataStoreSlot slot, object data);
        /*0x71cd274*/ void FreeData(int slot, long cookie);
        /*0x71ccfd4*/ System.LocalDataStoreElement PopulateElement(System.LocalDataStoreSlot slot);
    }

    class LocalDataStoreSlot
    {
        /*0x10*/ System.LocalDataStoreMgr m_mgr;
        /*0x18*/ int m_slot;
        /*0x20*/ long m_cookie;

        /*0x71cd2e4*/ LocalDataStoreSlot(System.LocalDataStoreMgr mgr, int slot, long cookie);
        /*0x71cd330*/ System.LocalDataStoreMgr get_Manager();
        /*0x71cd338*/ int get_Slot();
        /*0x71cd340*/ long get_Cookie();
        /*0x71cd348*/ void Finalize();
    }

    class LocalDataStoreMgr
    {
        /*0x10*/ bool[] m_SlotInfoTable;
        /*0x18*/ int m_FirstAvailableSlot;
        /*0x20*/ System.Collections.Generic.List<System.LocalDataStore> m_ManagedLocalDataStores;
        /*0x28*/ System.Collections.Generic.Dictionary<string, System.LocalDataStoreSlot> m_KeyToSlotMap;
        /*0x30*/ long m_CookieGenerator;

        /*0x71cdce8*/ LocalDataStoreMgr();
        /*0x71cd58c*/ System.LocalDataStoreHolder CreateLocalDataStore();
        /*0x71cccac*/ void DeleteLocalDataStore(System.LocalDataStore store);
        /*0x71cd754*/ System.LocalDataStoreSlot AllocateDataSlot();
        /*0x71cd9ac*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
        /*0x71cdac8*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
        /*0x71cdbe4*/ void FreeNamedDataSlot(string name);
        /*0x71cd3f4*/ void FreeDataSlot(int slot, long cookie);
        /*0x71cce80*/ void ValidateSlot(System.LocalDataStoreSlot slot);
        /*0x71cd2c8*/ int GetSlotTableLength();
    }

    class Activator
    {
        static /*0x71cddf4*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
        static /*0x71cddfc*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
        static /*0x71ce9ac*/ object CreateInstance(System.Type type, object[] args);
        static /*0x71ce9c4*/ object CreateInstance(System.Type type, object[] args, object[] activationAttributes);
        static /*0x71ce9dc*/ object CreateInstance(System.Type type);
        static /*0x71ce9e8*/ object CreateInstance(System.Type type, bool nonPublic);
        static /*0x71ce9f4*/ object CreateInstance(System.Type type, bool nonPublic, bool wrapExceptions);
        static /*0x3907c14*/ T CreateInstance<T>();
    }

    class Attribute
    {
        static /*0x71cec84*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.PropertyInfo element, System.Type type, bool inherit);
        static /*0x71ced30*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.EventInfo element, System.Type type, bool inherit);
        static /*0x71ceddc*/ System.Attribute[] InternalParamGetCustomAttributes(System.Reflection.ParameterInfo parameter, System.Type attributeType, bool inherit);
        static /*0x71cf2f8*/ bool InternalIsDefined(System.Reflection.PropertyInfo element, System.Type attributeType, bool inherit);
        static /*0x71cf368*/ bool InternalIsDefined(System.Reflection.EventInfo element, System.Type attributeType, bool inherit);
        static /*0x71cf3d8*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type);
        static /*0x71cf3e0*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type, bool inherit);
        static /*0x71cf6c8*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element);
        static /*0x71cf6d0*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, bool inherit);
        static /*0x71cf904*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x71cf90c*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x71cfbd4*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x71cfbdc*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x71cfc68*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit);
        static /*0x71cff10*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, bool inherit);
        static /*0x71d00c8*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, bool inherit);
        static /*0x71d0218*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, System.Type attributeType, bool inherit);
        static /*0x71d045c*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x71d0464*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x71d0684*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element);
        static /*0x71d068c*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, bool inherit);
        static /*0x71d07b0*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x71d07b8*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x71d0a98*/ bool AreFieldValuesEqual(object thisValue, object thatValue);
        /*0x71cc460*/ Attribute();
        /*0x71d0844*/ bool Equals(object obj);
        /*0x71d0c64*/ int GetHashCode();
        /*0x71d0d98*/ object get_TypeId();
        /*0x71d0da0*/ bool Match(object obj);
        /*0x71d0dac*/ bool IsDefaultAttribute();
    }

    class Buffer
    {
        static /*0x71d0db4*/ bool InternalBlockCopy(System.Array src, int srcOffsetBytes, System.Array dst, int dstOffsetBytes, int byteCount);
        static /*0x71d0db8*/ int IndexOfByte(byte* src, byte value, int index, int count);
        static /*0x71d0ed0*/ int _ByteLength(System.Array array);
        static /*0x71d0ed4*/ void ZeroMemory(byte* src, long len);
        static /*0x71d0f58*/ void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len);
        static /*0x71d106c*/ void InternalMemcpy(byte* dest, byte* src, int count);
        static /*0x71d1070*/ int ByteLength(System.Array array);
        static /*0x71d1104*/ void BlockCopy(System.Array src, int srcOffset, System.Array dst, int dstOffset, int count);
        static /*0x71d12ac*/ void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);
        static /*0x71d1360*/ void memcpy4(byte* dest, byte* src, int size);
        static /*0x71d13dc*/ void memcpy2(byte* dest, byte* src, int size);
        static /*0x71d1448*/ void memcpy1(byte* dest, byte* src, int size);
        static /*0x71d0f88*/ void Memcpy(byte* dest, byte* src, int len);
        static /*0x71d1338*/ void Memmove(byte* dest, byte* src, uint len);
        static /*0x3907c14*/ void Memmove<T>(ref T destination, ref T source, ulong elementCount);
    }

    class ContextBoundObject : System.MarshalByRefObject
    {
        /*0x71d14e4*/ ContextBoundObject();
    }

    class ContextStaticAttribute : System.Attribute
    {
        /*0x71d14ec*/ ContextStaticAttribute();
    }

    class DefaultBinder : System.Reflection.Binder
    {
        static /*0x0*/ System.DefaultBinder.Primitives[] _primitiveConversions;

        static /*0x71d6a14*/ DefaultBinder();
        static /*0x71d58ac*/ System.Reflection.MethodBase ExactBinding(System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x71d5c5c*/ System.Reflection.PropertyInfo ExactPropertyBinding(System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x71d5054*/ int FindMostSpecific(System.Reflection.ParameterInfo[] p1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.ParameterInfo[] p2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x71d4cc4*/ int FindMostSpecificType(System.Type c1, System.Type c2, System.Type t);
        static /*0x71d39f0*/ int FindMostSpecificMethod(System.Reflection.MethodBase m1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.MethodBase m2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x71d3ff8*/ int FindMostSpecificField(System.Reflection.FieldInfo cur1, System.Reflection.FieldInfo cur2);
        static /*0x71d5458*/ int FindMostSpecificProperty(System.Reflection.PropertyInfo cur1, System.Reflection.PropertyInfo cur2);
        static /*0x71d5ed4*/ bool CompareMethodSigAndName(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x71d6014*/ int GetHierarchyDepth(System.Type t);
        static /*0x71d5b14*/ System.Reflection.MethodBase FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[] match, int cMatches);
        static /*0x71d386c*/ void ReorderParams(int[] paramOrder, object[] vars);
        static /*0x71d34e4*/ bool CreateParamOrder(int[] paramOrder, System.Reflection.ParameterInfo[] pars, string[] names);
        static /*0x71d4acc*/ bool CanConvertPrimitive(System.RuntimeType source, System.RuntimeType target);
        static /*0x71d371c*/ bool CanConvertPrimitiveObjectToType(object source, System.RuntimeType type);
        static /*0x71d6088*/ bool CompareMethodSig(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x71d68e4*/ bool CanChangePrimitive(System.Type source, System.Type target);
        static /*0x71d6948*/ bool CanPrimitiveWiden(System.Type source, System.Type target);
        /*0x71d6a0c*/ DefaultBinder();
        /*0x71d14f4*/ System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo cultureInfo, string[] names, ref object state);
        /*0x71d3b70*/ System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo cultureInfo);
        /*0x71d40e0*/ System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        /*0x71d5540*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo cultureInfo);
        /*0x71d5598*/ void ReorderArgumentArray(ref object[] args, object state);
        /*0x71d61c8*/ System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);

        class BinderState
        {
            /*0x10*/ int[] m_argsMap;
            /*0x18*/ int m_originalSize;
            /*0x1c*/ bool m_isParamArray;

            /*0x71d3820*/ BinderState(int[] argsMap, int originalSize, bool isParamArray);
        }

        enum Primitives
        {
            Boolean = 8,
            Char = 16,
            SByte = 32,
            Byte = 64,
            Int16 = 128,
            UInt16 = 256,
            Int32 = 512,
            UInt32 = 1024,
            Int64 = 2048,
            UInt64 = 4096,
            Single = 8192,
            Double = 16384,
            Decimal = 32768,
            DateTime = 65536,
            String = 262144,
        }

        class <>c
        {
            static /*0x0*/ System.DefaultBinder.<> <>9;
            static /*0x8*/ System.Predicate<System.Type> <>9__2_0;

            static /*0x71d6ab4*/ <>c();
            /*0x71d6b1c*/ <>c();
            /*0x71d6b24*/ bool <SelectProperty>b__2_0(System.Type t);
        }
    }

    class Empty : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ System.Empty Value;

        static /*0x71d6be0*/ Empty();
        /*0x71d6b58*/ Empty();
        /*0x71d6b60*/ string ToString();
        /*0x71d6b78*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Enum : System.IComparable, System.IFormattable, System.IConvertible
    {
        static string enumSeperator = ", ";
        static /*0x0*/ char[] enumSeperatorCharArray;

        static /*0x71db248*/ Enum();
        static /*0x71d6c48*/ System.Enum.ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, bool getNames);
        static /*0x71d6de0*/ string InternalFormattedHexString(object value);
        static /*0x71d7214*/ string InternalFormat(System.RuntimeType eT, object value);
        static /*0x71d73b8*/ string InternalFlagsFormat(System.RuntimeType eT, object value);
        static /*0x71d75b0*/ ulong ToUInt64(object value);
        static /*0x71d771c*/ int InternalCompareTo(object o1, object o2);
        static /*0x71d7720*/ System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType);
        static /*0x71d6d98*/ bool GetEnumValuesAndNames(System.RuntimeType enumType, ref ulong[] values, ref string[] names);
        static /*0x71d7724*/ object InternalBoxEnum(System.RuntimeType enumType, long value);
        static /*0x381cca4*/ bool TryParse<TEnum>(string value, ref TEnum result);
        static /*0x3907c14*/ bool TryParse<TEnum>(string value, bool ignoreCase, ref TEnum result);
        static /*0x71d7728*/ object Parse(System.Type enumType, string value);
        static /*0x71d776c*/ object Parse(System.Type enumType, string value, bool ignoreCase);
        static /*0x71d7870*/ bool TryParseEnum(System.Type enumType, string value, bool ignoreCase, ref System.Enum.EnumResult parseResult);
        static /*0x71d80f4*/ System.Type GetUnderlyingType(System.Type enumType);
        static /*0x71d8770*/ System.Array GetValues(System.Type enumType);
        static /*0x71d8810*/ ulong[] InternalGetValues(System.RuntimeType enumType);
        static /*0x71d7308*/ string GetName(System.Type enumType, object value);
        static /*0x71d8854*/ string[] GetNames(System.Type enumType);
        static /*0x71d88f4*/ string[] InternalGetNames(System.RuntimeType enumType);
        static /*0x71d8194*/ object ToObject(System.Type enumType, object value);
        static /*0x71d97fc*/ bool IsDefined(System.Type enumType, object value);
        static /*0x71d98ac*/ string Format(System.Type enumType, object value, string format);
        static /*0x71d8adc*/ object ToObject(System.Type enumType, sbyte value);
        static /*0x71d8c80*/ object ToObject(System.Type enumType, short value);
        static /*0x71d8938*/ object ToObject(System.Type enumType, int value);
        static /*0x71d916c*/ object ToObject(System.Type enumType, byte value);
        static /*0x71d9310*/ object ToObject(System.Type enumType, ushort value);
        static /*0x71d8fc8*/ object ToObject(System.Type enumType, uint value);
        static /*0x71d8e24*/ object ToObject(System.Type enumType, long value);
        static /*0x71d85cc*/ object ToObject(System.Type enumType, ulong value);
        static /*0x71d94b4*/ object ToObject(System.Type enumType, char value);
        static /*0x71d9658*/ object ToObject(System.Type enumType, bool value);
        static /*0x3907c14*/ TEnum Parse<TEnum>(string value, bool ignoreCase);
        static /*0x71db150*/ bool TryParse(System.Type enumType, string value, bool ignoreCase, ref object result);
        static /*0x71db1f4*/ bool TryParse(System.Type enumType, string value, ref object result);
        /*0x71db240*/ Enum();
        /*0x71d9e44*/ object get_value();
        /*0x71d9e40*/ object GetValue();
        /*0x71d9e48*/ bool InternalHasFlag(System.Enum flags);
        /*0x71d9e4c*/ int get_hashcode();
        /*0x71d9e50*/ bool Equals(object obj);
        /*0x71d9e58*/ int GetHashCode();
        /*0x71d9e5c*/ string ToString();
        /*0x71d9f1c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x71da164*/ int CompareTo(object target);
        /*0x71d9f20*/ string ToString(string format);
        /*0x71da338*/ string ToString(System.IFormatProvider provider);
        /*0x71da344*/ bool HasFlag(System.Enum flag);
        /*0x71da4c4*/ System.TypeCode GetTypeCode();
        /*0x71da7d8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x71da878*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x71da918*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x71da9b8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x71daa58*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x71daaf8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x71dab98*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x71dac38*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x71dacd8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x71dad78*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x71dae18*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x71daeb8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x71daf58*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x71daff8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x71db0e0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        enum ParseFailureKind
        {
            None = 0,
            Argument = 1,
            ArgumentNull = 2,
            ArgumentWithParameter = 3,
            UnhandledException = 4,
        }

        struct EnumResult
        {
            /*0x10*/ object parsedEnum;
            /*0x18*/ bool canThrow;
            /*0x1c*/ System.Enum.ParseFailureKind m_failure;
            /*0x20*/ string m_failureMessageID;
            /*0x28*/ string m_failureParameter;
            /*0x30*/ object m_failureMessageFormatArgument;
            /*0x38*/ System.Exception m_innerException;

            /*0x71d7828*/ void Init(bool canMethodThrow);
            /*0x71d85bc*/ void SetFailure(System.Exception unhandledException);
            /*0x71d802c*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureParameter);
            /*0x71d8088*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0x71d7eb4*/ System.Exception GetEnumParseException();
        }

        class ValuesAndNames
        {
            /*0x10*/ ulong[] Values;
            /*0x18*/ string[] Names;

            /*0x71d6d9c*/ ValuesAndNames(ulong[] values, string[] names);
        }
    }

    class Exception : System.Runtime.Serialization.ISerializable
    {
        static int _COMPlusExceptionCode = -532462766;
        static /*0x0*/ object s_EDILock;
        /*0x10*/ string _className;
        /*0x18*/ string _message;
        /*0x20*/ System.Collections.IDictionary _data;
        /*0x28*/ System.Exception _innerException;
        /*0x30*/ string _helpURL;
        /*0x38*/ object _stackTrace;
        /*0x40*/ string _stackTraceString;
        /*0x48*/ string _remoteStackTraceString;
        /*0x50*/ int _remoteStackIndex;
        /*0x58*/ object _dynamicMethods;
        /*0x60*/ int _HResult;
        /*0x68*/ string _source;
        /*0x70*/ System.Runtime.Serialization.SafeSerializationManager _safeSerializationManager;
        /*0x78*/ System.Diagnostics.StackTrace[] captured_traces;
        /*0x80*/ nint[] native_trace_ips;
        /*0x88*/ int caught_in_unmanaged;

        static /*0x71dc6f4*/ Exception();
        static /*0x71dc57c*/ string GetMessageFromNativeResources(System.Exception.ExceptionMessageKind kind);
        static /*0x71dc6f0*/ void ReportUnhandledException(System.Exception exception);
        /*0x71db360*/ Exception();
        /*0x71db37c*/ Exception(string message);
        /*0x71db3b4*/ Exception(string message, System.Exception innerException);
        /*0x71db400*/ Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71db2c4*/ void Init();
        /*0x71db944*/ string get_Message();
        /*0x71dba84*/ System.Collections.IDictionary get_Data();
        /*0x71dba38*/ string GetClassName();
        /*0x71dbafc*/ System.Exception get_InnerException();
        /*0x71dbb04*/ System.Reflection.MethodBase get_TargetSite();
        /*0x71dbbb0*/ string get_StackTrace();
        /*0x71dbbb8*/ string GetStackTrace(bool needFileInfo);
        /*0x71dbc0c*/ void SetErrorCode(int hr);
        /*0x71dbc14*/ string get_Source();
        /*0x71dbd2c*/ string ToString();
        /*0x71dbd38*/ string ToString(bool needFileLineInfo, bool needMessage);
        /*0x71dbf84*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71dc400*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
        /*0x71dbc04*/ string StripFileInfo(string stackTrace, bool isRemoteStackTrace);
        /*0x71dc490*/ void RestoreExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo exceptionDispatchInfo);
        /*0x71dc56c*/ int get_HResult();
        /*0x71dc574*/ void set_HResult(int value);
        /*0x71dbaf4*/ System.Type GetType();
        /*0x71dc600*/ System.Exception FixRemotingException();

        enum ExceptionMessageKind
        {
            ThreadAbort = 1,
            ThreadInterrupted = 2,
            OutOfMemory = 3,
        }
    }

    class GC
    {
        static /*0x0*/ object EPHEMERON_TOMBSTONE;

        static /*0x71dca48*/ GC();
        static /*0x71dc770*/ int GetCollectionCount(int generation);
        static /*0x71dc774*/ int GetMaxGeneration();
        static /*0x71dc778*/ void InternalCollect(int generation);
        static /*0x71dc77c*/ void register_ephemeron_array(System.Runtime.CompilerServices.Ephemeron[] array);
        static /*0x71dc780*/ object get_ephemeron_tombstone();
        static /*0x71dc784*/ void GetMemoryInfo(ref uint highMemLoadThreshold, ref ulong totalPhysicalMem, ref uint lastRecordedMemLoad, ref nuint lastRecordedHeapSize, ref nuint lastRecordedFragmentation);
        static /*0x71dc7a0*/ void Collect();
        static /*0x71dc83c*/ int CollectionCount(int generation);
        static /*0x71dc8f8*/ void KeepAlive(object obj);
        static /*0x71dc7f0*/ int get_MaxGeneration();
        static /*0x71dc8fc*/ void WaitForPendingFinalizers();
        static /*0x71dc900*/ void _SuppressFinalize(object o);
        static /*0x71dc904*/ void SuppressFinalize(object obj);
        static /*0x71dc9a4*/ void _ReRegisterForFinalize(object o);
        static /*0x71dc9a8*/ void ReRegisterForFinalize(object obj);
    }

    enum TypeNameFormatFlags
    {
        FormatBasic = 0,
        FormatNamespace = 1,
        FormatFullInst = 2,
        FormatAssembly = 4,
        FormatSignature = 8,
        FormatNoVersion = 16,
        FormatAngleBrackets = 64,
        FormatStubInfo = 128,
        FormatGenericParam = 256,
        FormatSerialization = 259,
    }

    enum TypeNameKind
    {
        Name = 0,
        ToString = 1,
        SerializationName = 2,
        FullName = 3,
    }

    class RuntimeType : System.Reflection.TypeInfo, System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        static System.Reflection.BindingFlags MemberBindingMask = 255;
        static System.Reflection.BindingFlags InvocationMask = 65280;
        static System.Reflection.BindingFlags BinderNonCreateInstance = 15616;
        static System.Reflection.BindingFlags BinderGetSetProperty = 12288;
        static System.Reflection.BindingFlags BinderSetInvokeProperty = 8448;
        static System.Reflection.BindingFlags BinderGetSetField = 3072;
        static System.Reflection.BindingFlags BinderSetInvokeField = 2304;
        static System.Reflection.BindingFlags BinderNonFieldGetSet = 16773888;
        static System.Reflection.BindingFlags ClassicBindingMask = 61696;
        static int GenericParameterCountAny = -1;
        static /*0x0*/ System.RuntimeType ValueType;
        static /*0x8*/ System.RuntimeType EnumType;
        static /*0x10*/ System.RuntimeType ObjectType;
        static /*0x18*/ System.RuntimeType StringType;
        static /*0x20*/ System.RuntimeType DelegateType;
        static /*0x28*/ System.Type[] s_SICtorParamTypes;
        static /*0x30*/ System.Func<System.Type, System.Type[], System.Type> MakeTypeBuilderInstantiation;
        static /*0x38*/ System.RuntimeType s_typedRef;
        /*0x18*/ System.MonoTypeInfo type_info;
        /*0x20*/ object GenericCache;
        /*0x28*/ System.Reflection.RuntimeConstructorInfo m_serializationCtor;

        static /*0x71e6558*/ RuntimeType();
        static /*0x71dcaa0*/ System.RuntimeType GetType(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark);
        static /*0x71dcb08*/ void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type);
        static /*0x71dcc30*/ void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters);
        static /*0x71dce3c*/ void SplitName(string fullname, ref string name, ref string ns);
        static /*0x71dcf74*/ System.Reflection.BindingFlags FilterPreCalculate(bool isPublic, bool isInherited, bool isStatic);
        static /*0x71dcfb0*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, ref bool prefixLookup, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x71dd0e8*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x71dd174*/ bool FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, string name, bool ignoreCase);
        static /*0x71dd1d4*/ bool FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup);
        static /*0x71dd3c0*/ bool FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, string name, bool prefixLookup, string ns);
        static /*0x71dd4d8*/ bool FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x71dd7ac*/ bool FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x71dd560*/ bool FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x71cdff4*/ bool op_Equality(System.RuntimeType left, System.RuntimeType right);
        static /*0x71d0a8c*/ bool op_Inequality(System.RuntimeType left, System.RuntimeType right);
        static /*0x71e4bec*/ object IsConvertibleToPrimitiveType(object value, System.Type targetType);
        static /*0x71e5514*/ System.Type MakePointerType(System.Type type);
        static /*0x71e57ec*/ object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument);
        static /*0x71e25c4*/ System.Type MakeGenericType(System.Type gt, System.Type[] types);
        static /*0x71e5bdc*/ void GetInterfaceMapData(System.Type t, System.Type iface, ref System.Reflection.MethodInfo[] targets, ref System.Reflection.MethodInfo[] methods);
        static /*0x71e5be0*/ void GetGUID(System.Type type, byte[] guid);
        static /*0x71e5c90*/ System.Type GetTypeFromCLSIDImpl(System.Guid clsid, string server, bool throwOnError);
        static /*0x71e5d30*/ System.TypeCode GetTypeCodeImplInternal(System.Type type);
        static /*0x71e489c*/ object CreateInstanceInternal(System.Type type);
        /*0x71dd834*/ RuntimeType();
        /*0x71dd874*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, int genericParamCount, bool allowPrefixLookup);
        /*0x71dddcc*/ System.RuntimeType.ListBuilder<System.Reflection.ConstructorInfo> GetConstructorCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);
        /*0x71de29c*/ System.RuntimeType.ListBuilder<System.Reflection.PropertyInfo> GetPropertyCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, bool allowPrefixLookup);
        /*0x71de79c*/ System.RuntimeType.ListBuilder<System.Reflection.EventInfo> GetEventCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x71debe4*/ System.RuntimeType.ListBuilder<System.Reflection.FieldInfo> GetFieldCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x71df0b0*/ System.RuntimeType.ListBuilder<System.Type> GetNestedTypeCandidates(string fullname, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x71df5fc*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0x71df688*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x71df720*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x71df7a4*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x71df824*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
        /*0x71dfb0c*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71dfd34*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71dffc4*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71e0184*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x71e046c*/ System.Type GetInterface(string fullname, bool ignoreCase);
        /*0x71e07f8*/ System.Type GetNestedType(string fullname, System.Reflection.BindingFlags bindingAttr);
        /*0x71e09e4*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x71e0ec4*/ System.Reflection.Module get_Module();
        /*0x71e0ecc*/ System.Reflection.RuntimeModule GetRuntimeModule();
        /*0x71e0ed4*/ System.Reflection.Assembly get_Assembly();
        /*0x71e0edc*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
        /*0x71e0ee4*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x71e0f08*/ bool IsInstanceOfType(object o);
        /*0x71e0f10*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);
        /*0x71e0f9c*/ bool IsAssignableFrom(System.Type c);
        /*0x71e1074*/ bool IsEquivalentTo(System.Type other);
        /*0x71e1124*/ System.Type get_BaseType();
        /*0x71e1128*/ System.RuntimeType GetBaseType();
        /*0x71e1308*/ System.Type get_UnderlyingSystemType();
        /*0x71e130c*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x71e1314*/ bool IsContextfulImpl();
        /*0x71e131c*/ bool IsByRefImpl();
        /*0x71e1324*/ bool IsPrimitiveImpl();
        /*0x71e132c*/ bool IsPointerImpl();
        /*0x71e1334*/ bool IsCOMObjectImpl();
        /*0x71e1340*/ bool IsValueTypeImpl();
        /*0x71e1418*/ bool get_IsEnum();
        /*0x71e148c*/ bool HasElementTypeImpl();
        /*0x71e1494*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x71e1558*/ bool get_IsSzArray();
        /*0x71e1560*/ bool IsArrayImpl();
        /*0x71e1568*/ int GetArrayRank();
        /*0x71e15ec*/ System.Type GetElementType();
        /*0x71e15f4*/ string[] GetEnumNames();
        /*0x71e1704*/ System.Array GetEnumValues();
        /*0x71e1854*/ System.Type GetEnumUnderlyingType();
        /*0x71e1900*/ bool IsEnumDefined(object value);
        /*0x71e1e00*/ string GetEnumName(object value);
        /*0x71e1fc8*/ System.RuntimeType[] GetGenericArgumentsInternal();
        /*0x71e2040*/ System.Type[] GetGenericArguments();
        /*0x71e20e0*/ System.Type MakeGenericType(System.Type[] instantiation);
        /*0x71e25c8*/ bool get_IsGenericTypeDefinition();
        /*0x71e25d0*/ bool get_IsGenericParameter();
        /*0x71e25d8*/ int get_GenericParameterPosition();
        /*0x71e265c*/ System.Type GetGenericTypeDefinition();
        /*0x71e26e0*/ bool get_IsGenericType();
        /*0x71e26e8*/ bool get_IsConstructedGenericType();
        /*0x71e2730*/ object InvokeMember(string name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, object target, object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParams);
        /*0x71e397c*/ bool Equals(object obj);
        /*0x71e3988*/ object Clone();
        /*0x71e398c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71e39f0*/ object[] GetCustomAttributes(bool inherit);
        /*0x71e3a90*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
        /*0x71e3c24*/ bool IsDefined(System.Type attributeType, bool inherit);
        /*0x71e3db8*/ string FormatTypeName(bool serialization);
        /*0x71e3f78*/ System.Reflection.MemberTypes get_MemberType();
        /*0x71e3fbc*/ System.Type get_ReflectedType();
        /*0x71e3fc8*/ int get_MetadataToken();
        /*0x71e3fd0*/ void CreateInstanceCheckThis();
        /*0x71ce000*/ object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark);
        /*0x71ceb6c*/ object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, bool wrapExceptions, ref System.Threading.StackCrawlMark stackMark);
        /*0x71e4208*/ System.Reflection.RuntimeConstructorInfo GetDefaultConstructor();
        /*0x71e38a4*/ string GetDefaultMemberName();
        /*0x71e43ac*/ System.Reflection.RuntimeConstructorInfo GetSerializationCtor();
        /*0x71e41cc*/ object CreateInstanceSlow(bool publicOnly, bool wrapExceptions, bool skipCheckThis, bool fillCache);
        /*0x71e45dc*/ object CreateInstanceMono(bool nonPublic, bool wrapExceptions);
        /*0x71e48a0*/ object CheckValue(object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
        /*0x71e49d4*/ object TryConvertToType(object value, ref bool failed);
        /*0x71e3f28*/ string GetCachedName(System.TypeNameKind kind);
        /*0x71e5454*/ System.Type make_array_type(int rank);
        /*0x71e5458*/ System.Type MakeArrayType();
        /*0x71e5460*/ System.Type MakeArrayType(int rank);
        /*0x71e54a8*/ System.Type make_byref_type();
        /*0x71e54ac*/ System.Type MakeByRefType();
        /*0x71e5518*/ System.Type MakePointerType();
        /*0x71e55fc*/ bool get_ContainsGenericParameters();
        /*0x71e56f8*/ System.Type[] GetGenericParameterConstraints();
        /*0x71e590c*/ nint GetMethodsByName_native(nint namePtr, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71ddad0*/ System.Reflection.RuntimeMethodInfo[] GetMethodsByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71e5910*/ nint GetPropertiesByName_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71e5914*/ nint GetConstructors_native(System.Reflection.BindingFlags bindingAttr);
        /*0x71de050*/ System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0x71de4a0*/ System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71e5918*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type ifaceType);
        /*0x71e5be4*/ System.Guid get_GUID();
        /*0x71e5cdc*/ System.TypeCode GetTypeCodeImpl();
        /*0x71e5d34*/ string ToString();
        /*0x71e41c4*/ bool IsGenericCOMObjectImpl();
        /*0x71e5d4c*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x71e5d40*/ string getFullName(bool full_name, bool assembly_qualified);
        /*0x71e2038*/ System.Type[] GetGenericArgumentsInternal(bool runtimeArray);
        /*0x71e1514*/ System.Reflection.GenericParameterAttributes GetGenericParameterAttributes();
        /*0x71e2658*/ int GetGenericParameterPosition();
        /*0x71e5d50*/ nint GetEvents_native(nint name, System.RuntimeType.MemberListType listType);
        /*0x71e5d54*/ nint GetFields_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71dedb4*/ System.Reflection.RuntimeFieldInfo[] GetFields_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71de968*/ System.Reflection.RuntimeEventInfo[] GetEvents_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x71e5d58*/ System.Type[] GetInterfaces();
        /*0x71e5d5c*/ nint GetNestedTypes_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71df268*/ System.RuntimeType[] GetNestedTypes_internal(string displayName, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x71e5d60*/ string get_AssemblyQualifiedName();
        /*0x71e5d6c*/ System.Type get_DeclaringType();
        /*0x71e5d70*/ string get_Name();
        /*0x71e5d74*/ string get_Namespace();
        /*0x71e5d78*/ int GetHashCode();
        /*0x71e5e20*/ string get_FullName();
        /*0x71e5f10*/ bool get_IsSZArray();
        /*0x71e5f68*/ bool IsSubclassOf(System.Type type);
        /*0x71e605c*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71e608c*/ System.Reflection.MethodInfo GetMethodImplCommon(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x71e634c*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);

        enum MemberListType
        {
            All = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
            HandleToInfo = 3,
        }

        struct ListBuilder<T>
        {
            /*0x0*/ T[] _items;
            /*0x0*/ T _item;
            /*0x0*/ int _count;
            /*0x0*/ int _capacity;

            /*0x380cffc*/ ListBuilder(int capacity);
            /*0x3907c14*/ T get_Item(int index);
            /*0x380b9e8*/ T[] ToArray();
            /*0x380d8b8*/ void CopyTo(object[] array, int index);
            /*0x380b6a0*/ int get_Count();
            /*0x3907c14*/ void Add(T item);
        }
    }

    class ReflectionOnlyType : System.RuntimeType
    {
        /*0x71e68e4*/ ReflectionOnlyType();
        /*0x71e693c*/ System.RuntimeTypeHandle get_TypeHandle();
    }

    class SharedStatics
    {
        static /*0x0*/ System.SharedStatics _sharedStatics;
        /*0x10*/ System.Security.Util.Tokenizer.StringMaker _maker;

        static /*0x71e6cd8*/ SharedStatics();
        static /*0x71e6998*/ System.Security.Util.Tokenizer.StringMaker GetSharedStringMaker();
        static /*0x71e6b74*/ void ReleaseSharedStringMaker(ref System.Security.Util.Tokenizer.StringMaker maker);
        /*0x71e6990*/ SharedStatics();
    }

    enum ExceptionArgument
    {
        obj = 0,
        dictionary = 1,
        dictionaryCreationThreshold = 2,
        array = 3,
        info = 4,
        key = 5,
        collection = 6,
        list = 7,
        match = 8,
        converter = 9,
        queue = 10,
        stack = 11,
        capacity = 12,
        index = 13,
        startIndex = 14,
        value = 15,
        count = 16,
        arrayIndex = 17,
        name = 18,
        mode = 19,
        item = 20,
        options = 21,
        view = 22,
        sourceBytesToCopy = 23,
        start = 24,
        pointer = 25,
        ownedMemory = 26,
        text = 27,
        length = 28,
        comparer = 29,
        comparable = 30,
        exceptions = 31,
        exception = 32,
        action = 33,
        comparison = 34,
        startSegment = 35,
        endSegment = 36,
        endIndex = 37,
        task = 38,
        source = 39,
        state = 40,
        culture = 41,
        destination = 42,
        byteOffset = 43,
        minimumBufferSize = 44,
        offset = 45,
        values = 46,
        comparisonType = 47,
        s = 48,
        input = 49,
        format = 50,
    }

    enum ExceptionResource
    {
        Argument_ImplementIComparable = 0,
        Argument_InvalidType = 1,
        Argument_InvalidArgumentForComparison = 2,
        Argument_InvalidRegistryKeyPermissionCheck = 3,
        ArgumentOutOfRange_NeedNonNegNum = 4,
        Arg_ArrayPlusOffTooSmall = 5,
        Arg_NonZeroLowerBound = 6,
        Arg_RankMultiDimNotSupported = 7,
        Arg_RegKeyDelHive = 8,
        Arg_RegKeyStrLenBug = 9,
        Arg_RegSetStrArrNull = 10,
        Arg_RegSetMismatchedKind = 11,
        Arg_RegSubKeyAbsent = 12,
        Arg_RegSubKeyValueAbsent = 13,
        Argument_AddingDuplicate = 14,
        Serialization_InvalidOnDeser = 15,
        Serialization_MissingKeys = 16,
        Serialization_NullKey = 17,
        Argument_InvalidArrayType = 18,
        NotSupported_KeyCollectionSet = 19,
        NotSupported_ValueCollectionSet = 20,
        ArgumentOutOfRange_SmallCapacity = 21,
        ArgumentOutOfRange_Index = 22,
        Argument_InvalidOffLen = 23,
        Argument_ItemNotExist = 24,
        ArgumentOutOfRange_Count = 25,
        ArgumentOutOfRange_InvalidThreshold = 26,
        ArgumentOutOfRange_ListInsert = 27,
        NotSupported_ReadOnlyCollection = 28,
        InvalidOperation_CannotRemoveFromStackOrQueue = 29,
        InvalidOperation_EmptyQueue = 30,
        InvalidOperation_EnumOpCantHappen = 31,
        InvalidOperation_EnumFailedVersion = 32,
        InvalidOperation_EmptyStack = 33,
        ArgumentOutOfRange_BiggerThanCollection = 34,
        InvalidOperation_EnumNotStarted = 35,
        InvalidOperation_EnumEnded = 36,
        NotSupported_SortedListNestedWrite = 37,
        InvalidOperation_NoValue = 38,
        InvalidOperation_RegRemoveSubKey = 39,
        Security_RegistryPermission = 40,
        UnauthorizedAccess_RegistryNoWrite = 41,
        ObjectDisposed_RegKeyClosed = 42,
        NotSupported_InComparableType = 43,
        Argument_InvalidRegistryOptionsCheck = 44,
        Argument_InvalidRegistryViewCheck = 45,
        TaskT_TransitionToFinal_AlreadyCompleted = 46,
        TaskCompletionSourceT_TrySetException_NullException = 47,
        TaskCompletionSourceT_TrySetException_NoExceptions = 48,
        NotSupported_StringComparison = 49,
        InvalidOperation_NullArray = 50,
    }

    struct TypedReference
    {
        /*0x10*/ System.RuntimeTypeHandle type;
        /*0x18*/ nint Value;
        /*0x20*/ nint Type;

        static /*0x71e6d34*/ System.TypedReference MakeTypedReference(object target, System.Reflection.FieldInfo[] flds);
        static /*0x71e7160*/ void InternalMakeTypedReference(void* result, object target, nint[] flds, System.RuntimeType lastFieldType);
        static /*0x71e7230*/ void SetTypedReference(System.TypedReference target, object value);
        /*0x71e7164*/ int GetHashCode();
        /*0x71e71c0*/ bool Equals(object o);
        /*0x71e7210*/ bool get_IsNull();
    }

    class TypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string AssemblyName;
        /*0xa0*/ string MessageArg;
        /*0xa8*/ int ResourceId;

        /*0x71e727c*/ TypeLoadException();
        /*0x71e72dc*/ TypeLoadException(string message);
        /*0x71e7448*/ TypeLoadException(string className, string assemblyName);
        /*0x71e7454*/ TypeLoadException(string className, string assemblyName, string messageArg, int resourceId);
        /*0x71e74dc*/ TypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71e7304*/ string get_Message();
        /*0x71e731c*/ void SetMessageField();
        /*0x71e7644*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnitySerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Type[] m_instantiation;
        /*0x18*/ int[] m_elementTypes;
        /*0x20*/ int m_genericParameterPosition;
        /*0x28*/ System.Type m_declaringType;
        /*0x30*/ System.Reflection.MethodBase m_declaringMethod;
        /*0x38*/ string m_data;
        /*0x40*/ string m_assemblyName;
        /*0x48*/ int m_unityType;

        static /*0x71e77f4*/ System.RuntimeType AddElementTypes(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x71e7cb0*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType);
        static /*0x71e7dd4*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x71e8138*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType, string data, System.Reflection.RuntimeAssembly assembly);
        /*0x71e8294*/ UnitySerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71e7bbc*/ System.Type MakeElementTypes(System.Type type);
        /*0x71e8734*/ void ThrowInsufficientInformation(string field);
        /*0x71e8838*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71e8888*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
    }

    class AppContextDefaultValues
    {
        static /*0x0*/ string SwitchEnforceJapaneseEraYearRanges;
        static /*0x8*/ string SwitchFormatJapaneseFirstYearAsANumber;
        static /*0x10*/ string SwitchEnforceLegacyJapaneseDateParsing;

        static /*0x71e8d9c*/ AppContextDefaultValues();
        static /*0x71e8d8c*/ void PopulateDefaultValues();
        static /*0x71e8d90*/ bool TryGetSwitchOverride(string switchName, ref bool overrideValue);
    }

    class AppDomain : System.MarshalByRefObject
    {
        static /*0x0*/ string _process_guid;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> type_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress_refonly;
        /*0x18*/ nint _mono_app_domain;
        /*0x20*/ object _evidence;
        /*0x28*/ object _granted;
        /*0x30*/ int _principalPolicy;
        /*0x38*/ System.AssemblyLoadEventHandler AssemblyLoad;
        /*0x40*/ System.ResolveEventHandler AssemblyResolve;
        /*0x48*/ System.EventHandler DomainUnload;
        /*0x50*/ System.EventHandler ProcessExit;
        /*0x58*/ System.ResolveEventHandler ResourceResolve;
        /*0x60*/ System.ResolveEventHandler TypeResolve;
        /*0x68*/ System.UnhandledExceptionEventHandler UnhandledException;
        /*0x70*/ System.EventHandler<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException;
        /*0x78*/ object _domain_manager;
        /*0x80*/ System.ResolveEventHandler ReflectionOnlyAssemblyResolve;
        /*0x88*/ object _activation;
        /*0x90*/ object _applicationIdentity;
        /*0x98*/ System.Collections.Generic.List<string> compatibility_switch;

        static /*0x71e8e60*/ bool IsAppXModel();
        static /*0x71e8e78*/ System.AppDomain getCurDomain();
        static /*0x71e8e7c*/ System.AppDomain get_CurrentDomain();
        static /*0x71e90c8*/ System.AppDomain InternalSetDomainByID(int domain_id);
        static /*0x71e90cc*/ System.AppDomain InternalSetDomain(System.AppDomain context);
        static /*0x71e90d0*/ void InternalPushDomainRefByID(int domain_id);
        static /*0x71e90d4*/ void InternalPopDomainRef();
        static /*0x71e90d8*/ System.Runtime.Remoting.Contexts.Context InternalSetContext(System.Runtime.Remoting.Contexts.Context context);
        static /*0x71e90dc*/ System.Runtime.Remoting.Contexts.Context InternalGetContext();
        static /*0x71e90e0*/ System.Runtime.Remoting.Contexts.Context InternalGetDefaultContext();
        static /*0x71e90e4*/ string InternalGetProcessGuid(string newguid);
        static /*0x71e90e8*/ object InvokeInDomainByID(int domain_id, System.Reflection.MethodInfo method, object obj, object[] args);
        static /*0x71e9278*/ string GetProcessGuid();
        static /*0x71e9310*/ bool InternalIsFinalizingForUnload(int domain_id);
        /*0x71e8e68*/ AppDomain();
        /*0x71e8e70*/ string getFriendlyName();
        /*0x71e8e74*/ string get_FriendlyName();
        /*0x71e8e80*/ System.Reflection.Assembly[] GetAssemblies(bool refOnly);
        /*0x71e8e88*/ System.Reflection.Assembly[] GetAssemblies();
        /*0x71e8e90*/ object GetData(string name);
        /*0x71e8e94*/ object InitializeLifetimeService();
        /*0x71e8e9c*/ System.Reflection.Assembly LoadAssembly(string assemblyRef, System.Security.Policy.Evidence securityEvidence, bool refOnly, ref System.Threading.StackCrawlMark stackMark);
        /*0x71e8ea4*/ System.Reflection.Assembly LoadSatellite(System.Reflection.AssemblyName assemblyRef, bool throwOnError, ref System.Threading.StackCrawlMark stackMark);
        /*0x71e8fa4*/ System.Reflection.Assembly Load(string assemblyString);
        /*0x71e8fc8*/ System.Reflection.Assembly Load(string assemblyString, System.Security.Policy.Evidence assemblySecurity, bool refonly, ref System.Threading.StackCrawlMark stackMark);
        /*0x71e9314*/ bool IsFinalizingForUnload();
        /*0x71e9328*/ int getDomainID();
        /*0x71e9330*/ string ToString();
        /*0x71e9334*/ void DoAssemblyLoad(System.Reflection.Assembly assembly);
        /*0x71e93c4*/ System.Reflection.Assembly DoAssemblyResolve(string name, System.Reflection.Assembly requestingAssembly, bool refonly);
        /*0x71e96cc*/ System.Reflection.Assembly DoTypeResolve(string name);
        /*0x71e99a0*/ System.Reflection.Assembly DoResourceResolve(string name, System.Reflection.Assembly requesting);
        /*0x71e9ad4*/ void DoDomainUnload();
        /*0x71e9af8*/ byte[] GetMarshalledDomainObjRef();
        /*0x71e9bc4*/ void ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg, ref byte[] arrResponse, ref System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm);
        /*0x71e9d0c*/ void add_DomainUnload(System.EventHandler value);
        /*0x71e9ee4*/ void remove_DomainUnload(System.EventHandler value);
        /*0x71ea0b8*/ void add_ProcessExit(System.EventHandler value);
        /*0x71ea150*/ void remove_ProcessExit(System.EventHandler value);
        /*0x71ea1e8*/ void add_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x71ea280*/ void remove_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x71ea318*/ bool get_IsHomogenous();
        /*0x71ea320*/ bool get_IsFullyTrusted();
    }

    class CompatibilitySwitches
    {
        static /*0x0*/ bool IsAppEarlierThanWindowsPhone8;
    }

    class Environment
    {
        static string mono_corlib_version = "1A5E0066-58DC-428A-B21C-0AD6CDAE2789";
        static /*0x0*/ string nl;
        static /*0x8*/ System.OperatingSystem os;

        static /*0x71e698c*/ string GetResourceString(string key);
        static /*0x71e87c8*/ string GetResourceString(string key, object[] values);
        static /*0x71ea328*/ string GetResourceStringEncodingName(int codePage);
        static /*0x71ea4a4*/ string get_CurrentDirectory();
        static /*0x71ea4ac*/ int get_CurrentManagedThreadId();
        static /*0x71ea4cc*/ bool get_HasShutdownStarted();
        static /*0x71ea4d0*/ string get_MachineName();
        static /*0x71ea4d4*/ string GetNewLine();
        static /*0x71ea4d8*/ string get_NewLine();
        static /*0x71ea550*/ System.PlatformID get_Platform();
        static /*0x71ea554*/ string GetOSVersionString();
        static /*0x71ea558*/ System.OperatingSystem get_OSVersion();
        static /*0x71ea61c*/ System.Version CreateVersionFromString(string info);
        static /*0x71ea82c*/ string get_StackTrace();
        static /*0x71ea898*/ int get_TickCount();
        static /*0x71ea89c*/ string get_UserDomainName();
        static /*0x71ea8a0*/ string get_UserName();
        static /*0x71ea8a4*/ void Exit(int exitCode);
        static /*0x71ea8a8*/ string[] GetCommandLineArgs();
        static /*0x71ea8ac*/ string internalGetEnvironmentVariable_native(nint variable);
        static /*0x71ea8b0*/ string internalGetEnvironmentVariable(string variable);
        static /*0x71ea978*/ string GetEnvironmentVariable(string variable);
        static /*0x71ea97c*/ string GetFolderPath(System.Environment.SpecialFolder folder);
        static /*0x71ea9b8*/ string GetWindowsFolderPath(int folder);
        static /*0x71ea984*/ string GetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x71eae88*/ string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback);
        static /*0x71ea9d4*/ string UnixGetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x71eb2f4*/ void FailFast(string message);
        static /*0x71eb304*/ void FailFast(string message, System.Exception exception);
        static /*0x71eb300*/ void FailFast(string message, System.Exception exception, string errorSource);
        static /*0x71eb30c*/ int get_ProcessorCount();
        static /*0x71ea9bc*/ bool get_IsRunningOnWindows();
        static /*0x71eb310*/ string GetMachineConfigPath();
        static /*0x71eb2f0*/ string internalGetHome();
        static /*0x71eb314*/ int GetPageSize();
        static /*0x71eb318*/ bool get_IsUnix();
        static /*0x71eb350*/ string GetStackTrace(System.Exception e, bool needFileInfo);

        enum SpecialFolder
        {
            MyDocuments = 5,
            Desktop = 0,
            MyComputer = 17,
            Programs = 2,
            Personal = 5,
            Favorites = 6,
            Startup = 7,
            Recent = 8,
            SendTo = 9,
            StartMenu = 11,
            MyMusic = 13,
            DesktopDirectory = 16,
            Templates = 21,
            ApplicationData = 26,
            LocalApplicationData = 28,
            InternetCache = 32,
            Cookies = 33,
            History = 34,
            CommonApplicationData = 35,
            System = 37,
            ProgramFiles = 38,
            MyPictures = 39,
            CommonProgramFiles = 43,
            MyVideos = 14,
            NetworkShortcuts = 19,
            Fonts = 20,
            CommonStartMenu = 22,
            CommonPrograms = 23,
            CommonStartup = 24,
            CommonDesktopDirectory = 25,
            PrinterShortcuts = 27,
            Windows = 36,
            UserProfile = 40,
            SystemX86 = 41,
            ProgramFilesX86 = 42,
            CommonProgramFilesX86 = 44,
            CommonTemplates = 45,
            CommonDocuments = 46,
            CommonAdminTools = 47,
            AdminTools = 48,
            CommonMusic = 53,
            CommonPictures = 54,
            CommonVideos = 55,
            Resources = 56,
            LocalizedResources = 57,
            CommonOemLinks = 58,
            CDBurning = 59,
        }

        enum SpecialFolderOption
        {
            None = 0,
            DoNotVerify = 16384,
            Create = 32768,
        }
    }

    class MonoTypeInfo
    {
        /*0x10*/ string full_name;
        /*0x18*/ System.Reflection.RuntimeConstructorInfo default_ctor;

        /*0x71eb3e8*/ MonoTypeInfo();
    }

    class TypeNameParser
    {
        static /*0x71eb3ec*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
    }

    class AppDomainSetup
    {
        /*0x10*/ string application_base;
        /*0x18*/ string application_name;
        /*0x20*/ string cache_path;
        /*0x28*/ string configuration_file;
        /*0x30*/ string dynamic_base;
        /*0x38*/ string license_file;
        /*0x40*/ string private_bin_path;
        /*0x48*/ string private_bin_path_probe;
        /*0x50*/ string shadow_copy_directories;
        /*0x58*/ string shadow_copy_files;
        /*0x60*/ bool publisher_policy;
        /*0x61*/ bool path_changed;
        /*0x64*/ int loader_optimization;
        /*0x68*/ bool disallow_binding_redirects;
        /*0x69*/ bool disallow_code_downloads;
        /*0x70*/ object _activationArguments;
        /*0x78*/ object domain_initializer;
        /*0x80*/ object application_trust;
        /*0x88*/ string[] domain_initializer_args;
        /*0x90*/ bool disallow_appbase_probe;
        /*0x98*/ byte[] configuration_bytes;
        /*0xa0*/ byte[] serialized_non_primitives;
        /*0xa8*/ string manager_assembly;
        /*0xb0*/ string manager_type;
        /*0xb8*/ string[] partial_visible_assemblies;
        /*0xc0*/ string <TargetFrameworkName>k__BackingField;

        /*0x71eb444*/ AppDomainSetup();
    }

    struct ArgIterator
    {
        /*0x10*/ nint sig;
        /*0x18*/ nint args;
        /*0x20*/ int next_arg;
        /*0x24*/ int num_args;

        /*0x71eb448*/ bool Equals(object o);
        /*0x71eb494*/ int GetHashCode();
    }

    class Console
    {
        static /*0x0*/ System.IO.TextWriter stdout;
        static /*0x8*/ System.IO.TextWriter stderr;
        static /*0x10*/ System.IO.TextReader stdin;
        static /*0x18*/ bool IsRunningOnAndroid;
        static /*0x20*/ System.Text.Encoding inputEncoding;
        static /*0x28*/ System.Text.Encoding outputEncoding;
        static /*0x30*/ System.ConsoleCancelEventHandler cancel_event;

        static /*0x71eb4a4*/ Console();
        static /*0x71eb7ec*/ void SetupStreams(System.Text.Encoding inputEncoding, System.Text.Encoding outputEncoding);
        static /*0x71ebec8*/ System.IO.Stream Open(nint handle, System.IO.FileAccess access, int bufferSize);
        static /*0x71ebe38*/ System.IO.Stream OpenStandardError(int bufferSize);
        static /*0x71ebd18*/ System.IO.Stream OpenStandardInput(int bufferSize);
        static /*0x71ebda8*/ System.IO.Stream OpenStandardOutput(int bufferSize);
        static /*0x71ec018*/ void SetError(System.IO.TextWriter newError);
        static /*0x71ec0fc*/ void SetOut(System.IO.TextWriter newOut);
        static /*0x71ec1e8*/ void WriteLine(object value);
        static /*0x71ec25c*/ System.Text.Encoding get_InputEncoding();
        static /*0x71ec2b4*/ System.Text.Encoding get_OutputEncoding();
        static /*0x71ec30c*/ System.ConsoleKeyInfo ReadKey();
        static /*0x71ec364*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x71ec498*/ void DoConsoleCancelEvent();

        class WindowsConsole
        {
            static /*0x0*/ bool ctrlHandlerAdded;
            static /*0x8*/ System.Console.WindowsConsole.WindowsCancelHandler cancelHandler;

            static /*0x71ec7c0*/ WindowsConsole();
            static /*0x71ec68c*/ int GetConsoleCP();
            static /*0x71ec6f4*/ int GetConsoleOutputCP();
            static /*0x71ec760*/ bool DoWindowsConsoleCancelEvent(int keyCode);
            static /*0x71eb754*/ int GetInputCodePage();
            static /*0x71eb7a0*/ int GetOutputCodePage();

            class WindowsCancelHandler : System.MulticastDelegate
            {
                /*0x71ec860*/ WindowsCancelHandler(object object, nint method);
                /*0x71ec900*/ bool Invoke(int keyCode);
            }
        }
    }

    class ConsoleDriver
    {
        static /*0x0*/ System.IConsoleDriver driver;
        static /*0x8*/ bool is_console;
        static /*0x9*/ bool called_isatty;

        static /*0x71ec914*/ ConsoleDriver();
        static /*0x71ec9e4*/ System.IConsoleDriver CreateNullConsoleDriver();
        static /*0x71eca24*/ System.IConsoleDriver CreateWindowsConsoleDriver();
        static /*0x71eca78*/ System.IConsoleDriver CreateTermInfoDriver(string term);
        static /*0x71ec3c0*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x71ebbd8*/ bool get_IsConsole();
        static /*0x71ece64*/ bool Isatty(nint handle);
        static /*0x71ece68*/ int InternalKeyAvailable(int ms_timeout);
        static /*0x71ece6c*/ bool TtySetup(string keypadXmit, string teardown, ref byte[] control_characters, ref int* address);
        static /*0x71ece70*/ bool SetEcho(bool wantEcho);
    }

    class DelegateData
    {
        /*0x10*/ System.Type target_type;
        /*0x18*/ string method_name;
        /*0x20*/ bool curried_first_arg;

        /*0x71ece78*/ DelegateData();
    }

    class Delegate : System.ICloneable, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint method_ptr;
        /*0x18*/ nint invoke_impl;
        /*0x20*/ object m_target;
        /*0x28*/ nint method;
        /*0x30*/ nint delegate_trampoline;
        /*0x38*/ nint extra_arg;
        /*0x40*/ nint method_code;
        /*0x48*/ nint interp_method;
        /*0x50*/ nint interp_invoke_impl;
        /*0x58*/ System.Reflection.MethodInfo method_info;
        /*0x60*/ System.Reflection.MethodInfo original_method_info;
        /*0x68*/ System.DelegateData data;
        /*0x70*/ bool method_is_virtual;

        static /*0x71ece94*/ System.Delegate CreateDelegate_internal(System.Type type, object target, System.Reflection.MethodInfo info, bool throwOnBindFailure);
        static /*0x71ece9c*/ bool arg_type_match(System.Type delArgType, System.Type argType);
        static /*0x71ecffc*/ bool arg_type_match_this(System.Type delArgType, System.Type argType, bool boxedThis);
        static /*0x71ed138*/ bool return_type_match(System.Type delReturnType, System.Type returnType);
        static /*0x71ed310*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure, bool allowClosed);
        static /*0x71edb3c*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method);
        static /*0x71edb48*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);
        static /*0x71edb60*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method);
        static /*0x71edb74*/ System.Delegate CreateDelegate(System.Type type, object target, string method);
        static /*0x71edb8c*/ System.Reflection.MethodInfo GetCandidateMethod(System.Type type, System.Type target, string method, System.Reflection.BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure);
        static /*0x71edfec*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x71ee0ec*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method);
        static /*0x71ee0f8*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x71edb80*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase);
        static /*0x71e9da4*/ System.Delegate Combine(System.Delegate a, System.Delegate b);
        static /*0x71eebdc*/ System.Delegate Combine(System.Delegate[] delegates);
        static /*0x71e9f7c*/ System.Delegate Remove(System.Delegate source, System.Delegate value);
        static /*0x71eecb8*/ bool op_Equality(System.Delegate d1, System.Delegate d2);
        static /*0x71eece0*/ bool op_Inequality(System.Delegate d1, System.Delegate d2);
        static /*0x71eed18*/ System.MulticastDelegate AllocDelegateLike_internal(System.Delegate d);
        /*0x71ece7c*/ System.Reflection.MethodInfo get_Method();
        /*0x71ece88*/ System.Reflection.MethodInfo GetVirtualMethod_internal();
        /*0x71ece8c*/ object get_Target();
        /*0x71ee1d4*/ object DynamicInvoke(object[] args);
        /*0x71ee1e0*/ void InitializeDelegateData();
        /*0x71ee2d4*/ object DynamicInvokeImpl(object[] args);
        /*0x71ee5cc*/ object Clone();
        /*0x71ee5d4*/ bool Equals(object obj);
        /*0x71ee77c*/ int GetHashCode();
        /*0x71ee7f4*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x71ee8f0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71eeb40*/ System.Delegate[] GetInvocationList();
        /*0x71eec40*/ System.Delegate CombineImpl(System.Delegate d);
        /*0x71eec94*/ System.Delegate RemoveImpl(System.Delegate d);
    }

    class DelegateSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Delegate _delegate;

        static /*0x71ee8f4*/ void GetDelegateData(System.Delegate instance, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x71eed1c*/ DelegateSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x71ef2f0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71ef328*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);

        class DelegateEntry
        {
            /*0x10*/ string type;
            /*0x18*/ string assembly;
            /*0x20*/ object target;
            /*0x28*/ string targetTypeAssembly;
            /*0x30*/ string targetTypeName;
            /*0x38*/ string methodName;
            /*0x40*/ System.DelegateSerializationHolder.DelegateEntry delegateEntry;

            /*0x71ef18c*/ DelegateEntry(System.Delegate del, string targetLabel);
            /*0x71eef34*/ System.Delegate DeserializeDelegate(System.Runtime.Serialization.SerializationInfo info, int index);
        }
    }

    class EmptyArray<T>
    {
        static /*0x0*/ T[] Value;

        static /*0x38358cc*/ EmptyArray();
    }

    enum SByteEnum
    {
    }

    enum Int16Enum
    {
    }

    enum Int32Enum
    {
    }

    enum Int64Enum
    {
    }

    enum ByteEnum
    {
    }

    enum UInt16Enum
    {
    }

    enum UInt32Enum
    {
    }

    enum UInt64Enum
    {
    }

    interface IConsoleDriver
    {
        System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    struct IntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nint>
    {
        static /*0x0*/ nint Zero;
        /*0x10*/ void* m_value;

        static /*0x71ef3ac*/ int get_Size();
        static /*0x71ef50c*/ bool op_Equality(nint value1, nint value2);
        static /*0x71ef518*/ bool op_Inequality(nint value1, nint value2);
        static /*0x71ef524*/ nint op_Explicit(int value);
        static /*0x71ef52c*/ nint op_Explicit(long value);
        static /*0x71ef530*/ nint op_Explicit(void* value);
        static /*0x71ef534*/ int op_Explicit(nint value);
        static /*0x71ef538*/ long op_Explicit(nint value);
        static /*0x71ef53c*/ void* op_Explicit(nint value);
        static /*0x71ef540*/ nint Add(nint pointer, int offset);
        static /*0x71ef548*/ nint op_Addition(nint pointer, int offset);
        static /*0x71ef550*/ nint op_Subtraction(nint pointer, int offset);
        /*0x71ef330*/ IntPtr(int value);
        /*0x71ef33c*/ IntPtr(long value);
        /*0x71ef344*/ IntPtr(void* value);
        /*0x71ef34c*/ IntPtr(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71ef3b4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71ef45c*/ bool Equals(object obj);
        /*0x71eb49c*/ int GetHashCode();
        /*0x71ef4a8*/ int ToInt32();
        /*0x71ef454*/ long ToInt64();
        /*0x71ef4b0*/ void* ToPointer();
        /*0x71ef4b8*/ string ToString();
        /*0x71ef4e4*/ string ToString(string format);
        /*0x71ef558*/ bool IsNull();
        /*0x71ef568*/ bool System.IEquatable<System.IntPtr>.Equals(nint other);
    }

    class KnownTerminals
    {
        static /*0x71ef578*/ byte[] get_linux();
        static /*0x71ef5e8*/ byte[] get_xterm();
        static /*0x71ef658*/ byte[] get_ansi();
    }

    class MarshalByRefObject
    {
        /*0x10*/ object _identity;

        /*0x71e8e6c*/ MarshalByRefObject();
        /*0x71ef6c8*/ System.Runtime.Remoting.ServerIdentity get_ObjectIdentity();
        /*0x71ef700*/ void set_ObjectIdentity(System.Runtime.Remoting.ServerIdentity value);
        /*0x71ef738*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
        /*0x71ef770*/ object InitializeLifetimeService();
    }

    class MonoAsyncCall
    {
        /*0x10*/ object msg;
        /*0x18*/ nint cb_method;
        /*0x20*/ object cb_target;
        /*0x28*/ object state;
        /*0x30*/ object res;
        /*0x38*/ object out_args;

        /*0x71ef7a8*/ MonoAsyncCall();
    }

    class MonoCustomAttrs
    {
        static /*0x0*/ System.Reflection.Assembly corlib;
        static /*0x8*/ System.AttributeUsageAttribute DefaultAttributeUsage;
        [ThreadStatic] static System.Collections.Generic.Dictionary<System.Type, System.AttributeUsageAttribute> usage_cache;

        static /*0x71f35b4*/ MonoCustomAttrs();
        static /*0x71ef7ac*/ bool IsUserCattrProvider(object obj);
        static /*0x71ef96c*/ System.Attribute[] GetCustomAttributesInternal(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool pseudoAttrs);
        static /*0x71ef974*/ object[] GetPseudoCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x71efc68*/ object[] GetPseudoCustomAttributes(System.Type type);
        static /*0x71efde4*/ object[] GetCustomAttributesBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x71eff88*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x71f0eb0*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x71f1020*/ System.Reflection.CustomAttributeData[] GetCustomAttributesDataInternal(System.Reflection.ICustomAttributeProvider obj);
        static /*0x71f1024*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x71f1304*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x71f1148*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesDataBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x71f26bc*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x71f29b4*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Type type);
        static /*0x71f2bec*/ bool IsDefined(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x71f2e74*/ bool IsDefinedInternal(System.Reflection.ICustomAttributeProvider obj, System.Type AttributeType);
        static /*0x71f2e78*/ System.Reflection.PropertyInfo GetBasePropertyDefinition(System.Reflection.RuntimePropertyInfo property);
        static /*0x71f316c*/ System.Reflection.EventInfo GetBaseEventDefinition(System.Reflection.RuntimeEventInfo evt);
        static /*0x71f0954*/ System.Reflection.ICustomAttributeProvider GetBase(System.Reflection.ICustomAttributeProvider obj);
        static /*0x71f337c*/ System.AttributeUsageAttribute RetrieveAttributeUsageNoCache(System.Type attributeType);
        static /*0x71f0d0c*/ System.AttributeUsageAttribute RetrieveAttributeUsage(System.Type attributeType);

        class AttributeInfo
        {
            /*0x10*/ System.AttributeUsageAttribute _usage;
            /*0x18*/ int _inheritanceLevel;

            /*0x71f0e84*/ AttributeInfo(System.AttributeUsageAttribute usage, int inheritanceLevel);
            /*0x71f362c*/ System.AttributeUsageAttribute get_Usage();
            /*0x71f3634*/ int get_InheritanceLevel();
        }
    }

    class MonoListItem
    {
        /*0x10*/ System.MonoListItem next;
        /*0x18*/ object data;

        /*0x71f363c*/ MonoListItem();
    }

    class MonoType : System.RuntimeType
    {
    }

    class MulticastDelegate : System.Delegate
    {
        /*0x78*/ System.Delegate[] delegates;

        /*0x71f3640*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f3644*/ object DynamicInvokeImpl(object[] args);
        /*0x71f36dc*/ bool Equals(object obj);
        /*0x71f3838*/ int GetHashCode();
        /*0x71f383c*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x71f3884*/ System.Delegate[] GetInvocationList();
        /*0x71f395c*/ System.Delegate CombineImpl(System.Delegate follow);
        /*0x71f3c28*/ int LastIndexOf(System.Delegate[] haystack, System.Delegate[] needle);
        /*0x71f3d54*/ System.Delegate RemoveImpl(System.Delegate value);
    }

    class NullConsoleDriver : System.IConsoleDriver
    {
        static /*0x0*/ System.ConsoleKeyInfo EmptyConsoleKeyInfo;

        static /*0x71f40b0*/ NullConsoleDriver();
        /*0x71ecad0*/ NullConsoleDriver();
        /*0x71f4054*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class Object
    {
        static /*0x71f4140*/ bool Equals(object objA, object objB);
        static /*0x71f4198*/ bool ReferenceEquals(object objA, object objB);
        static /*0x71f4174*/ int InternalGetHashCode(object o);
        /*0x71e6994*/ Object();
        /*0x71f4134*/ bool Equals(object obj);
        /*0x71f416c*/ void Finalize();
        /*0x71f4170*/ int GetHashCode();
        /*0x71e715c*/ System.Type GetType();
        /*0x71ee5d0*/ object MemberwiseClone();
        /*0x71f4178*/ string ToString();
        /*0x71f41a4*/ void FieldGetter(string typeName, string fieldName, ref object val);
        /*0x71f41a8*/ void FieldSetter(string typeName, string fieldName, object val);
    }

    enum PlatformID
    {
        Win32S = 0,
        Win32Windows = 1,
        Win32NT = 2,
        WinCE = 3,
        Unix = 4,
        Xbox = 5,
        MacOSX = 6,
    }

    struct RuntimeArgumentHandle
    {
        /*0x10*/ nint args;
    }

    struct RuntimeFieldHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x71f45b4*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
        static /*0x71f45b8*/ void SetValue(System.Reflection.RuntimeFieldInfo field, object obj, object value, System.RuntimeType fieldType, System.Reflection.FieldAttributes fieldAttr, System.RuntimeType declaringType, ref bool domainInitialized);
        static /*0x71f45bc*/ void SetValueDirect(System.Reflection.RuntimeFieldInfo field, System.RuntimeType fieldType, void* pTypedRef, object value, System.RuntimeType contextType);
        /*0x71f41ac*/ RuntimeFieldHandle(nint v);
        /*0x71f41b4*/ RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f4330*/ nint get_Value();
        /*0x71f4338*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f44bc*/ bool Equals(object obj);
        /*0x71f45ac*/ int GetHashCode();
    }

    struct RuntimeMethodHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x71f49c8*/ string ConstructInstantiation(System.Reflection.RuntimeMethodInfo method, System.TypeNameFormatFlags format);
        /*0x71f45c0*/ RuntimeMethodHandle(nint v);
        /*0x71f45c8*/ RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f4744*/ nint get_Value();
        /*0x71f474c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f48d0*/ bool Equals(object obj);
        /*0x71f49c0*/ int GetHashCode();
        /*0x71f4b20*/ bool IsNullHandle();
    }

    struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x71f4f60*/ System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type);
        static /*0x71f4f64*/ int GetMetadataToken(System.RuntimeType type);
        static /*0x71f4f68*/ int GetToken(System.RuntimeType type);
        static /*0x71f4f6c*/ System.Type GetGenericTypeDefinition_impl(System.RuntimeType type);
        static /*0x71f4f70*/ System.Type GetGenericTypeDefinition(System.RuntimeType type);
        static /*0x71f4f74*/ bool IsPrimitive(System.RuntimeType type);
        static /*0x71f4fb0*/ bool IsByRef(System.RuntimeType type);
        static /*0x71f4fcc*/ bool IsPointer(System.RuntimeType type);
        static /*0x71f4fe8*/ bool IsArray(System.RuntimeType type);
        static /*0x71f5010*/ bool IsSzArray(System.RuntimeType type);
        static /*0x71f502c*/ bool HasElementType(System.RuntimeType type);
        static /*0x71f4fac*/ System.Reflection.CorElementType GetCorElementType(System.RuntimeType type);
        static /*0x71f5068*/ bool HasInstantiation(System.RuntimeType type);
        static /*0x71f506c*/ bool IsComObject(System.RuntimeType type);
        static /*0x71f5070*/ bool IsInstanceOfType(System.RuntimeType type, object o);
        static /*0x71f5074*/ bool HasReferences(System.RuntimeType type);
        static /*0x71f5078*/ bool IsComObject(System.RuntimeType type, bool isGenericCOM);
        static /*0x71f5088*/ bool IsContextful(System.RuntimeType type);
        static /*0x71f5108*/ bool IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2);
        static /*0x71f5110*/ bool IsInterface(System.RuntimeType type);
        static /*0x71f5130*/ int GetArrayRank(System.RuntimeType type);
        static /*0x71f5134*/ System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type);
        static /*0x71f5138*/ System.RuntimeType GetElementType(System.RuntimeType type);
        static /*0x71f513c*/ System.Reflection.RuntimeModule GetModule(System.RuntimeType type);
        static /*0x71f5140*/ bool IsGenericVariable(System.RuntimeType type);
        static /*0x71f5144*/ System.RuntimeType GetBaseType(System.RuntimeType type);
        static /*0x71f5148*/ bool CanCastTo(System.RuntimeType type, System.RuntimeType target);
        static /*0x71f5158*/ bool type_is_assignable_from(System.Type a, System.Type b);
        static /*0x71f515c*/ bool IsGenericTypeDefinition(System.RuntimeType type);
        static /*0x71f5160*/ nint GetGenericParameterInfo(System.RuntimeType type);
        static /*0x71f5164*/ bool IsSubclassOf(System.RuntimeType childType, System.RuntimeType baseType);
        static /*0x71f5184*/ bool is_subclass_of(nint childType, nint baseType);
        static /*0x71f5188*/ System.RuntimeType internal_from_name(string name, ref System.Threading.StackCrawlMark stackMark, System.Reflection.Assembly callerAssembly, bool throwOnError, bool ignoreCase, bool reflectionOnly);
        static /*0x71f5198*/ System.RuntimeType GetTypeByName(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark, bool loadTypeFromPartialName);
        /*0x71f4b30*/ RuntimeTypeHandle(nint val);
        /*0x71f4b38*/ RuntimeTypeHandle(System.RuntimeType type);
        /*0x71f4b54*/ RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f4cd0*/ nint get_Value();
        /*0x71f4cd8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71f4e58*/ bool Equals(object obj);
        /*0x71f4f48*/ bool Equals(System.RuntimeTypeHandle handle);
        /*0x71f4f58*/ int GetHashCode();
    }

    class TermInfoDriver : System.IConsoleDriver
    {
        static /*0x0*/ int* native_terminal_size;
        static /*0x8*/ int terminal_size;
        static /*0x10*/ string[] locations;
        static /*0x18*/ int[] _consoleColorToAnsiCode;
        /*0x10*/ System.TermInfoReader reader;
        /*0x18*/ int cursorLeft;
        /*0x1c*/ int cursorTop;
        /*0x20*/ string title;
        /*0x28*/ string titleFormat;
        /*0x30*/ bool cursorVisible;
        /*0x38*/ string csrVisible;
        /*0x40*/ string csrInvisible;
        /*0x48*/ string clear;
        /*0x50*/ string bell;
        /*0x58*/ string term;
        /*0x60*/ System.IO.StreamReader stdin;
        /*0x68*/ System.IO.CStreamWriter stdout;
        /*0x70*/ int windowWidth;
        /*0x74*/ int windowHeight;
        /*0x78*/ int bufferHeight;
        /*0x7c*/ int bufferWidth;
        /*0x80*/ char[] buffer;
        /*0x88*/ int readpos;
        /*0x8c*/ int writepos;
        /*0x90*/ string keypadXmit;
        /*0x98*/ string keypadLocal;
        /*0xa0*/ bool inited;
        /*0xa8*/ object initLock;
        /*0xb0*/ bool initKeys;
        /*0xb8*/ string origPair;
        /*0xc0*/ string origColors;
        /*0xc8*/ string cursorAddress;
        /*0xd0*/ System.ConsoleColor fgcolor;
        /*0xd8*/ string setfgcolor;
        /*0xe0*/ string setbgcolor;
        /*0xe8*/ int maxColors;
        /*0xec*/ bool noGetPosition;
        /*0xf0*/ System.Collections.Hashtable keymap;
        /*0xf8*/ System.ByteMatcher rootmap;
        /*0x100*/ int rl_startx;
        /*0x104*/ int rl_starty;
        /*0x108*/ byte[] control_characters;
        /*0x110*/ char[] echobuf;
        /*0x118*/ int echon;

        static /*0x71fa43c*/ TermInfoDriver();
        static /*0x71f54e0*/ string TryTermInfoDir(string dir, string term);
        static /*0x71f5600*/ string SearchTerminfo(string term);
        /*0x71ecad4*/ TermInfoDriver(string term);
        /*0x71f5768*/ void WriteConsole(string str);
        /*0x71f5af8*/ bool get_Initialized();
        /*0x71f5b00*/ void Init();
        /*0x71f672c*/ void IncrementX();
        /*0x71f67f0*/ void WriteSpecialKey(System.ConsoleKeyInfo key);
        /*0x71f6b14*/ void WriteSpecialKey(char c);
        /*0x71f6cc0*/ bool IsSpecialKey(System.ConsoleKeyInfo key);
        /*0x71f6d44*/ bool IsSpecialKey(char c);
        /*0x71f649c*/ void GetCursorPosition();
        /*0x71f6e64*/ void CheckWindowDimensions();
        /*0x71f67c4*/ int get_WindowHeight();
        /*0x71f6798*/ int get_WindowWidth();
        /*0x71f6d6c*/ void AddToBuffer(int b);
        /*0x71f6f84*/ void AdjustBuffer();
        /*0x71f6b3c*/ System.ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
        /*0x71f6f98*/ object GetKeyFromBuffer(bool cooked);
        /*0x71f7748*/ System.ConsoleKeyInfo ReadKeyInternal(ref bool fresh);
        /*0x71f7a80*/ bool InputPending();
        /*0x71f7ab4*/ void QueueEcho(char c);
        /*0x71f7ba0*/ void Echo(System.ConsoleKeyInfo key);
        /*0x71f7bf4*/ void EchoFlush();
        /*0x71f7c28*/ int Read(char[] dest, int index, int count);
        /*0x71f7f48*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        /*0x71f7fac*/ string ReadLine();
        /*0x71f8190*/ string ReadToEnd();
        /*0x71f7fb4*/ string ReadUntilConditionInternal(bool haltOnNewLine);
        /*0x71f6904*/ void SetCursorPosition(int left, int top);
        /*0x71f8330*/ void CreateKeyMap();
        /*0x71f7908*/ void InitKeys();
        /*0x71fa25c*/ void AddStringMapping(System.TermInfoStrings s);
    }

    class ParameterizedStrings
    {
        [ThreadStatic] static System.ParameterizedStrings.LowLevelStack _cachedStack;

        static /*0x71f81cc*/ string Evaluate(string format, System.ParameterizedStrings.FormatParam[] args);
        static /*0x71fa660*/ string EvaluateInternal(string format, ref int pos, System.ParameterizedStrings.FormatParam[] args, System.ParameterizedStrings.LowLevelStack stack, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars);
        static /*0x71fb440*/ bool AsBool(int i);
        static /*0x71fb438*/ int AsInt(bool b);
        static /*0x71fb44c*/ string StringFromAsciiBytes(byte[] buffer, int offset, int length);
        static /*0x71fb538*/ int snprintf(byte* str, nint size, string format, string arg1);
        static /*0x71fb604*/ int snprintf(byte* str, nint size, string format, int arg1);
        static /*0x71fb01c*/ string FormatPrintF(string format, object arg);
        static /*0x71fb310*/ System.ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars, ref int index);

        struct FormatParam
        {
            /*0x10*/ int _int32;
            /*0x18*/ string _string;

            static /*0x71f8198*/ System.ParameterizedStrings.FormatParam op_Implicit(int value);
            /*0x71fb6bc*/ FormatParam(int value);
            /*0x71fb6cc*/ FormatParam(int intValue, string stringValue);
            /*0x71fb6dc*/ int get_Int32();
            /*0x71fafc4*/ string get_String();
            /*0x71fafe8*/ object get_Object();
        }

        class LowLevelStack
        {
            /*0x10*/ System.ParameterizedStrings.FormatParam[] _arr;
            /*0x18*/ int _count;

            /*0x71fa5e0*/ LowLevelStack();
            /*0x71faf34*/ System.ParameterizedStrings.FormatParam Pop();
            /*0x71fb21c*/ void Push(System.ParameterizedStrings.FormatParam item);
            /*0x71fa638*/ void Clear();
        }
    }

    class ByteMatcher
    {
        /*0x10*/ System.Collections.Hashtable map;
        /*0x18*/ System.Collections.Hashtable starts;

        /*0x71fa1d8*/ ByteMatcher();
        /*0x71fa2a8*/ void AddMapping(System.TermInfoStrings key, byte[] val);
        /*0x71fa3a8*/ void Sort();
        /*0x71f7264*/ bool StartsWith(int c);
        /*0x71f72bc*/ System.TermInfoStrings Match(char[] buffer, int offset, int length, ref int used);
    }

    enum TermInfoNumbers
    {
        Columns = 0,
        InitTabs = 1,
        Lines = 2,
        LinesOfMemory = 3,
        MagicCookieGlitch = 4,
        PaddingBaudRate = 5,
        VirtualTerminal = 6,
        WidthStatusLine = 7,
        NumLabels = 8,
        LabelHeight = 9,
        LabelWidth = 10,
        MaxAttributes = 11,
        MaximumWindows = 12,
        MaxColors = 13,
        MaxPairs = 14,
        NoColorVideo = 15,
        BufferCapacity = 16,
        DotVertSpacing = 17,
        DotHorzSpacing = 18,
        MaxMicroAddress = 19,
        MaxMicroJump = 20,
        MicroColSize = 21,
        MicroLineSize = 22,
        NumberOfPins = 23,
        OutputResChar = 24,
        OutputResLine = 25,
        OutputResHorzInch = 26,
        OutputResVertInch = 27,
        PrintRate = 28,
        WideCharSize = 29,
        Buttons = 30,
        BitImageEntwining = 31,
        BitImageType = 32,
        Last = 33,
    }

    class TermInfoReader
    {
        /*0x10*/ int boolSize;
        /*0x14*/ int numSize;
        /*0x18*/ int strOffsets;
        /*0x20*/ byte[] buffer;
        /*0x28*/ int booleansOffset;
        /*0x2c*/ int intOffset;

        /*0x71f5790*/ TermInfoReader(string term, string filename);
        /*0x71f5a64*/ TermInfoReader(string term, byte[] buffer);
        /*0x71fb7d8*/ void DetermineVersion(short magic);
        /*0x71fb6e4*/ void ReadHeader(byte[] buffer, ref int position);
        /*0x71fb7a4*/ void ReadNames(byte[] buffer, ref int position);
        /*0x71f643c*/ int Get(System.TermInfoNumbers number);
        /*0x71f63ac*/ string Get(System.TermInfoStrings tstr);
        /*0x71fa3ac*/ byte[] GetStringBytes(System.TermInfoStrings tstr);
        /*0x71fb880*/ short GetInt16(byte[] buffer, int offset);
        /*0x71fb8d0*/ string GetString(byte[] buffer, int offset);
        /*0x71fb94c*/ byte[] GetStringBytes(byte[] buffer, int offset);
    }

    enum TermInfoStrings
    {
        BackTab = 0,
        Bell = 1,
        CarriageReturn = 2,
        ChangeScrollRegion = 3,
        ClearAllTabs = 4,
        ClearScreen = 5,
        ClrEol = 6,
        ClrEos = 7,
        ColumnAddress = 8,
        CommandCharacter = 9,
        CursorAddress = 10,
        CursorDown = 11,
        CursorHome = 12,
        CursorInvisible = 13,
        CursorLeft = 14,
        CursorMemAddress = 15,
        CursorNormal = 16,
        CursorRight = 17,
        CursorToLl = 18,
        CursorUp = 19,
        CursorVisible = 20,
        DeleteCharacter = 21,
        DeleteLine = 22,
        DisStatusLine = 23,
        DownHalfLine = 24,
        EnterAltCharsetMode = 25,
        EnterBlinkMode = 26,
        EnterBoldMode = 27,
        EnterCaMode = 28,
        EnterDeleteMode = 29,
        EnterDimMode = 30,
        EnterInsertMode = 31,
        EnterSecureMode = 32,
        EnterProtectedMode = 33,
        EnterReverseMode = 34,
        EnterStandoutMode = 35,
        EnterUnderlineMode = 36,
        EraseChars = 37,
        ExitAltCharsetMode = 38,
        ExitAttributeMode = 39,
        ExitCaMode = 40,
        ExitDeleteMode = 41,
        ExitInsertMode = 42,
        ExitStandoutMode = 43,
        ExitUnderlineMode = 44,
        FlashScreen = 45,
        FormFeed = 46,
        FromStatusLine = 47,
        Init1string = 48,
        Init2string = 49,
        Init3string = 50,
        InitFile = 51,
        InsertCharacter = 52,
        InsertLine = 53,
        InsertPadding = 54,
        KeyBackspace = 55,
        KeyCatab = 56,
        KeyClear = 57,
        KeyCtab = 58,
        KeyDc = 59,
        KeyDl = 60,
        KeyDown = 61,
        KeyEic = 62,
        KeyEol = 63,
        KeyEos = 64,
        KeyF0 = 65,
        KeyF1 = 66,
        KeyF10 = 67,
        KeyF2 = 68,
        KeyF3 = 69,
        KeyF4 = 70,
        KeyF5 = 71,
        KeyF6 = 72,
        KeyF7 = 73,
        KeyF8 = 74,
        KeyF9 = 75,
        KeyHome = 76,
        KeyIc = 77,
        KeyIl = 78,
        KeyLeft = 79,
        KeyLl = 80,
        KeyNpage = 81,
        KeyPpage = 82,
        KeyRight = 83,
        KeySf = 84,
        KeySr = 85,
        KeyStab = 86,
        KeyUp = 87,
        KeypadLocal = 88,
        KeypadXmit = 89,
        LabF0 = 90,
        LabF1 = 91,
        LabF10 = 92,
        LabF2 = 93,
        LabF3 = 94,
        LabF4 = 95,
        LabF5 = 96,
        LabF6 = 97,
        LabF7 = 98,
        LabF8 = 99,
        LabF9 = 100,
        MetaOff = 101,
        MetaOn = 102,
        Newline = 103,
        PadChar = 104,
        ParmDch = 105,
        ParmDeleteLine = 106,
        ParmDownCursor = 107,
        ParmIch = 108,
        ParmIndex = 109,
        ParmInsertLine = 110,
        ParmLeftCursor = 111,
        ParmRightCursor = 112,
        ParmRindex = 113,
        ParmUpCursor = 114,
        PkeyKey = 115,
        PkeyLocal = 116,
        PkeyXmit = 117,
        PrintScreen = 118,
        PrtrOff = 119,
        PrtrOn = 120,
        RepeatChar = 121,
        Reset1string = 122,
        Reset2string = 123,
        Reset3string = 124,
        ResetFile = 125,
        RestoreCursor = 126,
        RowAddress = 127,
        SaveCursor = 128,
        ScrollForward = 129,
        ScrollReverse = 130,
        SetAttributes = 131,
        SetTab = 132,
        SetWindow = 133,
        Tab = 134,
        ToStatusLine = 135,
        UnderlineChar = 136,
        UpHalfLine = 137,
        InitProg = 138,
        KeyA1 = 139,
        KeyA3 = 140,
        KeyB2 = 141,
        KeyC1 = 142,
        KeyC3 = 143,
        PrtrNon = 144,
        CharPadding = 145,
        AcsChars = 146,
        PlabNorm = 147,
        KeyBtab = 148,
        EnterXonMode = 149,
        ExitXonMode = 150,
        EnterAmMode = 151,
        ExitAmMode = 152,
        XonCharacter = 153,
        XoffCharacter = 154,
        EnaAcs = 155,
        LabelOn = 156,
        LabelOff = 157,
        KeyBeg = 158,
        KeyCancel = 159,
        KeyClose = 160,
        KeyCommand = 161,
        KeyCopy = 162,
        KeyCreate = 163,
        KeyEnd = 164,
        KeyEnter = 165,
        KeyExit = 166,
        KeyFind = 167,
        KeyHelp = 168,
        KeyMark = 169,
        KeyMessage = 170,
        KeyMove = 171,
        KeyNext = 172,
        KeyOpen = 173,
        KeyOptions = 174,
        KeyPrevious = 175,
        KeyPrint = 176,
        KeyRedo = 177,
        KeyReference = 178,
        KeyRefresh = 179,
        KeyReplace = 180,
        KeyRestart = 181,
        KeyResume = 182,
        KeySave = 183,
        KeySuspend = 184,
        KeyUndo = 185,
        KeySbeg = 186,
        KeyScancel = 187,
        KeyScommand = 188,
        KeyScopy = 189,
        KeyScreate = 190,
        KeySdc = 191,
        KeySdl = 192,
        KeySelect = 193,
        KeySend = 194,
        KeySeol = 195,
        KeySexit = 196,
        KeySfind = 197,
        KeyShelp = 198,
        KeyShome = 199,
        KeySic = 200,
        KeySleft = 201,
        KeySmessage = 202,
        KeySmove = 203,
        KeySnext = 204,
        KeySoptions = 205,
        KeySprevious = 206,
        KeySprint = 207,
        KeySredo = 208,
        KeySreplace = 209,
        KeySright = 210,
        KeySrsume = 211,
        KeySsave = 212,
        KeySsuspend = 213,
        KeySundo = 214,
        ReqForInput = 215,
        KeyF11 = 216,
        KeyF12 = 217,
        KeyF13 = 218,
        KeyF14 = 219,
        KeyF15 = 220,
        KeyF16 = 221,
        KeyF17 = 222,
        KeyF18 = 223,
        KeyF19 = 224,
        KeyF20 = 225,
        KeyF21 = 226,
        KeyF22 = 227,
        KeyF23 = 228,
        KeyF24 = 229,
        KeyF25 = 230,
        KeyF26 = 231,
        KeyF27 = 232,
        KeyF28 = 233,
        KeyF29 = 234,
        KeyF30 = 235,
        KeyF31 = 236,
        KeyF32 = 237,
        KeyF33 = 238,
        KeyF34 = 239,
        KeyF35 = 240,
        KeyF36 = 241,
        KeyF37 = 242,
        KeyF38 = 243,
        KeyF39 = 244,
        KeyF40 = 245,
        KeyF41 = 246,
        KeyF42 = 247,
        KeyF43 = 248,
        KeyF44 = 249,
        KeyF45 = 250,
        KeyF46 = 251,
        KeyF47 = 252,
        KeyF48 = 253,
        KeyF49 = 254,
        KeyF50 = 255,
        KeyF51 = 256,
        KeyF52 = 257,
        KeyF53 = 258,
        KeyF54 = 259,
        KeyF55 = 260,
        KeyF56 = 261,
        KeyF57 = 262,
        KeyF58 = 263,
        KeyF59 = 264,
        KeyF60 = 265,
        KeyF61 = 266,
        KeyF62 = 267,
        KeyF63 = 268,
        ClrBol = 269,
        ClearMargins = 270,
        SetLeftMargin = 271,
        SetRightMargin = 272,
        LabelFormat = 273,
        SetClock = 274,
        DisplayClock = 275,
        RemoveClock = 276,
        CreateWindow = 277,
        GotoWindow = 278,
        Hangup = 279,
        DialPhone = 280,
        QuickDial = 281,
        Tone = 282,
        Pulse = 283,
        FlashHook = 284,
        FixedPause = 285,
        WaitTone = 286,
        User0 = 287,
        User1 = 288,
        User2 = 289,
        User3 = 290,
        User4 = 291,
        User5 = 292,
        User6 = 293,
        User7 = 294,
        User8 = 295,
        User9 = 296,
        OrigPair = 297,
        OrigColors = 298,
        InitializeColor = 299,
        InitializePair = 300,
        SetColorPair = 301,
        SetForeground = 302,
        SetBackground = 303,
        ChangeCharPitch = 304,
        ChangeLinePitch = 305,
        ChangeResHorz = 306,
        ChangeResVert = 307,
        DefineChar = 308,
        EnterDoublewideMode = 309,
        EnterDraftQuality = 310,
        EnterItalicsMode = 311,
        EnterLeftwardMode = 312,
        EnterMicroMode = 313,
        EnterNearLetterQuality = 314,
        EnterNormalQuality = 315,
        EnterShadowMode = 316,
        EnterSubscriptMode = 317,
        EnterSuperscriptMode = 318,
        EnterUpwardMode = 319,
        ExitDoublewideMode = 320,
        ExitItalicsMode = 321,
        ExitLeftwardMode = 322,
        ExitMicroMode = 323,
        ExitShadowMode = 324,
        ExitSubscriptMode = 325,
        ExitSuperscriptMode = 326,
        ExitUpwardMode = 327,
        MicroColumnAddress = 328,
        MicroDown = 329,
        MicroLeft = 330,
        MicroRight = 331,
        MicroRowAddress = 332,
        MicroUp = 333,
        OrderOfPins = 334,
        ParmDownMicro = 335,
        ParmLeftMicro = 336,
        ParmRightMicro = 337,
        ParmUpMicro = 338,
        SelectCharSet = 339,
        SetBottomMargin = 340,
        SetBottomMarginParm = 341,
        SetLeftMarginParm = 342,
        SetRightMarginParm = 343,
        SetTopMargin = 344,
        SetTopMarginParm = 345,
        StartBitImage = 346,
        StartCharSetDef = 347,
        StopBitImage = 348,
        StopCharSetDef = 349,
        SubscriptCharacters = 350,
        SuperscriptCharacters = 351,
        TheseCauseCr = 352,
        ZeroMotion = 353,
        CharSetNames = 354,
        KeyMouse = 355,
        MouseInfo = 356,
        ReqMousePos = 357,
        GetMouse = 358,
        SetAForeground = 359,
        SetABackground = 360,
        PkeyPlab = 361,
        DeviceType = 362,
        CodeSetInit = 363,
        Set0DesSeq = 364,
        Set1DesSeq = 365,
        Set2DesSeq = 366,
        Set3DesSeq = 367,
        SetLrMargin = 368,
        SetTbMargin = 369,
        BitImageRepeat = 370,
        BitImageNewline = 371,
        BitImageCarriageReturn = 372,
        ColorNames = 373,
        DefineBitImageRegion = 374,
        EndBitImageRegion = 375,
        SetColorBand = 376,
        SetPageLength = 377,
        DisplayPcChar = 378,
        EnterPcCharsetMode = 379,
        ExitPcCharsetMode = 380,
        EnterScancodeMode = 381,
        ExitScancodeMode = 382,
        PcTermOptions = 383,
        ScancodeEscape = 384,
        AltScancodeEsc = 385,
        EnterHorizontalHlMode = 386,
        EnterLeftHlMode = 387,
        EnterLowHlMode = 388,
        EnterRightHlMode = 389,
        EnterTopHlMode = 390,
        EnterVerticalHlMode = 391,
        SetAAttributes = 392,
        SetPglenInch = 393,
        Last = 394,
    }

    interface TypeName : System.IEquatable<System.TypeName>
    {
        /*0x380b9e8*/ string get_DisplayName();
    }

    interface TypeIdentifier : System.TypeName, System.IEquatable<System.TypeName>
    {
        /*0x380b9e8*/ string get_InternalName();
    }

    class TypeNames
    {
        class ATypeName : System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x71fbb5c*/ ATypeName();
            /*0x380b9e8*/ string get_DisplayName();
            /*0x71fba04*/ bool Equals(System.TypeName other);
            /*0x71fbad4*/ int GetHashCode();
            /*0x71fbafc*/ bool Equals(object other);
        }
    }

    class TypeIdentifiers
    {
        static /*0x71fbb60*/ System.TypeIdentifier FromDisplay(string displayName);

        class Display : System.TypeNames.ATypeName, System.TypeIdentifier, System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x10*/ string displayName;
            /*0x18*/ string internal_name;

            /*0x71fbbcc*/ Display(string displayName);
            /*0x71fbbf0*/ string get_DisplayName();
            /*0x71fbbf8*/ string get_InternalName();
            /*0x71fbc3c*/ string GetInternalName();
        }
    }

    interface ModifierSpec
    {
        /*0x380bb68*/ System.Type Resolve(System.Type type);
        /*0x380bb68*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
    }

    class ArraySpec : System.ModifierSpec
    {
        /*0x10*/ int dimensions;
        /*0x14*/ bool bound;

        /*0x71fbc48*/ ArraySpec(int dimensions, bool bound);
        /*0x71fbc58*/ System.Type Resolve(System.Type type);
        /*0x71fbcc0*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x71fbd60*/ string ToString();
    }

    class PointerSpec : System.ModifierSpec
    {
        /*0x10*/ int pointer_level;

        /*0x71fbdd0*/ PointerSpec(int pointer_level);
        /*0x71fbdf8*/ System.Type Resolve(System.Type type);
        /*0x71fbe4c*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x71fbe74*/ string ToString();
    }

    class TypeSpec
    {
        /*0x10*/ System.TypeIdentifier name;
        /*0x18*/ string assembly_name;
        /*0x20*/ System.Collections.Generic.List<System.TypeIdentifier> nested;
        /*0x28*/ System.Collections.Generic.List<System.TypeSpec> generic_params;
        /*0x30*/ System.Collections.Generic.List<System.ModifierSpec> modifier_spec;
        /*0x38*/ bool is_byref;
        /*0x40*/ string display_fullname;

        static /*0x71fc570*/ System.TypeSpec Parse(string typeName);
        static /*0x71fd230*/ string UnescapeInternalName(string displayName);
        static /*0x71fde5c*/ void SkipSpace(string name, ref int pos);
        static /*0x71fdeec*/ void BoundCheck(int idx, string s);
        static /*0x71fdd54*/ System.TypeIdentifier ParsedTypeIdentifier(string displayName);
        static /*0x71fc640*/ System.TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn);
        /*0x71fdf70*/ TypeSpec();
        /*0x71fbee4*/ bool get_HasModifiers();
        /*0x71fbef4*/ string GetDisplayFullName(System.TypeSpec.DisplayNameFormat flags);
        /*0x71fc37c*/ System.Text.StringBuilder GetModifierString(System.Text.StringBuilder sb);
        /*0x71fc338*/ string get_DisplayFullName();
        /*0x71fd324*/ System.Type Resolve(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
        /*0x71fdc14*/ void AddName(string type_name);
        /*0x71fdd5c*/ void AddModifier(System.ModifierSpec md);

        enum DisplayNameFormat
        {
            Default = 0,
            WANT_ASSEMBLY = 1,
            NO_MODIFIERS = 2,
        }
    }

    struct UIntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nuint>
    {
        static /*0x0*/ nuint Zero;
        /*0x10*/ void* _pointer;

        static /*0x71fe0f4*/ UIntPtr();
        static /*0x71fe0bc*/ bool op_Equality(nuint value1, nuint value2);
        static /*0x71fe0c8*/ bool op_Inequality(nuint value1, nuint value2);
        static /*0x71fe0d4*/ nuint op_Explicit(ulong value);
        static /*0x71fe0d8*/ void* op_Explicit(nuint value);
        static /*0x71fe0dc*/ nuint op_Explicit(uint value);
        static /*0x71fdf80*/ int get_Size();
        /*0x71fdf78*/ UIntPtr(ulong value);
        /*0x71fdf88*/ UIntPtr(uint value);
        /*0x71fdf94*/ UIntPtr(void* value);
        /*0x71fdf9c*/ bool Equals(object obj);
        /*0x71fdfe8*/ int GetHashCode();
        /*0x71fdff0*/ void* ToPointer();
        /*0x71fdff8*/ string ToString();
        /*0x71fe01c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71fe0e4*/ bool System.IEquatable<System.UIntPtr>.Equals(nuint other);
    }

    class ValueType
    {
        static /*0x71fe114*/ bool InternalEquals(object o1, object o2, ref object[] fields);
        static /*0x71fe118*/ bool DefaultEquals(object o1, object o2);
        static /*0x71fe2cc*/ int InternalGetHashCode(object o, ref object[] fields);
        /*0x71fe10c*/ ValueType();
        /*0x71fe2c8*/ bool Equals(object obj);
        /*0x71fe2d0*/ int GetHashCode();
        /*0x71fe348*/ string ToString();
    }

    struct Variant
    {
        /*0x10*/ short vt;
        /*0x12*/ ushort wReserved1;
        /*0x14*/ ushort wReserved2;
        /*0x16*/ ushort wReserved3;
        /*0x18*/ long llVal;
        /*0x18*/ int lVal;
        /*0x18*/ byte bVal;
        /*0x18*/ short iVal;
        /*0x18*/ float fltVal;
        /*0x18*/ double dblVal;
        /*0x18*/ short boolVal;
        /*0x18*/ nint bstrVal;
        /*0x18*/ sbyte cVal;
        /*0x18*/ ushort uiVal;
        /*0x18*/ uint ulVal;
        /*0x18*/ ulong ullVal;
        /*0x18*/ int intVal;
        /*0x18*/ uint uintVal;
        /*0x18*/ nint pdispVal;
        /*0x18*/ System.BRECORD bRecord;

        /*0x71fe370*/ void Clear();
    }

    struct BRECORD
    {
        /*0x10*/ nint pvRecord;
        /*0x18*/ nint pRecInfo;
    }

    class WeakReference : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ bool isLongReference;
        /*0x18*/ System.Runtime.InteropServices.GCHandle gcHandle;

        /*0x71fe40c*/ WeakReference();
        /*0x71fe414*/ WeakReference(object target);
        /*0x71fe444*/ WeakReference(object target, bool trackResurrection);
        /*0x71fe478*/ WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x71fe3e4*/ void AllocateHandle(object target);
        /*0x71fe58c*/ bool get_IsAlive();
        /*0x71fe5ac*/ object get_Target();
        /*0x71fe5d8*/ void set_Target(object value);
        /*0x71fe634*/ bool get_TrackResurrection();
        /*0x71fe63c*/ void Finalize();
        /*0x71fe6d8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class WeakReference<T> : System.Runtime.Serialization.ISerializable
    {
        /*0x0*/ System.Runtime.InteropServices.GCHandle handle;
        /*0x0*/ bool trackResurrection;

        /*0x3907c14*/ WeakReference(T target);
        /*0x3907c14*/ WeakReference(T target, bool trackResurrection);
        WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x3907c14*/ void SetTarget(T target);
        /*0x380b2f0*/ bool TryGetTarget(ref T target);
        /*0x380cb08*/ void Finalize();
    }

    struct InputRecord
    {
        /*0x10*/ short EventType;
        /*0x12*/ bool KeyDown;
        /*0x14*/ short RepeatCount;
        /*0x16*/ short VirtualKeyCode;
        /*0x18*/ short VirtualScanCode;
        /*0x1a*/ char Character;
        /*0x1c*/ int ControlKeyState;
        /*0x20*/ int pad1;
        /*0x24*/ bool pad2;
    }

    struct Coord
    {
        /*0x10*/ short X;
        /*0x12*/ short Y;
    }

    struct SmallRect
    {
        /*0x10*/ short Left;
        /*0x12*/ short Top;
        /*0x14*/ short Right;
        /*0x16*/ short Bottom;
    }

    struct ConsoleScreenBufferInfo
    {
        /*0x10*/ System.Coord Size;
        /*0x14*/ System.Coord CursorPosition;
        /*0x18*/ short Attribute;
        /*0x1a*/ System.SmallRect Window;
        /*0x22*/ System.Coord MaxWindowSize;
    }

    enum Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12,
    }

    class WindowsConsoleDriver : System.IConsoleDriver
    {
        /*0x10*/ nint inputHandle;
        /*0x18*/ nint outputHandle;
        /*0x20*/ short defaultAttribute;

        static /*0x71fec0c*/ bool IsModifierKey(short virtualKeyCode);
        static /*0x71fe8b4*/ nint GetStdHandle(System.Handles handle);
        static /*0x71fe938*/ bool GetConsoleScreenBufferInfo(nint handle, ref System.ConsoleScreenBufferInfo info);
        static /*0x71feb04*/ bool ReadConsoleInput(nint handle, ref System.InputRecord record, int length, ref int nread);
        /*0x71fe858*/ WindowsConsoleDriver();
        /*0x71fe9cc*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class __ComObject
    {
        /*0x71fec40*/ __ComObject();
    }

    struct Decimal : System.IFormattable, System.IComparable, System.IConvertible, System.IComparable<decimal>, System.IEquatable<decimal>, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static /*0x0*/ decimal Zero;
        static /*0x10*/ decimal One;
        static /*0x20*/ decimal MinusOne;
        static /*0x30*/ decimal MaxValue;
        static /*0x40*/ decimal MinValue;
        /*0x10*/ int flags;
        /*0x14*/ int hi;
        /*0x18*/ int lo;
        /*0x1c*/ int mid;
        /*0x18*/ ulong ulomidLE;

        static /*0x7204340*/ Decimal();
        static /*0x71fece8*/ ref System.Decimal.DecCalc AsMutable(ref decimal d);
        static /*0x71fecec*/ uint DecDivMod1E9(ref decimal value);
        static /*0x71ff7c4*/ bool IsValid(int flags);
        static /*0x71ffa78*/ decimal Abs(ref decimal d);
        static /*0x71ffa8c*/ decimal Add(decimal d1, decimal d2);
        static /*0x72001a8*/ int Compare(decimal d1, decimal d2);
        static /*0x72004ec*/ decimal Divide(decimal d1, decimal d2);
        static /*0x72013cc*/ decimal Parse(string s, System.IFormatProvider provider);
        static /*0x72014a0*/ decimal Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x7201584*/ bool TryParse(string s, ref decimal result);
        static /*0x7201658*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref decimal result);
        static /*0x7201750*/ int[] GetBits(decimal d);
        static /*0x72017ec*/ ref decimal Max(ref decimal d1, ref decimal d2);
        static /*0x720185c*/ ref decimal Min(ref decimal d1, ref decimal d2);
        static /*0x72018cc*/ decimal Multiply(decimal d1, decimal d2);
        static /*0x7201dd0*/ decimal Negate(decimal d);
        static /*0x7201dd8*/ decimal Round(decimal d, int decimals);
        static /*0x720202c*/ decimal Round(decimal d, int decimals, System.MidpointRounding mode);
        static /*0x7201e6c*/ decimal Round(ref decimal d, int decimals, System.MidpointRounding mode);
        static /*0x7202388*/ byte ToByte(decimal value);
        static /*0x7202678*/ sbyte ToSByte(decimal value);
        static /*0x7202978*/ short ToInt16(decimal value);
        static /*0x7202af0*/ double ToDouble(decimal d);
        static /*0x72027f0*/ int ToInt32(decimal d);
        static /*0x7202c70*/ long ToInt64(decimal d);
        static /*0x7202e08*/ ushort ToUInt16(decimal value);
        static /*0x7202500*/ uint ToUInt32(decimal d);
        static /*0x7202f80*/ ulong ToUInt64(decimal d);
        static /*0x720310c*/ float ToSingle(decimal d);
        static /*0x72031e8*/ decimal Truncate(decimal d);
        static /*0x72032e8*/ void Truncate(ref decimal d);
        static /*0x7203380*/ decimal op_Implicit(byte value);
        static /*0x720338c*/ decimal op_Implicit(sbyte value);
        static /*0x72033a4*/ decimal op_Implicit(short value);
        static /*0x72033bc*/ decimal op_Implicit(ushort value);
        static /*0x72033c8*/ decimal op_Implicit(char value);
        static /*0x72033d4*/ decimal op_Implicit(int value);
        static /*0x72033e8*/ decimal op_Implicit(uint value);
        static /*0x72033f4*/ decimal op_Implicit(long value);
        static /*0x720340c*/ decimal op_Implicit(ulong value);
        static /*0x7203418*/ decimal op_Explicit(float value);
        static /*0x720345c*/ decimal op_Explicit(double value);
        static /*0x72034a0*/ int op_Explicit(decimal value);
        static /*0x7203504*/ long op_Explicit(decimal value);
        static /*0x7203568*/ ulong op_Explicit(decimal value);
        static /*0x72035cc*/ float op_Explicit(decimal value);
        static /*0x7203630*/ double op_Explicit(decimal value);
        static /*0x7203694*/ decimal op_UnaryNegation(decimal d);
        static /*0x720369c*/ decimal op_Increment(decimal d);
        static /*0x720370c*/ decimal op_Addition(decimal d1, decimal d2);
        static /*0x72037c0*/ decimal op_Subtraction(decimal d1, decimal d2);
        static /*0x7203874*/ decimal op_Multiply(decimal d1, decimal d2);
        static /*0x7203924*/ decimal op_Division(decimal d1, decimal d2);
        static /*0x72039d4*/ bool op_Equality(decimal d1, decimal d2);
        static /*0x7203a64*/ bool op_Inequality(decimal d1, decimal d2);
        static /*0x7203af4*/ bool op_LessThan(decimal d1, decimal d2);
        static /*0x7203b80*/ bool op_LessThanOrEqual(decimal d1, decimal d2);
        static /*0x7203c10*/ bool op_GreaterThan(decimal d1, decimal d2);
        static /*0x7203ca0*/ bool op_GreaterThanOrEqual(decimal d1, decimal d2);
        /*0x71fee20*/ Decimal(int value);
        /*0x71fee44*/ Decimal(uint value);
        /*0x71fee50*/ Decimal(long value);
        /*0x71fee74*/ Decimal(ulong value);
        /*0x71fee7c*/ Decimal(float value);
        /*0x71ff320*/ Decimal(double value);
        /*0x71ff7e4*/ Decimal(int[] bits);
        /*0x71ff91c*/ Decimal(int lo, int mid, int hi, bool isNegative, byte scale);
        /*0x71ffa68*/ Decimal(ref decimal d, int flags);
        /*0x71fec80*/ uint get_High();
        /*0x71fec88*/ uint get_Low();
        /*0x71fec90*/ uint get_Mid();
        /*0x71fec98*/ bool get_IsNegative();
        /*0x71feca4*/ int get_Scale();
        /*0x71fecac*/ ulong get_Low64();
        /*0x71ff9b4*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x7200340*/ int CompareTo(object value);
        /*0x720045c*/ int CompareTo(decimal value);
        /*0x7200da8*/ bool Equals(object value);
        /*0x7200e84*/ bool Equals(decimal value);
        /*0x7200f1c*/ int GetHashCode();
        /*0x72010c0*/ string ToString();
        /*0x720116c*/ string ToString(System.IFormatProvider provider);
        /*0x7201228*/ string ToString(string format, System.IFormatProvider provider);
        /*0x7201300*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x7203d30*/ System.TypeCode GetTypeCode();
        /*0x7203d38*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x7203d98*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x7203e1c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x7203e7c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x7203edc*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x7203f3c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x7203f9c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x7203ffc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x720405c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x72040bc*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x720411c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x720417c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x72041dc*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x72041e8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x720426c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        struct DecCalc
        {
            static /*0x0*/ uint[] s_powers10;
            static /*0x8*/ ulong[] s_ulongPowers10;
            static /*0x10*/ double[] s_doublePowers10;
            static /*0x18*/ System.Decimal.DecCalc.PowerOvfl[] PowerOvflValues;
            /*0x10*/ uint uflags;
            /*0x14*/ uint uhi;
            /*0x18*/ uint ulo;
            /*0x1c*/ uint umid;
            /*0x18*/ ulong ulomidLE;

            static /*0x7205d1c*/ DecCalc();
            static /*0x7204418*/ uint GetExponent(float f);
            static /*0x7204424*/ uint GetExponent(double d);
            static /*0x7204430*/ ulong UInt32x32To64(uint a, uint b);
            static /*0x7204438*/ void UInt64x64To128(ulong a, ulong b, ref System.Decimal.DecCalc result);
            static /*0x7204554*/ uint Div96By32(ref System.Decimal.DecCalc.Buf12 bufNum, uint den);
            static /*0x72045d0*/ bool Div96ByConst(ref ulong high64, ref uint low, uint pow);
            static /*0x7204610*/ void Unscale(ref uint low, ref ulong high64, ref int scale);
            static /*0x7204884*/ uint Div96By64(ref System.Decimal.DecCalc.Buf12 bufNum, ulong den);
            static /*0x7204978*/ uint Div128By96(ref System.Decimal.DecCalc.Buf16 bufNum, ref System.Decimal.DecCalc.Buf12 bufDen);
            static /*0x7204aac*/ uint IncreaseScale(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0x7204b34*/ void IncreaseScale64(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0x7204bb0*/ int ScaleResult(System.Decimal.DecCalc.Buf24* bufRes, uint hiRes, int scale);
            static /*0x7205734*/ uint DivByConst(uint* result, uint hiRes, ref uint quotient, ref uint remainder, uint power);
            static /*0x7205788*/ int LeadingZeroCount(uint value);
            static /*0x72057ec*/ int OverflowUnscale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale, bool sticky);
            static /*0x7205944*/ int SearchScale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale);
            static /*0x7205914*/ bool Add32To96(ref System.Decimal.DecCalc.Buf12 bufNum, uint value);
            static /*0x71ffb40*/ void DecAddSub(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2, bool sign);
            static /*0x7200230*/ int VarDecCmp(ref decimal d1, ref decimal d2);
            static /*0x7205b4c*/ int VarDecCmpSub(ref decimal d1, ref decimal d2);
            static /*0x720197c*/ void VarDecMul(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0x71fef04*/ void VarDecFromR4(float input, ref System.Decimal.DecCalc result);
            static /*0x71ff3a8*/ void VarDecFromR8(double input, ref System.Decimal.DecCalc result);
            static /*0x720318c*/ float VarR4FromDec(ref decimal value);
            static /*0x7202b70*/ double VarR8FromDec(ref decimal value);
            static /*0x7200f70*/ int GetHashCode(ref decimal d);
            static /*0x720059c*/ void VarDecDiv(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0x72020c4*/ void InternalRound(ref System.Decimal.DecCalc d, uint scale, System.Decimal.DecCalc.RoundingMode mode);
            static /*0x71fedbc*/ uint DecDivMod1E9(ref System.Decimal.DecCalc value);
            /*0x72043cc*/ uint get_High();
            /*0x72043d4*/ void set_High(uint value);
            /*0x72043dc*/ uint get_Low();
            /*0x72043e4*/ void set_Low(uint value);
            /*0x72043ec*/ uint get_Mid();
            /*0x72043f4*/ void set_Mid(uint value);
            /*0x72043fc*/ bool get_IsNegative();
            /*0x7204408*/ ulong get_Low64();
            /*0x7204410*/ void set_Low64(ulong value);

            enum RoundingMode
            {
                ToEven = 0,
                AwayFromZero = 1,
                Truncate = 2,
                Floor = 3,
                Ceiling = 4,
            }

            struct PowerOvfl
            {
                /*0x10*/ uint Hi;
                /*0x18*/ ulong MidLo;

                /*0x7205f5c*/ PowerOvfl(uint hi, uint mid, uint lo);
            }

            struct Buf12
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x10*/ ulong ulo64LE;
                /*0x14*/ ulong uhigh64LE;

                /*0x72045c0*/ ulong get_Low64();
                /*0x72045c8*/ void set_Low64(ulong value);
                /*0x72045b0*/ ulong get_High64();
                /*0x72045b8*/ void set_High64(ulong value);
            }

            struct Buf16
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong uhigh64LE;

                /*0x7204a9c*/ ulong get_Low64();
                /*0x7204aa4*/ void set_Low64(ulong value);
                /*0x7204a94*/ ulong get_High64();
                /*0x7205d14*/ void set_High64(ulong value);
            }

            struct Buf24
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x20*/ uint U4;
                /*0x24*/ uint U5;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong umid64LE;
                /*0x20*/ ulong uhigh64LE;

                /*0x7205b44*/ ulong get_Low64();
                /*0x7205b34*/ void set_Low64(ulong value);
                /*0x7205b3c*/ void set_Mid64(ulong value);
                /*0x7205d0c*/ void set_High64(ulong value);
            }
        }
    }

    namespace Threading
    {
        class AbandonedMutexException : System.SystemException
        {
            /*0x8c*/ int _mutexIndex;
            /*0x90*/ System.Threading.Mutex _mutex;

            /*0x7205f70*/ AbandonedMutexException();
            /*0x7205fd4*/ AbandonedMutexException(int location, System.Threading.WaitHandle handle);
            /*0x72060e0*/ AbandonedMutexException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7206054*/ void SetupException(int location, System.Threading.WaitHandle handle);
        }

        class AsyncLocal<T> : System.Threading.IAsyncLocal
        {
            /*0x0*/ System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;

            /*0x380d83c*/ AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);
            /*0x3907c14*/ void set_Value(T value);
            void System.Threading.IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
        }

        interface IAsyncLocal
        {
            void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
        }

        struct AsyncLocalValueChangedArgs<T>
        {
            /*0x0*/ T <PreviousValue>k__BackingField;
            /*0x0*/ T <CurrentValue>k__BackingField;
            /*0x0*/ bool <ThreadContextChanged>k__BackingField;

            /*0x3907c14*/ AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
            /*0x3907c14*/ T get_CurrentValue();
        }

        class AutoResetEvent : System.Threading.EventWaitHandle
        {
            /*0x72060f0*/ AutoResetEvent(bool initialState);
        }

        enum EventResetMode
        {
            AutoReset = 0,
            ManualReset = 1,
        }

        class LazyInitializer
        {
            static /*0x3907c14*/ T EnsureInitialized<T>(ref T target);
            static /*0x3907c14*/ T EnsureInitializedCore<T>(ref T target);
            static /*0x3907c14*/ T EnsureInitialized<T>(ref T target, System.Func<T> valueFactory);
            static /*0x3907c14*/ T EnsureInitializedCore<T>(ref T target, System.Func<T> valueFactory);
            static /*0x3907c14*/ T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, System.Func<T> valueFactory);
            static /*0x3907c14*/ T EnsureInitializedCore<T>(ref T target, ref bool initialized, ref object syncLock, System.Func<T> valueFactory);
            static /*0x3907c14*/ T EnsureInitialized<T>(ref T target, ref object syncLock, System.Func<T> valueFactory);
            static /*0x3907c14*/ T EnsureInitializedCore<T>(ref T target, ref object syncLock, System.Func<T> valueFactory);
            static /*0x720610c*/ object EnsureLockInitialized(ref object syncLock);
        }

        enum LazyThreadSafetyMode
        {
            None = 0,
            PublicationOnly = 1,
            ExecutionAndPublication = 2,
        }

        class LockRecursionException : System.Exception
        {
            /*0x7206184*/ LockRecursionException();
            /*0x72061dc*/ LockRecursionException(string message);
            /*0x7206244*/ LockRecursionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManualResetEvent : System.Threading.EventWaitHandle
        {
            /*0x72062c4*/ ManualResetEvent(bool initialState);
        }

        class ParameterizedThreadStart : System.MulticastDelegate
        {
            /*0x72062d4*/ ParameterizedThreadStart(object object, nint method);
            /*0x72063dc*/ void Invoke(object obj);
        }

        class SemaphoreFullException : System.SystemException
        {
            /*0x72063f0*/ SemaphoreFullException();
            /*0x720643c*/ SemaphoreFullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SendOrPostCallback : System.MulticastDelegate
        {
            /*0x7206444*/ SendOrPostCallback(object object, nint method);
            /*0x720654c*/ void Invoke(object state);
        }

        class SynchronizationLockException : System.SystemException
        {
            /*0x7206560*/ SynchronizationLockException();
            /*0x72065bc*/ SynchronizationLockException(string message);
            /*0x72065e0*/ SynchronizationLockException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadStart : System.MulticastDelegate
        {
            /*0x72065e8*/ ThreadStart(object object, nint method);
            /*0x7206684*/ void Invoke();
        }

        enum ThreadState
        {
            Running = 0,
            StopRequested = 1,
            SuspendRequested = 2,
            Background = 4,
            Unstarted = 8,
            Stopped = 16,
            WaitSleepJoin = 32,
            Suspended = 64,
            AbortRequested = 128,
            Aborted = 256,
        }

        class ThreadStateException : System.SystemException
        {
            /*0x7206698*/ ThreadStateException();
            /*0x72066f4*/ ThreadStateException(string message);
            /*0x7206718*/ ThreadStateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Timeout
        {
            static /*0x0*/ System.TimeSpan InfiniteTimeSpan;

            static /*0x7206720*/ Timeout();
        }

        class WaitHandleCannotBeOpenedException : System.ApplicationException
        {
            /*0x7206790*/ WaitHandleCannotBeOpenedException();
            /*0x72067ec*/ WaitHandleCannotBeOpenedException(string message);
            /*0x7206810*/ WaitHandleCannotBeOpenedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct CancellationToken
        {
            static /*0x0*/ System.Action<object> s_actionToActionObjShunt;
            /*0x10*/ System.Threading.CancellationTokenSource _source;

            static /*0x72073c4*/ CancellationToken();
            static /*0x7206818*/ System.Threading.CancellationToken get_None();
            static /*0x720722c*/ bool op_Equality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            static /*0x7207290*/ bool op_Inequality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            /*0x7206878*/ CancellationToken(System.Threading.CancellationTokenSource source);
            /*0x7206880*/ CancellationToken(bool canceled);
            /*0x7206820*/ bool get_IsCancellationRequested();
            /*0x7206868*/ bool get_CanBeCanceled();
            /*0x720691c*/ System.Threading.CancellationTokenRegistration Register(System.Action callback);
            /*0x7206b40*/ System.Threading.CancellationTokenRegistration Register(System.Action callback, bool useSynchronizationContext);
            /*0x7206c40*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext);
            /*0x7206ce4*/ System.Threading.CancellationTokenRegistration InternalRegisterWithoutEC(System.Action<object> callback, object state);
            /*0x7206a14*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext);
            /*0x7207100*/ bool Equals(System.Threading.CancellationToken other);
            /*0x7207110*/ bool Equals(object other);
            /*0x72071b8*/ int GetHashCode();
            /*0x72072f4*/ void ThrowIfCancellationRequested();
            /*0x720736c*/ void ThrowOperationCanceledException();

            class <>c
            {
                static /*0x0*/ System.Threading.CancellationToken.<> <>9;

                static /*0x7207494*/ <>c();
                /*0x72074fc*/ <>c();
                /*0x7207504*/ void <.cctor>b__26_0(object obj);
            }
        }

        class ManualResetEventSlim : System.IDisposable
        {
            static /*0x0*/ System.Action<object> s_cancellationTokenCallback;
            /*0x10*/ object m_lock;
            /*0x18*/ System.Threading.ManualResetEvent m_eventObj;
            /*0x20*/ int m_combinedState;

            static /*0x72088dc*/ ManualResetEventSlim();
            static /*0x7208764*/ void CancellationTokenCallback(object obj);
            static /*0x7207940*/ int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount);
            static /*0x72077e4*/ int ExtractStatePortion(int state, int mask);
            /*0x7207a68*/ ManualResetEventSlim(bool initialState);
            /*0x7207b94*/ ManualResetEventSlim(bool initialState, int spinCount);
            /*0x7207570*/ System.Threading.WaitHandle get_WaitHandle();
            /*0x7207788*/ bool get_IsSet();
            /*0x72077ec*/ void set_IsSet(bool value);
            /*0x72078e4*/ int get_SpinCount();
            /*0x720794c*/ void set_SpinCount(int value);
            /*0x7207980*/ int get_Waiters();
            /*0x72079dc*/ void set_Waiters(int value);
            /*0x7207ae4*/ void Initialize(bool initialState, int spinCount);
            /*0x7207cac*/ void EnsureLockObjectCreated();
            /*0x720760c*/ bool LazyInitializeEvent();
            /*0x7207da8*/ void Set();
            /*0x7207db0*/ void Set(bool duringCancellation);
            /*0x7207fb0*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x72085f8*/ void Dispose();
            /*0x7208664*/ void Dispose(bool disposing);
            /*0x72075ac*/ void ThrowIfDisposed();
            /*0x720780c*/ void UpdateStateAtomically(int newBits, int updateBitsMask);
        }

        struct NativeOverlapped
        {
            /*0x10*/ nint InternalLow;
            /*0x18*/ nint InternalHigh;
            /*0x20*/ int OffsetLow;
            /*0x24*/ int OffsetHigh;
            /*0x28*/ nint EventHandle;
        }

        struct SpinWait
        {
            static /*0x0*/ int SpinCountforSpinBeforeWait;
            /*0x10*/ int _count;

            static /*0x7208ba8*/ SpinWait();
            /*0x720897c*/ int get_Count();
            /*0x7208984*/ bool get_NextSpinWillYield();
            /*0x7208884*/ void SpinOnce();
            /*0x72084bc*/ void SpinOnce(int sleep1Threshold);
            /*0x72089fc*/ void SpinOnceCore(int sleep1Threshold);
        }

        class PlatformHelper
        {
            static /*0x0*/ int s_processorCount;
            static /*0x4*/ int s_lastProcessorCountRefreshTicks;
            static /*0x8*/ bool IsSingleProcessor;

            static /*0x7208d18*/ PlatformHelper();
            static /*0x7208c2c*/ int get_ProcessorCount();
        }

        class TimeoutHelper
        {
            static /*0x72084b4*/ uint GetTime();
            static /*0x72085b4*/ int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout);
        }

        struct CancellationTokenRegistration : System.IEquatable<System.Threading.CancellationTokenRegistration>, System.IDisposable, System.IAsyncDisposable
        {
            /*0x10*/ System.Threading.CancellationCallbackInfo m_callbackInfo;
            /*0x18*/ System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> m_registrationInfo;

            /*0x7208d6c*/ CancellationTokenRegistration(System.Threading.CancellationCallbackInfo callbackInfo, System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> registrationInfo);
            /*0x7208da4*/ bool Unregister();
            /*0x7208e20*/ void Dispose();
            /*0x7208f70*/ bool Equals(object obj);
            /*0x7209000*/ bool Equals(System.Threading.CancellationTokenRegistration other);
            /*0x7209080*/ int GetHashCode();
            /*0x7209110*/ System.Threading.Tasks.ValueTask DisposeAsync();
        }

        class CancellationTokenSource : System.IDisposable
        {
            static /*0x0*/ System.Threading.CancellationTokenSource s_canceledSource;
            static /*0x8*/ System.Threading.CancellationTokenSource s_neverCanceledSource;
            static /*0x10*/ int s_nLists;
            static /*0x18*/ System.Threading.TimerCallback s_timerCallback;
            /*0x10*/ System.Threading.ManualResetEvent _kernelEvent;
            /*0x18*/ System.Threading.SparselyPopulatedArray<System.Threading.CancellationCallbackInfo> _registeredCallbacksLists;
            /*0x20*/ int _state;
            /*0x24*/ int _threadIDExecutingCallbacks;
            /*0x28*/ bool _disposed;
            /*0x30*/ System.Threading.CancellationCallbackInfo _executingCallback;
            /*0x38*/ System.Threading.Timer _timer;

            static /*0x720a408*/ CancellationTokenSource();
            static /*0x72095a0*/ void TimerCallbackLogic(object obj);
            static /*0x72097c0*/ void ThrowObjectDisposedException();
            static /*0x7209fec*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
            static /*0x720a33c*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token);
            /*0x7209290*/ CancellationTokenSource();
            /*0x720684c*/ bool get_IsCancellationRequested();
            /*0x7208eb4*/ bool get_IsCancellationCompleted();
            /*0x72091c8*/ bool get_IsDisposed();
            /*0x7208ed0*/ int get_ThreadIDExecutingCallbacks();
            /*0x72091d0*/ void set_ThreadIDExecutingCallbacks(int value);
            /*0x72091f4*/ System.Threading.CancellationToken get_Token();
            /*0x7209278*/ System.Threading.CancellationCallbackInfo get_ExecutingCallback();
            /*0x72092c4*/ void Cancel();
            /*0x72092e0*/ void Cancel(bool throwOnFirstException);
            /*0x72093b8*/ void CancelAfter(int millisecondsDelay);
            /*0x72096b8*/ void Dispose();
            /*0x7209724*/ void Dispose(bool disposing);
            /*0x7209224*/ void ThrowIfDisposed();
            /*0x7206e0c*/ System.Threading.CancellationTokenRegistration InternalRegister(System.Action<object> callback, object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext executionContext);
            /*0x7209308*/ void NotifyCancellation(bool throwOnFirstException);
            /*0x72098b0*/ void ExecuteCallbackHandlers(bool throwOnFirstException);
            /*0x7209e70*/ void CancellationCallbackCoreWork_OnSyncContext(object obj);
            /*0x7209db4*/ void CancellationCallbackCoreWork(System.Threading.CancellationCallbackCoreWorkArguments args);
            /*0x7208ee8*/ void WaitForCallbackToComplete(System.Threading.CancellationCallbackInfo callbackInfo);

            class Linked1CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;

                /*0x720a0fc*/ Linked1CancellationTokenSource(System.Threading.CancellationToken token1);
                /*0x720a594*/ void Dispose(bool disposing);
            }

            class Linked2CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;
                /*0x58*/ System.Threading.CancellationTokenRegistration _reg2;

                /*0x720a200*/ Linked2CancellationTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
                /*0x720a5c8*/ void Dispose(bool disposing);
            }

            class LinkedNCancellationTokenSource : System.Threading.CancellationTokenSource
            {
                static /*0x0*/ System.Action<object> s_linkedTokenCancelDelegate;

                static /*0x720a604*/ LinkedNCancellationTokenSource();

                class <>c
                {
                    static /*0x0*/ System.Threading.CancellationTokenSource.LinkedNCancellationTokenSource.<> <>9;

                    static /*0x720a6d4*/ <>c();
                    /*0x720a73c*/ <>c();
                    /*0x720a744*/ void <.cctor>b__4_0(object s);
                }
            }
        }

        struct CancellationCallbackCoreWorkArguments
        {
            /*0x10*/ System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> _currArrayFragment;
            /*0x18*/ int _currArrayIndex;

            /*0x7209d8c*/ CancellationCallbackCoreWorkArguments(System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> currArrayFragment, int currArrayIndex);
        }

        class CancellationCallbackInfo
        {
            static /*0x0*/ System.Threading.ContextCallback s_executionContextCallback;
            /*0x10*/ System.Action<object> Callback;
            /*0x18*/ object StateForCallback;
            /*0x20*/ System.Threading.ExecutionContext TargetExecutionContext;
            /*0x28*/ System.Threading.CancellationTokenSource CancellationTokenSource;

            static /*0x720a9b0*/ void ExecutionContextCallback(object obj);
            /*0x7209810*/ CancellationCallbackInfo(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource);
            /*0x7209ee8*/ void ExecuteCallback();

            class WithSyncContext : System.Threading.CancellationCallbackInfo
            {
                /*0x30*/ System.Threading.SynchronizationContext TargetSyncContext;

                /*0x7209884*/ WithSyncContext(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource, System.Threading.SynchronizationContext targetSyncContext);
            }
        }

        class SparselyPopulatedArray<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _head;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _tail;

            /*0x380cffc*/ SparselyPopulatedArray(int initialSize);
            /*0x380b9e8*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Tail();
            /*0x3907c14*/ System.Threading.SparselyPopulatedArrayAddInfo<T> Add(T element);
        }

        struct SparselyPopulatedArrayAddInfo<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _source;
            /*0x0*/ int _index;

            /*0x380d8b8*/ SparselyPopulatedArrayAddInfo(System.Threading.SparselyPopulatedArrayFragment<T> source, int index);
            /*0x380b9e8*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Source();
            /*0x380b6a0*/ int get_Index();
        }

        class SparselyPopulatedArrayFragment<T>
        {
            /*0x0*/ T[] _elements;
            /*0x0*/ int _freeCount;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _next;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _prev;

            /*0x380cffc*/ SparselyPopulatedArrayFragment(int size);
            /*0x380d170*/ SparselyPopulatedArrayFragment(int size, System.Threading.SparselyPopulatedArrayFragment<T> prev);
            /*0x3907c14*/ T get_Item(int index);
            /*0x380b6a0*/ int get_Length();
            /*0x380b9e8*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Prev();
            /*0x3907c14*/ T SafeAtomicRemove(int index, T expectedElement);
        }

        struct LockHolder : System.IDisposable
        {
            /*0x10*/ System.Threading.Lock _lock;

            static /*0x720aa3c*/ System.Threading.LockHolder Hold(System.Threading.Lock l);
            /*0x720aa84*/ void Dispose();
        }

        class Lock
        {
            /*0x10*/ object _lock;

            /*0x720aab0*/ Lock();
            /*0x720aa7c*/ void Acquire();
            /*0x720aaa0*/ void Release();
        }

        class SemaphoreSlim : System.IDisposable
        {
            static /*0x0*/ System.Threading.Tasks.Task<bool> s_trueTask;
            static /*0x8*/ System.Threading.Tasks.Task<bool> s_falseTask;
            static /*0x10*/ System.Action<object> s_cancellationTokenCanceledEventHandler;
            /*0x10*/ int m_currentCount;
            /*0x14*/ int m_maxCount;
            /*0x18*/ int m_waitCount;
            /*0x20*/ object m_lockObj;
            /*0x28*/ System.Threading.ManualResetEvent m_waitHandle;
            /*0x30*/ System.Threading.SemaphoreSlim.TaskNode m_asyncHead;
            /*0x38*/ System.Threading.SemaphoreSlim.TaskNode m_asyncTail;

            static /*0x720bf60*/ SemaphoreSlim();
            static /*0x720bd38*/ void QueueWaiterTask(System.Threading.SemaphoreSlim.TaskNode waiterTask);
            static /*0x720be4c*/ void CancellationTokenCanceledEventHandler(object obj);
            static /*0x720acac*/ string GetResourceString(string str);
            /*0x720ab1c*/ SemaphoreSlim(int initialCount, int maxCount);
            /*0x720acb4*/ void Wait();
            /*0x720acc0*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x720b584*/ bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken);
            /*0x720b6ac*/ System.Threading.Tasks.Task WaitAsync();
            /*0x720b260*/ System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x720b6b8*/ System.Threading.SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter();
            /*0x720b910*/ bool RemoveAsyncWaiter(System.Threading.SemaphoreSlim.TaskNode task);
            /*0x720b768*/ System.Threading.Tasks.Task<bool> WaitUntilCountOrTimeoutAsync(System.Threading.SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x720b9f8*/ int Release();
            /*0x720ba00*/ int Release(int releaseCount);
            /*0x720bd44*/ void Dispose();
            /*0x720bdb0*/ void Dispose(bool disposing);
            /*0x720b1e4*/ void CheckDispose();

            class TaskNode : System.Threading.Tasks.Task<bool>, System.Threading.IThreadPoolWorkItem
            {
                /*0x58*/ System.Threading.SemaphoreSlim.TaskNode Prev;
                /*0x60*/ System.Threading.SemaphoreSlim.TaskNode Next;

                /*0x720b8c8*/ TaskNode();
                /*0x720c0a0*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x720c0ec*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
            }

            struct <WaitUntilCountOrTimeoutAsync>d__32 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<bool> <>t__builder;
                /*0x30*/ System.Threading.CancellationToken cancellationToken;
                /*0x38*/ System.Threading.SemaphoreSlim.TaskNode asyncWaiter;
                /*0x40*/ int millisecondsTimeout;
                /*0x48*/ System.Threading.SemaphoreSlim <>4__this;
                /*0x50*/ System.Threading.CancellationTokenSource <cts>5__2;
                /*0x58*/ object <>7__wrap2;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1;
                /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2;

                /*0x720c0f0*/ void MoveNext();
                /*0x720c97c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        struct SpinLock
        {
            static /*0x0*/ int MAXIMUM_WAITERS;
            /*0x10*/ int m_owner;

            static /*0x720d764*/ SpinLock();
            /*0x720c9f8*/ SpinLock(bool enableThreadOwnerTracking);
            /*0x720ca30*/ void Enter(ref bool lockTaken);
            /*0x720d008*/ void TryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0x720cb34*/ void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0x720d2b0*/ void DecrementWaiters();
            /*0x720d144*/ void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken);
            /*0x720d480*/ void Exit();
            /*0x720d60c*/ void Exit(bool useMemoryBarrier);
            /*0x720d4fc*/ void ExitSlowPath(bool useMemoryBarrier);
            /*0x720d694*/ bool get_IsHeldByCurrentThread();
            /*0x720d128*/ bool get_IsThreadOwnerTrackingEnabled();

            class SystemThreading_SpinLockDebugView
            {
            }
        }

        class ThreadLocal<T> : System.IDisposable
        {
            static /*0x0*/ System.Threading.ThreadLocal.IdManager<T> s_idManager;
            [ThreadStatic] static System.Threading.ThreadLocal.LinkedSlotVolatile<T> ts_slotArray;
            [ThreadStatic] static System.Threading.ThreadLocal.FinalizationHelper<T> ts_finalizationHelper;
            /*0x0*/ System.Func<T> m_valueFactory;
            /*0x0*/ int m_idComplement;
            /*0x0*/ bool m_initialized;
            /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> m_linkedSlot;
            /*0x0*/ bool m_trackAllValues;

            static /*0x38358cc*/ ThreadLocal();
            static /*0x3824360*/ int GetNewTableSize(int minSize);
            /*0x380cb08*/ ThreadLocal();
            /*0x380d83c*/ ThreadLocal(System.Func<T> valueFactory);
            void Initialize(System.Func<T> valueFactory, bool trackAllValues);
            /*0x380cb08*/ void Finalize();
            /*0x380cb08*/ void Dispose();
            /*0x380cdf0*/ void Dispose(bool disposing);
            /*0x380b9e8*/ string ToString();
            /*0x3907c14*/ T get_Value();
            /*0x3907c14*/ void set_Value(T value);
            /*0x3907c14*/ T GetValueSlow();
            /*0x3907c14*/ void SetValueSlow(T value, System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray);
            /*0x3907c14*/ void CreateLinkedSlot(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray, int id, T value);
            /*0x380b128*/ bool get_IsValueCreated();
            /*0x380d8b8*/ void GrowTable(ref System.Threading.ThreadLocal.LinkedSlotVolatile<T> table, int minLength);

            struct LinkedSlotVolatile<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Value;
            }

            class LinkedSlot<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Next;
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Previous;
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlotVolatile<T> SlotArray;
                /*0x0*/ T Value;

                /*0x380d83c*/ LinkedSlot(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray);
            }

            class IdManager<T>
            {
                /*0x0*/ int m_nextIdToTry;
                /*0x0*/ System.Collections.Generic.List<bool> m_freeIds;

                /*0x380cb08*/ IdManager();
                /*0x380b6a0*/ int GetId();
                /*0x380cffc*/ void ReturnId(int id);
            }

            class FinalizationHelper<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlotVolatile<T> SlotArray;
                /*0x0*/ bool m_trackAllValues;

                FinalizationHelper(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray, bool trackAllValues);
                /*0x380cb08*/ void Finalize();
            }
        }

        class SystemThreading_ThreadLocalDebugView<T>
        {
        }

        class EventWaitHandle : System.Threading.WaitHandle
        {
            /*0x7206100*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode);
            /*0x720d7b0*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name);
            /*0x720b650*/ bool Reset();
            /*0x7207d4c*/ bool Set();
        }

        class ContextCallback : System.MulticastDelegate
        {
            /*0x720a7c8*/ ContextCallback(object object, nint method);
            /*0x720da5c*/ void Invoke(object state);
        }

        class ContextCallback<TState> : System.MulticastDelegate
        {
            ContextCallback(object object, nint method);
            /*0x380d83c*/ void Invoke(ref TState state);
        }

        struct ExecutionContextSwitcher
        {
            /*0x10*/ System.Threading.ExecutionContext.Reader outerEC;
            /*0x18*/ bool outerECBelongsToScope;
            /*0x20*/ object hecsw;
            /*0x28*/ System.Threading.Thread thread;

            /*0x720da70*/ bool UndoNoThrow();
            /*0x720daf8*/ void Undo();
        }

        struct AsyncFlowControl : System.IDisposable
        {
            /*0x10*/ bool useEC;
            /*0x18*/ System.Threading.ExecutionContext _ec;
            /*0x20*/ System.Threading.Thread _thread;

            /*0x720e0c0*/ void Setup();
            /*0x720e1dc*/ void Dispose();
            /*0x720e1e0*/ void Undo();
            /*0x720e36c*/ int GetHashCode();
            /*0x720e40c*/ bool Equals(object obj);
            /*0x720e4a8*/ bool Equals(System.Threading.AsyncFlowControl obj);
        }

        class ExecutionContext : System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Threading.ExecutionContext s_dummyDefaultEC;
            static /*0x8*/ System.Threading.ExecutionContext Default;
            /*0x10*/ System.Threading.SynchronizationContext _syncContext;
            /*0x18*/ System.Threading.SynchronizationContext _syncContextNoFlow;
            /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext;
            /*0x28*/ System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext;
            /*0x30*/ System.Threading.ExecutionContext.Flags _flags;
            /*0x38*/ System.Collections.Generic.Dictionary<System.Threading.IAsyncLocal, object> _localValues;
            /*0x40*/ System.Collections.Generic.List<System.Threading.IAsyncLocal> _localChangeNotifications;

            static /*0x720f864*/ ExecutionContext();
            static /*0x720e55c*/ void SetLocalValue(System.Threading.IAsyncLocal local, object newValue, bool needChangeNotifications);
            static /*0x720dc08*/ void OnAsyncLocalContextChanged(System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current);
            static /*0x720a8d0*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0x720e96c*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0x720ebe8*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0x720e9e8*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0x383bc84*/ void RunInternal<TState>(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback<TState> callback, ref TState state);
            static void RunInternal<TState>(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback<TState> callback, ref TState state, bool preserveSyncCtx);
            static /*0x720ef30*/ void EstablishCopyOnWriteScope(ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0x720ecfc*/ void EstablishCopyOnWriteScope(System.Threading.Thread currentThread, bool knownNullWindowsIdentity, ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0x720ed68*/ System.Threading.ExecutionContextSwitcher SetExecutionContext(System.Threading.ExecutionContext executionContext, bool preserveSyncCtx);
            static /*0x720f2d4*/ System.Threading.AsyncFlowControl SuppressFlow();
            static /*0x720e2e4*/ void RestoreFlow();
            static /*0x720f3ac*/ bool IsFlowSuppressed();
            static /*0x7206dbc*/ System.Threading.ExecutionContext Capture();
            static /*0x720f5c8*/ System.Threading.ExecutionContext FastCapture();
            static /*0x720f3ec*/ System.Threading.ExecutionContext Capture(ref System.Threading.StackCrawlMark stackMark, System.Threading.ExecutionContext.CaptureOptions options);
            /*0x720e524*/ ExecutionContext();
            /*0x720e52c*/ ExecutionContext(bool isPreAllocatedDefault);
            /*0x720f74c*/ ExecutionContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x720e4e8*/ bool get_isNewCapture();
            /*0x720e4fc*/ void set_isNewCapture(bool value);
            /*0x720e50c*/ bool get_isFlowSuppressed();
            /*0x720e1bc*/ void set_isFlowSuppressed(bool value);
            /*0x720e518*/ bool get_IsPreAllocatedDefault();
            /*0x720e858*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
            /*0x720e8c8*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
            /*0x720e8d0*/ System.Runtime.Remoting.Messaging.IllogicalCallContext get_IllogicalCallContext();
            /*0x720e940*/ void set_IllogicalCallContext(System.Runtime.Remoting.Messaging.IllogicalCallContext value);
            /*0x720e948*/ System.Threading.SynchronizationContext get_SynchronizationContext();
            /*0x720e950*/ void set_SynchronizationContext(System.Threading.SynchronizationContext value);
            /*0x720e958*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
            /*0x720e960*/ void set_SynchronizationContextNoFlow(System.Threading.SynchronizationContext value);
            /*0x720e968*/ void Dispose();
            /*0x720f01c*/ System.Threading.ExecutionContext CreateCopy();
            /*0x720f194*/ System.Threading.ExecutionContext CreateMutableCopy();
            /*0x720f64c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x720ec84*/ bool IsDefaultFTContext(bool ignoreSyncCtx);

            enum Flags
            {
                None = 0,
                IsNewCapture = 1,
                IsFlowSuppressed = 2,
                IsPreAllocatedDefault = 4,
            }

            struct Reader
            {
                /*0x10*/ System.Threading.ExecutionContext m_ec;

                /*0x720f8fc*/ Reader(System.Threading.ExecutionContext ec);
                /*0x720f904*/ System.Threading.ExecutionContext DangerousGetRawExecutionContext();
                /*0x720ec58*/ bool get_IsNull();
                /*0x720ec68*/ bool IsDefaultFTContext(bool ignoreSyncCtx);
                /*0x720f90c*/ bool get_IsFlowSuppressed();
                /*0x720efb8*/ System.Threading.SynchronizationContext get_SynchronizationContext();
                /*0x720efd0*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
                /*0x720f618*/ System.Runtime.Remoting.Messaging.LogicalCallContext.Reader get_LogicalCallContext();
                /*0x720ecd4*/ bool HasSameLocalValues(System.Threading.ExecutionContext other);
            }

            enum CaptureOptions
            {
                None = 0,
                IgnoreSyncCtx = 1,
                OptimizeDefaultCase = 2,
            }
        }

        class Monitor
        {
            static /*0x720aaa8*/ void Enter(object obj);
            static /*0x7207d2c*/ void Enter(object obj, ref bool lockTaken);
            static /*0x720f928*/ void ThrowLockTakenException();
            static /*0x720aaac*/ void Exit(object obj);
            static /*0x720f9a0*/ void TryEnter(object obj, ref bool lockTaken);
            static /*0x720fa54*/ bool Wait(object obj, int millisecondsTimeout, bool exitContext);
            static /*0x72085f0*/ bool Wait(object obj, int millisecondsTimeout);
            static /*0x720bce4*/ void Pulse(object obj);
            static /*0x7207f5c*/ void PulseAll(object obj);
            static /*0x720fc20*/ bool Monitor_test_synchronised(object obj);
            static /*0x720fc24*/ void Monitor_pulse(object obj);
            static /*0x720fb60*/ void ObjPulse(object obj);
            static /*0x720fc28*/ void Monitor_pulse_all(object obj);
            static /*0x720fbc0*/ void ObjPulseAll(object obj);
            static /*0x720fc2c*/ bool Monitor_wait(object obj, int ms);
            static /*0x720fab0*/ bool ObjWait(bool exitContext, int millisecondsTimeout, object obj);
            static /*0x720fc30*/ void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken);
            static /*0x720f9c0*/ void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken);
            static /*0x720f994*/ void ReliableEnter(object obj, ref bool lockTaken);
        }

        enum SynchronizationContextProperties
        {
            None = 0,
            RequireWaitNotification = 1,
        }

        class SynchronizationContext
        {
            /*0x10*/ System.Threading.SynchronizationContextProperties _props;

            static /*0x720fd64*/ int WaitHelper(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            static /*0x720fdec*/ void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext);
            static /*0x7206d80*/ System.Threading.SynchronizationContext get_Current();
            static /*0x720fe80*/ System.Threading.SynchronizationContext get_CurrentNoFlow();
            static /*0x720fe34*/ System.Threading.SynchronizationContext GetThreadLocalContext();
            static /*0x7210070*/ System.Threading.SynchronizationContext get_CurrentExplicit();
            /*0x720fc34*/ SynchronizationContext();
            /*0x720fc3c*/ bool IsWaitNotificationRequired();
            /*0x720fc48*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0x720fc70*/ void Post(System.Threading.SendOrPostCallback d, object state);
            /*0x720fcf8*/ void OperationStarted();
            /*0x720fcfc*/ void OperationCompleted();
            /*0x720fd00*/ int Wait(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            /*0x721001c*/ System.Threading.SynchronizationContext CreateCopy();
        }

        class OSSpecificSynchronizationContext : System.Threading.SynchronizationContext
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Threading.OSSpecificSynchronizationContext> s_ContextCache;
            /*0x18*/ object m_OSSynchronizationContext;

            static /*0x7210574*/ OSSpecificSynchronizationContext();
            static /*0x720febc*/ System.Threading.OSSpecificSynchronizationContext Get();
            static /*0x7210074*/ void InvocationEntry(nint arg);
            static /*0x7210268*/ object GetOSContext();
            static /*0x7210548*/ void PostInternal(object osSynchronizationContext, nint callback, nint arg);
            /*0x7210238*/ OSSpecificSynchronizationContext(object osContext);
            /*0x721026c*/ System.Threading.SynchronizationContext CreateCopy();
            /*0x72102d8*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0x7210310*/ void Post(System.Threading.SendOrPostCallback d, object state);

            class InvocationEntryDelegate : System.MulticastDelegate
            {
                /*0x7210464*/ InvocationEntryDelegate(object object, nint method);
                /*0x721060c*/ void Invoke(nint arg);
            }

            class InvocationContext
            {
                /*0x10*/ System.Threading.SendOrPostCallback m_Delegate;
                /*0x18*/ object m_State;

                /*0x7210504*/ InvocationContext(System.Threading.SendOrPostCallback d, object state);
                /*0x721054c*/ void Invoke();
            }

            class <>c
            {
                static /*0x0*/ System.Threading.OSSpecificSynchronizationContext.<> <>9;
                static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<object, System.Threading.OSSpecificSynchronizationContext> <>9__3_0;

                static /*0x7210620*/ <>c();
                /*0x7210688*/ <>c();
                /*0x7210690*/ System.Threading.OSSpecificSynchronizationContext <Get>b__3_0(object _osContext);
            }
        }

        class ThreadHelper
        {
            static /*0x0*/ System.Threading.ContextCallback _ccb;
            /*0x10*/ System.Delegate _start;
            /*0x18*/ object _startArg;
            /*0x20*/ System.Threading.ExecutionContext _executionContext;

            static /*0x7210a30*/ ThreadHelper();
            static /*0x7210730*/ void ThreadStart_Context(object state);
            /*0x72106f8*/ ThreadHelper(System.Delegate start);
            /*0x7210728*/ void SetExecutionContextHelper(System.Threading.ExecutionContext ec);
            /*0x721082c*/ void ThreadStart(object obj);
            /*0x721093c*/ void ThreadStart();
        }

        class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            static /*0x0*/ System.LocalDataStoreMgr s_LocalDataStoreMgr;
            static /*0x8*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture;
            static /*0x10*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture;
            [ThreadStatic] static System.LocalDataStoreHolder s_LocalDataStore;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentCulture;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentUICulture;
            [ThreadStatic] static System.Threading.Thread current_thread;
            /*0x10*/ System.Threading.InternalThread internal_thread;
            /*0x18*/ object m_ThreadStartArg;
            /*0x20*/ object pending_exception;
            /*0x28*/ System.MulticastDelegate m_Delegate;
            /*0x30*/ System.Threading.ExecutionContext m_ExecutionContext;
            /*0x38*/ bool m_ExecutionContextBelongsToOuterScope;
            /*0x40*/ System.Security.Principal.IPrincipal principal;
            /*0x48*/ int principal_version;

            static /*0x7210acc*/ void AsyncLocalSetCurrentCulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0x721107c*/ void SleepInternal(int millisecondsTimeout);
            static /*0x720d37c*/ void Sleep(int millisecondsTimeout);
            static /*0x7211080*/ void Sleep(System.TimeSpan timeout);
            static /*0x721116c*/ bool YieldInternal();
            static /*0x720d3f4*/ bool Yield();
            static /*0x7211604*/ void nativeInitCultureAccessors();
            static /*0x72116c0*/ void MemoryBarrier();
            static /*0x72116ec*/ System.Runtime.Remoting.Contexts.Context get_CurrentContext();
            static /*0x72116f4*/ void GetCurrentThread_icall(ref System.Threading.Thread thread);
            static /*0x72116f8*/ System.Threading.Thread GetCurrentThread();
            static /*0x720d3f8*/ System.Threading.Thread get_CurrentThread();
            static /*0x7211714*/ int get_CurrentThreadId();
            static /*0x7211738*/ int GetDomainID();
            static /*0x7211880*/ void SetName_icall(System.Threading.InternalThread thread, char* name, int nameLength);
            static /*0x7211884*/ void SetName_internal(System.Threading.InternalThread thread, string name);
            static /*0x72118f4*/ void SpinWait_nop();
            static /*0x720d354*/ void SpinWait(int iterations);
            static /*0x7211878*/ void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set);
            static /*0x721187c*/ void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr);
            static /*0x72117bc*/ System.Threading.ThreadState GetState(System.Threading.InternalThread thread);
            static /*0x72118f8*/ object VolatileRead(ref object address);
            static /*0x72118fc*/ int SystemMaxStackStize();
            static /*0x7211170*/ int GetProcessDefaultStackSize(int maxStackSize);
            static /*0x720cae4*/ void BeginCriticalRegion();
            static /*0x720d0d8*/ void EndCriticalRegion();
            /*0x7210b38*/ Thread(System.Threading.ThreadStart start);
            /*0x7210cd8*/ Thread(System.Threading.ParameterizedThreadStart start);
            /*0x7210d54*/ Thread(System.Threading.ParameterizedThreadStart start, int maxStackSize);
            /*0x7210e3c*/ void Start();
            /*0x7210f24*/ void Start(object parameter);
            /*0x7210e58*/ void Start(ref System.Threading.StackCrawlMark stackMark);
            /*0x720dbb4*/ System.Threading.ExecutionContext.Reader GetExecutionContextReader();
            /*0x720ef98*/ bool get_ExecutionContextBelongsToCurrentScope();
            /*0x720efa8*/ void set_ExecutionContextBelongsToCurrentScope(bool value);
            /*0x720e128*/ System.Threading.ExecutionContext GetMutableExecutionContext();
            /*0x720efe8*/ void SetExecutionContext(System.Threading.ExecutionContext value, bool belongsToCurrentScope);
            /*0x720dbd4*/ void SetExecutionContext(System.Threading.ExecutionContext.Reader value, bool belongsToCurrentScope);
            /*0x7211070*/ bool JoinInternal(int millisecondsTimeout);
            /*0x7211074*/ void Join();
            /*0x7210bb4*/ void SetStartHelper(System.Delegate start, int maxStackSize);
            /*0x7211268*/ System.Globalization.CultureInfo get_CurrentUICulture();
            /*0x7211294*/ System.Globalization.CultureInfo GetCurrentUICultureNoAppX();
            /*0x7211340*/ System.Globalization.CultureInfo get_CurrentCulture();
            /*0x7211418*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
            /*0x721136c*/ System.Globalization.CultureInfo GetCurrentCultureNoAppX();
            /*0x72116c4*/ void ConstructInternalThread();
            /*0x72116c8*/ System.Threading.InternalThread get_Internal();
            /*0x721173c*/ bool Thread_internal(System.MulticastDelegate start);
            /*0x7211740*/ void Finalize();
            /*0x7211748*/ bool get_IsThreadPoolThread();
            /*0x721174c*/ bool get_IsThreadPoolThreadInternal();
            /*0x7211778*/ bool get_IsAlive();
            /*0x72117c0*/ void set_IsBackground(bool value);
            /*0x72118c0*/ void set_Name(string value);
            /*0x7211000*/ void StartInternal(object principal, ref System.Threading.StackCrawlMark stackMark);
            /*0x721121c*/ void SetStart(System.MulticastDelegate start, int maxStackSize);
            /*0x720d454*/ int get_ManagedThreadId();
            /*0x7211900*/ int GetHashCode();
            /*0x7211808*/ System.Threading.ThreadState ValidateThreadState();
        }

        enum StackCrawlMark
        {
            LookForMe = 0,
            LookForMyCaller = 1,
            LookForMyCallersCaller = 2,
            LookForThread = 3,
        }

        class ThreadAbortException : System.SystemException
        {
            /*0x7211b78*/ ThreadAbortException();
            /*0x7211bf4*/ ThreadAbortException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadInterruptedException : System.SystemException
        {
            /*0x7211bfc*/ ThreadInterruptedException();
            /*0x7211c78*/ ThreadInterruptedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        interface IThreadPoolWorkItem
        {
            /*0x380cb08*/ void ExecuteWorkItem();
            /*0x380d83c*/ void MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class WaitCallback : System.MulticastDelegate
        {
            /*0x7211c80*/ WaitCallback(object object, nint method);
            /*0x7211d88*/ void Invoke(object state);
        }

        class WaitOrTimerCallback : System.MulticastDelegate
        {
            /*0x7211d9c*/ WaitOrTimerCallback(object object, nint method);
            /*0x7211ea8*/ void Invoke(object state, bool timedOut);
        }

        class ThreadPoolGlobals
        {
            static /*0x0*/ int processorCount;
            static /*0x4*/ bool vmTpInitialized;
            static /*0x5*/ bool enableWorkerTracking;
            static /*0x8*/ System.Threading.ThreadPoolWorkQueue workQueue;

            static /*0x7211ec0*/ ThreadPoolGlobals();
        }

        class ThreadPoolWorkQueue
        {
            static /*0x0*/ System.Threading.ThreadPoolWorkQueue.SparseArray<System.Threading.ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueHead;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueTail;
            /*0x20*/ int numOutstandingThreadRequests;

            static /*0x7213874*/ ThreadPoolWorkQueue();
            static /*0x721340c*/ bool Dispatch();
            /*0x7211f44*/ ThreadPoolWorkQueue();
            /*0x7212028*/ System.Threading.ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue();
            /*0x72121f0*/ void EnsureThreadRequested();
            /*0x7212290*/ void MarkThreadRequestSatisfied();
            /*0x72122d8*/ void Enqueue(System.Threading.IThreadPoolWorkItem callback, bool forceGlobal);
            /*0x72129c0*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem callback);
            /*0x7212d68*/ void Dequeue(System.Threading.ThreadPoolWorkQueueThreadLocals tl, ref System.Threading.IThreadPoolWorkItem callback, ref bool missedSteal);

            class SparseArray<T>
            {
                /*0x0*/ T[] m_array;

                /*0x380cffc*/ SparseArray(int initialSize);
                /*0x380b9e8*/ T[] get_Current();
                /*0x3907c14*/ int Add(T e);
                /*0x3907c14*/ void Remove(T e);
            }

            class WorkStealingQueue
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] m_array;
                /*0x18*/ int m_mask;
                /*0x1c*/ int m_headIndex;
                /*0x20*/ int m_tailIndex;
                /*0x24*/ System.Threading.SpinLock m_foreignLock;

                /*0x7213bf8*/ WorkStealingQueue();
                /*0x7212408*/ void LocalPush(System.Threading.IThreadPoolWorkItem obj);
                /*0x7212a30*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem obj);
                /*0x7212f3c*/ bool LocalPop(ref System.Threading.IThreadPoolWorkItem obj);
                /*0x7213404*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal);
                /*0x7213914*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout);
            }

            class QueueSegment
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] nodes;
                /*0x18*/ int indexes;
                /*0x20*/ System.Threading.ThreadPoolWorkQueue.QueueSegment Next;

                /*0x7211fc4*/ QueueSegment();
                /*0x7213c98*/ void GetIndexes(ref int upper, ref int lower);
                /*0x7213ccc*/ bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower);
                /*0x72133c0*/ bool IsUsedUp();
                /*0x72128fc*/ bool TryEnqueue(System.Threading.IThreadPoolWorkItem node);
                /*0x7213264*/ bool TryDequeue(ref System.Threading.IThreadPoolWorkItem node);
            }
        }

        class ThreadPoolWorkQueueThreadLocals
        {
            [ThreadStatic] static System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue workQueue;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue;
            /*0x20*/ System.Random random;

            /*0x72120b4*/ ThreadPoolWorkQueueThreadLocals(System.Threading.ThreadPoolWorkQueue tpq);
            /*0x7213d34*/ void CleanUp();
            /*0x7213e00*/ void Finalize();
        }

        class _ThreadPoolWaitCallback
        {
            static /*0x7213ecc*/ bool PerformWaitCallback();
        }

        class QueueUserWorkItemCallback : System.Threading.IThreadPoolWorkItem
        {
            static /*0x0*/ System.Threading.ContextCallback ccb;
            /*0x10*/ System.Threading.WaitCallback callback;
            /*0x18*/ System.Threading.ExecutionContext context;
            /*0x20*/ object state;

            static /*0x7214164*/ QueueUserWorkItemCallback();
            static /*0x72140ec*/ void WaitCallback_Context(object state);
            /*0x7213f18*/ QueueUserWorkItemCallback(System.Threading.WaitCallback waitCallback, object stateObj, bool compressStack, ref System.Threading.StackCrawlMark stackMark);
            /*0x7214004*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
            /*0x72140e8*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class ThreadPool
        {
            static /*0x7214204*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, bool compressStack);
            static /*0x721450c*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            static /*0x72144bc*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x7214754*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack);
            static /*0x72144e4*/ bool UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x3907c14*/ bool QueueUserWorkItem<TState>(System.Action<TState> callBack, TState state, bool preferLocal);
            static /*0x3907c14*/ bool UnsafeQueueUserWorkItem<TState>(System.Action<TState> callBack, TState state, bool preferLocal);
            static /*0x721463c*/ bool QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, object state, ref System.Threading.StackCrawlMark stackMark, bool compressStack, bool forceGlobal);
            static /*0x7214814*/ void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, bool forceGlobal);
            static /*0x7214890*/ bool TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem);
            static /*0x721228c*/ bool RequestWorkerThread();
            static /*0x7214780*/ void EnsureVMInitialized();
            static /*0x7213870*/ bool NotifyWorkItemComplete();
            static /*0x7214930*/ void ReportThreadStatus(bool isWorking);
            static /*0x7214938*/ void NotifyWorkItemProgress();
            static /*0x7214948*/ void NotifyWorkItemProgressNative();
            static /*0x72129bc*/ void NotifyWorkItemQueued();
            static /*0x721492c*/ void InitializeVMTp(ref bool enableWorkerTracking);
            static /*0x721494c*/ bool get_IsThreadPoolThread();

            class <>c__DisplayClass17_0<TState>
            {
                /*0x0*/ System.Action<TState> callBack;

                /*0x380cb08*/ <>c__DisplayClass17_0();
                /*0x380d83c*/ void <QueueUserWorkItem>b__0(object x);
            }

            class <>c__DisplayClass18_0<TState>
            {
                /*0x0*/ System.Action<TState> callBack;

                /*0x380cb08*/ <>c__DisplayClass18_0();
                /*0x380d83c*/ void <UnsafeQueueUserWorkItem>b__0(object x);
            }
        }

        class WaitHandle : System.MarshalByRefObject, System.IDisposable
        {
            static int WaitTimeout = 258;
            static int MAX_WAITHANDLES = 64;
            static int WAIT_OBJECT_0 = 0;
            static int WAIT_ABANDONED = 128;
            static int WAIT_FAILED = 2147483647;
            static int ERROR_TOO_MANY_POSTS = 298;
            static int ERROR_NOT_OWNED_BY_CALLER = 299;
            static int MaxWaitHandles = 64;
            static /*0x0*/ nint InvalidHandle;
            /*0x18*/ nint waitHandle;
            /*0x20*/ Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle;
            /*0x28*/ bool hasThreadAffinity;

            static /*0x7215a90*/ WaitHandle();
            static /*0x7214e2c*/ bool InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x7215114*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);
            static /*0x7215834*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext);
            static /*0x72150dc*/ void ThrowAbandonedMutexException();
            static /*0x72157e8*/ void ThrowAbandonedMutexException(int location, System.Threading.WaitHandle handle);
            static /*0x7214f18*/ int WaitOneNative(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x7215414*/ int WaitMultiple(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll);
            static /*0x7215a88*/ int Wait_internal(nint* handles, int numHandles, bool waitAll, int ms);
            /*0x721496c*/ WaitHandle();
            /*0x7214988*/ void Init();
            /*0x7214a00*/ void set_Handle(nint value);
            /*0x7214af8*/ Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle();
            /*0x7214bb0*/ void SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            /*0x7214bf0*/ bool WaitOne(int millisecondsTimeout, bool exitContext);
            /*0x7214cf0*/ bool WaitOne(System.TimeSpan timeout, bool exitContext);
            /*0x7214df8*/ bool WaitOne();
            /*0x7214e0c*/ bool WaitOne(int millisecondsTimeout);
            /*0x7214e1c*/ bool WaitOne(System.TimeSpan timeout);
            /*0x7214c70*/ bool WaitOne(long timeout, bool exitContext);
            /*0x7215960*/ void Close();
            /*0x72159d0*/ void Dispose(bool explicitDisposing);
            /*0x7215a18*/ void Dispose();
        }

        class Interlocked
        {
            static /*0x7212288*/ int CompareExchange(ref int location1, int value, int comparand);
            static /*0x7215ae4*/ int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded);
            static /*0x7215ae8*/ void CompareExchange(ref object location1, ref object value, ref object comparand, ref object result);
            static /*0x7215aec*/ object CompareExchange(ref object location1, object value, object comparand);
            static /*0x7215b18*/ float CompareExchange(ref float location1, float value, float comparand);
            static /*0x7215b1c*/ int Decrement(ref int location);
            static /*0x7215b20*/ int Increment(ref int location);
            static /*0x7215b24*/ long Increment(ref long location);
            static /*0x7213910*/ int Exchange(ref int location1, int value);
            static /*0x7215b28*/ void Exchange(ref object location1, ref object value, ref object result);
            static /*0x7215b2c*/ object Exchange(ref object location1, object value);
            static /*0x7215b50*/ float Exchange(ref float location1, float value);
            static /*0x7215b54*/ long CompareExchange(ref long location1, long value, long comparand);
            static /*0x7215b58*/ nint CompareExchange(ref nint location1, nint value, nint comparand);
            static /*0x7215b5c*/ double CompareExchange(ref double location1, double value, double comparand);
            static /*0x3907c14*/ T CompareExchange<T>(ref T location1, T value, T comparand);
            static /*0x7215b60*/ long Exchange(ref long location1, long value);
            static /*0x7215b64*/ nint Exchange(ref nint location1, nint value);
            static /*0x7215b68*/ double Exchange(ref double location1, double value);
            static /*0x3907c14*/ T Exchange<T>(ref T location1, T value);
            static /*0x7215b6c*/ long Read(ref long location);
            static /*0x7215b70*/ int Add(ref int location1, int value);
            static /*0x7215b74*/ long Add(ref long location1, long value);
            static /*0x7215b78*/ void MemoryBarrier();
        }

        class LockQueue
        {
            /*0x10*/ System.Threading.ReaderWriterLock rwlock;
            /*0x18*/ int lockCount;

            /*0x7215b80*/ LockQueue(System.Threading.ReaderWriterLock rwlock);
            /*0x7215bb0*/ bool Wait(int timeout);
            /*0x7215d54*/ bool get_IsEmpty();
            /*0x7215e14*/ void Pulse();
        }

        class Mutex : System.Threading.WaitHandle
        {
        }

        class NativeEventCalls
        {
            static /*0x7215ecc*/ nint CreateEvent_internal(bool manual, bool initial, string name, ref int errorCode);
            static /*0x7215f20*/ nint CreateEvent_icall(bool manual, bool initial, char* name, int name_length, ref int errorCode);
            static /*0x7215f2c*/ bool SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x721601c*/ bool SetEvent_internal(nint handle);
            static /*0x7216020*/ bool ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x7216110*/ bool ResetEvent_internal(nint handle);
            static /*0x7216114*/ void CloseEvent_internal(nint handle);
        }

        class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int seq_num;
            /*0x14*/ int state;
            /*0x18*/ int readers;
            /*0x1c*/ int writer_lock_owner;
            /*0x20*/ System.Threading.LockQueue writer_queue;
            /*0x28*/ System.Collections.Hashtable reader_locks;

            /*0x7216118*/ ReaderWriterLock();
            /*0x721620c*/ void Finalize();
            /*0x7216214*/ void AcquireWriterLock(int millisecondsTimeout);
            /*0x721621c*/ void AcquireWriterLock(int millisecondsTimeout, int initialLockCount);
            /*0x72163f0*/ void ReleaseWriterLock();
            /*0x7216518*/ void ReleaseWriterLock(int releaseCount);
            /*0x72163bc*/ bool HasWriterLock();
        }

        class RegisteredWaitHandle : System.MarshalByRefObject
        {
            /*0x18*/ System.Threading.WaitHandle _waitObject;
            /*0x20*/ System.Threading.WaitOrTimerCallback _callback;
            /*0x28*/ object _state;
            /*0x30*/ System.Threading.WaitHandle _finalEvent;
            /*0x38*/ System.Threading.ManualResetEvent _cancelEvent;
            /*0x40*/ System.TimeSpan _timeout;
            /*0x48*/ int _callsInProcess;
            /*0x4c*/ bool _executeOnlyOnce;
            /*0x4d*/ bool _unregistered;

            /*0x72143c8*/ RegisteredWaitHandle(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callback, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            /*0x7216578*/ void Wait(object state);
            /*0x7216ab4*/ void DoCallBack(object timedOut);
            /*0x7216b90*/ bool Unregister(System.Threading.WaitHandle waitObject);
        }

        class InternalThread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int lock_thread_id;
            /*0x18*/ nint handle;
            /*0x20*/ nint native_handle;
            /*0x28*/ nint name_chars;
            /*0x30*/ int name_free;
            /*0x34*/ int name_length;
            /*0x38*/ System.Threading.ThreadState state;
            /*0x40*/ object abort_exc;
            /*0x48*/ int abort_state_handle;
            /*0x50*/ long thread_id;
            /*0x58*/ nint debugger_thread;
            /*0x60*/ nuint static_data;
            /*0x68*/ nint runtime_thread_info;
            /*0x70*/ object current_appcontext;
            /*0x78*/ object root_domain_thread;
            /*0x80*/ byte[] _serialized_principal;
            /*0x88*/ int _serialized_principal_version;
            /*0x90*/ nint appdomain_refs;
            /*0x98*/ int interruption_requested;
            /*0xa0*/ nint longlived;
            /*0xa8*/ bool threadpool_thread;
            /*0xa9*/ bool thread_interrupt_requested;
            /*0xac*/ int stack_size;
            /*0xb0*/ byte apartment_state;
            /*0xb4*/ int critical_region_level;
            /*0xb8*/ int managed_id;
            /*0xbc*/ int small_id;
            /*0xc0*/ nint manage_callback;
            /*0xc8*/ nint flags;
            /*0xd0*/ nint thread_pinning_ref;
            /*0xd8*/ nint abort_protected_block_count;
            /*0xe0*/ int priority;
            /*0xe8*/ nint owned_mutex;
            /*0xf0*/ nint suspended_event;
            /*0xf8*/ int self_suspended;
            /*0x100*/ nint thread_state;
            /*0x108*/ nint netcore0;
            /*0x110*/ nint netcore1;
            /*0x118*/ nint netcore2;
            /*0x120*/ nint last;

            /*0x7216d2c*/ InternalThread();
            /*0x7216c94*/ void Thread_free_internal();
            /*0x7216c98*/ void Finalize();
        }

        class Timer : System.MarshalByRefObject, System.IDisposable, System.IAsyncDisposable
        {
            /*0x18*/ System.Threading.TimerCallback callback;
            /*0x20*/ object state;
            /*0x28*/ long due_time_ms;
            /*0x30*/ long period_ms;
            /*0x38*/ long next_run;
            /*0x40*/ bool disposed;
            /*0x41*/ bool is_dead;
            /*0x42*/ bool is_added;

            static /*0x7216d3c*/ System.Threading.Timer.Scheduler get_scheduler();
            static /*0x721732c*/ long GetTimeMonotonic();
            /*0x7216dc4*/ Timer(System.Threading.TimerCallback callback, object state, int dueTime, int period);
            /*0x7216eb4*/ Timer(System.Threading.TimerCallback callback, object state, System.TimeSpan dueTime, System.TimeSpan period);
            /*0x7216e10*/ void Init(System.Threading.TimerCallback callback, object state, long dueTime, long period);
            /*0x7217150*/ bool Change(int dueTime, int period);
            /*0x7217170*/ bool Change(System.TimeSpan dueTime, System.TimeSpan period);
            /*0x7217228*/ void Dispose();
            /*0x7216f88*/ bool Change(long dueTime, long period, bool first);
            /*0x72174c0*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x7217578*/ void KeepRootedWhileScheduled();

            struct TimerComparer : System.Collections.IComparer, System.Collections.Generic.IComparer<System.Threading.Timer>
            {
                /*0x721757c*/ int System.Collections.IComparer.Compare(object x, object y);
                /*0x7217614*/ int Compare(System.Threading.Timer tx, System.Threading.Timer ty);
            }

            class Scheduler
            {
                static /*0x0*/ System.Threading.Timer.Scheduler instance;
                /*0x10*/ bool needReSort;
                /*0x18*/ System.Collections.Generic.List<System.Threading.Timer> list;
                /*0x20*/ long current_next_run;
                /*0x28*/ System.Threading.ManualResetEvent changed;

                static /*0x7217fc4*/ Scheduler();
                static /*0x7217c64*/ System.Threading.Timer.Scheduler get_Instance();
                static /*0x7217e8c*/ void TimerCB(object o);
                /*0x7217cbc*/ Scheduler();
                /*0x7217684*/ void InitScheduler();
                /*0x721778c*/ void WakeupScheduler();
                /*0x72177a8*/ void SchedulerThread();
                /*0x7217260*/ void Remove(System.Threading.Timer timer);
                /*0x7217330*/ void Change(System.Threading.Timer timer, long new_next_run);
                /*0x7217d94*/ void Add(System.Threading.Timer timer);
                /*0x7217d64*/ void InternalRemove(System.Threading.Timer timer);
                /*0x7217f04*/ void FireTimer(System.Threading.Timer timer);
                /*0x72178dc*/ int RunSchedulerLoop();
            }
        }

        class TimerCallback : System.MulticastDelegate
        {
            /*0x7218028*/ TimerCallback(object object, nint method);
            /*0x7218130*/ void Invoke(object state);
        }

        class Volatile
        {
            static /*0x7218144*/ bool Read(ref bool location);
            static /*0x721815c*/ void Write(ref bool location, bool value);
            static /*0x7218180*/ int Read(ref int location);
            static /*0x7218198*/ void Write(ref int location, int value);
            static /*0x3907c14*/ T Read<T>(ref T location);
            static /*0x3907c14*/ void Write<T>(ref T location, T value);
            static /*0x72181bc*/ long Read(ref long location);

            struct VolatileBoolean
            {
                /*0x10*/ bool Value;
            }

            struct VolatileInt32
            {
                /*0x10*/ int Value;
            }

            struct VolatileObject
            {
                /*0x10*/ object Value;
            }
        }

        namespace Tasks
        {
            class TaskCanceledException : System.OperationCanceledException
            {
                /*0x98*/ System.Threading.Tasks.Task _canceledTask;

                /*0x72181d4*/ TaskCanceledException();
                /*0x7218220*/ TaskCanceledException(System.Threading.Tasks.Task task);
                /*0x72182cc*/ TaskCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskCompletionSource<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> _task;

                /*0x380cb08*/ TaskCompletionSource();
                /*0x380cffc*/ TaskCompletionSource(System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x380d83c*/ TaskCompletionSource(object state);
                /*0x380d8b8*/ TaskCompletionSource(object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x380b9e8*/ System.Threading.Tasks.Task<TResult> get_Task();
                /*0x380cb08*/ void SpinUntilCompleted();
                /*0x380b2f0*/ bool TrySetException(System.Exception exception);
                /*0x3907c14*/ bool TrySetResult(TResult result);
                /*0x3907c14*/ void SetResult(TResult result);
                /*0x380b128*/ bool TrySetCanceled();
                /*0x3907c14*/ bool TrySetCanceled(System.Threading.CancellationToken cancellationToken);
            }

            class TaskSchedulerException : System.Exception
            {
                /*0x72182d4*/ TaskSchedulerException();
                /*0x7218344*/ TaskSchedulerException(System.Exception innerException);
                /*0x72183c4*/ TaskSchedulerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskToApm
            {
                static /*0x7218444*/ System.IAsyncResult Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state);
                static /*0x7218700*/ void End(System.IAsyncResult asyncResult);
                static /*0x3907c14*/ TResult End<TResult>(System.IAsyncResult asyncResult);
                static /*0x72185f0*/ void InvokeCallbackWhenTaskCompletes(System.Threading.Tasks.Task antecedent, System.AsyncCallback callback, System.IAsyncResult asyncResult);

                class TaskWrapperAsyncResult : System.IAsyncResult
                {
                    /*0x10*/ System.Threading.Tasks.Task Task;
                    /*0x18*/ object _state;
                    /*0x20*/ bool _completedSynchronously;

                    /*0x7218598*/ TaskWrapperAsyncResult(System.Threading.Tasks.Task task, object state, bool completedSynchronously);
                    /*0x721885c*/ object System.IAsyncResult.get_AsyncState();
                    /*0x7218864*/ bool System.IAsyncResult.get_CompletedSynchronously();
                    /*0x721886c*/ bool System.IAsyncResult.get_IsCompleted();
                    /*0x7218884*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                }

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ System.AsyncCallback callback;
                    /*0x18*/ System.IAsyncResult asyncResult;

                    /*0x7218820*/ <>c__DisplayClass3_0();
                    /*0x7218928*/ void <InvokeCallbackWhenTaskCompletes>b__0();
                }
            }

            struct ValueTask : System.IEquatable<System.Threading.Tasks.ValueTask>
            {
                static /*0x0*/ System.Threading.Tasks.Task s_canceledTask;
                /*0x10*/ object _obj;
                /*0x18*/ short _token;
                /*0x1a*/ bool _continueOnCapturedContext;

                static /*0x72193a4*/ ValueTask();
                static /*0x7218950*/ System.Threading.Tasks.Task get_CompletedTask();
                /*0x72189d8*/ ValueTask(System.Threading.Tasks.Task task);
                /*0x7218a1c*/ ValueTask(System.Threading.Tasks.Sources.IValueTaskSource source, short token);
                /*0x7218a64*/ ValueTask(object obj, short token, bool continueOnCapturedContext);
                /*0x7218a94*/ int GetHashCode();
                /*0x7218aac*/ bool Equals(object obj);
                /*0x7218b64*/ bool Equals(System.Threading.Tasks.ValueTask other);
                /*0x7218b88*/ System.Threading.Tasks.Task AsTask();
                /*0x7218c54*/ System.Threading.Tasks.Task GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource t);
                /*0x7219118*/ bool get_IsCompleted();
                /*0x721921c*/ void ThrowIfCompletedUnsuccessfully();
                /*0x7219320*/ System.Runtime.CompilerServices.ValueTaskAwaiter GetAwaiter();
                /*0x7219348*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);

                class ValueTaskSourceAsTask : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    static /*0x0*/ System.Action<object> s_completionAction;
                    /*0x58*/ System.Threading.Tasks.Sources.IValueTaskSource _source;
                    /*0x60*/ short _token;

                    static /*0x7219490*/ ValueTaskSourceAsTask();
                    /*0x7218fec*/ ValueTaskSourceAsTask(System.Threading.Tasks.Sources.IValueTaskSource source, short token);

                    class <>c
                    {
                        static /*0x0*/ System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<> <>9;

                        static /*0x7219560*/ <>c();
                        /*0x72195c8*/ <>c();
                        /*0x72195d0*/ void <.cctor>b__4_0(object state);
                    }
                }
            }

            struct ValueTask<TResult> : System.IEquatable<System.Threading.Tasks.ValueTask<TResult>>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_canceledTask;
                /*0x0*/ object _obj;
                /*0x0*/ TResult _result;
                /*0x0*/ short _token;
                /*0x0*/ bool _continueOnCapturedContext;

                /*0x3907c14*/ ValueTask(TResult result);
                /*0x380d83c*/ ValueTask(System.Threading.Tasks.Task<TResult> task);
                ValueTask(System.Threading.Tasks.Sources.IValueTaskSource<TResult> source, short token);
                /*0x3907c14*/ ValueTask(object obj, TResult result, short token, bool continueOnCapturedContext);
                /*0x380b6a0*/ int GetHashCode();
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x3907c14*/ bool Equals(System.Threading.Tasks.ValueTask<TResult> other);
                /*0x380b9e8*/ System.Threading.Tasks.Task<TResult> AsTask();
                /*0x380bb68*/ System.Threading.Tasks.Task<TResult> GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource<TResult> t);
                /*0x380b128*/ bool get_IsCompleted();
                /*0x380b128*/ bool get_IsCompletedSuccessfully();
                /*0x3907c14*/ TResult get_Result();
                /*0x3907c14*/ System.Runtime.CompilerServices.ValueTaskAwaiter<TResult> GetAwaiter();
                /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                /*0x380b9e8*/ string ToString();

                class ValueTaskSourceAsTask<TResult> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.Action<object> s_completionAction;
                    /*0x0*/ System.Threading.Tasks.Sources.IValueTaskSource<TResult> _source;
                    /*0x0*/ short _token;

                    static /*0x38358cc*/ ValueTaskSourceAsTask();
                    ValueTaskSourceAsTask(System.Threading.Tasks.Sources.IValueTaskSource<TResult> source, short token);

                    class <>c<TResult>
                    {
                        static /*0x0*/ System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c<TResult> <>9;

                        static /*0x38358cc*/ <>c();
                        /*0x380cb08*/ <>c();
                        /*0x380d83c*/ void <.cctor>b__4_0(object state);
                    }
                }
            }

            class TaskAwaiters
            {
                static /*0x72198f4*/ System.Threading.Tasks.ForceAsyncAwaiter ForceAsync(System.Threading.Tasks.Task task);
            }

            struct ForceAsyncAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task _task;

                /*0x7219914*/ ForceAsyncAwaiter(System.Threading.Tasks.Task task);
                /*0x721991c*/ System.Threading.Tasks.ForceAsyncAwaiter GetAwaiter();
                /*0x7219924*/ bool get_IsCompleted();
                /*0x721992c*/ void GetResult();
                /*0x721996c*/ void OnCompleted(System.Action action);
                /*0x72199c4*/ void UnsafeOnCompleted(System.Action action);
            }

            class DebuggerSupport
            {
                static /*0x0*/ System.Collections.Generic.LowLevelDictionary<int, System.Threading.Tasks.Task> s_activeTasks;
                static /*0x8*/ object s_activeTasksLock;

                static /*0x7219ea8*/ DebuggerSupport();
                static /*0x7219a1c*/ bool get_LoggingOn();
                static /*0x7219a24*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, string operationName, ulong relatedContext);
                static /*0x7219a28*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, Internal.Runtime.Augments.AsyncStatus status);
                static /*0x7219a2c*/ void TraceOperationRelation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalityRelation relation);
                static /*0x7219a30*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x7219a34*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x7219a38*/ void AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x7219acc*/ void AddToActiveTasksNonInlined(System.Threading.Tasks.Task task);
                static /*0x7219cb8*/ void RemoveFromActiveTasks(System.Threading.Tasks.Task task);
                static /*0x7219d4c*/ void RemoveFromActiveTasksNonInlined(System.Threading.Tasks.Task task);
            }

            class Task<TResult> : System.Threading.Tasks.Task
            {
                static /*0x0*/ System.Threading.Tasks.TaskFactory<TResult> s_defaultFactory;
                /*0x0*/ TResult m_result;

                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                static /*0x382dee4*/ System.Threading.Tasks.TaskFactory<TResult> get_Factory();
                /*0x380cb08*/ Task();
                /*0x380d8b8*/ Task(object state, System.Threading.Tasks.TaskCreationOptions options);
                /*0x3907c14*/ Task(TResult result);
                /*0x3907c14*/ Task(bool canceled, TResult result, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x3907c14*/ Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x3907c14*/ Task(System.Func<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3907c14*/ Task(System.Delegate valueSelector, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3907c14*/ bool TrySetResult(TResult result);
                /*0x3907c14*/ void DangerousSetResult(TResult result);
                /*0x3907c14*/ TResult get_Result();
                /*0x3907c14*/ TResult get_ResultOnSuccess();
                /*0x3907c14*/ TResult GetResultCore(bool waitCompletionNotification);
                /*0x380cb08*/ void InnerInvoke();
                /*0x3907c14*/ System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter();
                /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                /*0x380bb68*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction);
                /*0x380bcbc*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x380bc74*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x3907c14*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x380bd40*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3907c14*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x380bc74*/ System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x3907c14*/ System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
            }

            class SystemThreadingTasks_FutureDebugView<TResult>
            {
            }

            class TaskFactory<TResult>
            {
                /*0x0*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x0*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x0*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x0*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static void FromAsyncCoreLogic(System.IAsyncResult iar, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, System.Threading.Tasks.Task<TResult> promise, bool requiresSynchronization);
                static /*0x3830c6c*/ System.Threading.Tasks.Task<TResult> FromAsyncImpl(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> FromAsyncTrim<TInstance, TArgs>(TInstance thisRef, TArgs args, System.Func<TInstance, TArgs, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                /*0x380cb08*/ TaskFactory();
                /*0x3907c14*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x380bd40*/ System.Threading.Tasks.Task<TResult> FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state);
                /*0x3907c14*/ System.Threading.Tasks.Task<TResult> FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state);

                class FromAsyncTrimPromise`1<TResult, TInstance> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.AsyncCallback s_completeFromAsyncResult;
                    /*0x0*/ TInstance m_thisRef;
                    /*0x0*/ System.Func<TInstance, System.IAsyncResult, TResult> m_endMethod;

                    static /*0x38358cc*/ FromAsyncTrimPromise`1();
                    static /*0x3837da0*/ void CompleteFromAsyncResult(System.IAsyncResult asyncResult);
                    /*0x3907c14*/ FromAsyncTrimPromise`1(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                    /*0x3907c14*/ void Complete(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod, System.IAsyncResult asyncResult, bool requiresSynchronization);
                }

                class <>c__DisplayClass35_0<TResult>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    /*0x380cb08*/ <>c__DisplayClass35_0();
                    /*0x380d83c*/ void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass38_0`1<TResult, TArg1>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    /*0x380cb08*/ <>c__DisplayClass38_0`1();
                    /*0x380d83c*/ void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass41_0`2<TResult, TArg1, TArg2>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    /*0x380cb08*/ <>c__DisplayClass41_0`2();
                    /*0x380d83c*/ void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }
            }

            enum TaskStatus
            {
                Created = 0,
                WaitingForActivation = 1,
                WaitingToRun = 2,
                Running = 3,
                WaitingForChildrenToComplete = 4,
                RanToCompletion = 5,
                Canceled = 6,
                Faulted = 7,
            }

            class Task : System.Threading.IThreadPoolWorkItem, System.IAsyncResult, System.IDisposable
            {
                static /*0x0*/ int s_taskIdCounter;
                static /*0x8*/ object s_taskCompletionSentinel;
                static /*0x10*/ bool s_asyncDebuggingEnabled;
                static /*0x18*/ System.Action<object> s_taskCancelCallback;
                static /*0x20*/ System.Func<System.Threading.Tasks.Task.ContingentProperties> s_createContingentProperties;
                static /*0x28*/ System.Threading.Tasks.TaskFactory <Factory>k__BackingField;
                static /*0x30*/ System.Threading.Tasks.Task <CompletedTask>k__BackingField;
                static /*0x38*/ System.Predicate<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate;
                static /*0x40*/ System.Threading.ContextCallback s_ecCallback;
                static /*0x48*/ System.Predicate<object> s_IsTaskContinuationNullPredicate;
                static /*0x50*/ System.Collections.Generic.Dictionary<int, System.Threading.Tasks.Task> s_currentActiveTasks;
                static /*0x58*/ object s_activeTasksLock;
                [ThreadStatic] static System.Threading.Tasks.Task t_currentTask;
                [ThreadStatic] static System.Threading.Tasks.StackGuard t_stackGuard;
                /*0x10*/ int m_taskId;
                /*0x18*/ System.Delegate m_action;
                /*0x20*/ object m_stateObject;
                /*0x28*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;
                /*0x30*/ System.Threading.Tasks.Task m_parent;
                /*0x38*/ int m_stateFlags;
                /*0x40*/ object m_continuationObject;
                /*0x48*/ System.Threading.Tasks.Task.ContingentProperties m_contingentProperties;

                static /*0x722163c*/ Task();
                static /*0x721ab0c*/ void TaskCancelCallback(object o);
                static /*0x721b1f4*/ System.Threading.Tasks.TaskCreationOptions OptionsMethod(int flags);
                static /*0x721b43c*/ bool AnyTaskRequiresNotifyDebuggerOfWaitCompletion(System.Threading.Tasks.Task[] tasks);
                static /*0x721b524*/ System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x721b838*/ System.Threading.Tasks.Task get_InternalCurrent();
                static /*0x721b890*/ System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x721b92c*/ System.Threading.Tasks.StackGuard get_CurrentStackGuard();
                static /*0x721bda8*/ bool IsCompletedMethod(int flags);
                static /*0x721bf74*/ System.Threading.Tasks.TaskFactory get_Factory();
                static /*0x721bfcc*/ System.Threading.Tasks.Task get_CompletedTask();
                static /*0x721df6c*/ void ExecutionContextCallback(object obj);
                static /*0x721e4c8*/ System.Runtime.CompilerServices.YieldAwaitable Yield();
                static /*0x721f8d8*/ void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.Tasks.TaskCreationOptions creationOptions, ref System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> FromResult<TResult>(TResult result);
                static /*0x7218f80*/ System.Threading.Tasks.Task FromException(System.Exception exception);
                static /*0x382eaf0*/ System.Threading.Tasks.Task<TResult> FromException<TResult>(System.Exception exception);
                static /*0x72201d8*/ System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken);
                static /*0x721943c*/ System.Threading.Tasks.Task FromCanceled(System.Threading.CancellationToken cancellationToken);
                static /*0x382e7f0*/ System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.Threading.CancellationToken cancellationToken);
                static /*0x382e7f0*/ System.Threading.Tasks.Task<TResult> FromCanceled<TResult>(System.Threading.CancellationToken cancellationToken);
                static /*0x382eaf0*/ System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.OperationCanceledException exception);
                static /*0x72202b8*/ System.Threading.Tasks.Task Run(System.Action action);
                static /*0x382eaf0*/ System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<TResult> function);
                static /*0x7220388*/ System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function);
                static /*0x72203e0*/ System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken);
                static /*0x382eaf0*/ System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function);
                static /*0x382fdd8*/ System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);
                static /*0x7220614*/ System.Threading.Tasks.Task Delay(int millisecondsDelay);
                static /*0x722066c*/ System.Threading.Tasks.Task Delay(int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
                static /*0x382eaf0*/ System.Threading.Tasks.Task<TResult[]> WhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static /*0x382eaf0*/ System.Threading.Tasks.Task<TResult[]> InternalWhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static /*0x7220b44*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks);
                static /*0x7220f10*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
                static /*0x7221384*/ bool AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x72214e8*/ void RemoveFromActiveTasks(int taskId);
                /*0x7219f7c*/ Task(bool canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x721a070*/ Task();
                /*0x721a098*/ Task(object state, System.Threading.Tasks.TaskCreationOptions creationOptions, bool promiseStyle);
                /*0x721a368*/ Task(System.Delegate action, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x721a1c0*/ void TaskConstructorCore(System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x721a4c0*/ void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation);
                /*0x7219880*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord);
                /*0x7218f28*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x7219888*/ bool TrySetException(object exceptionObject);
                /*0x721a898*/ System.Threading.Tasks.TaskCreationOptions get_Options();
                /*0x721ae44*/ bool AtomicStateUpdate(int newBits, int illegalBits);
                /*0x721b1fc*/ bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags);
                /*0x721b2d4*/ void SetNotificationForWaitCompletion(bool enabled);
                /*0x721b3ac*/ bool NotifyDebuggerOfWaitCompletionIfNecessary();
                /*0x721b4d8*/ bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
                /*0x721b500*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                /*0x721b3fc*/ bool get_IsWaitNotificationEnabled();
                /*0x721b414*/ void NotifyDebuggerOfWaitCompletion();
                /*0x721b518*/ bool MarkStarted();
                /*0x721a44c*/ void AddNewChild();
                /*0x721aac4*/ void DisregardChild();
                /*0x7219c28*/ int get_Id();
                /*0x721b9ec*/ System.AggregateException get_Exception();
                /*0x721bb98*/ System.Threading.Tasks.TaskStatus get_Status();
                /*0x721bbf8*/ bool get_IsCanceled();
                /*0x721bc18*/ bool get_IsCancellationRequested();
                /*0x721a858*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection);
                /*0x721bca8*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection);
                /*0x72182a8*/ System.Threading.CancellationToken get_CancellationToken();
                /*0x721bd90*/ bool get_IsCancellationAcknowledged();
                /*0x7218534*/ bool get_IsCompleted();
                /*0x721bdb8*/ bool get_IsCompletedSuccessfully();
                /*0x721a438*/ System.Threading.Tasks.TaskCreationOptions get_CreationOptions();
                /*0x721bde0*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                /*0x721bf5c*/ object get_AsyncState();
                /*0x721bf64*/ bool System.IAsyncResult.get_CompletedSynchronously();
                /*0x721bf6c*/ System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler();
                /*0x721be64*/ System.Threading.ManualResetEventSlim get_CompletedEvent();
                /*0x721c024*/ bool get_ExceptionRecorded();
                /*0x721ba28*/ bool get_IsFaulted();
                /*0x721c094*/ System.Threading.ExecutionContext get_CapturedContext();
                /*0x721a7a8*/ void set_CapturedContext(System.Threading.ExecutionContext value);
                /*0x721c104*/ void Dispose();
                /*0x721c170*/ void Dispose(bool disposing);
                /*0x721b62c*/ void ScheduleAndStart(bool needsProtection);
                /*0x721b060*/ void AddException(object exceptionObject);
                /*0x721c2d4*/ void AddException(object exceptionObject, bool representsCancellation);
                /*0x721ba40*/ System.AggregateException GetExceptions(bool includeTaskCanceledExceptions);
                /*0x721c67c*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x721c820*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
                /*0x721c850*/ void ThrowIfExceptional(bool includeTaskCanceledExceptions);
                /*0x721c898*/ void UpdateExceptionObservedStatus();
                /*0x721c96c*/ bool get_IsExceptionObservedByParent();
                /*0x721c984*/ bool get_IsDelegateInvoked();
                /*0x721b068*/ void Finish(bool bUserDelegateExecuted);
                /*0x721c99c*/ void FinishStageTwo();
                /*0x721d1b0*/ void FinishStageThree();
                /*0x721d210*/ void ProcessChildCompletion(System.Threading.Tasks.Task childTask);
                /*0x721cc24*/ void AddExceptionsFromChildren();
                /*0x721daa0*/ void Execute();
                /*0x721dc54*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x721dc5c*/ bool ExecuteEntry(bool bPreventDoubleExecution);
                /*0x721dfe4*/ void InnerInvoke();
                /*0x721db4c*/ void HandleException(System.Exception unhandledException);
                /*0x7218800*/ System.Runtime.CompilerServices.TaskAwaiter GetAwaiter();
                /*0x7218828*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);
                /*0x721e0c4*/ void SetContinuationForAwait(System.Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext);
                /*0x721e4d0*/ void Wait();
                /*0x721e4dc*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x721ebd4*/ bool WrappedTryRunInline();
                /*0x721e62c*/ bool InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x721ef2c*/ bool SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x721f0d8*/ bool SpinWait(int millisecondsTimeout);
                /*0x721a8f4*/ bool InternalCancel(bool bCancelNonExecutingOnly);
                /*0x721f2e8*/ void RecordInternalCancellationRequest();
                /*0x721f330*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord);
                /*0x721af04*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x721af40*/ void CancellationCleanupLogic();
                /*0x721e098*/ void SetCancellationAcknowledged();
                /*0x721d3c4*/ void FinishContinuations();
                /*0x721f5a4*/ void LogFinishCompletionNotification();
                /*0x721f5f8*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction);
                /*0x721f860*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x721f70c*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x721fc10*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x721fc24*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x721fab4*/ void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options);
                /*0x721fec8*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action);
                /*0x721f214*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, bool addBeforeOthers);
                /*0x721fed0*/ bool AddTaskContinuationComplex(object tc, bool addBeforeOthers);
                /*0x721e3d4*/ bool AddTaskContinuation(object tc, bool addBeforeOthers);
                /*0x721abfc*/ void RemoveContinuation(object continuationObject);
                /*0x722162c*/ void MarkAborted(System.Threading.ThreadAbortException e);
                /*0x721dd78*/ void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot);

                class ContingentProperties
                {
                    /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                    /*0x18*/ System.Threading.ManualResetEventSlim m_completionEvent;
                    /*0x20*/ System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder;
                    /*0x28*/ System.Threading.CancellationToken m_cancellationToken;
                    /*0x30*/ object m_cancellationRegistration;
                    /*0x38*/ int m_internalCancellationRequested;
                    /*0x3c*/ int m_completionCountdown;
                    /*0x40*/ System.Collections.Generic.LowLevelListWithIList<System.Threading.Tasks.Task> m_exceptionalChildren;

                    /*0x721a04c*/ ContingentProperties();
                    /*0x721d074*/ void SetCompleted();
                    /*0x721d09c*/ void UnregisterCancellationCallback();
                }

                class SetOnInvokeMres : System.Threading.ManualResetEventSlim, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x721f1b4*/ SetOnInvokeMres();
                    /*0x7221988*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x7221990*/ bool get_InvokeMayRunArbitraryCode();
                }

                class DelayPromise : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    /*0x58*/ System.Threading.CancellationToken Token;
                    /*0x60*/ System.Threading.CancellationTokenRegistration Registration;
                    /*0x78*/ System.Threading.Timer Timer;

                    /*0x7220a24*/ DelayPromise(System.Threading.CancellationToken token);
                    /*0x7221998*/ void Complete();
                }

                class WhenAllPromise<T> : System.Threading.Tasks.Task<T[]>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x0*/ System.Threading.Tasks.Task<T> m_tasks;
                    /*0x0*/ int m_count;

                    /*0x380d83c*/ WhenAllPromise(System.Threading.Tasks.Task<T> tasks);
                    /*0x380d83c*/ void Invoke(System.Threading.Tasks.Task ignored);
                    /*0x380b128*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                    /*0x380b128*/ bool get_InvokeMayRunArbitraryCode();
                }

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.Task.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__247_0;
                    static /*0x10*/ System.Threading.TimerCallback <>9__247_1;

                    static /*0x7221af8*/ <>c();
                    /*0x7221b60*/ <>c();
                    /*0x7221b68*/ void <Delay>b__247_0(object state);
                    /*0x7221bc8*/ void <Delay>b__247_1(object state);
                    /*0x7221c28*/ System.Threading.Tasks.Task.ContingentProperties <.cctor>b__271_0();
                    /*0x7221c8c*/ bool <.cctor>b__271_1(System.Threading.Tasks.Task t);
                    /*0x7221cac*/ bool <.cctor>b__271_2(object tc);
                }
            }

            class CompletionActionInvoker : System.Threading.IThreadPoolWorkItem
            {
                /*0x10*/ System.Threading.Tasks.ITaskCompletionAction m_action;
                /*0x18*/ System.Threading.Tasks.Task m_completingTask;

                /*0x721f560*/ CompletionActionInvoker(System.Threading.Tasks.ITaskCompletionAction action, System.Threading.Tasks.Task completingTask);
                /*0x7221cb8*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x7221d60*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class SystemThreadingTasks_TaskDebugView
            {
            }

            enum TaskCreationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                RunContinuationsAsynchronously = 64,
            }

            enum InternalTaskOptions
            {
                None = 0,
                InternalOptionsMask = 65280,
                ContinuationTask = 512,
                PromiseTask = 1024,
                LazyCancellation = 4096,
                QueuedByRuntime = 8192,
                DoNotDispose = 16384,
            }

            enum TaskContinuationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                LazyCancellation = 32,
                RunContinuationsAsynchronously = 64,
                NotOnRanToCompletion = 65536,
                NotOnFaulted = 131072,
                NotOnCanceled = 262144,
                OnlyOnRanToCompletion = 393216,
                OnlyOnFaulted = 327680,
                OnlyOnCanceled = 196608,
                ExecuteSynchronously = 524288,
            }

            class StackGuard
            {
                /*0x10*/ int m_inliningDepth;

                /*0x721b9e4*/ StackGuard();
                /*0x7221d64*/ bool TryBeginInliningScope();
                /*0x7221da4*/ void EndInliningScope();
            }

            struct VoidTaskResult
            {
            }

            interface ITaskCompletionAction
            {
                /*0x380d83c*/ void Invoke(System.Threading.Tasks.Task completingTask);
                /*0x380b128*/ bool get_InvokeMayRunArbitraryCode();
            }

            class UnwrapPromise<TResult> : System.Threading.Tasks.Task<TResult>, System.Threading.Tasks.ITaskCompletionAction
            {
                /*0x0*/ byte _state;
                /*0x0*/ bool _lookForOce;

                UnwrapPromise(System.Threading.Tasks.Task outerTask, bool lookForOce);
                /*0x380d83c*/ void Invoke(System.Threading.Tasks.Task completingTask);
                /*0x380d83c*/ void InvokeCore(System.Threading.Tasks.Task completingTask);
                /*0x380d83c*/ void InvokeCoreAsync(System.Threading.Tasks.Task completingTask);
                /*0x380d83c*/ void ProcessCompletedOuterTask(System.Threading.Tasks.Task task);
                bool TrySetFromTask(System.Threading.Tasks.Task task, bool lookForOce);
                /*0x380d83c*/ void ProcessInnerTask(System.Threading.Tasks.Task task);
                /*0x380b128*/ bool get_InvokeMayRunArbitraryCode();

                class <>c<TResult>
                {
                    static /*0x0*/ System.Threading.Tasks.UnwrapPromise.<>c<TResult> <>9;
                    static /*0x0*/ System.Threading.WaitCallback <>9__8_0;

                    static /*0x38358cc*/ <>c();
                    /*0x380cb08*/ <>c();
                    /*0x380d83c*/ void <InvokeCoreAsync>b__8_0(object state);
                }
            }

            class ContinuationTaskFromTask : System.Threading.Tasks.Task
            {
                /*0x50*/ System.Threading.Tasks.Task m_antecedent;

                /*0x721f9f8*/ ContinuationTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x7221db8*/ void InnerInvoke();
            }

            class ContinuationTaskFromResultTask<TAntecedentResult> : System.Threading.Tasks.Task
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                /*0x3907c14*/ ContinuationTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x380cb08*/ void InnerInvoke();
            }

            class ContinuationResultTaskFromResultTask<TAntecedentResult, TResult> : System.Threading.Tasks.Task<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                /*0x3907c14*/ ContinuationResultTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x380cb08*/ void InnerInvoke();
            }

            class TaskContinuation
            {
                static /*0x7221e94*/ void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, bool needsProtection);
                /*0x7221fd4*/ TaskContinuation();
                void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class StandardTaskContinuation : System.Threading.Tasks.TaskContinuation
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Threading.Tasks.TaskContinuationOptions m_options;
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;

                /*0x721fd84*/ StandardTaskContinuation(System.Threading.Tasks.Task task, System.Threading.Tasks.TaskContinuationOptions options, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x7221fdc*/ void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class SynchronizationContextAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                static /*0x8*/ System.Threading.ContextCallback s_postActionCallback;
                /*0x20*/ System.Threading.SynchronizationContext m_syncContext;

                static /*0x7222688*/ SynchronizationContextAwaitTaskContinuation();
                static /*0x722252c*/ void PostAction(object state);
                static /*0x72225c0*/ System.Threading.ContextCallback GetPostActionCallback();
                /*0x721e2c0*/ SynchronizationContextAwaitTaskContinuation(System.Threading.SynchronizationContext context, System.Action action, bool flowExecutionContext);
                /*0x7222218*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.<> <>9;

                    static /*0x7222758*/ <>c();
                    /*0x72227c0*/ <>c();
                    /*0x72227c8*/ void <.cctor>b__7_0(object state);
                }
            }

            class TaskSchedulerAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_scheduler;

                /*0x721e39c*/ TaskSchedulerAwaitTaskContinuation(System.Threading.Tasks.TaskScheduler scheduler, System.Action action, bool flowExecutionContext);
                /*0x7222834*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__2_0;

                    static /*0x7222c24*/ <>c();
                    /*0x7222c8c*/ <>c();
                    /*0x7222c94*/ void <Run>b__2_0(object state);
                }
            }

            class AwaitTaskContinuation : System.Threading.Tasks.TaskContinuation, System.Threading.IThreadPoolWorkItem
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeActionCallback;
                /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                /*0x18*/ System.Action m_action;

                static /*0x7222ddc*/ bool get_IsValidLocationForInlining();
                static /*0x7223038*/ void InvokeAction(object state);
                static /*0x72230a4*/ System.Threading.ContextCallback GetInvokeActionCallback();
                static /*0x721f3d4*/ void RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask);
                static /*0x721e468*/ void UnsafeScheduleAction(System.Action action);
                static /*0x7222d84*/ void ThrowAsyncIfNecessary(System.Exception exc);
                /*0x7222174*/ AwaitTaskContinuation(System.Action action, bool flowExecutionContext);
                /*0x7222b9c*/ System.Threading.Tasks.Task CreateTask(System.Action<object> action, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x7222a78*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);
                /*0x7222f04*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x722238c*/ void RunCallback(System.Threading.ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask);
                /*0x7223154*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class TaskExceptionHolder
            {
                static /*0x0*/ bool s_failFastOnUnobservedException;
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Collections.Generic.LowLevelListWithIList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions;
                /*0x20*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException;
                /*0x28*/ bool m_isHandled;

                static /*0x7223b70*/ TaskExceptionHolder();
                static /*0x7223158*/ bool ShouldFailFastOnUnobservedException();
                /*0x721c474*/ TaskExceptionHolder(System.Threading.Tasks.Task task);
                /*0x7223160*/ void Finalize();
                /*0x721c078*/ bool get_ContainsFaultList();
                /*0x721c4a4*/ void Add(object exceptionObject, bool representsCancellation);
                /*0x7223514*/ void SetCancellationException(object exceptionObject);
                /*0x72235d8*/ void AddFaultException(object exceptionObject);
                /*0x7223af8*/ void MarkAsUnhandled();
                /*0x721c258*/ void MarkAsHandled(bool calledFromFinalizer);
                /*0x721c4b0*/ System.AggregateException CreateExceptionObject(bool calledFromFinalizer, System.Exception includeThisException);
                /*0x721c794*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x7223b68*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
            }

            class TaskFactory
            {
                /*0x10*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x18*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x20*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x24*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static /*0x7223d20*/ void CheckCreationOptions(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x7223e98*/ void CheckFromAsyncOptions(System.Threading.Tasks.TaskCreationOptions creationOptions, bool hasBeginMethod);
                static /*0x7220cd8*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAnyLogic(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                static /*0x7223c24*/ void CheckMultiTaskContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x7221974*/ TaskFactory();
                /*0x7223bb8*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x7223d7c*/ System.Threading.Tasks.Task StartNew(System.Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x7223e08*/ System.Threading.Tasks.Task StartNew(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3907c14*/ System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3907c14*/ System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x3907c14*/ System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state);
                /*0x3907c14*/ System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x3907c14*/ System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
                /*0x3907c14*/ System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);

                class CompleteOnInvokePromise : System.Threading.Tasks.Task<System.Threading.Tasks.Task>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x58*/ System.Collections.Generic.IList<System.Threading.Tasks.Task> _tasks;

                    /*0x7223f80*/ CompleteOnInvokePromise(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                    /*0x72240a0*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x72242ec*/ bool get_InvokeMayRunArbitraryCode();
                }
            }

            class TaskScheduler
            {
                static /*0x0*/ System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler;
                static /*0x8*/ int s_taskSchedulerIdCounter;
                static /*0x10*/ System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException;
                static /*0x18*/ System.Threading.Lock _unobservedTaskExceptionLockObject;
                /*0x10*/ int m_taskSchedulerId;

                static /*0x72244e8*/ TaskScheduler();
                static /*0x7224310*/ System.Threading.Tasks.TaskScheduler get_Default();
                static /*0x721f66c*/ System.Threading.Tasks.TaskScheduler get_Current();
                static /*0x721e2f8*/ System.Threading.Tasks.TaskScheduler get_InternalCurrent();
                static /*0x7224368*/ System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext();
                static /*0x72233cc*/ void PublishUnobservedTaskException(object sender, System.Threading.Tasks.UnobservedTaskExceptionEventArgs ueea);
                /*0x7224308*/ TaskScheduler();
                /*0x380d83c*/ void QueueTask(System.Threading.Tasks.Task task);
                bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x721eca4*/ bool TryRunInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x72242f4*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x72242fc*/ void NotifyWorkItemProgress();
                /*0x7224300*/ bool get_RequiresAtomicStartTransition();
                /*0x721ee98*/ int get_Id();
                /*0x7224474*/ bool TryExecuteTask(System.Threading.Tasks.Task task);

                class SystemThreadingTasks_TaskSchedulerDebugView
                {
                }
            }

            class SynchronizationContextTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                /*0x18*/ System.Threading.SynchronizationContext m_synchronizationContext;

                static /*0x72246c8*/ SynchronizationContextTaskScheduler();
                /*0x72243b8*/ SynchronizationContextTaskScheduler();
                /*0x72245fc*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x7224680*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextTaskScheduler.<> <>9;

                    static /*0x7224798*/ <>c();
                    /*0x7224800*/ <>c();
                    /*0x7224808*/ void <.cctor>b__8_0(object s);
                }
            }

            class UnobservedTaskExceptionEventArgs : System.EventArgs
            {
                /*0x10*/ System.AggregateException m_exception;
                /*0x18*/ bool m_observed;

                /*0x7223358*/ UnobservedTaskExceptionEventArgs(System.AggregateException exception);
            }

            class ThreadPoolTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.ParameterizedThreadStart s_longRunningThreadWork;

                static /*0x7224b54*/ ThreadPoolTaskScheduler();
                /*0x72245a4*/ ThreadPoolTaskScheduler();
                /*0x722488c*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x7224a54*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x7224b34*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x7224b3c*/ void NotifyWorkItemProgress();
                /*0x7224b4c*/ bool get_RequiresAtomicStartTransition();

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.ThreadPoolTaskScheduler.<> <>9;

                    static /*0x7224c24*/ <>c();
                    /*0x7224c8c*/ <>c();
                    /*0x7224c94*/ void <.cctor>b__10_0(object s);
                }
            }

            enum CausalityTraceLevel
            {
                Required = 0,
                Important = 1,
                Verbose = 2,
            }

            enum AsyncCausalityStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            enum CausalityRelation
            {
                AssignDelegate = 0,
                Join = 1,
                Choice = 2,
                Cancel = 3,
                Error = 4,
            }

            enum CausalitySynchronousWork
            {
                CompletionNotification = 0,
                ProgressNotification = 1,
                Execution = 2,
            }

            class AsyncCausalityTracer
            {
                static /*0x7221630*/ bool get_LoggingOn();
                static /*0x7224d18*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext);
                static /*0x7224d1c*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.AsyncCausalityStatus status);
                static /*0x7224d20*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x7221638*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
            }

            class TaskAsyncEnumerableExtensions
            {
                static /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable<T> WithCancellation<T>(System.Collections.Generic.IAsyncEnumerable<T> source, System.Threading.CancellationToken cancellationToken);
            }

            namespace Sources
            {
                enum ValueTaskSourceOnCompletedFlags
                {
                    None = 0,
                    UseSchedulingContext = 1,
                    FlowExecutionContext = 2,
                }

                enum ValueTaskSourceStatus
                {
                    Pending = 0,
                    Succeeded = 1,
                    Faulted = 2,
                    Canceled = 3,
                }

                interface IValueTaskSource
                {
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    void GetResult(short token);
                }

                interface IValueTaskSource<TResult>
                {
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    /*0x3907c14*/ TResult GetResult(short token);
                }

                struct ManualResetValueTaskSourceCore<TResult>
                {
                    /*0x0*/ System.Action<object> _continuation;
                    /*0x0*/ object _continuationState;
                    /*0x0*/ System.Threading.ExecutionContext _executionContext;
                    /*0x0*/ object _capturedContext;
                    /*0x0*/ bool _completed;
                    /*0x0*/ TResult _result;
                    /*0x0*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _error;
                    /*0x0*/ short _version;
                    /*0x0*/ bool <RunContinuationsAsynchronously>k__BackingField;

                    /*0x380b128*/ bool get_RunContinuationsAsynchronously();
                    /*0x380cb08*/ void Reset();
                    /*0x3907c14*/ void SetResult(TResult result);
                    /*0x380d83c*/ void SetException(System.Exception error);
                    /*0x380b674*/ short get_Version();
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    /*0x3907c14*/ TResult GetResult(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    void ValidateToken(short token);
                    /*0x380cb08*/ void SignalCompletion();
                    /*0x380cb08*/ void InvokeContinuation();

                    class <>c<TResult>
                    {
                        static /*0x0*/ System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore.<>c<TResult> <>9;
                        static /*0x0*/ System.Threading.SendOrPostCallback <>9__19_0;
                        static /*0x0*/ System.Threading.ContextCallback<System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore<TResult>> <>9__21_0;
                        static /*0x0*/ System.Threading.SendOrPostCallback <>9__22_0;

                        static /*0x38358cc*/ <>c();
                        /*0x380cb08*/ <>c();
                        /*0x380d83c*/ void <OnCompleted>b__19_0(object s);
                        /*0x380d83c*/ void <SignalCompletion>b__21_0(ref System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore<TResult> s);
                        /*0x380d83c*/ void <InvokeContinuation>b__22_0(object s);
                    }
                }

                class ManualResetValueTaskSourceCoreShared
                {
                    static /*0x0*/ System.Action<object> s_sentinel;

                    static /*0x7224d98*/ ManualResetValueTaskSourceCoreShared();
                    static /*0x7224d24*/ void ThrowInvalidOperationException();
                    static /*0x7224d5c*/ void CompletionSentinel(object _);
                }
            }
        }
    }

    namespace Text
    {
        class ASCIIEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.ASCIIEncoding.ASCIIEncodingSealed s_default;

            static /*0x7226d70*/ ASCIIEncoding();
            /*0x7224e38*/ ASCIIEncoding();
            /*0x7224e44*/ void SetDefaultFallbacks();
            /*0x7224f10*/ int GetByteCount(char[] chars, int index, int count);
            /*0x7225088*/ int GetByteCount(string chars);
            /*0x7225114*/ int GetByteCount(char* chars, int count);
            /*0x72251e4*/ int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x722542c*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7225690*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x7225788*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x7225900*/ int GetCharCount(byte* bytes, int count);
            /*0x72259d0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7225c34*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x7225d2c*/ string GetString(byte[] bytes, int byteIndex, int byteCount);
            /*0x7225eb0*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x7226200*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x7226624*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x72267c8*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x7226a60*/ int GetMaxByteCount(int charCount);
            /*0x7226b60*/ int GetMaxCharCount(int byteCount);
            /*0x7226c5c*/ System.Text.Decoder GetDecoder();
            /*0x7226d14*/ System.Text.Encoder GetEncoder();

            class ASCIIEncodingSealed : System.Text.ASCIIEncoding
            {
                /*0x7226de8*/ ASCIIEncodingSealed();
            }
        }

        class Decoder
        {
            /*0x10*/ System.Text.DecoderFallback _fallback;
            /*0x18*/ System.Text.DecoderFallbackBuffer _fallbackBuffer;

            /*0x7226e44*/ Decoder();
            /*0x7226e4c*/ System.Text.DecoderFallback get_Fallback();
            /*0x7226774*/ System.Text.DecoderFallbackBuffer get_FallbackBuffer();
            /*0x7226e54*/ bool get_InternalHasFallbackBuffer();
            /*0x7226e64*/ void Reset();
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x7226f7c*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x7226f88*/ int GetCharCount(byte* bytes, int count, bool flush);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x72270e4*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x72270f0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x7227300*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars, bool flush);
            /*0x72273e0*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x72276bc*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
        }

        class InternalDecoderBestFitFallback : System.Text.DecoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;
            /*0x20*/ char _cReplacement;

            /*0x72278dc*/ InternalDecoderBestFitFallback(System.Text.Encoding encoding);
            /*0x722791c*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x7227abc*/ int get_MaxCharCount();
            /*0x7227ac4*/ bool Equals(object value);
            /*0x7227b6c*/ int GetHashCode();
        }

        class InternalDecoderBestFitFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x20*/ char _cBestFit;
            /*0x24*/ int _iCount;
            /*0x28*/ int _iSize;
            /*0x30*/ System.Text.InternalDecoderBestFitFallback _oFallback;

            static /*0x7227b90*/ object get_InternalSyncObject();
            /*0x7227974*/ InternalDecoderBestFitFallbackBuffer(System.Text.InternalDecoderBestFitFallback fallback);
            /*0x7227c2c*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x7227dac*/ char GetNextChar();
            /*0x7227dec*/ int get_Remaining();
            /*0x7227df8*/ void Reset();
            /*0x7227e08*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x7227c6c*/ char TryBestFit(byte[] bytesCheck);
        }

        class DecoderExceptionFallback : System.Text.DecoderFallback
        {
            /*0x7227e10*/ DecoderExceptionFallback();
            /*0x7227e18*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x7227e74*/ int get_MaxCharCount();
            /*0x7227e7c*/ bool Equals(object value);
            /*0x7227ed8*/ int GetHashCode();
        }

        class DecoderExceptionFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x7227e6c*/ DecoderExceptionFallbackBuffer();
            /*0x7227ee0*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x72280b4*/ char GetNextChar();
            /*0x72280bc*/ int get_Remaining();
            /*0x7227ee8*/ void Throw(byte[] bytesUnknown, int index);
        }

        class DecoderFallbackException : System.ArgumentException
        {
            /*0x98*/ byte[] _bytesUnknown;
            /*0xa0*/ int _index;

            /*0x7228100*/ DecoderFallbackException();
            /*0x72280c4*/ DecoderFallbackException(string message, byte[] bytesUnknown, int index);
            /*0x722815c*/ DecoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class DecoderFallback
        {
            static /*0x0*/ System.Text.DecoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.DecoderFallback s_exceptionFallback;

            static /*0x7224e7c*/ System.Text.DecoderFallback get_ReplacementFallback();
            static /*0x72281ac*/ System.Text.DecoderFallback get_ExceptionFallback();
            /*0x7227914*/ DecoderFallback();
            /*0x380b9e8*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x380b6a0*/ int get_MaxCharCount();
        }

        class DecoderFallbackBuffer
        {
            /*0x10*/ byte* byteStart;
            /*0x18*/ char* charEnd;

            /*0x7227c24*/ DecoderFallbackBuffer();
            bool Fallback(byte[] bytesUnknown, int index);
            /*0x380c774*/ char GetNextChar();
            /*0x380b6a0*/ int get_Remaining();
            /*0x7228248*/ void Reset();
            /*0x7226a50*/ void InternalReset();
            /*0x72267c0*/ void InternalInitialize(byte* byteStart, char* charEnd);
            /*0x7228270*/ bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars);
            /*0x72283cc*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x7228508*/ void ThrowLastBytesRecursive(byte[] bytesUnknown);
        }

        class DecoderNLS : System.Text.Decoder
        {
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ bool _mustFlush;
            /*0x29*/ bool _throwOnOverflow;
            /*0x2c*/ int _bytesUsed;

            /*0x7226cb4*/ DecoderNLS(System.Text.Encoding encoding);
            /*0x72286f4*/ void Reset();
            /*0x722870c*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x722871c*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x72288e8*/ int GetCharCount(byte* bytes, int count, bool flush);
            /*0x72289d8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x72289e8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x7228c68*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x7228d80*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x7229038*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x72291f0*/ bool get_MustFlush();
            /*0x72291f8*/ bool get_HasState();
            /*0x7229200*/ void ClearMustFlush();
        }

        class DecoderReplacementFallback : System.Text.DecoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0x7228164*/ DecoderReplacementFallback();
            /*0x7229394*/ DecoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7229208*/ DecoderReplacementFallback(string replacement);
            /*0x72294b8*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7229514*/ string get_DefaultString();
            /*0x722951c*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x72295b4*/ int get_MaxCharCount();
            /*0x72295d0*/ bool Equals(object value);
            /*0x7229650*/ int GetHashCode();
        }

        class DecoderReplacementFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x20*/ string _strDefault;
            /*0x28*/ int _fallbackCount;
            /*0x2c*/ int _fallbackIndex;

            /*0x7229574*/ DecoderReplacementFallbackBuffer(System.Text.DecoderReplacementFallback fallback);
            /*0x7229670*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x72296b0*/ char GetNextChar();
            /*0x7229700*/ int get_Remaining();
            /*0x722970c*/ void Reset();
            /*0x722971c*/ int InternalFallback(byte[] bytes, byte* pBytes);
        }

        class Encoder
        {
            /*0x10*/ System.Text.EncoderFallback _fallback;
            /*0x18*/ System.Text.EncoderFallbackBuffer _fallbackBuffer;

            /*0x7229738*/ Encoder();
            /*0x7229740*/ System.Text.EncoderFallback get_Fallback();
            /*0x72261b4*/ System.Text.EncoderFallbackBuffer get_FallbackBuffer();
            /*0x72261a4*/ bool get_InternalHasFallbackBuffer();
            /*0x7229748*/ void Reset();
            int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x722982c*/ int GetByteCount(char* chars, int count, bool flush);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x7229990*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x7229ba0*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x7229e7c*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
        }

        class InternalEncoderBestFitFallback : System.Text.EncoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;

            /*0x722a09c*/ InternalEncoderBestFitFallback(System.Text.Encoding encoding);
            /*0x722a0cc*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x722a26c*/ int get_MaxCharCount();
            /*0x722a274*/ bool Equals(object value);
            /*0x722a338*/ int GetHashCode();
        }

        class InternalEncoderBestFitFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x30*/ char _cBestFit;
            /*0x38*/ System.Text.InternalEncoderBestFitFallback _oFallback;
            /*0x40*/ int _iCount;
            /*0x44*/ int _iSize;

            static /*0x722a35c*/ object get_InternalSyncObject();
            /*0x722a124*/ InternalEncoderBestFitFallbackBuffer(System.Text.InternalEncoderBestFitFallback fallback);
            /*0x722a3f0*/ bool Fallback(char charUnknown, int index);
            /*0x722a4f4*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x722a688*/ char GetNextChar();
            /*0x722a6c8*/ bool MovePrevious();
            /*0x722a6f4*/ int get_Remaining();
            /*0x722a700*/ void Reset();
            /*0x722a420*/ char TryBestFit(char cUnknown);
        }

        class EncoderExceptionFallback : System.Text.EncoderFallback
        {
            /*0x70270d8*/ EncoderExceptionFallback();
            /*0x70270e8*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x7027144*/ int get_MaxCharCount();
            /*0x702714c*/ bool Equals(object value);
            /*0x70271a8*/ int GetHashCode();
        }

        class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x702713c*/ EncoderExceptionFallbackBuffer();
            /*0x70271b8*/ bool Fallback(char charUnknown, int index);
            /*0x702728c*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x702763c*/ char GetNextChar();
            /*0x7027644*/ bool MovePrevious();
            /*0x702764c*/ int get_Remaining();
        }

        class EncoderFallbackException : System.ArgumentException
        {
            /*0x98*/ char _charUnknown;
            /*0x9a*/ char _charUnknownHigh;
            /*0x9c*/ char _charUnknownLow;
            /*0xa0*/ int _index;

            /*0x7027654*/ EncoderFallbackException();
            /*0x702725c*/ EncoderFallbackException(string message, char charUnknown, int index);
            /*0x70274a0*/ EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index);
            /*0x70276b0*/ EncoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class EncoderFallback
        {
            static /*0x0*/ System.Text.EncoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.EncoderFallback s_exceptionFallback;

            static /*0x70276b8*/ System.Text.EncoderFallback get_ReplacementFallback();
            static /*0x7027790*/ System.Text.EncoderFallback get_ExceptionFallback();
            /*0x70270e0*/ EncoderFallback();
            /*0x380b9e8*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x380b6a0*/ int get_MaxCharCount();
        }

        class EncoderFallbackBuffer
        {
            /*0x10*/ char* charStart;
            /*0x18*/ char* charEnd;
            /*0x20*/ System.Text.EncoderNLS encoder;
            /*0x28*/ bool setEncoder;
            /*0x29*/ bool bUsedEncoder;
            /*0x2a*/ bool bFallingBack;
            /*0x2c*/ int iRecursionCount;

            /*0x70271b0*/ EncoderFallbackBuffer();
            bool Fallback(char charUnknown, int index);
            bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x380c774*/ char GetNextChar();
            /*0x380b128*/ bool MovePrevious();
            /*0x380b6a0*/ int get_Remaining();
            /*0x7027828*/ void Reset();
            /*0x7027850*/ void InternalReset();
            /*0x7027868*/ void InternalInitialize(char* charStart, char* charEnd, System.Text.EncoderNLS encoder, bool setEncoder);
            /*0x70278a4*/ char InternalGetNextChar();
            /*0x70278d4*/ bool InternalFallback(char ch, ref char* chars);
            /*0x7027a5c*/ void ThrowLastCharRecursive(int charRecursive);
        }

        class EncoderNLS : System.Text.Encoder
        {
            /*0x20*/ char _charLeftOver;
            /*0x28*/ System.Text.Encoding _encoding;
            /*0x30*/ bool _mustFlush;
            /*0x31*/ bool _throwOnOverflow;
            /*0x34*/ int _charsUsed;

            /*0x7027ae8*/ EncoderNLS(System.Text.Encoding encoding);
            /*0x7027b48*/ void Reset();
            /*0x7027b68*/ int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x7027d34*/ int GetByteCount(char* chars, int count, bool flush);
            /*0x7027e24*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x70280a4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x70281bc*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x7028470*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x7028624*/ System.Text.Encoding get_Encoding();
            /*0x702862c*/ bool get_MustFlush();
            /*0x7028634*/ bool get_HasState();
            /*0x7028644*/ void ClearMustFlush();
        }

        class EncoderReplacementFallback : System.Text.EncoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0x7027748*/ EncoderReplacementFallback();
            /*0x70287d8*/ EncoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x702864c*/ EncoderReplacementFallback(string replacement);
            /*0x70288fc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7028958*/ string get_DefaultString();
            /*0x7028960*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x7028a08*/ int get_MaxCharCount();
            /*0x7028a24*/ bool Equals(object value);
            /*0x7028aa4*/ int GetHashCode();
        }

        class EncoderReplacementFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x30*/ string _strDefault;
            /*0x38*/ int _fallbackCount;
            /*0x3c*/ int _fallbackIndex;

            /*0x70289b8*/ EncoderReplacementFallbackBuffer(System.Text.EncoderReplacementFallback fallback);
            /*0x7028ac4*/ bool Fallback(char charUnknown, int index);
            /*0x7028bf0*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x7028dbc*/ char GetNextChar();
            /*0x7028e0c*/ bool MovePrevious();
            /*0x7028e3c*/ int get_Remaining();
            /*0x7028e48*/ void Reset();
        }

        class EncodingNLS : System.Text.Encoding
        {
            /*0x7028e5c*/ EncodingNLS(int codePage);
            /*0x7028e64*/ int GetByteCount(char[] chars, int index, int count);
            /*0x7028fdc*/ int GetByteCount(string s);
            /*0x7029068*/ int GetByteCount(char* chars, int count);
            /*0x7029138*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7029380*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x70295e4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x70296dc*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x7029854*/ int GetCharCount(byte* bytes, int count);
            /*0x7029924*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7029b88*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x7029c80*/ string GetString(byte[] bytes, int index, int count);
            /*0x7029e04*/ System.Text.Decoder GetDecoder();
            /*0x7029e60*/ System.Text.Encoder GetEncoder();
        }

        class EncodingProvider
        {
            static /*0x0*/ object s_InternalSyncObject;
            static /*0x8*/ System.Text.EncodingProvider[] s_providers;

            static /*0x702a260*/ EncodingProvider();
            static /*0x7029fb4*/ System.Text.Encoding GetEncodingFromProvider(int codepage);
            static /*0x702a090*/ System.Text.Encoding GetEncodingFromProvider(string encodingName);
            static /*0x702a16c*/ System.Text.Encoding GetEncodingFromProvider(int codepage, System.Text.EncoderFallback enc, System.Text.DecoderFallback dec);
            /*0x380bb68*/ System.Text.Encoding GetEncoding(string name);
            /*0x380ba90*/ System.Text.Encoding GetEncoding(int codepage);
            /*0x7029eb8*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
        }

        class Latin1Encoding : System.Text.EncodingNLS, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Text.Latin1Encoding s_default;
            static /*0x8*/ char[] arrayCharBestFit;

            static /*0x702acb8*/ Latin1Encoding();
            /*0x702a2dc*/ Latin1Encoding();
            /*0x702a2e8*/ Latin1Encoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x702a334*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x702a41c*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x702a63c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x702a9d8*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x702a9e0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x702aa64*/ int GetMaxByteCount(int charCount);
            /*0x702ab64*/ int GetMaxCharCount(int byteCount);
            /*0x702ac60*/ char[] GetBestFitUnicodeToBytesData();
        }

        enum NormalizationForm
        {
            FormC = 1,
            FormD = 2,
            FormKC = 5,
            FormKD = 6,
        }

        class StringBuilder : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ char[] m_ChunkChars;
            /*0x18*/ System.Text.StringBuilder m_ChunkPrevious;
            /*0x20*/ int m_ChunkLength;
            /*0x24*/ int m_ChunkOffset;
            /*0x28*/ int m_MaxCapacity;

            static /*0x702e8a8*/ void FormatError();
            static /*0x702b24c*/ void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count);
            static /*0x702cc9c*/ void ThreadSafeCopy(char[] source, int sourceIndex, System.Span<char> destination, int destinationIndex, int count);
            /*0x702ad84*/ StringBuilder();
            /*0x702adf0*/ StringBuilder(int capacity);
            /*0x702afc8*/ StringBuilder(string value);
            /*0x702afe4*/ StringBuilder(string value, int capacity);
            /*0x702b000*/ StringBuilder(string value, int startIndex, int length, int capacity);
            /*0x702adf8*/ StringBuilder(int capacity, int maxCapacity);
            /*0x702b314*/ StringBuilder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x702ef50*/ StringBuilder(System.Text.StringBuilder from);
            /*0x702efac*/ StringBuilder(int size, int maxCapacity, System.Text.StringBuilder previousBlock);
            /*0x702b610*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x702b754*/ int get_Capacity();
            /*0x702b778*/ void set_Capacity(int value);
            /*0x702b90c*/ int get_MaxCapacity();
            /*0x702b914*/ int EnsureCapacity(int capacity);
            /*0x702b9c8*/ string ToString();
            /*0x702bae4*/ string ToString(int startIndex, int length);
            /*0x702be48*/ System.Text.StringBuilder Clear();
            /*0x702b900*/ int get_Length();
            /*0x702be64*/ void set_Length(int value);
            /*0x702c234*/ char get_Chars(int index);
            /*0x702c2bc*/ void set_Chars(int index, char value);
            /*0x702c0d0*/ System.Text.StringBuilder Append(char value, int repeatCount);
            /*0x702c524*/ System.Text.StringBuilder Append(char[] value, int startIndex, int charCount);
            /*0x702c7b0*/ System.Text.StringBuilder Append(string value);
            /*0x702c8b4*/ void AppendHelper(string value);
            /*0x702c8ec*/ System.Text.StringBuilder Append(string value, int startIndex, int count);
            /*0x702ca24*/ System.Text.StringBuilder Append(System.Text.StringBuilder value);
            /*0x702ca40*/ System.Text.StringBuilder AppendCore(System.Text.StringBuilder value, int startIndex, int count);
            /*0x702cc58*/ System.Text.StringBuilder AppendLine();
            /*0x702cc78*/ System.Text.StringBuilder AppendLine(string value);
            /*0x702bc7c*/ void CopyTo(int sourceIndex, System.Span<char> destination, int count);
            /*0x702ce04*/ System.Text.StringBuilder Insert(int index, string value, int count);
            /*0x702d380*/ System.Text.StringBuilder Remove(int startIndex, int length);
            /*0x702d644*/ System.Text.StringBuilder Append(bool value);
            /*0x702d698*/ System.Text.StringBuilder Append(char value);
            /*0x702d6e8*/ System.Text.StringBuilder Append(byte value);
            /*0x702d740*/ System.Text.StringBuilder Append(int value);
            /*0x702d798*/ System.Text.StringBuilder Append(long value);
            /*0x702d7f0*/ System.Text.StringBuilder Append(uint value);
            /*0x3907c14*/ System.Text.StringBuilder AppendSpanFormattable<T>(T value);
            /*0x702d848*/ System.Text.StringBuilder Append(object value);
            /*0x702d880*/ System.Text.StringBuilder Append(char[] value);
            /*0x702d8a8*/ System.Text.StringBuilder Append(System.ReadOnlySpan<char> value);
            /*0x702d930*/ System.Text.StringBuilder Insert(int index, string value);
            /*0x702dab0*/ System.Text.StringBuilder Insert(int index, char value);
            /*0x702dadc*/ System.Text.StringBuilder Insert(int index, int value);
            /*0x702db1c*/ System.Text.StringBuilder AppendFormat(string format, object arg0);
            /*0x702e678*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1);
            /*0x702e6d4*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2);
            /*0x702e734*/ System.Text.StringBuilder AppendFormat(string format, object[] args);
            /*0x702e7e8*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0);
            /*0x702e844*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
            /*0x702db74*/ System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
            /*0x702e8f4*/ System.Text.StringBuilder Replace(string oldValue, string newValue);
            /*0x702e904*/ System.Text.StringBuilder Replace(string oldValue, string newValue, int startIndex, int count);
            /*0x702c660*/ System.Text.StringBuilder Append(char* value, int valueCount);
            /*0x702d9e0*/ void Insert(int index, char* value, int valueCount);
            /*0x702ece4*/ void ReplaceAllInChunk(int[] replacements, int replacementsCount, System.Text.StringBuilder sourceChunk, int removeCount, string value);
            /*0x702ec0c*/ bool StartsWith(System.Text.StringBuilder chunk, int indexInChunk, int count, string value);
            /*0x702d26c*/ void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref int indexInChunk, char* value, int count);
            /*0x702c20c*/ System.Text.StringBuilder FindChunkForIndex(int index);
            /*0x702eee8*/ System.Span<char> get_RemainingCurrentChunk();
            /*0x702eea8*/ System.Text.StringBuilder Next(System.Text.StringBuilder chunk);
            /*0x702c374*/ void ExpandByABlock(int minBlockCharCount);
            /*0x702cf8c*/ void MakeRoom(int index, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk, bool doNotMoveFollowingChars);
            /*0x702d4b4*/ void Remove(int startIndex, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk);
        }

        class StringBuilderCache
        {
            [ThreadStatic] static System.Text.StringBuilder t_cachedInstance;

            static /*0x702f054*/ System.Text.StringBuilder Acquire(int capacity);
            static /*0x702f128*/ void Release(System.Text.StringBuilder sb);
            static /*0x702f1b0*/ string GetStringAndRelease(System.Text.StringBuilder sb);
        }

        class UTF32Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF32Encoding s_default;
            static /*0x8*/ System.Text.UTF32Encoding s_bigEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            /*0x38*/ bool _emitUTF32ByteOrderMark;
            /*0x39*/ bool _isThrowException;
            /*0x3a*/ bool _bigEndian;

            static /*0x7031788*/ UTF32Encoding();
            /*0x702f1ec*/ UTF32Encoding();
            /*0x702f280*/ UTF32Encoding(bool bigEndian, bool byteOrderMark);
            /*0x702f214*/ UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
            /*0x702f2bc*/ void SetDefaultFallbacks();
            /*0x702f3a0*/ int GetByteCount(char[] chars, int index, int count);
            /*0x702f518*/ int GetByteCount(string s);
            /*0x702f5a4*/ int GetByteCount(char* chars, int count);
            /*0x702f674*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x702f8bc*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x702fb20*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x702fc18*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x702fd90*/ int GetCharCount(byte* bytes, int count);
            /*0x702fe60*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x70300c4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x70301bc*/ string GetString(byte[] bytes, int index, int count);
            /*0x7030340*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x7030604*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x70309ec*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x7030d24*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x70309d0*/ uint GetSurrogate(char cHigh, char cLow);
            /*0x7031118*/ char GetHighSurrogate(uint iChar);
            /*0x703112c*/ char GetLowSurrogate(uint iChar);
            /*0x7031138*/ System.Text.Decoder GetDecoder();
            /*0x703119c*/ System.Text.Encoder GetEncoder();
            /*0x70311f4*/ int GetMaxByteCount(int charCount);
            /*0x70312f4*/ int GetMaxCharCount(int byteCount);
            /*0x70313c0*/ byte[] GetPreamble();
            /*0x70314d4*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x7031648*/ bool Equals(object value);
            /*0x703170c*/ int GetHashCode();

            class UTF32Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int iChar;
                /*0x34*/ int readByteCount;

                /*0x7031194*/ UTF32Decoder(System.Text.UTF32Encoding encoding);
                /*0x70318e4*/ void Reset();
                /*0x7031904*/ bool get_HasState();
            }
        }

        class UTF7Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF7Encoding s_default;
            /*0x38*/ byte[] _base64Bytes;
            /*0x40*/ sbyte[] _base64Values;
            /*0x48*/ bool[] _directEncode;
            /*0x50*/ bool _allowOptionals;

            static /*0x7033614*/ UTF7Encoding();
            /*0x7031914*/ UTF7Encoding();
            /*0x7031938*/ UTF7Encoding(bool allowOptionals);
            /*0x7031968*/ void MakeTables();
            /*0x7031c00*/ void SetDefaultFallbacks();
            /*0x7031cbc*/ bool Equals(object value);
            /*0x7031d8c*/ int GetHashCode();
            /*0x7031df8*/ int GetByteCount(char[] chars, int index, int count);
            /*0x7031f70*/ int GetByteCount(string s);
            /*0x7031ffc*/ int GetByteCount(char* chars, int count);
            /*0x70320cc*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7032314*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7032578*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x7032670*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x70327e8*/ int GetCharCount(byte* bytes, int count);
            /*0x70328b8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7032b1c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x7032c14*/ string GetString(byte[] bytes, int index, int count);
            /*0x7032d98*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x7032db4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x7033150*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x703316c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x7033420*/ System.Text.Decoder GetDecoder();
            /*0x7033484*/ System.Text.Encoder GetEncoder();
            /*0x70334e0*/ int GetMaxByteCount(int charCount);
            /*0x70335a0*/ int GetMaxCharCount(int byteCount);

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;
                /*0x34*/ int bitCount;
                /*0x38*/ bool firstByte;

                /*0x703347c*/ Decoder(System.Text.UTF7Encoding encoding);
                /*0x703368c*/ void Reset();
                /*0x70336b4*/ bool get_HasState();
            }

            class Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int bits;
                /*0x3c*/ int bitCount;

                /*0x70334dc*/ Encoder(System.Text.UTF7Encoding encoding);
                /*0x70336c4*/ void Reset();
                /*0x70336e8*/ bool get_HasState();
            }

            class DecoderUTF7Fallback : System.Text.DecoderFallback
            {
                /*0x7031cb4*/ DecoderUTF7Fallback();
                /*0x7033708*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
                /*0x7033774*/ int get_MaxCharCount();
                /*0x703377c*/ bool Equals(object value);
                /*0x70337d8*/ int GetHashCode();
            }

            class DecoderUTF7FallbackBuffer : System.Text.DecoderFallbackBuffer
            {
                /*0x20*/ char cFallback;
                /*0x24*/ int iCount;
                /*0x28*/ int iSize;

                /*0x7033764*/ DecoderUTF7FallbackBuffer(System.Text.UTF7Encoding.DecoderUTF7Fallback fallback);
                /*0x70337e0*/ bool Fallback(byte[] bytesUnknown, int index);
                /*0x703381c*/ char GetNextChar();
                /*0x703383c*/ int get_Remaining();
                /*0x7033848*/ void Reset();
                /*0x7033858*/ int InternalFallback(byte[] bytes, byte* pBytes);
            }
        }

        class UTF8Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF8Encoding.UTF8EncodingSealed s_default;
            static /*0x8*/ byte[] s_preamble;
            /*0x38*/ bool _emitUTF8Identifier;
            /*0x39*/ bool _isThrowException;

            static /*0x7036bc8*/ UTF8Encoding();
            static /*0x7035020*/ int PtrDiff(char* a, char* b);
            static /*0x703502c*/ int PtrDiff(byte* a, byte* b);
            static /*0x703500c*/ bool InRange(int ch, int start, int end);
            /*0x70338cc*/ UTF8Encoding();
            /*0x70338ec*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier);
            /*0x703391c*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
            /*0x703397c*/ void SetDefaultFallbacks();
            /*0x7033a60*/ int GetByteCount(char[] chars, int index, int count);
            /*0x7033bd8*/ int GetByteCount(string chars);
            /*0x7033c64*/ int GetByteCount(char* chars, int count);
            /*0x7033d34*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7033f7c*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x70341e0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x70342d8*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x7034450*/ int GetCharCount(byte* bytes, int count);
            /*0x7034520*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7034784*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x703487c*/ string GetString(byte[] bytes, int index, int count);
            /*0x7034a00*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x7035034*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x70357a8*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x7035c8c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x703632c*/ bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback, ref char* pTarget);
            /*0x7035c4c*/ int FallbackInvalidByteSequence(byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback);
            /*0x703639c*/ byte[] GetBytesUnknown(ref byte* pSrc, int ch);
            /*0x7036590*/ System.Text.Decoder GetDecoder();
            /*0x70365f4*/ System.Text.Encoder GetEncoder();
            /*0x7036650*/ int GetMaxByteCount(int charCount);
            /*0x7036750*/ int GetMaxCharCount(int byteCount);
            /*0x7036850*/ byte[] GetPreamble();
            /*0x7036934*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x7036a98*/ bool Equals(object value);
            /*0x7036b68*/ int GetHashCode();

            class UTF8EncodingSealed : System.Text.UTF8Encoding
            {
                /*0x7036ca4*/ UTF8EncodingSealed(bool encoderShouldEmitUTF8Identifier);
                /*0x7036d1c*/ System.ReadOnlySpan<byte> get_Preamble();
            }

            class UTF8Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int surrogateChar;

                /*0x703664c*/ UTF8Encoder(System.Text.UTF8Encoding encoding);
                /*0x7036e00*/ void Reset();
                /*0x7036e20*/ bool get_HasState();
            }

            class UTF8Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;

                /*0x70365ec*/ UTF8Decoder(System.Text.UTF8Encoding encoding);
                /*0x7036e30*/ void Reset();
                /*0x7036e50*/ bool get_HasState();
            }
        }

        class UnicodeEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UnicodeEncoding s_bigEndianDefault;
            static /*0x8*/ System.Text.UnicodeEncoding s_littleEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            static /*0x20*/ ulong highLowPatternMask;
            /*0x38*/ bool isThrowException;
            /*0x39*/ bool bigEndian;
            /*0x3a*/ bool byteOrderMark;

            static /*0x703a318*/ UnicodeEncoding();
            /*0x7036e60*/ UnicodeEncoding();
            /*0x7036eac*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark);
            /*0x7036eec*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
            /*0x7036fe4*/ void SetDefaultFallbacks();
            /*0x70370d0*/ int GetByteCount(char[] chars, int index, int count);
            /*0x7037248*/ int GetByteCount(string s);
            /*0x70372d4*/ int GetByteCount(char* chars, int count);
            /*0x70373a4*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x70375ec*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x7037850*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x7037948*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x7037ac0*/ int GetCharCount(byte* bytes, int count);
            /*0x7037b90*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x7037df4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x7037eec*/ string GetString(byte[] bytes, int index, int count);
            /*0x7038070*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x7038590*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x7038cb0*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x70392f4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x7039c34*/ System.Text.Encoder GetEncoder();
            /*0x7039c90*/ System.Text.Decoder GetDecoder();
            /*0x7039d04*/ byte[] GetPreamble();
            /*0x7039e10*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x7039f84*/ int GetMaxByteCount(int charCount);
            /*0x703a084*/ int GetMaxCharCount(int byteCount);
            /*0x703a188*/ bool Equals(object value);
            /*0x703a29c*/ int GetHashCode();

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int lastByte;
                /*0x34*/ char lastChar;

                /*0x7039cf4*/ Decoder(System.Text.UnicodeEncoding encoding);
                /*0x703a4cc*/ void Reset();
                /*0x703a4f4*/ bool get_HasState();
            }
        }

        struct ValueStringBuilder
        {
            /*0x10*/ char[] _arrayToReturnToPool;
            /*0x18*/ System.Span<char> _chars;
            /*0x28*/ int _pos;

            /*0x703a518*/ ValueStringBuilder(System.Span<char> initialBuffer);
            /*0x703a528*/ int get_Length();
            /*0x703a530*/ ref char get_Item(int index);
            /*0x703a554*/ string ToString();
            /*0x703a620*/ bool TryCopyTo(System.Span<char> destination, ref int charsWritten);
            /*0x703a70c*/ void Append(char c);
            /*0x703a808*/ void Append(string s);
            /*0x703a8b4*/ void AppendSlow(string s);
            /*0x703ac28*/ void Append(char c, int count);
            /*0x703ad50*/ void Append(char* value, int length);
            /*0x703ae30*/ System.Span<char> AppendSpan(int length);
            /*0x703a788*/ void GrowAndAppend(char c);
            /*0x703a9e4*/ void Grow(int requiredAdditionalCapacity);
            /*0x703aeec*/ void Dispose();
        }

        struct ValueUtf8Converter
        {
            /*0x10*/ byte[] _arrayToReturnToPool;
            /*0x18*/ System.Span<byte> _bytes;

            /*0x703afe4*/ ValueUtf8Converter(System.Span<byte> initialBuffer);
            /*0x703aff0*/ System.Span<byte> ConvertAndTerminateString(System.ReadOnlySpan<char> value);
            /*0x703b288*/ void Dispose();
        }

        class Encoding : System.ICloneable
        {
            static /*0x0*/ System.Text.Encoding defaultEncoding;
            static /*0x8*/ System.Text.Encoding unicodeEncoding;
            static /*0x10*/ System.Text.Encoding bigEndianUnicode;
            static /*0x18*/ System.Text.Encoding utf7Encoding;
            static /*0x20*/ System.Text.Encoding utf8Encoding;
            static /*0x28*/ System.Text.Encoding utf32Encoding;
            static /*0x30*/ System.Text.Encoding asciiEncoding;
            static /*0x38*/ System.Text.Encoding latin1Encoding;
            static /*0x40*/ System.Collections.Generic.Dictionary<int, System.Text.Encoding> encodings;
            static /*0x48*/ object s_InternalSyncObject;
            /*0x10*/ int m_codePage;
            /*0x18*/ System.Globalization.CodePageDataItem dataItem;
            /*0x20*/ bool m_deserializedFromEverett;
            /*0x21*/ bool m_isReadOnly;
            /*0x28*/ System.Text.EncoderFallback encoderFallback;
            /*0x30*/ System.Text.DecoderFallback decoderFallback;

            static /*0x703baa0*/ object get_InternalSyncObject();
            static /*0x703bb38*/ System.Text.Encoding GetEncoding(int codepage);
            static /*0x703cfdc*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
            static /*0x703d258*/ System.Text.Encoding GetEncoding(string name);
            static /*0x703c78c*/ System.Text.Encoding get_ASCII();
            static /*0x703c830*/ System.Text.Encoding get_Latin1();
            static /*0x703e3d8*/ System.Text.Encoding CreateDefaultEncoding();
            static /*0x703c40c*/ System.Text.Encoding get_Default();
            static /*0x703c498*/ System.Text.Encoding get_Unicode();
            static /*0x703c568*/ System.Text.Encoding get_BigEndianUnicode();
            static /*0x703c63c*/ System.Text.Encoding get_UTF7();
            static /*0x703b1e0*/ System.Text.Encoding get_UTF8();
            static /*0x703c6e0*/ System.Text.Encoding get_UTF32();
            /*0x703b37c*/ Encoding();
            /*0x7036f5c*/ Encoding(int codePage);
            /*0x703b3ac*/ void SetDefaultFallbacks();
            /*0x703b454*/ void OnDeserializing();
            /*0x703b488*/ void OnDeserialized();
            /*0x703b4cc*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x703b500*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x703b504*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x703b510*/ void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x703b8f8*/ void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x703d2f4*/ byte[] GetPreamble();
            /*0x703d34c*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x703d3a0*/ void GetDataItem();
            /*0x703d4dc*/ string get_EncodingName();
            /*0x703d4e8*/ string get_HeaderName();
            /*0x703d518*/ string get_WebName();
            /*0x703d548*/ System.Text.EncoderFallback get_EncoderFallback();
            /*0x703d0e0*/ void set_EncoderFallback(System.Text.EncoderFallback value);
            /*0x703d550*/ System.Text.DecoderFallback get_DecoderFallback();
            /*0x703d19c*/ void set_DecoderFallback(System.Text.DecoderFallback value);
            /*0x703d558*/ object Clone();
            /*0x703d5e0*/ bool get_IsReadOnly();
            /*0x703d5e8*/ int GetByteCount(string s);
            int GetByteCount(char[] chars, int index, int count);
            /*0x703d674*/ int GetByteCount(char* chars, int count);
            /*0x703d7e4*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x703d7f4*/ byte[] GetBytes(char[] chars, int index, int count);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x703d8b0*/ byte[] GetBytes(string s);
            /*0x703d9b0*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x703da5c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x703da6c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x703dc88*/ int GetCharCount(byte* bytes, int count);
            /*0x703ddf8*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x703de08*/ char[] GetChars(byte[] bytes, int index, int count);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x703dec4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x703e0e0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x703e0f0*/ string GetString(byte* bytes, int byteCount);
            /*0x703e1d4*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars);
            /*0x703e2a8*/ string GetString(System.ReadOnlySpan<byte> bytes);
            /*0x703e324*/ int get_CodePage();
            /*0x703e32c*/ System.Text.Decoder GetDecoder();
            /*0x703e5b4*/ void setReadOnly(bool value);
            /*0x703e5c0*/ System.Text.Encoder GetEncoder();
            /*0x380b6cc*/ int GetMaxByteCount(int charCount);
            /*0x380b6cc*/ int GetMaxCharCount(int byteCount);
            /*0x703e66c*/ string GetString(byte[] bytes);
            /*0x703e6fc*/ string GetString(byte[] bytes, int index, int count);
            /*0x703e724*/ bool Equals(object value);
            /*0x703e7f4*/ int GetHashCode();
            /*0x703e84c*/ char[] GetBestFitUnicodeToBytesData();
            /*0x703e8a4*/ char[] GetBestFitBytesToUnicodeData();
            /*0x703e8fc*/ void ThrowBytesOverflow();
            /*0x7038c38*/ void ThrowBytesOverflow(System.Text.EncoderNLS encoder, bool nothingEncoded);
            /*0x703ea00*/ void ThrowCharsOverflow();
            /*0x7039bbc*/ void ThrowCharsOverflow(System.Text.DecoderNLS decoder, bool nothingDecoded);
            /*0x703eb04*/ int GetByteCount(System.ReadOnlySpan<char> chars);
            /*0x703eb8c*/ int GetBytes(System.ReadOnlySpan<char> chars, System.Span<byte> bytes);

            class DefaultEncoder : System.Text.Encoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;
                /*0x2a*/ char charLeftOver;

                /*0x703e630*/ DefaultEncoder(System.Text.Encoding encoding);
                /*0x703ec60*/ DefaultEncoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x703efb8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x703f080*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x703f120*/ int GetByteCount(char[] chars, int index, int count, bool flush);
                /*0x703f144*/ int GetByteCount(char* chars, int count, bool flush);
                /*0x703f168*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
                /*0x703f18c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            }

            class DefaultDecoder : System.Text.Decoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;

                /*0x703e39c*/ DefaultDecoder(System.Text.Encoding encoding);
                /*0x703f1b0*/ DefaultDecoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x703f4a8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x703f4fc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x703f59c*/ int GetCharCount(byte[] bytes, int index, int count);
                /*0x703f5ac*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
                /*0x703f5d0*/ int GetCharCount(byte* bytes, int count, bool flush);
                /*0x703f5f4*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
                /*0x703f604*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
                /*0x703f628*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            }

            class EncodingCharBuffer
            {
                /*0x10*/ char* chars;
                /*0x18*/ char* charStart;
                /*0x20*/ char* charEnd;
                /*0x28*/ int charCountResult;
                /*0x30*/ System.Text.Encoding enc;
                /*0x38*/ System.Text.DecoderNLS decoder;
                /*0x40*/ byte* byteStart;
                /*0x48*/ byte* byteEnd;
                /*0x50*/ byte* bytes;
                /*0x58*/ System.Text.DecoderFallbackBuffer fallbackBuffer;

                /*0x703f64c*/ EncodingCharBuffer(System.Text.Encoding enc, System.Text.DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount);
                /*0x703f72c*/ bool AddChar(char ch, int numBytes);
                /*0x703f79c*/ bool AddChar(char ch);
                /*0x703f7a4*/ void AdjustBytes(int count);
                /*0x703f7b4*/ bool get_MoreData();
                /*0x703f7c4*/ byte GetNextByte();
                /*0x703f7e8*/ int get_BytesUsed();
                /*0x703f7f8*/ bool Fallback(byte fallbackByte);
                /*0x703f870*/ bool Fallback(byte[] byteBuffer);
                /*0x703f94c*/ int get_Count();
            }

            class EncodingByteBuffer
            {
                /*0x10*/ byte* bytes;
                /*0x18*/ byte* byteStart;
                /*0x20*/ byte* byteEnd;
                /*0x28*/ char* chars;
                /*0x30*/ char* charStart;
                /*0x38*/ char* charEnd;
                /*0x40*/ int byteCountResult;
                /*0x48*/ System.Text.Encoding enc;
                /*0x50*/ System.Text.EncoderNLS encoder;
                /*0x58*/ System.Text.EncoderFallbackBuffer fallbackBuffer;

                /*0x703f954*/ EncodingByteBuffer(System.Text.Encoding inEncoding, System.Text.EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount);
                /*0x703fb98*/ bool AddByte(byte b, int moreBytesExpected);
                /*0x703fc64*/ bool AddByte(byte b1);
                /*0x703fc6c*/ bool AddByte(byte b1, byte b2);
                /*0x703fc74*/ bool AddByte(byte b1, byte b2, int moreBytesExpected);
                /*0x703fbe8*/ void MovePrevious(bool bThrow);
                /*0x703fcbc*/ bool get_MoreData();
                /*0x703fd04*/ char GetNextChar();
                /*0x703fd54*/ int get_CharsUsed();
                /*0x703fd6c*/ int get_Count();
            }
        }

        enum NormalizationCheck
        {
            Yes = 0,
            No = 1,
            Maybe = 2,
        }

        class Normalization
        {
            static /*0x0*/ byte* props;
            static /*0x8*/ int* mappedChars;
            static /*0x10*/ short* charMapIndex;
            static /*0x18*/ short* helperIndex;
            static /*0x20*/ ushort* mapIdxToComposite;
            static /*0x28*/ byte* combiningClass;
            static /*0x30*/ object forLock;
            static /*0x38*/ bool isReady;

            static /*0x7041470*/ Normalization();
            static /*0x703fd74*/ uint PropValue(int cp);
            static /*0x703fe08*/ int CharMapIdx(int cp);
            static /*0x703fe9c*/ byte GetCombiningClass(int c);
            static /*0x703ff44*/ int GetPrimaryCompositeFromMapIndex(int src);
            static /*0x703ffec*/ int GetPrimaryCompositeHelperIndex(int cp);
            static /*0x7040094*/ string Compose(string source, int checkType);
            static /*0x70402a8*/ System.Text.StringBuilder Combine(string source, int start, int checkType);
            static /*0x70403e4*/ void Combine(System.Text.StringBuilder sb, int i, int checkType);
            static /*0x7040628*/ int CombineHangul(System.Text.StringBuilder sb, string s, int current);
            static /*0x7040a20*/ int Fetch(System.Text.StringBuilder sb, string s, int i);
            static /*0x70407ec*/ int TryComposeWithPreviousStarter(System.Text.StringBuilder sb, string s, int current);
            static /*0x7040a5c*/ int TryCompose(int i, int starter, int candidate);
            static /*0x7040b74*/ string Decompose(string source, int checkType);
            static /*0x7040174*/ void Decompose(string source, ref System.Text.StringBuilder sb, int checkType);
            static /*0x7040df0*/ void ReorderCanonical(string src, ref System.Text.StringBuilder sb, int start);
            static /*0x7040c00*/ void DecomposeChar(ref System.Text.StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start);
            static /*0x70404f4*/ System.Text.NormalizationCheck QuickCheck(char c, int type);
            static /*0x7041224*/ int GetCanonicalHangul(int s, int[] buf, int bufIdx);
            static /*0x704106c*/ int GetCanonical(int c, int[] buf, int bufIdx, int checkType);
            static /*0x7041310*/ string Normalize(string source, System.Text.NormalizationForm normalizationForm);
            static /*0x70413cc*/ string Normalize(string source, int type);
            static /*0x704146c*/ void load_normalization_resource(ref nint props, ref nint mappedChars, ref nint charMapIndex, ref nint helperIndex, ref nint mapIdxToComposite, ref nint combiningClass);
        }

        class EncodingHelper
        {
            static /*0x0*/ System.Text.Encoding utf8EncodingWithoutMarkers;
            static /*0x8*/ object lockobj;
            static /*0x10*/ System.Reflection.Assembly i18nAssembly;
            static /*0x18*/ bool i18nDisabled;

            static /*0x7041874*/ EncodingHelper();
            static /*0x704167c*/ System.Text.Encoding get_UTF8Unmarked();
            static /*0x7041870*/ string InternalCodePage(ref int code_page);
            static /*0x703e438*/ System.Text.Encoding GetDefaultEncoding();
            static /*0x703c8d4*/ object InvokeI18N(string name, object[] args);
        }
    }

    namespace Security
    {
        interface IPermission : System.Security.ISecurityEncodable
        {
            /*0x380cb08*/ void Demand();
            /*0x380b2f0*/ bool IsSubsetOf(System.Security.IPermission target);
        }

        interface ISecurityEncodable
        {
            /*0x380b9e8*/ System.Security.SecurityElement ToXml();
        }

        class XmlSyntaxException : System.SystemException
        {
            /*0x70418e8*/ XmlSyntaxException();
            /*0x70418f0*/ XmlSyntaxException(int lineNumber);
            /*0x70418f8*/ XmlSyntaxException(int lineNumber, string message);
            /*0x7041900*/ XmlSyntaxException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SecurityTreatAsSafeAttribute : System.Attribute
        {
            /*0x7041908*/ SecurityTreatAsSafeAttribute();
        }

        class SecurityDocument
        {
            /*0x10*/ byte[] m_data;

            static /*0x7041c10*/ int EncodedStringSize(string str);
            /*0x7041910*/ SecurityDocument(int numData);
            /*0x7041980*/ void GuaranteeSize(int size);
            /*0x7041a38*/ void AddString(string str, ref int position);
            /*0x7041b84*/ void AppendString(string str, ref int position);
            /*0x7041c30*/ string GetString(ref int position, bool bCreate);
            /*0x7042188*/ void AddToken(byte b, ref int position);
            /*0x70421e4*/ System.Security.SecurityElement GetRootElement();
            /*0x7042200*/ System.Security.SecurityElement GetElement(int position, bool bCreate);
            /*0x704221c*/ System.Security.SecurityElement InternalGetElement(ref int position, bool bCreate);
        }

        class CodeAccessPermission : System.Security.IPermission, System.Security.ISecurityEncodable
        {
            static /*0x7042908*/ System.Security.Permissions.PermissionState CheckPermissionState(System.Security.Permissions.PermissionState state, bool allowUnrestricted);
            /*0x70426a8*/ CodeAccessPermission();
            /*0x70426b0*/ void Demand();
            /*0x70427c0*/ bool Equals(object obj);
            /*0x70428d8*/ int GetHashCode();
            /*0x380b2f0*/ bool IsSubsetOf(System.Security.IPermission target);
            /*0x70428e0*/ string ToString();
            /*0x380b9e8*/ System.Security.SecurityElement ToXml();
            /*0x70429b4*/ void System.Security.IPermission.Demand();
        }

        class NamedPermissionSet : System.Security.PermissionSet
        {
            /*0x30*/ string name;
            /*0x38*/ string description;

            /*0x70429b8*/ NamedPermissionSet();
            /*0x7042a78*/ NamedPermissionSet(string name, System.Security.Permissions.PermissionState state);
            /*0x7042bc8*/ NamedPermissionSet(string name);
            /*0x7042bd0*/ string get_Name();
            /*0x7042b28*/ void set_Name(string value);
            /*0x7042bd8*/ System.Security.SecurityElement ToXml();
            /*0x70430cc*/ bool Equals(object obj);
            /*0x70432f8*/ int GetHashCode();
        }

        class PermissionSet : System.Security.ISecurityEncodable, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback
        {
            static /*0x0*/ object[] psUnrestricted;
            static /*0x8*/ object[] action;
            /*0x10*/ System.Security.Permissions.PermissionState state;
            /*0x18*/ System.Collections.ArrayList list;
            /*0x20*/ bool _declsec;
            /*0x28*/ bool[] _ignored;

            static /*0x7043b54*/ PermissionSet();
            /*0x7042a0c*/ PermissionSet();
            /*0x7042af8*/ PermissionSet(System.Security.Permissions.PermissionState state);
            /*0x70426e4*/ PermissionSet(System.Security.IPermission perm);
            /*0x7043374*/ void CopyTo(System.Array array, int index);
            /*0x70434dc*/ void Demand();
            /*0x7042730*/ void CasOnlyDemand(int skip);
            /*0x7043ab4*/ System.Collections.IEnumerator GetEnumerator();
            /*0x7043708*/ bool IsEmpty();
            /*0x7043aa4*/ bool IsUnrestricted();
            /*0x7043ad8*/ string ToString();
            /*0x7042c70*/ System.Security.SecurityElement ToXml();
            /*0x7043b04*/ int get_Count();
            /*0x7043b28*/ bool get_IsSynchronized();
            /*0x7043b4c*/ object get_SyncRoot();
            /*0x7043b50*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x704315c*/ bool Equals(object obj);
            /*0x7043330*/ int GetHashCode();
        }

        class SecureString : System.IDisposable
        {
            /*0x10*/ int length;
            /*0x14*/ bool disposed;
            /*0x18*/ byte[] data;

            /*0x7043cd4*/ SecureString();
            /*0x7043e94*/ SecureString(char* value, int length);
            /*0x7043fd8*/ int get_Length();
            /*0x7044038*/ void Dispose();
            /*0x7043fd4*/ void Encrypt();
            /*0x7044088*/ void Decrypt();
            /*0x7043cf8*/ void Alloc(int length, bool realloc);
            /*0x704408c*/ byte[] GetBuffer();
        }

        enum SecurityElementType
        {
            Regular = 0,
            Format = 1,
            Comment = 2,
        }

        class SecurityElement
        {
            static /*0x0*/ char[] invalid_tag_chars;
            static /*0x8*/ char[] invalid_text_chars;
            static /*0x10*/ char[] invalid_attr_name_chars;
            static /*0x18*/ char[] invalid_attr_value_chars;
            static /*0x20*/ char[] invalid_chars;
            /*0x10*/ string text;
            /*0x18*/ string tag;
            /*0x20*/ System.Collections.ArrayList attributes;
            /*0x28*/ System.Collections.ArrayList children;

            static /*0x7045810*/ SecurityElement();
            static /*0x7044ad4*/ string Escape(string str);
            static /*0x7044490*/ string Unescape(string str);
            static /*0x7044cdc*/ bool IsValidAttributeName(string name);
            static /*0x7044d58*/ bool IsValidAttributeValue(string value);
            static /*0x704428c*/ bool IsValidTag(string tag);
            static /*0x7044414*/ bool IsValidText(string text);
            /*0x7042424*/ SecurityElement(string tag);
            /*0x704413c*/ SecurityElement(string tag, string text);
            /*0x7044404*/ System.Collections.ArrayList get_Children();
            /*0x704440c*/ string get_Tag();
            /*0x7044308*/ void set_Text(string value);
            /*0x704242c*/ void AddAttribute(string name, string value);
            /*0x70425d0*/ void AddChild(System.Security.SecurityElement child);
            /*0x7044dd4*/ System.Security.SecurityElement SearchForChildByTag(string tag);
            /*0x7044ef8*/ string ToString();
            /*0x7044f80*/ void ToXml(ref System.Text.StringBuilder s, int level);
            /*0x7044660*/ System.Security.SecurityElement.SecurityAttribute GetAttribute(string name);
            /*0x70455c8*/ void set_m_strText(string value);
            /*0x70455d0*/ string SearchForTextOfLocalName(string strLocalName);

            class SecurityAttribute
            {
                /*0x10*/ string _name;
                /*0x18*/ string _value;

                /*0x7044964*/ SecurityAttribute(string name, string value);
                /*0x70459bc*/ string get_Name();
                /*0x70459c4*/ string get_Value();
            }
        }

        class SecurityException : System.SystemException
        {
            /*0x90*/ string permissionState;

            /*0x70459cc*/ SecurityException();
            /*0x7045a34*/ SecurityException(string message);
            /*0x7045a58*/ SecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7045b78*/ SecurityException(string message, System.Exception inner);
            /*0x7045b9c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7045c9c*/ string ToString();
        }

        class SecurityManager
        {
            static /*0x70426dc*/ bool get_SecurityEnabled();
            static /*0x7045ca4*/ void EnsureElevatedPermissions();
        }

        namespace Util
        {
            class Parser
            {
                /*0x10*/ System.Security.SecurityDocument _doc;
                /*0x18*/ System.Security.Util.Tokenizer _t;

                /*0x704729c*/ Parser(System.Security.Util.Tokenizer t);
                /*0x7047360*/ Parser(string input);
                /*0x7045ca8*/ System.Security.SecurityElement GetTopElement();
                /*0x7045cd0*/ void GetRequiredSizes(System.Security.Util.TokenizerStream stream, ref int index);
                /*0x7046214*/ int DetermineFormat(System.Security.Util.TokenizerStream stream);
                /*0x7046e30*/ void ParseContents();
            }

            class Tokenizer
            {
                /*0x10*/ int LineNo;
                /*0x14*/ int _inProcessingTag;
                /*0x18*/ byte[] _inBytes;
                /*0x20*/ char[] _inChars;
                /*0x28*/ string _inString;
                /*0x30*/ int _inIndex;
                /*0x34*/ int _inSize;
                /*0x38*/ int _inSavedCharacter;
                /*0x3c*/ System.Security.Util.Tokenizer.TokenSource _inTokenSource;
                /*0x40*/ System.Security.Util.Tokenizer.ITokenReader _inTokenReader;
                /*0x48*/ System.Security.Util.Tokenizer.StringMaker _maker;
                /*0x50*/ string[] _searchStrings;
                /*0x58*/ string[] _replaceStrings;
                /*0x60*/ int _inNestedIndex;
                /*0x64*/ int _inNestedSize;
                /*0x68*/ string _inNestedString;

                /*0x70473c8*/ Tokenizer(string input);
                /*0x704741c*/ void BasicInitialization();
                /*0x704749c*/ void Recycle();
                /*0x7046bf4*/ void ChangeFormat(System.Text.Encoding encoding);
                /*0x70463a0*/ void GetTokens(System.Security.Util.TokenizerStream stream, int maxNum, bool endAfterKet);
                /*0x704762c*/ string GetStringToken();

                enum TokenSource
                {
                    UnicodeByteArray = 0,
                    UTF8ByteArray = 1,
                    ASCIIByteArray = 2,
                    CharArray = 3,
                    String = 4,
                    NestedStrings = 5,
                    Other = 6,
                }

                class StringMaker
                {
                    /*0x10*/ string[] aStrings;
                    /*0x18*/ uint cStringsMax;
                    /*0x1c*/ uint cStringsUsed;
                    /*0x20*/ System.Text.StringBuilder _outStringBuilder;
                    /*0x28*/ char[] _outChars;
                    /*0x30*/ int _outIndex;

                    static /*0x704772c*/ uint HashString(string str);
                    static /*0x7047798*/ uint HashCharArray(char[] a, int l);
                    /*0x70477f4*/ StringMaker();
                    /*0x704789c*/ bool CompareStringAndChars(string str, char[] a, int l);
                    /*0x7041f54*/ string MakeString();
                }

                interface ITokenReader
                {
                    /*0x380b6a0*/ int Read();
                }

                class StreamTokenReader : System.Security.Util.Tokenizer.ITokenReader
                {
                    /*0x10*/ System.IO.StreamReader _in;
                    /*0x18*/ int _numCharRead;

                    /*0x70474f4*/ StreamTokenReader(System.IO.StreamReader input);
                    /*0x704793c*/ int Read();
                    /*0x7047978*/ int get_NumCharEncountered();
                }
            }

            class TokenizerShortBlock
            {
                /*0x10*/ short[] m_block;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_next;

                /*0x7047980*/ TokenizerShortBlock();
            }

            class TokenizerStringBlock
            {
                /*0x10*/ string[] m_block;
                /*0x18*/ System.Security.Util.TokenizerStringBlock m_next;

                /*0x70479e4*/ TokenizerStringBlock();
            }

            class TokenizerStream
            {
                /*0x10*/ int m_countTokens;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_headTokens;
                /*0x20*/ System.Security.Util.TokenizerShortBlock m_lastTokens;
                /*0x28*/ System.Security.Util.TokenizerShortBlock m_currentTokens;
                /*0x30*/ int m_indexTokens;
                /*0x38*/ System.Security.Util.TokenizerStringBlock m_headStrings;
                /*0x40*/ System.Security.Util.TokenizerStringBlock m_currentStrings;
                /*0x48*/ int m_indexStrings;

                /*0x7047108*/ TokenizerStream();
                /*0x704752c*/ void AddToken(short token);
                /*0x7047644*/ void AddString(string str);
                /*0x70471b8*/ void Reset();
                /*0x70471fc*/ short GetNextFullToken();
                /*0x7046110*/ short GetNextToken();
                /*0x704619c*/ string GetNextString();
                /*0x7046124*/ void ThrowAwayNextString();
                /*0x7046128*/ void TagLastToken(short tag);
                /*0x7047a48*/ int GetTokenCount();
                /*0x7046ba8*/ void GoToPosition(int position);
            }
        }

        namespace Policy
        {
            class Evidence : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ bool _locked;
                /*0x18*/ System.Collections.ArrayList hostEvidenceList;
                /*0x20*/ System.Collections.ArrayList assemblyEvidenceList;

                /*0x7047a50*/ Evidence();
                /*0x7047a58*/ int get_Count();
                /*0x7047ab4*/ bool get_IsSynchronized();
                /*0x7047abc*/ object get_SyncRoot();
                /*0x7047ac0*/ void CopyTo(System.Array array, int index);
                /*0x7047b84*/ System.Collections.IEnumerator GetEnumerator();

                class EvidenceEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.IEnumerator currentEnum;
                    /*0x18*/ System.Collections.IEnumerator hostEnum;
                    /*0x20*/ System.Collections.IEnumerator assemblyEnum;

                    /*0x7047c28*/ EvidenceEnumerator(System.Collections.IEnumerator hostenum, System.Collections.IEnumerator assemblyenum);
                    /*0x7047c88*/ bool MoveNext();
                    /*0x7047dd4*/ void Reset();
                    /*0x7047efc*/ object get_Current();
                }
            }
        }

        namespace Permissions
        {
            enum PermissionState
            {
                None = 0,
                Unrestricted = 1,
            }

            enum SecurityAction
            {
                Demand = 2,
                Assert = 3,
                Deny = 4,
                PermitOnly = 5,
                LinkDemand = 6,
                InheritanceDemand = 7,
                RequestMinimum = 8,
                RequestOptional = 9,
                RequestRefuse = 10,
            }
        }

        namespace Cryptography
        {
            class CryptoStream : System.IO.Stream, System.IDisposable
            {
                /*0x28*/ System.IO.Stream _stream;
                /*0x30*/ System.Security.Cryptography.ICryptoTransform _transform;
                /*0x38*/ System.Security.Cryptography.CryptoStreamMode _transformMode;
                /*0x40*/ byte[] _inputBuffer;
                /*0x48*/ int _inputBufferIndex;
                /*0x4c*/ int _inputBlockSize;
                /*0x50*/ byte[] _outputBuffer;
                /*0x58*/ int _outputBufferIndex;
                /*0x5c*/ int _outputBlockSize;
                /*0x60*/ bool _canRead;
                /*0x61*/ bool _canWrite;
                /*0x62*/ bool _finalBlockTransformed;
                /*0x68*/ System.Threading.SemaphoreSlim _lazyAsyncActiveSemaphore;
                /*0x70*/ bool _leaveOpen;

                /*0x7047fa0*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
                /*0x7047fa8*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, bool leaveOpen);
                /*0x7048308*/ bool get_CanRead();
                /*0x7048310*/ bool get_CanSeek();
                /*0x7048318*/ bool get_CanWrite();
                /*0x7048320*/ long get_Length();
                /*0x704836c*/ long get_Position();
                /*0x70483b8*/ void set_Position(long value);
                /*0x7048404*/ bool get_HasFlushedFinalBlock();
                /*0x704840c*/ void FlushFinalBlock();
                /*0x7048638*/ void Flush();
                /*0x704863c*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
                /*0x70487b8*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x7048804*/ void SetLength(long value);
                /*0x7048850*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x7048b30*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x7048be4*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x70489d0*/ System.Threading.Tasks.Task<int> ReadAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x7048c2c*/ int ReadByte();
                /*0x7048ca8*/ void WriteByte(byte value);
                /*0x7048cfc*/ int Read(byte[] buffer, int offset, int count);
                /*0x7048898*/ void CheckReadArguments(byte[] buffer, int offset, int count);
                /*0x7048dc0*/ System.Threading.Tasks.Task<int> ReadAsyncCore(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken, bool useAsync);
                /*0x7048f38*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x70491e8*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x704929c*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x70490b8*/ System.Threading.Tasks.Task WriteAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x70492a8*/ void Write(byte[] buffer, int offset, int count);
                /*0x7048f80*/ void CheckWriteArguments(byte[] buffer, int offset, int count);
                /*0x7049318*/ System.Threading.Tasks.Task WriteAsyncCore(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken, bool useAsync);
                /*0x7049468*/ void Clear();
                /*0x7049478*/ void Dispose(bool disposing);
                /*0x7048194*/ void InitializeBuffer();
                /*0x7049528*/ System.Threading.SemaphoreSlim get_AsyncActiveSemaphore();

                struct <ReadAsyncInternal>d__37 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ byte[] buffer;
                    /*0x40*/ int offset;
                    /*0x44*/ int count;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ System.Threading.SemaphoreSlim <semaphore>5__2;
                    /*0x58*/ System.Threading.Tasks.ForceAsyncAwaiter <>u__1;
                    /*0x60*/ System.Runtime.CompilerServices.TaskAwaiter<int> <>u__2;

                    /*0x7049620*/ void MoveNext();
                    /*0x7049a9c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <ReadAsyncCore>d__42 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ int count;
                    /*0x34*/ int offset;
                    /*0x38*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ bool useAsync;
                    /*0x50*/ System.Threading.CancellationToken cancellationToken;
                    /*0x58*/ int <bytesToDeliver>5__2;
                    /*0x5c*/ int <currentOutputIndex>5__3;
                    /*0x60*/ int <numWholeBlocksInBytes>5__4;
                    /*0x68*/ byte[] <tempInputBuffer>5__5;
                    /*0x70*/ byte[] <tempOutputBuffer>5__6;
                    /*0x78*/ System.Runtime.CompilerServices.ValueTaskAwaiter<int> <>u__1;

                    /*0x7049b18*/ void MoveNext();
                    /*0x704ab70*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncInternal>d__46 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ byte[] buffer;
                    /*0x40*/ int offset;
                    /*0x44*/ int count;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ System.Threading.SemaphoreSlim <semaphore>5__2;
                    /*0x58*/ System.Threading.Tasks.ForceAsyncAwaiter <>u__1;
                    /*0x60*/ System.Runtime.CompilerServices.TaskAwaiter <>u__2;

                    /*0x704ace4*/ void MoveNext();
                    /*0x704b0bc*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncCore>d__49 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ int count;
                    /*0x34*/ int offset;
                    /*0x38*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ bool useAsync;
                    /*0x50*/ System.Threading.CancellationToken cancellationToken;
                    /*0x58*/ int <bytesToWrite>5__2;
                    /*0x5c*/ int <currentInputIndex>5__3;
                    /*0x60*/ int <numOutputBytes>5__4;
                    /*0x68*/ System.Runtime.CompilerServices.ValueTaskAwaiter <>u__1;
                    /*0x78*/ int <numWholeBlocksInBytes>5__5;
                    /*0x80*/ byte[] <tempOutputBuffer>5__6;

                    /*0x704b124*/ void MoveNext();
                    /*0x704c744*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                class <>c
                {
                    static /*0x0*/ System.Security.Cryptography.CryptoStream.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__54_0;

                    static /*0x704c7ac*/ <>c();
                    /*0x704c814*/ <>c();
                    /*0x704c81c*/ System.Threading.SemaphoreSlim <get_AsyncActiveSemaphore>b__54_0();
                }
            }

            enum CryptoStreamMode
            {
                Read = 0,
                Write = 1,
            }

            class CryptographicOperations
            {
                static /*0x704c878*/ void ZeroMemory(System.Span<byte> buffer);
            }

            class HashAlgorithm : System.IDisposable, System.Security.Cryptography.ICryptoTransform
            {
                /*0x10*/ bool _disposed;
                /*0x14*/ int HashSizeValue;
                /*0x18*/ byte[] HashValue;
                /*0x20*/ int State;

                static /*0x704c8e8*/ System.Security.Cryptography.HashAlgorithm Create(string hashName);
                /*0x704c8e0*/ HashAlgorithm();
                /*0x704c968*/ int get_HashSize();
                /*0x704c970*/ byte[] get_Hash();
                /*0x704caa4*/ byte[] ComputeHash(byte[] buffer);
                /*0x704cc04*/ byte[] ComputeHash(byte[] buffer, int offset, int count);
                /*0x704cb48*/ byte[] CaptureHashCodeAndReinitialize();
                /*0x704cd64*/ void Dispose();
                /*0x704cdd0*/ void Clear();
                /*0x704ce64*/ void Dispose(bool disposing);
                /*0x704ce74*/ int get_InputBlockSize();
                /*0x704ce7c*/ int get_OutputBlockSize();
                /*0x704ce84*/ bool get_CanTransformMultipleBlocks();
                /*0x704ce8c*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x704d06c*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x704cf28*/ void ValidateTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x380b9e8*/ byte[] HashFinal();
                /*0x380cb08*/ void Initialize();
            }

            class Aes : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x704d250*/ Aes();
                /*0x704d1ac*/ Aes();
            }

            class AsymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int KeySizeValue;
                /*0x18*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;

                /*0x704d3d4*/ AsymmetricAlgorithm();
                /*0x704d3dc*/ void Dispose();
                /*0x704d3e0*/ void Clear();
                /*0x704d44c*/ void Dispose(bool disposing);
                /*0x704d450*/ int get_KeySize();
                /*0x704d458*/ void set_KeySize(int value);
                /*0x704d554*/ void FromXmlString(string xmlString);
                /*0x704d58c*/ string ToXmlString(bool includePrivateParameters);
            }

            class AsymmetricSignatureDeformatter
            {
                /*0x704d5c4*/ AsymmetricSignatureDeformatter();
                /*0x380d83c*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x380d83c*/ void SetHashAlgorithm(string strName);
                /*0x380b32c*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class AsymmetricSignatureFormatter
            {
                /*0x704d5cc*/ AsymmetricSignatureFormatter();
            }

            enum CipherMode
            {
                CBC = 1,
                ECB = 2,
                OFB = 3,
                CFB = 4,
                CTS = 5,
            }

            enum PaddingMode
            {
                None = 1,
                PKCS7 = 2,
                Zeros = 3,
                ANSIX923 = 4,
                ISO10126 = 5,
            }

            class KeySizes
            {
                /*0x10*/ int m_minSize;
                /*0x14*/ int m_maxSize;
                /*0x18*/ int m_skipSize;

                static /*0x704d638*/ bool IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, int size);
                /*0x704d398*/ KeySizes(int minSize, int maxSize, int skipSize);
                /*0x704d5d4*/ int get_MinSize();
                /*0x704d5dc*/ int get_MaxSize();
                /*0x704d5e4*/ int get_SkipSize();
                /*0x704d5ec*/ bool IsLegal(int keySize);
            }

            class CryptographicException : System.SystemException
            {
                /*0x704d6c4*/ CryptographicException();
                /*0x704d52c*/ CryptographicException(string message);
                /*0x704d730*/ CryptographicException(string format, string insert);
                /*0x704d7c8*/ CryptographicException(string message, System.Exception inner);
                /*0x704d7f0*/ CryptographicException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class CryptographicUnexpectedOperationException : System.Security.Cryptography.CryptographicException
            {
                /*0x704d7f8*/ CryptographicUnexpectedOperationException();
                /*0x704ca5c*/ CryptographicUnexpectedOperationException(string message);
                /*0x704d81c*/ CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            enum CspProviderFlags
            {
                NoFlags = 0,
                UseMachineKeyStore = 1,
                UseDefaultKeyContainer = 2,
                UseNonExportableKey = 4,
                UseExistingKey = 8,
                UseArchivableKey = 16,
                UseUserProtectedKey = 32,
                NoPrompt = 64,
                CreateEphemeralKey = 128,
            }

            class CspParameters
            {
                /*0x10*/ int ProviderType;
                /*0x18*/ string ProviderName;
                /*0x20*/ string KeyContainerName;
                /*0x28*/ int KeyNumber;
                /*0x2c*/ int m_flags;

                /*0x704d910*/ CspParameters();
                /*0x704d92c*/ CspParameters(int dwTypeIn);
                /*0x704d924*/ CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
                /*0x704d93c*/ CspParameters(int providerType, string providerName, string keyContainerName, System.Security.Cryptography.CspProviderFlags flags);
                /*0x704d824*/ System.Security.Cryptography.CspProviderFlags get_Flags();
                /*0x704d82c*/ void set_Flags(System.Security.Cryptography.CspProviderFlags value);
            }

            class DES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x704e240*/ DES();
                static /*0x704e078*/ System.Security.Cryptography.DES Create();
                static /*0x704db28*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x704dc48*/ bool IsSemiWeakKey(byte[] rgbKey);
                static /*0x704e188*/ bool IsLegalKeySize(byte[] rgbKey);
                static /*0x704e1a8*/ ulong QuadWordFromBigEndian(byte[] block);
                /*0x704d9a8*/ DES();
                /*0x704da40*/ byte[] get_Key();
                /*0x704de54*/ void set_Key(byte[] value);
            }

            class DESCryptoServiceProvider : System.Security.Cryptography.DES
            {
                /*0x704e0c8*/ DESCryptoServiceProvider();
                /*0x704e380*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x704e4b0*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x704e5e0*/ void GenerateKey();
                /*0x704e6cc*/ void GenerateIV();
            }

            struct DSAParameters
            {
                /*0x10*/ byte[] P;
                /*0x18*/ byte[] Q;
                /*0x20*/ byte[] G;
                /*0x28*/ byte[] Y;
                /*0x30*/ byte[] J;
                /*0x38*/ byte[] X;
                /*0x40*/ byte[] Seed;
                /*0x48*/ int Counter;
            }

            class DSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x704e74c*/ System.Security.Cryptography.DSA Create();
                /*0x704e744*/ DSA();
                /*0x380b32c*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x704e7a0*/ void FromXmlString(string xmlString);
                /*0x704ee98*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
            }

            class DSASignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ System.Security.Cryptography.DSA _dsaKey;
                /*0x18*/ string _oid;

                /*0x704f300*/ DSASignatureDeformatter();
                /*0x704f388*/ DSASignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x704f480*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x704f570*/ void SetHashAlgorithm(string strName);
                /*0x704f634*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class DSASignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x10*/ string _oid;

                /*0x704f714*/ DSASignatureFormatter();
            }

            class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ int blockSizeValue;
                /*0x38*/ string m_hashName;
                /*0x40*/ System.Security.Cryptography.HashAlgorithm m_hash1;
                /*0x48*/ System.Security.Cryptography.HashAlgorithm m_hash2;
                /*0x50*/ byte[] m_inner;
                /*0x58*/ byte[] m_outer;
                /*0x60*/ bool m_hashing;

                static /*0x704fb34*/ System.Security.Cryptography.HMAC Create();
                /*0x704ff54*/ HMAC();
                /*0x704f79c*/ int get_BlockSizeValue();
                /*0x704f7a4*/ void set_BlockSizeValue(int value);
                /*0x704f7ac*/ void UpdateIOPadBuffers();
                /*0x704f938*/ void InitializeKey(byte[] key);
                /*0x704fa54*/ byte[] get_Key();
                /*0x704facc*/ void set_Key(byte[] value);
                /*0x704fbc4*/ void Initialize();
                /*0x704fc0c*/ void HashCore(byte[] rgb, int ib, int cb);
                /*0x704fc8c*/ byte[] HashFinal();
                /*0x704fdbc*/ void Dispose(bool disposing);
            }

            class HMACMD5 : System.Security.Cryptography.HMAC
            {
                /*0x704ff6c*/ HMACMD5();
                /*0x704ff90*/ HMACMD5(byte[] key);
            }

            class HMACRIPEMD160 : System.Security.Cryptography.HMAC
            {
                /*0x705006c*/ HMACRIPEMD160();
                /*0x7050090*/ HMACRIPEMD160(byte[] key);
            }

            class HMACSHA1 : System.Security.Cryptography.HMAC
            {
                /*0x704fb9c*/ HMACSHA1();
                /*0x70502a4*/ HMACSHA1(byte[] key);
                /*0x70502ac*/ HMACSHA1(byte[] key, bool useManagedSha1);
            }

            class HMACSHA256 : System.Security.Cryptography.HMAC
            {
                /*0x7050388*/ HMACSHA256();
                /*0x70503ac*/ HMACSHA256(byte[] key);
            }

            class HMACSHA384 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x7050488*/ HMACSHA384();
                /*0x70504ac*/ HMACSHA384(byte[] key);
                /*0x70505ac*/ int get_BlockSize();
            }

            class HMACSHA512 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x70505c4*/ HMACSHA512();
                /*0x70505e8*/ HMACSHA512(byte[] key);
                /*0x70506e8*/ int get_BlockSize();
            }

            interface ICryptoTransform : System.IDisposable
            {
                /*0x380b6a0*/ int get_InputBlockSize();
                /*0x380b6a0*/ int get_OutputBlockSize();
                /*0x380b128*/ bool get_CanTransformMultipleBlocks();
                int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
            {
                /*0x28*/ byte[] KeyValue;

                /*0x704ff64*/ KeyedHashAlgorithm();
                /*0x704ff04*/ void Dispose(bool disposing);
                /*0x7050700*/ byte[] get_Key();
                /*0x7050778*/ void set_Key(byte[] value);
            }

            class MACTripleDES : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ System.Security.Cryptography.ICryptoTransform m_encryptor;
                /*0x38*/ System.Security.Cryptography.CryptoStream _cs;
                /*0x40*/ System.Security.Cryptography.TailStream _ts;
                /*0x48*/ int m_bytesPerBlock;
                /*0x50*/ System.Security.Cryptography.TripleDES des;

                /*0x705087c*/ MACTripleDES();
                /*0x70509e0*/ void Initialize();
                /*0x70509ec*/ void HashCore(byte[] rgbData, int ibStart, int cbSize);
                /*0x7050c08*/ byte[] HashFinal();
                /*0x7050de4*/ void Dispose(bool disposing);
            }

            class TailStream : System.IO.Stream
            {
                /*0x28*/ byte[] _Buffer;
                /*0x30*/ int _BufferSize;
                /*0x34*/ int _BufferIndex;
                /*0x38*/ bool _BufferFull;

                /*0x7050b6c*/ TailStream(int bufferSize);
                /*0x7050ecc*/ void Clear();
                /*0x7050edc*/ void Dispose(bool disposing);
                /*0x7050d6c*/ byte[] get_Buffer();
                /*0x7050fb0*/ bool get_CanRead();
                /*0x7050fb8*/ bool get_CanSeek();
                /*0x7050fc0*/ bool get_CanWrite();
                /*0x7050fd0*/ long get_Length();
                /*0x7051028*/ long get_Position();
                /*0x7051080*/ void set_Position(long value);
                /*0x70510d8*/ void Flush();
                /*0x70510dc*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x7051134*/ void SetLength(long value);
                /*0x705118c*/ int Read(byte[] buffer, int offset, int count);
                /*0x70511e4*/ void Write(byte[] buffer, int offset, int count);
            }

            class MD5 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x7051374*/ System.Security.Cryptography.MD5 Create();
                /*0x7051354*/ MD5();
            }

            class RandomNumberGenerator : System.IDisposable
            {
                static /*0x70513d0*/ System.Security.Cryptography.RandomNumberGenerator Create();
                /*0x70513c8*/ RandomNumberGenerator();
                /*0x7051424*/ void Dispose();
                /*0x7051490*/ void Dispose(bool disposing);
                /*0x380d83c*/ void GetBytes(byte[] data);
                /*0x7051494*/ void GetBytes(byte[] data, int offset, int count);
                /*0x7051678*/ void GetBytes(System.Span<byte> data);
            }

            class RC2 : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x44*/ int EffectiveKeySizeValue;

                static /*0x70519a4*/ RC2();
                /*0x7051878*/ RC2();
                /*0x7051910*/ int get_EffectiveKeySize();
                /*0x705192c*/ int get_KeySize();
                /*0x7051934*/ void set_KeySize(int value);
            }

            class RC2CryptoServiceProvider : System.Security.Cryptography.RC2
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x48*/ bool m_use40bitSalt;

                static /*0x7051eec*/ RC2CryptoServiceProvider();
                /*0x7051aec*/ RC2CryptoServiceProvider();
                /*0x7051c54*/ int get_EffectiveKeySize();
                /*0x7051c5c*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7051d24*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7051dec*/ void GenerateKey();
                /*0x7051e74*/ void GenerateIV();
            }

            class Rijndael : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x7052060*/ Rijndael();
                /*0x7051fc8*/ Rijndael();
            }

            class RijndaelManaged : System.Security.Cryptography.Rijndael
            {
                /*0x70521b0*/ RijndaelManaged();
                /*0x7052288*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x7052390*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x70523a4*/ void GenerateKey();
                /*0x70523dc*/ void GenerateIV();
                /*0x705229c*/ System.Security.Cryptography.ICryptoTransform NewEncryptor(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int feedbackSize, System.Security.Cryptography.RijndaelManagedTransformMode encryptMode);
            }

            enum RijndaelManagedTransformMode
            {
                Encrypt = 0,
                Decrypt = 1,
            }

            class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                static /*0x0*/ byte[] s_Sbox;
                static /*0x8*/ int[] s_Rcon;
                static /*0x10*/ int[] s_T;
                static /*0x18*/ int[] s_TF;
                static /*0x20*/ int[] s_iT;
                static /*0x28*/ int[] s_iTF;
                /*0x10*/ System.Security.Cryptography.CipherMode m_cipherMode;
                /*0x14*/ System.Security.Cryptography.PaddingMode m_paddingValue;
                /*0x18*/ System.Security.Cryptography.RijndaelManagedTransformMode m_transformMode;
                /*0x1c*/ int m_blockSizeBits;
                /*0x20*/ int m_blockSizeBytes;
                /*0x24*/ int m_inputBlockSize;
                /*0x28*/ int m_outputBlockSize;
                /*0x30*/ int[] m_encryptKeyExpansion;
                /*0x38*/ int[] m_decryptKeyExpansion;
                /*0x40*/ int m_Nr;
                /*0x44*/ int m_Nb;
                /*0x48*/ int m_Nk;
                /*0x50*/ int[] m_encryptindex;
                /*0x58*/ int[] m_decryptindex;
                /*0x60*/ int[] m_IV;
                /*0x68*/ int[] m_lastBlockBuffer;
                /*0x70*/ byte[] m_depadBuffer;
                /*0x78*/ byte[] m_shiftRegister;

                static /*0x705528c*/ RijndaelManagedTransform();
                static /*0x7055284*/ int rot1(int val);
                static /*0x705527c*/ int rot2(int val);
                static /*0x705518c*/ int rot3(int val);
                static /*0x7055194*/ int SubWord(int a);
                static /*0x7055258*/ int MulX(int x);
                /*0x7052414*/ RijndaelManagedTransform(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, System.Security.Cryptography.PaddingMode PaddingValue, System.Security.Cryptography.RijndaelManagedTransformMode transformMode);
                /*0x7052ff0*/ void Dispose();
                /*0x7052ff8*/ void Dispose(bool disposing);
                /*0x7053120*/ int get_InputBlockSize();
                /*0x7053128*/ int get_OutputBlockSize();
                /*0x7053130*/ bool get_CanTransformMultipleBlocks();
                /*0x7053138*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x7054a88*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x7054d54*/ void Reset();
                /*0x705340c*/ int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x7053ff0*/ int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x7054dd8*/ void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp);
                /*0x7054fa4*/ void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp);
                /*0x7052a60*/ void GenerateKeyExpansion(byte[] rgbKey);
            }

            class RIPEMD160 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70554cc*/ System.Security.Cryptography.RIPEMD160 Create();
                /*0x70554ac*/ RIPEMD160();
            }

            class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateMD160;
                /*0x40*/ uint[] _blockDWords;

                static /*0x705591c*/ void MDTransform(uint* blockDWords, uint* state, byte* block);
                static /*0x7056fe8*/ uint F(uint x, uint y, uint z);
                static /*0x7056ff4*/ uint G(uint x, uint y, uint z);
                static /*0x7057004*/ uint H(uint x, uint y, uint z);
                static /*0x7057010*/ uint I(uint x, uint y, uint z);
                static /*0x7057020*/ uint J(uint x, uint y, uint z);
                /*0x7050164*/ RIPEMD160Managed();
                /*0x70555a0*/ void Initialize();
                /*0x70555e4*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x7055768*/ byte[] HashFinal();
                /*0x705551c*/ void InitializeState();
                /*0x70555e8*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x705576c*/ byte[] _EndHash();
            }

            struct RSAParameters
            {
                /*0x10*/ byte[] Exponent;
                /*0x18*/ byte[] Modulus;
                /*0x20*/ byte[] P;
                /*0x28*/ byte[] Q;
                /*0x30*/ byte[] DP;
                /*0x38*/ byte[] DQ;
                /*0x40*/ byte[] InverseQ;
                /*0x48*/ byte[] D;
            }

            class RSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x7057034*/ System.Security.Cryptography.RSA Create();
                /*0x705702c*/ RSA();
                /*0x70570cc*/ byte[] EncryptValue(byte[] rgb);
                /*0x7057124*/ void FromXmlString(string xmlString);
                /*0x70576d0*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
            }

            class RSACryptoServiceProvider : System.Security.Cryptography.RSA
            {
                static /*0x0*/ System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.RSAManaged rsa;

                static /*0x7057b00*/ bool get_UseMachineKeyStore();
                /*0x70570a0*/ RSACryptoServiceProvider();
                /*0x7057b8c*/ RSACryptoServiceProvider(System.Security.Cryptography.CspParameters parameters);
                /*0x7057b54*/ RSACryptoServiceProvider(int dwKeySize);
                /*0x7057b98*/ RSACryptoServiceProvider(int dwKeySize, System.Security.Cryptography.CspParameters parameters);
                /*0x7057bf4*/ void Common(int dwKeySize, bool parameters);
                /*0x7057e44*/ void Common(System.Security.Cryptography.CspParameters p);
                /*0x7057f6c*/ void Finalize();
                /*0x705800c*/ int get_KeySize();
                /*0x705802c*/ bool get_PublicOnly();
                /*0x7058048*/ byte[] EncryptValue(byte[] rgb);
                /*0x7058068*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x7058198*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x70581ec*/ string GetHashNameFromOID(string oid);
                /*0x70583ac*/ bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature);
                /*0x70584c8*/ void Dispose(bool disposing);
                /*0x7058518*/ void OnKeyGenerated(object sender, System.EventArgs e);
            }

            class SHA1 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x70585bc*/ System.Security.Cryptography.SHA1 Create();
                /*0x705859c*/ SHA1();
            }

            class SHA1Managed : System.Security.Cryptography.SHA1
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA1;
                /*0x40*/ uint[] _expandedBuffer;

                static /*0x7058b08*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x705903c*/ void SHAExpand(uint* x);
                /*0x7058610*/ SHA1Managed();
                /*0x7058788*/ void Initialize();
                /*0x70587cc*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x7058950*/ byte[] HashFinal();
                /*0x7058704*/ void InitializeState();
                /*0x70587d0*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x7058954*/ byte[] _EndHash();
            }

            class SHA256 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x7059098*/ System.Security.Cryptography.SHA256 Create();
                /*0x7059078*/ SHA256();
            }

            class SHA256Managed : System.Security.Cryptography.SHA256
            {
                static /*0x0*/ uint[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA256;
                /*0x40*/ uint[] _W;

                static /*0x7059e0c*/ SHA256Managed();
                static /*0x705965c*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x7059d4c*/ uint RotateRight(uint x, int n);
                static /*0x7059ccc*/ uint Ch(uint x, uint y, uint z);
                static /*0x7059d38*/ uint Maj(uint x, uint y, uint z);
                static /*0x7059d54*/ uint sigma_0(uint x);
                static /*0x7059db0*/ uint sigma_1(uint x);
                static /*0x7059cdc*/ uint Sigma_0(uint x);
                static /*0x7059c70*/ uint Sigma_1(uint x);
                static /*0x7059bc8*/ void SHA256Expand(uint* x);
                /*0x70590e8*/ SHA256Managed();
                /*0x7059294*/ void Initialize();
                /*0x70592d8*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x70594a4*/ byte[] HashFinal();
                /*0x70591d4*/ void InitializeState();
                /*0x70592dc*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x70594a8*/ byte[] _EndHash();
            }

            class SHA384 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x7059ecc*/ System.Security.Cryptography.SHA384 Create();
                /*0x7059eac*/ SHA384();
            }

            class SHA384Managed : System.Security.Cryptography.SHA384
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA384;
                /*0x40*/ ulong[] _W;

                static /*0x705aec0*/ SHA384Managed();
                static /*0x705a4d0*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x705ae00*/ ulong RotateRight(ulong x, int n);
                static /*0x705ad80*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x705adec*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x705ad90*/ ulong Sigma_0(ulong x);
                static /*0x705ad24*/ ulong Sigma_1(ulong x);
                static /*0x705ae08*/ ulong sigma_0(ulong x);
                static /*0x705ae64*/ ulong sigma_1(ulong x);
                static /*0x705ac7c*/ void SHA384Expand(ulong* x);
                /*0x7059f1c*/ SHA384Managed();
                /*0x705a108*/ void Initialize();
                /*0x705a14c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x705a318*/ byte[] HashFinal();
                /*0x705a008*/ void InitializeState();
                /*0x705a150*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x705a31c*/ byte[] _EndHash();
            }

            class SHA512 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x705af80*/ System.Security.Cryptography.SHA512 Create();
                /*0x705af60*/ SHA512();
            }

            class SHA512Managed : System.Security.Cryptography.SHA512
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA512;
                /*0x40*/ ulong[] _W;

                static /*0x705bd34*/ SHA512Managed();
                static /*0x705b584*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x705bc74*/ ulong RotateRight(ulong x, int n);
                static /*0x705bbf4*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x705bc60*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x705bc04*/ ulong Sigma_0(ulong x);
                static /*0x705bb98*/ ulong Sigma_1(ulong x);
                static /*0x705bc7c*/ ulong sigma_0(ulong x);
                static /*0x705bcd8*/ ulong sigma_1(ulong x);
                static /*0x705baf0*/ void SHA512Expand(ulong* x);
                /*0x705afd0*/ SHA512Managed();
                /*0x705b1bc*/ void Initialize();
                /*0x705b200*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x705b3cc*/ byte[] HashFinal();
                /*0x705b0bc*/ void InitializeState();
                /*0x705b204*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x705b3d0*/ byte[] _EndHash();
            }

            class SignatureDescription
            {
                /*0x10*/ string _strKey;
                /*0x18*/ string _strDigest;
                /*0x20*/ string _strFormatter;
                /*0x28*/ string _strDeformatter;

                /*0x705bdd4*/ SignatureDescription();
                /*0x705bddc*/ void set_KeyAlgorithm(string value);
                /*0x705bde4*/ void set_DigestAlgorithm(string value);
                /*0x705bdec*/ void set_FormatterAlgorithm(string value);
                /*0x705bdf4*/ void set_DeformatterAlgorithm(string value);
            }

            class RSAPKCS1SignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x30*/ string _hashAlgorithm;

                /*0x705bdfc*/ RSAPKCS1SignatureDescription(string hashAlgorithm, string digestAlgorithm);
            }

            class RSAPKCS1SHA1SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x705bed4*/ RSAPKCS1SHA1SignatureDescription();
            }

            class RSAPKCS1SHA256SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x705bf3c*/ RSAPKCS1SHA256SignatureDescription();
            }

            class RSAPKCS1SHA384SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x705bfa4*/ RSAPKCS1SHA384SignatureDescription();
            }

            class RSAPKCS1SHA512SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x705c00c*/ RSAPKCS1SHA512SignatureDescription();
            }

            class DSASignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x705c074*/ DSASignatureDescription();
            }

            class SymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int BlockSizeValue;
                /*0x14*/ int FeedbackSizeValue;
                /*0x18*/ byte[] IVValue;
                /*0x20*/ byte[] KeyValue;
                /*0x28*/ System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
                /*0x30*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
                /*0x38*/ int KeySizeValue;
                /*0x3c*/ System.Security.Cryptography.CipherMode ModeValue;
                /*0x40*/ System.Security.Cryptography.PaddingMode PaddingValue;

                static /*0x705ca88*/ System.Security.Cryptography.SymmetricAlgorithm Create(string algName);
                /*0x705c148*/ SymmetricAlgorithm();
                /*0x705c16c*/ void Dispose();
                /*0x705c1d8*/ void Clear();
                /*0x705c26c*/ void Dispose(bool disposing);
                /*0x705c2e4*/ int get_BlockSize();
                /*0x705c2ec*/ void set_BlockSize(int value);
                /*0x705c3e4*/ int get_FeedbackSize();
                /*0x705c3ec*/ byte[] get_IV();
                /*0x705c480*/ void set_IV(byte[] value);
                /*0x705c5e0*/ byte[] get_Key();
                /*0x705c674*/ void set_Key(byte[] value);
                /*0x705c88c*/ System.Security.Cryptography.KeySizes[] get_LegalKeySizes();
                /*0x705c904*/ int get_KeySize();
                /*0x705c90c*/ void set_KeySize(int value);
                /*0x705c990*/ System.Security.Cryptography.CipherMode get_Mode();
                /*0x705c998*/ void set_Mode(System.Security.Cryptography.CipherMode value);
                /*0x705ca0c*/ System.Security.Cryptography.PaddingMode get_Padding();
                /*0x705ca14*/ void set_Padding(System.Security.Cryptography.PaddingMode value);
                /*0x705c7f0*/ bool ValidKeySize(int bitLength);
                /*0x705cb80*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor();
                /*0x380bcbc*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x705cbd0*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor();
                /*0x380bcbc*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x380cb08*/ void GenerateKey();
                /*0x380cb08*/ void GenerateIV();
            }

            class TripleDES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x705d3f0*/ TripleDES();
                static /*0x705d0bc*/ System.Security.Cryptography.TripleDES Create();
                static /*0x705cd8c*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x705d258*/ bool EqualBytes(byte[] rgbKey, int start1, int start2, int count);
                static /*0x705d16c*/ bool IsLegalKeySize(byte[] rgbKey);
                /*0x705cc20*/ TripleDES();
                /*0x705ccc4*/ byte[] get_Key();
                /*0x705cec0*/ void set_Key(byte[] value);
            }

            class TripleDESCryptoServiceProvider : System.Security.Cryptography.TripleDES
            {
                /*0x705d10c*/ TripleDESCryptoServiceProvider();
                /*0x705d538*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x705d644*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x705d750*/ void GenerateKey();
                /*0x705d8cc*/ void GenerateIV();
            }

            class Utils
            {
                static /*0x0*/ System.Security.Cryptography.RNGCryptoServiceProvider _rng;

                static /*0x705d824*/ System.Security.Cryptography.RNGCryptoServiceProvider get_StaticRandomNumberGenerator();
                static /*0x705d9b0*/ byte[] GenerateRandom(int keySize);
                static /*0x705d530*/ bool HasAlgorithm(int dwCalg, int dwKeySize);
                static /*0x705da20*/ string DiscardWhiteSpaces(string inputBuffer);
                static /*0x705da3c*/ string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount);
                static /*0x705dbb8*/ int ConvertByteArrayToInt(byte[] input);
                static /*0x705dc10*/ byte[] ConvertIntToByteArray(int dwInput);
                static /*0x705d190*/ byte[] FixupKeyParity(byte[] key);
                static /*0x705dd34*/ void DWORDFromLittleEndian(uint* x, int digits, byte* block);
                static /*0x705dd84*/ void DWORDToLittleEndian(byte[] block, uint[] x, int digits);
                static /*0x7058fe8*/ void DWORDFromBigEndian(uint* x, int digits, byte* block);
                static /*0x7058ef4*/ void DWORDToBigEndian(byte[] block, uint[] x, int digits);
                static /*0x705abf8*/ void QuadWordFromBigEndian(ulong* x, int digits, byte* block);
                static /*0x705aa3c*/ void QuadWordToBigEndian(byte[] block, ulong[] x, int digits);
                static /*0x705de78*/ bool _ProduceLegacyHmacValues();
            }

            class CryptoConfig
            {
                static /*0x0*/ object lockObject;
                static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Type> algorithms;

                static /*0x7060b84*/ CryptoConfig();
                static /*0x705cb28*/ object CreateFromName(string name);
                static /*0x705de80*/ object CreateFromName(string name, object[] args);
                static /*0x705fe48*/ string MapNameToOID(string name);
                static /*0x706061c*/ byte[] EncodeOID(string str);
                static /*0x7060a1c*/ byte[] EncodeLongNumber(long x);
                static /*0x70586fc*/ bool get_AllowOnlyFipsAlgorithms();
            }

            class DESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ int KEY_BIT_SIZE;
                static /*0x4*/ int KEY_BYTE_SIZE;
                static /*0x8*/ int BLOCK_BIT_SIZE;
                static /*0xc*/ int BLOCK_BYTE_SIZE;
                static /*0x10*/ uint[] spBoxes;
                static /*0x18*/ byte[] PC1;
                static /*0x20*/ byte[] leftRotTotal;
                static /*0x28*/ byte[] PC2;
                static /*0x30*/ uint[] ipTab;
                static /*0x38*/ uint[] fpTab;
                /*0x58*/ byte[] keySchedule;
                /*0x60*/ byte[] byteBuff;
                /*0x68*/ uint[] dwordBuff;

                static /*0x7061c48*/ DESTransform();
                static /*0x70614cc*/ void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap);
                static /*0x70617a4*/ void BSwap(byte[] byteBuff);
                static /*0x7060e44*/ byte[] GetStrongKey();
                /*0x7060c00*/ DESTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv);
                /*0x706129c*/ uint CipherFunct(uint r, int n);
                /*0x7060f1c*/ void SetKey(byte[] key);
                /*0x706181c*/ void ProcessBlock(byte[] input, byte[] output);
                /*0x7061ba4*/ void ECB(byte[] input, byte[] output);
            }

            class DSACryptoServiceProvider : System.Security.Cryptography.DSA
            {
                static /*0x0*/ bool useMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.DSAManaged dsa;

                /*0x705fd40*/ DSACryptoServiceProvider();
                /*0x7061e74*/ DSACryptoServiceProvider(int dwKeySize);
                /*0x7061eac*/ void Common(int dwKeySize, bool parameters);
                /*0x70620fc*/ void Finalize();
                /*0x706219c*/ int get_KeySize();
                /*0x70621bc*/ bool get_PublicOnly();
                /*0x70621d8*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x7062284*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x70622d8*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x70622f8*/ void Dispose(bool disposing);
                /*0x706234c*/ void OnKeyGenerated(object sender, System.EventArgs e);
            }

            class MD5CryptoServiceProvider : System.Security.Cryptography.MD5
            {
                static /*0x0*/ uint[] K;
                /*0x28*/ uint[] _H;
                /*0x30*/ uint[] buff;
                /*0x38*/ ulong count;
                /*0x40*/ byte[] _ProcessingBuffer;
                /*0x48*/ int _ProcessingBufferCount;

                static /*0x7063640*/ MD5CryptoServiceProvider();
                /*0x705fd6c*/ MD5CryptoServiceProvider();
                /*0x70623d0*/ void Finalize();
                /*0x7062470*/ void Dispose(bool disposing);
                /*0x70624e0*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x7063258*/ byte[] HashFinal();
                /*0x70634dc*/ void Initialize();
                /*0x70625e0*/ void ProcessBlock(byte[] inputBuffer, int inputOffset);
                /*0x7063330*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x7063550*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class RC2Transform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ byte[] pitable;
                /*0x58*/ ushort R0;
                /*0x5a*/ ushort R1;
                /*0x5c*/ ushort R2;
                /*0x5e*/ ushort R3;
                /*0x60*/ ushort[] K;
                /*0x68*/ int j;

                static /*0x70645ac*/ RC2Transform();
                /*0x70636e0*/ RC2Transform(System.Security.Cryptography.RC2 rc2Algo, bool encryption, byte[] key, byte[] iv);
                /*0x7063c3c*/ void ECB(byte[] input, byte[] output);
            }

            class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator
            {
                static /*0x0*/ object _lock;
                /*0x10*/ nint _handle;

                static /*0x706464c*/ RNGCryptoServiceProvider();
                static /*0x70646dc*/ bool RngOpen();
                static /*0x70646e0*/ nint RngInitialize(byte* seed, nint seed_length);
                static /*0x7064750*/ nint RngGetBytes(nint handle, byte* data, nint data_length);
                static /*0x7064754*/ void RngClose(nint handle);
                /*0x705d940*/ RNGCryptoServiceProvider();
                /*0x70646e4*/ void Check();
                /*0x7064758*/ void GetBytes(byte[] data);
                /*0x7064970*/ void Finalize();
                /*0x7064a4c*/ void Dispose(bool disposing);
            }

            class RSAPKCS1SignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ System.Security.Cryptography.RSA rsa;
                /*0x18*/ string hashName;

                /*0x705fe38*/ RSAPKCS1SignatureDeformatter();
                /*0x7064a58*/ RSAPKCS1SignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x7064a8c*/ void SetHashAlgorithm(string strName);
                /*0x7064ae8*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x7064bd8*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class RSAPKCS1SignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x705fe40*/ RSAPKCS1SignatureFormatter();
            }

            class SHA1Internal
            {
                /*0x10*/ uint[] _H;
                /*0x18*/ ulong count;
                /*0x20*/ byte[] _ProcessingBuffer;
                /*0x28*/ int _ProcessingBufferCount;
                /*0x30*/ uint[] buff;

                static /*0x7065718*/ void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset);
                static /*0x7065db8*/ void FillBuff(uint[] buff);
                /*0x7064d28*/ SHA1Internal();
                /*0x7064e70*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x7065484*/ byte[] HashFinal();
                /*0x7064de8*/ void Initialize();
                /*0x7064f70*/ void ProcessBlock(byte[] inputBuffer, uint inputOffset);
                /*0x706555c*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x7065f3c*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class SHA1CryptoServiceProvider : System.Security.Cryptography.SHA1
            {
                /*0x28*/ System.Security.Cryptography.SHA1Internal sha;

                /*0x706602c*/ SHA1CryptoServiceProvider();
                /*0x7066098*/ void Finalize();
                /*0x7066138*/ void Dispose(bool disposing);
                /*0x7066144*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x706616c*/ byte[] HashFinal();
                /*0x7066190*/ void Initialize();
            }

            class TripleDESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                /*0x58*/ System.Security.Cryptography.DESTransform E1;
                /*0x60*/ System.Security.Cryptography.DESTransform D2;
                /*0x68*/ System.Security.Cryptography.DESTransform E3;
                /*0x70*/ System.Security.Cryptography.DESTransform D1;
                /*0x78*/ System.Security.Cryptography.DESTransform E2;
                /*0x80*/ System.Security.Cryptography.DESTransform D3;

                static /*0x70664ec*/ byte[] GetStrongKey();
                /*0x70661ac*/ TripleDESTransform(System.Security.Cryptography.TripleDES algo, bool encryption, byte[] key, byte[] iv);
                /*0x7066594*/ void ECB(byte[] input, byte[] output);
            }

            class CryptoConfigForwarder
            {
                static /*0x70666d0*/ object CreateFromName(string name);
            }

            namespace X509Certificates
            {
                enum X509ContentType
                {
                    Unknown = 0,
                    Cert = 1,
                    SerializedCert = 2,
                    Pfx = 3,
                    Pkcs12 = 3,
                    SerializedStore = 4,
                    Pkcs7 = 5,
                    Authenticode = 6,
                }

                enum X509KeyStorageFlags
                {
                    DefaultKeySet = 0,
                    UserKeySet = 1,
                    MachineKeySet = 2,
                    Exportable = 4,
                    UserProtected = 8,
                    PersistKeySet = 16,
                    EphemeralKeySet = 32,
                }

                class X509Certificate : System.IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
                {
                    /*0x10*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl impl;
                    /*0x18*/ byte[] lazyCertHash;
                    /*0x20*/ byte[] lazySerialNumber;
                    /*0x28*/ string lazyIssuer;
                    /*0x30*/ string lazySubject;
                    /*0x38*/ string lazyKeyAlgorithm;
                    /*0x40*/ byte[] lazyKeyAlgorithmParameters;
                    /*0x48*/ byte[] lazyPublicKey;
                    /*0x50*/ System.DateTime lazyNotBefore;
                    /*0x58*/ System.DateTime lazyNotAfter;

                    static /*0x706775c*/ string FormatDate(System.DateTime date);
                    /*0x70668b0*/ X509Certificate();
                    /*0x7066924*/ X509Certificate(byte[] data);
                    /*0x7066a84*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x7066b44*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate cert);
                    /*0x7066cd8*/ X509Certificate(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7066728*/ void Reset();
                    /*0x7066d14*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7066d4c*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                    /*0x7066d84*/ string get_Issuer();
                    /*0x7066df0*/ string get_Subject();
                    /*0x7066e54*/ void Dispose();
                    /*0x7066e64*/ void Dispose(bool disposing);
                    /*0x7066e78*/ bool Equals(object obj);
                    /*0x7066f0c*/ bool Equals(System.Security.Cryptography.X509Certificates.X509Certificate other);
                    /*0x7067064*/ byte[] GetCertHash();
                    /*0x70670e4*/ string GetCertHashString();
                    /*0x7067088*/ byte[] GetRawCertHash();
                    /*0x7067108*/ byte[] GetRawCertData();
                    /*0x706713c*/ int GetHashCode();
                    /*0x70671ac*/ string GetKeyAlgorithm();
                    /*0x7067214*/ byte[] GetKeyAlgorithmParameters();
                    /*0x7067280*/ byte[] GetPublicKey();
                    /*0x70672ec*/ byte[] GetSerialNumber();
                    /*0x7067354*/ string GetSerialNumberString();
                    /*0x7067004*/ byte[] GetRawSerialNumber();
                    /*0x7067378*/ string ToString();
                    /*0x706738c*/ string ToString(bool fVerbose);
                    /*0x70678a4*/ System.DateTime GetNotAfter();
                    /*0x70676c0*/ System.DateTime GetNotBefore();
                    /*0x7067940*/ void ImportHandle(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x7067978*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl get_Impl();
                    /*0x7067980*/ bool get_IsValid();
                    /*0x7066de8*/ void ThrowIfInvalid();
                }

                class X509CertificateImpl : System.IDisposable
                {
                    /*0x7067d50*/ X509CertificateImpl();
                    /*0x380b128*/ bool get_IsValid();
                    /*0x70679d8*/ void ThrowIfContextInvalid();
                    /*0x380b9e8*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Clone();
                    /*0x380b9e8*/ string get_Issuer();
                    /*0x380b9e8*/ string get_Subject();
                    /*0x380b9e8*/ byte[] get_RawData();
                    /*0x380b538*/ System.DateTime get_NotAfter();
                    /*0x380b538*/ System.DateTime get_NotBefore();
                    /*0x380b9e8*/ byte[] get_Thumbprint();
                    /*0x7067a94*/ int GetHashCode();
                    /*0x380b9e8*/ string get_KeyAlgorithm();
                    /*0x380b9e8*/ byte[] get_KeyAlgorithmParameters();
                    /*0x380b9e8*/ byte[] get_PublicKeyValue();
                    /*0x380b9e8*/ byte[] get_SerialNumber();
                    /*0x380b128*/ bool get_HasPrivateKey();
                    /*0x380b9e8*/ System.Security.Cryptography.RSA GetRSAPrivateKey();
                    /*0x380b9e8*/ System.Security.Cryptography.DSA GetDSAPrivateKey();
                    /*0x7067b1c*/ bool Equals(object obj);
                    /*0x7066840*/ void Dispose();
                    /*0x7067ca8*/ void Dispose(bool disposing);
                    /*0x7067cac*/ void Finalize();
                }

                class X509Helper
                {
                    static /*0x7067d58*/ Mono.ISystemCertificateProvider get_CertificateProvider();
                    static /*0x7066c28*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate cert);
                    static /*0x7066b30*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x70676ac*/ bool IsValid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x7067998*/ void ThrowIfContextInvalid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x7067a14*/ System.Exception GetInvalidContextException();
                    static /*0x70669d8*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData);
                    static /*0x7067e20*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                }
            }
        }

        namespace Principal
        {
            interface IIdentity
            {
                /*0x380b9e8*/ string get_Name();
                /*0x380b9e8*/ string get_AuthenticationType();
            }

            interface IPrincipal
            {
            }

            enum TokenImpersonationLevel
            {
                None = 0,
                Anonymous = 1,
                Identification = 2,
                Impersonation = 3,
                Delegation = 4,
            }

            class IdentityReference
            {
            }

            class SecurityIdentifier : System.Security.Principal.IdentityReference
            {
                static /*0x0*/ int MaxBinaryLength;
                static /*0x4*/ int MinBinaryLength;
                /*0x10*/ byte[] buffer;

                static /*0x7067fc4*/ SecurityIdentifier();
                /*0x7067ee8*/ int get_BinaryLength();
                /*0x7067f04*/ void GetBinaryForm(byte[] binaryForm, int offset);
            }

            enum WindowsAccountType
            {
                Normal = 0,
                Guest = 1,
                System = 2,
                Anonymous = 3,
            }

            class WindowsIdentity : System.Security.Claims.ClaimsIdentity, System.Security.Principal.IIdentity, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.IDisposable
            {
                static /*0x0*/ nint invalidWindows;
                /*0x78*/ nint _token;
                /*0x80*/ string _type;
                /*0x88*/ System.Security.Principal.WindowsAccountType _account;
                /*0x8c*/ bool _authenticated;
                /*0x90*/ string _name;
                /*0x98*/ System.Runtime.Serialization.SerializationInfo _info;

                static /*0x7068898*/ WindowsIdentity();
                static /*0x7068240*/ System.Security.Principal.WindowsIdentity GetCurrent();
                static /*0x70682bc*/ nint GetCurrentToken();
                static /*0x7068428*/ string GetTokenName(nint token);
                /*0x7068014*/ WindowsIdentity(nint userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
                /*0x70681f4*/ WindowsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7068238*/ void Dispose();
                /*0x70682c0*/ System.Security.Principal.WindowsImpersonationContext Impersonate();
                /*0x70683a4*/ string get_AuthenticationType();
                /*0x70683ac*/ string get_Name();
                /*0x706842c*/ System.Security.Principal.SecurityIdentifier get_User();
                /*0x7068464*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                /*0x706873c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70680ac*/ void SetToken(nint token);
            }

            class WindowsImpersonationContext : System.IDisposable
            {
                /*0x10*/ nint _token;
                /*0x18*/ bool undo;

                static /*0x70689bc*/ bool CloseToken(nint token);
                static /*0x70688e0*/ nint DuplicateToken(nint token);
                static /*0x70688e4*/ bool SetCurrentToken(nint token);
                static /*0x70689b8*/ bool RevertToSelf();
                /*0x706831c*/ WindowsImpersonationContext(nint token);
                /*0x70688e8*/ void Dispose();
                /*0x70688f8*/ void Undo();
            }
        }

        namespace Claims
        {
            class Claim
            {
                /*0x10*/ string m_issuer;
                /*0x18*/ string m_originalIssuer;
                /*0x20*/ string m_type;
                /*0x28*/ string m_value;
                /*0x30*/ string m_valueType;
                /*0x38*/ byte[] m_userSerializationData;
                /*0x40*/ System.Collections.Generic.Dictionary<string, string> m_properties;
                /*0x48*/ object m_propertyLock;
                /*0x50*/ System.Security.Claims.ClaimsIdentity m_subject;

                /*0x70689c0*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
                /*0x70689e0*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject, string propertyKey, string propertyValue);
                /*0x7068da0*/ Claim(System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
                /*0x7069104*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x7068c6c*/ System.Collections.Generic.IDictionary<string, string> get_Properties();
                /*0x7069164*/ System.Security.Claims.ClaimsIdentity get_Subject();
                /*0x706916c*/ void set_Subject(System.Security.Claims.ClaimsIdentity value);
                /*0x7069174*/ string get_Type();
                /*0x706917c*/ string get_Value();
                /*0x7069184*/ System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity identity);
                /*0x70691ec*/ string ToString();
            }

            class ClaimsIdentity : System.Security.Principal.IIdentity
            {
                /*0x10*/ byte[] m_userSerializationData;
                /*0x18*/ System.Collections.Generic.List<System.Security.Claims.Claim> m_instanceClaims;
                /*0x20*/ System.Collections.ObjectModel.Collection<System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>> m_externalClaims;
                /*0x28*/ string m_nameType;
                /*0x30*/ string m_roleType;
                /*0x38*/ string m_version;
                /*0x40*/ System.Security.Claims.ClaimsIdentity m_actor;
                /*0x48*/ string m_authenticationType;
                /*0x50*/ object m_bootstrapContext;
                /*0x58*/ string m_label;
                /*0x60*/ string m_serializedNameType;
                /*0x68*/ string m_serializedRoleType;
                /*0x70*/ string m_serializedClaims;

                /*0x7068090*/ ClaimsIdentity();
                /*0x7069264*/ ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x7069280*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
                /*0x7069288*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType, bool checkAuthType);
                /*0x7069f04*/ ClaimsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x706a93c*/ string get_AuthenticationType();
                /*0x706a944*/ System.Security.Claims.ClaimsIdentity get_Actor();
                /*0x706a94c*/ void set_Actor(System.Security.Claims.ClaimsIdentity value);
                /*0x706a9d8*/ System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims();
                /*0x706aa88*/ string get_Name();
                /*0x706aaac*/ System.Security.Claims.ClaimsIdentity Clone();
                /*0x70699e4*/ void SafeAddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x7069dd8*/ void SafeAddClaim(System.Security.Claims.Claim claim);
                /*0x706ac30*/ System.Security.Claims.Claim FindFirst(string type);
                /*0x706af8c*/ void OnSerializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x706b270*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x706b6f0*/ void OnDeserializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x706b7e0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x706b370*/ void DeserializeClaims(string serializedClaims);
                /*0x706b01c*/ string SerializeClaims();
                /*0x70699a8*/ bool IsCircular(System.Security.Claims.ClaimsIdentity subject);
                /*0x706a0cc*/ void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool useContext);

                class <get_Claims>d__51 : System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Security.Claims.Claim <>2__current;
                    /*0x20*/ int <>l__initialThreadId;
                    /*0x28*/ System.Security.Claims.ClaimsIdentity <>4__this;
                    /*0x30*/ int <i>5__2;
                    /*0x38*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> <>7__wrap2;

                    /*0x706aa54*/ <get_Claims>d__51(int <>1__state);
                    /*0x706bdb0*/ void System.IDisposable.Dispose();
                    /*0x706bdcc*/ bool MoveNext();
                    /*0x706c1d8*/ void <>m__Finally1();
                    /*0x706c288*/ System.Security.Claims.Claim System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>.get_Current();
                    /*0x706c290*/ void System.Collections.IEnumerator.Reset();
                    /*0x706c2c8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x706c2d0*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>.GetEnumerator();
                    /*0x706c374*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                }
            }
        }
    }

    namespace Runtime
    {
        class AmbiguousImplementationException : System.Exception
        {
            /*0x706c378*/ AmbiguousImplementationException();
            /*0x706c3f8*/ AmbiguousImplementationException(string message);
            /*0x706c470*/ AmbiguousImplementationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class RuntimeImports
        {
            static /*0x706c4f0*/ void RhZeroMemory(ref byte b, ulong byteLength);
            static /*0x706c4f4*/ void ZeroMemory(void* p, uint byteLength);
            static /*0x706c4f8*/ void Memmove(byte* dest, byte* src, uint len);
            static /*0x706c4fc*/ void Memmove_wbarrier(byte* dest, byte* src, uint len, nint type_handle);
        }

        namespace Remoting
        {
            class ChannelInfo : System.Runtime.Remoting.IChannelInfo
            {
                /*0x10*/ object[] channelData;

                /*0x706c500*/ ChannelInfo();
                /*0x706c570*/ ChannelInfo(object remoteChannelData);
                /*0x706c62c*/ object[] get_ChannelData();
            }

            class ActivatedClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ string applicationUrl;
                /*0x28*/ System.Type obj_type;

                /*0x706c634*/ ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl);
                /*0x706c77c*/ string get_ApplicationUrl();
                /*0x706c784*/ System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes();
                /*0x706c78c*/ System.Type get_ObjectType();
                /*0x706c794*/ string ToString();
            }

            class ActivatedServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;

                /*0x706c7a8*/ ActivatedServiceTypeEntry(string typeName, string assemblyName);
                /*0x706c8c4*/ System.Type get_ObjectType();
                /*0x706c8cc*/ string ToString();
            }

            enum CustomErrorsModes
            {
                On = 0,
                Off = 1,
                RemoteOnly = 2,
            }

            class EnvoyInfo : System.Runtime.Remoting.IEnvoyInfo
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink envoySinks;

                /*0x706c8dc*/ EnvoyInfo(System.Runtime.Remoting.Messaging.IMessageSink sinks);
                /*0x706c90c*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IChannelInfo
            {
                /*0x380b9e8*/ object[] get_ChannelData();
            }

            interface IEnvoyInfo
            {
                /*0x380b9e8*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IRemotingTypeInfo
            {
                /*0x380b9e8*/ string get_TypeName();
                /*0x380b32c*/ bool CanCastTo(System.Type fromType, object o);
            }

            class Identity
            {
                /*0x10*/ string _objectUri;
                /*0x18*/ System.Runtime.Remoting.Messaging.IMessageSink _channelSink;
                /*0x20*/ System.Runtime.Remoting.Messaging.IMessageSink _envoySink;
                /*0x28*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _clientDynamicProperties;
                /*0x30*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _serverDynamicProperties;
                /*0x38*/ System.Runtime.Remoting.ObjRef _objRef;
                /*0x40*/ bool _disposed;

                /*0x706c914*/ Identity(string objectUri);
                /*0x380bb68*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x706c944*/ System.Runtime.Remoting.Messaging.IMessageSink get_ChannelSink();
                /*0x706c94c*/ void set_ChannelSink(System.Runtime.Remoting.Messaging.IMessageSink value);
                /*0x706c954*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySink();
                /*0x706c95c*/ string get_ObjectUri();
                /*0x706c964*/ void set_ObjectUri(string value);
                /*0x706c96c*/ bool get_IsConnected();
                /*0x706c97c*/ bool get_Disposed();
                /*0x706c984*/ void set_Disposed(bool value);
                /*0x706c990*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection get_ClientDynamicProperties();
                /*0x706ca68*/ bool get_HasServerDynamicSinks();
                /*0x706cad8*/ void NotifyClientDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                /*0x706d1b4*/ void NotifyServerDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
            }

            class ClientIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.WeakReference _proxyReference;

                /*0x706d238*/ ClientIdentity(string objectUri, System.Runtime.Remoting.ObjRef objRef);
                /*0x706d36c*/ System.MarshalByRefObject get_ClientProxy();
                /*0x706d3f4*/ void set_ClientProxy(System.MarshalByRefObject value);
                /*0x706d464*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x706d46c*/ string get_TargetUri();
            }

            class InternalRemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable _soapAttributes;

                static /*0x706d99c*/ InternalRemotingServices();
                static /*0x706d48c*/ System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute(object reflectionObject);
            }

            class ObjRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static /*0x0*/ int MarshalledObjectRef;
                static /*0x4*/ int WellKnowObjectRef;
                /*0x10*/ System.Runtime.Remoting.IChannelInfo channel_info;
                /*0x18*/ string uri;
                /*0x20*/ System.Runtime.Remoting.IRemotingTypeInfo typeInfo;
                /*0x28*/ System.Runtime.Remoting.IEnvoyInfo envoyInfo;
                /*0x30*/ int flags;
                /*0x38*/ System.Type _serverType;

                static /*0x706ec08*/ ObjRef();
                /*0x706da18*/ ObjRef();
                /*0x706da90*/ ObjRef(string uri, System.Runtime.Remoting.IChannelInfo cinfo);
                /*0x706dc8c*/ ObjRef(System.Type type, string url, object remoteChannelData);
                /*0x706e1c4*/ ObjRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x706dad4*/ System.Runtime.Remoting.ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo);
                /*0x706dc14*/ byte[] SerializeType();
                /*0x706e75c*/ bool get_IsReferenceToWellKnow();
                /*0x706e7c4*/ System.Runtime.Remoting.IChannelInfo get_ChannelInfo();
                /*0x706e7cc*/ System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo();
                /*0x706e7d4*/ void set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo value);
                /*0x706e7dc*/ System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo();
                /*0x706e7e4*/ void set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo value);
                /*0x706e7ec*/ string get_URI();
                /*0x706e7f4*/ void set_URI(string value);
                /*0x706e7fc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x706e9c8*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x706da34*/ void UpdateChannelInfo();
                /*0x706eac4*/ System.Type get_ServerType();
            }

            class RemotingConfiguration
            {
                static /*0x0*/ string applicationID;
                static /*0x8*/ string applicationName;
                static /*0x10*/ string processGuid;
                static /*0x18*/ bool defaultConfigRead;
                static /*0x19*/ bool defaultDelayedConfigRead;
                static /*0x1c*/ System.Runtime.Remoting.CustomErrorsModes _errorMode;
                static /*0x20*/ System.Collections.Hashtable wellKnownClientEntries;
                static /*0x28*/ System.Collections.Hashtable activatedClientEntries;
                static /*0x30*/ System.Collections.Hashtable wellKnownServiceEntries;
                static /*0x38*/ System.Collections.Hashtable activatedServiceEntries;
                static /*0x40*/ System.Collections.Hashtable channelTemplates;
                static /*0x48*/ System.Collections.Hashtable clientProviderTemplates;
                static /*0x50*/ System.Collections.Hashtable serverProviderTemplates;

                static /*0x7072628*/ RemotingConfiguration();
                static /*0x706ec58*/ string get_ApplicationName();
                static /*0x706ecb0*/ void set_ApplicationName(string value);
                static /*0x706ed10*/ string get_ProcessId();
                static /*0x706edbc*/ void LoadDefaultDelayedChannels();
                static /*0x706f1f4*/ bool IsActivationAllowed(System.Type svrType);
                static /*0x706f338*/ System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(System.Type svrType);
                static /*0x706f4c4*/ System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(System.Type svrType);
                static /*0x706f650*/ void RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry entry);
                static /*0x706f8d0*/ void RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry entry);
                static /*0x706fa14*/ void RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x706fc94*/ void RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry entry);
                static /*0x706ff10*/ void RegisterChannelTemplate(System.Runtime.Remoting.ChannelData channel);
                static /*0x706ff8c*/ void RegisterClientProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x7070008*/ void RegisterServerProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x7070084*/ void RegisterChannels(System.Collections.ArrayList channels, bool onlyDelayed);
                static /*0x7071e44*/ void RegisterTypes(System.Collections.ArrayList types);
                static /*0x7072360*/ bool CustomErrorsEnabled(bool isLocalRequest);
                static /*0x70723f4*/ void SetCustomErrorsMode(string mode);
            }

            class ConfigHandler : Mono.Xml.SmallXmlParser.IContentHandler
            {
                /*0x10*/ System.Collections.ArrayList typeEntries;
                /*0x18*/ System.Collections.ArrayList channelInstances;
                /*0x20*/ System.Runtime.Remoting.ChannelData currentChannel;
                /*0x28*/ System.Collections.Stack currentProviderData;
                /*0x30*/ string currentClientUrl;
                /*0x38*/ string appName;
                /*0x40*/ string currentXmlPath;
                /*0x48*/ bool onlyDelayedChannels;

                /*0x706f128*/ ConfigHandler(bool onlyDelayedChannels);
                /*0x70727e4*/ void ValidatePath(string element, string[] paths);
                /*0x70728c0*/ bool CheckPath(string path);
                /*0x70729a0*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x70729a4*/ void OnProcessingInstruction(string name, string text);
                /*0x70729a8*/ void OnIgnorableWhitespace(string s);
                /*0x70729ac*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7072b6c*/ void ParseElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7075480*/ void OnEndElement(string name);
                /*0x7073af8*/ void ReadCustomProviderData(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7073e58*/ void ReadLifetine(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7075518*/ System.TimeSpan ParseTime(string s);
                /*0x70743a0*/ void ReadChannel(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x7074788*/ System.Runtime.Remoting.ProviderData ReadProvider(string name, Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x7074e74*/ void ReadClientActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7074fb8*/ void ReadServiceActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7074b9c*/ void ReadClientWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7074c90*/ void ReadServiceWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7075084*/ void ReadInteropXml(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isElement);
                /*0x7075214*/ void ReadPreload(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x7075b10*/ string GetNotNull(Mono.Xml.SmallXmlParser.IAttrList attrs, string name);
                /*0x7075c40*/ string ExtractAssembly(ref string type);
                /*0x7076890*/ void OnChars(string ch);
                /*0x7076894*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
            }

            class ChannelData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ string DelayLoadAsClientChannel;
                /*0x30*/ System.Collections.ArrayList _serverProviders;
                /*0x38*/ System.Collections.ArrayList _clientProviders;
                /*0x40*/ System.Collections.Hashtable _customProperties;

                /*0x7075960*/ ChannelData();
                /*0x7071640*/ System.Collections.ArrayList get_ServerProviders();
                /*0x7071dd4*/ System.Collections.ArrayList get_ClientProviders();
                /*0x7075a30*/ System.Collections.Hashtable get_CustomProperties();
                /*0x7070ce8*/ void CopyFrom(System.Runtime.Remoting.ChannelData other);
            }

            class ProviderData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ System.Collections.Hashtable CustomProperties;
                /*0x30*/ System.Collections.IList CustomData;

                /*0x7075aa4*/ ProviderData();
                /*0x70716b0*/ void CopyFrom(System.Runtime.Remoting.ProviderData other);
            }

            class FormatterData : System.Runtime.Remoting.ProviderData
            {
                /*0x7075aa0*/ FormatterData();
            }

            class RemotingException : System.SystemException
            {
                /*0x7076990*/ RemotingException();
                /*0x706c774*/ RemotingException(string message);
                /*0x7076998*/ RemotingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7073af0*/ RemotingException(string message, System.Exception InnerException);
            }

            class RemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable uri_hash;
                static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _serializationFormatter;
                static /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _deserializationFormatter;
                static /*0x18*/ string app_id;
                static /*0x20*/ object app_id_lock;
                static /*0x28*/ int next_id;
                static /*0x30*/ System.Reflection.MethodInfo FieldSetterMethod;
                static /*0x38*/ System.Reflection.MethodInfo FieldGetterMethod;

                static /*0x70769a0*/ RemotingServices();
                static /*0x7076cc0*/ object InternalExecute(System.Reflection.MethodBase method, object obj, object[] parameters, ref object[] out_args);
                static /*0x7076cc4*/ System.Reflection.MethodBase GetVirtualMethod(System.Type type, System.Reflection.MethodBase method);
                static /*0x7076cc8*/ bool IsTransparentProxy(object proxy);
                static /*0x7076d00*/ System.Runtime.Remoting.Messaging.IMethodReturnMessage InternalExecuteMessage(System.MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);
                static /*0x70776e8*/ object Connect(System.Type classToProxy, string url);
                static /*0x70777f0*/ object Connect(System.Type classToProxy, string url, object data);
                static /*0x7077890*/ System.Type GetServerTypeForUri(string URI);
                static /*0x706ea6c*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef);
                static /*0x7077b8c*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef, bool fRefine);
                static /*0x70781d0*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj);
                static /*0x707821c*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj, string ObjURI, System.Type RequestedType);
                static /*0x7078370*/ string NewUri();
                static /*0x7078288*/ System.Runtime.Remoting.Proxies.RealProxy GetRealProxy(object proxy);
                static /*0x7078e94*/ System.Reflection.MethodBase GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                static /*0x7079168*/ System.Reflection.MethodBase GetMethodBaseFromName(System.Type type, string methodName, System.Type[] signature);
                static /*0x707933c*/ System.Reflection.MethodBase FindInterfaceMethod(System.Type type, string methodName, System.Type[] signature);
                static /*0x707946c*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                static /*0x7079518*/ bool IsOneWay(System.Reflection.MethodBase method);
                static /*0x707959c*/ object CreateClientProxy(System.Runtime.Remoting.ActivatedClientTypeEntry entry, object[] activationAttributes);
                static /*0x7079698*/ object CreateClientProxy(System.Type objectType, string url, object[] activationAttributes);
                static /*0x7079900*/ object CreateClientProxy(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x7079968*/ object CreateClientProxyForContextBound(System.Type type, object[] activationAttributes);
                static /*0x7077938*/ System.Runtime.Remoting.Identity GetIdentityForUri(string uri);
                static /*0x7079b50*/ string RemoveAppNameFromUri(string uri);
                static /*0x7079c44*/ System.Runtime.Remoting.ClientIdentity GetOrCreateClientIdentity(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType, ref object clientProxy);
                static /*0x70797c8*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientChannelSinkChain(string url, object channelData, ref string objectUri);
                static /*0x707a3b8*/ System.Runtime.Remoting.ClientActivatedIdentity CreateContextBoundObjectIdentity(System.Type objectType);
                static /*0x7078d50*/ System.Runtime.Remoting.ClientActivatedIdentity CreateClientActivatedServerIdentity(System.MarshalByRefObject realObject, System.Type objectType, string objectUri);
                static /*0x706fe1c*/ System.Runtime.Remoting.ServerIdentity CreateWellKnownServerIdentity(System.Type objectType, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                static /*0x70786a8*/ void RegisterServerIdentity(System.Runtime.Remoting.ServerIdentity identity);
                static /*0x70780dc*/ object GetProxyForRemoteObject(System.Runtime.Remoting.ObjRef objref, System.Type classToProxy);
                static /*0x707777c*/ object GetRemoteObject(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType);
                static /*0x707a524*/ byte[] SerializeCallData(object obj);
                static /*0x707a750*/ object DeserializeCallData(byte[] array);
                static /*0x707a998*/ byte[] SerializeExceptionData(System.Exception ex);
                static /*0x7076c70*/ void RegisterInternalChannels();
                static /*0x707a140*/ void DisposeIdentity(System.Runtime.Remoting.Identity ident);
                static /*0x707ab0c*/ System.Runtime.Remoting.Identity GetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg);
                static /*0x707ae44*/ void SetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Identity ident);
                static /*0x707af58*/ bool UpdateOutArgObject(System.Reflection.ParameterInfo pi, object local, object remote);
                static /*0x7079ad8*/ string GetNormalizedUri(string uri);

                class CACD
                {
                    /*0x10*/ object d;
                    /*0x18*/ object c;

                    /*0x707a748*/ CACD();
                }
            }

            class ServerIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.Type _objectType;
                /*0x50*/ System.MarshalByRefObject _serverObject;
                /*0x58*/ System.Runtime.Remoting.Messaging.IMessageSink _serverSink;
                /*0x60*/ System.Runtime.Remoting.Contexts.Context _context;
                /*0x68*/ System.Runtime.Remoting.Lifetime.Lease _lease;

                /*0x707b090*/ ServerIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x707b0f0*/ System.Type get_ObjectType();
                /*0x70788ac*/ void StartTrackingLifetime(System.Runtime.Remoting.Lifetime.ILease lease);
                /*0x707b2b8*/ void OnLifetimeExpired();
                /*0x707b364*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x707a4a8*/ void AttachServerObject(System.MarshalByRefObject serverObject, System.Runtime.Remoting.Contexts.Context context);
                /*0x707b724*/ System.Runtime.Remoting.Lifetime.Lease get_Lease();
                /*0x707b72c*/ System.Runtime.Remoting.Contexts.Context get_Context();
                /*0x707b734*/ void set_Context(System.Runtime.Remoting.Contexts.Context value);
                /*0x380bb68*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x380bcbc*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                /*0x707b2bc*/ void DisposeServerObject();
            }

            class ClientActivatedIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x70*/ System.MarshalByRefObject _targetThis;

                /*0x707a494*/ ClientActivatedIdentity(string objectUri, System.Type objectType);
                /*0x707ba34*/ System.MarshalByRefObject GetServerObject();
                /*0x707ba3c*/ void SetClientProxy(System.MarshalByRefObject obj);
                /*0x707ba44*/ void OnLifetimeExpired();
                /*0x707baa0*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x707bd4c*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingletonIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x707a520*/ SingletonIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x707be4c*/ System.MarshalByRefObject GetServerObject();
                /*0x707c03c*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x707c124*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingleCallIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x707a51c*/ SingleCallIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x707c218*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x707c438*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class DisposerReplySink : System.Runtime.Remoting.Messaging.IMessageSink
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                /*0x18*/ System.IDisposable _disposable;

                /*0x707c5f0*/ DisposerReplySink(System.Runtime.Remoting.Messaging.IMessageSink next, System.IDisposable disposable);
                /*0x707c634*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x707c750*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SoapServices
            {
                static /*0x0*/ System.Collections.Hashtable _xmlTypes;
                static /*0x8*/ System.Collections.Hashtable _xmlElements;
                static /*0x10*/ System.Collections.Hashtable _soapActions;
                static /*0x18*/ System.Collections.Hashtable _soapActionsMethods;
                static /*0x20*/ System.Collections.Hashtable _typeInfos;

                static /*0x707cf30*/ SoapServices();
                static /*0x707c788*/ string get_XmlNsForClrTypeWithAssembly();
                static /*0x707c7c8*/ string get_XmlNsForClrTypeWithNs();
                static /*0x707c808*/ string get_XmlNsForClrTypeWithNsAndAssembly();
                static /*0x707c848*/ string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName);
                static /*0x707cab8*/ string GetNameKey(string name, string namspace);
                static /*0x707cb20*/ string GetAssemblyName(System.Reflection.MethodBase mb);
                static /*0x707cc10*/ bool GetXmlElementForInteropType(System.Type type, ref string xmlElement, ref string xmlNamespace);
                static /*0x707cd10*/ string GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb);
                static /*0x707cda4*/ string GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb);
                static /*0x707ce38*/ bool GetXmlTypeForInteropType(System.Type type, ref string xmlType, ref string xmlTypeNamespace);
                static /*0x70767d4*/ void PreLoad(System.Reflection.Assembly assembly);
                static /*0x70762b0*/ void PreLoad(System.Type type);
                static /*0x7075f90*/ void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, System.Type type);
                static /*0x7076120*/ void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, System.Type type);
                static /*0x707c9d4*/ string EncodeNs(string ns);

                class TypeInfo
                {
                    /*0x10*/ System.Collections.Hashtable Attributes;
                    /*0x18*/ System.Collections.Hashtable Elements;

                    /*0x707cf28*/ TypeInfo();
                }
            }

            class TypeEntry
            {
                /*0x10*/ string assembly_name;
                /*0x18*/ string type_name;

                /*0x706c76c*/ TypeEntry();
                /*0x707d04c*/ string get_AssemblyName();
                /*0x707d054*/ void set_AssemblyName(string value);
                /*0x707d05c*/ string get_TypeName();
                /*0x707d064*/ void set_TypeName(string value);
            }

            class TypeInfo : System.Runtime.Remoting.IRemotingTypeInfo
            {
                /*0x10*/ string serverType;
                /*0x18*/ string[] serverHierarchy;
                /*0x20*/ string[] interfacesImplemented;

                /*0x706dda0*/ TypeInfo(System.Type type);
                /*0x707d06c*/ string get_TypeName();
                /*0x707d074*/ bool CanCastTo(System.Type fromType, object o);
            }

            class WellKnownClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_url;
                /*0x30*/ string app_url;

                /*0x7075d0c*/ WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl);
                /*0x707d2cc*/ string get_ApplicationUrl();
                /*0x707d2d4*/ System.Type get_ObjectType();
                /*0x707d2dc*/ string get_ObjectUrl();
                /*0x707d2e4*/ string ToString();
            }

            enum WellKnownObjectMode
            {
                Singleton = 1,
                SingleCall = 2,
            }

            class WellKnownServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_uri;
                /*0x30*/ System.Runtime.Remoting.WellKnownObjectMode obj_mode;

                /*0x7075e44*/ WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                /*0x707d304*/ System.Runtime.Remoting.WellKnownObjectMode get_Mode();
                /*0x707d30c*/ System.Type get_ObjectType();
                /*0x707d314*/ string get_ObjectUri();
                /*0x707d31c*/ string ToString();
            }

            namespace Services
            {
                interface ITrackingHandler
                {
                    /*0x380d83c*/ void DisconnectedObject(object obj);
                    /*0x380d93c*/ void MarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    /*0x380d93c*/ void UnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                }

                class TrackingServices
                {
                    static /*0x0*/ System.Collections.ArrayList _handlers;

                    static /*0x707d440*/ TrackingServices();
                    static /*0x7078a4c*/ void NotifyMarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0x7077dd8*/ void NotifyUnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0x707b73c*/ void NotifyDisconnectedObject(object obj);
                }
            }

            namespace Proxies
            {
                class ProxyAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0x707d4bc*/ System.MarshalByRefObject CreateInstance(System.Type serverType);
                    /*0x707d5b0*/ System.Runtime.Remoting.Proxies.RealProxy CreateProxy(System.Runtime.Remoting.ObjRef objRef, System.Type serverType, object serverObject, System.Runtime.Remoting.Contexts.Context serverContext);
                    /*0x707d604*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x707d608*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class TransparentProxy
                {
                    /*0x10*/ System.Runtime.Remoting.Proxies.RealProxy _rp;
                    /*0x18*/ Mono.RuntimeRemoteClassHandle _class;
                    /*0x20*/ bool _custom_type_info;

                    /*0x707e608*/ TransparentProxy();
                    /*0x707d610*/ System.RuntimeType GetProxyType();
                    /*0x707d6d0*/ bool get_IsContextBoundObject();
                    /*0x707d6ec*/ System.Runtime.Remoting.Contexts.Context get_TargetContext();
                    /*0x707d708*/ bool InCurrentContext();
                    /*0x707d748*/ object LoadRemoteFieldNew(nint classPtr, nint fieldPtr);
                    /*0x707e32c*/ void StoreRemoteField(nint classPtr, nint fieldPtr, object arg);
                }

                class RealProxy
                {
                    /*0x10*/ System.Type class_to_proxy;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _targetContext;
                    /*0x20*/ System.MarshalByRefObject _server;
                    /*0x28*/ int _targetDomainId;
                    /*0x30*/ string _targetUri;
                    /*0x38*/ System.Runtime.Remoting.Identity _objectIdentity;
                    /*0x40*/ object _objTP;
                    /*0x48*/ object _stubData;

                    static /*0x707e740*/ System.Type InternalGetProxyType(object transparentProxy);
                    static /*0x707da14*/ object PrivateInvoke(System.Runtime.Remoting.Proxies.RealProxy rp, System.Runtime.Remoting.Messaging.IMessage msg, ref System.Exception exc, ref object[] out_args);
                    static /*0x707e8b0*/ object[] ProcessResponse(System.Runtime.Remoting.Messaging.IMethodReturnMessage mrm, System.Runtime.Remoting.Messaging.MonoMethodMessage call);
                    /*0x707e610*/ RealProxy();
                    /*0x707e620*/ RealProxy(System.Type classToProxy);
                    /*0x707e710*/ RealProxy(System.Type classToProxy, System.Runtime.Remoting.ClientIdentity identity);
                    /*0x707e628*/ RealProxy(System.Type classToProxy, nint stub, object stubData);
                    /*0x70782d0*/ System.Type GetProxiedType();
                    /*0x707e744*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x707e7c0*/ System.Runtime.Remoting.Identity get_ObjectIdentity();
                    /*0x707e7c8*/ void set_ObjectIdentity(System.Runtime.Remoting.Identity value);
                    /*0x380bb68*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x707efa4*/ object InternalGetTransparentProxy(string className);
                    /*0x707efa8*/ object GetTransparentProxy();
                    /*0x707f11c*/ void AttachServer(System.MarshalByRefObject s);
                    /*0x707f124*/ void SetTargetDomain(int domainId);
                    /*0x707f12c*/ object GetAppDomainTarget();
                }

                class RemotingProxy : System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.IRemotingTypeInfo
                {
                    static /*0x0*/ System.Reflection.MethodInfo _cache_GetTypeMethod;
                    static /*0x8*/ System.Reflection.MethodInfo _cache_GetHashCodeMethod;
                    /*0x50*/ System.Runtime.Remoting.Messaging.IMessageSink _sink;
                    /*0x58*/ bool _hasEnvoySink;
                    /*0x60*/ System.Runtime.Remoting.Messaging.ConstructionCall _ctorCall;

                    static /*0x70801d8*/ RemotingProxy();
                    /*0x707a344*/ RemotingProxy(System.Type type, System.Runtime.Remoting.ClientIdentity identity);
                    /*0x70798a8*/ RemotingProxy(System.Type type, string activationUrl, object[] activationAttributes);
                    /*0x707f258*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage request);
                    /*0x707faec*/ void AttachIdentity(System.Runtime.Remoting.Identity identity);
                    /*0x707e7d0*/ System.Runtime.Remoting.Messaging.IMessage ActivateRemoteObject(System.Runtime.Remoting.Messaging.IMethodMessage request);
                    /*0x707fd7c*/ string get_TypeName();
                    /*0x707feb4*/ bool CanCastTo(System.Type fromType, object o);
                    /*0x70800c0*/ void Finalize();
                }
            }

            namespace Lifetime
            {
                interface ILease
                {
                    /*0x380c718*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x380b6a0*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0x380c718*/ System.TimeSpan get_RenewOnCallTime();
                    System.TimeSpan Renew(System.TimeSpan renewalTime);
                }

                interface ISponsor
                {
                    System.TimeSpan Renewal(System.Runtime.Remoting.Lifetime.ILease lease);
                }

                class Lease : System.MarshalByRefObject, System.Runtime.Remoting.Lifetime.ILease
                {
                    /*0x18*/ System.DateTime _leaseExpireTime;
                    /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseState _currentState;
                    /*0x28*/ System.TimeSpan _initialLeaseTime;
                    /*0x30*/ System.TimeSpan _renewOnCallTime;
                    /*0x38*/ System.TimeSpan _sponsorshipTimeout;
                    /*0x40*/ System.Collections.ArrayList _sponsors;
                    /*0x48*/ System.Collections.Queue _renewingSponsors;
                    /*0x50*/ System.Runtime.Remoting.Lifetime.Lease.RenewalDelegate _renewalDelegate;

                    /*0x707b0f8*/ Lease();
                    /*0x70802cc*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x7080334*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0x708033c*/ void Activate();
                    /*0x7080348*/ System.TimeSpan get_RenewOnCallTime();
                    /*0x7080350*/ System.TimeSpan Renew(System.TimeSpan renewalTime);
                    /*0x70803dc*/ void Unregister(System.Runtime.Remoting.Lifetime.ISponsor obj);
                    /*0x7080520*/ void UpdateState();
                    /*0x70806c0*/ void CheckNextSponsor();
                    /*0x7080a54*/ void ProcessSponsorResponse(object state, bool timedOut);

                    class RenewalDelegate : System.MulticastDelegate
                    {
                        /*0x708092c*/ RenewalDelegate(object object, nint method);
                        /*0x7080c70*/ System.TimeSpan Invoke(System.Runtime.Remoting.Lifetime.ILease lease);
                        /*0x7080a34*/ System.IAsyncResult BeginInvoke(System.Runtime.Remoting.Lifetime.ILease lease, System.AsyncCallback callback, object object);
                        /*0x7080c48*/ System.TimeSpan EndInvoke(System.IAsyncResult result);
                    }
                }

                class LeaseManager
                {
                    /*0x10*/ System.Collections.ArrayList _objects;
                    /*0x18*/ System.Threading.Timer _timer;

                    /*0x708128c*/ LeaseManager();
                    /*0x7080c84*/ void SetPollTime(System.TimeSpan timeSpan);
                    /*0x7080d7c*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                    /*0x7080eb0*/ void StartManager();
                    /*0x708100c*/ void StopManager();
                    /*0x708103c*/ void ManageLeases(object state);
                }

                class LeaseSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x70812f8*/ LeaseSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x7081328*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7081664*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70813d8*/ void RenewLease(System.Runtime.Remoting.Messaging.IMessage msg);
                }

                enum LeaseState
                {
                    Null = 0,
                    Initial = 1,
                    Active = 2,
                    Renewing = 3,
                    Expired = 4,
                }

                class LifetimeServices
                {
                    static /*0x0*/ System.TimeSpan _leaseManagerPollTime;
                    static /*0x8*/ System.TimeSpan _leaseTime;
                    static /*0x10*/ System.TimeSpan _renewOnCallTime;
                    static /*0x18*/ System.TimeSpan _sponsorshipTimeout;
                    static /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager;

                    static /*0x7081728*/ LifetimeServices();
                    static /*0x7081828*/ System.TimeSpan get_LeaseManagerPollTime();
                    static /*0x70758ec*/ void set_LeaseManagerPollTime(System.TimeSpan value);
                    static /*0x7081880*/ System.TimeSpan get_LeaseTime();
                    static /*0x70818d8*/ void set_LeaseTime(System.TimeSpan value);
                    static /*0x7081934*/ System.TimeSpan get_RenewOnCallTime();
                    static /*0x708198c*/ void set_RenewOnCallTime(System.TimeSpan value);
                    static /*0x70819e8*/ System.TimeSpan get_SponsorshipTimeout();
                    static /*0x7081a40*/ void set_SponsorshipTimeout(System.TimeSpan value);
                    static /*0x707b250*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                }
            }

            namespace Contexts
            {
                class Context
                {
                    static /*0x0*/ object[] local_slots;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.IMessageSink default_server_context_sink;
                    static /*0x10*/ int global_count;
                    static /*0x18*/ System.LocalDataStoreMgr _localDataStoreMgr;
                    static /*0x20*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection global_dynamic_properties;
                    /*0x10*/ int domain_id;
                    /*0x14*/ int context_id;
                    /*0x18*/ nuint static_data;
                    /*0x20*/ nuint data;
                    /*0x28*/ System.Runtime.Remoting.Messaging.IMessageSink server_context_sink_chain;
                    /*0x30*/ System.Runtime.Remoting.Messaging.IMessageSink client_context_sink_chain;
                    /*0x38*/ System.Collections.Generic.List<System.Runtime.Remoting.Contexts.IContextProperty> context_properties;
                    /*0x40*/ System.LocalDataStoreHolder _localDataStore;
                    /*0x48*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection context_dynamic_properties;
                    /*0x50*/ System.Runtime.Remoting.Contexts.ContextCallbackObject callback_object;

                    static /*0x7083b98*/ Context();
                    static /*0x7081a9c*/ void RegisterContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7081aa0*/ void ReleaseContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x707a4a0*/ System.Runtime.Remoting.Contexts.Context get_DefaultContext();
                    static /*0x7081d64*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7082260*/ bool UnregisterDynamicProperty(string name, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7081ddc*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection GetDynamicPropertyCollection(System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x7082444*/ void NotifyGlobalDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    static /*0x7082544*/ bool get_HasGlobalDynamicSinks();
                    static /*0x7082e3c*/ System.Runtime.Remoting.Contexts.Context SwitchToContext(System.Runtime.Remoting.Contexts.Context newContext);
                    static /*0x7082e44*/ System.Runtime.Remoting.Contexts.Context CreateNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    static /*0x7083980*/ System.LocalDataStoreSlot AllocateDataSlot();
                    static /*0x70839e4*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
                    static /*0x7083a50*/ void FreeNamedDataSlot(string name);
                    static /*0x7083abc*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
                    static /*0x7083b28*/ object GetData(System.LocalDataStoreSlot slot);
                    static /*0x7083b58*/ void SetData(System.LocalDataStoreSlot slot, object data);
                    /*0x7081aa4*/ Context();
                    /*0x7081b28*/ void Finalize();
                    /*0x7081bf8*/ int get_ContextID();
                    /*0x7081c00*/ System.Runtime.Remoting.Contexts.IContextProperty[] get_ContextProperties();
                    /*0x7081c74*/ bool get_IsDefaultContext();
                    /*0x7081c84*/ bool get_NeedsContextSink();
                    /*0x70825e8*/ void NotifyDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    /*0x708266c*/ bool get_HasDynamicSinks();
                    /*0x707f814*/ bool get_HasExitSinks();
                    /*0x70826ac*/ System.Runtime.Remoting.Contexts.IContextProperty GetProperty(string name);
                    /*0x70828a4*/ void SetProperty(System.Runtime.Remoting.Contexts.IContextProperty prop);
                    /*0x7082a58*/ void Freeze();
                    /*0x7082c04*/ string ToString();
                    /*0x7082c60*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSinkChain();
                    /*0x707f8cc*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSinkChain();
                    /*0x707bb94*/ System.Runtime.Remoting.Messaging.IMessageSink CreateServerObjectSinkChain(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x707b520*/ System.Runtime.Remoting.Messaging.IMessageSink CreateEnvoySink(System.MarshalByRefObject serverObject);
                    /*0x7083684*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                    /*0x7083808*/ System.LocalDataStore get_MyLocalStore();
                }

                class DynamicPropertyCollection
                {
                    /*0x10*/ System.Collections.ArrayList _properties;

                    /*0x706c9fc*/ DynamicPropertyCollection();
                    /*0x706caa8*/ bool get_HasProperties();
                    /*0x7081f50*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop);
                    /*0x70822d8*/ bool UnregisterDynamicProperty(string name);
                    /*0x706cb5c*/ void NotifyMessage(bool start, System.Runtime.Remoting.Messaging.IMessage msg, bool client_site, bool async);
                    /*0x7083c0c*/ int FindProperty(string name);

                    class DynamicPropertyReg
                    {
                        /*0x10*/ System.Runtime.Remoting.Contexts.IDynamicProperty Property;
                        /*0x18*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink Sink;

                        /*0x7083d70*/ DynamicPropertyReg();
                    }
                }

                class ContextCallbackObject : System.ContextBoundObject
                {
                    /*0x70837fc*/ ContextCallbackObject();
                    /*0x7083804*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                }

                class CrossContextChannel : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x70845d4*/ CrossContextChannel();
                    /*0x7083d78*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7084140*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);

                    class ContextRestoreSink : System.Runtime.Remoting.Messaging.IMessageSink
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                        /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;
                        /*0x20*/ System.Runtime.Remoting.Messaging.IMessage _call;

                        /*0x7084574*/ ContextRestoreSink(System.Runtime.Remoting.Messaging.IMessageSink next, System.Runtime.Remoting.Contexts.Context context, System.Runtime.Remoting.Messaging.IMessage call);
                        /*0x70845dc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                        /*0x7084890*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    }
                }

                class CrossContextDelegate : System.MulticastDelegate
                {
                    /*0x70848c8*/ CrossContextDelegate(object object, nint method);
                    /*0x7084964*/ void Invoke();
                }

                interface IContextAttribute
                {
                    /*0x380d83c*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x380b32c*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IContextProperty
                {
                    /*0x380b9e8*/ string get_Name();
                    /*0x380d83c*/ void Freeze(System.Runtime.Remoting.Contexts.Context newContext);
                    /*0x380b2f0*/ bool IsNewContextOK(System.Runtime.Remoting.Contexts.Context newCtx);
                }

                interface IContributeClientContextSink
                {
                    /*0x380bb68*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeDynamicSink
                {
                    /*0x380b9e8*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink();
                }

                interface IContributeEnvoySink
                {
                    /*0x380bcbc*/ System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeObjectSink
                {
                    /*0x380bcbc*/ System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeServerContextSink
                {
                    /*0x380bb68*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IDynamicMessageSink
                {
                    /*0x380d870*/ void ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync);
                    /*0x380d870*/ void ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync);
                }

                interface IDynamicProperty
                {
                    /*0x380b9e8*/ string get_Name();
                }
            }

            namespace Channels
            {
                class ChannelServices
                {
                    static /*0x0*/ System.Collections.ArrayList registeredChannels;
                    static /*0x8*/ System.Collections.ArrayList delayedClientChannels;
                    static /*0x10*/ System.Runtime.Remoting.Contexts.CrossContextChannel _crossContextSink;
                    static /*0x18*/ string CrossContextUrl;
                    static /*0x20*/ System.Collections.IList oldStartModeTypes;

                    static /*0x70879bc*/ ChannelServices();
                    static /*0x7084978*/ System.Runtime.Remoting.Contexts.CrossContextChannel get_CrossContextChannel();
                    static /*0x70849d0*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, ref string objectUri);
                    static /*0x7085274*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(System.Runtime.Remoting.Channels.IChannelSender sender, string url, object[] channelDataArray, ref string objectUri);
                    static /*0x7085490*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl);
                    static /*0x70854e8*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity);
                    static /*0x7085d4c*/ void RegisterChannelConfig(System.Runtime.Remoting.ChannelData channel);
                    static /*0x70869dc*/ object CreateProvider(System.Runtime.Remoting.ProviderData prov);
                    static /*0x7086ce4*/ System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x7086d8c*/ System.Runtime.Remoting.Messaging.ReturnMessage CheckIncomingMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x708702c*/ System.Runtime.Remoting.Messaging.IMessage CheckReturnMessage(System.Runtime.Remoting.Messaging.IMessage callMsg, System.Runtime.Remoting.Messaging.IMessage retMsg);
                    static /*0x7087364*/ bool IsLocalCall(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    static /*0x70874ac*/ object[] GetCurrentChannelInfo();
                }

                class CrossAppDomainData
                {
                    /*0x10*/ object _ContextID;
                    /*0x18*/ int _DomainID;
                    /*0x20*/ string _processGuid;

                    /*0x7087b78*/ CrossAppDomainData(int domainId);
                    /*0x7087c28*/ int get_DomainID();
                    /*0x7087c30*/ string get_ProcessID();
                }

                class CrossAppDomainChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.IChannelReceiver
                {
                    static /*0x0*/ object s_lock;

                    static /*0x7088238*/ CrossAppDomainChannel();
                    static /*0x7087c38*/ void RegisterCrossAppDomainChannel();
                    /*0x7087d70*/ CrossAppDomainChannel();
                    /*0x7087d78*/ string get_ChannelName();
                    /*0x7087db8*/ int get_ChannelPriority();
                    /*0x7087dc0*/ object get_ChannelData();
                    /*0x7087e24*/ void StartListening(object data);
                    /*0x7087e28*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object data, ref string uri);
                }

                class CrossAppDomainSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Collections.Hashtable s_sinks;
                    static /*0x8*/ System.Reflection.MethodInfo processMessageMethod;
                    /*0x10*/ int _domainID;

                    static /*0x7088f30*/ CrossAppDomainSink();
                    static /*0x7087fb0*/ System.Runtime.Remoting.Channels.CrossAppDomainSink GetSink(int domainID);
                    static /*0x70882e4*/ System.Runtime.Remoting.Channels.CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg);
                    /*0x70882b4*/ CrossAppDomainSink(int domainID);
                    /*0x70882dc*/ int get_TargetDomainId();
                    /*0x708856c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msgRequest);
                    /*0x7088d18*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x7088e24*/ void SendAsyncMessage(object data);
                    /*0x7089034*/ void <AsyncProcessMessage>b__10_0(object data);

                    struct ProcessMessageRes
                    {
                        /*0x10*/ byte[] arrResponse;
                        /*0x18*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm;
                    }
                }

                class CADSerializer
                {
                    static /*0x7088a2c*/ System.Runtime.Remoting.Messaging.IMessage DeserializeMessage(System.IO.MemoryStream mem, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    static /*0x7088474*/ System.IO.MemoryStream SerializeMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x70890bc*/ object DeserializeObjectSafe(byte[] mem);
                    static /*0x70891ec*/ System.IO.MemoryStream SerializeObject(object obj);
                    static /*0x7089158*/ object DeserializeObject(System.IO.MemoryStream mem);
                }

                class AsyncRequest
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink ReplySink;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMessage MsgRequest;

                    /*0x7088de0*/ AsyncRequest(System.Runtime.Remoting.Messaging.IMessage msgRequest, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IChannel
                {
                    /*0x380b9e8*/ string get_ChannelName();
                    /*0x380b6a0*/ int get_ChannelPriority();
                }

                interface IChannelDataStore
                {
                }

                interface IChannelReceiver : System.Runtime.Remoting.Channels.IChannel
                {
                    /*0x380b9e8*/ object get_ChannelData();
                    /*0x380d83c*/ void StartListening(object data);
                }

                interface IChannelSender : System.Runtime.Remoting.Channels.IChannel
                {
                    /*0x380bd40*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, ref string objectURI);
                }

                interface IClientChannelSinkProvider
                {
                    /*0x380d83c*/ void set_Next(System.Runtime.Remoting.Channels.IClientChannelSinkProvider value);
                }

                interface ISecurableChannel
                {
                    /*0x380cdf0*/ void set_IsSecured(bool value);
                }

                interface IServerChannelSinkProvider
                {
                    /*0x380d83c*/ void set_Next(System.Runtime.Remoting.Channels.IServerChannelSinkProvider value);
                }

                class SinkProviderData
                {
                    /*0x10*/ string sinkName;
                    /*0x18*/ System.Collections.ArrayList children;
                    /*0x20*/ System.Collections.Hashtable properties;

                    /*0x70892e4*/ SinkProviderData(string name);
                    /*0x70893a4*/ System.Collections.IList get_Children();
                    /*0x70893ac*/ System.Collections.IDictionary get_Properties();
                }
            }

            namespace Activation
            {
                class ActivationServices
                {
                    static /*0x0*/ System.Runtime.Remoting.Activation.IActivator _constructionActivator;

                    static /*0x70893b4*/ System.Runtime.Remoting.Activation.IActivator get_ConstructionActivator();
                    static /*0x7089458*/ System.Runtime.Remoting.Messaging.IMessage Activate(System.Runtime.Remoting.Proxies.RemotingProxy proxy, System.Runtime.Remoting.Messaging.ConstructionCall ctorCall);
                    static /*0x7089698*/ System.Runtime.Remoting.Messaging.IMessage RemoteActivate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0x7089864*/ System.Runtime.Remoting.Messaging.ConstructionCall CreateConstructionCall(System.Type type, string activationUrl, object[] activationAttributes);
                    static /*0x708a330*/ System.Runtime.Remoting.Messaging.IMessage CreateInstanceFromMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0x708a740*/ object CreateProxyForType(System.Type type);
                    static /*0x708a730*/ object AllocateUninitializedClassInstance(System.Type type);
                    static /*0x708a880*/ void EnableProxyActivation(System.Type type, bool enable);
                }

                class AppDomainLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ string _activationUrl;
                    /*0x18*/ System.Runtime.Remoting.Activation.IActivator _next;

                    /*0x708a2bc*/ AppDomainLevelActivator(string activationUrl, System.Runtime.Remoting.Activation.IActivator next);
                    /*0x708a888*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x708a890*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                class ConstructionLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x7089450*/ ConstructionLevelActivator();
                    /*0x708ad5c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x708ad64*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class ContextLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ System.Runtime.Remoting.Activation.IActivator m_NextActivator;

                    /*0x708a300*/ ContextLevelActivator(System.Runtime.Remoting.Activation.IActivator next);
                    /*0x708ae58*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x708ae60*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                interface IActivator
                {
                    /*0x380b9e8*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x380bb68*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IConstructionCallMessage : System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x380b9e8*/ System.Type get_ActivationType();
                    /*0x380b9e8*/ string get_ActivationTypeName();
                    /*0x380b9e8*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0x380d83c*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0x380b9e8*/ object[] get_CallSiteActivationAttributes();
                    /*0x380b9e8*/ System.Collections.IList get_ContextProperties();
                }

                interface IConstructionReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                class RemoteActivationAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0x10*/ System.Collections.IList _contextProperties;

                    /*0x708b1a8*/ RemoteActivationAttribute(System.Collections.IList contextProperties);
                    /*0x708b1d8*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                    /*0x708b1e0*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                }

                class RemoteActivator : System.MarshalByRefObject, System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x708b5c8*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x708ba4c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                }
            }

            namespace Metadata
            {
                class SoapAttribute : System.Attribute
                {
                    /*0x10*/ bool _useAttribute;
                    /*0x18*/ string ProtXmlNamespace;
                    /*0x20*/ object ReflectInfo;

                    /*0x708ba84*/ SoapAttribute();
                    /*0x708ba8c*/ bool get_UseAttribute();
                    /*0x708ba94*/ string get_XmlNamespace();
                    /*0x708ba9c*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapFieldAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _elementName;
                    /*0x30*/ bool _isElement;

                    /*0x708baa4*/ SoapFieldAttribute();
                    /*0x708baac*/ string get_XmlElementName();
                    /*0x708bab4*/ bool IsInteropXmlElement();
                    /*0x708babc*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapMethodAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _responseElement;
                    /*0x30*/ string _responseNamespace;
                    /*0x38*/ string _returnElement;
                    /*0x40*/ string _soapAction;
                    /*0x48*/ bool _useAttribute;
                    /*0x50*/ string _namespace;

                    /*0x708bb74*/ SoapMethodAttribute();
                    /*0x708bb7c*/ bool get_UseAttribute();
                    /*0x708bb84*/ string get_XmlNamespace();
                    /*0x708bb8c*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapParameterAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x708bdac*/ SoapParameterAttribute();
                }

                class SoapTypeAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ bool _useAttribute;
                    /*0x30*/ string _xmlElementName;
                    /*0x38*/ string _xmlNamespace;
                    /*0x40*/ string _xmlTypeName;
                    /*0x48*/ string _xmlTypeNamespace;
                    /*0x50*/ bool _isType;
                    /*0x51*/ bool _isElement;

                    /*0x708bdb4*/ SoapTypeAttribute();
                    /*0x708bdbc*/ bool get_UseAttribute();
                    /*0x708bdc4*/ string get_XmlElementName();
                    /*0x708bdcc*/ string get_XmlNamespace();
                    /*0x708bdd4*/ string get_XmlTypeName();
                    /*0x708bddc*/ string get_XmlTypeNamespace();
                    /*0x708bde4*/ bool get_IsInteropXmlElement();
                    /*0x708bdec*/ bool get_IsInteropXmlType();
                    /*0x708bdf4*/ void SetReflectionObject(object reflectionObject);
                }
            }

            namespace Messaging
            {
                class CallContext
                {
                    static /*0x708c034*/ object SetCurrentCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                    static /*0x708c03c*/ System.Runtime.Remoting.Messaging.LogicalCallContext SetLogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext callCtx);
                    /*0x708c02c*/ CallContext();
                }

                class IllogicalCallContext
                {
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ object m_HostContext;

                    /*0x708c390*/ IllogicalCallContext();
                    /*0x708c094*/ System.Collections.Hashtable get_Datastore();
                    /*0x708c104*/ object get_HostContext();
                    /*0x708c10c*/ void set_HostContext(object value);
                    /*0x708c114*/ bool get_HasUserData();
                    /*0x708c140*/ System.Runtime.Remoting.Messaging.IllogicalCallContext CreateCopy();
                }

                class LogicalCallContext : System.Runtime.Serialization.ISerializable, System.ICloneable
                {
                    static /*0x0*/ System.Type s_callContextType;
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ System.Runtime.Remoting.Messaging.CallContextRemotingData m_RemotingData;
                    /*0x20*/ System.Runtime.Remoting.Messaging.CallContextSecurityData m_SecurityData;
                    /*0x28*/ object m_HostContext;
                    /*0x30*/ bool m_IsCorrelationMgr;

                    static /*0x708d5e8*/ LogicalCallContext();
                    /*0x708c398*/ LogicalCallContext();
                    /*0x708c3a0*/ LogicalCallContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x708c8c4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x708cc34*/ object Clone();
                    /*0x708d344*/ void Merge(System.Runtime.Remoting.Messaging.LogicalCallContext lc);
                    /*0x708d568*/ bool get_HasInfo();
                    /*0x708cc08*/ bool get_HasUserData();
                    /*0x708c820*/ System.Collections.Hashtable get_Datastore();

                    struct Reader
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.LogicalCallContext m_ctx;

                        /*0x708d678*/ Reader(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                        /*0x708d680*/ bool get_IsNull();
                        /*0x708d690*/ bool get_HasInfo();
                        /*0x708d6a0*/ System.Runtime.Remoting.Messaging.LogicalCallContext Clone();
                    }
                }

                class CallContextSecurityData : System.ICloneable
                {
                    /*0x10*/ System.Security.Principal.IPrincipal _principal;

                    /*0x708d708*/ CallContextSecurityData();
                    /*0x708d5d8*/ bool get_HasInfo();
                    /*0x708d2d4*/ object Clone();
                }

                class CallContextRemotingData : System.ICloneable
                {
                    /*0x10*/ string _logicalCallID;

                    /*0x708d720*/ CallContextRemotingData();
                    /*0x708d710*/ string get_LogicalCallID();
                    /*0x708d718*/ void set_LogicalCallID(string value);
                    /*0x708d5c8*/ bool get_HasInfo();
                    /*0x708d264*/ object Clone();
                }

                enum ArgInfoType
                {
                    In = 0,
                    Out = 1,
                }

                class ArgInfo
                {
                    /*0x10*/ int[] _paramMap;
                    /*0x18*/ int _inoutArgCount;
                    /*0x20*/ System.Reflection.MethodBase _method;

                    /*0x708d728*/ ArgInfo(System.Reflection.MethodBase method, System.Runtime.Remoting.Messaging.ArgInfoType type);
                    /*0x708d8fc*/ object[] GetInOutArgs(object[] args);
                }

                class AsyncResult : System.IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink, System.Threading.IThreadPoolWorkItem
                {
                    /*0x10*/ object async_state;
                    /*0x18*/ System.Threading.WaitHandle handle;
                    /*0x20*/ object async_delegate;
                    /*0x28*/ nint data;
                    /*0x30*/ object object_data;
                    /*0x38*/ bool sync_completed;
                    /*0x39*/ bool completed;
                    /*0x3a*/ bool endinvoke_called;
                    /*0x40*/ object async_callback;
                    /*0x48*/ System.Threading.ExecutionContext current;
                    /*0x50*/ System.Threading.ExecutionContext original;
                    /*0x58*/ long add_time;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MonoMethodMessage call_message;
                    /*0x68*/ System.Runtime.Remoting.Messaging.IMessageCtrl message_ctrl;
                    /*0x70*/ System.Runtime.Remoting.Messaging.IMessage reply_message;
                    /*0x78*/ System.Threading.WaitCallback orig_cb;

                    /*0x708da10*/ AsyncResult();
                    /*0x708da18*/ object get_AsyncState();
                    /*0x708da20*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                    /*0x708db44*/ bool get_CompletedSynchronously();
                    /*0x708db4c*/ bool get_IsCompleted();
                    /*0x708db54*/ bool get_EndInvokeCalled();
                    /*0x708db5c*/ void set_EndInvokeCalled(bool value);
                    /*0x708db68*/ object get_AsyncDelegate();
                    /*0x708db70*/ System.Runtime.Remoting.Messaging.IMessageSink get_NextSink();
                    /*0x708db78*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x708dbb0*/ System.Runtime.Remoting.Messaging.IMessage GetReplyMessage();
                    /*0x708dbb8*/ void SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl mc);
                    /*0x708dbc0*/ void SetCompletedSynchronously(bool completed);
                    /*0x708dbcc*/ System.Runtime.Remoting.Messaging.IMessage EndInvoke();
                    /*0x708dcdc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x708de7c*/ System.Runtime.Remoting.Messaging.MonoMethodMessage get_CallMessage();
                    /*0x708de84*/ void set_CallMessage(System.Runtime.Remoting.Messaging.MonoMethodMessage value);
                    /*0x708de8c*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                    /*0x708de94*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                    /*0x708de90*/ object Invoke();
                }

                class CADArgHolder
                {
                    /*0x10*/ int index;

                    /*0x708de98*/ CADArgHolder(int i);
                }

                class CADObjRef
                {
                    /*0x10*/ System.Runtime.Remoting.ObjRef objref;
                    /*0x18*/ int SourceDomain;
                    /*0x20*/ byte[] TypeInfo;

                    /*0x708dec0*/ CADObjRef(System.Runtime.Remoting.ObjRef o, int sourceDomain);
                }

                class CADMethodRef
                {
                    /*0x10*/ bool ctor;
                    /*0x18*/ string typeName;
                    /*0x20*/ string methodName;
                    /*0x28*/ string[] param_names;
                    /*0x30*/ string[] generic_arg_names;

                    /*0x708e504*/ CADMethodRef(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0x708df20*/ System.Type[] GetTypes(string[] typeArray);
                    /*0x708e07c*/ System.Reflection.MethodBase Resolve();
                }

                class CADMessageBase
                {
                    /*0x10*/ object[] _args;
                    /*0x18*/ byte[] _serializedArgs;
                    /*0x20*/ int _propertyCount;
                    /*0x28*/ System.Runtime.Remoting.Messaging.CADArgHolder _callContext;
                    /*0x30*/ byte[] serializedMethod;

                    static /*0x708e8e8*/ System.Type[] GetSignature(System.Reflection.MethodBase methodBase, bool load);
                    static /*0x708eacc*/ int MarshalProperties(System.Collections.IDictionary dict, ref System.Collections.ArrayList args);
                    static /*0x708f3b0*/ void UnmarshalProperties(System.Collections.IDictionary dict, int count, System.Collections.ArrayList args);
                    static /*0x708f4ec*/ bool IsPossibleToIgnoreMarshal(object obj);
                    /*0x708e7d0*/ CADMessageBase(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0x708e868*/ System.Reflection.MethodBase GetMethod();
                    /*0x708f660*/ object MarshalArgument(object arg, ref System.Collections.ArrayList args);
                    /*0x708f828*/ object UnmarshalArgument(object arg, System.Collections.ArrayList args);
                    /*0x708ff90*/ object[] MarshalArguments(object[] arguments, ref System.Collections.ArrayList args);
                    /*0x70900a0*/ object[] UnmarshalArguments(object[] arguments, System.Collections.ArrayList args);
                    /*0x70901b0*/ void SaveLogicalCallContext(System.Runtime.Remoting.Messaging.IMethodMessage msg, ref System.Collections.ArrayList serializeList);
                    /*0x7090400*/ System.Runtime.Remoting.Messaging.LogicalCallContext GetLogicalCallContext(System.Collections.ArrayList args);
                }

                class CADMethodCallMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ string _uri;

                    static /*0x70889ac*/ System.Runtime.Remoting.Messaging.CADMethodCallMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0x7090490*/ CADMethodCallMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage callMsg);
                    /*0x7090488*/ string get_Uri();
                    /*0x70906a4*/ System.Collections.ArrayList GetArguments();
                    /*0x70907e8*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x70907f8*/ int get_PropertiesCount();
                }

                class CADMethodReturnMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ object _returnValue;
                    /*0x40*/ System.Runtime.Remoting.Messaging.CADArgHolder _exception;
                    /*0x48*/ System.Type[] _sig;

                    static /*0x7090800*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0x7090880*/ CADMethodReturnMessage(System.Runtime.Remoting.Messaging.IMethodReturnMessage retMsg);
                    /*0x7090c40*/ System.Collections.ArrayList GetArguments();
                    /*0x7090d84*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x7090d94*/ object GetReturnValue(System.Collections.ArrayList args);
                    /*0x7090da4*/ System.Exception GetException(System.Collections.ArrayList args);
                    /*0x7090e48*/ int get_PropertiesCount();
                }

                class ClientContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x7090e50*/ ClientContextTerminatorSink(System.Runtime.Remoting.Contexts.Context ctx);
                    /*0x7090e80*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7091068*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ClientContextReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x70912b8*/ ClientContextReplySink(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70912fc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7091408*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ConstructionCall : System.Runtime.Remoting.Messaging.MethodCall, System.Runtime.Remoting.Activation.IConstructionCallMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x68*/ System.Runtime.Remoting.Activation.IActivator _activator;
                    /*0x70*/ object[] _activationAttributes;
                    /*0x78*/ System.Collections.IList _contextProperties;
                    /*0x80*/ System.Type _activationType;
                    /*0x88*/ string _activationTypeName;
                    /*0x90*/ bool _isContextOk;
                    /*0x98*/ System.Runtime.Remoting.Proxies.RemotingProxy _sourceProxy;

                    /*0x708a254*/ ConstructionCall(System.Type type);
                    /*0x7091448*/ ConstructionCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70914f8*/ void InitDictionary();
                    /*0x7091650*/ bool get_IsContextOk();
                    /*0x7091658*/ void set_IsContextOk(bool value);
                    /*0x7091664*/ System.Type get_ActivationType();
                    /*0x709172c*/ string get_ActivationTypeName();
                    /*0x7091734*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0x709173c*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0x7091744*/ object[] get_CallSiteActivationAttributes();
                    /*0x709174c*/ void SetActivationAttributes(object[] attributes);
                    /*0x7091754*/ System.Collections.IList get_ContextProperties();
                    /*0x70917c4*/ void InitMethodProperty(string key, object value);
                    /*0x7091ea4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70924bc*/ System.Collections.IDictionary get_Properties();
                    /*0x709251c*/ System.Runtime.Remoting.Proxies.RemotingProxy get_SourceProxy();
                    /*0x7092524*/ void set_SourceProxy(System.Runtime.Remoting.Proxies.RemotingProxy value);
                }

                class ConstructionCallDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0x70933c8*/ ConstructionCallDictionary();
                    /*0x7091578*/ ConstructionCallDictionary(System.Runtime.Remoting.Activation.IConstructionCallMessage message);
                    /*0x709255c*/ object GetMethodProperty(string key);
                    /*0x7092e8c*/ void SetMethodProperty(string key, object value);
                }

                class ConstructionResponse : System.Runtime.Remoting.Messaging.MethodResponse, System.Runtime.Remoting.Activation.IConstructionReturnMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x708a734*/ ConstructionResponse(object resultObject, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x708ad58*/ ConstructionResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x7093790*/ ConstructionResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7093820*/ System.Collections.IDictionary get_Properties();
                }

                class EnvoyTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Runtime.Remoting.Messaging.EnvoyTerminatorSink Instance;

                    static /*0x7093a3c*/ EnvoyTerminatorSink();
                    /*0x7093a34*/ EnvoyTerminatorSink();
                    /*0x70938b8*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7093970*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ErrorMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x10*/ string _uri;

                    /*0x708841c*/ ErrorMessage();
                    /*0x7093aa4*/ int get_ArgCount();
                    /*0x7093aac*/ object[] get_Args();
                    /*0x7093ab4*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x7093abc*/ string get_MethodName();
                    /*0x7093afc*/ object get_MethodSignature();
                    /*0x7093b04*/ System.Collections.IDictionary get_Properties();
                    /*0x7093b0c*/ string get_TypeName();
                    /*0x7093b4c*/ string get_Uri();
                    /*0x7093b54*/ object GetArg(int arg_num);
                    /*0x7093b5c*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                }

                class Header
                {
                }

                class HeaderHandler : System.MulticastDelegate
                {
                    /*0x7093b64*/ HeaderHandler(object object, nint method);
                    /*0x7093c6c*/ object Invoke(System.Runtime.Remoting.Messaging.Header[] headers);
                }

                interface IInternalMessage
                {
                    /*0x380b9e8*/ System.Runtime.Remoting.Identity get_TargetIdentity();
                    /*0x380d83c*/ void set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x380b9e8*/ string get_Uri();
                    /*0x380d83c*/ void set_Uri(string value);
                }

                interface IMessage
                {
                    /*0x380b9e8*/ System.Collections.IDictionary get_Properties();
                }

                interface IMessageCtrl
                {
                }

                interface IMessageSink
                {
                    /*0x380bb68*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x380bcbc*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x380b6a0*/ int get_ArgCount();
                    /*0x380b9e8*/ object[] get_Args();
                    /*0x380b9e8*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x380b9e8*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x380b9e8*/ string get_MethodName();
                    /*0x380b9e8*/ object get_MethodSignature();
                    /*0x380b9e8*/ string get_TypeName();
                    /*0x380b9e8*/ string get_Uri();
                    /*0x380ba90*/ object GetArg(int argNum);
                }

                interface IMethodReturnMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x380b9e8*/ System.Exception get_Exception();
                    /*0x380b9e8*/ object[] get_OutArgs();
                    /*0x380b9e8*/ object get_ReturnValue();
                }

                class MethodCall : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _uri;
                    /*0x18*/ string _typeName;
                    /*0x20*/ string _methodName;
                    /*0x28*/ object[] _args;
                    /*0x30*/ System.Type[] _methodSignature;
                    /*0x38*/ System.Reflection.MethodBase _methodBase;
                    /*0x40*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x48*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x50*/ System.Type[] _genericArguments;
                    /*0x58*/ System.Collections.IDictionary ExternalProperties;
                    /*0x60*/ System.Collections.IDictionary InternalProperties;

                    static /*0x7094dd4*/ string GetTypeNameFromAssemblyQualifiedName(string aqname);
                    /*0x709144c*/ MethodCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7093d48*/ MethodCall(System.Runtime.Remoting.Messaging.CADMethodCallMessage msg);
                    /*0x7091440*/ MethodCall();
                    /*0x7093e9c*/ void CopyFrom(System.Runtime.Remoting.Messaging.IMethodMessage call);
                    /*0x7091a6c*/ void InitMethodProperty(string key, object value);
                    /*0x709203c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7094268*/ int get_ArgCount();
                    /*0x7094284*/ object[] get_Args();
                    /*0x709428c*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x70942fc*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x70948c0*/ string get_MethodName();
                    /*0x7094908*/ object get_MethodSignature();
                    /*0x70924ec*/ System.Collections.IDictionary get_Properties();
                    /*0x7094a50*/ void InitDictionary();
                    /*0x7094b5c*/ string get_TypeName();
                    /*0x7094bb8*/ string get_Uri();
                    /*0x7094bc0*/ void set_Uri(string value);
                    /*0x7094bc8*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x7094bd0*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x7094bd8*/ object GetArg(int argNum);
                    /*0x7094c08*/ void Init();
                    /*0x709432c*/ void ResolveMethod();
                    /*0x7094c0c*/ System.Type CastTo(string clientType, System.Type serverType);
                    /*0x7094e7c*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x7094e84*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x7094d80*/ System.Type[] get_GenericArguments();
                }

                class MCMDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0x7094e8c*/ MCMDictionary();
                    /*0x7094ad0*/ MCMDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                }

                class MessageDictionary : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
                {
                    /*0x10*/ System.Collections.IDictionary _internalProperties;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMethodMessage _message;
                    /*0x20*/ string[] _methodKeys;
                    /*0x28*/ bool _ownProperties;

                    /*0x709252c*/ MessageDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                    /*0x708f22c*/ bool HasUserData();
                    /*0x708f328*/ System.Collections.IDictionary get_InternalDictionary();
                    /*0x7095040*/ void set_MethodKeys(string[] value);
                    /*0x7095048*/ System.Collections.IDictionary AllocInternalProperties();
                    /*0x7091604*/ System.Collections.IDictionary GetInternalProperties();
                    /*0x70950a8*/ bool IsOverridenKey(string key);
                    /*0x7095130*/ bool get_IsFixedSize();
                    /*0x7095138*/ bool get_IsReadOnly();
                    /*0x7095140*/ object get_Item(object key);
                    /*0x7095274*/ void set_Item(object key, object value);
                    /*0x7092928*/ object GetMethodProperty(string key);
                    /*0x70930f4*/ void SetMethodProperty(string key, object value);
                    /*0x70953ec*/ System.Collections.ICollection get_Keys();
                    /*0x7095820*/ System.Collections.ICollection get_Values();
                    /*0x7095278*/ void Add(object key, object value);
                    /*0x7095c3c*/ void Clear();
                    /*0x7095ce8*/ bool Contains(object key);
                    /*0x7095e18*/ void Remove(object key);
                    /*0x7095f90*/ int get_Count();
                    /*0x7096058*/ bool get_IsSynchronized();
                    /*0x7096060*/ object get_SyncRoot();
                    /*0x7096064*/ void CopyTo(System.Array array, int index);
                    /*0x7096124*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x7096280*/ System.Collections.IDictionaryEnumerator GetEnumerator();

                    class DictionaryEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.MessageDictionary _methodDictionary;
                        /*0x18*/ System.Collections.IDictionaryEnumerator _hashtableEnum;
                        /*0x20*/ int _posMethod;

                        /*0x709617c*/ DictionaryEnumerator(System.Runtime.Remoting.Messaging.MessageDictionary methodDictionary);
                        /*0x70962d8*/ object get_Current();
                        /*0x70964a4*/ bool MoveNext();
                        /*0x7096664*/ void Reset();
                        /*0x709633c*/ System.Collections.DictionaryEntry get_Entry();
                        /*0x7096710*/ object get_Key();
                        /*0x7096714*/ object get_Value();
                    }
                }

                class MethodResponse : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _methodName;
                    /*0x18*/ string _uri;
                    /*0x20*/ string _typeName;
                    /*0x28*/ System.Reflection.MethodBase _methodBase;
                    /*0x30*/ object _returnValue;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Type[] _methodSignature;
                    /*0x48*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;
                    /*0x50*/ object[] _args;
                    /*0x58*/ object[] _outArgs;
                    /*0x60*/ System.Runtime.Remoting.Messaging.IMethodCallMessage _callMsg;
                    /*0x68*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x70*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x78*/ System.Collections.IDictionary ExternalProperties;
                    /*0x80*/ System.Collections.IDictionary InternalProperties;

                    /*0x708736c*/ MethodResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x7093680*/ MethodResponse(object returnValue, object[] outArgs, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x7088a64*/ MethodResponse(System.Runtime.Remoting.Messaging.IMethodCallMessage msg, System.Runtime.Remoting.Messaging.CADMethodReturnMessage retmsg);
                    /*0x7093794*/ MethodResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x7096728*/ void InitMethodProperty(string key, object value);
                    /*0x7096be8*/ int get_ArgCount();
                    /*0x7096c00*/ object[] get_Args();
                    /*0x7096c08*/ System.Exception get_Exception();
                    /*0x7096c10*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x7096c80*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x7096da4*/ string get_MethodName();
                    /*0x7096f3c*/ object get_MethodSignature();
                    /*0x709705c*/ object[] get_OutArgs();
                    /*0x7093824*/ System.Collections.IDictionary get_Properties();
                    /*0x7097238*/ object get_ReturnValue();
                    /*0x7096e70*/ string get_TypeName();
                    /*0x7097240*/ string get_Uri();
                    /*0x709730c*/ void set_Uri(string value);
                    /*0x7097314*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x7097318*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x7097320*/ object GetArg(int argNum);
                    /*0x7097354*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x70977f0*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x70977f8*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class MethodReturnDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalReturnKeys;
                    static /*0x8*/ string[] InternalExceptionKeys;

                    static /*0x7097800*/ MethodReturnDictionary();
                    /*0x709712c*/ MethodReturnDictionary(System.Runtime.Remoting.Messaging.IMethodReturnMessage message);
                }

                class MonoMethodMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ System.Reflection.RuntimeMethodInfo method;
                    /*0x18*/ object[] args;
                    /*0x20*/ string[] names;
                    /*0x28*/ byte[] arg_types;
                    /*0x30*/ System.Runtime.Remoting.Messaging.LogicalCallContext ctx;
                    /*0x38*/ object rval;
                    /*0x40*/ System.Exception exc;
                    /*0x48*/ System.Runtime.Remoting.Messaging.AsyncResult asyncResult;
                    /*0x50*/ System.Runtime.Remoting.Messaging.CallType call_type;
                    /*0x58*/ string uri;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MCMDictionary properties;
                    /*0x68*/ System.Runtime.Remoting.Identity identity;
                    /*0x70*/ System.Type[] methodSignature;

                    static /*0x7097eec*/ System.Reflection.MethodInfo GetMethodInfo(System.Type type, string methodName);
                    /*0x7097ce0*/ MonoMethodMessage(System.Reflection.MethodBase method, object[] out_args);
                    /*0x7097db0*/ MonoMethodMessage(System.Reflection.MethodInfo minfo, object[] in_args, object[] out_args);
                    /*0x7097f9c*/ MonoMethodMessage(System.Type type, string methodName, object[] in_args);
                    /*0x7097a30*/ void InitMessage(System.Reflection.RuntimeMethodInfo method, object[] out_args);
                    /*0x7097fd4*/ System.Collections.IDictionary get_Properties();
                    /*0x7098048*/ int get_ArgCount();
                    /*0x70980fc*/ object[] get_Args();
                    /*0x7098104*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x709810c*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
                    /*0x7098114*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x709811c*/ string get_MethodName();
                    /*0x7098170*/ object get_MethodSignature();
                    /*0x70982a4*/ string get_TypeName();
                    /*0x709830c*/ string get_Uri();
                    /*0x7098314*/ void set_Uri(string value);
                    /*0x709831c*/ object GetArg(int arg_num);
                    /*0x7098350*/ System.Exception get_Exception();
                    /*0x7098358*/ int get_OutArgCount();
                    /*0x70983bc*/ object[] get_OutArgs();
                    /*0x70984f8*/ object get_ReturnValue();
                    /*0x7098500*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x7098508*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x7098510*/ System.Runtime.Remoting.Messaging.AsyncResult get_AsyncResult();
                    /*0x7098080*/ System.Runtime.Remoting.Messaging.CallType get_CallType();
                    /*0x7098518*/ bool NeedsOutProcessing(ref int outCount);
                }

                enum CallType
                {
                    Sync = 0,
                    BeginInvoke = 1,
                    EndInvoke = 2,
                    OneWay = 3,
                }

                class OneWayAttribute : System.Attribute
                {
                }

                class RemotingSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x70986ec*/ RemotingSurrogate();
                    /*0x70985a4*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0x70986b4*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class ObjRefSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x7098844*/ ObjRefSurrogate();
                    /*0x70986f4*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0x70987f8*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class RemotingSurrogateSelector : System.Runtime.Serialization.ISurrogateSelector
                {
                    static /*0x0*/ System.Type s_cachedTypeObjRef;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.ObjRefSurrogate _objRefSurrogate;
                    static /*0x10*/ System.Runtime.Remoting.Messaging.RemotingSurrogate _objRemotingSurrogate;
                    /*0x10*/ System.Runtime.Serialization.ISurrogateSelector _next;

                    static /*0x7098a0c*/ RemotingSurrogateSelector();
                    /*0x70890b4*/ RemotingSurrogateSelector();
                    /*0x709884c*/ System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector ssout);
                }

                class ReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ object[] _outArgs;
                    /*0x18*/ object[] _args;
                    /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callCtx;
                    /*0x28*/ object _returnValue;
                    /*0x30*/ string _uri;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Reflection.MethodBase _methodBase;
                    /*0x48*/ string _methodName;
                    /*0x50*/ System.Type[] _methodSignature;
                    /*0x58*/ string _typeName;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MethodReturnDictionary _properties;
                    /*0x68*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x70*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;

                    /*0x7098b1c*/ ReturnMessage(object ret, object[] outArgs, int outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0x70871f0*/ ReturnMessage(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0x7098ce4*/ int get_ArgCount();
                    /*0x7098d00*/ object[] get_Args();
                    /*0x7098d08*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x7098d78*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x7098d80*/ string get_MethodName();
                    /*0x7098de4*/ object get_MethodSignature();
                    /*0x7098f2c*/ System.Collections.IDictionary get_Properties();
                    /*0x7098fa0*/ string get_TypeName();
                    /*0x7099018*/ string get_Uri();
                    /*0x7099020*/ void set_Uri(string value);
                    /*0x7099028*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x7099030*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x7099038*/ object GetArg(int argNum);
                    /*0x7099068*/ System.Exception get_Exception();
                    /*0x7099070*/ object[] get_OutArgs();
                    /*0x7099134*/ object get_ReturnValue();
                    /*0x709913c*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x7099144*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class ServerContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x7099314*/ ServerContextTerminatorSink();
                    /*0x709914c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7099254*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x709931c*/ ServerObjectTerminatorSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x709934c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x70994c0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.ServerIdentity _identity;

                    /*0x7099688*/ ServerObjectReplySink(System.Runtime.Remoting.ServerIdentity identity, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x70996cc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7099794*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class StackBuilderSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.MarshalByRefObject _target;
                    /*0x18*/ System.Runtime.Remoting.Proxies.RealProxy _rp;

                    /*0x70997cc*/ StackBuilderSink(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x7099894*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x7099d24*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x7099e58*/ void ExecuteAsyncMessage(object ob);
                    /*0x7099960*/ void CheckParameters(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x709a038*/ void <AsyncProcessMessage>b__4_0(object data);
                }
            }
        }

        namespace Versioning
        {
            class NonVersionableAttribute : System.Attribute
            {
                /*0x709a0b8*/ NonVersionableAttribute();
            }

            class TargetFrameworkAttribute : System.Attribute
            {
                /*0x10*/ string _frameworkName;
                /*0x18*/ string _frameworkDisplayName;

                /*0x709a0c0*/ TargetFrameworkAttribute(string frameworkName);
                /*0x709a13c*/ void set_FrameworkDisplayName(string value);
            }

            class BinaryCompatibility
            {
                static /*0x0*/ bool TargetsAtLeast_Desktop_V4_5;
                static /*0x1*/ bool TargetsAtLeast_Desktop_V4_5_1;

                static /*0x709a144*/ BinaryCompatibility();
            }
        }

        namespace Serialization
        {
            interface IDeserializationCallback
            {
                /*0x380d83c*/ void OnDeserialization(object sender);
            }

            interface IFormatterConverter
            {
                /*0x380bcbc*/ object Convert(object value, System.Type type);
                /*0x380b2f0*/ bool ToBoolean(object value);
                /*0x380b2f0*/ byte ToByte(object value);
                /*0x380b7a8*/ int ToInt32(object value);
                long ToInt64(object value);
                float ToSingle(object value);
                /*0x380bb68*/ string ToString(object value);
            }

            interface IObjectReference
            {
                object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            }

            interface ISerializable
            {
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class SerializationException : System.SystemException
            {
                static /*0x0*/ string s_nullMessage;

                static /*0x709a254*/ SerializationException();
                /*0x709a190*/ SerializationException();
                /*0x709a204*/ SerializationException(string message);
                /*0x709a228*/ SerializationException(string message, System.Exception innerException);
                /*0x709a24c*/ SerializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            struct SerializationEntry
            {
                /*0x10*/ string _name;
                /*0x18*/ object _value;
                /*0x20*/ System.Type _type;

                /*0x709a2c0*/ SerializationEntry(string entryName, object entryValue, System.Type entryType);
                /*0x709a304*/ object get_Value();
                /*0x709a30c*/ string get_Name();
            }

            class SerializationInfoEnumerator : System.Collections.IEnumerator
            {
                /*0x10*/ string[] _members;
                /*0x18*/ object[] _data;
                /*0x20*/ System.Type[] _types;
                /*0x28*/ int _numItems;
                /*0x2c*/ int _currItem;
                /*0x30*/ bool _current;

                /*0x709a314*/ SerializationInfoEnumerator(string[] members, object[] info, System.Type[] types, int numItems);
                /*0x708c890*/ bool MoveNext();
                /*0x709a38c*/ object System.Collections.IEnumerator.get_Current();
                /*0x7093c80*/ System.Runtime.Serialization.SerializationEntry get_Current();
                /*0x709a404*/ void Reset();
                /*0x708c718*/ string get_Name();
                /*0x708c79c*/ object get_Value();
                /*0x709a414*/ System.Type get_ObjectType();
            }

            class DeserializationEventHandler : System.MulticastDelegate
            {
                /*0x709a498*/ DeserializationEventHandler(object object, nint method);
                /*0x709a5a0*/ void Invoke(object sender);
            }

            class SerializationEventHandler : System.MulticastDelegate
            {
                /*0x709a5b4*/ SerializationEventHandler(object object, nint method);
                /*0x709a654*/ void Invoke(System.Runtime.Serialization.StreamingContext context);
            }

            class FormatterConverter : System.Runtime.Serialization.IFormatterConverter
            {
                static /*0x709a708*/ void ThrowValueNullException();
                /*0x709aae4*/ FormatterConverter();
                /*0x709a668*/ object Convert(object value, System.Type type);
                /*0x709a754*/ bool ToBoolean(object value);
                /*0x709a7ec*/ byte ToByte(object value);
                /*0x709a884*/ int ToInt32(object value);
                /*0x709a91c*/ long ToInt64(object value);
                /*0x709a9b4*/ float ToSingle(object value);
                /*0x709aa4c*/ string ToString(object value);
            }

            interface ISerializationSurrogate
            {
                void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            interface ISurrogateSelector
            {
                System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class MemberHolder
            {
                /*0x10*/ System.Type _memberType;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;

                /*0x709aaec*/ MemberHolder(System.Type type, System.Runtime.Serialization.StreamingContext ctx);
                /*0x709ab40*/ int GetHashCode();
                /*0x709ab60*/ bool Equals(object obj);
            }

            class SerializationBinder
            {
                /*0x709ac18*/ SerializationBinder();
                /*0x709abec*/ void BindToName(System.Type serializedType, ref string assemblyName, ref string typeName);
                /*0x380bcbc*/ System.Type BindToType(string assemblyName, string typeName);
            }

            class SerializationEvents
            {
                /*0x10*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializingMethods;
                /*0x18*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializedMethods;
                /*0x20*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializingMethods;
                /*0x28*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializedMethods;

                static /*0x709b010*/ void InvokeOnDelegate(object obj, System.Runtime.Serialization.StreamingContext context, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                static /*0x709b11c*/ System.Runtime.Serialization.SerializationEventHandler AddOnDelegate(object obj, System.Runtime.Serialization.SerializationEventHandler handler, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                /*0x709ac20*/ SerializationEvents(System.Type t);
                /*0x709ad74*/ System.Collections.Generic.List<System.Reflection.MethodInfo> GetMethodsWithAttribute(System.Type attribute, System.Type t);
                /*0x709af9c*/ bool get_HasOnSerializingEvents();
                /*0x709afbc*/ void InvokeOnSerializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x709b060*/ void InvokeOnDeserializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x709b0b4*/ void InvokeOnDeserialized(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x709b108*/ System.Runtime.Serialization.SerializationEventHandler AddOnSerialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
                /*0x709b34c*/ System.Runtime.Serialization.SerializationEventHandler AddOnDeserialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
            }

            class SerializationEventsCache
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Type, System.Runtime.Serialization.SerializationEvents> s_cache;

                static /*0x709b498*/ SerializationEventsCache();
                static /*0x709b360*/ System.Runtime.Serialization.SerializationEvents GetSerializationEventsForType(System.Type t);

                class <>c
                {
                    static /*0x0*/ System.Runtime.Serialization.SerializationEventsCache.<> <>9;
                    static /*0x8*/ System.Func<System.Type, System.Runtime.Serialization.SerializationEvents> <>9__1_0;

                    static /*0x709b530*/ <>c();
                    /*0x709b598*/ <>c();
                    /*0x709b5a0*/ System.Runtime.Serialization.SerializationEvents <GetSerializationEventsForType>b__1_0(System.Type type);
                }
            }

            class SerializationObjectManager
            {
                /*0x10*/ System.Collections.Generic.Dictionary<object, object> _objectSeenTable;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;
                /*0x28*/ System.Runtime.Serialization.SerializationEventHandler _onSerializedHandler;

                /*0x709b5f8*/ SerializationObjectManager(System.Runtime.Serialization.StreamingContext context);
                /*0x709b6a4*/ void RegisterObject(object obj);
                /*0x709b840*/ void RaiseOnSerializedEvent();
                /*0x709b7a8*/ void AddOnSerialized(object obj);
            }

            class ValueTypeFixupInfo
            {
                /*0x10*/ long _containerID;
                /*0x18*/ System.Reflection.FieldInfo _parentField;
                /*0x20*/ int[] _parentIndex;

                /*0x709b860*/ ValueTypeFixupInfo(long containerID, System.Reflection.FieldInfo member, int[] parentIndex);
                /*0x709b9d8*/ long get_ContainerID();
                /*0x709b9e0*/ System.Reflection.FieldInfo get_ParentField();
                /*0x709b9e8*/ int[] get_ParentIndex();
            }

            class FormatterServices
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Runtime.Serialization.MemberHolder, System.Reflection.MemberInfo[]> m_MemberInfoTable;
                static /*0x8*/ bool unsafeTypeForwardersIsEnabled;
                static /*0x9*/ bool unsafeTypeForwardersIsEnabledInitialized;
                static /*0x10*/ System.Type[] advancedTypes;
                static /*0x18*/ System.Reflection.Binder s_binder;

                static /*0x709b9f0*/ FormatterServices();
                static /*0x709bb90*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.RuntimeType type);
                static /*0x709bd28*/ bool CheckSerializable(System.RuntimeType type);
                static /*0x709bd48*/ System.Reflection.MemberInfo[] InternalGetSerializableMembers(System.RuntimeType type);
                static /*0x709c424*/ bool GetParentTypes(System.RuntimeType parentType, ref System.RuntimeType[] parentTypes, ref int parentTypeCount);
                static /*0x709c828*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.Type type, System.Runtime.Serialization.StreamingContext context);
                static /*0x709cad0*/ object GetUninitializedObject(System.Type type);
                static /*0x709cc84*/ object nativeGetUninitializedObject(System.RuntimeType type);
                static /*0x709cc88*/ bool GetEnableUnsafeTypeForwarders();
                static /*0x709cc90*/ bool UnsafeTypeForwardersIsEnabled();
                static /*0x709cd38*/ void SerializationSetValue(System.Reflection.MemberInfo fi, object target, object value);
                static /*0x709cf2c*/ object PopulateObjectMembers(object obj, System.Reflection.MemberInfo[] members, object[] data);
                static /*0x709d220*/ object[] GetObjectData(object obj, System.Reflection.MemberInfo[] members);
                static /*0x709d594*/ System.Type GetTypeFromAssembly(System.Reflection.Assembly assem, string name);
                static /*0x709d62c*/ System.Reflection.Assembly LoadAssemblyFromString(string assemblyName);
                static /*0x709d634*/ System.Reflection.Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
                static /*0x709d708*/ string GetClrAssemblyName(System.Type type, ref bool hasTypeForwardedFrom);
                static /*0x709d864*/ string GetClrTypeFullName(System.Type type);
                static /*0x709d8e4*/ string GetClrTypeFullNameForArray(System.Type type);
                static /*0x709db08*/ string GetClrTypeFullNameForNonArrayTypes(System.Type type);

                class <>c__DisplayClass9_0
                {
                    /*0x10*/ System.Type type;

                    /*0x709cac8*/ <>c__DisplayClass9_0();
                    /*0x709dd7c*/ System.Reflection.MemberInfo[] <GetSerializableMembers>b__0(System.Runtime.Serialization.MemberHolder _);
                }
            }

            class SurrogateForCyclicalReference : System.Runtime.Serialization.ISerializationSurrogate
            {
                /*0x10*/ System.Runtime.Serialization.ISerializationSurrogate innerSurrogate;

                /*0x709de28*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x709def8*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class ObjectIDGenerator
            {
                static /*0x0*/ int[] sizes;
                /*0x10*/ int m_currentCount;
                /*0x14*/ int m_currentSize;
                /*0x18*/ long[] m_ids;
                /*0x20*/ object[] m_objs;

                static /*0x709e6cc*/ ObjectIDGenerator();
                /*0x709dfd4*/ ObjectIDGenerator();
                /*0x709e0c0*/ int FindElement(object obj, ref bool found);
                /*0x709e184*/ long GetId(object obj, ref bool firstTime);
                /*0x709e5fc*/ long HasId(object obj, ref bool firstTime);
                /*0x709e314*/ void Rehash();
            }

            class ObjectManager
            {
                /*0x10*/ System.Runtime.Serialization.DeserializationEventHandler m_onDeserializationHandler;
                /*0x18*/ System.Runtime.Serialization.SerializationEventHandler m_onDeserializedHandler;
                /*0x20*/ System.Runtime.Serialization.ObjectHolder[] m_objects;
                /*0x28*/ object m_topObject;
                /*0x30*/ System.Runtime.Serialization.ObjectHolderList m_specialFixupObjects;
                /*0x38*/ long m_fixupCount;
                /*0x40*/ System.Runtime.Serialization.ISurrogateSelector m_selector;
                /*0x48*/ System.Runtime.Serialization.StreamingContext m_context;

                static /*0x70a118c*/ System.Reflection.RuntimeConstructorInfo GetConstructor(System.RuntimeType t);
                /*0x709e76c*/ ObjectManager(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, bool checkSecurity, bool isCrossAppDomain);
                /*0x709e810*/ bool CanCallGetType(object obj);
                /*0x709e818*/ void set_TopObject(object value);
                /*0x709e820*/ object get_TopObject();
                /*0x709e828*/ System.Runtime.Serialization.ObjectHolderList get_SpecialFixupObjects();
                /*0x709e898*/ System.Runtime.Serialization.ObjectHolder FindObjectHolder(long objectID);
                /*0x709e8f0*/ System.Runtime.Serialization.ObjectHolder FindOrCreateObjectHolder(long objectID);
                /*0x709e9bc*/ void AddObjectHolder(System.Runtime.Serialization.ObjectHolder holder);
                /*0x709eae8*/ bool GetCompletionInfo(System.Runtime.Serialization.FixupHolder fixup, ref System.Runtime.Serialization.ObjectHolder holder, ref object member, bool bThrowIfMissing);
                /*0x709edcc*/ void FixupSpecialObject(System.Runtime.Serialization.ObjectHolder holder);
                /*0x709fba8*/ bool ResolveObjectReference(System.Runtime.Serialization.ObjectHolder holder);
                /*0x709f574*/ bool DoValueTypeFixup(System.Reflection.FieldInfo memberToFix, System.Runtime.Serialization.ObjectHolder holder, object value);
                /*0x709fe34*/ void CompleteObject(System.Runtime.Serialization.ObjectHolder holder, bool bObjectFullyComplete);
                /*0x709fac0*/ void DoNewlyRegisteredObjectFixups(System.Runtime.Serialization.ObjectHolder holder);
                /*0x70a0514*/ object GetObject(long objectID);
                /*0x70a05c4*/ void RegisterString(string obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);
                /*0x70a07e4*/ void RegisterObject(object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);
                /*0x709f294*/ void CompleteISerializableObject(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70a12bc*/ void DoFixups();
                /*0x70a15d8*/ void RegisterFixup(System.Runtime.Serialization.FixupHolder fixup, long objectToBeFixed, long objectRequired);
                /*0x70a1800*/ void RecordFixup(long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);
                /*0x70a1a84*/ void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
                /*0x70a1bd8*/ void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired);
                /*0x70a1d2c*/ void RaiseDeserializationEvent();
                /*0x70a1d78*/ void AddOnDeserialization(System.Runtime.Serialization.DeserializationEventHandler handler);
                /*0x70a1e08*/ void AddOnDeserialized(object obj);
                /*0x70a1ea0*/ void RaiseOnDeserializedEvent(object obj);
                /*0x70a1f24*/ void RaiseOnDeserializingEvent(object obj);
            }

            class ObjectHolder
            {
                /*0x10*/ object m_object;
                /*0x18*/ long m_id;
                /*0x20*/ int m_missingElementsRemaining;
                /*0x24*/ int m_missingDecendents;
                /*0x28*/ System.Runtime.Serialization.SerializationInfo m_serInfo;
                /*0x30*/ System.Runtime.Serialization.ISerializationSurrogate m_surrogate;
                /*0x38*/ System.Runtime.Serialization.FixupHolderList m_missingElements;
                /*0x40*/ System.Runtime.Serialization.LongList m_dependentObjects;
                /*0x48*/ System.Runtime.Serialization.ObjectHolder m_next;
                /*0x50*/ int m_flags;
                /*0x54*/ bool m_markForFixupWhenAvailable;
                /*0x58*/ System.Runtime.Serialization.ValueTypeFixupInfo m_valueFixup;
                /*0x60*/ System.Runtime.Serialization.TypeLoadExceptionHolder m_typeLoad;
                /*0x68*/ bool m_reachable;

                /*0x709e988*/ ObjectHolder(long objID);
                /*0x70a0d8c*/ ObjectHolder(object obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x70a06bc*/ ObjectHolder(string obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x70a1fa8*/ void IncrementDescendentFixups(int amount);
                /*0x70a04a4*/ void DecrementFixupsRemaining(System.Runtime.Serialization.ObjectManager manager);
                /*0x70a04c8*/ void RemoveDependency(long id);
                /*0x70a16b0*/ void AddFixup(System.Runtime.Serialization.FixupHolder fixup, System.Runtime.Serialization.ObjectManager manager);
                /*0x70a1fb8*/ void UpdateDescendentDependencyChain(int amount, System.Runtime.Serialization.ObjectManager manager);
                /*0x70a177c*/ void AddDependency(long dependentObject);
                /*0x70a0fd4*/ void UpdateData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainer, System.Reflection.FieldInfo field, int[] arrayIndex, System.Runtime.Serialization.ObjectManager manager);
                /*0x70a0508*/ void MarkForCompletionWhenAvailable();
                /*0x709f1dc*/ void SetFlags();
                /*0x709edc0*/ bool get_IsIncompleteObjectReference();
                /*0x709fe24*/ void set_IsIncompleteObjectReference(bool value);
                /*0x70a0fc4*/ bool get_RequiresDelayedFixup();
                /*0x709f530*/ bool get_RequiresValueTypeFixup();
                /*0x709f53c*/ bool get_ValueTypeFixupPerformed();
                /*0x70a04f4*/ void set_ValueTypeFixupPerformed(bool value);
                /*0x70a0498*/ bool get_HasISerializable();
                /*0x709f024*/ bool get_HasSurrogate();
                /*0x709f030*/ bool get_CanSurrogatedObjectValueChange();
                /*0x709eda0*/ bool get_CanObjectValueChange();
                /*0x70a2030*/ int get_DirectlyDependentObjects();
                /*0x70a1180*/ int get_TotalDependentObjects();
                /*0x70a2038*/ bool get_Reachable();
                /*0x70a2040*/ void set_Reachable(bool value);
                /*0x70a04e4*/ bool get_TypeLoadExceptionReachable();
                /*0x70a204c*/ System.Runtime.Serialization.TypeLoadExceptionHolder get_TypeLoadException();
                /*0x70a2054*/ void set_TypeLoadException(System.Runtime.Serialization.TypeLoadExceptionHolder value);
                /*0x70a205c*/ object get_ObjectValue();
                /*0x709f0cc*/ void SetObjectValue(object obj, System.Runtime.Serialization.ObjectManager manager);
                /*0x70a2064*/ System.Runtime.Serialization.SerializationInfo get_SerializationInfo();
                /*0x70a206c*/ void set_SerializationInfo(System.Runtime.Serialization.SerializationInfo value);
                /*0x70a2074*/ System.Runtime.Serialization.ISerializationSurrogate get_Surrogate();
                /*0x70a207c*/ System.Runtime.Serialization.LongList get_DependentObjects();
                /*0x70a2084*/ void set_DependentObjects(System.Runtime.Serialization.LongList value);
                /*0x70a15bc*/ bool get_RequiresSerInfoFixup();
                /*0x709f510*/ void set_RequiresSerInfoFixup(bool value);
                /*0x70a208c*/ System.Runtime.Serialization.ValueTypeFixupInfo get_ValueFixup();
                /*0x709ed7c*/ bool get_CompletelyFixed();
                /*0x70a2018*/ long get_ContainerID();
            }

            class FixupHolder
            {
                /*0x10*/ long m_id;
                /*0x18*/ object m_fixupInfo;
                /*0x20*/ int m_fixupType;

                /*0x70a2094*/ FixupHolder(long id, object fixupInfo, int fixupType);
            }

            class FixupHolderList
            {
                /*0x10*/ System.Runtime.Serialization.FixupHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x70a20e0*/ FixupHolderList();
                /*0x70a20e8*/ FixupHolderList(int startingSize);
                /*0x70a215c*/ void Add(System.Runtime.Serialization.FixupHolder fixup);
                /*0x70a2208*/ void EnlargeArray();
            }

            class LongList
            {
                /*0x10*/ long[] m_values;
                /*0x18*/ int m_count;
                /*0x1c*/ int m_totalItems;
                /*0x20*/ int m_currentItem;

                /*0x70a229c*/ LongList();
                /*0x70a22a4*/ LongList(int startingSize);
                /*0x70a2318*/ void Add(long value);
                /*0x70a242c*/ int get_Count();
                /*0x70a2434*/ void StartEnumeration();
                /*0x70a2440*/ bool MoveNext();
                /*0x70a24c0*/ long get_Current();
                /*0x70a24f4*/ bool RemoveElement(long value);
                /*0x70a2398*/ void EnlargeArray();
            }

            class ObjectHolderList
            {
                /*0x10*/ System.Runtime.Serialization.ObjectHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x70a2580*/ ObjectHolderList();
                /*0x70a2588*/ ObjectHolderList(int startingSize);
                /*0x70a25fc*/ void Add(System.Runtime.Serialization.ObjectHolder value);
                /*0x70a2708*/ System.Runtime.Serialization.ObjectHolderListEnumerator GetFixupEnumerator();
                /*0x70a2674*/ void EnlargeArray();
                /*0x70a27c8*/ int get_Version();
                /*0x70a27d0*/ int get_Count();
            }

            class ObjectHolderListEnumerator
            {
                /*0x10*/ bool m_isFixupEnumerator;
                /*0x18*/ System.Runtime.Serialization.ObjectHolderList m_list;
                /*0x20*/ int m_startingVersion;
                /*0x24*/ int m_currPos;

                /*0x70a2764*/ ObjectHolderListEnumerator(System.Runtime.Serialization.ObjectHolderList list, bool isFixupEnumerator);
                /*0x70a27d8*/ bool MoveNext();
                /*0x70a287c*/ System.Runtime.Serialization.ObjectHolder get_Current();
            }

            class TypeLoadExceptionHolder
            {
                /*0x10*/ string m_typeName;

                /*0x70a28b8*/ TypeLoadExceptionHolder(string typeName);
                /*0x70a28e8*/ string get_TypeName();
            }

            class SafeSerializationEventArgs : System.EventArgs
            {
                /*0x10*/ System.Runtime.Serialization.StreamingContext m_streamingContext;
                /*0x20*/ System.Collections.Generic.List<object> m_serializedStates;

                /*0x70a28f0*/ SafeSerializationEventArgs(System.Runtime.Serialization.StreamingContext streamingContext);
                /*0x70a29c0*/ System.Collections.Generic.IList<object> get_SerializedStates();
            }

            interface ISafeSerializationData
            {
                /*0x380d83c*/ void CompleteDeserialization(object deserialized);
            }

            class SafeSerializationManager : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                /*0x10*/ System.Collections.Generic.IList<object> m_serializedStates;
                /*0x18*/ System.Runtime.Serialization.SerializationInfo m_savedSerializationInfo;
                /*0x20*/ object m_realObject;
                /*0x28*/ System.RuntimeType m_realType;
                /*0x30*/ System.EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs> SerializeObjectState;

                /*0x70a29c8*/ SafeSerializationManager();
                /*0x70a29d0*/ SafeSerializationManager(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70a2f00*/ bool get_IsActive();
                /*0x70a2f10*/ void CompleteSerialization(object serializedObject, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70a3260*/ void CompleteDeserialization(object deserializedObject);
                /*0x70a35fc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70a36a0*/ object System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x70a3974*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
            }

            class OptionalFieldAttribute : System.Attribute
            {
                /*0x10*/ int versionAdded;

                /*0x70a3a30*/ OptionalFieldAttribute();
                /*0x70a3a40*/ void set_VersionAdded(int value);
            }

            class OnSerializingAttribute : System.Attribute
            {
                /*0x70a3ab0*/ OnSerializingAttribute();
            }

            class OnSerializedAttribute : System.Attribute
            {
                /*0x70a3ab8*/ OnSerializedAttribute();
            }

            class OnDeserializingAttribute : System.Attribute
            {
                /*0x70a3ac0*/ OnDeserializingAttribute();
            }

            class OnDeserializedAttribute : System.Attribute
            {
                /*0x70a3ac8*/ OnDeserializedAttribute();
            }

            class SerializationFieldInfo : System.Reflection.FieldInfo
            {
                /*0x10*/ System.Reflection.RuntimeFieldInfo m_field;
                /*0x18*/ string m_serializationName;

                /*0x70a3b14*/ SerializationFieldInfo(System.Reflection.RuntimeFieldInfo field, string namePrefix);
                /*0x70a3ad0*/ System.Reflection.Module get_Module();
                /*0x70a3af0*/ int get_MetadataToken();
                /*0x70a3bbc*/ string get_Name();
                /*0x70a3bc4*/ System.Type get_DeclaringType();
                /*0x70a3be4*/ System.Type get_ReflectedType();
                /*0x70a3c04*/ object[] GetCustomAttributes(bool inherit);
                /*0x70a3c2c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70a3c54*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70a3c78*/ System.Type get_FieldType();
                /*0x70a3c9c*/ object GetValue(object obj);
                /*0x70a3cc0*/ object InternalGetValue(object obj);
                /*0x70a3d40*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x70a3d64*/ void InternalSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x70a3e14*/ System.Reflection.RuntimeFieldInfo get_FieldInfo();
                /*0x70a3e1c*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x70a3e40*/ System.Reflection.FieldAttributes get_Attributes();
            }

            class SerializationInfo
            {
                /*0x10*/ string[] m_members;
                /*0x18*/ object[] m_data;
                /*0x20*/ System.Type[] m_types;
                /*0x28*/ System.Collections.Generic.Dictionary<string, int> m_nameToIndex;
                /*0x30*/ int m_currMember;
                /*0x38*/ System.Runtime.Serialization.IFormatterConverter m_converter;
                /*0x40*/ string m_fullTypeName;
                /*0x48*/ string m_assemName;
                /*0x50*/ System.Type objectType;
                /*0x58*/ bool isFullTypeNameSetExplicit;
                /*0x59*/ bool isAssemblyNameSetExplicit;
                /*0x5a*/ bool requireSameTokenInPartialTrust;

                static /*0x70a40bc*/ bool Compare(byte[] a, byte[] b);
                static /*0x70a40b8*/ void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName);
                static /*0x70a4150*/ bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName);
                /*0x70a3e64*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter);
                /*0x70a3e6c*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);
                /*0x70a40a8*/ string get_FullTypeName();
                /*0x70a40b0*/ string get_AssemblyName();
                /*0x70a3108*/ void SetType(System.Type type);
                /*0x70a4284*/ int get_MemberCount();
                /*0x70a428c*/ System.Type get_ObjectType();
                /*0x70a4294*/ bool get_IsFullTypeNameSetExplicit();
                /*0x70a429c*/ bool get_IsAssemblyNameSetExplicit();
                /*0x70a42a4*/ System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator();
                /*0x70a4320*/ void ExpandArrays();
                /*0x70a308c*/ void AddValue(string name, object value, System.Type type);
                /*0x70a4638*/ void AddValue(string name, object value);
                /*0x70a46b8*/ void AddValue(string name, bool value);
                /*0x70a4734*/ void AddValue(string name, byte value);
                /*0x70a47ac*/ void AddValue(string name, short value);
                /*0x70a4824*/ void AddValue(string name, int value);
                /*0x70a489c*/ void AddValue(string name, long value);
                /*0x70a4914*/ void AddValue(string name, ulong value);
                /*0x70a498c*/ void AddValue(string name, float value);
                /*0x70a4a04*/ void AddValue(string name, System.DateTime value);
                /*0x70a4468*/ void AddValueInternal(string name, object value, System.Type type);
                /*0x70a4ac4*/ void UpdateValue(string name, object value, System.Type type);
                /*0x70a4bb4*/ int FindElement(string name);
                /*0x70a4c78*/ object GetElement(string name, ref System.Type foundType);
                /*0x70a4d8c*/ object GetElementNoThrow(string name, ref System.Type foundType);
                /*0x70a2cf8*/ object GetValue(string name, System.Type type);
                /*0x70a2bf0*/ object GetValueNoThrow(string name, System.Type type);
                /*0x70a4e28*/ bool GetBoolean(string name);
                /*0x70a4f74*/ byte GetByte(string name);
                /*0x70a50b4*/ int GetInt32(string name);
                /*0x70a51f4*/ long GetInt64(string name);
                /*0x70a5334*/ float GetSingle(string name);
                /*0x70a5474*/ string GetString(string name);
            }

            struct StreamingContext
            {
                /*0x10*/ object m_additionalContext;
                /*0x18*/ System.Runtime.Serialization.StreamingContextStates m_state;

                /*0x70a55ac*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state);
                /*0x70a55bc*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state, object additional);
                /*0x70a55cc*/ object get_Context();
                /*0x70a55d4*/ bool Equals(object obj);
                /*0x70a5684*/ int GetHashCode();
                /*0x70a568c*/ System.Runtime.Serialization.StreamingContextStates get_State();
            }

            enum StreamingContextStates
            {
                CrossProcess = 1,
                CrossMachine = 2,
                File = 4,
                Persistence = 8,
                Remoting = 16,
                Other = 32,
                Clone = 64,
                CrossAppDomain = 128,
                All = 255,
            }

            namespace Formatters
            {
                enum FormatterTypeStyle
                {
                    TypesWhenNeeded = 0,
                    TypesAlways = 1,
                    XsdString = 2,
                }

                enum FormatterAssemblyStyle
                {
                    Simple = 0,
                    Full = 1,
                }

                enum TypeFilterLevel
                {
                    Low = 2,
                    Full = 3,
                }

                namespace Binary
                {
                    enum BinaryHeaderEnum
                    {
                        SerializedStreamHeader = 0,
                        Object = 1,
                        ObjectWithMap = 2,
                        ObjectWithMapAssemId = 3,
                        ObjectWithMapTyped = 4,
                        ObjectWithMapTypedAssemId = 5,
                        ObjectString = 6,
                        Array = 7,
                        MemberPrimitiveTyped = 8,
                        MemberReference = 9,
                        ObjectNull = 10,
                        MessageEnd = 11,
                        Assembly = 12,
                        ObjectNullMultiple256 = 13,
                        ObjectNullMultiple = 14,
                        ArraySinglePrimitive = 15,
                        ArraySingleObject = 16,
                        ArraySingleString = 17,
                        CrossAppDomainMap = 18,
                        CrossAppDomainString = 19,
                        CrossAppDomainAssembly = 20,
                        MethodCall = 21,
                        MethodReturn = 22,
                    }

                    enum BinaryTypeEnum
                    {
                        Primitive = 0,
                        String = 1,
                        Object = 2,
                        ObjectUrt = 3,
                        ObjectUser = 4,
                        ObjectArray = 5,
                        StringArray = 6,
                        PrimitiveArray = 7,
                    }

                    enum BinaryArrayTypeEnum
                    {
                        Single = 0,
                        Jagged = 1,
                        Rectangular = 2,
                        SingleOffset = 3,
                        JaggedOffset = 4,
                        RectangularOffset = 5,
                    }

                    enum InternalSerializerTypeE
                    {
                        Soap = 1,
                        Binary = 2,
                    }

                    enum InternalParseTypeE
                    {
                        Empty = 0,
                        SerializedStreamHeader = 1,
                        Object = 2,
                        Member = 3,
                        ObjectEnd = 4,
                        MemberEnd = 5,
                        Headers = 6,
                        HeadersEnd = 7,
                        SerializedStreamHeaderEnd = 8,
                        Envelope = 9,
                        EnvelopeEnd = 10,
                        Body = 11,
                        BodyEnd = 12,
                    }

                    enum InternalObjectTypeE
                    {
                        Empty = 0,
                        Object = 1,
                        Array = 2,
                    }

                    enum InternalObjectPositionE
                    {
                        Empty = 0,
                        Top = 1,
                        Child = 2,
                        Headers = 3,
                    }

                    enum InternalArrayTypeE
                    {
                        Empty = 0,
                        Single = 1,
                        Jagged = 2,
                        Rectangular = 3,
                        Base64 = 4,
                    }

                    enum InternalMemberTypeE
                    {
                        Empty = 0,
                        Header = 1,
                        Field = 2,
                        Item = 3,
                    }

                    enum InternalMemberValueE
                    {
                        Empty = 0,
                        InlineValue = 1,
                        Nested = 2,
                        Reference = 3,
                        Null = 4,
                    }

                    enum InternalPrimitiveTypeE
                    {
                        Invalid = 0,
                        Boolean = 1,
                        Byte = 2,
                        Char = 3,
                        Currency = 4,
                        Decimal = 5,
                        Double = 6,
                        Int16 = 7,
                        Int32 = 8,
                        Int64 = 9,
                        SByte = 10,
                        Single = 11,
                        TimeSpan = 12,
                        DateTime = 13,
                        UInt16 = 14,
                        UInt32 = 15,
                        UInt64 = 16,
                        Null = 17,
                        String = 18,
                    }

                    enum ValueFixupEnum
                    {
                        Empty = 0,
                        Array = 1,
                        Header = 2,
                        Member = 3,
                    }

                    class BinaryConverter
                    {
                        static /*0x70a5694*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetBinaryTypeInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, string typeName, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, ref object typeInformation, ref int assemId);
                        static /*0x70a5da8*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetParserBinaryTypeInfo(System.Type type, ref object typeInformation);
                        static /*0x70a60b8*/ void WriteTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x70a6344*/ object ReadTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, ref int assemId);
                        static /*0x70a64e8*/ void TypeFromInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, ref System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, ref string typeString, ref System.Type type, ref bool isVariant);
                    }

                    class IOUtil
                    {
                        static /*0x70a6c7c*/ bool FlagTest(System.Runtime.Serialization.Formatters.Binary.MessageEnum flag, System.Runtime.Serialization.Formatters.Binary.MessageEnum target);
                        static /*0x70a6c88*/ void WriteStringWithCode(string value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x70a6cfc*/ void WriteWithCode(System.Type type, object value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                    }

                    class BinaryAssemblyInfo
                    {
                        /*0x10*/ string assemblyString;
                        /*0x18*/ System.Reflection.Assembly assembly;

                        /*0x70a7578*/ BinaryAssemblyInfo(string assemblyString);
                        /*0x70a75a8*/ BinaryAssemblyInfo(string assemblyString, System.Reflection.Assembly assembly);
                        /*0x70a75ec*/ System.Reflection.Assembly GetAssembly();
                    }

                    class SerializationHeaderRecord
                    {
                        /*0x10*/ int binaryFormatterMajorVersion;
                        /*0x14*/ int binaryFormatterMinorVersion;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x1c*/ int topId;
                        /*0x20*/ int headerId;
                        /*0x24*/ int majorVersion;
                        /*0x28*/ int minorVersion;

                        static /*0x70a7834*/ int GetInt32(byte[] buffer, int index);
                        /*0x70a771c*/ SerializationHeaderRecord();
                        /*0x70a772c*/ SerializationHeaderRecord(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
                        /*0x70a7784*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a78a8*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a79f8*/ void Dump();
                    }

                    class BinaryAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x18*/ string assemblyString;

                        /*0x70a79fc*/ BinaryAssembly();
                        /*0x70a7a04*/ void Set(int assemId, string assemblyString);
                        /*0x70a7a14*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a7a84*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a7ad0*/ void Dump();
                    }

                    class BinaryCrossAppDomainAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x14*/ int assemblyIndex;

                        /*0x70a7ad4*/ BinaryCrossAppDomainAssembly();
                        /*0x70a7adc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a7b20*/ void Dump();
                    }

                    class BinaryObject
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int mapId;

                        /*0x70a7b24*/ BinaryObject();
                        /*0x70a7b2c*/ void Set(int objectId, int mapId);
                        /*0x70a7b34*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a7ba4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a7be8*/ void Dump();
                    }

                    class BinaryMethodCall
                    {
                        /*0x10*/ string methodName;
                        /*0x18*/ string typeName;
                        /*0x20*/ object[] args;
                        /*0x28*/ object callContext;
                        /*0x30*/ System.Type[] argTypes;
                        /*0x38*/ bool bArgsPrimitive;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;

                        /*0x70a7d18*/ BinaryMethodCall();
                        /*0x70a7bec*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a7d14*/ void Dump();
                    }

                    class BinaryMethodReturn
                    {
                        static /*0x0*/ object instanceOfVoid;
                        /*0x10*/ object returnValue;
                        /*0x18*/ object[] args;
                        /*0x20*/ object callContext;
                        /*0x28*/ System.Type[] argTypes;
                        /*0x30*/ bool bArgsPrimitive;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;
                        /*0x38*/ System.Type returnType;

                        static /*0x70a7d28*/ BinaryMethodReturn();
                        /*0x70a7de0*/ BinaryMethodReturn();
                        /*0x70a7df0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a7f18*/ void Dump();
                    }

                    class BinaryObjectString
                    {
                        /*0x10*/ int objectId;
                        /*0x18*/ string value;

                        /*0x70a7f1c*/ BinaryObjectString();
                        /*0x70a7f24*/ void Set(int objectId, string value);
                        /*0x70a7f34*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a7fa4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a7ff0*/ void Dump();
                    }

                    class BinaryCrossAppDomainString
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int value;

                        /*0x70a7ff4*/ BinaryCrossAppDomainString();
                        /*0x70a7ffc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a8040*/ void Dump();
                    }

                    class BinaryCrossAppDomainMap
                    {
                        /*0x10*/ int crossAppDomainArrayIndex;

                        /*0x70a8044*/ BinaryCrossAppDomainMap();
                        /*0x70a804c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a8074*/ void Dump();
                    }

                    class MemberPrimitiveTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum;
                        /*0x18*/ object value;

                        /*0x70a8078*/ MemberPrimitiveTyped();
                        /*0x70a8080*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, object value);
                        /*0x70a8090*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a80f0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a8140*/ void Dump();
                    }

                    class BinaryObjectWithMap
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ int assemId;

                        /*0x70a8144*/ BinaryObjectWithMap();
                        /*0x70a814c*/ BinaryObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70a8174*/ void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId);
                        /*0x70a81d8*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a82ec*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a841c*/ void Dump();
                    }

                    class BinaryObjectWithMapTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x38*/ object[] typeInformationA;
                        /*0x40*/ int[] memberAssemIds;
                        /*0x48*/ int assemId;

                        /*0x70a8420*/ BinaryObjectWithMapTyped();
                        /*0x70a8428*/ BinaryObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70a8450*/ void Set(int objectId, string name, int numMembers, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId);
                        /*0x70a8500*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a86d8*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class BinaryArray
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int rank;
                        /*0x18*/ int[] lengthA;
                        /*0x20*/ int[] lowerBoundA;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x30*/ object typeInformation;
                        /*0x38*/ int assemId;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum;

                        /*0x70a89dc*/ BinaryArray();
                        /*0x70a89e4*/ BinaryArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70a8a0c*/ void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId);
                        /*0x70a8abc*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a8d94*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class MemberPrimitiveUnTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation;
                        /*0x18*/ object value;

                        /*0x70a915c*/ MemberPrimitiveUnTyped();
                        /*0x70a9164*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation, object value);
                        /*0x70a9174*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation);
                        /*0x70a917c*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a91a0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a91d8*/ void Dump();
                    }

                    class MemberReference
                    {
                        /*0x10*/ int idRef;

                        /*0x70a91dc*/ MemberReference();
                        /*0x70a91e4*/ void Set(int idRef);
                        /*0x70a91ec*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a9240*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a9268*/ void Dump();
                    }

                    class ObjectNull
                    {
                        /*0x10*/ int nullCount;

                        /*0x70a926c*/ ObjectNull();
                        /*0x70a9274*/ void SetNullCount(int nullCount);
                        /*0x70a927c*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a9328*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70a9388*/ void Dump();
                    }

                    class MessageEnd
                    {
                        /*0x70a938c*/ MessageEnd();
                        /*0x70a9394*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x70a93bc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x70a93c0*/ void Dump();
                        /*0x70a93c4*/ void Dump(System.IO.Stream sout);
                    }

                    class ObjectMap
                    {
                        /*0x10*/ string objectName;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x28*/ object[] typeInformationA;
                        /*0x30*/ System.Type[] memberTypes;
                        /*0x38*/ string[] memberNames;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x48*/ bool isInitObjectInfo;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x58*/ int objectId;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo;

                        static /*0x70aa024*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        static /*0x70aa0bc*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x70a93c8*/ ObjectMap(string objectName, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        /*0x70a9b3c*/ ObjectMap(string objectName, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x70a9ef0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateObjectInfo(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                    }

                    class ObjectProgress
                    {
                        static /*0x0*/ int opRecordIdCount;
                        /*0x10*/ bool isInitial;
                        /*0x14*/ int count;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x20*/ object expectedTypeInformation;
                        /*0x28*/ string name;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE objectTypeEnum;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE memberTypeEnum;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE memberValueEnum;
                        /*0x40*/ System.Type dtType;
                        /*0x48*/ int numItems;
                        /*0x4c*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x50*/ object typeInformation;
                        /*0x58*/ int nullCount;
                        /*0x5c*/ int memberLength;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x68*/ object[] typeInformationA;
                        /*0x70*/ string[] memberNames;
                        /*0x78*/ System.Type[] memberTypes;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord pr;

                        static /*0x70aa420*/ ObjectProgress();
                        /*0x70aa178*/ ObjectProgress();
                        /*0x70aa1ec*/ void Init();
                        /*0x70aa2ac*/ void ArrayCountIncrement(int value);
                        /*0x70aa2bc*/ bool GetNext(ref System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum outBinaryTypeEnum, ref object outTypeInformation);
                    }

                    class Converter
                    {
                        static /*0x0*/ int primitiveTypeEnumLength;
                        static /*0x8*/ System.Type[] typeA;
                        static /*0x10*/ System.Type[] arrayTypeA;
                        static /*0x18*/ string[] valueA;
                        static /*0x20*/ System.TypeCode[] typeCodeA;
                        static /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE[] codeA;
                        static /*0x30*/ System.Type typeofISerializable;
                        static /*0x38*/ System.Type typeofString;
                        static /*0x40*/ System.Type typeofConverter;
                        static /*0x48*/ System.Type typeofBoolean;
                        static /*0x50*/ System.Type typeofByte;
                        static /*0x58*/ System.Type typeofChar;
                        static /*0x60*/ System.Type typeofDecimal;
                        static /*0x68*/ System.Type typeofDouble;
                        static /*0x70*/ System.Type typeofInt16;
                        static /*0x78*/ System.Type typeofInt32;
                        static /*0x80*/ System.Type typeofInt64;
                        static /*0x88*/ System.Type typeofSByte;
                        static /*0x90*/ System.Type typeofSingle;
                        static /*0x98*/ System.Type typeofTimeSpan;
                        static /*0xa0*/ System.Type typeofDateTime;
                        static /*0xa8*/ System.Type typeofUInt16;
                        static /*0xb0*/ System.Type typeofUInt32;
                        static /*0xb8*/ System.Type typeofUInt64;
                        static /*0xc0*/ System.Type typeofObject;
                        static /*0xc8*/ System.Type typeofSystemVoid;
                        static /*0xd0*/ System.Reflection.Assembly urtAssembly;
                        static /*0xd8*/ string urtAssemblyString;
                        static /*0xe0*/ System.Type typeofTypeArray;
                        static /*0xe8*/ System.Type typeofObjectArray;
                        static /*0xf0*/ System.Type typeofStringArray;
                        static /*0xf8*/ System.Type typeofBooleanArray;
                        static /*0x100*/ System.Type typeofByteArray;
                        static /*0x108*/ System.Type typeofCharArray;
                        static /*0x110*/ System.Type typeofDecimalArray;
                        static /*0x118*/ System.Type typeofDoubleArray;
                        static /*0x120*/ System.Type typeofInt16Array;
                        static /*0x128*/ System.Type typeofInt32Array;
                        static /*0x130*/ System.Type typeofInt64Array;
                        static /*0x138*/ System.Type typeofSByteArray;
                        static /*0x140*/ System.Type typeofSingleArray;
                        static /*0x148*/ System.Type typeofTimeSpanArray;
                        static /*0x150*/ System.Type typeofDateTimeArray;
                        static /*0x158*/ System.Type typeofUInt16Array;
                        static /*0x160*/ System.Type typeofUInt32Array;
                        static /*0x168*/ System.Type typeofUInt64Array;
                        static /*0x170*/ System.Type typeofMarshalByRefObject;

                        static /*0x70ab828*/ Converter();
                        static /*0x70a5fa0*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        static /*0x70aa524*/ bool IsWriteAsByteArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70aa548*/ int TypeLength(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70a6a00*/ System.Type ToArrayType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70aa9e8*/ void InitTypeA();
                        static /*0x70aa56c*/ void InitArrayTypeA();
                        static /*0x70a6948*/ System.Type ToType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70aae64*/ System.Array CreatePrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, int length);
                        static /*0x70a599c*/ bool IsPrimitiveArray(System.Type type, ref object typeInformation);
                        static /*0x70aaf84*/ void InitValueA();
                        static /*0x70a6890*/ string ToComType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70ab340*/ void InitTypeCodeA();
                        static /*0x70ab4d8*/ System.TypeCode ToTypeCode(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x70ab590*/ void InitCodeA();
                        static /*0x70aa46c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToPrimitiveTypeEnum(System.TypeCode typeCode);
                        static /*0x70ab73c*/ object FromString(string value, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                    }

                    class BinaryFormatter
                    {
                        static /*0x0*/ System.Collections.Generic.Dictionary<System.Type, System.Runtime.Serialization.Formatters.Binary.TypeInformation> typeNameCache;
                        /*0x10*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x18*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x28*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x30*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle m_typeFormat;
                        /*0x34*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle m_assemblyFormat;
                        /*0x38*/ System.Runtime.Serialization.Formatters.TypeFilterLevel m_securityLevel;
                        /*0x40*/ object[] m_crossAppDomainArray;

                        static /*0x70ad388*/ BinaryFormatter();
                        static /*0x70ad0dc*/ System.Runtime.Serialization.Formatters.Binary.TypeInformation GetTypeInformation(System.Type type);
                        /*0x70ac0b8*/ BinaryFormatter();
                        /*0x70ac124*/ BinaryFormatter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);
                        /*0x70ac0a8*/ void set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle value);
                        /*0x70ac0b0*/ void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector value);
                        /*0x70ac188*/ object Deserialize(System.IO.Stream serializationStream);
                        /*0x70ac19c*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, bool fCheck);
                        /*0x70ac194*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);
                        /*0x70ac8c0*/ void Serialize(System.IO.Stream serializationStream, object graph);
                        /*0x70ac8cc*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);
                        /*0x70ac8d4*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers, bool fCheck);
                    }

                    class __BinaryWriter
                    {
                        /*0x10*/ System.IO.Stream sout;
                        /*0x18*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle;
                        /*0x20*/ System.Collections.Hashtable objectMapTable;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter;
                        /*0x30*/ System.IO.BinaryWriter dataWriter;
                        /*0x38*/ int m_nestedObjectCount;
                        /*0x3c*/ int nullCount;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodCall binaryMethodCall;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn binaryMethodReturn;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap binaryObjectWithMap;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped binaryObjectWithMapTyped;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString binaryObjectString;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.BinaryArray binaryArray;
                        /*0x78*/ byte[] byteBuffer;
                        /*0x80*/ int chunkSize;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssembly binaryAssembly;

                        /*0x70acbf0*/ __BinaryWriter(System.IO.Stream sout, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle);
                        /*0x70ad420*/ void WriteBegin();
                        /*0x70ad424*/ void WriteEnd();
                        /*0x70ad444*/ void WriteBoolean(bool value);
                        /*0x70a62dc*/ void WriteByte(byte value);
                        /*0x70ad468*/ void WriteBytes(byte[] value);
                        /*0x70ad488*/ void WriteBytes(byte[] byteA, int offset, int size);
                        /*0x70ad4a8*/ void WriteChar(char value);
                        /*0x70ad4cc*/ void WriteChars(char[] value);
                        /*0x70ad4f0*/ void WriteDecimal(decimal value);
                        /*0x70ad5dc*/ void WriteSingle(float value);
                        /*0x70ad600*/ void WriteDouble(double value);
                        /*0x70ad624*/ void WriteInt16(short value);
                        /*0x70a6320*/ void WriteInt32(int value);
                        /*0x70ad648*/ void WriteInt64(long value);
                        /*0x70ad66c*/ void WriteSByte(sbyte value);
                        /*0x70a62fc*/ void WriteString(string value);
                        /*0x70ad68c*/ void WriteTimeSpan(System.TimeSpan value);
                        /*0x70ad704*/ void WriteDateTime(System.DateTime value);
                        /*0x70ad77c*/ void WriteUInt16(ushort value);
                        /*0x70ad7a0*/ void WriteUInt32(uint value);
                        /*0x70ad7c4*/ void WriteUInt64(ulong value);
                        /*0x70ad7e8*/ void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70ad7ec*/ void WriteSerializationHeaderEnd();
                        /*0x70ad84c*/ void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
                        /*0x70ad8dc*/ void WriteMethodCall();
                        /*0x70ad968*/ void WriteMethodReturn();
                        /*0x70ad9f4*/ void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, int numMembers, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x70ae158*/ void WriteObjectString(int objectId, string value);
                        /*0x70ae208*/ void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, System.Array array);
                        /*0x70ae4d4*/ void WriteArrayAsBytes(System.Array array, int typeLength);
                        /*0x70ae62c*/ void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound);
                        /*0x70ae7d4*/ void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA);
                        /*0x70ae950*/ void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA);
                        /*0x70ae9b0*/ void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x70aeaec*/ void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70aeb9c*/ void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, int idRef);
                        /*0x70aec3c*/ void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo);
                        /*0x70aec58*/ void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string value);
                        /*0x70aeca0*/ void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x70aece0*/ void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70aecf0*/ void WriteDelayedNullItem();
                        /*0x70aed00*/ void WriteItemEnd();
                        /*0x70adf48*/ void InternalWriteItemNull();
                        /*0x70aed04*/ void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, int idRef);
                        /*0x70aed34*/ void WriteAssembly(System.Type type, string assemblyString, int assemId, bool isNew);
                        /*0x70a6e1c*/ void WriteValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, object value);
                    }

                    class ObjectMapInfo
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int numMembers;
                        /*0x18*/ string[] memberNames;
                        /*0x20*/ System.Type[] memberTypes;

                        /*0x70ae100*/ ObjectMapInfo(int objectId, int numMembers, string[] memberNames, System.Type[] memberTypes);
                        /*0x70adfe4*/ bool isCompatible(int numMembers, string[] memberNames, System.Type[] memberTypes);
                    }

                    class WriteObjectInfo
                    {
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ object obj;
                        /*0x20*/ System.Type objectType;
                        /*0x28*/ bool isSi;
                        /*0x29*/ bool isNamed;
                        /*0x2a*/ bool isTyped;
                        /*0x2b*/ bool isArray;
                        /*0x30*/ System.Runtime.Serialization.SerializationInfo si;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x40*/ object[] memberData;
                        /*0x48*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x50*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x68*/ long objectId;
                        /*0x70*/ long assemId;
                        /*0x78*/ string binderTypeName;
                        /*0x80*/ string binderAssemblyString;

                        static /*0x70aeecc*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x70afe68*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x70af9e8*/ void CheckTypeForwardedFrom(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache, System.Type objectType, string binderAssemblyString);
                        static /*0x70aef5c*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        static /*0x70aee2c*/ void PutObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70aee18*/ WriteObjectInfo();
                        /*0x70aee20*/ void ObjectEnd();
                        /*0x70aee4c*/ void InternalInit();
                        /*0x70af028*/ void InitSerialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70afef0*/ void InitSerialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70af6bc*/ void InitSiWrite();
                        /*0x70af578*/ void InitNoMembers();
                        /*0x70afb3c*/ void InitMemberInfo();
                        /*0x70a5d80*/ string GetTypeFullName();
                        /*0x70a5d58*/ string GetAssemblyString();
                        /*0x70af694*/ void InvokeSerializationBinder(System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70b032c*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                        /*0x70b0494*/ void GetMemberInfo(ref string[] outMemberNames, ref System.Type[] outMemberTypes, ref object[] outMemberData);
                    }

                    class ReadObjectInfo
                    {
                        static /*0x0*/ int readObjectInfoCounter;
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.ObjectManager objectManager;
                        /*0x28*/ int count;
                        /*0x2c*/ bool isSi;
                        /*0x2d*/ bool isNamed;
                        /*0x2e*/ bool isTyped;
                        /*0x2f*/ bool bSimpleAssembly;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x38*/ string[] wireMemberNames;
                        /*0x40*/ System.Type[] wireMemberTypes;
                        /*0x48*/ int lastPosition;
                        /*0x50*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x58*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x68*/ System.Collections.Generic.List<System.Type> memberTypesList;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x78*/ System.Runtime.Serialization.IFormatterConverter formatterConverter;

                        static /*0x70b0568*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x70b08c4*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x70b05f8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        /*0x70b055c*/ ReadObjectInfo();
                        /*0x70b0564*/ void ObjectEnd();
                        /*0x70aa01c*/ void PrepareForReuse();
                        /*0x70b0668*/ void Init(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x70b0960*/ void Init(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x70b0720*/ void InitReadConstructor(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context);
                        /*0x70b0ae4*/ void InitSiRead();
                        /*0x70b0a80*/ void InitNoMembers();
                        /*0x70b0b70*/ void InitMemberInfo();
                        /*0x70b0f24*/ System.Reflection.MemberInfo GetMemberInfo(string name);
                        /*0x70b11e8*/ System.Type GetType(string name);
                        /*0x70b137c*/ void AddValue(string name, object value, ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x70a9f30*/ void InitDataStore(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x70b1420*/ void RecordFixup(long objectId, string name, long idRef);
                        /*0x70b14c4*/ void PopulateObjectMembers(object obj, object[] memberData);
                        /*0x70b10b4*/ int Position(string name);
                        /*0x70a9634*/ System.Type[] GetMemberTypes(string[] inMemberNames, System.Type objectType);
                        /*0x70b0dbc*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                    }

                    class SerObjectInfoInit
                    {
                        /*0x10*/ System.Collections.Hashtable seenBeforeTable;
                        /*0x18*/ int objectInfoIdCount;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.SerStack oiPool;

                        /*0x70b1560*/ SerObjectInfoInit();
                    }

                    class SerObjectInfoCache
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;
                        /*0x28*/ System.Reflection.MemberInfo[] memberInfos;
                        /*0x30*/ string[] memberNames;
                        /*0x38*/ System.Type[] memberTypes;

                        /*0x70b02d4*/ SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
                        /*0x70b0230*/ SerObjectInfoCache(System.Type type);
                    }

                    class TypeInformation
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;

                        /*0x70ad330*/ TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
                        /*0x70b162c*/ string get_FullTypeName();
                        /*0x70b1634*/ string get_AssemblyString();
                        /*0x70b163c*/ bool get_HasTypeForwardedFrom();
                    }

                    class ObjectReader
                    {
                        /*0x10*/ System.IO.Stream m_stream;
                        /*0x18*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x20*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x30*/ System.Runtime.Serialization.ObjectManager m_objectManager;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x40*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x48*/ long topId;
                        /*0x50*/ bool bSimpleAssembly;
                        /*0x58*/ object handlerObject;
                        /*0x60*/ object m_topObject;
                        /*0x68*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x70*/ System.Runtime.Remoting.Messaging.HeaderHandler handler;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.SerStack valueFixupStack;
                        /*0x98*/ object[] crossAppDomainArray;
                        /*0xa0*/ bool bFullDeserialization;
                        /*0xa1*/ bool bOldFormatDetected;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.IntSizedArray valTypeObjectIdTable;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.NameCache typeCache;
                        /*0xb8*/ string previousAssemblyString;
                        /*0xc0*/ string previousName;
                        /*0xc8*/ System.Type previousType;

                        static /*0x70b3f04*/ System.Reflection.Assembly ResolveSimpleAssemblyName(System.Reflection.AssemblyName assemblyName);
                        static /*0x70b3f64*/ void GetSimplyNamedTypeFromAssembly(System.Reflection.Assembly assm, string typeName, ref System.Type type);
                        static /*0x70b41c0*/ void CheckTypeForwardedTo(System.Reflection.Assembly sourceAssembly, System.Reflection.Assembly destAssembly, System.Type resolvedType);
                        /*0x70ac3d0*/ ObjectReader(System.IO.Stream stream, System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70b1644*/ System.Runtime.Serialization.Formatters.Binary.SerStack get_ValueFixupStack();
                        /*0x70b16cc*/ object get_TopObject();
                        /*0x70b16d4*/ void set_TopObject(object value);
                        /*0x70ac528*/ object Deserialize(System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Serialization.Formatters.Binary.__BinaryParser serParser, bool fCheck);
                        /*0x70b1718*/ bool HasSurrogate(System.Type t);
                        /*0x70b17ec*/ void CheckSerializable(System.Type t);
                        /*0x70b191c*/ void InitFullDeserialization();
                        /*0x70b1a48*/ object CrossAppDomainArray(int index);
                        /*0x70a9604*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType);
                        /*0x70a9eb0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType, string[] memberNames, System.Type[] memberTypes);
                        /*0x70b1a78*/ void Parse(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b272c*/ void ParseError(System.Runtime.Serialization.Formatters.Binary.ParseRecord processing, System.Runtime.Serialization.Formatters.Binary.ParseRecord onStack);
                        /*0x70b1bbc*/ void ParseSerializedStreamHeader(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b1bd8*/ void ParseSerializedStreamHeaderEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b1bf4*/ void ParseObject(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b1f54*/ void ParseObjectEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b2978*/ void ParseArray(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b30d0*/ void NextRectangleMap(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b3194*/ void ParseArrayMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b398c*/ void ParseArrayMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b2184*/ void ParseMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b266c*/ void ParseMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b394c*/ void ParseString(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord parentPr);
                        /*0x70b30c8*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr);
                        /*0x70b39b4*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr, bool bIsString);
                        /*0x70b3abc*/ long GetId(long objectId);
                        /*0x70b3bb0*/ System.Type Bind(string assemblyString, string typeString);
                        /*0x70b3c08*/ System.Type FastBindToType(string assemblyName, string typeName);
                        /*0x70a6ab8*/ System.Type GetType(System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, string name);

                        class TypeNAssembly
                        {
                            /*0x10*/ System.Type type;
                            /*0x18*/ string assemblyName;

                            /*0x70b4300*/ TypeNAssembly();
                        }

                        class TopLevelAssemblyTypeResolver
                        {
                            /*0x10*/ System.Reflection.Assembly m_topLevelAssembly;

                            /*0x70b4308*/ TopLevelAssemblyTypeResolver(System.Reflection.Assembly topLevelAssembly);
                            /*0x70b4338*/ System.Type ResolveType(System.Reflection.Assembly assembly, string simpleTypeName, bool ignoreCase);
                        }
                    }

                    class ObjectWriter
                    {
                        /*0x10*/ System.Collections.Queue m_objectQueue;
                        /*0x18*/ System.Runtime.Serialization.ObjectIDGenerator m_idGenerator;
                        /*0x20*/ int m_currentId;
                        /*0x28*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x30*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter;
                        /*0x48*/ System.Runtime.Serialization.SerializationObjectManager m_objectManager;
                        /*0x50*/ long topId;
                        /*0x58*/ string topName;
                        /*0x60*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x70*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ object[] crossAppDomainArray;
                        /*0x90*/ object previousObj;
                        /*0x98*/ long previousId;
                        /*0xa0*/ System.Type previousType;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE previousCode;
                        /*0xb0*/ System.Collections.Hashtable assemblyToIdTable;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.SerStack niPool;

                        /*0x70acaac*/ ObjectWriter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x70accc0*/ void Serialize(object graph, System.Runtime.Remoting.Messaging.Header[] inHeaders, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter, bool fCheck);
                        /*0x70b4bf0*/ System.Runtime.Serialization.SerializationObjectManager get_ObjectManager();
                        /*0x70b46f8*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x70b5338*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string[] memberNames, System.Type[] memberTypes, object[] memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x70b55b0*/ void WriteMemberSetup(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string memberName, System.Type memberType, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x70b56f0*/ void WriteMembers(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberTypeNameInfo, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x70b4bf8*/ void WriteArray(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x70b5cd0*/ void WriteArrayMember(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, object data);
                        /*0x70b5f70*/ void WriteRectangle(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, int rank, int[] maxA, System.Array array, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemNameTypeInfo, int[] lowerBoundA);
                        /*0x70b4a80*/ object GetNext(ref long objID);
                        /*0x70b43c0*/ long InternalGetId(object obj, bool assignUniqueIdToValueType, System.Type type, ref bool isNew);
                        /*0x70b61ac*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type);
                        /*0x70b5b48*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70b5bec*/ bool WriteKnownValueClass(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x70b5bd4*/ void WriteObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, long objectId);
                        /*0x70b61b8*/ void WriteString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object stringObject);
                        /*0x70b5a1c*/ bool CheckForNull(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x70b43a0*/ void WriteSerializedStreamHeader(long topId, long headerId);
                        /*0x70b6284*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x70b56bc*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type);
                        /*0x70b46b4*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70b5af8*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x70b5ac0*/ void TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x70b5578*/ System.Runtime.Serialization.Formatters.Binary.NameInfo MemberToNameInfo(string name);
                        /*0x70a5cbc*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        /*0x70b44a0*/ long GetAssemblyId(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x70b5320*/ System.Type GetType(object obj);
                        /*0x70b632c*/ System.Runtime.Serialization.Formatters.Binary.NameInfo GetNameInfo();
                        /*0x70b5314*/ bool CheckTypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle test, System.Runtime.Serialization.Formatters.FormatterTypeStyle want);
                        /*0x70b4a64*/ void PutNameInfo(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                    }

                    class __BinaryParser
                    {
                        static /*0x0*/ System.Text.Encoding encoding;
                        static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x18*/ System.IO.Stream input;
                        /*0x20*/ long topId;
                        /*0x28*/ long headerId;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SizedArray objectMapIdTable;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x50*/ object expectedTypeInformation;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord PRS;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo systemAssemblyInfo;
                        /*0x68*/ System.IO.BinaryReader dataReader;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerStack opPool;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap bowm;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped bowmt;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString objectString;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString crossAppDomainString;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0xa8*/ byte[] byteBuffer;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xc0*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;

                        static /*0x70ba770*/ __BinaryParser();
                        /*0x70b63e4*/ __BinaryParser(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader);
                        /*0x70b65a4*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo();
                        /*0x70b6654*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable();
                        /*0x70b6740*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable();
                        /*0x70b683c*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs();
                        /*0x70b68b4*/ void Run();
                        /*0x70b6e44*/ void ReadBegin();
                        /*0x70b8c24*/ void ReadEnd();
                        /*0x70b913c*/ bool ReadBoolean();
                        /*0x70b915c*/ byte ReadByte();
                        /*0x70b917c*/ byte[] ReadBytes(int length);
                        /*0x70b91a0*/ void ReadBytes(byte[] byteA, int offset, int size);
                        /*0x70b921c*/ char ReadChar();
                        /*0x70b923c*/ char[] ReadChars(int length);
                        /*0x70b9260*/ decimal ReadDecimal();
                        /*0x70b9314*/ float ReadSingle();
                        /*0x70b9338*/ double ReadDouble();
                        /*0x70b935c*/ short ReadInt16();
                        /*0x70b9380*/ int ReadInt32();
                        /*0x70b93a4*/ long ReadInt64();
                        /*0x70b93c8*/ sbyte ReadSByte();
                        /*0x70b93e8*/ string ReadString();
                        /*0x70b940c*/ System.TimeSpan ReadTimeSpan();
                        /*0x70b9430*/ System.DateTime ReadDateTime();
                        /*0x70b94ac*/ ushort ReadUInt16();
                        /*0x70b94d0*/ uint ReadUInt32();
                        /*0x70b94f4*/ ulong ReadUInt64();
                        /*0x70b6e48*/ void ReadSerializationHeaderRecord();
                        /*0x70b6f14*/ void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70b71a0*/ void ReadObject();
                        /*0x70b7574*/ void ReadCrossAppDomainMap();
                        /*0x70b773c*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70b982c*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record);
                        /*0x70b77f4*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70b9ca0*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record);
                        /*0x70b789c*/ void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70b83d0*/ void ReadMemberPrimitiveTyped();
                        /*0x70b7e08*/ void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70ba128*/ void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x70b8c28*/ void ReadMemberPrimitiveUnTyped();
                        /*0x70b8734*/ void ReadMemberReference();
                        /*0x70b88ec*/ void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x70b8ab4*/ void ReadMessageEnd();
                        /*0x70ba3bc*/ object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        /*0x70b9694*/ System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp();
                        /*0x70b90a8*/ void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op);
                    }

                    class ParseRecord
                    {
                        static /*0x0*/ int parseRecordIdCount;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE PRparseTypeEnum;
                        /*0x14*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE PRobjectTypeEnum;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE PRarrayTypeEnum;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE PRmemberTypeEnum;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE PRmemberValueEnum;
                        /*0x24*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE PRobjectPositionEnum;
                        /*0x28*/ string PRname;
                        /*0x30*/ string PRvalue;
                        /*0x38*/ object PRvarValue;
                        /*0x40*/ string PRkeyDt;
                        /*0x48*/ System.Type PRdtType;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRdtTypeCode;
                        /*0x54*/ bool PRisEnum;
                        /*0x58*/ long PRobjectId;
                        /*0x60*/ long PRidRef;
                        /*0x68*/ string PRarrayElementTypeString;
                        /*0x70*/ System.Type PRarrayElementType;
                        /*0x78*/ bool PRisArrayVariant;
                        /*0x7c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRarrayElementTypeCode;
                        /*0x80*/ int PRrank;
                        /*0x88*/ int[] PRlengthA;
                        /*0x90*/ int[] PRpositionA;
                        /*0x98*/ int[] PRlowerBoundA;
                        /*0xa0*/ int[] PRupperBoundA;
                        /*0xa8*/ int[] PRindexMap;
                        /*0xb0*/ int PRmemberIndex;
                        /*0xb4*/ int PRlinearlength;
                        /*0xb8*/ int[] PRrectangularMap;
                        /*0xc0*/ bool PRisLowerBound;
                        /*0xc8*/ long PRtopId;
                        /*0xd0*/ long PRheaderId;
                        /*0xd8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo PRobjectInfo;
                        /*0xe0*/ bool PRisValueTypeFixup;
                        /*0xe8*/ object PRnewObj;
                        /*0xf0*/ object[] PRobjectA;
                        /*0xf8*/ System.Runtime.Serialization.Formatters.Binary.PrimitiveArray PRprimitiveArray;
                        /*0x100*/ bool PRisRegistered;
                        /*0x108*/ object[] PRmemberData;
                        /*0x110*/ System.Runtime.Serialization.SerializationInfo PRsi;
                        /*0x118*/ int PRnullCount;

                        static /*0x70ba7f4*/ ParseRecord();
                        /*0x70b68ac*/ ParseRecord();
                        /*0x70b8eec*/ void Init();
                    }

                    class SerStack
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ string stackId;
                        /*0x20*/ int top;

                        /*0x70b651c*/ SerStack(string stackId);
                        /*0x70b9738*/ void Push(object obj);
                        /*0x70b904c*/ object Pop();
                        /*0x70ba840*/ void IncreaseCapacity();
                        /*0x70b8eac*/ object Peek();
                        /*0x70b97e8*/ object PeekPeek();
                        /*0x70ba3ac*/ bool IsEmpty();
                    }

                    class SizedArray : System.ICloneable
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ object[] negObjects;

                        /*0x70b66c0*/ SizedArray();
                        /*0x70b67b0*/ SizedArray(int length);
                        /*0x70ba8d0*/ SizedArray(System.Runtime.Serialization.Formatters.Binary.SizedArray sizedArray);
                        /*0x70ba9a8*/ object Clone();
                        /*0x70b9620*/ object get_Item(int index);
                        /*0x70b9518*/ void set_Item(int index, object value);
                        /*0x70baa00*/ void IncreaseCapacity(int index);
                    }

                    class IntSizedArray : System.ICloneable
                    {
                        /*0x10*/ int[] objects;
                        /*0x18*/ int[] negObjects;

                        /*0x70bac3c*/ IntSizedArray();
                        /*0x70bacbc*/ IntSizedArray(System.Runtime.Serialization.Formatters.Binary.IntSizedArray sizedArray);
                        /*0x70badd0*/ object Clone();
                        /*0x70bae28*/ int get_Item(int index);
                        /*0x70baea0*/ void set_Item(int index, int value);
                        /*0x70baf58*/ void IncreaseCapacity(int index);
                    }

                    class NameCache
                    {
                        static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, object> ht;
                        /*0x10*/ string name;

                        static /*0x70bb2e0*/ NameCache();
                        /*0x70bb2d8*/ NameCache();
                        /*0x70bb194*/ object GetCachedValue(string name);
                        /*0x70bb248*/ void SetCachedValue(object value);
                    }

                    class ValueFixup
                    {
                        static /*0x0*/ System.Reflection.MemberInfo valueInfo;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum valueFixupEnum;
                        /*0x18*/ System.Array arrayObj;
                        /*0x20*/ int[] indexMap;
                        /*0x28*/ object header;
                        /*0x30*/ object memberObject;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x40*/ string memberName;

                        /*0x70bb378*/ ValueFixup(System.Array arrayObj, int[] indexMap);
                        /*0x70bb3c4*/ ValueFixup(object memberObject, string memberName, System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo);
                        /*0x70bb42c*/ void Fixup(System.Runtime.Serialization.Formatters.Binary.ParseRecord record, System.Runtime.Serialization.Formatters.Binary.ParseRecord parent);
                    }

                    class InternalFE
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle FEtypeFormat;
                        /*0x14*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle FEassemblyFormat;
                        /*0x18*/ System.Runtime.Serialization.Formatters.TypeFilterLevel FEsecurityLevel;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE FEserializerTypeEnum;

                        /*0x70bb734*/ InternalFE();
                    }

                    class NameInfo
                    {
                        /*0x10*/ string NIFullName;
                        /*0x18*/ long NIobjectId;
                        /*0x20*/ long NIassemId;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE NIprimitiveTypeEnum;
                        /*0x30*/ System.Type NItype;
                        /*0x38*/ bool NIisSealed;
                        /*0x39*/ bool NIisArray;
                        /*0x3a*/ bool NIisArrayItem;
                        /*0x3b*/ bool NItransmitTypeOnObject;
                        /*0x3c*/ bool NItransmitTypeOnMember;
                        /*0x3d*/ bool NIisParentTypeOnObject;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE NIarrayEnum;
                        /*0x44*/ bool NIsealedStatusChecked;

                        /*0x70bb73c*/ NameInfo();
                        /*0x70bb744*/ void Init();
                        /*0x70bb788*/ bool get_IsSealed();
                        /*0x70bb7d4*/ string get_NIname();
                        /*0x70bb820*/ void set_NIname(string value);
                    }

                    class PrimitiveArray
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code;
                        /*0x18*/ bool[] booleanA;
                        /*0x20*/ char[] charA;
                        /*0x28*/ double[] doubleA;
                        /*0x30*/ short[] int16A;
                        /*0x38*/ int[] int32A;
                        /*0x40*/ long[] int64A;
                        /*0x48*/ sbyte[] sbyteA;
                        /*0x50*/ float[] singleA;
                        /*0x58*/ ushort[] uint16A;
                        /*0x60*/ uint[] uint32A;
                        /*0x68*/ ulong[] uint64A;

                        /*0x70bb828*/ PrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x70bb85c*/ void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x70bbbb4*/ void SetValue(string value, int index);
                    }

                    enum MessageEnum
                    {
                        NoArgs = 1,
                        ArgsInline = 2,
                        ArgsIsArray = 4,
                        ArgsInArray = 8,
                        NoContext = 16,
                        ContextInline = 32,
                        ContextInArray = 64,
                        MethodSignatureInArray = 128,
                        PropertyInArray = 256,
                        NoReturnValue = 512,
                        ReturnValueVoid = 1024,
                        ReturnValueInline = 2048,
                        ReturnValueInArray = 4096,
                        ExceptionInArray = 8192,
                        GenericMethod = 32768,
                    }
                }
            }
        }

        namespace InteropServices
        {
            enum CharSet
            {
                None = 1,
                Ansi = 2,
                Unicode = 3,
                Auto = 4,
            }

            class ExternalException : System.SystemException
            {
                /*0x70bbf9c*/ ExternalException();
                /*0x70bbff8*/ ExternalException(string message);
                /*0x70bc01c*/ ExternalException(string message, int errorCode);
                /*0x70bc044*/ ExternalException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70bc04c*/ string ToString();
            }

            struct HandleRef
            {
                /*0x10*/ object _wrapper;
                /*0x18*/ nint _handle;

                /*0x70bc230*/ HandleRef(object wrapper, nint handle);
                /*0x70bc258*/ nint get_Handle();
            }

            class MarshalDirectiveException : System.SystemException
            {
                /*0x70bc260*/ MarshalDirectiveException();
                /*0x70bc2bc*/ MarshalDirectiveException(string message);
                /*0x70bc2e0*/ MarshalDirectiveException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class MemoryMarshal
            {
                static /*0x3907c14*/ System.Span<byte> AsBytes<T>(System.Span<T> span);
                static /*0x3907c14*/ System.ReadOnlySpan<byte> AsBytes<T>(System.ReadOnlySpan<T> span);
                static /*0x3907c14*/ System.Memory<T> AsMemory<T>(System.ReadOnlyMemory<T> memory);
                static /*0x3907c14*/ ref T GetReference<T>(System.Span<T> span);
                static /*0x3907c14*/ ref T GetReference<T>(System.ReadOnlySpan<T> span);
                static /*0x3907c14*/ ref T GetNonNullPinnableReference<T>(System.Span<T> span);
                static /*0x3907c14*/ ref T GetNonNullPinnableReference<T>(System.ReadOnlySpan<T> span);
                static /*0x3907c14*/ System.Span<TTo> Cast<TFrom, TTo>(System.Span<TFrom> span);
                static /*0x3907c14*/ System.ReadOnlySpan<TTo> Cast<TFrom, TTo>(System.ReadOnlySpan<TFrom> span);
                static /*0x3907c14*/ System.ReadOnlySpan<T> CreateReadOnlySpan<T>(ref T reference, int length);
                static /*0x3907c14*/ bool TryGetArray<T>(System.ReadOnlyMemory<T> memory, ref System.ArraySegment<T> segment);
                static /*0x3907c14*/ bool TryGetMemoryManager<T, TManager>(System.ReadOnlyMemory<T> memory, ref TManager manager, ref int start, ref int length);
                static /*0x70bc2e8*/ bool TryGetString(System.ReadOnlyMemory<char> memory, ref string text, ref int start, ref int length);
                static /*0x3907c14*/ T Read<T>(System.ReadOnlySpan<byte> source);
                static /*0x3907c14*/ void Write<T>(System.Span<byte> destination, ref T value);
            }

            class SequenceMarshal
            {
                static /*0x70bc39c*/ bool TryGetString(System.Buffers.ReadOnlySequence<char> sequence, ref string text, ref int start, ref int length);
            }

            enum GCHandleType
            {
                Weak = 0,
                WeakTrackResurrection = 1,
                Normal = 2,
                Pinned = 3,
            }

            class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                static /*0x0*/ nuint Uninitialized;
                /*0x20*/ nuint _numBytes;

                static /*0x70bc6e4*/ SafeBuffer();
                static /*0x70bc504*/ System.InvalidOperationException NotInitialized();
                /*0x70bc430*/ void AcquirePointer(ref byte* pointer);
                /*0x70bc634*/ void ReleasePointer();
            }

            class COMException : System.Runtime.InteropServices.ExternalException
            {
                /*0x70bc750*/ COMException();
                /*0x70bc754*/ COMException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70bc75c*/ string ToString();
            }

            class ErrorWrapper
            {
                /*0x10*/ int m_ErrorCode;
            }

            interface ICustomMarshaler
            {
                /*0x3907c14*/ object MarshalNativeToManaged(nint pNativeData);
                /*0x3907c14*/ nint MarshalManagedToNative(object ManagedObj);
                void CleanUpNativeData(nint pNativeData);
                /*0x380d83c*/ void CleanUpManagedData(object ManagedObj);
                /*0x380b6a0*/ int GetNativeDataSize();
            }

            class UnmanagedFunctionPointerAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.CallingConvention m_callingConvention;

                /*0x70bc940*/ UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention callingConvention);
            }

            enum ComInterfaceType
            {
                InterfaceIsDual = 0,
                InterfaceIsIUnknown = 1,
                InterfaceIsIDispatch = 2,
                InterfaceIsIInspectable = 3,
            }

            class InterfaceTypeAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ComInterfaceType _val;

                /*0x70bc968*/ InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType interfaceType);
            }

            class ComDefaultInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Type _val;

                /*0x70bc990*/ ComDefaultInterfaceAttribute(System.Type defaultInterface);
            }

            enum ClassInterfaceType
            {
                None = 0,
                AutoDispatch = 1,
                AutoDual = 2,
            }

            class ClassInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ClassInterfaceType _val;

                /*0x70bc9c0*/ ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType classInterfaceType);
            }

            class ComVisibleAttribute : System.Attribute
            {
                /*0x10*/ bool _val;

                /*0x70bc9e8*/ ComVisibleAttribute(bool visibility);
            }

            enum VarEnum
            {
                VT_EMPTY = 0,
                VT_NULL = 1,
                VT_I2 = 2,
                VT_I4 = 3,
                VT_R4 = 4,
                VT_R8 = 5,
                VT_CY = 6,
                VT_DATE = 7,
                VT_BSTR = 8,
                VT_DISPATCH = 9,
                VT_ERROR = 10,
                VT_BOOL = 11,
                VT_VARIANT = 12,
                VT_UNKNOWN = 13,
                VT_DECIMAL = 14,
                VT_I1 = 16,
                VT_UI1 = 17,
                VT_UI2 = 18,
                VT_UI4 = 19,
                VT_I8 = 20,
                VT_UI8 = 21,
                VT_INT = 22,
                VT_UINT = 23,
                VT_VOID = 24,
                VT_HRESULT = 25,
                VT_PTR = 26,
                VT_SAFEARRAY = 27,
                VT_CARRAY = 28,
                VT_USERDEFINED = 29,
                VT_LPSTR = 30,
                VT_LPWSTR = 31,
                VT_RECORD = 36,
                VT_FILETIME = 64,
                VT_BLOB = 65,
                VT_STREAM = 66,
                VT_STORAGE = 67,
                VT_STREAMED_OBJECT = 68,
                VT_STORED_OBJECT = 69,
                VT_BLOB_OBJECT = 70,
                VT_CF = 71,
                VT_CLSID = 72,
                VT_VECTOR = 4096,
                VT_ARRAY = 8192,
                VT_BYREF = 16384,
            }

            enum UnmanagedType
            {
                Bool = 2,
                I1 = 3,
                U1 = 4,
                I2 = 5,
                U2 = 6,
                I4 = 7,
                U4 = 8,
                I8 = 9,
                U8 = 10,
                R4 = 11,
                R8 = 12,
                Currency = 15,
                BStr = 19,
                LPStr = 20,
                LPWStr = 21,
                LPTStr = 22,
                ByValTStr = 23,
                IUnknown = 25,
                IDispatch = 26,
                Struct = 27,
                Interface = 28,
                SafeArray = 29,
                ByValArray = 30,
                SysInt = 31,
                SysUInt = 32,
                VBByRefStr = 34,
                AnsiBStr = 35,
                TBStr = 36,
                VariantBool = 37,
                FunctionPtr = 38,
                AsAny = 40,
                LPArray = 42,
                LPStruct = 43,
                CustomMarshaler = 44,
                Error = 45,
                IInspectable = 46,
                HString = 47,
                LPUTF8Str = 48,
            }

            class ComImportAttribute : System.Attribute
            {
                /*0x70bca10*/ ComImportAttribute();
            }

            class GuidAttribute : System.Attribute
            {
                /*0x10*/ string _val;

                /*0x70bca18*/ GuidAttribute(string guid);
            }

            class PreserveSigAttribute : System.Attribute
            {
                /*0x70bca48*/ PreserveSigAttribute();
            }

            class InAttribute : System.Attribute
            {
                /*0x70bca50*/ InAttribute();
            }

            class OutAttribute : System.Attribute
            {
                /*0x70bca58*/ OutAttribute();
            }

            class OptionalAttribute : System.Attribute
            {
                /*0x70bca60*/ OptionalAttribute();
            }

            enum DllImportSearchPath
            {
                UseDllDirectoryForDependencies = 256,
                ApplicationDirectory = 512,
                UserDirectories = 1024,
                System32 = 2048,
                SafeDirectories = 4096,
                AssemblyDirectory = 2,
                LegacyBehavior = 0,
            }

            class DefaultDllImportSearchPathsAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.DllImportSearchPath _paths;

                /*0x70bca68*/ DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath paths);
            }

            class DllImportAttribute : System.Attribute
            {
                /*0x10*/ string _val;
                /*0x18*/ string EntryPoint;
                /*0x20*/ System.Runtime.InteropServices.CharSet CharSet;
                /*0x24*/ bool SetLastError;
                /*0x25*/ bool ExactSpelling;
                /*0x26*/ bool PreserveSig;
                /*0x28*/ System.Runtime.InteropServices.CallingConvention CallingConvention;
                /*0x2c*/ bool BestFitMapping;
                /*0x2d*/ bool ThrowOnUnmappableChar;

                static /*0x70bca90*/ System.Attribute GetCustomAttribute(System.Reflection.RuntimeMethodInfo method);
                static /*0x70bcce8*/ bool IsDefined(System.Reflection.RuntimeMethodInfo method);
                /*0x70bcc40*/ DllImportAttribute(string dllName, string entryPoint, System.Runtime.InteropServices.CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, System.Runtime.InteropServices.CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar);
                /*0x70bcd10*/ DllImportAttribute(string dllName);
                /*0x70bcd40*/ string get_Value();
            }

            class FieldOffsetAttribute : System.Attribute
            {
                /*0x10*/ int _val;

                /*0x70bcd48*/ FieldOffsetAttribute(int offset);
            }

            class ComCompatibleVersionAttribute : System.Attribute
            {
                /*0x10*/ int _major;
                /*0x14*/ int _minor;
                /*0x18*/ int _build;
                /*0x1c*/ int _revision;

                /*0x70bcd70*/ ComCompatibleVersionAttribute(int major, int minor, int build, int revision);
            }

            enum CallingConvention
            {
                Winapi = 1,
                Cdecl = 2,
                StdCall = 3,
                ThisCall = 4,
                FastCall = 5,
            }

            class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.IDisposable
            {
                static int RefCount_Mask = 2147483644;
                static int RefCount_One = 4;
                /*0x10*/ nint handle;
                /*0x18*/ int _state;
                /*0x1c*/ bool _ownsHandle;
                /*0x1d*/ bool _fullyInitialized;

                /*0x70bcdb0*/ SafeHandle(nint invalidHandleValue, bool ownsHandle);
                /*0x70bce50*/ void Finalize();
                /*0x70bcef0*/ void SetHandle(nint handle);
                /*0x70bcef8*/ nint DangerousGetHandle();
                /*0x70bcf00*/ bool get_IsClosed();
                /*0x380b128*/ bool get_IsInvalid();
                /*0x70bcf0c*/ void Close();
                /*0x70bcf1c*/ void Dispose();
                /*0x70bcf2c*/ void Dispose(bool disposing);
                /*0x380b128*/ bool ReleaseHandle();
                /*0x70bcffc*/ void SetHandleAsInvalid();
                /*0x70bc570*/ void DangerousAddRef(ref bool success);
                /*0x70bc6dc*/ void DangerousRelease();
                /*0x70bcf48*/ void InternalDispose();
                /*0x70bcfe8*/ void InternalFinalize();
                /*0x70bd080*/ void DangerousReleaseInternal(bool dispose);
            }

            struct GCHandle
            {
                /*0x10*/ nint handle;

                static /*0x70bd24c*/ object GetRef(nint handle);
                static /*0x70bd264*/ void SetRef(nint handle, object value);
                static /*0x70bd284*/ bool CanDereferenceHandle(nint handle);
                static /*0x70bd428*/ System.Runtime.InteropServices.GCHandle Alloc(object value);
                static /*0x70bd434*/ System.Runtime.InteropServices.GCHandle Alloc(object value, System.Runtime.InteropServices.GCHandleType type);
                static /*0x70bd4c4*/ nint op_Explicit(System.Runtime.InteropServices.GCHandle value);
                static /*0x70bd4c8*/ System.Runtime.InteropServices.GCHandle op_Explicit(nint value);
                static /*0x70bd564*/ bool CheckCurrentDomain(nint handle);
                static /*0x70bd304*/ object GetTarget(nint handle);
                static /*0x70bd238*/ nint GetTargetHandle(object obj, nint handle, System.Runtime.InteropServices.GCHandleType type);
                static /*0x70bd4c0*/ void FreeHandle(nint handle);
                static /*0x70bd424*/ nint GetAddrOfPinnedObject(nint handle);
                static /*0x70bd568*/ bool op_Equality(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);
                static /*0x70bd5f4*/ System.Runtime.InteropServices.GCHandle FromIntPtr(nint value);
                static /*0x70bd5f8*/ nint ToIntPtr(System.Runtime.InteropServices.GCHandle value);
                /*0x70bd1e0*/ GCHandle(nint h);
                /*0x70bd1e8*/ GCHandle(object obj);
                /*0x70bd20c*/ GCHandle(object value, System.Runtime.InteropServices.GCHandleType type);
                /*0x70bd23c*/ bool get_IsAllocated();
                /*0x70bd290*/ object get_Target();
                /*0x70bd308*/ void set_Target(object value);
                /*0x70bd360*/ nint AddrOfPinnedObject();
                /*0x70bd448*/ void Free();
                /*0x70bd574*/ bool Equals(object o);
                /*0x70bd5ec*/ int GetHashCode();
            }

            class Marshal
            {
                static /*0x0*/ int SystemMaxDBCSCharSize;
                static /*0x4*/ int SystemDefaultCharSize;
                static /*0x8*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> MarshalerInstanceCache;
                static /*0x10*/ object MarshalerInstanceCacheLock;

                static /*0x70bef30*/ Marshal();
                static /*0x70bd5fc*/ nint AllocHGlobal(nint cb);
                static /*0x70bd600*/ nint AllocHGlobal(int cb);
                static /*0x70bd668*/ void copy_to_unmanaged_fixed(System.Array source, int startIndex, nint destination, int length, void* fixed_source_element);
                static /*0x70bd66c*/ bool skip_fixed(System.Array array, int startIndex);
                static /*0x70bd6a0*/ void copy_to_unmanaged(byte[] source, int startIndex, nint destination, int length);
                static /*0x70bd788*/ void Copy(byte[] source, int startIndex, nint destination, int length);
                static /*0x70bd87c*/ void copy_from_unmanaged(nint source, int startIndex, System.Array destination, int length);
                static /*0x70bd8fc*/ void copy_from_unmanaged_fixed(nint source, int startIndex, System.Array destination, int length, void* fixed_destination_element);
                static /*0x70bd900*/ void Copy(nint source, byte[] destination, int startIndex, int length);
                static /*0x70bd9f4*/ void Copy(nint source, char[] destination, int startIndex, int length);
                static /*0x70bdae8*/ void FreeBSTR(nint ptr);
                static /*0x70bdaec*/ void FreeHGlobal(nint hglobal);
                static /*0x70bdaf0*/ void ClearAnsi(nint ptr);
                static /*0x70bdbcc*/ void ClearUnicode(nint ptr);
                static /*0x70bdce8*/ void ZeroFreeGlobalAllocAnsi(nint s);
                static /*0x70bdd44*/ void ZeroFreeGlobalAllocUnicode(nint s);
                static /*0x70bdda0*/ int GetHRForException(System.Exception e);
                static /*0x70bddac*/ bool IsComObject(object o);
                static /*0x70bddb4*/ int GetLastWin32Error();
                static /*0x70bddb8*/ nint OffsetOf(System.Type t, string fieldName);
                static /*0x70bddbc*/ string PtrToStringAnsi(nint ptr);
                static /*0x70bddc0*/ string PtrToStringAuto(nint ptr);
                static /*0x70bde54*/ string PtrToStringUni(nint ptr);
                static /*0x70bde58*/ string PtrToStringUni(nint ptr, int len);
                static /*0x70bde5c*/ object PtrToStructure(nint ptr, System.Type structureType);
                static /*0x3907c14*/ T PtrToStructure<T>(nint ptr);
                static /*0x70bdbb0*/ byte ReadByte(nint ptr, int ofs);
                static /*0x70bdca4*/ short ReadInt16(nint ptr, int ofs);
                static /*0x70bde60*/ int SizeOf(System.Type t);
                static /*0x3821e38*/ int SizeOf<T>();
                static /*0x3907c14*/ int SizeOf<T>(T structure);
                static /*0x70bde64*/ nint StringToHGlobalAnsi(char* s, int length);
                static /*0x70bde68*/ nint StringToHGlobalAnsi(string s);
                static /*0x70bdedc*/ nint SecureStringGlobalAllocator(int len);
                static /*0x70bdf30*/ nint SecureStringToUnicode(System.Security.SecureString s, System.Runtime.InteropServices.Marshal.SecureStringAllocator allocator);
                static /*0x70be1b0*/ nint SecureStringToGlobalAllocUnicode(System.Security.SecureString s);
                static /*0x70be334*/ void StructureToPtr(object structure, nint ptr, bool fDeleteOld);
                static /*0x3907c14*/ void StructureToPtr<T>(T structure, nint ptr, bool fDeleteOld);
                static /*0x70be33c*/ nint UnsafeAddrOfPinnedArrayElement(System.Array arr, int index);
                static /*0x382cd7c*/ nint UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
                static /*0x70bdb8c*/ void WriteByte(nint ptr, int ofs, byte val);
                static /*0x70bdc5c*/ void WriteInt16(nint ptr, int ofs, short val);
                static /*0x70be340*/ System.Delegate GetDelegateForFunctionPointerInternal(nint ptr, System.Type t);
                static /*0x70be344*/ System.Delegate GetDelegateForFunctionPointer(nint ptr, System.Type t);
                static /*0x3907c14*/ TDelegate GetDelegateForFunctionPointer<TDelegate>(nint ptr);
                static /*0x70be560*/ nint GetFunctionPointerForDelegateInternal(System.Delegate d);
                static /*0x70be564*/ nint GetFunctionPointerForDelegate(System.Delegate d);
                static /*0x3907c14*/ nint GetFunctionPointerForDelegate<TDelegate>(TDelegate d);
                static /*0x70be604*/ System.Runtime.InteropServices.ICustomMarshaler GetCustomMarshalerInstance(System.Type type, string cookie);

                class SecureStringAllocator : System.MulticastDelegate
                {
                    /*0x70be294*/ SecureStringAllocator(object object, nint method);
                    /*0x70befd4*/ nint Invoke(int len);
                }

                class MarshalerInstanceKeyComparer : System.Collections.Generic.IEqualityComparer<System.ValueTuple<System.Type, string>>
                {
                    /*0x70bf0b0*/ MarshalerInstanceKeyComparer();
                    /*0x70befe8*/ bool Equals(System.ValueTuple<System.Type, string> lhs, System.ValueTuple<System.Type, string> rhs);
                    /*0x70bf05c*/ int GetHashCode(System.ValueTuple<System.Type, string> key);
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.InteropServices.Marshal.<> <>9;
                    static /*0x8*/ System.Func<System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler>> <>9__201_0;

                    static /*0x70bf0b8*/ <>c();
                    /*0x70bf120*/ <>c();
                    /*0x70bf128*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> <GetCustomMarshalerInstance>b__201_0();
                }
            }

            class MarshalAsAttribute : System.Attribute
            {
                /*0x10*/ string MarshalCookie;
                /*0x18*/ string MarshalType;
                /*0x20*/ System.Type MarshalTypeRef;
                /*0x28*/ System.Type SafeArrayUserDefinedSubType;
                /*0x30*/ System.Runtime.InteropServices.UnmanagedType utype;
                /*0x34*/ System.Runtime.InteropServices.UnmanagedType ArraySubType;
                /*0x38*/ System.Runtime.InteropServices.VarEnum SafeArraySubType;
                /*0x3c*/ int SizeConst;
                /*0x40*/ int IidParameterIndex;
                /*0x44*/ short SizeParamIndex;

                /*0x70bf1c4*/ MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType unmanagedType);
                /*0x70bf1ec*/ System.Runtime.InteropServices.UnmanagedType get_Value();
                /*0x70bf1f4*/ System.Runtime.InteropServices.MarshalAsAttribute Copy();
            }

            interface _Activator
            {
            }

            interface _Assembly
            {
            }

            interface _AssemblyName
            {
            }

            interface _Module
            {
            }

            interface _ParameterInfo
            {
            }
        }

        namespace ExceptionServices
        {
            class FirstChanceExceptionEventArgs : System.EventArgs
            {
            }

            class HandleProcessCorruptedStateExceptionsAttribute : System.Attribute
            {
                /*0x70bf258*/ HandleProcessCorruptedStateExceptionsAttribute();
            }

            class ExceptionDispatchInfo
            {
                /*0x10*/ System.Exception m_Exception;
                /*0x18*/ object m_stackTrace;

                static /*0x70bee2c*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(System.Exception source);
                static /*0x70bf3b4*/ void Throw(System.Exception source);
                /*0x70bf260*/ ExceptionDispatchInfo(System.Exception exception);
                /*0x70bf3a4*/ object get_BinaryStackTraceArray();
                /*0x70bf3ac*/ System.Exception get_SourceException();
                /*0x70beeec*/ void Throw();
            }
        }

        namespace ConstrainedExecution
        {
            enum Cer
            {
                None = 0,
                MayFail = 1,
                Success = 2,
            }

            enum Consistency
            {
                MayCorruptProcess = 0,
                MayCorruptAppDomain = 1,
                MayCorruptInstance = 2,
                WillNotCorruptState = 3,
            }

            class ReliabilityContractAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.ConstrainedExecution.Consistency <ConsistencyGuarantee>k__BackingField;
                /*0x14*/ System.Runtime.ConstrainedExecution.Cer <Cer>k__BackingField;

                /*0x70bf3cc*/ ReliabilityContractAttribute(System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);
            }

            class PrePrepareMethodAttribute : System.Attribute
            {
                /*0x70bf3f8*/ PrePrepareMethodAttribute();
            }

            class CriticalFinalizerObject
            {
                /*0x70bce48*/ CriticalFinalizerObject();
                /*0x70bf400*/ void Finalize();
            }
        }

        namespace CompilerServices
        {
            struct AsyncIteratorMethodBuilder
            {
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder _methodBuilder;

                static /*0x70bf408*/ System.Runtime.CompilerServices.AsyncIteratorMethodBuilder Create();
                /*0x380d83c*/ void MoveNext<TStateMachine>(ref TStateMachine stateMachine);
                /*0x380d93c*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x70bf414*/ void Complete();
            }

            class AsyncIteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x70bf50c*/ AsyncIteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class AsyncMethodBuilderAttribute : System.Attribute
            {
                /*0x10*/ System.Type <BuilderType>k__BackingField;

                /*0x70bf56c*/ AsyncMethodBuilderAttribute(System.Type builderType);
            }

            class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x70bf59c*/ AsyncStateMachineAttribute(System.Type stateMachineType);
            }

            struct AsyncValueTaskMethodBuilder
            {
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder _methodBuilder;
                /*0x28*/ bool _haveResult;
                /*0x29*/ bool _useBuilder;

                static /*0x70bf5cc*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder Create();
                /*0x380d83c*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x70bf5d8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x70bf6b8*/ void SetResult();
                /*0x70bf728*/ void SetException(System.Exception exception);
                /*0x70bf808*/ System.Threading.Tasks.ValueTask get_Task();
                /*0x380d93c*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
            }

            struct AsyncValueTaskMethodBuilder<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> _methodBuilder;
                /*0x0*/ TResult _result;
                /*0x0*/ bool _haveResult;
                /*0x0*/ bool _useBuilder;

                static /*0x3907c14*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<TResult> Create();
                /*0x380d83c*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x380d83c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x3907c14*/ void SetResult(TResult result);
                /*0x380d83c*/ void SetException(System.Exception exception);
                /*0x3907c14*/ System.Threading.Tasks.ValueTask<TResult> get_Task();
                /*0x380d93c*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
            }

            class CallerFilePathAttribute : System.Attribute
            {
                /*0x70bf924*/ CallerFilePathAttribute();
            }

            class CallerLineNumberAttribute : System.Attribute
            {
                /*0x70bf92c*/ CallerLineNumberAttribute();
            }

            class CallerMemberNameAttribute : System.Attribute
            {
                /*0x70bf934*/ CallerMemberNameAttribute();
            }

            class CompilerGeneratedAttribute : System.Attribute
            {
                /*0x70bf93c*/ CompilerGeneratedAttribute();
            }

            struct ConfiguredCancelableAsyncEnumerable<T>
            {
                /*0x0*/ System.Collections.Generic.IAsyncEnumerable<T> _enumerable;
                /*0x0*/ System.Threading.CancellationToken _cancellationToken;
                /*0x0*/ bool _continueOnCapturedContext;

                /*0x3907c14*/ ConfiguredCancelableAsyncEnumerable(System.Collections.Generic.IAsyncEnumerable<T> enumerable, bool continueOnCapturedContext, System.Threading.CancellationToken cancellationToken);
                /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable.Enumerator<T> GetAsyncEnumerator();

                struct Enumerator<T>
                {
                    /*0x0*/ System.Collections.Generic.IAsyncEnumerator<T> _enumerator;
                    /*0x0*/ bool _continueOnCapturedContext;

                    Enumerator(System.Collections.Generic.IAsyncEnumerator<T> enumerator, bool continueOnCapturedContext);
                    /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable<bool> MoveNextAsync();
                    /*0x3907c14*/ T get_Current();
                    /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable DisposeAsync();
                }
            }

            struct ConfiguredValueTaskAwaitable
            {
                /*0x10*/ System.Threading.Tasks.ValueTask _value;

                /*0x70bf944*/ ConfiguredValueTaskAwaitable(System.Threading.Tasks.ValueTask value);
                /*0x70bf950*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter GetAwaiter();

                struct ConfiguredValueTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.ValueTask _value;

                    /*0x70bf978*/ ConfiguredValueTaskAwaiter(System.Threading.Tasks.ValueTask value);
                    /*0x70bf984*/ bool get_IsCompleted();
                    /*0x70bf9dc*/ void GetResult();
                    /*0x70bfa34*/ void OnCompleted(System.Action continuation);
                    /*0x70bfbf8*/ void UnsafeOnCompleted(System.Action continuation);
                }
            }

            struct ConfiguredValueTaskAwaitable<TResult>
            {
                /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                /*0x3907c14*/ ConfiguredValueTaskAwaitable(System.Threading.Tasks.ValueTask<TResult> value);
                /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredValueTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                    /*0x3907c14*/ ConfiguredValueTaskAwaiter(System.Threading.Tasks.ValueTask<TResult> value);
                    /*0x380b128*/ bool get_IsCompleted();
                    /*0x3907c14*/ TResult GetResult();
                    /*0x380d83c*/ void OnCompleted(System.Action continuation);
                    /*0x380d83c*/ void UnsafeOnCompleted(System.Action continuation);
                }
            }

            class CustomConstantAttribute : System.Attribute
            {
                /*0x70bfdb8*/ CustomConstantAttribute();
                /*0x380b9e8*/ object get_Value();
            }

            class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute
            {
                /*0x10*/ System.DateTime _date;

                /*0x70bfdc0*/ object get_Value();
            }

            class DecimalConstantAttribute : System.Attribute
            {
                /*0x10*/ decimal _dec;

                /*0x70bfe1c*/ DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low);
                /*0x70bfeb8*/ decimal get_Value();
            }

            class ExtensionAttribute : System.Attribute
            {
                /*0x70bfec4*/ ExtensionAttribute();
            }

            class FixedBufferAttribute : System.Attribute
            {
                /*0x10*/ System.Type <ElementType>k__BackingField;
                /*0x18*/ int <Length>k__BackingField;

                /*0x70bfecc*/ FixedBufferAttribute(System.Type elementType, int length);
                /*0x70bff08*/ System.Type get_ElementType();
                /*0x70bff10*/ int get_Length();
            }

            class FormattableStringFactory
            {
                static /*0x70bff18*/ System.FormattableString Create(string format, object[] arguments);

                class ConcreteFormattableString : System.FormattableString
                {
                    /*0x10*/ string _format;
                    /*0x18*/ object[] _arguments;

                    /*0x70bffe8*/ ConcreteFormattableString(string format, object[] arguments);
                    /*0x70c002c*/ string get_Format();
                    /*0x70c0034*/ object[] GetArguments();
                    /*0x70c003c*/ int get_ArgumentCount();
                    /*0x70c0058*/ object GetArgument(int index);
                    /*0x70c0088*/ string ToString(System.IFormatProvider formatProvider);
                }
            }

            interface IAsyncStateMachine
            {
                /*0x380cb08*/ void MoveNext();
                /*0x380d83c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            interface INotifyCompletion
            {
                /*0x380d83c*/ void OnCompleted(System.Action continuation);
            }

            interface ICriticalNotifyCompletion : System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x380d83c*/ void UnsafeOnCompleted(System.Action continuation);
            }

            interface ITuple
            {
                /*0x380b6a0*/ int get_Length();
            }

            class IntrinsicAttribute : System.Attribute
            {
                /*0x70c009c*/ IntrinsicAttribute();
            }

            class IsByRefLikeAttribute : System.Attribute
            {
                /*0x70c00a4*/ IsByRefLikeAttribute();
            }

            class IsReadOnlyAttribute : System.Attribute
            {
                /*0x70c00ac*/ IsReadOnlyAttribute();
            }

            class IsVolatile
            {
            }

            class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x70c00b4*/ IteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class RuntimeCompatibilityAttribute : System.Attribute
            {
                /*0x10*/ bool <WrapNonExceptionThrows>k__BackingField;

                /*0x70c00e4*/ RuntimeCompatibilityAttribute();
                /*0x70c00ec*/ void set_WrapNonExceptionThrows(bool value);
            }

            class RuntimeFeature
            {
                static /*0x70c00f8*/ bool get_IsDynamicCodeSupported();
            }

            class RuntimeWrappedException : System.Exception
            {
                /*0x90*/ object _wrappedException;

                /*0x70c0100*/ RuntimeWrappedException(object thrownObject);
                /*0x70c0198*/ RuntimeWrappedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70c0344*/ RuntimeWrappedException();
                /*0x70c0284*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x70c033c*/ object get_WrappedException();
            }

            class StateMachineAttribute : System.Attribute
            {
                /*0x10*/ System.Type <StateMachineType>k__BackingField;

                /*0x70bf53c*/ StateMachineAttribute(System.Type stateMachineType);
                /*0x70c037c*/ System.Type get_StateMachineType();
            }

            class StringFreezingAttribute : System.Attribute
            {
                /*0x70c0384*/ StringFreezingAttribute();
            }

            class TupleElementNamesAttribute : System.Attribute
            {
                /*0x10*/ string[] _transformNames;

                /*0x70c038c*/ TupleElementNamesAttribute(string[] transformNames);
            }

            class TypeForwardedFromAttribute : System.Attribute
            {
                /*0x10*/ string <AssemblyFullName>k__BackingField;

                /*0x70c0408*/ TypeForwardedFromAttribute(string assemblyFullName);
                /*0x70c0490*/ string get_AssemblyFullName();
            }

            class UnsafeValueTypeAttribute : System.Attribute
            {
                /*0x70c0498*/ UnsafeValueTypeAttribute();
            }

            struct ValueTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                static /*0x0*/ System.Action<object> s_invokeActionDelegate;
                /*0x10*/ System.Threading.Tasks.ValueTask _value;

                static /*0x70c0894*/ ValueTaskAwaiter();
                /*0x70c04a0*/ ValueTaskAwaiter(System.Threading.Tasks.ValueTask value);
                /*0x70c04ac*/ bool get_IsCompleted();
                /*0x70c0504*/ void GetResult();
                /*0x70c055c*/ void OnCompleted(System.Action continuation);
                /*0x70c06f8*/ void UnsafeOnCompleted(System.Action continuation);

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.ValueTaskAwaiter.<> <>9;

                    static /*0x70c0964*/ <>c();
                    /*0x70c09cc*/ <>c();
                    /*0x70c09d4*/ void <.cctor>b__9_0(object state);
                }
            }

            struct ValueTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                /*0x3907c14*/ ValueTaskAwaiter(System.Threading.Tasks.ValueTask<TResult> value);
                /*0x380b128*/ bool get_IsCompleted();
                /*0x3907c14*/ TResult GetResult();
                /*0x380d83c*/ void OnCompleted(System.Action continuation);
                /*0x380d83c*/ void UnsafeOnCompleted(System.Action continuation);
            }

            struct TaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;

                static /*0x70c0b24*/ void ValidateEnd(System.Threading.Tasks.Task task);
                static /*0x70c0b70*/ void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task);
                static /*0x70c0bd0*/ void ThrowForNonSuccess(System.Threading.Tasks.Task task);
                static /*0x70c0a6c*/ void OnCompletedInternal(System.Threading.Tasks.Task task, System.Action continuation, bool continueOnCapturedContext, bool flowExecutionContext);
                static /*0x70c0d1c*/ System.Action OutputWaitEtwEvents(System.Threading.Tasks.Task task, System.Action continuation);
                /*0x70c0a48*/ TaskAwaiter(System.Threading.Tasks.Task task);
                /*0x70c0a50*/ bool get_IsCompleted();
                /*0x70c06e8*/ void OnCompleted(System.Action continuation);
                /*0x70c0884*/ void UnsafeOnCompleted(System.Action continuation);
                /*0x70c0b1c*/ void GetResult();

                class <>c__DisplayClass11_0
                {
                    /*0x10*/ System.Threading.Tasks.Task task;
                    /*0x18*/ System.Action continuation;

                    /*0x70c0f14*/ <>c__DisplayClass11_0();
                    /*0x70c0f1c*/ void <OutputWaitEtwEvents>b__0();
                }
            }

            struct TaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                /*0x380d83c*/ TaskAwaiter(System.Threading.Tasks.Task<TResult> task);
                /*0x380b128*/ bool get_IsCompleted();
                /*0x380d83c*/ void OnCompleted(System.Action continuation);
                /*0x380d83c*/ void UnsafeOnCompleted(System.Action continuation);
                /*0x3907c14*/ TResult GetResult();
            }

            struct ConfiguredTaskAwaitable
            {
                /*0x10*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter m_configuredTaskAwaiter;

                /*0x70c1090*/ ConfiguredTaskAwaitable(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                /*0x70c1100*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter();

                struct ConfiguredTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.Task m_task;
                    /*0x18*/ bool m_continueOnCapturedContext;

                    /*0x70c10d8*/ ConfiguredTaskAwaiter(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                    /*0x70c110c*/ bool get_IsCompleted();
                    /*0x70bfbe4*/ void OnCompleted(System.Action continuation);
                    /*0x70bfda4*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x70c1128*/ void GetResult();
                }
            }

            struct ConfiguredTaskAwaitable<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter;

                ConfiguredTaskAwaitable(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                /*0x3907c14*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;
                    /*0x0*/ bool m_continueOnCapturedContext;

                    ConfiguredTaskAwaiter(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                    /*0x380b128*/ bool get_IsCompleted();
                    /*0x380d83c*/ void OnCompleted(System.Action continuation);
                    /*0x380d83c*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x3907c14*/ TResult GetResult();
                }
            }

            class ReflectionBlockedAttribute : System.Attribute
            {
                /*0x70c1130*/ ReflectionBlockedAttribute();
            }

            struct AsyncVoidMethodBuilder
            {
                /*0x10*/ System.Threading.SynchronizationContext m_synchronizationContext;
                /*0x18*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x28*/ System.Threading.Tasks.Task m_task;

                static /*0x70c1138*/ System.Runtime.CompilerServices.AsyncVoidMethodBuilder Create();
                /*0x380d83c*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x70c11a0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x380d93c*/ void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x380d93c*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x70c1264*/ void SetResult();
                /*0x70c13d4*/ void SetException(System.Exception exception);
                /*0x70c1330*/ void NotifySynchronizationContextOfCompletion();
                /*0x70c12c0*/ System.Threading.Tasks.Task get_Task();
            }

            struct AsyncTaskMethodBuilder
            {
                static /*0x0*/ System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult> s_cachedCompleted;
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult> m_builder;

                static /*0x70c1814*/ AsyncTaskMethodBuilder();
                static /*0x70c1808*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder Create();
                /*0x380d83c*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x70bf63c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x380d93c*/ void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x380d93c*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x70bf8b8*/ System.Threading.Tasks.Task get_Task();
                /*0x70bf468*/ void SetResult();
                /*0x70bf78c*/ void SetException(System.Exception exception);
            }

            struct AsyncTaskMethodBuilder<TResult>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_defaultResultTask;
                /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                static /*0x38358cc*/ AsyncTaskMethodBuilder();
                static /*0x3907c14*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> Create();
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> GetTaskForResult(TResult result);
                /*0x380d83c*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x380d83c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x380d93c*/ void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x380d93c*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x380b9e8*/ System.Threading.Tasks.Task<TResult> get_Task();
                /*0x3907c14*/ void SetResult(TResult result);
                /*0x380d83c*/ void SetResult(System.Threading.Tasks.Task<TResult> completedTask);
                /*0x380d83c*/ void SetException(System.Exception exception);
            }

            class AsyncTaskCache
            {
                static /*0x0*/ System.Threading.Tasks.Task<bool> TrueTask;
                static /*0x8*/ System.Threading.Tasks.Task<bool> FalseTask;
                static /*0x10*/ System.Threading.Tasks.Task<int> Int32Tasks;

                static /*0x70c19b4*/ AsyncTaskCache();
                static /*0x70c1894*/ System.Threading.Tasks.Task<int> CreateInt32Tasks();
                static /*0x3907c14*/ System.Threading.Tasks.Task<TResult> CreateCacheableTask<TResult>(TResult result);
            }

            struct AsyncMethodBuilderCore
            {
                /*0x10*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;
                /*0x18*/ System.Action m_defaultContextAction;

                static /*0x3837da0*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                static /*0x70c1504*/ void ThrowAsync(System.Exception exception, System.Threading.SynchronizationContext targetContext);
                static /*0x70c1d74*/ System.Action CreateContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                static /*0x70c204c*/ System.Threading.Tasks.Task TryGetContinuationTask(System.Action action);
                /*0x70c11a8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x70c1a68*/ System.Action GetCompletionAction(System.Threading.Tasks.Task taskForTracing, ref System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize);
                /*0x70c1c80*/ System.Action OutputAsyncCausalityEvents(System.Threading.Tasks.Task innerTask, System.Action continuation);
                /*0x70c1e30*/ void PostBoxInitialization(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine, System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runner, System.Threading.Tasks.Task builtTask);

                class MoveNextRunner
                {
                    static /*0x0*/ System.Threading.ContextCallback s_invokeMoveNext;
                    /*0x10*/ System.Threading.ExecutionContext m_context;
                    /*0x18*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;

                    static /*0x70c22f4*/ void InvokeMoveNext(object stateMachine);
                    /*0x70c1c3c*/ MoveNextRunner(System.Threading.ExecutionContext context, System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                    /*0x70c20e0*/ void Run();
                }

                class ContinuationWrapper
                {
                    /*0x10*/ System.Action m_continuation;
                    /*0x18*/ System.Action m_invokeAction;
                    /*0x20*/ System.Threading.Tasks.Task m_innerTask;

                    /*0x70c1fdc*/ ContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                    /*0x70c23d4*/ void Invoke();
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ System.Threading.Tasks.Task innerTask;
                    /*0x18*/ System.Action continuation;

                    /*0x70c1d6c*/ <>c__DisplayClass5_0();
                    /*0x70c23f8*/ void <OutputAsyncCausalityEvents>b__0();
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore.<> <>9;
                    static /*0x8*/ System.Threading.SendOrPostCallback <>9__7_0;
                    static /*0x10*/ System.Threading.WaitCallback <>9__7_1;

                    static /*0x70c2454*/ <>c();
                    /*0x70c24bc*/ <>c();
                    /*0x70c24c4*/ void <ThrowAsync>b__7_0(object state);
                    /*0x70c2518*/ void <ThrowAsync>b__7_1(object state);
                }
            }

            struct YieldAwaitable
            {
                /*0x70c256c*/ System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter GetAwaiter();

                struct YieldAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    static /*0x0*/ System.Threading.WaitCallback s_waitCallbackRunAction;
                    static /*0x8*/ System.Threading.SendOrPostCallback s_sendOrPostCallbackRunAction;

                    static /*0x70c2920*/ YieldAwaiter();
                    static /*0x70c25d4*/ void QueueContinuation(System.Action continuation, bool flowContext);
                    static /*0x70c28b0*/ void RunAction(object state);
                    /*0x70c2574*/ bool get_IsCompleted();
                    /*0x70c257c*/ void OnCompleted(System.Action continuation);
                    /*0x70c2858*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x70c291c*/ void GetResult();
                }
            }

            enum LoadHint
            {
                Default = 0,
                Always = 1,
                Sometimes = 2,
            }

            class DefaultDependencyAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0x70c2a04*/ DefaultDependencyAttribute(System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            class DependencyAttribute : System.Attribute
            {
                /*0x10*/ string dependentAssembly;
                /*0x18*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0x70c2a2c*/ DependencyAttribute(string dependentAssemblyArgument, System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            enum CompilationRelaxations
            {
                NoStringInterning = 8,
            }

            class CompilationRelaxationsAttribute : System.Attribute
            {
                /*0x10*/ int m_relaxations;

                /*0x70c2a68*/ CompilationRelaxationsAttribute(int relaxations);
                /*0x70c2a90*/ CompilationRelaxationsAttribute(System.Runtime.CompilerServices.CompilationRelaxations relaxations);
                /*0x70c2ab8*/ int get_CompilationRelaxations();
            }

            class InternalsVisibleToAttribute : System.Attribute
            {
                /*0x10*/ string _assemblyName;
                /*0x18*/ bool _allInternalsVisible;

                /*0x70c2ac0*/ InternalsVisibleToAttribute(string assemblyName);
                /*0x70c2af8*/ void set_AllInternalsVisible(bool value);
            }

            class FriendAccessAllowedAttribute : System.Attribute
            {
                /*0x70c2b04*/ FriendAccessAllowedAttribute();
            }

            class TypeDependencyAttribute : System.Attribute
            {
                /*0x10*/ string typeName;

                /*0x70c2b0c*/ TypeDependencyAttribute(string typeName);
            }

            class JitHelpers
            {
                static /*0x3907c14*/ T UnsafeCast<T>(object o);
                static /*0x3907c14*/ int UnsafeEnumCast<T>(T val);
                static /*0x3907c14*/ long UnsafeEnumCastLong<T>(T val);
            }

            struct Ephemeron
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
            }

            class ConditionalWeakTable<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x0*/ System.Runtime.CompilerServices.Ephemeron[] data;
                /*0x0*/ object _lock;
                /*0x0*/ int size;

                /*0x380cb08*/ ConditionalWeakTable();
                /*0x380cb08*/ void Finalize();
                /*0x380cb08*/ void RehashWithoutResize();
                /*0x380cb08*/ void RecomputeSize();
                /*0x380cb08*/ void Rehash();
                /*0x3907c14*/ void Add(TKey key, TValue value);
                /*0x3907c14*/ bool Remove(TKey key);
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3907c14*/ TValue GetValue(TKey key, System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<TKey, TValue> createValueCallback);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class CreateValueCallback<TKey, TValue> : System.MulticastDelegate
                {
                    CreateValueCallback(object object, nint method);
                    /*0x3907c14*/ TValue Invoke(TKey key);
                }

                class Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> _table;
                    /*0x0*/ int _currentIndex;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;

                    /*0x380d83c*/ Enumerator(System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> table);
                    /*0x380cb08*/ void Finalize();
                    /*0x380cb08*/ void Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x380cb08*/ void Reset();
                }
            }

            class RuntimeHelpers
            {
                static /*0x70c2b88*/ void InitializeArray(System.Array array, nint fldHandle);
                static /*0x70c2b8c*/ void InitializeArray(System.Array array, System.RuntimeFieldHandle fldHandle);
                static /*0x70bded8*/ int get_OffsetToStringData();
                static /*0x70c2bd0*/ int GetHashCode(object o);
                static /*0x70c2bd8*/ object GetObjectValue(object obj);
                static /*0x70c2bdc*/ bool SufficientExecutionStack();
                static /*0x70c2be0*/ void EnsureSufficientExecutionStack();
                static /*0x70c2c28*/ bool TryEnsureSufficientExecutionStack();
                static /*0x70c2c2c*/ void PrepareConstrainedRegions();
                static /*0x3818690*/ bool IsReferenceOrContainsReferences<T>();
            }

            class Unsafe
            {
                static /*0x38301ec*/ ref T Add<T>(ref T source, int elementOffset);
                static /*0x3907c14*/ ref T Add<T>(ref T source, nint elementOffset);
                static /*0x3907c14*/ void* Add<T>(void* source, int elementOffset);
                static /*0x3907c14*/ ref T AddByteOffset<T>(ref T source, nint byteOffset);
                static /*0x381cca4*/ bool AreSame<T>(ref T left, ref T right);
                static /*0x3907c14*/ T As<T>(object o);
                static /*0x382eaf0*/ ref TTo As<TFrom, TTo>(ref TFrom source);
                static /*0x3907c14*/ void* AsPointer<T>(ref T value);
                static /*0x3907c14*/ ref T AsRef<T>(void* source);
                static /*0x382eaf0*/ ref T AsRef<T>(ref T source);
                static /*0x70c2c30*/ void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount);
                static /*0x3907c14*/ T Read<T>(void* source);
                static /*0x3907c14*/ T ReadUnaligned<T>(ref byte source);
                static /*0x3821e38*/ int SizeOf<T>();
                static /*0x3907c14*/ void WriteUnaligned<T>(ref byte destination, T value);
                static /*0x381cca4*/ bool IsAddressLessThan<T>(ref T left, ref T right);
                static /*0x383186c*/ ref T AddByteOffset<T>(ref T source, ulong byteOffset);
            }

            class EnumeratorCancellationAttribute : System.Attribute
            {
                /*0x70c2c38*/ EnumeratorCancellationAttribute();
            }
        }
    }

    namespace Resources
    {
        interface IResourceReader : System.Collections.IEnumerable, System.IDisposable
        {
            /*0x380cb08*/ void Close();
            /*0x380b9e8*/ System.Collections.IDictionaryEnumerator GetEnumerator();
        }

        class MissingManifestResourceException : System.SystemException
        {
            /*0x70c2c40*/ MissingManifestResourceException();
            /*0x70c2c9c*/ MissingManifestResourceException(string message);
            /*0x70c2cc0*/ MissingManifestResourceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MissingSatelliteAssemblyException : System.SystemException
        {
            /*0x90*/ string _cultureName;

            /*0x70c2cc8*/ MissingSatelliteAssemblyException();
            /*0x70c2d24*/ MissingSatelliteAssemblyException(string message, string cultureName);
            /*0x70c2d60*/ MissingSatelliteAssemblyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class NeutralResourcesLanguageAttribute : System.Attribute
        {
            /*0x10*/ string <CultureName>k__BackingField;
            /*0x18*/ System.Resources.UltimateResourceFallbackLocation <Location>k__BackingField;

            /*0x70c2d68*/ NeutralResourcesLanguageAttribute(string cultureName);
            /*0x70c2dec*/ string get_CultureName();
            /*0x70c2df4*/ System.Resources.UltimateResourceFallbackLocation get_Location();
        }

        class ResourceFallbackManager : System.Collections.Generic.IEnumerable<System.Globalization.CultureInfo>, System.Collections.IEnumerable
        {
            /*0x10*/ System.Globalization.CultureInfo m_startingCulture;
            /*0x18*/ System.Globalization.CultureInfo m_neutralResourcesCulture;
            /*0x20*/ bool m_useParents;

            /*0x70c2dfc*/ ResourceFallbackManager(System.Globalization.CultureInfo startingCulture, System.Globalization.CultureInfo neutralResourcesCulture, bool useParents);
            /*0x70c2eb0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70c2eb4*/ System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo> GetEnumerator();

            class <GetEnumerator>d__5 : System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Globalization.CultureInfo <>2__current;
                /*0x20*/ System.Resources.ResourceFallbackManager <>4__this;
                /*0x28*/ bool <reachedNeutralResourcesCulture>5__2;
                /*0x30*/ System.Globalization.CultureInfo <currentCulture>5__3;

                /*0x70c2f20*/ <GetEnumerator>d__5(int <>1__state);
                /*0x70c2f48*/ void System.IDisposable.Dispose();
                /*0x70c2f4c*/ bool MoveNext();
                /*0x70c3154*/ System.Globalization.CultureInfo System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>.get_Current();
                /*0x70c315c*/ void System.Collections.IEnumerator.Reset();
                /*0x70c3194*/ object System.Collections.IEnumerator.get_Current();
            }
        }

        enum ResourceTypeCode
        {
            Null = 0,
            String = 1,
            Boolean = 2,
            Char = 3,
            Byte = 4,
            SByte = 5,
            Int16 = 6,
            UInt16 = 7,
            Int32 = 8,
            UInt32 = 9,
            Int64 = 10,
            UInt64 = 11,
            Single = 12,
            Double = 13,
            Decimal = 14,
            DateTime = 15,
            TimeSpan = 16,
            LastPrimitive = 16,
            ByteArray = 32,
            Stream = 33,
            StartOfUserTypes = 64,
        }

        class RuntimeResourceSet : System.Resources.ResourceSet, System.Collections.IEnumerable
        {
            static int Version = 2;
            /*0x28*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x30*/ System.Resources.ResourceReader _defaultReader;
            /*0x38*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _caseInsensitiveTable;
            /*0x40*/ bool _haveReadFromReader;

            /*0x70c319c*/ RuntimeResourceSet(string fileName);
            /*0x70c3438*/ RuntimeResourceSet(System.IO.Stream stream);
            /*0x70c355c*/ void Dispose(bool disposing);
            /*0x70c36dc*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x70c37dc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70c36e0*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x70c37e0*/ string GetString(string key);
            /*0x70c4110*/ string GetString(string key, bool ignoreCase);
            /*0x70c4148*/ object GetObject(string key);
            /*0x70c4154*/ object GetObject(string key, bool ignoreCase);
            /*0x70c3818*/ object GetObject(string key, bool ignoreCase, bool isString);
            /*0x70c4858*/ object ResolveResourceLocator(System.Resources.ResourceLocator resLocation, string key, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> copyOfCache, bool keyInWrongCase);
        }

        class SatelliteContractVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0x70c49e4*/ SatelliteContractVersionAttribute(string version);
            /*0x70c4a60*/ string get_Version();
        }

        enum UltimateResourceFallbackLocation
        {
            MainAssembly = 0,
            Satellite = 1,
        }

        class FastResourceComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
        {
            static /*0x0*/ System.Resources.FastResourceComparer Default;

            static /*0x70c4e64*/ FastResourceComparer();
            static /*0x70c4ae8*/ int HashFunction(string key);
            static /*0x70c4ca0*/ int CompareOrdinal(string a, byte[] bytes, int bCharLength);
            static /*0x70c4d58*/ int CompareOrdinal(byte[] bytes, int aCharLength, string b);
            static /*0x70c4dcc*/ int CompareOrdinal(byte* a, int byteLen, string b);
            /*0x70c4e5c*/ FastResourceComparer();
            /*0x70c4a68*/ int GetHashCode(object key);
            /*0x70c4b54*/ int GetHashCode(string key);
            /*0x70c4ba8*/ int Compare(object a, object b);
            /*0x70c4c14*/ int Compare(string a, string b);
            /*0x70c4c24*/ bool Equals(string a, string b);
            /*0x70c4c34*/ bool Equals(object a, object b);
        }

        class FileBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            /*0x70c4ecc*/ FileBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
            /*0x70c4efc*/ System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
            /*0x70c51d4*/ string FindResourceFile(System.Globalization.CultureInfo culture, string fileName);
            /*0x70c52b8*/ System.Resources.ResourceSet CreateResourceSet(string file);
        }

        interface IResourceGroveler
        {
            System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
        }

        class ManifestBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            static /*0x70c6c60*/ System.Globalization.CultureInfo GetNeutralResourcesLanguage(System.Reflection.Assembly a, ref System.Resources.UltimateResourceFallbackLocation fallbackLocation);
            static /*0x70c6f7c*/ bool GetNeutralResourcesLanguageAttribute(System.Reflection.Assembly assembly, ref string cultureName, ref short fallbackLocation);
            /*0x70c55b4*/ ManifestBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
            /*0x70c55e4*/ System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
            /*0x70c58a8*/ System.Globalization.CultureInfo UltimateFallbackFixup(System.Globalization.CultureInfo lookForCulture);
            /*0x70c6014*/ System.Resources.ResourceSet CreateResourceSet(System.IO.Stream store, System.Reflection.Assembly assembly);
            /*0x70c5f48*/ System.IO.Stream GetManifestResourceStream(System.Reflection.RuntimeAssembly satellite, string fileName, ref System.Threading.StackCrawlMark stackMark);
            /*0x70c7164*/ System.IO.Stream CaseInsensitiveManifestResourceStreamLookup(System.Reflection.RuntimeAssembly satellite, string name);
            /*0x70c5a4c*/ System.Reflection.RuntimeAssembly GetSatelliteAssembly(System.Globalization.CultureInfo lookForCulture, ref System.Threading.StackCrawlMark stackMark);
            /*0x70c7000*/ bool CanUseDefaultResourceClasses(string readerTypeName, string resSetTypeName);
            /*0x70c7588*/ string GetSatelliteAssemblyName();
            /*0x70c5bd0*/ void HandleSatelliteMissing();
            /*0x70c6998*/ void HandleResourceStreamMissing(string fileName);
        }

        class ResourceManager
        {
            static /*0x0*/ int MagicNumber;
            static /*0x4*/ int HeaderVersionNumber;
            static /*0x8*/ System.Type _minResourceSet;
            static /*0x10*/ string ResReaderTypeName;
            static /*0x18*/ string ResSetTypeName;
            static /*0x20*/ string MscorlibName;
            static /*0x28*/ int DEBUG;
            /*0x10*/ string BaseNameField;
            /*0x18*/ System.Collections.Hashtable ResourceSets;
            /*0x20*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> _resourceSets;
            /*0x28*/ string moduleDir;
            /*0x30*/ System.Reflection.Assembly MainAssembly;
            /*0x38*/ System.Type _locationInfo;
            /*0x40*/ System.Type _userResourceSet;
            /*0x48*/ System.Globalization.CultureInfo _neutralResourcesCulture;
            /*0x50*/ System.Resources.ResourceManager.CultureNameResourceSetPair _lastUsedResourceCache;
            /*0x58*/ bool _ignoreCase;
            /*0x59*/ bool UseManifest;
            /*0x5a*/ bool UseSatelliteAssem;
            /*0x5c*/ System.Resources.UltimateResourceFallbackLocation _fallbackLoc;
            /*0x60*/ System.Version _satelliteContractVersion;
            /*0x68*/ bool _lookedForSatelliteContractVersion;
            /*0x70*/ System.Reflection.Assembly _callingAssembly;
            /*0x78*/ System.Reflection.RuntimeAssembly m_callingAssembly;
            /*0x80*/ System.Resources.IResourceGroveler resourceGroveler;

            static /*0x70ca188*/ ResourceManager();
            static /*0x70c93a8*/ void AddResourceSet(System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, string cultureName, ref System.Resources.ResourceSet rs);
            static /*0x70c9550*/ System.Version GetSatelliteContractVersion(System.Reflection.Assembly a);
            static /*0x70c7608*/ bool CompareNames(string asmTypeName1, string typeName2, System.Reflection.AssemblyName asmName2);
            /*0x70c79b8*/ ResourceManager();
            /*0x70c7b28*/ ResourceManager(string baseName, System.Reflection.Assembly assembly);
            /*0x70c7fd0*/ ResourceManager(System.Type resourceSource);
            /*0x70c7884*/ void Init();
            /*0x70c8318*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70c8350*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70c857c*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70c7e38*/ void CommonAssemblyInit();
            /*0x70c85f4*/ string get_BaseName();
            /*0x70c85fc*/ System.Resources.UltimateResourceFallbackLocation get_FallbackLocation();
            /*0x70c8604*/ string GetResourceFileName(System.Globalization.CultureInfo culture);
            /*0x70c8740*/ System.Resources.ResourceSet GetFirstResourceSet(System.Globalization.CultureInfo culture);
            /*0x70c8b2c*/ System.Resources.ResourceSet InternalGetResourceSet(System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);
            /*0x70c8b50*/ System.Resources.ResourceSet InternalGetResourceSet(System.Globalization.CultureInfo requestedCulture, bool createIfNotExists, bool tryParents, ref System.Threading.StackCrawlMark stackMark);
            /*0x70c7e34*/ void SetAppXConfiguration();
            /*0x70c9c94*/ string GetString(string name);
            /*0x70c9ca4*/ string GetString(string name, System.Globalization.CultureInfo culture);

            class CultureNameResourceSetPair
            {
                /*0x10*/ string lastCultureName;
                /*0x18*/ System.Resources.ResourceSet lastResourceSet;

                /*0x70c7aa4*/ CultureNameResourceSetPair();
            }

            class ResourceManagerMediator
            {
                /*0x10*/ System.Resources.ResourceManager _rm;

                /*0x70c7aac*/ ResourceManagerMediator(System.Resources.ResourceManager rm);
                /*0x70c557c*/ string get_ModuleDir();
                /*0x70c529c*/ System.Type get_LocationInfo();
                /*0x70c5598*/ System.Type get_UserResourceSet();
                /*0x70c5280*/ string get_BaseNameField();
                /*0x70c6c44*/ System.Globalization.CultureInfo get_NeutralResourcesCulture();
                /*0x70c51b4*/ string GetResourceFileName(System.Globalization.CultureInfo culture);
                /*0x70c74dc*/ bool get_LookedForSatelliteContractVersion();
                /*0x70c7568*/ void set_LookedForSatelliteContractVersion(bool value);
                /*0x70c75ec*/ System.Version get_SatelliteContractVersion();
                /*0x70c754c*/ void set_SatelliteContractVersion(System.Version value);
                /*0x70c74f8*/ System.Version ObtainSatelliteContractVersion(System.Reflection.Assembly a);
                /*0x70c59ac*/ System.Resources.UltimateResourceFallbackLocation get_FallbackLoc();
                /*0x70c7148*/ System.Reflection.RuntimeAssembly get_CallingAssembly();
                /*0x70c59c8*/ System.Reflection.RuntimeAssembly get_MainAssembly();
                /*0x70c7864*/ string get_BaseName();
            }
        }

        struct ResourceLocator
        {
            /*0x10*/ object _value;
            /*0x18*/ int _dataPos;

            static /*0x70c47e0*/ bool CanCache(System.Resources.ResourceTypeCode value);
            /*0x70c47ec*/ ResourceLocator(int dataPos, object value);
            /*0x70ca31c*/ int get_DataPosition();
            /*0x70ca324*/ object get_Value();
            /*0x70ca32c*/ void set_Value(object value);
        }

        class ResourceReader : System.Resources.IResourceReader, System.Collections.IEnumerable, System.IDisposable
        {
            /*0x10*/ System.IO.BinaryReader _store;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x20*/ long _nameSectionOffset;
            /*0x28*/ long _dataSectionOffset;
            /*0x30*/ int[] _nameHashes;
            /*0x38*/ int* _nameHashesPtr;
            /*0x40*/ int[] _namePositions;
            /*0x48*/ int* _namePositionsPtr;
            /*0x50*/ System.RuntimeType[] _typeTable;
            /*0x58*/ int[] _typeNamePositions;
            /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _objFormatter;
            /*0x68*/ int _numResources;
            /*0x70*/ System.IO.UnmanagedMemoryStream _ums;
            /*0x78*/ int _version;

            static /*0x70ca554*/ int ReadUnalignedI4(int* p);
            /*0x70c32f8*/ ResourceReader(System.IO.Stream stream, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> resCache);
            /*0x70c36d4*/ void Close();
            /*0x70ca54c*/ void Dispose();
            /*0x70ca4a4*/ void Dispose(bool disposing);
            /*0x70ca55c*/ void SkipString();
            /*0x70ca60c*/ int GetNameHash(int index);
            /*0x70ca650*/ int GetNamePosition(int index);
            /*0x70ca768*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70ca76c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x70c47fc*/ System.Resources.ResourceReader.ResourceEnumerator GetEnumeratorInternal();
            /*0x70c4160*/ int FindPosForResource(string name);
            /*0x70ca820*/ bool CompareStringEqualsName(string name);
            /*0x70caa28*/ string AllocateStringForNameIndex(int index, ref int dataOffset);
            /*0x70cb21c*/ object GetValueForNameIndex(int index);
            /*0x70c451c*/ string LoadString(int pos);
            /*0x70cba68*/ object LoadObject(int pos);
            /*0x70c4790*/ object LoadObject(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x70cb4c8*/ object LoadObjectV1(int pos);
            /*0x70cba94*/ object _LoadObjectV1(int pos);
            /*0x70cb5c0*/ object LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x70cc310*/ object _LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x70cc16c*/ object DeserializeObject(int typeIndex);
            /*0x70ca334*/ void ReadResources();
            /*0x70cc9c4*/ void _ReadResources();
            /*0x70cb6b8*/ System.RuntimeType FindType(int typeIndex);

            class ResourceEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Resources.ResourceReader _reader;
                /*0x18*/ bool _currentIsValid;
                /*0x1c*/ int _currentName;
                /*0x20*/ int _dataPosition;

                /*0x70cd294*/ ResourceEnumerator(System.Resources.ResourceReader reader);
                /*0x70cd2d8*/ bool MoveNext();
                /*0x70cd348*/ object get_Key();
                /*0x70cd3fc*/ object get_Current();
                /*0x70cd7b0*/ int get_DataPosition();
                /*0x70cd460*/ System.Collections.DictionaryEntry get_Entry();
                /*0x70cd7b8*/ object get_Value();
                /*0x70cd864*/ void Reset();
            }
        }

        class ResourceSet : System.IDisposable, System.Collections.IEnumerable
        {
            /*0x10*/ System.Resources.IResourceReader Reader;
            /*0x18*/ System.Collections.Hashtable Table;
            /*0x20*/ System.Collections.Hashtable _caseInsensitiveTable;

            /*0x70cd8e8*/ ResourceSet();
            /*0x70cd964*/ ResourceSet(bool junk);
            /*0x70cd904*/ void CommonInit();
            /*0x70cd96c*/ void Dispose(bool disposing);
            /*0x70cda50*/ void Dispose();
            /*0x70cda60*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x70cdae0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x70cda64*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x70cdae4*/ string GetString(string name);
            /*0x70cdce0*/ string GetString(string name, bool ignoreCase);
            /*0x70ce18c*/ object GetObject(string name);
            /*0x70ce190*/ object GetObject(string name, bool ignoreCase);
            /*0x70cdc18*/ object GetObjectInternal(string name);
            /*0x70cdeb4*/ object GetCaseInsensitiveObjectInternal(string name);
        }
    }

    namespace Reflection
    {
        class AmbiguousMatchException : System.SystemException
        {
            /*0x70ce1d0*/ AmbiguousMatchException();
            /*0x70ce22c*/ AmbiguousMatchException(string message);
            /*0x70ce250*/ AmbiguousMatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class AssemblyCompanyAttribute : System.Attribute
        {
            /*0x10*/ string <Company>k__BackingField;

            /*0x70ce258*/ AssemblyCompanyAttribute(string company);
        }

        class AssemblyConfigurationAttribute : System.Attribute
        {
            /*0x10*/ string <Configuration>k__BackingField;

            /*0x70ce288*/ AssemblyConfigurationAttribute(string configuration);
        }

        enum AssemblyContentType
        {
            Default = 0,
            WindowsRuntime = 1,
        }

        class AssemblyCopyrightAttribute : System.Attribute
        {
            /*0x10*/ string <Copyright>k__BackingField;

            /*0x70ce2b8*/ AssemblyCopyrightAttribute(string copyright);
        }

        class AssemblyDefaultAliasAttribute : System.Attribute
        {
            /*0x10*/ string <DefaultAlias>k__BackingField;

            /*0x70ce2e8*/ AssemblyDefaultAliasAttribute(string defaultAlias);
        }

        class AssemblyDelaySignAttribute : System.Attribute
        {
            /*0x10*/ bool <DelaySign>k__BackingField;

            /*0x70ce318*/ AssemblyDelaySignAttribute(bool delaySign);
        }

        class AssemblyDescriptionAttribute : System.Attribute
        {
            /*0x10*/ string <Description>k__BackingField;

            /*0x70ce340*/ AssemblyDescriptionAttribute(string description);
        }

        class AssemblyFileVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0x70ce370*/ AssemblyFileVersionAttribute(string version);
        }

        class AssemblyInformationalVersionAttribute : System.Attribute
        {
            /*0x10*/ string <InformationalVersion>k__BackingField;

            /*0x70ce3ec*/ AssemblyInformationalVersionAttribute(string informationalVersion);
        }

        class AssemblyKeyFileAttribute : System.Attribute
        {
            /*0x10*/ string <KeyFile>k__BackingField;

            /*0x70ce41c*/ AssemblyKeyFileAttribute(string keyFile);
        }

        class AssemblyMetadataAttribute : System.Attribute
        {
            /*0x10*/ string <Key>k__BackingField;
            /*0x18*/ string <Value>k__BackingField;

            /*0x70ce44c*/ AssemblyMetadataAttribute(string key, string value);
        }

        enum AssemblyNameFlags
        {
            None = 0,
            PublicKey = 1,
            EnableJITcompileOptimizer = 16384,
            EnableJITcompileTracking = 32768,
            Retargetable = 256,
        }

        class AssemblyProductAttribute : System.Attribute
        {
            /*0x10*/ string <Product>k__BackingField;

            /*0x70ce490*/ AssemblyProductAttribute(string product);
        }

        class AssemblyTitleAttribute : System.Attribute
        {
            /*0x10*/ string <Title>k__BackingField;

            /*0x70ce4c0*/ AssemblyTitleAttribute(string title);
        }

        class AssemblyTrademarkAttribute : System.Attribute
        {
            /*0x10*/ string <Trademark>k__BackingField;

            /*0x70ce4f0*/ AssemblyTrademarkAttribute(string trademark);
        }

        class Binder
        {
            /*0x70ce520*/ Binder();
            System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
            System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, ref object state);
            /*0x380bd40*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo culture);
            /*0x380d93c*/ void ReorderArgumentArray(ref object[] args, object state);
            System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        }

        enum BindingFlags
        {
            Default = 0,
            IgnoreCase = 1,
            DeclaredOnly = 2,
            Instance = 4,
            Static = 8,
            Public = 16,
            NonPublic = 32,
            FlattenHierarchy = 64,
            InvokeMethod = 256,
            CreateInstance = 512,
            GetField = 1024,
            SetField = 2048,
            GetProperty = 4096,
            SetProperty = 8192,
            PutDispProperty = 16384,
            PutRefDispProperty = 32768,
            ExactBinding = 65536,
            SuppressChangeType = 131072,
            OptionalParamBinding = 262144,
            IgnoreReturn = 16777216,
            DoNotWrapExceptions = 33554432,
        }

        enum CallingConventions
        {
            Standard = 1,
            VarArgs = 2,
            Any = 3,
            HasThis = 32,
            ExplicitThis = 64,
        }

        class ConstructorInfo : System.Reflection.MethodBase
        {
            static /*0x0*/ string ConstructorName;
            static /*0x8*/ string TypeConstructorName;

            static /*0x70ce640*/ ConstructorInfo();
            static /*0x70ce580*/ bool op_Equality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            static /*0x70ce5ac*/ bool op_Inequality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            /*0x70ce528*/ ConstructorInfo();
            /*0x70ce538*/ System.Reflection.MemberTypes get_MemberType();
            /*0x70ce540*/ object Invoke(object[] parameters);
            object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70ce560*/ bool Equals(object obj);
            /*0x70ce570*/ int GetHashCode();
        }

        class CustomAttributeFormatException : System.FormatException
        {
            /*0x70ce6dc*/ CustomAttributeFormatException();
            /*0x70ce73c*/ CustomAttributeFormatException(string message);
            /*0x70ce764*/ CustomAttributeFormatException(string message, System.Exception inner);
            /*0x70ce788*/ CustomAttributeFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class DefaultMemberAttribute : System.Attribute
        {
            /*0x10*/ string <MemberName>k__BackingField;

            /*0x70ce790*/ DefaultMemberAttribute(string memberName);
            /*0x70ce7c0*/ string get_MemberName();
        }

        enum EventAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            ReservedMask = 1024,
        }

        class EventInfo : System.Reflection.MemberInfo
        {
            /*0x10*/ System.Reflection.EventInfo.AddEventAdapter cached_add_event;

            static /*0x70ce91c*/ bool op_Equality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x70ce948*/ bool op_Inequality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x70ce984*/ System.Reflection.EventInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x70ce988*/ System.Reflection.EventInfo GetEventFromHandle(Mono.RuntimeEventHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x70ce7c8*/ EventInfo();
            /*0x70ce7d8*/ System.Reflection.MemberTypes get_MemberType();
            System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x70ce7e0*/ System.Type get_EventHandlerType();
            /*0x70ce8fc*/ bool Equals(object obj);
            /*0x70ce90c*/ int GetHashCode();

            class AddEventAdapter : System.MulticastDelegate
            {
                /*0x70cea08*/ AddEventAdapter(object object, nint method);
                /*0x70ceb14*/ void Invoke(object _this, System.Delegate dele);
            }
        }

        enum ExceptionHandlingClauseOptions
        {
            Clause = 0,
            Filter = 1,
            Finally = 2,
            Fault = 4,
        }

        enum FieldAttributes
        {
            FieldAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            InitOnly = 32,
            Literal = 64,
            NotSerialized = 128,
            SpecialName = 512,
            PinvokeImpl = 8192,
            RTSpecialName = 1024,
            HasFieldMarshal = 4096,
            HasDefault = 32768,
            HasFieldRVA = 256,
            ReservedMask = 38144,
        }

        class FieldInfo : System.Reflection.MemberInfo
        {
            static /*0x70cec18*/ bool op_Equality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x70cec44*/ bool op_Inequality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x70ced80*/ System.Reflection.FieldInfo internal_from_handle_type(nint field_handle, nint type_handle);
            static /*0x70ced84*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle);
            static /*0x70ceddc*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType);
            /*0x70ceb28*/ FieldInfo();
            /*0x70ceb30*/ System.Reflection.MemberTypes get_MemberType();
            /*0x380b6a0*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x380b9e8*/ System.Type get_FieldType();
            /*0x70ceb38*/ bool get_IsInitOnly();
            /*0x70ceb58*/ bool get_IsLiteral();
            /*0x70ceb78*/ bool get_IsNotSerialized();
            /*0x70ceb98*/ bool get_IsStatic();
            /*0x70cebb8*/ bool get_IsPrivate();
            /*0x70cebe0*/ bool get_IsPublic();
            System.RuntimeFieldHandle get_FieldHandle();
            /*0x70cec08*/ bool Equals(object obj);
            /*0x70cec10*/ int GetHashCode();
            /*0x380bb68*/ object GetValue(object obj);
            /*0x70cec80*/ void SetValue(object obj, object value);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x70cece8*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x70ced34*/ object GetRawConstantValue();
            /*0x70cee5c*/ int GetFieldOffset();
            /*0x70ceea8*/ System.Runtime.InteropServices.MarshalAsAttribute get_marshal_info();
            /*0x70ceeac*/ object[] GetPseudoCustomAttributes();
            /*0x70cf0e0*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
        }

        enum GenericParameterAttributes
        {
            None = 0,
            VarianceMask = 3,
            Covariant = 1,
            Contravariant = 2,
            SpecialConstraintMask = 28,
            ReferenceTypeConstraint = 4,
            NotNullableValueTypeConstraint = 8,
            DefaultConstructorConstraint = 16,
        }

        interface ICustomAttributeProvider
        {
            object[] GetCustomAttributes(bool inherit);
            /*0x380bba0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            bool IsDefined(System.Type attributeType, bool inherit);
        }

        interface IReflectableType
        {
            /*0x380b9e8*/ System.Reflection.TypeInfo GetTypeInfo();
        }

        struct InterfaceMapping
        {
            /*0x10*/ System.Type TargetType;
            /*0x18*/ System.Type InterfaceType;
            /*0x20*/ System.Reflection.MethodInfo[] TargetMethods;
            /*0x28*/ System.Reflection.MethodInfo[] InterfaceMethods;
        }

        class IntrospectionExtensions
        {
            static /*0x70cfa9c*/ System.Reflection.TypeInfo GetTypeInfo(System.Type type);
        }

        class InvalidFilterCriteriaException : System.ApplicationException
        {
            /*0x70cfc90*/ InvalidFilterCriteriaException();
            /*0x70cfcf0*/ InvalidFilterCriteriaException(string message);
            /*0x70cfd18*/ InvalidFilterCriteriaException(string message, System.Exception inner);
            /*0x70cfd3c*/ InvalidFilterCriteriaException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManifestResourceInfo
        {
            /*0x10*/ System.Reflection.Assembly <ReferencedAssembly>k__BackingField;
            /*0x18*/ string <FileName>k__BackingField;
            /*0x20*/ System.Reflection.ResourceLocation <ResourceLocation>k__BackingField;

            /*0x70cfd44*/ ManifestResourceInfo(System.Reflection.Assembly containingAssembly, string containingFileName, System.Reflection.ResourceLocation resourceLocation);
            /*0x70cfd9c*/ System.Reflection.Assembly get_ReferencedAssembly();
            /*0x70cfda4*/ string get_FileName();
            /*0x70cfdac*/ System.Reflection.ResourceLocation get_ResourceLocation();
        }

        class MemberFilter : System.MulticastDelegate
        {
            /*0x70cfdb4*/ MemberFilter(object object, nint method);
            /*0x70cfec0*/ bool Invoke(System.Reflection.MemberInfo m, object filterCriteria);
        }

        class MemberInfo : System.Reflection.ICustomAttributeProvider
        {
            static /*0x70cffb8*/ bool op_Equality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            static /*0x70d053c*/ bool op_Inequality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            /*0x70ce7d0*/ MemberInfo();
            /*0x380b6a0*/ System.Reflection.MemberTypes get_MemberType();
            /*0x380b9e8*/ string get_Name();
            /*0x380b9e8*/ System.Type get_DeclaringType();
            /*0x380b9e8*/ System.Type get_ReflectedType();
            /*0x70cfed4*/ System.Reflection.Module get_Module();
            bool IsDefined(System.Type attributeType, bool inherit);
            object[] GetCustomAttributes(bool inherit);
            /*0x380bba0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70cff80*/ int get_MetadataToken();
            /*0x70ce904*/ bool Equals(object obj);
            /*0x70ce914*/ int GetHashCode();
        }

        enum MemberTypes
        {
            Constructor = 1,
            Event = 2,
            Field = 4,
            Method = 8,
            Property = 16,
            TypeInfo = 32,
            Custom = 64,
            NestedType = 128,
            All = 191,
        }

        enum MethodAttributes
        {
            MemberAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            Final = 32,
            Virtual = 64,
            HideBySig = 128,
            CheckAccessOnOverride = 512,
            VtableLayoutMask = 256,
            ReuseSlot = 0,
            NewSlot = 256,
            Abstract = 1024,
            SpecialName = 2048,
            PinvokeImpl = 8192,
            UnmanagedExport = 8,
            RTSpecialName = 4096,
            HasSecurity = 16384,
            RequireSecObject = 32768,
            ReservedMask = 53248,
        }

        class MethodBase : System.Reflection.MemberInfo
        {
            static /*0x70d0320*/ bool op_Equality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x70d0308*/ bool op_Inequality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x70d0c5c*/ System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle);
            static /*0x70d0938*/ string ConstructParameters(System.Type[] parameterTypes, System.Reflection.CallingConventions callingConvention, bool serialization);
            /*0x70ce530*/ MethodBase();
            /*0x380b9e8*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x380b6a0*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x380b6a0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x70d0554*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x70d055c*/ bool get_IsAbstract();
            /*0x70d057c*/ bool get_IsConstructor();
            /*0x70d0640*/ bool get_IsFinal();
            /*0x70d0660*/ bool get_IsSpecialName();
            /*0x70d0620*/ bool get_IsStatic();
            /*0x70d0680*/ bool get_IsVirtual();
            /*0x70d06a0*/ bool get_IsPublic();
            /*0x70d06c8*/ bool get_IsGenericMethod();
            /*0x70d06d0*/ bool get_IsGenericMethodDefinition();
            /*0x70d06d8*/ System.Type[] GetGenericArguments();
            /*0x70d0724*/ bool get_ContainsGenericParameters();
            /*0x70d072c*/ object Invoke(object obj, object[] parameters);
            object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            System.RuntimeMethodHandle get_MethodHandle();
            /*0x70d074c*/ bool get_IsSecurityCritical();
            /*0x70ce568*/ bool Equals(object obj);
            /*0x70ce578*/ int GetHashCode();
            /*0x70d07dc*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x70d07ec*/ int GetParametersCount();
            /*0x70d0814*/ string FormatNameAndSig(bool serialization);
            /*0x70d0b30*/ System.Type[] GetParameterTypes();
            /*0x70d0c4c*/ System.Reflection.ParameterInfo[] GetParametersNoCopy();
        }

        enum MethodImplAttributes
        {
            CodeTypeMask = 3,
            IL = 0,
            Native = 1,
            OPTIL = 2,
            Runtime = 3,
            ManagedMask = 4,
            Unmanaged = 4,
            Managed = 0,
            ForwardRef = 16,
            PreserveSig = 128,
            InternalCall = 4096,
            Synchronized = 32,
            NoInlining = 8,
            AggressiveInlining = 256,
            NoOptimization = 64,
            MaxMethodImplVal = 65535,
            SecurityMitigations = 1024,
        }

        class MethodInfo : System.Reflection.MethodBase
        {
            static /*0x70d07b0*/ bool op_Equality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            static /*0x70d0774*/ bool op_Inequality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            /*0x70d0e24*/ MethodInfo();
            /*0x70d0e2c*/ System.Reflection.MemberTypes get_MemberType();
            /*0x70d0e34*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0x70d0e5c*/ System.Type get_ReturnType();
            /*0x70d0e84*/ System.Type[] GetGenericArguments();
            /*0x70d0ed0*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x70d0f1c*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] typeArguments);
            /*0x380b9e8*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0x70d0f68*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x70d0fb4*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x70d1000*/ bool Equals(object obj);
            /*0x70d1008*/ int GetHashCode();
            /*0x70d1010*/ int get_GenericParameterCount();
        }

        class Missing : System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Reflection.Missing Value;

            static /*0x70d1078*/ Missing();
            /*0x70d1038*/ Missing();
            /*0x70d1040*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Module
        {
            static System.Reflection.BindingFlags DefaultLookup = 28;
            static /*0x0*/ System.Reflection.TypeFilter FilterTypeName;
            static /*0x8*/ System.Reflection.TypeFilter FilterTypeNameIgnoreCase;

            static /*0x70d14f8*/ Module();
            static /*0x70d1238*/ bool op_Equality(System.Reflection.Module left, System.Reflection.Module right);
            static /*0x70d1270*/ bool FilterTypeNameImpl(System.Type cls, object filterCriteria);
            static /*0x70d1380*/ bool FilterTypeNameIgnoreCaseImpl(System.Type cls, object filterCriteria);
            /*0x70d10e0*/ Module();
            /*0x70d10e8*/ System.Reflection.Assembly get_Assembly();
            /*0x70d1110*/ System.Guid get_ModuleVersionId();
            /*0x70d1138*/ string get_ScopeName();
            /*0x70d1160*/ bool IsResource();
            /*0x70d1188*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70d11b0*/ object[] GetCustomAttributes(bool inherit);
            /*0x70d11d8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70d1200*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d1228*/ bool Equals(object o);
            /*0x70d1230*/ int GetHashCode();
            /*0x70d1264*/ string ToString();
            /*0x70d14c0*/ System.Guid GetModuleVersionId();
        }

        enum ParameterAttributes
        {
            None = 0,
            In = 1,
            Out = 2,
            Lcid = 4,
            Retval = 8,
            Optional = 16,
            HasDefault = 4096,
            HasFieldMarshal = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 61440,
        }

        class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.IObjectReference, System.Runtime.InteropServices._ParameterInfo
        {
            static int MetadataToken_ParamDef = 134217728;
            /*0x10*/ System.Reflection.ParameterAttributes AttrsImpl;
            /*0x18*/ System.Type ClassImpl;
            /*0x20*/ object DefaultValueImpl;
            /*0x28*/ System.Reflection.MemberInfo MemberImpl;
            /*0x30*/ string NameImpl;
            /*0x38*/ int PositionImpl;

            /*0x70d16e0*/ ParameterInfo();
            /*0x70d16e8*/ System.Reflection.ParameterAttributes get_Attributes();
            /*0x70d16f0*/ System.Reflection.MemberInfo get_Member();
            /*0x70d16f8*/ string get_Name();
            /*0x70d1700*/ System.Type get_ParameterType();
            /*0x70d1708*/ int get_Position();
            /*0x70d1710*/ bool get_IsIn();
            /*0x70d172c*/ bool get_IsOptional();
            /*0x70d1748*/ bool get_IsOut();
            /*0x70d1764*/ object get_DefaultValue();
            /*0x70d178c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70d1814*/ object[] GetCustomAttributes(bool inherit);
            /*0x70d18a0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70d19a4*/ System.Type[] GetRequiredCustomModifiers();
            /*0x70d1a30*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            /*0x70d1c8c*/ string ToString();
        }

        struct ParameterModifier
        {
            /*0x10*/ bool[] _byRef;
        }

        class Pointer : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ void* _ptr;
            /*0x18*/ System.Type _ptrType;

            static /*0x70d1d48*/ object Box(void* ptr, System.Type type);
            static /*0x70d1ebc*/ void* Unbox(object ptr);
            /*0x70d1d10*/ Pointer(void* ptr, System.Type ptrType);
            /*0x70d1f70*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum ProcessorArchitecture
        {
            None = 0,
            MSIL = 1,
            X86 = 2,
            IA64 = 3,
            Amd64 = 4,
            Arm = 5,
        }

        enum PropertyAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            HasDefault = 4096,
            Reserved2 = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 62464,
        }

        class PropertyInfo : System.Reflection.MemberInfo
        {
            static /*0x70d0510*/ bool op_Equality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            static /*0x70d04d4*/ bool op_Inequality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            /*0x70d1fa8*/ PropertyInfo();
            /*0x70d1fb0*/ System.Reflection.MemberTypes get_MemberType();
            /*0x380b9e8*/ System.Type get_PropertyType();
            /*0x380b9e8*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x380b128*/ bool get_CanRead();
            /*0x380b128*/ bool get_CanWrite();
            /*0x70d1fb8*/ System.Reflection.MethodInfo get_GetMethod();
            /*0x70d1fcc*/ System.Reflection.MethodInfo GetGetMethod();
            System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x70d1fe0*/ System.Reflection.MethodInfo get_SetMethod();
            /*0x70d1ff4*/ System.Reflection.MethodInfo GetSetMethod();
            System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x70d2008*/ object GetValue(object obj);
            /*0x70d201c*/ object GetValue(object obj, object[] index);
            object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70d203c*/ void SetValue(object obj, object value);
            /*0x70d2050*/ void SetValue(object obj, object value, object[] index);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70d2070*/ bool Equals(object obj);
            /*0x70d2078*/ int GetHashCode();
        }

        class ReflectionTypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
        {
            /*0x90*/ System.Type[] <Types>k__BackingField;
            /*0x98*/ System.Exception[] <LoaderExceptions>k__BackingField;

            /*0x70d2080*/ ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions);
            /*0x70d20d8*/ ReflectionTypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d2208*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d2324*/ System.Exception[] get_LoaderExceptions();
            /*0x70d232c*/ string get_Message();
            /*0x70d2470*/ string ToString();
            /*0x70d2334*/ string CreateString(bool isMessage);
        }

        enum ResourceLocation
        {
            ContainedInAnotherAssembly = 2,
            ContainedInManifestFile = 4,
            Embedded = 1,
        }

        class SignatureArrayType : System.Reflection.SignatureHasElementType
        {
            /*0x20*/ int _rank;
            /*0x24*/ bool _isMultiDim;

            /*0x70d2478*/ SignatureArrayType(System.Reflection.SignatureType elementType, int rank, bool isMultiDim);
            /*0x70d24ec*/ bool IsArrayImpl();
            /*0x70d24f4*/ bool IsByRefImpl();
            /*0x70d24fc*/ bool IsPointerImpl();
            /*0x70d2504*/ bool get_IsSZArray();
            /*0x70d2514*/ bool get_IsVariableBoundArray();
            /*0x70d251c*/ int GetArrayRank();
            /*0x70d2524*/ string get_Suffix();
        }

        class SignatureByRefType : System.Reflection.SignatureHasElementType
        {
            /*0x70d25ec*/ SignatureByRefType(System.Reflection.SignatureType elementType);
            /*0x70d2618*/ bool IsArrayImpl();
            /*0x70d2620*/ bool IsByRefImpl();
            /*0x70d2628*/ bool IsPointerImpl();
            /*0x70d2630*/ bool get_IsSZArray();
            /*0x70d2638*/ bool get_IsVariableBoundArray();
            /*0x70d2640*/ int GetArrayRank();
            /*0x70d268c*/ string get_Suffix();
        }

        class SignatureConstructedGenericType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Type _genericTypeDefinition;
            /*0x20*/ System.Type[] _genericTypeArguments;

            /*0x70d26cc*/ SignatureConstructedGenericType(System.Type genericTypeDefinition, System.Type[] typeArguments);
            /*0x70d28a8*/ bool get_IsGenericTypeDefinition();
            /*0x70d28b0*/ bool HasElementTypeImpl();
            /*0x70d28b8*/ bool IsArrayImpl();
            /*0x70d28c0*/ bool IsByRefImpl();
            /*0x70d28c8*/ bool IsPointerImpl();
            /*0x70d28d0*/ bool get_IsSZArray();
            /*0x70d28d8*/ bool get_IsVariableBoundArray();
            /*0x70d28e0*/ bool get_IsConstructedGenericType();
            /*0x70d28e8*/ bool get_IsGenericParameter();
            /*0x70d28f0*/ bool get_IsGenericMethodParameter();
            /*0x70d28f8*/ bool get_ContainsGenericParameters();
            /*0x70d296c*/ System.Reflection.SignatureType get_ElementType();
            /*0x70d2974*/ int GetArrayRank();
            /*0x70d29c0*/ System.Type GetGenericTypeDefinition();
            /*0x70d29c8*/ System.Type[] GetGenericArguments();
            /*0x70d29d8*/ System.Type[] get_GenericTypeArguments();
            /*0x70d2a50*/ int get_GenericParameterPosition();
            /*0x70d2a9c*/ string get_Name();
            /*0x70d2abc*/ string get_Namespace();
            /*0x70d2ae0*/ string ToString();
        }

        class SignatureHasElementType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Reflection.SignatureType _elementType;

            /*0x70d24c0*/ SignatureHasElementType(System.Reflection.SignatureType elementType);
            /*0x70d2c04*/ bool get_IsGenericTypeDefinition();
            /*0x70d2c0c*/ bool HasElementTypeImpl();
            /*0x380b128*/ bool IsArrayImpl();
            /*0x380b128*/ bool IsByRefImpl();
            /*0x380b128*/ bool IsPointerImpl();
            /*0x380b128*/ bool get_IsSZArray();
            /*0x380b128*/ bool get_IsVariableBoundArray();
            /*0x70d2c14*/ bool get_IsConstructedGenericType();
            /*0x70d2c1c*/ bool get_IsGenericParameter();
            /*0x70d2c24*/ bool get_IsGenericMethodParameter();
            /*0x70d2c2c*/ bool get_ContainsGenericParameters();
            /*0x70d2c50*/ System.Reflection.SignatureType get_ElementType();
            /*0x380b6a0*/ int GetArrayRank();
            /*0x70d2c58*/ System.Type GetGenericTypeDefinition();
            /*0x70d2ca4*/ System.Type[] GetGenericArguments();
            /*0x70d2d30*/ System.Type[] get_GenericTypeArguments();
            /*0x70d2dbc*/ int get_GenericParameterPosition();
            /*0x70d2e08*/ string get_Name();
            /*0x70d2e5c*/ string get_Namespace();
            /*0x70d2e80*/ string ToString();
            /*0x380b9e8*/ string get_Suffix();
        }

        class SignaturePointerType : System.Reflection.SignatureHasElementType
        {
            /*0x70d2ed4*/ SignaturePointerType(System.Reflection.SignatureType elementType);
            /*0x70d2f00*/ bool IsArrayImpl();
            /*0x70d2f08*/ bool IsByRefImpl();
            /*0x70d2f10*/ bool IsPointerImpl();
            /*0x70d2f18*/ bool get_IsSZArray();
            /*0x70d2f20*/ bool get_IsVariableBoundArray();
            /*0x70d2f28*/ int GetArrayRank();
            /*0x70d2f74*/ string get_Suffix();
        }

        class SignatureType : System.Type
        {
            /*0x70d2874*/ SignatureType();
            /*0x70d2fb4*/ bool get_IsSignatureType();
            /*0x380b128*/ bool HasElementTypeImpl();
            /*0x380b128*/ bool IsArrayImpl();
            /*0x380b128*/ bool get_IsSZArray();
            /*0x380b128*/ bool get_IsVariableBoundArray();
            /*0x380b128*/ bool IsByRefImpl();
            /*0x380b128*/ bool IsPointerImpl();
            /*0x70d2fbc*/ bool get_IsGenericType();
            /*0x380b128*/ bool get_IsGenericTypeDefinition();
            /*0x380b128*/ bool get_IsConstructedGenericType();
            /*0x380b128*/ bool get_IsGenericParameter();
            /*0x380b128*/ bool get_IsGenericMethodParameter();
            /*0x380b128*/ bool get_ContainsGenericParameters();
            /*0x70d2ffc*/ System.Reflection.MemberTypes get_MemberType();
            /*0x70d3004*/ System.Type MakeArrayType();
            /*0x70d3074*/ System.Type MakeArrayType(int rank);
            /*0x70d3124*/ System.Type MakeByRefType();
            /*0x70d3188*/ System.Type MakePointerType();
            /*0x70d31ec*/ System.Type MakeGenericType(System.Type[] typeArguments);
            /*0x70d3238*/ System.Type GetElementType();
            /*0x380b6a0*/ int GetArrayRank();
            /*0x380b9e8*/ System.Type GetGenericTypeDefinition();
            /*0x380b9e8*/ System.Type[] get_GenericTypeArguments();
            /*0x380b9e8*/ System.Type[] GetGenericArguments();
            /*0x380b6a0*/ int get_GenericParameterPosition();
            /*0x380b9e8*/ System.Reflection.SignatureType get_ElementType();
            /*0x70d3248*/ System.Type get_UnderlyingSystemType();
            /*0x380b9e8*/ string get_Name();
            /*0x380b9e8*/ string get_Namespace();
            /*0x70d324c*/ string get_FullName();
            /*0x70d3254*/ string get_AssemblyQualifiedName();
            /*0x380b9e8*/ string ToString();
            /*0x70d325c*/ System.Reflection.Assembly get_Assembly();
            /*0x70d32a8*/ System.Reflection.Module get_Module();
            /*0x70d32f4*/ System.Type get_ReflectedType();
            /*0x70d3340*/ System.Type get_BaseType();
            /*0x70d338c*/ System.Type[] GetInterfaces();
            /*0x70d33d8*/ bool IsAssignableFrom(System.Type c);
            /*0x70d3424*/ int get_MetadataToken();
            /*0x70d3470*/ System.Type get_DeclaringType();
            /*0x70d34bc*/ System.Reflection.MethodBase get_DeclaringMethod();
            /*0x70d3508*/ System.Type[] GetGenericParameterConstraints();
            /*0x70d3554*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
            /*0x70d35a0*/ bool IsEnumDefined(object value);
            /*0x70d35ec*/ string GetEnumName(object value);
            /*0x70d3638*/ string[] GetEnumNames();
            /*0x70d3684*/ System.Type GetEnumUnderlyingType();
            /*0x70d36d0*/ System.Array GetEnumValues();
            /*0x70d371c*/ System.Guid get_GUID();
            /*0x70d3768*/ System.TypeCode GetTypeCodeImpl();
            /*0x70d37b4*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0x70d3800*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0x70d384c*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d3898*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d38e4*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0x70d3930*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
            /*0x70d397c*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0x70d39c8*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d3a14*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0x70d3a60*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0x70d3aac*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70d3af8*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70d3b44*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d3b90*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0x70d3bdc*/ object[] GetCustomAttributes(bool inherit);
            /*0x70d3c28*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70d3c74*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70d3cc0*/ System.Type GetInterface(string name, bool ignoreCase);
            /*0x70d3d0c*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70d3d58*/ bool IsCOMObjectImpl();
            /*0x70d3da4*/ bool IsPrimitiveImpl();
            /*0x70d3df0*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType);
            /*0x70d3e3c*/ bool IsContextfulImpl();
            /*0x70d3e88*/ bool get_IsEnum();
            /*0x70d3ed4*/ bool IsEquivalentTo(System.Type other);
            /*0x70d3f20*/ bool IsInstanceOfType(object o);
            /*0x70d3f6c*/ bool IsMarshalByRefImpl();
            /*0x70d3fb8*/ bool get_IsSerializable();
            /*0x70d4004*/ bool IsSubclassOf(System.Type c);
            /*0x70d4050*/ bool IsValueTypeImpl();
            /*0x70d409c*/ System.RuntimeTypeHandle get_TypeHandle();
        }

        class SignatureTypeExtensions
        {
            static /*0x70d40e8*/ bool MatchesParameterTypeExactly(System.Type pattern, System.Reflection.ParameterInfo parameter);
            static /*0x70d419c*/ bool MatchesExactly(System.Reflection.SignatureType pattern, System.Type actual);
            static /*0x70d453c*/ System.Type TryResolveAgainstGenericMethod(System.Reflection.SignatureType signatureType, System.Reflection.MethodInfo genericMethod);
            static /*0x70d4574*/ System.Type TryResolve(System.Reflection.SignatureType signatureType, System.Type[] genericMethodParameters);
            static /*0x70d495c*/ System.Type TryMakeArrayType(System.Type type);
            static /*0x70d49f8*/ System.Type TryMakeArrayType(System.Type type, int rank);
            static /*0x70d4a94*/ System.Type TryMakeByRefType(System.Type type);
            static /*0x70d4b30*/ System.Type TryMakePointerType(System.Type type);
            static /*0x70d4bcc*/ System.Type TryMakeGenericType(System.Type type, System.Type[] instantiation);
        }

        class TargetException : System.ApplicationException
        {
            /*0x70d4c68*/ TargetException();
            /*0x70d4c94*/ TargetException(string message);
            /*0x70d4cbc*/ TargetException(string message, System.Exception inner);
            /*0x70d4ce0*/ TargetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetInvocationException : System.ApplicationException
        {
            /*0x70d4ce8*/ TargetInvocationException(System.Exception inner);
            /*0x70d4d54*/ TargetInvocationException(string message, System.Exception inner);
            /*0x70d4d78*/ TargetInvocationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetParameterCountException : System.ApplicationException
        {
            /*0x70d4d80*/ TargetParameterCountException();
            /*0x70d4ddc*/ TargetParameterCountException(string message);
            /*0x70d4e00*/ TargetParameterCountException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum TypeAttributes
        {
            VisibilityMask = 7,
            NotPublic = 0,
            Public = 1,
            NestedPublic = 2,
            NestedPrivate = 3,
            NestedFamily = 4,
            NestedAssembly = 5,
            NestedFamANDAssem = 6,
            NestedFamORAssem = 7,
            LayoutMask = 24,
            AutoLayout = 0,
            SequentialLayout = 8,
            ExplicitLayout = 16,
            ClassSemanticsMask = 32,
            Class = 0,
            Interface = 32,
            Abstract = 128,
            Sealed = 256,
            SpecialName = 1024,
            Import = 4096,
            Serializable = 8192,
            WindowsRuntime = 16384,
            StringFormatMask = 196608,
            AnsiClass = 0,
            UnicodeClass = 65536,
            AutoClass = 131072,
            CustomFormatClass = 196608,
            CustomFormatMask = 12582912,
            BeforeFieldInit = 1048576,
            RTSpecialName = 2048,
            HasSecurity = 262144,
            ReservedMask = 264192,
        }

        class TypeDelegator : System.Reflection.TypeInfo
        {
            /*0x18*/ System.Type typeImpl;

            /*0x70cfbf0*/ TypeDelegator(System.Type delegatingType);
            /*0x70d4e08*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);
            /*0x70d4ec8*/ System.Guid get_GUID();
            /*0x70d4eec*/ int get_MetadataToken();
            /*0x70d4f10*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0x70d4f3c*/ System.Reflection.Module get_Module();
            /*0x70d4f60*/ System.Reflection.Assembly get_Assembly();
            /*0x70d4f84*/ System.RuntimeTypeHandle get_TypeHandle();
            /*0x70d4fa8*/ string get_Name();
            /*0x70d4fc8*/ string get_FullName();
            /*0x70d4fec*/ string get_Namespace();
            /*0x70d5010*/ string get_AssemblyQualifiedName();
            /*0x70d5034*/ System.Type get_BaseType();
            /*0x70d5058*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70d5074*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0x70d5098*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70d50c4*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0x70d50e8*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d510c*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0x70d5130*/ System.Type GetInterface(string name, bool ignoreCase);
            /*0x70d5158*/ System.Type[] GetInterfaces();
            /*0x70d517c*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d51a0*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x70d526c*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0x70d5290*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x70d52b4*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0x70d52d8*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
            /*0x70d52fc*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0x70d5318*/ bool get_IsSZArray();
            /*0x70d533c*/ bool IsArrayImpl();
            /*0x70d5358*/ bool IsPrimitiveImpl();
            /*0x70d5374*/ bool IsByRefImpl();
            /*0x70d5390*/ bool get_IsGenericMethodParameter();
            /*0x70d53b4*/ bool IsPointerImpl();
            /*0x70d53d0*/ bool IsValueTypeImpl();
            /*0x70d53ec*/ bool IsCOMObjectImpl();
            /*0x70d5408*/ bool get_IsConstructedGenericType();
            /*0x70d542c*/ bool get_IsCollectible();
            /*0x70d5450*/ System.Type GetElementType();
            /*0x70d5474*/ bool HasElementTypeImpl();
            /*0x70d5490*/ System.Type get_UnderlyingSystemType();
            /*0x70d54b4*/ object[] GetCustomAttributes(bool inherit);
            /*0x70d54dc*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70d5504*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70d5528*/ System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType);
        }

        class TypeFilter : System.MulticastDelegate
        {
            /*0x70d15d4*/ TypeFilter(object object, nint method);
            /*0x70d5568*/ bool Invoke(System.Type m, object filterCriteria);
        }

        class TypeInfo : System.Type, System.Reflection.IReflectableType
        {
            /*0x70d4e94*/ TypeInfo();
            /*0x70d557c*/ System.Reflection.TypeInfo System.Reflection.IReflectableType.GetTypeInfo();
            /*0x70d5580*/ System.Type AsType();
            /*0x70d5584*/ System.Reflection.FieldInfo GetDeclaredField(string name);
            /*0x70d5598*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetDeclaredMethods(string name);
            /*0x70d5664*/ System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> get_DeclaredConstructors();
            /*0x70d5678*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> get_DeclaredMethods();
            /*0x70d568c*/ System.Collections.Generic.IEnumerable<System.Type> get_ImplementedInterfaces();
            /*0x70d569c*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);

            class <GetDeclaredMethods>d__10 : System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Reflection.MethodInfo <>2__current;
                /*0x20*/ int <>l__initialThreadId;
                /*0x28*/ System.Reflection.TypeInfo <>4__this;
                /*0x30*/ string name;
                /*0x38*/ string <>3__name;
                /*0x40*/ System.Reflection.MethodInfo[] <>7__wrap1;
                /*0x48*/ int <>7__wrap2;

                /*0x70d5630*/ <GetDeclaredMethods>d__10(int <>1__state);
                /*0x70d580c*/ void System.IDisposable.Dispose();
                /*0x70d5810*/ bool MoveNext();
                /*0x70d5910*/ System.Reflection.MethodInfo System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>.get_Current();
                /*0x70d5918*/ void System.Collections.IEnumerator.Reset();
                /*0x70d5950*/ object System.Collections.IEnumerator.get_Current();
                /*0x70d5958*/ System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo> System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>.GetEnumerator();
                /*0x70d5a0c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            }
        }

        class RuntimeReflectionExtensions
        {
            static /*0x70d5a10*/ System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> GetRuntimeFields(System.Type type);
            static /*0x70d5ab4*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetRuntimeMethods(System.Type type);
            static /*0x70d5b58*/ System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRuntimeProperties(System.Type type);
            static /*0x70d5bfc*/ System.Reflection.FieldInfo GetRuntimeField(System.Type type, string name);
            static /*0x70d5ca4*/ System.Reflection.MethodInfo GetRuntimeMethod(System.Type type, string name, System.Type[] parameters);
            static /*0x70d5d54*/ System.Reflection.PropertyInfo GetRuntimeProperty(System.Type type, string name);
        }

        struct CustomAttributeNamedArgument
        {
            /*0x10*/ System.Reflection.CustomAttributeTypedArgument <TypedValue>k__BackingField;
            /*0x20*/ bool <IsField>k__BackingField;
            /*0x28*/ string <MemberName>k__BackingField;
            /*0x30*/ System.Type _attributeType;
            /*0x38*/ System.Reflection.MemberInfo _lazyMemberInfo;

            static /*0x70d63ec*/ bool op_Equality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            static /*0x70d646c*/ bool op_Inequality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            /*0x70d5dfc*/ CustomAttributeNamedArgument(System.Type attributeType, string memberName, bool isField, System.Reflection.CustomAttributeTypedArgument typedValue);
            /*0x70d5e6c*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, object value);
            /*0x70d60b8*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument);
            /*0x70d6204*/ System.Reflection.CustomAttributeTypedArgument get_TypedValue();
            /*0x70d6210*/ bool get_IsField();
            /*0x70d6218*/ string get_MemberName();
            /*0x70d6220*/ System.Reflection.MemberInfo get_MemberInfo();
            /*0x70d6308*/ bool Equals(object obj);
            /*0x70d6380*/ int GetHashCode();
            /*0x70d64f0*/ string ToString();
        }

        struct CustomAttributeTypedArgument
        {
            /*0x10*/ System.Type <ArgumentType>k__BackingField;
            /*0x18*/ object <Value>k__BackingField;

            static /*0x70d72d8*/ bool op_Equality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0x70d7350*/ bool op_Inequality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0x70d716c*/ object CanonicalizeValue(object value);
            /*0x70d70d4*/ CustomAttributeTypedArgument(object value);
            /*0x70cf788*/ CustomAttributeTypedArgument(System.Type argumentType, object value);
            /*0x70d71f4*/ System.Type get_ArgumentType();
            /*0x70d71fc*/ object get_Value();
            /*0x70d7204*/ bool Equals(object obj);
            /*0x70d7274*/ int GetHashCode();
            /*0x70d73cc*/ string ToString();
            /*0x70d67fc*/ string ToString(bool typed);
        }

        class MissingMetadataException : System.TypeAccessException
        {
            /*0x70d73d4*/ MissingMetadataException();
        }

        class CustomAttributeExtensions
        {
            static /*0x70d73dc*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
            static /*0x70d73e4*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
            static /*0x3907c14*/ T GetCustomAttribute<T>(System.Reflection.Assembly element);
            static /*0x3907c14*/ T GetCustomAttribute<T>(System.Reflection.MemberInfo element);
            static /*0x70d73ec*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
            static /*0x3907c14*/ T GetCustomAttribute<T>(System.Reflection.MemberInfo element, bool inherit);
            static /*0x70d73f8*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element);
            static /*0x70d7400*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
            static /*0x70d7408*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType);
            static /*0x382eaf0*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.Assembly element);
            static /*0x382eaf0*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element);
            static /*0x70d7410*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
            static /*0x382fccc*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element, bool inherit);
            static /*0x70d741c*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        }

        enum CorElementType
        {
            End = 0,
            Void = 1,
            Boolean = 2,
            Char = 3,
            I1 = 4,
            U1 = 5,
            I2 = 6,
            U2 = 7,
            I4 = 8,
            U4 = 9,
            I8 = 10,
            U8 = 11,
            R4 = 12,
            R8 = 13,
            String = 14,
            Ptr = 15,
            ByRef = 16,
            ValueType = 17,
            Class = 18,
            Var = 19,
            Array = 20,
            GenericInst = 21,
            TypedByRef = 22,
            I = 24,
            U = 25,
            FnPtr = 27,
            Object = 28,
            SzArray = 29,
            MVar = 30,
            CModReqd = 31,
            CModOpt = 32,
            Internal = 33,
            Max = 34,
            Modifier = 64,
            Sentinel = 65,
            Pinned = 69,
            ELEMENT_TYPE_END = 0,
            ELEMENT_TYPE_VOID = 1,
            ELEMENT_TYPE_BOOLEAN = 2,
            ELEMENT_TYPE_CHAR = 3,
            ELEMENT_TYPE_I1 = 4,
            ELEMENT_TYPE_U1 = 5,
            ELEMENT_TYPE_I2 = 6,
            ELEMENT_TYPE_U2 = 7,
            ELEMENT_TYPE_I4 = 8,
            ELEMENT_TYPE_U4 = 9,
            ELEMENT_TYPE_I8 = 10,
            ELEMENT_TYPE_U8 = 11,
            ELEMENT_TYPE_R4 = 12,
            ELEMENT_TYPE_R8 = 13,
            ELEMENT_TYPE_STRING = 14,
            ELEMENT_TYPE_PTR = 15,
            ELEMENT_TYPE_BYREF = 16,
            ELEMENT_TYPE_VALUETYPE = 17,
            ELEMENT_TYPE_CLASS = 18,
            ELEMENT_TYPE_VAR = 19,
            ELEMENT_TYPE_ARRAY = 20,
            ELEMENT_TYPE_GENERICINST = 21,
            ELEMENT_TYPE_TYPEDBYREF = 22,
            ELEMENT_TYPE_I = 24,
            ELEMENT_TYPE_U = 25,
            ELEMENT_TYPE_FNPTR = 27,
            ELEMENT_TYPE_OBJECT = 28,
            ELEMENT_TYPE_SZARRAY = 29,
            ELEMENT_TYPE_MVAR = 30,
            ELEMENT_TYPE_CMOD_REQD = 31,
            ELEMENT_TYPE_CMOD_OPT = 32,
            ELEMENT_TYPE_INTERNAL = 33,
            ELEMENT_TYPE_MAX = 34,
            ELEMENT_TYPE_MODIFIER = 64,
            ELEMENT_TYPE_SENTINEL = 65,
            ELEMENT_TYPE_PINNED = 69,
        }

        enum PInvokeAttributes
        {
            NoMangle = 1,
            CharSetMask = 6,
            CharSetNotSpec = 0,
            CharSetAnsi = 2,
            CharSetUnicode = 4,
            CharSetAuto = 6,
            BestFitUseAssem = 0,
            BestFitEnabled = 16,
            BestFitDisabled = 32,
            BestFitMask = 48,
            ThrowOnUnmappableCharUseAssem = 0,
            ThrowOnUnmappableCharEnabled = 4096,
            ThrowOnUnmappableCharDisabled = 8192,
            ThrowOnUnmappableCharMask = 12288,
            SupportsLastError = 64,
            CallConvMask = 1792,
            CallConvWinapi = 256,
            CallConvCdecl = 512,
            CallConvStdcall = 768,
            CallConvThiscall = 1024,
            CallConvFastcall = 1280,
            MaxValue = 65535,
        }

        class MemberInfoSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
        {
            /*0x10*/ string m_memberName;
            /*0x18*/ System.RuntimeType m_reflectedType;
            /*0x20*/ string m_signature;
            /*0x28*/ string m_signature2;
            /*0x30*/ System.Reflection.MemberTypes m_memberType;
            /*0x38*/ System.Runtime.Serialization.SerializationInfo m_info;

            static /*0x70d7424*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, System.Reflection.MemberTypes type);
            static /*0x70d7434*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, string signature2, System.Reflection.MemberTypes type, System.Type[] genericArguments);
            /*0x70d772c*/ MemberInfoSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d7a94*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d7aec*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
        }

        class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Assembly
        {
            static /*0x70d887c*/ System.Reflection.Assembly GetAssembly(System.Type type);
            static /*0x70d8e0c*/ System.Reflection.Assembly LoadFrom(string assemblyFile, bool refOnly, ref System.Threading.StackCrawlMark stackMark);
            static /*0x70d8e14*/ System.Reflection.Assembly Load(string assemblyString);
            static /*0x70d8e3c*/ System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString);
            static /*0x70d8e84*/ System.Reflection.Assembly LoadWithPartialName(string partialName);
            static /*0x70d8e98*/ System.Reflection.Assembly load_with_partial_name(string name, System.Security.Policy.Evidence e);
            static /*0x70d8e90*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence);
            static /*0x70d8e9c*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence, bool oldBehavior);
            static /*0x70d8f3c*/ System.Reflection.Assembly GetExecutingAssembly();
            static /*0x70d8f7c*/ System.Reflection.Assembly GetCallingAssembly();
            static /*0x70d8f80*/ nint InternalGetReferencedAssemblies(System.Reflection.Assembly module);
            static /*0x70d8fbc*/ System.Reflection.AssemblyName[] GetReferencedAssemblies(System.Reflection.Assembly module);
            static /*0x70d95cc*/ System.Exception CreateNIE();
            static /*0x70d96d0*/ bool op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            static /*0x70d8db4*/ bool op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            /*0x70d9720*/ Assembly();
            /*0x70d8398*/ string get_CodeBase();
            /*0x70d83d0*/ string get_FullName();
            /*0x70d8408*/ nint get_MonoAssembly();
            /*0x70d8440*/ string get_Location();
            /*0x70d8478*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d84b0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70d84e8*/ object[] GetCustomAttributes(bool inherit);
            /*0x70d8520*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70d8558*/ System.IO.Stream GetManifestResourceStream(string name);
            /*0x70d8590*/ System.IO.Stream GetManifestResourceStream(System.Type type, string name, bool skipSecurityCheck, ref System.Threading.StackCrawlMark stackMark);
            /*0x70d8710*/ System.IO.Stream GetManifestResourceStream(string name, ref System.Threading.StackCrawlMark stackMark, bool skipSecurityCheck);
            /*0x70d8720*/ string GetSimpleName();
            /*0x70d874c*/ byte[] GetPublicKey();
            /*0x70d8778*/ System.Version GetVersion();
            /*0x70d87a4*/ System.Reflection.AssemblyNameFlags GetFlags();
            /*0x70d87d0*/ System.Type[] GetTypes(bool exportedOnly);
            /*0x70d87d8*/ System.Type[] GetTypes();
            /*0x70d87ec*/ System.Type GetType(string name, bool throwOnError);
            /*0x70d8804*/ System.Type GetType(string name);
            /*0x70d881c*/ System.Type InternalGetType(System.Reflection.Module module, string name, bool throwOnError, bool ignoreCase);
            /*0x70d8828*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x70d8860*/ System.Reflection.AssemblyName GetName();
            /*0x70d8874*/ string ToString();
            /*0x70d891c*/ System.Reflection.RuntimeAssembly InternalGetSatelliteAssembly(string name, System.Globalization.CultureInfo culture, System.Version version, bool throwOnFileNotFound, ref System.Threading.StackCrawlMark stackMark);
            /*0x70d8f04*/ System.Reflection.Module[] GetModulesInternal();
            /*0x70d8f84*/ string[] GetManifestResourceNames();
            /*0x70d954c*/ System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName);
            /*0x70d9584*/ bool get_ReflectionOnly();
            /*0x70d95bc*/ int GetHashCode();
            /*0x70d95c4*/ bool Equals(object o);
            /*0x70d9638*/ bool get_IsFullyTrusted();
            /*0x70d9640*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x70d9664*/ System.Reflection.Module GetModule(string name);
            /*0x70d9688*/ System.Reflection.AssemblyName[] GetReferencedAssemblies();
            /*0x70d96ac*/ System.Reflection.Module[] GetModules(bool getResourceModules);

            class ResolveEventHolder
            {
                /*0x70d9728*/ ResolveEventHolder();
            }
        }

        class AssemblyName : System.ICloneable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.InteropServices._AssemblyName
        {
            /*0x10*/ string name;
            /*0x18*/ string codebase;
            /*0x20*/ int major;
            /*0x24*/ int minor;
            /*0x28*/ int build;
            /*0x2c*/ int revision;
            /*0x30*/ System.Globalization.CultureInfo cultureinfo;
            /*0x38*/ System.Reflection.AssemblyNameFlags flags;
            /*0x3c*/ System.Configuration.Assemblies.AssemblyHashAlgorithm hashalg;
            /*0x40*/ System.Reflection.StrongNameKeyPair keypair;
            /*0x48*/ byte[] publicKey;
            /*0x50*/ byte[] keyToken;
            /*0x58*/ System.Configuration.Assemblies.AssemblyVersionCompatibility versioncompat;
            /*0x60*/ System.Version version;
            /*0x68*/ System.Reflection.ProcessorArchitecture processor_architecture;
            /*0x6c*/ System.Reflection.AssemblyContentType contentType;

            static /*0x70d9730*/ bool ParseAssemblyName(nint name, ref Mono.MonoAssemblyName aname, ref bool is_version_definited, ref bool is_token_defined);
            static /*0x70da5fc*/ void get_public_token(byte* token, byte* pubkey, int len);
            static /*0x70daa24*/ Mono.MonoAssemblyName* GetNativeName(nint assembly_ptr);
            static /*0x70daa28*/ System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, bool fillCodebase);
            /*0x70d8d24*/ AssemblyName();
            /*0x70d9734*/ AssemblyName(string assemblyName);
            /*0x70d99bc*/ AssemblyName(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
            /*0x70d9f50*/ string get_Name();
            /*0x70d9f58*/ void set_Name(string value);
            /*0x70d9f60*/ System.Globalization.CultureInfo get_CultureInfo();
            /*0x70d9f68*/ void set_CultureInfo(System.Globalization.CultureInfo value);
            /*0x70d9f70*/ System.Reflection.AssemblyNameFlags get_Flags();
            /*0x70d9f78*/ void set_Flags(System.Reflection.AssemblyNameFlags value);
            /*0x70d9f80*/ string get_FullName();
            /*0x70da3bc*/ System.Version get_Version();
            /*0x70d8d64*/ void set_Version(System.Version value);
            /*0x70da3c4*/ string ToString();
            /*0x70da3ec*/ byte[] GetPublicKey();
            /*0x70da3f4*/ byte[] GetPublicKeyToken();
            /*0x70da4ec*/ bool get_IsPublicKeyValid();
            /*0x70da2d8*/ byte[] InternalGetPublicKeyToken();
            /*0x70da570*/ byte[] ComputePublicKeyToken();
            /*0x70d8d44*/ void SetPublicKey(byte[] publicKey);
            /*0x70da600*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70da92c*/ object Clone();
            /*0x70daa1c*/ void OnDeserialization(object sender);
            /*0x70d9278*/ void FillName(Mono.MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef);
        }

        class CustomAttributeData
        {
            /*0x10*/ System.Reflection.ConstructorInfo ctorInfo;
            /*0x18*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs;
            /*0x20*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs;
            /*0x28*/ System.Reflection.CustomAttributeData.LazyCAttrData lazyData;

            static /*0x70dabc8*/ void ResolveArgumentsInternal(System.Reflection.ConstructorInfo ctor, System.Reflection.Assembly assembly, nint data, uint data_length, ref object[] ctorArgs, ref object[] namedArgs);
            static /*0x70dadec*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Assembly target);
            static /*0x70dae48*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.MemberInfo target);
            static /*0x70daea4*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesInternal(System.RuntimeType target);
            static /*0x70daf00*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target);
            static /*0x70daf5c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target);
            static /*0x382eaf0*/ T[] UnboxValues<T>(object[] values);
            /*0x70daaf0*/ CustomAttributeData();
            /*0x70daaf8*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Reflection.Assembly assembly, nint data, uint data_length);
            /*0x70cf67c*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo);
            /*0x70cfa3c*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs, System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs);
            /*0x70dabcc*/ void ResolveArguments();
            /*0x70dadb4*/ System.Reflection.ConstructorInfo get_Constructor();
            /*0x70dadbc*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> get_ConstructorArguments();
            /*0x70dadd4*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> get_NamedArguments();
            /*0x70dafb8*/ System.Type get_AttributeType();
            /*0x70dafd8*/ string ToString();
            /*0x70db558*/ bool Equals(object obj);
            /*0x70dbbd0*/ int GetHashCode();

            class LazyCAttrData
            {
                /*0x10*/ System.Reflection.Assembly assembly;
                /*0x18*/ nint data;
                /*0x20*/ uint data_length;

                /*0x70dabc0*/ LazyCAttrData();
            }
        }

        class ExceptionHandlingClause
        {
            /*0x10*/ System.Type catch_type;
            /*0x18*/ int filter_offset;
            /*0x1c*/ System.Reflection.ExceptionHandlingClauseOptions flags;
            /*0x20*/ int try_offset;
            /*0x24*/ int try_length;
            /*0x28*/ int handler_offset;
            /*0x2c*/ int handler_length;

            /*0x70dbec8*/ ExceptionHandlingClause();
            /*0x70dbed0*/ string ToString();
        }

        class LocalVariableInfo
        {
            /*0x10*/ System.Type type;
            /*0x18*/ bool is_pinned;
            /*0x1a*/ ushort position;

            /*0x70dc1b0*/ LocalVariableInfo();
            /*0x70dc1b8*/ int get_LocalIndex();
            /*0x70dc1c0*/ System.Type get_LocalType();
            /*0x70dc1c8*/ string ToString();
        }

        class RuntimeAssembly : System.Reflection.Assembly
        {
            /*0x10*/ nint _mono_assembly;
            /*0x18*/ object _evidence;
            /*0x20*/ System.Reflection.Assembly.ResolveEventHolder resolve_event_holder;
            /*0x28*/ object _minimum;
            /*0x30*/ object _optional;
            /*0x38*/ object _refuse;
            /*0x40*/ object _granted;
            /*0x48*/ object _denied;
            /*0x50*/ bool fromByteArray;
            /*0x58*/ string assemblyName;

            static /*0x70dc370*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(string partialName, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x70dc3f8*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.Reflection.AssemblyName an, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x70dc7a8*/ byte[] GetAotId();
            static /*0x70dc804*/ string get_code_base(System.Reflection.Assembly a, bool escaped);
            static /*0x70dc810*/ string get_fullname(System.Reflection.Assembly a);
            static /*0x70dc800*/ bool GetAotIdInternal(byte[] aotid);
            static /*0x70dc818*/ string GetCodeBase(System.Reflection.Assembly a, bool escaped);
            /*0x70dc27c*/ RuntimeAssembly();
            /*0x70dc2e8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70dc420*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x70dc428*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x70dc4e0*/ System.Reflection.Module GetModule(string name);
            /*0x70dc608*/ System.Reflection.AssemblyName[] GetReferencedAssemblies();
            /*0x70dc60c*/ System.Reflection.Module[] GetModules(bool getResourceModules);
            /*0x70dc80c*/ string get_location();
            /*0x70dc814*/ bool get_ReflectionOnly();
            /*0x70dc820*/ string get_CodeBase();
            /*0x70dc828*/ string get_FullName();
            /*0x70dc82c*/ nint get_MonoAssembly();
            /*0x70dc834*/ string get_Location();
            /*0x70dc858*/ bool GetManifestResourceInfoInternal(string name, System.Reflection.ManifestResourceInfo info);
            /*0x70dc85c*/ System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName);
            /*0x70dc95c*/ string[] GetManifestResourceNames();
            /*0x70dc960*/ nint GetManifestResourceInternal(string name, ref int size, ref System.Reflection.Module module);
            /*0x70dc964*/ System.IO.Stream GetManifestResourceStream(string name);
            /*0x70dccf4*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70dcd64*/ object[] GetCustomAttributes(bool inherit);
            /*0x70dcdcc*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70dce3c*/ System.Reflection.Module[] GetModulesInternal();
            /*0x70dce40*/ int GetHashCode();
            /*0x70dce48*/ bool Equals(object o);
            /*0x70dcee4*/ string ToString();

            class UnmanagedMemoryStreamForModule : System.IO.UnmanagedMemoryStream
            {
                /*0x68*/ System.Reflection.Module module;

                /*0x70dccc4*/ UnmanagedMemoryStreamForModule(byte* pointer, long length, System.Reflection.Module module);
                /*0x70dcf2c*/ void Dispose(bool disposing);
            }
        }

        struct MonoEventInfo
        {
            /*0x10*/ System.Type declaring_type;
            /*0x18*/ System.Type reflected_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo add_method;
            /*0x30*/ System.Reflection.MethodInfo remove_method;
            /*0x38*/ System.Reflection.MethodInfo raise_method;
            /*0x40*/ System.Reflection.EventAttributes attrs;
            /*0x48*/ System.Reflection.MethodInfo[] other_methods;
        }

        class RuntimeEventInfo : System.Reflection.EventInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ nint klass;
            /*0x20*/ nint handle;

            static /*0x70dcf6c*/ void get_event_info(System.Reflection.RuntimeEventInfo ev, ref System.Reflection.MonoEventInfo info);
            static /*0x70dcf70*/ System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.RuntimeEventInfo ev);
            static /*0x70dd65c*/ int get_metadata_token(System.Reflection.RuntimeEventInfo monoEvent);
            /*0x70dd660*/ RuntimeEventInfo();
            /*0x70dcfac*/ System.Reflection.Module get_Module();
            /*0x70dcfcc*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70dd120*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x70dd1a4*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70dcfb0*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70dd228*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70dcfd0*/ System.Reflection.BindingFlags GetBindingFlags();
            /*0x70dd2c4*/ System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            /*0x70dd32c*/ System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x70dd394*/ System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            /*0x70dd3fc*/ System.Type get_DeclaringType();
            /*0x70dd428*/ System.Type get_ReflectedType();
            /*0x70dd454*/ string get_Name();
            /*0x70dd480*/ string ToString();
            /*0x70dd510*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70dd580*/ object[] GetCustomAttributes(bool inherit);
            /*0x70dd5e8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70dd658*/ int get_MetadataToken();
        }

        class RtFieldInfo : System.Reflection.FieldInfo
        {
            /*0x70dd668*/ RtFieldInfo();
            /*0x380bb68*/ object UnsafeGetValue(object obj);
            void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x380d83c*/ void CheckConsistency(object target);
        }

        class RuntimeFieldInfo : System.Reflection.RtFieldInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ System.RuntimeFieldHandle fhandle;
            /*0x20*/ string name;
            /*0x28*/ System.Type type;
            /*0x30*/ System.Reflection.FieldAttributes attrs;

            static /*0x70ddfec*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
            static /*0x70de29c*/ int get_metadata_token(System.Reflection.RuntimeFieldInfo monoField);
            /*0x70de2a0*/ RuntimeFieldInfo();
            /*0x70dd670*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70dd678*/ System.Reflection.Module get_Module();
            /*0x70dd698*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x70dd71c*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70dd67c*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70dd7a0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70dd858*/ object UnsafeGetValue(object obj);
            /*0x70dd85c*/ void CheckConsistency(object target);
            /*0x70dd9cc*/ void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x70dda30*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x70ddb8c*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x70ddb94*/ System.RuntimeFieldHandle get_FieldHandle();
            /*0x70ddb9c*/ System.Type ResolveType();
            /*0x70ddba0*/ System.Type get_FieldType();
            /*0x70ddc08*/ System.Type GetParentType(bool declaring);
            /*0x70ddc10*/ System.Type get_ReflectedType();
            /*0x70ddc18*/ System.Type get_DeclaringType();
            /*0x70ddc20*/ string get_Name();
            /*0x70ddc28*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70ddc98*/ object[] GetCustomAttributes(bool inherit);
            /*0x70ddd00*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70ddd70*/ int GetFieldOffset();
            /*0x70ddd74*/ object GetValueInternal(object obj);
            /*0x70ddd78*/ object GetValue(object obj);
            /*0x70ddf84*/ string ToString();
            /*0x70ddff0*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x70de294*/ object GetRawConstantValue();
            /*0x70ddf08*/ void CheckGeneric();
            /*0x70de298*/ int get_MetadataToken();
        }

        struct MonoMethodInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type ret;
            /*0x20*/ System.Reflection.MethodAttributes attrs;
            /*0x24*/ System.Reflection.MethodImplAttributes iattrs;
            /*0x28*/ System.Reflection.CallingConventions callconv;

            static /*0x70de2a8*/ void get_method_info(nint handle, ref System.Reflection.MonoMethodInfo info);
            static /*0x70de2ac*/ int get_method_attributes(nint handle);
            static /*0x70de2b0*/ System.Reflection.MonoMethodInfo GetMethodInfo(nint handle);
            static /*0x70de2e0*/ System.Type GetDeclaringType(nint handle);
            static /*0x70de308*/ System.Type GetReturnType(nint handle);
            static /*0x70de330*/ System.Reflection.MethodAttributes GetAttributes(nint handle);
            static /*0x70de334*/ System.Reflection.CallingConventions GetCallingConvention(nint handle);
            static /*0x70de35c*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags(nint handle);
            static /*0x70de384*/ System.Reflection.ParameterInfo[] get_parameter_info(nint handle, System.Reflection.MemberInfo member);
            static /*0x70de388*/ System.Reflection.ParameterInfo[] GetParametersInfo(nint handle, System.Reflection.MemberInfo member);
            static /*0x70de38c*/ System.Runtime.InteropServices.MarshalAsAttribute get_retval_marshal(nint handle);
            static /*0x70de390*/ System.Reflection.ParameterInfo GetReturnParameterInfo(System.Reflection.RuntimeMethodInfo method);
        }

        class RuntimeMethodInfo : System.Reflection.MethodInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x70deaa0*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle);
            static /*0x70deab4*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle reflectedType);
            static /*0x70d0e1c*/ System.Reflection.MethodBase GetMethodFromHandleInternalType(nint method_handle, nint type_handle);
            static /*0x70deaac*/ System.Reflection.MethodBase GetMethodFromHandleInternalType_native(nint method_handle, nint type_handle, bool genericCheck);
            static /*0x70deac4*/ string get_name(System.Reflection.MethodBase method);
            static /*0x70deac8*/ System.Reflection.RuntimeMethodInfo get_base_method(System.Reflection.RuntimeMethodInfo method, bool definition);
            static /*0x70dead0*/ int get_metadata_token(System.Reflection.RuntimeMethodInfo method);
            static /*0x70deec4*/ void ConvertValues(System.Reflection.Binder binder, object[] args, System.Reflection.ParameterInfo[] pinfo, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
            static /*0x70e0234*/ int get_core_clr_security_level();
            /*0x70deabc*/ RuntimeMethodInfo();
            /*0x70de458*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70de460*/ System.Reflection.Module get_Module();
            /*0x70de4f0*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70de574*/ string FormatNameAndSig(bool serialization);
            /*0x70de8c8*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x70de8dc*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x70de8f4*/ string ToString();
            /*0x70de464*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70de984*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d82fc*/ string SerializationToString();
            /*0x70dead4*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0x70deadc*/ System.Reflection.MethodInfo GetBaseMethod();
            /*0x70deae4*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0x70deae8*/ System.Type get_ReturnType();
            /*0x70deb14*/ int get_MetadataToken();
            /*0x70deb18*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x70deb44*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x70debd4*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x70debe0*/ int GetParametersCount();
            /*0x70dec04*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x70dec08*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70df178*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x70df180*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x70df188*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x70df1b4*/ System.Type get_ReflectedType();
            /*0x70df1bc*/ System.Type get_DeclaringType();
            /*0x70df1e8*/ string get_Name();
            /*0x70df1fc*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70df26c*/ object[] GetCustomAttributes(bool inherit);
            /*0x70df2d4*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70df344*/ void GetPInvoke(ref System.Reflection.PInvokeAttributes flags, ref string entryPoint, ref string dllName);
            /*0x70df348*/ object[] GetPseudoCustomAttributes();
            /*0x70df4cc*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
            /*0x70df6a4*/ System.Reflection.CustomAttributeData GetDllImportAttributeData();
            /*0x70dfdf8*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] methodInstantiation);
            /*0x70e0110*/ System.Reflection.MethodInfo MakeGenericMethod_impl(System.Type[] types);
            /*0x70e0114*/ System.Type[] GetGenericArguments();
            /*0x70e0118*/ System.Reflection.MethodInfo GetGenericMethodDefinition_impl();
            /*0x70e011c*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x70e0164*/ bool get_IsGenericMethodDefinition();
            /*0x70e0168*/ bool get_IsGenericMethod();
            /*0x70e016c*/ bool get_ContainsGenericParameters();
            /*0x70e023c*/ bool get_IsSecurityCritical();
        }

        class RuntimeConstructorInfo : System.Reflection.ConstructorInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x70e0c60*/ int get_core_clr_security_level();
            static /*0x70e0c74*/ int get_metadata_token(System.Reflection.RuntimeConstructorInfo method);
            /*0x70e0c78*/ RuntimeConstructorInfo();
            /*0x70e0244*/ System.Reflection.Module get_Module();
            /*0x70e0248*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70e02d0*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70e02d8*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70e035c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d82e8*/ string SerializationToString();
            /*0x70e0430*/ void SerializationInvoke(object target, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e0574*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x70e05a0*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x70e05ac*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x70e05b8*/ int GetParametersCount();
            /*0x70e05d8*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x70e05dc*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70e06dc*/ object DoInvoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70e0894*/ object InternalInvoke(object obj, object[] parameters, bool wrapExceptions);
            /*0x70e09e8*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x70e0a00*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x70e0a08*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x70e0a10*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x70e0a3c*/ bool get_ContainsGenericParameters();
            /*0x70e0a68*/ System.Type get_ReflectedType();
            /*0x70e0a70*/ System.Type get_DeclaringType();
            /*0x70e0a9c*/ string get_Name();
            /*0x70e0ab0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70e0b20*/ object[] GetCustomAttributes(bool inherit);
            /*0x70e0b88*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e0bf8*/ string ToString();
            /*0x70e0c68*/ bool get_IsSecurityCritical();
            /*0x70e0c70*/ int get_MetadataToken();
        }

        class RuntimeModule : System.Reflection.Module
        {
            /*0x10*/ nint _impl;
            /*0x18*/ System.Reflection.Assembly assembly;
            /*0x20*/ string fqname;
            /*0x28*/ string name;
            /*0x30*/ string scopename;
            /*0x38*/ bool is_resource;
            /*0x3c*/ int token;

            static /*0x70e0fcc*/ void GetGuidInternal(nint module, byte[] guid);
            /*0x70e0fd0*/ RuntimeModule();
            /*0x70e0cd0*/ System.Reflection.Assembly get_Assembly();
            /*0x70e0cd8*/ string get_ScopeName();
            /*0x70e0ce0*/ System.Guid get_ModuleVersionId();
            /*0x70e0cf0*/ bool IsResource();
            /*0x70e0cf8*/ object[] GetCustomAttributes(bool inherit);
            /*0x70e0d60*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e0dd0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70e0e40*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e0ed4*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
            /*0x70e0f4c*/ System.Guid GetModuleVersionId();
        }

        class RuntimeParameterInfo : System.Reflection.ParameterInfo
        {
            /*0x40*/ System.Runtime.InteropServices.MarshalAsAttribute marshalAs;

            static /*0x70de6d4*/ void FormatParameters(System.Text.StringBuilder sb, System.Reflection.ParameterInfo[] p, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0x70e1f5c*/ System.Type[] GetTypeModifiers(System.Type type, System.Reflection.MemberInfo member, int position, bool optional);
            static /*0x70e1f64*/ System.Reflection.ParameterInfo New(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            static /*0x70de3e8*/ System.Reflection.ParameterInfo New(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x70e1028*/ RuntimeParameterInfo(string name, System.Type type, int position, int attrs, object defaultValue, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x70e10d0*/ RuntimeParameterInfo(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            /*0x70e123c*/ RuntimeParameterInfo(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x70e12bc*/ object get_DefaultValue();
            /*0x70e15c4*/ object[] GetCustomAttributes(bool inherit);
            /*0x70e1620*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e118c*/ object GetDefaultValueImpl(System.Reflection.ParameterInfo pinfo);
            /*0x70e168c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70e16fc*/ object[] GetPseudoCustomAttributes();
            /*0x70e1988*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
            /*0x70e1ebc*/ System.Type[] GetRequiredCustomModifiers();
            /*0x70e1ec4*/ System.Type[] GetCustomModifiers(bool optional);
        }

        struct MonoPropertyInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type declaring_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo get_method;
            /*0x30*/ System.Reflection.MethodInfo set_method;
            /*0x38*/ System.Reflection.PropertyAttributes attrs;
        }

        enum PInfo
        {
            Attributes = 1,
            GetMethod = 2,
            SetMethod = 4,
            ReflectedType = 8,
            DeclaringType = 16,
            Name = 32,
        }

        class RuntimePropertyInfo : System.Reflection.PropertyInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ nint prop;
            /*0x20*/ System.Reflection.MonoPropertyInfo info;
            /*0x50*/ System.Reflection.PInfo cached;
            /*0x58*/ System.Reflection.RuntimePropertyInfo.GetterAdapter cached_getter;

            static /*0x70e1fcc*/ void get_property_info(System.Reflection.RuntimePropertyInfo prop, ref System.Reflection.MonoPropertyInfo info, System.Reflection.PInfo req_info);
            static /*0x3830700*/ object GetterAdapterFrame<T, R>(System.Reflection.RuntimePropertyInfo.Getter<T, R> getter, object obj);
            static /*0x3830700*/ object StaticGetterAdapterFrame<R>(System.Reflection.RuntimePropertyInfo.StaticGetter<R> getter, object obj);
            static /*0x70e2ce4*/ int get_metadata_token(System.Reflection.RuntimePropertyInfo monoProperty);
            static /*0x70e2ce8*/ System.Reflection.PropertyInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x70e2cec*/ System.Reflection.PropertyInfo GetPropertyFromHandle(Mono.RuntimePropertyHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x70e2d6c*/ RuntimePropertyInfo();
            /*0x70e1fd0*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x70e1fd8*/ System.Reflection.Module get_Module();
            /*0x70e1ff8*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x70e207c*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x70e1fdc*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x70e2100*/ string ToString();
            /*0x70e2108*/ string FormatNameAndSig(bool serialization);
            /*0x70e2278*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70d82e0*/ string SerializationToString();
            /*0x70e2340*/ void CachePropertyInfo(System.Reflection.PInfo flags);
            /*0x70e2380*/ bool get_CanRead();
            /*0x70e23c0*/ bool get_CanWrite();
            /*0x70e2400*/ System.Type get_PropertyType();
            /*0x70e249c*/ System.Type get_ReflectedType();
            /*0x70e24d4*/ System.Type get_DeclaringType();
            /*0x70e250c*/ string get_Name();
            /*0x70e2544*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x70e25b8*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x70e2768*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x70e27dc*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x70e2848*/ object[] GetCustomAttributes(bool inherit);
            /*0x70e28a4*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x70e2910*/ object GetValue(object obj, object[] index);
            /*0x70e2930*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70e2af0*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x70e2ce0*/ int get_MetadataToken();

            class GetterAdapter : System.MulticastDelegate
            {
                /*0x70e2d74*/ GetterAdapter(object object, nint method);
                /*0x70e2e7c*/ object Invoke(object _this);
            }

            class Getter<T, R> : System.MulticastDelegate
            {
                Getter(object object, nint method);
                /*0x3907c14*/ R Invoke(T _this);
            }

            class StaticGetter<R> : System.MulticastDelegate
            {
                StaticGetter(object object, nint method);
                /*0x3907c14*/ R Invoke();
            }
        }

        class StrongNameKeyPair : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ byte[] _publicKey;
            /*0x18*/ string _keyPairContainer;
            /*0x20*/ bool _keyPairExported;
            /*0x28*/ byte[] _keyPairArray;

            /*0x70e2e90*/ StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e30b4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70e31f0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        }

        namespace Emit
        {
            class AssemblyBuilder : System.Reflection.Assembly
            {
                static /*0x70e31f4*/ System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);
                /*0x70e322c*/ System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name);
                /*0x70e3264*/ void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder);
            }

            enum AssemblyBuilderAccess
            {
                Run = 1,
                Save = 2,
                RunAndSave = 3,
                ReflectionOnly = 6,
                RunAndCollect = 9,
            }

            class ConstructorBuilder : System.Reflection.ConstructorInfo
            {
                /*0x70e329c*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x70e32d4*/ System.Type get_DeclaringType();
                /*0x70e330c*/ string get_Name();
                /*0x70e3344*/ System.Reflection.Emit.ParameterBuilder DefineParameter(int iSequence, System.Reflection.ParameterAttributes attributes, string strParamName);
                /*0x70e337c*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x70e33b4*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x70e33ec*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x70e3424*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x70e345c*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x70e3494*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70e34cc*/ object[] GetCustomAttributes(bool inherit);
                /*0x70e3504*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70e353c*/ System.Type get_ReflectedType();
                /*0x70e3574*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            }

            class CustomAttributeBuilder
            {
                /*0x70e35ac*/ CustomAttributeBuilder(System.Reflection.ConstructorInfo con, object[] constructorArgs);
                /*0x70e35ec*/ CustomAttributeBuilder(System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues);
            }

            class DynamicMethod : System.Reflection.MethodInfo
            {
                /*0x70e362c*/ DynamicMethod(string name, System.Type returnType, System.Type[] parameterTypes);
                /*0x70e3668*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x70e36a0*/ System.Reflection.CallingConventions get_CallingConvention();
                /*0x70e36d8*/ System.Type get_DeclaringType();
                /*0x70e3710*/ System.Reflection.Module get_Module();
                /*0x70e3748*/ string get_Name();
                /*0x70e3780*/ System.Reflection.ParameterInfo get_ReturnParameter();
                /*0x70e37b8*/ System.Type get_ReturnType();
                /*0x70e37f0*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x70e3828*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x70e3860*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x70e3898*/ System.Type get_ReflectedType();
                /*0x70e38d0*/ System.Delegate CreateDelegate(System.Type delegateType);
                /*0x70e3908*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
                /*0x70e3940*/ object[] GetCustomAttributes(bool inherit);
                /*0x70e3978*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70e39b0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x70e39e8*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x70e3a20*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x70e3a58*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70e3a90*/ string ToString();
            }

            class EnumBuilder : System.Reflection.TypeInfo
            {
                /*0x70e3ac8*/ System.Reflection.Assembly get_Assembly();
                /*0x70e3b00*/ string get_AssemblyQualifiedName();
                /*0x70e3b38*/ System.Type get_BaseType();
                /*0x70e3b70*/ string get_FullName();
                /*0x70e3ba8*/ System.Guid get_GUID();
                /*0x70e3be0*/ System.Reflection.Module get_Module();
                /*0x70e3c18*/ string get_Name();
                /*0x70e3c50*/ string get_Namespace();
                /*0x70e3c88*/ System.Type get_UnderlyingSystemType();
                /*0x70e3cc0*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x70e3cf8*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70e3d30*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x70e3d68*/ object[] GetCustomAttributes(bool inherit);
                /*0x70e3da0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70e3dd8*/ System.Type GetElementType();
                /*0x70e3e10*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70e3e48*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70e3e80*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x70e3eb8*/ System.Type GetInterface(string name, bool ignoreCase);
                /*0x70e3ef0*/ System.Type[] GetInterfaces();
                /*0x70e3f28*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0x70e3f60*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70e3f98*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x70e3fd0*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70e4008*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x70e4040*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70e4078*/ bool HasElementTypeImpl();
                /*0x70e40b0*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x70e40e8*/ bool IsArrayImpl();
                /*0x70e4120*/ bool IsByRefImpl();
                /*0x70e4158*/ bool IsCOMObjectImpl();
                /*0x70e4190*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70e41c8*/ bool IsPointerImpl();
                /*0x70e4200*/ bool IsPrimitiveImpl();
            }

            class EventBuilder
            {
            }

            class FieldBuilder : System.Reflection.FieldInfo
            {
                /*0x70e4238*/ System.Reflection.FieldAttributes get_Attributes();
                /*0x70e4240*/ System.Type get_DeclaringType();
                /*0x70e4248*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x70e4250*/ System.Type get_FieldType();
                /*0x70e4258*/ string get_Name();
                /*0x70e4260*/ System.Type get_ReflectedType();
                /*0x70e4268*/ object[] GetCustomAttributes(bool inherit);
                /*0x70e4270*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70e4278*/ object GetValue(object obj);
                /*0x70e4280*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70e4288*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            }

            class GenericTypeParameterBuilder : System.Reflection.TypeInfo
            {
                /*0x70e42c0*/ System.Reflection.Assembly get_Assembly();
                /*0x70e42f8*/ string get_AssemblyQualifiedName();
                /*0x70e4330*/ System.Type get_BaseType();
                /*0x70e4368*/ string get_FullName();
                /*0x70e43a0*/ System.Guid get_GUID();
                /*0x70e43d8*/ System.Reflection.Module get_Module();
                /*0x70e4410*/ string get_Name();
                /*0x70e4448*/ string get_Namespace();
                /*0x70e4480*/ System.Type get_UnderlyingSystemType();
                /*0x70e44b8*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x70e44f0*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70e4528*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x70e4560*/ object[] GetCustomAttributes(bool inherit);
                /*0x70e4598*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70e45d0*/ System.Type GetElementType();
                /*0x70e4608*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70e4640*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70e4678*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x70e46b0*/ System.Type GetInterface(string name, bool ignoreCase);
                /*0x70e46e8*/ System.Type[] GetInterfaces();
                /*0x70e4720*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0x70e4758*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70e4790*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x70e47c8*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70e4800*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x70e4838*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70e4870*/ bool HasElementTypeImpl();
                /*0x70e48a8*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x70e48e0*/ bool IsArrayImpl();
                /*0x70e4918*/ bool IsByRefImpl();
                /*0x70e4950*/ bool IsCOMObjectImpl();
                /*0x70e4988*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70e49c0*/ bool IsPointerImpl();
                /*0x70e49f8*/ bool IsPrimitiveImpl();
            }

            class ILGenerator
            {
                /*0x70e4a30*/ System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type localType);
                /*0x70e4a68*/ System.Reflection.Emit.Label DefineLabel();
                /*0x70e4aa0*/ void Emit(System.Reflection.Emit.OpCode opcode);
                /*0x70e4ad8*/ void Emit(System.Reflection.Emit.OpCode opcode, byte arg);
                /*0x70e4b10*/ void Emit(System.Reflection.Emit.OpCode opcode, short arg);
                /*0x70e4b48*/ void Emit(System.Reflection.Emit.OpCode opcode, int arg);
                /*0x70e4b80*/ void Emit(System.Reflection.Emit.OpCode opcode, long arg);
                /*0x70e4bb8*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);
                /*0x70e4bf0*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);
                /*0x70e4c28*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);
                /*0x70e4c60*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);
                /*0x70e4c98*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);
                /*0x70e4cd0*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);
                /*0x70e4d08*/ void Emit(System.Reflection.Emit.OpCode opcode, sbyte arg);
                /*0x70e4d40*/ void Emit(System.Reflection.Emit.OpCode opcode, string str);
                /*0x70e4d78*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Type cls);
                /*0x70e4db0*/ void MarkLabel(System.Reflection.Emit.Label loc);
            }

            struct Label : System.IEquatable<System.Reflection.Emit.Label>
            {
                /*0x10*/ int label;

                /*0x70e4de8*/ bool Equals(object obj);
                /*0x70e4e60*/ bool Equals(System.Reflection.Emit.Label obj);
                /*0x70e4e70*/ int GetHashCode();
            }

            class LocalBuilder : System.Reflection.LocalVariableInfo
            {
                /*0x20*/ string name;
                /*0x28*/ System.Reflection.Emit.ILGenerator ilgen;
                /*0x30*/ int startOffset;
                /*0x34*/ int endOffset;
            }

            class MethodBuilder : System.Reflection.MethodInfo
            {
                /*0x70e4e78*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x70e4eb0*/ System.Type get_DeclaringType();
                /*0x70e4ee8*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x70e4f20*/ string get_Name();
                /*0x70e4f58*/ System.Type get_ReflectedType();
                /*0x70e4f90*/ System.Reflection.Emit.ParameterBuilder DefineParameter(int position, System.Reflection.ParameterAttributes attributes, string strParamName);
                /*0x70e4fc8*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x70e5000*/ object[] GetCustomAttributes(bool inherit);
                /*0x70e5038*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70e5070*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x70e50a8*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x70e50e0*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x70e5118*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x70e5150*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class ModuleBuilder : System.Reflection.Module
            {
                /*0x70e5188*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr, System.Type parent);
                /*0x70e51c0*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces);
            }

            struct OpCode : System.IEquatable<System.Reflection.Emit.OpCode>
            {
                /*0x10*/ byte op1;
                /*0x11*/ byte op2;
                /*0x12*/ byte push;
                /*0x13*/ byte pop;
                /*0x14*/ byte size;
                /*0x15*/ byte type;
                /*0x16*/ byte args;
                /*0x17*/ byte flow;

                /*0x70e51f8*/ OpCode(int p, int q);
                /*0x70e5234*/ int GetHashCode();
                /*0x70e52f8*/ bool Equals(object obj);
                /*0x70e5380*/ bool Equals(System.Reflection.Emit.OpCode obj);
                /*0x70e53a8*/ string ToString();
                /*0x70e5254*/ string get_Name();
            }

            class OpCodeNames
            {
                static /*0x0*/ string[] names;

                static /*0x70e53ac*/ OpCodeNames();
            }

            class OpCodes
            {
                static /*0x0*/ System.Reflection.Emit.OpCode Nop;
                static /*0x8*/ System.Reflection.Emit.OpCode Break;
                static /*0x10*/ System.Reflection.Emit.OpCode Ldarg_0;
                static /*0x18*/ System.Reflection.Emit.OpCode Ldarg_1;
                static /*0x20*/ System.Reflection.Emit.OpCode Ldarg_2;
                static /*0x28*/ System.Reflection.Emit.OpCode Ldarg_3;
                static /*0x30*/ System.Reflection.Emit.OpCode Ldloc_0;
                static /*0x38*/ System.Reflection.Emit.OpCode Ldloc_1;
                static /*0x40*/ System.Reflection.Emit.OpCode Ldloc_2;
                static /*0x48*/ System.Reflection.Emit.OpCode Ldloc_3;
                static /*0x50*/ System.Reflection.Emit.OpCode Stloc_0;
                static /*0x58*/ System.Reflection.Emit.OpCode Stloc_1;
                static /*0x60*/ System.Reflection.Emit.OpCode Stloc_2;
                static /*0x68*/ System.Reflection.Emit.OpCode Stloc_3;
                static /*0x70*/ System.Reflection.Emit.OpCode Ldarg_S;
                static /*0x78*/ System.Reflection.Emit.OpCode Ldarga_S;
                static /*0x80*/ System.Reflection.Emit.OpCode Starg_S;
                static /*0x88*/ System.Reflection.Emit.OpCode Ldloc_S;
                static /*0x90*/ System.Reflection.Emit.OpCode Ldloca_S;
                static /*0x98*/ System.Reflection.Emit.OpCode Stloc_S;
                static /*0xa0*/ System.Reflection.Emit.OpCode Ldnull;
                static /*0xa8*/ System.Reflection.Emit.OpCode Ldc_I4_M1;
                static /*0xb0*/ System.Reflection.Emit.OpCode Ldc_I4_0;
                static /*0xb8*/ System.Reflection.Emit.OpCode Ldc_I4_1;
                static /*0xc0*/ System.Reflection.Emit.OpCode Ldc_I4_2;
                static /*0xc8*/ System.Reflection.Emit.OpCode Ldc_I4_3;
                static /*0xd0*/ System.Reflection.Emit.OpCode Ldc_I4_4;
                static /*0xd8*/ System.Reflection.Emit.OpCode Ldc_I4_5;
                static /*0xe0*/ System.Reflection.Emit.OpCode Ldc_I4_6;
                static /*0xe8*/ System.Reflection.Emit.OpCode Ldc_I4_7;
                static /*0xf0*/ System.Reflection.Emit.OpCode Ldc_I4_8;
                static /*0xf8*/ System.Reflection.Emit.OpCode Ldc_I4_S;
                static /*0x100*/ System.Reflection.Emit.OpCode Ldc_I4;
                static /*0x108*/ System.Reflection.Emit.OpCode Ldc_I8;
                static /*0x110*/ System.Reflection.Emit.OpCode Ldc_R4;
                static /*0x118*/ System.Reflection.Emit.OpCode Ldc_R8;
                static /*0x120*/ System.Reflection.Emit.OpCode Dup;
                static /*0x128*/ System.Reflection.Emit.OpCode Pop;
                static /*0x130*/ System.Reflection.Emit.OpCode Jmp;
                static /*0x138*/ System.Reflection.Emit.OpCode Call;
                static /*0x140*/ System.Reflection.Emit.OpCode Calli;
                static /*0x148*/ System.Reflection.Emit.OpCode Ret;
                static /*0x150*/ System.Reflection.Emit.OpCode Br_S;
                static /*0x158*/ System.Reflection.Emit.OpCode Brfalse_S;
                static /*0x160*/ System.Reflection.Emit.OpCode Brtrue_S;
                static /*0x168*/ System.Reflection.Emit.OpCode Beq_S;
                static /*0x170*/ System.Reflection.Emit.OpCode Bge_S;
                static /*0x178*/ System.Reflection.Emit.OpCode Bgt_S;
                static /*0x180*/ System.Reflection.Emit.OpCode Ble_S;
                static /*0x188*/ System.Reflection.Emit.OpCode Blt_S;
                static /*0x190*/ System.Reflection.Emit.OpCode Bne_Un_S;
                static /*0x198*/ System.Reflection.Emit.OpCode Bge_Un_S;
                static /*0x1a0*/ System.Reflection.Emit.OpCode Bgt_Un_S;
                static /*0x1a8*/ System.Reflection.Emit.OpCode Ble_Un_S;
                static /*0x1b0*/ System.Reflection.Emit.OpCode Blt_Un_S;
                static /*0x1b8*/ System.Reflection.Emit.OpCode Br;
                static /*0x1c0*/ System.Reflection.Emit.OpCode Brfalse;
                static /*0x1c8*/ System.Reflection.Emit.OpCode Brtrue;
                static /*0x1d0*/ System.Reflection.Emit.OpCode Beq;
                static /*0x1d8*/ System.Reflection.Emit.OpCode Bge;
                static /*0x1e0*/ System.Reflection.Emit.OpCode Bgt;
                static /*0x1e8*/ System.Reflection.Emit.OpCode Ble;
                static /*0x1f0*/ System.Reflection.Emit.OpCode Blt;
                static /*0x1f8*/ System.Reflection.Emit.OpCode Bne_Un;
                static /*0x200*/ System.Reflection.Emit.OpCode Bge_Un;
                static /*0x208*/ System.Reflection.Emit.OpCode Bgt_Un;
                static /*0x210*/ System.Reflection.Emit.OpCode Ble_Un;
                static /*0x218*/ System.Reflection.Emit.OpCode Blt_Un;
                static /*0x220*/ System.Reflection.Emit.OpCode Switch;
                static /*0x228*/ System.Reflection.Emit.OpCode Ldind_I1;
                static /*0x230*/ System.Reflection.Emit.OpCode Ldind_U1;
                static /*0x238*/ System.Reflection.Emit.OpCode Ldind_I2;
                static /*0x240*/ System.Reflection.Emit.OpCode Ldind_U2;
                static /*0x248*/ System.Reflection.Emit.OpCode Ldind_I4;
                static /*0x250*/ System.Reflection.Emit.OpCode Ldind_U4;
                static /*0x258*/ System.Reflection.Emit.OpCode Ldind_I8;
                static /*0x260*/ System.Reflection.Emit.OpCode Ldind_I;
                static /*0x268*/ System.Reflection.Emit.OpCode Ldind_R4;
                static /*0x270*/ System.Reflection.Emit.OpCode Ldind_R8;
                static /*0x278*/ System.Reflection.Emit.OpCode Ldind_Ref;
                static /*0x280*/ System.Reflection.Emit.OpCode Stind_Ref;
                static /*0x288*/ System.Reflection.Emit.OpCode Stind_I1;
                static /*0x290*/ System.Reflection.Emit.OpCode Stind_I2;
                static /*0x298*/ System.Reflection.Emit.OpCode Stind_I4;
                static /*0x2a0*/ System.Reflection.Emit.OpCode Stind_I8;
                static /*0x2a8*/ System.Reflection.Emit.OpCode Stind_R4;
                static /*0x2b0*/ System.Reflection.Emit.OpCode Stind_R8;
                static /*0x2b8*/ System.Reflection.Emit.OpCode Add;
                static /*0x2c0*/ System.Reflection.Emit.OpCode Sub;
                static /*0x2c8*/ System.Reflection.Emit.OpCode Mul;
                static /*0x2d0*/ System.Reflection.Emit.OpCode Div;
                static /*0x2d8*/ System.Reflection.Emit.OpCode Div_Un;
                static /*0x2e0*/ System.Reflection.Emit.OpCode Rem;
                static /*0x2e8*/ System.Reflection.Emit.OpCode Rem_Un;
                static /*0x2f0*/ System.Reflection.Emit.OpCode And;
                static /*0x2f8*/ System.Reflection.Emit.OpCode Or;
                static /*0x300*/ System.Reflection.Emit.OpCode Xor;
                static /*0x308*/ System.Reflection.Emit.OpCode Shl;
                static /*0x310*/ System.Reflection.Emit.OpCode Shr;
                static /*0x318*/ System.Reflection.Emit.OpCode Shr_Un;
                static /*0x320*/ System.Reflection.Emit.OpCode Neg;
                static /*0x328*/ System.Reflection.Emit.OpCode Not;
                static /*0x330*/ System.Reflection.Emit.OpCode Conv_I1;
                static /*0x338*/ System.Reflection.Emit.OpCode Conv_I2;
                static /*0x340*/ System.Reflection.Emit.OpCode Conv_I4;
                static /*0x348*/ System.Reflection.Emit.OpCode Conv_I8;
                static /*0x350*/ System.Reflection.Emit.OpCode Conv_R4;
                static /*0x358*/ System.Reflection.Emit.OpCode Conv_R8;
                static /*0x360*/ System.Reflection.Emit.OpCode Conv_U4;
                static /*0x368*/ System.Reflection.Emit.OpCode Conv_U8;
                static /*0x370*/ System.Reflection.Emit.OpCode Callvirt;
                static /*0x378*/ System.Reflection.Emit.OpCode Cpobj;
                static /*0x380*/ System.Reflection.Emit.OpCode Ldobj;
                static /*0x388*/ System.Reflection.Emit.OpCode Ldstr;
                static /*0x390*/ System.Reflection.Emit.OpCode Newobj;
                static /*0x398*/ System.Reflection.Emit.OpCode Castclass;
                static /*0x3a0*/ System.Reflection.Emit.OpCode Isinst;
                static /*0x3a8*/ System.Reflection.Emit.OpCode Conv_R_Un;
                static /*0x3b0*/ System.Reflection.Emit.OpCode Unbox;
                static /*0x3b8*/ System.Reflection.Emit.OpCode Throw;
                static /*0x3c0*/ System.Reflection.Emit.OpCode Ldfld;
                static /*0x3c8*/ System.Reflection.Emit.OpCode Ldflda;
                static /*0x3d0*/ System.Reflection.Emit.OpCode Stfld;
                static /*0x3d8*/ System.Reflection.Emit.OpCode Ldsfld;
                static /*0x3e0*/ System.Reflection.Emit.OpCode Ldsflda;
                static /*0x3e8*/ System.Reflection.Emit.OpCode Stsfld;
                static /*0x3f0*/ System.Reflection.Emit.OpCode Stobj;
                static /*0x3f8*/ System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;
                static /*0x400*/ System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;
                static /*0x408*/ System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;
                static /*0x410*/ System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;
                static /*0x418*/ System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;
                static /*0x420*/ System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;
                static /*0x428*/ System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;
                static /*0x430*/ System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;
                static /*0x438*/ System.Reflection.Emit.OpCode Conv_Ovf_I_Un;
                static /*0x440*/ System.Reflection.Emit.OpCode Conv_Ovf_U_Un;
                static /*0x448*/ System.Reflection.Emit.OpCode Box;
                static /*0x450*/ System.Reflection.Emit.OpCode Newarr;
                static /*0x458*/ System.Reflection.Emit.OpCode Ldlen;
                static /*0x460*/ System.Reflection.Emit.OpCode Ldelema;
                static /*0x468*/ System.Reflection.Emit.OpCode Ldelem_I1;
                static /*0x470*/ System.Reflection.Emit.OpCode Ldelem_U1;
                static /*0x478*/ System.Reflection.Emit.OpCode Ldelem_I2;
                static /*0x480*/ System.Reflection.Emit.OpCode Ldelem_U2;
                static /*0x488*/ System.Reflection.Emit.OpCode Ldelem_I4;
                static /*0x490*/ System.Reflection.Emit.OpCode Ldelem_U4;
                static /*0x498*/ System.Reflection.Emit.OpCode Ldelem_I8;
                static /*0x4a0*/ System.Reflection.Emit.OpCode Ldelem_I;
                static /*0x4a8*/ System.Reflection.Emit.OpCode Ldelem_R4;
                static /*0x4b0*/ System.Reflection.Emit.OpCode Ldelem_R8;
                static /*0x4b8*/ System.Reflection.Emit.OpCode Ldelem_Ref;
                static /*0x4c0*/ System.Reflection.Emit.OpCode Stelem_I;
                static /*0x4c8*/ System.Reflection.Emit.OpCode Stelem_I1;
                static /*0x4d0*/ System.Reflection.Emit.OpCode Stelem_I2;
                static /*0x4d8*/ System.Reflection.Emit.OpCode Stelem_I4;
                static /*0x4e0*/ System.Reflection.Emit.OpCode Stelem_I8;
                static /*0x4e8*/ System.Reflection.Emit.OpCode Stelem_R4;
                static /*0x4f0*/ System.Reflection.Emit.OpCode Stelem_R8;
                static /*0x4f8*/ System.Reflection.Emit.OpCode Stelem_Ref;
                static /*0x500*/ System.Reflection.Emit.OpCode Ldelem;
                static /*0x508*/ System.Reflection.Emit.OpCode Stelem;
                static /*0x510*/ System.Reflection.Emit.OpCode Unbox_Any;
                static /*0x518*/ System.Reflection.Emit.OpCode Conv_Ovf_I1;
                static /*0x520*/ System.Reflection.Emit.OpCode Conv_Ovf_U1;
                static /*0x528*/ System.Reflection.Emit.OpCode Conv_Ovf_I2;
                static /*0x530*/ System.Reflection.Emit.OpCode Conv_Ovf_U2;
                static /*0x538*/ System.Reflection.Emit.OpCode Conv_Ovf_I4;
                static /*0x540*/ System.Reflection.Emit.OpCode Conv_Ovf_U4;
                static /*0x548*/ System.Reflection.Emit.OpCode Conv_Ovf_I8;
                static /*0x550*/ System.Reflection.Emit.OpCode Conv_Ovf_U8;
                static /*0x558*/ System.Reflection.Emit.OpCode Refanyval;
                static /*0x560*/ System.Reflection.Emit.OpCode Ckfinite;
                static /*0x568*/ System.Reflection.Emit.OpCode Mkrefany;
                static /*0x570*/ System.Reflection.Emit.OpCode Ldtoken;
                static /*0x578*/ System.Reflection.Emit.OpCode Conv_U2;
                static /*0x580*/ System.Reflection.Emit.OpCode Conv_U1;
                static /*0x588*/ System.Reflection.Emit.OpCode Conv_I;
                static /*0x590*/ System.Reflection.Emit.OpCode Conv_Ovf_I;
                static /*0x598*/ System.Reflection.Emit.OpCode Conv_Ovf_U;
                static /*0x5a0*/ System.Reflection.Emit.OpCode Add_Ovf;
                static /*0x5a8*/ System.Reflection.Emit.OpCode Add_Ovf_Un;
                static /*0x5b0*/ System.Reflection.Emit.OpCode Mul_Ovf;
                static /*0x5b8*/ System.Reflection.Emit.OpCode Mul_Ovf_Un;
                static /*0x5c0*/ System.Reflection.Emit.OpCode Sub_Ovf;
                static /*0x5c8*/ System.Reflection.Emit.OpCode Sub_Ovf_Un;
                static /*0x5d0*/ System.Reflection.Emit.OpCode Endfinally;
                static /*0x5d8*/ System.Reflection.Emit.OpCode Leave;
                static /*0x5e0*/ System.Reflection.Emit.OpCode Leave_S;
                static /*0x5e8*/ System.Reflection.Emit.OpCode Stind_I;
                static /*0x5f0*/ System.Reflection.Emit.OpCode Conv_U;
                static /*0x5f8*/ System.Reflection.Emit.OpCode Prefix7;
                static /*0x600*/ System.Reflection.Emit.OpCode Prefix6;
                static /*0x608*/ System.Reflection.Emit.OpCode Prefix5;
                static /*0x610*/ System.Reflection.Emit.OpCode Prefix4;
                static /*0x618*/ System.Reflection.Emit.OpCode Prefix3;
                static /*0x620*/ System.Reflection.Emit.OpCode Prefix2;
                static /*0x628*/ System.Reflection.Emit.OpCode Prefix1;
                static /*0x630*/ System.Reflection.Emit.OpCode Prefixref;
                static /*0x638*/ System.Reflection.Emit.OpCode Arglist;
                static /*0x640*/ System.Reflection.Emit.OpCode Ceq;
                static /*0x648*/ System.Reflection.Emit.OpCode Cgt;
                static /*0x650*/ System.Reflection.Emit.OpCode Cgt_Un;
                static /*0x658*/ System.Reflection.Emit.OpCode Clt;
                static /*0x660*/ System.Reflection.Emit.OpCode Clt_Un;
                static /*0x668*/ System.Reflection.Emit.OpCode Ldftn;
                static /*0x670*/ System.Reflection.Emit.OpCode Ldvirtftn;
                static /*0x678*/ System.Reflection.Emit.OpCode Ldarg;
                static /*0x680*/ System.Reflection.Emit.OpCode Ldarga;
                static /*0x688*/ System.Reflection.Emit.OpCode Starg;
                static /*0x690*/ System.Reflection.Emit.OpCode Ldloc;
                static /*0x698*/ System.Reflection.Emit.OpCode Ldloca;
                static /*0x6a0*/ System.Reflection.Emit.OpCode Stloc;
                static /*0x6a8*/ System.Reflection.Emit.OpCode Localloc;
                static /*0x6b0*/ System.Reflection.Emit.OpCode Endfilter;
                static /*0x6b8*/ System.Reflection.Emit.OpCode Unaligned;
                static /*0x6c0*/ System.Reflection.Emit.OpCode Volatile;
                static /*0x6c8*/ System.Reflection.Emit.OpCode Tailcall;
                static /*0x6d0*/ System.Reflection.Emit.OpCode Initobj;
                static /*0x6d8*/ System.Reflection.Emit.OpCode Constrained;
                static /*0x6e0*/ System.Reflection.Emit.OpCode Cpblk;
                static /*0x6e8*/ System.Reflection.Emit.OpCode Initblk;
                static /*0x6f0*/ System.Reflection.Emit.OpCode Rethrow;
                static /*0x6f8*/ System.Reflection.Emit.OpCode Sizeof;
                static /*0x700*/ System.Reflection.Emit.OpCode Refanytype;
                static /*0x708*/ System.Reflection.Emit.OpCode Readonly;

                static /*0x70e7f4c*/ OpCodes();
            }

            class ParameterBuilder
            {
            }

            class PropertyBuilder : System.Reflection.PropertyInfo
            {
                /*0x70ea850*/ bool get_CanRead();
                /*0x70ea888*/ bool get_CanWrite();
                /*0x70ea8c0*/ System.Type get_DeclaringType();
                /*0x70ea8f8*/ string get_Name();
                /*0x70ea930*/ System.Type get_PropertyType();
                /*0x70ea968*/ System.Type get_ReflectedType();
                /*0x70ea9a0*/ object[] GetCustomAttributes(bool inherit);
                /*0x70ea9d8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70eaa10*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
                /*0x70eaa48*/ System.Reflection.ParameterInfo[] GetIndexParameters();
                /*0x70eaa80*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
                /*0x70eaab8*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
                /*0x70eaaf0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70eab28*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            }

            class SignatureHelper
            {
            }

            class TypeBuilder : System.Reflection.TypeInfo
            {
                static int UnspecifiedTypeSize = 0;

                /*0x70eab60*/ System.Reflection.Assembly get_Assembly();
                /*0x70eab98*/ string get_AssemblyQualifiedName();
                /*0x70eabd0*/ System.Type get_BaseType();
                /*0x70eac08*/ string get_FullName();
                /*0x70eac40*/ System.Guid get_GUID();
                /*0x70eac78*/ System.Reflection.Module get_Module();
                /*0x70eacb0*/ string get_Name();
                /*0x70eace8*/ string get_Namespace();
                /*0x70ead20*/ System.Type get_UnderlyingSystemType();
                /*0x70ead58*/ System.Reflection.TypeInfo CreateTypeInfo();
                /*0x70ead90*/ System.Reflection.Emit.ConstructorBuilder DefineConstructor(System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type[] parameterTypes);
                /*0x70eadc8*/ System.Reflection.Emit.FieldBuilder DefineField(string fieldName, System.Type type, System.Reflection.FieldAttributes attributes);
                /*0x70eae00*/ System.Reflection.Emit.MethodBuilder DefineMethod(string name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes);
                /*0x70eae38*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x70eae70*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70eaea8*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x70eaee0*/ object[] GetCustomAttributes(bool inherit);
                /*0x70eaf18*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x70eaf50*/ System.Type GetElementType();
                /*0x70eaf88*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70eafc0*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70eaff8*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x70eb030*/ System.Type GetInterface(string name, bool ignoreCase);
                /*0x70eb068*/ System.Type[] GetInterfaces();
                /*0x70eb0a0*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0x70eb0d8*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70eb110*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x70eb148*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x70eb180*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x70eb1b8*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x70eb1f0*/ bool HasElementTypeImpl();
                /*0x70eb228*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x70eb260*/ bool IsArrayImpl();
                /*0x70eb298*/ bool IsByRefImpl();
                /*0x70eb2d0*/ bool IsCOMObjectImpl();
                /*0x70eb308*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x70eb340*/ bool IsPointerImpl();
                /*0x70eb378*/ bool IsPrimitiveImpl();
                /*0x70eb3b0*/ void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder);
            }

            class UnmanagedMarshal
            {
                /*0x70eb3e8*/ UnmanagedMarshal();
            }
        }
    }

    namespace Numerics
    {
        class ConstantHelper
        {
            static /*0x70eb3f0*/ byte GetByteWithAllBitsSet();
            static /*0x70eb3f8*/ sbyte GetSByteWithAllBitsSet();
            static /*0x70eb400*/ ushort GetUInt16WithAllBitsSet();
            static /*0x70eb408*/ short GetInt16WithAllBitsSet();
            static /*0x70eb410*/ uint GetUInt32WithAllBitsSet();
            static /*0x70eb418*/ int GetInt32WithAllBitsSet();
            static /*0x70eb420*/ ulong GetUInt64WithAllBitsSet();
            static /*0x70eb428*/ long GetInt64WithAllBitsSet();
            static /*0x70eb430*/ float GetSingleWithAllBitsSet();
            static /*0x70eb43c*/ double GetDoubleWithAllBitsSet();
        }

        struct Register
        {
            /*0x10*/ byte byte_0;
            /*0x11*/ byte byte_1;
            /*0x12*/ byte byte_2;
            /*0x13*/ byte byte_3;
            /*0x14*/ byte byte_4;
            /*0x15*/ byte byte_5;
            /*0x16*/ byte byte_6;
            /*0x17*/ byte byte_7;
            /*0x18*/ byte byte_8;
            /*0x19*/ byte byte_9;
            /*0x1a*/ byte byte_10;
            /*0x1b*/ byte byte_11;
            /*0x1c*/ byte byte_12;
            /*0x1d*/ byte byte_13;
            /*0x1e*/ byte byte_14;
            /*0x1f*/ byte byte_15;
            /*0x10*/ sbyte sbyte_0;
            /*0x11*/ sbyte sbyte_1;
            /*0x12*/ sbyte sbyte_2;
            /*0x13*/ sbyte sbyte_3;
            /*0x14*/ sbyte sbyte_4;
            /*0x15*/ sbyte sbyte_5;
            /*0x16*/ sbyte sbyte_6;
            /*0x17*/ sbyte sbyte_7;
            /*0x18*/ sbyte sbyte_8;
            /*0x19*/ sbyte sbyte_9;
            /*0x1a*/ sbyte sbyte_10;
            /*0x1b*/ sbyte sbyte_11;
            /*0x1c*/ sbyte sbyte_12;
            /*0x1d*/ sbyte sbyte_13;
            /*0x1e*/ sbyte sbyte_14;
            /*0x1f*/ sbyte sbyte_15;
            /*0x10*/ ushort uint16_0;
            /*0x12*/ ushort uint16_1;
            /*0x14*/ ushort uint16_2;
            /*0x16*/ ushort uint16_3;
            /*0x18*/ ushort uint16_4;
            /*0x1a*/ ushort uint16_5;
            /*0x1c*/ ushort uint16_6;
            /*0x1e*/ ushort uint16_7;
            /*0x10*/ short int16_0;
            /*0x12*/ short int16_1;
            /*0x14*/ short int16_2;
            /*0x16*/ short int16_3;
            /*0x18*/ short int16_4;
            /*0x1a*/ short int16_5;
            /*0x1c*/ short int16_6;
            /*0x1e*/ short int16_7;
            /*0x10*/ uint uint32_0;
            /*0x14*/ uint uint32_1;
            /*0x18*/ uint uint32_2;
            /*0x1c*/ uint uint32_3;
            /*0x10*/ int int32_0;
            /*0x14*/ int int32_1;
            /*0x18*/ int int32_2;
            /*0x1c*/ int int32_3;
            /*0x10*/ ulong uint64_0;
            /*0x18*/ ulong uint64_1;
            /*0x10*/ long int64_0;
            /*0x18*/ long int64_1;
            /*0x10*/ float single_0;
            /*0x14*/ float single_1;
            /*0x18*/ float single_2;
            /*0x1c*/ float single_3;
            /*0x10*/ double double_0;
            /*0x18*/ double double_1;
        }

        struct Vector<T> : System.IEquatable<System.Numerics.Vector<T>>, System.IFormattable
        {
            static /*0x0*/ int s_count;
            static /*0x0*/ System.Numerics.Vector<T> s_zero;
            static /*0x0*/ System.Numerics.Vector<T> s_one;
            static /*0x0*/ System.Numerics.Vector<T> s_allOnes;
            /*0x0*/ System.Numerics.Register register;

            static /*0x38358cc*/ Vector();
            static /*0x3821e38*/ int get_Count();
            static /*0x3907c14*/ System.Numerics.Vector<T> get_Zero();
            static /*0x3821e38*/ int InitializeCount();
            static /*0x3907c14*/ bool op_Equality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x3907c14*/ bool op_Inequality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x3907c14*/ System.Numerics.Vector<ulong> op_Explicit(System.Numerics.Vector<T> value);
            static /*0x3907c14*/ System.Numerics.Vector<T> Equals(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x3907c14*/ bool ScalarEquals(T left, T right);
            static /*0x3907c14*/ T GetOneValue();
            static /*0x3907c14*/ T GetAllBitsSetValue();
            /*0x3907c14*/ Vector(T value);
            /*0x3907c14*/ Vector(void* dataPointer);
            /*0x3907c14*/ Vector(void* dataPointer, int offset);
            /*0x380d83c*/ Vector(ref System.Numerics.Register existingRegister);
            /*0x3907c14*/ T get_Item(int index);
            /*0x380b2f0*/ bool Equals(object obj);
            /*0x3907c14*/ bool Equals(System.Numerics.Vector<T> other);
            /*0x380b6a0*/ int GetHashCode();
            /*0x380b9e8*/ string ToString();
            /*0x380bcbc*/ string ToString(string format, System.IFormatProvider formatProvider);

            struct VectorSizeHelper<T>
            {
                /*0x0*/ System.Numerics.Vector<T> _placeholder;
                /*0x0*/ byte _byte;
            }
        }

        class Vector
        {
            static /*0x3907c14*/ System.Numerics.Vector<T> Equals<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x70eb444*/ bool get_IsHardwareAccelerated();
            static /*0x3907c14*/ System.Numerics.Vector<ulong> AsVectorUInt64<T>(System.Numerics.Vector<T> value);
        }

        namespace Hashing
        {
            class HashHelpers
            {
                static /*0x0*/ int RandomSeed;

                static /*0x70eb45c*/ HashHelpers();
                static /*0x70eb44c*/ int Combine(int h1, int h2);
            }
        }
    }

    namespace Globalization
    {
        class CharUnicodeInfo
        {
            static /*0x70eb4ec*/ int InternalConvertToUtf32(string s, int index);
            static /*0x70eb580*/ int InternalConvertToUtf32(string s, int index, ref int charLength);
            static /*0x70eb634*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char ch);
            static /*0x70eb668*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
            static /*0x70eb650*/ System.Globalization.UnicodeCategory GetUnicodeCategory(int codePoint);
            static /*0x70eb72c*/ byte InternalGetCategoryValue(int ch, int offset);
            static /*0x70eb710*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string value, int index);
            static /*0x70eb91c*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string str, int index, ref int charLength);
            static /*0x70eb938*/ bool IsCombiningCategory(System.Globalization.UnicodeCategory uc);
            static /*0x70eb948*/ bool IsWhiteSpace(string s, int index);
            static /*0x70eb964*/ bool IsWhiteSpace(char c);
            static /*0x70eb7dc*/ System.ReadOnlySpan<byte> get_CategoryLevel1Index();
            static /*0x70eb82c*/ System.ReadOnlySpan<byte> get_CategoryLevel2Index();
            static /*0x70eb87c*/ System.ReadOnlySpan<byte> get_CategoryLevel3Index();
            static /*0x70eb8cc*/ System.ReadOnlySpan<byte> get_CategoriesValue();
        }

        class CompareInfo : System.Runtime.Serialization.IDeserializationCallback
        {
            static System.Globalization.CompareOptions ValidIndexMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidCompareMaskOffFlags = -536870944;
            static System.Globalization.CompareOptions ValidHashCodeOfStringMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidSortkeyCtorMaskOffFlags = -536870944;
            static /*0x0*/ System.Globalization.CompareInfo Invariant;
            static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Globalization.ISimpleCollator> collators;
            static /*0x10*/ bool managedCollation;
            static /*0x11*/ bool managedCollationChecked;
            /*0x10*/ string m_name;
            /*0x18*/ string _sortName;
            /*0x20*/ System.Globalization.SortVersion m_SortVersion;
            /*0x28*/ int culture;
            /*0x30*/ System.Globalization.ISimpleCollator collator;

            static /*0x70f00b0*/ CompareInfo();
            static /*0x70eb98c*/ int InvariantIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x70ebdec*/ int InvariantLastIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x70eba50*/ int InvariantFindString(char* source, int sourceCount, char* value, int valueCount, bool ignoreCase, bool start);
            static /*0x70ebeb8*/ char InvariantToUpper(char c);
            static /*0x70ec1dc*/ System.Globalization.CompareInfo GetCompareInfo(string name);
            static /*0x70ed584*/ int CompareOrdinalIgnoreCase(string strA, int indexA, int lengthA, string strB, int indexB, int lengthB);
            static /*0x70ec720*/ int CompareOrdinalIgnoreCase(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
            static /*0x70eeeac*/ int GetIgnoreCaseHash(string source);
            static /*0x70ef624*/ bool get_UseManagedCollation();
            static /*0x70f00a4*/ int internal_compare_icall(char* str1, int length1, char* str2, int length2, System.Globalization.CompareOptions options);
            static /*0x70efef0*/ int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            static /*0x70f00a8*/ int internal_index_icall(char* source, int sindex, int count, char* value, int value_length, bool first);
            static /*0x70efd10*/ int internal_index(string source, int sindex, int count, string value, bool first);
            static /*0x70ed6f8*/ int CompareStringOrdinalIgnoreCase(char* pString1, int length1, char* pString2, int length2);
            static /*0x70ee7a8*/ int IndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x70eec24*/ int LastIndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x70ec178*/ CompareInfo(System.Globalization.CultureInfo culture);
            /*0x70f0144*/ CompareInfo();
            /*0x70ebed0*/ System.Globalization.SortKey InvariantCreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x70ec294*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70ec2a0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x70ec354*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70ec2a4*/ void OnDeserialized();
            /*0x70ec358*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x70ec3e4*/ string get_Name();
            /*0x70ec470*/ int Compare(string string1, string string2);
            /*0x70ec480*/ int Compare(string string1, string string2, System.Globalization.CompareOptions options);
            /*0x70eca10*/ int Compare(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0x70ece0c*/ int CompareOptionIgnoreCase(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2);
            /*0x70ed038*/ int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x70ed87c*/ bool IsPrefix(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x70edc04*/ bool IsSuffix(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x70edf88*/ bool IsSuffix(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0x70edfec*/ int IndexOf(string source, string value, System.Globalization.CompareOptions options);
            /*0x70ee05c*/ int IndexOf(string source, char value, int startIndex, System.Globalization.CompareOptions options);
            /*0x70ee0cc*/ int IndexOf(string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x70ee4f8*/ int IndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x70ee3a4*/ int IndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x70ee7c8*/ int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x70eeb0c*/ int LastIndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x70eec44*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            /*0x70eedc4*/ bool Equals(object value);
            /*0x70eee84*/ int GetHashCode();
            /*0x70ef2f8*/ int GetHashCodeOfString(string source, System.Globalization.CompareOptions options);
            /*0x70ef4c4*/ int GetHashCode(string source, System.Globalization.CompareOptions options);
            /*0x70ef5c4*/ string ToString();
            /*0x70ef770*/ System.Globalization.ISimpleCollator GetCollator();
            /*0x70efa9c*/ System.Globalization.SortKey CreateSortKeyCore(string source, System.Globalization.CompareOptions options);
            /*0x70efbd4*/ int internal_index_switch(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x70ec914*/ int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x70effa4*/ int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x70efdc4*/ int internal_index_managed(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x70ec1c0*/ void InitSort(System.Globalization.CultureInfo culture);
            /*0x70eec0c*/ int LastIndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x70ee4a4*/ int IndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options, int* matchLengthPtr);
            /*0x70ecda8*/ int CompareString(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0x70ecf48*/ int CompareString(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2, System.Globalization.CompareOptions options);
            /*0x70eed0c*/ System.Globalization.SortKey CreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x70eda90*/ bool StartsWith(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x70ede18*/ bool EndsWith(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x70edf8c*/ bool EndsWith(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0x70ef498*/ int GetHashCodeOfStringCore(string source, System.Globalization.CompareOptions options);
        }

        enum CompareOptions
        {
            None = 0,
            IgnoreCase = 1,
            IgnoreNonSpace = 2,
            IgnoreSymbols = 4,
            IgnoreKanaType = 8,
            IgnoreWidth = 16,
            OrdinalIgnoreCase = 268435456,
            StringSort = 536870912,
            Ordinal = 1073741824,
        }

        class CultureNotFoundException : System.ArgumentException
        {
            /*0x98*/ string _invalidCultureName;
            /*0xa0*/ System.Nullable<int> _invalidCultureId;

            static /*0x70f01c8*/ string get_DefaultMessage();
            /*0x70f017c*/ CultureNotFoundException();
            /*0x70f0208*/ CultureNotFoundException(string paramName, string message);
            /*0x70f021c*/ CultureNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f03b4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x70f04fc*/ System.Nullable<int> get_InvalidCultureId();
            /*0x70f0504*/ string get_InvalidCultureName();
            /*0x70f050c*/ string get_FormatedInvalidCultureId();
            /*0x70f063c*/ string get_Message();
        }

        enum CultureTypes
        {
            NeutralCultures = 1,
            SpecificCultures = 2,
            InstalledWin32Cultures = 4,
            AllCultures = 7,
            UserCustomCulture = 8,
            ReplacementCultures = 16,
            WindowsOnlyCultures = 32,
            FrameworkCultures = 64,
        }

        enum MonthNameStyles
        {
            Regular = 0,
            Genitive = 1,
            LeapYear = 2,
        }

        enum DateTimeFormatFlags
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewRule = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
            NotInitialized = -1,
        }

        class DateTimeFormatInfo : System.IFormatProvider, System.ICloneable
        {
            static string rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            static string sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
            static string universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            static int DEFAULT_ALL_DATETIMES_SIZE = 132;
            static string RoundtripFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK";
            static string RoundtripDateTimeUnfixed = "yyyy'-'MM'-'ddTHH':'mm':'ss zzz";
            static System.Globalization.DateTimeStyles InvalidDateTimeStyles = -256;
            static int TOKEN_HASH_SIZE = 199;
            static int SECOND_PRIME = 197;
            static string dateSeparatorOrTimeZoneOffset = "-";
            static string invariantDateSeparator = "/";
            static string invariantTimeSeparator = ":";
            static string IgnorablePeriod = ".";
            static string IgnorableComma = ",";
            static string CJKYearSuff = "年";
            static string CJKMonthSuff = "月";
            static string CJKDaySuff = "日";
            static string KoreanYearSuff = "년";
            static string KoreanMonthSuff = "월";
            static string KoreanDaySuff = "일";
            static string KoreanHourSuff = "시";
            static string KoreanMinuteSuff = "분";
            static string KoreanSecondSuff = "초";
            static string CJKHourSuff = "時";
            static string ChineseHourSuff = "时";
            static string CJKMinuteSuff = "分";
            static string CJKSecondSuff = "秒";
            static string JapaneseEraStart = "元";
            static string LocalTimeMark = "T";
            static string GMTName = "GMT";
            static string ZuluName = "Z";
            static string KoreanLangName = "ko";
            static string JapaneseLangName = "ja";
            static string EnglishLangName = "en";
            static /*0x0*/ System.Globalization.DateTimeFormatInfo s_invariantInfo;
            static /*0x8*/ char[] s_monthSpaces;
            static /*0x10*/ System.Globalization.DateTimeFormatInfo s_jajpDTFI;
            static /*0x18*/ System.Globalization.DateTimeFormatInfo s_zhtwDTFI;
            /*0x10*/ System.Globalization.CultureData _cultureData;
            /*0x18*/ string _name;
            /*0x20*/ string _langName;
            /*0x28*/ System.Globalization.CompareInfo _compareInfo;
            /*0x30*/ System.Globalization.CultureInfo _cultureInfo;
            /*0x38*/ string amDesignator;
            /*0x40*/ string pmDesignator;
            /*0x48*/ string dateSeparator;
            /*0x50*/ string generalShortTimePattern;
            /*0x58*/ string generalLongTimePattern;
            /*0x60*/ string timeSeparator;
            /*0x68*/ string monthDayPattern;
            /*0x70*/ string dateTimeOffsetPattern;
            /*0x78*/ System.Globalization.Calendar calendar;
            /*0x80*/ int firstDayOfWeek;
            /*0x84*/ int calendarWeekRule;
            /*0x88*/ string fullDateTimePattern;
            /*0x90*/ string[] abbreviatedDayNames;
            /*0x98*/ string[] m_superShortDayNames;
            /*0xa0*/ string[] dayNames;
            /*0xa8*/ string[] abbreviatedMonthNames;
            /*0xb0*/ string[] monthNames;
            /*0xb8*/ string[] genitiveMonthNames;
            /*0xc0*/ string[] m_genitiveAbbreviatedMonthNames;
            /*0xc8*/ string[] leapYearMonthNames;
            /*0xd0*/ string longDatePattern;
            /*0xd8*/ string shortDatePattern;
            /*0xe0*/ string yearMonthPattern;
            /*0xe8*/ string longTimePattern;
            /*0xf0*/ string shortTimePattern;
            /*0xf8*/ string[] allYearMonthPatterns;
            /*0x100*/ string[] allShortDatePatterns;
            /*0x108*/ string[] allLongDatePatterns;
            /*0x110*/ string[] allShortTimePatterns;
            /*0x118*/ string[] allLongTimePatterns;
            /*0x120*/ string[] m_eraNames;
            /*0x128*/ string[] m_abbrevEraNames;
            /*0x130*/ string[] m_abbrevEnglishEraNames;
            /*0x138*/ System.Globalization.CalendarId[] optionalCalendars;
            /*0x140*/ bool _isReadOnly;
            /*0x144*/ System.Globalization.DateTimeFormatFlags formatFlags;
            /*0x148*/ string _fullTimeSpanPositivePattern;
            /*0x150*/ string _fullTimeSpanNegativePattern;
            /*0x158*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] _dtfiTokenHash;

            static /*0x70f65ac*/ DateTimeFormatInfo();
            static /*0x70f1078*/ System.Globalization.DateTimeFormatInfo get_InvariantInfo();
            static /*0x70f1158*/ System.Globalization.DateTimeFormatInfo get_CurrentInfo();
            static /*0x70f1258*/ System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider);
            static /*0x70f2870*/ string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString);
            static /*0x70f3264*/ string[] GetMergedPatterns(string[] patterns, string defaultPattern);
            static /*0x70f3694*/ void ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
            static /*0x70f3b6c*/ System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI();
            static /*0x70f3d08*/ System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI();
            static /*0x70f56f4*/ bool IsJapaneseCalendar(System.Globalization.Calendar calendar);
            static /*0x70f581c*/ bool TryParseHebrewNumber(ref System.__DTString str, ref bool badFormat, ref int number);
            static /*0x70f5bf8*/ bool IsHebrewChar(char ch);
            /*0x70f09bc*/ DateTimeFormatInfo();
            /*0x70f0c2c*/ DateTimeFormatInfo(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal);
            /*0x70f06f8*/ string get_CultureName();
            /*0x70f0734*/ System.Globalization.CultureInfo get_Culture();
            /*0x70f07c0*/ string get_LanguageName();
            /*0x70f07fc*/ string[] internalGetAbbreviatedDayOfWeekNames();
            /*0x70f0810*/ string[] internalGetAbbreviatedDayOfWeekNamesCore();
            /*0x70f086c*/ string[] internalGetDayOfWeekNames();
            /*0x70f0880*/ string[] internalGetDayOfWeekNamesCore();
            /*0x70f08dc*/ string[] internalGetAbbreviatedMonthNames();
            /*0x70f08f0*/ string[] internalGetAbbreviatedMonthNamesCore();
            /*0x70f094c*/ string[] internalGetMonthNames();
            /*0x70f0960*/ string[] internalGetMonthNamesCore();
            /*0x70f0aac*/ void InitializeOverridableProperties(System.Globalization.CultureData cultureData, int calendarId);
            /*0x70f13fc*/ object GetFormat(System.Type formatType);
            /*0x70f1488*/ object Clone();
            /*0x70f15a0*/ string get_AMDesignator();
            /*0x70f15dc*/ System.Globalization.Calendar get_Calendar();
            /*0x70f0c7c*/ void set_Calendar(System.Globalization.Calendar value);
            /*0x70f1688*/ System.Globalization.CalendarId[] get_OptionalCalendars();
            /*0x70f16f8*/ string[] get_EraNames();
            /*0x70f1760*/ string GetEraName(int era);
            /*0x70f1838*/ string[] get_AbbreviatedEraNames();
            /*0x70f18a0*/ string GetAbbreviatedEraName(int era);
            /*0x70f1988*/ string[] get_AbbreviatedEnglishEraNames();
            /*0x70f19f0*/ string get_DateSeparator();
            /*0x70f1a5c*/ string get_FullDateTimePattern();
            /*0x70f1ae4*/ string get_LongDatePattern();
            /*0x70f1b30*/ string get_LongTimePattern();
            /*0x70f1c2c*/ string get_MonthDayPattern();
            /*0x70f1c98*/ string get_PMDesignator();
            /*0x70f1cd4*/ string get_RFC1123Pattern();
            /*0x70f1d14*/ string get_ShortDatePattern();
            /*0x70f1dc8*/ string get_ShortTimePattern();
            /*0x70f1e5c*/ string get_SortableDateTimePattern();
            /*0x70f1e9c*/ string get_GeneralShortTimePattern();
            /*0x70f1f24*/ string get_GeneralLongTimePattern();
            /*0x70f1fac*/ string get_DateTimeOffsetPattern();
            /*0x70f2158*/ string get_TimeSeparator();
            /*0x70f2194*/ string get_UniversalSortableDateTimePattern();
            /*0x70f21d4*/ string get_YearMonthPattern();
            /*0x70f228c*/ string[] get_AbbreviatedDayNames();
            /*0x70f2310*/ string[] get_DayNames();
            /*0x70f2394*/ string[] get_AbbreviatedMonthNames();
            /*0x70f2418*/ string[] get_MonthNames();
            /*0x70f249c*/ bool get_HasSpacesInMonthNames();
            /*0x70f24dc*/ bool get_HasSpacesInDayNames();
            /*0x70f2504*/ string internalGetMonthName(int month, System.Globalization.MonthNameStyles style, bool abbreviated);
            /*0x70f2660*/ string[] internalGetGenitiveMonthNames(bool abbreviated);
            /*0x70f2708*/ string[] internalGetLeapYearMonthNames();
            /*0x70f2774*/ string GetAbbreviatedDayName(System.DayOfWeek dayofweek);
            /*0x70f29bc*/ string[] GetAllDateTimePatterns(char format);
            /*0x70f2f78*/ string GetDayName(System.DayOfWeek dayofweek);
            /*0x70f3074*/ string GetAbbreviatedMonthName(int month);
            /*0x70f316c*/ string GetMonthName(int month);
            /*0x70f2f04*/ string[] get_AllYearMonthPatterns();
            /*0x70f2d34*/ string[] get_AllShortDatePatterns();
            /*0x70f2e1c*/ string[] get_AllShortTimePatterns();
            /*0x70f2da8*/ string[] get_AllLongDatePatterns();
            /*0x70f2e90*/ string[] get_AllLongTimePatterns();
            /*0x70f2220*/ string[] get_UnclonedYearMonthPatterns();
            /*0x70f1d60*/ string[] get_UnclonedShortDatePatterns();
            /*0x70f1b7c*/ string[] get_UnclonedLongDatePatterns();
            /*0x70f1e14*/ string[] get_UnclonedShortTimePatterns();
            /*0x70f1be4*/ string[] get_UnclonedLongTimePatterns();
            /*0x70f15e4*/ bool get_IsReadOnly();
            /*0x70f3424*/ string[] get_MonthGenitiveNames();
            /*0x70f34a4*/ string get_FullTimeSpanPositivePattern();
            /*0x70f3584*/ string get_FullTimeSpanNegativePattern();
            /*0x70f3600*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x70f24c4*/ System.Globalization.DateTimeFormatFlags get_FormatFlags();
            /*0x70f3760*/ System.Globalization.DateTimeFormatFlags InitializeFormatFlags();
            /*0x70f39dc*/ bool get_HasForceTwoDigitYears();
            /*0x70f3a10*/ bool get_HasYearMonthAdjustment();
            /*0x70f3a38*/ bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName);
            /*0x70f16d0*/ void ClearTokenHashTable();
            /*0x70f3ea4*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] CreateTokenHashTable();
            /*0x70f4a3c*/ void PopulateSpecialTokenHashTable(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, ref bool useDateSepAsIgnorableSymbol);
            /*0x70f5314*/ void AddMonthNames(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, string monthPostfix);
            /*0x70f5c0c*/ bool IsAllowedJapaneseTokenFollowedByNonSpaceLetter(string tokenString, char nextCh);
            /*0x70f5d14*/ bool Tokenize(System.TokenType TokenMask, ref System.TokenType tokenType, ref int tokenValue, ref System.__DTString str);
            /*0x70f62a0*/ void InsertAtCurrentHashNode(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, char ch, System.TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
            /*0x70f4720*/ void InsertHash(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, System.TokenType tokenType, int tokenValue);
            /*0x70f64b8*/ bool CompareStringIgnoreCaseOptimized(string string1, int offset1, int length1, string string2, int offset2, int length2);

            class TokenHashValue
            {
                /*0x10*/ string tokenString;
                /*0x18*/ System.TokenType tokenType;
                /*0x1c*/ int tokenValue;

                /*0x70f6470*/ TokenHashValue(string tokenString, System.TokenType tokenType, int tokenValue);
            }
        }

        enum FORMATFLAGS
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewParsing = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
        }

        enum CalendarId
        {
            UNINITIALIZED_VALUE = 0,
            GREGORIAN = 1,
            GREGORIAN_US = 2,
            JAPAN = 3,
            TAIWAN = 4,
            KOREA = 5,
            HIJRI = 6,
            THAI = 7,
            HEBREW = 8,
            GREGORIAN_ME_FRENCH = 9,
            GREGORIAN_ARABIC = 10,
            GREGORIAN_XLIT_ENGLISH = 11,
            GREGORIAN_XLIT_FRENCH = 12,
            JULIAN = 13,
            JAPANESELUNISOLAR = 14,
            CHINESELUNISOLAR = 15,
            SAKA = 16,
            LUNAR_ETO_CHN = 17,
            LUNAR_ETO_KOR = 18,
            LUNAR_ETO_ROKUYOU = 19,
            KOREANLUNISOLAR = 20,
            TAIWANLUNISOLAR = 21,
            PERSIAN = 22,
            UMALQURA = 23,
            LAST_CALENDAR = 23,
        }

        class DateTimeFormatInfoScanner
        {
            static /*0x0*/ System.Collections.Generic.Dictionary<string, string> s_knownWords;
            /*0x10*/ System.Collections.Generic.List<string> m_dateWords;
            /*0x18*/ System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern _ymdFlags;

            static /*0x70f6644*/ System.Collections.Generic.Dictionary<string, string> get_KnownWords();
            static /*0x70f6a30*/ int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex);
            static /*0x70f7134*/ int ScanRepeatChar(string pattern, char ch, int index, ref int count);
            static /*0x70f389c*/ System.Globalization.FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x70f38dc*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x70f399c*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames);
            static /*0x70f39cc*/ System.Globalization.FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID);
            static /*0x70f73e8*/ bool EqualStringArrays(string[] array1, string[] array2);
            static /*0x70f76f4*/ bool ArrayElementsHaveSpace(string[] array);
            static /*0x70f7498*/ bool ArrayElementsBeginWithDigit(string[] array);
            /*0x70f53c0*/ DateTimeFormatInfoScanner();
            /*0x70f6b0c*/ void AddDateWordOrPostfix(string formatPostfix, string str);
            /*0x70f6f60*/ int AddDateWords(string pattern, int index, string formatPostfix);
            /*0x70f6dec*/ void AddIgnorableSymbols(string text);
            /*0x70f71b8*/ void ScanDateWord(string pattern);
            /*0x70f5448*/ string[] GetDateWordsOfDTFI(System.Globalization.DateTimeFormatInfo dtfi);

            enum FoundDatePattern
            {
                None = 0,
                FoundYearPatternFlag = 1,
                FoundMonthPatternFlag = 2,
                FoundDayPatternFlag = 4,
                FoundYMDPatternFlag = 7,
            }
        }

        enum DateTimeStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowInnerWhite = 4,
            AllowWhiteSpaces = 7,
            NoCurrentDateDefault = 8,
            AdjustToUniversal = 16,
            AssumeLocal = 32,
            AssumeUniversal = 64,
            RoundtripKind = 128,
        }

        class DaylightTime
        {
            /*0x10*/ System.DateTime _start;
            /*0x18*/ System.DateTime _end;
            /*0x20*/ System.TimeSpan _delta;

            /*0x70f77cc*/ DaylightTime(System.DateTime start, System.DateTime end, System.TimeSpan delta);
            /*0x70f7808*/ System.DateTime get_Start();
            /*0x70f7810*/ System.DateTime get_End();
            /*0x70f7818*/ System.TimeSpan get_Delta();
        }

        struct DaylightTimeStruct
        {
            /*0x10*/ System.DateTime Start;
            /*0x18*/ System.DateTime End;
            /*0x20*/ System.TimeSpan Delta;

            /*0x70f7820*/ DaylightTimeStruct(System.DateTime start, System.DateTime end, System.TimeSpan delta);
        }

        struct HebrewNumberParsingContext
        {
            /*0x10*/ System.Globalization.HebrewNumber.HS state;
            /*0x14*/ int result;

            /*0x70f5a54*/ HebrewNumberParsingContext(int result);
        }

        enum HebrewNumberParsingState
        {
            InvalidHebrewNumber = 0,
            NotHebrewDigit = 1,
            FoundEndOfHebrewNumber = 2,
            ContinueParsing = 3,
        }

        class HebrewNumber
        {
            static /*0x0*/ System.Globalization.HebrewNumber.HebrewValue[] s_hebrewValues;
            static /*0x8*/ char s_maxHebrewNumberCh;
            static /*0x10*/ System.Globalization.HebrewNumber.HS[] s_numberPasingState;

            static /*0x70f7ab0*/ HebrewNumber();
            static /*0x70f782c*/ string ToString(int Number);
            static /*0x70f5a60*/ System.Globalization.HebrewNumberParsingState ParseByChar(char ch, ref System.Globalization.HebrewNumberParsingContext context);
            static /*0x70f5984*/ bool IsDigit(char ch);

            enum HebrewToken
            {
                Invalid = -1,
                Digit400 = 0,
                Digit200_300 = 1,
                Digit100 = 2,
                Digit10 = 3,
                Digit1 = 4,
                Digit6_7 = 5,
                Digit7 = 6,
                Digit9 = 7,
                SingleQuote = 8,
                DoubleQuote = 9,
            }

            struct HebrewValue
            {
                /*0x10*/ System.Globalization.HebrewNumber.HebrewToken token;
                /*0x12*/ short value;

                /*0x70f7d74*/ HebrewValue(System.Globalization.HebrewNumber.HebrewToken token, short value);
            }

            enum HS
            {
                _err = -1,
                Start = 0,
                S400 = 1,
                S400_400 = 2,
                S400_X00 = 3,
                S400_X0 = 4,
                X00_DQ = 5,
                S400_X00_X0 = 6,
                X0_DQ = 7,
                X = 8,
                X0 = 9,
                X00 = 10,
                S400_DQ = 11,
                S400_400_DQ = 12,
                S400_400_100 = 13,
                S9 = 14,
                X00_S9 = 15,
                S9_DQ = 16,
                END = 100,
            }
        }

        enum NumberStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowLeadingSign = 4,
            AllowTrailingSign = 8,
            AllowParentheses = 16,
            AllowDecimalPoint = 32,
            AllowThousands = 64,
            AllowExponent = 128,
            AllowCurrencySymbol = 256,
            AllowHexSpecifier = 512,
            Integer = 7,
            HexNumber = 515,
            Number = 111,
            Float = 167,
            Currency = 383,
            Any = 511,
        }

        class SortVersion
        {
        }

        class TimeSpanFormat
        {
            static /*0x0*/ System.Globalization.TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals;
            static /*0x28*/ System.Globalization.TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals;

            static /*0x70f946c*/ TimeSpanFormat();
            static /*0x70f7d80*/ void AppendNonNegativeInt32(System.Text.StringBuilder sb, int n, int digits);
            static /*0x70f7e78*/ string Format(System.TimeSpan value, string format, System.IFormatProvider formatProvider);
            static /*0x70f8208*/ bool TryFormat(System.TimeSpan value, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0x70f7f30*/ System.Text.StringBuilder FormatToBuilder(System.TimeSpan value, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0x70f8328*/ System.Text.StringBuilder FormatStandard(System.TimeSpan value, bool isInvariant, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanFormat.Pattern pattern);
            static /*0x70f8804*/ System.Text.StringBuilder FormatCustomized(System.TimeSpan value, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Text.StringBuilder result);

            enum Pattern
            {
                None = 0,
                Minimum = 1,
                Full = 2,
            }

            struct FormatLiterals
            {
                /*0x10*/ string AppCompatLiteral;
                /*0x18*/ int dd;
                /*0x1c*/ int hh;
                /*0x20*/ int mm;
                /*0x24*/ int ss;
                /*0x28*/ int ff;
                /*0x30*/ string[] _literals;

                static /*0x70f951c*/ System.Globalization.TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative);
                /*0x70f9368*/ string get_Start();
                /*0x70f9390*/ string get_DayHourSep();
                /*0x70f93bc*/ string get_HourMinuteSep();
                /*0x70f93e8*/ string get_MinuteSecondSep();
                /*0x70f9414*/ string get_SecondFractionSep();
                /*0x70f9440*/ string get_End();
                /*0x70f8f28*/ void Init(System.ReadOnlySpan<char> format, bool useInvariantFieldLengths);
            }
        }

        class TimeSpanParse
        {
            static /*0x70f92d8*/ long Pow10(int pow);
            static /*0x70f9704*/ bool TryTimeToTicks(bool positive, System.Globalization.TimeSpanParse.TimeSpanToken days, System.Globalization.TimeSpanParse.TimeSpanToken hours, System.Globalization.TimeSpanParse.TimeSpanToken minutes, System.Globalization.TimeSpanParse.TimeSpanToken seconds, System.Globalization.TimeSpanParse.TimeSpanToken fraction, ref long result);
            static /*0x70f9864*/ System.TimeSpan Parse(System.ReadOnlySpan<char> input, System.IFormatProvider formatProvider);
            static /*0x70f9a60*/ bool TryParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, ref System.TimeSpan result);
            static /*0x70f98bc*/ bool TryParseTimeSpan(System.ReadOnlySpan<char> input, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, System.IFormatProvider formatProvider, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70f9c80*/ bool ProcessTerminalState(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70fb81c*/ bool ProcessTerminal_DHMSF(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70fad78*/ bool ProcessTerminal_HMS_F_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70fa2f4*/ bool ProcessTerminal_HM_S_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70fa054*/ bool ProcessTerminal_HM(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70f9dbc*/ bool ProcessTerminal_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70f9af4*/ bool TryParseExactTimeSpan(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70fbaec*/ bool TryParseByFormat(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanStyles styles, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x70fc198*/ bool ParseExactDigits(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, int minDigitLength, ref int result);
            static /*0x70fc1cc*/ bool ParseExactDigits(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, int minDigitLength, int maxDigitLength, ref int zeroes, ref int result);
            static /*0x70fc290*/ bool ParseExactLiteral(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, System.Text.StringBuilder enquotedString);
            static /*0x70fbab4*/ bool TryParseTimeSpanConstant(System.ReadOnlySpan<char> input, ref System.Globalization.TimeSpanParse.TimeSpanResult result);

            enum ParseFailureKind
            {
                None = 0,
                ArgumentNull = 1,
                Format = 2,
                FormatWithParameter = 3,
                Overflow = 4,
            }

            enum TimeSpanStandardStyles
            {
                None = 0,
                Invariant = 1,
                Localized = 2,
                RequireFull = 4,
                Any = 3,
            }

            enum TTT
            {
                None = 0,
                End = 1,
                Num = 2,
                Sep = 3,
                NumOverflow = 4,
            }

            struct TimeSpanToken
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _ttt;
                /*0x14*/ int _num;
                /*0x18*/ int _zeroes;
                /*0x20*/ System.ReadOnlySpan<char> _sep;

                /*0x71197f4*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type);
                /*0x7119814*/ TimeSpanToken(int number);
                /*0x7119828*/ TimeSpanToken(int number, int leadingZeroes);
                /*0x7119804*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type, int number, int leadingZeroes, System.ReadOnlySpan<char> separator);
                /*0x711983c*/ bool IsInvalidFraction();
            }

            struct TimeSpanTokenizer
            {
                /*0x10*/ System.ReadOnlySpan<char> _value;
                /*0x20*/ int _pos;

                /*0x711989c*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input);
                /*0x71198a8*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input, int startPosition);
                /*0x71198b4*/ System.Globalization.TimeSpanParse.TimeSpanToken GetNextToken();
                /*0x7119b24*/ bool get_EOL();
                /*0x7119b70*/ void BackOne();
                /*0x7119b84*/ char get_NextChar();
            }

            struct TimeSpanRawInfo
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _lastSeenTTT;
                /*0x14*/ int _tokenCount;
                /*0x18*/ int _sepCount;
                /*0x1c*/ int _numCount;
                /*0x20*/ System.Globalization.TimeSpanFormat.FormatLiterals _posLoc;
                /*0x48*/ System.Globalization.TimeSpanFormat.FormatLiterals _negLoc;
                /*0x70*/ bool _posLocInit;
                /*0x71*/ bool _negLocInit;
                /*0x78*/ string _fullPosPattern;
                /*0x80*/ string _fullNegPattern;
                /*0x88*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers0;
                /*0xa8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers1;
                /*0xc8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers2;
                /*0xe8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers3;
                /*0x108*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers4;
                /*0x128*/ System.ReadOnlySpan<char> _literals0;
                /*0x138*/ System.ReadOnlySpan<char> _literals1;
                /*0x148*/ System.ReadOnlySpan<char> _literals2;
                /*0x158*/ System.ReadOnlySpan<char> _literals3;
                /*0x168*/ System.ReadOnlySpan<char> _literals4;
                /*0x178*/ System.ReadOnlySpan<char> _literals5;

                /*0x7119be4*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveInvariant();
                /*0x7119c4c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeInvariant();
                /*0x7119cb8*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveLocalized();
                /*0x7119d6c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeLocalized();
                /*0x7119e24*/ bool FullAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711a1d4*/ bool PartialAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711a4dc*/ bool FullMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711a940*/ bool FullDMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711ab04*/ bool FullHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711ad70*/ bool FullDHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711b084*/ bool FullHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711b398*/ bool FullDHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711b754*/ bool FullHMSFMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x711bb10*/ void Init(System.Globalization.DateTimeFormatInfo dtfi);
                /*0x711bb64*/ bool ProcessToken(ref System.Globalization.TimeSpanParse.TimeSpanToken tok, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x711bc74*/ bool AddSep(System.ReadOnlySpan<char> sep, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x711bd80*/ bool AddNum(System.Globalization.TimeSpanParse.TimeSpanToken num, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            }

            struct TimeSpanResult
            {
                /*0x10*/ System.TimeSpan parsedTimeSpan;
                /*0x18*/ bool _throwOnFailure;

                /*0x711bfb8*/ TimeSpanResult(bool throwOnFailure);
                /*0x711be90*/ bool SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind kind, string resourceKey, object messageArgument, string argumentName);
            }

            struct StringParser
            {
                /*0x10*/ System.ReadOnlySpan<char> _str;
                /*0x20*/ char _ch;
                /*0x24*/ int _pos;
                /*0x28*/ int _len;

                /*0x711bfc8*/ void NextChar();
                /*0x711c014*/ char NextNonDigit();
                /*0x711c070*/ bool TryParse(System.ReadOnlySpan<char> input, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x711c43c*/ bool ParseInt(int max, ref int i, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x711c27c*/ bool ParseTime(ref long time, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x711c24c*/ void SkipBlanks();
            }
        }

        enum TimeSpanStyles
        {
            None = 0,
            AssumeNegative = 1,
        }

        enum UnicodeCategory
        {
            UppercaseLetter = 0,
            LowercaseLetter = 1,
            TitlecaseLetter = 2,
            ModifierLetter = 3,
            OtherLetter = 4,
            NonSpacingMark = 5,
            SpacingCombiningMark = 6,
            EnclosingMark = 7,
            DecimalDigitNumber = 8,
            LetterNumber = 9,
            OtherNumber = 10,
            SpaceSeparator = 11,
            LineSeparator = 12,
            ParagraphSeparator = 13,
            Control = 14,
            Format = 15,
            Surrogate = 16,
            PrivateUse = 17,
            ConnectorPunctuation = 18,
            DashPunctuation = 19,
            OpenPunctuation = 20,
            ClosePunctuation = 21,
            InitialQuotePunctuation = 22,
            FinalQuotePunctuation = 23,
            OtherPunctuation = 24,
            MathSymbol = 25,
            CurrencySymbol = 26,
            ModifierSymbol = 27,
            OtherSymbol = 28,
            OtherNotAssigned = 29,
        }

        class GlobalizationMode
        {
            static /*0x0*/ bool <Invariant>k__BackingField;

            static /*0x711c5b4*/ GlobalizationMode();
            static /*0x711c554*/ bool get_Invariant();
            static /*0x711c5ac*/ bool GetGlobalizationInvariantMode();
        }

        class Calendar : System.ICloneable
        {
            /*0x10*/ int m_currentEraValue;
            /*0x14*/ bool m_isReadOnly;
            /*0x18*/ int twoDigitYearMax;

            static /*0x711cd40*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            static /*0x711cee8*/ int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue);
            /*0x711c6ac*/ Calendar();
            /*0x711c5fc*/ System.DateTime get_MinSupportedDateTime();
            /*0x711c654*/ System.DateTime get_MaxSupportedDateTime();
            /*0x711c6c0*/ int get_ID();
            /*0x711c6c8*/ int get_BaseCalendarID();
            /*0x711c6d4*/ object Clone();
            /*0x711c75c*/ void VerifyWritable();
            /*0x711c7c8*/ void SetReadOnlyState(bool readOnly);
            /*0x711c7d4*/ int get_CurrentEraValue();
            int GetDayOfMonth(System.DateTime time);
            System.DayOfWeek GetDayOfWeek(System.DateTime time);
            int GetDaysInMonth(int year, int month, int era);
            /*0x380b710*/ int GetDaysInYear(int year, int era);
            int GetEra(System.DateTime time);
            /*0x380b9e8*/ int[] get_Eras();
            int GetMonth(System.DateTime time);
            /*0x380b710*/ int GetMonthsInYear(int year, int era);
            int GetYear(System.DateTime time);
            /*0x711c904*/ bool IsLeapYear(int year);
            bool IsLeapYear(int year, int era);
            /*0x711c918*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
            System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x711c940*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x711caa0*/ bool IsValidYear(int year, int era);
            /*0x711cb24*/ bool IsValidMonth(int year, int month, int era);
            /*0x711cb9c*/ bool IsValidDay(int year, int month, int day, int era);
            /*0x711cc1c*/ int get_TwoDigitYearMax();
            /*0x711cc24*/ void set_TwoDigitYearMax(int value);
            /*0x711cc48*/ int ToFourDigitYear(int year);
        }

        class CalendarData
        {
            static int MAX_CALENDARS = 23;
            static /*0x0*/ System.Globalization.CalendarData Invariant;
            static /*0x8*/ string[] HEBREW_MONTH_NAMES;
            static /*0x10*/ string[] HEBREW_LEAP_MONTH_NAMES;
            /*0x10*/ string sNativeName;
            /*0x18*/ string[] saShortDates;
            /*0x20*/ string[] saYearMonths;
            /*0x28*/ string[] saLongDates;
            /*0x30*/ string sMonthDay;
            /*0x38*/ string[] saEraNames;
            /*0x40*/ string[] saAbbrevEraNames;
            /*0x48*/ string[] saAbbrevEnglishEraNames;
            /*0x50*/ string[] saDayNames;
            /*0x58*/ string[] saAbbrevDayNames;
            /*0x60*/ string[] saSuperShortDayNames;
            /*0x68*/ string[] saMonthNames;
            /*0x70*/ string[] saAbbrevMonthNames;
            /*0x78*/ string[] saMonthGenitiveNames;
            /*0x80*/ string[] saAbbrevMonthGenitiveNames;
            /*0x88*/ string[] saLeapYearMonthNames;
            /*0x90*/ int iTwoDigitYearMax;
            /*0x94*/ int iCurrentEra;
            /*0x98*/ bool bUseUserOverrides;

            static /*0x711cf54*/ CalendarData();
            static /*0x711f0c8*/ string[] GetJapaneseEraNames();
            static /*0x711efe4*/ string[] GetJapaneseEnglishEraNames();
            static /*0x711c860*/ System.Globalization.CalendarData GetCalendarData(int calendarId);
            static /*0x711f394*/ string CalendarIdToCultureName(int calendarId);
            static /*0x711cf3c*/ int nativeGetTwoDigitYearMax(int calID);
            static /*0x711e748*/ bool nativeGetCalendarData(System.Globalization.CalendarData data, string localeName, int calendarId);
            /*0x711cf44*/ CalendarData();
            /*0x711e148*/ CalendarData(string localeName, int calendarId, bool bUseUserOverrides);
            /*0x711e820*/ void InitializeEraNames(string localeName, int calendarId);
            /*0x711ec78*/ void InitializeAbbreviatedEraNames(string localeName, int calendarId);
            /*0x711f590*/ bool fill_calendar_data(string localeName, int datetimeIndex);
        }

        class GregorianCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x1c*/ System.Globalization.GregorianCalendarTypes m_type;

            static /*0x7120ad4*/ GregorianCalendar();
            static /*0x711f718*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x711fb70*/ long GetAbsoluteDate(int year, int month, int day);
            /*0x711f7ec*/ GregorianCalendar();
            /*0x711f818*/ GregorianCalendar(System.Globalization.GregorianCalendarTypes type);
            /*0x711f594*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x711f668*/ System.DateTime get_MinSupportedDateTime();
            /*0x711f6c0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x711f968*/ int get_ID();
            /*0x711f970*/ int GetDatePart(long ticks, int part);
            /*0x711fd60*/ int GetDayOfMonth(System.DateTime time);
            /*0x711fde4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x711fe8c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7120124*/ int GetDaysInYear(int year, int era);
            /*0x71202a8*/ int GetEra(System.DateTime time);
            /*0x71202b0*/ int[] get_Eras();
            /*0x7120314*/ int GetMonth(System.DateTime time);
            /*0x7120398*/ int GetMonthsInYear(int year, int era);
            /*0x71204d8*/ int GetYear(System.DateTime time);
            /*0x712055c*/ bool IsLeapYear(int year, int era);
            /*0x71206e8*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x7120784*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x7120870*/ int get_TwoDigitYearMax();
            /*0x71208b4*/ void set_TwoDigitYearMax(int value);
            /*0x71209c0*/ int ToFourDigitYear(int year);
        }

        class EraInfo
        {
            /*0x10*/ int era;
            /*0x18*/ long ticks;
            /*0x20*/ int yearOffset;
            /*0x24*/ int minEraYear;
            /*0x28*/ int maxEraYear;
            /*0x30*/ string eraName;
            /*0x38*/ string abbrevEraName;
            /*0x40*/ string englishEraName;

            /*0x7120bb8*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear);
            /*0x7120c9c*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName);
        }

        class GregorianCalendarHelper
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            /*0x10*/ int m_maxYear;
            /*0x14*/ int m_minYear;
            /*0x18*/ System.Globalization.Calendar m_Cal;
            /*0x20*/ System.Globalization.EraInfo[] m_EraInfo;
            /*0x28*/ int[] m_eras;
            /*0x30*/ System.DateTime m_minDate;

            static /*0x7122398*/ GregorianCalendarHelper();
            static /*0x712156c*/ long GetAbsoluteDate(int year, int month, int day);
            static /*0x712175c*/ long DateToTicks(int year, int month, int day);
            static /*0x71217dc*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            /*0x7120dc0*/ GregorianCalendarHelper(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo);
            /*0x7120db8*/ int get_MaxYear();
            /*0x7120e60*/ int GetYearOffset(int year, int era, bool throwOnError);
            /*0x7121140*/ int GetGregorianYear(int year, int era);
            /*0x712115c*/ bool IsValidYear(int year, int era);
            /*0x7121178*/ int GetDatePart(long ticks, int part);
            /*0x7121388*/ void CheckTicksRange(long ticks);
            /*0x7121984*/ int GetDayOfMonth(System.DateTime time);
            /*0x7121a04*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x7121ad0*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7121c6c*/ int GetDaysInYear(int year, int era);
            /*0x7121cd8*/ int GetEra(System.DateTime time);
            /*0x7121de0*/ int[] get_Eras();
            /*0x7121ee8*/ int GetMonth(System.DateTime time);
            /*0x7121f68*/ int GetMonthsInYear(int year, int era);
            /*0x7121f80*/ int GetYear(System.DateTime time);
            /*0x71220a8*/ bool IsLeapYear(int year, int era);
            /*0x7122118*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x712221c*/ int ToFourDigitYear(int year, int twoDigitYearMax);
        }

        enum GregorianCalendarTypes
        {
            Localized = 1,
            USEnglish = 2,
            MiddleEastFrench = 9,
            Arabic = 10,
            TransliteratedEnglish = 11,
            TransliteratedFrench = 12,
        }

        class HijriCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int HijriEra;
            static /*0x8*/ int[] HijriMonthDays;
            static /*0x10*/ System.DateTime calendarMinValue;
            static /*0x18*/ System.DateTime calendarMaxValue;
            /*0x1c*/ int m_HijriAdvance;

            static /*0x712394c*/ HijriCalendar();
            static /*0x712273c*/ int GetAdvanceHijriDate();
            static /*0x7122744*/ void CheckTicksRange(long ticks);
            static /*0x7122924*/ void CheckEraRange(int era);
            static /*0x71229f0*/ void CheckYearRange(int year, int era);
            static /*0x7122b3c*/ void CheckYearMonthRange(int year, int month, int era);
            /*0x712252c*/ HijriCalendar();
            /*0x712247c*/ System.DateTime get_MinSupportedDateTime();
            /*0x71224d4*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7122548*/ int get_ID();
            /*0x7122550*/ long GetAbsoluteDateHijri(int y, int m, int d);
            /*0x7122618*/ long DaysUpToHijriYear(int HijriYear);
            /*0x71226d4*/ int get_HijriAdjustment();
            /*0x7122cb8*/ int GetDatePart(long ticks, int part);
            /*0x7122f28*/ int GetDayOfMonth(System.DateTime time);
            /*0x7122fac*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x7123054*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7123120*/ int GetDaysInYear(int year, int era);
            /*0x71231b4*/ int GetEra(System.DateTime time);
            /*0x7123250*/ int[] get_Eras();
            /*0x71232ec*/ int GetMonth(System.DateTime time);
            /*0x7123370*/ int GetMonthsInYear(int year, int era);
            /*0x71233dc*/ int GetYear(System.DateTime time);
            /*0x7123460*/ bool IsLeapYear(int year, int era);
            /*0x7123500*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x71236cc*/ int get_TwoDigitYearMax();
            /*0x7123710*/ void set_TwoDigitYearMax(int value);
            /*0x712381c*/ int ToFourDigitYear(int year);
        }

        class JapaneseCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.DateTime calendarMinValue;
            static /*0x8*/ System.Globalization.EraInfo[] japaneseEraInfo;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x7124658*/ JapaneseCalendar();
            static /*0x7123b18*/ System.Globalization.EraInfo[] GetEraInfo();
            static /*0x7123fd0*/ System.Globalization.EraInfo[] GetErasFromRegistry();
            static /*0x7123fd8*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x711f1ac*/ string[] EraNames();
            static /*0x711f2a0*/ string[] EnglishEraNames();
            /*0x7124094*/ JapaneseCalendar();
            /*0x7123a68*/ System.DateTime get_MinSupportedDateTime();
            /*0x7123ac0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7124254*/ int get_ID();
            /*0x712425c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7124274*/ int GetDaysInYear(int year, int era);
            /*0x712428c*/ int GetDayOfMonth(System.DateTime time);
            /*0x71242a4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x71242bc*/ int GetMonthsInYear(int year, int era);
            /*0x71242e0*/ int GetEra(System.DateTime time);
            /*0x71242f8*/ int GetMonth(System.DateTime time);
            /*0x7124310*/ int GetYear(System.DateTime time);
            /*0x7124328*/ bool IsLeapYear(int year, int era);
            /*0x7124340*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x7124360*/ int ToFourDigitYear(int year);
            /*0x71244a4*/ int[] get_Eras();
            /*0x71244bc*/ bool IsValidYear(int year, int era);
            /*0x71244e4*/ int get_TwoDigitYearMax();
            /*0x7124528*/ void set_TwoDigitYearMax(int value);
        }

        class NumberFormatInfo : System.ICloneable, System.IFormatProvider
        {
            static System.Globalization.NumberStyles InvalidNumberStyles = -1024;
            static /*0x0*/ System.Globalization.NumberFormatInfo invariantInfo;
            /*0x10*/ int[] numberGroupSizes;
            /*0x18*/ int[] currencyGroupSizes;
            /*0x20*/ int[] percentGroupSizes;
            /*0x28*/ string positiveSign;
            /*0x30*/ string negativeSign;
            /*0x38*/ string numberDecimalSeparator;
            /*0x40*/ string numberGroupSeparator;
            /*0x48*/ string currencyGroupSeparator;
            /*0x50*/ string currencyDecimalSeparator;
            /*0x58*/ string currencySymbol;
            /*0x60*/ string ansiCurrencySymbol;
            /*0x68*/ string nanSymbol;
            /*0x70*/ string positiveInfinitySymbol;
            /*0x78*/ string negativeInfinitySymbol;
            /*0x80*/ string percentDecimalSeparator;
            /*0x88*/ string percentGroupSeparator;
            /*0x90*/ string percentSymbol;
            /*0x98*/ string perMilleSymbol;
            /*0xa0*/ string[] nativeDigits;
            /*0xa8*/ int m_dataItem;
            /*0xac*/ int numberDecimalDigits;
            /*0xb0*/ int currencyDecimalDigits;
            /*0xb4*/ int currencyPositivePattern;
            /*0xb8*/ int currencyNegativePattern;
            /*0xbc*/ int numberNegativePattern;
            /*0xc0*/ int percentPositivePattern;
            /*0xc4*/ int percentNegativePattern;
            /*0xc8*/ int percentDecimalDigits;
            /*0xcc*/ int digitSubstitution;
            /*0xd0*/ bool isReadOnly;
            /*0xd1*/ bool m_useUserOverride;
            /*0xd2*/ bool m_isInvariant;
            /*0xd3*/ bool validForParseAsNumber;
            /*0xd4*/ bool validForParseAsCurrency;

            static /*0x7124fc8*/ System.Globalization.NumberFormatInfo get_InvariantInfo();
            static /*0x712514c*/ System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider);
            static /*0x71252ec*/ System.Globalization.NumberFormatInfo get_CurrentInfo();
            static /*0x712507c*/ System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi);
            static /*0x7125780*/ void ValidateParseStyleInteger(System.Globalization.NumberStyles style);
            static /*0x712584c*/ void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style);
            /*0x71246c0*/ NumberFormatInfo();
            /*0x71246c8*/ NumberFormatInfo(System.Globalization.CultureData cultureData);
            /*0x7124c70*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7124cf4*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7124cf8*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7124f5c*/ void VerifyWritable();
            /*0x71253d4*/ object Clone();
            /*0x7125440*/ int get_CurrencyDecimalDigits();
            /*0x7125448*/ string get_CurrencyDecimalSeparator();
            /*0x7125450*/ bool get_IsReadOnly();
            /*0x7125458*/ int[] get_CurrencyGroupSizes();
            /*0x71254d0*/ int[] get_NumberGroupSizes();
            /*0x7125548*/ int[] get_PercentGroupSizes();
            /*0x71255c0*/ string get_CurrencyGroupSeparator();
            /*0x71255c8*/ string get_CurrencySymbol();
            /*0x71255d0*/ string get_NaNSymbol();
            /*0x71255d8*/ void set_NaNSymbol(string value);
            /*0x712566c*/ int get_CurrencyNegativePattern();
            /*0x7125674*/ int get_NumberNegativePattern();
            /*0x712567c*/ int get_PercentPositivePattern();
            /*0x7125684*/ int get_PercentNegativePattern();
            /*0x712568c*/ string get_NegativeInfinitySymbol();
            /*0x7125694*/ string get_NegativeSign();
            /*0x712569c*/ int get_NumberDecimalDigits();
            /*0x71256a4*/ string get_NumberDecimalSeparator();
            /*0x71256ac*/ string get_NumberGroupSeparator();
            /*0x71256b4*/ int get_CurrencyPositivePattern();
            /*0x71256bc*/ string get_PositiveInfinitySymbol();
            /*0x71256c4*/ string get_PositiveSign();
            /*0x71256cc*/ int get_PercentDecimalDigits();
            /*0x71256d4*/ string get_PercentDecimalSeparator();
            /*0x71256dc*/ string get_PercentGroupSeparator();
            /*0x71256e4*/ string get_PercentSymbol();
            /*0x71256ec*/ string get_PerMilleSymbol();
            /*0x71256f4*/ object GetFormat(System.Type formatType);
        }

        class StringInfo
        {
            /*0x10*/ string m_str;
            /*0x18*/ int[] m_indexes;

            static /*0x7125d20*/ int GetCurrentTextElementLen(string str, int index, int len, ref System.Globalization.UnicodeCategory ucCurrent, ref int currentCharCount);
            static /*0x7125b84*/ int[] ParseCombiningCharacters(string str);
            /*0x712590c*/ StringInfo();
            /*0x7125964*/ StringInfo(string value);
            /*0x7125a24*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7125a40*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7125a70*/ bool Equals(object value);
            /*0x7125b10*/ int GetHashCode();
            /*0x7125b30*/ int[] get_Indexes();
            /*0x7125cec*/ string get_String();
            /*0x7125990*/ void set_String(string value);
            /*0x7125cf4*/ int get_LengthInTextElements();
        }

        class TaiwanCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] taiwanEraInfo;
            static /*0x8*/ System.Globalization.Calendar s_defaultInstance;
            static /*0x10*/ System.DateTime calendarMinValue;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x712653c*/ TaiwanCalendar();
            static /*0x7125e34*/ System.Globalization.Calendar GetDefaultInstance();
            /*0x7125ef0*/ TaiwanCalendar();
            /*0x71260b0*/ System.DateTime get_MinSupportedDateTime();
            /*0x7126108*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7126160*/ int get_ID();
            /*0x7126168*/ int GetDaysInMonth(int year, int month, int era);
            /*0x7126180*/ int GetDaysInYear(int year, int era);
            /*0x7126198*/ int GetDayOfMonth(System.DateTime time);
            /*0x71261b0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x71261c8*/ int GetMonthsInYear(int year, int era);
            /*0x71261ec*/ int GetEra(System.DateTime time);
            /*0x7126204*/ int GetMonth(System.DateTime time);
            /*0x712621c*/ int GetYear(System.DateTime time);
            /*0x7126234*/ bool IsLeapYear(int year, int era);
            /*0x712624c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x712626c*/ int[] get_Eras();
            /*0x7126284*/ int get_TwoDigitYearMax();
            /*0x71262c8*/ void set_TwoDigitYearMax(int value);
            /*0x71263f8*/ int ToFourDigitYear(int year);
        }

        class TextInfo : System.ICloneable, System.Runtime.Serialization.IDeserializationCallback
        {
            static /*0x0*/ System.Globalization.TextInfo s_Invariant;
            /*0x10*/ bool m_isReadOnly;
            /*0x18*/ string m_cultureName;
            /*0x20*/ System.Globalization.CultureData m_cultureData;
            /*0x28*/ string m_textInfoName;
            /*0x30*/ System.Nullable<bool> m_IsAsciiCasingSameAsInvariant;
            /*0x38*/ string customCultureName;
            /*0x40*/ bool m_useUserOverride;
            /*0x44*/ int m_win32LangID;

            static /*0x7126678*/ System.Globalization.TextInfo get_Invariant();
            static /*0x7126f40*/ char ToLowerAsciiInvariant(char c);
            static /*0x7127550*/ char ToUpperAsciiInvariant(char c);
            static /*0x7126e2c*/ bool IsAscii(char c);
            static /*0x71280d0*/ int AddNonLetter(ref System.Text.StringBuilder result, ref string input, int inputIndex, int charLen);
            static /*0x71280b4*/ bool IsWordSeparator(System.Globalization.UnicodeCategory category);
            static /*0x71280a8*/ bool IsLetterCategory(System.Globalization.UnicodeCategory uc);
            /*0x7126ae8*/ TextInfo(System.Globalization.CultureData cultureData);
            /*0x7128338*/ TextInfo();
            /*0x7126b54*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7126b7c*/ void OnDeserialized();
            /*0x7126ca4*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7126ca8*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x7126d34*/ string get_CultureName();
            /*0x7126d3c*/ object Clone();
            /*0x7126dc4*/ void SetReadOnlyState(bool readOnly);
            /*0x7126dd0*/ char ToLower(char c);
            /*0x71273dc*/ string ToLower(string str);
            /*0x71274f4*/ char ToUpper(char c);
            /*0x7127a00*/ string ToUpper(string str);
            /*0x7126e3c*/ bool get_IsAsciiCasingSameAsInvariant();
            /*0x7127b18*/ bool Equals(object obj);
            /*0x7127bb8*/ int GetHashCode();
            /*0x7127bd8*/ string ToString();
            /*0x7127c30*/ string ToTitleCase(string str);
            /*0x7127f5c*/ int AddTitlecaseLetter(ref System.Text.StringBuilder result, ref string input, int inputIndex, int charLen);
            /*0x712816c*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x7127a54*/ string ToUpperInternal(string str);
            /*0x7127430*/ string ToLowerInternal(string str);
            /*0x7127568*/ char ToUpperInternal(char c);
            /*0x7126f58*/ char ToLowerInternal(char c);
            /*0x7128170*/ void ToUpperAsciiInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
            /*0x71281f8*/ void ChangeCase(System.ReadOnlySpan<char> source, System.Span<char> destination, bool toUpper);
        }

        class ThaiBuddhistCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] thaiBuddhistEraInfo;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x712880c*/ ThaiBuddhistCalendar();
            /*0x7128420*/ ThaiBuddhistCalendar();
            /*0x7128370*/ System.DateTime get_MinSupportedDateTime();
            /*0x71283c8*/ System.DateTime get_MaxSupportedDateTime();
            /*0x71284cc*/ int get_ID();
            /*0x71284d4*/ int GetDaysInMonth(int year, int month, int era);
            /*0x71284ec*/ int GetDaysInYear(int year, int era);
            /*0x7128504*/ int GetDayOfMonth(System.DateTime time);
            /*0x712851c*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x7128534*/ int GetMonthsInYear(int year, int era);
            /*0x7128558*/ int GetEra(System.DateTime time);
            /*0x7128570*/ int GetMonth(System.DateTime time);
            /*0x7128588*/ int GetYear(System.DateTime time);
            /*0x71285a0*/ bool IsLeapYear(int year, int era);
            /*0x71285b8*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x71285d8*/ int[] get_Eras();
            /*0x71285f0*/ int get_TwoDigitYearMax();
            /*0x7128634*/ void set_TwoDigitYearMax(int value);
            /*0x7128764*/ int ToFourDigitYear(int year);
        }

        class UmAlQuraCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.UmAlQuraCalendar.DateMapping[] HijriYearInfo;
            static /*0x8*/ System.DateTime minDate;
            static /*0x10*/ System.DateTime maxDate;

            static /*0x7129fe8*/ UmAlQuraCalendar();
            static /*0x7128918*/ System.Globalization.UmAlQuraCalendar.DateMapping[] InitDateMapping();
            static /*0x7128b90*/ void ConvertHijriToGregorian(int HijriYear, int HijriMonth, int HijriDay, ref int yg, ref int mg, ref int dg);
            static /*0x7128cf4*/ long GetAbsoluteDateUmAlQura(int year, int month, int day);
            static /*0x7128db8*/ void CheckTicksRange(long ticks);
            static /*0x7128f98*/ void CheckEraRange(int era);
            static /*0x7129010*/ void CheckYearRange(int year, int era);
            static /*0x7129150*/ void CheckYearMonthRange(int year, int month, int era);
            static /*0x712922c*/ void ConvertGregorianToHijri(System.DateTime time, ref int HijriYear, ref int HijriMonth, ref int HijriDay);
            static /*0x7129810*/ int RealGetDaysInYear(int year);
            /*0x7128b6c*/ UmAlQuraCalendar();
            /*0x7128abc*/ System.DateTime get_MinSupportedDateTime();
            /*0x7128b14*/ System.DateTime get_MaxSupportedDateTime();
            /*0x7128b80*/ int get_BaseCalendarID();
            /*0x7128b88*/ int get_ID();
            /*0x7129518*/ int GetDatePart(System.DateTime time, int part);
            /*0x71296a0*/ int GetDayOfMonth(System.DateTime time);
            /*0x71296b4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x712975c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x71298b0*/ int GetDaysInYear(int year, int era);
            /*0x712991c*/ int GetEra(System.DateTime time);
            /*0x71299b0*/ int[] get_Eras();
            /*0x7129a14*/ int GetMonth(System.DateTime time);
            /*0x7129a28*/ int GetMonthsInYear(int year, int era);
            /*0x7129a94*/ int GetYear(System.DateTime time);
            /*0x7129aa8*/ bool IsLeapYear(int year, int era);
            /*0x7129b20*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x7129d60*/ int get_TwoDigitYearMax();
            /*0x7129da4*/ void set_TwoDigitYearMax(int value);
            /*0x7129eb8*/ int ToFourDigitYear(int year);

            struct DateMapping
            {
                /*0x10*/ int HijriMonthsLengthFlags;
                /*0x18*/ System.DateTime GregorianDate;

                /*0x7128a7c*/ DateMapping(int MonthsLengthFlags, int GYear, int GMonth, int GDay);
            }
        }

        class SortKey
        {
            /*0x10*/ string source;
            /*0x18*/ byte[] key;
            /*0x20*/ System.Globalization.CompareOptions options;
            /*0x24*/ int lcid;

            static /*0x712a108*/ int Compare(System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
            /*0x712a274*/ SortKey(int lcid, string source, System.Globalization.CompareOptions opt);
            /*0x712a364*/ SortKey(int lcid, string source, byte[] buffer, System.Globalization.CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength);
            /*0x712a3c4*/ SortKey(string localeName, string str, System.Globalization.CompareOptions options, byte[] keyData);
            /*0x712a6c4*/ SortKey();
            /*0x712a404*/ string get_OriginalString();
            /*0x712a40c*/ byte[] get_KeyData();
            /*0x712a414*/ bool Equals(object value);
            /*0x712a4c4*/ int GetHashCode();
            /*0x712a52c*/ string ToString();
        }

        interface ISimpleCollator
        {
            /*0x380bc74*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
            /*0x380b36c*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
            /*0x380b36c*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
            int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
            int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
        }

        class CultureData
        {
            static /*0x0*/ System.Globalization.CultureData s_Invariant;
            /*0x10*/ string sAM1159;
            /*0x18*/ string sPM2359;
            /*0x20*/ string sTimeSeparator;
            /*0x28*/ string[] saLongTimes;
            /*0x30*/ string[] saShortTimes;
            /*0x38*/ int iFirstDayOfWeek;
            /*0x3c*/ int iFirstWeekOfYear;
            /*0x40*/ int[] waCalendars;
            /*0x48*/ System.Globalization.CalendarData[] calendars;
            /*0x50*/ string sISO639Language;
            /*0x58*/ string sRealName;
            /*0x60*/ bool bUseOverrides;
            /*0x64*/ int calendarId;
            /*0x68*/ int numberIndex;
            /*0x6c*/ int iDefaultAnsiCodePage;
            /*0x70*/ int iDefaultOemCodePage;
            /*0x74*/ int iDefaultMacCodePage;
            /*0x78*/ int iDefaultEbcdicCodePage;
            /*0x7c*/ bool isRightToLeft;
            /*0x80*/ string sListSeparator;

            static /*0x712671c*/ System.Globalization.CultureData get_Invariant();
            static /*0x712a72c*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride);
            static /*0x712a814*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator);
            static /*0x712aee0*/ string GetDateSeparator(string format);
            static /*0x712af28*/ string GetSeparator(string format, string timeParts);
            static /*0x712b008*/ int IndexOfTimePart(string format, int startIndex, string timeParts);
            static /*0x712b0f4*/ string UnescapeNlsString(string str, int start, int end);
            static /*0x711e818*/ string[] ReescapeWin32Strings(string[] array);
            static /*0x711e81c*/ string ReescapeWin32String(string str);
            static /*0x712b290*/ int strlen(byte* s);
            static /*0x712b2a8*/ string idx2string(byte* data, int idx);
            static /*0x712b3a0*/ byte* fill_number_data(int index, ref System.Globalization.CultureData.NumberFormatEntryManaged nfe);
            /*0x712a6fc*/ CultureData(string name);
            /*0x712a94c*/ void fill_culture_data(int datetimeIndex);
            /*0x711f460*/ System.Globalization.CalendarData GetCalendar(int calendarId);
            /*0x712a950*/ string[] get_LongTimes();
            /*0x712a968*/ string[] get_ShortTimes();
            /*0x712a980*/ string get_SISO639LANGNAME();
            /*0x712a988*/ int get_IFIRSTDAYOFWEEK();
            /*0x712a990*/ int get_IFIRSTWEEKOFYEAR();
            /*0x712a998*/ string get_SAM1159();
            /*0x712a9a0*/ string get_SPM2359();
            /*0x712a9a8*/ string get_TimeSeparator();
            /*0x712a9b0*/ int[] get_CalendarIds();
            /*0x712ab7c*/ System.Globalization.CalendarId[] GetCalendarIds();
            /*0x7124f50*/ bool get_IsInvariantCulture();
            /*0x712ac54*/ string get_CultureName();
            /*0x712ac5c*/ string get_SCOMPAREINFO();
            /*0x712ac9c*/ string get_STEXTINFO();
            /*0x712aca4*/ bool get_UseUserOverride();
            /*0x712acac*/ string[] EraNames(int calendarId);
            /*0x712acc8*/ string[] AbbrevEraNames(int calendarId);
            /*0x712ace4*/ string[] AbbreviatedEnglishEraNames(int calendarId);
            /*0x712ad00*/ string[] ShortDates(int calendarId);
            /*0x712ad1c*/ string[] LongDates(int calendarId);
            /*0x712ad38*/ string[] YearMonths(int calendarId);
            /*0x712ad54*/ string[] DayNames(int calendarId);
            /*0x712ad70*/ string[] AbbreviatedDayNames(int calendarId);
            /*0x712ad8c*/ string[] MonthNames(int calendarId);
            /*0x712ada8*/ string[] GenitiveMonthNames(int calendarId);
            /*0x712adc4*/ string[] AbbreviatedMonthNames(int calendarId);
            /*0x712ade0*/ string[] AbbreviatedGenitiveMonthNames(int calendarId);
            /*0x712adfc*/ string[] LeapYearMonthNames(int calendarId);
            /*0x712ae18*/ string MonthDay(int calendarId);
            /*0x712ae34*/ string DateSeparator(int calendarId);
            /*0x712b2ec*/ int[] create_group_sizes_array(int gs0, int gs1);
            /*0x7124cfc*/ void GetNFIValues(System.Globalization.NumberFormatInfo nfi);

            struct NumberFormatEntryManaged
            {
                /*0x10*/ int currency_decimal_digits;
                /*0x14*/ int currency_decimal_separator;
                /*0x18*/ int currency_group_separator;
                /*0x1c*/ int currency_group_sizes0;
                /*0x20*/ int currency_group_sizes1;
                /*0x24*/ int currency_negative_pattern;
                /*0x28*/ int currency_positive_pattern;
                /*0x2c*/ int currency_symbol;
                /*0x30*/ int nan_symbol;
                /*0x34*/ int negative_infinity_symbol;
                /*0x38*/ int negative_sign;
                /*0x3c*/ int number_decimal_digits;
                /*0x40*/ int number_decimal_separator;
                /*0x44*/ int number_group_separator;
                /*0x48*/ int number_group_sizes0;
                /*0x4c*/ int number_group_sizes1;
                /*0x50*/ int number_negative_pattern;
                /*0x54*/ int per_mille_symbol;
                /*0x58*/ int percent_negative_pattern;
                /*0x5c*/ int percent_positive_pattern;
                /*0x60*/ int percent_symbol;
                /*0x64*/ int positive_infinity_symbol;
                /*0x68*/ int positive_sign;
            }
        }

        class CodePageDataItem
        {
            static /*0x0*/ char[] sep;
            /*0x10*/ int m_dataIndex;
            /*0x14*/ int m_uiFamilyCodePage;
            /*0x18*/ string m_webName;
            /*0x20*/ string m_headerName;
            /*0x28*/ uint m_flags;

            static /*0x712b69c*/ CodePageDataItem();
            static /*0x712b448*/ string CreateString(string pStrings, uint index);
            /*0x712b3a4*/ CodePageDataItem(int dataIndex);
            /*0x712b4fc*/ string get_WebName();
            /*0x712b5cc*/ string get_HeaderName();
        }

        class EncodingTable
        {
            static /*0x0*/ System.Globalization.InternalEncodingDataItem[] encodingDataPtr;
            static /*0x8*/ System.Globalization.InternalCodePageDataItem[] codePageDataPtr;
            static /*0x10*/ int lastEncodingItem;
            static /*0x18*/ System.Collections.Generic.Dictionary<string, int> hashByName;
            static /*0x20*/ System.Collections.Generic.Dictionary<int, System.Globalization.CodePageDataItem> hashByCodePage;

            static /*0x712b7f8*/ EncodingTable();
            static /*0x712b72c*/ int GetNumEncodingItems();
            static /*0x712b790*/ System.Globalization.InternalEncodingDataItem ENC(string name, ushort cp);
            static /*0x712b7c0*/ System.Globalization.InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags);
            static /*0x71356f8*/ int internalGetCodePageFromName(string name);
            static /*0x713594c*/ int GetCodePageFromName(string name);
            static /*0x7135bcc*/ System.Globalization.CodePageDataItem GetCodePageDataItem(int codepage);
        }

        struct InternalEncodingDataItem
        {
            /*0x10*/ string webName;
            /*0x18*/ ushort codePage;
        }

        struct InternalCodePageDataItem
        {
            /*0x10*/ ushort codePage;
            /*0x12*/ ushort uiFamilyCodePage;
            /*0x14*/ uint flags;
            /*0x18*/ string Names;
        }

        class TextInfoToUpperData
        {
            static /*0x0*/ char[] range_00e0_0586;
            static /*0x8*/ char[] range_1e01_1ff3;
            static /*0x10*/ char[] range_2170_2184;
            static /*0x18*/ char[] range_24d0_24e9;
            static /*0x20*/ char[] range_2c30_2ce3;
            static /*0x28*/ char[] range_2d00_2d25;
            static /*0x30*/ char[] range_a641_a697;
            static /*0x38*/ char[] range_a723_a78c;

            static /*0x7135e8c*/ TextInfoToUpperData();
        }

        class TextInfoToLowerData
        {
            static /*0x0*/ char[] range_00c0_0556;
            static /*0x8*/ char[] range_10a0_10c5;
            static /*0x10*/ char[] range_1e00_1ffc;
            static /*0x18*/ char[] range_2160_216f;
            static /*0x20*/ char[] range_24b6_24cf;
            static /*0x28*/ char[] range_2c00_2c2e;
            static /*0x30*/ char[] range_2c60_2ce2;
            static /*0x38*/ char[] range_a640_a696;
            static /*0x40*/ char[] range_a722_a78b;

            static /*0x7136120*/ TextInfoToLowerData();
        }

        class CultureInfo : System.ICloneable, System.IFormatProvider
        {
            static int InvariantCultureId = 127;
            static int CalendarTypeBits = 8;
            static int LOCALE_INVARIANT = 127;
            static string MSG_READONLY = "This instance is read only";
            static /*0x0*/ System.Globalization.CultureInfo invariant_culture_info;
            static /*0x8*/ object shared_table_lock;
            static /*0x10*/ System.Globalization.CultureInfo default_current_culture;
            static /*0x18*/ System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture;
            static /*0x20*/ System.Globalization.CultureInfo s_DefaultThreadCurrentCulture;
            static /*0x28*/ System.Collections.Generic.Dictionary<int, System.Globalization.CultureInfo> shared_by_number;
            static /*0x30*/ System.Collections.Generic.Dictionary<string, System.Globalization.CultureInfo> shared_by_name;
            static /*0x38*/ System.Globalization.CultureInfo s_UserPreferredCultureInfoInAppX;
            static /*0x40*/ bool IsTaiwanSku;
            /*0x10*/ bool m_isReadOnly;
            /*0x14*/ int cultureID;
            /*0x18*/ int parent_lcid;
            /*0x1c*/ int datetime_index;
            /*0x20*/ int number_index;
            /*0x24*/ int default_calendar_type;
            /*0x28*/ bool m_useUserOverride;
            /*0x30*/ System.Globalization.NumberFormatInfo numInfo;
            /*0x38*/ System.Globalization.DateTimeFormatInfo dateTimeInfo;
            /*0x40*/ System.Globalization.TextInfo textInfo;
            /*0x48*/ string m_name;
            /*0x50*/ string englishname;
            /*0x58*/ string nativename;
            /*0x60*/ string iso3lang;
            /*0x68*/ string iso2lang;
            /*0x70*/ string win3lang;
            /*0x78*/ string territory;
            /*0x80*/ string[] native_calendar_names;
            /*0x88*/ System.Globalization.CompareInfo compareInfo;
            /*0x90*/ void* textinfo_data;
            /*0x98*/ int m_dataItem;
            /*0xa0*/ System.Globalization.Calendar calendar;
            /*0xa8*/ System.Globalization.CultureInfo parent_culture;
            /*0xb0*/ bool constructed;
            /*0xb8*/ byte[] cached_serialized_form;
            /*0xc0*/ System.Globalization.CultureData m_cultureData;
            /*0xc8*/ bool m_isInherited;

            static /*0x713b88c*/ CultureInfo();
            static /*0x71364a8*/ System.Globalization.CultureInfo get_InvariantCulture();
            static /*0x7136508*/ System.Globalization.CultureInfo get_CurrentCulture();
            static /*0x7136528*/ System.Globalization.CultureInfo get_CurrentUICulture();
            static /*0x7136548*/ System.Globalization.CultureInfo ConstructCurrentCulture();
            static /*0x7136970*/ System.Globalization.CultureInfo ConstructCurrentUICulture();
            static /*0x7137330*/ System.Globalization.CultureInfo[] GetCultures(System.Globalization.CultureTypes types);
            static /*0x7136734*/ string get_current_locale_name();
            static /*0x7137598*/ System.Globalization.CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed);
            static /*0x7138508*/ void insert_into_shared_tables(System.Globalization.CultureInfo c);
            static /*0x7138694*/ System.Globalization.CultureInfo GetCultureInfo(int culture);
            static /*0x71388c8*/ System.Globalization.CultureInfo GetCultureInfo(string name);
            static /*0x7138ae4*/ System.Globalization.CultureInfo CreateCulture(string name, bool reference);
            static /*0x7136738*/ System.Globalization.CultureInfo CreateSpecificCulture(string name);
            static /*0x7138b58*/ System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(string name);
            static /*0x7136a94*/ System.Globalization.Calendar CreateCalendar(int calendarType);
            static /*0x7138420*/ System.Exception CreateNotFoundException(string name);
            static /*0x713b2a0*/ System.Globalization.CultureInfo get_DefaultThreadCurrentCulture();
            static /*0x713b300*/ System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture();
            static /*0x713b368*/ System.Globalization.CultureInfo get_UserDefaultUICulture();
            static /*0x713b3b4*/ System.Globalization.CultureInfo get_UserDefaultCulture();
            static /*0x713b400*/ void InitializeUserPreferredCultureInfoInAppX(System.Globalization.CultureInfo.OnCultureInfoChangedDelegate onCultureInfoChangedInAppX);
            static /*0x713b410*/ void SetUserPreferredCultureInfoInAppX(string name);
            static /*0x71363f8*/ void OnCultureInfoChangedInAppX(string language);
            static /*0x713b420*/ System.Globalization.CultureInfo GetCultureInfoForUserPreferredLanguageInAppX();
            static /*0x713b5a4*/ void SetCultureInfoForUserPreferredLanguageInAppX(System.Globalization.CultureInfo cultureInfo);
            static /*0x713b73c*/ bool VerifyCultureName(string cultureName, bool throwException);
            /*0x7136f30*/ CultureInfo(int culture);
            /*0x7137e84*/ CultureInfo(int culture, bool useUserOverride);
            /*0x7137e90*/ CultureInfo(int culture, bool useUserOverride, bool read_only);
            /*0x7136f24*/ CultureInfo(string name);
            /*0x7138128*/ CultureInfo(string name, bool useUserOverride);
            /*0x7138134*/ CultureInfo(string name, bool useUserOverride, bool read_only);
            /*0x71384e8*/ CultureInfo();
            /*0x7136498*/ System.Globalization.CultureData get__cultureData();
            /*0x71364a0*/ bool get__isInherited();
            /*0x71369bc*/ string get_Territory();
            /*0x71369c4*/ string get__name();
            /*0x71369cc*/ int get_LCID();
            /*0x71369d4*/ string get_Name();
            /*0x71369dc*/ System.Globalization.Calendar get_Calendar();
            /*0x7136cb0*/ System.Globalization.CultureInfo get_Parent();
            /*0x7136f3c*/ System.Globalization.TextInfo get_TextInfo();
            /*0x71370dc*/ object Clone();
            /*0x7137284*/ bool Equals(object value);
            /*0x71375a8*/ System.Globalization.CultureInfo.Data GetTextInfoData();
            /*0x7137634*/ int GetHashCode();
            /*0x7137640*/ string ToString();
            /*0x7137648*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x713779c*/ bool get_IsNeutralCulture();
            /*0x71377e4*/ void CheckNeutral();
            /*0x71377e8*/ System.Globalization.NumberFormatInfo get_NumberFormat();
            /*0x713788c*/ void set_NumberFormat(System.Globalization.NumberFormatInfo value);
            /*0x713795c*/ System.Globalization.DateTimeFormatInfo get_DateTimeFormat();
            /*0x7137ac4*/ void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value);
            /*0x7137b94*/ string get_EnglishName();
            /*0x7137bc4*/ object GetFormat(System.Type formatType);
            /*0x7136a74*/ void Construct();
            /*0x7137cc8*/ bool construct_internal_locale_from_lcid(int lcid);
            /*0x7137ccc*/ bool construct_internal_locale_from_name(string name);
            /*0x7137cd0*/ void ConstructInvariant(bool read_only);
            /*0x7137060*/ System.Globalization.TextInfo CreateTextInfo(bool readOnly);
            /*0x7138380*/ bool ConstructLocaleFromName(string name);
            /*0x71375c0*/ int get_CalendarType();
            /*0x713b360*/ string get_SortName();
            /*0x713b6b0*/ bool get_HasInvariantCultureName();

            struct Data
            {
                /*0x10*/ int ansi;
                /*0x14*/ int ebcdic;
                /*0x18*/ int mac;
                /*0x1c*/ int oem;
                /*0x20*/ bool right_to_left;
                /*0x21*/ byte list_sep;
            }

            class OnCultureInfoChangedDelegate : System.MulticastDelegate
            {
                /*0x713b4f4*/ OnCultureInfoChangedDelegate(object object, nint method);
                /*0x713b93c*/ void Invoke(string language);
            }
        }

        class IdnMapping
        {
            /*0x10*/ bool allow_unassigned;
            /*0x11*/ bool use_std3;
            /*0x18*/ System.Globalization.Punycode puny;

            /*0x713b950*/ IdnMapping();
            /*0x713ba24*/ bool Equals(object obj);
            /*0x713bab0*/ int GetHashCode();
            /*0x713bac0*/ string GetAscii(string unicode);
            /*0x713bb20*/ string GetAscii(string unicode, int index, int count);
            /*0x713bbe8*/ string Convert(string input, int index, int count, bool toAscii);
            /*0x713bdf0*/ string ToAscii(string s, int offset);
            /*0x713c81c*/ void VerifyLength(string s, int offset);
            /*0x713c1f0*/ string NamePrep(string s, int offset);
            /*0x713c8e0*/ void VerifyProhibitedCharacters(string s, int offset);
            /*0x713c30c*/ void VerifyStd3AsciiRules(string s, int offset);
            /*0x713caf0*/ string GetUnicode(string ascii);
            /*0x713cb50*/ string GetUnicode(string ascii, int index, int count);
            /*0x713c024*/ string ToUnicode(string s, int offset);
        }

        class Bootstring
        {
            /*0x10*/ char delimiter;
            /*0x14*/ int base_num;
            /*0x18*/ int tmin;
            /*0x1c*/ int tmax;
            /*0x20*/ int skew;
            /*0x24*/ int damp;
            /*0x28*/ int initial_bias;
            /*0x2c*/ int initial_n;

            /*0x713cef0*/ Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN);
            /*0x713c4d4*/ string Encode(string s, int offset);
            /*0x713cf5c*/ char EncodeDigit(int d);
            /*0x713cfec*/ int DecodeDigit(char c);
            /*0x713cf74*/ int Adapt(int delta, int numPoints, bool firstTime);
            /*0x713cc18*/ string Decode(string s, int offset);
        }

        class Punycode : System.Globalization.Bootstring
        {
            /*0x713b9e4*/ Punycode();
        }

        class RegionInfo
        {
            static /*0x0*/ System.Globalization.RegionInfo currentRegion;
            /*0x10*/ int regionId;
            /*0x18*/ string iso2Name;
            /*0x20*/ string iso3Name;
            /*0x28*/ string win3Name;
            /*0x30*/ string englishName;
            /*0x38*/ string nativeName;
            /*0x40*/ string currencySymbol;
            /*0x48*/ string isoCurrencySymbol;
            /*0x50*/ string currencyEnglishName;
            /*0x58*/ string currencyNativeName;

            static /*0x713d02c*/ System.Globalization.RegionInfo get_CurrentRegion();
            static /*0x713d7b0*/ void ClearCachedData();
            /*0x713d2dc*/ RegionInfo(int culture);
            /*0x713d488*/ RegionInfo(string name);
            /*0x713d0ec*/ RegionInfo(System.Globalization.CultureInfo ci);
            /*0x713d3e0*/ bool GetByTerritory(System.Globalization.CultureInfo ci);
            /*0x713d5bc*/ bool construct_internal_region_from_name(string name);
            /*0x713d5c0*/ string get_CurrencyEnglishName();
            /*0x713d5c8*/ string get_CurrencySymbol();
            /*0x713d5d0*/ string get_DisplayName();
            /*0x713d5d8*/ string get_EnglishName();
            /*0x713d5e0*/ int get_GeoId();
            /*0x713d5e8*/ bool get_IsMetric();
            /*0x713d674*/ string get_ISOCurrencySymbol();
            /*0x713d67c*/ string get_NativeName();
            /*0x713d684*/ string get_CurrencyNativeName();
            /*0x713d68c*/ string get_Name();
            /*0x713d694*/ string get_ThreeLetterISORegionName();
            /*0x713d69c*/ string get_ThreeLetterWindowsRegionName();
            /*0x713d6a4*/ string get_TwoLetterISORegionName();
            /*0x713d6ac*/ bool Equals(object value);
            /*0x713d774*/ int GetHashCode();
            /*0x713d7a0*/ string ToString();
        }
    }

    namespace Diagnostics
    {
        class ConditionalAttribute : System.Attribute
        {
            /*0x10*/ string <ConditionString>k__BackingField;

            /*0x713d804*/ ConditionalAttribute(string conditionString);
        }

        class StackTraceHiddenAttribute : System.Attribute
        {
            /*0x713d834*/ StackTraceHiddenAttribute();
        }

        class DebuggerStepThroughAttribute : System.Attribute
        {
            /*0x713d83c*/ DebuggerStepThroughAttribute();
        }

        class DebuggerHiddenAttribute : System.Attribute
        {
            /*0x713d844*/ DebuggerHiddenAttribute();
        }

        class DebuggerNonUserCodeAttribute : System.Attribute
        {
            /*0x713d84c*/ DebuggerNonUserCodeAttribute();
        }

        class DebuggableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggableAttribute.DebuggingModes m_debuggingModes;

            /*0x713d854*/ DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes modes);

            enum DebuggingModes
            {
                None = 0,
                Default = 1,
                DisableOptimizations = 256,
                IgnoreSymbolStoreSequencePoints = 2,
                EnableEditAndContinue = 4,
            }
        }

        enum DebuggerBrowsableState
        {
            Never = 0,
            Collapsed = 2,
            RootHidden = 3,
        }

        class DebuggerBrowsableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggerBrowsableState state;

            /*0x713d87c*/ DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState state);
        }

        class DebuggerTypeProxyAttribute : System.Attribute
        {
            /*0x10*/ string typeName;

            /*0x713d8f4*/ DebuggerTypeProxyAttribute(System.Type type);
        }

        class DebuggerDisplayAttribute : System.Attribute
        {
            /*0x10*/ string name;
            /*0x18*/ string value;
            /*0x20*/ string type;

            /*0x713d9b4*/ DebuggerDisplayAttribute(string value);
            /*0x713da44*/ void set_Name(string value);
            /*0x713da4c*/ void set_Type(string value);
        }

        class Debugger
        {
            static /*0x0*/ string DefaultCategory;

            static /*0x713daa8*/ Debugger();
            static /*0x713da54*/ bool get_IsAttached();
            static /*0x713daa0*/ bool IsAttached_internal();
            static /*0x713daa4*/ void NotifyOfCrossThreadDependency();
        }

        class StackFrame
        {
            static int OFFSET_UNKNOWN = -1;
            /*0x10*/ int ilOffset;
            /*0x14*/ int nativeOffset;
            /*0x18*/ long methodAddress;
            /*0x20*/ uint methodIndex;
            /*0x28*/ System.Reflection.MethodBase methodBase;
            /*0x30*/ string fileName;
            /*0x38*/ int lineNumber;
            /*0x3c*/ int columnNumber;
            /*0x40*/ string internalMethodName;

            static /*0x713db14*/ bool get_frame_info(int skip, bool needFileInfo, ref System.Reflection.MethodBase method, ref int iloffset, ref int native_offset, ref string file, ref int line, ref int column);
            /*0x713db1c*/ StackFrame();
            /*0x713db6c*/ StackFrame(int skipFrames, bool fNeedFileInfo);
            /*0x713dbcc*/ int GetFileLineNumber();
            /*0x713dbd4*/ string GetFileName();
            /*0x713dbdc*/ string GetSecureFileName();
            /*0x713dcb0*/ int GetILOffset();
            /*0x713dcb8*/ System.Reflection.MethodBase GetMethod();
            /*0x713dcc0*/ int GetNativeOffset();
            /*0x713dcc8*/ long GetMethodAddress();
            /*0x713dcd0*/ uint GetMethodIndex();
            /*0x713dcd8*/ string GetInternalMethodName();
            /*0x713dce0*/ string ToString();
        }

        class StackTrace
        {
            static /*0x0*/ bool isAotidSet;
            static /*0x8*/ string aotid;
            /*0x10*/ System.Diagnostics.StackFrame[] frames;
            /*0x18*/ System.Diagnostics.StackTrace[] captured_traces;
            /*0x20*/ bool debug_info;

            static /*0x713e1b4*/ System.Diagnostics.StackFrame[] get_trace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            static /*0x713e514*/ string GetAotId();
            static /*0x713f084*/ void ConvertAsyncStateMachineMethod(ref System.Reflection.MethodBase method, ref System.Type declaringType);
            /*0x713df14*/ StackTrace();
            /*0x713e150*/ StackTrace(bool fNeedFileInfo);
            /*0x713e180*/ StackTrace(int skipFrames, bool fNeedFileInfo);
            /*0x713e1bc*/ StackTrace(System.Exception e, bool fNeedFileInfo);
            /*0x713e1c8*/ StackTrace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            /*0x713df38*/ void init_frames(int skipFrames, bool fNeedFileInfo);
            /*0x713e2c0*/ int get_FrameCount();
            /*0x713e2d8*/ System.Diagnostics.StackFrame GetFrame(int index);
            /*0x713e338*/ System.Diagnostics.StackFrame[] GetFrames();
            /*0x713e5e4*/ bool AddFrames(System.Text.StringBuilder sb, bool separator, ref bool isAsync);
            /*0x713ea60*/ void GetFullNameForStackTrace(System.Text.StringBuilder sb, System.Reflection.MethodBase mi, bool needsNewLine, ref bool skipped, ref bool isAsync);
            /*0x713f4e4*/ string ToString();
            /*0x713f644*/ string ToString(System.Diagnostics.StackTrace.TraceFormat traceFormat);

            enum TraceFormat
            {
                Normal = 0,
                TrailingNewLine = 1,
                NoResourceLookup = 2,
            }
        }

        namespace Contracts
        {
            class Contract
            {
                static /*0x381cca4*/ bool ForAll<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate);
            }
        }

        namespace Tracing
        {
            enum EventLevel
            {
                LogAlways = 0,
                Critical = 1,
                Error = 2,
                Warning = 3,
                Informational = 4,
                Verbose = 5,
            }

            enum EventTask
            {
                None = 0,
            }

            enum EventOpcode
            {
                Info = 0,
                Start = 1,
                Stop = 2,
                DataCollectionStart = 3,
                DataCollectionStop = 4,
                Extension = 5,
                Reply = 6,
                Resume = 7,
                Suspend = 8,
                Send = 9,
                Receive = 240,
            }

            enum EventKeywords
            {
                None = 0,
                All = -1,
                MicrosoftTelemetry = 562949953421312,
                WdiContext = 562949953421312,
                WdiDiagnostic = 1125899906842624,
                Sqm = 2251799813685248,
                AuditFailure = 4503599627370496,
                AuditSuccess = 9007199254740992,
                CorrelationHint = 4503599627370496,
                EventLogClassic = 36028797018963968,
            }

            class EventAttribute : System.Attribute
            {
                /*0x10*/ int <EventId>k__BackingField;
                /*0x14*/ System.Diagnostics.Tracing.EventLevel <Level>k__BackingField;
                /*0x18*/ System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField;
                /*0x20*/ System.Diagnostics.Tracing.EventOpcode <Opcode>k__BackingField;
                /*0x28*/ string <Message>k__BackingField;
                /*0x30*/ System.Diagnostics.Tracing.EventTask <Task>k__BackingField;

                /*0x713f650*/ EventAttribute(int eventId);
                /*0x713f678*/ void set_EventId(int value);
                /*0x713f680*/ void set_Level(System.Diagnostics.Tracing.EventLevel value);
                /*0x713f688*/ void set_Keywords(System.Diagnostics.Tracing.EventKeywords value);
                /*0x713f690*/ void set_Opcode(System.Diagnostics.Tracing.EventOpcode value);
                /*0x713f698*/ void set_Message(string value);
                /*0x713f6a0*/ void set_Task(System.Diagnostics.Tracing.EventTask value);
            }

            class EventSource : System.IDisposable
            {
                /*0x10*/ string <Name>k__BackingField;

                /*0x713f6a8*/ EventSource();
                /*0x713f6ec*/ EventSource(string eventSourceName);
                /*0x713f71c*/ EventSource(System.Guid eventSourceGuid, string eventSourceName);
                /*0x713f74c*/ void Finalize();
                /*0x713f7ec*/ void set_Name(string value);
                /*0x713f7f4*/ bool IsEnabled();
                /*0x713f7fc*/ bool IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords);
                /*0x713f804*/ void Dispose();
                /*0x713f870*/ void Dispose(bool disposing);
                /*0x713f874*/ void WriteEvent(int eventId);
                /*0x713f8bc*/ void WriteEvent(int eventId, int arg1);
                /*0x713f978*/ void WriteEvent(int eventId, string arg1);
                /*0x713fa0c*/ void WriteEvent(int eventId, int arg1, int arg2);
                /*0x713fb14*/ void WriteEvent(int eventId, int arg1, int arg2, int arg3);
                /*0x713fc70*/ void WriteEvent(int eventId, long arg1);
                /*0x713fd2c*/ void WriteEvent(int eventId, long arg1, string arg2);
                /*0x713f8b8*/ void WriteEvent(int eventId, object[] args);
                /*0x713fe20*/ void WriteEvent(int eventId, string arg1, string arg2, string arg3);
                /*0x713ff2c*/ void WriteEventCore(int eventId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data);

                struct EventData
                {
                    /*0x10*/ nint <DataPointer>k__BackingField;
                    /*0x18*/ int <Size>k__BackingField;
                    /*0x1c*/ int <Reserved>k__BackingField;

                    /*0x713ff30*/ void set_DataPointer(nint value);
                    /*0x713ff38*/ void set_Size(int value);
                    /*0x713ff40*/ void set_Reserved(int value);
                }
            }

            class EventSourceAttribute : System.Attribute
            {
                /*0x10*/ string <Guid>k__BackingField;
                /*0x18*/ string <Name>k__BackingField;

                /*0x713ff58*/ EventSourceAttribute();
                /*0x713ff48*/ void set_Guid(string value);
                /*0x713ff50*/ void set_Name(string value);
            }

            class NonEventAttribute : System.Attribute
            {
                /*0x713ff60*/ NonEventAttribute();
            }
        }

        namespace CodeAnalysis
        {
            class DisallowNullAttribute : System.Attribute
            {
                /*0x713ff68*/ DisallowNullAttribute();
            }

            class NotNullAttribute : System.Attribute
            {
                /*0x713ff70*/ NotNullAttribute();
            }

            class MaybeNullWhenAttribute : System.Attribute
            {
                /*0x10*/ bool <ReturnValue>k__BackingField;

                /*0x713ff78*/ MaybeNullWhenAttribute(bool returnValue);
            }

            class NotNullWhenAttribute : System.Attribute
            {
                /*0x10*/ bool <ReturnValue>k__BackingField;

                /*0x713ffa0*/ NotNullWhenAttribute(bool returnValue);
            }

            class NotNullIfNotNullAttribute : System.Attribute
            {
                /*0x10*/ string <ParameterName>k__BackingField;

                /*0x713ffc8*/ NotNullIfNotNullAttribute(string parameterName);
            }

            class DoesNotReturnAttribute : System.Attribute
            {
                /*0x713fff8*/ DoesNotReturnAttribute();
            }

            class DoesNotReturnIfAttribute : System.Attribute
            {
                /*0x10*/ bool <ParameterValue>k__BackingField;

                /*0x7140000*/ DoesNotReturnIfAttribute(bool parameterValue);
            }
        }
    }

    namespace Configuration
    {
        namespace Assemblies
        {
            enum AssemblyHashAlgorithm
            {
                None = 0,
                MD5 = 32771,
                SHA1 = 32772,
                SHA256 = 32780,
                SHA384 = 32781,
                SHA512 = 32782,
            }

            enum AssemblyVersionCompatibility
            {
                SameMachine = 1,
                SameProcess = 2,
                SameDomain = 3,
            }
        }
    }

    namespace Collections
    {
        class Comparer : System.Collections.IComparer, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Collections.Comparer Default;
            static /*0x8*/ System.Collections.Comparer DefaultInvariant;
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            static /*0x71404c8*/ Comparer();
            /*0x7140028*/ Comparer(System.Globalization.CultureInfo culture);
            /*0x71400b4*/ Comparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7140228*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71402c8*/ int Compare(object a, object b);
        }

        struct DictionaryEntry
        {
            /*0x10*/ object _key;
            /*0x18*/ object _value;

            /*0x7140594*/ DictionaryEntry(object key, object value);
            /*0x71405c4*/ object get_Key();
            /*0x71405cc*/ object get_Value();
        }

        class HashHelpers
        {
            static /*0x0*/ int[] primes;
            static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;

            static /*0x7140970*/ HashHelpers();
            static /*0x71405d4*/ bool IsPrime(int candidate);
            static /*0x714068c*/ int GetPrime(int min);
            static /*0x7140814*/ int ExpandPrime(int oldSize);
            static /*0x7140898*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
        }

        interface ICollection : System.Collections.IEnumerable
        {
            /*0x380d8b8*/ void CopyTo(System.Array array, int index);
            /*0x380b6a0*/ int get_Count();
            /*0x380b9e8*/ object get_SyncRoot();
            /*0x380b128*/ bool get_IsSynchronized();
        }

        interface IComparer
        {
            int Compare(object x, object y);
        }

        interface IDictionary : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x380bb68*/ object get_Item(object key);
            /*0x380d93c*/ void set_Item(object key, object value);
            /*0x380b9e8*/ System.Collections.ICollection get_Keys();
            /*0x380b9e8*/ System.Collections.ICollection get_Values();
            /*0x380b2f0*/ bool Contains(object key);
            /*0x380d93c*/ void Add(object key, object value);
            /*0x380cb08*/ void Clear();
            /*0x380b128*/ bool get_IsReadOnly();
            /*0x380b128*/ bool get_IsFixedSize();
            /*0x380b9e8*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x380d83c*/ void Remove(object key);
        }

        interface IDictionaryEnumerator : System.Collections.IEnumerator
        {
            /*0x380b9e8*/ object get_Key();
            /*0x380b9e8*/ object get_Value();
            System.Collections.DictionaryEntry get_Entry();
        }

        interface IEnumerable
        {
            /*0x380b9e8*/ System.Collections.IEnumerator GetEnumerator();
        }

        interface IEnumerator
        {
            /*0x380b128*/ bool MoveNext();
            /*0x380b9e8*/ object get_Current();
            /*0x380cb08*/ void Reset();
        }

        interface IEqualityComparer
        {
            /*0x380b32c*/ bool Equals(object x, object y);
            /*0x380b7a8*/ int GetHashCode(object obj);
        }

        interface IList : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x380ba90*/ object get_Item(int index);
            /*0x380d170*/ void set_Item(int index, object value);
            /*0x380b7a8*/ int Add(object value);
            /*0x380b2f0*/ bool Contains(object value);
            /*0x380cb08*/ void Clear();
            /*0x380b128*/ bool get_IsReadOnly();
            /*0x380b128*/ bool get_IsFixedSize();
            /*0x380b7a8*/ int IndexOf(object value);
            /*0x380d170*/ void Insert(int index, object value);
            /*0x380d83c*/ void Remove(object value);
            /*0x380cffc*/ void RemoveAt(int index);
        }

        interface IStructuralComparable
        {
            int CompareTo(object other, System.Collections.IComparer comparer);
        }

        interface IStructuralEquatable
        {
            /*0x380b32c*/ bool Equals(object other, System.Collections.IEqualityComparer comparer);
            /*0x380b7a8*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
        }

        class ListDictionaryInternal : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ListDictionaryInternal.DictionaryNode head;
            /*0x18*/ int version;
            /*0x1c*/ int count;
            /*0x20*/ object _syncRoot;

            /*0x7140a10*/ ListDictionaryInternal();
            /*0x7140a18*/ object get_Item(object key);
            /*0x7140acc*/ void set_Item(object key, object value);
            /*0x7140c54*/ int get_Count();
            /*0x7140c5c*/ System.Collections.ICollection get_Keys();
            /*0x7140d08*/ bool get_IsReadOnly();
            /*0x7140d10*/ bool get_IsFixedSize();
            /*0x7140d18*/ bool get_IsSynchronized();
            /*0x7140d20*/ object get_SyncRoot();
            /*0x7140d90*/ System.Collections.ICollection get_Values();
            /*0x7140dfc*/ void Add(object key, object value);
            /*0x7140fb8*/ void Clear();
            /*0x7140fe8*/ bool Contains(object key);
            /*0x714109c*/ void CopyTo(System.Array array, int index);
            /*0x71412a4*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x7141354*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x71413ac*/ void Remove(object key);

            class NodeEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                /*0x20*/ int version;
                /*0x24*/ bool start;

                /*0x71412fc*/ NodeEnumerator(System.Collections.ListDictionaryInternal list);
                /*0x71414b0*/ object get_Current();
                /*0x7141514*/ System.Collections.DictionaryEntry get_Entry();
                /*0x71415ac*/ object get_Key();
                /*0x714160c*/ object get_Value();
                /*0x714166c*/ bool MoveNext();
                /*0x7141730*/ void Reset();
            }

            class NodeKeyValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ bool isKeys;

                /*0x7140ccc*/ NodeKeyValueCollection(System.Collections.ListDictionaryInternal list, bool isKeys);
                /*0x71417b0*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x714196c*/ int System.Collections.ICollection.get_Count();
                /*0x71419a4*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x71419ac*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x71419c4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class NodeKeyValueEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.ListDictionaryInternal list;
                    /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                    /*0x20*/ int version;
                    /*0x24*/ bool isKeys;
                    /*0x25*/ bool start;

                    /*0x7141a28*/ NodeKeyValueEnumerator(System.Collections.ListDictionaryInternal list, bool isKeys);
                    /*0x7141a94*/ object get_Current();
                    /*0x7141b08*/ bool MoveNext();
                    /*0x7141bcc*/ void Reset();
                }
            }

            class DictionaryNode
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
                /*0x20*/ System.Collections.ListDictionaryInternal.DictionaryNode next;

                /*0x7140c4c*/ DictionaryNode();
            }
        }

        class CompatibleComparer : System.Collections.IEqualityComparer
        {
            /*0x10*/ System.Collections.IHashCodeProvider _hcp;
            /*0x18*/ System.Collections.IComparer _comparer;

            /*0x7141c4c*/ CompatibleComparer(System.Collections.IHashCodeProvider hashCodeProvider, System.Collections.IComparer comparer);
            /*0x7141c90*/ System.Collections.IHashCodeProvider get_HashCodeProvider();
            /*0x7141c98*/ System.Collections.IComparer get_Comparer();
            /*0x7141ca0*/ bool Equals(object a, object b);
            /*0x7141cb8*/ int Compare(object a, object b);
            /*0x7141e78*/ int GetHashCode(object obj);
        }

        class CaseInsensitiveComparer : System.Collections.IComparer
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            /*0x7141f80*/ CaseInsensitiveComparer();
            /*0x7142000*/ CaseInsensitiveComparer(System.Globalization.CultureInfo culture);
            /*0x714208c*/ int Compare(object a, object b);
        }

        class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            /*0x714216c*/ CaseInsensitiveHashCodeProvider();
            /*0x71421ec*/ CaseInsensitiveHashCodeProvider(System.Globalization.CultureInfo culture);
            /*0x7142278*/ int GetHashCode(object obj);
        }

        class CollectionBase : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x7142320*/ CollectionBase();
            /*0x714238c*/ System.Collections.ArrayList get_InnerList();
            /*0x7142394*/ System.Collections.IList get_List();
            /*0x7142398*/ int get_Count();
            /*0x71423bc*/ void Clear();
            /*0x7142408*/ void RemoveAt(int index);
            /*0x71425dc*/ bool System.Collections.IList.get_IsReadOnly();
            /*0x7142600*/ bool System.Collections.IList.get_IsFixedSize();
            /*0x7142624*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x7142648*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x714266c*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x7142690*/ object System.Collections.IList.get_Item(int index);
            /*0x7142748*/ void System.Collections.IList.set_Item(int index, object value);
            /*0x714292c*/ bool System.Collections.IList.Contains(object value);
            /*0x7142950*/ int System.Collections.IList.Add(object value);
            /*0x7142a90*/ void System.Collections.IList.Remove(object value);
            /*0x7142c28*/ int System.Collections.IList.IndexOf(object value);
            /*0x7142c4c*/ void System.Collections.IList.Insert(int index, object value);
            /*0x7142dfc*/ System.Collections.IEnumerator GetEnumerator();
            /*0x7142e20*/ void OnSet(int index, object oldValue, object newValue);
            /*0x7142e24*/ void OnInsert(int index, object value);
            /*0x7142e28*/ void OnClear();
            /*0x7142e2c*/ void OnRemove(int index, object value);
            /*0x7142e30*/ void OnValidate(object value);
            /*0x7142e84*/ void OnSetComplete(int index, object oldValue, object newValue);
            /*0x7142e88*/ void OnInsertComplete(int index, object value);
            /*0x7142e8c*/ void OnClearComplete();
            /*0x7142e90*/ void OnRemoveComplete(int index, object value);
        }

        class Queue : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _head;
            /*0x1c*/ int _tail;
            /*0x20*/ int _size;
            /*0x24*/ int _growFactor;
            /*0x28*/ int _version;
            /*0x30*/ object _syncRoot;

            /*0x7142e94*/ Queue();
            /*0x7143060*/ Queue(int capacity);
            /*0x7142ea0*/ Queue(int capacity, float growFactor);
            /*0x7143068*/ Queue(System.Collections.ICollection col);
            /*0x71432e0*/ int get_Count();
            /*0x71432e8*/ object Clone();
            /*0x71433cc*/ bool get_IsSynchronized();
            /*0x71433d4*/ object get_SyncRoot();
            /*0x7143448*/ void CopyTo(System.Array array, int index);
            /*0x714362c*/ void Enqueue(object obj);
            /*0x7143828*/ System.Collections.IEnumerator GetEnumerator();
            /*0x71438f8*/ object Dequeue();
            /*0x71439d8*/ object Peek();
            /*0x7143a68*/ object GetElement(int i);
            /*0x7143730*/ void SetCapacity(int capacity);

            class QueueEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Queue _q;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0x7143880*/ QueueEnumerator(System.Collections.Queue q);
                /*0x7143aa8*/ object Clone();
                /*0x7143ab0*/ bool MoveNext();
                /*0x7143b94*/ object get_Current();
                /*0x7143c24*/ void Reset();
            }

            class QueueDebugView
            {
            }
        }

        class ReadOnlyCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x7143de8*/ ReadOnlyCollectionBase();
            /*0x7143cac*/ System.Collections.ArrayList get_InnerList();
            /*0x7143d1c*/ int get_Count();
            /*0x7143d40*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x7143d64*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x7143d88*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x7143dc4*/ System.Collections.IEnumerator GetEnumerator();
        }

        class SortedList : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] values;
            /*0x20*/ int _size;
            /*0x24*/ int version;
            /*0x28*/ System.Collections.IComparer comparer;
            /*0x30*/ System.Collections.SortedList.KeyList keyList;
            /*0x38*/ System.Collections.SortedList.ValueList valueList;
            /*0x40*/ object _syncRoot;

            static /*0x71452e0*/ System.Collections.SortedList Synchronized(System.Collections.SortedList list);
            /*0x7143df0*/ SortedList();
            /*0x7143f78*/ SortedList(int initialCapacity);
            /*0x71440cc*/ SortedList(System.Collections.IComparer comparer);
            /*0x7143e0c*/ void Init();
            /*0x7144114*/ void Add(object key, object value);
            /*0x7144378*/ void set_Capacity(int value);
            /*0x71445bc*/ int get_Count();
            /*0x71445c4*/ System.Collections.ICollection get_Keys();
            /*0x71445d4*/ System.Collections.ICollection get_Values();
            /*0x71445e4*/ bool get_IsReadOnly();
            /*0x71445ec*/ bool get_IsFixedSize();
            /*0x71445f4*/ bool get_IsSynchronized();
            /*0x71445fc*/ object get_SyncRoot();
            /*0x714466c*/ void Clear();
            /*0x71446b4*/ object Clone();
            /*0x7144768*/ bool Contains(object key);
            /*0x714478c*/ bool ContainsKey(object key);
            /*0x71447b0*/ bool ContainsValue(object value);
            /*0x71447d4*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x7144a78*/ void EnsureCapacity(int min);
            /*0x7144ac4*/ object GetByIndex(int index);
            /*0x7144b7c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x7144c5c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x7144cc4*/ object GetKey(int index);
            /*0x7144d7c*/ System.Collections.IList GetKeyList();
            /*0x7144e30*/ System.Collections.IList GetValueList();
            /*0x7144ee4*/ object get_Item(object key);
            /*0x7144f34*/ void set_Item(object key, object value);
            /*0x714505c*/ int IndexOfKey(object key);
            /*0x71450f8*/ int IndexOfValue(object value);
            /*0x7144238*/ void Insert(int index, object key, object value);
            /*0x7145158*/ void RemoveAt(int index);
            /*0x71452a0*/ void Remove(object key);

            class SyncSortedList : System.Collections.SortedList
            {
                /*0x48*/ System.Collections.SortedList _list;
                /*0x50*/ object _root;

                /*0x7145384*/ SyncSortedList(System.Collections.SortedList list);
                /*0x71453e8*/ int get_Count();
                /*0x71454d0*/ object get_SyncRoot();
                /*0x71454d8*/ bool get_IsReadOnly();
                /*0x71454fc*/ bool get_IsFixedSize();
                /*0x7145520*/ bool get_IsSynchronized();
                /*0x7145528*/ object get_Item(object key);
                /*0x7145618*/ void set_Item(object key, object value);
                /*0x7145700*/ void Add(object key, object value);
                /*0x71457e8*/ void Clear();
                /*0x71458c0*/ object Clone();
                /*0x71459a8*/ bool Contains(object key);
                /*0x7145a98*/ bool ContainsKey(object key);
                /*0x7145b88*/ bool ContainsValue(object key);
                /*0x7145c78*/ void CopyTo(System.Array array, int index);
                /*0x7145d60*/ object GetByIndex(int index);
                /*0x7145e50*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x7145f38*/ object GetKey(int index);
                /*0x7146028*/ System.Collections.IList GetKeyList();
                /*0x7146110*/ System.Collections.IList GetValueList();
                /*0x71461f8*/ int IndexOfKey(object key);
                /*0x7146348*/ int IndexOfValue(object value);
                /*0x7146438*/ void RemoveAt(int index);
                /*0x7146518*/ void Remove(object key);
            }

            class SortedListEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.SortedList _sortedList;
                /*0x18*/ object _key;
                /*0x20*/ object _value;
                /*0x28*/ int _index;
                /*0x2c*/ int _startIndex;
                /*0x30*/ int _endIndex;
                /*0x34*/ int _version;
                /*0x38*/ bool _current;
                /*0x3c*/ int _getObjectRetType;

                /*0x7144be4*/ SortedListEnumerator(System.Collections.SortedList sortedList, int index, int count, int getObjRetType);
                /*0x71465f8*/ object Clone();
                /*0x7146600*/ object get_Key();
                /*0x714669c*/ bool MoveNext();
                /*0x71467dc*/ System.Collections.DictionaryEntry get_Entry();
                /*0x71468b0*/ object get_Current();
                /*0x71469a8*/ object get_Value();
                /*0x7146a44*/ void Reset();
            }

            class KeyList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x7144e00*/ KeyList(System.Collections.SortedList sortedList);
                /*0x7146ae0*/ int get_Count();
                /*0x7146afc*/ bool get_IsReadOnly();
                /*0x7146b04*/ bool get_IsFixedSize();
                /*0x7146b0c*/ bool get_IsSynchronized();
                /*0x7146b30*/ object get_SyncRoot();
                /*0x7146b54*/ int Add(object key);
                /*0x7146ba0*/ void Clear();
                /*0x7146bec*/ bool Contains(object key);
                /*0x7146c10*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x7146cdc*/ void Insert(int index, object value);
                /*0x7146d28*/ object get_Item(int index);
                /*0x7146d4c*/ void set_Item(int index, object value);
                /*0x7146d98*/ System.Collections.IEnumerator GetEnumerator();
                /*0x7146e24*/ int IndexOf(object key);
                /*0x7146eec*/ void Remove(object key);
                /*0x7146f38*/ void RemoveAt(int index);
            }

            class ValueList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x7144eb4*/ ValueList(System.Collections.SortedList sortedList);
                /*0x7146f84*/ int get_Count();
                /*0x7146fa0*/ bool get_IsReadOnly();
                /*0x7146fa8*/ bool get_IsFixedSize();
                /*0x7146fb0*/ bool get_IsSynchronized();
                /*0x7146fd4*/ object get_SyncRoot();
                /*0x7146ff8*/ int Add(object key);
                /*0x7147044*/ void Clear();
                /*0x7147090*/ bool Contains(object value);
                /*0x71470b4*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x7147180*/ void Insert(int index, object value);
                /*0x71471cc*/ object get_Item(int index);
                /*0x71471f0*/ void set_Item(int index, object value);
                /*0x714723c*/ System.Collections.IEnumerator GetEnumerator();
                /*0x71472c8*/ int IndexOf(object value);
                /*0x7147340*/ void Remove(object value);
                /*0x714738c*/ void RemoveAt(int index);
            }

            class SortedListDebugView
            {
            }
        }

        class Stack : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            /*0x71473d8*/ Stack();
            /*0x7147444*/ Stack(int initialCapacity);
            /*0x714751c*/ int get_Count();
            /*0x7147524*/ bool get_IsSynchronized();
            /*0x714752c*/ object get_SyncRoot();
            /*0x714759c*/ void Clear();
            /*0x71475cc*/ object Clone();
            /*0x714765c*/ void CopyTo(System.Array array, int index);
            /*0x714790c*/ System.Collections.IEnumerator GetEnumerator();
            /*0x71479c0*/ object Peek();
            /*0x7147a44*/ object Pop();
            /*0x7147ae4*/ void Push(object obj);

            class StackEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Stack _stack;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0x7147964*/ StackEnumerator(System.Collections.Stack stack);
                /*0x7147c04*/ object Clone();
                /*0x7147c0c*/ bool MoveNext();
                /*0x7147d20*/ object get_Current();
                /*0x7147dac*/ void Reset();
            }

            class StackDebugView
            {
            }
        }

        class BitArray : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ int[] m_array;
            /*0x18*/ int m_length;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x7147fa0*/ int GetArrayLength(int n, int div);
            /*0x7147e2c*/ BitArray(int length);
            /*0x7147e34*/ BitArray(int length, bool defaultValue);
            /*0x7147fbc*/ BitArray(System.Collections.BitArray bits);
            /*0x71480c0*/ bool get_Item(int index);
            /*0x714819c*/ void set_Item(int index, bool value);
            /*0x71480c4*/ bool Get(int index);
            /*0x71481a4*/ void Set(int index, bool value);
            /*0x714829c*/ void SetAll(bool value);
            /*0x714830c*/ System.Collections.BitArray Or(System.Collections.BitArray value);
            /*0x7148428*/ int get_Length();
            /*0x7148430*/ void set_Length(int value);
            /*0x71485f8*/ void CopyTo(System.Array array, int index);
            /*0x7148afc*/ int get_Count();
            /*0x7148b04*/ object get_SyncRoot();
            /*0x7148b74*/ bool get_IsSynchronized();
            /*0x7148b7c*/ object Clone();
            /*0x7148bd4*/ System.Collections.IEnumerator GetEnumerator();

            class BitArrayEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.BitArray bitarray;
                /*0x18*/ int index;
                /*0x1c*/ int version;
                /*0x20*/ bool currentElement;

                /*0x7148c30*/ BitArrayEnumeratorSimple(System.Collections.BitArray bitarray);
                /*0x7148c80*/ object Clone();
                /*0x7148c88*/ bool MoveNext();
                /*0x7148e30*/ object get_Current();
                /*0x7148f78*/ void Reset();
            }
        }

        class ArrayList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _items;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x714970c*/ System.Collections.ArrayList Adapter(System.Collections.IList list);
            static /*0x714a180*/ System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list);
            /*0x7148ff0*/ ArrayList();
            /*0x7149094*/ ArrayList(int capacity);
            /*0x71491ec*/ ArrayList(System.Collections.ICollection c);
            /*0x71493b8*/ void set_Capacity(int value);
            /*0x71494e8*/ int get_Count();
            /*0x71494f0*/ bool get_IsFixedSize();
            /*0x71494f8*/ bool get_IsReadOnly();
            /*0x7149500*/ bool get_IsSynchronized();
            /*0x7149508*/ object get_SyncRoot();
            /*0x7149578*/ object get_Item(int index);
            /*0x714961c*/ void set_Item(int index, object value);
            /*0x71497f4*/ int Add(object value);
            /*0x7149900*/ void AddRange(System.Collections.ICollection c);
            /*0x714991c*/ void Clear();
            /*0x7149958*/ object Clone();
            /*0x71499e0*/ bool Contains(object item);
            /*0x7149aac*/ void CopyTo(System.Array array);
            /*0x7149ac0*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x7149b6c*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
            /*0x71498a4*/ void EnsureCapacity(int min);
            /*0x7149c6c*/ System.Collections.IEnumerator GetEnumerator();
            /*0x7149dd4*/ int IndexOf(object value);
            /*0x7149dec*/ void Insert(int index, object value);
            /*0x7149f24*/ void InsertRange(int index, System.Collections.ICollection c);
            /*0x714a25c*/ void Remove(object obj);
            /*0x714a29c*/ void RemoveAt(int index);
            /*0x714a384*/ void RemoveRange(int index, int count);
            /*0x714a504*/ void Sort(System.Collections.IComparer comparer);
            /*0x714a550*/ void Sort(int index, int count, System.Collections.IComparer comparer);
            /*0x714a648*/ object[] ToArray();
            /*0x714a728*/ System.Array ToArray(System.Type type);

            class IListWrapper : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.IList _list;

                /*0x71497c0*/ IListWrapper(System.Collections.IList list);
                /*0x714a7f4*/ void set_Capacity(int value);
                /*0x714a884*/ int get_Count();
                /*0x714a928*/ bool get_IsReadOnly();
                /*0x714a9cc*/ bool get_IsFixedSize();
                /*0x714aa70*/ bool get_IsSynchronized();
                /*0x714ab14*/ object get_Item(int index);
                /*0x714abbc*/ void set_Item(int index, object value);
                /*0x714ac88*/ object get_SyncRoot();
                /*0x714ad2c*/ int Add(object obj);
                /*0x714ade8*/ void AddRange(System.Collections.ICollection c);
                /*0x714ae30*/ void Clear();
                /*0x714af94*/ object Clone();
                /*0x714b000*/ bool Contains(object obj);
                /*0x714b0ac*/ void CopyTo(System.Array array, int index);
                /*0x714b164*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x714b498*/ System.Collections.IEnumerator GetEnumerator();
                /*0x714b538*/ int IndexOf(object value);
                /*0x714b5e4*/ void Insert(int index, object obj);
                /*0x714b6b0*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x714ba78*/ void Remove(object value);
                /*0x714bab8*/ void RemoveAt(int index);
                /*0x714bb74*/ void RemoveRange(int index, int count);
                /*0x714bd8c*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x714c044*/ object[] ToArray();
                /*0x714c1b0*/ System.Array ToArray(System.Type type);
            }

            class ReadOnlyArrayList : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.ArrayList _list;

                /*0x714a230*/ ReadOnlyArrayList(System.Collections.ArrayList l);
                /*0x714c358*/ int get_Count();
                /*0x714c37c*/ bool get_IsReadOnly();
                /*0x714c384*/ bool get_IsFixedSize();
                /*0x714c38c*/ bool get_IsSynchronized();
                /*0x714c3b0*/ object get_Item(int index);
                /*0x714c3d4*/ void set_Item(int index, object value);
                /*0x714c420*/ object get_SyncRoot();
                /*0x714c444*/ int Add(object obj);
                /*0x714c490*/ void AddRange(System.Collections.ICollection c);
                /*0x714c4dc*/ void set_Capacity(int value);
                /*0x714c528*/ void Clear();
                /*0x714c574*/ object Clone();
                /*0x714c688*/ bool Contains(object obj);
                /*0x714c6ac*/ void CopyTo(System.Array array, int index);
                /*0x714c6d0*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x714c6f4*/ System.Collections.IEnumerator GetEnumerator();
                /*0x714c718*/ int IndexOf(object value);
                /*0x714c73c*/ void Insert(int index, object obj);
                /*0x714c788*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x714c7d4*/ void Remove(object value);
                /*0x714c820*/ void RemoveAt(int index);
                /*0x714c86c*/ void RemoveRange(int index, int count);
                /*0x714c8b8*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x714c904*/ object[] ToArray();
                /*0x714c928*/ System.Array ToArray(System.Type type);
            }

            class ArrayListEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                static /*0x0*/ object s_dummyObject;
                /*0x10*/ System.Collections.ArrayList _list;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;
                /*0x28*/ bool _isArrayList;

                static /*0x714ccd0*/ ArrayListEnumeratorSimple();
                /*0x7149cc4*/ ArrayListEnumeratorSimple(System.Collections.ArrayList list);
                /*0x714c94c*/ object Clone();
                /*0x714c954*/ bool MoveNext();
                /*0x714cb30*/ object get_Current();
                /*0x714cbfc*/ void Reset();
            }

            class ArrayListDebugView
            {
            }
        }

        class Hashtable : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ICloneable
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;
            /*0x10*/ System.Collections.Hashtable.bucket[] _buckets;
            /*0x18*/ int _count;
            /*0x1c*/ int _occupancy;
            /*0x20*/ int _loadsize;
            /*0x24*/ float _loadFactor;
            /*0x28*/ int _version;
            /*0x2c*/ bool _isWriterInProgress;
            /*0x30*/ System.Collections.ICollection _keys;
            /*0x38*/ System.Collections.ICollection _values;
            /*0x40*/ System.Collections.IEqualityComparer _keycomparer;
            /*0x48*/ object _syncRoot;

            static /*0x714cd4c*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
            static /*0x714e974*/ System.Collections.Hashtable Synchronized(System.Collections.Hashtable table);
            /*0x714cda8*/ Hashtable(bool trash);
            /*0x714cdb0*/ Hashtable();
            /*0x714d064*/ Hashtable(int capacity);
            /*0x714cdbc*/ Hashtable(int capacity, float loadFactor);
            /*0x714d06c*/ Hashtable(int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
            /*0x714d098*/ Hashtable(System.Collections.IEqualityComparer equalityComparer);
            /*0x714d0cc*/ Hashtable(int capacity, System.Collections.IEqualityComparer equalityComparer);
            /*0x714d0fc*/ Hashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x714d164*/ uint InitHash(object key, int hashsize, ref uint seed, ref uint incr);
            /*0x714d1b8*/ void Add(object key, object value);
            /*0x714d620*/ void Clear();
            /*0x714d720*/ object Clone();
            /*0x714d83c*/ bool Contains(object key);
            /*0x714d84c*/ bool ContainsKey(object key);
            /*0x714d9b0*/ void CopyKeys(System.Array array, int arrayIndex);
            /*0x714da54*/ void CopyEntries(System.Array array, int arrayIndex);
            /*0x714db54*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x714dcf4*/ void CopyValues(System.Array array, int arrayIndex);
            /*0x714dd9c*/ object get_Item(object key);
            /*0x714dfbc*/ void set_Item(object key, object value);
            /*0x714dfc4*/ void expand();
            /*0x714e16c*/ void rehash();
            /*0x714d6f4*/ void UpdateVersion();
            /*0x714e034*/ void rehash(int newsize);
            /*0x714e288*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x714e348*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x714e3a4*/ int GetHash(object key);
            /*0x714e46c*/ bool get_IsReadOnly();
            /*0x714e474*/ bool get_IsFixedSize();
            /*0x714e47c*/ bool get_IsSynchronized();
            /*0x714e484*/ bool KeyEquals(object item, object key);
            /*0x714e58c*/ System.Collections.ICollection get_Keys();
            /*0x714e640*/ System.Collections.ICollection get_Values();
            /*0x714d1c0*/ void Insert(object key, object nvalue, bool add);
            /*0x714e188*/ void putEntry(System.Collections.Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode);
            /*0x714e6f4*/ void Remove(object key);
            /*0x714e8fc*/ object get_SyncRoot();
            /*0x714e96c*/ int get_Count();
            /*0x714ea58*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x714ef8c*/ void OnDeserialization(object sender);

            struct bucket
            {
                /*0x10*/ object key;
                /*0x18*/ object val;
                /*0x20*/ int hash_coll;
            }

            class KeyCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x714e610*/ KeyCollection(System.Collections.Hashtable hashtable);
                /*0x714f828*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x714f9a4*/ System.Collections.IEnumerator GetEnumerator();
                /*0x714fa04*/ bool get_IsSynchronized();
                /*0x714fa28*/ object get_SyncRoot();
                /*0x714fa4c*/ int get_Count();
            }

            class ValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x714e6c4*/ ValueCollection(System.Collections.Hashtable hashtable);
                /*0x714fa68*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x714fbe4*/ System.Collections.IEnumerator GetEnumerator();
                /*0x714fc44*/ bool get_IsSynchronized();
                /*0x714fc68*/ object get_SyncRoot();
                /*0x714fc8c*/ int get_Count();
            }

            class SyncHashtable : System.Collections.Hashtable, System.Collections.IEnumerable
            {
                /*0x50*/ System.Collections.Hashtable _table;

                /*0x714ea28*/ SyncHashtable(System.Collections.Hashtable table);
                /*0x714fca8*/ SyncHashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x714fce4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x714fd1c*/ int get_Count();
                /*0x714fd40*/ bool get_IsReadOnly();
                /*0x714fd64*/ bool get_IsFixedSize();
                /*0x714fd88*/ bool get_IsSynchronized();
                /*0x714fd90*/ object get_Item(object key);
                /*0x714fdb4*/ void set_Item(object key, object value);
                /*0x714feb4*/ object get_SyncRoot();
                /*0x714fed8*/ void Add(object key, object value);
                /*0x714ffd8*/ void Clear();
                /*0x71500c8*/ bool Contains(object key);
                /*0x71500ec*/ bool ContainsKey(object key);
                /*0x7150178*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x7150278*/ object Clone();
                /*0x71503dc*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x7150400*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x7150424*/ System.Collections.ICollection get_Keys();
                /*0x7150524*/ System.Collections.ICollection get_Values();
                /*0x7150624*/ void Remove(object key);
                /*0x715071c*/ void OnDeserialization(object sender);
            }

            class HashtableEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;
                /*0x18*/ int _bucket;
                /*0x1c*/ int _version;
                /*0x20*/ bool _current;
                /*0x24*/ int _getObjectRetType;
                /*0x28*/ object _currentKey;
                /*0x30*/ object _currentValue;

                /*0x714e2e4*/ HashtableEnumerator(System.Collections.Hashtable hashtable, int getObjRetType);
                /*0x7150720*/ object Clone();
                /*0x7150728*/ object get_Key();
                /*0x7150788*/ bool MoveNext();
                /*0x71508d8*/ System.Collections.DictionaryEntry get_Entry();
                /*0x7150954*/ object get_Current();
                /*0x7150a38*/ object get_Value();
                /*0x7150a98*/ void Reset();
            }

            class HashtableDebugView
            {
            }
        }

        interface IHashCodeProvider
        {
            /*0x380b7a8*/ int GetHashCode(object obj);
        }

        namespace Concurrent
        {
            class ConcurrentQueue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ object _crossSegmentLock;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _tail;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _head;

                static /*0x3826a54*/ int GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> s, int head, int tail);
                static /*0x3907c14*/ long GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                /*0x380cb08*/ ConcurrentQueue();
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x380b128*/ bool get_IsEmpty();
                /*0x380b9e8*/ T[] ToArray();
                /*0x380b6a0*/ int get_Count();
                /*0x380d8b8*/ void CopyTo(T[] array, int index);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x380da84*/ void SnapForObservation(ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, ref int headHead, ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, ref int tailTail);
                /*0x3907c14*/ T GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue.Segment<T> segment, int i);
                /*0x3907c14*/ System.Collections.Generic.IEnumerator<T> Enumerate(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                /*0x3907c14*/ void Enqueue(T item);
                /*0x3907c14*/ void EnqueueSlow(T item);
                /*0x380b2f0*/ bool TryDequeue(ref T result);
                /*0x380b2f0*/ bool TryDequeueSlow(ref T item);
                bool TryPeek(ref T result, bool resultUsed);
                /*0x380cb08*/ void Clear();

                class Segment<T>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment.Slot<T> _slots;
                    /*0x0*/ int _slotsMask;
                    /*0x0*/ System.Collections.Concurrent.PaddedHeadAndTail _headAndTail;
                    /*0x0*/ bool _preservedForObservation;
                    /*0x0*/ bool _frozenForEnqueues;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _nextSegment;

                    /*0x380cffc*/ Segment(int boundedLength);
                    /*0x380b6a0*/ int get_Capacity();
                    /*0x380b6a0*/ int get_FreezeOffset();
                    /*0x380cb08*/ void EnsureFrozenForEnqueues();
                    /*0x380b2f0*/ bool TryDequeue(ref T item);
                    bool TryPeek(ref T result, bool resultUsed);
                    /*0x3907c14*/ bool TryEnqueue(T item);

                    struct Slot<T>
                    {
                        /*0x0*/ T Item;
                        /*0x0*/ int SequenceNumber;
                    }
                }

                class <Enumerate>d__28<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail;
                    /*0x0*/ int tailTail;
                    /*0x0*/ int headHead;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<T> <>4__this;
                    /*0x0*/ int <headTail>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> <s>5__4;
                    /*0x0*/ int <i>5__5;

                    /*0x380cffc*/ <Enumerate>d__28(int <>1__state);
                    /*0x380cb08*/ void System.IDisposable.Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ T System.Collections.Generic.IEnumerator<T>.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            struct PaddedHeadAndTail
            {
                /*0x90*/ int Head;
                /*0x110*/ int Tail;
            }

            class CDSCollectionETWBCLProvider : System.Diagnostics.Tracing.EventSource
            {
                static /*0x0*/ System.Collections.Concurrent.CDSCollectionETWBCLProvider Log;

                static /*0x7150ba4*/ CDSCollectionETWBCLProvider();
                /*0x7150b50*/ CDSCollectionETWBCLProvider();
                /*0x7150b58*/ void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets);
            }

            class ConcurrentDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                static /*0x0*/ bool s_isValueWriteAtomic;
                /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> _tables;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ bool _growLockArray;
                /*0x0*/ int _budget;
                /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _serializationArray;
                /*0x0*/ int _serializationConcurrencyLevel;
                /*0x0*/ int _serializationCapacity;

                static /*0x38358cc*/ ConcurrentDictionary();
                static /*0x3818690*/ bool IsValueWriteAtomic();
                static /*0x3837da0*/ void ThrowKeyNotFoundException(object key);
                static /*0x38358cc*/ void ThrowKeyNullException();
                static /*0x38243dc*/ int GetBucket(int hashcode, int bucketCount);
                static /*0x3907c14*/ void GetBucketAndLockNo(int hashcode, ref int bucketNo, ref int lockNo, int bucketCount, int lockCount);
                static /*0x3821e38*/ int get_DefaultConcurrencyLevel();
                /*0x380cb08*/ ConcurrentDictionary();
                /*0x380d83c*/ ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3907c14*/ ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x380d83c*/ void InitializeFromCollection(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection);
                /*0x3907c14*/ bool TryAdd(TKey key, TValue value);
                /*0x3907c14*/ bool ContainsKey(TKey key);
                /*0x3907c14*/ bool TryRemove(TKey key, ref TValue value);
                /*0x3907c14*/ bool TryRemoveInternal(TKey key, ref TValue value, bool matchValue, TValue oldValue);
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3907c14*/ bool TryGetValueInternal(TKey key, int hashcode, ref TValue value);
                /*0x3907c14*/ bool TryUpdateInternal(TKey key, int hashcode, TValue newValue, TValue comparisonValue);
                /*0x380cb08*/ void Clear();
                /*0x380d8b8*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x380b9e8*/ System.Collections.Generic.KeyValuePair<TKey, TValue> ToArray();
                /*0x380d8b8*/ void CopyToPairs(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x380d8b8*/ void CopyToEntries(System.Collections.DictionaryEntry[] array, int index);
                /*0x380d8b8*/ void CopyToObjects(object[] array, int index);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                /*0x3907c14*/ bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, ref TValue resultingValue);
                /*0x3907c14*/ TValue get_Item(TKey key);
                /*0x3907c14*/ void set_Item(TKey key, TValue value);
                /*0x380b6a0*/ int get_Count();
                /*0x380b6a0*/ int GetCountInternal();
                /*0x3907c14*/ TValue GetOrAdd(TKey key, System.Func<TKey, TValue> valueFactory);
                /*0x3907c14*/ TValue GetOrAdd(TKey key, TValue value);
                /*0x3907c14*/ TValue AddOrUpdate(TKey key, System.Func<TKey, TValue> addValueFactory, System.Func<TKey, TValue, TValue> updateValueFactory);
                /*0x3907c14*/ TValue AddOrUpdate(TKey key, TValue addValue, System.Func<TKey, TValue, TValue> updateValueFactory);
                /*0x3907c14*/ void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                /*0x3907c14*/ bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TKey> get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TValue> get_Values();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
                /*0x3907c14*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x380b128*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x380d93c*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x380b2f0*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x380b9e8*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x380b128*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x380b128*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x380b9e8*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x380d83c*/ void System.Collections.IDictionary.Remove(object key);
                /*0x380b9e8*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x380bb68*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x380d93c*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380d83c*/ void GrowTable(System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> tables);
                /*0x380d83c*/ void AcquireAllLocks(ref int locksAcquired);
                /*0x380d12c*/ void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
                /*0x380d0e4*/ void ReleaseLocks(int fromInclusive, int toExclusive);
                /*0x380b9e8*/ System.Collections.ObjectModel.ReadOnlyCollection<TKey> GetKeys();
                /*0x380b9e8*/ System.Collections.ObjectModel.ReadOnlyCollection<TValue> GetValues();
                /*0x380e0e8*/ void OnSerializing(System.Runtime.Serialization.StreamingContext context);
                /*0x380e0e8*/ void OnSerialized(System.Runtime.Serialization.StreamingContext context);
                /*0x380e0e8*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);

                class Tables<TKey, TValue>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _buckets;
                    /*0x0*/ object[] _locks;
                    /*0x0*/ int[] _countPerLock;

                    /*0x380da4c*/ Tables(System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> buckets, object[] locks, int[] countPerLock);
                }

                class Node<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _next;
                    /*0x0*/ int _hashcode;

                    /*0x3907c14*/ Node(TKey key, TValue value, int hashcode, System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> next);
                }

                class DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    /*0x380d83c*/ DictionaryEnumerator(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    /*0x380b9e8*/ object get_Key();
                    /*0x380b9e8*/ object get_Value();
                    /*0x380b9e8*/ object get_Current();
                    /*0x380b128*/ bool MoveNext();
                    /*0x380cb08*/ void Reset();
                }

                class <GetEnumerator>d__35<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> <>4__this;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <buckets>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <current>5__4;

                    /*0x380cffc*/ <GetEnumerator>d__35(int <>1__state);
                    /*0x380cb08*/ void System.IDisposable.Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ System.Collections.Generic.KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class ConcurrentStack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> _head;

                /*0x380cb08*/ ConcurrentStack();
                /*0x380d83c*/ ConcurrentStack(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380d83c*/ void InitializeFromCollection(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380b6a0*/ int get_Count();
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380b9e8*/ System.Collections.Generic.List<T> ToList();
                /*0x380bb68*/ System.Collections.Generic.List<T> ToList(System.Collections.Concurrent.ConcurrentStack.Node<T> curr);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x380bb68*/ System.Collections.Generic.IEnumerator<T> GetEnumerator(System.Collections.Concurrent.ConcurrentStack.Node<T> head);
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class Node<T>
                {
                    /*0x0*/ T _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> _next;

                    /*0x3907c14*/ Node(T value);
                }

                class <GetEnumerator>d__35<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> <current>5__2;

                    /*0x380cffc*/ <GetEnumerator>d__35(int <>1__state);
                    /*0x380cb08*/ void System.IDisposable.Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ T System.Collections.Generic.IEnumerator<T>.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            class IProducerConsumerCollectionDebugView<T>
            {
            }
        }

        namespace ObjectModel
        {
            class Collection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> items;

                static /*0x381ac0c*/ bool IsCompatibleObject(object value);
                /*0x380cb08*/ Collection();
                /*0x380d83c*/ Collection(System.Collections.Generic.IList<T> list);
                /*0x380b6a0*/ int get_Count();
                /*0x380b9e8*/ System.Collections.Generic.IList<T> get_Items();
                /*0x3907c14*/ T get_Item(int index);
                /*0x3907c14*/ void set_Item(int index, T value);
                /*0x3907c14*/ void Add(T item);
                /*0x380cb08*/ void Clear();
                /*0x380d8b8*/ void CopyTo(T[] array, int index);
                /*0x3907c14*/ bool Contains(T item);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x3907c14*/ int IndexOf(T item);
                /*0x3907c14*/ void Insert(int index, T item);
                /*0x3907c14*/ bool Remove(T item);
                /*0x380cffc*/ void RemoveAt(int index);
                /*0x380cb08*/ void ClearItems();
                /*0x3907c14*/ void InsertItem(int index, T item);
                /*0x380cffc*/ void RemoveItem(int index);
                /*0x3907c14*/ void SetItem(int index, T item);
                /*0x380b128*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380ba90*/ object System.Collections.IList.get_Item(int index);
                /*0x380d170*/ void System.Collections.IList.set_Item(int index, object value);
                /*0x380b128*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x380b128*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x380b7a8*/ int System.Collections.IList.Add(object value);
                /*0x380b2f0*/ bool System.Collections.IList.Contains(object value);
                /*0x380b7a8*/ int System.Collections.IList.IndexOf(object value);
                /*0x380d170*/ void System.Collections.IList.Insert(int index, object value);
                /*0x380d83c*/ void System.Collections.IList.Remove(object value);
            }

            class ReadOnlyCollection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> list;
                /*0x0*/ object _syncRoot;

                static /*0x381ac0c*/ bool IsCompatibleObject(object value);
                /*0x380d83c*/ ReadOnlyCollection(System.Collections.Generic.IList<T> list);
                /*0x380b6a0*/ int get_Count();
                /*0x3907c14*/ T get_Item(int index);
                /*0x3907c14*/ bool Contains(T value);
                /*0x380d8b8*/ void CopyTo(T[] array, int index);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x3907c14*/ int IndexOf(T value);
                /*0x380b9e8*/ System.Collections.Generic.IList<T> get_Items();
                /*0x380b128*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x3907c14*/ T System.Collections.Generic.IList<T>.get_Item(int index);
                /*0x3907c14*/ void System.Collections.Generic.IList<T>.set_Item(int index, T value);
                /*0x3907c14*/ void System.Collections.Generic.ICollection<T>.Add(T value);
                /*0x380cb08*/ void System.Collections.Generic.ICollection<T>.Clear();
                /*0x3907c14*/ void System.Collections.Generic.IList<T>.Insert(int index, T value);
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<T>.Remove(T value);
                /*0x380cffc*/ void System.Collections.Generic.IList<T>.RemoveAt(int index);
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380b128*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x380b128*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x380ba90*/ object System.Collections.IList.get_Item(int index);
                /*0x380d170*/ void System.Collections.IList.set_Item(int index, object value);
                /*0x380b7a8*/ int System.Collections.IList.Add(object value);
                /*0x380cb08*/ void System.Collections.IList.Clear();
                /*0x380b2f0*/ bool System.Collections.IList.Contains(object value);
                /*0x380b7a8*/ int System.Collections.IList.IndexOf(object value);
                /*0x380d170*/ void System.Collections.IList.Insert(int index, object value);
                /*0x380d83c*/ void System.Collections.IList.Remove(object value);
                /*0x380cffc*/ void System.Collections.IList.RemoveAt(int index);
            }

            class KeyedCollection<TKey, TItem> : System.Collections.ObjectModel.Collection<TItem>
            {
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> comparer;
                /*0x0*/ System.Collections.Generic.Dictionary<TKey, TItem> dict;
                /*0x0*/ int keyCount;
                /*0x0*/ int threshold;

                /*0x380cb08*/ KeyedCollection();
                /*0x380d83c*/ KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x380d8b8*/ KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold);
                /*0x380b9e8*/ System.Collections.Generic.List<TItem> get_Items();
                /*0x3907c14*/ TItem get_Item(TKey key);
                /*0x3907c14*/ bool Contains(TKey key);
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TItem item);
                /*0x3907c14*/ bool Remove(TKey key);
                /*0x380b9e8*/ System.Collections.Generic.IDictionary<TKey, TItem> get_Dictionary();
                /*0x380cb08*/ void ClearItems();
                /*0x3907c14*/ TKey GetKeyForItem(TItem item);
                /*0x3907c14*/ void InsertItem(int index, TItem item);
                /*0x380cffc*/ void RemoveItem(int index);
                /*0x3907c14*/ void SetItem(int index, TItem item);
                /*0x3907c14*/ void AddKey(TKey key, TItem item);
                /*0x380cb08*/ void CreateDictionary();
                /*0x3907c14*/ void RemoveKey(TKey key);
            }

            class ReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> m_dictionary;
                /*0x0*/ object _syncRoot;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> _values;

                static /*0x381ac0c*/ bool IsCompatibleKey(object key);
                /*0x380d83c*/ ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                /*0x380b9e8*/ System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> get_Keys();
                /*0x380b9e8*/ System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> get_Values();
                /*0x3907c14*/ bool ContainsKey(TKey key);
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                /*0x3907c14*/ TValue get_Item(TKey key);
                /*0x3907c14*/ void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                /*0x3907c14*/ bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                /*0x3907c14*/ TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
                /*0x3907c14*/ void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
                /*0x380b6a0*/ int get_Count();
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                /*0x380d8b8*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int arrayIndex);
                /*0x380b128*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x3907c14*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                /*0x380cb08*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x380d93c*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x380cb08*/ void System.Collections.IDictionary.Clear();
                /*0x380b2f0*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x380b9e8*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x380b128*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x380b128*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x380b9e8*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x380d83c*/ void System.Collections.IDictionary.Remove(object key);
                /*0x380b9e8*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x380bb68*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x380d93c*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();

                struct DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> _dictionary;
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    /*0x380d83c*/ DictionaryEnumerator(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    /*0x380b9e8*/ object get_Key();
                    /*0x380b9e8*/ object get_Value();
                    /*0x380b9e8*/ object get_Current();
                    /*0x380b128*/ bool MoveNext();
                    /*0x380cb08*/ void Reset();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TKey> _collection;
                    /*0x0*/ object _syncRoot;

                    /*0x380d83c*/ KeyCollection(System.Collections.Generic.ICollection<TKey> collection);
                    /*0x380cb08*/ KeyCollection();
                    /*0x3907c14*/ void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    /*0x380cb08*/ void System.Collections.Generic.ICollection<TKey>.Clear();
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    /*0x380d8b8*/ void CopyTo(TKey[] array, int arrayIndex);
                    /*0x380b6a0*/ int get_Count();
                    /*0x380b128*/ bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    /*0x380b9e8*/ System.Collections.Generic.IEnumerator<TKey> GetEnumerator();
                    /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TValue> _collection;
                    /*0x0*/ object _syncRoot;

                    /*0x380d83c*/ ValueCollection(System.Collections.Generic.ICollection<TValue> collection);
                    /*0x380cb08*/ ValueCollection();
                    /*0x3907c14*/ void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    /*0x380cb08*/ void System.Collections.Generic.ICollection<TValue>.Clear();
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    /*0x380d8b8*/ void CopyTo(TValue[] array, int arrayIndex);
                    /*0x380b6a0*/ int get_Count();
                    /*0x380b128*/ bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    /*0x380b9e8*/ System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
                    /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                }
            }

            class ReadOnlyDictionaryHelpers
            {
                static /*0x383b458*/ void CopyToNonGenericICollectionHelper<T>(System.Collections.Generic.ICollection<T> collection, System.Array array, int index);
            }
        }

        namespace Generic
        {
            enum InsertionBehavior
            {
                None = 0,
                OverwriteExisting = 1,
                ThrowOnExisting = 2,
            }

            class Dictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
            {
                /*0x0*/ int[] _buckets;
                /*0x0*/ System.Collections.Generic.Dictionary.Entry<TKey, TValue> _entries;
                /*0x0*/ int _count;
                /*0x0*/ int _freeList;
                /*0x0*/ int _freeCount;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> _values;
                /*0x0*/ object _syncRoot;

                static /*0x381ac0c*/ bool IsCompatibleKey(object key);
                /*0x380cb08*/ Dictionary();
                /*0x380cffc*/ Dictionary(int capacity);
                /*0x380d83c*/ Dictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x380d170*/ Dictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x380d83c*/ Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                /*0x380d93c*/ Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x380b6a0*/ int get_Count();
                /*0x380b9e8*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> get_Values();
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
                /*0x3907c14*/ TValue get_Item(TKey key);
                /*0x3907c14*/ void set_Item(TKey key, TValue value);
                /*0x3907c14*/ void Add(TKey key, TValue value);
                /*0x3907c14*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x3907c14*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x380cb08*/ void Clear();
                /*0x3907c14*/ bool ContainsKey(TKey key);
                /*0x3907c14*/ bool ContainsValue(TValue value);
                /*0x380d8b8*/ void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x3907c14*/ System.Collections.Generic.Dictionary.Enumerator<TKey, TValue> GetEnumerator();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x3907c14*/ int FindEntry(TKey key);
                /*0x380b6cc*/ int Initialize(int capacity);
                /*0x3907c14*/ bool TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior);
                /*0x380d83c*/ void OnDeserialization(object sender);
                /*0x380cb08*/ void Resize();
                /*0x380d03c*/ void Resize(int newSize, bool forceNewHashCodes);
                /*0x3907c14*/ bool Remove(TKey key);
                /*0x3907c14*/ bool Remove(TKey key, ref TValue value);
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3907c14*/ bool TryAdd(TKey key, TValue value);
                /*0x380b128*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x380d8b8*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x380b6cc*/ int EnsureCapacity(int capacity);
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380b128*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x380b128*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x380b9e8*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x380b9e8*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x380bb68*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x380d93c*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x380d93c*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x380b2f0*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x380b9e8*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x380d83c*/ void System.Collections.IDictionary.Remove(object key);

                struct Entry<TKey, TValue>
                {
                    /*0x0*/ int hashCode;
                    /*0x0*/ int next;
                    /*0x0*/ TKey key;
                    /*0x0*/ TValue value;
                }

                struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator, System.Collections.IDictionaryEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;
                    /*0x0*/ int _getEnumeratorRetType;

                    /*0x380d8b8*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    /*0x380cb08*/ void Dispose();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                    System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry();
                    /*0x380b9e8*/ object System.Collections.IDictionaryEnumerator.get_Key();
                    /*0x380b9e8*/ object System.Collections.IDictionaryEnumerator.get_Value();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    /*0x380d83c*/ KeyCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    /*0x3907c14*/ System.Collections.Generic.Dictionary.KeyCollection.Enumerator<TKey, TValue> GetEnumerator();
                    /*0x380d8b8*/ void CopyTo(TKey[] array, int index);
                    /*0x380b6a0*/ int get_Count();
                    /*0x380b128*/ bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    /*0x3907c14*/ void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    /*0x380cb08*/ void System.Collections.Generic.ICollection<TKey>.Clear();
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    /*0x380b9e8*/ System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
                    /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TKey>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TKey _currentKey;

                        /*0x380d83c*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        /*0x380cb08*/ void Dispose();
                        /*0x380b128*/ bool MoveNext();
                        /*0x3907c14*/ TKey get_Current();
                        /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                        /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                    }
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    /*0x380d83c*/ ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    /*0x3907c14*/ System.Collections.Generic.Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator();
                    /*0x380d8b8*/ void CopyTo(TValue[] array, int index);
                    /*0x380b6a0*/ int get_Count();
                    /*0x380b128*/ bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    /*0x3907c14*/ void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    /*0x380cb08*/ void System.Collections.Generic.ICollection<TValue>.Clear();
                    /*0x3907c14*/ bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    /*0x380b9e8*/ System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
                    /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TValue>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TValue _currentValue;

                        /*0x380d83c*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        /*0x380cb08*/ void Dispose();
                        /*0x380b128*/ bool MoveNext();
                        /*0x3907c14*/ TValue get_Current();
                        /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                        /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                    }
                }
            }

            interface IAsyncEnumerable<T>
            {
                /*0x380ba14*/ System.Collections.Generic.IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken);
            }

            interface IAsyncEnumerator<T> : System.IAsyncDisposable
            {
                System.Threading.Tasks.ValueTask<bool> MoveNextAsync();
                /*0x3907c14*/ T get_Current();
            }

            interface ICollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x380b6a0*/ int get_Count();
                /*0x380b128*/ bool get_IsReadOnly();
                /*0x3907c14*/ void Add(T item);
                /*0x380cb08*/ void Clear();
                /*0x3907c14*/ bool Contains(T item);
                /*0x380d8b8*/ void CopyTo(T[] array, int arrayIndex);
                /*0x3907c14*/ bool Remove(T item);
            }

            class ICollectionDebugView<T>
            {
            }

            interface IComparer<T>
            {
                /*0x3907c14*/ int Compare(T x, T y);
            }

            interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x3907c14*/ TValue get_Item(TKey key);
                /*0x3907c14*/ void set_Item(TKey key, TValue value);
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TKey> get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.ICollection<TValue> get_Values();
                /*0x3907c14*/ bool ContainsKey(TKey key);
                /*0x3907c14*/ void Add(TKey key, TValue value);
                /*0x3907c14*/ bool Remove(TKey key);
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TValue value);
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class DictionaryKeyCollectionDebugView<TKey, TValue>
            {
            }

            class DictionaryValueCollectionDebugView<TKey, TValue>
            {
            }

            interface IEnumerable<T> : System.Collections.IEnumerable
            {
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
            }

            interface IEnumerator<T> : System.IDisposable, System.Collections.IEnumerator
            {
                /*0x3907c14*/ T get_Current();
            }

            interface IEqualityComparer<T>
            {
                /*0x3907c14*/ bool Equals(T x, T y);
                /*0x3907c14*/ int GetHashCode(T obj);
            }

            interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x3907c14*/ T get_Item(int index);
                /*0x3907c14*/ void set_Item(int index, T value);
                /*0x3907c14*/ int IndexOf(T item);
                /*0x3907c14*/ void Insert(int index, T item);
                /*0x380cffc*/ void RemoveAt(int index);
            }

            interface IReadOnlyCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x380b6a0*/ int get_Count();
            }

            interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x3907c14*/ bool ContainsKey(TKey key);
                /*0x3907c14*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x3907c14*/ TValue get_Item(TKey key);
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TKey> get_Keys();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerable<TValue> get_Values();
            }

            interface IReadOnlyList<T> : System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x3907c14*/ T get_Item(int index);
            }

            class KeyNotFoundException : System.SystemException
            {
                /*0x7150c0c*/ KeyNotFoundException();
                /*0x7150c68*/ KeyNotFoundException(string message);
                /*0x7150c8c*/ KeyNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class KeyValuePair
            {
                static /*0x7150c94*/ string PairToString(object key, object value);
            }

            struct KeyValuePair<TKey, TValue>
            {
                /*0x0*/ TKey key;
                /*0x0*/ TValue value;

                /*0x3907c14*/ KeyValuePair(TKey key, TValue value);
                /*0x3907c14*/ TKey get_Key();
                /*0x3907c14*/ TValue get_Value();
                /*0x380b9e8*/ string ToString();
                /*0x380d93c*/ void Deconstruct(ref TKey key, ref TValue value);
            }

            class List<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                static /*0x38358cc*/ List();
                static /*0x381ac0c*/ bool IsCompatibleObject(object value);
                /*0x380cb08*/ List();
                /*0x380cffc*/ List(int capacity);
                /*0x380d83c*/ List(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380b6a0*/ int get_Capacity();
                /*0x380cffc*/ void set_Capacity(int value);
                /*0x380b6a0*/ int get_Count();
                /*0x380b128*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x380b128*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x380b128*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x3907c14*/ T get_Item(int index);
                /*0x3907c14*/ void set_Item(int index, T value);
                /*0x380ba90*/ object System.Collections.IList.get_Item(int index);
                /*0x380d170*/ void System.Collections.IList.set_Item(int index, object value);
                /*0x3907c14*/ void Add(T item);
                /*0x3907c14*/ void AddWithResize(T item);
                /*0x380b7a8*/ int System.Collections.IList.Add(object item);
                /*0x380d83c*/ void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380b9e8*/ System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly();
                /*0x3907c14*/ int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);
                /*0x3907c14*/ int BinarySearch(T item);
                /*0x3907c14*/ int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer);
                /*0x380cb08*/ void Clear();
                /*0x3907c14*/ bool Contains(T item);
                /*0x380b2f0*/ bool System.Collections.IList.Contains(object item);
                /*0x380d83c*/ void CopyTo(T[] array);
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                void CopyTo(int index, T[] array, int arrayIndex, int count);
                /*0x380d8b8*/ void CopyTo(T[] array, int arrayIndex);
                /*0x380cffc*/ void EnsureCapacity(int min);
                /*0x380b2f0*/ bool Exists(System.Predicate<T> match);
                /*0x3907c14*/ T Find(System.Predicate<T> match);
                /*0x380bb68*/ System.Collections.Generic.List<T> FindAll(System.Predicate<T> match);
                /*0x380b7a8*/ int FindIndex(System.Predicate<T> match);
                int FindIndex(int startIndex, System.Predicate<T> match);
                /*0x3907c14*/ int FindIndex(int startIndex, int count, System.Predicate<T> match);
                /*0x3907c14*/ T FindLast(System.Predicate<T> match);
                /*0x380b7a8*/ int FindLastIndex(System.Predicate<T> match);
                /*0x3907c14*/ int FindLastIndex(int startIndex, int count, System.Predicate<T> match);
                /*0x380d83c*/ void ForEach(System.Action<T> action);
                /*0x3907c14*/ System.Collections.Generic.List.Enumerator<T> GetEnumerator();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                System.Collections.Generic.List<T> GetRange(int index, int count);
                /*0x3907c14*/ int IndexOf(T item);
                /*0x380b7a8*/ int System.Collections.IList.IndexOf(object item);
                /*0x3907c14*/ void Insert(int index, T item);
                /*0x380d170*/ void System.Collections.IList.Insert(int index, object item);
                /*0x380d170*/ void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                /*0x3907c14*/ bool Remove(T item);
                /*0x380d83c*/ void System.Collections.IList.Remove(object item);
                /*0x380b7a8*/ int RemoveAll(System.Predicate<T> match);
                /*0x380cffc*/ void RemoveAt(int index);
                /*0x380d0e4*/ void RemoveRange(int index, int count);
                /*0x380cb08*/ void Reverse();
                /*0x380d0e4*/ void Reverse(int index, int count);
                /*0x380cb08*/ void Sort();
                /*0x380d83c*/ void Sort(System.Collections.Generic.IComparer<T> comparer);
                /*0x380d12c*/ void Sort(int index, int count, System.Collections.Generic.IComparer<T> comparer);
                /*0x380d83c*/ void Sort(System.Comparison<T> comparison);
                /*0x380b9e8*/ T[] ToArray();
                /*0x380cb08*/ void TrimExcess();
                /*0x380d83c*/ void AddEnumerable(System.Collections.Generic.IEnumerable<T> enumerable);

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.List<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    /*0x380d83c*/ Enumerator(System.Collections.Generic.List<T> list);
                    /*0x380cb08*/ void Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x380b128*/ bool MoveNextRare();
                    /*0x3907c14*/ T get_Current();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                }
            }

            struct ValueListBuilder<T>
            {
                /*0x0*/ System.Span<T> _span;
                /*0x0*/ T[] _arrayFromPool;
                /*0x0*/ int _pos;

                /*0x3907c14*/ ValueListBuilder(System.Span<T> initialSpan);
                /*0x380b6a0*/ int get_Length();
                /*0x3907c14*/ void Append(T item);
                /*0x3907c14*/ System.ReadOnlySpan<T> AsSpan();
                /*0x380cb08*/ void Dispose();
                /*0x380cb08*/ void Grow();
            }

            struct ArrayBuilder<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _count;

                /*0x380b6a0*/ int get_Capacity();
                /*0x380b6a0*/ int get_Count();
                /*0x3907c14*/ T get_Item(int index);
                /*0x3907c14*/ void Add(T item);
                /*0x3907c14*/ void UncheckedAdd(T item);
                /*0x380cffc*/ void EnsureCapacity(int minimum);
            }

            class EnumerableHelpers
            {
                static /*0x382eaf0*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
                static /*0x3830700*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source, ref int length);
            }

            struct LargeArrayBuilder<T>
            {
                /*0x0*/ int _maxCapacity;
                /*0x0*/ T[] _first;
                /*0x0*/ System.Collections.Generic.ArrayBuilder<T[]> _buffers;
                /*0x0*/ T[] _current;
                /*0x0*/ int _index;
                /*0x0*/ int _count;

                /*0x380cdf0*/ LargeArrayBuilder(bool initialize);
                /*0x380cffc*/ LargeArrayBuilder(int maxCapacity);
                /*0x380d83c*/ void AddRange(System.Collections.Generic.IEnumerable<T> items);
                /*0x3907c14*/ void AddWithBufferAllocation(T item, ref T[] destination, ref int index);
                void CopyTo(T[] array, int arrayIndex, int count);
                /*0x380ba90*/ T[] GetBuffer(int index);
                /*0x380b9e8*/ T[] ToArray();
                /*0x380b2f0*/ bool TryMove(ref T[] array);
                /*0x380cb08*/ void AllocateBuffer();
            }

            class LowLevelDictionary<TKey, TValue>
            {
                /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _buckets;
                /*0x0*/ int _numEntries;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;

                /*0x380cb08*/ LowLevelDictionary();
                /*0x380d170*/ LowLevelDictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x3907c14*/ void set_Item(TKey key, TValue value);
                /*0x380cffc*/ void Clear(int capacity);
                /*0x3907c14*/ bool Remove(TKey key);
                /*0x3907c14*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> Find(TKey key);
                /*0x3907c14*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
                /*0x380cb08*/ void ExpandBuckets();
                /*0x3907c14*/ int GetBucket(TKey key, int numBuckets);

                class Entry<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _next;

                    /*0x380cb08*/ Entry();
                }

                class DefaultComparer`1<TKey, TValue, T> : System.Collections.Generic.IEqualityComparer<T>
                {
                    /*0x380cb08*/ DefaultComparer`1();
                    /*0x3907c14*/ bool Equals(T x, T y);
                    /*0x3907c14*/ int GetHashCode(T obj);
                }
            }

            class CollectionExtensions
            {
                static /*0x3907c14*/ TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
                static /*0x3907c14*/ TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
                static /*0x3907c14*/ bool Remove<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, TKey key, ref TValue value);
            }

            class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _head;
                /*0x0*/ int _tail;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                /*0x380cb08*/ Queue();
                /*0x380cffc*/ Queue(int capacity);
                /*0x380d83c*/ Queue(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380b6a0*/ int get_Count();
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380cb08*/ void Clear();
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x3907c14*/ void Enqueue(T item);
                /*0x3907c14*/ System.Collections.Generic.Queue.Enumerator<T> GetEnumerator();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3907c14*/ T Dequeue();
                /*0x380b2f0*/ bool TryDequeue(ref T result);
                /*0x3907c14*/ T Peek();
                /*0x380b2f0*/ bool TryPeek(ref T result);
                /*0x3907c14*/ bool Contains(T item);
                /*0x380b9e8*/ T[] ToArray();
                /*0x380cffc*/ void SetCapacity(int capacity);
                /*0x380d83c*/ void MoveNext(ref int index);
                /*0x380cb08*/ void ThrowForEmptyQueue();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Queue<T> _q;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    /*0x380d83c*/ Enumerator(System.Collections.Generic.Queue<T> q);
                    /*0x380cb08*/ void Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ T get_Current();
                    /*0x380cb08*/ void ThrowEnumerationNotStartedOrEnded();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class QueueDebugView<T>
            {
            }

            class Stack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                /*0x380cb08*/ Stack();
                /*0x380cffc*/ Stack(int capacity);
                /*0x380d83c*/ Stack(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380b6a0*/ int get_Count();
                /*0x380b128*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x380b9e8*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x380cb08*/ void Clear();
                /*0x3907c14*/ bool Contains(T item);
                /*0x380d8b8*/ void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                /*0x3907c14*/ System.Collections.Generic.Stack.Enumerator<T> GetEnumerator();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x3907c14*/ T Peek();
                /*0x380b2f0*/ bool TryPeek(ref T result);
                /*0x3907c14*/ T Pop();
                /*0x380b2f0*/ bool TryPop(ref T result);
                /*0x3907c14*/ void Push(T item);
                /*0x3907c14*/ void PushWithResize(T item);
                /*0x380cb08*/ void ThrowForEmptyStack();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Stack<T> _stack;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    /*0x380d83c*/ Enumerator(System.Collections.Generic.Stack<T> stack);
                    /*0x380cb08*/ void Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x3907c14*/ T get_Current();
                    /*0x380cb08*/ void ThrowEnumerationNotStartedOrEnded();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class StackDebugView<T>
            {
            }

            class CollectionDebugView<T>
            {
            }

            class DictionaryDebugView<K, V>
            {
            }

            class LowLevelList<T>
            {
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;

                static /*0x38358cc*/ LowLevelList();
                /*0x380cb08*/ LowLevelList();
                /*0x380cffc*/ LowLevelList(int capacity);
                /*0x380b6a0*/ int get_Capacity();
                /*0x380cffc*/ void set_Capacity(int value);
                /*0x380b6a0*/ int get_Count();
                /*0x3907c14*/ T get_Item(int index);
                /*0x3907c14*/ void set_Item(int index, T value);
                /*0x3907c14*/ void Add(T item);
                /*0x380cffc*/ void EnsureCapacity(int min);
                /*0x380d83c*/ void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                /*0x380cb08*/ void Clear();
                /*0x3907c14*/ bool Contains(T item);
                /*0x380d8b8*/ void CopyTo(T[] array, int arrayIndex);
                /*0x3907c14*/ int IndexOf(T item);
                /*0x3907c14*/ void Insert(int index, T item);
                /*0x380d170*/ void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                /*0x3907c14*/ bool Remove(T item);
                /*0x380b7a8*/ int RemoveAll(System.Predicate<T> match);
                /*0x380cffc*/ void RemoveAt(int index);
            }

            class LowLevelListWithIList<T> : System.Collections.Generic.LowLevelList<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x380cb08*/ LowLevelListWithIList();
                /*0x380cffc*/ LowLevelListWithIList(int capacity);
                /*0x380b128*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.LowLevelListWithIList<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    /*0x380d83c*/ Enumerator(System.Collections.Generic.LowLevelListWithIList<T> list);
                    /*0x380cb08*/ void Dispose();
                    /*0x380b128*/ bool MoveNext();
                    /*0x380b128*/ bool MoveNextRare();
                    /*0x3907c14*/ T get_Current();
                    /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                    /*0x380cb08*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class IntrospectiveSortUtilities
            {
                static /*0x7150d54*/ int FloorLog2PlusOne(int n);
                static /*0x7150d7c*/ void ThrowOrIgnoreBadComparer(object comparer);
            }

            class ArraySortHelper<T>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<T> s_defaultArraySortHelper;

                static /*0x38358cc*/ ArraySortHelper();
                static /*0x383a00c*/ void Sort(T[] keys, int index, int length, System.Comparison<T> comparer);
                static /*0x3907c14*/ int InternalBinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
                static /*0x383b540*/ void SwapIfGreater(T[] keys, System.Comparison<T> comparer, int a, int b);
                static /*0x3839f7c*/ void Swap(T[] a, int i, int j);
                static /*0x383a00c*/ void IntrospectiveSort(T[] keys, int left, int length, System.Comparison<T> comparer);
                static /*0x3907c14*/ void IntroSort(T[] keys, int lo, int hi, int depthLimit, System.Comparison<T> comparer);
                static int PickPivotAndPartition(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x383a00c*/ void Heapsort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x3907c14*/ void DownHeap(T[] keys, int i, int n, int lo, System.Comparison<T> comparer);
                static /*0x383a00c*/ void InsertionSort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x382dee4*/ System.Collections.Generic.ArraySortHelper<T> get_Default();
                /*0x380cb08*/ ArraySortHelper();
                void Sort(T[] keys, int index, int length, System.Collections.Generic.IComparer<T> comparer);
                /*0x3907c14*/ int BinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
            }

            class ArraySortHelper<TKey, TValue>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;

                static /*0x38358cc*/ ArraySortHelper();
                static /*0x3907c14*/ void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, System.Collections.Generic.IComparer<TKey> comparer, int a, int b);
                static /*0x383b540*/ void Swap(TKey[] keys, TValue[] values, int i, int j);
                static /*0x383b584*/ void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3907c14*/ void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3907c14*/ int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x383b584*/ void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x3907c14*/ void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x383b584*/ void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x382dee4*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> get_Default();
                /*0x380cb08*/ ArraySortHelper();
                void Sort(TKey[] keys, TValue[] values, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
            }

            class Comparer<T> : System.Collections.IComparer, System.Collections.Generic.IComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.Comparer<T> defaultComparer;

                static /*0x382dee4*/ System.Collections.Generic.Comparer<T> get_Default();
                static /*0x382eaf0*/ System.Collections.Generic.Comparer<T> Create(System.Comparison<T> comparison);
                static /*0x382dee4*/ System.Collections.Generic.Comparer<T> CreateComparer();
                /*0x380cb08*/ Comparer();
                /*0x3907c14*/ int Compare(T x, T y);
                int System.Collections.IComparer.Compare(object x, object y);
            }

            class GenericComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x380cb08*/ GenericComparer();
                /*0x3907c14*/ int Compare(T x, T y);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class NullableComparer<T> : System.Collections.Generic.Comparer<System.Nullable<T>>
            {
                /*0x380cb08*/ NullableComparer();
                /*0x3907c14*/ int Compare(System.Nullable<T> x, System.Nullable<T> y);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class ObjectComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x380cb08*/ ObjectComparer();
                /*0x3907c14*/ int Compare(T x, T y);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class ComparisonComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x0*/ System.Comparison<T> _comparison;

                /*0x380d83c*/ ComparisonComparer(System.Comparison<T> comparison);
                /*0x3907c14*/ int Compare(T x, T y);
            }

            class EqualityComparer<T> : System.Collections.IEqualityComparer, System.Collections.Generic.IEqualityComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.EqualityComparer<T> defaultComparer;

                static /*0x382dee4*/ System.Collections.Generic.EqualityComparer<T> get_Default();
                static /*0x382dee4*/ System.Collections.Generic.EqualityComparer<T> CreateComparer();
                /*0x380cb08*/ EqualityComparer();
                /*0x3907c14*/ bool Equals(T x, T y);
                /*0x3907c14*/ int GetHashCode(T obj);
                /*0x3907c14*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x3907c14*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x380b7a8*/ int System.Collections.IEqualityComparer.GetHashCode(object obj);
                /*0x380b32c*/ bool System.Collections.IEqualityComparer.Equals(object x, object y);
            }

            class GenericEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                /*0x380cb08*/ GenericEqualityComparer();
                /*0x3907c14*/ bool Equals(T x, T y);
                /*0x3907c14*/ int GetHashCode(T obj);
                /*0x3907c14*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x3907c14*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class NullableEqualityComparer<T> : System.Collections.Generic.EqualityComparer<System.Nullable<T>>
            {
                /*0x380cb08*/ NullableEqualityComparer();
                /*0x3907c14*/ bool Equals(System.Nullable<T> x, System.Nullable<T> y);
                /*0x3907c14*/ int GetHashCode(System.Nullable<T> obj);
                /*0x3907c14*/ int IndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                /*0x3907c14*/ int LastIndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class ObjectEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                /*0x380cb08*/ ObjectEqualityComparer();
                /*0x3907c14*/ bool Equals(T x, T y);
                /*0x3907c14*/ int GetHashCode(T obj);
                /*0x3907c14*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x3907c14*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class ByteEqualityComparer : System.Collections.Generic.EqualityComparer<byte>
            {
                /*0x715108c*/ ByteEqualityComparer();
                /*0x7150ddc*/ bool Equals(byte x, byte y);
                /*0x7150dec*/ int GetHashCode(byte b);
                /*0x7150e08*/ int IndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x7150f88*/ int LastIndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x7150fe0*/ bool Equals(object obj);
                /*0x7151058*/ int GetHashCode();
            }

            class EnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x380cb08*/ EnumEqualityComparer();
                EnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3907c14*/ bool Equals(T x, T y);
                /*0x3907c14*/ int GetHashCode(T obj);
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
            }

            class SByteEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x380cb08*/ SByteEnumEqualityComparer();
                SByteEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3907c14*/ int GetHashCode(T obj);
            }

            class ShortEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x380cb08*/ ShortEnumEqualityComparer();
                ShortEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3907c14*/ int GetHashCode(T obj);
            }

            class LongEnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x380cb08*/ LongEnumEqualityComparer();
                LongEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x3907c14*/ bool Equals(T x, T y);
                /*0x3907c14*/ int GetHashCode(T obj);
                /*0x380b2f0*/ bool Equals(object obj);
                /*0x380b6a0*/ int GetHashCode();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class InternalStringComparer : System.Collections.Generic.EqualityComparer<string>
            {
                /*0x715118c*/ InternalStringComparer();
                /*0x71510d4*/ int GetHashCode(string obj);
                /*0x71510f4*/ bool Equals(string x, string y);
                /*0x7151124*/ int IndexOf(string[] array, string value, int startIndex, int count);
            }
        }
    }

    namespace Buffers
    {
        class SpanAction<T, TArg> : System.MulticastDelegate
        {
            SpanAction(object object, nint method);
            /*0x3907c14*/ void Invoke(System.Span<T> span, TArg arg);
        }

        class ArrayPool<T>
        {
            static /*0x0*/ System.Buffers.ArrayPool<T> <Shared>k__BackingField;

            static /*0x38358cc*/ ArrayPool();
            static /*0x382dee4*/ System.Buffers.ArrayPool<T> get_Shared();
            static /*0x382e958*/ System.Buffers.ArrayPool<T> Create(int maxArrayLength, int maxArraysPerBucket);
            /*0x380cb08*/ ArrayPool();
            /*0x380ba90*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
        }

        class ArrayPoolEventSource : System.Diagnostics.Tracing.EventSource
        {
            static /*0x0*/ System.Buffers.ArrayPoolEventSource Log;

            static /*0x7151504*/ ArrayPoolEventSource();
            /*0x71511d4*/ ArrayPoolEventSource();
            /*0x7151280*/ void BufferRented(int bufferId, int bufferSize, int poolId, int bucketId);
            /*0x7151390*/ void BufferAllocated(int bufferId, int bufferSize, int poolId, int bucketId, System.Buffers.ArrayPoolEventSource.BufferAllocatedReason reason);
            /*0x71514c0*/ void BufferReturned(int bufferId, int bufferSize, int poolId);
            /*0x71514d8*/ void BufferTrimmed(int bufferId, int bufferSize, int poolId);
            /*0x71514f0*/ void BufferTrimPoll(int milliseconds, int pressure);

            enum BufferAllocatedReason
            {
                Pooled = 0,
                OverMaximumSize = 1,
                PoolExhausted = 2,
            }
        }

        class ConfigurableArrayPool<T> : System.Buffers.ArrayPool<T>
        {
            /*0x0*/ System.Buffers.ConfigurableArrayPool.Bucket<T> _buckets;

            /*0x380d0e4*/ ConfigurableArrayPool(int maxArrayLength, int maxArraysPerBucket);
            /*0x380b6a0*/ int get_Id();
            /*0x380ba90*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);

            class Bucket<T>
            {
                /*0x0*/ int _bufferLength;
                /*0x0*/ T[][] _buffers;
                /*0x0*/ int _poolId;
                /*0x0*/ System.Threading.SpinLock _lock;
                /*0x0*/ int _index;

                Bucket(int bufferLength, int numberOfBuffers, int poolId);
                /*0x380b6a0*/ int get_Id();
                /*0x380b9e8*/ T[] Rent();
                /*0x380d83c*/ void Return(T[] array);
            }
        }

        interface IMemoryOwner<T> : System.IDisposable
        {
            /*0x3907c14*/ System.Memory<T> get_Memory();
        }

        interface IPinnable
        {
            /*0x380cb08*/ void Unpin();
        }

        struct MemoryHandle : System.IDisposable
        {
            /*0x10*/ void* _pointer;
            /*0x18*/ System.Runtime.InteropServices.GCHandle _handle;
            /*0x20*/ System.Buffers.IPinnable _pinnable;

            /*0x7151568*/ MemoryHandle(void* pointer, System.Runtime.InteropServices.GCHandle handle, System.Buffers.IPinnable pinnable);
            /*0x7151578*/ void* get_Pointer();
            /*0x7151580*/ void Dispose();
        }

        class MemoryManager<T> : System.Buffers.IMemoryOwner<T>, System.IDisposable, System.Buffers.IPinnable
        {
            /*0x3907c14*/ System.Memory<T> get_Memory();
            /*0x3907c14*/ System.Span<T> GetSpan();
            System.Buffers.MemoryHandle Pin(int elementIndex);
            /*0x380cb08*/ void Unpin();
            /*0x380b2f0*/ bool TryGetArray(ref System.ArraySegment<T> segment);
            /*0x380cb08*/ void System.IDisposable.Dispose();
            /*0x380cdf0*/ void Dispose(bool disposing);
        }

        class TlsOverPerCoreLockedStacksArrayPool<T> : System.Buffers.ArrayPool<T>
        {
            static /*0x0*/ bool s_trimBuffers;
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<T[][], object> s_allTlsBuckets;
            [ThreadStatic] static T[][] t_tlsBuckets;
            /*0x0*/ int[] _bucketArraySizes;
            /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> _buckets;
            /*0x0*/ int _callbackCreated;

            static /*0x38358cc*/ TlsOverPerCoreLockedStacksArrayPool();
            static /*0x381ac0c*/ bool Gen2GcCallbackFunc(object target);
            static /*0x3907c14*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> GetMemoryPressure();
            static /*0x3818690*/ bool GetTrimBuffers();
            /*0x380cb08*/ TlsOverPerCoreLockedStacksArrayPool();
            /*0x380ba90*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> CreatePerCoreLockedStacks(int bucketIndex);
            /*0x380b6a0*/ int get_Id();
            /*0x380ba90*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
            /*0x380b128*/ bool Trim();

            enum MemoryPressure<T>
            {
                Low = 0,
                Medium = 1,
                High = 2,
            }

            class PerCoreLockedStacks<T>
            {
                /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.LockedStack<T> _perCoreStacks;

                /*0x380cb08*/ PerCoreLockedStacks();
                /*0x380d83c*/ void TryPush(T[] array);
                /*0x380b9e8*/ T[] TryPop();
                /*0x3907c14*/ bool Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int[] bucketSizes);
            }

            class LockedStack<T>
            {
                /*0x0*/ T[][] _arrays;
                /*0x0*/ int _count;
                /*0x0*/ uint _firstStackItemMS;

                /*0x380cb08*/ LockedStack();
                /*0x380b2f0*/ bool TryPush(T[] array);
                /*0x380b9e8*/ T[] TryPop();
                /*0x3907c14*/ void Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int bucketSize);
            }
        }

        class Utilities
        {
            static /*0x715164c*/ int SelectBucketIndex(int bufferSize);
            static /*0x71516c8*/ int GetMaxSizeForBucket(int binIndex);
        }

        class ArrayMemoryPool<T> : System.Buffers.MemoryPool<T>
        {
            /*0x380cb08*/ ArrayMemoryPool();
            /*0x380ba90*/ System.Buffers.IMemoryOwner<T> Rent(int minimumBufferSize);
            /*0x380cdf0*/ void Dispose(bool disposing);

            class ArrayMemoryPoolBuffer<T> : System.Buffers.IMemoryOwner<T>, System.IDisposable
            {
                /*0x0*/ T[] _array;

                /*0x380cffc*/ ArrayMemoryPoolBuffer(int size);
                /*0x3907c14*/ System.Memory<T> get_Memory();
                /*0x380cb08*/ void Dispose();
            }
        }

        class BuffersExtensions
        {
            static /*0x3907c14*/ void CopyTo<T>(ref System.Buffers.ReadOnlySequence<T> source, System.Span<T> destination);
            static /*0x3907c14*/ void CopyToMultiSegment<T>(ref System.Buffers.ReadOnlySequence<T> sequence, System.Span<T> destination);
            static /*0x382eaf0*/ T[] ToArray<T>(ref System.Buffers.ReadOnlySequence<T> sequence);
        }

        interface IBufferWriter<T>
        {
            /*0x380cffc*/ void Advance(int count);
            /*0x3907c14*/ System.Memory<T> GetMemory(int sizeHint);
            /*0x3907c14*/ System.Span<T> GetSpan(int sizeHint);
        }

        class MemoryPool<T> : System.IDisposable
        {
            static /*0x0*/ System.Buffers.MemoryPool<T> s_shared;

            static /*0x38358cc*/ MemoryPool();
            static /*0x382dee4*/ System.Buffers.MemoryPool<T> get_Shared();
            /*0x380cb08*/ MemoryPool();
            /*0x380ba90*/ System.Buffers.IMemoryOwner<T> Rent(int minBufferSize);
            /*0x380cb08*/ void Dispose();
            /*0x380cdf0*/ void Dispose(bool disposing);
        }

        enum OperationStatus
        {
            Done = 0,
            DestinationTooSmall = 1,
            NeedMoreData = 2,
            InvalidData = 3,
        }

        struct ReadOnlySequence<T>
        {
            static /*0x0*/ System.Buffers.ReadOnlySequence<T> Empty;
            /*0x0*/ object _startObject;
            /*0x0*/ object _endObject;
            /*0x0*/ int _startInteger;
            /*0x0*/ int _endInteger;

            static /*0x38358cc*/ ReadOnlySequence();
            static /*0x3907c14*/ System.SequencePosition SeekMultiSegment(System.Buffers.ReadOnlySequenceSegment<T> currentSegment, object endObject, int endIndex, long offset, System.ExceptionArgument argument);
            static /*0x3824ba4*/ int GetIndex(ref System.SequencePosition position);
            static /*0x3824360*/ int GetIndex(int Integer);
            static /*0x3907c14*/ bool InRange(uint value, uint start, uint end);
            static /*0x3907c14*/ bool InRange(ulong value, ulong start, ulong end);
            /*0x3907c14*/ ReadOnlySequence(object startSegment, int startIndexAndFlags, object endSegment, int endIndexAndFlags);
            /*0x3907c14*/ ReadOnlySequence(System.Buffers.ReadOnlySequenceSegment<T> startSegment, int startIndex, System.Buffers.ReadOnlySequenceSegment<T> endSegment, int endIndex);
            /*0x380d83c*/ ReadOnlySequence(T[] array);
            /*0x3907c14*/ ReadOnlySequence(System.ReadOnlyMemory<T> memory);
            /*0x380b828*/ long get_Length();
            /*0x380b128*/ bool get_IsEmpty();
            /*0x380b128*/ bool get_IsSingleSegment();
            /*0x3907c14*/ System.ReadOnlyMemory<T> get_First();
            /*0x3907c14*/ System.SequencePosition get_Start();
            /*0x3907c14*/ System.SequencePosition get_End();
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> Slice(long start, System.SequencePosition end);
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> Slice(System.SequencePosition start, long length);
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> Slice(int start, System.SequencePosition end);
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> Slice(System.SequencePosition start, System.SequencePosition end);
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> Slice(System.SequencePosition start);
            /*0x380b9e8*/ string ToString();
            /*0x3907c14*/ System.Buffers.ReadOnlySequence.Enumerator<T> GetEnumerator();
            /*0x3907c14*/ System.SequencePosition GetPosition(long offset);
            /*0x3907c14*/ System.SequencePosition GetPosition(long offset, System.SequencePosition origin);
            bool TryGet(ref System.SequencePosition position, ref System.ReadOnlyMemory<T> memory, bool advance);
            bool TryGetBuffer(ref System.SequencePosition position, ref System.ReadOnlyMemory<T> memory, ref System.SequencePosition next);
            /*0x3907c14*/ System.ReadOnlyMemory<T> GetFirstBuffer();
            /*0x3907c14*/ System.ReadOnlyMemory<T> GetFirstBufferSlow(object startObject, bool isMultiSegment);
            /*0x3907c14*/ System.SequencePosition Seek(long offset, System.ExceptionArgument exceptionArgument);
            /*0x3907c14*/ System.SequencePosition Seek(ref System.SequencePosition start, long offset);
            void BoundsCheck(ref System.SequencePosition position, bool positionIsNotNull);
            /*0x3907c14*/ void BoundsCheck(uint sliceStartIndex, object sliceStartObject, uint sliceEndIndex, object sliceEndObject);
            /*0x3907c14*/ System.Buffers.ReadOnlySequence.SequenceType<T> GetSequenceType();
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> SliceImpl(ref System.SequencePosition start, ref System.SequencePosition end);
            /*0x3907c14*/ System.Buffers.ReadOnlySequence<T> SliceImpl(ref System.SequencePosition start);
            /*0x380b828*/ long GetLength();
            bool TryGetString(ref string text, ref int start, ref int length);

            struct Enumerator<T>
            {
                /*0x0*/ System.Buffers.ReadOnlySequence<T> _sequence;
                /*0x0*/ System.SequencePosition _next;
                /*0x0*/ System.ReadOnlyMemory<T> _currentMemory;

                /*0x380d83c*/ Enumerator(ref System.Buffers.ReadOnlySequence<T> sequence);
                /*0x3907c14*/ System.ReadOnlyMemory<T> get_Current();
                /*0x380b128*/ bool MoveNext();
            }

            enum SequenceType<T>
            {
                MultiSegment = 0,
                Array = 1,
                MemoryManager = 2,
                String = 3,
                Empty = 4,
            }

            class <>c<T>
            {
                static /*0x0*/ System.Buffers.ReadOnlySequence.<>c<T> <>9;
                static /*0x0*/ System.Buffers.SpanAction<char, System.Buffers.ReadOnlySequence<char>> <>9__33_0;

                static /*0x38358cc*/ <>c();
                /*0x380cb08*/ <>c();
                void <ToString>b__33_0(System.Span<char> span, System.Buffers.ReadOnlySequence<char> sequence);
            }
        }

        class ReadOnlySequence
        {
            static /*0x71516d4*/ int SegmentToSequenceStart(int startIndex);
            static /*0x71516d8*/ int SegmentToSequenceEnd(int endIndex);
            static /*0x71516dc*/ int ArrayToSequenceStart(int startIndex);
            static /*0x71516e0*/ int ArrayToSequenceEnd(int endIndex);
            static /*0x71516e8*/ int MemoryManagerToSequenceStart(int startIndex);
            static /*0x71516f0*/ int MemoryManagerToSequenceEnd(int endIndex);
            static /*0x71516f4*/ int StringToSequenceStart(int startIndex);
            static /*0x71516fc*/ int StringToSequenceEnd(int endIndex);
        }

        class ReadOnlySequenceDebugView<T>
        {
        }

        class ReadOnlySequenceSegment<T>
        {
            /*0x0*/ System.ReadOnlyMemory<T> <Memory>k__BackingField;
            /*0x0*/ System.Buffers.ReadOnlySequenceSegment<T> <Next>k__BackingField;
            /*0x0*/ long <RunningIndex>k__BackingField;

            /*0x380cb08*/ ReadOnlySequenceSegment();
            /*0x3907c14*/ System.ReadOnlyMemory<T> get_Memory();
            /*0x3907c14*/ void set_Memory(System.ReadOnlyMemory<T> value);
            /*0x380b9e8*/ System.Buffers.ReadOnlySequenceSegment<T> get_Next();
            /*0x380d83c*/ void set_Next(System.Buffers.ReadOnlySequenceSegment<T> value);
            /*0x380b828*/ long get_RunningIndex();
            /*0x380d438*/ void set_RunningIndex(long value);
        }

        struct StandardFormat : System.IEquatable<System.Buffers.StandardFormat>
        {
            /*0x10*/ byte _format;
            /*0x11*/ byte _precision;

            static /*0x7151788*/ System.Buffers.StandardFormat op_Implicit(char symbol);
            /*0x7151734*/ StandardFormat(char symbol, byte precision);
            /*0x7151704*/ char get_Symbol();
            /*0x715170c*/ byte get_Precision();
            /*0x7151714*/ bool get_IsDefault();
            /*0x71517b4*/ bool Equals(object obj);
            /*0x7151860*/ int GetHashCode();
            /*0x7151838*/ bool Equals(System.Buffers.StandardFormat other);
            /*0x7151894*/ string ToString();
            /*0x715197c*/ int Format(System.Span<char> destination);
        }

        namespace Binary
        {
            class BinaryPrimitives
            {
                static /*0x7151a74*/ short ReverseEndianness(short value);
                static /*0x7151a80*/ int ReverseEndianness(int value);
                static /*0x7151a88*/ long ReverseEndianness(long value);
                static /*0x7151a90*/ ushort ReverseEndianness(ushort value);
                static /*0x7151a9c*/ uint ReverseEndianness(uint value);
                static /*0x7151aa4*/ ulong ReverseEndianness(ulong value);
                static /*0x7151aac*/ uint ReadUInt32BigEndian(System.ReadOnlySpan<byte> source);
                static /*0x7151b48*/ ulong ReadUInt64BigEndian(System.ReadOnlySpan<byte> source);
                static /*0x7151be4*/ uint ReadUInt32LittleEndian(System.ReadOnlySpan<byte> source);
                static /*0x7151c7c*/ ulong ReadUInt64LittleEndian(System.ReadOnlySpan<byte> source);
                static /*0x7151d14*/ void WriteUInt32BigEndian(System.Span<byte> destination, uint value);
                static /*0x7151dbc*/ void WriteUInt64BigEndian(System.Span<byte> destination, ulong value);
                static /*0x7151e64*/ void WriteUInt32LittleEndian(System.Span<byte> destination, uint value);
                static /*0x7151f08*/ void WriteUInt64LittleEndian(System.Span<byte> destination, ulong value);
            }
        }

        namespace Text
        {
            class FormattingHelpers
            {
                static /*0x7151fac*/ int CountDigits(ulong value);
                static /*0x7152068*/ int CountDigits(uint value);
                static /*0x71520d4*/ int CountHexDigits(ulong value);
            }

            class Utf8Formatter
            {
                static /*0x0*/ uint[] DayAbbreviations;
                static /*0x8*/ uint[] DayAbbreviationsLowercase;
                static /*0x10*/ uint[] MonthAbbreviations;
                static /*0x18*/ uint[] MonthAbbreviationsLowercase;

                static /*0x7152fe8*/ Utf8Formatter();
                static /*0x715211c*/ bool TryFormatDecimalE(ref System.Buffers.Text.NumberBuffer number, System.Span<byte> destination, ref int bytesWritten, byte precision, byte exponentSymbol);
                static /*0x71523f0*/ bool TryFormatDecimalF(ref System.Buffers.Text.NumberBuffer number, System.Span<byte> destination, ref int bytesWritten, byte precision);
                static /*0x71526f0*/ bool TryFormatDecimalG(ref System.Buffers.Text.NumberBuffer number, System.Span<byte> destination, ref int bytesWritten);
                static /*0x71529c8*/ bool TryFormat(decimal value, System.Span<byte> destination, ref int bytesWritten, System.Buffers.StandardFormat format);
            }

            class ParserHelpers
            {
                static /*0x0*/ byte[] s_hexLookup;

                static /*0x715316c*/ ParserHelpers();
                static /*0x715315c*/ bool IsDigit(int i);
            }

            class Utf8Parser
            {
                static /*0x0*/ int[] s_daysToMonth365;
                static /*0x8*/ int[] s_daysToMonth366;

                static /*0x7153e80*/ Utf8Parser();
                static /*0x715320c*/ bool TryParse(System.ReadOnlySpan<byte> source, ref decimal value, ref int bytesConsumed, char standardFormat);
                static /*0x7153b4c*/ bool TryParseUInt32D(System.ReadOnlySpan<byte> source, ref uint value, ref int bytesConsumed);
                static /*0x71533e0*/ bool TryParseNumber(System.ReadOnlySpan<byte> source, ref System.Buffers.Text.NumberBuffer number, ref int bytesConsumed, System.Buffers.Text.Utf8Parser.ParseNumberOptions options, ref bool textUsedExponentNotation);

                enum ParseNumberOptions
                {
                    AllowExponent = 1,
                }
            }

            class Number
            {
                static /*0x0*/ ulong[] s_rgval64Power10;
                static /*0x8*/ sbyte[] s_rgexp64Power10;
                static /*0x10*/ ulong[] s_rgval64Power10By16;
                static /*0x18*/ short[] s_rgexp64Power10By16;

                static /*0x7153f6c*/ Number();
                static /*0x7153950*/ bool NumberBufferToDecimal(ref System.Buffers.Text.NumberBuffer number, ref decimal value);
                static /*0x7152cf0*/ void DecimalToNumber(decimal value, ref System.Buffers.Text.NumberBuffer number);
                static /*0x7152ec8*/ void RoundNumber(ref System.Buffers.Text.NumberBuffer number, int pos);
            }

            struct NumberBuffer
            {
                /*0x10*/ int Scale;
                /*0x14*/ bool IsNegative;
                /*0x15*/ byte _b0;
                /*0x16*/ byte _b1;
                /*0x17*/ byte _b2;
                /*0x18*/ byte _b3;
                /*0x19*/ byte _b4;
                /*0x1a*/ byte _b5;
                /*0x1b*/ byte _b6;
                /*0x1c*/ byte _b7;
                /*0x1d*/ byte _b8;
                /*0x1e*/ byte _b9;
                /*0x1f*/ byte _b10;
                /*0x20*/ byte _b11;
                /*0x21*/ byte _b12;
                /*0x22*/ byte _b13;
                /*0x23*/ byte _b14;
                /*0x24*/ byte _b15;
                /*0x25*/ byte _b16;
                /*0x26*/ byte _b17;
                /*0x27*/ byte _b18;
                /*0x28*/ byte _b19;
                /*0x29*/ byte _b20;
                /*0x2a*/ byte _b21;
                /*0x2b*/ byte _b22;
                /*0x2c*/ byte _b23;
                /*0x2d*/ byte _b24;
                /*0x2e*/ byte _b25;
                /*0x2f*/ byte _b26;
                /*0x30*/ byte _b27;
                /*0x31*/ byte _b28;
                /*0x32*/ byte _b29;
                /*0x33*/ byte _b30;
                /*0x34*/ byte _b31;
                /*0x35*/ byte _b32;
                /*0x36*/ byte _b33;
                /*0x37*/ byte _b34;
                /*0x38*/ byte _b35;
                /*0x39*/ byte _b36;
                /*0x3a*/ byte _b37;
                /*0x3b*/ byte _b38;
                /*0x3c*/ byte _b39;
                /*0x3d*/ byte _b40;
                /*0x3e*/ byte _b41;
                /*0x3f*/ byte _b42;
                /*0x40*/ byte _b43;
                /*0x41*/ byte _b44;
                /*0x42*/ byte _b45;
                /*0x43*/ byte _b46;
                /*0x44*/ byte _b47;
                /*0x45*/ byte _b48;
                /*0x46*/ byte _b49;
                /*0x47*/ byte _b50;

                /*0x71523b0*/ System.Span<byte> get_Digits();
                /*0x7153f64*/ byte* get_UnsafeDigits();
                /*0x7152958*/ int get_NumDigits();
                /*0x7154110*/ string ToString();
            }
        }
    }

    namespace IO
    {
        class FileSystem
        {
            static /*0x71542a4*/ void DeleteFile(string fullPath);
            static /*0x71546a0*/ void CreateDirectory(string fullPath);
            static /*0x7154e40*/ void RemoveDirectory(string fullPath, bool recursive);
            static /*0x7154f08*/ void RemoveDirectoryInternal(System.IO.DirectoryInfo directory, bool recursive, bool throwOnTopLevelDirectoryNotFound);
            static /*0x7154d1c*/ bool DirectoryExists(System.ReadOnlySpan<char> fullPath);
            static /*0x7154e34*/ bool DirectoryExists(System.ReadOnlySpan<char> fullPath, ref Interop.ErrorInfo errorInfo);
            static /*0x7154db8*/ bool FileExists(System.ReadOnlySpan<char> fullPath);
            static /*0x7154590*/ bool FileExists(System.ReadOnlySpan<char> fullPath, int fileType, ref Interop.ErrorInfo errorInfo);
            static /*0x71555a4*/ bool ShouldIgnoreDirectory(string name);
            static /*0x7155708*/ System.IO.FileAttributes GetAttributes(string fullPath);
        }

        class DirectoryNotFoundException : System.IO.IOException
        {
            /*0x715579c*/ DirectoryNotFoundException();
            /*0x71557f8*/ DirectoryNotFoundException(string message);
            /*0x715581c*/ DirectoryNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class EndOfStreamException : System.IO.IOException
        {
            /*0x715582c*/ EndOfStreamException();
            /*0x7155888*/ EndOfStreamException(string message);
            /*0x71558ac*/ EndOfStreamException(string message, System.Exception innerException);
            /*0x71558f4*/ EndOfStreamException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Error
        {
            static /*0x71558fc*/ System.Exception GetStreamIsClosed();
            static /*0x715596c*/ System.Exception GetEndOfFile();
            static /*0x71559e4*/ System.Exception GetReadNotSupported();
            static /*0x7155a50*/ System.Exception GetWriteNotSupported();
        }

        enum FileAccess
        {
            Read = 1,
            Write = 2,
            ReadWrite = 3,
        }

        class FileLoadException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            static /*0x7155b7c*/ string FormatFileLoadExceptionMessage(string fileName, int hResult);
            /*0x7155abc*/ FileLoadException();
            /*0x7155b18*/ FileLoadException(string message);
            /*0x7155de4*/ FileLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7155b3c*/ string get_Message();
            /*0x7155bf0*/ string get_FileName();
            /*0x7155bf8*/ string get_FusionLog();
            /*0x7155c00*/ string ToString();
            /*0x7155ea8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileMode
        {
            CreateNew = 1,
            Create = 2,
            Open = 3,
            OpenOrCreate = 4,
            Truncate = 5,
            Append = 6,
        }

        class FileNotFoundException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            /*0x7155fa0*/ FileNotFoundException();
            /*0x7155ffc*/ FileNotFoundException(string message);
            /*0x7156020*/ FileNotFoundException(string message, string fileName);
            /*0x71562f8*/ FileNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x715605c*/ string get_Message();
            /*0x7156074*/ void SetMessageField();
            /*0x7156104*/ string get_FileName();
            /*0x715610c*/ string get_FusionLog();
            /*0x7156114*/ string ToString();
            /*0x71563bc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileOptions
        {
            None = 0,
            WriteThrough = -2147483648,
            Asynchronous = 1073741824,
            RandomAccess = 268435456,
            DeleteOnClose = 67108864,
            SequentialScan = 134217728,
            Encrypted = 16384,
        }

        enum FileShare
        {
            None = 0,
            Read = 1,
            Write = 2,
            ReadWrite = 3,
            Delete = 4,
            Inheritable = 16,
        }

        class IOException : System.SystemException
        {
            /*0x71564b4*/ IOException();
            /*0x7154cf8*/ IOException(string message);
            /*0x7156510*/ IOException(string message, int hresult);
            /*0x71558d0*/ IOException(string message, System.Exception innerException);
            /*0x7155824*/ IOException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemoryStream : System.IO.Stream
        {
            /*0x28*/ byte[] _buffer;
            /*0x30*/ int _origin;
            /*0x34*/ int _position;
            /*0x38*/ int _length;
            /*0x3c*/ int _capacity;
            /*0x40*/ bool _expandable;
            /*0x41*/ bool _writable;
            /*0x42*/ bool _exposable;
            /*0x43*/ bool _isOpen;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x7156538*/ MemoryStream();
            /*0x7156540*/ MemoryStream(int capacity);
            /*0x71566b8*/ MemoryStream(byte[] buffer);
            /*0x71566c0*/ MemoryStream(byte[] buffer, bool writable);
            /*0x71567b8*/ MemoryStream(byte[] buffer, int index, int count);
            /*0x7156998*/ MemoryStream(byte[] buffer, int index, int count, bool writable);
            /*0x71567c4*/ MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible);
            /*0x71569a4*/ bool get_CanRead();
            /*0x71569ac*/ bool get_CanSeek();
            /*0x71569b4*/ bool get_CanWrite();
            /*0x71569bc*/ void EnsureNotClosed();
            /*0x71569f0*/ void EnsureWriteable();
            /*0x7156a2c*/ void Dispose(bool disposing);
            /*0x7156ae8*/ bool EnsureCapacity(int value);
            /*0x7156b9c*/ void Flush();
            /*0x7156ba0*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x7156d40*/ byte[] GetBuffer();
            /*0x7156da0*/ byte[] InternalGetBuffer();
            /*0x7156da8*/ int InternalGetPosition();
            /*0x7156db0*/ int InternalReadInt32();
            /*0x7156e68*/ int InternalEmulateRead(int count);
            /*0x7156ea4*/ int get_Capacity();
            /*0x7156ec4*/ void set_Capacity(int value);
            /*0x7157050*/ long get_Length();
            /*0x7157074*/ long get_Position();
            /*0x7157094*/ void set_Position(long value);
            /*0x715715c*/ int Read(byte[] buffer, int offset, int count);
            /*0x7157340*/ int Read(System.Span<byte> buffer);
            /*0x7157504*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7157898*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7157c1c*/ int ReadByte();
            /*0x7157c74*/ void CopyTo(System.IO.Stream destination, int bufferSize);
            /*0x7157fcc*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x7158118*/ void SetLength(long value);
            /*0x71581f4*/ byte[] ToArray();
            /*0x71582e0*/ void Write(byte[] buffer, int offset, int count);
            /*0x7158564*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7158778*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7158aac*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7158db0*/ void WriteByte(byte value);
            /*0x7158e6c*/ void WriteTo(System.IO.Stream stream);
        }

        class PathInternal
        {
            static /*0x0*/ bool s_isCaseSensitive;

            static /*0x7159370*/ PathInternal();
            static /*0x7154d3c*/ int GetRootLength(System.ReadOnlySpan<char> path);
            static /*0x7154ce8*/ bool IsDirectorySeparator(char c);
            static /*0x7154c68*/ bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x7158f0c*/ bool StartsWithDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x7154450*/ string TrimEndingDirectorySeparator(string path);
            static /*0x7155628*/ System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x7158f88*/ bool IsRoot(System.ReadOnlySpan<char> path);
            static /*0x7159004*/ bool get_IsCaseSensitive();
            static /*0x715905c*/ bool GetIsCaseSensitive();
            static /*0x7159368*/ bool IsPartiallyQualified(string path);
        }

        class PathTooLongException : System.IO.IOException
        {
            /*0x71593c0*/ PathTooLongException();
            /*0x715941c*/ PathTooLongException(string message);
            /*0x7159440*/ PathTooLongException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class PinnedBufferMemoryStream : System.IO.UnmanagedMemoryStream
        {
            /*0x68*/ byte[] _array;
            /*0x70*/ System.Runtime.InteropServices.GCHandle _pinningHandle;

            /*0x7159448*/ PinnedBufferMemoryStream(byte[] array);
            /*0x7159514*/ int Read(System.Span<byte> buffer);
            /*0x715951c*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7159524*/ void Finalize();
            /*0x71595c8*/ void Dispose(bool disposing);
        }

        enum SeekOrigin
        {
            Begin = 0,
            Current = 1,
            End = 2,
        }

        class StreamHelpers
        {
            static /*0x7157da8*/ void ValidateCopyToArgs(System.IO.Stream source, System.IO.Stream destination, int bufferSize);
        }

        class StreamReader : System.IO.TextReader
        {
            static /*0x0*/ System.IO.StreamReader Null;
            /*0x18*/ System.IO.Stream _stream;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Decoder _decoder;
            /*0x30*/ byte[] _byteBuffer;
            /*0x38*/ char[] _charBuffer;
            /*0x40*/ int _charPos;
            /*0x44*/ int _charLen;
            /*0x48*/ int _byteLen;
            /*0x4c*/ int _bytePos;
            /*0x50*/ int _maxCharsPerBuffer;
            /*0x54*/ bool _detectEncoding;
            /*0x55*/ bool _checkPreamble;
            /*0x56*/ bool _isBlocked;
            /*0x57*/ bool _closable;
            /*0x58*/ System.Threading.Tasks.Task _asyncReadTask;

            static /*0x715b0b8*/ StreamReader();
            static /*0x7159664*/ void ThrowAsyncIOInProgress();
            /*0x71596b0*/ StreamReader();
            /*0x7159774*/ StreamReader(System.IO.Stream stream);
            /*0x71597b0*/ StreamReader(System.IO.Stream stream, bool detectEncodingFromByteOrderMarks);
            /*0x7159a08*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x71597f0*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x7159b80*/ StreamReader(string path);
            /*0x7159bb8*/ StreamReader(string path, bool detectEncodingFromByteOrderMarks);
            /*0x7159e30*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);
            /*0x7159bf4*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);
            /*0x7159600*/ void CheckAsyncTaskInProgress();
            /*0x7159a18*/ void Init(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x7159e3c*/ void Init(System.IO.Stream stream);
            /*0x7159e60*/ void Close();
            /*0x7159e70*/ void Dispose(bool disposing);
            /*0x7159f18*/ System.Text.Encoding get_CurrentEncoding();
            /*0x7159f20*/ System.IO.Stream get_BaseStream();
            /*0x7159f08*/ bool get_LeaveOpen();
            /*0x7159f28*/ int Peek();
            /*0x7159fec*/ int Read();
            /*0x715a0b0*/ int Read(char[] buffer, int index, int count);
            /*0x715a23c*/ int ReadSpan(System.Span<char> buffer);
            /*0x715a768*/ string ReadToEnd();
            /*0x715a880*/ void CompressBuffer(int n);
            /*0x715a8c4*/ void DetectEncoding();
            /*0x715abc8*/ bool IsPreamble();
            /*0x715ace0*/ int ReadBuffer();
            /*0x715a458*/ int ReadBuffer(System.Span<char> userBuffer, ref bool readToUserBuffer);
            /*0x715ae4c*/ string ReadLine();
            /*0x715b0a8*/ bool DataAvailable();

            class NullStreamReader : System.IO.StreamReader
            {
                /*0x715b130*/ NullStreamReader();
                /*0x715b1cc*/ System.IO.Stream get_BaseStream();
                /*0x715b224*/ System.Text.Encoding get_CurrentEncoding();
                /*0x715b22c*/ void Dispose(bool disposing);
                /*0x715b230*/ int Peek();
                /*0x715b238*/ int Read();
                /*0x715b240*/ int Read(char[] buffer, int index, int count);
                /*0x715b248*/ string ReadLine();
                /*0x715b250*/ string ReadToEnd();
                /*0x715b268*/ int ReadBuffer();
            }
        }

        class StreamWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.IO.StreamWriter Null;
            /*0x30*/ System.IO.Stream _stream;
            /*0x38*/ System.Text.Encoding _encoding;
            /*0x40*/ System.Text.Encoder _encoder;
            /*0x48*/ byte[] _byteBuffer;
            /*0x50*/ char[] _charBuffer;
            /*0x58*/ int _charPos;
            /*0x5c*/ int _charLen;
            /*0x60*/ bool _autoFlush;
            /*0x61*/ bool _haveWrittenPreamble;
            /*0x62*/ bool _closable;
            /*0x68*/ System.Threading.Tasks.Task _asyncWriteTask;

            static /*0x715cb48*/ StreamWriter();
            static /*0x715b2d4*/ void ThrowAsyncIOInProgress();
            static /*0x715b320*/ System.Text.Encoding get_UTF8NoBOM();
            static /*0x715c9a0*/ System.Threading.Tasks.Task FlushAsyncInternal(System.IO.StreamWriter _this, bool flushStream, bool flushEncoder, char[] charBuffer, int charPos, bool haveWrittenPreamble, System.Text.Encoding encoding, System.Text.Encoder encoder, byte[] byteBuffer, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);
            /*0x715b370*/ StreamWriter();
            /*0x715b438*/ StreamWriter(System.IO.Stream stream);
            /*0x715b6b8*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x715b4ac*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen);
            /*0x715b848*/ StreamWriter(string path);
            /*0x715b8bc*/ StreamWriter(string path, bool append, System.Text.Encoding encoding, int bufferSize);
            /*0x715b270*/ void CheckAsyncTaskInProgress();
            /*0x715b6c4*/ void Init(System.IO.Stream streamArg, System.Text.Encoding encodingArg, int bufferSize, bool shouldLeaveOpen);
            /*0x715bb04*/ void Close();
            /*0x715bb70*/ void Dispose(bool disposing);
            /*0x715bd80*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x715be28*/ System.Threading.Tasks.ValueTask DisposeAsyncCore();
            /*0x715bf20*/ void CloseStreamFromDispose(bool disposing);
            /*0x715bfc8*/ void Flush();
            /*0x715bc04*/ void Flush(bool flushStream, bool flushEncoder);
            /*0x715bfe8*/ void set_AutoFlush(bool value);
            /*0x715c02c*/ System.IO.Stream get_BaseStream();
            /*0x715bfb8*/ bool get_LeaveOpen();
            /*0x715c034*/ System.Text.Encoding get_Encoding();
            /*0x715c03c*/ void Write(char value);
            /*0x715c0c8*/ void Write(char[] buffer);
            /*0x715c13c*/ void Write(char[] buffer, int index, int count);
            /*0x715c318*/ void WriteSpan(System.ReadOnlySpan<char> buffer, bool appendNewLine);
            /*0x715c5dc*/ void Write(string value);
            /*0x715c64c*/ void WriteLine(string value);
            /*0x715c6c0*/ System.Threading.Tasks.Task FlushAsync();
            /*0x715c994*/ void set_HaveWrittenPreamble_Prop(bool value);
            /*0x715c7f4*/ System.Threading.Tasks.Task FlushAsyncInternal(bool flushStream, bool flushEncoder, char[] sCharBuffer, int sCharPos, System.Threading.CancellationToken cancellationToken);

            struct <DisposeAsyncCore>d__33 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder <>t__builder;
                /*0x38*/ System.IO.StreamWriter <>4__this;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x715d024*/ void MoveNext();
                /*0x715d2c8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushAsyncInternal>d__74 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ bool haveWrittenPreamble;
                /*0x38*/ System.IO.StreamWriter _this;
                /*0x40*/ System.Text.Encoding encoding;
                /*0x48*/ System.IO.Stream stream;
                /*0x50*/ System.Threading.CancellationToken cancellationToken;
                /*0x58*/ System.Text.Encoder encoder;
                /*0x60*/ char[] charBuffer;
                /*0x68*/ int charPos;
                /*0x70*/ byte[] byteBuffer;
                /*0x78*/ bool flushEncoder;
                /*0x79*/ bool flushStream;
                /*0x80*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__1;
                /*0x90*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;

                /*0x715d2d4*/ void MoveNext();
                /*0x715dc9c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class TextReader : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextReader Null;

            static /*0x715e2c4*/ TextReader();
            static /*0x715e19c*/ System.IO.TextReader Synchronized(System.IO.TextReader reader);
            /*0x715dd04*/ TextReader();
            /*0x715dd0c*/ void Close();
            /*0x715dd78*/ void Dispose();
            /*0x715dde4*/ void Dispose(bool disposing);
            /*0x715dde8*/ int Peek();
            /*0x715ddf0*/ int Read();
            /*0x715ddf8*/ int Read(char[] buffer, int index, int count);
            /*0x715dfa8*/ string ReadToEnd();
            /*0x715e0a4*/ string ReadLine();

            class NullTextReader : System.IO.TextReader
            {
                /*0x715e33c*/ NullTextReader();
                /*0x715e394*/ int Read(char[] buffer, int index, int count);
                /*0x715e39c*/ string ReadLine();
            }

            class SyncTextReader : System.IO.TextReader
            {
                /*0x18*/ System.IO.TextReader _in;

                /*0x715e250*/ SyncTextReader(System.IO.TextReader t);
                /*0x715e3a4*/ void Close();
                /*0x715e3c4*/ void Dispose(bool disposing);
                /*0x715e478*/ int Peek();
                /*0x715e498*/ int Read();
                /*0x715e4b8*/ int Read(char[] buffer, int index, int count);
                /*0x715e4d8*/ string ReadLine();
                /*0x715e4fc*/ string ReadToEnd();
            }
        }

        class TextWriter : System.MarshalByRefObject, System.IDisposable, System.IAsyncDisposable
        {
            static /*0x0*/ System.IO.TextWriter Null;
            static /*0x8*/ char[] s_coreNewLine;
            /*0x18*/ char[] CoreNewLine;
            /*0x20*/ string CoreNewLineStr;
            /*0x28*/ System.IFormatProvider _internalFormatProvider;

            static /*0x715ef38*/ TextWriter();
            static /*0x715ee00*/ System.IO.TextWriter Synchronized(System.IO.TextWriter writer);
            /*0x715e51c*/ TextWriter();
            /*0x715e5b4*/ TextWriter(System.IFormatProvider formatProvider);
            /*0x715e658*/ System.IFormatProvider get_FormatProvider();
            /*0x715e6c0*/ void Close();
            /*0x715e72c*/ void Dispose(bool disposing);
            /*0x715e730*/ void Dispose();
            /*0x715e79c*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x715e88c*/ void Flush();
            /*0x380b9e8*/ System.Text.Encoding get_Encoding();
            /*0x715e890*/ string get_NewLine();
            /*0x715e898*/ void Write(char value);
            /*0x715e89c*/ void Write(char[] buffer);
            /*0x715e8bc*/ void Write(char[] buffer, int index, int count);
            /*0x715ea60*/ void Write(string value);
            /*0x715ea98*/ void WriteLine();
            /*0x715eaac*/ void WriteLine(string value);
            /*0x715eae8*/ void WriteLine(object value);
            /*0x715ec08*/ System.Threading.Tasks.Task FlushAsync();

            class NullTextWriter : System.IO.TextWriter
            {
                /*0x715efe0*/ NullTextWriter();
                /*0x715f06c*/ System.Text.Encoding get_Encoding();
                /*0x715f074*/ void Write(char[] buffer, int index, int count);
                /*0x715f078*/ void Write(string value);
                /*0x715f07c*/ void WriteLine();
                /*0x715f080*/ void WriteLine(string value);
                /*0x715f084*/ void WriteLine(object value);
                /*0x715f088*/ void Write(char value);
            }

            class SyncTextWriter : System.IO.TextWriter, System.IDisposable
            {
                /*0x30*/ System.IO.TextWriter _out;

                /*0x715eeb4*/ SyncTextWriter(System.IO.TextWriter t);
                /*0x715f08c*/ System.Text.Encoding get_Encoding();
                /*0x715f0b0*/ System.IFormatProvider get_FormatProvider();
                /*0x715f0d0*/ string get_NewLine();
                /*0x715f0f4*/ void Close();
                /*0x715f114*/ void Dispose(bool disposing);
                /*0x715f1c8*/ void Flush();
                /*0x715f1e8*/ void Write(char value);
                /*0x715f20c*/ void Write(char[] buffer);
                /*0x715f230*/ void Write(char[] buffer, int index, int count);
                /*0x715f254*/ void Write(string value);
                /*0x715f278*/ void WriteLine();
                /*0x715f29c*/ void WriteLine(string value);
                /*0x715f2c0*/ void WriteLine(object value);
                /*0x715f2e4*/ System.Threading.Tasks.Task FlushAsync();
            }

            class <>c
            {
                static /*0x0*/ System.IO.TextWriter.<> <>9;
                static /*0x8*/ System.Action<object> <>9__67_0;

                static /*0x715f380*/ <>c();
                /*0x715f3e8*/ <>c();
                /*0x715f3f0*/ void <FlushAsync>b__67_0(object state);
            }
        }

        class UnmanagedMemoryStream : System.IO.Stream
        {
            /*0x28*/ System.Runtime.InteropServices.SafeBuffer _buffer;
            /*0x30*/ byte* _mem;
            /*0x38*/ long _length;
            /*0x40*/ long _capacity;
            /*0x48*/ long _position;
            /*0x50*/ long _offset;
            /*0x58*/ System.IO.FileAccess _access;
            /*0x5c*/ bool _isOpen;
            /*0x60*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x715f474*/ UnmanagedMemoryStream();
            /*0x715f4e0*/ UnmanagedMemoryStream(byte* pointer, long length);
            /*0x715f74c*/ UnmanagedMemoryStream(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0x715f560*/ void Initialize(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0x715f7dc*/ bool get_CanRead();
            /*0x715f7f8*/ bool get_CanSeek();
            /*0x715f800*/ bool get_CanWrite();
            /*0x715f81c*/ void Dispose(bool disposing);
            /*0x715f82c*/ void EnsureNotClosed();
            /*0x715f864*/ void EnsureReadable();
            /*0x715f8a4*/ void EnsureWriteable();
            /*0x715f8e4*/ void Flush();
            /*0x715f8e8*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x715fa88*/ long get_Length();
            /*0x715faa4*/ long get_Position();
            /*0x715faf0*/ void set_Position(long value);
            /*0x715fb98*/ byte* get_PositionPointer();
            /*0x715fc50*/ int Read(byte[] buffer, int offset, int count);
            /*0x715fffc*/ int Read(System.Span<byte> buffer);
            /*0x715fdd8*/ int ReadCore(System.Span<byte> buffer);
            /*0x7160320*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x716065c*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x716099c*/ int ReadByte();
            /*0x7160afc*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x7160c08*/ void SetLength(long value);
            /*0x7160d90*/ void Write(byte[] buffer, int offset, int count);
            /*0x7161230*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7160f44*/ void WriteCore(System.ReadOnlySpan<byte> buffer);
            /*0x71614c0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x716179c*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7161a5c*/ void WriteByte(byte value);
        }

        class DriveNotFoundException : System.IO.IOException
        {
            /*0x7161c80*/ DriveNotFoundException();
            /*0x7161cdc*/ DriveNotFoundException(string message);
            /*0x7161d00*/ DriveNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Directory
        {
            static /*0x7161d08*/ System.IO.DirectoryInfo CreateDirectory(string path);
            static /*0x7161e94*/ bool Exists(string path);
            static /*0x7162008*/ string[] GetFiles(string path, string searchPattern);
            static /*0x71620a8*/ string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x71622d0*/ string[] GetDirectories(string path);
            static /*0x7162378*/ string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x7162110*/ System.Collections.Generic.IEnumerable<string> InternalEnumeratePaths(string path, string searchPattern, System.IO.SearchTarget searchTarget, System.IO.EnumerationOptions options);
            static /*0x71623e0*/ System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);
            static /*0x7162590*/ System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x716259c*/ System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);
            static /*0x7162648*/ System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x7162654*/ string InternalGetDirectoryRoot(string path);
            static /*0x7162710*/ string GetCurrentDirectory();
            static /*0x7162718*/ void Delete(string path, bool recursive);
            static /*0x7162788*/ string InsecureGetCurrentDirectory();
        }

        class DirectoryInfo : System.IO.FileSystemInfo
        {
            static /*0x7162d1c*/ System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> InternalEnumerateInfos(string path, string searchPattern, System.IO.SearchTarget searchTarget, System.IO.EnumerationOptions options);
            /*0x7162824*/ DirectoryInfo(string path);
            /*0x7161e4c*/ DirectoryInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x7162ed4*/ DirectoryInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x716291c*/ void Init(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x7162bd4*/ System.IO.FileInfo[] GetFiles();
            /*0x7162c7c*/ System.IO.FileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);
        }

        class EnumerationOptions
        {
            static /*0x0*/ System.IO.EnumerationOptions <Compatible>k__BackingField;
            static /*0x8*/ System.IO.EnumerationOptions <CompatibleRecursive>k__BackingField;
            static /*0x10*/ System.IO.EnumerationOptions <Default>k__BackingField;
            /*0x10*/ bool <RecurseSubdirectories>k__BackingField;
            /*0x11*/ bool <IgnoreInaccessible>k__BackingField;
            /*0x14*/ System.IO.FileAttributes <AttributesToSkip>k__BackingField;
            /*0x18*/ System.IO.MatchType <MatchType>k__BackingField;
            /*0x1c*/ System.IO.MatchCasing <MatchCasing>k__BackingField;
            /*0x20*/ bool <ReturnSpecialDirectories>k__BackingField;

            static /*0x71631c0*/ EnumerationOptions();
            static /*0x7163038*/ System.IO.EnumerationOptions get_Compatible();
            static /*0x7163090*/ System.IO.EnumerationOptions get_CompatibleRecursive();
            static /*0x71630e8*/ System.IO.EnumerationOptions get_Default();
            static /*0x7162458*/ System.IO.EnumerationOptions FromSearchOption(System.IO.SearchOption searchOption);
            /*0x7163140*/ EnumerationOptions();
            /*0x7163168*/ bool get_RecurseSubdirectories();
            /*0x7163170*/ void set_RecurseSubdirectories(bool value);
            /*0x716317c*/ bool get_IgnoreInaccessible();
            /*0x7163184*/ void set_IgnoreInaccessible(bool value);
            /*0x7163190*/ System.IO.FileAttributes get_AttributesToSkip();
            /*0x7163198*/ void set_AttributesToSkip(System.IO.FileAttributes value);
            /*0x71631a0*/ System.IO.MatchType get_MatchType();
            /*0x71631a8*/ void set_MatchType(System.IO.MatchType value);
            /*0x71631b0*/ System.IO.MatchCasing get_MatchCasing();
            /*0x71631b8*/ bool get_ReturnSpecialDirectories();
        }

        class File
        {
            static /*0x71632ac*/ System.IO.StreamReader OpenText(string path);
            static /*0x7163354*/ void Delete(string path);
            static /*0x7163400*/ bool Exists(string path);
            static /*0x71635c8*/ System.IO.FileStream Open(string path, System.IO.FileMode mode);
            static /*0x71635dc*/ System.IO.FileStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            static /*0x7163694*/ System.IO.FileAttributes GetAttributes(string path);
            static /*0x71636f4*/ System.IO.FileStream OpenRead(string path);
            static /*0x716376c*/ System.IO.FileStream OpenWrite(string path);
            static /*0x71637e4*/ string ReadAllText(string path);
            static /*0x71638a8*/ string InternalReadAllText(string path, System.Text.Encoding encoding);
            static /*0x7163a5c*/ void WriteAllText(string path, string contents);
            static /*0x7163c9c*/ byte[] ReadAllBytes(string path);
            static /*0x7163f84*/ byte[] ReadAllBytesUnknownLength(System.IO.FileStream fs);
            static /*0x71643d0*/ void WriteAllBytes(string path, byte[] bytes);
            static /*0x71644cc*/ void InternalWriteAllBytes(string path, byte[] bytes);
        }

        class FileInfo : System.IO.FileSystemInfo
        {
            /*0x716469c*/ FileInfo();
            /*0x71646a0*/ FileInfo(string fileName);
            /*0x71646b0*/ FileInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x71649bc*/ FileInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71647f8*/ long get_Length();
            /*0x71649c0*/ string get_Name();
        }

        struct FileStatus
        {
            /*0x10*/ Interop.Sys.FileStatus _fileStatus;
            /*0x80*/ int _fileStatusInitialized;
            /*0x84*/ bool <InitiallyDirectory>k__BackingField;
            /*0x85*/ bool _isDirectory;
            /*0x86*/ bool _exists;

            static /*0x71649dc*/ void Initialize(ref System.IO.FileStatus status, bool isDirectory);
            /*0x71649c8*/ bool get_InitiallyDirectory();
            /*0x71649d0*/ void set_InitiallyDirectory(bool value);
            /*0x71649f0*/ bool IsReadOnly(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x7164ba0*/ System.IO.FileAttributes GetAttributes(System.ReadOnlySpan<char> path, System.ReadOnlySpan<char> fileName);
            /*0x7164c88*/ bool GetExists(System.ReadOnlySpan<char> path);
            /*0x7164e64*/ System.DateTimeOffset GetLastAccessTime(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x7164f00*/ System.DateTimeOffset UnixTimeToDateTimeOffset(long seconds, long nanoseconds);
            /*0x7164fb4*/ long GetLength(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x7164ccc*/ void Refresh(System.ReadOnlySpan<char> path);
            /*0x7164ae0*/ void EnsureStatInitialized(System.ReadOnlySpan<char> path, bool continueOnError);
        }

        class FileSystemInfo : System.MarshalByRefObject, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ System.IO.FileStatus _fileStatus;
            /*0x90*/ string FullPath;
            /*0x98*/ string OriginalPath;
            /*0xa0*/ string _name;

            static /*0x7164fd0*/ System.IO.FileSystemInfo Create(string fullPath, string fileName, ref System.IO.FileStatus fileStatus);
            static /*0x7165220*/ void ThrowNotFound(string path);
            /*0x71628a8*/ FileSystemInfo();
            /*0x7162ed8*/ FileSystemInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71650a0*/ void Init(ref System.IO.FileStatus fileStatus);
            /*0x716487c*/ System.IO.FileAttributes get_Attributes();
            /*0x716511c*/ bool get_ExistsCore();
            /*0x71651b4*/ System.DateTimeOffset get_LastAccessTimeCore();
            /*0x7164948*/ long get_LengthCore();
            /*0x71652b8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x71653e8*/ string get_FullName();
            /*0x71653f0*/ string get_Name();
            /*0x71653f8*/ bool get_Exists();
            /*0x7165480*/ System.DateTime get_LastAccessTimeUtc();
            /*0x71654f8*/ string ToString();
        }

        enum MatchCasing
        {
            PlatformDefault = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
        }

        enum MatchType
        {
            Simple = 0,
            Win32 = 1,
        }

        enum SearchOption
        {
            TopDirectoryOnly = 0,
            AllDirectories = 1,
        }

        enum SearchTarget
        {
            Files = 1,
            Directories = 2,
            Both = 3,
        }

        class BufferedStream : System.IO.Stream
        {
            /*0x28*/ System.IO.Stream _stream;
            /*0x30*/ byte[] _buffer;
            /*0x38*/ int _bufferSize;
            /*0x3c*/ int _readPos;
            /*0x40*/ int _readLen;
            /*0x44*/ int _writePos;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastSyncCompletedReadTask;
            /*0x50*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            /*0x7165614*/ BufferedStream(System.IO.Stream stream);
            /*0x716561c*/ BufferedStream(System.IO.Stream stream, int bufferSize);
            /*0x716551c*/ System.Threading.SemaphoreSlim LazyEnsureAsyncActiveSemaphoreInitialized();
            /*0x7165800*/ void EnsureNotClosed();
            /*0x7165860*/ void EnsureCanSeek();
            /*0x71658d0*/ void EnsureCanRead();
            /*0x7165940*/ void EnsureCanWrite();
            /*0x71659b0*/ void EnsureShadowBufferAllocated();
            /*0x7165a9c*/ void EnsureBufferAllocated();
            /*0x7165b0c*/ bool get_CanRead();
            /*0x7165b24*/ bool get_CanWrite();
            /*0x7165b3c*/ bool get_CanSeek();
            /*0x7165b54*/ long get_Length();
            /*0x7165be0*/ long get_Position();
            /*0x7165c2c*/ void set_Position(long value);
            /*0x7165cec*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x7165de8*/ void Dispose(bool disposing);
            /*0x7165f5c*/ void Flush();
            /*0x716605c*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x7166128*/ System.Threading.Tasks.Task FlushAsyncInternal(System.Threading.CancellationToken cancellationToken);
            /*0x7166018*/ void FlushRead();
            /*0x7166224*/ void ClearReadBufferBeforeWrite();
            /*0x7165b90*/ void FlushWrite();
            /*0x71662b4*/ System.Threading.Tasks.Task FlushWriteAsync(System.Threading.CancellationToken cancellationToken);
            /*0x71663b0*/ int ReadFromBuffer(byte[] array, int offset, int count);
            /*0x7166414*/ int ReadFromBuffer(System.Span<byte> destination);
            /*0x7166548*/ int ReadFromBuffer(byte[] array, int offset, int count, ref System.Exception error);
            /*0x7166628*/ int Read(byte[] array, int offset, int count);
            /*0x716683c*/ int Read(System.Span<byte> destination);
            /*0x71669a0*/ System.Threading.Tasks.Task<int> LastSyncCompletedReadTask(int val);
            /*0x7166a5c*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7166fc4*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x7166e2c*/ System.Threading.Tasks.ValueTask<int> ReadFromUnderlyingStreamAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken, int bytesAlreadySatisfied, System.Threading.Tasks.Task semaphoreLockTask);
            /*0x71672cc*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x7167380*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x71673c8*/ int ReadByte();
            /*0x7167418*/ int ReadByteSlow();
            /*0x71674a8*/ void WriteToBuffer(byte[] array, ref int offset, ref int count);
            /*0x7167584*/ int WriteToBuffer(System.ReadOnlySpan<byte> buffer);
            /*0x71676f4*/ void Write(byte[] array, int offset, int count);
            /*0x7167a04*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x7167c9c*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7167e98*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x71680e8*/ System.Threading.Tasks.Task WriteToUnderlyingStreamAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task semaphoreLockTask);
            /*0x7168238*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x71682ec*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x71682f8*/ void WriteByte(byte value);
            /*0x7168384*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x71684ac*/ void SetLength(long value);
            /*0x716856c*/ void CopyTo(System.IO.Stream destination, int bufferSize);

            class <>c
            {
                static /*0x0*/ System.IO.BufferedStream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__10_0;

                static /*0x71685fc*/ <>c();
                /*0x7168664*/ <>c();
                /*0x716866c*/ System.Threading.SemaphoreSlim <LazyEnsureAsyncActiveSemaphoreInitialized>b__10_0();
            }

            struct <DisposeAsync>d__34 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder <>t__builder;
                /*0x38*/ System.IO.BufferedStream <>4__this;
                /*0x40*/ object <>7__wrap1;
                /*0x48*/ int <>7__wrap2;
                /*0x50*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__2;

                /*0x71686c8*/ void MoveNext();
                /*0x7168e60*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushAsyncInternal>d__38 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.IO.BufferedStream <>4__this;
                /*0x38*/ System.Threading.CancellationToken cancellationToken;
                /*0x40*/ System.Threading.SemaphoreSlim <sem>5__2;
                /*0x48*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x7168e6c*/ void MoveNext();
                /*0x71694b0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushWriteAsync>d__42 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.IO.BufferedStream <>4__this;
                /*0x38*/ System.Threading.CancellationToken cancellationToken;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__1;
                /*0x50*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;

                /*0x7169518*/ void MoveNext();
                /*0x7169af0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <ReadFromUnderlyingStreamAsync>d__51 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int> <>t__builder;
                /*0x38*/ System.Threading.Tasks.Task semaphoreLockTask;
                /*0x40*/ System.IO.BufferedStream <>4__this;
                /*0x48*/ System.Memory<byte> buffer;
                /*0x58*/ int bytesAlreadySatisfied;
                /*0x60*/ System.Threading.CancellationToken cancellationToken;
                /*0x68*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x78*/ int <>7__wrap1;
                /*0x80*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<int> <>u__2;

                /*0x7169b58*/ void MoveNext();
                /*0x716a4b0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <WriteToUnderlyingStreamAsync>d__63 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.Threading.Tasks.Task semaphoreLockTask;
                /*0x38*/ System.IO.BufferedStream <>4__this;
                /*0x40*/ System.ReadOnlyMemory<byte> buffer;
                /*0x50*/ System.Threading.CancellationToken cancellationToken;
                /*0x58*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x68*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__2;

                /*0x716a508*/ void MoveNext();
                /*0x716b94c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        enum FileAttributes
        {
            ReadOnly = 1,
            Hidden = 2,
            System = 4,
            Directory = 16,
            Archive = 32,
            Device = 64,
            Normal = 128,
            Temporary = 256,
            SparseFile = 512,
            ReparsePoint = 1024,
            Compressed = 2048,
            Offline = 4096,
            NotContentIndexed = 8192,
            Encrypted = 16384,
            IntegrityStream = 32768,
            NoScrubData = 131072,
        }

        class Stream : System.MarshalByRefObject, System.IDisposable, System.IAsyncDisposable
        {
            static /*0x0*/ System.IO.Stream Null;
            /*0x18*/ System.IO.Stream.ReadWriteTask _activeReadWriteTask;
            /*0x20*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            static /*0x716e2bc*/ Stream();
            static /*0x716de3c*/ int BlockingEndRead(System.IAsyncResult asyncResult);
            static /*0x716e0d0*/ void BlockingEndWrite(System.IAsyncResult asyncResult);
            static /*0x716ce9c*/ System.Threading.Tasks.ValueTask<int> <ReadAsync>g__FinishReadAsync|44_0(System.Threading.Tasks.Task<int> readTask, byte[] localBuffer, System.Memory<byte> localDestination);
            /*0x715f4d8*/ Stream();
            /*0x716b9b4*/ System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized();
            /*0x380b128*/ bool get_CanRead();
            /*0x380b128*/ bool get_CanSeek();
            /*0x716baac*/ bool get_CanTimeout();
            /*0x380b128*/ bool get_CanWrite();
            /*0x380b828*/ long get_Length();
            /*0x380b828*/ long get_Position();
            /*0x380d438*/ void set_Position(long value);
            /*0x716bab4*/ int get_ReadTimeout();
            /*0x716bb00*/ void set_ReadTimeout(int value);
            /*0x716bb4c*/ int get_WriteTimeout();
            /*0x716bb98*/ void set_WriteTimeout(int value);
            /*0x716bbe4*/ void CopyTo(System.IO.Stream destination);
            /*0x716bce4*/ void CopyTo(System.IO.Stream destination, int bufferSize);
            /*0x716bc1c*/ int GetCopyBufferSize();
            /*0x716bea4*/ void Close();
            /*0x716bf14*/ void Dispose();
            /*0x715f828*/ void Dispose(bool disposing);
            /*0x380cb08*/ void Flush();
            /*0x7168df4*/ System.Threading.Tasks.Task FlushAsync();
            /*0x716bf24*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x716c0ec*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x716c10c*/ System.IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0x716c6e4*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x716c8a4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count);
            /*0x716c938*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x716cbf8*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x716ca18*/ System.Threading.Tasks.Task<int> BeginEndReadAsync(byte[] buffer, int offset, int count);
            /*0x716d018*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x716d038*/ System.IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0x716c494*/ void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x716c61c*/ void RunReadWriteTask(System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x716d23c*/ void FinishTrackingAsyncOperation();
            /*0x716d26c*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x716d41c*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count);
            /*0x716d4b0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x716d75c*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x716da14*/ System.Threading.Tasks.Task FinishWriteAsync(System.Threading.Tasks.Task writeTask, byte[] localBuffer);
            /*0x716d57c*/ System.Threading.Tasks.Task BeginEndWriteAsync(byte[] buffer, int offset, int count);
            long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x380d438*/ void SetLength(long value);
            int Read(byte[] buffer, int offset, int count);
            /*0x71600c4*/ int Read(System.Span<byte> buffer);
            /*0x716db14*/ int ReadByte();
            void Write(byte[] buffer, int offset, int count);
            /*0x71612f8*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x716dba8*/ void WriteByte(byte value);
            /*0x716dc34*/ System.IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x716df28*/ System.IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x716d010*/ bool HasOverriddenBeginEndRead();
            /*0x716db0c*/ bool HasOverriddenBeginEndWrite();
            /*0x716e1c0*/ System.Threading.Tasks.ValueTask DisposeAsync();

            struct ReadWriteParameters
            {
                /*0x10*/ byte[] Buffer;
                /*0x18*/ int Offset;
                /*0x1c*/ int Count;
            }

            class ReadWriteTask : System.Threading.Tasks.Task<int>, System.Threading.Tasks.ITaskCompletionAction
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeAsyncCallback;
                /*0x54*/ bool _isRead;
                /*0x55*/ bool _apm;
                /*0x58*/ System.IO.Stream _stream;
                /*0x60*/ byte[] _buffer;
                /*0x68*/ int _offset;
                /*0x6c*/ int _count;
                /*0x70*/ System.AsyncCallback _callback;
                /*0x78*/ System.Threading.ExecutionContext _context;

                static /*0x716e3b4*/ void InvokeAsyncCallback(object completedTask);
                /*0x716c310*/ ReadWriteTask(bool isRead, bool apm, System.Func<object, int> function, object state, System.IO.Stream stream, byte[] buffer, int offset, int count, System.AsyncCallback callback);
                /*0x716e38c*/ void ClearBeginState();
                /*0x716e43c*/ void System.Threading.Tasks.ITaskCompletionAction.Invoke(System.Threading.Tasks.Task completingTask);
                /*0x716e580*/ bool System.Threading.Tasks.ITaskCompletionAction.get_InvokeMayRunArbitraryCode();
            }

            class NullStream : System.IO.Stream
            {
                static /*0x0*/ System.Threading.Tasks.Task<int> s_zeroTask;

                static /*0x716eb98*/ NullStream();
                /*0x716e334*/ NullStream();
                /*0x716e588*/ bool get_CanRead();
                /*0x716e590*/ bool get_CanWrite();
                /*0x716e598*/ bool get_CanSeek();
                /*0x716e5a0*/ long get_Length();
                /*0x716e5a8*/ long get_Position();
                /*0x716e5b0*/ void set_Position(long value);
                /*0x716e5b4*/ void CopyTo(System.IO.Stream destination, int bufferSize);
                /*0x716e5bc*/ void Dispose(bool disposing);
                /*0x716e5c0*/ void Flush();
                /*0x716e5c4*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
                /*0x716e6a8*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x716e734*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x716e7d4*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x716e860*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x716e900*/ int Read(byte[] buffer, int offset, int count);
                /*0x716e908*/ int Read(System.Span<byte> buffer);
                /*0x716e910*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x716e968*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
                /*0x716e9bc*/ int ReadByte();
                /*0x716e9c4*/ void Write(byte[] buffer, int offset, int count);
                /*0x716e9c8*/ void Write(System.ReadOnlySpan<byte> buffer);
                /*0x716e9cc*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x716eab0*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
                /*0x716eb88*/ void WriteByte(byte value);
                /*0x716eb8c*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x716eb94*/ void SetLength(long length);
            }

            class SynchronousAsyncResult : System.IAsyncResult
            {
                /*0x10*/ object _stateObject;
                /*0x18*/ bool _isWrite;
                /*0x20*/ System.Threading.ManualResetEvent _waitHandle;
                /*0x28*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x30*/ bool _endXxxCalled;
                /*0x34*/ int _bytesRead;

                static /*0x716de40*/ int EndRead(System.IAsyncResult asyncResult);
                static /*0x716e0d4*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x716dda0*/ SynchronousAsyncResult(int bytesRead, object asyncStateObject);
                /*0x716e094*/ SynchronousAsyncResult(object asyncStateObject);
                /*0x716ddd8*/ SynchronousAsyncResult(System.Exception ex, object asyncStateObject, bool isWrite);
                /*0x716ec30*/ bool get_IsCompleted();
                /*0x716ec38*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                /*0x716ed30*/ object get_AsyncState();
                /*0x716ed38*/ bool get_CompletedSynchronously();
                /*0x716ed40*/ void ThrowIfError();

                class <>c
                {
                    static /*0x0*/ System.IO.Stream.SynchronousAsyncResult.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.ManualResetEvent> <>9__12_0;

                    static /*0x716ed54*/ <>c();
                    /*0x716edbc*/ <>c();
                    /*0x716edc4*/ System.Threading.ManualResetEvent <get_AsyncWaitHandle>b__12_0();
                }
            }

            class <>c
            {
                static /*0x0*/ System.IO.Stream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__4_0;
                static /*0x10*/ System.Action<object> <>9__37_0;
                static /*0x18*/ System.Func<object, int> <>9__40_0;
                static /*0x20*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__45_0;
                static /*0x28*/ System.Func<System.IO.Stream, System.IAsyncResult, int> <>9__45_1;
                static /*0x30*/ System.Func<object, int> <>9__48_0;
                static /*0x38*/ System.Action<System.Threading.Tasks.Task, object> <>9__49_0;
                static /*0x40*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__58_0;
                static /*0x48*/ System.Func<System.IO.Stream, System.IAsyncResult, System.Threading.Tasks.VoidTaskResult> <>9__58_1;

                static /*0x716ee1c*/ <>c();
                /*0x716ee84*/ <>c();
                /*0x716ee8c*/ System.Threading.SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0();
                /*0x716eee8*/ void <FlushAsync>b__37_0(object state);
                /*0x716ef70*/ int <BeginReadInternal>b__40_0(object <p0>);
                /*0x716f134*/ System.IAsyncResult <BeginEndReadAsync>b__45_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x716f168*/ int <BeginEndReadAsync>b__45_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
                /*0x716f194*/ int <BeginWriteInternal>b__48_0(object <p0>);
                /*0x716f348*/ void <RunReadWriteTaskWhenReady>b__49_0(System.Threading.Tasks.Task t, object state);
                /*0x716f3b4*/ System.IAsyncResult <BeginEndWriteAsync>b__58_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x716f3e8*/ System.Threading.Tasks.VoidTaskResult <BeginEndWriteAsync>b__58_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
            }

            struct <FinishWriteAsync>d__57 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.Threading.Tasks.Task writeTask;
                /*0x38*/ byte[] localBuffer;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x716f41c*/ void MoveNext();
                /*0x716f6ac*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <<ReadAsync>g__FinishReadAsync|44_0>d : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int> <>t__builder;
                /*0x38*/ System.Threading.Tasks.Task<int> readTask;
                /*0x40*/ byte[] localBuffer;
                /*0x48*/ System.Memory<byte> localDestination;
                /*0x58*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int> <>u__1;

                /*0x716f714*/ void MoveNext();
                /*0x716faa8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class __Error
        {
            static /*0x716fb00*/ void EndOfFile();
            static /*0x716fb58*/ void FileNotOpen();
            static /*0x716fbb4*/ void ReaderClosed();
            static /*0x716fc10*/ string GetDisplayablePath(string path, bool isInvalidPath);
            static /*0x716fd50*/ void WinIOError(int errorCode, string maybeFullPath);
            static /*0x71702ac*/ void WriterClosed();
        }

        class BinaryReader : System.IDisposable
        {
            /*0x10*/ System.IO.Stream m_stream;
            /*0x18*/ byte[] m_buffer;
            /*0x20*/ System.Text.Decoder m_decoder;
            /*0x28*/ byte[] m_charBytes;
            /*0x30*/ char[] m_singleChar;
            /*0x38*/ char[] m_charBuffer;
            /*0x40*/ int m_maxCharsSize;
            /*0x44*/ bool m_2BytesPerChar;
            /*0x45*/ bool m_isMemoryStream;
            /*0x46*/ bool m_leaveOpen;

            /*0x7170308*/ BinaryReader(System.IO.Stream input);
            /*0x7170608*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding);
            /*0x7170378*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);
            /*0x7170610*/ System.IO.Stream get_BaseStream();
            /*0x7170618*/ void Close();
            /*0x7170628*/ void Dispose(bool disposing);
            /*0x71706d4*/ void Dispose();
            /*0x71706e4*/ int Read();
            /*0x7170998*/ bool ReadBoolean();
            /*0x71709e0*/ byte ReadByte();
            /*0x7170a14*/ sbyte ReadSByte();
            /*0x7170a54*/ char ReadChar();
            /*0x7170a78*/ short ReadInt16();
            /*0x7170ac0*/ ushort ReadUInt16();
            /*0x7170b08*/ int ReadInt32();
            /*0x7170bfc*/ uint ReadUInt32();
            /*0x7170c6c*/ long ReadInt64();
            /*0x7170d1c*/ ulong ReadUInt64();
            /*0x7170dcc*/ float ReadSingle();
            /*0x7170dfc*/ double ReadDouble();
            /*0x7170e2c*/ decimal ReadDecimal();
            /*0x7170fc4*/ string ReadString();
            /*0x7171318*/ int InternalReadChars(char[] buffer, int index, int count);
            /*0x71706fc*/ int InternalReadOneChar();
            /*0x717161c*/ char[] ReadChars(int count);
            /*0x7171778*/ int Read(byte[] buffer, int index, int count);
            /*0x71718e8*/ byte[] ReadBytes(int count);
            /*0x7171a74*/ void FillBuffer(int numBytes);
            /*0x7171278*/ int Read7BitEncodedInt();
        }

        class BinaryWriter : System.IDisposable, System.IAsyncDisposable
        {
            static /*0x0*/ System.IO.BinaryWriter Null;
            /*0x10*/ System.IO.Stream OutStream;
            /*0x18*/ byte[] _buffer;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Encoder _encoder;
            /*0x30*/ bool _leaveOpen;
            /*0x38*/ byte[] _largeByteBuffer;
            /*0x40*/ int _maxChars;

            static /*0x7172bcc*/ BinaryWriter();
            /*0x7171b90*/ BinaryWriter();
            /*0x7171ca8*/ BinaryWriter(System.IO.Stream output);
            /*0x7171ec8*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding);
            /*0x7171d20*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);
            /*0x7171ed0*/ void Dispose(bool disposing);
            /*0x7171f18*/ void Dispose();
            /*0x7171f28*/ void Flush();
            /*0x7171f4c*/ System.Threading.Tasks.ValueTask DisposeAsync();
            /*0x717214c*/ void Write(bool value);
            /*0x717219c*/ void Write(byte value);
            /*0x71721c0*/ void Write(byte[] buffer);
            /*0x7172238*/ void Write(byte[] buffer, int index, int count);
            /*0x717225c*/ void Write(char ch);
            /*0x717235c*/ void Write(char[] chars);
            /*0x7172400*/ void Write(double value);
            /*0x717243c*/ void Write(short value);
            /*0x71724a4*/ void Write(ushort value);
            /*0x717250c*/ void Write(int value);
            /*0x71725ac*/ void Write(uint value);
            /*0x717264c*/ void Write(long value);
            /*0x717275c*/ void Write(ulong value);
            /*0x717286c*/ void Write(float value);
            /*0x71728a8*/ void Write(string value);
            /*0x7172b6c*/ void Write7BitEncodedInt(int value);
        }

        class StringReader : System.IO.TextReader
        {
            /*0x18*/ string _s;
            /*0x20*/ int _pos;
            /*0x24*/ int _length;

            /*0x7172c30*/ StringReader(string s);
            /*0x7172cfc*/ void Close();
            /*0x7172d0c*/ void Dispose(bool disposing);
            /*0x7172d30*/ int Peek();
            /*0x7172d6c*/ int Read();
            /*0x7172db0*/ int Read(char[] buffer, int index, int count);
            /*0x7172f58*/ string ReadToEnd();
            /*0x7172f94*/ string ReadLine();
        }

        class StringWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.Text.UnicodeEncoding m_encoding;
            /*0x30*/ System.Text.StringBuilder _sb;
            /*0x38*/ bool _isOpen;

            /*0x71730a0*/ StringWriter();
            /*0x7173220*/ StringWriter(System.IFormatProvider formatProvider);
            /*0x717328c*/ StringWriter(System.Text.StringBuilder sb);
            /*0x7173134*/ StringWriter(System.Text.StringBuilder sb, System.IFormatProvider formatProvider);
            /*0x71732fc*/ void Close();
            /*0x717330c*/ void Dispose(bool disposing);
            /*0x7173314*/ System.Text.Encoding get_Encoding();
            /*0x71733c8*/ void Write(char value);
            /*0x71733f0*/ void Write(char[] buffer, int index, int count);
            /*0x7173564*/ void Write(string value);
            /*0x7173598*/ System.Threading.Tasks.Task FlushAsync();
            /*0x7173620*/ string ToString();
        }

        class FileStream : System.IO.Stream
        {
            static /*0x0*/ byte[] buf_recycle;
            static /*0x8*/ object buf_recycle_lock;
            /*0x28*/ byte[] buf;
            /*0x30*/ string name;
            /*0x38*/ Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle;
            /*0x40*/ bool isExposed;
            /*0x48*/ long append_startpos;
            /*0x50*/ System.IO.FileAccess access;
            /*0x54*/ bool owner;
            /*0x55*/ bool async;
            /*0x56*/ bool canseek;
            /*0x57*/ bool anonymous;
            /*0x58*/ bool buf_dirty;
            /*0x5c*/ int buf_size;
            /*0x60*/ int buf_length;
            /*0x64*/ int buf_offset;
            /*0x68*/ long buf_start;

            static /*0x71769bc*/ FileStream();
            /*0x7173640*/ FileStream(nint handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x7173ad0*/ FileStream(string path, System.IO.FileMode mode);
            /*0x7174234*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access);
            /*0x7163670*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            /*0x7163f64*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);
            /*0x7174278*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);
            /*0x71742a0*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
            /*0x7174260*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool isAsync, bool anonymous);
            /*0x7173b04*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool anonymous, System.IO.FileOptions options);
            /*0x71737e0*/ void Init(Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x71746d4*/ bool get_CanRead();
            /*0x71746e8*/ bool get_CanWrite();
            /*0x71746fc*/ bool get_CanSeek();
            /*0x7174704*/ string get_Name();
            /*0x717470c*/ long get_Length();
            /*0x7174880*/ long get_Position();
            /*0x71749f0*/ void set_Position(long value);
            /*0x7174a7c*/ Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle();
            /*0x71746ac*/ void ExposeHandle();
            /*0x7174c44*/ int ReadByte();
            /*0x7174edc*/ void WriteByte(byte value);
            /*0x7175030*/ int Read(byte[] array, int offset, int count);
            /*0x717527c*/ int ReadInternal(byte[] dest, int offset, int count);
            /*0x71753d0*/ System.IAsyncResult BeginRead(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x7175664*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x71757c4*/ void Write(byte[] array, int offset, int count);
            /*0x71759e8*/ void WriteInternal(byte[] src, int offset, int count);
            /*0x7175c28*/ System.IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x7175efc*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x717605c*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x71762b8*/ void SetLength(long value);
            /*0x71764c4*/ void Flush();
            /*0x7176538*/ void Finalize();
            /*0x71765dc*/ void Dispose(bool disposing);
            /*0x7176930*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x71769b4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x71769b8*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x7175318*/ int ReadSegment(byte[] dest, int dest_offset, int count);
            /*0x7175bb0*/ int WriteSegment(byte[] src, int src_offset, int count);
            /*0x7174ab8*/ void FlushBuffer();
            /*0x7174870*/ void FlushBufferIfDirty();
            /*0x7174eac*/ void RefillBuffer();
            /*0x7174d84*/ int ReadData(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] buf, int offset, int count);
            /*0x71743ec*/ void InitBuffer(int size, bool isZeroSize);
            /*0x7174370*/ string GetSecureFileName(string filename);
            /*0x71742c0*/ string GetSecureFileName(string filename, bool full);

            class ReadDelegate : System.MulticastDelegate
            {
                /*0x7176a30*/ ReadDelegate(object object, nint method);
                /*0x7176ae4*/ int Invoke(byte[] buffer, int offset, int count);
                /*0x7176af8*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x7176b78*/ int EndInvoke(System.IAsyncResult result);
            }

            class WriteDelegate : System.MulticastDelegate
            {
                /*0x7176ba0*/ WriteDelegate(object object, nint method);
                /*0x7176c54*/ void Invoke(byte[] buffer, int offset, int count);
                /*0x7176c68*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x7176ce8*/ void EndInvoke(System.IAsyncResult result);
            }
        }

        class FileStreamAsyncResult : System.IAsyncResult
        {
            /*0x10*/ object state;
            /*0x18*/ bool completed;
            /*0x20*/ System.Threading.ManualResetEvent wh;
            /*0x28*/ System.AsyncCallback cb;
            /*0x30*/ bool completedSynch;
            /*0x34*/ int Count;
            /*0x38*/ int OriginalCount;
            /*0x3c*/ int BytesRead;
            /*0x40*/ System.AsyncCallback realcb;

            static /*0x7176df4*/ void CBWrapper(System.IAsyncResult ares);
            /*0x7176cf4*/ FileStreamAsyncResult(System.AsyncCallback cb, object state);
            /*0x7176e88*/ object get_AsyncState();
            /*0x7176e90*/ bool get_CompletedSynchronously();
            /*0x7176e98*/ System.Threading.WaitHandle get_AsyncWaitHandle();
            /*0x7176ea0*/ bool get_IsCompleted();
        }

        enum MonoFileType
        {
            Unknown = 0,
            Disk = 1,
            Char = 2,
            Pipe = 3,
            Remote = 32768,
        }

        class MonoIO
        {
            static /*0x0*/ nint InvalidHandle;
            static /*0x8*/ bool dump_handles;

            static /*0x71780d8*/ MonoIO();
            static /*0x7176ea8*/ System.Exception GetException(System.IO.MonoIOError error);
            static /*0x7176fc0*/ System.Exception GetException(string path, System.IO.MonoIOError error);
            static /*0x7177708*/ string GetCurrentDirectory(ref System.IO.MonoIOError error);
            static /*0x717770c*/ System.IO.MonoFileType GetFileType(nint handle, ref System.IO.MonoIOError error);
            static /*0x7177710*/ System.IO.MonoFileType GetFileType(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x7177848*/ nint Open(char* filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x717784c*/ nint Open(string filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x71778e8*/ bool Cancel_internal(nint handle, ref System.IO.MonoIOError error);
            static /*0x71778ec*/ bool Cancel(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x7177a24*/ bool Close(nint handle, ref System.IO.MonoIOError error);
            static /*0x7177a28*/ int Read(nint handle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x7177a2c*/ int Read(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x7177b84*/ int Write(nint handle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x7177b88*/ int Write(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x7177ce0*/ long Seek(nint handle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x7177ce4*/ long Seek(System.Runtime.InteropServices.SafeHandle safeHandle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x7177e34*/ long GetLength(nint handle, ref System.IO.MonoIOError error);
            static /*0x7177e38*/ long GetLength(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x7177f70*/ bool SetLength(nint handle, long length, ref System.IO.MonoIOError error);
            static /*0x7177f74*/ bool SetLength(System.Runtime.InteropServices.SafeHandle safeHandle, long length, ref System.IO.MonoIOError error);
            static /*0x71780b4*/ nint get_ConsoleOutput();
            static /*0x71780b8*/ nint get_ConsoleInput();
            static /*0x71780bc*/ nint get_ConsoleError();
            static /*0x71780c0*/ bool DuplicateHandle(nint source_process_handle, nint source_handle, nint target_process_handle, ref nint target_handle, int access, int inherit, int options, ref System.IO.MonoIOError error);
            static /*0x71780c4*/ char get_VolumeSeparatorChar();
            static /*0x71780c8*/ char get_DirectorySeparatorChar();
            static /*0x71780cc*/ char get_AltDirectorySeparatorChar();
            static /*0x71780d0*/ char get_PathSeparator();
            static /*0x7177704*/ void DumpHandles();
            static /*0x71780d4*/ bool RemapPath(string path, ref string newPath);
        }

        enum MonoIOError
        {
            ERROR_SUCCESS = 0,
            ERROR_FILE_NOT_FOUND = 2,
            ERROR_PATH_NOT_FOUND = 3,
            ERROR_TOO_MANY_OPEN_FILES = 4,
            ERROR_ACCESS_DENIED = 5,
            ERROR_INVALID_HANDLE = 6,
            ERROR_INVALID_DRIVE = 15,
            ERROR_NOT_SAME_DEVICE = 17,
            ERROR_NO_MORE_FILES = 18,
            ERROR_NOT_READY = 21,
            ERROR_WRITE_FAULT = 29,
            ERROR_READ_FAULT = 30,
            ERROR_GEN_FAILURE = 31,
            ERROR_SHARING_VIOLATION = 32,
            ERROR_LOCK_VIOLATION = 33,
            ERROR_HANDLE_DISK_FULL = 39,
            ERROR_NOT_SUPPORTED = 50,
            ERROR_FILE_EXISTS = 80,
            ERROR_CANNOT_MAKE = 82,
            ERROR_INVALID_PARAMETER = 87,
            ERROR_BROKEN_PIPE = 109,
            ERROR_INVALID_NAME = 123,
            ERROR_DIR_NOT_EMPTY = 145,
            ERROR_ALREADY_EXISTS = 183,
            ERROR_FILENAME_EXCED_RANGE = 206,
            ERROR_DIRECTORY = 267,
            ERROR_ENCRYPTION_FAILED = 6000,
        }

        struct MonoIOStat
        {
            /*0x10*/ System.IO.FileAttributes fileAttributes;
            /*0x18*/ long Length;
            /*0x20*/ long CreationTime;
            /*0x28*/ long LastAccessTime;
            /*0x30*/ long LastWriteTime;
        }

        class Path
        {
            static /*0x0*/ char[] InvalidPathChars;
            static /*0x8*/ char AltDirectorySeparatorChar;
            static /*0xa*/ char DirectorySeparatorChar;
            static /*0xc*/ char PathSeparator;
            static /*0x10*/ string DirectorySeparatorStr;
            static /*0x18*/ char VolumeSeparatorChar;
            static /*0x20*/ char[] PathSeparatorChars;
            static /*0x28*/ bool dirEqualsVolume;
            static /*0x30*/ char[] trimEndCharsWindows;
            static /*0x38*/ char[] trimEndCharsUnix;

            static /*0x717a4fc*/ Path();
            static /*0x7178160*/ string ChangeExtension(string path, string extension);
            static /*0x71783d8*/ string Combine(string path1, string path2);
            static /*0x717875c*/ string CleanPath(string s);
            static /*0x7178bac*/ string GetDirectoryName(string path);
            static /*0x7179344*/ System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);
            static /*0x7179414*/ string GetExtension(string path);
            static /*0x7179530*/ string GetFileName(string path);
            static /*0x717963c*/ string GetFileNameWithoutExtension(string path);
            static /*0x7179698*/ string GetFullPath(string path);
            static /*0x7179d7c*/ string GetFullPathInternal(string path);
            static /*0x7179700*/ string InsecureGetFullPath(string path);
            static /*0x7179dd0*/ bool IsDirectorySeparator(char c);
            static /*0x7178f24*/ string GetPathRoot(string path);
            static /*0x717a260*/ string GetTempPath();
            static /*0x717a360*/ string get_temp_path();
            static /*0x717a364*/ bool IsPathRooted(System.ReadOnlySpan<char> path);
            static /*0x7178638*/ bool IsPathRooted(string path);
            static /*0x717a468*/ char[] GetInvalidPathChars();
            static /*0x7178344*/ int findExtension(string path);
            static /*0x7179e5c*/ string CanonicalizePath(string path);
            static /*0x717a6fc*/ string Combine(string[] paths);
            static /*0x717a9ec*/ string Combine(string path1, string path2, string path3);
            static /*0x717ab6c*/ string Combine(string path1, string path2, string path3, string path4);
            static /*0x717ad3c*/ System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);
            static /*0x717ae80*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);
            static /*0x717b1b0*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);
            static /*0x717b620*/ bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, ref int charsWritten);
            static /*0x717af38*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second);
            static /*0x717b2c0*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second, System.ReadOnlySpan<char> third);

            class <>c
            {
                static /*0x0*/ System.IO.Path.<> <>9;
                static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, bool>> <>9__56_0;
                static /*0x10*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>>> <>9__57_0;

                static /*0x717b88c*/ <>c();
                /*0x717b8f4*/ <>c();
                /*0x717b8fc*/ void <JoinInternal>b__56_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, bool> state);
                /*0x717ba5c*/ void <JoinInternal>b__57_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>> state);
            }
        }

        class UnexceptionalStreamReader : System.IO.StreamReader
        {
            static /*0x0*/ bool[] newline;
            static /*0x8*/ char newlineChar;

            static /*0x717bc5c*/ UnexceptionalStreamReader();
            /*0x717bd0c*/ UnexceptionalStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x717bd7c*/ int Peek();
            /*0x717be04*/ int Read();
            /*0x717be8c*/ int Read(char[] dest_buffer, int index, int count);
            /*0x717c114*/ bool CheckEOL(char current);
            /*0x717c2ac*/ string ReadLine();
            /*0x717c334*/ string ReadToEnd();
        }

        class UnexceptionalStreamWriter : System.IO.StreamWriter
        {
            /*0x717c3bc*/ UnexceptionalStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x717c434*/ void Flush();
            /*0x717c4b8*/ void Write(char[] buffer, int index, int count);
            /*0x717c53c*/ void Write(char value);
            /*0x717c5c0*/ void Write(char[] value);
            /*0x717c644*/ void Write(string value);
        }

        class CStreamReader : System.IO.StreamReader
        {
            /*0x60*/ System.TermInfoDriver driver;

            /*0x717c6c8*/ CStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x717c7e8*/ int Peek();
            /*0x717c870*/ int Read();
            /*0x717c940*/ int Read(char[] dest, int index, int count);
            /*0x717cae0*/ string ReadLine();
            /*0x717cb78*/ string ReadToEnd();
        }

        class CStreamWriter : System.IO.StreamWriter
        {
            /*0x70*/ System.TermInfoDriver driver;

            /*0x717cc10*/ CStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, bool leaveOpen);
            /*0x717cd44*/ void Write(char[] buffer, int index, int count);
            /*0x717d08c*/ void Write(char val);
            /*0x717d298*/ void InternalWriteString(string val);
            /*0x717d214*/ void InternalWriteChar(char val);
            /*0x717d31c*/ void InternalWriteChars(char[] buffer, int n);
            /*0x717d3a8*/ void Write(char[] val);
            /*0x717d3d0*/ void Write(string val);
            /*0x717d49c*/ void WriteLine(string val);
        }

        class MonoLinqHelper
        {
            static /*0x382eaf0*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
        }

        namespace Enumeration
        {
            struct FileSystemEntry
            {
                /*0x10*/ Interop.Sys.DirectoryEntry _directoryEntry;
                /*0x20*/ System.IO.FileStatus _status;
                /*0x98*/ System.Span<char> _pathBuffer;
                /*0xa8*/ System.ReadOnlySpan<char> _fullPath;
                /*0xb8*/ System.ReadOnlySpan<char> _fileName;
                /*0xc8*/ System.IO.Enumeration.FileSystemEntry.<_fileNameBuffer> _fileNameBuffer;
                /*0x2c8*/ System.IO.FileAttributes _initialAttributes;
                /*0x2d0*/ System.ReadOnlySpan<char> <Directory>k__BackingField;
                /*0x2e0*/ System.ReadOnlySpan<char> <RootDirectory>k__BackingField;
                /*0x2f0*/ System.ReadOnlySpan<char> <OriginalRootDirectory>k__BackingField;

                static /*0x717d4e4*/ System.IO.FileAttributes Initialize(ref System.IO.Enumeration.FileSystemEntry entry, Interop.Sys.DirectoryEntry directoryEntry, System.ReadOnlySpan<char> directory, System.ReadOnlySpan<char> rootDirectory, System.ReadOnlySpan<char> originalRootDirectory, System.Span<char> pathBuffer);
                /*0x717d760*/ System.ReadOnlySpan<char> get_FullPath();
                /*0x717d890*/ System.ReadOnlySpan<char> get_FileName();
                /*0x717d900*/ System.ReadOnlySpan<char> get_Directory();
                /*0x717d910*/ void set_Directory(System.ReadOnlySpan<char> value);
                /*0x717d91c*/ System.ReadOnlySpan<char> get_RootDirectory();
                /*0x717d92c*/ void set_RootDirectory(System.ReadOnlySpan<char> value);
                /*0x717d938*/ System.ReadOnlySpan<char> get_OriginalRootDirectory();
                /*0x717d948*/ void set_OriginalRootDirectory(System.ReadOnlySpan<char> value);
                /*0x717d954*/ System.IO.FileAttributes get_Attributes();
                /*0x717d99c*/ bool get_IsDirectory();
                /*0x717d9a4*/ System.IO.FileSystemInfo ToFileSystemInfo();
                /*0x717da14*/ string ToFullPath();
                /*0x717da3c*/ string ToSpecifiedFullPath();

                struct <_fileNameBuffer>e__FixedBuffer
                {
                    /*0x10*/ char FixedElementField;
                }
            }

            class FileSystemEnumerable<TResult> : System.Collections.Generic.IEnumerable<TResult>, System.Collections.IEnumerable
            {
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.DelegateEnumerator<TResult> _enumerator;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> _transform;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ string _directory;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldIncludePredicate>k__BackingField;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldRecursePredicate>k__BackingField;

                /*0x380da4c*/ FileSystemEnumerable(string directory, System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> transform, System.IO.EnumerationOptions options);
                /*0x380b9e8*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldIncludePredicate();
                /*0x380d83c*/ void set_ShouldIncludePredicate(System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> value);
                /*0x380b9e8*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldRecursePredicate();
                /*0x380b9e8*/ System.Collections.Generic.IEnumerator<TResult> GetEnumerator();
                /*0x380b9e8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class FindPredicate<TResult> : System.MulticastDelegate
                {
                    FindPredicate(object object, nint method);
                    /*0x380b2f0*/ bool Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class FindTransform<TResult> : System.MulticastDelegate
                {
                    FindTransform(object object, nint method);
                    /*0x3907c14*/ TResult Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class DelegateEnumerator<TResult> : System.IO.Enumeration.FileSystemEnumerator<TResult>
                {
                    /*0x0*/ System.IO.Enumeration.FileSystemEnumerable<TResult> _enumerable;

                    /*0x380d83c*/ DelegateEnumerator(System.IO.Enumeration.FileSystemEnumerable<TResult> enumerable);
                    /*0x3907c14*/ TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x380b2f0*/ bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x380b2f0*/ bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerableFactory
            {
                static /*0x0*/ char[] s_unixEscapeChars;

                static /*0x717f31c*/ FileSystemEnumerableFactory();
                static /*0x717dbb8*/ void NormalizeInputs(ref string directory, ref string expression, System.IO.EnumerationOptions options);
                static /*0x717e3fc*/ bool MatchesPattern(string expression, System.ReadOnlySpan<char> name, System.IO.EnumerationOptions options);
                static /*0x717e734*/ System.Collections.Generic.IEnumerable<string> UserFiles(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x717e930*/ System.Collections.Generic.IEnumerable<string> UserDirectories(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x717eb2c*/ System.Collections.Generic.IEnumerable<string> UserEntries(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x717ed28*/ System.Collections.Generic.IEnumerable<System.IO.FileInfo> FileInfos(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x717ef24*/ System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> DirectoryInfos(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x717f120*/ System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> FileSystemInfos(string directory, string expression, System.IO.EnumerationOptions options);

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x717e928*/ <>c__DisplayClass3_0();
                    /*0x717f3bc*/ bool <UserFiles>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c
                {
                    static /*0x0*/ System.IO.Enumeration.FileSystemEnumerableFactory.<> <>9;
                    static /*0x8*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__3_0;
                    static /*0x10*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__4_0;
                    static /*0x18*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__5_0;
                    static /*0x20*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<System.IO.FileInfo> <>9__6_0;
                    static /*0x28*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<System.IO.DirectoryInfo> <>9__7_0;
                    static /*0x30*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<System.IO.FileSystemInfo> <>9__8_0;

                    static /*0x717f45c*/ <>c();
                    /*0x717f4c4*/ <>c();
                    /*0x717f4cc*/ string <UserFiles>b__3_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x717f4d4*/ string <UserDirectories>b__4_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x717f4dc*/ string <UserEntries>b__5_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x717f4e4*/ System.IO.FileInfo <FileInfos>b__6_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x717f544*/ System.IO.DirectoryInfo <DirectoryInfos>b__7_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x717f5a4*/ System.IO.FileSystemInfo <FileSystemInfos>b__8_0(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass4_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x717eb24*/ <>c__DisplayClass4_0();
                    /*0x717f5ac*/ bool <UserDirectories>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x717ed20*/ <>c__DisplayClass5_0();
                    /*0x717f64c*/ bool <UserEntries>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass6_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x717ef1c*/ <>c__DisplayClass6_0();
                    /*0x717f6d0*/ bool <FileInfos>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass7_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x717f118*/ <>c__DisplayClass7_0();
                    /*0x717f770*/ bool <DirectoryInfos>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass8_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x717f314*/ <>c__DisplayClass8_0();
                    /*0x717f810*/ bool <FileSystemInfos>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerator<TResult> : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Collections.Generic.IEnumerator<TResult>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x0*/ string _originalRootDirectory;
                /*0x0*/ string _rootDirectory;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ object _lock;
                /*0x0*/ string _currentPath;
                /*0x0*/ nint _directoryHandle;
                /*0x0*/ bool _lastEntryFound;
                /*0x0*/ System.Collections.Generic.Queue<string> _pending;
                /*0x0*/ Interop.Sys.DirectoryEntry _entry;
                /*0x0*/ TResult _current;
                /*0x0*/ char[] _pathBuffer;
                /*0x0*/ byte[] _entryBuffer;

                static /*0x3907c14*/ bool IsDirectoryNotFound(Interop.ErrorInfo info);
                static /*0x3907c14*/ bool IsAccessError(Interop.ErrorInfo info);
                /*0x380d93c*/ FileSystemEnumerator(string directory, System.IO.EnumerationOptions options);
                /*0x3907c14*/ bool InternalContinueOnError(Interop.ErrorInfo info, bool ignoreNotFound);
                /*0x3907c14*/ nint CreateDirectoryHandle(string path, bool ignoreNotFound);
                /*0x380cb08*/ void CloseDirectoryHandle();
                /*0x380b128*/ bool MoveNext();
                /*0x380cb08*/ void FindNextEntry();
                /*0x3907c14*/ void FindNextEntry(byte* entryBufferPtr, int bufferLength);
                /*0x380b128*/ bool DequeueNextDirectory();
                /*0x380cdf0*/ void InternalDispose(bool disposing);
                /*0x380b2f0*/ bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                /*0x380b2f0*/ bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                /*0x3907c14*/ TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                void OnDirectoryFinished(System.ReadOnlySpan<char> directory);
                /*0x380b228*/ bool ContinueOnError(int error);
                /*0x3907c14*/ TResult get_Current();
                /*0x380b9e8*/ object System.Collections.IEnumerator.get_Current();
                /*0x380cb08*/ void DirectoryFinished();
                /*0x380cb08*/ void Reset();
                /*0x380cb08*/ void Dispose();
                /*0x380cdf0*/ void Dispose(bool disposing);
                /*0x380cb08*/ void Finalize();
            }

            class FileSystemName
            {
                static /*0x0*/ char[] s_wildcardChars;
                static /*0x8*/ char[] s_simpleWildcardChars;

                static /*0x717ffc0*/ FileSystemName();
                static /*0x717e084*/ string TranslateWin32Expression(string expression);
                static /*0x717e6ac*/ bool MatchesWin32Expression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0x717e624*/ bool MatchesSimpleExpression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0x717f894*/ bool MatchPattern(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase, bool useExtendedWildcards);
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 001D686DB504E20C792EAA07FE09224A45FF328E24A80072D04D16ABC5C2B5D2;
    static /*0x40*/ <PrivateImplementationDetails> 021022D5891F99B3B525763EB77BAEC69B107268F560721F5060FCDBD4D5AAE8;
    static /*0xea*/ <PrivateImplementationDetails> 042957A0DB5FF2D38A343AC5AE5F8635B88F10C32EB87A238B1DFB4756468476;
    static /*0xf6*/ <PrivateImplementationDetails> 07FA6E88C946B2528C09C16C2FB8E9CDA49AFFAFC601774C437FD9F2DF3ECE01;
    static /*0x12e*/ <PrivateImplementationDetails> 0C496C9AE05419BD25256D0EF4F31AFD291119F14B8BD683BF1774F91E08659D;
    static /*0x182*/ <PrivateImplementationDetails> 0E499E7743BCDFF289B85890E4DFDD635594DB16246DC094C3C19556B6C1262C;
    static /*0x1ca*/ <PrivateImplementationDetails> 0F9E3C7E66CDEF5C44FA29E65CA676C480F7A2A4A067F70107FDC292C68D38B0;
    static /*0x1d6*/ <PrivateImplementationDetails> 1199C3B39A2FA058EFF5B3829616AE81EE2B59A51D89C107A5FA4B6FEF95DD16;
    static /*0x222*/ <PrivateImplementationDetails> 125CF2084D7EEC18DC9795BE4BAA221655C0EABAB89E90A74FB0370378A60293;
    static /*0x4a2*/ <PrivateImplementationDetails> 12D518BA10F3DD1A331E65FBD4C330930C0A0BD9F50F37BE0BDF596E964B9A78;
    static /*0xcd6*/ <PrivateImplementationDetails> 195ABC1ABB69B6BD65F20ACAFA79EED2D330BF513E25C830F24B8A78D8703446;
    static /*0xd56*/ <PrivateImplementationDetails> 1A07BC77B9912D8D87E9B28E0167F53A9B09BB017B35A35F3913989C9440A60B;
    static /*0xd60*/ <PrivateImplementationDetails> 1B9CC34A0CF8DBCC350E200673FAC4124DDAD581F1FC2C16FF9A1C0154691687;
    static /*0x130a*/ <PrivateImplementationDetails> 1C4B3A80ED7AEC83916479BCE280E1258D5785D07F0EA22A5E27592ACCAE692B;
    static /*0x1472*/ <PrivateImplementationDetails> 1F38DEB3F70291588D06D3830D0D4241CE0570C9F4EE8B00F606C4753EB016E2;
    static /*0x149c*/ <PrivateImplementationDetails> 20CD2802EDA4ADAD1D749ABFE753256D8754EB845C973830A5556ECCAF1ADD6E;
    static /*0x14b8*/ <PrivateImplementationDetails> 21244F82B210125632917591768F6BF22EB6861F80C6C25A25BD26DFB580EA7B;
    static /*0x15b8*/ <PrivateImplementationDetails> 215E3E0B11A214B3198654E87B3D953AC8FB1ABC7045AF841A7C4892624BDE49;
    static /*0x15c2*/ <PrivateImplementationDetails> 2403FBEA85D0741C5727760E97EF16C9BF23294F21C0F1265A4BAF7F22202A64;
    static /*0x15ce*/ <PrivateImplementationDetails> 24CB9F17C8326D8BB8EC908716519DF7F265AE825F0DD13BB04E03A90B07D90E;
    static /*0x15de*/ <PrivateImplementationDetails> 25308BAB47481701F1E861B1EA4F2409E73ABB14E9579C26DF4ABE440A0DCF0A;
    static /*0x162a*/ <PrivateImplementationDetails> 25E3E48132FBDBE9B7C0C6C54D7C10A5DE12A105AA3E5DE2A0DC808BF245B7A5;
    static /*0x2266*/ <PrivateImplementationDetails> 2CCF4119215BDAD102DA7AD5B57E0E6CA19CC8FF5524856FC58907E824213E1F;
    static /*0x22ae*/ <PrivateImplementationDetails> 3444EB31231B2CCC1B05C7A44EBD1B2A009C1D9977A99B453F52E2F81DD6C32F;
    static /*0x22f6*/ <PrivateImplementationDetails> 3D95E4501B1964D7FCE16E3F5682A038752B462357D87343880B1E819F6163FE;
    static /*0x2306*/ <PrivateImplementationDetails> 3F62692E2AD5078353EC4471A13421A61EE493294CF59DC66626A6EF9CCCD2C4;
    static /*0x234e*/ <PrivateImplementationDetails> 42E1421FC2A5A6A33E964D7EB9603EB101818D858DDA09B2BC9B5A888C1C351C;
    static /*0x235a*/ <PrivateImplementationDetails> 44D066BAE9848B4A4B2C31F1854666526A32D0588635569423BDA1DA303C97DF;
    static /*0x2360*/ <PrivateImplementationDetails> 4623CA5867960AA898AA1F65E720CD5ECD3552542E0C6F6FB65B21D14DD1CBC2;
    static /*0x23d8*/ <PrivateImplementationDetails> 4800FBFC4566EB02D1727A4B1C949CCBC7535C216A0766564C199308631B5DD6;
    static /*0x2408*/ <PrivateImplementationDetails> 493402F3E4397B2945B16273E795816C0BDF80F76F42FCAA75F3DF2E215ABC1B;
    static /*0x3408*/ <PrivateImplementationDetails> 494C32E1A18F6E8AD8ED5FAB0A5AF07F801BE7AF3C936942B020918CE2953046;
    static /*0x34b6*/ <PrivateImplementationDetails> 4E0B9E024FA510B6F03C92D95BB204E78CDC6E3FD2EC8D35787B7BC76F0655A0;
    static /*0x3e04*/ <PrivateImplementationDetails> 508085E0DDEEA9CE48BFAE98CEC779F8D06301AE973555D37680D08190CAFA70;
    static /*0x3e30*/ <PrivateImplementationDetails> 510FDFA4743E58DD45DCDD7CB4F8509BF6294CC1D1D4958CA30A9E7604973006;
    static /*0x3e78*/ <PrivateImplementationDetails> 5292FD0A8E62FCCBE41F34EFE7575D097990A66FE23B3507971C5BF272A4362E;
    static /*0x3ea2*/ <PrivateImplementationDetails> 533B8C444F951E83EFF7305E3807B66CE0005DE0A2D0A44873C130895A3BE6AA;
    static /*0x3eb6*/ <PrivateImplementationDetails> 543172FF9822CE5240DF89FF3AD8C7FD9824F97D0EED9B1432E60345FBBDE9A9;
    static /*0x3eea*/ <PrivateImplementationDetails> 55D0BF716B334D123E0088CFB3F8E2FEA17AF5025BB527F95EEB09BA978EA329;
    static /*0x3fea*/ <PrivateImplementationDetails> 56073E3CC3FC817690CC306D0DB7EA63EBCB0801359567CA44CA3D3B9BF63854;
    static /*0x6a1a*/ <PrivateImplementationDetails> 5857EE4CE98BFABBD62B385C1098507DD0052FF3951043AAD6A1DABD495F18AA;
    static /*0x6a4e*/ <PrivateImplementationDetails> 5DF6E0E2761359D30A8275058E299FCC0381534545F55CF43E41983F5D4C9456;
    static /*0x6a6e*/ <PrivateImplementationDetails> 5EC4E50DA95A113769D73E5F7F8221A876185CEE6498ABB16FBB9F0563C15BBF;
    static /*0x6ab6*/ <PrivateImplementationDetails> 61D639BE11384EE21CDE2B40357F4F9D80A106C97C592D18A9F4CAA442CA5D31;
    static /*0x6b14*/ <PrivateImplementationDetails> 62E6F13B53D67FDD780E20D89A6E8EE503B197AC16AC3F1D2571C147FDD324C9;
    static /*0x6c14*/ <PrivateImplementationDetails> 64A0AD5A7BF0B569FABE66AF3006423DA81FF79CD282E8D781CD013B1FD7D5CE;
    static /*0x6c30*/ <PrivateImplementationDetails> 668BB69E184E0C32DC3BC488001C506C87EE5A95C7E7B6B87D24C3A6DC779956;
    static /*0x7430*/ <PrivateImplementationDetails> 6708B572BDBE5D5E79701DBB9744AF74B50FED7608218F2D7BF1B5D87E5A53ED;
    static /*0x7460*/ <PrivateImplementationDetails> 67856A16DB0550FDAB4D1A9B208B0C155C4679CA116BF867B74ED2A0AA4D2955;
    static /*0x76e8*/ <PrivateImplementationDetails> 6DC92D3617F0357376502FBA4CDD465B5423818DABE8B2CA1A06E1351F2F1C85;
    static /*0x7730*/ <PrivateImplementationDetails> 71F7F6B226CBC11C8B26D506869FAE022928427389882579DB316F36FF34A096;
    static /*0x7804*/ <PrivateImplementationDetails> 71F993C1E0FB950AAACBC0B9A2B0975B213EF14C8AA693F413336D46E9EAB8E9;
    static /*0x7834*/ <PrivateImplementationDetails> 73F5D95C401726B2C92EC96A696BA15F0E5A5C6DD9AC6BEB3736A81772A11531;
    static /*0x8034*/ <PrivateImplementationDetails> 74BCD6ED20AF2231F2BB1CDE814C5F4FF48E54BAC46029EEF90DDF4A208E2B20;
    static /*0x8154*/ <PrivateImplementationDetails> 74EF7306E7452D6859B6463CE496B8DF30925F69E1B2969E1F3F34BBC9C6AF04;
    static /*0x8254*/ <PrivateImplementationDetails> 78AD7906208AA1E531D0C1100062DE3D252210B1E4214061294A0BB7C94762B8;
    static /*0x82cc*/ <PrivateImplementationDetails> 7BEC6AD454781FDCD8D475B3418629CBABB3BF9CA66FA80009D608A1A60D0696;
    static /*0x888c*/ <PrivateImplementationDetails> 7F777906B0704EB248888E491577584D5BEBE71B375BD595A06444390B471915;
    static /*0x88d4*/ <PrivateImplementationDetails> 801494072CDD59E61F9AA9345A80D045378705DFDCE94902C22EAEAE049BE780;
    static /*0x89d4*/ <PrivateImplementationDetails> 805796429D6E812E01657F32029A8103B7C27B5203C2EFC9C0001E3EBAD7F24C;
    static /*0x89f0*/ long 819B40F8CF7DC49B4275955A17C10239F1BBBB3BF96E26E25ED844B96B645D7F;
    static /*0x89f8*/ <PrivateImplementationDetails> 8259E3EBA4D41CA02AE5322BBD280034A9C9860D9CD0D2038139FC9EBE6B6C77;
    static /*0x8a40*/ long 82B100804CE219CD73E155C7C6457FCF04EA539DE5B19F4736E800098714EB21;
    static /*0x8a48*/ <PrivateImplementationDetails> 861FD05B0EAD3D0AA9418B140CC37846BBC5F195214D90CEF42919D1E36EED10;
    static /*0x8a90*/ <PrivateImplementationDetails> 86BDA34D2165AC08F2DE4918B302E44205CDEA674FCA7F2C7F56D4F12D8B0C73;
    static /*0x8e78*/ long 8BFD94DEAAC0F168DC8B50A00AC120A113B550B68FEF344F807D503D1A6E5DED;
    static /*0x8e80*/ <PrivateImplementationDetails> 8C7DD76CF6FAC1893ED057E9FC91B995F9379B69E0796CAB7DE38ADAE3D2C568;
    static /*0x8eb0*/ <PrivateImplementationDetails> 8CCE27079B32C13BB310169A6AD26AE419CDC98B7E2EFD3CC9997257F4BC1DEF;
    static /*0x9531*/ <PrivateImplementationDetails> 9086502742CE7F0595B57A4E5B32901FF4CF97959B92F7E91A435E4765AC1115;
    static /*0xac71*/ <PrivateImplementationDetails> 93B42898102ACB2421875C45676880B8A07390D8DF0E1EE85C5D1AA26964B0C6;
    static /*0xadc1*/ <PrivateImplementationDetails> 93F28AF88A06482BE13F8D0354B6A7676DDAED573EA3938C50F6E53E6D6BB0B6;
    static /*0xadf5*/ <PrivateImplementationDetails> 95BDE712712F10D07813AE3DEEA40D1F38E3FCF1A92CC435F17A326CC22242EB;
    static /*0xaea3*/ <PrivateImplementationDetails> 964889A5283FD0A3DFC8AE256721E6F67B8212FD6841AB1C821DE3134DE79B07;
    static /*0xafa9*/ <PrivateImplementationDetails> 96E3FDE919EC36694EFBEC22FEF80F84EE640CC5E46CED07C3E65AC04607C7D6;
    static /*0xafb8*/ <PrivateImplementationDetails> 9960C7FC60CDD325C8A2A00995BE7064EAC3F6295C6A5C4E797D2281846131E4;
    static /*0xafdc*/ <PrivateImplementationDetails> 99E66DACA3EFF94776AF1258E0E5B2F4DF2900E4EA32351B0DF37A87F2426B1F;
    static /*0xb008*/ <PrivateImplementationDetails> A252A93D042C5E2453990C2829A425C6DD749CCDCDF13DB58C11BBC78E8D3CE9;
    static /*0xb050*/ <PrivateImplementationDetails> A2DFDF9C2CED8BB1C0B9B06064345ACC9C22DFE5FEC9976FF061F0994451519B;
    static /*0xb0c8*/ <PrivateImplementationDetails> A2EC7CB9B0FE89F9A9BEA547D773225AFE6E4535DF28325A0D6CD7A5E2D20376;
    static /*0xb114*/ <PrivateImplementationDetails> A30E1152CFB528AE968FAC58E83BBEB3611BFDE2E6CF60B4FA9535A7D0A9B8EA;
    static /*0xb15c*/ <PrivateImplementationDetails> A516EECB41051151F0183A8B0B6F6693C43F7D9E1815F85CAAAB18E00A5269A2;
    static /*0xb184*/ <PrivateImplementationDetails> AAF4528994DD7C464F43C131F6CD44DF41ACC18462C95877252FFC7EAC0164EF;
    static /*0xb1cc*/ <PrivateImplementationDetails> B215DD70A77190680641703C6DF73729B4583E285AF8B51ACF9086655FB2D0F3;
    static /*0xc1cc*/ <PrivateImplementationDetails> B21802DE889E5F4F5344C8E0D366F59B68F886F88EFE45EA5CE01534A3F5C0E5;
    static /*0xc200*/ <PrivateImplementationDetails> B55F94CD2F415D0279D7A1AF2265C4D9A90CE47F8C900D5D09AD088796210838;
    static /*0xca80*/ <PrivateImplementationDetails> BABD01C34E7E65E57E4C431281E782B4101CE0644A8090AD6E501F1C6CF2C9DF;
    static /*0xcaa4*/ <PrivateImplementationDetails> BB425A9B43E10C921902A25D07A4317DEFF9F606A788672E1B21633C143407F0;
    static /*0xcab4*/ <PrivateImplementationDetails> C250CAD28060A4EB63B4C4A643DDA196CCD35FD2FC67FB749ADF4BAC6D62E1A0;
    static /*0xcad8*/ <PrivateImplementationDetails> C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2;
    static /*0xcbd8*/ <PrivateImplementationDetails> C5733A1245383FBF067B4A9BDB41E3FB8E3A6BDEF37B3D5418F389422875783F;
    static /*0xcc20*/ <PrivateImplementationDetails> C8EC70AC5A448C3A45CF1DFCC1375BE4E80DC6793E97D5E89BD97A0DC232B2E3;
    static /*0xd020*/ <PrivateImplementationDetails> C95D810E738DB5F591EE691CE884EED2F110D9F82B1F7A8BE6ED257FDF4CDBEB;
    static /*0xd030*/ <PrivateImplementationDetails> C9830DF6956357ACE51CE1F82298578B36EB45A0CFDB8AEC5B9FDA7DB17E8063;
    static /*0xd0b2*/ <PrivateImplementationDetails> CAF8A46B3A07E26F84FE849B57A877051A0D06194B1C057985446B64BCC6E016;
    static /*0xd0fa*/ <PrivateImplementationDetails> CAFFFC9D15E4037EE8FBDB1A45DFE456F0936BDC7310F1882EAF14B706A76658;
    static /*0xd11e*/ <PrivateImplementationDetails> CE11D6DEAFFC6D6EF6030E30E7444C933E6261F32AA737064EF0446C219ECE22;
    static /*0xe11e*/ <PrivateImplementationDetails> D1A99909A2923269BB67E72C1AED693F74961BDA58360FCC133007740CEBF5F1;
    static /*0xe166*/ <PrivateImplementationDetails> D3B16F8D71CB719B941527D5A1ADA7ED83F4EB967FEE117DDA2FE4021E1D283F;
    static /*0xe16c*/ <PrivateImplementationDetails> D503954AE2C3616EA32CEB0D66F5B2E119D03CE722773E5D7E1A8BC8F1803631;
    static /*0xe1b4*/ <PrivateImplementationDetails> D6691EE5A533DE7E0859066942261B24D0C836D7EE016D2251377BFEE40FEA15;
    static /*0xe260*/ <PrivateImplementationDetails> D870074914025E855AA5985A2D6778F1E277036BF9C9F03DEC61F3C496FEC35C;
    static /*0xea60*/ <PrivateImplementationDetails> D896D464C3726A21162F271ACB711464AD07EA9C9CE78E0297FD0DE934471FA6;
    static /*0xea6c*/ <PrivateImplementationDetails> D8A29F3D197FBB54CF9F4B105AFBA6B1257ADF6449F0184F843380AAAA24639C;
    static /*0xeab4*/ <PrivateImplementationDetails> DCDCF594464B904F763D4CE53B1DBE08A47E551AE86FD5D61F63FD0C3313FDC3;
    static /*0xeafc*/ <PrivateImplementationDetails> DCE88EE5233B9D0FD0D7A6222C82BC3AEE83B15E9992F939B17AB40530DB555C;
    static /*0xf42a*/ <PrivateImplementationDetails> DD471F12FFA94CC557A02A91C2CBB95F551AB28C8BBF297B2F953B8886BCCF6D;
    static /*0xf4c2*/ <PrivateImplementationDetails> DF29A050CD2EBD9DFDC783DB1CC74D3D716DAEC1630A337EE31B9E2E03D34D2D;
    static /*0xf50a*/ <PrivateImplementationDetails> E148B2057CF0C1595155635E761FB66AAE634C40D8FABC4CE79A2DB8886525D4;
    static /*0x1050a*/ <PrivateImplementationDetails> E2C673A3A737B04369A63F1FB1A30F6E742B066E2CCCD9B1838793CBB5590598;
    static /*0x10530*/ <PrivateImplementationDetails> E32C465157D21F39B3DBF186A98FB02185C63B0260B47247A7A5FDF2B061EAA8;
    static /*0x1053c*/ <PrivateImplementationDetails> E5F4F6214036DF103321A8A0CE30C2EF935694B4199D52BC538E7EF3F045CB92;
    static /*0x10554*/ <PrivateImplementationDetails> E768EDCAE10BAB68BB5DF102FDBB8CF4F31B9D60159B44DA3F33ABC36388308B;
    static /*0x10594*/ <PrivateImplementationDetails> E8588351183F6F6A7DAD54DC28357628F3C4D4B358AB92A18AE7D08B0D9B0092;
    static /*0x1098e*/ <PrivateImplementationDetails> EBE07C3718876777F609CD22058F4C3A6CCCC695F5BDE90998DC1E12E0CBE63D;
    static /*0x1099a*/ <PrivateImplementationDetails> EE415D5C3ECC6C8C19F71BCD4E03847F5A15931374A7F5BF88C24B722F04B8FE;
    static /*0x109ba*/ <PrivateImplementationDetails> EF39C5A882F9477B2A250BA257247825CEB07FC53C3C984385F2C2E5F8222431;
    static /*0x10aba*/ <PrivateImplementationDetails> EF82B163CA8252A793A6E73F57775D843C9A21F65586926EB11893FA8BB603E9;
    static /*0x10aca*/ <PrivateImplementationDetails> F0CF66F9B123DCEBB39C38C5D8E4821D4E94DB593889C506BCA0827036F1B7EB;
    static /*0x10bba*/ <PrivateImplementationDetails> F1945CD6C19E56B3C1C78943EF5EC18116907A4CA1EFC40A57D48AB1DB7ADFC5;
    static /*0x10bbd*/ <PrivateImplementationDetails> F2830F044682E33B39018B5912634835B641562914E192CA66C654F5E4492FA8;
    static /*0x10cbd*/ <PrivateImplementationDetails> F4BD8144313C3B67E191C6F3CD8B00540FF1809837C5BCA5C2FDA0D518681563;
    static /*0x10d05*/ <PrivateImplementationDetails> F7D381AF73D85950E0B064CF1AA8F14938A1F38084B46CE36AAEFE81BEF739F3;
    static /*0x10dd9*/ <PrivateImplementationDetails> FADB218011E7702BB9575D0C32A685DA10B5C72EB809BD9A955DB1C76E4D8315;
    static /*0x10e0d*/ <PrivateImplementationDetails> FB2089AF82E09593374B65EC2440779FDCF5DD6DA07D26E57AF6790667B937CD;
    static /*0x112c5*/ <PrivateImplementationDetails> FD68700E95459C5E7A49C5830F8BD0A9BA4BD171252663D8066B09E7768C5C5D;
    static /*0x113b5*/ <PrivateImplementationDetails> FEC387BA57A54BB6066E4CA8A4F9C0FF9C36B9CBD6600C3683F6FB1BDB5077EB;

    static /*0x71800ac*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=3
    {
    }

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=10
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=15
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=28
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=38
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=42
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=52
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=84
    {
    }

    struct __StaticArrayInitTypeSize=94
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=130
    {
    }

    struct __StaticArrayInitTypeSize=152
    {
    }

    struct __StaticArrayInitTypeSize=170
    {
    }

    struct __StaticArrayInitTypeSize=172
    {
    }

    struct __StaticArrayInitTypeSize=174
    {
    }

    struct __StaticArrayInitTypeSize=212
    {
    }

    struct __StaticArrayInitTypeSize=240
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=262
    {
    }

    struct __StaticArrayInitTypeSize=288
    {
    }

    struct __StaticArrayInitTypeSize=336
    {
    }

    struct __StaticArrayInitTypeSize=360
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=648
    {
    }

    struct __StaticArrayInitTypeSize=998
    {
    }

    struct __StaticArrayInitTypeSize=1018
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1208
    {
    }

    struct __StaticArrayInitTypeSize=1450
    {
    }

    struct __StaticArrayInitTypeSize=1472
    {
    }

    struct __StaticArrayInitTypeSize=1665
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=2100
    {
    }

    struct __StaticArrayInitTypeSize=2176
    {
    }

    struct __StaticArrayInitTypeSize=2350
    {
    }

    struct __StaticArrayInitTypeSize=2382
    {
    }

    struct __StaticArrayInitTypeSize=3132
    {
    }

    struct __StaticArrayInitTypeSize=4096
    {
    }

    struct __StaticArrayInitTypeSize=5952
    {
    }

    struct __StaticArrayInitTypeSize=10800
    {
    }
}

namespace Unity
{
    class ThrowStub : System.ObjectDisposedException
    {
        static /*0x7180128*/ void ThrowNotSupportedException();
    }
}

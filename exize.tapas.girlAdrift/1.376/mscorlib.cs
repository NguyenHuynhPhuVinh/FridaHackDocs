class <Module>
{
}

class Interop
{
    static /*0x11e7474*/ System.Exception GetExceptionForIoErrno(Interop.ErrorInfo errorInfo, string path, bool isDirectory);
    static /*0x11e79dc*/ System.Exception GetIOException(Interop.ErrorInfo errorInfo);
    static /*0x11e7b38*/ void GetRandomBytes(byte* buffer, int length);

    enum Error
    {
        SUCCESS = 0,
        E2BIG = 65537,
        EACCES = 65538,
        EADDRINUSE = 65539,
        EADDRNOTAVAIL = 65540,
        EAFNOSUPPORT = 65541,
        EAGAIN = 65542,
        EALREADY = 65543,
        EBADF = 65544,
        EBADMSG = 65545,
        EBUSY = 65546,
        ECANCELED = 65547,
        ECHILD = 65548,
        ECONNABORTED = 65549,
        ECONNREFUSED = 65550,
        ECONNRESET = 65551,
        EDEADLK = 65552,
        EDESTADDRREQ = 65553,
        EDOM = 65554,
        EDQUOT = 65555,
        EEXIST = 65556,
        EFAULT = 65557,
        EFBIG = 65558,
        EHOSTUNREACH = 65559,
        EIDRM = 65560,
        EILSEQ = 65561,
        EINPROGRESS = 65562,
        EINTR = 65563,
        EINVAL = 65564,
        EIO = 65565,
        EISCONN = 65566,
        EISDIR = 65567,
        ELOOP = 65568,
        EMFILE = 65569,
        EMLINK = 65570,
        EMSGSIZE = 65571,
        EMULTIHOP = 65572,
        ENAMETOOLONG = 65573,
        ENETDOWN = 65574,
        ENETRESET = 65575,
        ENETUNREACH = 65576,
        ENFILE = 65577,
        ENOBUFS = 65578,
        ENODEV = 65580,
        ENOENT = 65581,
        ENOEXEC = 65582,
        ENOLCK = 65583,
        ENOLINK = 65584,
        ENOMEM = 65585,
        ENOMSG = 65586,
        ENOPROTOOPT = 65587,
        ENOSPC = 65588,
        ENOSYS = 65591,
        ENOTCONN = 65592,
        ENOTDIR = 65593,
        ENOTEMPTY = 65594,
        ENOTSOCK = 65596,
        ENOTSUP = 65597,
        ENOTTY = 65598,
        ENXIO = 65599,
        EOVERFLOW = 65600,
        EPERM = 65602,
        EPIPE = 65603,
        EPROTO = 65604,
        EPROTONOSUPPORT = 65605,
        EPROTOTYPE = 65606,
        ERANGE = 65607,
        EROFS = 65608,
        ESPIPE = 65609,
        ESRCH = 65610,
        ESTALE = 65611,
        ETIMEDOUT = 65613,
        ETXTBSY = 65614,
        EXDEV = 65615,
        ESOCKTNOSUPPORT = 65630,
        EPFNOSUPPORT = 65632,
        ESHUTDOWN = 65644,
        EHOSTDOWN = 65648,
        ENODATA = 65649,
        EOPNOTSUPP = 65597,
        EWOULDBLOCK = 65542,
    }

    struct ErrorInfo
    {
        /*0x10*/ Interop.Error _error;
        /*0x14*/ int _rawErrno;

        /*0x11e7ba0*/ ErrorInfo(int errno);
        /*0x11e7c0c*/ ErrorInfo(Interop.Error error);
        /*0x11e7c18*/ Interop.Error get_Error();
        /*0x11e7a68*/ int get_RawErrno();
        /*0x11e7ad4*/ string GetErrorMessage();
        /*0x11e7d98*/ string ToString();
    }

    class Sys
    {
        static /*0x0*/ bool CanSetHiddenFlag;

        static /*0x11e856c*/ Sys();
        static /*0x11e7e6c*/ Interop.ErrorInfo GetLastErrorInfo();
        static /*0x11e7c9c*/ string StrError(int platformErrno);
        static /*0x11e7c08*/ Interop.Error ConvertErrorPlatformToPal(int platformErrno);
        static /*0x11e7c20*/ int ConvertErrorPalToPlatform(Interop.Error error);
        static /*0x11e7ed4*/ byte* StrErrorR(int platformErrno, byte* buffer, int bufferSize);
        static /*0x11e7b9c*/ void GetNonCryptographicallySecureRandomBytes(byte* buffer, int length);
        static /*0x11e7ed8*/ nint OpenDir(string path);
        static /*0x11e7f0c*/ int GetReadDirRBufferSize();
        static /*0x11e7f10*/ int ReadDirR(nint dir, byte* buffer, int bufferSize, ref Interop.Sys.DirectoryEntry outputEntry);
        static /*0x11e7f14*/ int CloseDir(nint dir);
        static /*0x11e7f30*/ int ReadLink(string path, byte[] buffer, int bufferSize);
        static /*0x11e7f7c*/ string ReadLink(string path);
        static /*0x11e8194*/ int Stat(string path, ref Interop.Sys.FileStatus output);
        static /*0x11e81d0*/ uint GetEGid();
        static /*0x11e81d4*/ uint GetEUid();
        static /*0x11e81d8*/ int LChflagsCanSetHiddenFlag();
        static /*0x11e81dc*/ int MkDir(string path, int mode);
        static /*0x11e8218*/ int RmDir(string path);
        static /*0x11e824c*/ int Stat(ref byte path, ref Interop.Sys.FileStatus output);
        static /*0x11e8268*/ int Stat(System.ReadOnlySpan<char> path, ref Interop.Sys.FileStatus output);
        static /*0x11e83c0*/ int LStat(ref byte path, ref Interop.Sys.FileStatus output);
        static /*0x11e83dc*/ int LStat(System.ReadOnlySpan<char> path, ref Interop.Sys.FileStatus output);
        static /*0x11e8534*/ int Unlink(string pathname);
        static /*0x11e8568*/ int DoubleToString(double value, byte* format, byte* buffer, int bufferLength);

        enum NodeType
        {
            DT_UNKNOWN = 0,
            DT_FIFO = 1,
            DT_CHR = 2,
            DT_DIR = 4,
            DT_BLK = 6,
            DT_REG = 8,
            DT_LNK = 10,
            DT_SOCK = 12,
            DT_WHT = 14,
        }

        struct DirectoryEntry
        {
            /*0x10*/ byte* Name;
            /*0x18*/ int NameLength;
            /*0x1c*/ Interop.Sys.NodeType InodeType;

            /*0x11e85c0*/ System.ReadOnlySpan<char> GetName(System.Span<char> buffer);
        }

        struct FileStatus
        {
            /*0x10*/ Interop.Sys.FileStatusFlags Flags;
            /*0x14*/ int Mode;
            /*0x18*/ uint Uid;
            /*0x1c*/ uint Gid;
            /*0x20*/ long Size;
            /*0x28*/ long ATime;
            /*0x30*/ long ATimeNsec;
            /*0x38*/ long MTime;
            /*0x40*/ long MTimeNsec;
            /*0x48*/ long CTime;
            /*0x50*/ long CTimeNsec;
            /*0x58*/ long BirthTime;
            /*0x60*/ long BirthTimeNsec;
            /*0x68*/ long Dev;
            /*0x70*/ long Ino;
            /*0x78*/ uint UserFlags;
        }

        enum FileStatusFlags
        {
            None = 0,
            HasBirthTime = 1,
        }

        enum Permissions
        {
            Mask = 511,
            S_IRWXU = 448,
            S_IRUSR = 256,
            S_IWUSR = 128,
            S_IXUSR = 64,
            S_IRWXG = 56,
            S_IRGRP = 32,
            S_IWGRP = 16,
            S_IXGRP = 8,
            S_IRWXO = 7,
            S_IROTH = 4,
            S_IWOTH = 2,
            S_IXOTH = 1,
        }
    }
}

class InteropErrorExtensions
{
    static /*0x11e8724*/ Interop.ErrorInfo Info(Interop.Error error);
}

class Locale
{
    static /*0x11e872c*/ string GetText(string msg);
    static /*0x11e8730*/ string GetText(string fmt, object[] args);
}

class SR
{
    static /*0x11e8738*/ string GetString(string name, object[] args);
    static /*0x11e87a8*/ string GetString(System.Globalization.CultureInfo culture, string name, object[] args);
    static /*0x11e87b0*/ string GetString(string name);
    static /*0x11e796c*/ string Format(string resourceFormat, object p1);
    static /*0x11e87b4*/ string Format(string resourceFormat, object p1, object p2);
    static /*0x11e882c*/ string Format(string resourceFormat, object p1, object p2, object p3);
    static /*0x11e88b4*/ string GetResourceString(string str);
}

namespace Mono
{
    enum CertificateImportFlags
    {
        None = 0,
        DisableNativeBackend = 1,
        DisableAutomaticFallback = 2,
    }

    class DependencyInjector
    {
        static /*0x0*/ object locker;
        static /*0x8*/ Mono.ISystemDependencyProvider systemDependency;

        static /*0x11e8db0*/ DependencyInjector();
        static /*0x11e88b8*/ Mono.ISystemDependencyProvider get_SystemProvider();
        static /*0x11e8c08*/ void Register(Mono.ISystemDependencyProvider provider);
        static /*0x11e8abc*/ Mono.ISystemDependencyProvider ReflectionLoad();
    }

    interface ISystemCertificateProvider
    {
        System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] data, Mono.CertificateImportFlags importFlags);
        System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] data, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, Mono.CertificateImportFlags importFlags);
        System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.CertificateImportFlags importFlags);
    }

    interface ISystemDependencyProvider
    {
        Mono.ISystemCertificateProvider get_CertificateProvider();
    }

    class Runtime
    {
        static /*0x0*/ object dump;

        static /*0x11e8e28*/ Runtime();
    }

    struct RuntimeClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.MonoClass* value;

        static /*0x11e8ffc*/ nint GetTypeFromClass(Mono.RuntimeStructs.MonoClass* klass);
        /*0x11e8ea0*/ RuntimeClassHandle(Mono.RuntimeStructs.MonoClass* value);
        /*0x11e8ea8*/ RuntimeClassHandle(nint ptr);
        /*0x11e8ec8*/ Mono.RuntimeStructs.MonoClass* get_Value();
        /*0x11e8ed0*/ bool Equals(object obj);
        /*0x11e8fd4*/ int GetHashCode();
        /*0x11e9000*/ System.RuntimeTypeHandle GetTypeHandle();
    }

    struct RuntimeRemoteClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.RemoteClass* value;

        /*0x11e9008*/ Mono.RuntimeClassHandle get_ProxyClass();
    }

    struct RuntimeGenericParamInfoHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GenericParamInfo* value;

        /*0x11e9024*/ RuntimeGenericParamInfoHandle(nint ptr);
        /*0x11e9044*/ System.Type[] get_Constraints();
        /*0x11e9174*/ System.Reflection.GenericParameterAttributes get_Attributes();
        /*0x11e9048*/ System.Type[] GetConstraints();
        /*0x11e9190*/ int GetConstraintsCount();
    }

    struct RuntimeEventHandle
    {
        /*0x10*/ nint value;

        /*0x11e91d0*/ RuntimeEventHandle(nint v);
        /*0x11e91d8*/ nint get_Value();
        /*0x11e91e0*/ bool Equals(object obj);
        /*0x11e92ec*/ int GetHashCode();
    }

    struct RuntimePropertyHandle
    {
        /*0x10*/ nint value;

        /*0x11e92f4*/ RuntimePropertyHandle(nint v);
        /*0x11e92fc*/ nint get_Value();
        /*0x11e9304*/ bool Equals(object obj);
        /*0x11e9410*/ int GetHashCode();
    }

    struct RuntimeGPtrArrayHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GPtrArray* value;

        static /*0x11e94c4*/ void GPtrArrayFree(Mono.RuntimeStructs.GPtrArray* value);
        static /*0x11e94c8*/ void DestroyAndFree(ref Mono.RuntimeGPtrArrayHandle h);
        /*0x11e9418*/ RuntimeGPtrArrayHandle(nint ptr);
        /*0x11e9438*/ int get_Length();
        /*0x11e9454*/ nint get_Item(int i);
        /*0x11e9458*/ nint Lookup(int i);
    }

    class RuntimeMarshal
    {
        static /*0x11e94e4*/ string PtrToUtf8String(nint ptr);
        static /*0x11e95c8*/ Mono.SafeStringMarshal MarshalString(string str);
        static /*0x11e9678*/ int DecodeBlobSize(nint in_ptr, ref nint out_ptr);
        static /*0x11e96f8*/ byte[] DecodeBlobArray(nint ptr);
        static /*0x11e97b0*/ int AsciHexDigitValue(int c);
        static /*0x11e97dc*/ void FreeAssemblyName(ref Mono.MonoAssemblyName name, bool freeStruct);
    }

    class RuntimeStructs
    {
        struct RemoteClass
        {
            /*0x10*/ nint default_vtable;
            /*0x18*/ nint xdomain_vtable;
            /*0x20*/ Mono.RuntimeStructs.MonoClass* proxy_class;
            /*0x28*/ nint proxy_class_name;
            /*0x30*/ uint interface_count;
        }

        struct MonoClass
        {
        }

        struct GenericParamInfo
        {
            /*0x10*/ Mono.RuntimeStructs.MonoClass* pklass;
            /*0x18*/ nint name;
            /*0x20*/ ushort flags;
            /*0x24*/ uint token;
            /*0x28*/ Mono.RuntimeStructs.MonoClass** constraints;
        }

        struct GPtrArray
        {
            /*0x10*/ nint* data;
            /*0x18*/ int len;
        }
    }

    struct MonoAssemblyName
    {
        /*0x10*/ nint name;
        /*0x18*/ nint culture;
        /*0x20*/ nint hash_value;
        /*0x28*/ nint public_key;
        /*0x30*/ Mono.MonoAssemblyName.<public_key_token> public_key_token;
        /*0x44*/ uint hash_alg;
        /*0x48*/ uint hash_len;
        /*0x4c*/ uint flags;
        /*0x50*/ ushort major;
        /*0x52*/ ushort minor;
        /*0x54*/ ushort build;
        /*0x56*/ ushort revision;
        /*0x58*/ ushort arch;

        struct <public_key_token>e__FixedBuffer
        {
            /*0x10*/ byte FixedElementField;
        }
    }

    struct ValueTuple
    {
    }

    struct ValueTuple<T1>
    {
        /*0x0*/ T1 Item1;
    }

    struct ValueTuple<T1, T2>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
    }

    struct ValueTuple<T1, T2, T3>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
    }

    struct ValueTuple<T1, T2, T3, T4>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
    }

    struct ValueTuple<T1, T2, T3, T4, T5>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
    }

    struct SafeGPtrArrayHandle : System.IDisposable
    {
        /*0x10*/ Mono.RuntimeGPtrArrayHandle handle;

        /*0x11e97e4*/ SafeGPtrArrayHandle(nint ptr);
        /*0x11e9804*/ void Dispose();
        /*0x11e9820*/ int get_Length();
        /*0x11e983c*/ nint get_Item(int i);
    }

    struct SafeStringMarshal : System.IDisposable
    {
        /*0x10*/ string str;
        /*0x18*/ nint marshaled_string;

        static /*0x11e9840*/ nint StringToUtf8_icall(ref string str);
        static /*0x11e9844*/ nint StringToUtf8(string str);
        static /*0x11e985c*/ void GFree(nint ptr);
        /*0x11e9618*/ SafeStringMarshal(string str);
        /*0x11e9860*/ nint get_Value();
        /*0x11e98e0*/ void Dispose();
    }

    namespace Xml
    {
        class SecurityParser : Mono.Xml.SmallXmlParser, Mono.Xml.SmallXmlParser.IContentHandler
        {
            /*0x68*/ System.Security.SecurityElement root;
            /*0x70*/ System.Security.SecurityElement current;
            /*0x78*/ System.Collections.Stack stack;

            /*0x11e9954*/ SecurityParser();
            /*0x11e9ad4*/ void LoadXml(string xml);
            /*0x11e9d28*/ System.Security.SecurityElement ToXml();
            /*0x11e9d30*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
            /*0x11e9d34*/ void OnProcessingInstruction(string name, string text);
            /*0x11e9d38*/ void OnIgnorableWhitespace(string s);
            /*0x11e9d3c*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
            /*0x11e9fb8*/ void OnEndElement(string name);
            /*0x11ea040*/ void OnChars(string ch);
            /*0x11ea0c0*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
        }

        class SmallXmlParser
        {
            /*0x10*/ Mono.Xml.SmallXmlParser.IContentHandler handler;
            /*0x18*/ System.IO.TextReader reader;
            /*0x20*/ System.Collections.Stack elementNames;
            /*0x28*/ System.Collections.Stack xmlSpaces;
            /*0x30*/ string xmlSpace;
            /*0x38*/ System.Text.StringBuilder buffer;
            /*0x40*/ char[] nameBuffer;
            /*0x48*/ bool isWhitespace;
            /*0x50*/ Mono.Xml.SmallXmlParser.AttrListImpl attributes;
            /*0x58*/ int line;
            /*0x5c*/ int column;
            /*0x60*/ bool resetColumn;

            /*0x11e99bc*/ SmallXmlParser();
            /*0x11ea164*/ System.Exception Error(string msg);
            /*0x11ea2a8*/ System.Exception UnexpectedEndError();
            /*0x11ea394*/ bool IsNameChar(char c, bool start);
            /*0x11ea490*/ bool IsWhitespace(int c);
            /*0x11ea4c0*/ void SkipWhitespaces();
            /*0x11ea574*/ void HandleWhitespaces();
            /*0x11ea4c8*/ void SkipWhitespaces(bool expected);
            /*0x11ea69c*/ int Peek();
            /*0x11ea634*/ int Read();
            /*0x11ea6bc*/ void Expect(int c);
            /*0x11ea77c*/ string ReadUntil(char until, bool handleReferences);
            /*0x11eaa20*/ string ReadName();
            /*0x11e9b60*/ void Parse(System.IO.TextReader input, Mono.Xml.SmallXmlParser.IContentHandler handler);
            /*0x11eb3c0*/ void Cleanup();
            /*0x11eabc4*/ void ReadContent();
            /*0x11eb288*/ void HandleBufferedContent();
            /*0x11eb7c4*/ void ReadCharacters();
            /*0x11ea858*/ void ReadReference();
            /*0x11eb84c*/ int ReadCharacterReference();
            /*0x11eb660*/ void ReadAttribute(Mono.Xml.SmallXmlParser.AttrListImpl a);
            /*0x11eb4d8*/ void ReadCDATASection();
            /*0x11eb5d8*/ void ReadComment();

            interface IContentHandler
            {
                void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                void OnEndParsing(Mono.Xml.SmallXmlParser parser);
                void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                void OnEndElement(string name);
                void OnProcessingInstruction(string name, string text);
                void OnChars(string text);
                void OnIgnorableWhitespace(string text);
            }

            interface IAttrList
            {
                int get_Length();
                string GetName(int i);
                string GetValue(int i);
                string GetValue(string name);
                string[] get_Names();
                string[] get_Values();
            }

            class AttrListImpl : Mono.Xml.SmallXmlParser.IAttrList
            {
                /*0x10*/ System.Collections.Generic.List<string> attrNames;
                /*0x18*/ System.Collections.Generic.List<string> attrValues;

                /*0x11ea0c4*/ AttrListImpl();
                /*0x11eba98*/ int get_Length();
                /*0x11ebae0*/ string GetName(int i);
                /*0x11ebb38*/ string GetValue(int i);
                /*0x11ebb90*/ string GetValue(string name);
                /*0x11ebc50*/ string[] get_Names();
                /*0x11ebca0*/ string[] get_Values();
                /*0x11eb43c*/ void Clear();
                /*0x11eb984*/ void Add(string name, string value);
            }
        }

        class SmallXmlParserException : System.SystemException
        {
            /*0x8c*/ int line;
            /*0x90*/ int column;

            /*0x11ea1dc*/ SmallXmlParserException(string msg, int line, int column);
        }
    }

    namespace Interop
    {
        class MonoPInvokeCallbackAttribute : System.Attribute
        {
            /*0x11ebcf0*/ MonoPInvokeCallbackAttribute(System.Type t);
        }
    }

    namespace Globalization
    {
        namespace Unicode
        {
            class CodePointIndexer
            {
                /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer.TableRange[] ranges;
                /*0x18*/ int TotalCount;
                /*0x1c*/ int defaultIndex;
                /*0x20*/ int defaultCP;

                /*0x11ebcf8*/ CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP);
                /*0x11ebe64*/ int ToIndex(int cp);

                struct TableRange
                {
                    /*0x10*/ int Start;
                    /*0x14*/ int End;
                    /*0x18*/ int Count;
                    /*0x1c*/ int IndexStart;
                    /*0x20*/ int IndexEnd;

                    /*0x11ebe4c*/ TableRange(int start, int end, int indexStart);
                }
            }

            class TailoringInfo
            {
                /*0x10*/ int LCID;
                /*0x14*/ int TailoringIndex;
                /*0x18*/ int TailoringCount;
                /*0x1c*/ bool FrenchSort;

                /*0x11ebee8*/ TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort);
            }

            class Contraction
            {
                /*0x10*/ int Index;
                /*0x18*/ char[] Source;
                /*0x20*/ string Replacement;
                /*0x28*/ byte[] SortKey;

                /*0x11ebf2c*/ Contraction(int index, char[] source, string replacement, byte[] sortkey);
            }

            class ContractionComparer : System.Collections.Generic.IComparer<Mono.Globalization.Unicode.Contraction>
            {
                static /*0x0*/ Mono.Globalization.Unicode.ContractionComparer Instance;

                static /*0x11ec00c*/ ContractionComparer();
                /*0x11ec004*/ ContractionComparer();
                /*0x11ebf70*/ int Compare(Mono.Globalization.Unicode.Contraction c1, Mono.Globalization.Unicode.Contraction c2);
            }

            class Level2Map
            {
                /*0x10*/ byte Source;
                /*0x11*/ byte Replace;

                /*0x11ec070*/ Level2Map(byte source, byte replace);
            }

            class MSCompatUnicodeTable
            {
                static /*0x0*/ int MaxExpansionLength;
                static /*0x8*/ byte* ignorableFlags;
                static /*0x10*/ byte* categories;
                static /*0x18*/ byte* level1;
                static /*0x20*/ byte* level2;
                static /*0x28*/ byte* level3;
                static /*0x30*/ byte* cjkCHScategory;
                static /*0x38*/ byte* cjkCHTcategory;
                static /*0x40*/ byte* cjkJAcategory;
                static /*0x48*/ byte* cjkKOcategory;
                static /*0x50*/ byte* cjkCHSlv1;
                static /*0x58*/ byte* cjkCHTlv1;
                static /*0x60*/ byte* cjkJAlv1;
                static /*0x68*/ byte* cjkKOlv1;
                static /*0x70*/ byte* cjkKOlv2;
                static /*0x78*/ char[] tailoringArr;
                static /*0x80*/ Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos;
                static /*0x88*/ object forLock;
                static /*0x90*/ bool isReady;

                static /*0x11ed3ac*/ MSCompatUnicodeTable();
                static /*0x11ec0a0*/ Mono.Globalization.Unicode.TailoringInfo GetTailoringInfo(int lcid);
                static /*0x11ec1a4*/ void BuildTailoringTables(System.Globalization.CultureInfo culture, Mono.Globalization.Unicode.TailoringInfo t, ref Mono.Globalization.Unicode.Contraction[] contractions, ref Mono.Globalization.Unicode.Level2Map[] diacriticals);
                static /*0x11ec8f4*/ void SetCJKReferences(string name, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x11ecb2c*/ byte Category(int cp);
                static /*0x11ecbd0*/ byte Level1(int cp);
                static /*0x11ecc74*/ byte Level2(int cp);
                static /*0x11ecd18*/ byte Level3(int cp);
                static /*0x11ecdbc*/ bool IsIgnorable(int cp, byte flag);
                static /*0x11eced4*/ bool IsIgnorableNonSpacing(int cp);
                static /*0x11ecf2c*/ int ToKanaTypeInsensitive(int i);
                static /*0x11ecf4c*/ int ToWidthCompat(int i);
                static /*0x11ed0d8*/ bool HasSpecialWeight(char c);
                static /*0x11ed158*/ bool IsHalfWidthKana(char c);
                static /*0x11ed16c*/ bool IsHiragana(char c);
                static /*0x11ed184*/ bool IsJapaneseSmallLetter(char c);
                static /*0x11ed26c*/ bool get_IsReady();
                static /*0x11ed2c4*/ nint GetResource(string name);
                static /*0x11ed37c*/ uint UInt32FromBytePtr(byte* raw, uint idx);
                static /*0x11ed858*/ void FillCJK(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x11ed9bc*/ void FillCJKCore(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer, ref byte* lv2Table);

                class <>c
                {
                    static /*0x0*/ Mono.Globalization.Unicode.MSCompatUnicodeTable.<> <>9;
                    static /*0x8*/ System.Comparison<Mono.Globalization.Unicode.Level2Map> <>9__17_0;

                    static /*0x11ede84*/ <>c();
                    /*0x11edee8*/ <>c();
                    /*0x11edef0*/ int <BuildTailoringTables>b__17_0(Mono.Globalization.Unicode.Level2Map a, Mono.Globalization.Unicode.Level2Map b);
                }
            }

            class MSCompatUnicodeTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Ignorable;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Category;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Level1;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Level2;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Level3;
                static /*0x28*/ Mono.Globalization.Unicode.CodePointIndexer CjkCHS;
                static /*0x30*/ Mono.Globalization.Unicode.CodePointIndexer Cjk;

                static /*0x11edf14*/ MSCompatUnicodeTableUtil();
            }

            class NormalizationTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Prop;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Map;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Combining;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Composite;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Helper;

                static /*0x11ee368*/ NormalizationTableUtil();
                static /*0x11ee6c8*/ int PropIdx(int cp);
                static /*0x11ee730*/ int MapIdx(int cp);
            }

            class SimpleCollator : System.Globalization.ISimpleCollator
            {
                static /*0x0*/ Mono.Globalization.Unicode.SimpleCollator invariant;
                /*0x10*/ System.Globalization.TextInfo textInfo;
                /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer cjkIndexer;
                /*0x20*/ Mono.Globalization.Unicode.Contraction[] contractions;
                /*0x28*/ Mono.Globalization.Unicode.Level2Map[] level2Maps;
                /*0x30*/ byte[] unsafeFlags;
                /*0x38*/ byte* cjkCatTable;
                /*0x40*/ byte* cjkLv1Table;
                /*0x48*/ byte* cjkLv2Table;
                /*0x50*/ Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer;
                /*0x58*/ int lcid;
                /*0x5c*/ bool frenchSort;

                static /*0x11f3c20*/ SimpleCollator();
                static /*0x11eeba0*/ System.Globalization.CultureInfo GetNeutralCulture(System.Globalization.CultureInfo info);
                static /*0x11eee64*/ bool IsHalfKana(int cp, System.Globalization.CompareOptions opt);
                static /*0x11ef55c*/ byte ToDashTypeValue(Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                static /*0x11ef790*/ bool IsIgnorable(int i, System.Globalization.CompareOptions opt);
                /*0x11ee798*/ SimpleCollator(System.Globalization.CultureInfo culture);
                /*0x11eeac4*/ void SetCJKTable(System.Globalization.CultureInfo culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                /*0x11eec10*/ byte Category(int cp);
                /*0x11eeca4*/ byte Level1(int cp);
                /*0x11eed38*/ byte Level2(int cp, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext);
                /*0x11eeed8*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end);
                /*0x11eef98*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x11ef0bc*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end);
                /*0x11ef17c*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x11ef36c*/ int FilterOptions(int i, System.Globalization.CompareOptions opt);
                /*0x11ef458*/ Mono.Globalization.Unicode.SimpleCollator.ExtenderType GetExtenderType(int i);
                /*0x11ef57c*/ int FilterExtender(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                /*0x11ef814*/ bool IsSafe(int i);
                /*0x11ef874*/ System.Globalization.SortKey GetSortKey(string s, System.Globalization.CompareOptions options);
                /*0x11ef894*/ System.Globalization.SortKey GetSortKey(string s, int start, int length, System.Globalization.CompareOptions options);
                /*0x11efadc*/ void GetSortKey(string s, int start, int end, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x11efeb4*/ void FillSortKeyRaw(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x11f042c*/ void FillSurrogateSortKeyRaw(int i, Mono.Globalization.Unicode.SortKeyBuffer buf);
                /*0x11f0574*/ int System.Globalization.ISimpleCollator.Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x11f0578*/ int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x11efe7c*/ void ClearBuffer(byte* buffer, int size);
                /*0x11f062c*/ int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, ref bool targetConsumed, ref bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f1a20*/ int CompareFlagPair(bool b1, bool b2);
                /*0x11f1a40*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x11f1a60*/ bool IsPrefix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x11f1b10*/ bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f1b78*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x11f1b98*/ bool IsSuffix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x11f1db8*/ int QuickIndexOf(string s, string target, int start, int length, ref bool testWasUnable);
                /*0x11f1f20*/ int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x11f25b0*/ int IndexOfOrdinal(string s, string target, int start, int length);
                /*0x11f2688*/ int IndexOfOrdinal(string s, char target, int start, int length);
                /*0x11f26f8*/ int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f2114*/ int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f1c2c*/ int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x11f2e6c*/ int LastIndexOfOrdinal(string s, string target, int start, int length);
                /*0x11f2fa0*/ int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f294c*/ int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f2794*/ bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f3208*/ bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f355c*/ bool MatchesPrimitive(System.Globalization.CompareOptions opt, byte* source, int si, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4);
                /*0x11f3044*/ bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x11f3788*/ bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);

                struct Context
                {
                    /*0x10*/ System.Globalization.CompareOptions Option;
                    /*0x18*/ byte* NeverMatchFlags;
                    /*0x20*/ byte* AlwaysMatchFlags;
                    /*0x28*/ byte* Buffer1;
                    /*0x30*/ byte* Buffer2;
                    /*0x38*/ int PrevCode;
                    /*0x40*/ byte* PrevSortKey;

                    /*0x11efe98*/ Context(System.Globalization.CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1);
                }

                struct PreviousInfo
                {
                    /*0x10*/ int Code;
                    /*0x18*/ byte* SortKey;

                    /*0x11f1a10*/ PreviousInfo(bool dummy);
                }

                struct Escape
                {
                    /*0x10*/ string Source;
                    /*0x18*/ int Index;
                    /*0x1c*/ int Start;
                    /*0x20*/ int End;
                    /*0x24*/ int Optional;
                }

                enum ExtenderType
                {
                    None = 0,
                    Simple = 1,
                    Voiced = 2,
                    Conditional = 3,
                    Buggy = 4,
                }
            }

            class SortKeyBuffer
            {
                /*0x10*/ byte[] l1b;
                /*0x18*/ byte[] l2b;
                /*0x20*/ byte[] l3b;
                /*0x28*/ byte[] l4sb;
                /*0x30*/ byte[] l4tb;
                /*0x38*/ byte[] l4kb;
                /*0x40*/ byte[] l4wb;
                /*0x48*/ byte[] l5b;
                /*0x50*/ string source;
                /*0x58*/ int l1;
                /*0x5c*/ int l2;
                /*0x60*/ int l3;
                /*0x64*/ int l4s;
                /*0x68*/ int l4t;
                /*0x6c*/ int l4k;
                /*0x70*/ int l4w;
                /*0x74*/ int l5;
                /*0x78*/ int lcid;
                /*0x7c*/ System.Globalization.CompareOptions options;
                /*0x80*/ bool processLevel2;
                /*0x81*/ bool frenchSort;
                /*0x82*/ bool frenchSorted;

                /*0x11ef95c*/ SortKeyBuffer(int lcid);
                /*0x11f3cb8*/ void Reset();
                /*0x11ef964*/ void Initialize(System.Globalization.CompareOptions options, int lcid, string s, bool frenchSort);
                /*0x11f0398*/ void AppendCJKExtension(byte lv1msb, byte lv1lsb);
                /*0x11f04e0*/ void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth);
                /*0x11f0254*/ void AppendNormal(byte category, byte lv1, byte lv2, byte lv3);
                /*0x11f3d94*/ void AppendLevel5(byte category, byte lv1);
                /*0x11f3ccc*/ void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx);
                /*0x11efe58*/ System.Globalization.SortKey GetResultAndReset();
                /*0x11f4308*/ int GetOptimizedLength(byte[] data, int len, byte defaultValue);
                /*0x11f3e2c*/ System.Globalization.SortKey GetResult();
            }
        }
    }

    namespace Security
    {
        class ASN1
        {
            /*0x10*/ byte m_nTag;
            /*0x18*/ byte[] m_aValue;
            /*0x20*/ System.Collections.ArrayList elist;

            /*0x11f4368*/ ASN1(byte tag);
            /*0x11f4394*/ ASN1(byte tag, byte[] data);
            /*0x11f43c4*/ ASN1(byte[] data);
            /*0x11f4660*/ int get_Count();
            /*0x11f467c*/ byte[] get_Value();
            /*0x11f470c*/ Mono.Security.ASN1 Add(Mono.Security.ASN1 asn1);
            /*0x11f4798*/ byte[] GetBytes();
            /*0x11f453c*/ void Decode(byte[] asn1, ref int anPos, int anLength);
            /*0x11f4e30*/ void DecodeTLV(byte[] asn1, ref int pos, ref byte tag, ref int length, ref byte[] content);
            /*0x11f4f54*/ string ToString();
        }

        class BitConverterLE
        {
            static /*0x11f51e4*/ byte[] GetUIntBytes(byte* bytes);
            static /*0x11f52f4*/ byte[] GetULongBytes(byte* bytes);
            static /*0x11f5484*/ byte[] GetBytes(int value);
            static /*0x11f549c*/ byte[] GetBytes(float value);
            static /*0x11f54b4*/ byte[] GetBytes(double value);
            static /*0x11f54cc*/ void UIntFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x11f5618*/ void ULongFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x11f5708*/ float ToSingle(byte[] value, int startIndex);
            static /*0x11f572c*/ double ToDouble(byte[] value, int startIndex);
        }

        namespace Cryptography
        {
            class CryptoConvert
            {
                static /*0x11f5750*/ int ToInt32LE(byte[] bytes, int offset);
                static /*0x11f57c4*/ uint ToUInt32LE(byte[] bytes, int offset);
                static /*0x11f5838*/ byte[] GetBytesLE(int val);
                static /*0x11f58cc*/ byte[] Trim(byte[] array);
                static /*0x11f5978*/ System.Security.Cryptography.RSA FromCapiPrivateKeyBlob(byte[] blob, int offset);
                static /*0x11f59f4*/ System.Security.Cryptography.RSAParameters GetParametersFromCapiPrivateKeyBlob(byte[] blob, int offset);
                static /*0x11f5f94*/ System.Security.Cryptography.DSA FromCapiPrivateKeyBlobDSA(byte[] blob, int offset);
                static /*0x11f6438*/ byte[] ToCapiPrivateKeyBlob(System.Security.Cryptography.RSA rsa);
                static /*0x11f680c*/ byte[] ToCapiPrivateKeyBlob(System.Security.Cryptography.DSA dsa);
                static /*0x11f6ad4*/ System.Security.Cryptography.RSA FromCapiPublicKeyBlob(byte[] blob, int offset);
                static /*0x11f6c20*/ System.Security.Cryptography.RSAParameters GetParametersFromCapiPublicKeyBlob(byte[] blob, int offset);
                static /*0x11f700c*/ System.Security.Cryptography.DSA FromCapiPublicKeyBlobDSA(byte[] blob, int offset);
                static /*0x11f74c4*/ byte[] ToCapiPublicKeyBlob(System.Security.Cryptography.RSA rsa);
                static /*0x11f7704*/ byte[] ToCapiPublicKeyBlob(System.Security.Cryptography.DSA dsa);
                static /*0x11f79dc*/ System.Security.Cryptography.RSA FromCapiKeyBlob(byte[] blob);
                static /*0x11f79e4*/ System.Security.Cryptography.RSA FromCapiKeyBlob(byte[] blob, int offset);
                static /*0x11f7b04*/ System.Security.Cryptography.DSA FromCapiKeyBlobDSA(byte[] blob);
                static /*0x11f7b0c*/ System.Security.Cryptography.DSA FromCapiKeyBlobDSA(byte[] blob, int offset);
            }

            class KeyBuilder
            {
                static /*0x0*/ System.Security.Cryptography.RandomNumberGenerator rng;

                static /*0x11f7c0c*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
                static /*0x11f7c74*/ byte[] Key(int size);
                static /*0x11f7ce4*/ byte[] IV(int size);
            }

            class KeyPairPersistence
            {
                static /*0x0*/ bool _userPathExists;
                static /*0x8*/ string _userPath;
                static /*0x10*/ bool _machinePathExists;
                static /*0x18*/ string _machinePath;
                static /*0x20*/ object lockobj;
                /*0x10*/ System.Security.Cryptography.CspParameters _params;
                /*0x18*/ string _keyvalue;
                /*0x20*/ string _filename;
                /*0x28*/ string _container;

                static /*0x11f9640*/ KeyPairPersistence();
                static /*0x11f866c*/ string get_UserPath();
                static /*0x11f8124*/ string get_MachinePath();
                static /*0x11f956c*/ bool _CanSecure(char* root);
                static /*0x11f9570*/ bool _ProtectUser(char* path);
                static /*0x11f9574*/ bool _ProtectMachine(char* path);
                static /*0x11f9578*/ bool _IsUserProtected(char* path);
                static /*0x11f957c*/ bool _IsMachineProtected(char* path);
                static /*0x11f9580*/ bool CanSecure(string path);
                static /*0x11f93a8*/ bool ProtectUser(string path);
                static /*0x11f9318*/ bool ProtectMachine(string path);
                static /*0x11f944c*/ bool IsUserProtected(string path);
                static /*0x11f94dc*/ bool IsMachineProtected(string path);
                /*0x11f7d54*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters);
                /*0x11f7d5c*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters, string keyPair);
                /*0x11f7e78*/ string get_Filename();
                /*0x11f8bb4*/ string get_KeyValue();
                /*0x11f8bbc*/ void set_KeyValue(string value);
                /*0x11f8be0*/ System.Security.Cryptography.CspParameters get_Parameters();
                /*0x11f8be8*/ bool Load();
                /*0x11f8eb8*/ void Save();
                /*0x11f9438*/ void Remove();
                /*0x11f8bd0*/ bool get_CanChange();
                /*0x11f9620*/ bool get_UseDefaultKeyContainer();
                /*0x11f8104*/ bool get_UseMachineKeyStore();
                /*0x11f8004*/ string get_ContainerName();
                /*0x11f7de0*/ System.Security.Cryptography.CspParameters Copy(System.Security.Cryptography.CspParameters p);
                /*0x11f8d9c*/ void FromXml(string xml);
                /*0x11f9104*/ string ToXml();
            }

            class MD2 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x17bd8f0*/ Mono.Security.Cryptography.MD2 Create();
                /*0x17bd8d0*/ MD2();
            }

            class MD2Managed : Mono.Security.Cryptography.MD2
            {
                static /*0x0*/ byte[] PI_SUBST;
                /*0x28*/ byte[] state;
                /*0x30*/ byte[] checksum;
                /*0x38*/ byte[] buffer;
                /*0x40*/ int count;
                /*0x48*/ byte[] x;

                static /*0x17bdf0c*/ MD2Managed();
                /*0x17bd948*/ MD2Managed();
                /*0x17bd9ec*/ byte[] Padding(int nLength);
                /*0x17bda88*/ void Initialize();
                /*0x17bdae8*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x17bde1c*/ byte[] HashFinal();
                /*0x17bdbc4*/ void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index);
            }

            class MD4 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x17bdfc0*/ Mono.Security.Cryptography.MD4 Create();
                /*0x17bdfa0*/ MD4();
            }

            class MD4Managed : Mono.Security.Cryptography.MD4
            {
                /*0x28*/ uint[] state;
                /*0x30*/ byte[] buffer;
                /*0x38*/ uint[] count;
                /*0x40*/ uint[] x;
                /*0x48*/ byte[] digest;

                /*0x17be018*/ MD4Managed();
                /*0x17be0e8*/ void Initialize();
                /*0x17be19c*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x17be938*/ byte[] HashFinal();
                /*0x17beb2c*/ byte[] Padding(int nLength);
                /*0x17beba4*/ uint F(uint x, uint y, uint z);
                /*0x17bebb4*/ uint G(uint x, uint y, uint z);
                /*0x17bebc8*/ uint H(uint x, uint y, uint z);
                /*0x17bebd4*/ uint ROL(uint x, byte n);
                /*0x17bebe4*/ void FF(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x17bec10*/ void GG(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x17bec4c*/ void HH(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x17bea34*/ void Encode(byte[] output, uint[] input);
                /*0x17bec80*/ void Decode(uint[] output, byte[] input, int index);
                /*0x17be2c0*/ void MD4Transform(uint[] state, byte[] block, int index);
            }

            class PKCS1
            {
                static /*0x0*/ byte[] emptySHA1;
                static /*0x8*/ byte[] emptySHA256;
                static /*0x10*/ byte[] emptySHA384;
                static /*0x18*/ byte[] emptySHA512;

                static /*0x17c092c*/ PKCS1();
                static /*0x17bed34*/ bool Compare(byte[] array1, byte[] array2);
                static /*0x17beda8*/ byte[] xor(byte[] array1, byte[] array2);
                static /*0x17bee6c*/ byte[] GetEmptyHash(System.Security.Cryptography.HashAlgorithm hash);
                static /*0x17bf030*/ byte[] I2OSP(int x, int size);
                static /*0x17bf0c8*/ byte[] I2OSP(byte[] x, int size);
                static /*0x17bf154*/ byte[] OS2IP(byte[] x);
                static /*0x17bf210*/ byte[] RSAEP(System.Security.Cryptography.RSA rsa, byte[] m);
                static /*0x17bf230*/ byte[] RSADP(System.Security.Cryptography.RSA rsa, byte[] c);
                static /*0x17bf250*/ byte[] RSASP1(System.Security.Cryptography.RSA rsa, byte[] m);
                static /*0x17bf270*/ byte[] RSAVP1(System.Security.Cryptography.RSA rsa, byte[] s);
                static /*0x17bf290*/ byte[] Encrypt_OAEP(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, System.Security.Cryptography.RandomNumberGenerator rng, byte[] M);
                static /*0x17bf74c*/ byte[] Decrypt_OAEP(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] C);
                static /*0x17bfa58*/ byte[] Sign_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue);
                static /*0x17bfe4c*/ byte[] Sign_v15(System.Security.Cryptography.RSA rsa, string hashName, byte[] hashValue);
                static /*0x17c0400*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, byte[] signature);
                static /*0x17c0664*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, string hashName, byte[] hashValue, byte[] signature);
                static /*0x17c0480*/ bool Verify_v15(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding);
                static /*0x17bfb08*/ byte[] Encode_v15(System.Security.Cryptography.HashAlgorithm hash, byte[] hashValue, int emLength);
                static /*0x17bf554*/ byte[] MGF1(System.Security.Cryptography.HashAlgorithm hash, byte[] mgfSeed, int maskLen);
                static /*0x17c0014*/ System.Security.Cryptography.HashAlgorithm CreateFromName(string name);
            }

            class RSAManaged : System.Security.Cryptography.RSA
            {
                /*0x20*/ bool isCRTpossible;
                /*0x21*/ bool keyBlinding;
                /*0x22*/ bool keypairGenerated;
                /*0x23*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger d;
                /*0x30*/ Mono.Math.BigInteger p;
                /*0x38*/ Mono.Math.BigInteger q;
                /*0x40*/ Mono.Math.BigInteger dp;
                /*0x48*/ Mono.Math.BigInteger dq;
                /*0x50*/ Mono.Math.BigInteger qInv;
                /*0x58*/ Mono.Math.BigInteger n;
                /*0x60*/ Mono.Math.BigInteger e;
                /*0x68*/ Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x17c0a7c*/ RSAManaged(int keySize);
                /*0x17c0b6c*/ void Finalize();
                /*0x17c0c0c*/ void GenerateKeyPair();
                /*0x17c1484*/ int get_KeySize();
                /*0x17c1528*/ string get_KeyExchangeAlgorithm();
                /*0x17c1568*/ bool get_PublicOnly();
                /*0x17c16b8*/ string get_SignatureAlgorithm();
                /*0x17c16f8*/ byte[] DecryptValue(byte[] rgb);
                /*0x17c1f20*/ byte[] EncryptValue(byte[] rgb);
                /*0x17c202c*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x17c248c*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x17c28f8*/ void Dispose(bool disposing);
                /*0x17c2afc*/ void add_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x17c2b98*/ void remove_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x17c2c34*/ string ToXmlString(bool includePrivateParameters);
                /*0x17c32bc*/ bool get_IsCrtPossible();
                /*0x17c1e70*/ byte[] GetPaddedValue(Mono.Math.BigInteger value, int length);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x17c32dc*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x17c340c*/ void Invoke(object sender, System.EventArgs e);
                }
            }

            class SymmetricTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x10*/ System.Security.Cryptography.SymmetricAlgorithm algo;
                /*0x18*/ bool encrypt;
                /*0x1c*/ int BlockSizeByte;
                /*0x20*/ byte[] temp;
                /*0x28*/ byte[] temp2;
                /*0x30*/ byte[] workBuff;
                /*0x38*/ byte[] workout;
                /*0x40*/ System.Security.Cryptography.PaddingMode padmode;
                /*0x44*/ int FeedBackByte;
                /*0x48*/ bool m_disposed;
                /*0x49*/ bool lastBlock;
                /*0x50*/ System.Security.Cryptography.RandomNumberGenerator _rng;

                /*0x17c3420*/ SymmetricTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV);
                /*0x17c36e8*/ void Finalize();
                /*0x17c3788*/ void System.IDisposable.Dispose();
                /*0x17c37f4*/ void Dispose(bool disposing);
                /*0x17c3848*/ bool get_CanTransformMultipleBlocks();
                /*0x17c3850*/ bool get_CanReuseTransform();
                /*0x17c3858*/ int get_InputBlockSize();
                /*0x17c3860*/ int get_OutputBlockSize();
                /*0x17c3868*/ void Transform(byte[] input, byte[] output);
                void ECB(byte[] input, byte[] output);
                /*0x17c39cc*/ void CBC(byte[] input, byte[] output);
                /*0x17c3b30*/ void CFB(byte[] input, byte[] output);
                /*0x17c3cf8*/ void OFB(byte[] input, byte[] output);
                /*0x17c3d48*/ void CTS(byte[] input, byte[] output);
                /*0x17c3d98*/ void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x17c3eec*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x17c4104*/ bool get_KeepLastBlock();
                /*0x17c4128*/ int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x17c42e4*/ void Random(byte[] buffer, int start, int length);
                /*0x17c4394*/ void ThrowBadPaddingException(System.Security.Cryptography.PaddingMode padding, int length, int position);
                /*0x17c4580*/ byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x17c4820*/ byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x17c4acc*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class DSAManaged : System.Security.Cryptography.DSA
            {
                /*0x20*/ bool keypairGenerated;
                /*0x21*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger p;
                /*0x30*/ Mono.Math.BigInteger q;
                /*0x38*/ Mono.Math.BigInteger g;
                /*0x40*/ Mono.Math.BigInteger x;
                /*0x48*/ Mono.Math.BigInteger y;
                /*0x50*/ Mono.Math.BigInteger j;
                /*0x58*/ Mono.Math.BigInteger seed;
                /*0x60*/ int counter;
                /*0x64*/ bool j_missing;
                /*0x68*/ System.Security.Cryptography.RandomNumberGenerator rng;
                /*0x70*/ Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x17c4b80*/ DSAManaged(int dwKeySize);
                /*0x17c4c60*/ void Finalize();
                /*0x17c4d00*/ void Generate();
                /*0x17c5274*/ void GenerateKeyPair();
                /*0x17c5434*/ void add(byte[] a, byte[] b, int value);
                /*0x17c4d4c*/ void GenerateParams(int keyLength);
                /*0x17c54d8*/ System.Security.Cryptography.RandomNumberGenerator get_Random();
                /*0x17c580c*/ int get_KeySize();
                /*0x17c5838*/ string get_KeyExchangeAlgorithm();
                /*0x17c5840*/ bool get_PublicOnly();
                /*0x17c58b4*/ string get_SignatureAlgorithm();
                /*0x17c58f4*/ byte[] NormalizeArray(byte[] array);
                /*0x17c5998*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x17c5c7c*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x17c5f24*/ byte[] CreateSignature(byte[] rgbHash);
                /*0x17c624c*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x17c670c*/ void Dispose(bool disposing);
                /*0x17c68dc*/ void add_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);
                /*0x17c6978*/ void remove_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x17c6a14*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x17c6b44*/ void Invoke(object sender, System.EventArgs e);
                }
            }
        }
    }

    namespace Math
    {
        class BigInteger
        {
            static /*0x0*/ uint[] smallPrimes;
            static /*0x8*/ System.Security.Cryptography.RandomNumberGenerator rng;
            /*0x10*/ uint length;
            /*0x18*/ uint[] data;

            static /*0x17c8e60*/ BigInteger();
            static /*0x17c0e74*/ Mono.Math.BigInteger op_Implicit(uint value);
            static /*0x17c1224*/ Mono.Math.BigInteger op_Implicit(int value);
            static /*0x17c1d40*/ Mono.Math.BigInteger op_Addition(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c12d4*/ Mono.Math.BigInteger op_Subtraction(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c0f40*/ uint op_Modulus(Mono.Math.BigInteger bi, uint ui);
            static /*0x17c1458*/ Mono.Math.BigInteger op_Modulus(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c57cc*/ Mono.Math.BigInteger op_Division(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c0ff4*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c5694*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi, int i);
            static /*0x17c7988*/ Mono.Math.BigInteger op_LeftShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x17c7b5c*/ Mono.Math.BigInteger op_RightShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x17c7cdc*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
            static /*0x17c7d84*/ Mono.Math.BigInteger GenerateRandom(int bits, System.Security.Cryptography.RandomNumberGenerator rng);
            static /*0x17c1c54*/ Mono.Math.BigInteger GenerateRandom(int bits);
            static /*0x17c53b0*/ bool op_Equality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x17c5c10*/ bool op_Inequality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x17c1608*/ bool op_Equality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c0f44*/ bool op_Inequality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c1d28*/ bool op_GreaterThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c1210*/ bool op_LessThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c541c*/ bool op_GreaterThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c57f4*/ bool op_LessThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x17c0ed4*/ Mono.Math.BigInteger GeneratePseudoPrime(int bits);
            /*0x17c6b58*/ BigInteger(Mono.Math.BigInteger.Sign sign, uint len);
            /*0x17c6bcc*/ BigInteger(Mono.Math.BigInteger bi);
            /*0x17c6c8c*/ BigInteger(Mono.Math.BigInteger bi, uint len);
            /*0x17c1a18*/ BigInteger(byte[] inData);
            /*0x17c6db8*/ BigInteger(uint ui);
            /*0x17c7ee8*/ void Randomize(System.Security.Cryptography.RandomNumberGenerator rng);
            /*0x17c5354*/ void Randomize();
            /*0x17c11a4*/ int BitCount();
            /*0x17c5788*/ bool TestBit(uint bitNum);
            /*0x17c806c*/ bool TestBit(int bitNum);
            /*0x17c8104*/ void SetBit(uint bitNum);
            /*0x17c810c*/ void SetBit(uint bitNum, bool value);
            /*0x17c8168*/ int LowestSetBit();
            /*0x17c2360*/ byte[] GetBytes();
            /*0x17c81e4*/ string ToString(uint radix);
            /*0x17c823c*/ string ToString(uint radix, string characterSet);
            /*0x17c6d60*/ void Normalize();
            /*0x17c1e20*/ void Clear();
            /*0x17c8520*/ int GetHashCode();
            /*0x17c8578*/ string ToString();
            /*0x17c8580*/ bool Equals(object o);
            /*0x17c1454*/ Mono.Math.BigInteger ModInverse(Mono.Math.BigInteger modulus);
            /*0x17c1cb0*/ Mono.Math.BigInteger ModPow(Mono.Math.BigInteger exp, Mono.Math.BigInteger n);
            /*0x17c54f8*/ bool IsProbablePrime();
            /*0x17c8ddc*/ void Incr2();

            enum Sign
            {
                Negative = -1,
                Zero = 0,
                Positive = 1,
            }

            class ModulusRing
            {
                /*0x10*/ Mono.Math.BigInteger mod;
                /*0x18*/ Mono.Math.BigInteger constant;

                /*0x17c8bb0*/ ModulusRing(Mono.Math.BigInteger modulus);
                /*0x17c8ef4*/ void BarrettReduction(Mono.Math.BigInteger x);
                /*0x17c94f8*/ Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x17c9674*/ Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x17c8c80*/ Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k);
                /*0x17c9830*/ Mono.Math.BigInteger Pow(uint b, Mono.Math.BigInteger exp);
            }

            class Kernel
            {
                static /*0x17c6e40*/ Mono.Math.BigInteger AddSameSign(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x17c7138*/ Mono.Math.BigInteger Subtract(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x17c9280*/ void MinusEq(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x17c9380*/ void PlusEq(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x17c6ff4*/ Mono.Math.BigInteger.Sign Compare(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x17c8468*/ uint SingleByteDivideInPlace(Mono.Math.BigInteger n, uint d);
                static /*0x17c72dc*/ uint DwordMod(Mono.Math.BigInteger n, uint d);
                static /*0x17c98a8*/ Mono.Math.BigInteger[] DwordDivMod(Mono.Math.BigInteger n, uint d);
                static /*0x17c7348*/ Mono.Math.BigInteger[] multiByteDivide(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x17c798c*/ Mono.Math.BigInteger LeftShift(Mono.Math.BigInteger bi, int n);
                static /*0x17c7b60*/ Mono.Math.BigInteger RightShift(Mono.Math.BigInteger bi, int n);
                static /*0x17c7898*/ Mono.Math.BigInteger MultiplyByDword(Mono.Math.BigInteger n, uint f);
                static /*0x17c779c*/ void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset);
                static /*0x17c9150*/ void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod);
                static /*0x17c9a38*/ uint modInverse(Mono.Math.BigInteger bi, uint modulus);
                static /*0x17c86c0*/ Mono.Math.BigInteger modInverse(Mono.Math.BigInteger bi, Mono.Math.BigInteger modulus);
            }
        }

        namespace Prime
        {
            enum ConfidenceFactor
            {
                ExtraLow = 0,
                Low = 1,
                Medium = 2,
                High = 3,
                ExtraHigh = 4,
                Provable = 5,
            }

            class PrimalityTest : System.MulticastDelegate
            {
                /*0x17c9af8*/ PrimalityTest(object object, nint method);
                /*0x17c9c28*/ bool Invoke(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            class PrimalityTests
            {
                static /*0x17c9c3c*/ int GetSPPRounds(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x17c8d88*/ bool Test(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x17c9f9c*/ bool RabinMillerTest(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x17c9dd0*/ bool SmallPrimeSppTest(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            namespace Generator
            {
                class PrimeGeneratorBase
                {
                    /*0x17ca2b0*/ PrimeGeneratorBase();
                    /*0x17ca22c*/ Mono.Math.Prime.ConfidenceFactor get_Confidence();
                    /*0x17ca234*/ Mono.Math.Prime.PrimalityTest get_PrimalityTest();
                    /*0x17ca2a8*/ int get_TrialDivisionBounds();
                    Mono.Math.BigInteger GenerateNewPrime(int bits);
                }

                class SequentialSearchPrimeGeneratorBase : Mono.Math.Prime.Generator.PrimeGeneratorBase
                {
                    /*0x17c8dd4*/ SequentialSearchPrimeGeneratorBase();
                    /*0x17ca2b8*/ Mono.Math.BigInteger GenerateSearchBase(int bits, object context);
                    /*0x17ca32c*/ Mono.Math.BigInteger GenerateNewPrime(int bits);
                    /*0x17ca33c*/ Mono.Math.BigInteger GenerateNewPrime(int bits, object context);
                    /*0x17ca620*/ bool IsPrimeAcceptable(Mono.Math.BigInteger bi, object context);
                }
            }
        }
    }
}

namespace Microsoft
{
    namespace Win32
    {
        class Win32Native
        {
            static /*0x17ca628*/ string GetMessage(int hr);
            static /*0x17ca684*/ int MakeHRFromErrorCode(int errorCode);
        }

        namespace SafeHandles
        {
            class SafeHandleCache<T>
            {
                static /*0x0*/ T s_invalidHandle;

                static bool IsCachedInvalidHandle(System.Runtime.InteropServices.SafeHandle handle);
            }

            class SafePasswordHandle : System.Runtime.InteropServices.SafeHandle
            {
                /*0x17ca744*/ SafePasswordHandle(string password);
                /*0x17ca690*/ nint CreateHandle(string password);
                /*0x17ca6e8*/ void FreeHandle();
                /*0x17ca7bc*/ bool ReleaseHandle();
                /*0x17ca838*/ void Dispose(bool disposing);
                /*0x17ca8a8*/ bool get_IsInvalid();
                /*0x17ca8d0*/ string Mono_DangerousGetString();
            }

            class SafeFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x17ca92c*/ SafeFileHandle(nint preexistingHandle, bool ownsHandle);
                /*0x17ca9b8*/ bool ReleaseHandle();
            }

            class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x17caa34*/ SafeWaitHandle(nint existingHandle, bool ownsHandle);
                /*0x17caa5c*/ bool ReleaseHandle();
            }

            class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0x17ca954*/ SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
                /*0x17caa78*/ bool get_IsInvalid();
            }
        }
    }
}

namespace Internal
{
    namespace Threading
    {
        namespace Tasks
        {
            namespace Tracing
            {
                class TaskTrace
                {
                    static /*0x0*/ Internal.Runtime.Augments.TaskTraceCallbacks s_callbacks;

                    static /*0x17caad4*/ bool get_Enabled();
                    static /*0x17cab34*/ void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x17cabb8*/ void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x17cac3c*/ void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0x17cacc0*/ void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
                }
            }
        }
    }

    namespace Runtime
    {
        namespace Augments
        {
            enum AsyncStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            class TaskTraceCallbacks
            {
                bool get_Enabled();
                void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
            }

            class RuntimeAugments
            {
                static /*0x0*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks s_reflectionExecutionDomainCallbacks;

                static /*0x17cadd8*/ RuntimeAugments();
                static /*0x17cad60*/ void ReportUnhandledException(System.Exception exception);
                static /*0x17cad80*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks get_Callbacks();
            }

            class ReflectionExecutionDomainCallbacks
            {
                /*0x17cae50*/ ReflectionExecutionDomainCallbacks();
                /*0x17cae58*/ System.Exception CreateMissingMetadataException(System.Type attributeType);
            }

            class RuntimeThread
            {
                static /*0x0*/ int OptimalMaxSpinWaitsPerSpinIteration;
                /*0x10*/ System.Threading.Thread thread;

                static /*0x17cafec*/ RuntimeThread();
                static /*0x17caedc*/ Internal.Runtime.Augments.RuntimeThread Create(System.Threading.ParameterizedThreadStart start, int maxStackSize);
                static /*0x17cafbc*/ void Sleep(int millisecondsTimeout);
                static /*0x17cafc4*/ bool Yield();
                static /*0x17cafcc*/ bool SpinWait(int iterations);
                static /*0x17cafe4*/ int GetCurrentProcessorId();
                /*0x17caeb4*/ RuntimeThread(System.Threading.Thread t);
                /*0x17caf80*/ void set_IsBackground(bool value);
                /*0x17cafa0*/ void Start(object state);
            }
        }
    }

    namespace Cryptography
    {
        class Helpers
        {
            static /*0x17cb038*/ byte[] CloneByteArray(byte[] src);
            static /*0x17cb0b0*/ byte[] GenerateRandom(int count);
            static /*0x17cb258*/ void WriteInt(uint i, byte[] arr, int offset);
            static /*0x17cb2d8*/ char[] ToHexArrayUpper(byte[] bytes);
            static /*0x17cb3e0*/ string ToHexStringUpper(byte[] bytes);
            static /*0x17cb3c4*/ char NibbleToHex(byte b);
        }
    }
}

namespace System
{
    class String : System.IComparable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<char>, System.IComparable<string>, System.IEquatable<string>, System.IConvertible, System.ICloneable
    {
        static int StackallocIntBufferSizeLimit = 128;
        static int PROBABILISTICMAP_BLOCK_INDEX_MASK = 7;
        static int PROBABILISTICMAP_BLOCK_INDEX_SHIFT = 3;
        static int PROBABILISTICMAP_SIZE = 8;
        static /*0x0*/ string Empty;
        /*0x10*/ int _stringLength;
        /*0x14*/ char _firstChar;

        static /*0x17cb3f8*/ bool EqualsHelper(string strA, string strB);
        static /*0x17cb42c*/ int CompareOrdinalHelper(string strA, int indexA, int countA, string strB, int indexB, int countB);
        static /*0x17cb464*/ int CompareOrdinalHelper(string strA, string strB);
        static /*0x17cb608*/ int Compare(string strA, string strB);
        static /*0x17cb8a8*/ int Compare(string strA, string strB, bool ignoreCase);
        static /*0x17cb610*/ int Compare(string strA, string strB, System.StringComparison comparisonType);
        static /*0x17cb8cc*/ int Compare(string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        static /*0x17cb968*/ int Compare(string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);
        static /*0x17cb978*/ int Compare(string strA, int indexA, string strB, int indexB, int length, System.StringComparison comparisonType);
        static /*0x17cbda0*/ int CompareOrdinal(string strA, string strB);
        static /*0x17cbde4*/ int CompareOrdinal(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
        static /*0x17cbe84*/ int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length);
        static /*0x17cc7b8*/ bool Equals(string a, string b);
        static /*0x17cc804*/ bool Equals(string a, string b, System.StringComparison comparisonType);
        static /*0x17c0928*/ bool op_Equality(string a, string b);
        static /*0x17cca88*/ bool op_Inequality(string a, string b);
        static /*0x17cb8b0*/ void CheckStringComparison(System.StringComparison comparisonType);
        static /*0x17cce0c*/ void FillStringChecked(string dest, int destPos, string src);
        static /*0x17cce94*/ string Concat(object arg0, object arg1);
        static /*0x17ccf3c*/ string Concat(object arg0, object arg1, object arg2);
        static /*0x17c0840*/ string Concat(string str0, string str1);
        static /*0x17cd020*/ string Concat(string str0, string str1, string str2);
        static /*0x17cd100*/ string Concat(string str0, string str1, string str2, string str3);
        static /*0x17cd208*/ string Concat(string[] values);
        static /*0x17c453c*/ string Format(string format, object arg0);
        static /*0x17cd4e8*/ string Format(string format, object arg0, object arg1);
        static /*0x17cd52c*/ string Format(string format, object arg0, object arg1, object arg2);
        static /*0x17cd570*/ string Format(string format, object[] args);
        static /*0x17cd620*/ string Format(System.IFormatProvider provider, string format, object arg0);
        static /*0x17cd674*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1);
        static /*0x17cd6cc*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
        static /*0x17cd728*/ string Format(System.IFormatProvider provider, string format, object[] args);
        static /*0x17cd418*/ string FormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
        static /*0x17cd924*/ string Join(string separator, string[] value);
        static /*0x17cda08*/ string Join(string separator, System.Collections.Generic.IEnumerable<string> values);
        static /*0x17cd988*/ string Join(string separator, string[] value, int startIndex, int count);
        static /*0x17cdedc*/ string JoinCore(char* separator, int separatorLength, string[] value, int startIndex, int count);
        static /*0x17d0bb0*/ void InitializeProbabilisticMap(uint* charMap, System.ReadOnlySpan<char> anyOf);
        static /*0x17d1934*/ bool ArrayContains(char searchChar, char[] anyOf);
        static /*0x17d0c78*/ bool IsCharBitSet(uint* charMap, byte value);
        static /*0x17d1980*/ void SetCharBit(uint* charMap, byte value);
        static /*0x17d247c*/ string Ctor(char[] value);
        static /*0x17d2510*/ string Ctor(char[] value, int startIndex, int length);
        static /*0x17d26d0*/ string Ctor(char* ptr, int startIndex, int length);
        static /*0x17d2864*/ string Ctor(sbyte* value, int startIndex, int length);
        static /*0x17d29ec*/ string CreateStringForSByteConstructor(byte* pb, int numBytes);
        static /*0x17d2a6c*/ string Ctor(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        static /*0x17d2c64*/ string Ctor(char c, int count);
        static /*0x17d2d88*/ string Ctor(System.ReadOnlySpan<char> value);
        static string Create<TState>(int length, TState state, System.Buffers.SpanAction<char, TState> action);
        static /*0x17d2e48*/ System.ReadOnlySpan<char> op_Implicit(string value);
        static /*0x17d2e9c*/ string Copy(string str);
        static /*0x17cd0e0*/ bool IsNullOrEmpty(string value);
        static /*0x17d3198*/ string CreateStringFromEncoding(byte* bytes, int byteLength, System.Text.Encoding encoding);
        static /*0x17d3260*/ string CreateFromChar(char c);
        static /*0x17cce88*/ void wstrcpy(char* dmem, char* smem, int charCount);
        static /*0x17d3354*/ int wcslen(char* ptr);
        static /*0x17cd0fc*/ string FastAllocateString(int length);
        static /*0x17d4020*/ void memset(byte* dest, int val, int len);
        static /*0x17d40dc*/ void memcpy(byte* dest, byte* src, int size);
        static /*0x17d40e8*/ void bzero(byte* dest, int len);
        static /*0x17d40f4*/ void bzero_aligned_1(byte* dest, int len);
        static /*0x17d40fc*/ void bzero_aligned_2(byte* dest, int len);
        static /*0x17d4104*/ void bzero_aligned_4(byte* dest, int len);
        static /*0x17d410c*/ void bzero_aligned_8(byte* dest, int len);
        static /*0x17d4114*/ void memcpy_aligned_1(byte* dest, byte* src, int size);
        static /*0x17d4120*/ void memcpy_aligned_2(byte* dest, byte* src, int size);
        static /*0x17d412c*/ void memcpy_aligned_4(byte* dest, byte* src, int size);
        static /*0x17d4138*/ void memcpy_aligned_8(byte* dest, byte* src, int size);
        /*0x17d2478*/ String(char[] value);
        /*0x17d250c*/ String(char[] value, int startIndex, int length);
        /*0x17d26cc*/ String(char* value, int startIndex, int length);
        /*0x17d2860*/ String(sbyte* value, int startIndex, int length);
        /*0x17d2a68*/ String(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x17d2c60*/ String(char c, int count);
        /*0x17d2d84*/ String(System.ReadOnlySpan<char> value);
        /*0x17cc08c*/ int CompareTo(object value);
        /*0x17cc14c*/ int CompareTo(string strB);
        /*0x17cc154*/ bool EndsWith(string value);
        /*0x17cc15c*/ bool EndsWith(string value, System.StringComparison comparisonType);
        /*0x17cc400*/ bool EndsWith(char value);
        /*0x17cc450*/ bool Equals(object obj);
        /*0x17cc4f4*/ bool Equals(string value);
        /*0x17cc534*/ bool Equals(string value, System.StringComparison comparisonType);
        /*0x17ccaa0*/ int GetHashCode();
        /*0x17ccaa4*/ int GetLegacyNonRandomizedHashCode();
        /*0x17ccaf4*/ bool StartsWith(string value);
        /*0x17ccb50*/ bool StartsWith(string value, System.StringComparison comparisonType);
        /*0x17cd7e0*/ string Insert(int startIndex, string value);
        /*0x17ce29c*/ string PadLeft(int totalWidth, char paddingChar);
        /*0x17ce37c*/ string PadRight(int totalWidth, char paddingChar);
        /*0x17ce464*/ string Remove(int startIndex, int count);
        /*0x17ce60c*/ string Remove(int startIndex);
        /*0x17ce874*/ string Replace(char oldChar, char newChar);
        /*0x17ce94c*/ string Replace(string oldValue, string newValue);
        /*0x17cec84*/ string ReplaceHelper(int oldValueLength, string newValue, System.ReadOnlySpan<int> indices);
        /*0x17cefdc*/ string[] Split(char separator, System.StringSplitOptions options);
        /*0x17cf398*/ string[] Split(char[] separator);
        /*0x17cf40c*/ string[] Split(char[] separator, int count);
        /*0x17cf484*/ string[] Split(char[] separator, System.StringSplitOptions options);
        /*0x17cf03c*/ string[] SplitInternal(System.ReadOnlySpan<char> separators, int count, System.StringSplitOptions options);
        /*0x17cfee0*/ string[] Split(string[] separator, System.StringSplitOptions options);
        /*0x17cfef4*/ string[] SplitInternal(string separator, string[] separators, int count, System.StringSplitOptions options);
        /*0x17d0334*/ string[] SplitInternal(string separator, int count, System.StringSplitOptions options);
        /*0x17cf9c4*/ string[] SplitKeepEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0x17cfbf4*/ string[] SplitOmitEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0x17cf4fc*/ void MakeSeparatorList(System.ReadOnlySpan<char> separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0x17d08c4*/ void MakeSeparatorList(string separator, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0x17d0530*/ void MakeSeparatorList(string[] separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder, ref System.Collections.Generic.ValueListBuilder<int> lengthListBuilder);
        /*0x17d0ba4*/ string Substring(int startIndex);
        /*0x17ce6cc*/ string Substring(int startIndex, int length);
        /*0x17d0c9c*/ string InternalSubString(int startIndex, int length);
        /*0x17d0cf4*/ string ToLower();
        /*0x17d0d70*/ string ToLower(System.Globalization.CultureInfo culture);
        /*0x17d0df8*/ string ToLowerInvariant();
        /*0x17d0e74*/ string ToUpper();
        /*0x17d0ef0*/ string ToUpper(System.Globalization.CultureInfo culture);
        /*0x17d0f78*/ string ToUpperInvariant();
        /*0x17d0ff4*/ string Trim();
        /*0x17d1134*/ string Trim(char trimChar);
        /*0x17d128c*/ string Trim(char[] trimChars);
        /*0x17d12c0*/ string TrimStart();
        /*0x17d12c8*/ string TrimStart(char[] trimChars);
        /*0x17d12fc*/ string TrimEnd();
        /*0x17d1304*/ string TrimEnd(char trimChar);
        /*0x17d1324*/ string TrimEnd(char[] trimChars);
        /*0x17d0ffc*/ string TrimWhiteSpaceHelper(System.String.TrimType trimType);
        /*0x17d1154*/ string TrimHelper(char* trimChars, int trimCharsLength, System.String.TrimType trimType);
        /*0x17d1358*/ string CreateTrimmedString(int start, int end);
        /*0x17d13e8*/ bool Contains(string value);
        /*0x17d141c*/ int IndexOf(char value);
        /*0x17d142c*/ int IndexOf(char value, int startIndex);
        /*0x17d1438*/ int IndexOf(char value, int startIndex, int count);
        /*0x17d1518*/ int IndexOfAny(char[] anyOf);
        /*0x17d16e8*/ int IndexOfAny(char[] anyOf, int startIndex);
        /*0x17d1524*/ int IndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x17d16f4*/ int IndexOfAny(char value1, char value2, int startIndex, int count);
        /*0x17d1778*/ int IndexOfAny(char value1, char value2, char value3, int startIndex, int count);
        /*0x17d17cc*/ int IndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0x17d19a4*/ int IndexOf(string value);
        /*0x17d19b4*/ int IndexOf(string value, int startIndex);
        /*0x17d140c*/ int IndexOf(string value, System.StringComparison comparisonType);
        /*0x17d19c4*/ int IndexOf(string value, int startIndex, System.StringComparison comparisonType);
        /*0x17d19d4*/ int IndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x17d1d0c*/ int LastIndexOf(char value);
        /*0x17d1d1c*/ int LastIndexOf(char value, int startIndex);
        /*0x17d1d24*/ int LastIndexOf(char value, int startIndex, int count);
        /*0x17d1e10*/ int LastIndexOfAny(char[] anyOf);
        /*0x17d1f54*/ int LastIndexOfAny(char[] anyOf, int startIndex);
        /*0x17d1e1c*/ int LastIndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x17d1f5c*/ int LastIndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0x17d20c4*/ int LastIndexOf(string value);
        /*0x17d2468*/ int LastIndexOf(string value, System.StringComparison comparisonType);
        /*0x17d20d4*/ int LastIndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x17d2e98*/ object Clone();
        /*0x17d2f34*/ void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);
        /*0x17d30bc*/ char[] ToCharArray();
        /*0x17cb424*/ ref char GetRawStringData();
        /*0x17d3284*/ string ToString();
        /*0x17d3288*/ string ToString(System.IFormatProvider provider);
        /*0x17d328c*/ System.Collections.Generic.IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator();
        /*0x17d32f0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0x17d3460*/ System.TypeCode GetTypeCode();
        /*0x17d3468*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x17d34d0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x17d3538*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x17d35a0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x17d3608*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x17d3670*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x17d36d8*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x17d3740*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x17d37a8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x17d3810*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x17d3878*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x17d38e0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x17d3948*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x17d39b0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x17d3a18*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x17d3a88*/ string Normalize(System.Text.NormalizationForm normalizationForm);
        /*0x17d3af0*/ int get_Length();
        /*0x17d3af8*/ int IndexOfUnchecked(string value, int startIndex, int count);
        /*0x17d3bcc*/ int IndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0x17d3d6c*/ int LastIndexOfUnchecked(string value, int startIndex, int count);
        /*0x17d3e3c*/ int LastIndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0x17d3fc8*/ bool StartsWithOrdinalUnchecked(string value);
        /*0x17d2c50*/ string CreateString(sbyte* value, int startIndex, int length);
        /*0x17d4144*/ string CreateString(char* value, int startIndex, int length);
        /*0x17d4154*/ string CreateString(char[] val, int startIndex, int length);
        /*0x17cb3f0*/ string CreateString(char[] val);
        /*0x17d4164*/ string CreateString(char c, int count);
        /*0x17d4170*/ string CreateString(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x17d4184*/ string CreateString(System.ReadOnlySpan<char> value);
        /*0x17c84e4*/ char get_Chars(int index);

        enum TrimType
        {
            Head = 0,
            Tail = 1,
            Both = 2,
        }

        struct ProbabilisticMap
        {
        }
    }

    class TimeZoneInfo : System.IEquatable<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
    {
        static /*0x0*/ System.TimeZoneInfo s_utcTimeZone;
        static /*0x8*/ System.TimeZoneInfo.CachedData s_cachedData;
        static /*0x10*/ System.DateTime s_maxDateOnly;
        static /*0x18*/ System.DateTime s_minDateOnly;
        static /*0x20*/ System.TimeSpan MaxOffset;
        static /*0x28*/ System.TimeSpan MinOffset;
        /*0x10*/ string _id;
        /*0x18*/ string _displayName;
        /*0x20*/ string _standardDisplayName;
        /*0x28*/ string _daylightDisplayName;
        /*0x30*/ System.TimeSpan _baseUtcOffset;
        /*0x38*/ bool _supportsDaylightSavingTime;
        /*0x40*/ System.TimeZoneInfo.AdjustmentRule[] _adjustmentRules;

        static /*0x18eb304*/ TimeZoneInfo();
        static /*0x18e2040*/ System.TimeZoneInfo GetLocalTimeZone(System.TimeZoneInfo.CachedData cachedData);
        static /*0x18e21f0*/ bool TryGetLocalTzFile(ref byte[] rawData, ref string id);
        static /*0x18e23a0*/ string GetTzEnvironmentVariable();
        static /*0x18e2438*/ bool TryLoadTzFile(string tzFilePath, ref byte[] rawData, ref string id);
        static /*0x18e2714*/ string FindTimeZoneIdUsingReadLink(string tzFilePath);
        static /*0x18e2a94*/ string GetDirectoryEntryFullPath(ref Interop.Sys.DirectoryEntry dirent, string currentPath);
        static /*0x18e2c20*/ void EnumerateFilesRecursively(string path, System.Predicate<string> condition);
        static /*0x18e2820*/ string FindTimeZoneId(byte[] rawData);
        static /*0x18e3218*/ bool CompareTimeZoneFile(string filePath, byte[] buffer, byte[] rawData);
        static /*0x18e208c*/ System.TimeZoneInfo GetLocalTimeZoneFromTzFile();
        static /*0x18e35a4*/ System.TimeZoneInfo GetTimeZoneFromTzData(byte[] rawData, string id);
        static /*0x18e25c8*/ string GetTimeZoneDirectory();
        static /*0x18e3c60*/ System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, ref bool isAmbiguousLocalDst);
        static /*0x18e1bc0*/ void TZif_GenerateAdjustmentRules(ref System.TimeZoneInfo.AdjustmentRule[] rules, System.TimeSpan baseUtcOffset, System.DateTime[] dts, byte[] typeOfLocalTime, System.TimeZoneInfo.TZifType[] transitionType, bool[] StandardTime, bool[] GmtTime, string futureTransitionsPosixFormat);
        static /*0x18e4028*/ void TZif_GenerateAdjustmentRule(ref int index, System.TimeSpan timeZoneBaseUtcOffset, System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> rulesList, System.DateTime[] dts, byte[] typeOfLocalTime, System.TimeZoneInfo.TZifType[] transitionTypes, bool[] StandardTime, bool[] GmtTime, string futureTransitionsPosixFormat);
        static /*0x18e4794*/ System.TimeSpan TZif_CalculateTransitionOffsetFromBase(System.TimeSpan transitionOffset, System.TimeSpan timeZoneBaseUtcOffset);
        static /*0x18e46f0*/ System.TimeZoneInfo.TZifType TZif_GetEarlyDateTransitionType(System.TimeZoneInfo.TZifType[] transitionTypes);
        static /*0x18e4c70*/ System.TimeZoneInfo.AdjustmentRule TZif_CreateAdjustmentRuleForPosixFormat(string posixFormat, System.DateTime startTransitionDate, System.TimeSpan timeZoneBaseUtcOffset);
        static /*0x18e5190*/ System.Nullable<System.TimeSpan> TZif_ParseOffsetString(string offset);
        static /*0x18e55e4*/ System.DateTime ParseTimeOfDay(string time);
        static /*0x18e5388*/ System.TimeZoneInfo.TransitionTime TZif_CreateTransitionTimeFromPosixRule(string date, string time);
        static /*0x18e5a84*/ void TZif_ParseJulianDay(string date, ref int month, ref int day);
        static /*0x18e5820*/ bool TZif_ParseMDateRule(string dateRule, ref int month, ref int week, ref System.DayOfWeek dayOfWeek);
        static /*0x18e4f94*/ bool TZif_ParsePosixFormat(string posixFormat, ref string standardName, ref string standardOffset, ref string daylightSavingsName, ref string daylightSavingsOffset, ref string start, ref string startTime, ref string end, ref string endTime);
        static /*0x18e5c50*/ string TZif_ParsePosixName(string posixFormat, ref int index);
        static /*0x18e5e84*/ string TZif_ParsePosixOffset(string posixFormat, ref int index);
        static /*0x18e5f90*/ void TZif_ParsePosixDateTime(string posixFormat, ref int index, ref string date, ref string time);
        static /*0x18e6104*/ string TZif_ParsePosixDate(string posixFormat, ref int index);
        static /*0x18e6210*/ string TZif_ParsePosixTime(string posixFormat, ref int index);
        static /*0x18e606c*/ string TZif_ParsePosixString(string posixFormat, ref int index, System.Func<char, bool> breakCondition);
        static /*0x18e1b5c*/ string TZif_GetZoneAbbreviation(string zoneAbbreviations, int index);
        static /*0x18e631c*/ int TZif_ToInt32(byte[] value, int startIndex);
        static /*0x18e634c*/ long TZif_ToInt64(byte[] value, int startIndex);
        static /*0x18e637c*/ long TZif_ToUnixTime(byte[] value, int startIndex, System.TimeZoneInfo.TZVersion version);
        static /*0x18e6404*/ System.DateTime TZif_UnixTimeToDateTime(long unixTime);
        static /*0x18e1644*/ void TZif_ParseRaw(byte[] data, ref System.TimeZoneInfo.TZifHead t, ref System.DateTime[] dts, ref byte[] typeOfLocalTime, ref System.TimeZoneInfo.TZifType[] transitionType, ref string zoneAbbreviations, ref bool[] StandardTime, ref bool[] GmtTime, ref string futureTransitionsPosixFormat);
        static /*0x18e6bdc*/ System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x18e6db4*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags);
        static /*0x18e7040*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        static /*0x18e8078*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x18e3cd8*/ System.TimeZoneInfo get_Local();
        static /*0x18e85c8*/ System.TimeZoneInfo get_Utc();
        static /*0x18e870c*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
        static /*0x18e87a8*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        static /*0x18e7e94*/ System.DateTime ConvertUtcToTimeZone(long ticks, System.TimeZoneInfo destinationTimeZone, ref bool isAmbiguousLocalDst);
        static /*0x18e7b18*/ bool GetIsDaylightSavings(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime, System.TimeZoneInfoOptions flags);
        static /*0x18ea094*/ bool GetIsDaylightSavingsFromUtc(System.DateTime time, int year, System.TimeSpan utc, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex, ref bool isAmbiguousLocalDst, System.TimeZoneInfo zone);
        static /*0x18e99c8*/ bool CheckIsDst(System.DateTime startTime, System.DateTime time, System.DateTime endTime, bool ignoreYearAdjustment, System.TimeZoneInfo.AdjustmentRule rule);
        static /*0x18e9ba8*/ bool GetIsAmbiguousTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0x18e776c*/ bool GetIsInvalidTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0x18e6eac*/ System.TimeSpan GetUtcOffset(System.DateTime time, System.TimeZoneInfo zone, System.TimeZoneInfoOptions flags);
        static /*0x18e6e3c*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone);
        static /*0x18e955c*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings);
        static /*0x18e3d58*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings, ref bool isAmbiguousLocalDst);
        static /*0x18e95dc*/ System.DateTime TransitionTimeToDateTime(int year, System.TimeZoneInfo.TransitionTime transitionTime);
        static /*0x18e1d0c*/ void ValidateTimeZoneInfo(string id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, ref bool adjustmentRulesSupportDst);
        static /*0x18ea814*/ bool UtcOffsetOutOfRange(System.TimeSpan offset);
        static /*0x18ea93c*/ System.TimeSpan GetUtcOffset(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x18e495c*/ bool IsValidAdjustmentRuleOffest(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x18e49d0*/ void NormalizeAdjustmentRuleOffset(System.TimeSpan baseUtcOffset, ref System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0x18eaa04*/ string GetTimeZoneDirectoryUnity();
        static /*0x18eaa4c*/ System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> CreateAdjustmentRule(int year, ref long[] data, ref string[] names, string standardNameCurrentYear, string daylightNameCurrentYear);
        static /*0x18e3764*/ System.TimeZoneInfo CreateLocalUnity();
        /*0x18e1210*/ TimeZoneInfo(byte[] data, string id, bool dstDisabled);
        /*0x18e8620*/ TimeZoneInfo(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        /*0x18e8c74*/ TimeZoneInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18eb480*/ TimeZoneInfo();
        /*0x18e67ec*/ string get_DisplayName();
        /*0x18e6840*/ string get_StandardName();
        /*0x18e6894*/ string get_DaylightName();
        /*0x18e68e8*/ System.TimeSpan get_BaseUtcOffset();
        /*0x18e68f0*/ System.TimeZoneInfo.AdjustmentRule GetPreviousAdjustmentRule(System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x18e6a14*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime);
        /*0x18e6cb0*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        /*0x18e6a88*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        /*0x18e8148*/ bool Equals(System.TimeZoneInfo other);
        /*0x18e830c*/ bool Equals(object obj);
        /*0x18e8370*/ int GetHashCode();
        /*0x18e8198*/ bool HasSameRules(System.TimeZoneInfo other);
        /*0x18e8574*/ string ToString();
        /*0x18e88b4*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x18e8a98*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18e74c8*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, ref System.Nullable<int> ruleIndex);
        /*0x18e9088*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, bool dateTimeisUtc, ref System.Nullable<int> ruleIndex);
        /*0x18e9238*/ int CompareAdjustmentRuleToDateTime(System.TimeZoneInfo.AdjustmentRule rule, System.TimeZoneInfo.AdjustmentRule previousRule, System.DateTime dateTime, System.DateTime dateOnly, bool dateTimeisUtc);
        /*0x18e93c8*/ System.DateTime ConvertToUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0x18e9554*/ System.DateTime ConvertFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0x18e93d0*/ System.DateTime ConvertToFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta, bool convertToUtc);
        /*0x18e7630*/ System.Globalization.DaylightTimeStruct GetDaylightTime(int year, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x18e9f54*/ System.TimeSpan GetDaylightSavingsStartOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0x18ea01c*/ System.TimeSpan GetDaylightSavingsEndOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule);

        struct TZifType
        {
            /*0x10*/ System.TimeSpan UtcOffset;
            /*0x18*/ bool IsDst;
            /*0x19*/ byte AbbreviationIndex;

            /*0x18e66ac*/ TZifType(byte[] data, int index);
        }

        struct TZifHead
        {
            /*0x10*/ uint Magic;
            /*0x14*/ System.TimeZoneInfo.TZVersion Version;
            /*0x18*/ uint IsGmtCount;
            /*0x1c*/ uint IsStdCount;
            /*0x20*/ uint LeapCount;
            /*0x24*/ uint TimeCount;
            /*0x28*/ uint TypeCount;
            /*0x2c*/ uint CharCount;

            /*0x18e64f8*/ TZifHead(byte[] data, int index);
        }

        enum TZVersion
        {
            V1 = 0,
            V2 = 1,
            V3 = 2,
        }

        class AdjustmentRule : System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _dateStart;
            /*0x18*/ System.DateTime _dateEnd;
            /*0x20*/ System.TimeSpan _daylightDelta;
            /*0x28*/ System.TimeZoneInfo.TransitionTime _daylightTransitionStart;
            /*0x40*/ System.TimeZoneInfo.TransitionTime _daylightTransitionEnd;
            /*0x58*/ System.TimeSpan _baseUtcOffsetDelta;
            /*0x60*/ bool _noDaylightTransitions;

            static /*0x18eb1f4*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd);
            static /*0x18e486c*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            static /*0x18eb6e8*/ void ValidateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, bool noDaylightTransitions);
            /*0x18eb620*/ AdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            /*0x18ebecc*/ AdjustmentRule(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x18ec2e4*/ AdjustmentRule();
            /*0x18eb4b8*/ System.DateTime get_DateStart();
            /*0x18eb4c0*/ System.DateTime get_DateEnd();
            /*0x18eb4c8*/ System.TimeSpan get_DaylightDelta();
            /*0x18eb4d0*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionStart();
            /*0x18eb4e4*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionEnd();
            /*0x18eb4f8*/ System.TimeSpan get_BaseUtcOffsetDelta();
            /*0x18eb500*/ bool get_NoDaylightTransitions();
            /*0x18e74d4*/ bool get_HasDaylightSaving();
            /*0x18e8410*/ bool Equals(System.TimeZoneInfo.AdjustmentRule other);
            /*0x18eb614*/ int GetHashCode();
            /*0x18e9868*/ bool IsStartDateMarkerForBeginningOfYear();
            /*0x18e9918*/ bool IsEndDateMarkerForEndOfYear();
            /*0x18ebb70*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x18ebc88*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct TransitionTime : System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _timeOfDay;
            /*0x18*/ byte _month;
            /*0x19*/ byte _week;
            /*0x1a*/ byte _day;
            /*0x1c*/ System.DayOfWeek _dayOfWeek;
            /*0x20*/ bool _isFixedDateRule;

            static /*0x18eb508*/ bool op_Inequality(System.TimeZoneInfo.TransitionTime t1, System.TimeZoneInfo.TransitionTime t2);
            static /*0x18e4c10*/ System.TimeZoneInfo.TransitionTime CreateFixedDateRule(System.DateTime timeOfDay, int month, int day);
            static /*0x18e5a1c*/ System.TimeZoneInfo.TransitionTime CreateFloatingDateRule(System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek);
            static /*0x18ec460*/ void ValidateTransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek);
            /*0x18ec3f0*/ TransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek, bool isFixedDateRule);
            /*0x18ec948*/ TransitionTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x18ec31c*/ System.DateTime get_TimeOfDay();
            /*0x18ec324*/ int get_Month();
            /*0x18ec32c*/ int get_Week();
            /*0x18ec334*/ int get_Day();
            /*0x18ec33c*/ System.DayOfWeek get_DayOfWeek();
            /*0x18ec344*/ bool get_IsFixedDateRule();
            /*0x18ec34c*/ bool Equals(object obj);
            /*0x18eb53c*/ bool Equals(System.TimeZoneInfo.TransitionTime other);
            /*0x18ec3dc*/ int GetHashCode();
            /*0x18ec6ac*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x18ec79c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class CachedData
        {
            /*0x10*/ System.TimeZoneInfo _localTimeZone;

            /*0x18eb478*/ CachedData();
            /*0x18eccc4*/ System.TimeZoneInfo CreateLocal();
            /*0x18e6c78*/ System.TimeZoneInfo get_Local();
            /*0x18e6d28*/ System.DateTimeKind GetCorrespondingKind(System.TimeZoneInfo timeZone);
        }

        class <>c__DisplayClass16_0
        {
            /*0x10*/ string localtimeFilePath;
            /*0x18*/ string posixrulesFilePath;
            /*0x20*/ byte[] buffer;
            /*0x28*/ byte[] rawData;
            /*0x30*/ string id;
            /*0x38*/ string timeZoneDirectory;

            /*0x18e3210*/ <>c__DisplayClass16_0();
            /*0x18ece54*/ bool <FindTimeZoneId>b__0(string filePath);
        }

        class <>c
        {
            static /*0x0*/ System.TimeZoneInfo.<> <>9;
            static /*0x8*/ System.Func<char, bool> <>9__34_1;
            static /*0x10*/ System.Func<char, bool> <>9__34_0;
            static /*0x18*/ System.Func<char, bool> <>9__35_0;
            static /*0x20*/ System.Func<char, bool> <>9__37_0;
            static /*0x28*/ System.Func<char, bool> <>9__38_0;
            static /*0x30*/ System.Comparison<System.TimeZoneInfo.AdjustmentRule> <>9__161_0;

            static /*0x18ecf48*/ <>c();
            /*0x18ecfac*/ <>c();
            /*0x18ecfb4*/ bool <TZif_ParsePosixName>b__34_1(char c);
            /*0x18ecfc4*/ bool <TZif_ParsePosixName>b__34_0(char c);
            /*0x18ed0c8*/ bool <TZif_ParsePosixOffset>b__35_0(char c);
            /*0x18ed150*/ bool <TZif_ParsePosixDate>b__37_0(char c);
            /*0x18ed16c*/ bool <TZif_ParsePosixTime>b__38_0(char c);
            /*0x18ed17c*/ int <CreateLocalUnity>b__161_0(System.TimeZoneInfo.AdjustmentRule rule1, System.TimeZoneInfo.AdjustmentRule rule2);
        }
    }

    class AccessViolationException : System.SystemException
    {
        /*0x18ed1b0*/ AccessViolationException();
        /*0x18ed20c*/ AccessViolationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Action : System.MulticastDelegate
    {
        /*0x18ed214*/ Action(object object, nint method);
        /*0x18ed2d0*/ void Invoke();
    }

    class Action<T> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T obj);
        System.IAsyncResult BeginInvoke(T obj, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2);
    }

    class Action<T1, T2, T3> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Action<T1, T2, T3, T4> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3, T4, T5> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Action<T1, T2, T3, T4, T5, T6> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7, T8> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Func<TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke();
        System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T arg);
    }

    class Func<T1, T2, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Func<T1, T2, T3, T4, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Func<T1, T2, T3, T4, T5, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Func<T1, T2, T3, T4, T5, T6, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Comparison<T> : System.MulticastDelegate
    {
        Comparison(object object, nint method);
        int Invoke(T x, T y);
    }

    class Converter<TInput, TOutput> : System.MulticastDelegate
    {
        Converter(object object, nint method);
        TOutput Invoke(TInput input);
    }

    class Predicate<T> : System.MulticastDelegate
    {
        Predicate(object object, nint method);
        bool Invoke(T obj);
    }

    class AggregateException : System.Exception
    {
        /*0x90*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> m_innerExceptions;

        /*0x18ed2e4*/ AggregateException();
        /*0x18ed3f8*/ AggregateException(System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x18ed514*/ AggregateException(System.Exception[] innerExceptions);
        /*0x18ed450*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x18ed56c*/ AggregateException(string message, System.Exception[] innerExceptions);
        /*0x18ed570*/ AggregateException(string message, System.Collections.Generic.IList<System.Exception> innerExceptions);
        /*0x18ed954*/ AggregateException(System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x18ed9ac*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x18eda70*/ AggregateException(string message, System.Collections.Generic.IList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x18edeac*/ AggregateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18ee094*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18ee1e0*/ System.Exception GetBaseException();
        /*0x18ee298*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> get_InnerExceptions();
        /*0x18ee2a0*/ System.AggregateException Flatten();
        /*0x18ee660*/ string get_Message();
        /*0x18ee7ec*/ string ToString();
    }

    class ApplicationException : System.Exception
    {
        /*0x18eea00*/ ApplicationException();
        /*0x18eea80*/ ApplicationException(string message);
        /*0x18eeaf8*/ ApplicationException(string message, System.Exception innerException);
        /*0x18eeb78*/ ApplicationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentException : System.SystemException
    {
        /*0x90*/ string _paramName;

        /*0x18eebf8*/ ArgumentException();
        /*0x18ed930*/ ArgumentException(string message);
        /*0x18eec54*/ ArgumentException(string message, System.Exception innerException);
        /*0x18eec78*/ ArgumentException(string message, string paramName, System.Exception innerException);
        /*0x18e7494*/ ArgumentException(string message, string paramName);
        /*0x18eecb0*/ ArgumentException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18eed38*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18eee14*/ string get_Message();
    }

    class ArgumentNullException : System.ArgumentException
    {
        /*0x18eeeb4*/ ArgumentNullException();
        /*0x18e7428*/ ArgumentNullException(string paramName);
        /*0x18eef10*/ ArgumentNullException(string paramName, string message);
        /*0x18eef48*/ ArgumentNullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentOutOfRangeException : System.ArgumentException
    {
        /*0x98*/ object _actualValue;

        /*0x18eef4c*/ ArgumentOutOfRangeException();
        /*0x18eefa8*/ ArgumentOutOfRangeException(string paramName);
        /*0x18ea904*/ ArgumentOutOfRangeException(string paramName, string message);
        /*0x18ebb34*/ ArgumentOutOfRangeException(string paramName, object actualValue, string message);
        /*0x18ef014*/ ArgumentOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18ef0ec*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18ef1c4*/ string get_Message();
    }

    class ArithmeticException : System.SystemException
    {
        /*0x18ef270*/ ArithmeticException();
        /*0x18ef2cc*/ ArithmeticException(string message);
        /*0x18ef2f0*/ ArithmeticException(string message, System.Exception innerException);
        /*0x18ef314*/ ArithmeticException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ArraySegment<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
    {
        static /*0x0*/ System.ArraySegment<T> <Empty>k__BackingField;
        /*0x0*/ T[] _array;
        /*0x0*/ int _offset;
        /*0x0*/ int _count;

        static ArraySegment();
        static System.ArraySegment<T> get_Empty();
        ArraySegment(T[] array);
        ArraySegment(T[] array, int offset, int count);
        T[] get_Array();
        int get_Offset();
        int get_Count();
        System.ArraySegment.Enumerator<T> GetEnumerator();
        int GetHashCode();
        void CopyTo(T[] destination, int destinationIndex);
        bool Equals(object obj);
        bool Equals(System.ArraySegment<T> obj);
        T System.Collections.Generic.IList<T>.get_Item(int index);
        void System.Collections.Generic.IList<T>.set_Item(int index, T value);
        int System.Collections.Generic.IList<T>.IndexOf(T item);
        void System.Collections.Generic.IList<T>.Insert(int index, T item);
        void System.Collections.Generic.IList<T>.RemoveAt(int index);
        T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index);
        bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
        void System.Collections.Generic.ICollection<T>.Add(T item);
        void System.Collections.Generic.ICollection<T>.Clear();
        bool System.Collections.Generic.ICollection<T>.Contains(T item);
        bool System.Collections.Generic.ICollection<T>.Remove(T item);
        System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        void ThrowInvalidOperationIfDefault();

        struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ T[] _array;
            /*0x0*/ int _start;
            /*0x0*/ int _end;
            /*0x0*/ int _current;

            Enumerator(System.ArraySegment<T> arraySegment);
            bool MoveNext();
            T get_Current();
            object System.Collections.IEnumerator.get_Current();
            void System.Collections.IEnumerator.Reset();
            void Dispose();
        }
    }

    class ArrayTypeMismatchException : System.SystemException
    {
        /*0x18ef31c*/ ArrayTypeMismatchException();
        /*0x18ef378*/ ArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class AssemblyLoadEventArgs : System.EventArgs
    {
        /*0x10*/ System.Reflection.Assembly <LoadedAssembly>k__BackingField;

        /*0x18ef380*/ AssemblyLoadEventArgs(System.Reflection.Assembly loadedAssembly);
        /*0x18ef3ec*/ System.Reflection.Assembly get_LoadedAssembly();
    }

    class AssemblyLoadEventHandler : System.MulticastDelegate
    {
        /*0x18ef3f4*/ AssemblyLoadEventHandler(object object, nint method);
        /*0x18ef524*/ void Invoke(object sender, System.AssemblyLoadEventArgs args);
    }

    class AsyncCallback : System.MulticastDelegate
    {
        /*0x18ef538*/ AsyncCallback(object object, nint method);
        /*0x18ef664*/ void Invoke(System.IAsyncResult ar);
        /*0x18ef678*/ System.IAsyncResult BeginInvoke(System.IAsyncResult ar, System.AsyncCallback callback, object object);
        /*0x18ef698*/ void EndInvoke(System.IAsyncResult result);
    }

    enum AttributeTargets
    {
        Assembly = 1,
        Module = 2,
        Class = 4,
        Struct = 8,
        Enum = 16,
        Constructor = 32,
        Method = 64,
        Property = 128,
        Field = 256,
        Event = 512,
        Interface = 1024,
        Parameter = 2048,
        Delegate = 4096,
        ReturnValue = 8192,
        GenericParameter = 16384,
        All = 32767,
    }

    class AttributeUsageAttribute : System.Attribute
    {
        static /*0x0*/ System.AttributeUsageAttribute Default;
        /*0x10*/ System.AttributeTargets _attributeTarget;
        /*0x14*/ bool _allowMultiple;
        /*0x15*/ bool _inherited;

        static /*0x18ef704*/ AttributeUsageAttribute();
        /*0x18ef6a4*/ AttributeUsageAttribute(System.AttributeTargets validOn);
        /*0x18ef6dc*/ bool get_AllowMultiple();
        /*0x18ef6e4*/ void set_AllowMultiple(bool value);
        /*0x18ef6f0*/ bool get_Inherited();
        /*0x18ef6f8*/ void set_Inherited(bool value);
    }

    class BadImageFormatException : System.SystemException
    {
        /*0x90*/ string _fileName;
        /*0x98*/ string _fusionLog;

        /*0x18ef77c*/ BadImageFormatException();
        /*0x18ef7d8*/ BadImageFormatException(string message);
        /*0x18ef7fc*/ BadImageFormatException(string message, System.Exception inner);
        /*0x18ef820*/ BadImageFormatException(string message, string fileName);
        /*0x18ef854*/ BadImageFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18ef904*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x18efa1c*/ string get_Message();
        /*0x18efa34*/ void SetMessageField();
        /*0x18efab0*/ string ToString();
    }

    class BitConverter
    {
        static /*0x0*/ bool IsLittleEndian;

        static /*0x18f0908*/ BitConverter();
        static /*0x18efc94*/ byte[] GetBytes(bool value);
        static /*0x18efcfc*/ byte[] GetBytes(char value);
        static /*0x18efd60*/ byte[] GetBytes(short value);
        static /*0x18efdc4*/ byte[] GetBytes(int value);
        static /*0x18efe28*/ byte[] GetBytes(long value);
        static /*0x18efe8c*/ byte[] GetBytes(ushort value);
        static /*0x18efef0*/ byte[] GetBytes(uint value);
        static /*0x18eff54*/ bool TryWriteBytes(System.Span<byte> destination, uint value);
        static /*0x18effd8*/ byte[] GetBytes(ulong value);
        static /*0x18f003c*/ byte[] GetBytes(float value);
        static /*0x18f00a8*/ byte[] GetBytes(double value);
        static /*0x18f0114*/ char ToChar(byte[] value, int startIndex);
        static /*0x18f0178*/ short ToInt16(byte[] value, int startIndex);
        static /*0x18f01fc*/ int ToInt32(byte[] value, int startIndex);
        static /*0x18f0280*/ long ToInt64(byte[] value, int startIndex);
        static /*0x18f0304*/ ushort ToUInt16(byte[] value, int startIndex);
        static /*0x18f0368*/ uint ToUInt32(byte[] value, int startIndex);
        static /*0x18f03cc*/ ulong ToUInt64(byte[] value, int startIndex);
        static /*0x18f0430*/ float ToSingle(byte[] value, int startIndex);
        static /*0x18f049c*/ double ToDouble(byte[] value, int startIndex);
        static /*0x18f0508*/ string ToString(byte[] value, int startIndex, int length);
        static /*0x18f07e8*/ string ToString(byte[] value);
        static /*0x18f0858*/ bool ToBoolean(byte[] value, int startIndex);
        static /*0x18f08e8*/ long DoubleToInt64Bits(double value);
        static /*0x18f08f0*/ double Int64BitsToDouble(long value);
        static /*0x18f08f8*/ int SingleToInt32Bits(float value);
        static /*0x18f0900*/ float Int32BitsToSingle(int value);

        class <>c
        {
            static /*0x0*/ System.BitConverter.<> <>9;
            static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<System.Byte[], int, int>> <>9__38_0;

            static /*0x18f0954*/ <>c();
            /*0x18f09b8*/ <>c();
            /*0x18f09c0*/ void <ToString>b__38_0(System.Span<char> dst, System.ValueTuple<System.Byte[], int, int> state);
        }
    }

    struct Boolean : System.IComparable, System.IConvertible, System.IComparable<bool>, System.IEquatable<bool>
    {
        static int True = 1;
        static int False = 0;
        static string TrueLiteral = "True";
        static string FalseLiteral = "False";
        static /*0x0*/ string TrueString;
        static /*0x8*/ string FalseString;
        /*0x10*/ bool m_value;

        static /*0x18f2878*/ Boolean();
        static /*0x18f0d60*/ bool Parse(string value);
        static /*0x18f0e3c*/ bool Parse(System.ReadOnlySpan<char> value);
        static /*0x18f11f4*/ bool TryParse(string value, ref bool result);
        static /*0x18f0f00*/ bool TryParse(System.ReadOnlySpan<char> value, ref bool result);
        static /*0x18f12b0*/ System.ReadOnlySpan<char> TrimWhiteSpaceAndNull(System.ReadOnlySpan<char> value);
        /*0x18f0b54*/ int GetHashCode();
        /*0x18f0b64*/ string ToString();
        /*0x18f0bd0*/ string ToString(System.IFormatProvider provider);
        /*0x18f0bd4*/ bool Equals(object obj);
        /*0x18f0c4c*/ bool Equals(bool obj);
        /*0x18f0c60*/ int CompareTo(object obj);
        /*0x18f0d38*/ int CompareTo(bool value);
        /*0x18f14bc*/ System.TypeCode GetTypeCode();
        /*0x18f14c4*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x18f14d4*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x18f1560*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x18f15c4*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x18f1628*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x18f168c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x18f16f0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x18f1754*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x18f17b8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x18f181c*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x18f1880*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x18f18f8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x18f1970*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x18f1a28*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x18f1ab4*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Byte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<byte>, System.IEquatable<byte>, System.ISpanFormattable
    {
        static byte MaxValue = 255;
        static byte MinValue = 0;
        /*0x10*/ byte m_value;

        static /*0x18f2a5c*/ byte Parse(string s, System.IFormatProvider provider);
        static /*0x18f2c84*/ byte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x18f2ae8*/ byte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x18f2d28*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref byte result);
        static /*0x18f2dd0*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref byte result);
        /*0x18f2904*/ int CompareTo(object value);
        /*0x18f29c0*/ int CompareTo(byte value);
        /*0x18f29cc*/ bool Equals(object obj);
        /*0x18f2a44*/ bool Equals(byte obj);
        /*0x18f2a54*/ int GetHashCode();
        /*0x18f2e8c*/ string ToString();
        /*0x18f2f24*/ string ToString(string format);
        /*0x18f2fd8*/ string ToString(System.IFormatProvider provider);
        /*0x18f3074*/ string ToString(string format, System.IFormatProvider provider);
        /*0x18f312c*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x18f31d0*/ System.TypeCode GetTypeCode();
        /*0x18f31d8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x18f3240*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x18f32a0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x18f3350*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x18f3358*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x18f33b8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x18f3418*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x18f3478*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x18f34d8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x18f3538*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x18f3598*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x18f35fc*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x18f3660*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x18f3710*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x18f379c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CLSCompliantAttribute : System.Attribute
    {
        /*0x10*/ bool _compliant;

        /*0x18f3844*/ CLSCompliantAttribute(bool isCompliant);
    }

    struct Char : System.IComparable, System.IComparable<char>, System.IEquatable<char>, System.IConvertible
    {
        static char MaxValue = 65535;
        static char MinValue = 0;
        static int UNICODE_PLANE00_END = 65535;
        static int UNICODE_PLANE01_START = 65536;
        static int UNICODE_PLANE16_END = 1114111;
        static int HIGH_SURROGATE_START = 55296;
        static int LOW_SURROGATE_END = 57343;
        static /*0x0*/ byte[] s_categoryForLatin1;
        /*0x10*/ char m_value;

        static /*0x18f5654*/ Char();
        static /*0x18f386c*/ bool IsLatin1(char ch);
        static /*0x18f387c*/ bool IsAscii(char ch);
        static /*0x18f388c*/ System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(char ch);
        static /*0x18f3a64*/ string ToString(char c);
        static /*0x18f3ac8*/ char Parse(string s);
        static /*0x18f3b6c*/ bool TryParse(string s, ref char result);
        static /*0x18ed044*/ bool IsDigit(char c);
        static /*0x18f3bac*/ bool CheckLetter(System.Globalization.UnicodeCategory uc);
        static /*0x18f3bb8*/ bool IsLetter(char c);
        static /*0x18f3c90*/ bool IsWhiteSpaceLatin1(char c);
        static /*0x18f1404*/ bool IsWhiteSpace(char c);
        static /*0x18f3ccc*/ bool IsUpper(char c);
        static /*0x18f3d88*/ bool IsLower(char c);
        static /*0x18f3e44*/ bool CheckPunctuation(System.Globalization.UnicodeCategory uc);
        static /*0x18f3e54*/ bool IsPunctuation(char c);
        static /*0x18f3f00*/ bool CheckLetterOrDigit(System.Globalization.UnicodeCategory uc);
        static /*0x18f3f1c*/ bool IsLetterOrDigit(char c);
        static /*0x18f3fd8*/ char ToUpper(char c, System.Globalization.CultureInfo culture);
        static /*0x18f405c*/ char ToUpper(char c);
        static /*0x18f40d8*/ char ToUpperInvariant(char c);
        static /*0x18f4154*/ char ToLower(char c, System.Globalization.CultureInfo culture);
        static /*0x18f41d8*/ char ToLower(char c);
        static /*0x18f4254*/ char ToLowerInvariant(char c);
        static /*0x18f4a38*/ bool IsControl(char c);
        static /*0x18f4ac4*/ bool IsLetterOrDigit(string s, int index);
        static /*0x18f4c34*/ bool CheckNumber(System.Globalization.UnicodeCategory uc);
        static /*0x18f4c44*/ bool IsNumber(char c);
        static /*0x18f4d1c*/ bool IsNumber(string s, int index);
        static /*0x18f4ea8*/ bool CheckSeparator(System.Globalization.UnicodeCategory uc);
        static /*0x18f4eb8*/ bool IsSeparatorLatin1(char c);
        static /*0x18f4ecc*/ bool IsSeparator(char c);
        static /*0x18f4f7c*/ bool IsSurrogate(char c);
        static /*0x18f4f8c*/ bool IsSurrogate(string s, int index);
        static /*0x18f5090*/ bool IsWhiteSpace(string s, int index);
        static /*0x18f5210*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char c);
        static /*0x18f5290*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
        static /*0x18f53dc*/ bool IsHighSurrogate(char c);
        static /*0x18f53ec*/ bool IsHighSurrogate(string s, int index);
        static /*0x18f54f4*/ bool IsLowSurrogate(char c);
        static /*0x18f5504*/ bool IsSurrogatePair(char highSurrogate, char lowSurrogate);
        static /*0x18f5528*/ int ConvertToUtf32(char highSurrogate, char lowSurrogate);
        /*0x18f3908*/ int GetHashCode();
        /*0x18f3914*/ bool Equals(object obj);
        /*0x18f398c*/ bool Equals(char obj);
        /*0x18f399c*/ int CompareTo(object value);
        /*0x18f3a58*/ int CompareTo(char value);
        /*0x18e3c04*/ string ToString();
        /*0x18f3a6c*/ string ToString(System.IFormatProvider provider);
        /*0x18f42d0*/ System.TypeCode GetTypeCode();
        /*0x18f42d8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x18f4364*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x18f436c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x18f4420*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x18f44d4*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x18f4584*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x18f45e0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x18f4640*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x18f46a0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x18f4700*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x18f4760*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x18f47ec*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x18f4878*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x18f4904*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x18f4990*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CharEnumerator : System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<char>, System.IDisposable, System.ICloneable
    {
        /*0x10*/ string _str;
        /*0x18*/ int _index;
        /*0x1c*/ char _currentElement;

        /*0x18f56e8*/ CharEnumerator(string str);
        /*0x18f58a4*/ CharEnumerator();
        /*0x18f5718*/ object Clone();
        /*0x18f5720*/ bool MoveNext();
        /*0x18f5774*/ void Dispose();
        /*0x18f578c*/ object System.Collections.IEnumerator.get_Current();
        /*0x18f57f0*/ char get_Current();
        /*0x18f5894*/ void Reset();
    }

    class Convert
    {
        static /*0x0*/ sbyte[] s_decodingMap;
        static /*0x8*/ System.Type[] ConvertTypes;
        static /*0x10*/ System.Type EnumType;
        static /*0x18*/ char[] base64Table;
        static /*0x20*/ object DBNull;

        static /*0x18fd07c*/ Convert();
        static /*0x18f58dc*/ bool TryDecodeFromUtf16(System.ReadOnlySpan<char> utf16, System.Span<byte> bytes, ref int consumed, ref int written);
        static /*0x18f5c50*/ int Decode(ref char encodedChars, ref sbyte decodingMap);
        static /*0x18f5ca0*/ void WriteThreeLowOrderBytes(ref byte destination, int value);
        static /*0x18f5cb8*/ System.TypeCode GetTypeCode(object value);
        static /*0x18f5d7c*/ object ChangeType(object value, System.TypeCode typeCode, System.IFormatProvider provider);
        static /*0x18f1b64*/ object DefaultToType(System.IConvertible value, System.Type targetType, System.IFormatProvider provider);
        static /*0x18f65c4*/ object ChangeType(object value, System.Type conversionType, System.IFormatProvider provider);
        static /*0x18f71c0*/ void ThrowCharOverflowException();
        static /*0x18f7210*/ void ThrowByteOverflowException();
        static /*0x18f7260*/ void ThrowSByteOverflowException();
        static /*0x18f72b0*/ void ThrowInt16OverflowException();
        static /*0x18f7300*/ void ThrowUInt16OverflowException();
        static /*0x18f7350*/ void ThrowInt32OverflowException();
        static /*0x18f73a0*/ void ThrowUInt32OverflowException();
        static /*0x18f73f0*/ void ThrowInt64OverflowException();
        static /*0x18f7440*/ void ThrowUInt64OverflowException();
        static /*0x18f7490*/ bool ToBoolean(object value);
        static /*0x18f7584*/ bool ToBoolean(object value, System.IFormatProvider provider);
        static /*0x18f7688*/ bool ToBoolean(sbyte value);
        static /*0x18f3234*/ bool ToBoolean(byte value);
        static /*0x18f7694*/ bool ToBoolean(short value);
        static /*0x18f76a0*/ bool ToBoolean(ushort value);
        static /*0x18f76ac*/ bool ToBoolean(int value);
        static /*0x18f76b8*/ bool ToBoolean(uint value);
        static /*0x18f76c4*/ bool ToBoolean(long value);
        static /*0x18f76d0*/ bool ToBoolean(ulong value);
        static /*0x18f76dc*/ bool ToBoolean(string value);
        static /*0x18f7744*/ bool ToBoolean(string value, System.IFormatProvider provider);
        static /*0x18f77ac*/ bool ToBoolean(float value);
        static /*0x18f77b8*/ bool ToBoolean(double value);
        static /*0x18f77c4*/ bool ToBoolean(decimal value);
        static /*0x18f7838*/ char ToChar(object value, System.IFormatProvider provider);
        static /*0x18f793c*/ char ToChar(sbyte value);
        static /*0x18f3298*/ char ToChar(byte value);
        static /*0x18f7990*/ char ToChar(short value);
        static /*0x18f79e8*/ char ToChar(ushort value);
        static /*0x18f79ec*/ char ToChar(int value);
        static /*0x18f7a44*/ char ToChar(uint value);
        static /*0x18f7a9c*/ char ToChar(long value);
        static /*0x18f7af4*/ char ToChar(ulong value);
        static /*0x18f7b4c*/ char ToChar(string value);
        static /*0x18f7ba0*/ char ToChar(string value, System.IFormatProvider provider);
        static /*0x18f7c44*/ sbyte ToSByte(object value, System.IFormatProvider provider);
        static /*0x18f15bc*/ sbyte ToSByte(bool value);
        static /*0x18f43c4*/ sbyte ToSByte(char value);
        static /*0x18f32f8*/ sbyte ToSByte(byte value);
        static /*0x18f7d48*/ sbyte ToSByte(short value);
        static /*0x18f7da8*/ sbyte ToSByte(ushort value);
        static /*0x18f7e04*/ sbyte ToSByte(int value);
        static /*0x18f7e5c*/ sbyte ToSByte(uint value);
        static /*0x18f7eb4*/ sbyte ToSByte(long value);
        static /*0x18f7f0c*/ sbyte ToSByte(ulong value);
        static /*0x18f7f64*/ sbyte ToSByte(float value);
        static /*0x18f7fc0*/ sbyte ToSByte(double value);
        static /*0x18f811c*/ sbyte ToSByte(decimal value);
        static /*0x18f8190*/ sbyte ToSByte(string value, System.IFormatProvider provider);
        static /*0x18f81a0*/ byte ToByte(object value, System.IFormatProvider provider);
        static /*0x18f1620*/ byte ToByte(bool value);
        static /*0x18f4478*/ byte ToByte(char value);
        static /*0x18f82a4*/ byte ToByte(sbyte value);
        static /*0x18f82fc*/ byte ToByte(short value);
        static /*0x18f8358*/ byte ToByte(ushort value);
        static /*0x18f83b4*/ byte ToByte(int value);
        static /*0x18f840c*/ byte ToByte(uint value);
        static /*0x18f8464*/ byte ToByte(long value);
        static /*0x18f84bc*/ byte ToByte(ulong value);
        static /*0x18f8514*/ byte ToByte(float value);
        static /*0x18f8570*/ byte ToByte(double value);
        static /*0x18f85d0*/ byte ToByte(decimal value);
        static /*0x18f8644*/ byte ToByte(string value);
        static /*0x18f86b8*/ byte ToByte(string value, System.IFormatProvider provider);
        static /*0x18f86cc*/ short ToInt16(object value, System.IFormatProvider provider);
        static /*0x18f1684*/ short ToInt16(bool value);
        static /*0x18f452c*/ short ToInt16(char value);
        static /*0x18f87d0*/ short ToInt16(sbyte value);
        static /*0x18f33b0*/ short ToInt16(byte value);
        static /*0x18f87d8*/ short ToInt16(ushort value);
        static /*0x18f8830*/ short ToInt16(int value);
        static /*0x18f8888*/ short ToInt16(uint value);
        static /*0x18f88e0*/ short ToInt16(long value);
        static /*0x18f8938*/ short ToInt16(ulong value);
        static /*0x18f8990*/ short ToInt16(float value);
        static /*0x18f89ec*/ short ToInt16(double value);
        static /*0x18f8a4c*/ short ToInt16(decimal value);
        static /*0x18f8ac0*/ short ToInt16(string value, System.IFormatProvider provider);
        static /*0x18f8ad8*/ ushort ToUInt16(object value, System.IFormatProvider provider);
        static /*0x18f16e8*/ ushort ToUInt16(bool value);
        static /*0x18f45dc*/ ushort ToUInt16(char value);
        static /*0x18f8bdc*/ ushort ToUInt16(sbyte value);
        static /*0x18f3410*/ ushort ToUInt16(byte value);
        static /*0x18f8c30*/ ushort ToUInt16(short value);
        static /*0x18f8c88*/ ushort ToUInt16(int value);
        static /*0x18f8ce0*/ ushort ToUInt16(uint value);
        static /*0x18f8d38*/ ushort ToUInt16(long value);
        static /*0x18f8d90*/ ushort ToUInt16(ulong value);
        static /*0x18f8de8*/ ushort ToUInt16(float value);
        static /*0x18f8e44*/ ushort ToUInt16(double value);
        static /*0x18f8ea4*/ ushort ToUInt16(decimal value);
        static /*0x18f8f18*/ ushort ToUInt16(string value, System.IFormatProvider provider);
        static /*0x18f8f30*/ int ToInt32(object value);
        static /*0x18f9024*/ int ToInt32(object value, System.IFormatProvider provider);
        static /*0x18f174c*/ int ToInt32(bool value);
        static /*0x18f4638*/ int ToInt32(char value);
        static /*0x18f3470*/ int ToInt32(byte value);
        static /*0x18f9128*/ int ToInt32(short value);
        static /*0x18f9130*/ int ToInt32(ushort value);
        static /*0x18f9138*/ int ToInt32(uint value);
        static /*0x18f918c*/ int ToInt32(long value);
        static /*0x18f91e4*/ int ToInt32(ulong value);
        static /*0x18f923c*/ int ToInt32(float value);
        static /*0x18f8020*/ int ToInt32(double value);
        static /*0x18f9298*/ int ToInt32(decimal value);
        static /*0x18f930c*/ int ToInt32(string value);
        static /*0x18f9384*/ int ToInt32(string value, System.IFormatProvider provider);
        static /*0x18f939c*/ uint ToUInt32(object value);
        static /*0x18f9490*/ uint ToUInt32(object value, System.IFormatProvider provider);
        static /*0x18f17b0*/ uint ToUInt32(bool value);
        static /*0x18f4698*/ uint ToUInt32(char value);
        static /*0x18f9594*/ uint ToUInt32(sbyte value);
        static /*0x18f34d0*/ uint ToUInt32(byte value);
        static /*0x18f95e8*/ uint ToUInt32(short value);
        static /*0x18f963c*/ uint ToUInt32(ushort value);
        static /*0x18f9644*/ uint ToUInt32(int value);
        static /*0x18f9698*/ uint ToUInt32(long value);
        static /*0x18f96f0*/ uint ToUInt32(ulong value);
        static /*0x18f9748*/ uint ToUInt32(float value);
        static /*0x18f97a4*/ uint ToUInt32(double value);
        static /*0x18f984c*/ uint ToUInt32(decimal value);
        static /*0x18f98c0*/ uint ToUInt32(string value, System.IFormatProvider provider);
        static /*0x18f98d8*/ long ToInt64(object value);
        static /*0x18f99cc*/ long ToInt64(object value, System.IFormatProvider provider);
        static /*0x18f1814*/ long ToInt64(bool value);
        static /*0x18f46f8*/ long ToInt64(char value);
        static /*0x18f9ad0*/ long ToInt64(sbyte value);
        static /*0x18f3530*/ long ToInt64(byte value);
        static /*0x18f9ad8*/ long ToInt64(short value);
        static /*0x18f9ae0*/ long ToInt64(ushort value);
        static /*0x18f9ae8*/ long ToInt64(int value);
        static /*0x18f9af0*/ long ToInt64(uint value);
        static /*0x18f9af8*/ long ToInt64(ulong value);
        static /*0x18f9b4c*/ long ToInt64(float value);
        static /*0x18f9ba8*/ long ToInt64(double value);
        static /*0x18f9cb8*/ long ToInt64(decimal value);
        static /*0x18f9d2c*/ long ToInt64(string value);
        static /*0x18f9da4*/ long ToInt64(string value, System.IFormatProvider provider);
        static /*0x18f9dbc*/ ulong ToUInt64(object value, System.IFormatProvider provider);
        static /*0x18f1878*/ ulong ToUInt64(bool value);
        static /*0x18f4758*/ ulong ToUInt64(char value);
        static /*0x18f9ec0*/ ulong ToUInt64(sbyte value);
        static /*0x18f3590*/ ulong ToUInt64(byte value);
        static /*0x18f9f18*/ ulong ToUInt64(short value);
        static /*0x18f9f70*/ ulong ToUInt64(ushort value);
        static /*0x18f9f78*/ ulong ToUInt64(int value);
        static /*0x18f9fcc*/ ulong ToUInt64(uint value);
        static /*0x18f9fd4*/ ulong ToUInt64(long value);
        static /*0x18fa028*/ ulong ToUInt64(float value);
        static /*0x18fa084*/ ulong ToUInt64(double value);
        static /*0x18fa180*/ ulong ToUInt64(decimal value);
        static /*0x18fa1f4*/ ulong ToUInt64(string value);
        static /*0x18fa26c*/ ulong ToUInt64(string value, System.IFormatProvider provider);
        static /*0x18fa284*/ float ToSingle(object value, System.IFormatProvider provider);
        static /*0x18fa388*/ float ToSingle(sbyte value);
        static /*0x18f35f0*/ float ToSingle(byte value);
        static /*0x18fa394*/ float ToSingle(short value);
        static /*0x18fa3a0*/ float ToSingle(ushort value);
        static /*0x18fa3ac*/ float ToSingle(int value);
        static /*0x18fa3b4*/ float ToSingle(uint value);
        static /*0x18fa3c0*/ float ToSingle(long value);
        static /*0x18fa3c8*/ float ToSingle(ulong value);
        static /*0x18fa3d4*/ float ToSingle(double value);
        static /*0x18fa3dc*/ float ToSingle(decimal value);
        static /*0x18fa444*/ float ToSingle(string value, System.IFormatProvider provider);
        static /*0x18f18e4*/ float ToSingle(bool value);
        static /*0x18fa460*/ double ToDouble(object value);
        static /*0x18fa554*/ double ToDouble(object value, System.IFormatProvider provider);
        static /*0x18fa658*/ double ToDouble(sbyte value);
        static /*0x18f3654*/ double ToDouble(byte value);
        static /*0x18fa664*/ double ToDouble(short value);
        static /*0x18fa670*/ double ToDouble(ushort value);
        static /*0x18fa67c*/ double ToDouble(int value);
        static /*0x18fa684*/ double ToDouble(uint value);
        static /*0x18fa68c*/ double ToDouble(long value);
        static /*0x18fa694*/ double ToDouble(ulong value);
        static /*0x18fa69c*/ double ToDouble(float value);
        static /*0x18fa6a4*/ double ToDouble(decimal value);
        static /*0x18fa70c*/ double ToDouble(string value, System.IFormatProvider provider);
        static /*0x18f195c*/ double ToDouble(bool value);
        static /*0x18fa728*/ decimal ToDecimal(object value);
        static /*0x18fa844*/ decimal ToDecimal(object value, System.IFormatProvider provider);
        static /*0x18fa96c*/ decimal ToDecimal(sbyte value);
        static /*0x18f36b8*/ decimal ToDecimal(byte value);
        static /*0x18fa9c4*/ decimal ToDecimal(short value);
        static /*0x18faa1c*/ decimal ToDecimal(ushort value);
        static /*0x18faa74*/ decimal ToDecimal(int value);
        static /*0x18faacc*/ decimal ToDecimal(uint value);
        static /*0x18fab24*/ decimal ToDecimal(long value);
        static /*0x18fab7c*/ decimal ToDecimal(ulong value);
        static /*0x18fabd4*/ decimal ToDecimal(float value);
        static /*0x18fac34*/ decimal ToDecimal(double value);
        static /*0x18fac94*/ decimal ToDecimal(string value, System.IFormatProvider provider);
        static /*0x18fad1c*/ decimal ToDecimal(decimal value);
        static /*0x18f19cc*/ decimal ToDecimal(bool value);
        static /*0x18fad20*/ System.DateTime ToDateTime(object value, System.IFormatProvider provider);
        static /*0x18fae50*/ System.DateTime ToDateTime(string value, System.IFormatProvider provider);
        static /*0x18faee0*/ string ToString(object value, System.IFormatProvider provider);
        static /*0x18fb080*/ string ToString(char value, System.IFormatProvider provider);
        static /*0x18fb098*/ string ToString(int value);
        static /*0x18fb100*/ string ToString(int value, System.IFormatProvider provider);
        static /*0x18fb11c*/ byte ToByte(string value, int fromBase);
        static /*0x18fb228*/ sbyte ToSByte(string value, int fromBase);
        static /*0x18fb344*/ short ToInt16(string value, int fromBase);
        static /*0x18fb460*/ ushort ToUInt16(string value, int fromBase);
        static /*0x18fb56c*/ int ToInt32(string value, int fromBase);
        static /*0x18fb644*/ uint ToUInt32(string value, int fromBase);
        static /*0x18fb71c*/ long ToInt64(string value, int fromBase);
        static /*0x18fb7f4*/ ulong ToUInt64(string value, int fromBase);
        static /*0x18fb8cc*/ string ToString(byte value, int toBase);
        static /*0x18fb954*/ string ToString(int value, int toBase);
        static /*0x18fb9d8*/ string ToBase64String(byte[] inArray);
        static /*0x18fbc48*/ string ToBase64String(byte[] inArray, int offset, int length);
        static /*0x18fbcb8*/ string ToBase64String(byte[] inArray, int offset, int length, System.Base64FormattingOptions options);
        static /*0x18fba94*/ string ToBase64String(System.ReadOnlySpan<byte> bytes, System.Base64FormattingOptions options);
        static /*0x18fc168*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);
        static /*0x18fc1f0*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, System.Base64FormattingOptions options);
        static /*0x18fbf24*/ int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks);
        static /*0x18fbe6c*/ int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks);
        static /*0x18fc51c*/ byte[] FromBase64String(string s);
        static /*0x18fc77c*/ bool TryFromBase64Chars(System.ReadOnlySpan<char> chars, System.Span<byte> bytes, ref int bytesWritten);
        static /*0x18fcc74*/ void CopyToTempBufferWithoutWhiteSpace(System.ReadOnlySpan<char> chars, System.Span<char> tempBuffer, ref int consumed, ref int charsWritten);
        static /*0x18fcd94*/ bool IsSpace(char c);
        static /*0x18fcdcc*/ byte[] FromBase64CharArray(char[] inArray, int offset, int length);
        static /*0x18fc5d4*/ byte[] FromBase64CharPtr(char* inputPtr, int inputLength);
        static /*0x18fcfbc*/ int FromBase64_ComputeResultLength(char* inputPtr, int inputLength);
    }

    enum Base64FormattingOptions
    {
        None = 0,
        InsertLineBreaks = 1,
    }

    class CurrentSystemTimeZone : System.TimeZone
    {
        /*0x10*/ long m_ticksOffset;
        /*0x18*/ string m_standardName;
        /*0x20*/ string m_daylightName;
        /*0x28*/ System.Collections.Hashtable m_CachedDaylightChanges;

        static /*0x186191c*/ bool GetTimeZoneData(int year, ref long[] data, ref string[] names, ref bool daylight_inverted);
        /*0x1861858*/ CurrentSystemTimeZone();
    }

    class DBNull : System.Runtime.Serialization.ISerializable, System.IConvertible
    {
        static /*0x0*/ System.DBNull Value;

        static /*0x1861ef8*/ DBNull();
        /*0x1861920*/ DBNull();
        /*0x1861928*/ DBNull(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1861980*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1861990*/ string ToString();
        /*0x18619d8*/ string ToString(System.IFormatProvider provider);
        /*0x1861a20*/ System.TypeCode GetTypeCode();
        /*0x1861a28*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1861a78*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1861ac8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1861b18*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1861b68*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1861bb8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1861c08*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1861c58*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1861ca8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1861cf8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1861d48*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1861d98*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1861de8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1861e38*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1861e88*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct DateTime : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<System.DateTime>, System.IEquatable<System.DateTime>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable
    {
        static long TicksPerMillisecond = 10000;
        static long TicksPerSecond = 10000000;
        static long TicksPerMinute = 600000000;
        static long TicksPerHour = 36000000000;
        static long TicksPerDay = 864000000000;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static int DaysPerYear = 365;
        static int DaysPer4Years = 1461;
        static int DaysPer100Years = 36524;
        static int DaysPer400Years = 146097;
        static int DaysTo1601 = 584388;
        static int DaysTo1899 = 693593;
        static int DaysTo1970 = 719162;
        static int DaysTo10000 = 3652059;
        static long MinTicks = 0;
        static long MaxTicks = 3155378975999999999;
        static long MaxMillis = 315537897600000;
        static long UnixEpochTicks = 621355968000000000;
        static long FileTimeOffset = 504911232000000000;
        static long DoubleDateOffset = 599264352000000000;
        static long OADateMinAsTicks = 31241376000000000;
        static double OADateMinAsDouble = -657435;
        static double OADateMaxAsDouble = 2958466;
        static int DatePartYear = 0;
        static int DatePartDayOfYear = 1;
        static int DatePartMonth = 2;
        static int DatePartDay = 3;
        static ulong TicksMask = 4611686018427387903;
        static ulong FlagsMask = 13835058055282163712;
        static ulong LocalMask = 9223372036854775808;
        static long TicksCeiling = 4611686018427387904;
        static ulong KindUnspecified = 0;
        static ulong KindUtc = 4611686018427387904;
        static ulong KindLocal = 9223372036854775808;
        static ulong KindLocalAmbiguousDst = 13835058055282163712;
        static int KindShift = 62;
        static string TicksField = "ticks";
        static string DateDataField = "dateData";
        static /*0x0*/ int[] s_daysToMonth365;
        static /*0x8*/ int[] s_daysToMonth366;
        static /*0x10*/ System.DateTime MinValue;
        static /*0x18*/ System.DateTime MaxValue;
        static /*0x20*/ System.DateTime UnixEpoch;
        /*0x10*/ ulong _dateData;

        static /*0x186676c*/ DateTime();
        static /*0x1863664*/ int Compare(System.DateTime t1, System.DateTime t2);
        static /*0x1862200*/ long DateToTicks(int year, int month, int day);
        static /*0x1862458*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x18634a4*/ int DaysInMonth(int year, int month);
        static /*0x18638c4*/ long DoubleDateToTicks(double value);
        static /*0x1863a88*/ System.DateTime FromBinary(long dateData);
        static /*0x1863cbc*/ System.DateTime FromBinaryRaw(long dateData);
        static /*0x1863d44*/ System.DateTime FromOADate(double d);
        static /*0x1863e94*/ System.DateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind);
        static /*0x186424c*/ System.DateTime get_Now();
        static /*0x1864414*/ System.DateTime get_Today();
        static /*0x18637f8*/ bool IsLeapYear(int year);
        static /*0x18644a0*/ System.DateTime Parse(string s);
        static /*0x1864674*/ System.DateTime Parse(string s, System.IFormatProvider provider);
        static /*0x1864768*/ System.DateTime Parse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles);
        static /*0x1864898*/ System.DateTime ParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x1864b40*/ System.DateTime ParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x1864d8c*/ double TicksToOADate(long value);
        static /*0x1865448*/ bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x18656a4*/ bool TryParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x1865964*/ bool TryParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x1865bd8*/ System.DateTime op_Addition(System.DateTime d, System.TimeSpan t);
        static /*0x1865c7c*/ System.DateTime op_Subtraction(System.DateTime d, System.TimeSpan t);
        static /*0x1865d18*/ System.TimeSpan op_Subtraction(System.DateTime d1, System.DateTime d2);
        static /*0x1865d28*/ bool op_Equality(System.DateTime d1, System.DateTime d2);
        static /*0x1865d38*/ bool op_Inequality(System.DateTime d1, System.DateTime d2);
        static /*0x1865d48*/ bool op_LessThan(System.DateTime t1, System.DateTime t2);
        static /*0x1865d5c*/ bool op_LessThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x1865d70*/ bool op_GreaterThan(System.DateTime t1, System.DateTime t2);
        static /*0x1865d84*/ bool op_GreaterThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x1866570*/ bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, ref System.DateTime result);
        static /*0x1864340*/ System.DateTime get_UtcNow();
        static /*0x1866760*/ long GetSystemTimeAsFileTime();
        /*0x1861f5c*/ DateTime(long ticks);
        /*0x1861fec*/ DateTime(ulong dateData);
        /*0x1861ff4*/ DateTime(long ticks, System.DateTimeKind kind);
        /*0x18620dc*/ DateTime(long ticks, System.DateTimeKind kind, bool isAmbiguousDst);
        /*0x1862180*/ DateTime(int year, int month, int day);
        /*0x18623ac*/ DateTime(int year, int month, int day, int hour, int minute, int second);
        /*0x1862530*/ DateTime(int year, int month, int day, int hour, int minute, int second, System.DateTimeKind kind);
        /*0x186264c*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
        /*0x1862824*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.DateTimeKind kind);
        /*0x1862a58*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);
        /*0x1862c0c*/ DateTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1862eb4*/ long get_InternalTicks();
        /*0x1862ec0*/ ulong get_InternalKind();
        /*0x1862ecc*/ System.DateTime Add(System.TimeSpan value);
        /*0x1862f80*/ System.DateTime Add(double value, int scale);
        /*0x1863054*/ System.DateTime AddDays(double value);
        /*0x1863060*/ System.DateTime AddHours(double value);
        /*0x186306c*/ System.DateTime AddMilliseconds(double value);
        /*0x1863074*/ System.DateTime AddMonths(int months);
        /*0x18635d4*/ System.DateTime AddSeconds(double value);
        /*0x1862ed0*/ System.DateTime AddTicks(long value);
        /*0x18635dc*/ System.DateTime AddYears(int value);
        /*0x1863684*/ int CompareTo(object value);
        /*0x1863784*/ int CompareTo(System.DateTime value);
        /*0x18639f8*/ bool Equals(object value);
        /*0x1863a74*/ bool Equals(System.DateTime value);
        /*0x1863dc4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1863eb8*/ System.DateTime get_Date();
        /*0x1863ef4*/ int GetDatePart(int part);
        /*0x18632b8*/ void GetDatePart(ref int year, ref int month, ref int day);
        /*0x18640e4*/ int get_Day();
        /*0x18640ec*/ System.DayOfWeek get_DayOfWeek();
        /*0x1864138*/ int GetHashCode();
        /*0x1864148*/ int get_Hour();
        /*0x1864184*/ bool IsAmbiguousDaylightSavingTime();
        /*0x1864198*/ System.DateTimeKind get_Kind();
        /*0x18641c0*/ int get_Millisecond();
        /*0x1864208*/ int get_Minute();
        /*0x1864244*/ int get_Month();
        /*0x18643a4*/ int get_Second();
        /*0x1862c00*/ long get_Ticks();
        /*0x18643e0*/ System.TimeSpan get_TimeOfDay();
        /*0x1864498*/ int get_Year();
        /*0x1864d78*/ System.TimeSpan Subtract(System.DateTime value);
        /*0x1864eb8*/ double ToOADate();
        /*0x1864f14*/ System.DateTime ToLocalTime();
        /*0x1864f1c*/ System.DateTime ToLocalTime(bool throwOnOverflow);
        /*0x1865070*/ string ToString();
        /*0x1865148*/ string ToString(string format);
        /*0x18651b4*/ string ToString(System.IFormatProvider provider);
        /*0x1865220*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1865290*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x18653e8*/ System.DateTime ToUniversalTime();
        /*0x1865d98*/ System.TypeCode GetTypeCode();
        /*0x1865da0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1865e2c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1865eb8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1865f44*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1865fd0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x186605c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x18660e8*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1866174*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1866200*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x186628c*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1866318*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x18663a4*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1866430*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x18664bc*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x18664c4*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x1866764*/ long ToBinaryRaw();
    }

    enum DateTimeKind
    {
        Unspecified = 0,
        Utc = 1,
        Local = 2,
    }

    struct DateTimeOffset : System.IComparable, System.IFormattable, System.IComparable<System.DateTimeOffset>, System.IEquatable<System.DateTimeOffset>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static /*0x0*/ System.DateTimeOffset MinValue;
        static /*0x10*/ System.DateTimeOffset MaxValue;
        static /*0x20*/ System.DateTimeOffset UnixEpoch;
        /*0x10*/ System.DateTime _dateTime;
        /*0x18*/ short _offsetMinutes;

        static /*0x18692d8*/ DateTimeOffset();
        static /*0x1866fb0*/ System.DateTimeOffset get_Now();
        static /*0x186734c*/ int Compare(System.DateTimeOffset first, System.DateTimeOffset second);
        static /*0x18676a0*/ System.DateTimeOffset FromUnixTimeSeconds(long seconds);
        static /*0x1867c38*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider);
        static /*0x1867ca8*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x1867ff4*/ System.DateTimeOffset ParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x1868ae4*/ bool TryParse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x1868dd8*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x18668f0*/ short ValidateOffset(System.TimeSpan offset);
        static /*0x1866a04*/ System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset);
        static /*0x1867e14*/ System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
        static /*0x1869124*/ System.DateTimeOffset op_Implicit(System.DateTime dateTime);
        static /*0x186914c*/ System.TimeSpan op_Subtraction(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x18691d0*/ bool op_Equality(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x1869254*/ bool op_Inequality(System.DateTimeOffset left, System.DateTimeOffset right);
        /*0x186685c*/ DateTimeOffset(long ticks, System.TimeSpan offset);
        /*0x1866aac*/ DateTimeOffset(System.DateTime dateTime);
        /*0x1866b70*/ DateTimeOffset(System.DateTime dateTime, System.TimeSpan offset);
        /*0x1866d24*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, System.TimeSpan offset);
        /*0x1866df0*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.TimeSpan offset);
        /*0x1866ecc*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, System.TimeSpan offset);
        /*0x1867a60*/ DateTimeOffset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x186701c*/ System.DateTime get_DateTime();
        /*0x18670c0*/ System.DateTime get_UtcDateTime();
        /*0x1867134*/ System.DateTime get_LocalDateTime();
        /*0x1867020*/ System.DateTime get_ClockDateTime();
        /*0x1867180*/ int get_Day();
        /*0x18671a0*/ int get_Hour();
        /*0x18671e4*/ int get_Millisecond();
        /*0x1867234*/ int get_Minute();
        /*0x1867278*/ int get_Month();
        /*0x1867154*/ System.TimeSpan get_Offset();
        /*0x1867298*/ int get_Second();
        /*0x18672dc*/ long get_Ticks();
        /*0x18672f0*/ System.TimeSpan get_TimeOfDay();
        /*0x186732c*/ int get_Year();
        /*0x18673d8*/ int System.IComparable.CompareTo(object obj);
        /*0x1867508*/ int CompareTo(System.DateTimeOffset other);
        /*0x18675b0*/ bool Equals(object obj);
        /*0x186766c*/ bool Equals(System.DateTimeOffset other);
        /*0x1867814*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x1867994*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1867c20*/ int GetHashCode();
        /*0x1868320*/ string ToString();
        /*0x1868688*/ string ToString(System.IFormatProvider formatProvider);
        /*0x1868724*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x18687cc*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
        /*0x1868ab8*/ System.DateTimeOffset ToUniversalTime();
    }

    enum DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    class DivideByZeroException : System.ArithmeticException
    {
        /*0x18693dc*/ DivideByZeroException();
        /*0x1869438*/ DivideByZeroException(string message);
        /*0x186945c*/ DivideByZeroException(string message, System.Exception innerException);
        /*0x1869480*/ DivideByZeroException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class DllNotFoundException : System.TypeLoadException
    {
        /*0x1869488*/ DllNotFoundException();
        /*0x18694e4*/ DllNotFoundException(string message);
        /*0x1869508*/ DllNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Double : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<double>, System.IEquatable<double>, System.ISpanFormattable
    {
        static double MinValue = -1.7976931348623157e+308;
        static double MaxValue = 1.7976931348623157e+308;
        static double Epsilon = 5e-324;
        static double NegativeInfinity = -Infinity;
        static double PositiveInfinity = Infinity;
        static double NaN = NaN;
        static double NegativeZero = 0;
        /*0x10*/ double m_value;

        static /*0x1869510*/ bool IsFinite(double d);
        static /*0x1869578*/ bool IsInfinity(double d);
        static /*0x18695e4*/ bool IsNaN(double d);
        static /*0x1869650*/ bool IsNegative(double d);
        static /*0x18696b0*/ bool IsNegativeInfinity(double d);
        static /*0x18696c4*/ bool IsPositiveInfinity(double d);
        static /*0x1869e70*/ double Parse(string s);
        static /*0x1869f34*/ double Parse(string s, System.IFormatProvider provider);
        static /*0x186a008*/ double Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x186a0ec*/ bool TryParse(string s, ref double result);
        static /*0x186a61c*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref double result);
        static /*0x186a16c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref double result);
        /*0x18696d8*/ int CompareTo(object value);
        /*0x1869854*/ int CompareTo(double value);
        /*0x1869938*/ bool Equals(object obj);
        /*0x1869a50*/ bool Equals(double obj);
        /*0x1869b20*/ int GetHashCode();
        /*0x1869b90*/ string ToString();
        /*0x1869c0c*/ string ToString(string format);
        /*0x1869c94*/ string ToString(System.IFormatProvider provider);
        /*0x1869d20*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1869db0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x186a6c4*/ System.TypeCode GetTypeCode();
        /*0x186a6cc*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x186a730*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x186a7bc*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x186a820*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x186a884*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x186a8e8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x186a94c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x186a9b0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x186aa14*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x186aa78*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x186aadc*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x186ab40*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x186ab48*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x186abac*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x186ac38*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class EntryPointNotFoundException : System.TypeLoadException
    {
        /*0x186ace4*/ EntryPointNotFoundException();
        /*0x186ad40*/ EntryPointNotFoundException(string message);
        /*0x186ad64*/ EntryPointNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class EventArgs
    {
        static /*0x0*/ System.EventArgs Empty;

        static /*0x186ad74*/ EventArgs();
        /*0x186ad6c*/ EventArgs();
    }

    class EventHandler : System.MulticastDelegate
    {
        /*0x186add8*/ EventHandler(object object, nint method);
        /*0x186af08*/ void Invoke(object sender, System.EventArgs e);
    }

    class EventHandler<TEventArgs> : System.MulticastDelegate
    {
        EventHandler(object object, nint method);
        void Invoke(object sender, TEventArgs e);
    }

    class ExecutionEngineException : System.SystemException
    {
        /*0x186af1c*/ ExecutionEngineException();
        /*0x186af78*/ ExecutionEngineException(string message);
        /*0x186af9c*/ ExecutionEngineException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FieldAccessException : System.MemberAccessException
    {
        /*0x186afa4*/ FieldAccessException();
        /*0x186b000*/ FieldAccessException(string message);
        /*0x186b024*/ FieldAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FlagsAttribute : System.Attribute
    {
        /*0x186b02c*/ FlagsAttribute();
    }

    class FormatException : System.SystemException
    {
        /*0x186b034*/ FormatException();
        /*0x186b090*/ FormatException(string message);
        /*0x186b0b4*/ FormatException(string message, System.Exception innerException);
        /*0x186b0d8*/ FormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FormattableString : System.IFormattable
    {
        /*0x186b15c*/ FormattableString();
        string get_Format();
        object[] GetArguments();
        int get_ArgumentCount();
        object GetArgument(int index);
        string ToString(System.IFormatProvider formatProvider);
        /*0x186b0e0*/ string System.IFormattable.ToString(string ignored, System.IFormatProvider formatProvider);
        /*0x186b0f4*/ string ToString();
    }

    class Gen2GcCallback : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    {
        /*0x10*/ System.Func<object, bool> _callback;
        /*0x18*/ System.Runtime.InteropServices.GCHandle _weakTargetObj;

        static /*0x186b16c*/ void Register(System.Func<object, bool> callback, object targetObj);
        /*0x186b164*/ Gen2GcCallback();
        /*0x186b1ec*/ void Setup(System.Func<object, bool> callback, object targetObj);
        /*0x186b214*/ void Finalize();
    }

    class DateTimeFormat
    {
        static /*0x0*/ System.TimeSpan NullOffset;
        static /*0x8*/ char[] allStandardFormats;
        static /*0x10*/ System.Globalization.DateTimeFormatInfo InvariantFormatInfo;
        static /*0x18*/ string[] InvariantAbbreviatedMonthNames;
        static /*0x20*/ string[] InvariantAbbreviatedDayNames;
        static /*0x28*/ string[] fixedNumberFormats;

        static /*0x186e4d0*/ DateTimeFormat();
        static /*0x186b3c0*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len);
        static /*0x186b430*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit);
        static /*0x186b528*/ void HebrewFormatDigits(System.Text.StringBuilder outputBuffer, int digits);
        static /*0x186b5a4*/ int ParseRepeatPattern(System.ReadOnlySpan<char> format, int pos, char patternChar);
        static /*0x186b61c*/ string FormatDayOfWeek(int dayOfWeek, int repeat, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x186b650*/ string FormatMonth(int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x186b684*/ string FormatHebrewMonthName(System.DateTime time, int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x186b744*/ int ParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result);
        static /*0x186b8f4*/ int ParseNextChar(System.ReadOnlySpan<char> format, int pos);
        static /*0x186b964*/ bool IsUseGenitiveForm(System.ReadOnlySpan<char> format, int index, int tokenLen, char patternToMatch);
        static /*0x186bab0*/ System.Text.StringBuilder FormatCustomized(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x186cb7c*/ void FormatCustomizedTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.ReadOnlySpan<char> format, int tokenLen, bool timeOnly, System.Text.StringBuilder result);
        static /*0x186ce98*/ void FormatCustomizedRoundripTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x186d094*/ void Append2DigitNumber(System.Text.StringBuilder result, int val);
        static /*0x186d0f0*/ string GetRealFormat(System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x186d398*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.DateTime dateTime, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.TimeSpan offset);
        static /*0x18650d0*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider);
        static /*0x18683b8*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0x1865330*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x18688a8*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0x186e02c*/ System.Text.StringBuilder FormatStringBuilder(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset);
        static /*0x186d70c*/ bool TryFormatO(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0x186dc14*/ bool TryFormatR(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0x186e338*/ void WriteTwoDecimalDigits(uint value, System.Span<char> destination, int offset);
        static /*0x186e384*/ void WriteFourDecimalDigits(uint value, System.Span<char> buffer, int startingIndex);
        static /*0x186e424*/ void WriteDigits(ulong value, System.Span<char> buffer);
        static /*0x186d708*/ void InvalidFormatForLocal(System.ReadOnlySpan<char> format, System.DateTime dateTime);
    }

    class DateTimeParse
    {
        static /*0x0*/ System.DateTimeParse.MatchNumberDelegate m_hebrewNumberParser;
        static /*0x8*/ System.DateTimeParse.DS[][] dateParsingStates;

        static /*0x1877360*/ DateTimeParse();
        static /*0x1864a38*/ System.DateTime ParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x18681cc*/ System.DateTime ParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.TimeSpan offset);
        static /*0x1865834*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x1868fa0*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x186e828*/ bool TryParseExact(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x1864c80*/ System.DateTime ParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x1865ab0*/ bool TryParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x186f298*/ bool TryParseExactMultiple(System.ReadOnlySpan<char> s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x186f500*/ bool MatchWord(ref System.__DTString str, string target);
        static /*0x186f674*/ bool GetTimeZoneName(ref System.__DTString str);
        static /*0x186f724*/ bool IsDigit(char ch);
        static /*0x186f738*/ bool ParseFraction(ref System.__DTString str, ref double result);
        static /*0x186f804*/ bool ParseTimeZone(ref System.__DTString str, ref System.TimeSpan result);
        static /*0x186fa2c*/ bool HandleTimeZone(ref System.__DTString str, ref System.DateTimeResult result);
        static /*0x186fb90*/ bool Lex(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeToken dtok, ref System.DateTimeRawInfo raw, ref System.DateTimeResult result, ref System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x1870b18*/ System.Globalization.Calendar GetJapaneseCalendarDefaultInstance();
        static /*0x1870c08*/ System.Globalization.Calendar GetTaiwanCalendarDefaultInstance();
        static /*0x1870cf8*/ bool VerifyValidPunctuation(ref System.__DTString str);
        static /*0x1870e90*/ bool GetYearMonthDayOrder(string datePattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x1871134*/ bool GetYearMonthOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x18712ec*/ bool GetMonthDayOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x18714e4*/ bool TryAdjustYear(ref System.DateTimeResult result, int year, ref int adjustedYear);
        static /*0x18715a8*/ bool SetDateYMD(ref System.DateTimeResult result, int year, int month, int day);
        static /*0x187161c*/ bool SetDateMDY(ref System.DateTimeResult result, int month, int day, int year);
        static /*0x1871698*/ bool SetDateDMY(ref System.DateTimeResult result, int day, int month, int year);
        static /*0x1871714*/ bool SetDateYDM(ref System.DateTimeResult result, int year, int day, int month);
        static /*0x1871790*/ void GetDefaultYear(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x18718f4*/ bool GetDayOfNN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1871a68*/ bool GetDayOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1871d1c*/ bool GetDayOfMN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1871f40*/ bool GetHebrewDayOfNM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x187209c*/ bool GetDayOfNM(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x18722c0*/ bool GetDayOfMNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x18725a4*/ bool GetDayOfYNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x18726dc*/ bool GetDayOfNNY(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1872850*/ bool GetDayOfYMN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x187290c*/ bool GetDayOfYN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x18729c8*/ bool GetDayOfYM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1872a64*/ void AdjustTimeMark(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeRawInfo raw);
        static /*0x1872b24*/ bool AdjustHour(ref int hour, System.DateTimeParse.TM timeMark);
        static /*0x1872b6c*/ bool GetTimeOfN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1872bc8*/ bool GetTimeOfNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1872c3c*/ bool GetTimeOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1872cc4*/ bool GetDateOfDSN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1872d18*/ bool GetDateOfNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1872dcc*/ bool GetDateOfNNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1872ff0*/ bool ProcessDateTimeSuffix(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, ref System.DateTimeToken dtok);
        static /*0x18730e8*/ bool ProcessHebrewTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1870814*/ bool ProcessTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1864584*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x1867eec*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.TimeSpan offset);
        static /*0x186558c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x1868c6c*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x1873428*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x18742e4*/ bool DetermineTimeZoneAdjustments(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles, bool bTimeOnly);
        static /*0x1874538*/ bool DateTimeOffsetTimeZonePostProcessing(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles);
        static /*0x1874734*/ bool AdjustTimeZoneToUniversal(ref System.DateTimeResult result);
        static /*0x18747f0*/ bool AdjustTimeZoneToLocal(ref System.DateTimeResult result, bool bTimeOnly);
        static /*0x1873b60*/ bool ParseISO8601(ref System.DateTimeRawInfo raw, ref System.__DTString str, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x1874a88*/ bool MatchHebrewDigits(ref System.__DTString str, int digitLen, ref int number);
        static /*0x1874a00*/ bool ParseDigits(ref System.__DTString str, int digitLen, ref int result);
        static /*0x1874b5c*/ bool ParseDigits(ref System.__DTString str, int minDigitLen, int maxDigitLen, ref int result);
        static /*0x1874c9c*/ bool ParseFractionExact(ref System.__DTString str, int maxDigitLen, ref double result);
        static /*0x1874e68*/ bool ParseSign(ref System.__DTString str, ref bool result);
        static /*0x1874ecc*/ bool ParseTimeZoneOffset(ref System.__DTString str, int len, ref System.TimeSpan result);
        static /*0x187504c*/ bool MatchAbbreviatedMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1875270*/ bool MatchMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x18754d4*/ bool MatchAbbreviatedDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1875690*/ bool MatchDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x187584c*/ bool MatchEraName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1875acc*/ bool MatchTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x1875d4c*/ bool MatchAbbreviatedTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x1875e38*/ bool CheckNewValue(ref int currentValue, int newValue, char patternChar, ref System.DateTimeResult result);
        static /*0x187182c*/ System.DateTime GetDateTimeNow(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x1874068*/ bool CheckDefaultDateTime(ref System.DateTimeResult result, ref System.Globalization.Calendar cal, System.Globalization.DateTimeStyles styles);
        static /*0x1875ef4*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.ParsingInfo parseInfo, ref System.DateTimeResult result);
        static /*0x187621c*/ bool ParseJapaneseEraStart(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1876300*/ bool ParseByFormat(ref System.__DTString str, ref System.__DTString format, ref System.ParsingInfo parseInfo, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x1877278*/ bool TryParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result, ref int returnValue);
        static /*0x186eaec*/ bool DoStrictParse(System.ReadOnlySpan<char> s, System.ReadOnlySpan<char> formatParam, System.Globalization.DateTimeStyles styles, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x186e92c*/ System.Exception GetDateTimeParseException(ref System.DateTimeResult result);

        class MatchNumberDelegate : System.MulticastDelegate
        {
            /*0x1c8abc4*/ MatchNumberDelegate(object object, nint method);
            /*0x1c8ac9c*/ bool Invoke(ref System.__DTString str, int digitLen, ref int result);
        }

        enum DTT
        {
            End = 0,
            NumEnd = 1,
            NumAmpm = 2,
            NumSpace = 3,
            NumDatesep = 4,
            NumTimesep = 5,
            MonthEnd = 6,
            MonthSpace = 7,
            MonthDatesep = 8,
            NumDatesuff = 9,
            NumTimesuff = 10,
            DayOfWeek = 11,
            YearSpace = 12,
            YearDateSep = 13,
            YearEnd = 14,
            TimeZone = 15,
            Era = 16,
            NumUTCTimeMark = 17,
            Unk = 18,
            NumLocalTimeMark = 19,
            Max = 20,
        }

        enum TM
        {
            NotSet = -1,
            AM = 0,
            PM = 1,
        }

        enum DS
        {
            BEGIN = 0,
            N = 1,
            NN = 2,
            D_Nd = 3,
            D_NN = 4,
            D_NNd = 5,
            D_M = 6,
            D_MN = 7,
            D_NM = 8,
            D_MNd = 9,
            D_NDS = 10,
            D_Y = 11,
            D_YN = 12,
            D_YNd = 13,
            D_YM = 14,
            D_YMd = 15,
            D_S = 16,
            T_S = 17,
            T_Nt = 18,
            T_NNt = 19,
            ERROR = 20,
            DX_NN = 21,
            DX_NNN = 22,
            DX_MN = 23,
            DX_NM = 24,
            DX_MNN = 25,
            DX_DS = 26,
            DX_DSN = 27,
            DX_NDS = 28,
            DX_NNDS = 29,
            DX_YNN = 30,
            DX_YMN = 31,
            DX_YN = 32,
            DX_YM = 33,
            TX_N = 34,
            TX_NN = 35,
            TX_NNN = 36,
            TX_TS = 37,
            DX_NNY = 38,
        }

        class <>c
        {
            static /*0x0*/ System.DateTimeParse.<> <>9;
            static /*0x8*/ System.Func<System.DateTimeParse.MatchNumberDelegate> <>9__98_0;

            static /*0x1c8acb0*/ <>c();
            /*0x1c8ad14*/ <>c();
            /*0x1c8ad1c*/ System.DateTimeParse.MatchNumberDelegate <DoStrictParse>b__98_0();
        }
    }

    struct __DTString
    {
        static /*0x0*/ char[] WhiteSpaceChecks;
        /*0x10*/ System.ReadOnlySpan<char> Value;
        /*0x20*/ int Index;
        /*0x24*/ char m_current;
        /*0x28*/ System.Globalization.CompareInfo m_info;
        /*0x30*/ bool m_checkDigitToken;

        static /*0x1c8c690*/ __DTString();
        /*0x1c8adcc*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi, bool checkDigitToken);
        /*0x1c8adf0*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi);
        /*0x1c8ad90*/ int get_Length();
        /*0x1c8aeb4*/ System.Globalization.CompareInfo get_CompareInfo();
        /*0x1c8aebc*/ bool GetNext();
        /*0x1c8af34*/ bool AtEnd();
        /*0x1c8af7c*/ bool Advance(int count);
        /*0x1c8aff4*/ void GetRegularToken(ref System.TokenType tokenType, ref int tokenValue, System.Globalization.DateTimeFormatInfo dtfi);
        /*0x1c8b2dc*/ System.TokenType GetSeparatorToken(System.Globalization.DateTimeFormatInfo dtfi, ref int indexBeforeSeparator, ref char charBeforeSeparator);
        /*0x1c8b4e4*/ bool MatchSpecifiedWord(string target);
        /*0x1c8b5e4*/ bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength);
        /*0x1c8ba30*/ bool Match(string str);
        /*0x1c8bb5c*/ bool Match(char ch);
        /*0x1c8bbf8*/ int MatchLongestWords(string[] words, ref int maxMatchStrLen);
        /*0x1c8bcb0*/ int GetRepeatCount();
        /*0x1c8bd58*/ bool GetNextDigit();
        /*0x1c8be10*/ char GetChar();
        /*0x1c8be38*/ int GetDigit();
        /*0x1c8be64*/ void SkipWhiteSpaces();
        /*0x1c8b3bc*/ bool SkipWhiteSpaceCurrent();
        /*0x1c8bf38*/ void TrimTail();
        /*0x1c8c044*/ void RemoveTrailingInQuoteSpaces();
        /*0x1c8c278*/ void RemoveLeadingInQuoteSpaces();
        /*0x1c8c4ec*/ System.DTSubString GetSubString();
        /*0x1c8c624*/ void ConsumeSubString(System.DTSubString sub);
    }

    enum DTSubStringType
    {
        Unknown = 0,
        Invalid = 1,
        Number = 2,
        End = 3,
        Other = 4,
    }

    struct DTSubString
    {
        /*0x10*/ System.ReadOnlySpan<char> s;
        /*0x20*/ int index;
        /*0x24*/ int length;
        /*0x28*/ System.DTSubStringType type;
        /*0x2c*/ int value;

        /*0x1c8c724*/ char get_Item(int relativeIndex);
    }

    struct DateTimeToken
    {
        /*0x10*/ System.DateTimeParse.DTT dtt;
        /*0x14*/ System.TokenType suffix;
        /*0x18*/ int num;
    }

    struct DateTimeRawInfo
    {
        /*0x10*/ int* num;
        /*0x18*/ int numCount;
        /*0x1c*/ int month;
        /*0x20*/ int year;
        /*0x24*/ int dayOfWeek;
        /*0x28*/ int era;
        /*0x2c*/ System.DateTimeParse.TM timeMark;
        /*0x30*/ double fraction;
        /*0x38*/ bool hasSameDateAndTimeSeparators;

        /*0x1c8c750*/ void Init(int* numberBuffer);
        /*0x1c8c770*/ void AddNumber(int value);
        /*0x1c8c788*/ int GetNumber(int index);
    }

    enum ParseFailureKind
    {
        None = 0,
        ArgumentNull = 1,
        Format = 2,
        FormatWithParameter = 3,
        FormatWithOriginalDateTime = 4,
        FormatWithFormatSpecifier = 5,
        FormatWithOriginalDateTimeAndParameter = 6,
        FormatBadDateTimeCalendar = 7,
    }

    enum ParseFlags
    {
        HaveYear = 1,
        HaveMonth = 2,
        HaveDay = 4,
        HaveHour = 8,
        HaveMinute = 16,
        HaveSecond = 32,
        HaveTime = 64,
        HaveDate = 128,
        TimeZoneUsed = 256,
        TimeZoneUtc = 512,
        ParsedMonthName = 1024,
        CaptureOffset = 2048,
        YearDefault = 4096,
        Rfc1123Pattern = 8192,
        UtcSortPattern = 16384,
    }

    struct DateTimeResult
    {
        /*0x10*/ int Year;
        /*0x14*/ int Month;
        /*0x18*/ int Day;
        /*0x1c*/ int Hour;
        /*0x20*/ int Minute;
        /*0x24*/ int Second;
        /*0x28*/ double fraction;
        /*0x30*/ int era;
        /*0x34*/ System.ParseFlags flags;
        /*0x38*/ System.TimeSpan timeZoneOffset;
        /*0x40*/ System.Globalization.Calendar calendar;
        /*0x48*/ System.DateTime parsedDate;
        /*0x50*/ System.ParseFailureKind failure;
        /*0x58*/ string failureMessageID;
        /*0x60*/ object failureMessageFormatArgument;
        /*0x68*/ string failureArgumentName;
        /*0x70*/ System.ReadOnlySpan<char> originalDateTimeString;
        /*0x80*/ System.ReadOnlySpan<char> failedFormatSpecifier;

        /*0x1c8c794*/ void Init(System.ReadOnlySpan<char> originalDateTimeString);
        /*0x1c8c7b8*/ void SetDate(int year, int month, int day);
        /*0x1c8c7c4*/ void SetBadFormatSpecifierFailure();
        /*0x1c8c858*/ void SetBadFormatSpecifierFailure(System.ReadOnlySpan<char> failedFormatSpecifier);
        /*0x1c8c8bc*/ void SetBadDateTimeFailure();
        /*0x1c8c90c*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID);
        /*0x1c8c918*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
        /*0x1c8c924*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName);
    }

    struct ParsingInfo
    {
        /*0x10*/ System.Globalization.Calendar calendar;
        /*0x18*/ int dayOfWeek;
        /*0x1c*/ System.DateTimeParse.TM timeMark;
        /*0x20*/ bool fUseHour12;
        /*0x21*/ bool fUseTwoDigitYear;
        /*0x22*/ bool fAllowInnerWhite;
        /*0x23*/ bool fAllowTrailingWhite;
        /*0x24*/ bool fCustomNumberParser;
        /*0x28*/ System.DateTimeParse.MatchNumberDelegate parseNumberDelegate;

        /*0x1c8c934*/ void Init();
    }

    enum TokenType
    {
        NumberToken = 1,
        YearNumberToken = 2,
        Am = 3,
        Pm = 4,
        MonthToken = 5,
        EndOfString = 6,
        DayOfWeekToken = 7,
        TimeZoneToken = 8,
        EraToken = 9,
        DateWordToken = 10,
        UnknownToken = 11,
        HebrewNumber = 12,
        JapaneseEraToken = 13,
        TEraToken = 14,
        IgnorableSymbol = 15,
        SEP_Unk = 256,
        SEP_End = 512,
        SEP_Space = 768,
        SEP_Am = 1024,
        SEP_Pm = 1280,
        SEP_Date = 1536,
        SEP_Time = 1792,
        SEP_YearSuff = 2048,
        SEP_MonthSuff = 2304,
        SEP_DaySuff = 2560,
        SEP_HourSuff = 2816,
        SEP_MinuteSuff = 3072,
        SEP_SecondSuff = 3328,
        SEP_LocalTimeMark = 3584,
        SEP_DateOrOffset = 3840,
        RegularTokenMask = 255,
        SeparatorTokenMask = 65280,
    }

    struct Guid : System.IFormattable, System.IComparable, System.IComparable<System.Guid>, System.IEquatable<System.Guid>, System.ISpanFormattable
    {
        static /*0x0*/ System.Guid Empty;
        /*0x10*/ int _a;
        /*0x14*/ short _b;
        /*0x16*/ short _c;
        /*0x18*/ byte _d;
        /*0x19*/ byte _e;
        /*0x1a*/ byte _f;
        /*0x1b*/ byte _g;
        /*0x1c*/ byte _h;
        /*0x1d*/ byte _i;
        /*0x1e*/ byte _j;
        /*0x1f*/ byte _k;

        static /*0x1c8c940*/ System.Guid NewGuid();
        static /*0x1c8d044*/ System.Guid Parse(string input);
        static /*0x1c8d0dc*/ System.Guid Parse(System.ReadOnlySpan<char> input);
        static /*0x1c8d140*/ bool TryParseExact(string input, string format, ref System.Guid result);
        static /*0x1c8d204*/ bool TryParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, ref System.Guid result);
        static /*0x1c8cc80*/ bool TryParseGuid(System.ReadOnlySpan<char> guidString, System.Guid.GuidStyles flags, ref System.Guid.GuidResult result);
        static /*0x1c8d634*/ bool TryParseGuidWithHexPrefix(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x1c8dca8*/ bool TryParseGuidWithNoStyle(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x1c8d370*/ bool TryParseGuidWithDashes(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0x1c8e314*/ bool StringToShort(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x1c8e6a0*/ bool StringToShort(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x1c8e2e8*/ bool StringToInt(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x1c8e4ac*/ bool StringToInt(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x1c8e358*/ bool StringToLong(System.ReadOnlySpan<char> str, ref int parsePos, int flags, ref long result, ref System.Guid.GuidResult parseResult);
        static /*0x1c8dfd4*/ System.ReadOnlySpan<char> EatAllWhitespace(System.ReadOnlySpan<char> str);
        static /*0x1c8e210*/ bool IsHexPrefix(System.ReadOnlySpan<char> str, int i);
        static /*0x1c8ef50*/ bool op_Equality(System.Guid a, System.Guid b);
        static /*0x1c8ef94*/ char HexToChar(int a);
        static /*0x1c8efb0*/ int HexsToChars(char* guidChars, int a, int b);
        static /*0x1c8f02c*/ int HexsToCharsHexOutput(char* guidChars, int a, int b);
        /*0x1c8c98c*/ Guid(byte[] b);
        /*0x1c8ca24*/ Guid(System.ReadOnlySpan<byte> b);
        /*0x1c8cb4c*/ Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
        /*0x1c8cb8c*/ Guid(string g);
        /*0x1c8e6e4*/ void WriteByteHelper(System.Span<byte> destination);
        /*0x1c8e7f4*/ byte[] ToByteArray();
        /*0x1c8e970*/ string ToString();
        /*0x1c8ebd4*/ int GetHashCode();
        /*0x1c8ebec*/ bool Equals(object o);
        /*0x1c8ec94*/ bool Equals(System.Guid g);
        /*0x1c8ecd8*/ int GetResult(uint me, uint them);
        /*0x1c8ece8*/ int CompareTo(object value);
        /*0x1c8ee74*/ int CompareTo(System.Guid value);
        /*0x1c8ef90*/ string ToString(string format);
        /*0x1c8e9b8*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1c8f0c8*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format);
        /*0x1c8f4ec*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);

        enum GuidStyles
        {
            None = 0,
            AllowParenthesis = 1,
            AllowBraces = 2,
            AllowDashes = 4,
            AllowHexPrefix = 8,
            RequireParenthesis = 16,
            RequireBraces = 32,
            RequireDashes = 64,
            RequireHexPrefix = 128,
            HexFormat = 160,
            NumberFormat = 0,
            DigitFormat = 64,
            BraceFormat = 96,
            ParenthesisFormat = 80,
            Any = 15,
        }

        enum GuidParseThrowStyle
        {
            None = 0,
            All = 1,
            AllButOverflow = 2,
        }

        enum ParseFailureKind
        {
            None = 0,
            ArgumentNull = 1,
            Format = 2,
            FormatWithParameter = 3,
            NativeException = 4,
            FormatWithInnerException = 5,
        }

        struct GuidResult
        {
            /*0x10*/ System.Guid _parsedGuid;
            /*0x20*/ System.Guid.GuidParseThrowStyle _throwStyle;
            /*0x24*/ System.Guid.ParseFailureKind _failure;
            /*0x28*/ string _failureMessageID;
            /*0x30*/ object _failureMessageFormatArgument;
            /*0x38*/ string _failureArgumentName;
            /*0x40*/ System.Exception _innerException;

            /*0x1c8f4f0*/ void Init(System.Guid.GuidParseThrowStyle canThrow);
            /*0x1c8e6d4*/ void SetFailure(System.Exception nativeException);
            /*0x1c8d360*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID);
            /*0x1c8e2dc*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0x1c8df94*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, System.Exception innerException);
            /*0x1c8cec8*/ System.Exception GetGuidParseException();
        }
    }

    interface IAsyncResult
    {
        bool get_IsCompleted();
        System.Threading.WaitHandle get_AsyncWaitHandle();
        object get_AsyncState();
        bool get_CompletedSynchronously();
    }

    interface ICloneable
    {
        object Clone();
    }

    interface IComparable
    {
        int CompareTo(object obj);
    }

    interface IComparable<T>
    {
        int CompareTo(T other);
    }

    interface IConvertible
    {
        System.TypeCode GetTypeCode();
        bool ToBoolean(System.IFormatProvider provider);
        char ToChar(System.IFormatProvider provider);
        sbyte ToSByte(System.IFormatProvider provider);
        byte ToByte(System.IFormatProvider provider);
        short ToInt16(System.IFormatProvider provider);
        ushort ToUInt16(System.IFormatProvider provider);
        int ToInt32(System.IFormatProvider provider);
        uint ToUInt32(System.IFormatProvider provider);
        long ToInt64(System.IFormatProvider provider);
        ulong ToUInt64(System.IFormatProvider provider);
        float ToSingle(System.IFormatProvider provider);
        double ToDouble(System.IFormatProvider provider);
        decimal ToDecimal(System.IFormatProvider provider);
        System.DateTime ToDateTime(System.IFormatProvider provider);
        string ToString(System.IFormatProvider provider);
        object ToType(System.Type conversionType, System.IFormatProvider provider);
    }

    interface ICustomFormatter
    {
        string Format(string format, object arg, System.IFormatProvider formatProvider);
    }

    interface IDisposable
    {
        void Dispose();
    }

    interface IEquatable<T>
    {
        bool Equals(T other);
    }

    interface IFormatProvider
    {
        object GetFormat(System.Type formatType);
    }

    interface IFormattable
    {
        string ToString(string format, System.IFormatProvider formatProvider);
    }

    interface ISpanFormattable
    {
        bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
    }

    class IndexOutOfRangeException : System.SystemException
    {
        /*0x1c8f4f8*/ IndexOutOfRangeException();
        /*0x1c8f554*/ IndexOutOfRangeException(string message);
        /*0x1c8f578*/ IndexOutOfRangeException(string message, System.Exception innerException);
        /*0x1c8f59c*/ IndexOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InsufficientExecutionStackException : System.SystemException
    {
        /*0x1c8f5a4*/ InsufficientExecutionStackException();
        /*0x1c8f600*/ InsufficientExecutionStackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Int16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<short>, System.IEquatable<short>, System.ISpanFormattable
    {
        static short MaxValue = 32767;
        static short MinValue = -32768;
        /*0x10*/ short m_value;

        static /*0x1c90a4c*/ short Parse(string s, System.IFormatProvider provider);
        static /*0x1c90c7c*/ short Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1c90ad8*/ short Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x1c90ef8*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref short result);
        static /*0x1c90fa0*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref short result);
        /*0x1c8f608*/ int CompareTo(object value);
        /*0x1c8f6c8*/ int CompareTo(short value);
        /*0x1c8f6d4*/ bool Equals(object obj);
        /*0x1c8f74c*/ bool Equals(short obj);
        /*0x1c8f75c*/ int GetHashCode();
        /*0x1c8f768*/ string ToString();
        /*0x1c8fbbc*/ string ToString(System.IFormatProvider provider);
        /*0x1c8fc54*/ string ToString(string format);
        /*0x1c8fc5c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1c90140*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1c911f0*/ System.TypeCode GetTypeCode();
        /*0x1c911f8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1c91254*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1c912b0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1c9130c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1c91368*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1c91370*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1c913cc*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1c91428*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1c91484*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1c914e0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1c9153c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1c91598*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1c915f4*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1c91650*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1c916fc*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<int>, System.IEquatable<int>, System.ISpanFormattable
    {
        static int MaxValue = 2147483647;
        static int MinValue = -2147483648;
        /*0x10*/ int m_value;

        static /*0x1c91c54*/ int Parse(string s);
        static /*0x1c91d14*/ int Parse(string s, System.Globalization.NumberStyles style);
        static /*0x1c91dec*/ int Parse(string s, System.IFormatProvider provider);
        static /*0x1c91ebc*/ int Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1c91f9c*/ int Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1c92038*/ bool TryParse(string s, ref int result);
        static /*0x1c92108*/ bool TryParse(System.ReadOnlySpan<char> s, ref int result);
        static /*0x1c9218c*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        static /*0x1c92280*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        /*0x1c917a8*/ int CompareTo(object value);
        /*0x1c91878*/ int CompareTo(int value);
        /*0x1c91894*/ bool Equals(object obj);
        /*0x1c9190c*/ bool Equals(int obj);
        /*0x1c9191c*/ int GetHashCode();
        /*0x1c91924*/ string ToString();
        /*0x1c919b8*/ string ToString(string format);
        /*0x1c91a68*/ string ToString(System.IFormatProvider provider);
        /*0x1c91b00*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1c91bb4*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1c92324*/ System.TypeCode GetTypeCode();
        /*0x1c9232c*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1c92388*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1c923e4*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1c92440*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1c9249c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1c924f8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1c92554*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1c9255c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1c925b8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1c92614*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1c92670*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1c926cc*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1c92728*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1c92784*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1c9280c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<long>, System.IEquatable<long>, System.ISpanFormattable
    {
        static long MaxValue = 9223372036854775807;
        static long MinValue = -9223372036854775808;
        /*0x10*/ long m_value;

        static /*0x1c93364*/ long Parse(string s);
        static /*0x1c93600*/ long Parse(string s, System.IFormatProvider provider);
        static /*0x1c936d0*/ long Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1c937b0*/ bool TryParse(string s, ref long result);
        static /*0x1c93a0c*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref long result);
        /*0x1c928b8*/ int CompareTo(object value);
        /*0x1c92988*/ int CompareTo(long value);
        /*0x1c929a4*/ bool Equals(object obj);
        /*0x1c92a1c*/ bool Equals(long obj);
        /*0x1c92a2c*/ int GetHashCode();
        /*0x1c92a38*/ string ToString();
        /*0x1c92d94*/ string ToString(System.IFormatProvider provider);
        /*0x1c92e2c*/ string ToString(string format);
        /*0x1c92edc*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1c92f90*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1c93b00*/ System.TypeCode GetTypeCode();
        /*0x1c93b08*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1c93b64*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1c93bc0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1c93c1c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1c93c78*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1c93cd4*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1c93d30*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1c93d8c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1c93de8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1c93df0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1c93e4c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1c93ea8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1c93f04*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1c93f60*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1c93fe8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class InvalidCastException : System.SystemException
    {
        /*0x1c94094*/ InvalidCastException();
        /*0x1c916d8*/ InvalidCastException(string message);
        /*0x1c940f0*/ InvalidCastException(string message, System.Exception innerException);
        /*0x1c94114*/ InvalidCastException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidOperationException : System.SystemException
    {
        /*0x1c9411c*/ InvalidOperationException();
        /*0x1c94178*/ InvalidOperationException(string message);
        /*0x1c9419c*/ InvalidOperationException(string message, System.Exception innerException);
        /*0x1c941c0*/ InvalidOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidProgramException : System.SystemException
    {
        /*0x1c941c8*/ InvalidProgramException();
        /*0x1c94224*/ InvalidProgramException(string message);
        /*0x1c94248*/ InvalidProgramException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidTimeZoneException : System.Exception
    {
        /*0x1c94250*/ InvalidTimeZoneException();
        /*0x1c942a8*/ InvalidTimeZoneException(string message);
        /*0x1c94310*/ InvalidTimeZoneException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Marvin
    {
        static /*0x0*/ ulong <DefaultSeed>k__BackingField;

        static /*0x1c94904*/ Marvin();
        static /*0x1c94390*/ int ComputeHash32(System.ReadOnlySpan<byte> data, ulong seed);
        static /*0x1c9443c*/ int ComputeHash32(ref byte data, int count, ulong seed);
        static /*0x1c9480c*/ void Block(ref uint rp0, ref uint rp1);
        static /*0x1c94894*/ uint _rotl(uint value, int shift);
        static /*0x1c948a0*/ ulong get_DefaultSeed();
        static /*0x1c948f8*/ ulong GenerateSeed();
    }

    class Math
    {
        static /*0x0*/ double doubleRoundLimit;
        static /*0x8*/ double[] roundPower10Double;

        static /*0x1c95694*/ Math();
        static /*0x1c94954*/ int Abs(int value);
        static /*0x1c94a00*/ long Abs(long value);
        static /*0x1c94a5c*/ decimal Abs(decimal value);
        static /*0x1c949b0*/ void ThrowAbsOverflow();
        static /*0x1c94ae0*/ int DivRem(int a, int b, ref int result);
        static /*0x1c94af4*/ int Clamp(int value, int min, int max);
        static /*0x1c94b98*/ double Log(double a, double newBase);
        static /*0x1c94ce8*/ byte Max(byte val1, byte val2);
        static /*0x1c94cf8*/ decimal Max(decimal val1, decimal val2);
        static /*0x1c94d90*/ double Max(double val1, double val2);
        static /*0x1c94e08*/ short Max(short val1, short val2);
        static /*0x1c94e18*/ int Max(int val1, int val2);
        static /*0x1c94e24*/ long Max(long val1, long val2);
        static /*0x1c94e30*/ sbyte Max(sbyte val1, sbyte val2);
        static /*0x1c94e40*/ float Max(float val1, float val2);
        static /*0x1c94eb8*/ ushort Max(ushort val1, ushort val2);
        static /*0x1c94ec8*/ uint Max(uint val1, uint val2);
        static /*0x1c94ed4*/ ulong Max(ulong val1, ulong val2);
        static /*0x1c94ee0*/ byte Min(byte val1, byte val2);
        static /*0x1c94ef0*/ decimal Min(decimal val1, decimal val2);
        static /*0x1c94f88*/ double Min(double val1, double val2);
        static /*0x1c95000*/ short Min(short val1, short val2);
        static /*0x1c95010*/ int Min(int val1, int val2);
        static /*0x1c9501c*/ long Min(long val1, long val2);
        static /*0x1c95028*/ sbyte Min(sbyte val1, sbyte val2);
        static /*0x1c95038*/ float Min(float val1, float val2);
        static /*0x1c950b0*/ ushort Min(ushort val1, ushort val2);
        static /*0x1c950c0*/ uint Min(uint val1, uint val2);
        static /*0x1c950cc*/ ulong Min(ulong val1, ulong val2);
        static /*0x1c950d8*/ decimal Round(decimal d);
        static /*0x1c95144*/ double Round(double a);
        static /*0x1c951c8*/ double Round(double value, int digits);
        static /*0x1c95230*/ double Round(double value, int digits, System.MidpointRounding mode);
        static /*0x1c954e0*/ int Sign(double value);
        static /*0x1c9555c*/ int Sign(long value);
        static /*0x1c95570*/ decimal Truncate(decimal d);
        static /*0x1c955d8*/ double Truncate(double d);
        static void ThrowMinMaxException<T>(T min, T max);
        static /*0x1c95644*/ double Abs(double value);
        static /*0x1c9564c*/ float Abs(float value);
        static /*0x1c95654*/ double Asin(double d);
        static /*0x1c95658*/ double Atan(double d);
        static /*0x1c9565c*/ double Atan2(double y, double x);
        static /*0x1c95660*/ double Ceiling(double a);
        static /*0x1c95668*/ double Cos(double d);
        static /*0x1c9566c*/ double Exp(double d);
        static /*0x1c95670*/ double Floor(double d);
        static /*0x1c95678*/ double Log(double d);
        static /*0x1c9567c*/ double Log10(double d);
        static /*0x1c95680*/ double Pow(double x, double y);
        static /*0x1c95684*/ double Sin(double a);
        static /*0x1c95688*/ double Sqrt(double d);
        static /*0x1c95690*/ double Tan(double a);
        static /*0x1c954dc*/ double ModF(double x, double* intptr);
    }

    class MemberAccessException : System.SystemException
    {
        /*0x1c95744*/ MemberAccessException();
        /*0x1c957a0*/ MemberAccessException(string message);
        /*0x1c957c4*/ MemberAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Memory<T> : System.IEquatable<System.Memory<T>>
    {
        /*0x0*/ object _object;
        /*0x0*/ int _index;
        /*0x0*/ int _length;

        static System.Memory<T> op_Implicit(T[] array);
        static System.ReadOnlyMemory<T> op_Implicit(System.Memory<T> memory);
        static int CombineHashCodes(int left, int right);
        static int CombineHashCodes(int h1, int h2, int h3);
        Memory(T[] array);
        Memory(T[] array, int start, int length);
        Memory(object obj, int start, int length);
        int get_Length();
        string ToString();
        System.Memory<T> Slice(int start, int length);
        System.Span<T> get_Span();
        System.Buffers.MemoryHandle Pin();
        T[] ToArray();
        bool Equals(object obj);
        bool Equals(System.Memory<T> other);
        int GetHashCode();
    }

    class MemoryDebugView<T>
    {
    }

    class MemoryExtensions
    {
        static /*0x1c957cc*/ bool EqualsOrdinal(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x1c95900*/ bool EqualsOrdinalIgnoreCase(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x1c959ac*/ bool Contains(System.ReadOnlySpan<char> source, char value);
        static /*0x1c95a24*/ int ToUpperInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
        static /*0x1c95b7c*/ bool EndsWith(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.StringComparison comparisonType);
        static System.Span<T> AsSpan<T>(T[] array, int start);
        static /*0x1c95eac*/ System.ReadOnlySpan<char> AsSpan(string text);
        static /*0x1c95f04*/ System.ReadOnlySpan<char> AsSpan(string text, int start);
        static /*0x1c95f90*/ System.ReadOnlySpan<char> AsSpan(string text, int start, int length);
        static /*0x1c8d350*/ System.ReadOnlySpan<char> Trim(System.ReadOnlySpan<char> span);
        static /*0x1c96030*/ System.ReadOnlySpan<char> TrimStart(System.ReadOnlySpan<char> span);
        static /*0x1c96124*/ System.ReadOnlySpan<char> TrimEnd(System.ReadOnlySpan<char> span);
        static int IndexOf<T>(System.ReadOnlySpan<T> span, T value);
        static int IndexOfAny<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> values);
        static bool SequenceEqual<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> other);
        static bool StartsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static bool EndsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static System.Span<T> AsSpan<T>(T[] array, int start, int length);
        static void CopyTo<T>(T[] source, System.Span<T> destination);
        static bool IsTypeComparableAsBytes<T>(ref ulong size);
    }

    class MethodAccessException : System.MemberAccessException
    {
        /*0x1c96218*/ MethodAccessException();
        /*0x1c96274*/ MethodAccessException(string message);
        /*0x1c96298*/ MethodAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum MidpointRounding
    {
        ToEven = 0,
        AwayFromZero = 1,
    }

    class MissingMethodException : System.MissingMemberException
    {
        /*0x1c962a0*/ MissingMethodException();
        /*0x1c962fc*/ MissingMethodException(string message);
        /*0x1c96320*/ MissingMethodException(string className, string methodName);
        /*0x1c9634c*/ MissingMethodException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c96354*/ string get_Message();
    }

    class MulticastNotSupportedException : System.SystemException
    {
        /*0x1c96480*/ MulticastNotSupportedException();
        /*0x1c964dc*/ MulticastNotSupportedException(string message);
        /*0x1c96500*/ MulticastNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NonSerializedAttribute : System.Attribute
    {
        /*0x1c96508*/ NonSerializedAttribute();
    }

    class NotImplementedException : System.SystemException
    {
        /*0x1c96510*/ NotImplementedException();
        /*0x1c9656c*/ NotImplementedException(string message);
        /*0x1c96590*/ NotImplementedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NotSupportedException : System.SystemException
    {
        /*0x1c96598*/ NotSupportedException();
        /*0x1c965f4*/ NotSupportedException(string message);
        /*0x1c96618*/ NotSupportedException(string message, System.Exception innerException);
        /*0x1c9663c*/ NotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NullReferenceException : System.SystemException
    {
        /*0x1c96644*/ NullReferenceException();
        /*0x1c966a0*/ NullReferenceException(string message);
        /*0x1c966c4*/ NullReferenceException(string message, System.Exception innerException);
        /*0x1c966e8*/ NullReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Nullable<T>
    {
        /*0x0*/ bool hasValue;
        /*0x0*/ T value;

        static object Box(System.Nullable<T> o);
        static System.Nullable<T> Unbox(object o);
        static System.Nullable<T> UnboxExact(object o);
        Nullable(T value);
        bool get_HasValue();
        T get_Value();
        T GetValueOrDefault();
        T GetValueOrDefault(T defaultValue);
        bool Equals(object other);
        int GetHashCode();
        string ToString();
    }

    class Nullable
    {
        static /*0x1c966f0*/ System.Type GetUnderlyingType(System.Type nullableType);
    }

    class Number
    {
        static /*0x0*/ string[] s_posCurrencyFormats;
        static /*0x8*/ string[] s_negCurrencyFormats;
        static /*0x10*/ string[] s_posPercentFormats;
        static /*0x18*/ string[] s_negPercentFormats;
        static /*0x20*/ string[] s_negNumberFormats;
        static /*0x28*/ int[] s_charToHexLookup;
        static /*0x30*/ ulong[] s_rgval64Power10;
        static /*0x38*/ sbyte[] s_rgexp64Power10;
        static /*0x40*/ ulong[] s_rgval64Power10By16;
        static /*0x48*/ short[] s_rgexp64Power10By16;

        static /*0x1ca244c*/ Number();
        static /*0x1c96840*/ string FormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x1c98410*/ bool TryFormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x1c96b60*/ void DecimalToNumber(decimal value, ref System.Number.NumberBuffer number);
        static /*0x1c98668*/ string FormatDouble(double value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x1c98aac*/ bool TryFormatDouble(double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x1c987c8*/ string FormatDouble(ref System.Text.ValueStringBuilder sb, double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x1c99668*/ string FormatSingle(float value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x1c99ab8*/ bool TryFormatSingle(float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0x1c997c8*/ string FormatSingle(ref System.Text.ValueStringBuilder sb, float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x1c98c28*/ bool TryCopyTo(string source, System.Span<char> destination, ref int charsWritten);
        static /*0x1c8f7fc*/ string FormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x1c9062c*/ bool TryFormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x1c8fdd0*/ string FormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x1c90254*/ bool TryFormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x1c92acc*/ string FormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x1c93030*/ bool TryFormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x1c9b5a0*/ string FormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0x1c9b9c4*/ bool TryFormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0x1c9bca0*/ void Int32ToNumber(int value, ref System.Number.NumberBuffer number);
        static /*0x1c99dc4*/ string NegativeInt32ToDecStr(int value, int digits, string sNegative);
        static /*0x1c9a26c*/ bool TryNegativeInt32ToDecStr(int value, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0x1c99f70*/ string Int32ToHexStr(int value, char hexBase, int digits);
        static /*0x1c9a454*/ bool TryInt32ToHexStr(int value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x1c9bdcc*/ char* Int32ToHexChars(char* buffer, uint value, int hexBase, int digits);
        static /*0x1c9be0c*/ void UInt32ToNumber(uint value, ref System.Number.NumberBuffer number);
        static /*0x1c9861c*/ char* UInt32ToDecChars(char* bufferEnd, uint value, int digits);
        static /*0x1c99c34*/ string UInt32ToDecStr(uint value, int digits);
        static /*0x1c9a0a8*/ bool TryUInt32ToDecStr(uint value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x1c9acac*/ void Int64ToNumber(long input, ref System.Number.NumberBuffer number);
        static /*0x1c9a820*/ string NegativeInt64ToDecStr(long input, int digits, string sNegative);
        static /*0x1c9b0d8*/ bool TryNegativeInt64ToDecStr(long input, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0x1c9aac0*/ string Int64ToHexStr(long value, char hexBase, int digits);
        static /*0x1c9b39c*/ bool TryInt64ToHexStr(long value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x1c9b830*/ void UInt64ToNumber(ulong value, ref System.Number.NumberBuffer number);
        static /*0x1c9a5c8*/ string UInt64ToDecStr(ulong value, int digits);
        static /*0x1c9ae54*/ bool TryUInt64ToDecStr(ulong value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0x1c96a20*/ char ParseFormatSpecifier(System.ReadOnlySpan<char> format, ref int digits);
        static /*0x1c96d78*/ void NumberToString(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, char format, int nMaxDigits, System.Globalization.NumberFormatInfo info, bool isDecimal);
        static /*0x1c972f8*/ void NumberToStringFormat(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0x1c9c068*/ void FormatCurrency(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x1c9c2d0*/ void FormatFixed(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, int[] groupDigits, string sDecimal, string sGroup);
        static /*0x1c9c810*/ void FormatNumber(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x1c9ca64*/ void FormatScientific(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar);
        static /*0x1c9d410*/ void FormatExponent(ref System.Text.ValueStringBuilder sb, System.Globalization.NumberFormatInfo info, int value, char expChar, int minDigits, bool positiveSign);
        static /*0x1c9ccbc*/ void FormatGeneral(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar, bool bSuppressScientific);
        static /*0x1c9d074*/ void FormatPercent(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0x1c9bf68*/ void RoundNumber(ref System.Number.NumberBuffer number, int pos);
        static /*0x1c9d2dc*/ int FindSection(System.ReadOnlySpan<char> format, int section);
        static /*0x1c9bf64*/ uint Low32(ulong value);
        static /*0x1c9bf5c*/ uint High32(ulong value);
        static /*0x1c9bf24*/ uint Int64DivMod1E9(ref ulong value);
        static /*0x1c9d6b8*/ bool NumberToInt32(ref System.Number.NumberBuffer number, ref int value);
        static /*0x1c9d774*/ bool NumberToInt64(ref System.Number.NumberBuffer number, ref long value);
        static /*0x1c9d828*/ bool NumberToUInt32(ref System.Number.NumberBuffer number, ref uint value);
        static /*0x1c9d8d8*/ bool NumberToUInt64(ref System.Number.NumberBuffer number, ref ulong value);
        static /*0x1c90d20*/ int ParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1c93424*/ long ParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1c9f138*/ uint ParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1c9fa90*/ ulong ParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1ca03f4*/ bool ParseNumber(ref char* str, char* strEnd, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x1c91064*/ bool TryParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result);
        static /*0x1c9d988*/ bool TryParseInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result, ref bool failureIsOverflow);
        static /*0x1c9e640*/ bool TryParseInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result, ref bool failureIsOverflow);
        static /*0x1c93880*/ bool TryParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result);
        static /*0x1ca0d58*/ bool TryParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result);
        static /*0x1c9f2f0*/ bool TryParseUInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0x1c9e1c4*/ bool TryParseUInt32HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0x1ca0ee4*/ bool TryParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result);
        static /*0x1c9fc48*/ bool TryParseUInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0x1c9edf4*/ bool TryParseUInt64HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0x1ca1070*/ decimal ParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1ca1178*/ bool NumberBufferToDecimal(ref System.Number.NumberBuffer number, ref decimal value);
        static /*0x1ca1450*/ double ParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1ca1a50*/ float ParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0x1ca1ff0*/ bool TryParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref decimal result);
        static /*0x1ca20f4*/ bool TryParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref double result);
        static /*0x1ca21f8*/ bool TryParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref float result);
        static /*0x1c9e508*/ void StringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x1ca0bac*/ bool TryStringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x1ca0cdc*/ bool TrailingZeros(System.ReadOnlySpan<char> value, int index);
        static /*0x1ca0b18*/ char* MatchChars(char* p, char* pEnd, string value);
        static /*0x1ca0afc*/ bool IsWhite(int ch);
        static /*0x1ca0b9c*/ bool IsDigit(int ch);
        static /*0x1c9e130*/ void ThrowOverflowOrFormatException(bool overflow, string overflowResourceKey);
        static /*0x1ca1980*/ bool NumberBufferToDouble(ref System.Number.NumberBuffer number, ref double value);
        static /*0x1ca236c*/ uint DigitsToInt(char* p, int count);
        static /*0x1ca23a0*/ ulong Mul32x32To64(uint a, uint b);
        static /*0x1ca23a8*/ ulong Mul64Lossy(ulong a, ulong b, ref int pexp);
        static /*0x1ca2440*/ int abs(int value);
        static /*0x1c99180*/ double NumberToDouble(ref System.Number.NumberBuffer number);
        static /*0x1c98d04*/ void DoubleToNumber(double value, int precision, ref System.Number.NumberBuffer number);

        struct NumberBuffer
        {
            /*0x10*/ int precision;
            /*0x14*/ int scale;
            /*0x18*/ int _sign;
            /*0x1c*/ System.Number.NumberBuffer.DigitsAndNullTerminator _digits;
            /*0x82*/ char* _allDigits;

            /*0x1b6bbb4*/ bool get_sign();
            /*0x1b6bbc4*/ void set_sign(bool value);
            /*0x1b6bbd0*/ char* get_digits();

            struct DigitsAndNullTerminator
            {
            }
        }
    }

    class ObjectDisposedException : System.InvalidOperationException
    {
        /*0x90*/ string _objectName;

        /*0x1b6bbd8*/ ObjectDisposedException();
        /*0x1b6bc70*/ ObjectDisposedException(string objectName);
        /*0x1b6bc38*/ ObjectDisposedException(string objectName, string message);
        /*0x1b6bcdc*/ ObjectDisposedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b6bd64*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b6bf54*/ string get_Message();
        /*0x1b6be6c*/ string get_ObjectName();
    }

    class ObsoleteAttribute : System.Attribute
    {
        /*0x10*/ string _message;
        /*0x18*/ bool _error;

        /*0x1b6c028*/ ObsoleteAttribute();
        /*0x1b6c048*/ ObsoleteAttribute(string message);
        /*0x1b6c074*/ ObsoleteAttribute(string message, bool error);
        /*0x1b6c0a4*/ string get_Message();
    }

    class OperationCanceledException : System.SystemException
    {
        /*0x90*/ System.Threading.CancellationToken _cancellationToken;

        /*0x1b6c0bc*/ OperationCanceledException();
        /*0x1b6c18c*/ OperationCanceledException(string message);
        /*0x1b6c1ac*/ OperationCanceledException(string message, System.Threading.CancellationToken token);
        /*0x1b6c1dc*/ OperationCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b6c0ac*/ System.Threading.CancellationToken get_CancellationToken();
        /*0x1b6c0b4*/ void set_CancellationToken(System.Threading.CancellationToken value);
    }

    class OverflowException : System.ArithmeticException
    {
        /*0x1b6c260*/ OverflowException();
        /*0x1b6c2bc*/ OverflowException(string message);
        /*0x1b6c2e0*/ OverflowException(string message, System.Exception innerException);
        /*0x1b6c304*/ OverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ParamArrayAttribute : System.Attribute
    {
        /*0x1b6c30c*/ ParamArrayAttribute();
    }

    struct ParamsArray
    {
        static /*0x0*/ object[] s_oneArgArray;
        static /*0x8*/ object[] s_twoArgArray;
        static /*0x10*/ object[] s_threeArgArray;
        /*0x10*/ object _arg0;
        /*0x18*/ object _arg1;
        /*0x20*/ object _arg2;
        /*0x28*/ object[] _args;

        static /*0x1b6c564*/ ParamsArray();
        /*0x1b6c314*/ ParamsArray(object arg0);
        /*0x1b6c388*/ ParamsArray(object arg0, object arg1);
        /*0x1b6c400*/ ParamsArray(object arg0, object arg1, object arg2);
        /*0x1b6c484*/ ParamsArray(object[] args);
        /*0x1b6c4e4*/ int get_Length();
        /*0x1b6c500*/ object get_Item(int index);
        /*0x1b6c510*/ object GetAtSlow(int index);
    }

    class ParseNumbers
    {
        static /*0x1b6c5fc*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags);
        static /*0x1b6c614*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0x1b6cc38*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags);
        static /*0x1b6cc50*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0x1b6d240*/ string IntToString(int n, int radix, int width, char paddingChar, int flags);
        static /*0x1b6c984*/ void EatWhiteSpace(System.ReadOnlySpan<char> s, ref int i);
        static /*0x1b6ca48*/ long GrabLongs(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0x1b6d01c*/ int GrabInts(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0x1b6d658*/ void ThrowOverflowInt32Exception();
        static /*0x1b6d5c0*/ void ThrowOverflowInt64Exception();
        static /*0x1b6d6a4*/ void ThrowOverflowUInt32Exception();
        static /*0x1b6d60c*/ void ThrowOverflowUInt64Exception();
        static /*0x1b6d6f0*/ bool IsDigit(char c, int radix, ref int result);
    }

    class PlatformNotSupportedException : System.NotSupportedException
    {
        /*0x1b6d744*/ PlatformNotSupportedException();
        /*0x1b6d7a0*/ PlatformNotSupportedException(string message);
        /*0x1b6d7c4*/ PlatformNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Random
    {
        static /*0x0*/ System.Random s_globalRandom;
        [ThreadStatic] static System.Random t_threadRandom;
        /*0x10*/ int _inext;
        /*0x14*/ int _inextp;
        /*0x18*/ int[] _seedArray;

        static /*0x1b6df50*/ Random();
        static /*0x1b6d828*/ int GenerateSeed();
        static /*0x1b6dc48*/ int GenerateGlobalSeed();
        /*0x1b6d7cc*/ Random();
        /*0x1b6d9e8*/ Random(int Seed);
        /*0x1b6db98*/ double Sample();
        /*0x1b6dbb8*/ int InternalSample();
        /*0x1b6dc6c*/ int Next();
        /*0x1b6dc70*/ double GetSampleForLargeRange();
        /*0x1b6dcbc*/ int Next(int minValue, int maxValue);
        /*0x1b6ddd8*/ int Next(int maxValue);
        /*0x1b6dea0*/ void NextBytes(byte[] buffer);
    }

    class RankException : System.SystemException
    {
        /*0x1b6dfd4*/ RankException();
        /*0x1b6e02c*/ RankException(string message);
        /*0x1b6e04c*/ RankException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ReadOnlyMemory<T> : System.IEquatable<System.ReadOnlyMemory<T>>
    {
        /*0x0*/ object _object;
        /*0x0*/ int _index;
        /*0x0*/ int _length;

        static int CombineHashCodes(int left, int right);
        static int CombineHashCodes(int h1, int h2, int h3);
        ReadOnlyMemory(T[] array);
        ReadOnlyMemory(T[] array, int start, int length);
        int get_Length();
        string ToString();
        System.ReadOnlySpan<T> get_Span();
        bool Equals(object obj);
        bool Equals(System.ReadOnlyMemory<T> other);
        int GetHashCode();
        object GetObjectStartLength(ref int start, ref int length);
    }

    struct ReadOnlySpan<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static System.ReadOnlySpan<T> op_Implicit(T[] array);
        static System.ReadOnlySpan<T> get_Empty();
        ReadOnlySpan(T[] array);
        ReadOnlySpan(T[] array, int start, int length);
        ReadOnlySpan(void* pointer, int length);
        ReadOnlySpan(ref T ptr, int length);
        ref T get_Item(int index);
        void CopyTo(System.Span<T> destination);
        bool TryCopyTo(System.Span<T> destination);
        string ToString();
        System.ReadOnlySpan<T> Slice(int start);
        System.ReadOnlySpan<T> Slice(int start, int length);
        T[] ToArray();
        int get_Length();
        bool get_IsEmpty();
        bool Equals(object obj);
        int GetHashCode();
    }

    class ResolveEventArgs : System.EventArgs
    {
        /*0x10*/ string <Name>k__BackingField;
        /*0x18*/ System.Reflection.Assembly <RequestingAssembly>k__BackingField;

        /*0x1b6e050*/ ResolveEventArgs(string name);
        /*0x1b6e0bc*/ ResolveEventArgs(string name, System.Reflection.Assembly requestingAssembly);
    }

    class ResolveEventHandler : System.MulticastDelegate
    {
        /*0x1b6e12c*/ ResolveEventHandler(object object, nint method);
        /*0x1b6e25c*/ System.Reflection.Assembly Invoke(object sender, System.ResolveEventArgs args);
    }

    struct SByte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<sbyte>, System.IEquatable<sbyte>, System.ISpanFormattable
    {
        /*0x10*/ sbyte m_value;

        static /*0x1b6e7a4*/ sbyte Parse(string s, System.IFormatProvider provider);
        static /*0x1b6e9e0*/ sbyte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1b6e840*/ sbyte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x1b6ea70*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref sbyte result);
        static /*0x1b6eb18*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref sbyte result);
        /*0x1b6e270*/ int CompareTo(object obj);
        /*0x1b6e330*/ int CompareTo(sbyte value);
        /*0x1b6e33c*/ bool Equals(object obj);
        /*0x1b6e3b4*/ bool Equals(sbyte obj);
        /*0x1b6e3c4*/ int GetHashCode();
        /*0x1b6e3d0*/ string ToString();
        /*0x1b6e468*/ string ToString(System.IFormatProvider provider);
        /*0x1b6e504*/ string ToString(string format);
        /*0x1b6e50c*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1b6e688*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1b6ebe0*/ System.TypeCode GetTypeCode();
        /*0x1b6ebe8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1b6ec44*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1b6eca0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1b6eca8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1b6ed04*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1b6ed60*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1b6edbc*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1b6edc4*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1b6ee20*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1b6ee7c*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1b6eed8*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1b6ef34*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1b6ef90*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1b6efec*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1b6f078*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class SerializableAttribute : System.Attribute
    {
        /*0x1b6f124*/ SerializableAttribute();
    }

    struct Single : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<float>, System.IEquatable<float>, System.ISpanFormattable
    {
        static float MinValue = -3.4028234663852886e+38;
        static float Epsilon = 1.401298464324817e-45;
        static float MaxValue = 3.4028234663852886e+38;
        static float PositiveInfinity = Infinity;
        static float NegativeInfinity = -Infinity;
        static float NaN = NaN;
        static float NegativeZero = 0;
        /*0x10*/ float m_value;

        static /*0x1b6f12c*/ bool IsFinite(float f);
        static /*0x1b6f194*/ bool IsInfinity(float f);
        static /*0x1b6f200*/ bool IsNaN(float f);
        static /*0x1b6f26c*/ bool IsNegativeInfinity(float f);
        static /*0x1b6f280*/ bool IsPositiveInfinity(float f);
        static /*0x1b6fa24*/ float Parse(string s);
        static /*0x1b6fad8*/ float Parse(string s, System.IFormatProvider provider);
        static /*0x1b6fb9c*/ float Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1b6fc70*/ bool TryParse(string s, ref float result);
        static /*0x1b70194*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref float result);
        static /*0x1b6fcf0*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref float result);
        /*0x1b6f294*/ int CompareTo(object value);
        /*0x1b6f410*/ int CompareTo(float value);
        /*0x1b6f4f4*/ bool Equals(object obj);
        /*0x1b6f60c*/ bool Equals(float obj);
        /*0x1b6f6dc*/ int GetHashCode();
        /*0x1b6f744*/ string ToString();
        /*0x1b6f7c0*/ string ToString(System.IFormatProvider provider);
        /*0x1b6f84c*/ string ToString(string format);
        /*0x1b6f8d4*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1b6f964*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1b7023c*/ System.TypeCode GetTypeCode();
        /*0x1b70244*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1b702a8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1b70334*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1b70398*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1b703fc*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1b70460*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1b704c4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1b70528*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1b7058c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1b705f0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1b70654*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1b7065c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1b706c0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1b70724*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1b707b0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Span<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static System.ReadOnlySpan<T> op_Implicit(System.Span<T> span);
        static System.Span<T> op_Implicit(T[] array);
        Span(T[] array);
        Span(T[] array, int start, int length);
        Span(void* pointer, int length);
        Span(ref T ptr, int length);
        ref T get_Item(int index);
        ref T GetPinnableReference();
        void Clear();
        void Fill(T value);
        void CopyTo(System.Span<T> destination);
        bool TryCopyTo(System.Span<T> destination);
        string ToString();
        System.Span<T> Slice(int start);
        System.Span<T> Slice(int start, int length);
        T[] ToArray();
        int get_Length();
        bool Equals(object obj);
        int GetHashCode();
    }

    class SpanDebugView<T>
    {
    }

    class SpanHelpers
    {
        static /*0x1b7085c*/ int IndexOfAny(ref byte searchSpace, int searchSpaceLength, ref byte value, int valueLength);
        static /*0x1b708dc*/ int IndexOf(ref byte searchSpace, byte value, int length);
        static /*0x1b70b74*/ bool SequenceEqual(ref byte first, ref byte second, ulong length);
        static /*0x1b70d3c*/ int SequenceCompareTo(ref char first, int firstLength, ref char second, int secondLength);
        static /*0x1b7120c*/ int IndexOf(ref char searchSpace, char value, int length);
        static /*0x1b71948*/ int LastIndexOf(ref char searchSpace, char value, int length);
        static /*0x1b7202c*/ int LocateFirstFoundChar(System.Numerics.Vector<ushort> match);
        static /*0x1b721ec*/ int LocateFirstFoundChar(ulong match);
        static /*0x1b7220c*/ int LocateLastFoundChar(System.Numerics.Vector<ushort> match);
        static /*0x1b723cc*/ int LocateLastFoundChar(ulong match);
        static int IndexOf<T>(ref T searchSpace, T value, int length);
        static int IndexOfAny<T>(ref T searchSpace, int searchSpaceLength, ref T value, int valueLength);
        static bool SequenceEqual<T>(ref T first, ref T second, int length);
        static /*0x1b723f8*/ bool EndsWithCultureHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0x1b725f8*/ bool EndsWithCultureIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0x1b72718*/ bool EndsWithOrdinalIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0x1b727f8*/ void ClearWithoutReferences(ref byte b, ulong byteLength);
        static /*0x1b729e0*/ void ClearWithReferences(ref nint ip, ulong pointerSizeLength);
    }

    class StackOverflowException : System.SystemException
    {
        /*0x1b72b30*/ StackOverflowException();
        /*0x1b72b88*/ StackOverflowException(string message);
        /*0x1b72ba8*/ StackOverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class StringComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
    {
        static /*0x0*/ System.CultureAwareComparer s_invariantCulture;
        static /*0x8*/ System.CultureAwareComparer s_invariantCultureIgnoreCase;
        static /*0x10*/ System.OrdinalCaseSensitiveComparer s_ordinal;
        static /*0x18*/ System.OrdinalIgnoreCaseComparer s_ordinalIgnoreCase;

        static /*0x1b730d8*/ StringComparer();
        static /*0x1b72bac*/ System.StringComparer get_InvariantCultureIgnoreCase();
        static /*0x1b72c04*/ System.StringComparer get_Ordinal();
        static /*0x1b72c5c*/ System.StringComparer get_OrdinalIgnoreCase();
        static /*0x1b72cb4*/ System.StringComparer Create(System.Globalization.CultureInfo culture, bool ignoreCase);
        /*0x1b730d0*/ StringComparer();
        /*0x1b72db0*/ int Compare(object x, object y);
        /*0x1b72f40*/ bool Equals(object x, object y);
        /*0x1b73008*/ int GetHashCode(object obj);
        int Compare(string x, string y);
        bool Equals(string x, string y);
        int GetHashCode(string obj);
    }

    class CultureAwareComparer : System.StringComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ System.Globalization.CompareInfo _compareInfo;
        /*0x18*/ System.Globalization.CompareOptions _options;

        /*0x1b72d6c*/ CultureAwareComparer(System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        /*0x1b73248*/ CultureAwareComparer(System.Globalization.CompareInfo compareInfo, System.Globalization.CompareOptions options);
        /*0x1b7332c*/ CultureAwareComparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b73538*/ int Compare(string x, string y);
        /*0x1b7358c*/ bool Equals(string x, string y);
        /*0x1b735dc*/ int GetHashCode(string obj);
        /*0x1b73650*/ bool Equals(object obj);
        /*0x1b736e8*/ int GetHashCode();
        /*0x1b7371c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalComparer : System.StringComparer
    {
        /*0x10*/ bool _ignoreCase;

        /*0x1b73808*/ OrdinalComparer(bool ignoreCase);
        /*0x1b73874*/ int Compare(string x, string y);
        /*0x1b738cc*/ bool Equals(string x, string y);
        /*0x1b7394c*/ int GetHashCode(string obj);
        /*0x1b739d4*/ bool Equals(object obj);
        /*0x1b73a6c*/ int GetHashCode();
    }

    class OrdinalCaseSensitiveComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x1b73238*/ OrdinalCaseSensitiveComparer();
        /*0x1b73ad0*/ int Compare(string x, string y);
        /*0x1b73ae0*/ bool Equals(string x, string y);
        /*0x1b73af0*/ int GetHashCode(string obj);
        /*0x1b73b10*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalIgnoreCaseComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x1b73240*/ OrdinalIgnoreCaseComparer();
        /*0x1b73bc4*/ int Compare(string x, string y);
        /*0x1b73bdc*/ bool Equals(string x, string y);
        /*0x1b73bf4*/ int GetHashCode(string obj);
        /*0x1b73c58*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum StringComparison
    {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    }

    enum StringSplitOptions
    {
        None = 0,
        RemoveEmptyEntries = 1,
    }

    class SystemException : System.Exception
    {
        /*0x1b73d0c*/ SystemException();
        /*0x1b6c114*/ SystemException(string message);
        /*0x1b73d8c*/ SystemException(string message, System.Exception innerException);
        /*0x1b6c1e0*/ SystemException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class STAThreadAttribute : System.Attribute
    {
        /*0x1b73e0c*/ STAThreadAttribute();
    }

    class ThreadStaticAttribute : System.Attribute
    {
        /*0x1b73e14*/ ThreadStaticAttribute();
    }

    struct TimeSpan : System.IComparable, System.IComparable<System.TimeSpan>, System.IEquatable<System.TimeSpan>, System.IFormattable, System.ISpanFormattable
    {
        static long TicksPerMillisecond = 10000;
        static double MillisecondsPerTick = 0.0001;
        static long TicksPerSecond = 10000000;
        static double SecondsPerTick = 1e-7;
        static long TicksPerMinute = 600000000;
        static double MinutesPerTick = 1.6666666666666667e-9;
        static long TicksPerHour = 36000000000;
        static double HoursPerTick = 2.7777777777777777e-11;
        static long TicksPerDay = 864000000000;
        static double DaysPerTick = 1.1574074074074074e-12;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static long MaxSeconds = 922337203685;
        static long MinSeconds = -922337203685;
        static long MaxMilliSeconds = 922337203685477;
        static long MinMilliSeconds = -922337203685477;
        static long TicksPerTenthSecond = 1000000;
        static /*0x0*/ System.TimeSpan Zero;
        static /*0x8*/ System.TimeSpan MaxValue;
        static /*0x10*/ System.TimeSpan MinValue;
        /*0x10*/ long _ticks;

        static /*0x1b74ca8*/ TimeSpan();
        static /*0x1b74218*/ int Compare(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74314*/ System.TimeSpan FromDays(double value);
        static /*0x1b74558*/ System.TimeSpan FromHours(double value);
        static /*0x1b74378*/ System.TimeSpan Interval(double value, int scale);
        static /*0x1b745bc*/ System.TimeSpan FromMilliseconds(double value);
        static /*0x1b7461c*/ System.TimeSpan FromMinutes(double value);
        static /*0x1b74734*/ System.TimeSpan FromSeconds(double value);
        static /*0x1b74800*/ System.TimeSpan FromTicks(long value);
        static /*0x1b73ea4*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x1b74804*/ System.TimeSpan Parse(string s);
        static /*0x1b74860*/ System.TimeSpan Parse(string input, System.IFormatProvider formatProvider);
        static /*0x1b748c0*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, ref System.TimeSpan result);
        static /*0x1b74b80*/ System.TimeSpan op_UnaryNegation(System.TimeSpan t);
        static /*0x1b74c30*/ System.TimeSpan op_Subtraction(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c48*/ System.TimeSpan op_Addition(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c60*/ bool op_Equality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c6c*/ bool op_Inequality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c78*/ bool op_LessThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c84*/ bool op_LessThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c90*/ bool op_GreaterThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1b74c9c*/ bool op_GreaterThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        /*0x1b73e1c*/ TimeSpan(long ticks);
        /*0x1b73e24*/ TimeSpan(int hours, int minutes, int seconds);
        /*0x1b73f40*/ TimeSpan(int days, int hours, int minutes, int seconds);
        /*0x1b73f48*/ TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
        /*0x1b74008*/ long get_Ticks();
        /*0x1b74010*/ int get_Days();
        /*0x1b7403c*/ int get_Hours();
        /*0x1b74084*/ int get_Minutes();
        /*0x1b740cc*/ int get_Seconds();
        /*0x1b74118*/ double get_TotalDays();
        /*0x1b74130*/ double get_TotalHours();
        /*0x1b74148*/ double get_TotalMilliseconds();
        /*0x1b7417c*/ double get_TotalMinutes();
        /*0x1b74194*/ double get_TotalSeconds();
        /*0x1b741ac*/ System.TimeSpan Add(System.TimeSpan ts);
        /*0x1b74230*/ int CompareTo(object value);
        /*0x1b742f8*/ int CompareTo(System.TimeSpan value);
        /*0x1b744c4*/ bool Equals(object value);
        /*0x1b7453c*/ bool Equals(System.TimeSpan obj);
        /*0x1b7454c*/ int GetHashCode();
        /*0x1b7467c*/ System.TimeSpan Negate();
        /*0x1b74794*/ System.TimeSpan Subtract(System.TimeSpan ts);
        /*0x1b74994*/ string ToString();
        /*0x1b749f8*/ string ToString(string format);
        /*0x1b74a68*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0x1b74adc*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
    }

    class TimeZone
    {
        /*0x1b74d00*/ TimeZone();
    }

    enum TimeZoneInfoOptions
    {
        None = 1,
        NoThrowOnInvalidTime = 2,
    }

    class TimeoutException : System.SystemException
    {
        /*0x1b74d08*/ TimeoutException();
        /*0x1b74d60*/ TimeoutException(string message);
        /*0x1b74d80*/ TimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    interface ITupleInternal : System.Runtime.CompilerServices.ITuple
    {
        string ToString(System.Text.StringBuilder sb);
    }

    class Tuple
    {
        static System.Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static System.Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3);
        static /*0x1b74d84*/ int CombineHashCodes(int h1, int h2);
        static /*0x1b74d90*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x1b74da4*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
    }

    class Tuple<T1, T2> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;

        Tuple(T1 item1, T2 item2);
        T1 get_Item1();
        T2 get_Item2();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;

        Tuple(T1 item1, T2 item2, T3 item3);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;

        Tuple(T1 item1, T2 item2, T3 item3, T4 item4);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Type : System.Reflection.MemberInfo
    {
        static System.Reflection.BindingFlags DefaultLookup = 28;
        static string DefaultTypeNameWhenMissingMetadata = "UnknownType";
        static /*0x0*/ System.Reflection.Binder s_defaultBinder;
        static /*0x8*/ char Delimiter;
        static /*0x10*/ System.Type[] EmptyTypes;
        static /*0x18*/ object Missing;
        static /*0x20*/ System.Reflection.MemberFilter FilterAttribute;
        static /*0x28*/ System.Reflection.MemberFilter FilterName;
        static /*0x30*/ System.Reflection.MemberFilter FilterNameIgnoreCase;
        /*0x10*/ System.RuntimeTypeHandle _impl;

        static /*0x1b788a0*/ Type();
        static /*0x1b753fc*/ int BinarySearch(System.Array array, object value);
        static /*0x1b75158*/ bool IsIntegerType(System.Type t);
        static /*0x1b76720*/ bool FilterAttributeImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x1b76a78*/ bool FilterNameImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x1b76bf8*/ bool FilterNameIgnoreCaseImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0x1b77c84*/ System.RuntimeTypeHandle GetTypeHandle(object o);
        static /*0x1b77d00*/ System.TypeCode GetTypeCode(System.Type type);
        static /*0x1b781c8*/ System.Type MakeGenericSignatureType(System.Type genericTypeDefinition, System.Type[] typeArguments);
        static /*0x1b78420*/ System.Reflection.Binder get_DefaultBinder();
        static /*0x1b6bec0*/ System.Type GetTypeFromHandle(System.RuntimeTypeHandle handle);
        static /*0x1b784f8*/ System.Type internal_from_handle(nint handle);
        static /*0x1b78558*/ System.Type GetType(string typeName, bool throwOnError, bool ignoreCase);
        static /*0x1b785e4*/ System.Type GetType(string typeName, bool throwOnError);
        static /*0x1b78664*/ System.Type GetType(string typeName);
        static /*0x1b786e0*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError);
        static /*0x1b7514c*/ bool op_Equality(System.Type left, System.Type right);
        static /*0x1b75f34*/ bool op_Inequality(System.Type left, System.Type right);
        /*0x1b76d8c*/ Type();
        /*0x1b74dc0*/ bool IsEnumDefined(object value);
        /*0x1b75538*/ string GetEnumName(object value);
        /*0x1b75734*/ string[] GetEnumNames();
        /*0x1b753d8*/ System.Array GetEnumRawConstantValues();
        /*0x1b757dc*/ void GetEnumData(ref string[] enumNames, ref System.Array enumValues);
        /*0x1b75d6c*/ bool get_IsSerializable();
        /*0x1b75f40*/ bool get_ContainsGenericParameters();
        /*0x1b76048*/ System.Type GetRootElementType();
        /*0x1b76098*/ bool get_IsVisible();
        /*0x1b762b8*/ bool IsSubclassOf(System.Type c);
        /*0x1b76370*/ bool IsAssignableFrom(System.Type c);
        /*0x1b765d8*/ bool ImplementInterface(System.Type ifaceType);
        /*0x1b76d94*/ System.Reflection.MemberTypes get_MemberType();
        /*0x1b76d9c*/ System.Type GetType();
        string get_Namespace();
        string get_AssemblyQualifiedName();
        string get_FullName();
        System.Reflection.Assembly get_Assembly();
        System.Reflection.Module get_Module();
        /*0x1b76220*/ bool get_IsNested();
        /*0x1b76da4*/ System.Type get_DeclaringType();
        /*0x1b76dac*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x1b76db4*/ System.Type get_ReflectedType();
        System.Type get_UnderlyingSystemType();
        /*0x1b76dbc*/ bool get_IsArray();
        bool IsArrayImpl();
        /*0x1b76dcc*/ bool get_IsByRef();
        bool IsByRefImpl();
        /*0x1b76ddc*/ bool get_IsPointer();
        bool IsPointerImpl();
        /*0x1b76dec*/ bool get_IsConstructedGenericType();
        /*0x1b76e6c*/ bool get_IsGenericParameter();
        /*0x1b76e74*/ bool get_IsGenericMethodParameter();
        /*0x1b76ec0*/ bool get_IsGenericType();
        /*0x1b76ec8*/ bool get_IsGenericTypeDefinition();
        /*0x1b76ed0*/ bool get_IsSZArray();
        /*0x1b76ef4*/ bool get_IsVariableBoundArray();
        /*0x1b76038*/ bool get_HasElementType();
        bool HasElementTypeImpl();
        System.Type GetElementType();
        /*0x1b76f3c*/ int GetArrayRank();
        /*0x1b76f8c*/ System.Type GetGenericTypeDefinition();
        /*0x1b76fdc*/ System.Type[] get_GenericTypeArguments();
        /*0x1b770a8*/ System.Type[] GetGenericArguments();
        /*0x1b770f8*/ int get_GenericParameterPosition();
        /*0x1b77148*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x1b77188*/ System.Type[] GetGenericParameterConstraints();
        /*0x1b77208*/ System.Reflection.TypeAttributes get_Attributes();
        System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x1b77218*/ bool get_IsAbstract();
        /*0x1b77238*/ bool get_IsSealed();
        /*0x1b77258*/ bool get_IsClass();
        /*0x1b772b0*/ bool get_IsNestedAssembly();
        /*0x1b761f8*/ bool get_IsNestedPublic();
        /*0x1b772d8*/ bool get_IsNotPublic();
        /*0x1b76290*/ bool get_IsPublic();
        /*0x1b772fc*/ bool get_IsExplicitLayout();
        /*0x1b77324*/ bool get_IsCOMObject();
        bool IsCOMObjectImpl();
        /*0x1b77334*/ bool get_IsContextful();
        /*0x1b77344*/ bool IsContextfulImpl();
        /*0x1b773d4*/ bool get_IsCollectible();
        /*0x1b773dc*/ bool get_IsEnum();
        /*0x1b77468*/ bool get_IsMarshalByRef();
        /*0x1b77478*/ bool IsMarshalByRefImpl();
        /*0x1b77508*/ bool get_IsPrimitive();
        bool IsPrimitiveImpl();
        /*0x1b772a0*/ bool get_IsValueType();
        /*0x1b77518*/ bool IsValueTypeImpl();
        /*0x1b775a4*/ bool get_IsSignatureType();
        /*0x1b775ac*/ System.Reflection.ConstructorInfo GetConstructor(System.Type[] types);
        /*0x1b775c4*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b775d4*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b77704*/ System.Reflection.ConstructorInfo[] GetConstructors();
        System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x1b77718*/ System.Reflection.EventInfo GetEvent(string name);
        System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
        /*0x1b7772c*/ System.Reflection.FieldInfo GetField(string name);
        System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x1b77740*/ System.Reflection.MemberInfo[] GetMember(string name);
        /*0x1b77754*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x1b7776c*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x1b777bc*/ System.Reflection.MethodInfo GetMethod(string name);
        /*0x1b777c4*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x1b7783c*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types);
        /*0x1b77854*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b7786c*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b7787c*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b779dc*/ System.Reflection.MethodInfo[] GetMethods();
        System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x1b779f0*/ System.Reflection.PropertyInfo GetProperty(string name);
        /*0x1b779f8*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x1b77a70*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType);
        /*0x1b77b70*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types);
        /*0x1b77b88*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b77ba0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x1b77c30*/ System.Reflection.PropertyInfo[] GetProperties();
        System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x1b77c44*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x1b77d78*/ System.TypeCode GetTypeCodeImpl();
        System.Type get_BaseType();
        object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
        System.Type[] GetInterfaces();
        /*0x1b77e60*/ bool IsInstanceOfType(object o);
        /*0x1b77e9c*/ bool IsEquivalentTo(System.Type other);
        /*0x1b77f00*/ System.Type GetEnumUnderlyingType();
        /*0x1b77ff0*/ System.Array GetEnumValues();
        /*0x1b78078*/ System.Type MakeArrayType();
        /*0x1b780b8*/ System.Type MakeArrayType(int rank);
        /*0x1b780f8*/ System.Type MakeByRefType();
        /*0x1b78138*/ System.Type MakeGenericType(System.Type[] typeArguments);
        /*0x1b78188*/ System.Type MakePointerType();
        /*0x1b7823c*/ string ToString();
        /*0x1b7829c*/ bool Equals(object o);
        /*0x1b78338*/ int GetHashCode();
        /*0x1b78380*/ bool Equals(System.Type o);
        /*0x1b784fc*/ bool get_IsSzArray();
        /*0x1b78504*/ string FormatTypeName();
        /*0x1b78518*/ string FormatTypeName(bool serialization);
        /*0x1b76514*/ bool get_IsInterface();
        /*0x1b78708*/ string get_FullNameOrDefault();
        /*0x1b75ea8*/ bool IsRuntimeImplemented();
        /*0x1b78824*/ string InternalGetNameIfAvailable(ref System.Type rootCauseForFailure);
        /*0x1b78800*/ string get_InternalNameIfAvailable();
        /*0x1b78830*/ string get_NameOrDefault();
    }

    class TypeAccessException : System.TypeLoadException
    {
        /*0x1b78a60*/ TypeAccessException();
        /*0x1b78abc*/ TypeAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum TypeCode
    {
        Empty = 0,
        Object = 1,
        DBNull = 2,
        Boolean = 3,
        Char = 4,
        SByte = 5,
        Byte = 6,
        Int16 = 7,
        UInt16 = 8,
        Int32 = 9,
        UInt32 = 10,
        Int64 = 11,
        UInt64 = 12,
        Single = 13,
        Double = 14,
        Decimal = 15,
        DateTime = 16,
        String = 18,
    }

    class TypeInitializationException : System.SystemException
    {
        /*0x90*/ string _typeName;

        /*0x1b78ac4*/ TypeInitializationException();
        /*0x1b78b1c*/ TypeInitializationException(string fullTypeName, System.Exception innerException);
        /*0x1b78b9c*/ TypeInitializationException(string fullTypeName, string message, System.Exception innerException);
        /*0x1b78bd4*/ TypeInitializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b78c58*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b78d60*/ string get_TypeName();
    }

    struct UInt16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ushort>, System.IEquatable<ushort>, System.ISpanFormattable
    {
        static ushort MaxValue = 65535;
        static ushort MinValue = 0;
        /*0x10*/ ushort m_value;

        static /*0x1b79254*/ ushort Parse(string s, System.IFormatProvider provider);
        static /*0x1b79460*/ ushort Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1b792cc*/ ushort Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x1b794f0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ushort result);
        static /*0x1b79598*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref ushort result);
        /*0x1b78db4*/ int CompareTo(object value);
        /*0x1b78e74*/ int CompareTo(ushort value);
        /*0x1b78e80*/ bool Equals(object obj);
        /*0x1b78ef8*/ bool Equals(ushort obj);
        /*0x1b78f08*/ int GetHashCode();
        /*0x1b78f10*/ string ToString();
        /*0x1b78fa8*/ string ToString(System.IFormatProvider provider);
        /*0x1b79044*/ string ToString(string format);
        /*0x1b790f8*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1b791b0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1b79654*/ System.TypeCode GetTypeCode();
        /*0x1b7965c*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1b796b8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1b79714*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1b79770*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1b797cc*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1b79828*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1b79830*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1b7988c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1b798e8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1b79944*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1b799a0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1b799fc*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1b79a58*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1b79ab4*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1b79b40*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<uint>, System.IEquatable<uint>, System.ISpanFormattable
    {
        static uint MaxValue = 4294967295;
        static uint MinValue = 0;
        /*0x10*/ uint m_value;

        static /*0x1b7a0ac*/ uint Parse(string s);
        static /*0x1b7a160*/ uint Parse(string s, System.IFormatProvider provider);
        static /*0x1b7a224*/ uint Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1b7a2f8*/ bool TryParse(string s, ref uint result);
        static /*0x1b7a3cc*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref uint result);
        /*0x1b79bec*/ int CompareTo(object value);
        /*0x1b79cbc*/ int CompareTo(uint value);
        /*0x1b79cd8*/ bool Equals(object obj);
        /*0x1b79d50*/ bool Equals(uint obj);
        /*0x1b79d60*/ int GetHashCode();
        /*0x1b79d68*/ string ToString();
        /*0x1b79e00*/ string ToString(System.IFormatProvider provider);
        /*0x1b79e9c*/ string ToString(string format);
        /*0x1b79f50*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1b7a008*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1b7a4c4*/ System.TypeCode GetTypeCode();
        /*0x1b7a4cc*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1b7a528*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1b7a584*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1b7a5e0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1b7a63c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1b7a698*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1b7a6f4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1b7a750*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1b7a758*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1b7a7b4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1b7a810*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1b7a86c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1b7a8c8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1b7a924*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1b7a9b0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ulong>, System.IEquatable<ulong>, System.ISpanFormattable
    {
        static ulong MaxValue = 18446744073709551615;
        static ulong MinValue = 0;
        /*0x10*/ ulong m_value;

        static /*0x1b7af20*/ ulong Parse(string s);
        static /*0x1b7afd4*/ ulong Parse(string s, System.IFormatProvider provider);
        static /*0x1b7b098*/ ulong Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1b7b16c*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ulong result);
        /*0x1b7aa5c*/ int CompareTo(object value);
        /*0x1b7ab2c*/ int CompareTo(ulong value);
        /*0x1b7ab48*/ bool Equals(object obj);
        /*0x1b7abc0*/ bool Equals(ulong obj);
        /*0x1b7abd0*/ int GetHashCode();
        /*0x1b7abdc*/ string ToString();
        /*0x1b7ac74*/ string ToString(System.IFormatProvider provider);
        /*0x1b7ad10*/ string ToString(string format);
        /*0x1b7adc4*/ string ToString(string format, System.IFormatProvider provider);
        /*0x1b7ae7c*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1b7b264*/ System.TypeCode GetTypeCode();
        /*0x1b7b26c*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x1b7b2c8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x1b7b324*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x1b7b380*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x1b7b3dc*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x1b7b438*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x1b7b494*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x1b7b4f0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x1b7b54c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x1b7b5a8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x1b7b5b0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x1b7b60c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x1b7b668*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x1b7b6c4*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x1b7b750*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class UnauthorizedAccessException : System.SystemException
    {
        /*0x1b7b7fc*/ UnauthorizedAccessException();
        /*0x1b7b854*/ UnauthorizedAccessException(string message);
        /*0x1b7b874*/ UnauthorizedAccessException(string message, System.Exception inner);
        /*0x1b7b894*/ UnauthorizedAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnhandledExceptionEventArgs : System.EventArgs
    {
        /*0x10*/ object _exception;
        /*0x18*/ bool _isTerminating;

        /*0x1b7b898*/ UnhandledExceptionEventArgs(object exception, bool isTerminating);
        /*0x1b7b90c*/ object get_ExceptionObject();
        /*0x1b7b914*/ bool get_IsTerminating();
    }

    class UnhandledExceptionEventHandler : System.MulticastDelegate
    {
        /*0x1b7b91c*/ UnhandledExceptionEventHandler(object object, nint method);
        /*0x1b7ba4c*/ void Invoke(object sender, System.UnhandledExceptionEventArgs e);
    }

    interface IValueTupleInternal : System.Runtime.CompilerServices.ITuple
    {
        int GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToStringEnd();
    }

    struct ValueTuple : System.IEquatable<System.ValueTuple>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        static /*0x1b7bdf8*/ int CombineHashCodes(int h1, int h2);
        static /*0x1b7be74*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x1b7bef4*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x1b7bf84*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x1b7c01c*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x1b7c0c4*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x1b7c174*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
        /*0x1b7ba60*/ bool Equals(object obj);
        /*0x1b7babc*/ bool Equals(System.ValueTuple other);
        /*0x1b7bac4*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x1b7bb20*/ int System.IComparable.CompareTo(object other);
        /*0x1b7bc38*/ int CompareTo(System.ValueTuple other);
        /*0x1b7bc40*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x1b7bd58*/ int GetHashCode();
        /*0x1b7bd60*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1b7bd68*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1b7bd70*/ string ToString();
        /*0x1b7bdb0*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x1b7bdf0*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1> : System.IEquatable<System.ValueTuple<T1>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;

        ValueTuple(T1 item1);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2> : System.IEquatable<System.ValueTuple<T1, T2>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;

        ValueTuple(T1 item1, T2 item2);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3> : System.IEquatable<System.ValueTuple<T1, T2, T3>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;

        ValueTuple(T1 item1, T2 item2, T3 item3);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4, T5> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;
        /*0x0*/ TRest Rest;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Version : System.ICloneable, System.IComparable, System.IComparable<System.Version>, System.IEquatable<System.Version>, System.ISpanFormattable
    {
        /*0x10*/ int _Major;
        /*0x14*/ int _Minor;
        /*0x18*/ int _Build;
        /*0x1c*/ int _Revision;

        static /*0x1b7c554*/ System.Version Parse(string input);
        static /*0x1b7d264*/ bool TryParse(string input, ref System.Version result);
        static /*0x1b7cd90*/ System.Version ParseVersion(System.ReadOnlySpan<char> input, bool throwOnFailure);
        static /*0x1b7d2f8*/ bool TryParseComponent(System.ReadOnlySpan<char> component, string componentName, bool throwOnFailure, ref int parsedComponent);
        static /*0x1b7c78c*/ bool op_Equality(System.Version v1, System.Version v2);
        static /*0x1b7d2d0*/ bool op_Inequality(System.Version v1, System.Version v2);
        static /*0x1b7d410*/ bool op_LessThan(System.Version v1, System.Version v2);
        static /*0x1b7d474*/ bool op_GreaterThan(System.Version v1, System.Version v2);
        /*0x1b7c234*/ Version(int major, int minor, int build, int revision);
        /*0x1b7c358*/ Version(int major, int minor, int build);
        /*0x1b7c450*/ Version(int major, int minor);
        /*0x1b7c510*/ Version(string version);
        /*0x1b7c5f0*/ Version();
        /*0x1b7c614*/ Version(System.Version version);
        /*0x1b7c650*/ object Clone();
        /*0x1b7c6b0*/ int get_Major();
        /*0x1b7c6b8*/ int get_Minor();
        /*0x1b7c6c0*/ int get_Build();
        /*0x1b7c6c8*/ int get_Revision();
        /*0x1b7c6d0*/ int CompareTo(object version);
        /*0x1b7c7a0*/ int CompareTo(System.Version value);
        /*0x1b7c808*/ bool Equals(object obj);
        /*0x1b7c86c*/ bool Equals(System.Version obj);
        /*0x1b7c8cc*/ int GetHashCode();
        /*0x1b7c8e8*/ string ToString();
        /*0x1b7c938*/ string ToString(int fieldCount);
        /*0x1b7cc10*/ bool TryFormat(System.Span<char> destination, ref int charsWritten);
        /*0x1b7cc3c*/ bool TryFormat(System.Span<char> destination, int fieldCount, ref int charsWritten);
        /*0x1b7cd64*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x1b7c910*/ int get_DefaultFormatFieldCount();
        /*0x1b7c9c4*/ System.Text.StringBuilder ToCachedStringBuilder(int fieldCount);
    }

    struct Void
    {
    }

    class NotImplemented
    {
        static /*0x1b76e10*/ System.Exception get_ByDesign();
    }

    interface IServiceProvider
    {
        object GetService(System.Type serviceType);
    }

    class ConsoleCancelEventHandler : System.MulticastDelegate
    {
        /*0x1b7d484*/ ConsoleCancelEventHandler(object object, nint method);
        /*0x1b7d5b4*/ void Invoke(object sender, System.ConsoleCancelEventArgs e);
    }

    class ConsoleCancelEventArgs : System.EventArgs
    {
        /*0x10*/ System.ConsoleSpecialKey _type;
        /*0x14*/ bool <Cancel>k__BackingField;

        /*0x1b7d5c8*/ ConsoleCancelEventArgs(System.ConsoleSpecialKey type);
        /*0x1b7d63c*/ ConsoleCancelEventArgs();
        /*0x1b7d634*/ bool get_Cancel();
    }

    enum ConsoleColor
    {
        Black = 0,
        DarkBlue = 1,
        DarkGreen = 2,
        DarkCyan = 3,
        DarkRed = 4,
        DarkMagenta = 5,
        DarkYellow = 6,
        Gray = 7,
        DarkGray = 8,
        Blue = 9,
        Green = 10,
        Cyan = 11,
        Red = 12,
        Magenta = 13,
        Yellow = 14,
        White = 15,
    }

    enum ConsoleKey
    {
        Backspace = 8,
        Tab = 9,
        Clear = 12,
        Enter = 13,
        Pause = 19,
        Escape = 27,
        Spacebar = 32,
        PageUp = 33,
        PageDown = 34,
        End = 35,
        Home = 36,
        LeftArrow = 37,
        UpArrow = 38,
        RightArrow = 39,
        DownArrow = 40,
        Select = 41,
        Print = 42,
        Execute = 43,
        PrintScreen = 44,
        Insert = 45,
        Delete = 46,
        Help = 47,
        D0 = 48,
        D1 = 49,
        D2 = 50,
        D3 = 51,
        D4 = 52,
        D5 = 53,
        D6 = 54,
        D7 = 55,
        D8 = 56,
        D9 = 57,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        LeftWindows = 91,
        RightWindows = 92,
        Applications = 93,
        Sleep = 95,
        NumPad0 = 96,
        NumPad1 = 97,
        NumPad2 = 98,
        NumPad3 = 99,
        NumPad4 = 100,
        NumPad5 = 101,
        NumPad6 = 102,
        NumPad7 = 103,
        NumPad8 = 104,
        NumPad9 = 105,
        Multiply = 106,
        Add = 107,
        Separator = 108,
        Subtract = 109,
        Decimal = 110,
        Divide = 111,
        F1 = 112,
        F2 = 113,
        F3 = 114,
        F4 = 115,
        F5 = 116,
        F6 = 117,
        F7 = 118,
        F8 = 119,
        F9 = 120,
        F10 = 121,
        F11 = 122,
        F12 = 123,
        F13 = 124,
        F14 = 125,
        F15 = 126,
        F16 = 127,
        F17 = 128,
        F18 = 129,
        F19 = 130,
        F20 = 131,
        F21 = 132,
        F22 = 133,
        F23 = 134,
        F24 = 135,
        BrowserBack = 166,
        BrowserForward = 167,
        BrowserRefresh = 168,
        BrowserStop = 169,
        BrowserSearch = 170,
        BrowserFavorites = 171,
        BrowserHome = 172,
        VolumeMute = 173,
        VolumeDown = 174,
        VolumeUp = 175,
        MediaNext = 176,
        MediaPrevious = 177,
        MediaStop = 178,
        MediaPlay = 179,
        LaunchMail = 180,
        LaunchMediaSelect = 181,
        LaunchApp1 = 182,
        LaunchApp2 = 183,
        Oem1 = 186,
        OemPlus = 187,
        OemComma = 188,
        OemMinus = 189,
        OemPeriod = 190,
        Oem2 = 191,
        Oem3 = 192,
        Oem4 = 219,
        Oem5 = 220,
        Oem6 = 221,
        Oem7 = 222,
        Oem8 = 223,
        Oem102 = 226,
        Process = 229,
        Packet = 231,
        Attention = 246,
        CrSel = 247,
        ExSel = 248,
        EraseEndOfFile = 249,
        Play = 250,
        Zoom = 251,
        NoName = 252,
        Pa1 = 253,
        OemClear = 254,
    }

    struct ConsoleKeyInfo
    {
        /*0x10*/ char _keyChar;
        /*0x14*/ System.ConsoleKey _key;
        /*0x18*/ System.ConsoleModifiers _mods;

        /*0x1b7d674*/ ConsoleKeyInfo(char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control);
        /*0x1b7d71c*/ char get_KeyChar();
        /*0x1b7d724*/ System.ConsoleKey get_Key();
        /*0x1b7d72c*/ bool Equals(object value);
        /*0x1b7d7c4*/ bool Equals(System.ConsoleKeyInfo obj);
        /*0x1b7d7f8*/ int GetHashCode();
    }

    enum ConsoleModifiers
    {
        Alt = 1,
        Shift = 2,
        Control = 4,
    }

    enum ConsoleSpecialKey
    {
        ControlC = 0,
        ControlBreak = 1,
    }

    class ThrowHelper
    {
        static /*0x1b6e81c*/ void ThrowArgumentNullException(System.ExceptionArgument argument);
        static /*0x1b7d80c*/ System.Exception CreateArgumentNullException(System.ExceptionArgument argument);
        static /*0x1b7d8b8*/ void ThrowArrayTypeMismatchException();
        static /*0x1b7d8dc*/ System.Exception CreateArrayTypeMismatchException();
        static /*0x1b7d938*/ void ThrowArgumentException_DestinationTooShort();
        static /*0x1b7d95c*/ System.Exception CreateArgumentException_DestinationTooShort();
        static /*0x1b7d9d0*/ void ThrowIndexOutOfRangeException();
        static /*0x1b7d9f4*/ System.Exception CreateIndexOutOfRangeException();
        static /*0x1b7da50*/ void ThrowArgumentOutOfRangeException();
        static /*0x1b7da74*/ System.Exception CreateArgumentOutOfRangeException();
        static /*0x1b7dad0*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x1b7daf4*/ System.Exception CreateArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x1b7dba0*/ void ThrowNotSupportedException();
        static /*0x1b7dbc4*/ System.Exception CreateThrowNotSupportedException();
        static /*0x1b7dc20*/ void ThrowWrongKeyTypeArgumentException(object key, System.Type targetType);
        static /*0x1b7dcf8*/ void ThrowWrongValueTypeArgumentException(object value, System.Type targetType);
        static /*0x1b7ddd0*/ void ThrowArgumentException(System.ExceptionResource resource);
        static /*0x1b7e0b4*/ void ThrowArgumentException(System.ExceptionResource resource, System.ExceptionArgument argument);
        static /*0x1b7e2a4*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x1b7e348*/ void ThrowInvalidOperationException(System.ExceptionResource resource);
        static /*0x1b7e3a0*/ void ThrowSerializationException(System.ExceptionResource resource);
        static /*0x1b7e3f8*/ void ThrowNotSupportedException(System.ExceptionResource resource);
        static /*0x1b7e450*/ void ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion();
        static /*0x1b7e4a0*/ void ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen();
        static /*0x1b7e4f0*/ void ThrowInvalidOperationException_InvalidOperation_EnumNotStarted();
        static /*0x1b7e540*/ void ThrowInvalidOperationException_InvalidOperation_EnumEnded();
        static /*0x1b7e590*/ void ThrowInvalidOperationException_InvalidOperation_NoValue();
        static /*0x1b7e5e0*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, string resource);
        static /*0x1b7e664*/ void ThrowArgumentOutOfRange_IndexException();
        static /*0x1b7e69c*/ void ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
        static /*0x1b7e6d4*/ void ThrowArgumentException_Argument_InvalidArrayType();
        static /*0x1b7e724*/ System.ArgumentException GetAddingDuplicateWithKeyArgumentException(object key);
        static /*0x1b7e7bc*/ void ThrowAddingDuplicateWithKeyArgumentException(object key);
        static /*0x1b7e7e0*/ System.Collections.Generic.KeyNotFoundException GetKeyNotFoundException(object key);
        static /*0x1b7e860*/ void ThrowKeyNotFoundException(object key);
        static /*0x1b7e868*/ void ThrowInvalidTypeWithPointersNotSupported(System.Type targetType);
        static /*0x1b7e8d0*/ void ThrowInvalidOperationException_ConcurrentOperationsNotSupported();
        static /*0x1b7e900*/ System.InvalidOperationException GetInvalidOperationException(string str);
        static /*0x1b7e964*/ void ThrowArraySegmentCtorValidationFailedExceptions(System.Array array, int offset, int count);
        static /*0x1b7e988*/ System.Exception GetArraySegmentCtorValidationFailedException(System.Array array, int offset, int count);
        static /*0x1b7eaec*/ System.ArgumentException GetArgumentException(System.ExceptionResource resource);
        static /*0x1b7e9b8*/ System.ArgumentNullException GetArgumentNullException(System.ExceptionArgument argument);
        static void IfNullAndNullsAreIllegalThenThrow<T>(object value, System.ExceptionArgument argName);
        static /*0x1b7e120*/ string GetArgumentName(System.ExceptionArgument argument);
        static /*0x1b7ea2c*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x1b7eb98*/ void ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index();
        static /*0x1b7ebc4*/ void ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count();
        static /*0x1b7de28*/ string GetResourceName(System.ExceptionResource resource);
    }

    class AppDomainUnloadedException : System.SystemException
    {
        /*0x1b7ebf0*/ AppDomainUnloadedException();
        /*0x1b7ec48*/ AppDomainUnloadedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class CannotUnloadAppDomainException : System.SystemException
    {
        /*0x1b7ec4c*/ CannotUnloadAppDomainException();
        /*0x1b7eca4*/ CannotUnloadAppDomainException(string message);
        /*0x1b7ecc4*/ CannotUnloadAppDomainException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OperatingSystem : System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        /*0x10*/ System.Version _version;
        /*0x18*/ System.PlatformID _platform;
        /*0x20*/ string _servicePack;
        /*0x28*/ string _versionString;

        /*0x1b7ecc8*/ OperatingSystem(System.PlatformID platform, System.Version version);
        /*0x1b7ecd0*/ OperatingSystem(System.PlatformID platform, System.Version version, string servicePack);
        /*0x1b7ee10*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b7ee4c*/ System.PlatformID get_Platform();
        /*0x1b7ee54*/ object Clone();
        /*0x1b7eed0*/ string ToString();
        /*0x1b7eed4*/ string get_VersionString();
    }

    class MissingFieldException : System.MissingMemberException, System.Runtime.Serialization.ISerializable
    {
        /*0x1b7f0a0*/ MissingFieldException();
        /*0x1b7f120*/ MissingFieldException(string message);
        /*0x1b7f144*/ MissingFieldException(string className, string fieldName);
        /*0x1b7f1c8*/ MissingFieldException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b7f350*/ string get_Message();
    }

    class MissingMemberException : System.MemberAccessException
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string MemberName;
        /*0xa0*/ byte[] Signature;

        static /*0x1b7f6ec*/ string FormatSignature(byte[] signature);
        /*0x1b7f16c*/ MissingMemberException();
        /*0x1b7f0fc*/ MissingMemberException(string message);
        /*0x1b7f1cc*/ MissingMemberException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b7f590*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1b7f464*/ string get_Message();
    }

    class OutOfMemoryException : System.SystemException
    {
        /*0x1b7f734*/ OutOfMemoryException();
        /*0x1b7f78c*/ OutOfMemoryException(string message);
        /*0x1b7f7ac*/ OutOfMemoryException(string message, System.Exception innerException);
        /*0x1b7f7cc*/ OutOfMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable
    {
        static /*0x1b7f7d0*/ System.Array CreateInstance(System.Type elementType, long[] lengths);
        static System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
        static void Resize<T>(ref T[] array, int newSize);
        static /*0x1b80a3c*/ int CombineHashCodes(int h1, int h2);
        static /*0x1b80bbc*/ int BinarySearch(System.Array array, object value);
        static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, System.Converter<TInput, TOutput> converter);
        static /*0x1b810f8*/ void Copy(System.Array sourceArray, System.Array destinationArray, long length);
        static /*0x1b81238*/ void Copy(System.Array sourceArray, long sourceIndex, System.Array destinationArray, long destinationIndex, long length);
        static void ForEach<T>(T[] array, System.Action<T> action);
        static /*0x1b818c8*/ int BinarySearch(System.Array array, int index, int length, object value);
        static /*0x1b818d0*/ int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer);
        static /*0x1b80c50*/ int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer);
        static /*0x1b81970*/ int GetMedian(int low, int hi);
        static int BinarySearch<T>(T[] array, T value);
        static int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
        static int BinarySearch<T>(T[] array, int index, int length, T value);
        static int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x1b7fdec*/ int IndexOf(System.Array array, object value);
        static /*0x1b81c1c*/ int IndexOf(System.Array array, object value, int startIndex);
        static /*0x1b8197c*/ int IndexOf(System.Array array, object value, int startIndex, int count);
        static int IndexOf<T>(T[] array, T value);
        static int IndexOf<T>(T[] array, T value, int startIndex);
        static int IndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x1b81cbc*/ int LastIndexOf(System.Array array, object value);
        static /*0x1b82004*/ int LastIndexOf(System.Array array, object value, int startIndex);
        static /*0x1b81d48*/ int LastIndexOf(System.Array array, object value, int startIndex, int count);
        static int LastIndexOf<T>(T[] array, T value);
        static int LastIndexOf<T>(T[] array, T value, int startIndex);
        static int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x1b82060*/ void Reverse(System.Array array);
        static /*0x1b820e8*/ void Reverse(System.Array array, int index, int length);
        static void Reverse<T>(T[] array);
        static void Reverse<T>(T[] array, int index, int length);
        static /*0x1b82814*/ void Sort(System.Array array);
        static /*0x1b82af4*/ void Sort(System.Array array, int index, int length);
        static /*0x1b82b08*/ void Sort(System.Array array, System.Collections.IComparer comparer);
        static /*0x1b82b9c*/ void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer);
        static /*0x1b82bb0*/ void Sort(System.Array keys, System.Array items);
        static /*0x1b82c44*/ void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer);
        static /*0x1b82ce4*/ void Sort(System.Array keys, System.Array items, int index, int length);
        static /*0x1b828a4*/ void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static void Sort<T>(T[] array);
        static void Sort<T>(T[] array, int index, int length);
        static void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer);
        static void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
        static void Sort<T>(T[] array, System.Comparison<T> comparison);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
        static bool Exists<T>(T[] array, System.Predicate<T> match);
        static void Fill<T>(T[] array, T value);
        static void Fill<T>(T[] array, T value, int startIndex, int count);
        static T Find<T>(T[] array, System.Predicate<T> match);
        static T[] FindAll<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static T FindLast<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static bool TrueForAll<T>(T[] array, System.Predicate<T> match);
        static /*0x1b82f20*/ bool FastCopy(System.Array source, int source_idx, System.Array dest, int dest_idx, int length);
        static /*0x1b82f24*/ System.Array CreateInstanceImpl(System.Type elementType, int[] lengths, int[] bounds);
        static /*0x1b82f60*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x1b83358*/ System.Array UnsafeCreateInstance(System.Type elementType, int length1, int length2);
        static /*0x1b833e4*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths);
        static /*0x1b833e8*/ System.Array CreateInstance(System.Type elementType, int length);
        static /*0x1b8335c*/ System.Array CreateInstance(System.Type elementType, int length1, int length2);
        static /*0x1b83460*/ System.Array CreateInstance(System.Type elementType, int length1, int length2, int length3);
        static /*0x1b7f954*/ System.Array CreateInstance(System.Type elementType, int[] lengths);
        static /*0x1b82f64*/ System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x1b7feb8*/ void Clear(System.Array array, int index, int length);
        static /*0x1b83500*/ void ClearInternal(System.Array a, int index, int count);
        static /*0x1b8116c*/ void Copy(System.Array sourceArray, System.Array destinationArray, int length);
        static /*0x1b8018c*/ void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x1b83504*/ System.ArrayTypeMismatchException CreateArrayTypeMismatchException();
        static /*0x1b83560*/ bool CanAssignArrayElement(System.Type source, System.Type target);
        static /*0x1b83634*/ void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static T[] Empty<T>();
        static int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x1b82cec*/ void SortImpl(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static T UnsafeLoad<T>(T[] array, int index);
        static void UnsafeStore<T>(T[] array, int index, T value);
        static R UnsafeMov<S, R>(S instance);
        /*0x1b82e48*/ Array();
        /*0x1b7fbe8*/ int System.Collections.ICollection.get_Count();
        /*0x1b7fbec*/ bool System.Collections.IList.get_IsReadOnly();
        /*0x1b7fbf4*/ object System.Collections.IList.get_Item(int index);
        /*0x1b7fbf8*/ void System.Collections.IList.set_Item(int index, object value);
        /*0x1b7fd84*/ int System.Collections.IList.Add(object value);
        /*0x1b7fdd4*/ bool System.Collections.IList.Contains(object value);
        /*0x1b7fe7c*/ void System.Collections.IList.Clear();
        /*0x1b7ffe0*/ int System.Collections.IList.IndexOf(object value);
        /*0x1b7ffe4*/ void System.Collections.IList.Insert(int index, object value);
        /*0x1b80034*/ void System.Collections.IList.Remove(object value);
        /*0x1b80084*/ void System.Collections.IList.RemoveAt(int index);
        /*0x1b800d4*/ void CopyTo(System.Array array, int index);
        /*0x1b806c0*/ object Clone();
        /*0x1b806c8*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x1b808ac*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x1b80a48*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1b8130c*/ void CopyTo(System.Array array, long index);
        /*0x1b81380*/ long get_LongLength();
        /*0x1b813e8*/ long GetLongLength(int dimension);
        /*0x1b813fc*/ object GetValue(long index);
        /*0x1b81470*/ object GetValue(long index1, long index2);
        /*0x1b815a0*/ object GetValue(long index1, long index2, long index3);
        /*0x1b81714*/ object GetValue(long[] indices);
        /*0x1b818ac*/ bool get_IsFixedSize();
        /*0x1b818b4*/ bool get_IsReadOnly();
        /*0x1b818bc*/ bool get_IsSynchronized();
        /*0x1b818c4*/ object get_SyncRoot();
        /*0x1b8233c*/ void SetValue(object value, long index);
        /*0x1b823b0*/ void SetValue(object value, long index1, long index2);
        /*0x1b824f0*/ void SetValue(object value, long index1, long index2, long index3);
        /*0x1b8266c*/ void SetValue(object value, long[] indices);
        /*0x1b82de4*/ System.Collections.IEnumerator GetEnumerator();
        /*0x1b82e50*/ int InternalArray__ICollection_get_Count();
        /*0x1b82e54*/ bool InternalArray__ICollection_get_IsReadOnly();
        /*0x1b82e5c*/ ref byte GetRawSzArrayData();
        System.Collections.Generic.IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
        /*0x1b82e70*/ void InternalArray__ICollection_Clear();
        void InternalArray__ICollection_Add<T>(T item);
        bool InternalArray__ICollection_Remove<T>(T item);
        bool InternalArray__ICollection_Contains<T>(T item);
        void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
        T InternalArray__IReadOnlyList_get_Item<T>(int index);
        /*0x1b82ec0*/ int InternalArray__IReadOnlyCollection_get_Count();
        void InternalArray__Insert<T>(int index, T item);
        /*0x1b82ec4*/ void InternalArray__RemoveAt(int index);
        int InternalArray__IndexOf<T>(T item);
        T InternalArray__get_Item<T>(int index);
        void InternalArray__set_Item<T>(int index, T item);
        void GetGenericValueImpl<T>(int pos, ref T value);
        void SetGenericValueImpl<T>(int pos, ref T value);
        /*0x1b75b98*/ int get_Length();
        /*0x1b80188*/ int get_Rank();
        /*0x1b82f14*/ int GetRank();
        /*0x1b813e4*/ int GetLength(int dimension);
        /*0x1b7feb4*/ int GetLowerBound(int dimension);
        /*0x1b818a8*/ object GetValue(int[] indices);
        /*0x1b82810*/ void SetValue(object value, int[] indices);
        /*0x1b82f18*/ object GetValueImpl(int pos);
        /*0x1b82f1c*/ void SetValueImpl(object value, int pos);
        /*0x1b82f28*/ int GetUpperBound(int dimension);
        /*0x1b75bf8*/ object GetValue(int index);
        /*0x1b81518*/ object GetValue(int index1, int index2);
        /*0x1b81674*/ object GetValue(int index1, int index2, int index3);
        /*0x1b7fc08*/ void SetValue(object value, int index);
        /*0x1b82458*/ void SetValue(object value, int index1, int index2);
        /*0x1b825c4*/ void SetValue(object value, int index1, int index2, int index3);
        /*0x1b83638*/ void Initialize();

        class ArrayEnumerator : System.Collections.IEnumerator, System.ICloneable
        {
            /*0x10*/ System.Array _array;
            /*0x18*/ int _index;
            /*0x1c*/ int _endIndex;

            /*0x19b44f4*/ ArrayEnumerator(System.Array array);
            /*0x19b453c*/ bool MoveNext();
            /*0x19b4564*/ void Reset();
            /*0x19b4570*/ object Clone();
            /*0x19b4578*/ object get_Current();
        }

        class RawData
        {
            /*0x10*/ nint Bounds;
            /*0x18*/ nint Count;
            /*0x20*/ byte Data;
        }

        struct InternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ System.Array array;
            /*0x0*/ int idx;

            InternalEnumerator(System.Array array);
            void Dispose();
            bool MoveNext();
            T get_Current();
            void System.Collections.IEnumerator.Reset();
            object System.Collections.IEnumerator.get_Current();
        }

        class EmptyInternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            static /*0x0*/ System.Array.EmptyInternalEnumerator<T> Value;

            static EmptyInternalEnumerator();
            EmptyInternalEnumerator();
            void Dispose();
            bool MoveNext();
            T get_Current();
            object System.Collections.IEnumerator.get_Current();
            void System.Collections.IEnumerator.Reset();
        }

        struct SorterObjectArray
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0x19b4690*/ SorterObjectArray(object[] keys, object[] items, System.Collections.IComparer comparer);
            /*0x19b470c*/ void SwapIfGreaterWithItems(int a, int b);
            /*0x19b493c*/ void Swap(int i, int j);
            /*0x19b4aa0*/ void Sort(int left, int length);
            /*0x19b4aa4*/ void IntrospectiveSort(int left, int length);
            /*0x19b4bf4*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0x19b5044*/ int PickPivotAndPartition(int lo, int hi);
            /*0x19b4fa4*/ void Heapsort(int lo, int hi);
            /*0x19b5270*/ void DownHeap(int i, int n, int lo);
            /*0x19b4d08*/ void InsertionSort(int lo, int hi);
        }

        struct SorterGenericArray
        {
            /*0x10*/ System.Array keys;
            /*0x18*/ System.Array items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0x19b55cc*/ SorterGenericArray(System.Array keys, System.Array items, System.Collections.IComparer comparer);
            /*0x19b5648*/ void SwapIfGreaterWithItems(int a, int b);
            /*0x19b5818*/ void Swap(int i, int j);
            /*0x19b5904*/ void Sort(int left, int length);
            /*0x19b5908*/ void IntrospectiveSort(int left, int length);
            /*0x19b5a60*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0x19b5dfc*/ int PickPivotAndPartition(int lo, int hi);
            /*0x19b5d5c*/ void Heapsort(int lo, int hi);
            /*0x19b6018*/ void DownHeap(int i, int n, int lo);
            /*0x19b5b74*/ void InsertionSort(int lo, int hi);
        }
    }

    struct ByReference<T>
    {
        /*0x0*/ nint _value;

        ByReference(ref T value);
        ref T get_Value();
    }

    class MonoTODOAttribute : System.Attribute
    {
        /*0x10*/ string comment;

        /*0x19b62e8*/ MonoTODOAttribute();
        /*0x19b62f8*/ MonoTODOAttribute(string comment);
    }

    class MonoLimitationAttribute : System.MonoTODOAttribute
    {
        /*0x19b6320*/ MonoLimitationAttribute(string comment);
    }

    class AppContextSwitches
    {
        static /*0x0*/ bool SetActorAsReferenceWhenCopyingClaimsIdentity;
        static /*0x1*/ bool NoAsyncCurrentCulture;
        static /*0x2*/ bool EnforceJapaneseEraYearRanges;
        static /*0x3*/ bool FormatJapaneseFirstYearAsANumber;
        static /*0x4*/ bool EnforceLegacyJapaneseDateParsing;
    }

    class LocalDataStoreHolder
    {
        /*0x10*/ System.LocalDataStore m_Store;

        /*0x19b6348*/ LocalDataStoreHolder(System.LocalDataStore store);
        /*0x19b6370*/ void Finalize();
        /*0x19b6428*/ System.LocalDataStore get_Store();
    }

    class LocalDataStoreElement
    {
        /*0x10*/ object m_value;
        /*0x18*/ long m_cookie;

        /*0x19b6430*/ LocalDataStoreElement(long cookie);
        /*0x19b6458*/ object get_Value();
        /*0x19b6460*/ void set_Value(object value);
        /*0x19b6468*/ long get_Cookie();
    }

    class LocalDataStore
    {
        /*0x10*/ System.LocalDataStoreElement[] m_DataTable;
        /*0x18*/ System.LocalDataStoreMgr m_Manager;

        /*0x19b6470*/ LocalDataStore(System.LocalDataStoreMgr mgr, int InitialCapacity);
        /*0x19b640c*/ void Dispose();
        /*0x19b65e4*/ object GetData(System.LocalDataStoreSlot slot);
        /*0x19b6738*/ void SetData(System.LocalDataStoreSlot slot, object data);
        /*0x19b6ac8*/ void FreeData(int slot, long cookie);
        /*0x19b681c*/ System.LocalDataStoreElement PopulateElement(System.LocalDataStoreSlot slot);
    }

    class LocalDataStoreSlot
    {
        /*0x10*/ System.LocalDataStoreMgr m_mgr;
        /*0x18*/ int m_slot;
        /*0x20*/ long m_cookie;

        /*0x19b6b2c*/ LocalDataStoreSlot(System.LocalDataStoreMgr mgr, int slot, long cookie);
        /*0x19b6b6c*/ System.LocalDataStoreMgr get_Manager();
        /*0x19b6b74*/ int get_Slot();
        /*0x19b6b7c*/ long get_Cookie();
        /*0x19b6b84*/ void Finalize();
    }

    class LocalDataStoreMgr
    {
        static int InitialSlotTableSize = 64;
        static int SlotTableDoubleThreshold = 512;
        static int LargeSlotTableSizeIncrease = 128;
        /*0x10*/ bool[] m_SlotInfoTable;
        /*0x18*/ int m_FirstAvailableSlot;
        /*0x20*/ System.Collections.Generic.List<System.LocalDataStore> m_ManagedLocalDataStores;
        /*0x28*/ System.Collections.Generic.Dictionary<string, System.LocalDataStoreSlot> m_KeyToSlotMap;
        /*0x30*/ long m_CookieGenerator;

        /*0x19b7514*/ LocalDataStoreMgr();
        /*0x19b6dc8*/ System.LocalDataStoreHolder CreateLocalDataStore();
        /*0x19b64e0*/ void DeleteLocalDataStore(System.LocalDataStore store);
        /*0x19b6f88*/ System.LocalDataStoreSlot AllocateDataSlot();
        /*0x19b71d8*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
        /*0x19b72f4*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
        /*0x19b7410*/ void FreeNamedDataSlot(string name);
        /*0x19b6c30*/ void FreeDataSlot(int slot, long cookie);
        /*0x19b66bc*/ void ValidateSlot(System.LocalDataStoreSlot slot);
        /*0x19b6b10*/ int GetSlotTableLength();
    }

    class Activator
    {
        static /*0x19b7600*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
        static /*0x19b7608*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
        static /*0x19b81a4*/ object CreateInstance(System.Type type, object[] args);
        static /*0x19b81bc*/ object CreateInstance(System.Type type, object[] args, object[] activationAttributes);
        static /*0x19b81d4*/ object CreateInstance(System.Type type);
        static /*0x19b81e0*/ object CreateInstance(System.Type type, bool nonPublic);
        static /*0x19b81ec*/ object CreateInstance(System.Type type, bool nonPublic, bool wrapExceptions);
        static T CreateInstance<T>();
    }

    class Attribute
    {
        static /*0x19b8498*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.PropertyInfo element, System.Type type, bool inherit);
        static /*0x19b8544*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.EventInfo element, System.Type type, bool inherit);
        static /*0x19b85f0*/ System.Attribute[] InternalParamGetCustomAttributes(System.Reflection.ParameterInfo parameter, System.Type attributeType, bool inherit);
        static /*0x19b8b0c*/ bool InternalIsDefined(System.Reflection.PropertyInfo element, System.Type attributeType, bool inherit);
        static /*0x19b8b7c*/ bool InternalIsDefined(System.Reflection.EventInfo element, System.Type attributeType, bool inherit);
        static /*0x19b8bec*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type);
        static /*0x19b8bf4*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type, bool inherit);
        static /*0x19b8ef8*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, bool inherit);
        static /*0x19b913c*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x19b9144*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x19b9428*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x19b9430*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x19b94c4*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit);
        static /*0x19b978c*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, bool inherit);
        static /*0x19b9964*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, bool inherit);
        static /*0x19b9ac4*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, System.Type attributeType, bool inherit);
        static /*0x19b9d24*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x19b9d2c*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x19b9f68*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element);
        static /*0x19b9f70*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, bool inherit);
        static /*0x19ba0a4*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x19ba0ac*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x19ba3cc*/ bool AreFieldValuesEqual(object thisValue, object thatValue);
        /*0x19b62f0*/ Attribute();
        /*0x19ba140*/ bool Equals(object obj);
        /*0x19ba5a4*/ int GetHashCode();
        /*0x19ba700*/ object get_TypeId();
        /*0x19ba708*/ bool Match(object obj);
        /*0x19ba714*/ bool IsDefaultAttribute();
    }

    class Buffer
    {
        static /*0x19ba71c*/ bool InternalBlockCopy(System.Array src, int srcOffsetBytes, System.Array dst, int dstOffsetBytes, int byteCount);
        static /*0x19ba720*/ int IndexOfByte(byte* src, byte value, int index, int count);
        static /*0x19ba830*/ int _ByteLength(System.Array array);
        static /*0x19ba834*/ void ZeroMemory(byte* src, long len);
        static /*0x19ba858*/ void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len);
        static /*0x19ba8f8*/ void InternalMemcpy(byte* dest, byte* src, int count);
        static /*0x19ba8fc*/ int ByteLength(System.Array array);
        static /*0x19ba998*/ void BlockCopy(System.Array src, int srcOffset, System.Array dst, int dstOffset, int count);
        static /*0x19bab58*/ void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);
        static /*0x19bac04*/ void memcpy4(byte* dest, byte* src, int size);
        static /*0x19bac90*/ void memcpy2(byte* dest, byte* src, int size);
        static /*0x19bad0c*/ void memcpy1(byte* dest, byte* src, int size);
        static /*0x19ba88c*/ void Memcpy(byte* dest, byte* src, int len, bool useICall);
        static /*0x19babd8*/ void Memmove(byte* dest, byte* src, uint len);
        static void Memmove<T>(ref T destination, ref T source, ulong elementCount);
    }

    class ContextBoundObject : System.MarshalByRefObject
    {
        /*0x19badb8*/ ContextBoundObject();
    }

    class ContextStaticAttribute : System.Attribute
    {
        /*0x19badc0*/ ContextStaticAttribute();
    }

    class DefaultBinder : System.Reflection.Binder
    {
        static /*0x0*/ System.DefaultBinder.Primitives[] _primitiveConversions;

        static /*0x19c031c*/ DefaultBinder();
        static /*0x19bf0ec*/ System.Reflection.MethodBase ExactBinding(System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x19bf4ac*/ System.Reflection.PropertyInfo ExactPropertyBinding(System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x19be890*/ int FindMostSpecific(System.Reflection.ParameterInfo[] p1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.ParameterInfo[] p2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x19be4f8*/ int FindMostSpecificType(System.Type c1, System.Type c2, System.Type t);
        static /*0x19bd194*/ int FindMostSpecificMethod(System.Reflection.MethodBase m1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.MethodBase m2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x19bd7c8*/ int FindMostSpecificField(System.Reflection.FieldInfo cur1, System.Reflection.FieldInfo cur2);
        static /*0x19beccc*/ int FindMostSpecificProperty(System.Reflection.PropertyInfo cur1, System.Reflection.PropertyInfo cur2);
        static /*0x19bf768*/ bool CompareMethodSigAndName(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x19bf8c4*/ int GetHierarchyDepth(System.Type t);
        static /*0x19bf35c*/ System.Reflection.MethodBase FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[] match, int cMatches);
        static /*0x19bd044*/ void ReorderParams(int[] paramOrder, object[] vars);
        static /*0x19bccb4*/ bool CreateParamOrder(int[] paramOrder, System.Reflection.ParameterInfo[] pars, string[] names);
        static /*0x19be2d4*/ bool CanConvertPrimitive(System.RuntimeType source, System.RuntimeType target);
        static /*0x19bcef4*/ bool CanConvertPrimitiveObjectToType(object source, System.RuntimeType type);
        static /*0x19bf958*/ bool CompareMethodSig(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x19c01d8*/ bool CanChangePrimitive(System.Type source, System.Type target);
        static /*0x19c023c*/ bool CanPrimitiveWiden(System.Type source, System.Type target);
        /*0x19c0314*/ DefaultBinder();
        /*0x19badc8*/ System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo cultureInfo, string[] names, ref object state);
        /*0x19bd314*/ System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo cultureInfo);
        /*0x19bd8b0*/ System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        /*0x19bedb4*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo cultureInfo);
        /*0x19bee14*/ void ReorderArgumentArray(ref object[] args, object state);
        /*0x19bfab4*/ System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);

        class BinderState
        {
            /*0x10*/ int[] m_argsMap;
            /*0x18*/ int m_originalSize;
            /*0x1c*/ bool m_isParamArray;

            /*0x19bd004*/ BinderState(int[] argsMap, int originalSize, bool isParamArray);
        }

        enum Primitives
        {
            Boolean = 8,
            Char = 16,
            SByte = 32,
            Byte = 64,
            Int16 = 128,
            UInt16 = 256,
            Int32 = 512,
            UInt32 = 1024,
            Int64 = 2048,
            UInt64 = 4096,
            Single = 8192,
            Double = 16384,
            Decimal = 32768,
            DateTime = 65536,
            String = 262144,
        }

        class <>c
        {
            static /*0x0*/ System.DefaultBinder.<> <>9;
            static /*0x8*/ System.Predicate<System.Type> <>9__2_0;

            static /*0x19c03b0*/ <>c();
            /*0x19c0414*/ <>c();
            /*0x19c041c*/ bool <SelectProperty>b__2_0(System.Type t);
        }
    }

    class Empty : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ System.Empty Value;

        static /*0x19c0534*/ Empty();
        /*0x19c0478*/ Empty();
        /*0x19c0480*/ string ToString();
        /*0x19c04c8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Enum : System.IComparable, System.IFormattable, System.IConvertible
    {
        static string enumSeperator = ", ";
        static /*0x0*/ char[] enumSeperatorCharArray;

        static /*0x19c509c*/ Enum();
        static /*0x19c0598*/ System.Enum.ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, bool getNames);
        static /*0x19c0718*/ string InternalFormattedHexString(object value);
        static /*0x19c0bc0*/ string InternalFormat(System.RuntimeType eT, object value);
        static /*0x19c0dac*/ string InternalFlagsFormat(System.RuntimeType eT, object value);
        static /*0x19c0fa8*/ ulong ToUInt64(object value);
        static /*0x19c111c*/ int InternalCompareTo(object o1, object o2);
        static /*0x19c1120*/ System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType);
        static /*0x19c06e8*/ bool GetEnumValuesAndNames(System.RuntimeType enumType, ref ulong[] values, ref string[] names);
        static /*0x19c1124*/ object InternalBoxEnum(System.RuntimeType enumType, long value);
        static bool TryParse<TEnum>(string value, ref TEnum result);
        static bool TryParse<TEnum>(string value, bool ignoreCase, ref TEnum result);
        static /*0x19c1128*/ object Parse(System.Type enumType, string value);
        static /*0x19c1190*/ object Parse(System.Type enumType, string value, bool ignoreCase);
        static /*0x19c12b4*/ bool TryParseEnum(System.Type enumType, string value, bool ignoreCase, ref System.Enum.EnumResult parseResult);
        static /*0x19c1b24*/ System.Type GetUnderlyingType(System.Type enumType);
        static /*0x19c228c*/ System.Array GetValues(System.Type enumType);
        static /*0x19c2354*/ ulong[] InternalGetValues(System.RuntimeType enumType);
        static /*0x19c0cd4*/ string GetName(System.Type enumType, object value);
        static /*0x19c23bc*/ string[] GetNames(System.Type enumType);
        static /*0x19c2484*/ string[] InternalGetNames(System.RuntimeType enumType);
        static /*0x19c1bec*/ object ToObject(System.Type enumType, object value);
        static /*0x19c3564*/ bool IsDefined(System.Type enumType, object value);
        static /*0x19c363c*/ string Format(System.Type enumType, object value, string format);
        static /*0x19c26c0*/ object ToObject(System.Type enumType, sbyte value);
        static /*0x19c2894*/ object ToObject(System.Type enumType, short value);
        static /*0x19c24ec*/ object ToObject(System.Type enumType, int value);
        static /*0x19c2e10*/ object ToObject(System.Type enumType, byte value);
        static /*0x19c2fe4*/ object ToObject(System.Type enumType, ushort value);
        static /*0x19c2c3c*/ object ToObject(System.Type enumType, uint value);
        static /*0x19c2a68*/ object ToObject(System.Type enumType, long value);
        static /*0x19c20b8*/ object ToObject(System.Type enumType, ulong value);
        static /*0x19c31b8*/ object ToObject(System.Type enumType, char value);
        static /*0x19c338c*/ object ToObject(System.Type enumType, bool value);
        /*0x19c5094*/ Enum();
        /*0x19c3c2c*/ object get_value();
        /*0x19c3c28*/ object GetValue();
        /*0x19c3c30*/ bool InternalHasFlag(System.Enum flags);
        /*0x19c3c34*/ int get_hashcode();
        /*0x19c3c38*/ bool Equals(object obj);
        /*0x19c3c40*/ int GetHashCode();
        /*0x19c3c44*/ string ToString();
        /*0x19c3d10*/ string ToString(string format, System.IFormatProvider provider);
        /*0x19c3f64*/ int CompareTo(object target);
        /*0x19c3d14*/ string ToString(string format);
        /*0x19c4170*/ string ToString(System.IFormatProvider provider);
        /*0x19c417c*/ bool HasFlag(System.Enum flag);
        /*0x19c4310*/ System.TypeCode GetTypeCode();
        /*0x19c4714*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x19c47b4*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x19c4854*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x19c48f4*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x19c4994*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x19c4a34*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x19c4ad4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x19c4b74*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x19c4c14*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x19c4cb4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x19c4d54*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x19c4df4*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x19c4e94*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x19c4f34*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x19c5024*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        enum ParseFailureKind
        {
            None = 0,
            Argument = 1,
            ArgumentNull = 2,
            ArgumentWithParameter = 3,
            UnhandledException = 4,
        }

        struct EnumResult
        {
            /*0x10*/ object parsedEnum;
            /*0x18*/ bool canThrow;
            /*0x1c*/ System.Enum.ParseFailureKind m_failure;
            /*0x20*/ string m_failureMessageID;
            /*0x28*/ string m_failureParameter;
            /*0x30*/ object m_failureMessageFormatArgument;
            /*0x38*/ System.Exception m_innerException;

            /*0x19c1250*/ void Init(bool canMethodThrow);
            /*0x19c20a8*/ void SetFailure(System.Exception unhandledException);
            /*0x19c1aa8*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureParameter);
            /*0x19c1ae4*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0x19c192c*/ System.Exception GetEnumParseException();
        }

        class ValuesAndNames
        {
            /*0x10*/ ulong[] Values;
            /*0x18*/ string[] Names;

            /*0x19c06ec*/ ValuesAndNames(ulong[] values, string[] names);
        }
    }

    class Exception : System.Runtime.Serialization.ISerializable
    {
        static int _COMPlusExceptionCode = -532462766;
        static /*0x0*/ object s_EDILock;
        /*0x10*/ string _className;
        /*0x18*/ string _message;
        /*0x20*/ System.Collections.IDictionary _data;
        /*0x28*/ System.Exception _innerException;
        /*0x30*/ string _helpURL;
        /*0x38*/ object _stackTrace;
        /*0x40*/ string _stackTraceString;
        /*0x48*/ string _remoteStackTraceString;
        /*0x50*/ int _remoteStackIndex;
        /*0x58*/ object _dynamicMethods;
        /*0x60*/ int _HResult;
        /*0x68*/ string _source;
        /*0x70*/ System.Runtime.Serialization.SafeSerializationManager _safeSerializationManager;
        /*0x78*/ System.Diagnostics.StackTrace[] captured_traces;
        /*0x80*/ nint[] native_trace_ips;
        /*0x88*/ int caught_in_unmanaged;

        static /*0x19c6390*/ Exception();
        static /*0x19c6220*/ string GetMessageFromNativeResources(System.Exception.ExceptionMessageKind kind);
        static /*0x19c638c*/ void ReportUnhandledException(System.Exception exception);
        /*0x19c5198*/ Exception();
        /*0x19c51b4*/ Exception(string message);
        /*0x19c51e4*/ Exception(string message, System.Exception innerException);
        /*0x19c521c*/ Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x19c5120*/ void Init();
        /*0x19c5684*/ string get_Message();
        /*0x19c5798*/ System.Collections.IDictionary get_Data();
        /*0x19c575c*/ string GetClassName();
        /*0x19c580c*/ System.Exception GetBaseException();
        /*0x19c5820*/ System.Exception get_InnerException();
        /*0x19c5828*/ string get_StackTrace();
        /*0x19c5830*/ string GetStackTrace(bool needFileInfo);
        /*0x19c5884*/ void SetErrorCode(int hr);
        /*0x19c588c*/ string get_Source();
        /*0x19c5998*/ string ToString();
        /*0x19c59a4*/ string ToString(bool needFileLineInfo, bool needMessage);
        /*0x19c5c48*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x19c60f4*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
        /*0x19c587c*/ string StripFileInfo(string stackTrace, bool isRemoteStackTrace);
        /*0x19c6174*/ void RestoreExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo exceptionDispatchInfo);
        /*0x19c6210*/ int get_HResult();
        /*0x19c6218*/ void set_HResult(int value);
        /*0x19c5804*/ System.Type GetType();
        /*0x19c62a4*/ System.Exception FixRemotingException();

        enum ExceptionMessageKind
        {
            ThreadAbort = 1,
            ThreadInterrupted = 2,
            OutOfMemory = 3,
        }
    }

    class GC
    {
        static /*0x0*/ object EPHEMERON_TOMBSTONE;

        static /*0x19c66c8*/ GC();
        static /*0x19c6408*/ int GetCollectionCount(int generation);
        static /*0x19c640c*/ void register_ephemeron_array(System.Runtime.CompilerServices.Ephemeron[] array);
        static /*0x19c6410*/ object get_ephemeron_tombstone();
        static /*0x19c6414*/ void GetMemoryInfo(ref uint highMemLoadThreshold, ref ulong totalPhysicalMem, ref uint lastRecordedMemLoad, ref nuint lastRecordedHeapSize, ref nuint lastRecordedFragmentation);
        static /*0x19c64ac*/ int CollectionCount(int generation);
        static /*0x19c656c*/ void KeepAlive(object obj);
        static /*0x19c6570*/ void _SuppressFinalize(object o);
        static /*0x19c6574*/ void SuppressFinalize(object obj);
        static /*0x19c6618*/ void _ReRegisterForFinalize(object o);
        static /*0x19c661c*/ void ReRegisterForFinalize(object obj);
        static /*0x19c66c0*/ long GetTotalMemory(bool forceFullCollection);
    }

    enum TypeNameFormatFlags
    {
        FormatBasic = 0,
        FormatNamespace = 1,
        FormatFullInst = 2,
        FormatAssembly = 4,
        FormatSignature = 8,
        FormatNoVersion = 16,
        FormatAngleBrackets = 64,
        FormatStubInfo = 128,
        FormatGenericParam = 256,
        FormatSerialization = 259,
    }

    enum TypeNameKind
    {
        Name = 0,
        ToString = 1,
        SerializationName = 2,
        FullName = 3,
    }

    class RuntimeType : System.Reflection.TypeInfo, System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        static System.Reflection.BindingFlags MemberBindingMask = 255;
        static System.Reflection.BindingFlags InvocationMask = 65280;
        static System.Reflection.BindingFlags BinderNonCreateInstance = 15616;
        static System.Reflection.BindingFlags BinderGetSetProperty = 12288;
        static System.Reflection.BindingFlags BinderSetInvokeProperty = 8448;
        static System.Reflection.BindingFlags BinderGetSetField = 3072;
        static System.Reflection.BindingFlags BinderSetInvokeField = 2304;
        static System.Reflection.BindingFlags BinderNonFieldGetSet = 16773888;
        static System.Reflection.BindingFlags ClassicBindingMask = 61696;
        static int GenericParameterCountAny = -1;
        static /*0x0*/ System.RuntimeType ValueType;
        static /*0x8*/ System.RuntimeType EnumType;
        static /*0x10*/ System.RuntimeType ObjectType;
        static /*0x18*/ System.RuntimeType StringType;
        static /*0x20*/ System.RuntimeType DelegateType;
        static /*0x28*/ System.Type[] s_SICtorParamTypes;
        static /*0x30*/ System.Func<System.Type, System.Type[], System.Type> MakeTypeBuilderInstantiation;
        static /*0x38*/ System.RuntimeType s_typedRef;
        /*0x18*/ System.MonoTypeInfo type_info;
        /*0x20*/ object GenericCache;
        /*0x28*/ System.Reflection.RuntimeConstructorInfo m_serializationCtor;

        static /*0x19cfb28*/ RuntimeType();
        static /*0x19c6714*/ System.RuntimeType GetType(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark);
        static /*0x19c6780*/ void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type);
        static /*0x19c68e4*/ void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters);
        static /*0x19c6b08*/ void SplitName(string fullname, ref string name, ref string ns);
        static /*0x19c6bf4*/ System.Reflection.BindingFlags FilterPreCalculate(bool isPublic, bool isInherited, bool isStatic);
        static /*0x19c6c30*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, ref bool prefixLookup, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x19c6d50*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x19c6ddc*/ bool FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, string name, bool ignoreCase);
        static /*0x19c6e3c*/ bool FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup);
        static /*0x19c7018*/ bool FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, string name, bool prefixLookup, string ns);
        static /*0x19c7130*/ bool FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x19c7410*/ bool FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x19c71b8*/ bool FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x19b780c*/ bool op_Equality(System.RuntimeType left, System.RuntimeType right);
        static /*0x19ba3c0*/ bool op_Inequality(System.RuntimeType left, System.RuntimeType right);
        static /*0x19ce44c*/ object IsConvertibleToPrimitiveType(object value, System.Type targetType);
        static /*0x19ceeac*/ System.Type MakePointerType(System.Type type);
        static /*0x19cf194*/ object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument);
        static /*0x19cbd08*/ System.Type MakeGenericType(System.Type gt, System.Type[] types);
        static /*0x19cf308*/ System.TypeCode GetTypeCodeImplInternal(System.Type type);
        static /*0x19ce088*/ object CreateInstanceInternal(System.Type type);
        /*0x19c7498*/ RuntimeType();
        /*0x19c74e0*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, int genericParamCount, bool allowPrefixLookup);
        /*0x19c7a24*/ System.RuntimeType.ListBuilder<System.Reflection.ConstructorInfo> GetConstructorCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);
        /*0x19c7ed8*/ System.RuntimeType.ListBuilder<System.Reflection.PropertyInfo> GetPropertyCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, bool allowPrefixLookup);
        /*0x19c83d0*/ System.RuntimeType.ListBuilder<System.Reflection.EventInfo> GetEventCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x19c884c*/ System.RuntimeType.ListBuilder<System.Reflection.FieldInfo> GetFieldCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x19c8d0c*/ System.RuntimeType.ListBuilder<System.Type> GetNestedTypeCandidates(string fullname, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x19c9258*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0x19c92e4*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x19c937c*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x19c9400*/ System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
        /*0x19c9480*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x19c9500*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x19c9724*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x19c99c0*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x19c9b90*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x19c9e84*/ System.Type GetNestedType(string fullname, System.Reflection.BindingFlags bindingAttr);
        /*0x19ca084*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x19ca574*/ System.Reflection.Module get_Module();
        /*0x19ca57c*/ System.Reflection.RuntimeModule GetRuntimeModule();
        /*0x19ca584*/ System.Reflection.Assembly get_Assembly();
        /*0x19ca58c*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
        /*0x19ca594*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x19ca5b8*/ bool IsInstanceOfType(object o);
        /*0x19ca5c0*/ bool IsAssignableFrom(System.Type c);
        /*0x19ca698*/ bool IsEquivalentTo(System.Type other);
        /*0x19ca748*/ System.Type get_BaseType();
        /*0x19ca74c*/ System.RuntimeType GetBaseType();
        /*0x19ca92c*/ System.Type get_UnderlyingSystemType();
        /*0x19ca930*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x19ca938*/ bool IsContextfulImpl();
        /*0x19ca940*/ bool IsByRefImpl();
        /*0x19ca948*/ bool IsPrimitiveImpl();
        /*0x19ca950*/ bool IsPointerImpl();
        /*0x19ca958*/ bool IsCOMObjectImpl();
        /*0x19ca964*/ bool IsValueTypeImpl();
        /*0x19caa84*/ bool get_IsEnum();
        /*0x19caaf8*/ bool HasElementTypeImpl();
        /*0x19cab00*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x19cabcc*/ bool get_IsSzArray();
        /*0x19cabd4*/ bool IsArrayImpl();
        /*0x19cabdc*/ int GetArrayRank();
        /*0x19cac68*/ System.Type GetElementType();
        /*0x19cac70*/ string[] GetEnumNames();
        /*0x19cad90*/ System.Array GetEnumValues();
        /*0x19caf08*/ System.Type GetEnumUnderlyingType();
        /*0x19cafdc*/ bool IsEnumDefined(object value);
        /*0x19cb508*/ string GetEnumName(object value);
        /*0x19cb6f8*/ System.RuntimeType[] GetGenericArgumentsInternal();
        /*0x19cb770*/ System.Type[] GetGenericArguments();
        /*0x19cb800*/ System.Type MakeGenericType(System.Type[] instantiation);
        /*0x19cbd0c*/ bool get_IsGenericTypeDefinition();
        /*0x19cbd14*/ bool get_IsGenericParameter();
        /*0x19cbd1c*/ int get_GenericParameterPosition();
        /*0x19cbda8*/ System.Type GetGenericTypeDefinition();
        /*0x19cbe34*/ bool get_IsGenericType();
        /*0x19cbe3c*/ bool get_IsConstructedGenericType();
        /*0x19cbe84*/ object InvokeMember(string name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, object target, object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParams);
        /*0x19cd13c*/ bool Equals(object obj);
        /*0x19cd148*/ object Clone();
        /*0x19cd14c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x19cd1b4*/ object[] GetCustomAttributes(bool inherit);
        /*0x19cd254*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
        /*0x19cd3f0*/ bool IsDefined(System.Type attributeType, bool inherit);
        /*0x19cd58c*/ string FormatTypeName(bool serialization);
        /*0x19cd770*/ System.Reflection.MemberTypes get_MemberType();
        /*0x19cd7b4*/ System.Type get_ReflectedType();
        /*0x19cd7c0*/ int get_MetadataToken();
        /*0x19cd7c8*/ void CreateInstanceCheckThis();
        /*0x19b7818*/ object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark);
        /*0x19b836c*/ object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, bool wrapExceptions, ref System.Threading.StackCrawlMark stackMark);
        /*0x19cda2c*/ System.Reflection.RuntimeConstructorInfo GetDefaultConstructor();
        /*0x19cd050*/ string GetDefaultMemberName();
        /*0x19cdbc4*/ System.Reflection.RuntimeConstructorInfo GetSerializationCtor();
        /*0x19cd9f0*/ object CreateInstanceSlow(bool publicOnly, bool wrapExceptions, bool skipCheckThis, bool fillCache);
        /*0x19cdda8*/ object CreateInstanceMono(bool nonPublic, bool wrapExceptions);
        /*0x19ce08c*/ object CheckValue(object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
        /*0x19ce1f0*/ object TryConvertToType(object value, ref bool failed);
        /*0x19cd718*/ string GetCachedName(System.TypeNameKind kind);
        /*0x19cede0*/ System.Type make_array_type(int rank);
        /*0x19cede4*/ System.Type MakeArrayType();
        /*0x19cedec*/ System.Type MakeArrayType(int rank);
        /*0x19cee3c*/ System.Type make_byref_type();
        /*0x19cee40*/ System.Type MakeByRefType();
        /*0x19ceeb0*/ System.Type MakePointerType();
        /*0x19cef9c*/ bool get_ContainsGenericParameters();
        /*0x19cf098*/ System.Type[] GetGenericParameterConstraints();
        /*0x19cf2a8*/ nint GetMethodsByName_native(nint namePtr, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x19c7738*/ System.Reflection.RuntimeMethodInfo[] GetMethodsByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x19cf2ac*/ nint GetPropertiesByName_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x19cf2b0*/ nint GetConstructors_native(System.Reflection.BindingFlags bindingAttr);
        /*0x19c7ca0*/ System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0x19c80e4*/ System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x19cf2b4*/ System.TypeCode GetTypeCodeImpl();
        /*0x19cf30c*/ string ToString();
        /*0x19cd9e8*/ bool IsGenericCOMObjectImpl();
        /*0x19cf324*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x19cf318*/ string getFullName(bool full_name, bool assembly_qualified);
        /*0x19cb768*/ System.Type[] GetGenericArgumentsInternal(bool runtimeArray);
        /*0x19cab88*/ System.Reflection.GenericParameterAttributes GetGenericParameterAttributes();
        /*0x19cbda4*/ int GetGenericParameterPosition();
        /*0x19cf328*/ nint GetEvents_native(nint name, System.RuntimeType.MemberListType listType);
        /*0x19cf32c*/ nint GetFields_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x19c8a20*/ System.Reflection.RuntimeFieldInfo[] GetFields_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x19c85a0*/ System.Reflection.RuntimeEventInfo[] GetEvents_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0x19cf330*/ System.Type[] GetInterfaces();
        /*0x19cf334*/ nint GetNestedTypes_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x19c8ec8*/ System.RuntimeType[] GetNestedTypes_internal(string displayName, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0x19cf338*/ string get_AssemblyQualifiedName();
        /*0x19cf344*/ System.Type get_DeclaringType();
        /*0x19cf348*/ string get_Name();
        /*0x19cf34c*/ string get_Namespace();
        /*0x19cf350*/ int GetHashCode();
        /*0x19cf41c*/ string get_FullName();
        /*0x19cf4e4*/ bool get_IsSZArray();
        /*0x19cf53c*/ bool IsSubclassOf(System.Type type);
        /*0x19cf634*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x19cf664*/ System.Reflection.MethodInfo GetMethodImplCommon(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x19cf91c*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);

        enum MemberListType
        {
            All = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
            HandleToInfo = 3,
        }

        struct ListBuilder<T>
        {
            /*0x0*/ T[] _items;
            /*0x0*/ T _item;
            /*0x0*/ int _count;
            /*0x0*/ int _capacity;

            ListBuilder(int capacity);
            T get_Item(int index);
            T[] ToArray();
            void CopyTo(object[] array, int index);
            int get_Count();
            void Add(T item);
        }
    }

    class ReflectionOnlyType : System.RuntimeType
    {
        /*0x1ae1ba8*/ ReflectionOnlyType();
        /*0x1ae1c00*/ System.RuntimeTypeHandle get_TypeHandle();
    }

    class SharedStatics
    {
        static /*0x0*/ System.SharedStatics _sharedStatics;
        /*0x10*/ System.Security.Util.Tokenizer.StringMaker _maker;

        static /*0x1ae1f84*/ SharedStatics();
        static /*0x1ae1c64*/ System.Security.Util.Tokenizer.StringMaker GetSharedStringMaker();
        static /*0x1ae1e34*/ void ReleaseSharedStringMaker(ref System.Security.Util.Tokenizer.StringMaker maker);
        /*0x1ae1c5c*/ SharedStatics();
    }

    enum ExceptionArgument
    {
        obj = 0,
        dictionary = 1,
        dictionaryCreationThreshold = 2,
        array = 3,
        info = 4,
        key = 5,
        collection = 6,
        list = 7,
        match = 8,
        converter = 9,
        queue = 10,
        stack = 11,
        capacity = 12,
        index = 13,
        startIndex = 14,
        value = 15,
        count = 16,
        arrayIndex = 17,
        name = 18,
        mode = 19,
        item = 20,
        options = 21,
        view = 22,
        sourceBytesToCopy = 23,
        start = 24,
        pointer = 25,
        ownedMemory = 26,
        text = 27,
        length = 28,
        comparer = 29,
        comparable = 30,
        exceptions = 31,
        exception = 32,
        action = 33,
        comparison = 34,
        startSegment = 35,
        endSegment = 36,
        endIndex = 37,
        task = 38,
        source = 39,
        state = 40,
        culture = 41,
        destination = 42,
        byteOffset = 43,
        minimumBufferSize = 44,
        offset = 45,
        values = 46,
        comparisonType = 47,
        s = 48,
        input = 49,
        format = 50,
    }

    enum ExceptionResource
    {
        Argument_ImplementIComparable = 0,
        Argument_InvalidType = 1,
        Argument_InvalidArgumentForComparison = 2,
        Argument_InvalidRegistryKeyPermissionCheck = 3,
        ArgumentOutOfRange_NeedNonNegNum = 4,
        Arg_ArrayPlusOffTooSmall = 5,
        Arg_NonZeroLowerBound = 6,
        Arg_RankMultiDimNotSupported = 7,
        Arg_RegKeyDelHive = 8,
        Arg_RegKeyStrLenBug = 9,
        Arg_RegSetStrArrNull = 10,
        Arg_RegSetMismatchedKind = 11,
        Arg_RegSubKeyAbsent = 12,
        Arg_RegSubKeyValueAbsent = 13,
        Argument_AddingDuplicate = 14,
        Serialization_InvalidOnDeser = 15,
        Serialization_MissingKeys = 16,
        Serialization_NullKey = 17,
        Argument_InvalidArrayType = 18,
        NotSupported_KeyCollectionSet = 19,
        NotSupported_ValueCollectionSet = 20,
        ArgumentOutOfRange_SmallCapacity = 21,
        ArgumentOutOfRange_Index = 22,
        Argument_InvalidOffLen = 23,
        Argument_ItemNotExist = 24,
        ArgumentOutOfRange_Count = 25,
        ArgumentOutOfRange_InvalidThreshold = 26,
        ArgumentOutOfRange_ListInsert = 27,
        NotSupported_ReadOnlyCollection = 28,
        InvalidOperation_CannotRemoveFromStackOrQueue = 29,
        InvalidOperation_EmptyQueue = 30,
        InvalidOperation_EnumOpCantHappen = 31,
        InvalidOperation_EnumFailedVersion = 32,
        InvalidOperation_EmptyStack = 33,
        ArgumentOutOfRange_BiggerThanCollection = 34,
        InvalidOperation_EnumNotStarted = 35,
        InvalidOperation_EnumEnded = 36,
        NotSupported_SortedListNestedWrite = 37,
        InvalidOperation_NoValue = 38,
        InvalidOperation_RegRemoveSubKey = 39,
        Security_RegistryPermission = 40,
        UnauthorizedAccess_RegistryNoWrite = 41,
        ObjectDisposed_RegKeyClosed = 42,
        NotSupported_InComparableType = 43,
        Argument_InvalidRegistryOptionsCheck = 44,
        Argument_InvalidRegistryViewCheck = 45,
        TaskT_TransitionToFinal_AlreadyCompleted = 46,
        TaskCompletionSourceT_TrySetException_NullException = 47,
        TaskCompletionSourceT_TrySetException_NoExceptions = 48,
        NotSupported_StringComparison = 49,
        InvalidOperation_NullArray = 50,
    }

    struct TypedReference
    {
        /*0x10*/ System.RuntimeTypeHandle type;
        /*0x18*/ nint Value;
        /*0x20*/ nint Type;

        static /*0x1ae1fdc*/ System.TypedReference MakeTypedReference(object target, System.Reflection.FieldInfo[] flds);
        static /*0x1ae2428*/ void InternalMakeTypedReference(void* result, object target, nint[] flds, System.RuntimeType lastFieldType);
        static /*0x1ae25a8*/ void SetTypedReference(System.TypedReference target, object value);
        /*0x1ae242c*/ int GetHashCode();
        /*0x1ae24e4*/ bool Equals(object o);
        /*0x1ae253c*/ bool get_IsNull();
    }

    class TypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string AssemblyName;
        /*0xa0*/ string MessageArg;
        /*0xa8*/ int ResourceId;

        /*0x1ae25f8*/ TypeLoadException();
        /*0x1ae2658*/ TypeLoadException(string message);
        /*0x1ae2788*/ TypeLoadException(string className, string assemblyName);
        /*0x1ae2794*/ TypeLoadException(string className, string assemblyName, string messageArg, int resourceId);
        /*0x1ae27f4*/ TypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1ae2680*/ string get_Message();
        /*0x1ae2698*/ void SetMessageField();
        /*0x1ae293c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnitySerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Type[] m_instantiation;
        /*0x18*/ int[] m_elementTypes;
        /*0x20*/ int m_genericParameterPosition;
        /*0x28*/ System.Type m_declaringType;
        /*0x30*/ System.Reflection.MethodBase m_declaringMethod;
        /*0x38*/ string m_data;
        /*0x40*/ string m_assemblyName;
        /*0x48*/ int m_unityType;

        static /*0x1ae2b10*/ System.RuntimeType AddElementTypes(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x1ae2fd4*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType);
        static /*0x1ae3128*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x1ae34b0*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType, string data, System.Reflection.RuntimeAssembly assembly);
        /*0x1ae363c*/ UnitySerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1ae2edc*/ System.Type MakeElementTypes(System.Type type);
        /*0x1ae3a30*/ void ThrowInsufficientInformation(string field);
        /*0x1ae3b3c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1ae3b94*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
    }

    class AppDomain : System.MarshalByRefObject
    {
        static /*0x0*/ string _process_guid;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> type_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress_refonly;
        /*0x18*/ nint _mono_app_domain;
        /*0x20*/ object _evidence;
        /*0x28*/ object _granted;
        /*0x30*/ int _principalPolicy;
        /*0x38*/ System.AssemblyLoadEventHandler AssemblyLoad;
        /*0x40*/ System.ResolveEventHandler AssemblyResolve;
        /*0x48*/ System.EventHandler DomainUnload;
        /*0x50*/ System.EventHandler ProcessExit;
        /*0x58*/ System.ResolveEventHandler ResourceResolve;
        /*0x60*/ System.ResolveEventHandler TypeResolve;
        /*0x68*/ System.UnhandledExceptionEventHandler UnhandledException;
        /*0x70*/ System.EventHandler<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException;
        /*0x78*/ object _domain_manager;
        /*0x80*/ System.ResolveEventHandler ReflectionOnlyAssemblyResolve;
        /*0x88*/ object _activation;
        /*0x90*/ object _applicationIdentity;
        /*0x98*/ System.Collections.Generic.List<string> compatibility_switch;

        static /*0x1ae40a0*/ bool IsAppXModel();
        static /*0x1ae40b4*/ System.AppDomain getCurDomain();
        static /*0x1ae40b8*/ System.AppDomain get_CurrentDomain();
        static /*0x1ae4214*/ System.AppDomain InternalSetDomainByID(int domain_id);
        static /*0x1ae4218*/ System.AppDomain InternalSetDomain(System.AppDomain context);
        static /*0x1ae421c*/ void InternalPushDomainRefByID(int domain_id);
        static /*0x1ae4220*/ void InternalPopDomainRef();
        static /*0x1ae4224*/ System.Runtime.Remoting.Contexts.Context InternalSetContext(System.Runtime.Remoting.Contexts.Context context);
        static /*0x1ae4228*/ System.Runtime.Remoting.Contexts.Context InternalGetContext();
        static /*0x1ae422c*/ System.Runtime.Remoting.Contexts.Context InternalGetDefaultContext();
        static /*0x1ae4230*/ string InternalGetProcessGuid(string newguid);
        static /*0x1ae4234*/ object InvokeInDomainByID(int domain_id, System.Reflection.MethodInfo method, object obj, object[] args);
        static /*0x1ae43c4*/ string GetProcessGuid();
        static /*0x1ae444c*/ bool InternalIsFinalizingForUnload(int domain_id);
        /*0x1ae40a8*/ AppDomain();
        /*0x1ae40b0*/ string getFriendlyName();
        /*0x1ae40bc*/ System.Reflection.Assembly[] GetAssemblies(bool refOnly);
        /*0x1ae40c4*/ System.Reflection.Assembly[] GetAssemblies();
        /*0x1ae40cc*/ object GetData(string name);
        /*0x1ae40d0*/ object InitializeLifetimeService();
        /*0x1ae40d8*/ System.Reflection.Assembly LoadAssembly(string assemblyRef, System.Security.Policy.Evidence securityEvidence, bool refOnly, ref System.Threading.StackCrawlMark stackMark);
        /*0x1ae40e0*/ System.Reflection.Assembly Load(string assemblyString);
        /*0x1ae4104*/ System.Reflection.Assembly Load(string assemblyString, System.Security.Policy.Evidence assemblySecurity, bool refonly, ref System.Threading.StackCrawlMark stackMark);
        /*0x1ae4450*/ bool IsFinalizingForUnload();
        /*0x1ae4464*/ int getDomainID();
        /*0x1ae446c*/ string ToString();
        /*0x1ae4470*/ void DoAssemblyLoad(System.Reflection.Assembly assembly);
        /*0x1ae4508*/ System.Reflection.Assembly DoAssemblyResolve(string name, System.Reflection.Assembly requestingAssembly, bool refonly);
        /*0x1ae4818*/ System.Reflection.Assembly DoTypeResolve(string name);
        /*0x1ae4ae8*/ void DoDomainUnload();
        /*0x1ae4b0c*/ byte[] GetMarshalledDomainObjRef();
        /*0x1ae4be4*/ void ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg, ref byte[] arrResponse, ref System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm);
        /*0x1ae4d14*/ void add_AssemblyLoad(System.AssemblyLoadEventHandler value);
        /*0x1ae4f20*/ void remove_AssemblyLoad(System.AssemblyLoadEventHandler value);
        /*0x1ae5128*/ void add_DomainUnload(System.EventHandler value);
        /*0x1ae51c0*/ void remove_DomainUnload(System.EventHandler value);
        /*0x1ae5258*/ void add_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x1ae52f0*/ void remove_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x1ae5388*/ bool get_IsHomogenous();
        /*0x1ae5390*/ bool get_IsFullyTrusted();
    }

    class CompatibilitySwitches
    {
        static /*0x0*/ bool IsAppEarlierThanWindowsPhone8;
    }

    class Environment
    {
        static string mono_corlib_version = "1A5E0066-58DC-428A-B21C-0AD6CDAE2789";
        static /*0x0*/ string nl;
        static /*0x8*/ System.OperatingSystem os;

        static /*0x1ae1c58*/ string GetResourceString(string key);
        static /*0x1ae3acc*/ string GetResourceString(string key, object[] values);
        static /*0x1ae5398*/ string GetResourceStringEncodingName(int codePage);
        static /*0x1ae5514*/ string get_CurrentDirectory();
        static /*0x1ae551c*/ int get_CurrentManagedThreadId();
        static /*0x1ae553c*/ bool get_HasShutdownStarted();
        static /*0x1ae5540*/ string get_MachineName();
        static /*0x1ae5544*/ string GetNewLine();
        static /*0x1ae5548*/ string get_NewLine();
        static /*0x1ae55b0*/ System.PlatformID get_Platform();
        static /*0x1ae55b4*/ string GetOSVersionString();
        static /*0x1ae55b8*/ System.OperatingSystem get_OSVersion();
        static /*0x1ae5674*/ System.Version CreateVersionFromString(string info);
        static /*0x1ae5890*/ string get_StackTrace();
        static /*0x1ae58fc*/ int get_TickCount();
        static /*0x1ae5900*/ string get_UserDomainName();
        static /*0x1ae5904*/ string get_UserName();
        static /*0x1ae5908*/ void Exit(int exitCode);
        static /*0x1ae590c*/ string[] GetCommandLineArgs();
        static /*0x1ae5910*/ string internalGetEnvironmentVariable_native(nint variable);
        static /*0x1ae5914*/ string internalGetEnvironmentVariable(string variable);
        static /*0x1ae59dc*/ string GetEnvironmentVariable(string variable);
        static /*0x1ae59e0*/ string GetFolderPath(System.Environment.SpecialFolder folder);
        static /*0x1ae5a1c*/ string GetWindowsFolderPath(int folder);
        static /*0x1ae59e8*/ string GetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x1ae5ed8*/ string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback);
        static /*0x1ae5a38*/ string UnixGetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x1ae6350*/ void FailFast(string message, System.Exception exception);
        static /*0x1ae6358*/ void FailFast(string message, System.Exception exception, string errorSource);
        static /*0x1ae635c*/ int get_ProcessorCount();
        static /*0x1ae5a20*/ bool get_IsRunningOnWindows();
        static /*0x1ae6360*/ string GetMachineConfigPath();
        static /*0x1ae634c*/ string internalGetHome();
        static /*0x1ae6364*/ int GetPageSize();
        static /*0x1ae6368*/ bool get_IsUnix();
        static /*0x1ae63a0*/ string GetStackTrace(System.Exception e, bool needFileInfo);

        enum SpecialFolder
        {
            MyDocuments = 5,
            Desktop = 0,
            MyComputer = 17,
            Programs = 2,
            Personal = 5,
            Favorites = 6,
            Startup = 7,
            Recent = 8,
            SendTo = 9,
            StartMenu = 11,
            MyMusic = 13,
            DesktopDirectory = 16,
            Templates = 21,
            ApplicationData = 26,
            LocalApplicationData = 28,
            InternetCache = 32,
            Cookies = 33,
            History = 34,
            CommonApplicationData = 35,
            System = 37,
            ProgramFiles = 38,
            MyPictures = 39,
            CommonProgramFiles = 43,
            MyVideos = 14,
            NetworkShortcuts = 19,
            Fonts = 20,
            CommonStartMenu = 22,
            CommonPrograms = 23,
            CommonStartup = 24,
            CommonDesktopDirectory = 25,
            PrinterShortcuts = 27,
            Windows = 36,
            UserProfile = 40,
            SystemX86 = 41,
            ProgramFilesX86 = 42,
            CommonProgramFilesX86 = 44,
            CommonTemplates = 45,
            CommonDocuments = 46,
            CommonAdminTools = 47,
            AdminTools = 48,
            CommonMusic = 53,
            CommonPictures = 54,
            CommonVideos = 55,
            Resources = 56,
            LocalizedResources = 57,
            CommonOemLinks = 58,
            CDBurning = 59,
        }

        enum SpecialFolderOption
        {
            None = 0,
            DoNotVerify = 16384,
            Create = 32768,
        }
    }

    class MonoTypeInfo
    {
        /*0x10*/ string full_name;
        /*0x18*/ System.Reflection.RuntimeConstructorInfo default_ctor;

        /*0x1ae6438*/ MonoTypeInfo();
    }

    class TypeNameParser
    {
        static /*0x1ae643c*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
    }

    class AppDomainSetup
    {
        /*0x10*/ string application_base;
        /*0x18*/ string application_name;
        /*0x20*/ string cache_path;
        /*0x28*/ string configuration_file;
        /*0x30*/ string dynamic_base;
        /*0x38*/ string license_file;
        /*0x40*/ string private_bin_path;
        /*0x48*/ string private_bin_path_probe;
        /*0x50*/ string shadow_copy_directories;
        /*0x58*/ string shadow_copy_files;
        /*0x60*/ bool publisher_policy;
        /*0x61*/ bool path_changed;
        /*0x64*/ int loader_optimization;
        /*0x68*/ bool disallow_binding_redirects;
        /*0x69*/ bool disallow_code_downloads;
        /*0x70*/ object _activationArguments;
        /*0x78*/ object domain_initializer;
        /*0x80*/ object application_trust;
        /*0x88*/ string[] domain_initializer_args;
        /*0x90*/ bool disallow_appbase_probe;
        /*0x98*/ byte[] configuration_bytes;
        /*0xa0*/ byte[] serialized_non_primitives;
        /*0xa8*/ string manager_assembly;
        /*0xb0*/ string manager_type;
        /*0xb8*/ string[] partial_visible_assemblies;
        /*0xc0*/ string <TargetFrameworkName>k__BackingField;

        /*0x1ae6e80*/ AppDomainSetup();
    }

    struct ArgIterator
    {
        /*0x10*/ nint sig;
        /*0x18*/ nint args;
        /*0x20*/ int next_arg;
        /*0x24*/ int num_args;

        /*0x1ae6e84*/ bool Equals(object o);
        /*0x1ae6ed4*/ int GetHashCode();
    }

    class Console
    {
        static /*0x0*/ System.IO.TextWriter stdout;
        static /*0x8*/ System.IO.TextWriter stderr;
        static /*0x10*/ System.IO.TextReader stdin;
        static /*0x18*/ System.Text.Encoding inputEncoding;
        static /*0x20*/ System.Text.Encoding outputEncoding;
        static /*0x28*/ System.ConsoleCancelEventHandler cancel_event;

        static /*0x1ae6ee4*/ Console();
        static /*0x1ae7178*/ void SetupStreams(System.Text.Encoding inputEncoding, System.Text.Encoding outputEncoding);
        static /*0x1ae7810*/ System.IO.TextWriter get_Error();
        static /*0x1ae7868*/ System.IO.TextWriter get_Out();
        static /*0x1ae78c0*/ System.IO.Stream Open(nint handle, System.IO.FileAccess access, int bufferSize);
        static /*0x1ae7780*/ System.IO.Stream OpenStandardError(int bufferSize);
        static /*0x1ae7660*/ System.IO.Stream OpenStandardInput(int bufferSize);
        static /*0x1ae76f0*/ System.IO.Stream OpenStandardOutput(int bufferSize);
        static /*0x1ae7a1c*/ void SetOut(System.IO.TextWriter newOut);
        static /*0x1ae7b00*/ void WriteLine(string value);
        static /*0x1ae7b74*/ System.Text.Encoding get_InputEncoding();
        static /*0x1ae7bcc*/ System.Text.Encoding get_OutputEncoding();
        static /*0x1ae7c24*/ System.ConsoleKeyInfo ReadKey();
        static /*0x1ae7c7c*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x1ae7db0*/ void DoConsoleCancelEvent();

        class WindowsConsole
        {
            static /*0x0*/ bool ctrlHandlerAdded;
            static /*0x8*/ System.Console.WindowsConsole.WindowsCancelHandler cancelHandler;

            static /*0x1ae80dc*/ WindowsConsole();
            static /*0x1ae7fa8*/ int GetConsoleCP();
            static /*0x1ae8010*/ int GetConsoleOutputCP();
            static /*0x1ae807c*/ bool DoWindowsConsoleCancelEvent(int keyCode);
            static /*0x1ae70e0*/ int GetInputCodePage();
            static /*0x1ae712c*/ int GetOutputCodePage();

            class WindowsCancelHandler : System.MulticastDelegate
            {
                /*0x1ae8178*/ WindowsCancelHandler(object object, nint method);
                /*0x1ae823c*/ bool Invoke(int keyCode);
            }
        }
    }

    class ConsoleDriver
    {
        static /*0x0*/ System.IConsoleDriver driver;
        static /*0x8*/ bool is_console;
        static /*0x9*/ bool called_isatty;

        static /*0x1ae8250*/ ConsoleDriver();
        static /*0x1ae8314*/ System.IConsoleDriver CreateNullConsoleDriver();
        static /*0x1ae8360*/ System.IConsoleDriver CreateWindowsConsoleDriver();
        static /*0x1ae83bc*/ System.IConsoleDriver CreateTermInfoDriver(string term);
        static /*0x1ae7cd8*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x1ae7528*/ bool get_IsConsole();
        static /*0x1ae8768*/ bool Isatty(nint handle);
        static /*0x1ae876c*/ int InternalKeyAvailable(int ms_timeout);
        static /*0x1ae8770*/ bool TtySetup(string keypadXmit, string teardown, ref byte[] control_characters, ref int* address);
        static /*0x1ae8774*/ bool SetEcho(bool wantEcho);
    }

    class DelegateData
    {
        /*0x10*/ System.Type target_type;
        /*0x18*/ string method_name;
        /*0x20*/ bool curried_first_arg;

        /*0x1ae877c*/ DelegateData();
    }

    class Delegate : System.ICloneable, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint method_ptr;
        /*0x18*/ nint invoke_impl;
        /*0x20*/ object m_target;
        /*0x28*/ nint method;
        /*0x30*/ nint delegate_trampoline;
        /*0x38*/ nint extra_arg;
        /*0x40*/ nint method_code;
        /*0x48*/ nint interp_method;
        /*0x50*/ nint interp_invoke_impl;
        /*0x58*/ System.Reflection.MethodInfo method_info;
        /*0x60*/ System.Reflection.MethodInfo original_method_info;
        /*0x68*/ System.DelegateData data;
        /*0x70*/ bool method_is_virtual;

        static /*0x1ae8798*/ System.Delegate CreateDelegate_internal(System.Type type, object target, System.Reflection.MethodInfo info, bool throwOnBindFailure);
        static /*0x1ae87a0*/ bool arg_type_match(System.Type delArgType, System.Type argType);
        static /*0x1ae8930*/ bool arg_type_match_this(System.Type delArgType, System.Type argType, bool boxedThis);
        static /*0x1ae8a7c*/ bool return_type_match(System.Type delReturnType, System.Type returnType);
        static /*0x1ae8c90*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure, bool allowClosed);
        static /*0x1ae949c*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method);
        static /*0x1ae94a8*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);
        static /*0x1ae94c0*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method);
        static /*0x1ae94d4*/ System.Delegate CreateDelegate(System.Type type, object target, string method);
        static /*0x1ae94ec*/ System.Reflection.MethodInfo GetCandidateMethod(System.Type type, System.Type target, string method, System.Reflection.BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure);
        static /*0x1ae9948*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x1ae9a74*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method);
        static /*0x1ae9a80*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x1ae94e0*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase);
        static /*0x1ae4dac*/ System.Delegate Combine(System.Delegate a, System.Delegate b);
        static /*0x1aea168*/ System.Delegate Combine(System.Delegate[] delegates);
        static /*0x1ae4fb8*/ System.Delegate Remove(System.Delegate source, System.Delegate value);
        static /*0x1aea24c*/ bool op_Equality(System.Delegate d1, System.Delegate d2);
        static /*0x1aea274*/ bool op_Inequality(System.Delegate d1, System.Delegate d2);
        static /*0x1aea2ac*/ System.MulticastDelegate AllocDelegateLike_internal(System.Delegate d);
        /*0x1ae8780*/ System.Reflection.MethodInfo get_Method();
        /*0x1ae878c*/ System.Reflection.MethodInfo GetVirtualMethod_internal();
        /*0x1ae8790*/ object get_Target();
        /*0x1ae9b60*/ object Clone();
        /*0x1ae9b68*/ bool Equals(object obj);
        /*0x1ae9d0c*/ int GetHashCode();
        /*0x1ae9d84*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x1ae9e8c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aea0d8*/ System.Delegate[] GetInvocationList();
        /*0x1aea1cc*/ System.Delegate CombineImpl(System.Delegate d);
        /*0x1aea228*/ System.Delegate RemoveImpl(System.Delegate d);
    }

    class DelegateSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Delegate _delegate;

        static /*0x1ae9e90*/ void GetDelegateData(System.Delegate instance, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x1aea2b0*/ DelegateSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x1aea844*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aea884*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);

        class DelegateEntry
        {
            /*0x10*/ string type;
            /*0x18*/ string assembly;
            /*0x20*/ object target;
            /*0x28*/ string targetTypeAssembly;
            /*0x30*/ string targetTypeName;
            /*0x38*/ string methodName;
            /*0x40*/ System.DelegateSerializationHolder.DelegateEntry delegateEntry;

            /*0x1aea728*/ DelegateEntry(System.Delegate del, string targetLabel);
            /*0x1aea4b0*/ System.Delegate DeserializeDelegate(System.Runtime.Serialization.SerializationInfo info, int index);
        }
    }

    class EmptyArray<T>
    {
        static /*0x0*/ T[] Value;

        static EmptyArray();
    }

    enum SByteEnum
    {
    }

    enum Int16Enum
    {
    }

    enum Int32Enum
    {
    }

    enum Int64Enum
    {
    }

    enum ByteEnum
    {
    }

    enum UInt16Enum
    {
    }

    enum UInt32Enum
    {
    }

    enum UInt64Enum
    {
    }

    interface IConsoleDriver
    {
        System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    struct IntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nint>
    {
        static /*0x0*/ nint Zero;
        /*0x10*/ void* m_value;

        static /*0x1aea908*/ int get_Size();
        static /*0x1ae24d8*/ bool op_Equality(nint value1, nint value2);
        static /*0x1ae9e80*/ bool op_Inequality(nint value1, nint value2);
        static /*0x1aeaa88*/ nint op_Explicit(int value);
        static /*0x1aeaa90*/ nint op_Explicit(long value);
        static /*0x1aeaa94*/ nint op_Explicit(void* value);
        static /*0x1aeaa98*/ int op_Explicit(nint value);
        static /*0x1aeaa9c*/ void* op_Explicit(nint value);
        static /*0x1aeaaa0*/ nint Add(nint pointer, int offset);
        static /*0x1aeaaa8*/ nint op_Addition(nint pointer, int offset);
        static /*0x1aeaab0*/ nint op_Subtraction(nint pointer, int offset);
        /*0x1aea88c*/ IntPtr(int value);
        /*0x1aea898*/ IntPtr(long value);
        /*0x1aea8a0*/ IntPtr(void* value);
        /*0x1aea8a8*/ IntPtr(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aea910*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aea9bc*/ bool Equals(object obj);
        /*0x1ae6edc*/ int GetHashCode();
        /*0x1aea9b4*/ long ToInt64();
        /*0x1aeaa34*/ void* ToPointer();
        /*0x1aeaa3c*/ string ToString();
        /*0x1aeaa64*/ string ToString(string format);
        /*0x1aeaab8*/ bool IsNull();
        /*0x1aeaac8*/ bool System.IEquatable<System.IntPtr>.Equals(nint other);
    }

    class KnownTerminals
    {
        static /*0x1aeaad8*/ byte[] get_linux();
        static /*0x1aeab48*/ byte[] get_xterm();
        static /*0x1aeabb8*/ byte[] get_ansi();
    }

    class MarshalByRefObject
    {
        /*0x10*/ object _identity;

        /*0x1ae40ac*/ MarshalByRefObject();
        /*0x1aeac28*/ System.Runtime.Remoting.ServerIdentity get_ObjectIdentity();
        /*0x1aeac68*/ void set_ObjectIdentity(System.Runtime.Remoting.ServerIdentity value);
        /*0x1aeaca8*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
        /*0x1aeace8*/ object InitializeLifetimeService();
    }

    class MonoAsyncCall
    {
        /*0x10*/ object msg;
        /*0x18*/ nint cb_method;
        /*0x20*/ object cb_target;
        /*0x28*/ object state;
        /*0x30*/ object res;
        /*0x38*/ object out_args;

        /*0x1aead28*/ MonoAsyncCall();
    }

    class MonoCustomAttrs
    {
        static /*0x0*/ System.Reflection.Assembly corlib;
        static /*0x8*/ System.AttributeUsageAttribute DefaultAttributeUsage;
        [ThreadStatic] static System.Collections.Generic.Dictionary<System.Type, System.AttributeUsageAttribute> usage_cache;

        static /*0x1aeea4c*/ MonoCustomAttrs();
        static /*0x1aead2c*/ bool IsUserCattrProvider(object obj);
        static /*0x1aeaef8*/ System.Attribute[] GetCustomAttributesInternal(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool pseudoAttrs);
        static /*0x1aeaf00*/ object[] GetPseudoCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x1aeb1ec*/ object[] GetPseudoCustomAttributes(System.Type type);
        static /*0x1aeb350*/ object[] GetCustomAttributesBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x1aeb4f4*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x1aec3b0*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x1aec528*/ System.Reflection.CustomAttributeData[] GetCustomAttributesDataInternal(System.Reflection.ICustomAttributeProvider obj);
        static /*0x1aec52c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x1aec804*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x1aec658*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesDataBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x1aedb64*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x1aede54*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Type type);
        static /*0x1aee06c*/ bool IsDefined(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x1aee304*/ bool IsDefinedInternal(System.Reflection.ICustomAttributeProvider obj, System.Type AttributeType);
        static /*0x1aee308*/ System.Reflection.PropertyInfo GetBasePropertyDefinition(System.Reflection.RuntimePropertyInfo property);
        static /*0x1aee5f0*/ System.Reflection.EventInfo GetBaseEventDefinition(System.Reflection.RuntimeEventInfo evt);
        static /*0x1aebe7c*/ System.Reflection.ICustomAttributeProvider GetBase(System.Reflection.ICustomAttributeProvider obj);
        static /*0x1aee800*/ System.AttributeUsageAttribute RetrieveAttributeUsageNoCache(System.Type attributeType);
        static /*0x1aec230*/ System.AttributeUsageAttribute RetrieveAttributeUsage(System.Type attributeType);

        class AttributeInfo
        {
            /*0x10*/ System.AttributeUsageAttribute _usage;
            /*0x18*/ int _inheritanceLevel;

            /*0x1aec3a4*/ AttributeInfo(System.AttributeUsageAttribute usage, int inheritanceLevel);
            /*0x1aeeac8*/ System.AttributeUsageAttribute get_Usage();
            /*0x1aeead0*/ int get_InheritanceLevel();
        }
    }

    class MonoListItem
    {
        /*0x10*/ System.MonoListItem next;
        /*0x18*/ object data;

        /*0x1aeead8*/ MonoListItem();
    }

    class MonoType : System.RuntimeType
    {
    }

    class MulticastDelegate : System.Delegate
    {
        /*0x78*/ System.Delegate[] delegates;

        /*0x1aeeadc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aeeae0*/ bool Equals(object obj);
        /*0x1aeec24*/ int GetHashCode();
        /*0x1aeec28*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x1aeec70*/ System.Delegate[] GetInvocationList();
        /*0x1aeed3c*/ System.Delegate CombineImpl(System.Delegate follow);
        /*0x1aeefa4*/ int LastIndexOf(System.Delegate[] haystack, System.Delegate[] needle);
        /*0x1aef0d0*/ System.Delegate RemoveImpl(System.Delegate value);
    }

    class NullConsoleDriver : System.IConsoleDriver
    {
        static /*0x0*/ System.ConsoleKeyInfo EmptyConsoleKeyInfo;

        static /*0x1aef40c*/ NullConsoleDriver();
        /*0x1ae841c*/ NullConsoleDriver();
        /*0x1aef3b0*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class Object
    {
        static /*0x1aef49c*/ bool Equals(object objA, object objB);
        static /*0x1aef4f4*/ bool ReferenceEquals(object objA, object objB);
        static /*0x1aef4d0*/ int InternalGetHashCode(object o);
        /*0x1ae1c60*/ Object();
        /*0x1aef490*/ bool Equals(object obj);
        /*0x1aef4c8*/ void Finalize();
        /*0x1aef4cc*/ int GetHashCode();
        /*0x1ae2424*/ System.Type GetType();
        /*0x1ae9b64*/ object MemberwiseClone();
        /*0x1aef4d4*/ string ToString();
        /*0x1aef500*/ void FieldGetter(string typeName, string fieldName, ref object val);
        /*0x1aef504*/ void FieldSetter(string typeName, string fieldName, object val);
    }

    enum PlatformID
    {
        Win32S = 0,
        Win32Windows = 1,
        Win32NT = 2,
        WinCE = 3,
        Unix = 4,
        Xbox = 5,
        MacOSX = 6,
    }

    struct RuntimeArgumentHandle
    {
        /*0x10*/ nint args;
    }

    struct RuntimeFieldHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x1aef98c*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
        static /*0x1aef990*/ void SetValue(System.Reflection.RuntimeFieldInfo field, object obj, object value, System.RuntimeType fieldType, System.Reflection.FieldAttributes fieldAttr, System.RuntimeType declaringType, ref bool domainInitialized);
        static /*0x1aef994*/ void SetValueDirect(System.Reflection.RuntimeFieldInfo field, System.RuntimeType fieldType, void* pTypedRef, object value, System.RuntimeType contextType);
        /*0x1aef508*/ RuntimeFieldHandle(nint v);
        /*0x1aef510*/ RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aef6c4*/ nint get_Value();
        /*0x1aef6cc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aef888*/ bool Equals(object obj);
        /*0x1aef984*/ int GetHashCode();
    }

    struct RuntimeMethodHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x1aefe1c*/ string ConstructInstantiation(System.Reflection.RuntimeMethodInfo method, System.TypeNameFormatFlags format);
        /*0x1aef998*/ RuntimeMethodHandle(nint v);
        /*0x1aef9a0*/ RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aefb54*/ nint get_Value();
        /*0x1aefb5c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1aefd18*/ bool Equals(object obj);
        /*0x1aefe14*/ int GetHashCode();
        /*0x1aeff74*/ bool IsNullHandle();
    }

    struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x1af0468*/ System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type);
        static /*0x1af046c*/ int GetMetadataToken(System.RuntimeType type);
        static /*0x1af0470*/ int GetToken(System.RuntimeType type);
        static /*0x1af0474*/ System.Type GetGenericTypeDefinition_impl(System.RuntimeType type);
        static /*0x1af0478*/ System.Type GetGenericTypeDefinition(System.RuntimeType type);
        static /*0x1af047c*/ bool IsPrimitive(System.RuntimeType type);
        static /*0x1af04bc*/ bool IsByRef(System.RuntimeType type);
        static /*0x1af04d8*/ bool IsPointer(System.RuntimeType type);
        static /*0x1af04f4*/ bool IsArray(System.RuntimeType type);
        static /*0x1af051c*/ bool IsSzArray(System.RuntimeType type);
        static /*0x1af0538*/ bool HasElementType(System.RuntimeType type);
        static /*0x1af04b8*/ System.Reflection.CorElementType GetCorElementType(System.RuntimeType type);
        static /*0x1af0574*/ bool HasInstantiation(System.RuntimeType type);
        static /*0x1af0578*/ bool IsComObject(System.RuntimeType type);
        static /*0x1af057c*/ bool IsInstanceOfType(System.RuntimeType type, object o);
        static /*0x1af0580*/ bool HasReferences(System.RuntimeType type);
        static /*0x1af0584*/ bool IsComObject(System.RuntimeType type, bool isGenericCOM);
        static /*0x1af0594*/ bool IsContextful(System.RuntimeType type);
        static /*0x1af0628*/ bool IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2);
        static /*0x1af0630*/ bool IsInterface(System.RuntimeType type);
        static /*0x1af0650*/ int GetArrayRank(System.RuntimeType type);
        static /*0x1af0654*/ System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type);
        static /*0x1af0658*/ System.RuntimeType GetElementType(System.RuntimeType type);
        static /*0x1af065c*/ System.Reflection.RuntimeModule GetModule(System.RuntimeType type);
        static /*0x1af0660*/ bool IsGenericVariable(System.RuntimeType type);
        static /*0x1af0664*/ System.RuntimeType GetBaseType(System.RuntimeType type);
        static /*0x1af0668*/ bool CanCastTo(System.RuntimeType type, System.RuntimeType target);
        static /*0x1af0678*/ bool type_is_assignable_from(System.Type a, System.Type b);
        static /*0x1af067c*/ bool IsGenericTypeDefinition(System.RuntimeType type);
        static /*0x1af0680*/ nint GetGenericParameterInfo(System.RuntimeType type);
        static /*0x1af0684*/ bool IsSubclassOf(System.RuntimeType childType, System.RuntimeType baseType);
        static /*0x1af06a4*/ bool is_subclass_of(nint childType, nint baseType);
        static /*0x1af06a8*/ System.RuntimeType internal_from_name(string name, ref System.Threading.StackCrawlMark stackMark, System.Reflection.Assembly callerAssembly, bool throwOnError, bool ignoreCase, bool reflectionOnly);
        static /*0x1af06b8*/ System.RuntimeType GetTypeByName(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark, bool loadTypeFromPartialName);
        /*0x1aeffcc*/ RuntimeTypeHandle(nint val);
        /*0x1aeffd4*/ RuntimeTypeHandle(System.RuntimeType type);
        /*0x1aefff0*/ RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1af01a4*/ nint get_Value();
        /*0x1af01ac*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1af0364*/ bool Equals(object obj);
        /*0x1af0460*/ int GetHashCode();
    }

    class TermInfoDriver : System.IConsoleDriver
    {
        static /*0x0*/ int* native_terminal_size;
        static /*0x8*/ int terminal_size;
        static /*0x10*/ string[] locations;
        static /*0x18*/ int[] _consoleColorToAnsiCode;
        /*0x10*/ System.TermInfoReader reader;
        /*0x18*/ int cursorLeft;
        /*0x1c*/ int cursorTop;
        /*0x20*/ string title;
        /*0x28*/ string titleFormat;
        /*0x30*/ bool cursorVisible;
        /*0x38*/ string csrVisible;
        /*0x40*/ string csrInvisible;
        /*0x48*/ string clear;
        /*0x50*/ string bell;
        /*0x58*/ string term;
        /*0x60*/ System.IO.StreamReader stdin;
        /*0x68*/ System.IO.CStreamWriter stdout;
        /*0x70*/ int windowWidth;
        /*0x74*/ int windowHeight;
        /*0x78*/ int bufferHeight;
        /*0x7c*/ int bufferWidth;
        /*0x80*/ char[] buffer;
        /*0x88*/ int readpos;
        /*0x8c*/ int writepos;
        /*0x90*/ string keypadXmit;
        /*0x98*/ string keypadLocal;
        /*0xa0*/ bool inited;
        /*0xa8*/ object initLock;
        /*0xb0*/ bool initKeys;
        /*0xb8*/ string origPair;
        /*0xc0*/ string origColors;
        /*0xc8*/ string cursorAddress;
        /*0xd0*/ System.ConsoleColor fgcolor;
        /*0xd8*/ string setfgcolor;
        /*0xe0*/ string setbgcolor;
        /*0xe8*/ int maxColors;
        /*0xec*/ bool noGetPosition;
        /*0xf0*/ System.Collections.Hashtable keymap;
        /*0xf8*/ System.ByteMatcher rootmap;
        /*0x100*/ int rl_startx;
        /*0x104*/ int rl_starty;
        /*0x108*/ byte[] control_characters;
        /*0x110*/ char[] echobuf;
        /*0x118*/ int echon;

        static /*0x1af5884*/ TermInfoDriver();
        static /*0x1af0a20*/ string TryTermInfoDir(string dir, string term);
        static /*0x1af0b4c*/ string SearchTerminfo(string term);
        /*0x1ae8420*/ TermInfoDriver(string term);
        /*0x1af0cb8*/ void WriteConsole(string str);
        /*0x1af1044*/ bool get_Initialized();
        /*0x1af104c*/ void Init();
        /*0x1af1c30*/ void IncrementX();
        /*0x1af1cf4*/ void WriteSpecialKey(System.ConsoleKeyInfo key);
        /*0x1af1fb8*/ void WriteSpecialKey(char c);
        /*0x1af2164*/ bool IsSpecialKey(System.ConsoleKeyInfo key);
        /*0x1af21e8*/ bool IsSpecialKey(char c);
        /*0x1af19a0*/ void GetCursorPosition();
        /*0x1af22f4*/ void CheckWindowDimensions();
        /*0x1af1cc8*/ int get_WindowHeight();
        /*0x1af1c9c*/ int get_WindowWidth();
        /*0x1af2210*/ void AddToBuffer(int b);
        /*0x1af2414*/ void AdjustBuffer();
        /*0x1af1fe0*/ System.ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
        /*0x1af2428*/ object GetKeyFromBuffer(bool cooked);
        /*0x1af2c08*/ System.ConsoleKeyInfo ReadKeyInternal(ref bool fresh);
        /*0x1af2f34*/ bool InputPending();
        /*0x1af2f68*/ void QueueEcho(char c);
        /*0x1af3030*/ void Echo(System.ConsoleKeyInfo key);
        /*0x1af3084*/ void EchoFlush();
        /*0x1af30b8*/ int Read(char[] dest, int index, int count);
        /*0x1af33bc*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        /*0x1af3420*/ string ReadLine();
        /*0x1af35f0*/ string ReadToEnd();
        /*0x1af3428*/ string ReadUntilConditionInternal(bool haltOnNewLine);
        /*0x1af1e08*/ void SetCursorPosition(int left, int top);
        /*0x1af3770*/ void CreateKeyMap();
        /*0x1af2dc8*/ void InitKeys();
        /*0x1af5684*/ void AddStringMapping(System.TermInfoStrings s);
    }

    class ParameterizedStrings
    {
        [ThreadStatic] static System.ParameterizedStrings.LowLevelStack _cachedStack;

        static /*0x1af3604*/ string Evaluate(string format, System.ParameterizedStrings.FormatParam[] args);
        static /*0x1af5acc*/ string EvaluateInternal(string format, ref int pos, System.ParameterizedStrings.FormatParam[] args, System.ParameterizedStrings.LowLevelStack stack, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars);
        static /*0x1af68a8*/ bool AsBool(int i);
        static /*0x1af68a0*/ int AsInt(bool b);
        static /*0x1af68b4*/ string StringFromAsciiBytes(byte[] buffer, int offset, int length);
        static /*0x1af69ac*/ int snprintf(byte* str, nint size, string format, string arg1);
        static /*0x1af6a78*/ int snprintf(byte* str, nint size, string format, int arg1);
        static /*0x1af646c*/ string FormatPrintF(string format, object arg);
        static /*0x1af6798*/ System.ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars, ref int index);

        struct FormatParam
        {
            /*0x10*/ int _int32;
            /*0x18*/ string _string;

            static /*0x1af35f8*/ System.ParameterizedStrings.FormatParam op_Implicit(int value);
            /*0x1af6b30*/ FormatParam(int value);
            /*0x1af6b3c*/ FormatParam(int intValue, string stringValue);
            /*0x1af6b48*/ int get_Int32();
            /*0x1af63bc*/ string get_String();
            /*0x1af6410*/ object get_Object();
        }

        class LowLevelStack
        {
            /*0x10*/ System.ParameterizedStrings.FormatParam[] _arr;
            /*0x18*/ int _count;

            /*0x1af5a54*/ LowLevelStack();
            /*0x1af6328*/ System.ParameterizedStrings.FormatParam Pop();
            /*0x1af66c0*/ void Push(System.ParameterizedStrings.FormatParam item);
            /*0x1af5aa4*/ void Clear();
        }
    }

    class ByteMatcher
    {
        /*0x10*/ System.Collections.Hashtable map;
        /*0x18*/ System.Collections.Hashtable starts;

        /*0x1af5608*/ ByteMatcher();
        /*0x1af56d0*/ void AddMapping(System.TermInfoStrings key, byte[] val);
        /*0x1af57f0*/ void Sort();
        /*0x1af26f4*/ bool StartsWith(int c);
        /*0x1af277c*/ System.TermInfoStrings Match(char[] buffer, int offset, int length, ref int used);
    }

    enum TermInfoNumbers
    {
        Columns = 0,
        InitTabs = 1,
        Lines = 2,
        LinesOfMemory = 3,
        MagicCookieGlitch = 4,
        PaddingBaudRate = 5,
        VirtualTerminal = 6,
        WidthStatusLine = 7,
        NumLabels = 8,
        LabelHeight = 9,
        LabelWidth = 10,
        MaxAttributes = 11,
        MaximumWindows = 12,
        MaxColors = 13,
        MaxPairs = 14,
        NoColorVideo = 15,
        BufferCapacity = 16,
        DotVertSpacing = 17,
        DotHorzSpacing = 18,
        MaxMicroAddress = 19,
        MaxMicroJump = 20,
        MicroColSize = 21,
        MicroLineSize = 22,
        NumberOfPins = 23,
        OutputResChar = 24,
        OutputResLine = 25,
        OutputResHorzInch = 26,
        OutputResVertInch = 27,
        PrintRate = 28,
        WideCharSize = 29,
        Buttons = 30,
        BitImageEntwining = 31,
        BitImageType = 32,
        Last = 33,
    }

    class TermInfoReader
    {
        /*0x10*/ int boolSize;
        /*0x14*/ int numSize;
        /*0x18*/ int strOffsets;
        /*0x20*/ byte[] buffer;
        /*0x28*/ int booleansOffset;
        /*0x2c*/ int intOffset;

        /*0x1af0ce0*/ TermInfoReader(string term, string filename);
        /*0x1af0fb8*/ TermInfoReader(string term, byte[] buffer);
        /*0x1af6c44*/ void DetermineVersion(short magic);
        /*0x1af6b50*/ void ReadHeader(byte[] buffer, ref int position);
        /*0x1af6c10*/ void ReadNames(byte[] buffer, ref int position);
        /*0x1af1940*/ int Get(System.TermInfoNumbers number);
        /*0x1af18b0*/ string Get(System.TermInfoStrings tstr);
        /*0x1af57f4*/ byte[] GetStringBytes(System.TermInfoStrings tstr);
        /*0x1af6cf4*/ short GetInt16(byte[] buffer, int offset);
        /*0x1af6d44*/ string GetString(byte[] buffer, int offset);
        /*0x1af6dc0*/ byte[] GetStringBytes(byte[] buffer, int offset);
    }

    enum TermInfoStrings
    {
        BackTab = 0,
        Bell = 1,
        CarriageReturn = 2,
        ChangeScrollRegion = 3,
        ClearAllTabs = 4,
        ClearScreen = 5,
        ClrEol = 6,
        ClrEos = 7,
        ColumnAddress = 8,
        CommandCharacter = 9,
        CursorAddress = 10,
        CursorDown = 11,
        CursorHome = 12,
        CursorInvisible = 13,
        CursorLeft = 14,
        CursorMemAddress = 15,
        CursorNormal = 16,
        CursorRight = 17,
        CursorToLl = 18,
        CursorUp = 19,
        CursorVisible = 20,
        DeleteCharacter = 21,
        DeleteLine = 22,
        DisStatusLine = 23,
        DownHalfLine = 24,
        EnterAltCharsetMode = 25,
        EnterBlinkMode = 26,
        EnterBoldMode = 27,
        EnterCaMode = 28,
        EnterDeleteMode = 29,
        EnterDimMode = 30,
        EnterInsertMode = 31,
        EnterSecureMode = 32,
        EnterProtectedMode = 33,
        EnterReverseMode = 34,
        EnterStandoutMode = 35,
        EnterUnderlineMode = 36,
        EraseChars = 37,
        ExitAltCharsetMode = 38,
        ExitAttributeMode = 39,
        ExitCaMode = 40,
        ExitDeleteMode = 41,
        ExitInsertMode = 42,
        ExitStandoutMode = 43,
        ExitUnderlineMode = 44,
        FlashScreen = 45,
        FormFeed = 46,
        FromStatusLine = 47,
        Init1string = 48,
        Init2string = 49,
        Init3string = 50,
        InitFile = 51,
        InsertCharacter = 52,
        InsertLine = 53,
        InsertPadding = 54,
        KeyBackspace = 55,
        KeyCatab = 56,
        KeyClear = 57,
        KeyCtab = 58,
        KeyDc = 59,
        KeyDl = 60,
        KeyDown = 61,
        KeyEic = 62,
        KeyEol = 63,
        KeyEos = 64,
        KeyF0 = 65,
        KeyF1 = 66,
        KeyF10 = 67,
        KeyF2 = 68,
        KeyF3 = 69,
        KeyF4 = 70,
        KeyF5 = 71,
        KeyF6 = 72,
        KeyF7 = 73,
        KeyF8 = 74,
        KeyF9 = 75,
        KeyHome = 76,
        KeyIc = 77,
        KeyIl = 78,
        KeyLeft = 79,
        KeyLl = 80,
        KeyNpage = 81,
        KeyPpage = 82,
        KeyRight = 83,
        KeySf = 84,
        KeySr = 85,
        KeyStab = 86,
        KeyUp = 87,
        KeypadLocal = 88,
        KeypadXmit = 89,
        LabF0 = 90,
        LabF1 = 91,
        LabF10 = 92,
        LabF2 = 93,
        LabF3 = 94,
        LabF4 = 95,
        LabF5 = 96,
        LabF6 = 97,
        LabF7 = 98,
        LabF8 = 99,
        LabF9 = 100,
        MetaOff = 101,
        MetaOn = 102,
        Newline = 103,
        PadChar = 104,
        ParmDch = 105,
        ParmDeleteLine = 106,
        ParmDownCursor = 107,
        ParmIch = 108,
        ParmIndex = 109,
        ParmInsertLine = 110,
        ParmLeftCursor = 111,
        ParmRightCursor = 112,
        ParmRindex = 113,
        ParmUpCursor = 114,
        PkeyKey = 115,
        PkeyLocal = 116,
        PkeyXmit = 117,
        PrintScreen = 118,
        PrtrOff = 119,
        PrtrOn = 120,
        RepeatChar = 121,
        Reset1string = 122,
        Reset2string = 123,
        Reset3string = 124,
        ResetFile = 125,
        RestoreCursor = 126,
        RowAddress = 127,
        SaveCursor = 128,
        ScrollForward = 129,
        ScrollReverse = 130,
        SetAttributes = 131,
        SetTab = 132,
        SetWindow = 133,
        Tab = 134,
        ToStatusLine = 135,
        UnderlineChar = 136,
        UpHalfLine = 137,
        InitProg = 138,
        KeyA1 = 139,
        KeyA3 = 140,
        KeyB2 = 141,
        KeyC1 = 142,
        KeyC3 = 143,
        PrtrNon = 144,
        CharPadding = 145,
        AcsChars = 146,
        PlabNorm = 147,
        KeyBtab = 148,
        EnterXonMode = 149,
        ExitXonMode = 150,
        EnterAmMode = 151,
        ExitAmMode = 152,
        XonCharacter = 153,
        XoffCharacter = 154,
        EnaAcs = 155,
        LabelOn = 156,
        LabelOff = 157,
        KeyBeg = 158,
        KeyCancel = 159,
        KeyClose = 160,
        KeyCommand = 161,
        KeyCopy = 162,
        KeyCreate = 163,
        KeyEnd = 164,
        KeyEnter = 165,
        KeyExit = 166,
        KeyFind = 167,
        KeyHelp = 168,
        KeyMark = 169,
        KeyMessage = 170,
        KeyMove = 171,
        KeyNext = 172,
        KeyOpen = 173,
        KeyOptions = 174,
        KeyPrevious = 175,
        KeyPrint = 176,
        KeyRedo = 177,
        KeyReference = 178,
        KeyRefresh = 179,
        KeyReplace = 180,
        KeyRestart = 181,
        KeyResume = 182,
        KeySave = 183,
        KeySuspend = 184,
        KeyUndo = 185,
        KeySbeg = 186,
        KeyScancel = 187,
        KeyScommand = 188,
        KeyScopy = 189,
        KeyScreate = 190,
        KeySdc = 191,
        KeySdl = 192,
        KeySelect = 193,
        KeySend = 194,
        KeySeol = 195,
        KeySexit = 196,
        KeySfind = 197,
        KeyShelp = 198,
        KeyShome = 199,
        KeySic = 200,
        KeySleft = 201,
        KeySmessage = 202,
        KeySmove = 203,
        KeySnext = 204,
        KeySoptions = 205,
        KeySprevious = 206,
        KeySprint = 207,
        KeySredo = 208,
        KeySreplace = 209,
        KeySright = 210,
        KeySrsume = 211,
        KeySsave = 212,
        KeySsuspend = 213,
        KeySundo = 214,
        ReqForInput = 215,
        KeyF11 = 216,
        KeyF12 = 217,
        KeyF13 = 218,
        KeyF14 = 219,
        KeyF15 = 220,
        KeyF16 = 221,
        KeyF17 = 222,
        KeyF18 = 223,
        KeyF19 = 224,
        KeyF20 = 225,
        KeyF21 = 226,
        KeyF22 = 227,
        KeyF23 = 228,
        KeyF24 = 229,
        KeyF25 = 230,
        KeyF26 = 231,
        KeyF27 = 232,
        KeyF28 = 233,
        KeyF29 = 234,
        KeyF30 = 235,
        KeyF31 = 236,
        KeyF32 = 237,
        KeyF33 = 238,
        KeyF34 = 239,
        KeyF35 = 240,
        KeyF36 = 241,
        KeyF37 = 242,
        KeyF38 = 243,
        KeyF39 = 244,
        KeyF40 = 245,
        KeyF41 = 246,
        KeyF42 = 247,
        KeyF43 = 248,
        KeyF44 = 249,
        KeyF45 = 250,
        KeyF46 = 251,
        KeyF47 = 252,
        KeyF48 = 253,
        KeyF49 = 254,
        KeyF50 = 255,
        KeyF51 = 256,
        KeyF52 = 257,
        KeyF53 = 258,
        KeyF54 = 259,
        KeyF55 = 260,
        KeyF56 = 261,
        KeyF57 = 262,
        KeyF58 = 263,
        KeyF59 = 264,
        KeyF60 = 265,
        KeyF61 = 266,
        KeyF62 = 267,
        KeyF63 = 268,
        ClrBol = 269,
        ClearMargins = 270,
        SetLeftMargin = 271,
        SetRightMargin = 272,
        LabelFormat = 273,
        SetClock = 274,
        DisplayClock = 275,
        RemoveClock = 276,
        CreateWindow = 277,
        GotoWindow = 278,
        Hangup = 279,
        DialPhone = 280,
        QuickDial = 281,
        Tone = 282,
        Pulse = 283,
        FlashHook = 284,
        FixedPause = 285,
        WaitTone = 286,
        User0 = 287,
        User1 = 288,
        User2 = 289,
        User3 = 290,
        User4 = 291,
        User5 = 292,
        User6 = 293,
        User7 = 294,
        User8 = 295,
        User9 = 296,
        OrigPair = 297,
        OrigColors = 298,
        InitializeColor = 299,
        InitializePair = 300,
        SetColorPair = 301,
        SetForeground = 302,
        SetBackground = 303,
        ChangeCharPitch = 304,
        ChangeLinePitch = 305,
        ChangeResHorz = 306,
        ChangeResVert = 307,
        DefineChar = 308,
        EnterDoublewideMode = 309,
        EnterDraftQuality = 310,
        EnterItalicsMode = 311,
        EnterLeftwardMode = 312,
        EnterMicroMode = 313,
        EnterNearLetterQuality = 314,
        EnterNormalQuality = 315,
        EnterShadowMode = 316,
        EnterSubscriptMode = 317,
        EnterSuperscriptMode = 318,
        EnterUpwardMode = 319,
        ExitDoublewideMode = 320,
        ExitItalicsMode = 321,
        ExitLeftwardMode = 322,
        ExitMicroMode = 323,
        ExitShadowMode = 324,
        ExitSubscriptMode = 325,
        ExitSuperscriptMode = 326,
        ExitUpwardMode = 327,
        MicroColumnAddress = 328,
        MicroDown = 329,
        MicroLeft = 330,
        MicroRight = 331,
        MicroRowAddress = 332,
        MicroUp = 333,
        OrderOfPins = 334,
        ParmDownMicro = 335,
        ParmLeftMicro = 336,
        ParmRightMicro = 337,
        ParmUpMicro = 338,
        SelectCharSet = 339,
        SetBottomMargin = 340,
        SetBottomMarginParm = 341,
        SetLeftMarginParm = 342,
        SetRightMarginParm = 343,
        SetTopMargin = 344,
        SetTopMarginParm = 345,
        StartBitImage = 346,
        StartCharSetDef = 347,
        StopBitImage = 348,
        StopCharSetDef = 349,
        SubscriptCharacters = 350,
        SuperscriptCharacters = 351,
        TheseCauseCr = 352,
        ZeroMotion = 353,
        CharSetNames = 354,
        KeyMouse = 355,
        MouseInfo = 356,
        ReqMousePos = 357,
        GetMouse = 358,
        SetAForeground = 359,
        SetABackground = 360,
        PkeyPlab = 361,
        DeviceType = 362,
        CodeSetInit = 363,
        Set0DesSeq = 364,
        Set1DesSeq = 365,
        Set2DesSeq = 366,
        Set3DesSeq = 367,
        SetLrMargin = 368,
        SetTbMargin = 369,
        BitImageRepeat = 370,
        BitImageNewline = 371,
        BitImageCarriageReturn = 372,
        ColorNames = 373,
        DefineBitImageRegion = 374,
        EndBitImageRegion = 375,
        SetColorBand = 376,
        SetPageLength = 377,
        DisplayPcChar = 378,
        EnterPcCharsetMode = 379,
        ExitPcCharsetMode = 380,
        EnterScancodeMode = 381,
        ExitScancodeMode = 382,
        PcTermOptions = 383,
        ScancodeEscape = 384,
        AltScancodeEsc = 385,
        EnterHorizontalHlMode = 386,
        EnterLeftHlMode = 387,
        EnterLowHlMode = 388,
        EnterRightHlMode = 389,
        EnterTopHlMode = 390,
        EnterVerticalHlMode = 391,
        SetAAttributes = 392,
        SetPglenInch = 393,
        Last = 394,
    }

    interface TypeName : System.IEquatable<System.TypeName>
    {
        string get_DisplayName();
    }

    interface TypeIdentifier : System.TypeName, System.IEquatable<System.TypeName>
    {
        string get_InternalName();
    }

    class TypeNames
    {
        class ATypeName : System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x1af6fd0*/ ATypeName();
            string get_DisplayName();
            /*0x1af6e78*/ bool Equals(System.TypeName other);
            /*0x1af6f48*/ int GetHashCode();
            /*0x1af6f70*/ bool Equals(object other);
        }
    }

    class TypeIdentifiers
    {
        static /*0x1af6fd4*/ System.TypeIdentifier FromDisplay(string displayName);

        class Display : System.TypeNames.ATypeName, System.TypeIdentifier, System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x10*/ string displayName;
            /*0x18*/ string internal_name;

            /*0x1af7028*/ Display(string displayName);
            /*0x1af7030*/ string get_DisplayName();
            /*0x1af7038*/ string get_InternalName();
            /*0x1af705c*/ string GetInternalName();
        }
    }

    interface ModifierSpec
    {
        System.Type Resolve(System.Type type);
        System.Text.StringBuilder Append(System.Text.StringBuilder sb);
    }

    class ArraySpec : System.ModifierSpec
    {
        /*0x10*/ int dimensions;
        /*0x14*/ bool bound;

        /*0x1af714c*/ ArraySpec(int dimensions, bool bound);
        /*0x1af715c*/ System.Type Resolve(System.Type type);
        /*0x1af71c0*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x1af7260*/ string ToString();
    }

    class PointerSpec : System.ModifierSpec
    {
        /*0x10*/ int pointer_level;

        /*0x1af72d4*/ PointerSpec(int pointer_level);
        /*0x1af72dc*/ System.Type Resolve(System.Type type);
        /*0x1af7330*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x1af7358*/ string ToString();
    }

    class TypeSpec
    {
        /*0x10*/ System.TypeIdentifier name;
        /*0x18*/ string assembly_name;
        /*0x20*/ System.Collections.Generic.List<System.TypeIdentifier> nested;
        /*0x28*/ System.Collections.Generic.List<System.TypeSpec> generic_params;
        /*0x30*/ System.Collections.Generic.List<System.ModifierSpec> modifier_spec;
        /*0x38*/ bool is_byref;
        /*0x40*/ string display_fullname;

        static /*0x1ae648c*/ System.TypeSpec Parse(string typeName);
        static /*0x1af7064*/ string UnescapeInternalName(string displayName);
        static /*0x1af87bc*/ void SkipSpace(string name, ref int pos);
        static /*0x1af886c*/ void BoundCheck(int idx, string s);
        static /*0x1af86c8*/ System.TypeIdentifier ParsedTypeIdentifier(string displayName);
        static /*0x1af7a4c*/ System.TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn);
        /*0x1af88f4*/ TypeSpec();
        /*0x1af73cc*/ bool get_HasModifiers();
        /*0x1af73dc*/ string GetDisplayFullName(System.TypeSpec.DisplayNameFormat flags);
        /*0x1af7858*/ System.Text.StringBuilder GetModifierString(System.Text.StringBuilder sb);
        /*0x1af7830*/ string get_DisplayFullName();
        /*0x1ae6564*/ System.Type Resolve(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
        /*0x1af85b8*/ void AddName(string type_name);
        /*0x1af86cc*/ void AddModifier(System.ModifierSpec md);

        enum DisplayNameFormat
        {
            Default = 0,
            WANT_ASSEMBLY = 1,
            NO_MODIFIERS = 2,
        }
    }

    struct UIntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nuint>
    {
        static /*0x0*/ nuint Zero;
        /*0x10*/ void* _pointer;

        static /*0xa46f00*/ UIntPtr();
        static /*0xa46eb0*/ bool op_Equality(nuint value1, nuint value2);
        static /*0xa46ebc*/ bool op_Inequality(nuint value1, nuint value2);
        static /*0xa46ec8*/ nuint op_Explicit(ulong value);
        static /*0xa46ee8*/ nuint op_Explicit(uint value);
        static /*0xa46d00*/ int get_Size();
        /*0xa46ca0*/ UIntPtr(ulong value);
        /*0xa46d08*/ UIntPtr(uint value);
        /*0xa46d14*/ UIntPtr(void* value);
        /*0xa46d1c*/ bool Equals(object obj);
        /*0xa46d94*/ int GetHashCode();
        /*0xa46d9c*/ string ToString();
        /*0xa46e0c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xa46ef0*/ bool System.IEquatable<System.UIntPtr>.Equals(nuint other);
    }

    class ValueType
    {
        static /*0xa46f0c*/ bool InternalEquals(object o1, object o2, ref object[] fields);
        static /*0xa46f10*/ bool DefaultEquals(object o1, object o2);
        static /*0xa470c4*/ int InternalGetHashCode(object o, ref object[] fields);
        /*0xa46f04*/ ValueType();
        /*0xa470c0*/ bool Equals(object obj);
        /*0xa470c8*/ int GetHashCode();
        /*0xa47140*/ string ToString();
    }

    struct Variant
    {
        /*0x10*/ short vt;
        /*0x12*/ ushort wReserved1;
        /*0x14*/ ushort wReserved2;
        /*0x16*/ ushort wReserved3;
        /*0x18*/ long llVal;
        /*0x18*/ int lVal;
        /*0x18*/ byte bVal;
        /*0x18*/ short iVal;
        /*0x18*/ float fltVal;
        /*0x18*/ double dblVal;
        /*0x18*/ short boolVal;
        /*0x18*/ nint bstrVal;
        /*0x18*/ sbyte cVal;
        /*0x18*/ ushort uiVal;
        /*0x18*/ uint ulVal;
        /*0x18*/ ulong ullVal;
        /*0x18*/ int intVal;
        /*0x18*/ uint uintVal;
        /*0x18*/ nint pdispVal;
        /*0x18*/ System.BRECORD bRecord;

        /*0xa47168*/ void Clear();
    }

    struct BRECORD
    {
        /*0x10*/ nint pvRecord;
        /*0x18*/ nint pRecInfo;
    }

    class WeakReference : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ bool isLongReference;
        /*0x18*/ System.Runtime.InteropServices.GCHandle gcHandle;

        /*0xa47204*/ WeakReference();
        /*0xa4720c*/ WeakReference(object target);
        /*0xa4723c*/ WeakReference(object target, bool trackResurrection);
        /*0xa47270*/ WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xa471dc*/ void AllocateHandle(object target);
        /*0xa473a8*/ bool get_IsAlive();
        /*0xa473c8*/ object get_Target();
        /*0xa473fc*/ void set_Target(object value);
        /*0xa47408*/ bool get_TrackResurrection();
        /*0xa47410*/ void Finalize();
        /*0xa474ac*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class WeakReference<T> : System.Runtime.Serialization.ISerializable
    {
        /*0x0*/ System.Runtime.InteropServices.GCHandle handle;
        /*0x0*/ bool trackResurrection;

        WeakReference(T target);
        WeakReference(T target, bool trackResurrection);
        WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        bool TryGetTarget(ref T target);
        void Finalize();
    }

    struct InputRecord
    {
        /*0x10*/ short EventType;
        /*0x12*/ bool KeyDown;
        /*0x14*/ short RepeatCount;
        /*0x16*/ short VirtualKeyCode;
        /*0x18*/ short VirtualScanCode;
        /*0x1a*/ char Character;
        /*0x1c*/ int ControlKeyState;
        /*0x20*/ int pad1;
        /*0x24*/ bool pad2;
    }

    struct Coord
    {
        /*0x10*/ short X;
        /*0x12*/ short Y;
    }

    struct SmallRect
    {
        /*0x10*/ short Left;
        /*0x12*/ short Top;
        /*0x14*/ short Right;
        /*0x16*/ short Bottom;
    }

    struct ConsoleScreenBufferInfo
    {
        /*0x10*/ System.Coord Size;
        /*0x14*/ System.Coord CursorPosition;
        /*0x18*/ short Attribute;
        /*0x1a*/ System.SmallRect Window;
        /*0x22*/ System.Coord MaxWindowSize;
    }

    enum Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12,
    }

    class WindowsConsoleDriver : System.IConsoleDriver
    {
        /*0x10*/ nint inputHandle;
        /*0x18*/ nint outputHandle;
        /*0x20*/ short defaultAttribute;

        static /*0xa479e4*/ bool IsModifierKey(short virtualKeyCode);
        static /*0xa47684*/ nint GetStdHandle(System.Handles handle);
        static /*0xa47708*/ bool GetConsoleScreenBufferInfo(nint handle, ref System.ConsoleScreenBufferInfo info);
        static /*0xa478dc*/ bool ReadConsoleInput(nint handle, ref System.InputRecord record, int length, ref int nread);
        /*0xa47630*/ WindowsConsoleDriver();
        /*0xa4779c*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class __ComObject
    {
        /*0xa47a18*/ __ComObject();
    }

    struct Decimal : System.IFormattable, System.IComparable, System.IConvertible, System.IComparable<decimal>, System.IEquatable<decimal>, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static int SignMask = -2147483648;
        static int ScaleMask = 16711680;
        static int ScaleShift = 16;
        static /*0x0*/ decimal Zero;
        static /*0x10*/ decimal One;
        static /*0x20*/ decimal MinusOne;
        static /*0x30*/ decimal MaxValue;
        static /*0x40*/ decimal MinValue;
        /*0x10*/ int flags;
        /*0x14*/ int hi;
        /*0x18*/ int lo;
        /*0x1c*/ int mid;
        /*0x18*/ ulong ulomidLE;

        static /*0xa4d358*/ Decimal();
        static /*0xa47aec*/ ref System.Decimal.DecCalc AsMutable(ref decimal d);
        static /*0xa47af0*/ uint DecDivMod1E9(ref decimal value);
        static /*0xa485b4*/ bool IsValid(int flags);
        static /*0xa48878*/ decimal Abs(ref decimal d);
        static /*0xa4888c*/ decimal Add(decimal d1, decimal d2);
        static /*0xa48fd4*/ int Compare(decimal d1, decimal d2);
        static /*0xa492dc*/ decimal Divide(decimal d1, decimal d2);
        static /*0xa4a524*/ decimal Parse(string s, System.IFormatProvider provider);
        static /*0xa4a5f8*/ decimal Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xa4a6dc*/ bool TryParse(string s, ref decimal result);
        static /*0xa4a7b0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref decimal result);
        static /*0xa4a8a8*/ int[] GetBits(decimal d);
        static /*0xa4a944*/ ref decimal Max(ref decimal d1, ref decimal d2);
        static /*0xa4a9b4*/ ref decimal Min(ref decimal d1, ref decimal d2);
        static /*0xa4aa24*/ decimal Multiply(decimal d1, decimal d2);
        static /*0xa4af3c*/ decimal Negate(decimal d);
        static /*0xa4af44*/ decimal Round(decimal d, int decimals);
        static /*0xa4afd8*/ decimal Round(ref decimal d, int decimals, System.MidpointRounding mode);
        static /*0xa4b414*/ byte ToByte(decimal value);
        static /*0xa4b700*/ sbyte ToSByte(decimal value);
        static /*0xa4b9f8*/ short ToInt16(decimal value);
        static /*0xa4bb78*/ double ToDouble(decimal d);
        static /*0xa4b880*/ int ToInt32(decimal d);
        static /*0xa4bcc0*/ long ToInt64(decimal d);
        static /*0xa4be30*/ ushort ToUInt16(decimal value);
        static /*0xa4b594*/ uint ToUInt32(decimal d);
        static /*0xa4bfb0*/ ulong ToUInt64(decimal d);
        static /*0xa4c114*/ float ToSingle(decimal d);
        static /*0xa4c1f0*/ decimal Truncate(decimal d);
        static /*0xa4c2f0*/ void Truncate(ref decimal d);
        static /*0xa4c388*/ decimal op_Implicit(byte value);
        static /*0xa4c394*/ decimal op_Implicit(sbyte value);
        static /*0xa4c3ac*/ decimal op_Implicit(short value);
        static /*0xa4c3c4*/ decimal op_Implicit(ushort value);
        static /*0xa4c3d0*/ decimal op_Implicit(char value);
        static /*0xa4c3dc*/ decimal op_Implicit(int value);
        static /*0xa4c3f0*/ decimal op_Implicit(uint value);
        static /*0xa4c3fc*/ decimal op_Implicit(long value);
        static /*0xa4c414*/ decimal op_Implicit(ulong value);
        static /*0xa4c420*/ decimal op_Explicit(float value);
        static /*0xa4c464*/ decimal op_Explicit(double value);
        static /*0xa4c4a8*/ int op_Explicit(decimal value);
        static /*0xa4c50c*/ long op_Explicit(decimal value);
        static /*0xa4c570*/ ulong op_Explicit(decimal value);
        static /*0xa4c5d4*/ float op_Explicit(decimal value);
        static /*0xa4c638*/ double op_Explicit(decimal value);
        static /*0xa4c69c*/ decimal op_UnaryNegation(decimal d);
        static /*0xa4c6a4*/ decimal op_Increment(decimal d);
        static /*0xa4c714*/ decimal op_Addition(decimal d1, decimal d2);
        static /*0xa4c7c8*/ decimal op_Subtraction(decimal d1, decimal d2);
        static /*0xa4c87c*/ decimal op_Multiply(decimal d1, decimal d2);
        static /*0xa4c92c*/ decimal op_Division(decimal d1, decimal d2);
        static /*0xa4c9dc*/ bool op_Equality(decimal d1, decimal d2);
        static /*0xa4ca6c*/ bool op_Inequality(decimal d1, decimal d2);
        static /*0xa4cafc*/ bool op_LessThan(decimal d1, decimal d2);
        static /*0xa4cb88*/ bool op_LessThanOrEqual(decimal d1, decimal d2);
        static /*0xa4cc18*/ bool op_GreaterThan(decimal d1, decimal d2);
        static /*0xa4cca8*/ bool op_GreaterThanOrEqual(decimal d1, decimal d2);
        /*0xa47c2c*/ Decimal(int value);
        /*0xa47c50*/ Decimal(uint value);
        /*0xa47c5c*/ Decimal(long value);
        /*0xa47c84*/ Decimal(ulong value);
        /*0xa47c94*/ Decimal(float value);
        /*0xa48120*/ Decimal(double value);
        /*0xa485d4*/ Decimal(int[] bits);
        /*0xa48714*/ Decimal(int lo, int mid, int hi, bool isNegative, byte scale);
        /*0xa48868*/ Decimal(ref decimal d, int flags);
        /*0xa47a60*/ uint get_High();
        /*0xa47a68*/ uint get_Low();
        /*0xa47a70*/ uint get_Mid();
        /*0xa47a78*/ bool get_IsNegative();
        /*0xa47a84*/ int get_Scale();
        /*0xa47a8c*/ ulong get_Low64();
        /*0xa487b0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0xa4912c*/ int CompareTo(object value);
        /*0xa4924c*/ int CompareTo(decimal value);
        /*0xa49cf8*/ bool Equals(object value);
        /*0xa49dd4*/ bool Equals(decimal value);
        /*0xa49e6c*/ int GetHashCode();
        /*0xa4a150*/ string ToString();
        /*0xa4a1fc*/ string ToString(string format);
        /*0xa4a2c4*/ string ToString(System.IFormatProvider provider);
        /*0xa4a380*/ string ToString(string format, System.IFormatProvider provider);
        /*0xa4a458*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xa4cd38*/ System.TypeCode GetTypeCode();
        /*0xa4cd40*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xa4cda0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xa4ce2c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xa4ce8c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xa4ceec*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xa4cf4c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xa4cfac*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xa4d00c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xa4d06c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xa4d0cc*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xa4d12c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xa4d18c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xa4d1ec*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xa4d1f8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xa4d284*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        struct DecCalc
        {
            static /*0x0*/ uint[] s_powers10;
            static /*0x8*/ ulong[] s_ulongPowers10;
            static /*0x10*/ double[] s_doublePowers10;
            static /*0x18*/ System.Decimal.DecCalc.PowerOvfl[] PowerOvflValues;
            /*0x10*/ uint uflags;
            /*0x14*/ uint uhi;
            /*0x18*/ uint ulo;
            /*0x1c*/ uint umid;
            /*0x18*/ ulong ulomidLE;

            static /*0xa4f394*/ DecCalc();
            static /*0xa4d4fc*/ uint GetExponent(float f);
            static /*0xa4d508*/ uint GetExponent(double d);
            static /*0xa4d514*/ ulong UInt32x32To64(uint a, uint b);
            static /*0xa4d51c*/ void UInt64x64To128(ulong a, ulong b, ref System.Decimal.DecCalc result);
            static /*0xa4d630*/ uint Div96By32(ref System.Decimal.DecCalc.Buf12 bufNum, uint den);
            static /*0xa4d880*/ bool Div96ByConst(ref ulong high64, ref uint low, uint pow);
            static /*0xa4d8c4*/ void Unscale(ref uint low, ref ulong high64, ref int scale);
            static /*0xa4db20*/ uint Div96By64(ref System.Decimal.DecCalc.Buf12 bufNum, ulong den);
            static /*0xa4dc2c*/ uint Div128By96(ref System.Decimal.DecCalc.Buf16 bufNum, ref System.Decimal.DecCalc.Buf12 bufDen);
            static /*0xa4deac*/ uint IncreaseScale(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0xa4df34*/ void IncreaseScale64(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0xa4dfb0*/ int ScaleResult(System.Decimal.DecCalc.Buf24* bufRes, uint hiRes, int scale);
            static /*0xa4eb8c*/ uint DivByConst(uint* result, uint hiRes, ref uint quotient, ref uint remainder, uint power);
            static /*0xa4ebe0*/ int LeadingZeroCount(uint value);
            static /*0xa4ec48*/ int OverflowUnscale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale, bool sticky);
            static /*0xa4edbc*/ int SearchScale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale);
            static /*0xa4ed68*/ bool Add32To96(ref System.Decimal.DecCalc.Buf12 bufNum, uint value);
            static /*0xa48940*/ void DecAddSub(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2, bool sign);
            static /*0xa4905c*/ int VarDecCmp(ref decimal d1, ref decimal d2);
            static /*0xa4f110*/ int VarDecCmpSub(ref decimal d1, ref decimal d2);
            static /*0xa4aad4*/ void VarDecMul(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0xa47d1c*/ void VarDecFromR4(float input, ref System.Decimal.DecCalc result);
            static /*0xa481a8*/ void VarDecFromR8(double input, ref System.Decimal.DecCalc result);
            static /*0xa4c194*/ float VarR4FromDec(ref decimal value);
            static /*0xa4bbf8*/ double VarR8FromDec(ref decimal value);
            static /*0xa49ec0*/ int GetHashCode(ref decimal d);
            static /*0xa4938c*/ void VarDecDiv(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0xa4b190*/ void InternalRound(ref System.Decimal.DecCalc d, uint scale, System.Decimal.DecCalc.RoundingMode mode);
            static /*0xa47bc4*/ uint DecDivMod1E9(ref System.Decimal.DecCalc value);
            /*0xa4d3e4*/ uint get_High();
            /*0xa4d3ec*/ void set_High(uint value);
            /*0xa4d3f4*/ uint get_Low();
            /*0xa4d3fc*/ void set_Low(uint value);
            /*0xa4d404*/ uint get_Mid();
            /*0xa4d40c*/ void set_Mid(uint value);
            /*0xa4d414*/ bool get_IsNegative();
            /*0xa4d420*/ ulong get_Low64();
            /*0xa4d480*/ void set_Low64(ulong value);

            enum RoundingMode
            {
                ToEven = 0,
                AwayFromZero = 1,
                Truncate = 2,
                Floor = 3,
                Ceiling = 4,
            }

            struct PowerOvfl
            {
                /*0x10*/ uint Hi;
                /*0x18*/ ulong MidLo;

                /*0xa4f5b0*/ PowerOvfl(uint hi, uint mid, uint lo);
            }

            struct Buf12
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x10*/ ulong ulo64LE;
                /*0x14*/ ulong uhigh64LE;

                /*0xa4d7a4*/ ulong get_Low64();
                /*0xa4d804*/ void set_Low64(ulong value);
                /*0xa4d6c8*/ ulong get_High64();
                /*0xa4d728*/ void set_High64(ulong value);
            }

            struct Buf16
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong uhigh64LE;

                /*0xa4ddd0*/ ulong get_Low64();
                /*0xa4de30*/ void set_Low64(ulong value);
                /*0xa4dd70*/ ulong get_High64();
                /*0xa4f318*/ void set_High64(ulong value);
            }

            struct Buf24
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x20*/ uint U4;
                /*0x24*/ uint U5;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong umid64LE;
                /*0x20*/ ulong uhigh64LE;

                /*0xa4f0b0*/ ulong get_Low64();
                /*0xa4efb8*/ void set_Low64(ulong value);
                /*0xa4f034*/ void set_Mid64(ulong value);
                /*0xa4f29c*/ void set_High64(ulong value);
            }
        }
    }

    namespace Threading
    {
        class AbandonedMutexException : System.SystemException
        {
            /*0x8c*/ int _mutexIndex;
            /*0x90*/ System.Threading.Mutex _mutex;

            /*0xa4f5c4*/ AbandonedMutexException();
            /*0xa4f628*/ AbandonedMutexException(int location, System.Threading.WaitHandle handle);
            /*0xa4f74c*/ AbandonedMutexException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xa4f6e0*/ void SetupException(int location, System.Threading.WaitHandle handle);
        }

        class AsyncLocal<T> : System.Threading.IAsyncLocal
        {
            /*0x0*/ System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;

            AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);
            void set_Value(T value);
            void System.Threading.IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
        }

        interface IAsyncLocal
        {
            void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
        }

        struct AsyncLocalValueChangedArgs<T>
        {
            /*0x0*/ T <PreviousValue>k__BackingField;
            /*0x0*/ T <CurrentValue>k__BackingField;
            /*0x0*/ bool <ThreadContextChanged>k__BackingField;

            AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
            T get_CurrentValue();
        }

        class AutoResetEvent : System.Threading.EventWaitHandle
        {
            /*0xa4f75c*/ AutoResetEvent(bool initialState);
        }

        enum EventResetMode
        {
            AutoReset = 0,
            ManualReset = 1,
        }

        class LazyInitializer
        {
            static T EnsureInitialized<T>(ref T target);
            static T EnsureInitializedCore<T>(ref T target);
            static T EnsureInitialized<T>(ref T target, System.Func<T> valueFactory);
            static T EnsureInitializedCore<T>(ref T target, System.Func<T> valueFactory);
            static T EnsureInitialized<T>(ref T target, ref object syncLock, System.Func<T> valueFactory);
            static T EnsureInitializedCore<T>(ref T target, ref object syncLock, System.Func<T> valueFactory);
            static /*0xa4f778*/ object EnsureLockInitialized(ref object syncLock);
        }

        class LockRecursionException : System.Exception
        {
            /*0xa4f7f8*/ LockRecursionException();
            /*0xa4f850*/ LockRecursionException(string message);
            /*0xa4f8b8*/ LockRecursionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManualResetEvent : System.Threading.EventWaitHandle
        {
            /*0xa4f938*/ ManualResetEvent(bool initialState);
        }

        class ParameterizedThreadStart : System.MulticastDelegate
        {
            /*0xa4f948*/ ParameterizedThreadStart(object object, nint method);
            /*0xa4fa74*/ void Invoke(object obj);
        }

        class SemaphoreFullException : System.SystemException
        {
            /*0xa4fa88*/ SemaphoreFullException();
            /*0xa4fad4*/ SemaphoreFullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SendOrPostCallback : System.MulticastDelegate
        {
            /*0xa4fadc*/ SendOrPostCallback(object object, nint method);
            /*0xa4fc08*/ void Invoke(object state);
        }

        class SynchronizationLockException : System.SystemException
        {
            /*0xa4fc1c*/ SynchronizationLockException();
            /*0xa4fc78*/ SynchronizationLockException(string message);
            /*0xa4fc9c*/ SynchronizationLockException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadStart : System.MulticastDelegate
        {
            /*0xa4fca4*/ ThreadStart(object object, nint method);
            /*0xa4fd60*/ void Invoke();
        }

        enum ThreadState
        {
            Running = 0,
            StopRequested = 1,
            SuspendRequested = 2,
            Background = 4,
            Unstarted = 8,
            Stopped = 16,
            WaitSleepJoin = 32,
            Suspended = 64,
            AbortRequested = 128,
            Aborted = 256,
        }

        class ThreadStateException : System.SystemException
        {
            /*0xa4fd74*/ ThreadStateException();
            /*0xa4fdd0*/ ThreadStateException(string message);
            /*0xa4fdf4*/ ThreadStateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Timeout
        {
            static /*0x0*/ System.TimeSpan InfiniteTimeSpan;

            static /*0xa4fdfc*/ Timeout();
        }

        class WaitHandleCannotBeOpenedException : System.ApplicationException
        {
            /*0xa4fe6c*/ WaitHandleCannotBeOpenedException();
            /*0xa4fec8*/ WaitHandleCannotBeOpenedException(string message);
            /*0xa4feec*/ WaitHandleCannotBeOpenedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct CancellationToken
        {
            static /*0x0*/ System.Action<object> s_actionToActionObjShunt;
            /*0x10*/ System.Threading.CancellationTokenSource _source;

            static /*0xa50714*/ CancellationToken();
            static /*0xa4fef4*/ System.Threading.CancellationToken get_None();
            static /*0xa50668*/ bool op_Equality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            static /*0xa50674*/ bool op_Inequality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            /*0xa4ff54*/ CancellationToken(System.Threading.CancellationTokenSource source);
            /*0xa4ff5c*/ CancellationToken(bool canceled);
            /*0xa4fefc*/ bool get_IsCancellationRequested();
            /*0xa4ff44*/ bool get_CanBeCanceled();
            /*0xa4ffd0*/ System.Threading.CancellationTokenRegistration Register(System.Action callback);
            /*0xa501ec*/ System.Threading.CancellationTokenRegistration InternalRegisterWithoutEC(System.Action<object> callback, object state);
            /*0xa500bc*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext);
            /*0xa5056c*/ bool Equals(System.Threading.CancellationToken other);
            /*0xa5057c*/ bool Equals(object other);
            /*0xa505f4*/ int GetHashCode();
            /*0xa50680*/ void ThrowIfCancellationRequested();
            /*0xa506b8*/ void ThrowOperationCanceledException();

            class <>c
            {
                static /*0x0*/ System.Threading.CancellationToken.<> <>9;

                static /*0xa507d8*/ <>c();
                /*0xa5083c*/ <>c();
                /*0xa50844*/ void <.cctor>b__26_0(object obj);
            }
        }

        class ManualResetEventSlim : System.IDisposable
        {
            static /*0x0*/ System.Action<object> s_cancellationTokenCallback;
            /*0x10*/ object m_lock;
            /*0x18*/ System.Threading.ManualResetEvent m_eventObj;
            /*0x20*/ int m_combinedState;

            static /*0xa51aa0*/ ManualResetEventSlim();
            static /*0xa51978*/ void CancellationTokenCallback(object obj);
            static /*0xa50c3c*/ int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount);
            static /*0xa50b14*/ int ExtractStatePortion(int state, int mask);
            /*0xa50d6c*/ ManualResetEventSlim(bool initialState);
            /*0xa50e98*/ ManualResetEventSlim(bool initialState, int spinCount);
            /*0xa508b0*/ System.Threading.WaitHandle get_WaitHandle();
            /*0xa50ab8*/ bool get_IsSet();
            /*0xa50b1c*/ void set_IsSet(bool value);
            /*0xa50be0*/ int get_SpinCount();
            /*0xa50c48*/ void set_SpinCount(int value);
            /*0xa50c7c*/ int get_Waiters();
            /*0xa50cd8*/ void set_Waiters(int value);
            /*0xa50de8*/ void Initialize(bool initialState, int spinCount);
            /*0xa50fb8*/ void EnsureLockObjectCreated();
            /*0xa50950*/ bool LazyInitializeEvent();
            /*0xa510c4*/ void Set();
            /*0xa510cc*/ void Set(bool duringCancellation);
            /*0xa512d0*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xa51818*/ void Dispose();
            /*0xa51884*/ void Dispose(bool disposing);
            /*0xa508ec*/ void ThrowIfDisposed();
            /*0xa50b3c*/ void UpdateStateAtomically(int newBits, int updateBitsMask);
        }

        struct NativeOverlapped
        {
            /*0x10*/ nint InternalLow;
            /*0x18*/ nint InternalHigh;
            /*0x20*/ int OffsetLow;
            /*0x24*/ int OffsetHigh;
            /*0x28*/ nint EventHandle;
        }

        struct SpinWait
        {
            static /*0x0*/ int SpinCountforSpinBeforeWait;
            /*0x10*/ int _count;

            static /*0xa51d58*/ SpinWait();
            /*0xa51b34*/ int get_Count();
            /*0xa51b3c*/ bool get_NextSpinWillYield();
            /*0xa51a98*/ void SpinOnce();
            /*0xa51728*/ void SpinOnce(int sleep1Threshold);
            /*0xa51bb4*/ void SpinOnceCore(int sleep1Threshold);
        }

        class PlatformHelper
        {
            static /*0x0*/ int s_processorCount;
            static /*0x4*/ int s_lastProcessorCountRefreshTicks;
            static /*0x8*/ bool IsSingleProcessor;

            static /*0xa51ec8*/ PlatformHelper();
            static /*0xa51ddc*/ int get_ProcessorCount();
        }

        class TimeoutHelper
        {
            static /*0xa51720*/ uint GetTime();
            static /*0xa517d4*/ int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout);
        }

        struct CancellationTokenRegistration : System.IEquatable<System.Threading.CancellationTokenRegistration>, System.IDisposable
        {
            /*0x10*/ System.Threading.CancellationCallbackInfo m_callbackInfo;
            /*0x18*/ System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> m_registrationInfo;

            /*0xa51f1c*/ CancellationTokenRegistration(System.Threading.CancellationCallbackInfo callbackInfo, System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> registrationInfo);
            /*0xa51f28*/ bool Unregister();
            /*0xa51fa4*/ void Dispose();
            /*0xa520b8*/ bool Equals(object obj);
            /*0xa52148*/ bool Equals(System.Threading.CancellationTokenRegistration other);
            /*0xa521c8*/ int GetHashCode();
        }

        class CancellationTokenSource : System.IDisposable
        {
            static /*0x0*/ System.Threading.CancellationTokenSource s_canceledSource;
            static /*0x8*/ System.Threading.CancellationTokenSource s_neverCanceledSource;
            static /*0x10*/ int s_nLists;
            static /*0x18*/ System.Threading.TimerCallback s_timerCallback;
            /*0x10*/ System.Threading.ManualResetEvent _kernelEvent;
            /*0x18*/ System.Threading.SparselyPopulatedArray<System.Threading.CancellationCallbackInfo> _registeredCallbacksLists;
            /*0x20*/ int _state;
            /*0x24*/ int _threadIDExecutingCallbacks;
            /*0x28*/ bool _disposed;
            /*0x30*/ System.Threading.CancellationCallbackInfo _executingCallback;
            /*0x38*/ System.Threading.Timer _timer;

            static /*0xa5338c*/ CancellationTokenSource();
            static /*0xa5261c*/ void TimerCallbackLogic(object obj);
            static /*0xa52830*/ void ThrowObjectDisposedException();
            static /*0xa53024*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
            static /*0xa532dc*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token);
            /*0xa52308*/ CancellationTokenSource();
            /*0xa4ff28*/ bool get_IsCancellationRequested();
            /*0xa52038*/ bool get_IsCancellationCompleted();
            /*0xa52258*/ bool get_IsDisposed();
            /*0xa52054*/ int get_ThreadIDExecutingCallbacks();
            /*0xa52260*/ void set_ThreadIDExecutingCallbacks(int value);
            /*0xa52284*/ System.Threading.CancellationToken get_Token();
            /*0xa522f0*/ System.Threading.CancellationCallbackInfo get_ExecutingCallback();
            /*0xa5233c*/ void Cancel();
            /*0xa52358*/ void Cancel(bool throwOnFirstException);
            /*0xa52430*/ void CancelAfter(int millisecondsDelay);
            /*0xa52734*/ void Dispose();
            /*0xa527a0*/ void Dispose(bool disposing);
            /*0xa5229c*/ void ThrowIfDisposed();
            /*0xa502a4*/ System.Threading.CancellationTokenRegistration InternalRegister(System.Action<object> callback, object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext executionContext);
            /*0xa52380*/ void NotifyCancellation(bool throwOnFirstException);
            /*0xa52914*/ void ExecuteCallbackHandlers(bool throwOnFirstException);
            /*0xa52eb0*/ void CancellationCallbackCoreWork_OnSyncContext(object obj);
            /*0xa52df4*/ void CancellationCallbackCoreWork(System.Threading.CancellationCallbackCoreWorkArguments args);
            /*0xa5206c*/ void WaitForCallbackToComplete(System.Threading.CancellationCallbackInfo callbackInfo);

            class Linked1CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;

                /*0xa530f8*/ Linked1CancellationTokenSource(System.Threading.CancellationToken token1);
                /*0xa5350c*/ void Dispose(bool disposing);
            }

            class Linked2CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;
                /*0x58*/ System.Threading.CancellationTokenRegistration _reg2;

                /*0xa531d0*/ Linked2CancellationTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
                /*0xa53540*/ void Dispose(bool disposing);
            }

            class LinkedNCancellationTokenSource : System.Threading.CancellationTokenSource
            {
                static /*0x0*/ System.Action<object> s_linkedTokenCancelDelegate;

                static /*0xa5357c*/ LinkedNCancellationTokenSource();

                class <>c
                {
                    static /*0x0*/ System.Threading.CancellationTokenSource.LinkedNCancellationTokenSource.<> <>9;

                    static /*0xa53640*/ <>c();
                    /*0xa536a4*/ <>c();
                    /*0xa536ac*/ void <.cctor>b__4_0(object s);
                }
            }
        }

        struct CancellationCallbackCoreWorkArguments
        {
            /*0x10*/ System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> _currArrayFragment;
            /*0x18*/ int _currArrayIndex;

            /*0xa52de8*/ CancellationCallbackCoreWorkArguments(System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> currArrayFragment, int currArrayIndex);
        }

        class CancellationCallbackInfo
        {
            static /*0x0*/ System.Threading.ContextCallback s_executionContextCallback;
            /*0x10*/ System.Action<object> Callback;
            /*0x18*/ object StateForCallback;
            /*0x20*/ System.Threading.ExecutionContext TargetExecutionContext;
            /*0x28*/ System.Threading.CancellationTokenSource CancellationTokenSource;

            static /*0xa53944*/ void ExecutionContextCallback(object obj);
            /*0xa52884*/ CancellationCallbackInfo(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource);
            /*0xa52f28*/ void ExecuteCallback();

            class WithSyncContext : System.Threading.CancellationCallbackInfo
            {
                /*0x30*/ System.Threading.SynchronizationContext TargetSyncContext;

                /*0xa528c4*/ WithSyncContext(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource, System.Threading.SynchronizationContext targetSyncContext);
            }
        }

        class SparselyPopulatedArray<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _head;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _tail;

            SparselyPopulatedArray(int initialSize);
            System.Threading.SparselyPopulatedArrayFragment<T> get_Tail();
            System.Threading.SparselyPopulatedArrayAddInfo<T> Add(T element);
        }

        struct SparselyPopulatedArrayAddInfo<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _source;
            /*0x0*/ int _index;

            SparselyPopulatedArrayAddInfo(System.Threading.SparselyPopulatedArrayFragment<T> source, int index);
            System.Threading.SparselyPopulatedArrayFragment<T> get_Source();
            int get_Index();
        }

        class SparselyPopulatedArrayFragment<T>
        {
            /*0x0*/ T[] _elements;
            /*0x0*/ int _freeCount;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _next;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _prev;

            SparselyPopulatedArrayFragment(int size);
            SparselyPopulatedArrayFragment(int size, System.Threading.SparselyPopulatedArrayFragment<T> prev);
            T get_Item(int index);
            int get_Length();
            System.Threading.SparselyPopulatedArrayFragment<T> get_Prev();
            T SafeAtomicRemove(int index, T expectedElement);
        }

        struct LockHolder : System.IDisposable
        {
            /*0x10*/ System.Threading.Lock _lock;

            static /*0xa539d0*/ System.Threading.LockHolder Hold(System.Threading.Lock l);
            /*0xa539fc*/ void Dispose();
        }

        class Lock
        {
            /*0x10*/ object _lock;

            /*0xa53a28*/ Lock();
            /*0xa539f4*/ void Acquire();
            /*0xa53a18*/ void Release();
        }

        class SemaphoreSlim : System.IDisposable
        {
            static /*0x0*/ System.Threading.Tasks.Task<bool> s_trueTask;
            static /*0x8*/ System.Threading.Tasks.Task<bool> s_falseTask;
            static /*0x10*/ System.Action<object> s_cancellationTokenCanceledEventHandler;
            /*0x10*/ int m_currentCount;
            /*0x14*/ int m_maxCount;
            /*0x18*/ int m_waitCount;
            /*0x20*/ object m_lockObj;
            /*0x28*/ System.Threading.ManualResetEvent m_waitHandle;
            /*0x30*/ System.Threading.SemaphoreSlim.TaskNode m_asyncHead;
            /*0x38*/ System.Threading.SemaphoreSlim.TaskNode m_asyncTail;

            static /*0xa54d14*/ SemaphoreSlim();
            static /*0xa54b2c*/ void QueueWaiterTask(System.Threading.SemaphoreSlim.TaskNode waiterTask);
            static /*0xa54c00*/ void CancellationTokenCanceledEventHandler(object obj);
            static /*0xa53c24*/ string GetResourceString(string str);
            /*0xa53a90*/ SemaphoreSlim(int initialCount, int maxCount);
            /*0xa53c2c*/ void Wait();
            /*0xa53c38*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xa54478*/ bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken);
            /*0xa5456c*/ System.Threading.Tasks.Task WaitAsync();
            /*0xa54194*/ System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xa54578*/ System.Threading.SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter();
            /*0xa54768*/ bool RemoveAsyncWaiter(System.Threading.SemaphoreSlim.TaskNode task);
            /*0xa545fc*/ System.Threading.Tasks.Task<bool> WaitUntilCountOrTimeoutAsync(System.Threading.SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xa547e8*/ int Release();
            /*0xa547f0*/ int Release(int releaseCount);
            /*0xa54b38*/ void Dispose();
            /*0xa54ba4*/ void Dispose(bool disposing);
            /*0xa54110*/ void CheckDispose();

            class TaskNode : System.Threading.Tasks.Task<bool>, System.Threading.IThreadPoolWorkItem
            {
                /*0x58*/ System.Threading.SemaphoreSlim.TaskNode Prev;
                /*0x60*/ System.Threading.SemaphoreSlim.TaskNode Next;

                /*0xa54720*/ TaskNode();
                /*0xa54e40*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0xa54e8c*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
            }

            struct <WaitUntilCountOrTimeoutAsync>d__32 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<bool> <>t__builder;
                /*0x30*/ System.Threading.CancellationToken cancellationToken;
                /*0x38*/ System.Threading.SemaphoreSlim.TaskNode asyncWaiter;
                /*0x40*/ int millisecondsTimeout;
                /*0x48*/ System.Threading.SemaphoreSlim <>4__this;
                /*0x50*/ System.Threading.CancellationTokenSource <cts>5__2;
                /*0x58*/ object <>7__wrap2;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1;
                /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2;

                /*0xa54e90*/ void MoveNext();
                /*0xa555fc*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        struct SpinLock
        {
            static /*0x0*/ int MAXIMUM_WAITERS;
            /*0x10*/ int m_owner;

            static /*0xa5616c*/ SpinLock();
            /*0xa55654*/ SpinLock(bool enableThreadOwnerTracking);
            /*0xa5568c*/ void Enter(ref bool lockTaken);
            /*0xa55be0*/ void TryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0xa55758*/ void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0xa55e0c*/ void DecrementWaiters();
            /*0xa55ce4*/ void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken);
            /*0xa55f9c*/ void Exit(bool useMemoryBarrier);
            /*0xa55fec*/ void ExitSlowPath(bool useMemoryBarrier);
            /*0xa560cc*/ bool get_IsHeldByCurrentThread();
            /*0xa55cc8*/ bool get_IsThreadOwnerTrackingEnabled();

            class SystemThreading_SpinLockDebugView
            {
            }
        }

        class EventWaitHandle : System.Threading.WaitHandle
        {
            /*0xa4f76c*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode);
            /*0xa561b8*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name);
            /*0xa54508*/ bool Reset();
            /*0xa51060*/ bool Set();
        }

        class ContextCallback : System.MulticastDelegate
        {
            /*0xa53730*/ ContextCallback(object object, nint method);
            /*0xa56478*/ void Invoke(object state);
        }

        struct ExecutionContextSwitcher
        {
            /*0x10*/ System.Threading.ExecutionContext.Reader outerEC;
            /*0x18*/ bool outerECBelongsToScope;
            /*0x20*/ object hecsw;
            /*0x28*/ System.Threading.Thread thread;

            /*0xa5648c*/ bool UndoNoThrow();
            /*0xa56514*/ void Undo();
        }

        class ExecutionContext : System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Threading.ExecutionContext s_dummyDefaultEC;
            static /*0x8*/ System.Threading.ExecutionContext Default;
            /*0x10*/ System.Threading.SynchronizationContext _syncContext;
            /*0x18*/ System.Threading.SynchronizationContext _syncContextNoFlow;
            /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext;
            /*0x28*/ System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext;
            /*0x30*/ System.Threading.ExecutionContext.Flags _flags;
            /*0x38*/ System.Collections.Generic.Dictionary<System.Threading.IAsyncLocal, object> _localValues;
            /*0x40*/ System.Collections.Generic.List<System.Threading.IAsyncLocal> _localChangeNotifications;

            static /*0xa57bb0*/ ExecutionContext();
            static /*0xa56ad8*/ void SetLocalValue(System.Threading.IAsyncLocal local, object newValue, bool needChangeNotifications);
            static /*0xa565b8*/ void OnAsyncLocalContextChanged(System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current);
            static /*0xa5385c*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0xa56f3c*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0xa571c0*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0xa56fb8*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0xa57478*/ void EstablishCopyOnWriteScope(ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0xa572d4*/ void EstablishCopyOnWriteScope(System.Threading.Thread currentThread, bool knownNullWindowsIdentity, ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0xa57308*/ System.Threading.ExecutionContextSwitcher SetExecutionContext(System.Threading.ExecutionContext executionContext, bool preserveSyncCtx);
            static /*0xa57798*/ bool IsFlowSuppressed();
            static /*0xa50254*/ System.Threading.ExecutionContext Capture();
            static /*0xa57938*/ System.Threading.ExecutionContext FastCapture();
            static /*0xa577c8*/ System.Threading.ExecutionContext Capture(ref System.Threading.StackCrawlMark stackMark, System.Threading.ExecutionContext.CaptureOptions options);
            /*0xa56aa0*/ ExecutionContext();
            /*0xa56aa8*/ ExecutionContext(bool isPreAllocatedDefault);
            /*0xa57ab0*/ ExecutionContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xa56a3c*/ bool get_isNewCapture();
            /*0xa56a50*/ void set_isNewCapture(bool value);
            /*0xa56a6c*/ bool get_isFlowSuppressed();
            /*0xa56a78*/ void set_isFlowSuppressed(bool value);
            /*0xa56a94*/ bool get_IsPreAllocatedDefault();
            /*0xa56e30*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
            /*0xa56e9c*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
            /*0xa56ea4*/ System.Runtime.Remoting.Messaging.IllogicalCallContext get_IllogicalCallContext();
            /*0xa56f10*/ void set_IllogicalCallContext(System.Runtime.Remoting.Messaging.IllogicalCallContext value);
            /*0xa56f18*/ System.Threading.SynchronizationContext get_SynchronizationContext();
            /*0xa56f20*/ void set_SynchronizationContext(System.Threading.SynchronizationContext value);
            /*0xa56f28*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
            /*0xa56f30*/ void set_SynchronizationContextNoFlow(System.Threading.SynchronizationContext value);
            /*0xa56f38*/ void Dispose();
            /*0xa57560*/ System.Threading.ExecutionContext CreateCopy();
            /*0xa576a0*/ System.Threading.ExecutionContext CreateMutableCopy();
            /*0xa579a0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xa5725c*/ bool IsDefaultFTContext(bool ignoreSyncCtx);

            enum Flags
            {
                None = 0,
                IsNewCapture = 1,
                IsFlowSuppressed = 2,
                IsPreAllocatedDefault = 4,
            }

            struct Reader
            {
                /*0x10*/ System.Threading.ExecutionContext m_ec;

                /*0xa57c40*/ Reader(System.Threading.ExecutionContext ec);
                /*0xa57c48*/ System.Threading.ExecutionContext DangerousGetRawExecutionContext();
                /*0xa57230*/ bool get_IsNull();
                /*0xa57240*/ bool IsDefaultFTContext(bool ignoreSyncCtx);
                /*0xa57c50*/ bool get_IsFlowSuppressed();
                /*0xa5751c*/ System.Threading.SynchronizationContext get_SynchronizationContext();
                /*0xa57534*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
                /*0xa57988*/ System.Runtime.Remoting.Messaging.LogicalCallContext.Reader get_LogicalCallContext();
                /*0xa572ac*/ bool HasSameLocalValues(System.Threading.ExecutionContext other);
            }

            enum CaptureOptions
            {
                None = 0,
                IgnoreSyncCtx = 1,
                OptimizeDefaultCase = 2,
            }
        }

        class Monitor
        {
            static /*0xa53a20*/ void Enter(object obj);
            static /*0xa51040*/ void Enter(object obj, ref bool lockTaken);
            static /*0xa57c6c*/ void ThrowLockTakenException();
            static /*0xa53a24*/ void Exit(object obj);
            static /*0xa57ce8*/ void TryEnter(object obj, ref bool lockTaken);
            static /*0xa57da4*/ bool Wait(object obj, int millisecondsTimeout, bool exitContext);
            static /*0xa51810*/ bool Wait(object obj, int millisecondsTimeout);
            static /*0xa54ad4*/ void Pulse(object obj);
            static /*0xa51278*/ void PulseAll(object obj);
            static /*0xa57f84*/ bool Monitor_test_synchronised(object obj);
            static /*0xa57f88*/ void Monitor_pulse(object obj);
            static /*0xa57ebc*/ void ObjPulse(object obj);
            static /*0xa57f8c*/ void Monitor_pulse_all(object obj);
            static /*0xa57f20*/ void ObjPulseAll(object obj);
            static /*0xa57f90*/ bool Monitor_wait(object obj, int ms);
            static /*0xa57e04*/ bool ObjWait(bool exitContext, int millisecondsTimeout, object obj);
            static /*0xa57f94*/ void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken);
            static /*0xa57d08*/ void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken);
            static /*0xa57cdc*/ void ReliableEnter(object obj, ref bool lockTaken);
        }

        enum SynchronizationContextProperties
        {
            None = 0,
            RequireWaitNotification = 1,
        }

        class SynchronizationContext
        {
            static /*0x0*/ System.Type s_cachedPreparedType1;
            static /*0x8*/ System.Type s_cachedPreparedType2;
            static /*0x10*/ System.Type s_cachedPreparedType3;
            static /*0x18*/ System.Type s_cachedPreparedType4;
            static /*0x20*/ System.Type s_cachedPreparedType5;
            /*0x10*/ System.Threading.SynchronizationContextProperties _props;

            static /*0xa581f8*/ int WaitHelper(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            static /*0xa58284*/ void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext);
            static /*0xa50224*/ System.Threading.SynchronizationContext get_Current();
            static /*0xa582f8*/ System.Threading.SynchronizationContext get_CurrentNoFlow();
            static /*0xa582ac*/ System.Threading.SynchronizationContext GetThreadLocalContext();
            static /*0xa584e0*/ System.Threading.SynchronizationContext get_CurrentExplicit();
            /*0xa57f98*/ SynchronizationContext();
            /*0xa57fa0*/ bool IsWaitNotificationRequired();
            /*0xa57fac*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0xa57fd4*/ void Post(System.Threading.SendOrPostCallback d, object state);
            /*0xa5818c*/ void OperationStarted();
            /*0xa58190*/ void OperationCompleted();
            /*0xa58194*/ int Wait(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            /*0xa58484*/ System.Threading.SynchronizationContext CreateCopy();
        }

        class OSSpecificSynchronizationContext : System.Threading.SynchronizationContext
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Threading.OSSpecificSynchronizationContext> s_ContextCache;
            /*0x18*/ object m_OSSynchronizationContext;

            static /*0xa58994*/ OSSpecificSynchronizationContext();
            static /*0xa58328*/ System.Threading.OSSpecificSynchronizationContext Get();
            static /*0xa584e4*/ void InvocationEntry(nint arg);
            static /*0xa58674*/ object GetOSContext();
            static /*0xa58968*/ void PostInternal(object osSynchronizationContext, nint callback, nint arg);
            /*0xa5864c*/ OSSpecificSynchronizationContext(object osContext);
            /*0xa58678*/ System.Threading.SynchronizationContext CreateCopy();
            /*0xa586e0*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0xa58720*/ void Post(System.Threading.SendOrPostCallback d, object state);

            class InvocationEntryDelegate : System.MulticastDelegate
            {
                /*0xa58878*/ InvocationEntryDelegate(object object, nint method);
                /*0xa58a20*/ void Invoke(nint arg);
            }

            class InvocationContext
            {
                /*0x10*/ System.Threading.SendOrPostCallback m_Delegate;
                /*0x18*/ object m_State;

                /*0xa5893c*/ InvocationContext(System.Threading.SendOrPostCallback d, object state);
                /*0xa5896c*/ void Invoke();
            }

            class <>c
            {
                static /*0x0*/ System.Threading.OSSpecificSynchronizationContext.<> <>9;
                static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<object, System.Threading.OSSpecificSynchronizationContext> <>9__3_0;

                static /*0xa58a34*/ <>c();
                /*0xa58a98*/ <>c();
                /*0xa58aa0*/ System.Threading.OSSpecificSynchronizationContext <Get>b__3_0(object _osContext);
            }
        }

        class ThreadHelper
        {
            static /*0x0*/ System.Threading.ContextCallback _ccb;
            /*0x10*/ System.Delegate _start;
            /*0x18*/ object _startArg;
            /*0x20*/ System.Threading.ExecutionContext _executionContext;

            static /*0xa58e34*/ ThreadHelper();
            static /*0xa58b34*/ void ThreadStart_Context(object state);
            /*0xa58b04*/ ThreadHelper(System.Delegate start);
            /*0xa58b2c*/ void SetExecutionContextHelper(System.Threading.ExecutionContext ec);
            /*0xa58c40*/ void ThreadStart(object obj);
            /*0xa58d40*/ void ThreadStart();
        }

        class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            static /*0x0*/ System.LocalDataStoreMgr s_LocalDataStoreMgr;
            static /*0x8*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture;
            static /*0x10*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture;
            [ThreadStatic] static System.LocalDataStoreHolder s_LocalDataStore;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentCulture;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentUICulture;
            [ThreadStatic] static System.Threading.Thread current_thread;
            /*0x10*/ System.Threading.InternalThread internal_thread;
            /*0x18*/ object m_ThreadStartArg;
            /*0x20*/ object pending_exception;
            /*0x28*/ System.MulticastDelegate m_Delegate;
            /*0x30*/ System.Threading.ExecutionContext m_ExecutionContext;
            /*0x38*/ bool m_ExecutionContextBelongsToOuterScope;
            /*0x40*/ System.Security.Principal.IPrincipal principal;
            /*0x48*/ int principal_version;

            static /*0xa58ec4*/ void AsyncLocalSetCurrentCulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0xa59450*/ void SleepInternal(int millisecondsTimeout);
            static /*0xa55e94*/ void Sleep(int millisecondsTimeout);
            static /*0xa59454*/ bool YieldInternal();
            static /*0xa55f10*/ bool Yield();
            static /*0xa598dc*/ void nativeInitCultureAccessors();
            static /*0xa59980*/ void MemoryBarrier();
            static /*0xa599ac*/ System.Runtime.Remoting.Contexts.Context get_CurrentContext();
            static /*0xa599b4*/ void GetCurrentThread_icall(ref System.Threading.Thread thread);
            static /*0xa599b8*/ System.Threading.Thread GetCurrentThread();
            static /*0xa55f14*/ System.Threading.Thread get_CurrentThread();
            static /*0xa599d4*/ int get_CurrentThreadId();
            static /*0xa599f8*/ int GetDomainID();
            static /*0xa59afc*/ void SetName_icall(System.Threading.InternalThread thread, char* name, int nameLength);
            static /*0xa59b00*/ void SetName_internal(System.Threading.InternalThread thread, string name);
            static /*0xa59b74*/ void SpinWait_nop();
            static /*0xa55e6c*/ void SpinWait(int iterations);
            static /*0xa59af4*/ void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set);
            static /*0xa59af8*/ void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr);
            static /*0xa59b78*/ System.Threading.ThreadState GetState(System.Threading.InternalThread thread);
            static /*0xa59b7c*/ int SystemMaxStackStize();
            static /*0xa59458*/ int GetProcessDefaultStackSize(int maxStackSize);
            static /*0xa55708*/ void BeginCriticalRegion();
            static /*0xa55c78*/ void EndCriticalRegion();
            /*0xa58f24*/ Thread(System.Threading.ThreadStart start);
            /*0xa590cc*/ Thread(System.Threading.ParameterizedThreadStart start, int maxStackSize);
            /*0xa591bc*/ void Start();
            /*0xa5928c*/ void Start(object parameter);
            /*0xa591d0*/ void Start(ref System.Threading.StackCrawlMark stackMark);
            /*0xa5659c*/ System.Threading.ExecutionContext.Reader GetExecutionContextReader();
            /*0xa574fc*/ bool get_ExecutionContextBelongsToCurrentScope();
            /*0xa5750c*/ void set_ExecutionContextBelongsToCurrentScope(bool value);
            /*0xa56da4*/ System.Threading.ExecutionContext GetMutableExecutionContext();
            /*0xa5754c*/ void SetExecutionContext(System.Threading.ExecutionContext value, bool belongsToCurrentScope);
            /*0xa565a4*/ void SetExecutionContext(System.Threading.ExecutionContext.Reader value, bool belongsToCurrentScope);
            /*0xa593c8*/ bool JoinInternal(int millisecondsTimeout);
            /*0xa593cc*/ void Join();
            /*0xa593d4*/ bool Join(int millisecondsTimeout);
            /*0xa58fa4*/ void SetStartHelper(System.Delegate start, int maxStackSize);
            /*0xa59540*/ System.Globalization.CultureInfo get_CurrentUICulture();
            /*0xa5956c*/ System.Globalization.CultureInfo GetCurrentUICultureNoAppX();
            /*0xa59618*/ System.Globalization.CultureInfo get_CurrentCulture();
            /*0xa596f0*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
            /*0xa59644*/ System.Globalization.CultureInfo GetCurrentCultureNoAppX();
            /*0xa59984*/ void ConstructInternalThread();
            /*0xa59988*/ System.Threading.InternalThread get_Internal();
            /*0xa599fc*/ bool Thread_internal(System.MulticastDelegate start);
            /*0xa59a00*/ void Finalize();
            /*0xa59a08*/ bool get_IsThreadPoolThread();
            /*0xa59a0c*/ bool get_IsThreadPoolThreadInternal();
            /*0xa59a38*/ void set_IsBackground(bool value);
            /*0xa59b40*/ void set_Name(string value);
            /*0xa5935c*/ void StartInternal(object principal, ref System.Threading.StackCrawlMark stackMark);
            /*0xa59504*/ void SetStart(System.MulticastDelegate start, int maxStackSize);
            /*0xa55f70*/ int get_ManagedThreadId();
            /*0xa59b80*/ int GetHashCode();
            /*0xa59a80*/ System.Threading.ThreadState ValidateThreadState();
        }

        enum StackCrawlMark
        {
            LookForMe = 0,
            LookForMyCaller = 1,
            LookForMyCallersCaller = 2,
            LookForThread = 3,
        }

        class ThreadAbortException : System.SystemException
        {
            /*0xa59b84*/ ThreadAbortException();
            /*0xa59c00*/ ThreadAbortException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadInterruptedException : System.SystemException
        {
            /*0xa59c08*/ ThreadInterruptedException();
            /*0xa59c84*/ ThreadInterruptedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        interface IThreadPoolWorkItem
        {
            void ExecuteWorkItem();
            void MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class WaitCallback : System.MulticastDelegate
        {
            /*0xa58060*/ WaitCallback(object object, nint method);
            /*0xa59c8c*/ void Invoke(object state);
        }

        class WaitOrTimerCallback : System.MulticastDelegate
        {
            /*0xa59ca0*/ WaitOrTimerCallback(object object, nint method);
            /*0xa59dd0*/ void Invoke(object state, bool timedOut);
        }

        class ThreadPoolGlobals
        {
            static /*0x0*/ int processorCount;
            static /*0x4*/ bool vmTpInitialized;
            static /*0x5*/ bool enableWorkerTracking;
            static /*0x8*/ System.Threading.ThreadPoolWorkQueue workQueue;

            static /*0xa59de8*/ ThreadPoolGlobals();
        }

        class ThreadPoolWorkQueue
        {
            static /*0x0*/ System.Threading.ThreadPoolWorkQueue.SparseArray<System.Threading.ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueHead;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueTail;
            /*0x20*/ int numOutstandingThreadRequests;

            static /*0xa5b19c*/ ThreadPoolWorkQueue();
            static /*0xa5ad4c*/ bool Dispatch();
            /*0xa59e70*/ ThreadPoolWorkQueue();
            /*0xa59ee8*/ System.Threading.ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue();
            /*0xa59f78*/ void EnsureThreadRequested();
            /*0xa5a018*/ void MarkThreadRequestSatisfied();
            /*0xa5a064*/ void Enqueue(System.Threading.IThreadPoolWorkItem callback, bool forceGlobal);
            /*0xa5a5d4*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem callback);
            /*0xa5a900*/ void Dequeue(System.Threading.ThreadPoolWorkQueueThreadLocals tl, ref System.Threading.IThreadPoolWorkItem callback, ref bool missedSteal);

            class SparseArray<T>
            {
                /*0x0*/ T[] m_array;

                SparseArray(int initialSize);
                T[] get_Current();
                int Add(T e);
                void Remove(T e);
            }

            class WorkStealingQueue
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] m_array;
                /*0x18*/ int m_mask;
                /*0x1c*/ int m_headIndex;
                /*0x20*/ int m_tailIndex;
                /*0x24*/ System.Threading.SpinLock m_foreignLock;

                /*0xa5b470*/ WorkStealingQueue();
                /*0xa5a1a0*/ void LocalPush(System.Threading.IThreadPoolWorkItem obj);
                /*0xa5a644*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem obj);
                /*0xa5aad0*/ bool LocalPop(ref System.Threading.IThreadPoolWorkItem obj);
                /*0xa5ad44*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal);
                /*0xa5b22c*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout);
            }

            class QueueSegment
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] nodes;
                /*0x18*/ int indexes;
                /*0x20*/ System.Threading.ThreadPoolWorkQueue.QueueSegment Next;

                /*0x8c460c*/ QueueSegment();
                /*0x8c456c*/ void GetIndexes(ref int upper, ref int lower);
                /*0x8c45a0*/ bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower);
                /*0x8c4668*/ bool IsUsedUp();
                /*0x8c46ac*/ bool TryEnqueue(System.Threading.IThreadPoolWorkItem node);
                /*0x8c4758*/ bool TryDequeue(ref System.Threading.IThreadPoolWorkItem node);
            }
        }

        class ThreadPoolWorkQueueThreadLocals
        {
            [ThreadStatic] static System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue workQueue;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue;
            /*0x20*/ System.Random random;

            /*0x8c4844*/ ThreadPoolWorkQueueThreadLocals(System.Threading.ThreadPoolWorkQueue tpq);
            /*0x8c4960*/ void CleanUp();
            /*0x8c4a34*/ void Finalize();
        }

        class _ThreadPoolWaitCallback
        {
            static /*0x8c4b00*/ bool PerformWaitCallback();
        }

        class QueueUserWorkItemCallback : System.Threading.IThreadPoolWorkItem
        {
            static /*0x0*/ System.Threading.ContextCallback ccb;
            /*0x10*/ System.Threading.WaitCallback callback;
            /*0x18*/ System.Threading.ExecutionContext context;
            /*0x20*/ object state;

            static /*0x8c4d5c*/ QueueUserWorkItemCallback();
            static /*0x8c4ce4*/ void WaitCallback_Context(object state);
            /*0x8c4b50*/ QueueUserWorkItemCallback(System.Threading.WaitCallback waitCallback, object stateObj, bool compressStack, ref System.Threading.StackCrawlMark stackMark);
            /*0x8c4c08*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
            /*0x8c4ce0*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class ThreadPool
        {
            static /*0x8c4df0*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, bool compressStack);
            static /*0x8c50cc*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            static /*0x8c507c*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x8c52e4*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack);
            static /*0x8c50a4*/ bool UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static bool QueueUserWorkItem<TState>(System.Action<TState> callBack, TState state, bool preferLocal);
            static /*0x8c51c0*/ bool QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, object state, ref System.Threading.StackCrawlMark stackMark, bool compressStack, bool forceGlobal);
            static /*0x8c53a4*/ void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, bool forceGlobal);
            static /*0x8c5424*/ bool TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem);
            static /*0x8c54c4*/ bool RequestWorkerThread();
            static /*0x8c5310*/ void EnsureVMInitialized();
            static /*0x8c54cc*/ bool NotifyWorkItemComplete();
            static /*0x8c54d0*/ void ReportThreadStatus(bool isWorking);
            static /*0x8c54d8*/ void NotifyWorkItemProgress();
            static /*0x8c54e8*/ void NotifyWorkItemProgressNative();
            static /*0x8c54ec*/ void NotifyWorkItemQueued();
            static /*0x8c54c8*/ void InitializeVMTp(ref bool enableWorkerTracking);
            static /*0x8c54f0*/ bool get_IsThreadPoolThread();

            class <>c__DisplayClass17_0<TState>
            {
                /*0x0*/ System.Action<TState> callBack;

                <>c__DisplayClass17_0();
                void <QueueUserWorkItem>b__0(object x);
            }
        }

        class WaitHandle : System.MarshalByRefObject, System.IDisposable
        {
            static int WaitTimeout = 258;
            static int MAX_WAITHANDLES = 64;
            static int WAIT_OBJECT_0 = 0;
            static int WAIT_ABANDONED = 128;
            static int WAIT_FAILED = 2147483647;
            static int ERROR_TOO_MANY_POSTS = 298;
            static int ERROR_NOT_OWNED_BY_CALLER = 299;
            static int MaxWaitHandles = 64;
            static /*0x0*/ nint InvalidHandle;
            /*0x18*/ nint waitHandle;
            /*0x20*/ Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle;
            /*0x28*/ bool hasThreadAffinity;

            static /*0x8c664c*/ WaitHandle();
            static /*0x8c59fc*/ bool InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x8c5cf4*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);
            static /*0x8c6410*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext);
            static /*0x8c5cb4*/ void ThrowAbandonedMutexException();
            static /*0x8c63bc*/ void ThrowAbandonedMutexException(int location, System.Threading.WaitHandle handle);
            static /*0x8c5af0*/ int WaitOneNative(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x8c5ffc*/ int WaitMultiple(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll);
            static /*0x8c6644*/ int Wait_internal(nint* handles, int numHandles, bool waitAll, int ms);
            /*0x8c5510*/ WaitHandle();
            /*0x8c552c*/ void Init();
            /*0x8c5598*/ void set_Handle(nint value);
            /*0x8c5684*/ Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle();
            /*0x8c573c*/ void set_SafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle value);
            /*0x8c57c4*/ void SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            /*0x8c57f8*/ bool WaitOne(int millisecondsTimeout, bool exitContext);
            /*0x8c58fc*/ bool WaitOne(System.TimeSpan timeout, bool exitContext);
            /*0x8c59c8*/ bool WaitOne();
            /*0x8c59dc*/ bool WaitOne(int millisecondsTimeout);
            /*0x8c59ec*/ bool WaitOne(System.TimeSpan timeout);
            /*0x8c587c*/ bool WaitOne(long timeout, bool exitContext);
            /*0x8c651c*/ void Close();
            /*0x8c658c*/ void Dispose(bool explicitDisposing);
            /*0x8c65d4*/ void Dispose();
        }

        class Interlocked
        {
            static /*0x8c4608*/ int CompareExchange(ref int location1, int value, int comparand);
            static /*0x8c66a0*/ int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded);
            static /*0x8c66a4*/ void CompareExchange(ref object location1, ref object value, ref object comparand, ref object result);
            static /*0x8c66a8*/ object CompareExchange(ref object location1, object value, object comparand);
            static /*0x8c66d4*/ float CompareExchange(ref float location1, float value, float comparand);
            static /*0x8c66d8*/ int Decrement(ref int location);
            static /*0x8c66dc*/ int Increment(ref int location);
            static /*0x8c66e0*/ long Increment(ref long location);
            static /*0x8c66e4*/ int Exchange(ref int location1, int value);
            static /*0x8c66e8*/ void Exchange(ref object location1, ref object value, ref object result);
            static /*0x8c66ec*/ object Exchange(ref object location1, object value);
            static /*0x8c6710*/ float Exchange(ref float location1, float value);
            static /*0x8c6714*/ long CompareExchange(ref long location1, long value, long comparand);
            static /*0x8c6718*/ nint CompareExchange(ref nint location1, nint value, nint comparand);
            static /*0x8c671c*/ double CompareExchange(ref double location1, double value, double comparand);
            static T CompareExchange<T>(ref T location1, T value, T comparand);
            static /*0x8c6720*/ long Exchange(ref long location1, long value);
            static /*0x8c6724*/ nint Exchange(ref nint location1, nint value);
            static /*0x8c6728*/ double Exchange(ref double location1, double value);
            static T Exchange<T>(ref T location1, T value);
            static /*0x8c672c*/ long Read(ref long location);
            static /*0x8c6730*/ int Add(ref int location1, int value);
            static /*0x8c6734*/ void MemoryBarrier();
        }

        struct LockCookie
        {
            /*0x10*/ int ThreadId;
            /*0x14*/ int ReaderLocks;
            /*0x18*/ int WriterLocks;

            /*0x8c673c*/ LockCookie(int thread_id);
            /*0x8c6748*/ int GetHashCode();
            /*0x8c67b4*/ bool Equals(object obj);
        }

        class LockQueue
        {
            /*0x10*/ System.Threading.ReaderWriterLock rwlock;
            /*0x18*/ int lockCount;

            /*0x8c684c*/ LockQueue(System.Threading.ReaderWriterLock rwlock);
            /*0x8c6874*/ bool Wait(int timeout);
            /*0x8c6a28*/ bool get_IsEmpty();
            /*0x8c6ae8*/ void Pulse();
        }

        class Mutex : System.Threading.WaitHandle
        {
        }

        class NativeEventCalls
        {
            static /*0x8c6ba0*/ nint CreateEvent_internal(bool manual, bool initial, string name, ref int errorCode);
            static /*0x8c6bf8*/ nint CreateEvent_icall(bool manual, bool initial, char* name, int name_length, ref int errorCode);
            static /*0x8c6c04*/ bool SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x8c6ce4*/ bool SetEvent_internal(nint handle);
            static /*0x8c6ce8*/ bool ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x8c6dc8*/ bool ResetEvent_internal(nint handle);
            static /*0x8c6dcc*/ void CloseEvent_internal(nint handle);
        }

        class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int seq_num;
            /*0x14*/ int state;
            /*0x18*/ int readers;
            /*0x1c*/ int writer_lock_owner;
            /*0x20*/ System.Threading.LockQueue writer_queue;
            /*0x28*/ System.Collections.Hashtable reader_locks;

            /*0x8c6dd0*/ ReaderWriterLock();
            /*0x8c6ea4*/ void Finalize();
            /*0x8c6eac*/ bool get_IsWriterLockHeld();
            /*0x8c6f88*/ void AcquireReaderLock(int millisecondsTimeout);
            /*0x8c6f90*/ void AcquireReaderLock(int millisecondsTimeout, int initialLockCount);
            /*0x8c7508*/ void AcquireWriterLock(int millisecondsTimeout);
            /*0x8c7360*/ void AcquireWriterLock(int millisecondsTimeout, int initialLockCount);
            /*0x8c7510*/ void DowngradeFromWriterLock(ref System.Threading.LockCookie lockCookie);
            /*0x8c7718*/ void ReleaseReaderLock();
            /*0x8c7a34*/ void ReleaseReaderLock(int currentCount, int releaseCount);
            /*0x8c7904*/ void ReleaseWriterLock();
            /*0x8c7b54*/ void ReleaseWriterLock(int releaseCount);
            /*0x8c7bb4*/ System.Threading.LockCookie UpgradeToWriterLock(int millisecondsTimeout);
            /*0x8c7d3c*/ System.Threading.LockCookie GetLockCookie();
            /*0x8c732c*/ bool HasWriterLock();
        }

        class RegisteredWaitHandle : System.MarshalByRefObject
        {
            /*0x18*/ System.Threading.WaitHandle _waitObject;
            /*0x20*/ System.Threading.WaitOrTimerCallback _callback;
            /*0x28*/ object _state;
            /*0x30*/ System.Threading.WaitHandle _finalEvent;
            /*0x38*/ System.Threading.ManualResetEvent _cancelEvent;
            /*0x40*/ System.TimeSpan _timeout;
            /*0x48*/ int _callsInProcess;
            /*0x4c*/ bool _executeOnlyOnce;
            /*0x4d*/ bool _unregistered;

            /*0x8c4fc8*/ RegisteredWaitHandle(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callback, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            /*0x8c7e40*/ void Wait(object state);
            /*0x8c8370*/ void DoCallBack(object timedOut);
            /*0x8c8474*/ bool Unregister(System.Threading.WaitHandle waitObject);
        }

        class InternalThread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int lock_thread_id;
            /*0x18*/ nint handle;
            /*0x20*/ nint native_handle;
            /*0x28*/ nint name_chars;
            /*0x30*/ int name_free;
            /*0x34*/ int name_length;
            /*0x38*/ System.Threading.ThreadState state;
            /*0x40*/ object abort_exc;
            /*0x48*/ int abort_state_handle;
            /*0x50*/ long thread_id;
            /*0x58*/ nint debugger_thread;
            /*0x60*/ nuint static_data;
            /*0x68*/ nint runtime_thread_info;
            /*0x70*/ object current_appcontext;
            /*0x78*/ object root_domain_thread;
            /*0x80*/ byte[] _serialized_principal;
            /*0x88*/ int _serialized_principal_version;
            /*0x90*/ nint appdomain_refs;
            /*0x98*/ int interruption_requested;
            /*0xa0*/ nint longlived;
            /*0xa8*/ bool threadpool_thread;
            /*0xa9*/ bool thread_interrupt_requested;
            /*0xac*/ int stack_size;
            /*0xb0*/ byte apartment_state;
            /*0xb4*/ int critical_region_level;
            /*0xb8*/ int managed_id;
            /*0xbc*/ int small_id;
            /*0xc0*/ nint manage_callback;
            /*0xc8*/ nint flags;
            /*0xd0*/ nint thread_pinning_ref;
            /*0xd8*/ nint abort_protected_block_count;
            /*0xe0*/ int priority;
            /*0xe8*/ nint owned_mutex;
            /*0xf0*/ nint suspended_event;
            /*0xf8*/ int self_suspended;
            /*0x100*/ nint thread_state;
            /*0x108*/ nint netcore0;
            /*0x110*/ nint netcore1;
            /*0x118*/ nint netcore2;
            /*0x120*/ nint last;

            /*0x8c8600*/ InternalThread();
            /*0x8c8568*/ void Thread_free_internal();
            /*0x8c856c*/ void Finalize();
        }

        class Timer : System.MarshalByRefObject, System.IDisposable
        {
            /*0x18*/ System.Threading.TimerCallback callback;
            /*0x20*/ object state;
            /*0x28*/ long due_time_ms;
            /*0x30*/ long period_ms;
            /*0x38*/ long next_run;
            /*0x40*/ bool disposed;
            /*0x41*/ bool is_dead;
            /*0x42*/ bool is_added;

            static /*0x8c8610*/ System.Threading.Timer.Scheduler get_scheduler();
            static /*0x8c8b64*/ long GetTimeMonotonic();
            /*0x8c8698*/ Timer(System.Threading.TimerCallback callback, object state, int dueTime, int period);
            /*0x8c8758*/ Timer(System.Threading.TimerCallback callback, object state, System.TimeSpan dueTime, System.TimeSpan period);
            /*0x8c86e4*/ void Init(System.Threading.TimerCallback callback, object state, long dueTime, long period);
            /*0x8c89c8*/ bool Change(int dueTime, int period);
            /*0x8c89e8*/ bool Change(System.TimeSpan dueTime, System.TimeSpan period);
            /*0x8c8a60*/ void Dispose();
            /*0x8c87e8*/ bool Change(long dueTime, long period, bool first);
            /*0x8c8cf8*/ void KeepRootedWhileScheduled();

            struct TimerComparer : System.Collections.IComparer, System.Collections.Generic.IComparer<System.Threading.Timer>
            {
                /*0x8c8cfc*/ int System.Collections.IComparer.Compare(object x, object y);
                /*0x8c8d94*/ int Compare(System.Threading.Timer tx, System.Threading.Timer ty);
            }

            class Scheduler
            {
                static /*0x0*/ System.Threading.Timer.Scheduler instance;
                /*0x10*/ bool needReSort;
                /*0x18*/ System.Collections.Generic.List<System.Threading.Timer> list;
                /*0x20*/ long current_next_run;
                /*0x28*/ System.Threading.ManualResetEvent changed;

                static /*0x8c96b4*/ Scheduler();
                static /*0x8c9360*/ System.Threading.Timer.Scheduler get_Instance();
                static /*0x8c9574*/ void TimerCB(object o);
                /*0x8c93b8*/ Scheduler();
                /*0x8c8e04*/ void InitScheduler();
                /*0x8c8ef8*/ void WakeupScheduler();
                /*0x8c8f14*/ void SchedulerThread();
                /*0x8c8a98*/ void Remove(System.Threading.Timer timer);
                /*0x8c8b68*/ void Change(System.Threading.Timer timer, long new_next_run);
                /*0x8c9484*/ void Add(System.Threading.Timer timer);
                /*0x8c9454*/ void InternalRemove(System.Threading.Timer timer);
                /*0x8c95ec*/ void FireTimer(System.Threading.Timer timer);
                /*0x8c904c*/ int RunSchedulerLoop();
            }
        }

        class TimerCallback : System.MulticastDelegate
        {
            /*0x8c9714*/ TimerCallback(object object, nint method);
            /*0x8c9840*/ void Invoke(object state);
        }

        class Volatile
        {
            static /*0x8c9854*/ bool Read(ref bool location);
            static /*0x8c986c*/ int Read(ref int location);
            static /*0x8c9884*/ void Write(ref int location, int value);
            static T Read<T>(ref T location);
            static void Write<T>(ref T location, T value);

            struct VolatileBoolean
            {
                /*0x10*/ bool Value;
            }

            struct VolatileInt32
            {
                /*0x10*/ int Value;
            }

            struct VolatileObject
            {
                /*0x10*/ object Value;
            }
        }

        namespace Tasks
        {
            class TaskCanceledException : System.OperationCanceledException
            {
                /*0x98*/ System.Threading.Tasks.Task _canceledTask;

                /*0x8c98a8*/ TaskCanceledException();
                /*0x8c98f4*/ TaskCanceledException(System.Threading.Tasks.Task task);
                /*0x8c9998*/ TaskCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskCompletionSource<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> _task;

                TaskCompletionSource();
                TaskCompletionSource(System.Threading.Tasks.TaskCreationOptions creationOptions);
                TaskCompletionSource(object state);
                TaskCompletionSource(object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                System.Threading.Tasks.Task<TResult> get_Task();
                void SpinUntilCompleted();
                bool TrySetException(System.Exception exception);
                void SetException(System.Exception exception);
                bool TrySetResult(TResult result);
                void SetResult(TResult result);
                bool TrySetCanceled();
                bool TrySetCanceled(System.Threading.CancellationToken cancellationToken);
                void SetCanceled();
                void SetException(System.AggregateException );
            }

            class TaskSchedulerException : System.Exception
            {
                /*0x8c99a0*/ TaskSchedulerException();
                /*0x8c9a10*/ TaskSchedulerException(System.Exception innerException);
                /*0x8c9a90*/ TaskSchedulerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskToApm
            {
                static /*0x8c9b10*/ System.IAsyncResult Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state);
                static /*0x8c9d9c*/ void End(System.IAsyncResult asyncResult);
                static TResult End<TResult>(System.IAsyncResult asyncResult);
                static /*0x8c9ca4*/ void InvokeCallbackWhenTaskCompletes(System.Threading.Tasks.Task antecedent, System.AsyncCallback callback, System.IAsyncResult asyncResult);

                class TaskWrapperAsyncResult : System.IAsyncResult
                {
                    /*0x10*/ System.Threading.Tasks.Task Task;
                    /*0x18*/ object _state;
                    /*0x20*/ bool _completedSynchronously;

                    /*0x8c9c68*/ TaskWrapperAsyncResult(System.Threading.Tasks.Task task, object state, bool completedSynchronously);
                    /*0x8c9ec8*/ object System.IAsyncResult.get_AsyncState();
                    /*0x8c9ed0*/ bool System.IAsyncResult.get_CompletedSynchronously();
                    /*0x8c9ed8*/ bool System.IAsyncResult.get_IsCompleted();
                    /*0x8c9ef0*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                }

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ System.AsyncCallback callback;
                    /*0x18*/ System.IAsyncResult asyncResult;

                    /*0x8c9e8c*/ <>c__DisplayClass3_0();
                    /*0x8c9f94*/ void <InvokeCallbackWhenTaskCompletes>b__0();
                }
            }

            struct ValueTask : System.IEquatable<System.Threading.Tasks.ValueTask>
            {
                static /*0x0*/ System.Threading.Tasks.Task s_canceledTask;
                /*0x10*/ object _obj;
                /*0x18*/ short _token;
                /*0x1a*/ bool _continueOnCapturedContext;

                static /*0x8ca92c*/ ValueTask();
                static /*0x8c9fbc*/ System.Threading.Tasks.Task get_CompletedTask();
                /*0x8ca044*/ ValueTask(System.Threading.Tasks.Task task);
                /*0x8ca07c*/ ValueTask(System.Threading.Tasks.Sources.IValueTaskSource source, short token);
                /*0x8ca0b8*/ ValueTask(object obj, short token, bool continueOnCapturedContext);
                /*0x8ca0cc*/ int GetHashCode();
                /*0x8ca0e4*/ bool Equals(object obj);
                /*0x8ca16c*/ bool Equals(System.Threading.Tasks.ValueTask other);
                /*0x8ca190*/ System.Threading.Tasks.Task AsTask();
                /*0x8ca248*/ System.Threading.Tasks.Task GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource t);
                /*0x8ca700*/ bool get_IsCompleted();
                /*0x8ca804*/ void ThrowIfCompletedUnsuccessfully();
                /*0x8ca908*/ System.Runtime.CompilerServices.ValueTaskAwaiter GetAwaiter();
                /*0x8ca914*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);

                class ValueTaskSourceAsTask : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    static /*0x0*/ System.Action<object> s_completionAction;
                    /*0x58*/ System.Threading.Tasks.Sources.IValueTaskSource _source;
                    /*0x60*/ short _token;

                    static /*0x8caa08*/ ValueTaskSourceAsTask();
                    /*0x8ca5e0*/ ValueTaskSourceAsTask(System.Threading.Tasks.Sources.IValueTaskSource source, short token);

                    class <>c
                    {
                        static /*0x0*/ System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<> <>9;

                        static /*0x8caacc*/ <>c();
                        /*0x8cab30*/ <>c();
                        /*0x8cab38*/ void <.cctor>b__4_0(object state);
                    }
                }
            }

            struct ValueTask<TResult> : System.IEquatable<System.Threading.Tasks.ValueTask<TResult>>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_canceledTask;
                /*0x0*/ object _obj;
                /*0x0*/ TResult _result;
                /*0x0*/ short _token;
                /*0x0*/ bool _continueOnCapturedContext;

                ValueTask(TResult result);
                ValueTask(System.Threading.Tasks.Task<TResult> task);
                ValueTask(System.Threading.Tasks.Sources.IValueTaskSource<TResult> source, short token);
                ValueTask(object obj, TResult result, short token, bool continueOnCapturedContext);
                int GetHashCode();
                bool Equals(object obj);
                bool Equals(System.Threading.Tasks.ValueTask<TResult> other);
                System.Threading.Tasks.Task<TResult> AsTask();
                System.Threading.Tasks.Task<TResult> GetTaskForValueTaskSource(System.Threading.Tasks.Sources.IValueTaskSource<TResult> t);
                bool get_IsCompleted();
                bool get_IsCompletedSuccessfully();
                TResult get_Result();
                System.Runtime.CompilerServices.ValueTaskAwaiter<TResult> GetAwaiter();
                System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                string ToString();

                class ValueTaskSourceAsTask<TResult> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.Action<object> s_completionAction;
                    /*0x0*/ System.Threading.Tasks.Sources.IValueTaskSource<TResult> _source;
                    /*0x0*/ short _token;

                    static ValueTaskSourceAsTask();
                    ValueTaskSourceAsTask(System.Threading.Tasks.Sources.IValueTaskSource<TResult> source, short token);

                    class <>c<TResult>
                    {
                        static /*0x0*/ System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c<TResult> <>9;

                        static <>c();
                        <>c();
                        void <.cctor>b__4_0(object state);
                    }
                }
            }

            class TaskAwaiters
            {
                static /*0x8cae54*/ System.Threading.Tasks.ForceAsyncAwaiter ForceAsync(System.Threading.Tasks.Task task);
            }

            struct ForceAsyncAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task _task;

                /*0x8cae58*/ ForceAsyncAwaiter(System.Threading.Tasks.Task task);
                /*0x8cae60*/ System.Threading.Tasks.ForceAsyncAwaiter GetAwaiter();
                /*0x8cae68*/ bool get_IsCompleted();
                /*0x8cae70*/ void GetResult();
                /*0x8cae9c*/ void UnsafeOnCompleted(System.Action action);
            }

            class DebuggerSupport
            {
                static /*0x0*/ System.Collections.Generic.LowLevelDictionary<int, System.Threading.Tasks.Task> s_activeTasks;
                static /*0x8*/ object s_activeTasksLock;

                static /*0x8cb380*/ DebuggerSupport();
                static /*0x8caef4*/ bool get_LoggingOn();
                static /*0x8caefc*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, string operationName, ulong relatedContext);
                static /*0x8caf00*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, Internal.Runtime.Augments.AsyncStatus status);
                static /*0x8caf04*/ void TraceOperationRelation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalityRelation relation);
                static /*0x8caf08*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x8caf0c*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x8caf10*/ void AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x8cafa4*/ void AddToActiveTasksNonInlined(System.Threading.Tasks.Task task);
                static /*0x8cb190*/ void RemoveFromActiveTasks(System.Threading.Tasks.Task task);
                static /*0x8cb224*/ void RemoveFromActiveTasksNonInlined(System.Threading.Tasks.Task task);
            }

            class Task<TResult> : System.Threading.Tasks.Task
            {
                static /*0x0*/ System.Threading.Tasks.TaskFactory<TResult> s_defaultFactory;
                /*0x0*/ TResult m_result;

                static System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                static System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                static System.Threading.Tasks.TaskFactory<TResult> get_Factory();
                Task();
                Task(object state, System.Threading.Tasks.TaskCreationOptions options);
                Task(TResult result);
                Task(bool canceled, TResult result, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                Task(System.Func<TResult> function);
                Task(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken);
                Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
                Task(System.Func<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                Task(System.Delegate valueSelector, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                bool TrySetResult(TResult result);
                void DangerousSetResult(TResult result);
                TResult get_Result();
                TResult get_ResultOnSuccess();
                TResult GetResultCore(bool waitCompletionNotification);
                void InnerInvoke();
                System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter();
                System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction);
                System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
            }

            class SystemThreadingTasks_FutureDebugView<TResult>
            {
            }

            class TaskFactory<TResult>
            {
                /*0x0*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x0*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x0*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x0*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static void FromAsyncCoreLogic(System.IAsyncResult iar, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, System.Threading.Tasks.Task<TResult> promise, bool requiresSynchronization);
                static System.Threading.Tasks.Task<TResult> FromAsyncImpl(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static System.Threading.Tasks.Task<TResult> FromAsyncTrim<TInstance, TArgs>(TInstance thisRef, TArgs args, System.Func<TInstance, TArgs, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                TaskFactory();
                TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> StartNew(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> StartNew(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state);
                System.Threading.Tasks.Task<TResult> FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state);

                class FromAsyncTrimPromise`1<TResult, TInstance> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.AsyncCallback s_completeFromAsyncResult;
                    /*0x0*/ TInstance m_thisRef;
                    /*0x0*/ System.Func<TInstance, System.IAsyncResult, TResult> m_endMethod;

                    static FromAsyncTrimPromise`1();
                    static void CompleteFromAsyncResult(System.IAsyncResult asyncResult);
                    FromAsyncTrimPromise`1(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                    void Complete(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod, System.IAsyncResult asyncResult, bool requiresSynchronization);
                }

                class <>c__DisplayClass35_0<TResult>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    <>c__DisplayClass35_0();
                    void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass38_0`1<TResult, TArg1>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    <>c__DisplayClass38_0`1();
                    void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass41_0`2<TResult, TArg1, TArg2>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    <>c__DisplayClass41_0`2();
                    void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }
            }

            enum TaskStatus
            {
                Created = 0,
                WaitingForActivation = 1,
                WaitingToRun = 2,
                Running = 3,
                WaitingForChildrenToComplete = 4,
                RanToCompletion = 5,
                Canceled = 6,
                Faulted = 7,
            }

            class Task : System.Threading.IThreadPoolWorkItem, System.IAsyncResult, System.IDisposable
            {
                static /*0x0*/ int s_taskIdCounter;
                static /*0x8*/ object s_taskCompletionSentinel;
                static /*0x10*/ bool s_asyncDebuggingEnabled;
                static /*0x18*/ System.Action<object> s_taskCancelCallback;
                static /*0x20*/ System.Func<System.Threading.Tasks.Task.ContingentProperties> s_createContingentProperties;
                static /*0x28*/ System.Threading.Tasks.TaskFactory <Factory>k__BackingField;
                static /*0x30*/ System.Threading.Tasks.Task <CompletedTask>k__BackingField;
                static /*0x38*/ System.Predicate<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate;
                static /*0x40*/ System.Threading.ContextCallback s_ecCallback;
                static /*0x48*/ System.Predicate<object> s_IsTaskContinuationNullPredicate;
                static /*0x50*/ System.Collections.Generic.Dictionary<int, System.Threading.Tasks.Task> s_currentActiveTasks;
                static /*0x58*/ object s_activeTasksLock;
                [ThreadStatic] static System.Threading.Tasks.Task t_currentTask;
                [ThreadStatic] static System.Threading.Tasks.StackGuard t_stackGuard;
                /*0x10*/ int m_taskId;
                /*0x18*/ System.Delegate m_action;
                /*0x20*/ object m_stateObject;
                /*0x28*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;
                /*0x30*/ System.Threading.Tasks.Task m_parent;
                /*0x38*/ int m_stateFlags;
                /*0x40*/ object m_continuationObject;
                /*0x48*/ System.Threading.Tasks.Task.ContingentProperties m_contingentProperties;

                static /*0x8d2af8*/ Task();
                static /*0x8cbf60*/ void TaskCancelCallback(object o);
                static /*0x8cc61c*/ System.Threading.Tasks.TaskCreationOptions OptionsMethod(int flags);
                static /*0x8cc7d0*/ bool AnyTaskRequiresNotifyDebuggerOfWaitCompletion(System.Threading.Tasks.Task[] tasks);
                static /*0x8ccd60*/ System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x8cce6c*/ System.Threading.Tasks.Task get_InternalCurrent();
                static /*0x8ccec4*/ System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x8ccf60*/ System.Threading.Tasks.StackGuard get_CurrentStackGuard();
                static /*0x8ccb40*/ bool IsCompletedMethod(int flags);
                static /*0x8cd540*/ System.Threading.Tasks.TaskFactory get_Factory();
                static /*0x8cd598*/ System.Threading.Tasks.Task get_CompletedTask();
                static /*0x8cf47c*/ void ExecutionContextCallback(object obj);
                static /*0x8d0dfc*/ void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.Tasks.TaskCreationOptions creationOptions, ref System.Threading.Tasks.InternalTaskOptions internalOptions);
                static System.Threading.Tasks.Task<TResult> FromResult<TResult>(TResult result);
                static /*0x8ca574*/ System.Threading.Tasks.Task FromException(System.Exception exception);
                static System.Threading.Tasks.Task<TResult> FromException<TResult>(System.Exception exception);
                static /*0x8d1750*/ System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken);
                static /*0x8ca9b4*/ System.Threading.Tasks.Task FromCanceled(System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult> FromCanceled<TResult>(System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.OperationCanceledException exception);
                static /*0x8d1818*/ System.Threading.Tasks.Task Run(System.Action action);
                static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<TResult> function);
                static /*0x8d18e8*/ System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function);
                static /*0x8d1940*/ System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function);
                static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);
                static /*0x8d1b50*/ System.Threading.Tasks.Task Delay(int millisecondsDelay);
                static /*0x8d1ba8*/ System.Threading.Tasks.Task Delay(int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static System.Threading.Tasks.Task<TResult[]> InternalWhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static /*0x8d1ff0*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks);
                static /*0x8d23c4*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
                static System.Threading.Tasks.Task<TResult> CreateUnwrapPromise<TResult>(System.Threading.Tasks.Task outerTask, bool lookForOce);
                static /*0x8d2840*/ bool AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x8d29a4*/ void RemoveFromActiveTasks(int taskId);
                /*0x8cb444*/ Task(bool canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x8cb528*/ Task();
                /*0x8cb550*/ Task(object state, System.Threading.Tasks.TaskCreationOptions creationOptions, bool promiseStyle);
                /*0x8cb7cc*/ Task(System.Action action);
                /*0x8cb8c4*/ Task(System.Action action, System.Threading.CancellationToken cancellationToken);
                /*0x8cb7fc*/ Task(System.Delegate action, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8cb674*/ void TaskConstructorCore(System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8cb97c*/ void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation);
                /*0x8caddc*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord);
                /*0x8ca520*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x8cade4*/ bool TrySetException(object exceptionObject);
                /*0x8cbce0*/ System.Threading.Tasks.TaskCreationOptions get_Options();
                /*0x8cc2a4*/ bool AtomicStateUpdate(int newBits, int illegalBits);
                /*0x8cc624*/ bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags);
                /*0x8cc6c4*/ void SetNotificationForWaitCompletion(bool enabled);
                /*0x8cc740*/ bool NotifyDebuggerOfWaitCompletionIfNecessary();
                /*0x8cc860*/ bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
                /*0x8cc888*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                /*0x8cc790*/ bool get_IsWaitNotificationEnabled();
                /*0x8cc7a8*/ void NotifyDebuggerOfWaitCompletion();
                /*0x8cc8a0*/ bool MarkStarted();
                /*0x8cb908*/ void AddNewChild();
                /*0x8cbf18*/ void DisregardChild();
                /*0x8cc8ac*/ void Start();
                /*0x8cc9a8*/ void Start(System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8cb100*/ int get_Id();
                /*0x8cd01c*/ System.AggregateException get_Exception();
                /*0x8cd1bc*/ System.Threading.Tasks.TaskStatus get_Status();
                /*0x8cd21c*/ bool get_IsCanceled();
                /*0x8cd23c*/ bool get_IsCancellationRequested();
                /*0x8cbca0*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection);
                /*0x8cd28c*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection);
                /*0x8c9974*/ System.Threading.CancellationToken get_CancellationToken();
                /*0x8cd36c*/ bool get_IsCancellationAcknowledged();
                /*0x8c9c04*/ bool get_IsCompleted();
                /*0x8cd384*/ bool get_IsCompletedSuccessfully();
                /*0x8cb8f4*/ System.Threading.Tasks.TaskCreationOptions get_CreationOptions();
                /*0x8cd3ac*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                /*0x8cd528*/ object get_AsyncState();
                /*0x8cd530*/ bool System.IAsyncResult.get_CompletedSynchronously();
                /*0x8cd538*/ System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler();
                /*0x8cd434*/ System.Threading.ManualResetEventSlim get_CompletedEvent();
                /*0x8cd5f0*/ bool get_ExceptionRecorded();
                /*0x8cd058*/ bool get_IsFaulted();
                /*0x8cd660*/ System.Threading.ExecutionContext get_CapturedContext();
                /*0x8cbc08*/ void set_CapturedContext(System.Threading.ExecutionContext value);
                /*0x8cd6d0*/ void Dispose();
                /*0x8cd73c*/ void Dispose(bool disposing);
                /*0x8ccb50*/ void ScheduleAndStart(bool needsProtection);
                /*0x8cc488*/ void AddException(object exceptionObject);
                /*0x8cd898*/ void AddException(object exceptionObject, bool representsCancellation);
                /*0x8cd070*/ System.AggregateException GetExceptions(bool includeTaskCanceledExceptions);
                /*0x8cdc18*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x8cddb0*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
                /*0x8cdde0*/ void ThrowIfExceptional(bool includeTaskCanceledExceptions);
                /*0x8cde28*/ void UpdateExceptionObservedStatus();
                /*0x8cdefc*/ bool get_IsExceptionObservedByParent();
                /*0x8cdf14*/ bool get_IsDelegateInvoked();
                /*0x8cc490*/ void Finish(bool bUserDelegateExecuted);
                /*0x8cdf2c*/ void FinishStageTwo();
                /*0x8ce710*/ void FinishStageThree();
                /*0x8ce760*/ void ProcessChildCompletion(System.Threading.Tasks.Task childTask);
                /*0x8ce1a4*/ void AddExceptionsFromChildren();
                /*0x8cf000*/ void Execute();
                /*0x8cf1b4*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x8cf1bc*/ bool ExecuteEntry(bool bPreventDoubleExecution);
                /*0x8cf4f4*/ void InnerInvoke();
                /*0x8cf0ac*/ void HandleException(System.Exception unhandledException);
                /*0x8c9e88*/ System.Runtime.CompilerServices.TaskAwaiter GetAwaiter();
                /*0x8c9e94*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);
                /*0x8cf5d4*/ void SetContinuationForAwait(System.Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext);
                /*0x8cf9fc*/ void Wait();
                /*0x8cfa08*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x8d0210*/ bool WrappedTryRunInline();
                /*0x8cfb24*/ bool InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x8d0574*/ bool SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x8d0710*/ bool SpinWait(int millisecondsTimeout);
                /*0x8cbd3c*/ bool InternalCancel(bool bCancelNonExecutingOnly);
                /*0x8d0900*/ void RecordInternalCancellationRequest();
                /*0x8d0948*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord);
                /*0x8cc32c*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x8cc368*/ void CancellationCleanupLogic();
                /*0x8cf5a8*/ void SetCancellationAcknowledged();
                /*0x8ce918*/ void FinishContinuations();
                /*0x8d0b58*/ void LogFinishCompletionNotification();
                /*0x8d0bac*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction);
                /*0x8d0d84*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x8d0c20*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x8d10fc*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x8d12f4*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8d1184*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction);
                System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x8d0fdc*/ void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options);
                /*0x8d1428*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action);
                /*0x8d082c*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, bool addBeforeOthers);
                /*0x8d1430*/ bool AddTaskContinuationComplex(object tc, bool addBeforeOthers);
                /*0x8cf8dc*/ bool AddTaskContinuation(object tc, bool addBeforeOthers);
                /*0x8cc050*/ void RemoveContinuation(object continuationObject);
                /*0x8d2ae8*/ void MarkAborted(System.Threading.ThreadAbortException e);
                /*0x8cf2d8*/ void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot);

                class ContingentProperties
                {
                    /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                    /*0x18*/ System.Threading.ManualResetEventSlim m_completionEvent;
                    /*0x20*/ System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder;
                    /*0x28*/ System.Threading.CancellationToken m_cancellationToken;
                    /*0x30*/ object m_cancellationRegistration;
                    /*0x38*/ int m_internalCancellationRequested;
                    /*0x3c*/ int m_completionCountdown;
                    /*0x40*/ System.Collections.Generic.LowLevelListWithIList<System.Threading.Tasks.Task> m_exceptionalChildren;

                    /*0x8cb504*/ ContingentProperties();
                    /*0x8ce5e0*/ void SetCompleted();
                    /*0x8ce608*/ void UnregisterCancellationCallback();
                }

                class SetOnInvokeMres : System.Threading.ManualResetEventSlim, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x8d07cc*/ SetOnInvokeMres();
                    /*0x8d2e08*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x8d2e10*/ bool get_InvokeMayRunArbitraryCode();
                }

                class DelayPromise : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    /*0x58*/ System.Threading.CancellationToken Token;
                    /*0x60*/ System.Threading.CancellationTokenRegistration Registration;
                    /*0x78*/ System.Threading.Timer Timer;

                    /*0x8d1edc*/ DelayPromise(System.Threading.CancellationToken token);
                    /*0x8d2e18*/ void Complete();
                }

                class WhenAllPromise<T> : System.Threading.Tasks.Task<T[]>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x0*/ System.Threading.Tasks.Task<T> m_tasks;
                    /*0x0*/ int m_count;

                    WhenAllPromise(System.Threading.Tasks.Task<T> tasks);
                    void Invoke(System.Threading.Tasks.Task ignored);
                    bool get_ShouldNotifyDebuggerOfWaitCompletion();
                    bool get_InvokeMayRunArbitraryCode();
                }

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.Task.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__247_0;
                    static /*0x10*/ System.Threading.TimerCallback <>9__247_1;

                    static /*0x8d2f50*/ <>c();
                    /*0x8d2fb4*/ <>c();
                    /*0x8d2fbc*/ void <Delay>b__247_0(object state);
                    /*0x8d301c*/ void <Delay>b__247_1(object state);
                    /*0x8d307c*/ System.Threading.Tasks.Task.ContingentProperties <.cctor>b__271_0();
                    /*0x8d30e8*/ bool <.cctor>b__271_1(System.Threading.Tasks.Task t);
                    /*0x8d3108*/ bool <.cctor>b__271_2(object tc);
                }
            }

            class CompletionActionInvoker : System.Threading.IThreadPoolWorkItem
            {
                /*0x10*/ System.Threading.Tasks.ITaskCompletionAction m_action;
                /*0x18*/ System.Threading.Tasks.Task m_completingTask;

                /*0x8d0b2c*/ CompletionActionInvoker(System.Threading.Tasks.ITaskCompletionAction action, System.Threading.Tasks.Task completingTask);
                /*0x8d3114*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x8d31bc*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class SystemThreadingTasks_TaskDebugView
            {
            }

            enum TaskCreationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                RunContinuationsAsynchronously = 64,
            }

            enum InternalTaskOptions
            {
                None = 0,
                InternalOptionsMask = 65280,
                ContinuationTask = 512,
                PromiseTask = 1024,
                LazyCancellation = 4096,
                QueuedByRuntime = 8192,
                DoNotDispose = 16384,
            }

            enum TaskContinuationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                LazyCancellation = 32,
                RunContinuationsAsynchronously = 64,
                NotOnRanToCompletion = 65536,
                NotOnFaulted = 131072,
                NotOnCanceled = 262144,
                OnlyOnRanToCompletion = 393216,
                OnlyOnFaulted = 327680,
                OnlyOnCanceled = 196608,
                ExecuteSynchronously = 524288,
            }

            class StackGuard
            {
                /*0x10*/ int m_inliningDepth;

                /*0x8cd014*/ StackGuard();
                /*0x8d31c0*/ bool TryBeginInliningScope();
                /*0x8d3200*/ void EndInliningScope();
            }

            struct VoidTaskResult
            {
            }

            interface ITaskCompletionAction
            {
                void Invoke(System.Threading.Tasks.Task completingTask);
                bool get_InvokeMayRunArbitraryCode();
            }

            class UnwrapPromise<TResult> : System.Threading.Tasks.Task<TResult>, System.Threading.Tasks.ITaskCompletionAction
            {
                /*0x0*/ byte _state;
                /*0x0*/ bool _lookForOce;

                UnwrapPromise(System.Threading.Tasks.Task outerTask, bool lookForOce);
                void Invoke(System.Threading.Tasks.Task completingTask);
                void InvokeCore(System.Threading.Tasks.Task completingTask);
                void InvokeCoreAsync(System.Threading.Tasks.Task completingTask);
                void ProcessCompletedOuterTask(System.Threading.Tasks.Task task);
                bool TrySetFromTask(System.Threading.Tasks.Task task, bool lookForOce);
                void ProcessInnerTask(System.Threading.Tasks.Task task);
                bool get_InvokeMayRunArbitraryCode();

                class <>c<TResult>
                {
                    static /*0x0*/ System.Threading.Tasks.UnwrapPromise.<>c<TResult> <>9;
                    static /*0x0*/ System.Threading.WaitCallback <>9__8_0;

                    static <>c();
                    <>c();
                    void <InvokeCoreAsync>b__8_0(object state);
                }
            }

            class ContinuationTaskFromTask : System.Threading.Tasks.Task
            {
                /*0x50*/ System.Threading.Tasks.Task m_antecedent;

                /*0x8d0f28*/ ContinuationTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0x8d3214*/ void InnerInvoke();
            }

            class ContinuationResultTaskFromTask<TResult> : System.Threading.Tasks.Task<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task m_antecedent;

                ContinuationResultTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                void InnerInvoke();
            }

            class ContinuationTaskFromResultTask<TAntecedentResult> : System.Threading.Tasks.Task
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                ContinuationTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                void InnerInvoke();
            }

            class ContinuationResultTaskFromResultTask<TAntecedentResult, TResult> : System.Threading.Tasks.Task<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                ContinuationResultTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                void InnerInvoke();
            }

            class TaskContinuation
            {
                static /*0x8d32e4*/ void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, bool needsProtection);
                /*0x8d3428*/ TaskContinuation();
                void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class StandardTaskContinuation : System.Threading.Tasks.TaskContinuation
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Threading.Tasks.TaskContinuationOptions m_options;
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;

                /*0x8d1308*/ StandardTaskContinuation(System.Threading.Tasks.Task task, System.Threading.Tasks.TaskContinuationOptions options, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8d3430*/ void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class SynchronizationContextAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                static /*0x8*/ System.Threading.ContextCallback s_postActionCallback;
                /*0x20*/ System.Threading.SynchronizationContext m_syncContext;

                static /*0x8d3b0c*/ SynchronizationContextAwaitTaskContinuation();
                static /*0x8d39b0*/ void PostAction(object state);
                static /*0x8d3a44*/ System.Threading.ContextCallback GetPostActionCallback();
                /*0x8cf7d8*/ SynchronizationContextAwaitTaskContinuation(System.Threading.SynchronizationContext context, System.Action action, bool flowExecutionContext);
                /*0x8d3648*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.<> <>9;

                    static /*0x8d3bd0*/ <>c();
                    /*0x8d3c34*/ <>c();
                    /*0x8d3c3c*/ void <.cctor>b__7_0(object state);
                }
            }

            class TaskSchedulerAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_scheduler;

                /*0x8cf8ac*/ TaskSchedulerAwaitTaskContinuation(System.Threading.Tasks.TaskScheduler scheduler, System.Action action, bool flowExecutionContext);
                /*0x8d3ca8*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__2_0;

                    static /*0x8d4098*/ <>c();
                    /*0x8d40fc*/ <>c();
                    /*0x8d4104*/ void <Run>b__2_0(object state);
                }
            }

            class AwaitTaskContinuation : System.Threading.Tasks.TaskContinuation, System.Threading.IThreadPoolWorkItem
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeActionCallback;
                /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                /*0x18*/ System.Action m_action;

                static /*0x8d424c*/ bool get_IsValidLocationForInlining();
                static /*0x8d44a8*/ void InvokeAction(object state);
                static /*0x8d4514*/ System.Threading.ContextCallback GetInvokeActionCallback();
                static /*0x8d09d4*/ void RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask);
                static /*0x8cf970*/ void UnsafeScheduleAction(System.Action action);
                static /*0x8d41f4*/ void ThrowAsyncIfNecessary(System.Exception exc);
                /*0x8d35c8*/ AwaitTaskContinuation(System.Action action, bool flowExecutionContext);
                /*0x8d4008*/ System.Threading.Tasks.Task CreateTask(System.Action<object> action, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8d3eec*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);
                /*0x8d4380*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x8d3834*/ void RunCallback(System.Threading.ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask);
                /*0x8d45bc*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class TaskExceptionHolder
            {
                static /*0x0*/ bool s_failFastOnUnobservedException;
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Collections.Generic.LowLevelListWithIList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions;
                /*0x20*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException;
                /*0x28*/ bool m_isHandled;

                static /*0x8d4fac*/ TaskExceptionHolder();
                static /*0x8d45c0*/ bool ShouldFailFastOnUnobservedException();
                /*0x8cda30*/ TaskExceptionHolder(System.Threading.Tasks.Task task);
                /*0x8d45c8*/ void Finalize();
                /*0x8cd644*/ bool get_ContainsFaultList();
                /*0x8cda58*/ void Add(object exceptionObject, bool representsCancellation);
                /*0x8d496c*/ void SetCancellationException(object exceptionObject);
                /*0x8d4a28*/ void AddFaultException(object exceptionObject);
                /*0x8d4f34*/ void MarkAsUnhandled();
                /*0x8cd81c*/ void MarkAsHandled(bool calledFromFinalizer);
                /*0x8cda64*/ System.AggregateException CreateExceptionObject(bool calledFromFinalizer, System.Exception includeThisException);
                /*0x8cdd24*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x8d4fa4*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
            }

            class TaskFactory
            {
                /*0x10*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x18*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x20*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x24*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static /*0x8d51fc*/ void CheckCreationOptions(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x8d5378*/ void CheckFromAsyncOptions(System.Threading.Tasks.TaskCreationOptions creationOptions, bool hasBeginMethod);
                static /*0x8d2188*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAnyLogic(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                static /*0x8d50f4*/ void CheckMultiTaskContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x8d2df4*/ TaskFactory();
                /*0x8d50a4*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8d4ff4*/ System.Threading.Tasks.TaskScheduler GetDefaultScheduler(System.Threading.Tasks.Task currTask);
                /*0x8d525c*/ System.Threading.Tasks.Task StartNew(System.Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x8d52e8*/ System.Threading.Tasks.Task StartNew(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function);
                System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state);
                System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
                System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);

                class CompleteOnInvokePromise : System.Threading.Tasks.Task<System.Threading.Tasks.Task>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x58*/ System.Collections.Generic.IList<System.Threading.Tasks.Task> _tasks;

                    /*0x8d546c*/ CompleteOnInvokePromise(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                    /*0x8d5580*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x8d57ac*/ bool get_InvokeMayRunArbitraryCode();
                }
            }

            class TaskScheduler
            {
                static /*0x0*/ System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler;
                static /*0x8*/ int s_taskSchedulerIdCounter;
                static /*0x10*/ System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException;
                static /*0x18*/ System.Threading.Lock _unobservedTaskExceptionLockObject;
                /*0x10*/ int m_taskSchedulerId;

                static /*0x8d59b0*/ TaskScheduler();
                static /*0x8d57d0*/ System.Threading.Tasks.TaskScheduler get_Default();
                static /*0x8cc908*/ System.Threading.Tasks.TaskScheduler get_Current();
                static /*0x8cf808*/ System.Threading.Tasks.TaskScheduler get_InternalCurrent();
                static /*0x8d5828*/ System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext();
                static /*0x8d4838*/ void PublishUnobservedTaskException(object sender, System.Threading.Tasks.UnobservedTaskExceptionEventArgs ueea);
                /*0x8d57c8*/ TaskScheduler();
                void QueueTask(System.Threading.Tasks.Task task);
                bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x8d02e8*/ bool TryRunInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x8d57b4*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x8d57bc*/ void NotifyWorkItemProgress();
                /*0x8d57c0*/ bool get_RequiresAtomicStartTransition();
                /*0x8d04e0*/ int get_Id();
                /*0x8d5938*/ bool TryExecuteTask(System.Threading.Tasks.Task task);

                class SystemThreadingTasks_TaskSchedulerDebugView
                {
                }
            }

            class SynchronizationContextTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                /*0x18*/ System.Threading.SynchronizationContext m_synchronizationContext;

                static /*0x8d5b80*/ SynchronizationContextTaskScheduler();
                /*0x8d5880*/ SynchronizationContextTaskScheduler();
                /*0x8d5ab4*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x8d5b38*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextTaskScheduler.<> <>9;

                    static /*0x8d5c44*/ <>c();
                    /*0x8d5ca8*/ <>c();
                    /*0x8d5cb0*/ void <.cctor>b__8_0(object s);
                }
            }

            class UnobservedTaskExceptionEventArgs : System.EventArgs
            {
                /*0x10*/ System.AggregateException m_exception;
                /*0x18*/ bool m_observed;

                /*0x8d47cc*/ UnobservedTaskExceptionEventArgs(System.AggregateException exception);
            }

            class ThreadPoolTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.ParameterizedThreadStart s_longRunningThreadWork;

                static /*0x8d6000*/ ThreadPoolTaskScheduler();
                /*0x8d5a5c*/ ThreadPoolTaskScheduler();
                /*0x8d5d34*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x8d5efc*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x8d5fe0*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x8d5fe8*/ void NotifyWorkItemProgress();
                /*0x8d5ff8*/ bool get_RequiresAtomicStartTransition();

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.ThreadPoolTaskScheduler.<> <>9;

                    static /*0x8d60c4*/ <>c();
                    /*0x8d6128*/ <>c();
                    /*0x8d6130*/ void <.cctor>b__10_0(object s);
                }
            }

            enum CausalityTraceLevel
            {
                Required = 0,
                Important = 1,
                Verbose = 2,
            }

            enum AsyncCausalityStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            enum CausalityRelation
            {
                AssignDelegate = 0,
                Join = 1,
                Choice = 2,
                Cancel = 3,
                Error = 4,
            }

            enum CausalitySynchronousWork
            {
                CompletionNotification = 0,
                ProgressNotification = 1,
                Execution = 2,
            }

            class AsyncCausalityTracer
            {
                static /*0x8d2aec*/ bool get_LoggingOn();
                static /*0x8d61b4*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext);
                static /*0x8d61b8*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.AsyncCausalityStatus status);
                static /*0x8d61bc*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x8d2af4*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
            }

            namespace Sources
            {
                enum ValueTaskSourceOnCompletedFlags
                {
                    None = 0,
                    UseSchedulingContext = 1,
                    FlowExecutionContext = 2,
                }

                enum ValueTaskSourceStatus
                {
                    Pending = 0,
                    Succeeded = 1,
                    Faulted = 2,
                    Canceled = 3,
                }

                interface IValueTaskSource
                {
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    void GetResult(short token);
                }

                interface IValueTaskSource<TResult>
                {
                    System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token);
                    void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags);
                    TResult GetResult(short token);
                }
            }
        }
    }

    namespace Text
    {
        class ASCIIEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.ASCIIEncoding.ASCIIEncodingSealed s_default;

            static /*0x8d828c*/ ASCIIEncoding();
            /*0x8d61c0*/ ASCIIEncoding();
            /*0x8d61cc*/ void SetDefaultFallbacks();
            /*0x8d6324*/ int GetByteCount(char[] chars, int index, int count);
            /*0x8d64a8*/ int GetByteCount(string chars);
            /*0x8d6538*/ int GetByteCount(char* chars, int count);
            /*0x8d6610*/ int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x8d6870*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x8d6aec*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x8d6bec*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x8d6d70*/ int GetCharCount(byte* bytes, int count);
            /*0x8d6e48*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x8d70c4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x8d71c4*/ string GetString(byte[] bytes, int byteIndex, int byteCount);
            /*0x8d738c*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x8d7720*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x8d7b4c*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x8d7ce0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x8d7f78*/ int GetMaxByteCount(int charCount);
            /*0x8d8080*/ int GetMaxCharCount(int byteCount);
            /*0x8d8184*/ System.Text.Decoder GetDecoder();
            /*0x8d8228*/ System.Text.Encoder GetEncoder();

            class ASCIIEncodingSealed : System.Text.ASCIIEncoding
            {
                /*0x8d8300*/ ASCIIEncodingSealed();
            }
        }

        class Decoder
        {
            /*0x10*/ System.Text.DecoderFallback _fallback;
            /*0x18*/ System.Text.DecoderFallbackBuffer _fallbackBuffer;

            /*0x8d835c*/ Decoder();
            /*0x8d8364*/ System.Text.DecoderFallback get_Fallback();
            /*0x8d7c9c*/ System.Text.DecoderFallbackBuffer get_FallbackBuffer();
            /*0x8d836c*/ bool get_InternalHasFallbackBuffer();
            /*0x8d837c*/ void Reset();
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x8d8484*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x8d8490*/ int GetCharCount(byte* bytes, int count, bool flush);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x8d85f4*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x8d8600*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x8d8818*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars, bool flush);
            /*0x8d88c0*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x8d8bb8*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
        }

        class InternalDecoderBestFitFallback : System.Text.DecoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;
            /*0x20*/ char _cReplacement;

            /*0x8d8de4*/ InternalDecoderBestFitFallback(System.Text.Encoding encoding);
            /*0x8d8e1c*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x8d8fa4*/ int get_MaxCharCount();
            /*0x8d8fac*/ bool Equals(object value);
            /*0x8d9054*/ int GetHashCode();
        }

        class InternalDecoderBestFitFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x20*/ char _cBestFit;
            /*0x24*/ int _iCount;
            /*0x28*/ int _iSize;
            /*0x30*/ System.Text.InternalDecoderBestFitFallback _oFallback;

            static /*0x8d9078*/ object get_InternalSyncObject();
            /*0x8d8e7c*/ InternalDecoderBestFitFallbackBuffer(System.Text.InternalDecoderBestFitFallback fallback);
            /*0x8d911c*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x8d929c*/ char GetNextChar();
            /*0x8d92dc*/ int get_Remaining();
            /*0x8d92e8*/ void Reset();
            /*0x8d92f8*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x8d915c*/ char TryBestFit(byte[] bytesCheck);
        }

        class DecoderExceptionFallback : System.Text.DecoderFallback
        {
            /*0x8d9300*/ DecoderExceptionFallback();
            /*0x8d9308*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x8d936c*/ int get_MaxCharCount();
            /*0x8d9374*/ bool Equals(object value);
            /*0x8d93d0*/ int GetHashCode();
        }

        class DecoderExceptionFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x8d9364*/ DecoderExceptionFallbackBuffer();
            /*0x8d93d8*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x8d95b4*/ char GetNextChar();
            /*0x8d95bc*/ int get_Remaining();
            /*0x8d93e0*/ void Throw(byte[] bytesUnknown, int index);
        }

        class DecoderFallbackException : System.ArgumentException
        {
            /*0x98*/ byte[] _bytesUnknown;
            /*0xa0*/ int _index;

            /*0x8d95f4*/ DecoderFallbackException();
            /*0x8d95c4*/ DecoderFallbackException(string message, byte[] bytesUnknown, int index);
            /*0x8d9650*/ DecoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class DecoderFallback
        {
            static /*0x0*/ System.Text.DecoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.DecoderFallback s_exceptionFallback;

            static /*0x8d6288*/ System.Text.DecoderFallback get_ReplacementFallback();
            static /*0x8d96a0*/ System.Text.DecoderFallback get_ExceptionFallback();
            /*0x8d8e14*/ DecoderFallback();
            System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            int get_MaxCharCount();
        }

        class DecoderFallbackBuffer
        {
            /*0x10*/ byte* byteStart;
            /*0x18*/ char* charEnd;

            /*0x8d9114*/ DecoderFallbackBuffer();
            bool Fallback(byte[] bytesUnknown, int index);
            char GetNextChar();
            int get_Remaining();
            /*0x8d9744*/ void Reset();
            /*0x8d7f68*/ void InternalReset();
            /*0x8d7cd8*/ void InternalInitialize(byte* byteStart, char* charEnd);
            /*0x8d976c*/ bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars);
            /*0x8d98fc*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x8d9a6c*/ void ThrowLastBytesRecursive(byte[] bytesUnknown);
        }

        class DecoderNLS : System.Text.Decoder
        {
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ bool _mustFlush;
            /*0x29*/ bool _throwOnOverflow;
            /*0x2c*/ int _bytesUsed;

            /*0x8d81e4*/ DecoderNLS(System.Text.Encoding encoding);
            /*0x8d9c68*/ void Reset();
            /*0x8d9c80*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x8d9c90*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x8d9e68*/ int GetCharCount(byte* bytes, int count, bool flush);
            /*0x8d9f60*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x8d9f70*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x8da208*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x8da328*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x8da5f8*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x8da7a4*/ bool get_MustFlush();
            /*0x8da7ac*/ bool get_HasState();
            /*0x8da7b4*/ void ClearMustFlush();
        }

        class DecoderReplacementFallback : System.Text.DecoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0x8d9658*/ DecoderReplacementFallback();
            /*0x8da964*/ DecoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x8da7bc*/ DecoderReplacementFallback(string replacement);
            /*0x8daa68*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x8daac4*/ string get_DefaultString();
            /*0x8daacc*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x8dab68*/ int get_MaxCharCount();
            /*0x8dab84*/ bool Equals(object value);
            /*0x8dac04*/ int GetHashCode();
        }

        class DecoderReplacementFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x20*/ string _strDefault;
            /*0x28*/ int _fallbackCount;
            /*0x2c*/ int _fallbackIndex;

            /*0x8dab2c*/ DecoderReplacementFallbackBuffer(System.Text.DecoderReplacementFallback fallback);
            /*0x8dac24*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x8dac68*/ char GetNextChar();
            /*0x8dacb8*/ int get_Remaining();
            /*0x8dacc4*/ void Reset();
            /*0x8dacd4*/ int InternalFallback(byte[] bytes, byte* pBytes);
        }

        class Encoder
        {
            /*0x10*/ System.Text.EncoderFallback _fallback;
            /*0x18*/ System.Text.EncoderFallbackBuffer _fallbackBuffer;

            /*0x8dacf0*/ Encoder();
            /*0x8dacf8*/ System.Text.EncoderFallback get_Fallback();
            /*0x8d7694*/ System.Text.EncoderFallbackBuffer get_FallbackBuffer();
            /*0x8d7684*/ bool get_InternalHasFallbackBuffer();
            /*0x8dad00*/ void Reset();
            int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x8dade4*/ int GetByteCount(char* chars, int count, bool flush);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x8daf50*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x8db168*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x8db460*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
        }

        class InternalEncoderBestFitFallback : System.Text.EncoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;

            /*0x8db68c*/ InternalEncoderBestFitFallback(System.Text.Encoding encoding);
            /*0x8db6bc*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x8db844*/ int get_MaxCharCount();
            /*0x8db84c*/ bool Equals(object value);
            /*0x8db910*/ int GetHashCode();
        }

        class InternalEncoderBestFitFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x30*/ char _cBestFit;
            /*0x38*/ System.Text.InternalEncoderBestFitFallback _oFallback;
            /*0x40*/ int _iCount;
            /*0x44*/ int _iSize;

            static /*0x8db934*/ object get_InternalSyncObject();
            /*0x8db71c*/ InternalEncoderBestFitFallbackBuffer(System.Text.InternalEncoderBestFitFallback fallback);
            /*0x8db9d8*/ bool Fallback(char charUnknown, int index);
            /*0x8dbadc*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x8dbcbc*/ char GetNextChar();
            /*0x8dbcfc*/ bool MovePrevious();
            /*0x8dbd28*/ int get_Remaining();
            /*0x8dbd34*/ void Reset();
            /*0x8dba08*/ char TryBestFit(char cUnknown);
        }

        class EncoderExceptionFallback : System.Text.EncoderFallback
        {
            /*0x8dbd48*/ EncoderExceptionFallback();
            /*0x8dbd50*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x8dbdb4*/ int get_MaxCharCount();
            /*0x8dbdbc*/ bool Equals(object value);
            /*0x8dbe18*/ int GetHashCode();
        }

        class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x8dbdac*/ EncoderExceptionFallbackBuffer();
            /*0x8dbe20*/ bool Fallback(char charUnknown, int index);
            /*0x8dbf04*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x8dc35c*/ char GetNextChar();
            /*0x8dc364*/ bool MovePrevious();
            /*0x8dc36c*/ int get_Remaining();
        }

        class EncoderFallbackException : System.ArgumentException
        {
            /*0x98*/ char _charUnknown;
            /*0x9a*/ char _charUnknownHigh;
            /*0x9c*/ char _charUnknownLow;
            /*0xa0*/ int _index;

            /*0x8dc374*/ EncoderFallbackException();
            /*0x8dbed4*/ EncoderFallbackException(string message, char charUnknown, int index);
            /*0x8dc164*/ EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index);
            /*0x8dc3d0*/ EncoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class EncoderFallback
        {
            static /*0x0*/ System.Text.EncoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.EncoderFallback s_exceptionFallback;

            static /*0x8d61ec*/ System.Text.EncoderFallback get_ReplacementFallback();
            static /*0x8dc3d8*/ System.Text.EncoderFallback get_ExceptionFallback();
            /*0x8db6b4*/ EncoderFallback();
            System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            int get_MaxCharCount();
        }

        class EncoderFallbackBuffer
        {
            /*0x10*/ char* charStart;
            /*0x18*/ char* charEnd;
            /*0x20*/ System.Text.EncoderNLS encoder;
            /*0x28*/ bool setEncoder;
            /*0x29*/ bool bUsedEncoder;
            /*0x2a*/ bool bFallingBack;
            /*0x2c*/ int iRecursionCount;

            /*0x8db9d0*/ EncoderFallbackBuffer();
            bool Fallback(char charUnknown, int index);
            bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            char GetNextChar();
            bool MovePrevious();
            int get_Remaining();
            /*0x8dc478*/ void Reset();
            /*0x8dc4a0*/ void InternalReset();
            /*0x8d76d0*/ void InternalInitialize(char* charStart, char* charEnd, System.Text.EncoderNLS encoder, bool setEncoder);
            /*0x8d76ec*/ char InternalGetNextChar();
            /*0x8dc4b8*/ bool InternalFallback(char ch, ref char* chars);
            /*0x8dc660*/ void ThrowLastCharRecursive(int charRecursive);
        }

        class EncoderNLS : System.Text.Encoder
        {
            /*0x20*/ char _charLeftOver;
            /*0x28*/ System.Text.Encoding _encoding;
            /*0x30*/ bool _mustFlush;
            /*0x31*/ bool _throwOnOverflow;
            /*0x34*/ int _charsUsed;

            /*0x124fde0*/ EncoderNLS(System.Text.Encoding encoding);
            /*0x124fe24*/ void Reset();
            /*0x124fe44*/ int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x125001c*/ int GetByteCount(char* chars, int count, bool flush);
            /*0x1250114*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x12503ac*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x12504cc*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x1250798*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x1250940*/ System.Text.Encoding get_Encoding();
            /*0x1250948*/ bool get_MustFlush();
            /*0x1250950*/ bool get_HasState();
            /*0x1250960*/ void ClearMustFlush();
        }

        class EncoderReplacementFallback : System.Text.EncoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0x1250968*/ EncoderReplacementFallback();
            /*0x1250b58*/ EncoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12509b0*/ EncoderReplacementFallback(string replacement);
            /*0x1250c5c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1250cb8*/ string get_DefaultString();
            /*0x1250cc0*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x1250d68*/ int get_MaxCharCount();
            /*0x1250d84*/ bool Equals(object value);
            /*0x1250e04*/ int GetHashCode();
        }

        class EncoderReplacementFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x30*/ string _strDefault;
            /*0x38*/ int _fallbackCount;
            /*0x3c*/ int _fallbackIndex;

            /*0x1250d20*/ EncoderReplacementFallbackBuffer(System.Text.EncoderReplacementFallback fallback);
            /*0x1250e24*/ bool Fallback(char charUnknown, int index);
            /*0x1250f74*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x125119c*/ char GetNextChar();
            /*0x12511ec*/ bool MovePrevious();
            /*0x125121c*/ int get_Remaining();
            /*0x1251228*/ void Reset();
        }

        class EncodingNLS : System.Text.Encoding
        {
            /*0x125123c*/ EncodingNLS(int codePage);
            /*0x1251244*/ int GetByteCount(char[] chars, int index, int count);
            /*0x12513c8*/ int GetByteCount(string s);
            /*0x1251458*/ int GetByteCount(char* chars, int count);
            /*0x1251530*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x1251790*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x1251a0c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x1251b0c*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x1251c90*/ int GetCharCount(byte* bytes, int count);
            /*0x1251d68*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x1251fe4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x12520e4*/ string GetString(byte[] bytes, int index, int count);
            /*0x12522ac*/ System.Text.Decoder GetDecoder();
            /*0x1252310*/ System.Text.Encoder GetEncoder();
        }

        class EncodingProvider
        {
            static /*0x0*/ object s_InternalSyncObject;
            static /*0x8*/ System.Text.EncodingProvider[] s_providers;

            static /*0x1252718*/ EncodingProvider();
            static /*0x125246c*/ System.Text.Encoding GetEncodingFromProvider(int codepage);
            static /*0x1252548*/ System.Text.Encoding GetEncodingFromProvider(string encodingName);
            static /*0x1252624*/ System.Text.Encoding GetEncodingFromProvider(int codepage, System.Text.EncoderFallback enc, System.Text.DecoderFallback dec);
            System.Text.Encoding GetEncoding(string name);
            System.Text.Encoding GetEncoding(int codepage);
            /*0x1252370*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
        }

        class Latin1Encoding : System.Text.EncodingNLS, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Text.Latin1Encoding s_default;
            static /*0x8*/ char[] arrayCharBestFit;

            static /*0x1253100*/ Latin1Encoding();
            /*0x1252790*/ Latin1Encoding();
            /*0x125279c*/ Latin1Encoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12527e8*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12528d0*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x1252acc*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x1252e20*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x1252e28*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x1252e9c*/ int GetMaxByteCount(int charCount);
            /*0x1252fa4*/ int GetMaxCharCount(int byteCount);
            /*0x12530a8*/ char[] GetBestFitUnicodeToBytesData();
        }

        enum NormalizationForm
        {
            FormC = 1,
            FormD = 2,
            FormKC = 5,
            FormKD = 6,
        }

        class StringBuilder : System.Runtime.Serialization.ISerializable
        {
            static int DefaultCapacity = 16;
            static string CapacityField = "Capacity";
            static string MaxCapacityField = "m_MaxCapacity";
            static string StringValueField = "m_StringValue";
            static string ThreadIDField = "m_currentThread";
            static int MaxChunkSize = 8000;
            static int IndexLimit = 1000000;
            static int WidthLimit = 1000000;
            /*0x10*/ char[] m_ChunkChars;
            /*0x18*/ System.Text.StringBuilder m_ChunkPrevious;
            /*0x20*/ int m_ChunkLength;
            /*0x24*/ int m_ChunkOffset;
            /*0x28*/ int m_MaxCapacity;

            static /*0x1256698*/ void FormatError();
            static /*0x1253694*/ void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count);
            static /*0x12550e0*/ void ThreadSafeCopy(char[] source, int sourceIndex, System.Span<char> destination, int destinationIndex, int count);
            /*0x12531c0*/ StringBuilder();
            /*0x1253224*/ StringBuilder(int capacity);
            /*0x1253400*/ StringBuilder(string value);
            /*0x125341c*/ StringBuilder(string value, int capacity);
            /*0x1253438*/ StringBuilder(string value, int startIndex, int length, int capacity);
            /*0x125322c*/ StringBuilder(int capacity, int maxCapacity);
            /*0x1253760*/ StringBuilder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1257160*/ StringBuilder(System.Text.StringBuilder from);
            /*0x12571a4*/ StringBuilder(int size, int maxCapacity, System.Text.StringBuilder previousBlock);
            /*0x1253a5c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1253ba4*/ int get_Capacity();
            /*0x1253bc8*/ void set_Capacity(int value);
            /*0x1253d50*/ int get_MaxCapacity();
            /*0x1253d58*/ string ToString();
            /*0x1253e98*/ string ToString(int startIndex, int length);
            /*0x1254244*/ System.Text.StringBuilder Clear();
            /*0x1253d44*/ int get_Length();
            /*0x1254260*/ void set_Length(int value);
            /*0x125461c*/ char get_Chars(int index);
            /*0x12546ac*/ void set_Chars(int index, char value);
            /*0x12544b0*/ System.Text.StringBuilder Append(char value, int repeatCount);
            /*0x1254908*/ System.Text.StringBuilder Append(char[] value, int startIndex, int charCount);
            /*0x1254bac*/ System.Text.StringBuilder Append(string value);
            /*0x1254cb0*/ void AppendHelper(string value);
            /*0x1254ce8*/ System.Text.StringBuilder Append(string value, int startIndex, int count);
            /*0x1254e2c*/ System.Text.StringBuilder Append(System.Text.StringBuilder value);
            /*0x1254e48*/ System.Text.StringBuilder AppendCore(System.Text.StringBuilder value, int startIndex, int count);
            /*0x125509c*/ System.Text.StringBuilder AppendLine();
            /*0x12550bc*/ System.Text.StringBuilder AppendLine(string value);
            /*0x125406c*/ void CopyTo(int sourceIndex, System.Span<char> destination, int count);
            /*0x1255250*/ System.Text.StringBuilder Remove(int startIndex, int length);
            /*0x12554e0*/ System.Text.StringBuilder Append(char value);
            /*0x1255530*/ System.Text.StringBuilder Append(byte value);
            /*0x1255588*/ System.Text.StringBuilder Append(int value);
            /*0x12555e0*/ System.Text.StringBuilder Append(long value);
            /*0x1255638*/ System.Text.StringBuilder Append(float value);
            /*0x1255690*/ System.Text.StringBuilder Append(uint value);
            System.Text.StringBuilder AppendSpanFormattable<T>(T value);
            /*0x12556e8*/ System.Text.StringBuilder Append(object value);
            /*0x1255720*/ System.Text.StringBuilder Append(char[] value);
            /*0x1255748*/ System.Text.StringBuilder Insert(int index, string value);
            /*0x12558d0*/ System.Text.StringBuilder Insert(int index, char value);
            /*0x12558fc*/ System.Text.StringBuilder AppendFormat(string format, object arg0);
            /*0x1256460*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1);
            /*0x12564bc*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2);
            /*0x125651c*/ System.Text.StringBuilder AppendFormat(string format, object[] args);
            /*0x12565d8*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0);
            /*0x1256634*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
            /*0x1255954*/ System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
            /*0x12566e8*/ System.Text.StringBuilder Replace(string oldValue, string newValue);
            /*0x12566f8*/ System.Text.StringBuilder Replace(string oldValue, string newValue, int startIndex, int count);
            /*0x1254a54*/ System.Text.StringBuilder Append(char* value, int valueCount);
            /*0x12557fc*/ void Insert(int index, char* value, int valueCount);
            /*0x1256b00*/ void ReplaceAllInChunk(int[] replacements, int replacementsCount, System.Text.StringBuilder sourceChunk, int removeCount, string value);
            /*0x1256a28*/ bool StartsWith(System.Text.StringBuilder chunk, int indexInChunk, int count, string value);
            /*0x1256f6c*/ void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref int indexInChunk, char* value, int count);
            /*0x12545f4*/ System.Text.StringBuilder FindChunkForIndex(int index);
            /*0x12570b4*/ System.Span<char> get_RemainingCurrentChunk();
            /*0x1257074*/ System.Text.StringBuilder Next(System.Text.StringBuilder chunk);
            /*0x1254768*/ void ExpandByABlock(int minBlockCharCount);
            /*0x1256cbc*/ void MakeRoom(int index, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk, bool doNotMoveFollowingChars);
            /*0x1255390*/ void Remove(int startIndex, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk);
        }

        class StringBuilderCache
        {
            [ThreadStatic] static System.Text.StringBuilder t_cachedInstance;

            static /*0x1257230*/ System.Text.StringBuilder Acquire(int capacity);
            static /*0x1257300*/ void Release(System.Text.StringBuilder sb);
            static /*0x1257380*/ string GetStringAndRelease(System.Text.StringBuilder sb);
        }

        class UTF32Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF32Encoding s_default;
            static /*0x8*/ System.Text.UTF32Encoding s_bigEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            /*0x38*/ bool _emitUTF32ByteOrderMark;
            /*0x39*/ bool _isThrowException;
            /*0x3a*/ bool _bigEndian;

            static /*0x1259a48*/ UTF32Encoding();
            /*0x12573bc*/ UTF32Encoding();
            /*0x1257454*/ UTF32Encoding(bool bigEndian, bool byteOrderMark);
            /*0x12573e4*/ UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
            /*0x1257494*/ void SetDefaultFallbacks();
            /*0x1257568*/ int GetByteCount(char[] chars, int index, int count);
            /*0x12576ec*/ int GetByteCount(string s);
            /*0x125777c*/ int GetByteCount(char* chars, int count);
            /*0x1257854*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x1257ab4*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x1257d30*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x1257e30*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x1257fb4*/ int GetCharCount(byte* bytes, int count);
            /*0x125808c*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x1258308*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x1258408*/ string GetString(byte[] bytes, int index, int count);
            /*0x12585d0*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x12588a8*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x1258c8c*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x1258fd4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x1258c70*/ uint GetSurrogate(char cHigh, char cLow);
            /*0x12593d0*/ char GetHighSurrogate(uint iChar);
            /*0x12593e4*/ char GetLowSurrogate(uint iChar);
            /*0x12593f0*/ System.Text.Decoder GetDecoder();
            /*0x125945c*/ System.Text.Encoder GetEncoder();
            /*0x12594bc*/ int GetMaxByteCount(int charCount);
            /*0x12595c4*/ int GetMaxCharCount(int byteCount);
            /*0x1259694*/ byte[] GetPreamble();
            /*0x1259798*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x1259908*/ bool Equals(object value);
            /*0x12599cc*/ int GetHashCode();

            class UTF32Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int iChar;
                /*0x34*/ int readByteCount;

                /*0x1259454*/ UTF32Decoder(System.Text.UTF32Encoding encoding);
                /*0x1259b88*/ void Reset();
                /*0x1259ba8*/ bool get_HasState();
            }
        }

        class UTF7Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF7Encoding s_default;
            /*0x38*/ byte[] _base64Bytes;
            /*0x40*/ sbyte[] _base64Values;
            /*0x48*/ bool[] _directEncode;
            /*0x50*/ bool _allowOptionals;

            static /*0x125b970*/ UTF7Encoding();
            /*0x1259bb8*/ UTF7Encoding();
            /*0x1259bdc*/ UTF7Encoding(bool allowOptionals);
            /*0x1259c0c*/ void MakeTables();
            /*0x1259e90*/ void SetDefaultFallbacks();
            /*0x1259f50*/ bool Equals(object value);
            /*0x125a020*/ int GetHashCode();
            /*0x125a08c*/ int GetByteCount(char[] chars, int index, int count);
            /*0x125a210*/ int GetByteCount(string s);
            /*0x125a2a0*/ int GetByteCount(char* chars, int count);
            /*0x125a378*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x125a5d8*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x125a854*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x125a954*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x125aad8*/ int GetCharCount(byte* bytes, int count);
            /*0x125abb0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x125ae2c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x125af2c*/ string GetString(byte[] bytes, int index, int count);
            /*0x125b0f4*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x125b110*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x125b4ac*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x125b4c8*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x125b764*/ System.Text.Decoder GetDecoder();
            /*0x125b7d0*/ System.Text.Encoder GetEncoder();
            /*0x125b834*/ int GetMaxByteCount(int charCount);
            /*0x125b8f8*/ int GetMaxCharCount(int byteCount);

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;
                /*0x34*/ int bitCount;
                /*0x38*/ bool firstByte;

                /*0x125b7c8*/ Decoder(System.Text.UTF7Encoding encoding);
                /*0x125b9e4*/ void Reset();
                /*0x125ba0c*/ bool get_HasState();
            }

            class Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int bits;
                /*0x3c*/ int bitCount;

                /*0x125b830*/ Encoder(System.Text.UTF7Encoding encoding);
                /*0x125ba1c*/ void Reset();
                /*0x125ba40*/ bool get_HasState();
            }

            class DecoderUTF7Fallback : System.Text.DecoderFallback
            {
                /*0x1259f48*/ DecoderUTF7Fallback();
                /*0x125ba60*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
                /*0x125bad4*/ int get_MaxCharCount();
                /*0x125badc*/ bool Equals(object value);
                /*0x125bb38*/ int GetHashCode();
            }

            class DecoderUTF7FallbackBuffer : System.Text.DecoderFallbackBuffer
            {
                /*0x20*/ char cFallback;
                /*0x24*/ int iCount;
                /*0x28*/ int iSize;

                /*0x125bac4*/ DecoderUTF7FallbackBuffer(System.Text.UTF7Encoding.DecoderUTF7Fallback fallback);
                /*0x125bb40*/ bool Fallback(byte[] bytesUnknown, int index);
                /*0x125bb80*/ char GetNextChar();
                /*0x125bba0*/ int get_Remaining();
                /*0x125bbac*/ void Reset();
                /*0x125bbbc*/ int InternalFallback(byte[] bytes, byte* pBytes);
            }
        }

        class UTF8Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF8Encoding.UTF8EncodingSealed s_default;
            static /*0x8*/ byte[] s_preamble;
            /*0x38*/ bool _emitUTF8Identifier;
            /*0x39*/ bool _isThrowException;

            static /*0x125f14c*/ UTF8Encoding();
            static /*0x125d440*/ int PtrDiff(char* a, char* b);
            static /*0x125d44c*/ int PtrDiff(byte* a, byte* b);
            static /*0x125d42c*/ bool InRange(int ch, int start, int end);
            /*0x125bc34*/ UTF8Encoding();
            /*0x125bc54*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier);
            /*0x125bc84*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
            /*0x125bce4*/ void SetDefaultFallbacks();
            /*0x125bdb8*/ int GetByteCount(char[] chars, int index, int count);
            /*0x125bf3c*/ int GetByteCount(string chars);
            /*0x125bfcc*/ int GetByteCount(char* chars, int count);
            /*0x125c0a4*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x125c304*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x125c580*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x125c680*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x125c804*/ int GetCharCount(byte* bytes, int count);
            /*0x125c8dc*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x125cb58*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x125cc58*/ string GetString(byte[] bytes, int index, int count);
            /*0x125ce20*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x125d454*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x125db9c*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x125e11c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x125e8a0*/ bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback, ref char* pTarget);
            /*0x125e0dc*/ int FallbackInvalidByteSequence(byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback);
            /*0x125e914*/ byte[] GetBytesUnknown(ref byte* pSrc, int ch);
            /*0x125eb08*/ System.Text.Decoder GetDecoder();
            /*0x125eb74*/ System.Text.Encoder GetEncoder();
            /*0x125ebd8*/ int GetMaxByteCount(int charCount);
            /*0x125ece0*/ int GetMaxCharCount(int byteCount);
            /*0x125ede8*/ byte[] GetPreamble();
            /*0x125eebc*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x125f01c*/ bool Equals(object value);
            /*0x125f0ec*/ int GetHashCode();

            class UTF8EncodingSealed : System.Text.UTF8Encoding
            {
                /*0x125f21c*/ UTF8EncodingSealed(bool encoderShouldEmitUTF8Identifier);
                /*0x125f294*/ System.ReadOnlySpan<byte> get_Preamble();
            }

            class UTF8Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int surrogateChar;

                /*0x125ebd4*/ UTF8Encoder(System.Text.UTF8Encoding encoding);
                /*0x125f368*/ void Reset();
                /*0x125f388*/ bool get_HasState();
            }

            class UTF8Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;

                /*0x125eb6c*/ UTF8Decoder(System.Text.UTF8Encoding encoding);
                /*0x125f398*/ void Reset();
                /*0x125f3b8*/ bool get_HasState();
            }
        }

        class UnicodeEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UnicodeEncoding s_bigEndianDefault;
            static /*0x8*/ System.Text.UnicodeEncoding s_littleEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            static /*0x20*/ ulong highLowPatternMask;
            /*0x38*/ bool isThrowException;
            /*0x39*/ bool bigEndian;
            /*0x3a*/ bool byteOrderMark;

            static /*0x126294c*/ UnicodeEncoding();
            /*0x125f3c8*/ UnicodeEncoding();
            /*0x125f3fc*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark);
            /*0x125f444*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
            /*0x125f4bc*/ void SetDefaultFallbacks();
            /*0x125f590*/ int GetByteCount(char[] chars, int index, int count);
            /*0x125f714*/ int GetByteCount(string s);
            /*0x125f7a4*/ int GetByteCount(char* chars, int count);
            /*0x125f87c*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x125fadc*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x125fd58*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x125fe58*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x125ffdc*/ int GetCharCount(byte* bytes, int count);
            /*0x12600b4*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x1260330*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x1260430*/ string GetString(byte[] bytes, int index, int count);
            /*0x12605f8*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x1260b64*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x1261298*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x1261958*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x1262278*/ System.Text.Encoder GetEncoder();
            /*0x12622d8*/ System.Text.Decoder GetDecoder();
            /*0x126233c*/ byte[] GetPreamble();
            /*0x1262438*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x12625a8*/ int GetMaxByteCount(int charCount);
            /*0x12626b0*/ int GetMaxCharCount(int byteCount);
            /*0x12627bc*/ bool Equals(object value);
            /*0x12628d0*/ int GetHashCode();

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int lastByte;
                /*0x34*/ char lastChar;

                /*0x12d4f88*/ Decoder(System.Text.UnicodeEncoding encoding);
                /*0x12d4f98*/ void Reset();
                /*0x12d4fc0*/ bool get_HasState();
            }
        }

        struct ValueStringBuilder
        {
            /*0x10*/ char[] _arrayToReturnToPool;
            /*0x18*/ System.Span<char> _chars;
            /*0x28*/ int _pos;

            /*0x12d4fe4*/ ValueStringBuilder(System.Span<char> initialBuffer);
            /*0x12d4ff4*/ int get_Length();
            /*0x12d4ffc*/ ref char get_Item(int index);
            /*0x12d5020*/ string ToString();
            /*0x12d51b8*/ bool TryCopyTo(System.Span<char> destination, ref int charsWritten);
            /*0x12d5444*/ void Append(char c);
            /*0x12d5540*/ void Append(string s);
            /*0x12d55ec*/ void AppendSlow(string s);
            /*0x12d5960*/ void Append(char c, int count);
            /*0x12d5a3c*/ void Append(char* value, int length);
            /*0x12d5b1c*/ System.Span<char> AppendSpan(int length);
            /*0x12d54c0*/ void GrowAndAppend(char c);
            /*0x12d571c*/ void Grow(int requiredAdditionalCapacity);
            /*0x12d5bdc*/ void Dispose();
        }

        struct ValueUtf8Converter
        {
            /*0x10*/ byte[] _arrayToReturnToPool;
            /*0x18*/ System.Span<byte> _bytes;

            /*0x12d5cd4*/ ValueUtf8Converter(System.Span<byte> initialBuffer);
            /*0x12d5ce0*/ System.Span<byte> ConvertAndTerminateString(System.ReadOnlySpan<char> value);
            /*0x12d5fb0*/ void Dispose();
        }

        class Encoding : System.ICloneable
        {
            static /*0x0*/ System.Text.Encoding defaultEncoding;
            static /*0x8*/ System.Text.Encoding unicodeEncoding;
            static /*0x10*/ System.Text.Encoding bigEndianUnicode;
            static /*0x18*/ System.Text.Encoding utf7Encoding;
            static /*0x20*/ System.Text.Encoding utf8Encoding;
            static /*0x28*/ System.Text.Encoding utf32Encoding;
            static /*0x30*/ System.Text.Encoding asciiEncoding;
            static /*0x38*/ System.Text.Encoding latin1Encoding;
            static /*0x40*/ System.Collections.Generic.Dictionary<int, System.Text.Encoding> encodings;
            static /*0x48*/ object s_InternalSyncObject;
            /*0x10*/ int m_codePage;
            /*0x18*/ System.Globalization.CodePageDataItem dataItem;
            /*0x20*/ bool m_deserializedFromEverett;
            /*0x21*/ bool m_isReadOnly;
            /*0x28*/ System.Text.EncoderFallback encoderFallback;
            /*0x30*/ System.Text.DecoderFallback decoderFallback;

            static /*0x12d6844*/ object get_InternalSyncObject();
            static /*0x12d68e4*/ System.Text.Encoding GetEncoding(int codepage);
            static /*0x12d7d60*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
            static /*0x12d7ff4*/ System.Text.Encoding GetEncoding(string name);
            static /*0x12d7504*/ System.Text.Encoding get_ASCII();
            static /*0x12d75ac*/ System.Text.Encoding get_Latin1();
            static /*0x12d91e0*/ System.Text.Encoding CreateDefaultEncoding();
            static /*0x12d71d0*/ System.Text.Encoding get_Default();
            static /*0x12d724c*/ System.Text.Encoding get_Unicode();
            static /*0x12d72fc*/ System.Text.Encoding get_BigEndianUnicode();
            static /*0x12d73ac*/ System.Text.Encoding get_UTF7();
            static /*0x12d5f04*/ System.Text.Encoding get_UTF8();
            static /*0x12d7454*/ System.Text.Encoding get_UTF32();
            /*0x12d60a4*/ Encoding();
            /*0x12d60d4*/ Encoding(int codePage);
            /*0x12d6160*/ void SetDefaultFallbacks();
            /*0x12d61f8*/ void OnDeserializing();
            /*0x12d6208*/ void OnDeserialized();
            /*0x12d6244*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x12d6254*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x12d6290*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x12d6298*/ void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12d6698*/ void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12d8090*/ byte[] GetPreamble();
            /*0x12d80e8*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0x12d813c*/ void GetDataItem();
            /*0x12d8264*/ string get_EncodingName();
            /*0x12d8270*/ string get_HeaderName();
            /*0x12d82a0*/ string get_WebName();
            /*0x12d82d0*/ System.Text.EncoderFallback get_EncoderFallback();
            /*0x12d7e64*/ void set_EncoderFallback(System.Text.EncoderFallback value);
            /*0x12d82d8*/ System.Text.DecoderFallback get_DecoderFallback();
            /*0x12d7f2c*/ void set_DecoderFallback(System.Text.DecoderFallback value);
            /*0x12d82e0*/ object Clone();
            /*0x12d8368*/ bool get_IsReadOnly();
            /*0x12d8370*/ int GetByteCount(string s);
            int GetByteCount(char[] chars, int index, int count);
            /*0x12d8400*/ int GetByteCount(char* chars, int count);
            /*0x12d8578*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x12d8588*/ byte[] GetBytes(char[] chars);
            /*0x12d861c*/ byte[] GetBytes(char[] chars, int index, int count);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x12d86d8*/ byte[] GetBytes(string s);
            /*0x12d87dc*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x12d888c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x12d889c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x12d8ac8*/ int GetCharCount(byte* bytes, int count);
            /*0x12d8c40*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x12d8c50*/ char[] GetChars(byte[] bytes, int index, int count);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x12d8d0c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x12d8f38*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x12d8f48*/ string GetString(byte* bytes, int byteCount);
            /*0x12d9034*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars);
            /*0x12d90d8*/ string GetString(System.ReadOnlySpan<byte> bytes);
            /*0x12d913c*/ int get_CodePage();
            /*0x12d9144*/ System.Text.Decoder GetDecoder();
            /*0x12d93bc*/ void setReadOnly(bool value);
            /*0x12d93c8*/ System.Text.Encoder GetEncoder();
            int GetMaxByteCount(int charCount);
            int GetMaxCharCount(int byteCount);
            /*0x12d9464*/ string GetString(byte[] bytes);
            /*0x12d94f8*/ string GetString(byte[] bytes, int index, int count);
            /*0x12d9520*/ bool Equals(object value);
            /*0x12d95f0*/ int GetHashCode();
            /*0x12d9648*/ char[] GetBestFitUnicodeToBytesData();
            /*0x12d96a0*/ char[] GetBestFitBytesToUnicodeData();
            /*0x12d96f8*/ void ThrowBytesOverflow();
            /*0x12d9800*/ void ThrowBytesOverflow(System.Text.EncoderNLS encoder, bool nothingEncoded);
            /*0x12d987c*/ void ThrowCharsOverflow();
            /*0x12d9984*/ void ThrowCharsOverflow(System.Text.DecoderNLS decoder, bool nothingDecoded);
            /*0x12d9a00*/ int GetBytes(System.ReadOnlySpan<char> chars, System.Span<byte> bytes);

            class DefaultEncoder : System.Text.Encoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;
                /*0x2a*/ char charLeftOver;

                /*0x12d9434*/ DefaultEncoder(System.Text.Encoding encoding);
                /*0x12d9aa4*/ DefaultEncoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x12d9dfc*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x12d9eb4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x12d9f58*/ int GetByteCount(char[] chars, int index, int count, bool flush);
                /*0x12d9f7c*/ int GetByteCount(char* chars, int count, bool flush);
                /*0x12d9fa0*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
                /*0x12d9fc4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            }

            class DefaultDecoder : System.Text.Decoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;

                /*0x12d91b0*/ DefaultDecoder(System.Text.Encoding encoding);
                /*0x12d9fe8*/ DefaultDecoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x12da2a0*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x12da2ec*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x12da390*/ int GetCharCount(byte[] bytes, int index, int count);
                /*0x12da3a0*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
                /*0x12da3c4*/ int GetCharCount(byte* bytes, int count, bool flush);
                /*0x12da3e8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
                /*0x12da3f8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
                /*0x12da41c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            }

            class EncodingCharBuffer
            {
                /*0x10*/ char* chars;
                /*0x18*/ char* charStart;
                /*0x20*/ char* charEnd;
                /*0x28*/ int charCountResult;
                /*0x30*/ System.Text.Encoding enc;
                /*0x38*/ System.Text.DecoderNLS decoder;
                /*0x40*/ byte* byteStart;
                /*0x48*/ byte* byteEnd;
                /*0x50*/ byte* bytes;
                /*0x58*/ System.Text.DecoderFallbackBuffer fallbackBuffer;

                /*0x12da440*/ EncodingCharBuffer(System.Text.Encoding enc, System.Text.DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount);
                /*0x12da4e8*/ bool AddChar(char ch, int numBytes);
                /*0x12da558*/ bool AddChar(char ch);
                /*0x12da560*/ void AdjustBytes(int count);
                /*0x12da570*/ bool get_MoreData();
                /*0x12da580*/ byte GetNextByte();
                /*0x12da5a4*/ int get_BytesUsed();
                /*0x12da5b4*/ bool Fallback(byte fallbackByte);
                /*0x12da62c*/ bool Fallback(byte[] byteBuffer);
                /*0x12da708*/ int get_Count();
            }

            class EncodingByteBuffer
            {
                /*0x10*/ byte* bytes;
                /*0x18*/ byte* byteStart;
                /*0x20*/ byte* byteEnd;
                /*0x28*/ char* chars;
                /*0x30*/ char* charStart;
                /*0x38*/ char* charEnd;
                /*0x40*/ int byteCountResult;
                /*0x48*/ System.Text.Encoding enc;
                /*0x50*/ System.Text.EncoderNLS encoder;
                /*0x58*/ System.Text.EncoderFallbackBuffer fallbackBuffer;

                /*0x12da710*/ EncodingByteBuffer(System.Text.Encoding inEncoding, System.Text.EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount);
                /*0x12da914*/ bool AddByte(byte b, int moreBytesExpected);
                /*0x12da9e4*/ bool AddByte(byte b1);
                /*0x12da9ec*/ bool AddByte(byte b1, byte b2);
                /*0x12da9f4*/ bool AddByte(byte b1, byte b2, int moreBytesExpected);
                /*0x12da964*/ void MovePrevious(bool bThrow);
                /*0x12daa3c*/ bool get_MoreData();
                /*0x12daa84*/ char GetNextChar();
                /*0x12daad4*/ int get_CharsUsed();
                /*0x12daaec*/ int get_Count();
            }
        }

        enum NormalizationCheck
        {
            Yes = 0,
            No = 1,
            Maybe = 2,
        }

        class Normalization
        {
            static /*0x0*/ byte* props;
            static /*0x8*/ int* mappedChars;
            static /*0x10*/ short* charMapIndex;
            static /*0x18*/ short* helperIndex;
            static /*0x20*/ ushort* mapIdxToComposite;
            static /*0x28*/ byte* combiningClass;
            static /*0x30*/ object forLock;
            static /*0x38*/ bool isReady;

            static /*0x12dc1a8*/ Normalization();
            static /*0x12daaf4*/ uint PropValue(int cp);
            static /*0x12dab88*/ int CharMapIdx(int cp);
            static /*0x12dac1c*/ byte GetCombiningClass(int c);
            static /*0x12dacc4*/ int GetPrimaryCompositeFromMapIndex(int src);
            static /*0x12dad6c*/ int GetPrimaryCompositeHelperIndex(int cp);
            static /*0x12dae14*/ string Compose(string source, int checkType);
            static /*0x12db024*/ System.Text.StringBuilder Combine(string source, int start, int checkType);
            static /*0x12db160*/ void Combine(System.Text.StringBuilder sb, int i, int checkType);
            static /*0x12db38c*/ int CombineHangul(System.Text.StringBuilder sb, string s, int current);
            static /*0x12db784*/ int Fetch(System.Text.StringBuilder sb, string s, int i);
            static /*0x12db550*/ int TryComposeWithPreviousStarter(System.Text.StringBuilder sb, string s, int current);
            static /*0x12db7c0*/ int TryCompose(int i, int starter, int candidate);
            static /*0x12db8d8*/ string Decompose(string source, int checkType);
            static /*0x12daef4*/ void Decompose(string source, ref System.Text.StringBuilder sb, int checkType);
            static /*0x12dbb3c*/ void ReorderCanonical(string src, ref System.Text.StringBuilder sb, int start);
            static /*0x12db964*/ void DecomposeChar(ref System.Text.StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start);
            static /*0x12db270*/ System.Text.NormalizationCheck QuickCheck(char c, int type);
            static /*0x12dbf64*/ int GetCanonicalHangul(int s, int[] buf, int bufIdx);
            static /*0x12dbdac*/ int GetCanonical(int c, int[] buf, int bufIdx, int checkType);
            static /*0x12dc050*/ string Normalize(string source, System.Text.NormalizationForm normalizationForm);
            static /*0x12dc10c*/ string Normalize(string source, int type);
            static /*0x12dc1a4*/ void load_normalization_resource(ref nint props, ref nint mappedChars, ref nint charMapIndex, ref nint helperIndex, ref nint mapIdxToComposite, ref nint combiningClass);
        }

        class EncodingHelper
        {
            static /*0x0*/ System.Text.Encoding utf8EncodingWithoutMarkers;
            static /*0x8*/ object lockobj;
            static /*0x10*/ System.Reflection.Assembly i18nAssembly;
            static /*0x18*/ bool i18nDisabled;

            static /*0x12dc59c*/ EncodingHelper();
            static /*0x12dc3a8*/ System.Text.Encoding get_UTF8Unmarked();
            static /*0x12dc598*/ string InternalCodePage(ref int code_page);
            static /*0x12d9240*/ System.Text.Encoding GetDefaultEncoding();
            static /*0x12d7654*/ object InvokeI18N(string name, object[] args);
        }
    }

    namespace Security
    {
        interface IPermission : System.Security.ISecurityEncodable
        {
            void Demand();
            bool IsSubsetOf(System.Security.IPermission target);
        }

        interface ISecurityEncodable
        {
            System.Security.SecurityElement ToXml();
        }

        class XmlSyntaxException : System.SystemException
        {
            /*0x12dc614*/ XmlSyntaxException();
            /*0x12dc61c*/ XmlSyntaxException(int lineNumber);
            /*0x12dc624*/ XmlSyntaxException(int lineNumber, string message);
            /*0x12dc62c*/ XmlSyntaxException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SecurityDocument
        {
            /*0x10*/ byte[] m_data;

            static /*0x12dc924*/ int EncodedStringSize(string str);
            /*0x12dc634*/ SecurityDocument(int numData);
            /*0x12dc69c*/ void GuaranteeSize(int size);
            /*0x12dc740*/ void AddString(string str, ref int position);
            /*0x12dc88c*/ void AppendString(string str, ref int position);
            /*0x12dc944*/ string GetString(ref int position, bool bCreate);
            /*0x12dcec0*/ void AddToken(byte b, ref int position);
            /*0x12dcf1c*/ System.Security.SecurityElement GetRootElement();
            /*0x12dcf38*/ System.Security.SecurityElement GetElement(int position, bool bCreate);
            /*0x12dcf54*/ System.Security.SecurityElement InternalGetElement(ref int position, bool bCreate);
        }

        class CodeAccessPermission : System.Security.IPermission, System.Security.ISecurityEncodable
        {
            static /*0x12dd634*/ System.Security.Permissions.PermissionState CheckPermissionState(System.Security.Permissions.PermissionState state, bool allowUnrestricted);
            /*0x12dd3e0*/ CodeAccessPermission();
            /*0x12dd3e8*/ void Demand();
            /*0x12dd4e0*/ bool Equals(object obj);
            /*0x12dd604*/ int GetHashCode();
            bool IsSubsetOf(System.Security.IPermission target);
            /*0x12dd60c*/ string ToString();
            System.Security.SecurityElement ToXml();
            /*0x12dd6e4*/ void System.Security.IPermission.Demand();
        }

        class NamedPermissionSet : System.Security.PermissionSet
        {
            /*0x30*/ string name;
            /*0x38*/ string description;

            /*0x12dd6e8*/ NamedPermissionSet();
            /*0x12dd7a8*/ NamedPermissionSet(string name, System.Security.Permissions.PermissionState state);
            /*0x12dd918*/ NamedPermissionSet(string name);
            /*0x12dd920*/ string get_Name();
            /*0x12dd858*/ void set_Name(string value);
            /*0x12dd928*/ System.Security.SecurityElement ToXml();
            /*0x12dde1c*/ bool Equals(object obj);
            /*0x12de048*/ int GetHashCode();
        }

        class PermissionSet : System.Security.ISecurityEncodable, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback
        {
            static /*0x0*/ object[] psUnrestricted;
            static /*0x8*/ object[] action;
            /*0x10*/ System.Security.Permissions.PermissionState state;
            /*0x18*/ System.Collections.ArrayList list;
            /*0x20*/ bool _declsec;
            /*0x28*/ bool[] _ignored;

            static /*0x12de8b4*/ PermissionSet();
            /*0x12dd73c*/ PermissionSet();
            /*0x12dd828*/ PermissionSet(System.Security.Permissions.PermissionState state);
            /*0x12dd41c*/ PermissionSet(System.Security.IPermission perm);
            /*0x12de0c4*/ void CopyTo(System.Array array, int index);
            /*0x12de23c*/ void Demand();
            /*0x12dd468*/ void CasOnlyDemand(int skip);
            /*0x12de814*/ System.Collections.IEnumerator GetEnumerator();
            /*0x12de464*/ bool IsEmpty();
            /*0x12de804*/ bool IsUnrestricted();
            /*0x12de838*/ string ToString();
            /*0x12dd9c0*/ System.Security.SecurityElement ToXml();
            /*0x12de864*/ int get_Count();
            /*0x12de888*/ bool get_IsSynchronized();
            /*0x12de8ac*/ object get_SyncRoot();
            /*0x12de8b0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x12ddeac*/ bool Equals(object obj);
            /*0x12de080*/ int GetHashCode();
        }

        class SecureString : System.IDisposable
        {
            /*0x10*/ int length;
            /*0x14*/ bool disposed;
            /*0x18*/ byte[] data;

            /*0x12de9fc*/ SecureString();
            /*0x12deb9c*/ SecureString(char* value, int length);
            /*0x12decec*/ int get_Length();
            /*0x12ded50*/ void Dispose();
            /*0x12dece8*/ void Encrypt();
            /*0x12ded88*/ void Decrypt();
            /*0x12dea20*/ void Alloc(int length, bool realloc);
            /*0x12ded8c*/ byte[] GetBuffer();
        }

        enum SecurityElementType
        {
            Regular = 0,
            Format = 1,
            Comment = 2,
        }

        class SecurityElement
        {
            static /*0x0*/ char[] invalid_tag_chars;
            static /*0x8*/ char[] invalid_text_chars;
            static /*0x10*/ char[] invalid_attr_name_chars;
            static /*0x18*/ char[] invalid_attr_value_chars;
            static /*0x20*/ char[] invalid_chars;
            /*0x10*/ string text;
            /*0x18*/ string tag;
            /*0x20*/ System.Collections.ArrayList attributes;
            /*0x28*/ System.Collections.ArrayList children;

            static /*0x12e0634*/ SecurityElement();
            static /*0x12df7e0*/ string Escape(string str);
            static /*0x12df190*/ string Unescape(string str);
            static /*0x12df9cc*/ bool IsValidAttributeName(string name);
            static /*0x12dfa48*/ bool IsValidAttributeValue(string value);
            static /*0x12def8c*/ bool IsValidTag(string tag);
            static /*0x12df114*/ bool IsValidText(string text);
            /*0x12dd15c*/ SecurityElement(string tag);
            /*0x12dee3c*/ SecurityElement(string tag, string text);
            /*0x12df104*/ System.Collections.ArrayList get_Children();
            /*0x12df10c*/ string get_Tag();
            /*0x12df008*/ void set_Text(string value);
            /*0x12dd164*/ void AddAttribute(string name, string value);
            /*0x12dd310*/ void AddChild(System.Security.SecurityElement child);
            /*0x12dfac4*/ System.Security.SecurityElement SearchForChildByTag(string tag);
            /*0x12dfbec*/ string SearchForTextOfTag(string tag);
            /*0x12dfd1c*/ string ToString();
            /*0x12dfda4*/ void ToXml(ref System.Text.StringBuilder s, int level);
            /*0x12df36c*/ System.Security.SecurityElement.SecurityAttribute GetAttribute(string name);
            /*0x12e03f0*/ void set_m_strText(string value);
            /*0x12e03f8*/ string SearchForTextOfLocalName(string strLocalName);

            class SecurityAttribute
            {
                /*0x10*/ string _name;
                /*0x18*/ string _value;

                /*0x12df67c*/ SecurityAttribute(string name, string value);
                /*0x12e07b4*/ string get_Name();
                /*0x12e07bc*/ string get_Value();
            }
        }

        class SecurityException : System.SystemException
        {
            /*0x90*/ string permissionState;

            /*0x12e07c4*/ SecurityException();
            /*0x12e082c*/ SecurityException(string message);
            /*0x12e0850*/ SecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12e095c*/ SecurityException(string message, System.Exception inner);
            /*0x12e0980*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x12e0a80*/ string ToString();
        }

        class SecurityManager
        {
            static /*0x12dd414*/ bool get_SecurityEnabled();
            static /*0x12e0a88*/ void EnsureElevatedPermissions();
        }

        namespace Util
        {
            class Parser
            {
                /*0x10*/ System.Security.SecurityDocument _doc;
                /*0x18*/ System.Security.Util.Tokenizer _t;

                /*0x12e205c*/ Parser(System.Security.Util.Tokenizer t);
                /*0x12e2100*/ Parser(string input);
                /*0x12e0a8c*/ System.Security.SecurityElement GetTopElement();
                /*0x12e0ab4*/ void GetRequiredSizes(System.Security.Util.TokenizerStream stream, ref int index);
                /*0x12e100c*/ int DetermineFormat(System.Security.Util.TokenizerStream stream);
                /*0x12e1c20*/ void ParseContents();
            }

            class Tokenizer
            {
                /*0x10*/ int LineNo;
                /*0x14*/ int _inProcessingTag;
                /*0x18*/ byte[] _inBytes;
                /*0x20*/ char[] _inChars;
                /*0x28*/ string _inString;
                /*0x30*/ int _inIndex;
                /*0x34*/ int _inSize;
                /*0x38*/ int _inSavedCharacter;
                /*0x3c*/ System.Security.Util.Tokenizer.TokenSource _inTokenSource;
                /*0x40*/ System.Security.Util.Tokenizer.ITokenReader _inTokenReader;
                /*0x48*/ System.Security.Util.Tokenizer.StringMaker _maker;
                /*0x50*/ string[] _searchStrings;
                /*0x58*/ string[] _replaceStrings;
                /*0x60*/ int _inNestedIndex;
                /*0x64*/ int _inNestedSize;
                /*0x68*/ string _inNestedString;

                /*0x12e2170*/ Tokenizer(string input);
                /*0x12e21b8*/ void BasicInitialization();
                /*0x12e2230*/ void Recycle();
                /*0x12e19fc*/ void ChangeFormat(System.Text.Encoding encoding);
                /*0x12e11bc*/ void GetTokens(System.Security.Util.TokenizerStream stream, int maxNum, bool endAfterKet);
                /*0x12e23a0*/ string GetStringToken();

                enum TokenSource
                {
                    UnicodeByteArray = 0,
                    UTF8ByteArray = 1,
                    ASCIIByteArray = 2,
                    CharArray = 3,
                    String = 4,
                    NestedStrings = 5,
                    Other = 6,
                }

                class StringMaker
                {
                    /*0x10*/ string[] aStrings;
                    /*0x18*/ uint cStringsMax;
                    /*0x1c*/ uint cStringsUsed;
                    /*0x20*/ System.Text.StringBuilder _outStringBuilder;
                    /*0x28*/ char[] _outChars;
                    /*0x30*/ int _outIndex;

                    static /*0x12e24a8*/ uint HashString(string str);
                    static /*0x12e2514*/ uint HashCharArray(char[] a, int l);
                    /*0x12e2570*/ StringMaker();
                    /*0x12e2604*/ bool CompareStringAndChars(string str, char[] a, int l);
                    /*0x12dcc54*/ string MakeString();
                }

                interface ITokenReader
                {
                    int Read();
                }

                class StreamTokenReader : System.Security.Util.Tokenizer.ITokenReader
                {
                    /*0x10*/ System.IO.StreamReader _in;
                    /*0x18*/ int _numCharRead;

                    /*0x12e228c*/ StreamTokenReader(System.IO.StreamReader input);
                    /*0x12e2698*/ int Read();
                    /*0x12e26d4*/ int get_NumCharEncountered();
                }
            }

            class TokenizerShortBlock
            {
                /*0x10*/ short[] m_block;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_next;

                /*0x12e26dc*/ TokenizerShortBlock();
            }

            class TokenizerStringBlock
            {
                /*0x10*/ string[] m_block;
                /*0x18*/ System.Security.Util.TokenizerStringBlock m_next;

                /*0x12e2734*/ TokenizerStringBlock();
            }

            class TokenizerStream
            {
                /*0x10*/ int m_countTokens;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_headTokens;
                /*0x20*/ System.Security.Util.TokenizerShortBlock m_lastTokens;
                /*0x28*/ System.Security.Util.TokenizerShortBlock m_currentTokens;
                /*0x30*/ int m_indexTokens;
                /*0x38*/ System.Security.Util.TokenizerStringBlock m_headStrings;
                /*0x40*/ System.Security.Util.TokenizerStringBlock m_currentStrings;
                /*0x48*/ int m_indexStrings;

                /*0x12e1f28*/ TokenizerStream();
                /*0x12e22b8*/ void AddToken(short token);
                /*0x12e23b8*/ void AddString(string str);
                /*0x12e1fd0*/ void Reset();
                /*0x12e1fec*/ short GetNextFullToken();
                /*0x12e0f14*/ short GetNextToken();
                /*0x12e0fa0*/ string GetNextString();
                /*0x12e0f28*/ void ThrowAwayNextString();
                /*0x12e0f2c*/ void TagLastToken(short tag);
                /*0x12e278c*/ int GetTokenCount();
                /*0x12e199c*/ void GoToPosition(int position);
            }
        }

        namespace Policy
        {
            class Evidence : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ bool _locked;
                /*0x18*/ System.Collections.ArrayList hostEvidenceList;
                /*0x20*/ System.Collections.ArrayList assemblyEvidenceList;

                /*0x12e2794*/ Evidence();
                /*0x12e279c*/ int get_Count();
                /*0x12e27f8*/ bool get_IsSynchronized();
                /*0x12e2800*/ object get_SyncRoot();
                /*0x12e2804*/ void CopyTo(System.Array array, int index);
                /*0x12e28c8*/ System.Collections.IEnumerator GetEnumerator();

                class EvidenceEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.IEnumerator currentEnum;
                    /*0x18*/ System.Collections.IEnumerator hostEnum;
                    /*0x20*/ System.Collections.IEnumerator assemblyEnum;

                    /*0x12e2978*/ EvidenceEnumerator(System.Collections.IEnumerator hostenum, System.Collections.IEnumerator assemblyenum);
                    /*0x12e29a8*/ bool MoveNext();
                    /*0x12e2ad0*/ void Reset();
                    /*0x12e2bf0*/ object get_Current();
                }
            }
        }

        namespace Permissions
        {
            enum PermissionState
            {
                None = 0,
                Unrestricted = 1,
            }

            enum SecurityAction
            {
                Demand = 2,
                Assert = 3,
                Deny = 4,
                PermitOnly = 5,
                LinkDemand = 6,
                InheritanceDemand = 7,
                RequestMinimum = 8,
                RequestOptional = 9,
                RequestRefuse = 10,
            }
        }

        namespace Cryptography
        {
            class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes
            {
                static int MinimumSaltSize = 8;
                /*0x10*/ byte[] _password;
                /*0x18*/ byte[] _salt;
                /*0x20*/ uint _iterations;
                /*0x28*/ System.Security.Cryptography.HMAC _hmac;
                /*0x30*/ int _blockSize;
                /*0x38*/ byte[] _buffer;
                /*0x40*/ uint _block;
                /*0x44*/ int _startIndex;
                /*0x48*/ int _endIndex;
                /*0x50*/ System.Security.Cryptography.HashAlgorithmName <HashAlgorithm>k__BackingField;

                /*0x12e2c9c*/ Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations);
                /*0x12e2d4c*/ Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x12e323c*/ Rfc2898DeriveBytes(string password, byte[] salt);
                /*0x12e3244*/ Rfc2898DeriveBytes(string password, byte[] salt, int iterations);
                /*0x12e32b4*/ Rfc2898DeriveBytes(string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x12e3318*/ Rfc2898DeriveBytes(string password, int saltSize);
                /*0x12e3320*/ Rfc2898DeriveBytes(string password, int saltSize, int iterations);
                /*0x12e3390*/ Rfc2898DeriveBytes(string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x12e2c94*/ System.Security.Cryptography.HashAlgorithmName get_HashAlgorithm();
                /*0x12e3520*/ int get_IterationCount();
                /*0x12e3528*/ void set_IterationCount(int value);
                /*0x12e35a8*/ byte[] get_Salt();
                /*0x12e35b4*/ void set_Salt(byte[] value);
                /*0x12e366c*/ void Dispose(bool disposing);
                /*0x12e3760*/ byte[] GetBytes(int cb);
                /*0x12e3de4*/ byte[] CryptDeriveKey(string algname, string alghashname, int keySize, byte[] rgbIV);
                /*0x12e3e24*/ void Reset();
                /*0x12e2f00*/ System.Security.Cryptography.HMAC OpenHmac();
                /*0x12e31c4*/ void Initialize();
                /*0x12e3928*/ byte[] Func();
            }

            interface ICspAsymmetricAlgorithm
            {
                System.Security.Cryptography.CspKeyContainerInfo get_CspKeyContainerInfo();
                byte[] ExportCspBlob(bool includePrivateParameters);
                void ImportCspBlob(byte[] rawData);
            }

            enum KeyNumber
            {
                Exchange = 1,
                Signature = 2,
            }

            class CryptoStream : System.IO.Stream, System.IDisposable
            {
                /*0x28*/ System.IO.Stream _stream;
                /*0x30*/ System.Security.Cryptography.ICryptoTransform _transform;
                /*0x38*/ System.Security.Cryptography.CryptoStreamMode _transformMode;
                /*0x40*/ byte[] _inputBuffer;
                /*0x48*/ int _inputBufferIndex;
                /*0x4c*/ int _inputBlockSize;
                /*0x50*/ byte[] _outputBuffer;
                /*0x58*/ int _outputBufferIndex;
                /*0x5c*/ int _outputBlockSize;
                /*0x60*/ bool _canRead;
                /*0x61*/ bool _canWrite;
                /*0x62*/ bool _finalBlockTransformed;
                /*0x68*/ System.Threading.SemaphoreSlim _lazyAsyncActiveSemaphore;
                /*0x70*/ bool _leaveOpen;

                /*0x12e404c*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
                /*0x12e4054*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, bool leaveOpen);
                /*0x12e4368*/ bool get_CanRead();
                /*0x12e4370*/ bool get_CanSeek();
                /*0x12e4378*/ bool get_CanWrite();
                /*0x12e4380*/ long get_Length();
                /*0x12e43d0*/ long get_Position();
                /*0x12e4420*/ void set_Position(long value);
                /*0x12e4470*/ bool get_HasFlushedFinalBlock();
                /*0x12e4478*/ void FlushFinalBlock();
                /*0x12e46a8*/ void Flush();
                /*0x12e46ac*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
                /*0x12e4814*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x12e4864*/ void SetLength(long value);
                /*0x12e48b4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x12e4b68*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x12e4c1c*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x12e4a44*/ System.Threading.Tasks.Task<int> ReadAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x12e4c64*/ int ReadByte();
                /*0x12e4ce0*/ void WriteByte(byte value);
                /*0x12e4d34*/ int Read(byte[] buffer, int offset, int count);
                /*0x12e48fc*/ void CheckReadArguments(byte[] buffer, int offset, int count);
                /*0x12e4df8*/ System.Threading.Tasks.Task<int> ReadAsyncCore(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken, bool useAsync);
                /*0x12e4f3c*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x12e51c8*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x12e527c*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x12e50cc*/ System.Threading.Tasks.Task WriteAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x12e5288*/ void Write(byte[] buffer, int offset, int count);
                /*0x12e4f84*/ void CheckWriteArguments(byte[] buffer, int offset, int count);
                /*0x12e52f8*/ System.Threading.Tasks.Task WriteAsyncCore(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken, bool useAsync);
                /*0x12e5414*/ void Clear();
                /*0x12e5424*/ void Dispose(bool disposing);
                /*0x12e421c*/ void InitializeBuffer();
                /*0x12e54d4*/ System.Threading.SemaphoreSlim get_AsyncActiveSemaphore();

                struct <ReadAsyncInternal>d__37 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ byte[] buffer;
                    /*0x40*/ int offset;
                    /*0x44*/ int count;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ System.Threading.SemaphoreSlim <semaphore>5__2;
                    /*0x58*/ System.Threading.Tasks.ForceAsyncAwaiter <>u__1;
                    /*0x60*/ System.Runtime.CompilerServices.TaskAwaiter<int> <>u__2;

                    /*0x12e55cc*/ void MoveNext();
                    /*0x12e5990*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <ReadAsyncCore>d__42 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ int count;
                    /*0x34*/ int offset;
                    /*0x38*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ bool useAsync;
                    /*0x50*/ System.Threading.CancellationToken cancellationToken;
                    /*0x58*/ int <bytesToDeliver>5__2;
                    /*0x5c*/ int <currentOutputIndex>5__3;
                    /*0x60*/ int <numWholeBlocksInBytes>5__4;
                    /*0x68*/ byte[] <tempInputBuffer>5__5;
                    /*0x70*/ byte[] <tempOutputBuffer>5__6;
                    /*0x78*/ System.Runtime.CompilerServices.ValueTaskAwaiter<int> <>u__1;

                    /*0x12e59e8*/ void MoveNext();
                    /*0x12e6b50*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncInternal>d__46 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ byte[] buffer;
                    /*0x40*/ int offset;
                    /*0x44*/ int count;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ System.Threading.SemaphoreSlim <semaphore>5__2;
                    /*0x58*/ System.Threading.Tasks.ForceAsyncAwaiter <>u__1;
                    /*0x60*/ System.Runtime.CompilerServices.TaskAwaiter <>u__2;

                    /*0x12e6ba8*/ void MoveNext();
                    /*0x12e6ec8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncCore>d__49 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ int count;
                    /*0x34*/ int offset;
                    /*0x38*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ bool useAsync;
                    /*0x50*/ System.Threading.CancellationToken cancellationToken;
                    /*0x58*/ int <bytesToWrite>5__2;
                    /*0x5c*/ int <currentInputIndex>5__3;
                    /*0x60*/ int <numOutputBytes>5__4;
                    /*0x68*/ System.Runtime.CompilerServices.ValueTaskAwaiter <>u__1;
                    /*0x78*/ int <numWholeBlocksInBytes>5__5;
                    /*0x80*/ byte[] <tempOutputBuffer>5__6;

                    /*0x12e6ed4*/ void MoveNext();
                    /*0x12e80a0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                class <>c
                {
                    static /*0x0*/ System.Security.Cryptography.CryptoStream.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__54_0;

                    static /*0x12e80ac*/ <>c();
                    /*0x12e8110*/ <>c();
                    /*0x12e8118*/ System.Threading.SemaphoreSlim <get_AsyncActiveSemaphore>b__54_0();
                }
            }

            enum CryptoStreamMode
            {
                Read = 0,
                Write = 1,
            }

            class CryptographicOperations
            {
                static /*0x12e817c*/ bool FixedTimeEquals(System.ReadOnlySpan<byte> left, System.ReadOnlySpan<byte> right);
                static /*0x12e6ae8*/ void ZeroMemory(System.Span<byte> buffer);
            }

            class HashAlgorithm : System.IDisposable, System.Security.Cryptography.ICryptoTransform
            {
                /*0x10*/ bool _disposed;
                /*0x14*/ int HashSizeValue;
                /*0x18*/ byte[] HashValue;
                /*0x20*/ int State;

                static /*0x12e83a4*/ System.Security.Cryptography.HashAlgorithm Create();
                static /*0x12e83ac*/ System.Security.Cryptography.HashAlgorithm Create(string hashName);
                /*0x12e839c*/ HashAlgorithm();
                /*0x12e842c*/ int get_HashSize();
                /*0x12e8434*/ byte[] get_Hash();
                /*0x12e8530*/ byte[] ComputeHash(byte[] buffer);
                /*0x12e3ef0*/ bool TryComputeHash(System.ReadOnlySpan<byte> source, System.Span<byte> destination, ref int bytesWritten);
                /*0x12e8688*/ byte[] ComputeHash(byte[] buffer, int offset, int count);
                /*0x12e8800*/ byte[] ComputeHash(System.IO.Stream inputStream);
                /*0x12e85e0*/ byte[] CaptureHashCodeAndReinitialize();
                /*0x12e36f0*/ void Dispose();
                /*0x12e8a10*/ void Clear();
                /*0x12e8aa4*/ void Dispose(bool disposing);
                /*0x12e8ab4*/ int get_InputBlockSize();
                /*0x12e8abc*/ int get_OutputBlockSize();
                /*0x12e8ac4*/ bool get_CanTransformMultipleBlocks();
                /*0x12e8acc*/ bool get_CanReuseTransform();
                /*0x12e8ad4*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x12e8ccc*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x12e8b70*/ void ValidateTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                void HashCore(byte[] array, int ibStart, int cbSize);
                byte[] HashFinal();
                void Initialize();
                /*0x12e8df0*/ void HashCore(System.ReadOnlySpan<byte> source);
                /*0x12e8fc0*/ bool TryHashFinal(System.Span<byte> destination, ref int bytesWritten);
            }

            struct HashAlgorithmName : System.IEquatable<System.Security.Cryptography.HashAlgorithmName>
            {
                /*0x10*/ string _name;

                static /*0x12e9104*/ System.Security.Cryptography.HashAlgorithmName get_MD5();
                static /*0x12e2d0c*/ System.Security.Cryptography.HashAlgorithmName get_SHA1();
                static /*0x12e3e30*/ System.Security.Cryptography.HashAlgorithmName get_SHA256();
                static /*0x12e3e70*/ System.Security.Cryptography.HashAlgorithmName get_SHA384();
                static /*0x12e3eb0*/ System.Security.Cryptography.HashAlgorithmName get_SHA512();
                static /*0x12e3e28*/ bool op_Equality(System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right);
                static /*0x12e9248*/ bool op_Inequality(System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right);
                /*0x12e9144*/ HashAlgorithmName(string name);
                /*0x12e914c*/ string get_Name();
                /*0x12e9154*/ string ToString();
                /*0x12e91a8*/ bool Equals(object obj);
                /*0x12e9224*/ bool Equals(System.Security.Cryptography.HashAlgorithmName other);
                /*0x12e9230*/ int GetHashCode();
            }

            class RSAEncryptionPadding : System.IEquatable<System.Security.Cryptography.RSAEncryptionPadding>
            {
                static /*0x0*/ System.Security.Cryptography.RSAEncryptionPadding s_pkcs1;
                static /*0x8*/ System.Security.Cryptography.RSAEncryptionPadding s_oaepSHA1;
                static /*0x10*/ System.Security.Cryptography.RSAEncryptionPadding s_oaepSHA256;
                static /*0x18*/ System.Security.Cryptography.RSAEncryptionPadding s_oaepSHA384;
                static /*0x20*/ System.Security.Cryptography.RSAEncryptionPadding s_oaepSHA512;
                /*0x10*/ System.Security.Cryptography.RSAEncryptionPaddingMode _mode;
                /*0x18*/ System.Security.Cryptography.HashAlgorithmName _oaepHashAlgorithm;

                static /*0x11fac1c*/ RSAEncryptionPadding();
                static /*0x11fa6b8*/ System.Security.Cryptography.RSAEncryptionPadding get_Pkcs1();
                static /*0x11fa710*/ System.Security.Cryptography.RSAEncryptionPadding get_OaepSHA1();
                static /*0x11fa768*/ System.Security.Cryptography.RSAEncryptionPadding get_OaepSHA256();
                static /*0x11fa7c0*/ System.Security.Cryptography.RSAEncryptionPadding get_OaepSHA384();
                static /*0x11fa818*/ System.Security.Cryptography.RSAEncryptionPadding get_OaepSHA512();
                static /*0x11fa8a0*/ System.Security.Cryptography.RSAEncryptionPadding CreateOaep(System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                static /*0x11faa10*/ int CombineHashCodes(int h1, int h2);
                static /*0x11fab94*/ bool op_Equality(System.Security.Cryptography.RSAEncryptionPadding left, System.Security.Cryptography.RSAEncryptionPadding right);
                static /*0x11fab24*/ bool op_Inequality(System.Security.Cryptography.RSAEncryptionPadding left, System.Security.Cryptography.RSAEncryptionPadding right);
                /*0x11fa870*/ RSAEncryptionPadding(System.Security.Cryptography.RSAEncryptionPaddingMode mode, System.Security.Cryptography.HashAlgorithmName oaepHashAlgorithm);
                /*0x11face8*/ RSAEncryptionPadding();
                /*0x11fa984*/ System.Security.Cryptography.RSAEncryptionPaddingMode get_Mode();
                /*0x11fa98c*/ System.Security.Cryptography.HashAlgorithmName get_OaepHashAlgorithm();
                /*0x11fa994*/ int GetHashCode();
                /*0x11faa1c*/ bool Equals(object obj);
                /*0x11faa80*/ bool Equals(System.Security.Cryptography.RSAEncryptionPadding other);
                /*0x11faba8*/ string ToString();
            }

            enum RSAEncryptionPaddingMode
            {
                Pkcs1 = 0,
                Oaep = 1,
            }

            class RSASignaturePadding : System.IEquatable<System.Security.Cryptography.RSASignaturePadding>
            {
                static /*0x0*/ System.Security.Cryptography.RSASignaturePadding s_pkcs1;
                static /*0x8*/ System.Security.Cryptography.RSASignaturePadding s_pss;
                /*0x10*/ System.Security.Cryptography.RSASignaturePaddingMode _mode;

                static /*0x11fafe8*/ RSASignaturePadding();
                static /*0x11fad48*/ System.Security.Cryptography.RSASignaturePadding get_Pkcs1();
                static /*0x11fada0*/ System.Security.Cryptography.RSASignaturePadding get_Pss();
                static /*0x11faf6c*/ bool op_Equality(System.Security.Cryptography.RSASignaturePadding left, System.Security.Cryptography.RSASignaturePadding right);
                static /*0x11faefc*/ bool op_Inequality(System.Security.Cryptography.RSASignaturePadding left, System.Security.Cryptography.RSASignaturePadding right);
                /*0x11fad20*/ RSASignaturePadding(System.Security.Cryptography.RSASignaturePaddingMode mode);
                /*0x11fb07c*/ RSASignaturePadding();
                /*0x11fadf8*/ System.Security.Cryptography.RSASignaturePaddingMode get_Mode();
                /*0x11fae00*/ int GetHashCode();
                /*0x11fae0c*/ bool Equals(object obj);
                /*0x11fae70*/ bool Equals(System.Security.Cryptography.RSASignaturePadding other);
                /*0x11faf80*/ string ToString();
            }

            enum RSASignaturePaddingMode
            {
                Pkcs1 = 0,
                Pss = 1,
            }

            class Aes : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x11fb294*/ Aes();
                static /*0x11fb138*/ System.Security.Cryptography.Aes Create();
                static /*0x11fb19c*/ System.Security.Cryptography.Aes Create(string algorithmName);
                /*0x11fb0b4*/ Aes();
            }

            class AsymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int KeySizeValue;
                /*0x18*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;

                static /*0x11fb6a8*/ System.Security.Cryptography.AsymmetricAlgorithm Create();
                static /*0x11fb704*/ System.Security.Cryptography.AsymmetricAlgorithm Create(string algName);
                /*0x11fb428*/ AsymmetricAlgorithm();
                /*0x11fb430*/ void Dispose();
                /*0x11fb434*/ void Clear();
                /*0x11fb4a0*/ void Dispose(bool disposing);
                /*0x11fb4a4*/ int get_KeySize();
                /*0x11fb4ac*/ void set_KeySize(int value);
                /*0x11fb5b0*/ System.Security.Cryptography.KeySizes[] get_LegalKeySizes();
                /*0x11fb628*/ string get_SignatureAlgorithm();
                /*0x11fb668*/ string get_KeyExchangeAlgorithm();
                /*0x11fb7a8*/ void FromXmlString(string xmlString);
                /*0x11fb7e8*/ string ToXmlString(bool includePrivateParameters);
                /*0x11fb828*/ byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<byte> passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);
                /*0x11fb868*/ byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters);
                /*0x11fb8a8*/ byte[] ExportPkcs8PrivateKey();
                /*0x11fb8e8*/ byte[] ExportSubjectPublicKeyInfo();
                /*0x11fb928*/ void ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<byte> passwordBytes, System.ReadOnlySpan<byte> source, ref int bytesRead);
                /*0x11fb968*/ void ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.ReadOnlySpan<byte> source, ref int bytesRead);
                /*0x11fb9a8*/ void ImportPkcs8PrivateKey(System.ReadOnlySpan<byte> source, ref int bytesRead);
                /*0x11fb9e8*/ void ImportSubjectPublicKeyInfo(System.ReadOnlySpan<byte> source, ref int bytesRead);
                /*0x11fba28*/ bool TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<byte> passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, System.Span<byte> destination, ref int bytesWritten);
                /*0x11fba68*/ bool TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters, System.Span<byte> destination, ref int bytesWritten);
                /*0x11fbaa8*/ bool TryExportPkcs8PrivateKey(System.Span<byte> destination, ref int bytesWritten);
                /*0x11fbae8*/ bool TryExportSubjectPublicKeyInfo(System.Span<byte> destination, ref int bytesWritten);
            }

            class AsymmetricKeyExchangeDeformatter
            {
                /*0x11fbb28*/ AsymmetricKeyExchangeDeformatter();
                string get_Parameters();
                void set_Parameters(string value);
                void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                byte[] DecryptKeyExchange(byte[] rgb);
            }

            class AsymmetricKeyExchangeFormatter
            {
                /*0x11fbb30*/ AsymmetricKeyExchangeFormatter();
                string get_Parameters();
                void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                byte[] CreateKeyExchange(byte[] data);
                byte[] CreateKeyExchange(byte[] data, System.Type symAlgType);
            }

            class AsymmetricSignatureDeformatter
            {
                /*0x11fbb38*/ AsymmetricSignatureDeformatter();
                void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                void SetHashAlgorithm(string strName);
                /*0x11fbb40*/ bool VerifySignature(System.Security.Cryptography.HashAlgorithm hash, byte[] rgbSignature);
                bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class AsymmetricSignatureFormatter
            {
                /*0x11fbbf8*/ AsymmetricSignatureFormatter();
                void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                void SetHashAlgorithm(string strName);
                /*0x11fbc00*/ byte[] CreateSignature(System.Security.Cryptography.HashAlgorithm hash);
                byte[] CreateSignature(byte[] rgbHash);
            }

            enum FromBase64TransformMode
            {
                IgnoreWhiteSpaces = 0,
                DoNotIgnoreWhiteSpaces = 1,
            }

            class ToBase64Transform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x11fc280*/ ToBase64Transform();
                /*0x11fbcb0*/ int get_InputBlockSize();
                /*0x11fbcb8*/ int get_OutputBlockSize();
                /*0x11fbcc0*/ bool get_CanTransformMultipleBlocks();
                /*0x11fbcc8*/ bool get_CanReuseTransform();
                /*0x11fbcd0*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x11fbf40*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x11fc16c*/ void Dispose();
                /*0x11fc170*/ void Clear();
                /*0x11fc1dc*/ void Dispose(bool disposing);
                /*0x11fc1e0*/ void Finalize();
            }

            class FromBase64Transform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x10*/ byte[] _inputBuffer;
                /*0x18*/ int _inputIndex;
                /*0x1c*/ System.Security.Cryptography.FromBase64TransformMode _whitespaces;

                /*0x11fc288*/ FromBase64Transform();
                /*0x11fc290*/ FromBase64Transform(System.Security.Cryptography.FromBase64TransformMode whitespaces);
                /*0x11fc2fc*/ int get_InputBlockSize();
                /*0x11fc304*/ int get_OutputBlockSize();
                /*0x11fc30c*/ bool get_CanTransformMultipleBlocks();
                /*0x11fc314*/ bool get_CanReuseTransform();
                /*0x11fc31c*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x11fc85c*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x11fc6a4*/ byte[] DiscardWhiteSpaces(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x11fcbc8*/ void Dispose();
                /*0x11fcbc0*/ void Reset();
                /*0x11fcc34*/ void Clear();
                /*0x11fcc38*/ void Dispose(bool disposing);
                /*0x11fcc6c*/ void Finalize();
            }

            enum CipherMode
            {
                CBC = 1,
                ECB = 2,
                OFB = 3,
                CFB = 4,
                CTS = 5,
            }

            enum PaddingMode
            {
                None = 1,
                PKCS7 = 2,
                Zeros = 3,
                ANSIX923 = 4,
                ISO10126 = 5,
            }

            class KeySizes
            {
                /*0x10*/ int m_minSize;
                /*0x14*/ int m_maxSize;
                /*0x18*/ int m_skipSize;

                static /*0x11fcd70*/ bool IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, int size);
                /*0x11fb3ec*/ KeySizes(int minSize, int maxSize, int skipSize);
                /*0x11fcd0c*/ int get_MinSize();
                /*0x11fcd14*/ int get_MaxSize();
                /*0x11fcd1c*/ int get_SkipSize();
                /*0x11fcd24*/ bool IsLegal(int keySize);
            }

            class CryptographicException : System.SystemException
            {
                static int FORMAT_MESSAGE_IGNORE_INSERTS = 512;
                static int FORMAT_MESSAGE_FROM_SYSTEM = 4096;
                static int FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;

                static /*0x11fcf88*/ void ThrowCryptographicException(int hr);
                /*0x11fcdf0*/ CryptographicException();
                /*0x11fb588*/ CryptographicException(string message);
                /*0x11fce5c*/ CryptographicException(string format, string insert);
                /*0x11fcef4*/ CryptographicException(string message, System.Exception inner);
                /*0x11fcf1c*/ CryptographicException(int hr);
                /*0x11fcf80*/ CryptographicException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class CryptographicUnexpectedOperationException : System.Security.Cryptography.CryptographicException
            {
                /*0x11fcfd0*/ CryptographicUnexpectedOperationException();
                /*0x11fcff4*/ CryptographicUnexpectedOperationException(string message);
                /*0x11fd03c*/ CryptographicUnexpectedOperationException(string format, string insert);
                /*0x11fd0ec*/ CryptographicUnexpectedOperationException(string message, System.Exception inner);
                /*0x11fd134*/ CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            enum CspProviderFlags
            {
                NoFlags = 0,
                UseMachineKeyStore = 1,
                UseDefaultKeyContainer = 2,
                UseNonExportableKey = 4,
                UseExistingKey = 8,
                UseArchivableKey = 16,
                UseUserProtectedKey = 32,
                NoPrompt = 64,
                CreateEphemeralKey = 128,
            }

            class CspParameters
            {
                /*0x10*/ int ProviderType;
                /*0x18*/ string ProviderName;
                /*0x20*/ string KeyContainerName;
                /*0x28*/ int KeyNumber;
                /*0x2c*/ int m_flags;
                /*0x30*/ System.Security.AccessControl.CryptoKeySecurity m_cryptoKeySecurity;
                /*0x38*/ System.Security.SecureString m_keyPassword;
                /*0x40*/ nint m_parentWindowHandle;

                /*0x11fd2b4*/ CspParameters();
                /*0x11fd324*/ CspParameters(int dwTypeIn);
                /*0x11fd358*/ CspParameters(int dwTypeIn, string strProviderNameIn);
                /*0x11fd2e0*/ CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
                /*0x11fd3e0*/ CspParameters(int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, System.Security.SecureString keyPassword);
                /*0x11fd438*/ CspParameters(int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, nint parentWindowHandle);
                /*0x11fd390*/ CspParameters(int providerType, string providerName, string keyContainerName, System.Security.Cryptography.CspProviderFlags flags);
                /*0x11fd494*/ CspParameters(System.Security.Cryptography.CspParameters parameters);
                /*0x11fd13c*/ System.Security.Cryptography.CspProviderFlags get_Flags();
                /*0x11fd144*/ void set_Flags(System.Security.Cryptography.CspProviderFlags value);
                /*0x11fd22c*/ System.Security.AccessControl.CryptoKeySecurity get_CryptoKeySecurity();
                /*0x11fd234*/ void set_CryptoKeySecurity(System.Security.AccessControl.CryptoKeySecurity value);
                /*0x11fd23c*/ System.Security.SecureString get_KeyPassword();
                /*0x11fd244*/ void set_KeyPassword(System.Security.SecureString value);
                /*0x11fd2a4*/ nint get_ParentWindowHandle();
                /*0x11fd2ac*/ void set_ParentWindowHandle(nint value);
            }

            class DeriveBytes : System.IDisposable
            {
                /*0x11fd564*/ DeriveBytes();
                byte[] GetBytes(int cb);
                void Reset();
                /*0x11fd4f4*/ void Dispose();
                /*0x11fd560*/ void Dispose(bool disposing);
            }

            class DES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x11fdf00*/ DES();
                static /*0x11fdc60*/ System.Security.Cryptography.DES Create();
                static /*0x11fdda4*/ System.Security.Cryptography.DES Create(string algName);
                static /*0x11fd6d0*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x11fd81c*/ bool IsSemiWeakKey(byte[] rgbKey);
                static /*0x11fde48*/ bool IsLegalKeySize(byte[] rgbKey);
                static /*0x11fde68*/ ulong QuadWordFromBigEndian(byte[] block);
                /*0x11fd56c*/ DES();
                /*0x11fd5e8*/ byte[] get_Key();
                /*0x11fda54*/ void set_Key(byte[] value);
            }

            class DESCryptoServiceProvider : System.Security.Cryptography.DES
            {
                /*0x11fdcb8*/ DESCryptoServiceProvider();
                /*0x11fe050*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x11fe18c*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x11fe2c8*/ void GenerateKey();
                /*0x11fe3e4*/ void GenerateIV();
            }

            struct DSAParameters
            {
                /*0x10*/ byte[] P;
                /*0x18*/ byte[] Q;
                /*0x20*/ byte[] G;
                /*0x28*/ byte[] Y;
                /*0x30*/ byte[] J;
                /*0x38*/ byte[] X;
                /*0x40*/ byte[] Seed;
                /*0x48*/ int Counter;
            }

            class DSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x11fe484*/ System.Security.Cryptography.DSA Create();
                static /*0x11fe4e0*/ System.Security.Cryptography.DSA Create(string algName);
                static /*0x11fe5a8*/ System.Exception DerivedClassMustOverride();
                static /*0x11fe814*/ System.Exception HashAlgorithmNameNullOrEmpty();
                static /*0x11ff850*/ System.Security.Cryptography.DSA Create(int keySizeInBits);
                static /*0x11ff918*/ System.Security.Cryptography.DSA Create(System.Security.Cryptography.DSAParameters parameters);
                /*0x11fe47c*/ DSA();
                byte[] CreateSignature(byte[] rgbHash);
                bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x11fe584*/ byte[] HashData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fe630*/ byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fe654*/ byte[] SignData(byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fe6c8*/ byte[] SignData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fe8b4*/ byte[] SignData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fe970*/ bool VerifyData(byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fe9e8*/ bool VerifyData(byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11feb6c*/ bool VerifyData(System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x11fec60*/ void FromXmlString(string xmlString);
                /*0x11ff3c0*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x11ffa0c*/ bool TryCreateSignature(System.ReadOnlySpan<byte> hash, System.Span<byte> destination, ref int bytesWritten);
                /*0x11ffb18*/ bool TryHashData(System.ReadOnlySpan<byte> data, System.Span<byte> destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, ref int bytesWritten);
                /*0x11ffd88*/ bool TrySignData(System.ReadOnlySpan<byte> data, System.Span<byte> destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, ref int bytesWritten);
                /*0x11ffeec*/ bool VerifyData(System.ReadOnlySpan<byte> data, System.ReadOnlySpan<byte> signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x12001a8*/ bool VerifySignature(System.ReadOnlySpan<byte> hash, System.ReadOnlySpan<byte> signature);
            }

            class DSASignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ System.Security.Cryptography.DSA _dsaKey;
                /*0x18*/ string _oid;

                /*0x1200234*/ DSASignatureDeformatter();
                /*0x12002b4*/ DSASignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x12003a8*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1200494*/ void SetHashAlgorithm(string strName);
                /*0x1200560*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class DSASignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x10*/ System.Security.Cryptography.DSA _dsaKey;
                /*0x18*/ string _oid;

                /*0x1200654*/ DSASignatureFormatter();
                /*0x12006d4*/ DSASignatureFormatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x12007c8*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x12008b4*/ void SetHashAlgorithm(string strName);
                /*0x1200980*/ byte[] CreateSignature(byte[] rgbHash);
            }

            class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ int blockSizeValue;
                /*0x38*/ string m_hashName;
                /*0x40*/ System.Security.Cryptography.HashAlgorithm m_hash1;
                /*0x48*/ System.Security.Cryptography.HashAlgorithm m_hash2;
                /*0x50*/ byte[] m_inner;
                /*0x58*/ byte[] m_outer;
                /*0x60*/ bool m_hashing;

                static /*0x1200e34*/ System.Security.Cryptography.HMAC Create();
                static /*0x1200ef4*/ System.Security.Cryptography.HMAC Create(string algorithmName);
                static /*0x120133c*/ System.Security.Cryptography.HashAlgorithm GetHashAlgorithmWithFipsFallback(System.Func<System.Security.Cryptography.HashAlgorithm> createStandardHashAlgorithmCallback, System.Func<System.Security.Cryptography.HashAlgorithm> createFipsHashAlgorithmCallback);
                /*0x12014b4*/ HMAC();
                /*0x1200a60*/ int get_BlockSizeValue();
                /*0x1200a68*/ void set_BlockSizeValue(int value);
                /*0x1200a70*/ void UpdateIOPadBuffers();
                /*0x1200bd4*/ void InitializeKey(byte[] key);
                /*0x1200ca8*/ byte[] get_Key();
                /*0x1200d20*/ void set_Key(byte[] value);
                /*0x1200d90*/ string get_HashName();
                /*0x1200d98*/ void set_HashName(string value);
                /*0x1200f98*/ void Initialize();
                /*0x1200fe0*/ void HashCore(byte[] rgb, int ib, int cb);
                /*0x1201068*/ byte[] HashFinal();
                /*0x12011ac*/ void Dispose(bool disposing);
            }

            class HMACMD5 : System.Security.Cryptography.HMAC
            {
                /*0x12014cc*/ HMACMD5();
                /*0x1201530*/ HMACMD5(byte[] key);
            }

            class HMACRIPEMD160 : System.Security.Cryptography.HMAC
            {
                /*0x12015f8*/ HMACRIPEMD160();
                /*0x120165c*/ HMACRIPEMD160(byte[] key);
            }

            class HMACSHA1 : System.Security.Cryptography.HMAC
            {
                /*0x1200e8c*/ HMACSHA1();
                /*0x1201840*/ HMACSHA1(byte[] key);
                /*0x1201848*/ HMACSHA1(byte[] key, bool useManagedSha1);
            }

            class HMACSHA256 : System.Security.Cryptography.HMAC
            {
                /*0x1201910*/ HMACSHA256();
                /*0x1201974*/ HMACSHA256(byte[] key);
            }

            class HMACSHA384 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x1201a3c*/ HMACSHA384();
                /*0x1201aa0*/ HMACSHA384(byte[] key);
                /*0x1201bb4*/ int get_BlockSize();
                /*0x1201bcc*/ bool get_ProduceLegacyHmacValues();
                /*0x1201bd4*/ void set_ProduceLegacyHmacValues(bool value);
            }

            class HMACSHA512 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x1201bf8*/ HMACSHA512();
                /*0x1201c5c*/ HMACSHA512(byte[] key);
                /*0x1201d70*/ int get_BlockSize();
                /*0x1201d88*/ bool get_ProduceLegacyHmacValues();
                /*0x1201d90*/ void set_ProduceLegacyHmacValues(bool value);
            }

            interface ICryptoTransform : System.IDisposable
            {
                int get_InputBlockSize();
                int get_OutputBlockSize();
                bool get_CanTransformMultipleBlocks();
                bool get_CanReuseTransform();
                int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
            {
                /*0x28*/ byte[] KeyValue;

                static /*0x1201f34*/ System.Security.Cryptography.KeyedHashAlgorithm Create();
                static /*0x1201f8c*/ System.Security.Cryptography.KeyedHashAlgorithm Create(string algName);
                /*0x12014c4*/ KeyedHashAlgorithm();
                /*0x12012f4*/ void Dispose(bool disposing);
                /*0x1201db4*/ byte[] get_Key();
                /*0x1201e2c*/ void set_Key(byte[] value);
            }

            class MACTripleDES : System.Security.Cryptography.KeyedHashAlgorithm
            {
                static int m_bitsPerByte = 8;
                /*0x30*/ System.Security.Cryptography.ICryptoTransform m_encryptor;
                /*0x38*/ System.Security.Cryptography.CryptoStream _cs;
                /*0x40*/ System.Security.Cryptography.TailStream _ts;
                /*0x48*/ int m_bytesPerBlock;
                /*0x50*/ System.Security.Cryptography.TripleDES des;

                /*0x1202030*/ MACTripleDES();
                /*0x120218c*/ MACTripleDES(byte[] rgbKey);
                /*0x12021e4*/ MACTripleDES(string strTripleDES, byte[] rgbKey);
                /*0x12023a8*/ void Initialize();
                /*0x12023b0*/ System.Security.Cryptography.PaddingMode get_Padding();
                /*0x12023d4*/ void set_Padding(System.Security.Cryptography.PaddingMode value);
                /*0x1202460*/ void HashCore(byte[] rgbData, int ibStart, int cbSize);
                /*0x1202664*/ byte[] HashFinal();
                /*0x120282c*/ void Dispose(bool disposing);
            }

            class TailStream : System.IO.Stream
            {
                /*0x28*/ byte[] _Buffer;
                /*0x30*/ int _BufferSize;
                /*0x34*/ int _BufferIndex;
                /*0x38*/ bool _BufferFull;

                /*0x12025d4*/ TailStream(int bufferSize);
                /*0x1202914*/ void Clear();
                /*0x1202924*/ void Dispose(bool disposing);
                /*0x12027b4*/ byte[] get_Buffer();
                /*0x12029e4*/ bool get_CanRead();
                /*0x12029ec*/ bool get_CanSeek();
                /*0x12029f4*/ bool get_CanWrite();
                /*0x1202a04*/ long get_Length();
                /*0x1202a64*/ long get_Position();
                /*0x1202ac4*/ void set_Position(long value);
                /*0x1202b24*/ void Flush();
                /*0x1202b28*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x1202b88*/ void SetLength(long value);
                /*0x1202be8*/ int Read(byte[] buffer, int offset, int count);
                /*0x1202c48*/ void Write(byte[] buffer, int offset, int count);
            }

            class MaskGenerationMethod
            {
                /*0x1202dbc*/ MaskGenerationMethod();
                byte[] GenerateMask(byte[] rgbSeed, int cbReturn);
            }

            class MD5 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1202de4*/ System.Security.Cryptography.MD5 Create();
                static /*0x1202e40*/ System.Security.Cryptography.MD5 Create(string algName);
                /*0x1202dc4*/ MD5();
            }

            class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes
            {
                /*0x10*/ int _extraCount;
                /*0x14*/ int _prefix;
                /*0x18*/ int _iterations;
                /*0x20*/ byte[] _baseValue;
                /*0x28*/ byte[] _extra;
                /*0x30*/ byte[] _salt;
                /*0x38*/ string _hashName;
                /*0x40*/ byte[] _password;
                /*0x48*/ System.Security.Cryptography.HashAlgorithm _hash;

                /*0x1202ee4*/ PasswordDeriveBytes(string strPassword, byte[] rgbSalt);
                /*0x1202fe8*/ PasswordDeriveBytes(byte[] password, byte[] salt);
                /*0x12030dc*/ PasswordDeriveBytes(string strPassword, byte[] rgbSalt, string strHashName, int iterations);
                /*0x1203230*/ PasswordDeriveBytes(byte[] password, byte[] salt, string hashName, int iterations);
                /*0x1202f74*/ PasswordDeriveBytes(string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);
                /*0x1203078*/ PasswordDeriveBytes(byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);
                /*0x1203184*/ PasswordDeriveBytes(string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);
                /*0x12032d4*/ PasswordDeriveBytes(byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);
                /*0x1203734*/ string get_HashName();
                /*0x12035b0*/ void set_HashName(string value);
                /*0x120373c*/ int get_IterationCount();
                /*0x1203334*/ void set_IterationCount(int value);
                /*0x1203744*/ byte[] get_Salt();
                /*0x1203458*/ void set_Salt(byte[] value);
                /*0x12037b8*/ byte[] GetBytes(int cb);
                /*0x1203f88*/ void Reset();
                /*0x1203f94*/ void Dispose(bool disposing);
                /*0x120401c*/ byte[] CryptDeriveKey(string algname, string alghashname, int keySize, byte[] rgbIV);
                /*0x1203944*/ byte[] ComputeBaseValue();
                /*0x1203ab8*/ byte[] ComputeBytes(int cb);
                /*0x12040c8*/ void HashPrefix(System.Security.Cryptography.CryptoStream cs);
            }

            class PKCS1MaskGenerationMethod : System.Security.Cryptography.MaskGenerationMethod
            {
                /*0x10*/ string HashNameValue;

                /*0x12042bc*/ PKCS1MaskGenerationMethod();
                /*0x1204310*/ string get_HashName();
                /*0x1204318*/ void set_HashName(string value);
                /*0x120436c*/ byte[] GenerateMask(byte[] rgbSeed, int cbReturn);
            }

            class RandomNumberGenerator : System.IDisposable
            {
                static /*0x12043f8*/ System.Security.Cryptography.RandomNumberGenerator Create();
                static /*0x1204454*/ System.Security.Cryptography.RandomNumberGenerator Create(string rngName);
                static /*0x12047a0*/ void Fill(System.Span<byte> data);
                static /*0x12047a4*/ void FillSpan(System.Span<byte> data);
                static /*0x1204c14*/ int GetInt32(int fromInclusive, int toExclusive);
                static /*0x1204da8*/ int GetInt32(int toExclusive);
                /*0x12043f0*/ RandomNumberGenerator();
                /*0x12044f8*/ void Dispose();
                /*0x1204564*/ void Dispose(bool disposing);
                void GetBytes(byte[] data);
                /*0x1204568*/ void GetBytes(byte[] data, int offset, int count);
                /*0x1204760*/ void GetNonZeroBytes(byte[] data);
                /*0x120481c*/ void GetBytes(System.Span<byte> data);
                /*0x1204a1c*/ void GetNonZeroBytes(System.Span<byte> data);
            }

            class RC2 : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x44*/ int EffectiveKeySizeValue;

                static /*0x1205284*/ RC2();
                static /*0x1204ff4*/ System.Security.Cryptography.RC2 Create();
                static /*0x12051e0*/ System.Security.Cryptography.RC2 Create(string AlgName);
                /*0x1204e24*/ RC2();
                /*0x1204ea0*/ int get_EffectiveKeySize();
                /*0x1204ebc*/ void set_EffectiveKeySize(int value);
                /*0x1204f74*/ int get_KeySize();
                /*0x1204f7c*/ void set_KeySize(int value);
            }

            class RC2CryptoServiceProvider : System.Security.Cryptography.RC2
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x48*/ bool m_use40bitSalt;

                static /*0x1205754*/ RC2CryptoServiceProvider();
                /*0x120504c*/ RC2CryptoServiceProvider();
                /*0x12053dc*/ int get_EffectiveKeySize();
                /*0x12053e4*/ void set_EffectiveKeySize(int value);
                /*0x1205458*/ bool get_UseSalt();
                /*0x1205460*/ void set_UseSalt(bool value);
                /*0x120546c*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x1205540*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x1205614*/ void GenerateKey();
                /*0x12056bc*/ void GenerateIV();
            }

            class Rijndael : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x1205a94*/ Rijndael();
                static /*0x12058b8*/ System.Security.Cryptography.Rijndael Create();
                static /*0x12059f0*/ System.Security.Cryptography.Rijndael Create(string algName);
                /*0x120583c*/ Rijndael();
            }

            class RijndaelManaged : System.Security.Cryptography.Rijndael
            {
                /*0x1205910*/ RijndaelManaged();
                /*0x1205bf4*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x1205d38*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x1205d4c*/ void GenerateKey();
                /*0x1205dbc*/ void GenerateIV();
                /*0x1205c08*/ System.Security.Cryptography.ICryptoTransform NewEncryptor(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int feedbackSize, System.Security.Cryptography.RijndaelManagedTransformMode encryptMode);
            }

            enum RijndaelManagedTransformMode
            {
                Encrypt = 0,
                Decrypt = 1,
            }

            class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                static /*0x0*/ byte[] s_Sbox;
                static /*0x8*/ int[] s_Rcon;
                static /*0x10*/ int[] s_T;
                static /*0x18*/ int[] s_TF;
                static /*0x20*/ int[] s_iT;
                static /*0x28*/ int[] s_iTF;
                /*0x10*/ System.Security.Cryptography.CipherMode m_cipherMode;
                /*0x14*/ System.Security.Cryptography.PaddingMode m_paddingValue;
                /*0x18*/ System.Security.Cryptography.RijndaelManagedTransformMode m_transformMode;
                /*0x1c*/ int m_blockSizeBits;
                /*0x20*/ int m_blockSizeBytes;
                /*0x24*/ int m_inputBlockSize;
                /*0x28*/ int m_outputBlockSize;
                /*0x30*/ int[] m_encryptKeyExpansion;
                /*0x38*/ int[] m_decryptKeyExpansion;
                /*0x40*/ int m_Nr;
                /*0x44*/ int m_Nb;
                /*0x48*/ int m_Nk;
                /*0x50*/ int[] m_encryptindex;
                /*0x58*/ int[] m_decryptindex;
                /*0x60*/ int[] m_IV;
                /*0x68*/ int[] m_lastBlockBuffer;
                /*0x70*/ byte[] m_depadBuffer;
                /*0x78*/ byte[] m_shiftRegister;

                static /*0x1208b34*/ RijndaelManagedTransform();
                static /*0x1208b2c*/ int rot1(int val);
                static /*0x1208b24*/ int rot2(int val);
                static /*0x1208a34*/ int rot3(int val);
                static /*0x1208a3c*/ int SubWord(int a);
                static /*0x1208b00*/ int MulX(int x);
                /*0x1205e2c*/ RijndaelManagedTransform(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, System.Security.Cryptography.PaddingMode PaddingValue, System.Security.Cryptography.RijndaelManagedTransformMode transformMode);
                /*0x1208d20*/ RijndaelManagedTransform();
                /*0x1206990*/ void Dispose();
                /*0x1206a54*/ void Clear();
                /*0x1206998*/ void Dispose(bool disposing);
                /*0x1206a5c*/ int get_BlockSizeValue();
                /*0x1206a64*/ int get_InputBlockSize();
                /*0x1206a6c*/ int get_OutputBlockSize();
                /*0x1206a74*/ bool get_CanTransformMultipleBlocks();
                /*0x1206a7c*/ bool get_CanReuseTransform();
                /*0x1206a84*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x1208344*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x1208628*/ void Reset();
                /*0x1206d5c*/ int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x120790c*/ int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x1208690*/ void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp);
                /*0x1208854*/ void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp);
                /*0x1206438*/ void GenerateKeyExpansion(byte[] rgbKey);
            }

            class RIPEMD160 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1208d78*/ System.Security.Cryptography.RIPEMD160 Create();
                static /*0x1208dd0*/ System.Security.Cryptography.RIPEMD160 Create(string hashName);
                /*0x1208d58*/ RIPEMD160();
            }

            class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateMD160;
                /*0x40*/ uint[] _blockDWords;

                static /*0x1209290*/ void MDTransform(uint* blockDWords, uint* state, byte* block);
                static /*0x120a9d0*/ uint F(uint x, uint y, uint z);
                static /*0x120a9dc*/ uint G(uint x, uint y, uint z);
                static /*0x120a9ec*/ uint H(uint x, uint y, uint z);
                static /*0x120a9f8*/ uint I(uint x, uint y, uint z);
                static /*0x120aa08*/ uint J(uint x, uint y, uint z);
                /*0x120171c*/ RIPEMD160Managed();
                /*0x1208ef8*/ void Initialize();
                /*0x1208f3c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x12090bc*/ byte[] HashFinal();
                /*0x1208e74*/ void InitializeState();
                /*0x1208f40*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x12090c0*/ byte[] _EndHash();
            }

            struct RSAParameters
            {
                /*0x10*/ byte[] Exponent;
                /*0x18*/ byte[] Modulus;
                /*0x20*/ byte[] P;
                /*0x28*/ byte[] Q;
                /*0x30*/ byte[] DP;
                /*0x38*/ byte[] DQ;
                /*0x40*/ byte[] InverseQ;
                /*0x48*/ byte[] D;
            }

            class RSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x115f1a8*/ System.Security.Cryptography.RSA Create();
                static /*0x115f248*/ System.Security.Cryptography.RSA Create(string algName);
                static /*0x115f364*/ System.Exception DerivedClassMustOverride();
                static /*0x115f6e8*/ System.Exception HashAlgorithmNameNullOrEmpty();
                static /*0x11608ac*/ System.Security.Cryptography.RSA Create(int keySizeInBits);
                static /*0x1160978*/ System.Security.Cryptography.RSA Create(System.Security.Cryptography.RSAParameters parameters);
                /*0x115f1a0*/ RSA();
                /*0x115f340*/ byte[] Encrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
                /*0x115f3ec*/ byte[] Decrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
                /*0x115f410*/ byte[] SignHash(byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115f434*/ bool VerifyHash(byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115f458*/ byte[] HashData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x115f47c*/ byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x115f4a0*/ byte[] SignData(byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115f518*/ byte[] SignData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115f788*/ byte[] SignData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115f8c8*/ bool VerifyData(byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115f944*/ bool VerifyData(byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115fb4c*/ bool VerifyData(System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x115fcc4*/ byte[] DecryptValue(byte[] rgb);
                /*0x115fd24*/ byte[] EncryptValue(byte[] rgb);
                /*0x115fd84*/ string get_KeyExchangeAlgorithm();
                /*0x115fdc4*/ string get_SignatureAlgorithm();
                /*0x115fe04*/ void FromXmlString(string xmlString);
                /*0x116046c*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x1160a70*/ bool TryDecrypt(System.ReadOnlySpan<byte> data, System.Span<byte> destination, System.Security.Cryptography.RSAEncryptionPadding padding, ref int bytesWritten);
                /*0x1160b84*/ bool TryEncrypt(System.ReadOnlySpan<byte> data, System.Span<byte> destination, System.Security.Cryptography.RSAEncryptionPadding padding, ref int bytesWritten);
                /*0x1160c98*/ bool TryHashData(System.ReadOnlySpan<byte> data, System.Span<byte> destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, ref int bytesWritten);
                /*0x1160ef8*/ bool TrySignHash(System.ReadOnlySpan<byte> hash, System.Span<byte> destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding, ref int bytesWritten);
                /*0x116101c*/ bool TrySignData(System.ReadOnlySpan<byte> data, System.Span<byte> destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding, ref int bytesWritten);
                /*0x1161208*/ bool VerifyData(System.ReadOnlySpan<byte> data, System.ReadOnlySpan<byte> signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x1161540*/ bool VerifyHash(System.ReadOnlySpan<byte> hash, System.ReadOnlySpan<byte> signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x11615e4*/ byte[] ExportRSAPrivateKey();
                /*0x1161624*/ byte[] ExportRSAPublicKey();
                /*0x1161664*/ void ImportRSAPrivateKey(System.ReadOnlySpan<byte> source, ref int bytesRead);
                /*0x11616a4*/ void ImportRSAPublicKey(System.ReadOnlySpan<byte> source, ref int bytesRead);
                /*0x11616e4*/ bool TryExportRSAPrivateKey(System.Span<byte> destination, ref int bytesWritten);
                /*0x1161724*/ bool TryExportRSAPublicKey(System.Span<byte> destination, ref int bytesWritten);
            }

            class RSACryptoServiceProvider : System.Security.Cryptography.RSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
            {
                static int PROV_RSA_FULL = 1;
                static int AT_KEYEXCHANGE = 1;
                static int AT_SIGNATURE = 2;
                static /*0x0*/ System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.RSAManaged rsa;

                static /*0x11617a4*/ bool get_UseMachineKeyStore();
                static /*0x11617f8*/ void set_UseMachineKeyStore(bool value);
                static /*0x11618bc*/ int GetAlgorithmId(System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                static /*0x1161cdc*/ System.Exception PaddingModeNotSupported();
                static /*0x1163964*/ System.Security.Cryptography.HashAlgorithm InternalHashToHashAlgorithm(int calgHash);
                /*0x115f21c*/ RSACryptoServiceProvider();
                /*0x11625ec*/ RSACryptoServiceProvider(System.Security.Cryptography.CspParameters parameters);
                /*0x11625b4*/ RSACryptoServiceProvider(int dwKeySize);
                /*0x11625f8*/ RSACryptoServiceProvider(int dwKeySize, System.Security.Cryptography.CspParameters parameters);
                /*0x1161764*/ string get_SignatureAlgorithm();
                /*0x116184c*/ byte[] HashData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x1161890*/ byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x1161a68*/ byte[] Encrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
                /*0x1161d64*/ byte[] Decrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
                /*0x1162164*/ byte[] SignHash(byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x116236c*/ bool VerifyHash(byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
                /*0x1162654*/ void Common(int dwKeySize, bool parameters);
                /*0x1162870*/ void Common(System.Security.Cryptography.CspParameters p);
                /*0x1162990*/ void Finalize();
                /*0x1162a30*/ string get_KeyExchangeAlgorithm();
                /*0x1162a70*/ int get_KeySize();
                /*0x1162a90*/ bool get_PersistKeyInCsp();
                /*0x1162a98*/ void set_PersistKeyInCsp(bool value);
                /*0x1162b30*/ bool get_PublicOnly();
                /*0x1161f24*/ byte[] Decrypt(byte[] rgb, bool fOAEP);
                /*0x1162d3c*/ byte[] DecryptValue(byte[] rgb);
                /*0x1161c28*/ byte[] Encrypt(byte[] rgb, bool fOAEP);
                /*0x1162fc4*/ byte[] EncryptValue(byte[] rgb);
                /*0x1162fe8*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x116312c*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x1163180*/ System.Security.Cryptography.HashAlgorithm GetHash(object halg);
                /*0x11633cc*/ System.Security.Cryptography.HashAlgorithm GetHashFromString(string name);
                /*0x11636b4*/ byte[] SignData(byte[] buffer, object halg);
                /*0x11637d0*/ byte[] SignData(System.IO.Stream inputStream, object halg);
                /*0x116371c*/ byte[] SignData(byte[] buffer, int offset, int count, object halg);
                /*0x11634e8*/ string GetHashNameFromOID(string oid);
                /*0x116386c*/ byte[] SignHash(byte[] rgbHash, string str);
                /*0x11622ec*/ byte[] SignHash(byte[] rgbHash, int calgHash);
                /*0x1163b8c*/ bool VerifyData(byte[] buffer, object halg, byte[] signature);
                /*0x1163ca8*/ bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature);
                /*0x1162524*/ bool VerifyHash(byte[] rgbHash, int calgHash, byte[] rgbSignature);
                /*0x1163dd0*/ void Dispose(bool disposing);
                /*0x1162aac*/ void OnKeyGenerated(object sender, System.EventArgs e);
                /*0x1163e24*/ System.Security.Cryptography.CspKeyContainerInfo get_CspKeyContainerInfo();
                /*0x1163ed8*/ byte[] ExportCspBlob(bool includePrivateParameters);
                /*0x1163f5c*/ void ImportCspBlob(byte[] keyBlob);
            }

            class RSAOAEPKeyExchangeDeformatter : System.Security.Cryptography.AsymmetricKeyExchangeDeformatter
            {
                /*0x10*/ System.Security.Cryptography.RSA _rsaKey;
                /*0x18*/ System.Nullable<bool> _rsaOverridesDecrypt;

                /*0x116424c*/ RSAOAEPKeyExchangeDeformatter();
                /*0x1162b4c*/ RSAOAEPKeyExchangeDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1164254*/ string get_Parameters();
                /*0x116425c*/ void set_Parameters(string value);
                /*0x1164260*/ byte[] DecryptKeyExchange(byte[] rgbData);
                /*0x11646b8*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x11643f8*/ bool get_OverridesDecrypt();
            }

            class RSAOAEPKeyExchangeFormatter : System.Security.Cryptography.AsymmetricKeyExchangeFormatter
            {
                /*0x10*/ byte[] ParameterValue;
                /*0x18*/ System.Security.Cryptography.RSA _rsaKey;
                /*0x20*/ System.Nullable<bool> _rsaOverridesEncrypt;
                /*0x28*/ System.Security.Cryptography.RandomNumberGenerator RngValue;

                /*0x11648a0*/ RSAOAEPKeyExchangeFormatter();
                /*0x1162dd4*/ RSAOAEPKeyExchangeFormatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x11648a8*/ byte[] get_Parameter();
                /*0x116491c*/ void set_Parameter(byte[] value);
                /*0x11649c4*/ string get_Parameters();
                /*0x11649cc*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
                /*0x11649d4*/ void set_Rng(System.Security.Cryptography.RandomNumberGenerator value);
                /*0x11649dc*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1164acc*/ byte[] CreateKeyExchange(byte[] rgbData);
                /*0x1164ee8*/ byte[] CreateKeyExchange(byte[] rgbData, System.Type symAlgType);
                /*0x1164c78*/ bool get_OverridesEncrypt();
            }

            class RSAPKCS1KeyExchangeDeformatter : System.Security.Cryptography.AsymmetricKeyExchangeDeformatter
            {
                /*0x10*/ System.Security.Cryptography.RSA _rsaKey;
                /*0x18*/ System.Nullable<bool> _rsaOverridesDecrypt;
                /*0x20*/ System.Security.Cryptography.RandomNumberGenerator RngValue;

                /*0x1164ef4*/ RSAPKCS1KeyExchangeDeformatter();
                /*0x1162c44*/ RSAPKCS1KeyExchangeDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1164efc*/ System.Security.Cryptography.RandomNumberGenerator get_RNG();
                /*0x1164f04*/ void set_RNG(System.Security.Cryptography.RandomNumberGenerator value);
                /*0x1164f0c*/ string get_Parameters();
                /*0x1164f14*/ void set_Parameters(string value);
                /*0x1164f18*/ byte[] DecryptKeyExchange(byte[] rgbIn);
                /*0x11652ec*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x11650fc*/ bool get_OverridesDecrypt();
            }

            class RSAPKCS1KeyExchangeFormatter : System.Security.Cryptography.AsymmetricKeyExchangeFormatter
            {
                /*0x10*/ System.Security.Cryptography.RandomNumberGenerator RngValue;
                /*0x18*/ System.Security.Cryptography.RSA _rsaKey;
                /*0x20*/ System.Nullable<bool> _rsaOverridesEncrypt;

                /*0x11653dc*/ RSAPKCS1KeyExchangeFormatter();
                /*0x1162ecc*/ RSAPKCS1KeyExchangeFormatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x11653e4*/ string get_Parameters();
                /*0x1165424*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
                /*0x116542c*/ void set_Rng(System.Security.Cryptography.RandomNumberGenerator value);
                /*0x1165434*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1165524*/ byte[] CreateKeyExchange(byte[] rgbData);
                /*0x1165a38*/ byte[] CreateKeyExchange(byte[] rgbData, System.Type symAlgType);
                /*0x1165848*/ bool get_OverridesEncrypt();
            }

            class SHA1 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1163a28*/ System.Security.Cryptography.SHA1 Create();
                static /*0x1165a64*/ System.Security.Cryptography.SHA1 Create(string hashName);
                /*0x1165a44*/ SHA1();
            }

            class SHA1Managed : System.Security.Cryptography.SHA1
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA1;
                /*0x40*/ uint[] _expandedBuffer;

                static /*0x1165fec*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x1166564*/ void SHAExpand(uint* x);
                /*0x1165b04*/ SHA1Managed();
                /*0x1165c58*/ void Initialize();
                /*0x1165c9c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x1165e1c*/ byte[] HashFinal();
                /*0x1165bd4*/ void InitializeState();
                /*0x1165ca0*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x1165e20*/ byte[] _EndHash();
            }

            class SHA256 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1163a84*/ System.Security.Cryptography.SHA256 Create();
                static /*0x1166688*/ System.Security.Cryptography.SHA256 Create(string hashName);
                /*0x11665a0*/ SHA256();
            }

            class SHA256Managed : System.Security.Cryptography.SHA256
            {
                static /*0x0*/ uint[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA256;
                /*0x40*/ uint[] _W;

                static /*0x116739c*/ SHA256Managed();
                static /*0x1166bcc*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x11672dc*/ uint RotateRight(uint x, int n);
                static /*0x116725c*/ uint Ch(uint x, uint y, uint z);
                static /*0x11672c8*/ uint Maj(uint x, uint y, uint z);
                static /*0x11672e4*/ uint sigma_0(uint x);
                static /*0x1167340*/ uint sigma_1(uint x);
                static /*0x116726c*/ uint Sigma_0(uint x);
                static /*0x1167200*/ uint Sigma_1(uint x);
                static /*0x1167158*/ void SHA256Expand(uint* x);
                /*0x11665c0*/ SHA256Managed();
                /*0x11667e8*/ void Initialize();
                /*0x116682c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x11669fc*/ byte[] HashFinal();
                /*0x1166728*/ void InitializeState();
                /*0x1166830*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x1166a00*/ byte[] _EndHash();
            }

            class SHA384 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1163adc*/ System.Security.Cryptography.SHA384 Create();
                static /*0x1167518*/ System.Security.Cryptography.SHA384 Create(string hashName);
                /*0x1167430*/ SHA384();
            }

            class SHA384Managed : System.Security.Cryptography.SHA384
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA384;
                /*0x40*/ ulong[] _W;

                static /*0x11684a0*/ SHA384Managed();
                static /*0x1167a9c*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x11683e0*/ ulong RotateRight(ulong x, int n);
                static /*0x1168360*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x11683cc*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x1168370*/ ulong Sigma_0(ulong x);
                static /*0x1168304*/ ulong Sigma_1(ulong x);
                static /*0x11683e8*/ ulong sigma_0(ulong x);
                static /*0x1168444*/ ulong sigma_1(ulong x);
                static /*0x116825c*/ void SHA384Expand(ulong* x);
                /*0x1167450*/ SHA384Managed();
                /*0x11676b8*/ void Initialize();
                /*0x11676fc*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x11678cc*/ byte[] HashFinal();
                /*0x11675b8*/ void InitializeState();
                /*0x1167700*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x11678d0*/ byte[] _EndHash();
            }

            class SHA512 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1163b34*/ System.Security.Cryptography.SHA512 Create();
                static /*0x116861c*/ System.Security.Cryptography.SHA512 Create(string hashName);
                /*0x1168534*/ SHA512();
            }

            class SHA512Managed : System.Security.Cryptography.SHA512
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA512;
                /*0x40*/ ulong[] _W;

                static /*0x1169368*/ SHA512Managed();
                static /*0x1168ba0*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x11692a8*/ ulong RotateRight(ulong x, int n);
                static /*0x1169228*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x1169294*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x1169238*/ ulong Sigma_0(ulong x);
                static /*0x11691cc*/ ulong Sigma_1(ulong x);
                static /*0x11692b0*/ ulong sigma_0(ulong x);
                static /*0x116930c*/ ulong sigma_1(ulong x);
                static /*0x1169124*/ void SHA512Expand(ulong* x);
                /*0x1168554*/ SHA512Managed();
                /*0x11687bc*/ void Initialize();
                /*0x1168800*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x11689d0*/ byte[] HashFinal();
                /*0x11686bc*/ void InitializeState();
                /*0x1168804*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x11689d4*/ byte[] _EndHash();
            }

            class SignatureDescription
            {
                /*0x10*/ string _strKey;
                /*0x18*/ string _strDigest;
                /*0x20*/ string _strFormatter;
                /*0x28*/ string _strDeformatter;

                /*0x11693fc*/ SignatureDescription();
                /*0x1169404*/ SignatureDescription(System.Security.SecurityElement el);
                /*0x1169538*/ string get_KeyAlgorithm();
                /*0x1169540*/ void set_KeyAlgorithm(string value);
                /*0x1169548*/ string get_DigestAlgorithm();
                /*0x1169550*/ void set_DigestAlgorithm(string value);
                /*0x1169558*/ string get_FormatterAlgorithm();
                /*0x1169560*/ void set_FormatterAlgorithm(string value);
                /*0x1169568*/ string get_DeformatterAlgorithm();
                /*0x1169570*/ void set_DeformatterAlgorithm(string value);
                /*0x1169578*/ System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1169648*/ System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1169718*/ System.Security.Cryptography.HashAlgorithm CreateDigest();
            }

            class RSAPKCS1SignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x30*/ string _hashAlgorithm;

                /*0x11697bc*/ RSAPKCS1SignatureDescription(string hashAlgorithm, string digestAlgorithm);
                /*0x1169860*/ System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x116989c*/ System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm key);
            }

            class RSAPKCS1SHA1SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x11698d8*/ RSAPKCS1SHA1SignatureDescription();
            }

            class RSAPKCS1SHA256SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x1169940*/ RSAPKCS1SHA256SignatureDescription();
            }

            class RSAPKCS1SHA384SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x11699a8*/ RSAPKCS1SHA384SignatureDescription();
            }

            class RSAPKCS1SHA512SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x1169a10*/ RSAPKCS1SHA512SignatureDescription();
            }

            class DSASignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x1169a78*/ DSASignatureDescription();
            }

            class SymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int BlockSizeValue;
                /*0x14*/ int FeedbackSizeValue;
                /*0x18*/ byte[] IVValue;
                /*0x20*/ byte[] KeyValue;
                /*0x28*/ System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
                /*0x30*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
                /*0x38*/ int KeySizeValue;
                /*0x3c*/ System.Security.Cryptography.CipherMode ModeValue;
                /*0x40*/ System.Security.Cryptography.PaddingMode PaddingValue;

                static /*0x116a53c*/ System.Security.Cryptography.SymmetricAlgorithm Create();
                static /*0x116a598*/ System.Security.Cryptography.SymmetricAlgorithm Create(string algName);
                /*0x1169b30*/ SymmetricAlgorithm();
                /*0x1169b54*/ void Dispose();
                /*0x1169bc0*/ void Clear();
                /*0x1169c54*/ void Dispose(bool disposing);
                /*0x1169ca0*/ int get_BlockSize();
                /*0x1169ca8*/ void set_BlockSize(int value);
                /*0x1169d98*/ int get_FeedbackSize();
                /*0x1169da0*/ void set_FeedbackSize(int value);
                /*0x1169e2c*/ byte[] get_IV();
                /*0x1169ec0*/ void set_IV(byte[] value);
                /*0x116a028*/ byte[] get_Key();
                /*0x116a0bc*/ void set_Key(byte[] value);
                /*0x116a2b8*/ System.Security.Cryptography.KeySizes[] get_LegalBlockSizes();
                /*0x116a330*/ System.Security.Cryptography.KeySizes[] get_LegalKeySizes();
                /*0x116a3a8*/ int get_KeySize();
                /*0x116a3b0*/ void set_KeySize(int value);
                /*0x116a434*/ System.Security.Cryptography.CipherMode get_Mode();
                /*0x116a43c*/ void set_Mode(System.Security.Cryptography.CipherMode value);
                /*0x116a4b8*/ System.Security.Cryptography.PaddingMode get_Padding();
                /*0x116a4c0*/ void set_Padding(System.Security.Cryptography.PaddingMode value);
                /*0x116a21c*/ bool ValidKeySize(int bitLength);
                /*0x116a638*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor();
                System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x116a688*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor();
                System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                void GenerateKey();
                void GenerateIV();
            }

            class TripleDES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x116af74*/ TripleDES();
                static /*0x116ab6c*/ System.Security.Cryptography.TripleDES Create();
                static /*0x116ac48*/ System.Security.Cryptography.TripleDES Create(string str);
                static /*0x116a828*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x116add4*/ bool EqualBytes(byte[] rgbKey, int start1, int start2, int count);
                static /*0x116ace8*/ bool IsLegalKeySize(byte[] rgbKey);
                /*0x116a6d8*/ TripleDES();
                /*0x116a760*/ byte[] get_Key();
                /*0x116a988*/ void set_Key(byte[] value);
            }

            class TripleDESCryptoServiceProvider : System.Security.Cryptography.TripleDES
            {
                /*0x116abc4*/ TripleDESCryptoServiceProvider();
                /*0x116b0cc*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x116b1e4*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x116b2fc*/ void GenerateKey();
                /*0x116b4d4*/ void GenerateIV();
            }

            enum CspAlgorithmType
            {
                Rsa = 0,
                Dss = 1,
            }

            class Constants
            {
                static int S_OK = 0;
                static int NTE_FILENOTFOUND = -2147024894;
                static int NTE_NO_KEY = -2146893811;
                static int NTE_BAD_KEYSET = -2146893802;
                static int NTE_KEYSET_NOT_DEF = -2146893799;
                static int KP_IV = 1;
                static int KP_MODE = 4;
                static int KP_MODE_BITS = 5;
                static int KP_EFFECTIVE_KEYLEN = 19;
                static int ALG_CLASS_SIGNATURE = 8192;
                static int ALG_CLASS_DATA_ENCRYPT = 24576;
                static int ALG_CLASS_HASH = 32768;
                static int ALG_CLASS_KEY_EXCHANGE = 40960;
                static int ALG_TYPE_DSS = 512;
                static int ALG_TYPE_RSA = 1024;
                static int ALG_TYPE_BLOCK = 1536;
                static int ALG_TYPE_STREAM = 2048;
                static int ALG_TYPE_ANY = 0;
                static int CALG_MD5 = 32771;
                static int CALG_SHA1 = 32772;
                static int CALG_SHA_256 = 32780;
                static int CALG_SHA_384 = 32781;
                static int CALG_SHA_512 = 32782;
                static int CALG_RSA_KEYX = 41984;
                static int CALG_RSA_SIGN = 9216;
                static int CALG_DSS_SIGN = 8704;
                static int CALG_DES = 26113;
                static int CALG_RC2 = 26114;
                static int CALG_3DES = 26115;
                static int CALG_3DES_112 = 26121;
                static int CALG_AES_128 = 26126;
                static int CALG_AES_192 = 26127;
                static int CALG_AES_256 = 26128;
                static int CALG_RC4 = 26625;
                static int PROV_RSA_FULL = 1;
                static int PROV_DSS_DH = 13;
                static int PROV_RSA_AES = 24;
                static int AT_KEYEXCHANGE = 1;
                static int AT_SIGNATURE = 2;
                static int PUBLICKEYBLOB = 6;
                static int PRIVATEKEYBLOB = 7;
                static int CRYPT_OAEP = 64;
                static uint CRYPT_VERIFYCONTEXT = 4026531840;
                static uint CRYPT_NEWKEYSET = 8;
                static uint CRYPT_DELETEKEYSET = 16;
                static uint CRYPT_MACHINE_KEYSET = 32;
                static uint CRYPT_SILENT = 64;
                static uint CRYPT_EXPORTABLE = 1;
                static uint CLR_KEYLEN = 1;
                static uint CLR_PUBLICKEYONLY = 2;
                static uint CLR_EXPORTABLE = 3;
                static uint CLR_REMOVABLE = 4;
                static uint CLR_HARDWARE = 5;
                static uint CLR_ACCESSIBLE = 6;
                static uint CLR_PROTECTED = 7;
                static uint CLR_UNIQUE_CONTAINER = 8;
                static uint CLR_ALGID = 9;
                static uint CLR_PP_CLIENT_HWND = 10;
                static uint CLR_PP_PIN = 11;
                static string OID_RSA_SMIMEalgCMS3DESwrap = "1.2.840.113549.1.9.16.3.6";
                static string OID_RSA_MD5 = "1.2.840.113549.2.5";
                static string OID_RSA_RC2CBC = "1.2.840.113549.3.2";
                static string OID_RSA_DES_EDE3_CBC = "1.2.840.113549.3.7";
                static string OID_OIWSEC_desCBC = "1.3.14.3.2.7";
                static string OID_OIWSEC_SHA1 = "1.3.14.3.2.26";
                static string OID_OIWSEC_SHA256 = "2.16.840.1.101.3.4.2.1";
                static string OID_OIWSEC_SHA384 = "2.16.840.1.101.3.4.2.2";
                static string OID_OIWSEC_SHA512 = "2.16.840.1.101.3.4.2.3";
                static string OID_OIWSEC_RIPEMD160 = "1.3.36.3.2.1";
            }

            class Utils
            {
                static int DefaultRsaProviderType = 1;
                static /*0x0*/ System.Security.Cryptography.RNGCryptoServiceProvider _rng;

                static /*0x116b568*/ Utils();
                static /*0x116b400*/ System.Security.Cryptography.RNGCryptoServiceProvider get_StaticRandomNumberGenerator();
                static /*0x116b56c*/ byte[] GenerateRandom(int keySize);
                static /*0x116b0c4*/ bool HasAlgorithm(int dwCalg, int dwKeySize);
                static /*0x1160404*/ string DiscardWhiteSpaces(string inputBuffer);
                static /*0x116b60c*/ string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount);
                static /*0x116b794*/ int ConvertByteArrayToInt(byte[] input);
                static /*0x116b7f4*/ byte[] ConvertIntToByteArray(int dwInput);
                static /*0x116b914*/ void ConvertIntToByteArray(uint dwInput, ref byte[] counter);
                static /*0x116ad0c*/ byte[] FixupKeyParity(byte[] key);
                static /*0x116b984*/ void DWORDFromLittleEndian(uint* x, int digits, byte* block);
                static /*0x116b9d0*/ void DWORDToLittleEndian(byte[] block, uint[] x, int digits);
                static /*0x1166514*/ void DWORDFromBigEndian(uint* x, int digits, byte* block);
                static /*0x1166420*/ void DWORDToBigEndian(byte[] block, uint[] x, int digits);
                static /*0x11681dc*/ void QuadWordFromBigEndian(ulong* x, int digits, byte* block);
                static /*0x1168020*/ void QuadWordToBigEndian(byte[] block, ulong[] x, int digits);
                static /*0x116bac4*/ byte[] Int(uint i);
                static /*0x1164e68*/ byte[] RsaOaepEncrypt(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, System.Security.Cryptography.PKCS1MaskGenerationMethod mgf, System.Security.Cryptography.RandomNumberGenerator rng, byte[] data);
                static /*0x11645e8*/ byte[] RsaOaepDecrypt(System.Security.Cryptography.RSA rsa, System.Security.Cryptography.HashAlgorithm hash, System.Security.Cryptography.PKCS1MaskGenerationMethod mgf, byte[] encryptedData);
                static /*0x116bb58*/ byte[] RsaPkcs1Padding(System.Security.Cryptography.RSA rsa, byte[] oid, byte[] hash);
                static /*0x116be04*/ bool CompareBigIntArrays(byte[] lhs, byte[] rhs);
                static /*0x116bf18*/ System.Security.Cryptography.HashAlgorithmName OidToHashAlgorithmName(string oid);
                static /*0x11647a8*/ bool DoesRsaKeyOverride(System.Security.Cryptography.RSA rsaKey, string methodName, System.Type[] parameterTypes);
                static /*0x116c054*/ bool DoesRsaKeyOverrideSlowPath(System.Type t, string methodName, System.Type[] parameterTypes);
                static /*0x116c130*/ bool _ProduceLegacyHmacValues();
            }

            class CryptoAPITransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x10*/ bool m_disposed;

                /*0x116c138*/ CryptoAPITransform();
                /*0x116c154*/ bool get_CanReuseTransform();
                /*0x116c15c*/ bool get_CanTransformMultipleBlocks();
                /*0x116c164*/ int get_InputBlockSize();
                /*0x116c16c*/ nint get_KeyHandle();
                /*0x116c1b4*/ int get_OutputBlockSize();
                /*0x116c1bc*/ void Dispose();
                /*0x116c23c*/ void Clear();
                /*0x116c224*/ void Dispose(bool disposing);
                /*0x116c254*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x116c25c*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x116c264*/ void Reset();
            }

            class CryptoConfig
            {
                static /*0x0*/ object lockObject;
                static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Type> algorithms;

                static /*0x116f4f4*/ CryptoConfig();
                static /*0x116c268*/ void AddOID(string oid, string[] names);
                static /*0x115f2e8*/ object CreateFromName(string name);
                static /*0x116c2a8*/ object CreateFromName(string name, object[] args);
                static /*0x116e2a8*/ string MapNameToOID(string name, object arg);
                static /*0x116e2fc*/ string MapNameToOID(string name);
                static /*0x116eab0*/ void Initialize();
                static /*0x116ebb0*/ void AddAlgorithm(System.Type algorithm, string[] names);
                static /*0x116ef50*/ byte[] EncodeOID(string str);
                static /*0x116f35c*/ byte[] EncodeLongNumber(long x);
                static /*0x1165bcc*/ bool get_AllowOnlyFipsAlgorithms();
                /*0x116f4ec*/ CryptoConfig();
            }

            class CspKeyContainerInfo
            {
                /*0x10*/ System.Security.Cryptography.CspParameters _params;
                /*0x18*/ bool _random;

                /*0x1163ea8*/ CspKeyContainerInfo(System.Security.Cryptography.CspParameters parameters);
                /*0x116f56c*/ bool get_Accessible();
                /*0x116f574*/ System.Security.AccessControl.CryptoKeySecurity get_CryptoKeySecurity();
                /*0x116f57c*/ bool get_Exportable();
                /*0x116f584*/ bool get_HardwareDevice();
                /*0x116f58c*/ string get_KeyContainerName();
                /*0x116f5a8*/ System.Security.Cryptography.KeyNumber get_KeyNumber();
                /*0x116f5c4*/ bool get_MachineKeyStore();
                /*0x116f5cc*/ bool get_Protected();
                /*0x116f5d4*/ string get_ProviderName();
                /*0x116f5f0*/ int get_ProviderType();
                /*0x116f60c*/ bool get_RandomlyGenerated();
                /*0x116f614*/ bool get_Removable();
                /*0x116f61c*/ string get_UniqueKeyContainerName();
            }

            class DESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ int KEY_BIT_SIZE;
                static /*0x4*/ int KEY_BYTE_SIZE;
                static /*0x8*/ int BLOCK_BIT_SIZE;
                static /*0xc*/ int BLOCK_BYTE_SIZE;
                static /*0x10*/ uint[] spBoxes;
                static /*0x18*/ byte[] PC1;
                static /*0x20*/ byte[] leftRotTotal;
                static /*0x28*/ byte[] PC2;
                static /*0x30*/ uint[] ipTab;
                static /*0x38*/ uint[] fpTab;
                /*0x58*/ byte[] keySchedule;
                /*0x60*/ byte[] byteBuff;
                /*0x68*/ uint[] dwordBuff;

                static /*0x11706f8*/ DESTransform();
                static /*0x116ff30*/ void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap);
                static /*0x1170254*/ void BSwap(byte[] byteBuff);
                static /*0x116f89c*/ byte[] GetStrongKey();
                /*0x116f674*/ DESTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv);
                /*0x116fd00*/ uint CipherFunct(uint r, int n);
                /*0x116f974*/ void SetKey(byte[] key);
                /*0x11702cc*/ void ProcessBlock(byte[] input, byte[] output);
                /*0x1170654*/ void ECB(byte[] input, byte[] output);
            }

            class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
            {
                static int PROV_DSS_DH = 13;
                static /*0x0*/ bool useMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.DSAManaged dsa;

                static /*0x1170dac*/ bool get_UseMachineKeyStore();
                static /*0x1170df4*/ void set_UseMachineKeyStore(bool value);
                /*0x116e1d4*/ DSACryptoServiceProvider();
                /*0x1170930*/ DSACryptoServiceProvider(System.Security.Cryptography.CspParameters parameters);
                /*0x11708f8*/ DSACryptoServiceProvider(int dwKeySize);
                /*0x117093c*/ DSACryptoServiceProvider(int dwKeySize, System.Security.Cryptography.CspParameters parameters);
                /*0x1170998*/ void Common(int dwKeySize, bool parameters);
                /*0x1170bbc*/ void Common(System.Security.Cryptography.CspParameters parameters);
                /*0x1170c74*/ void Finalize();
                /*0x1170d14*/ string get_KeyExchangeAlgorithm();
                /*0x1170d1c*/ int get_KeySize();
                /*0x1170d3c*/ bool get_PersistKeyInCsp();
                /*0x1170d44*/ void set_PersistKeyInCsp(bool value);
                /*0x1170d50*/ bool get_PublicOnly();
                /*0x1170d6c*/ string get_SignatureAlgorithm();
                /*0x1170e40*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x1170ef8*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x1170f4c*/ byte[] CreateSignature(byte[] rgbHash);
                /*0x1170f70*/ byte[] SignData(byte[] buffer);
                /*0x1170fc0*/ byte[] SignData(byte[] buffer, int offset, int count);
                /*0x1171028*/ byte[] SignData(System.IO.Stream inputStream);
                /*0x1171078*/ byte[] SignHash(byte[] rgbHash, string str);
                /*0x1171184*/ bool VerifyData(byte[] rgbData, byte[] rgbSignature);
                /*0x11711dc*/ bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature);
                /*0x1171304*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
                /*0x1171328*/ byte[] HashData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x1171428*/ byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
                /*0x1171510*/ void Dispose(bool disposing);
                /*0x1171564*/ void OnKeyGenerated(object sender, System.EventArgs e);
                /*0x11715e8*/ System.Security.Cryptography.CspKeyContainerInfo get_CspKeyContainerInfo();
                /*0x11715f0*/ byte[] ExportCspBlob(bool includePrivateParameters);
                /*0x1171604*/ void ImportCspBlob(byte[] keyBlob);
            }

            class MD5CryptoServiceProvider : System.Security.Cryptography.MD5
            {
                static int BLOCK_SIZE_BYTES = 64;
                static /*0x0*/ uint[] K;
                /*0x28*/ uint[] _H;
                /*0x30*/ uint[] buff;
                /*0x38*/ ulong count;
                /*0x40*/ byte[] _ProcessingBuffer;
                /*0x48*/ int _ProcessingBufferCount;

                static /*0x1172ad8*/ MD5CryptoServiceProvider();
                /*0x116e200*/ MD5CryptoServiceProvider();
                /*0x1171864*/ void Finalize();
                /*0x1171908*/ void Dispose(bool disposing);
                /*0x1171978*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x11726f0*/ byte[] HashFinal();
                /*0x1172974*/ void Initialize();
                /*0x1171a78*/ void ProcessBlock(byte[] inputBuffer, int inputOffset);
                /*0x11727c8*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x11729e8*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class RC2Transform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ byte[] pitable;
                /*0x58*/ ushort R0;
                /*0x5a*/ ushort R1;
                /*0x5c*/ ushort R2;
                /*0x5e*/ ushort R3;
                /*0x60*/ ushort[] K;
                /*0x68*/ int j;

                static /*0x101101c*/ RC2Transform();
                /*0x10101a4*/ RC2Transform(System.Security.Cryptography.RC2 rc2Algo, bool encryption, byte[] key, byte[] iv);
                /*0x10106ec*/ void ECB(byte[] input, byte[] output);
            }

            class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator
            {
                static /*0x0*/ object _lock;
                /*0x10*/ nint _handle;

                static /*0x10110b0*/ RNGCryptoServiceProvider();
                static /*0x1011130*/ bool RngOpen();
                static /*0x10111cc*/ nint RngInitialize(byte* seed, nint seed_length);
                static /*0x10114e4*/ nint RngGetBytes(nint handle, byte* data, nint data_length);
                static /*0x10114e8*/ void RngClose(nint handle);
                /*0x1011134*/ RNGCryptoServiceProvider();
                /*0x1011284*/ RNGCryptoServiceProvider(byte[] rgb);
                /*0x101134c*/ RNGCryptoServiceProvider(System.Security.Cryptography.CspParameters cspParams);
                /*0x10113e4*/ RNGCryptoServiceProvider(string str);
                /*0x10111d0*/ void Check();
                /*0x10114ec*/ void GetBytes(byte[] data);
                /*0x1011708*/ void GetBytes(byte* data, nint data_length);
                /*0x10118a0*/ void GetNonZeroBytes(byte[] data);
                /*0x1011a4c*/ void Finalize();
                /*0x1011b64*/ void Dispose(bool disposing);
            }

            class RSAPKCS1SignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ System.Security.Cryptography.RSA rsa;
                /*0x18*/ string hashName;

                /*0x1011b70*/ RSAPKCS1SignatureDeformatter();
                /*0x1011b78*/ RSAPKCS1SignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1011bac*/ void SetHashAlgorithm(string strName);
                /*0x1011c0c*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1011cf8*/ bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
            }

            class RSAPKCS1SignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x10*/ System.Security.Cryptography.RSA rsa;
                /*0x18*/ string hash;

                /*0x1011e58*/ RSAPKCS1SignatureFormatter();
                /*0x1011e60*/ RSAPKCS1SignatureFormatter(System.Security.Cryptography.AsymmetricAlgorithm key);
                /*0x1011e94*/ byte[] CreateSignature(byte[] rgbHash);
                /*0x1011fbc*/ void SetHashAlgorithm(string strName);
                /*0x101201c*/ void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key);
            }

            class SHA1Internal
            {
                static int BLOCK_SIZE_BYTES = 64;
                /*0x10*/ uint[] _H;
                /*0x18*/ ulong count;
                /*0x20*/ byte[] _ProcessingBuffer;
                /*0x28*/ int _ProcessingBufferCount;
                /*0x30*/ uint[] buff;

                static /*0x1012ad8*/ void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset);
                static /*0x1013178*/ void FillBuff(uint[] buff);
                /*0x1012108*/ SHA1Internal();
                /*0x101222c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x1012844*/ byte[] HashFinal();
                /*0x10121a4*/ void Initialize();
                /*0x101232c*/ void ProcessBlock(byte[] inputBuffer, uint inputOffset);
                /*0x101291c*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x10133ac*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class SHA1CryptoServiceProvider : System.Security.Cryptography.SHA1
            {
                /*0x28*/ System.Security.Cryptography.SHA1Internal sha;

                /*0x101349c*/ SHA1CryptoServiceProvider();
                /*0x1013504*/ void Finalize();
                /*0x10135a8*/ void Dispose(bool disposing);
                /*0x10135b4*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x10135d8*/ byte[] HashFinal();
                /*0x10135f8*/ void Initialize();
            }

            class TripleDESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                /*0x58*/ System.Security.Cryptography.DESTransform E1;
                /*0x60*/ System.Security.Cryptography.DESTransform D2;
                /*0x68*/ System.Security.Cryptography.DESTransform E3;
                /*0x70*/ System.Security.Cryptography.DESTransform D1;
                /*0x78*/ System.Security.Cryptography.DESTransform E2;
                /*0x80*/ System.Security.Cryptography.DESTransform D3;

                static /*0x101394c*/ byte[] GetStrongKey();
                /*0x1013610*/ TripleDESTransform(System.Security.Cryptography.TripleDES algo, bool encryption, byte[] key, byte[] iv);
                /*0x10139f4*/ void ECB(byte[] input, byte[] output);
            }

            class AesCcm : System.IDisposable
            {
                static /*0x1013bc0*/ System.Security.Cryptography.KeySizes get_NonceByteSizes();
                static /*0x1013c00*/ System.Security.Cryptography.KeySizes get_TagByteSizes();
                /*0x1013b30*/ AesCcm(byte[] key);
                /*0x1013b78*/ AesCcm(System.ReadOnlySpan<byte> key);
                /*0x1013c40*/ void Decrypt(byte[] nonce, byte[] ciphertext, byte[] tag, byte[] plaintext, byte[] associatedData);
                /*0x1013c80*/ void Decrypt(System.ReadOnlySpan<byte> nonce, System.ReadOnlySpan<byte> ciphertext, System.ReadOnlySpan<byte> tag, System.Span<byte> plaintext, System.ReadOnlySpan<byte> associatedData);
                /*0x1013cc0*/ void Dispose();
                /*0x1013cc4*/ void Encrypt(byte[] nonce, byte[] plaintext, byte[] ciphertext, byte[] tag, byte[] associatedData);
                /*0x1013d04*/ void Encrypt(System.ReadOnlySpan<byte> nonce, System.ReadOnlySpan<byte> plaintext, System.Span<byte> ciphertext, System.Span<byte> tag, System.ReadOnlySpan<byte> associatedData);
            }

            class AesGcm : System.IDisposable
            {
                static /*0x1013dd4*/ System.Security.Cryptography.KeySizes get_NonceByteSizes();
                static /*0x1013e14*/ System.Security.Cryptography.KeySizes get_TagByteSizes();
                /*0x1013d44*/ AesGcm(byte[] key);
                /*0x1013d8c*/ AesGcm(System.ReadOnlySpan<byte> key);
                /*0x1013e54*/ void Decrypt(byte[] nonce, byte[] ciphertext, byte[] tag, byte[] plaintext, byte[] associatedData);
                /*0x1013e94*/ void Decrypt(System.ReadOnlySpan<byte> nonce, System.ReadOnlySpan<byte> ciphertext, System.ReadOnlySpan<byte> tag, System.Span<byte> plaintext, System.ReadOnlySpan<byte> associatedData);
                /*0x1013ed4*/ void Dispose();
                /*0x1013ed8*/ void Encrypt(byte[] nonce, byte[] plaintext, byte[] ciphertext, byte[] tag, byte[] associatedData);
                /*0x1013f18*/ void Encrypt(System.ReadOnlySpan<byte> nonce, System.ReadOnlySpan<byte> plaintext, System.Span<byte> ciphertext, System.Span<byte> tag, System.ReadOnlySpan<byte> associatedData);
            }

            class CryptoConfigForwarder
            {
                static /*0x1013f58*/ object CreateFromName(string name);
                static /*0x1013fb0*/ System.Security.Cryptography.HashAlgorithm CreateDefaultHashAlgorithm();
            }

            enum PbeEncryptionAlgorithm
            {
                Unknown = 0,
                Aes128Cbc = 1,
                Aes192Cbc = 2,
                Aes256Cbc = 3,
                TripleDes3KeyPkcs12 = 4,
            }

            class PbeParameters
            {
                /*0x10*/ System.Security.Cryptography.PbeEncryptionAlgorithm <EncryptionAlgorithm>k__BackingField;
                /*0x18*/ System.Security.Cryptography.HashAlgorithmName <HashAlgorithm>k__BackingField;
                /*0x20*/ int <IterationCount>k__BackingField;

                /*0x1014020*/ PbeParameters(System.Security.Cryptography.PbeEncryptionAlgorithm encryptionAlgorithm, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int iterationCount);
                /*0x1014008*/ System.Security.Cryptography.PbeEncryptionAlgorithm get_EncryptionAlgorithm();
                /*0x1014010*/ System.Security.Cryptography.HashAlgorithmName get_HashAlgorithm();
                /*0x1014018*/ int get_IterationCount();
            }

            namespace X509Certificates
            {
                enum X509ContentType
                {
                    Unknown = 0,
                    Cert = 1,
                    SerializedCert = 2,
                    Pfx = 3,
                    Pkcs12 = 3,
                    SerializedStore = 4,
                    Pkcs7 = 5,
                    Authenticode = 6,
                }

                enum X509KeyStorageFlags
                {
                    DefaultKeySet = 0,
                    UserKeySet = 1,
                    MachineKeySet = 2,
                    Exportable = 4,
                    UserProtected = 8,
                    PersistKeySet = 16,
                    EphemeralKeySet = 32,
                }

                class X509Certificate : System.IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
                {
                    /*0x10*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl impl;
                    /*0x18*/ byte[] lazyCertHash;
                    /*0x20*/ byte[] lazySerialNumber;
                    /*0x28*/ string lazyIssuer;
                    /*0x30*/ string lazySubject;
                    /*0x38*/ string lazyKeyAlgorithm;
                    /*0x40*/ byte[] lazyKeyAlgorithmParameters;
                    /*0x48*/ byte[] lazyPublicKey;
                    /*0x50*/ System.DateTime lazyNotBefore;
                    /*0x58*/ System.DateTime lazyNotAfter;

                    static /*0x10154a4*/ string FormatDate(System.DateTime date);
                    static /*0x10146ec*/ void ValidateKeyStorageFlags(System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                    /*0x101420c*/ X509Certificate();
                    /*0x1014280*/ X509Certificate(byte[] data);
                    /*0x10143c8*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x1014480*/ X509Certificate(string fileName);
                    /*0x101448c*/ X509Certificate(string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                    /*0x10148c8*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate cert);
                    /*0x1014a58*/ X509Certificate(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x10140e8*/ void Reset();
                    /*0x1014a9c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1014adc*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                    /*0x1014b1c*/ string get_Issuer();
                    /*0x1014b78*/ string get_Subject();
                    /*0x1014bcc*/ void Dispose();
                    /*0x1014bdc*/ void Dispose(bool disposing);
                    /*0x1014bf0*/ bool Equals(object obj);
                    /*0x1014c84*/ bool Equals(System.Security.Cryptography.X509Certificates.X509Certificate other);
                    /*0x1014dc0*/ byte[] GetCertHash();
                    /*0x1014e30*/ string GetCertHashString();
                    /*0x1014de4*/ byte[] GetRawCertHash();
                    /*0x1014e54*/ byte[] GetRawCertData();
                    /*0x1014e88*/ int GetHashCode();
                    /*0x1014f00*/ string GetKeyAlgorithm();
                    /*0x1014f58*/ byte[] GetKeyAlgorithmParameters();
                    /*0x1014fb4*/ byte[] GetPublicKey();
                    /*0x1015010*/ byte[] GetSerialNumber();
                    /*0x1015078*/ string GetSerialNumberString();
                    /*0x1014d70*/ byte[] GetRawSerialNumber();
                    /*0x101509c*/ string ToString();
                    /*0x10150b0*/ string ToString(bool fVerbose);
                    /*0x10155b4*/ System.DateTime GetNotAfter();
                    /*0x1015408*/ System.DateTime GetNotBefore();
                    /*0x1015650*/ void ImportHandle(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x1015680*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl get_Impl();
                    /*0x1015688*/ bool get_IsValid();
                    /*0x1014b70*/ void ThrowIfInvalid();
                }

                class X509CertificateImpl : System.IDisposable
                {
                    /*0x1015a5c*/ X509CertificateImpl();
                    bool get_IsValid();
                    /*0x10156e0*/ void ThrowIfContextInvalid();
                    System.Security.Cryptography.X509Certificates.X509CertificateImpl Clone();
                    string get_Issuer();
                    string get_Subject();
                    byte[] get_RawData();
                    System.DateTime get_NotAfter();
                    System.DateTime get_NotBefore();
                    byte[] get_Thumbprint();
                    /*0x10157a4*/ int GetHashCode();
                    string get_KeyAlgorithm();
                    byte[] get_KeyAlgorithmParameters();
                    byte[] get_PublicKeyValue();
                    byte[] get_SerialNumber();
                    bool get_HasPrivateKey();
                    System.Security.Cryptography.RSA GetRSAPrivateKey();
                    System.Security.Cryptography.DSA GetDSAPrivateKey();
                    /*0x1015834*/ bool Equals(object obj);
                    /*0x101419c*/ void Dispose();
                    /*0x10159b4*/ void Dispose(bool disposing);
                    /*0x10159b8*/ void Finalize();
                }

                class X509Helper
                {
                    static /*0x1015a64*/ Mono.ISystemCertificateProvider get_CertificateProvider();
                    static /*0x10149a8*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate cert);
                    static /*0x101446c*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x10153f4*/ bool IsValid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x10156a0*/ void ThrowIfContextInvalid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x101571c*/ System.Exception GetInvalidContextException();
                    static /*0x101431c*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData);
                    static /*0x1014800*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData, Microsoft.Win32.SafeHandles.SafePasswordHandle password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                }
            }
        }

        namespace Principal
        {
            class GenericIdentity : System.Security.Claims.ClaimsIdentity
            {
                /*0x78*/ string m_name;
                /*0x80*/ string m_type;

                /*0x1015b2c*/ GenericIdentity(string name, string type);
                /*0x1015cdc*/ GenericIdentity();
                /*0x1015cf8*/ GenericIdentity(System.Security.Principal.GenericIdentity identity);
                /*0x1015f18*/ System.Security.Claims.ClaimsIdentity Clone();
                /*0x1015f78*/ System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims();
                /*0x1015ff4*/ string get_Name();
                /*0x1015ffc*/ string get_AuthenticationType();
                /*0x1016004*/ bool get_IsAuthenticated();
                /*0x1015c04*/ void AddNameClaim();
            }

            interface IIdentity
            {
                string get_Name();
                string get_AuthenticationType();
                bool get_IsAuthenticated();
            }

            interface IPrincipal
            {
                System.Security.Principal.IIdentity get_Identity();
            }

            enum TokenImpersonationLevel
            {
                None = 0,
                Anonymous = 1,
                Identification = 2,
                Impersonation = 3,
                Delegation = 4,
            }

            class GenericPrincipal : System.Security.Claims.ClaimsPrincipal
            {
                /*0x28*/ System.Security.Principal.IIdentity m_identity;
                /*0x30*/ string[] m_roles;

                /*0x10161fc*/ GenericPrincipal(System.Security.Principal.IIdentity identity, string[] roles);
                /*0x1016404*/ System.Security.Principal.IIdentity get_Identity();
            }

            enum WindowsAccountType
            {
                Normal = 0,
                Guest = 1,
                System = 2,
                Anonymous = 3,
            }

            class WindowsIdentity : System.Security.Claims.ClaimsIdentity, System.Security.Principal.IIdentity, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.IDisposable
            {
                static /*0x0*/ nint invalidWindows;
                /*0x78*/ nint _token;
                /*0x80*/ string _type;
                /*0x88*/ System.Security.Principal.WindowsAccountType _account;
                /*0x8c*/ bool _authenticated;
                /*0x90*/ string _name;
                /*0x98*/ System.Runtime.Serialization.SerializationInfo _info;

                static /*0x1016e90*/ WindowsIdentity();
                static /*0x1016700*/ System.Security.Principal.WindowsIdentity GetCurrent();
                static /*0x1016784*/ nint GetCurrentToken();
                static /*0x10168f0*/ string GetTokenName(nint token);
                /*0x101640c*/ WindowsIdentity(nint userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
                /*0x10165d0*/ WindowsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x101660c*/ WindowsIdentity(System.Security.Claims.ClaimsIdentity claimsIdentity, nint userToken);
                /*0x10166b0*/ void Dispose();
                /*0x1016788*/ System.Security.Principal.WindowsImpersonationContext Impersonate();
                /*0x1016878*/ string get_AuthenticationType();
                /*0x1016880*/ bool get_IsAuthenticated();
                /*0x1016888*/ string get_Name();
                /*0x10168f4*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                /*0x1016bcc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1016d34*/ System.Security.Claims.ClaimsIdentity CloneAsBase();
                /*0x1016e88*/ nint GetTokenInternal();
                /*0x1016470*/ void SetToken(nint token);
            }

            class WindowsImpersonationContext : System.IDisposable
            {
                /*0x10*/ nint _token;
                /*0x18*/ bool undo;

                static /*0x1016fd8*/ bool CloseToken(nint token);
                static /*0x1016ef8*/ nint DuplicateToken(nint token);
                static /*0x1016efc*/ bool SetCurrentToken(nint token);
                static /*0x1016fd4*/ bool RevertToSelf();
                /*0x10167ec*/ WindowsImpersonationContext(nint token);
                /*0x1016f00*/ void Dispose();
                /*0x1016f10*/ void Undo();
            }
        }

        namespace Claims
        {
            class Claim
            {
                /*0x10*/ string m_issuer;
                /*0x18*/ string m_originalIssuer;
                /*0x20*/ string m_type;
                /*0x28*/ string m_value;
                /*0x30*/ string m_valueType;
                /*0x38*/ byte[] m_userSerializationData;
                /*0x40*/ System.Collections.Generic.Dictionary<string, string> m_properties;
                /*0x48*/ object m_propertyLock;
                /*0x50*/ System.Security.Claims.ClaimsIdentity m_subject;

                /*0x1016064*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
                /*0x1016fdc*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject, string propertyKey, string propertyValue);
                /*0x101736c*/ Claim(System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
                /*0x1017680*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x1017234*/ System.Collections.Generic.IDictionary<string, string> get_Properties();
                /*0x10176e0*/ System.Security.Claims.ClaimsIdentity get_Subject();
                /*0x10176e8*/ void set_Subject(System.Security.Claims.ClaimsIdentity value);
                /*0x10176f0*/ string get_Type();
                /*0x10176f8*/ string get_Value();
                /*0x1017700*/ System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity identity);
                /*0x1017770*/ string ToString();
            }

            class ClaimsIdentity : System.Security.Principal.IIdentity
            {
                /*0x10*/ byte[] m_userSerializationData;
                /*0x18*/ System.Collections.Generic.List<System.Security.Claims.Claim> m_instanceClaims;
                /*0x20*/ System.Collections.ObjectModel.Collection<System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>> m_externalClaims;
                /*0x28*/ string m_nameType;
                /*0x30*/ string m_roleType;
                /*0x38*/ string m_version;
                /*0x40*/ System.Security.Claims.ClaimsIdentity m_actor;
                /*0x48*/ string m_authenticationType;
                /*0x50*/ object m_bootstrapContext;
                /*0x58*/ string m_label;
                /*0x60*/ string m_serializedNameType;
                /*0x68*/ string m_serializedRoleType;
                /*0x70*/ string m_serializedClaims;

                /*0x1015be8*/ ClaimsIdentity();
                /*0x10177e8*/ ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x1017804*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
                /*0x101780c*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType, bool checkAuthType);
                /*0x1015d28*/ ClaimsIdentity(System.Security.Claims.ClaimsIdentity other);
                /*0x10183d8*/ ClaimsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1018d50*/ string get_AuthenticationType();
                /*0x1018d58*/ bool get_IsAuthenticated();
                /*0x1018d78*/ System.Security.Claims.ClaimsIdentity get_Actor();
                /*0x1018d80*/ void set_Actor(System.Security.Claims.ClaimsIdentity value);
                /*0x1015f7c*/ System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims();
                /*0x1018e44*/ string get_Name();
                /*0x1018e6c*/ string get_NameClaimType();
                /*0x1016d38*/ System.Security.Claims.ClaimsIdentity Clone();
                /*0x1016084*/ void AddClaim(System.Security.Claims.Claim claim);
                /*0x1017ec0*/ void SafeAddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x10182ac*/ void SafeAddClaim(System.Security.Claims.Claim claim);
                /*0x1018e74*/ System.Security.Claims.Claim FindFirst(string type);
                /*0x10191f0*/ void OnSerializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x10194a0*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x10198b4*/ void OnDeserializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x1019990*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x101957c*/ void DeserializeClaims(string serializedClaims);
                /*0x1019254*/ string SerializeClaims();
                /*0x1017e88*/ bool IsCircular(System.Security.Claims.ClaimsIdentity subject);
                /*0x1018574*/ void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool useContext);

                class <get_Claims>d__51 : System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Security.Claims.Claim <>2__current;
                    /*0x20*/ int <>l__initialThreadId;
                    /*0x28*/ System.Security.Claims.ClaimsIdentity <>4__this;
                    /*0x30*/ int <i>5__2;
                    /*0x38*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> <>7__wrap2;

                    /*0x1018e10*/ <get_Claims>d__51(int <>1__state);
                    /*0x1019f3c*/ void System.IDisposable.Dispose();
                    /*0x1019f58*/ bool MoveNext();
                    /*0x101a350*/ void <>m__Finally1();
                    /*0x101a400*/ System.Security.Claims.Claim System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>.get_Current();
                    /*0x101a408*/ void System.Collections.IEnumerator.Reset();
                    /*0x101a448*/ object System.Collections.IEnumerator.get_Current();
                    /*0x101a450*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>.GetEnumerator();
                    /*0x101a4f4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                }
            }

            class ClaimsPrincipal : System.Security.Principal.IPrincipal
            {
                static /*0x0*/ System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity> s_identitySelector;
                static /*0x8*/ System.Func<System.Security.Claims.ClaimsPrincipal> s_principalSelector;
                /*0x10*/ string m_version;
                /*0x18*/ string m_serializedClaimsIdentities;
                /*0x20*/ System.Collections.Generic.List<System.Security.Claims.ClaimsIdentity> m_identities;

                static /*0x101bda0*/ ClaimsPrincipal();
                static /*0x101a4f8*/ System.Security.Claims.ClaimsIdentity SelectPrimaryIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
                static /*0x101a878*/ System.Func<System.Security.Claims.ClaimsPrincipal> get_ClaimsPrincipalSelector();
                /*0x1016364*/ ClaimsPrincipal();
                /*0x101a8d0*/ ClaimsPrincipal(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x101ab24*/ void OnSerializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x101b594*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x101a9d0*/ void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x101b5f4*/ void DeserializeIdentities(string identities);
                /*0x101ab80*/ string SerializeIdentities();
                /*0x101bcf0*/ System.Security.Principal.IIdentity get_Identity();
            }
        }

        namespace AccessControl
        {
            class CommonObjectSecurity : System.Security.AccessControl.ObjectSecurity
            {
            }

            class CryptoKeySecurity : System.Security.AccessControl.NativeObjectSecurity
            {
            }

            class NativeObjectSecurity : System.Security.AccessControl.CommonObjectSecurity
            {
            }

            class ObjectSecurity
            {
            }
        }
    }

    namespace Runtime
    {
        class AmbiguousImplementationException : System.Exception
        {
            /*0x101be6c*/ AmbiguousImplementationException();
            /*0x101beec*/ AmbiguousImplementationException(string message);
            /*0x101bf64*/ AmbiguousImplementationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class RuntimeImports
        {
            static /*0x101bfe4*/ void RhZeroMemory(ref byte b, ulong byteLength);
            static /*0x101bfe8*/ void ZeroMemory(void* p, uint byteLength);
            static /*0x101bfec*/ void Memmove(byte* dest, byte* src, uint len);
            static /*0x101bff0*/ void Memmove_wbarrier(byte* dest, byte* src, uint len, nint type_handle);
        }

        namespace Remoting
        {
            class ChannelInfo : System.Runtime.Remoting.IChannelInfo
            {
                /*0x10*/ object[] channelData;

                /*0x101bff4*/ ChannelInfo();
                /*0x101c05c*/ ChannelInfo(object remoteChannelData);
                /*0x101c104*/ object[] get_ChannelData();
            }

            class ActivatedClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ string applicationUrl;
                /*0x28*/ System.Type obj_type;

                /*0x101c10c*/ ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl);
                /*0x101c244*/ string get_ApplicationUrl();
                /*0x101c24c*/ System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes();
                /*0x101c254*/ System.Type get_ObjectType();
                /*0x101c25c*/ string ToString();
            }

            class ActivatedServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;

                /*0x101c270*/ ActivatedServiceTypeEntry(string typeName, string assemblyName);
                /*0x101c398*/ System.Type get_ObjectType();
                /*0x101c3a0*/ string ToString();
            }

            enum CustomErrorsModes
            {
                On = 0,
                Off = 1,
                RemoteOnly = 2,
            }

            class EnvoyInfo : System.Runtime.Remoting.IEnvoyInfo
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink envoySinks;

                /*0x101c3b0*/ EnvoyInfo(System.Runtime.Remoting.Messaging.IMessageSink sinks);
                /*0x101c3d8*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IChannelInfo
            {
                object[] get_ChannelData();
            }

            interface IEnvoyInfo
            {
                System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IRemotingTypeInfo
            {
                string get_TypeName();
                bool CanCastTo(System.Type fromType, object o);
            }

            class Identity
            {
                /*0x10*/ string _objectUri;
                /*0x18*/ System.Runtime.Remoting.Messaging.IMessageSink _channelSink;
                /*0x20*/ System.Runtime.Remoting.Messaging.IMessageSink _envoySink;
                /*0x28*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _clientDynamicProperties;
                /*0x30*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _serverDynamicProperties;
                /*0x38*/ System.Runtime.Remoting.ObjRef _objRef;
                /*0x40*/ bool _disposed;

                /*0x101c3e0*/ Identity(string objectUri);
                System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x101c408*/ System.Runtime.Remoting.Messaging.IMessageSink get_ChannelSink();
                /*0x101c410*/ void set_ChannelSink(System.Runtime.Remoting.Messaging.IMessageSink value);
                /*0x101c418*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySink();
                /*0x101c420*/ string get_ObjectUri();
                /*0x101c428*/ void set_ObjectUri(string value);
                /*0x101c430*/ bool get_IsConnected();
                /*0x101c440*/ bool get_Disposed();
                /*0x101c448*/ void set_Disposed(bool value);
                /*0x101c454*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection get_ClientDynamicProperties();
                /*0x101c4c0*/ bool get_HasServerDynamicSinks();
                /*0x101c4d4*/ void NotifyClientDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                /*0x101c548*/ void NotifyServerDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
            }

            class ClientIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.WeakReference _proxyReference;

                /*0x101c5bc*/ ClientIdentity(string objectUri, System.Runtime.Remoting.ObjRef objRef);
                /*0x101c6c4*/ System.MarshalByRefObject get_ClientProxy();
                /*0x101c74c*/ void set_ClientProxy(System.MarshalByRefObject value);
                /*0x101c7bc*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x101c7c4*/ string get_TargetUri();
            }

            class InternalRemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable _soapAttributes;

                static /*0x101cd34*/ InternalRemotingServices();
                static /*0x101c7e4*/ System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute(object reflectionObject);
            }

            class ObjRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static /*0x0*/ int MarshalledObjectRef;
                static /*0x4*/ int WellKnowObjectRef;
                /*0x10*/ System.Runtime.Remoting.IChannelInfo channel_info;
                /*0x18*/ string uri;
                /*0x20*/ System.Runtime.Remoting.IRemotingTypeInfo typeInfo;
                /*0x28*/ System.Runtime.Remoting.IEnvoyInfo envoyInfo;
                /*0x30*/ int flags;
                /*0x38*/ System.Type _serverType;

                static /*0x101dae4*/ ObjRef();
                /*0x101cdac*/ ObjRef();
                /*0x101ce24*/ ObjRef(string uri, System.Runtime.Remoting.IChannelInfo cinfo);
                /*0x101cff8*/ ObjRef(System.Type type, string url, object remoteChannelData);
                /*0x101d0f8*/ ObjRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x101ce50*/ System.Runtime.Remoting.ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo);
                /*0x101cf7c*/ byte[] SerializeType();
                /*0x101d62c*/ bool get_IsReferenceToWellKnow();
                /*0x101d694*/ System.Runtime.Remoting.IChannelInfo get_ChannelInfo();
                /*0x101d69c*/ System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo();
                /*0x101d6a4*/ void set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo value);
                /*0x101d6ac*/ System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo();
                /*0x101d6b4*/ void set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo value);
                /*0x101d6bc*/ string get_URI();
                /*0x101d6c4*/ void set_URI(string value);
                /*0x101d6cc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x101d8a4*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x101cdc8*/ void UpdateChannelInfo();
                /*0x101d9a0*/ System.Type get_ServerType();
            }

            class RemotingConfiguration
            {
                static /*0x0*/ string applicationID;
                static /*0x8*/ string applicationName;
                static /*0x10*/ string processGuid;
                static /*0x18*/ bool defaultConfigRead;
                static /*0x19*/ bool defaultDelayedConfigRead;
                static /*0x1c*/ System.Runtime.Remoting.CustomErrorsModes _errorMode;
                static /*0x20*/ System.Collections.Hashtable wellKnownClientEntries;
                static /*0x28*/ System.Collections.Hashtable activatedClientEntries;
                static /*0x30*/ System.Collections.Hashtable wellKnownServiceEntries;
                static /*0x38*/ System.Collections.Hashtable activatedServiceEntries;
                static /*0x40*/ System.Collections.Hashtable channelTemplates;
                static /*0x48*/ System.Collections.Hashtable clientProviderTemplates;
                static /*0x50*/ System.Collections.Hashtable serverProviderTemplates;

                static /*0x1021544*/ RemotingConfiguration();
                static /*0x101db34*/ string get_ApplicationName();
                static /*0x101db8c*/ void set_ApplicationName(string value);
                static /*0x101dbe8*/ string get_ProcessId();
                static /*0x101dc90*/ void LoadDefaultDelayedChannels();
                static /*0x101e0b4*/ bool IsActivationAllowed(System.Type svrType);
                static /*0x101e1f8*/ System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(System.Type svrType);
                static /*0x101e384*/ System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(System.Type svrType);
                static /*0x101e510*/ void RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry entry);
                static /*0x101e79c*/ void RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry entry);
                static /*0x101e8e0*/ void RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x101eb6c*/ void RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry entry);
                static /*0x101ee10*/ void RegisterChannelTemplate(System.Runtime.Remoting.ChannelData channel);
                static /*0x101ee8c*/ void RegisterClientProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x101ef08*/ void RegisterServerProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x101ef84*/ void RegisterChannels(System.Collections.ArrayList channels, bool onlyDelayed);
                static /*0x1020d30*/ void RegisterTypes(System.Collections.ArrayList types);
                static /*0x1021250*/ bool CustomErrorsEnabled(bool isLocalRequest);
                static /*0x10212e4*/ void SetCustomErrorsMode(string mode);
            }

            class ConfigHandler : Mono.Xml.SmallXmlParser.IContentHandler
            {
                /*0x10*/ System.Collections.ArrayList typeEntries;
                /*0x18*/ System.Collections.ArrayList channelInstances;
                /*0x20*/ System.Runtime.Remoting.ChannelData currentChannel;
                /*0x28*/ System.Collections.Stack currentProviderData;
                /*0x30*/ string currentClientUrl;
                /*0x38*/ string appName;
                /*0x40*/ string currentXmlPath;
                /*0x48*/ bool onlyDelayedChannels;

                /*0x101dffc*/ ConfigHandler(bool onlyDelayedChannels);
                /*0x10216b8*/ void ValidatePath(string element, string[] paths);
                /*0x102179c*/ bool CheckPath(string path);
                /*0x102187c*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x1021880*/ void OnProcessingInstruction(string name, string text);
                /*0x1021884*/ void OnIgnorableWhitespace(string s);
                /*0x1021888*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x1021a40*/ void ParseElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x10243ec*/ void OnEndElement(string name);
                /*0x1022a98*/ void ReadCustomProviderData(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x1022df8*/ void ReadLifetine(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x102446c*/ System.TimeSpan ParseTime(string s);
                /*0x102334c*/ void ReadChannel(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x10236f0*/ System.Runtime.Remoting.ProviderData ReadProvider(string name, Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x1023db8*/ void ReadClientActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x1023efc*/ void ReadServiceActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x1023ad8*/ void ReadClientWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x1023bcc*/ void ReadServiceWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x1023fc4*/ void ReadInteropXml(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isElement);
                /*0x1024164*/ void ReadPreload(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x10249c8*/ string GetNotNull(Mono.Xml.SmallXmlParser.IAttrList attrs, string name);
                /*0x1024b00*/ string ExtractAssembly(ref string type);
                /*0x1024bc0*/ void OnChars(string ch);
                /*0x1024bc4*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
            }

            class ChannelData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ string DelayLoadAsClientChannel;
                /*0x30*/ System.Collections.ArrayList _serverProviders;
                /*0x38*/ System.Collections.ArrayList _clientProviders;
                /*0x40*/ System.Collections.Hashtable _customProperties;

                /*0x102483c*/ ChannelData();
                /*0x1020554*/ System.Collections.ArrayList get_ServerProviders();
                /*0x1020cc4*/ System.Collections.ArrayList get_ClientProviders();
                /*0x10248f0*/ System.Collections.Hashtable get_CustomProperties();
                /*0x101fc14*/ void CopyFrom(System.Runtime.Remoting.ChannelData other);
            }

            class ProviderData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ System.Collections.Hashtable CustomProperties;
                /*0x30*/ System.Collections.IList CustomData;

                /*0x1024960*/ ProviderData();
                /*0x10205c0*/ void CopyFrom(System.Runtime.Remoting.ProviderData other);
            }

            class FormatterData : System.Runtime.Remoting.ProviderData
            {
                /*0x102495c*/ FormatterData();
            }

            class RemotingException : System.SystemException
            {
                /*0x1024cb8*/ RemotingException();
                /*0x101c23c*/ RemotingException(string message);
                /*0x1024cc0*/ RemotingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1022a90*/ RemotingException(string message, System.Exception InnerException);
            }

            class RemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable uri_hash;
                static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _serializationFormatter;
                static /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _deserializationFormatter;
                static /*0x18*/ string app_id;
                static /*0x20*/ object app_id_lock;
                static /*0x28*/ int next_id;
                static /*0x30*/ System.Reflection.MethodInfo FieldSetterMethod;
                static /*0x38*/ System.Reflection.MethodInfo FieldGetterMethod;

                static /*0x1024cc8*/ RemotingServices();
                static /*0x1024fbc*/ object InternalExecute(System.Reflection.MethodBase method, object obj, object[] parameters, ref object[] out_args);
                static /*0x1024fc0*/ System.Reflection.MethodBase GetVirtualMethod(System.Type type, System.Reflection.MethodBase method);
                static /*0x1024fc4*/ bool IsTransparentProxy(object proxy);
                static /*0x1025004*/ System.Runtime.Remoting.Messaging.IMethodReturnMessage InternalExecuteMessage(System.MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);
                static /*0x1025a24*/ object Connect(System.Type classToProxy, string url);
                static /*0x1025b34*/ object Connect(System.Type classToProxy, string url, object data);
                static /*0x1025bd4*/ System.Type GetServerTypeForUri(string URI);
                static /*0x101d948*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef);
                static /*0x1025edc*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef, bool fRefine);
                static /*0x1026224*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj);
                static /*0x1026270*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj, string ObjURI, System.Type RequestedType);
                static /*0x1026330*/ string NewUri();
                static /*0x10262e8*/ System.Runtime.Remoting.Proxies.RealProxy GetRealProxy(object proxy);
                static /*0x1026b9c*/ System.Reflection.MethodBase GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                static /*0x1026e8c*/ System.Reflection.MethodBase GetMethodBaseFromName(System.Type type, string methodName, System.Type[] signature);
                static /*0x102705c*/ System.Reflection.MethodBase FindInterfaceMethod(System.Type type, string methodName, System.Type[] signature);
                static /*0x102718c*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                static /*0x102723c*/ bool IsOneWay(System.Reflection.MethodBase method);
                static /*0x10272d4*/ object CreateClientProxy(System.Runtime.Remoting.ActivatedClientTypeEntry entry, object[] activationAttributes);
                static /*0x10273d0*/ object CreateClientProxy(System.Type objectType, string url, object[] activationAttributes);
                static /*0x10275ec*/ object CreateClientProxy(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x1027658*/ object CreateClientProxyForContextBound(System.Type type, object[] activationAttributes);
                static /*0x1025c90*/ System.Runtime.Remoting.Identity GetIdentityForUri(string uri);
                static /*0x1027850*/ string RemoveAppNameFromUri(string uri);
                static /*0x1027944*/ System.Runtime.Remoting.ClientIdentity GetOrCreateClientIdentity(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType, ref object clientProxy);
                static /*0x1027504*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientChannelSinkChain(string url, object channelData, ref string objectUri);
                static /*0x1028010*/ System.Runtime.Remoting.ClientActivatedIdentity CreateContextBoundObjectIdentity(System.Type objectType);
                static /*0x1026a58*/ System.Runtime.Remoting.ClientActivatedIdentity CreateClientActivatedServerIdentity(System.MarshalByRefObject realObject, System.Type objectType, string objectUri);
                static /*0x101ecf4*/ System.Runtime.Remoting.ServerIdentity CreateWellKnownServerIdentity(System.Type objectType, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                static /*0x10266b4*/ void RegisterServerIdentity(System.Runtime.Remoting.ServerIdentity identity);
                static /*0x1026130*/ object GetProxyForRemoteObject(System.Runtime.Remoting.ObjRef objref, System.Type classToProxy);
                static /*0x1025ac0*/ object GetRemoteObject(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType);
                static /*0x1028138*/ byte[] SerializeCallData(object obj);
                static /*0x102834c*/ object DeserializeCallData(byte[] array);
                static /*0x1028598*/ byte[] SerializeExceptionData(System.Exception ex);
                static /*0x1024f6c*/ void RegisterInternalChannels();
                static /*0x1027e0c*/ void DisposeIdentity(System.Runtime.Remoting.Identity ident);
                static /*0x102870c*/ System.Runtime.Remoting.Identity GetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg);
                static /*0x1028a44*/ void SetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Identity ident);
                static /*0x1028b58*/ bool UpdateOutArgObject(System.Reflection.ParameterInfo pi, object local, object remote);
                static /*0x10277d8*/ string GetNormalizedUri(string uri);

                class CACD
                {
                    /*0x10*/ object d;
                    /*0x18*/ object c;

                    /*0x1028344*/ CACD();
                }
            }

            class ServerIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.Type _objectType;
                /*0x50*/ System.MarshalByRefObject _serverObject;
                /*0x58*/ System.Runtime.Remoting.Messaging.IMessageSink _serverSink;
                /*0x60*/ System.Runtime.Remoting.Contexts.Context _context;
                /*0x68*/ System.Runtime.Remoting.Lifetime.Lease _lease;

                /*0x1028ce8*/ ServerIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x1028d28*/ System.Type get_ObjectType();
                /*0x10268c4*/ void StartTrackingLifetime(System.Runtime.Remoting.Lifetime.ILease lease);
                /*0x1028d30*/ void OnLifetimeExpired();
                /*0x1028db4*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x10280dc*/ void AttachServerObject(System.MarshalByRefObject serverObject, System.Runtime.Remoting.Contexts.Context context);
                /*0x1028f68*/ System.Runtime.Remoting.Lifetime.Lease get_Lease();
                /*0x1028f70*/ System.Runtime.Remoting.Contexts.Context get_Context();
                /*0x1028f78*/ void set_Context(System.Runtime.Remoting.Contexts.Context value);
                System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                /*0x1028d34*/ void DisposeServerObject();
            }

            class ClientActivatedIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x70*/ System.MarshalByRefObject _targetThis;

                /*0xf729a8*/ ClientActivatedIdentity(string objectUri, System.Type objectType);
                /*0xf729b8*/ System.MarshalByRefObject GetServerObject();
                /*0xf729c0*/ void SetClientProxy(System.MarshalByRefObject obj);
                /*0xf729c8*/ void OnLifetimeExpired();
                /*0xf72a2c*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xf72cc0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingletonIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0xf72db0*/ SingletonIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0xf72db8*/ System.MarshalByRefObject GetServerObject();
                /*0xf72fc0*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xf73090*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingleCallIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0xf73174*/ SingleCallIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0xf7317c*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xf7338c*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class DisposerReplySink : System.Runtime.Remoting.Messaging.IMessageSink
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                /*0x18*/ System.IDisposable _disposable;

                /*0xf7354c*/ DisposerReplySink(System.Runtime.Remoting.Messaging.IMessageSink next, System.IDisposable disposable);
                /*0xf73578*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xf73694*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SoapServices
            {
                static /*0x0*/ System.Collections.Hashtable _xmlTypes;
                static /*0x8*/ System.Collections.Hashtable _xmlElements;
                static /*0x10*/ System.Collections.Hashtable _soapActions;
                static /*0x18*/ System.Collections.Hashtable _soapActionsMethods;
                static /*0x20*/ System.Collections.Hashtable _typeInfos;

                static /*0xf74714*/ SoapServices();
                static /*0xf736d4*/ string get_XmlNsForClrTypeWithAssembly();
                static /*0xf73714*/ string get_XmlNsForClrTypeWithNs();
                static /*0xf73754*/ string get_XmlNsForClrTypeWithNsAndAssembly();
                static /*0xf73794*/ string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName);
                static /*0xf73a10*/ string GetNameKey(string name, string namspace);
                static /*0xf73a78*/ string GetAssemblyName(System.Reflection.MethodBase mb);
                static /*0xf73bac*/ bool GetXmlElementForInteropType(System.Type type, ref string xmlElement, ref string xmlNamespace);
                static /*0xf73c7c*/ string GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb);
                static /*0xf73d10*/ string GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb);
                static /*0xf73da4*/ bool GetXmlTypeForInteropType(System.Type type, ref string xmlType, ref string xmlTypeNamespace);
                static /*0xf73e6c*/ void PreLoad(System.Reflection.Assembly assembly);
                static /*0xf73f28*/ void PreLoad(System.Type type);
                static /*0xf7457c*/ void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, System.Type type);
                static /*0xf743ec*/ void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, System.Type type);
                static /*0xf7392c*/ string EncodeNs(string ns);

                class TypeInfo
                {
                    /*0x10*/ System.Collections.Hashtable Attributes;
                    /*0x18*/ System.Collections.Hashtable Elements;

                    /*0xf7470c*/ TypeInfo();
                }
            }

            class TypeEntry
            {
                /*0x10*/ string assembly_name;
                /*0x18*/ string type_name;

                /*0xf7481c*/ TypeEntry();
                /*0xf74824*/ string get_AssemblyName();
                /*0xf7482c*/ void set_AssemblyName(string value);
                /*0xf74834*/ string get_TypeName();
                /*0xf7483c*/ void set_TypeName(string value);
            }

            class TypeInfo : System.Runtime.Remoting.IRemotingTypeInfo
            {
                /*0x10*/ string serverType;
                /*0x18*/ string[] serverHierarchy;
                /*0x20*/ string[] interfacesImplemented;

                /*0xf74844*/ TypeInfo(System.Type type);
                /*0xf74c54*/ string get_TypeName();
                /*0xf74c5c*/ bool CanCastTo(System.Type fromType, object o);
            }

            class WellKnownClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_url;
                /*0x30*/ string app_url;

                /*0xf74ec8*/ WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl);
                /*0xf74ffc*/ string get_ApplicationUrl();
                /*0xf75004*/ System.Type get_ObjectType();
                /*0xf7500c*/ string get_ObjectUrl();
                /*0xf75014*/ string ToString();
            }

            enum WellKnownObjectMode
            {
                Singleton = 1,
                SingleCall = 2,
            }

            class WellKnownServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_uri;
                /*0x30*/ System.Runtime.Remoting.WellKnownObjectMode obj_mode;

                /*0xf75030*/ WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                /*0xf75170*/ System.Runtime.Remoting.WellKnownObjectMode get_Mode();
                /*0xf75178*/ System.Type get_ObjectType();
                /*0xf75180*/ string get_ObjectUri();
                /*0xf75188*/ string ToString();
            }

            namespace Services
            {
                interface ITrackingHandler
                {
                    void DisconnectedObject(object obj);
                    void MarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    void UnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                }

                class TrackingServices
                {
                    static /*0x0*/ System.Collections.ArrayList _handlers;

                    static /*0xf75c24*/ TrackingServices();
                    static /*0xf75300*/ void NotifyMarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0xf75610*/ void NotifyUnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0xf75920*/ void NotifyDisconnectedObject(object obj);
                }
            }

            namespace Proxies
            {
                class ProxyAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0xf75c9c*/ System.MarshalByRefObject CreateInstance(System.Type serverType);
                    /*0xf75de8*/ System.Runtime.Remoting.Proxies.RealProxy CreateProxy(System.Runtime.Remoting.ObjRef objRef, System.Type serverType, object serverObject, System.Runtime.Remoting.Contexts.Context serverContext);
                    /*0xf75e58*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0xf75e5c*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class TransparentProxy
                {
                    /*0x10*/ System.Runtime.Remoting.Proxies.RealProxy _rp;
                    /*0x18*/ Mono.RuntimeRemoteClassHandle _class;
                    /*0x20*/ bool _custom_type_info;

                    /*0xf76f68*/ TransparentProxy();
                    /*0xf75e64*/ System.RuntimeType GetProxyType();
                    /*0xf75f34*/ bool get_IsContextBoundObject();
                    /*0xf75f50*/ System.Runtime.Remoting.Contexts.Context get_TargetContext();
                    /*0xf75f6c*/ bool InCurrentContext();
                    /*0xf75fac*/ object LoadRemoteFieldNew(nint classPtr, nint fieldPtr);
                    /*0xf76c90*/ void StoreRemoteField(nint classPtr, nint fieldPtr, object arg);
                }

                class RealProxy
                {
                    /*0x10*/ System.Type class_to_proxy;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _targetContext;
                    /*0x20*/ System.MarshalByRefObject _server;
                    /*0x28*/ int _targetDomainId;
                    /*0x30*/ string _targetUri;
                    /*0x38*/ System.Runtime.Remoting.Identity _objectIdentity;
                    /*0x40*/ object _objTP;
                    /*0x48*/ object _stubData;

                    static /*0xf7717c*/ System.Type InternalGetProxyType(object transparentProxy);
                    static /*0xf763bc*/ object PrivateInvoke(System.Runtime.Remoting.Proxies.RealProxy rp, System.Runtime.Remoting.Messaging.IMessage msg, ref System.Exception exc, ref object[] out_args);
                    static /*0xf77acc*/ object[] ProcessResponse(System.Runtime.Remoting.Messaging.IMethodReturnMessage mrm, System.Runtime.Remoting.Messaging.MonoMethodMessage call);
                    /*0xf76f70*/ RealProxy();
                    /*0xf76f80*/ RealProxy(System.Type classToProxy);
                    /*0xf77110*/ RealProxy(System.Type classToProxy, System.Runtime.Remoting.ClientIdentity identity);
                    /*0xf76fe0*/ RealProxy(System.Type classToProxy, nint stub, object stubData);
                    /*0xf77180*/ System.Type GetProxiedType();
                    /*0xf7722c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf772c4*/ System.Runtime.Remoting.Identity get_ObjectIdentity();
                    /*0xf772cc*/ void set_ObjectIdentity(System.Runtime.Remoting.Identity value);
                    System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf781d0*/ object InternalGetTransparentProxy(string className);
                    /*0xf781d4*/ object GetTransparentProxy();
                    /*0xf78338*/ void AttachServer(System.MarshalByRefObject s);
                    /*0xf78340*/ void SetTargetDomain(int domainId);
                    /*0xf78348*/ object GetAppDomainTarget();
                }

                class RemotingProxy : System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.IRemotingTypeInfo
                {
                    static /*0x0*/ System.Reflection.MethodInfo _cache_GetTypeMethod;
                    static /*0x8*/ System.Reflection.MethodInfo _cache_GetHashCodeMethod;
                    /*0x50*/ System.Runtime.Remoting.Messaging.IMessageSink _sink;
                    /*0x58*/ bool _hasEnvoySink;
                    /*0x60*/ System.Runtime.Remoting.Messaging.ConstructionCall _ctorCall;

                    static /*0xf7a4c4*/ RemotingProxy();
                    /*0xf78538*/ RemotingProxy(System.Type type, System.Runtime.Remoting.ClientIdentity identity);
                    /*0xf75da0*/ RemotingProxy(System.Type type, string activationUrl, object[] activationAttributes);
                    /*0xf78f38*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage request);
                    /*0xf79894*/ void AttachIdentity(System.Runtime.Remoting.Identity identity);
                    /*0xf77460*/ System.Runtime.Remoting.Messaging.IMessage ActivateRemoteObject(System.Runtime.Remoting.Messaging.IMethodMessage request);
                    /*0xf7a054*/ string get_TypeName();
                    /*0xf7a18c*/ bool CanCastTo(System.Type fromType, object o);
                    /*0xf7a3a8*/ void Finalize();
                }
            }

            namespace Lifetime
            {
                interface ILease
                {
                    System.TimeSpan get_CurrentLeaseTime();
                    System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    System.TimeSpan get_RenewOnCallTime();
                    System.TimeSpan Renew(System.TimeSpan renewalTime);
                }

                interface ISponsor
                {
                    System.TimeSpan Renewal(System.Runtime.Remoting.Lifetime.ILease lease);
                }

                class Lease : System.MarshalByRefObject, System.Runtime.Remoting.Lifetime.ILease
                {
                    /*0x18*/ System.DateTime _leaseExpireTime;
                    /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseState _currentState;
                    /*0x28*/ System.TimeSpan _initialLeaseTime;
                    /*0x30*/ System.TimeSpan _renewOnCallTime;
                    /*0x38*/ System.TimeSpan _sponsorshipTimeout;
                    /*0x40*/ System.Collections.ArrayList _sponsors;
                    /*0x48*/ System.Collections.Queue _renewingSponsors;
                    /*0x50*/ System.Runtime.Remoting.Lifetime.Lease.RenewalDelegate _renewalDelegate;

                    /*0xf7a5b8*/ Lease();
                    /*0xf7a710*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0xf7a778*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0xf7a780*/ void Activate();
                    /*0xf7a78c*/ System.TimeSpan get_RenewOnCallTime();
                    /*0xf7a794*/ System.TimeSpan Renew(System.TimeSpan renewalTime);
                    /*0xf7a820*/ void Unregister(System.Runtime.Remoting.Lifetime.ISponsor obj);
                    /*0xf7a964*/ void UpdateState();
                    /*0xf7ab04*/ void CheckNextSponsor();
                    /*0xf7ae94*/ void ProcessSponsorResponse(object state, bool timedOut);

                    class RenewalDelegate : System.MulticastDelegate
                    {
                        /*0xf7ad48*/ RenewalDelegate(object object, nint method);
                        /*0xf7b0a0*/ System.TimeSpan Invoke(System.Runtime.Remoting.Lifetime.ILease lease);
                        /*0xf7ae74*/ System.IAsyncResult BeginInvoke(System.Runtime.Remoting.Lifetime.ILease lease, System.AsyncCallback callback, object object);
                        /*0xf7b078*/ System.TimeSpan EndInvoke(System.IAsyncResult result);
                    }
                }

                class LeaseManager
                {
                    /*0x10*/ System.Collections.ArrayList _objects;
                    /*0x18*/ System.Threading.Timer _timer;

                    /*0xf7b6c0*/ LeaseManager();
                    /*0xf7b0b4*/ void SetPollTime(System.TimeSpan timeSpan);
                    /*0xf7b1ac*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                    /*0xf7b2e0*/ void StartManager();
                    /*0xf7b440*/ void StopManager();
                    /*0xf7b45c*/ void ManageLeases(object state);
                }

                class LeaseSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0xf7b728*/ LeaseSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0xf7b750*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf7ba90*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xf7b800*/ void RenewLease(System.Runtime.Remoting.Messaging.IMessage msg);
                }

                enum LeaseState
                {
                    Null = 0,
                    Initial = 1,
                    Active = 2,
                    Renewing = 3,
                    Expired = 4,
                }

                class LifetimeServices
                {
                    static /*0x0*/ System.TimeSpan _leaseManagerPollTime;
                    static /*0x8*/ System.TimeSpan _leaseTime;
                    static /*0x10*/ System.TimeSpan _renewOnCallTime;
                    static /*0x18*/ System.TimeSpan _sponsorshipTimeout;
                    static /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager;

                    static /*0xf7bb54*/ LifetimeServices();
                    static /*0xf7bc58*/ System.TimeSpan get_LeaseManagerPollTime();
                    static /*0xf7bcb0*/ void set_LeaseManagerPollTime(System.TimeSpan value);
                    static /*0xf7bd24*/ System.TimeSpan get_LeaseTime();
                    static /*0xf7bd7c*/ void set_LeaseTime(System.TimeSpan value);
                    static /*0xf7bdd8*/ System.TimeSpan get_RenewOnCallTime();
                    static /*0xf7be30*/ void set_RenewOnCallTime(System.TimeSpan value);
                    static /*0xf7be8c*/ System.TimeSpan get_SponsorshipTimeout();
                    static /*0xf7bee4*/ void set_SponsorshipTimeout(System.TimeSpan value);
                    static /*0xf7bf40*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                }
            }

            namespace Contexts
            {
                class Context
                {
                    static /*0x0*/ object[] local_slots;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.IMessageSink default_server_context_sink;
                    static /*0x10*/ int global_count;
                    static /*0x18*/ System.LocalDataStoreMgr _localDataStoreMgr;
                    static /*0x20*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection global_dynamic_properties;
                    /*0x10*/ int domain_id;
                    /*0x14*/ int context_id;
                    /*0x18*/ nuint static_data;
                    /*0x20*/ nuint data;
                    /*0x28*/ System.Runtime.Remoting.Messaging.IMessageSink server_context_sink_chain;
                    /*0x30*/ System.Runtime.Remoting.Messaging.IMessageSink client_context_sink_chain;
                    /*0x38*/ System.Collections.Generic.List<System.Runtime.Remoting.Contexts.IContextProperty> context_properties;
                    /*0x40*/ System.LocalDataStoreHolder _localDataStore;
                    /*0x48*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection context_dynamic_properties;
                    /*0x50*/ System.Runtime.Remoting.Contexts.ContextCallbackObject callback_object;

                    static /*0xf7e9f0*/ Context();
                    static /*0xf7bfa8*/ void RegisterContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xf7bfac*/ void ReleaseContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xf72fb8*/ System.Runtime.Remoting.Contexts.Context get_DefaultContext();
                    static /*0xf7c2a0*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xf7c7e8*/ bool UnregisterDynamicProperty(string name, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xf7c318*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection GetDynamicPropertyCollection(System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xf7ca40*/ void NotifyGlobalDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    static /*0xf7d19c*/ bool get_HasGlobalDynamicSinks();
                    static /*0xf7dc98*/ System.Runtime.Remoting.Contexts.Context SwitchToContext(System.Runtime.Remoting.Contexts.Context newContext);
                    static /*0xf7dca0*/ System.Runtime.Remoting.Contexts.Context CreateNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    static /*0xf7e7d8*/ System.LocalDataStoreSlot AllocateDataSlot();
                    static /*0xf7e83c*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
                    static /*0xf7e8a8*/ void FreeNamedDataSlot(string name);
                    static /*0xf7e914*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
                    static /*0xf7e980*/ object GetData(System.LocalDataStoreSlot slot);
                    static /*0xf7e9b0*/ void SetData(System.LocalDataStoreSlot slot, object data);
                    /*0xf7bfb0*/ Context();
                    /*0xf7c034*/ void Finalize();
                    /*0xf7c104*/ int get_ContextID();
                    /*0xf7c10c*/ System.Runtime.Remoting.Contexts.IContextProperty[] get_ContextProperties();
                    /*0xf7c180*/ bool get_IsDefaultContext();
                    /*0xf7c190*/ bool get_NeedsContextSink();
                    /*0xf7d240*/ void NotifyDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    /*0xf7d2c4*/ bool get_HasDynamicSinks();
                    /*0xf795d4*/ bool get_HasExitSinks();
                    /*0xf7d304*/ System.Runtime.Remoting.Contexts.IContextProperty GetProperty(string name);
                    /*0xf7d4ec*/ void SetProperty(System.Runtime.Remoting.Contexts.IContextProperty prop);
                    /*0xf7d698*/ void Freeze();
                    /*0xf7d844*/ string ToString();
                    /*0xf7d8a0*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSinkChain();
                    /*0xf7968c*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSinkChain();
                    /*0xf72b08*/ System.Runtime.Remoting.Messaging.IMessageSink CreateServerObjectSinkChain(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0xf7da94*/ System.Runtime.Remoting.Messaging.IMessageSink CreateEnvoySink(System.MarshalByRefObject serverObject);
                    /*0xf7e4e4*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                    /*0xf7e664*/ System.LocalDataStore get_MyLocalStore();
                }

                class DynamicPropertyCollection
                {
                    /*0x10*/ System.Collections.ArrayList _properties;

                    /*0xf7c9d8*/ DynamicPropertyCollection();
                    /*0xf7c270*/ bool get_HasProperties();
                    /*0xf7c4fc*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop);
                    /*0xf7c860*/ bool UnregisterDynamicProperty(string name);
                    /*0xf7cb40*/ void NotifyMessage(bool start, System.Runtime.Remoting.Messaging.IMessage msg, bool client_site, bool async);
                    /*0xf7ea68*/ int FindProperty(string name);

                    class DynamicPropertyReg
                    {
                        /*0x10*/ System.Runtime.Remoting.Contexts.IDynamicProperty Property;
                        /*0x18*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink Sink;

                        /*0xf7ebcc*/ DynamicPropertyReg();
                    }
                }

                class ContextCallbackObject : System.ContextBoundObject
                {
                    /*0xf7e658*/ ContextCallbackObject();
                    /*0xf7e660*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                }

                class CrossContextChannel : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0xf7f448*/ CrossContextChannel();
                    /*0xf7ebd4*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf7efc0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);

                    class ContextRestoreSink : System.Runtime.Remoting.Messaging.IMessageSink
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                        /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;
                        /*0x20*/ System.Runtime.Remoting.Messaging.IMessage _call;

                        /*0xf7f40c*/ ContextRestoreSink(System.Runtime.Remoting.Messaging.IMessageSink next, System.Runtime.Remoting.Contexts.Context context, System.Runtime.Remoting.Messaging.IMessage call);
                        /*0xf7f450*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                        /*0xf7f710*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    }
                }

                class CrossContextDelegate : System.MulticastDelegate
                {
                    /*0xf7f750*/ CrossContextDelegate(object object, nint method);
                    /*0xf7f80c*/ void Invoke();
                }

                interface IContextAttribute
                {
                    void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IContextProperty
                {
                    string get_Name();
                    void Freeze(System.Runtime.Remoting.Contexts.Context newContext);
                    bool IsNewContextOK(System.Runtime.Remoting.Contexts.Context newCtx);
                }

                interface IContributeClientContextSink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeDynamicSink
                {
                    System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink();
                }

                interface IContributeEnvoySink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeObjectSink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeServerContextSink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IDynamicMessageSink
                {
                    void ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync);
                    void ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync);
                }

                interface IDynamicProperty
                {
                    string get_Name();
                }
            }

            namespace Channels
            {
                class ChannelServices
                {
                    static /*0x0*/ System.Collections.ArrayList registeredChannels;
                    static /*0x8*/ System.Collections.ArrayList delayedClientChannels;
                    static /*0x10*/ System.Runtime.Remoting.Contexts.CrossContextChannel _crossContextSink;
                    static /*0x18*/ string CrossContextUrl;
                    static /*0x20*/ System.Collections.IList oldStartModeTypes;

                    static /*0xf8260c*/ ChannelServices();
                    static /*0xf7f820*/ System.Runtime.Remoting.Contexts.CrossContextChannel get_CrossContextChannel();
                    static /*0xf7f878*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, ref string objectUri);
                    static /*0xf800f4*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(System.Runtime.Remoting.Channels.IChannelSender sender, string url, object[] channelDataArray, ref string objectUri);
                    static /*0xf802fc*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl);
                    static /*0xf80354*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity);
                    static /*0xf80bd0*/ void RegisterChannelConfig(System.Runtime.Remoting.ChannelData channel);
                    static /*0xf817b8*/ object CreateProvider(System.Runtime.Remoting.ProviderData prov);
                    static /*0xf81ad0*/ System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0xf81b78*/ System.Runtime.Remoting.Messaging.ReturnMessage CheckIncomingMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0xf81e20*/ System.Runtime.Remoting.Messaging.IMessage CheckReturnMessage(System.Runtime.Remoting.Messaging.IMessage callMsg, System.Runtime.Remoting.Messaging.IMessage retMsg);
                    static /*0xf81ff0*/ bool IsLocalCall(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    static /*0xf8210c*/ object[] GetCurrentChannelInfo();
                }

                class CrossAppDomainData
                {
                    /*0x10*/ object _ContextID;
                    /*0x18*/ int _DomainID;
                    /*0x20*/ string _processGuid;

                    /*0xf827c0*/ CrossAppDomainData(int domainId);
                    /*0xf82868*/ int get_DomainID();
                    /*0xf82870*/ string get_ProcessID();
                }

                class CrossAppDomainChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.IChannelReceiver
                {
                    static /*0x0*/ object s_lock;

                    static /*0xf82e9c*/ CrossAppDomainChannel();
                    static /*0xf82878*/ void RegisterCrossAppDomainChannel();
                    /*0xf829bc*/ CrossAppDomainChannel();
                    /*0xf829c4*/ string get_ChannelName();
                    /*0xf82a04*/ int get_ChannelPriority();
                    /*0xf82a0c*/ object get_ChannelData();
                    /*0xf82a78*/ void StartListening(object data);
                    /*0xf82a7c*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object data, ref string uri);
                }

                class CrossAppDomainSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Collections.Hashtable s_sinks;
                    static /*0x8*/ System.Reflection.MethodInfo processMessageMethod;
                    /*0x10*/ int _domainID;

                    static /*0xf83b08*/ CrossAppDomainSink();
                    static /*0xf82bfc*/ System.Runtime.Remoting.Channels.CrossAppDomainSink GetSink(int domainID);
                    static /*0xf82f44*/ System.Runtime.Remoting.Channels.CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg);
                    /*0xf82f14*/ CrossAppDomainSink(int domainID);
                    /*0xf82f3c*/ int get_TargetDomainId();
                    /*0xf831bc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msgRequest);
                    /*0xf83904*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xf839fc*/ void SendAsyncMessage(object data);
                    /*0xf83c04*/ void <AsyncProcessMessage>b__10_0(object data);

                    struct ProcessMessageRes
                    {
                        /*0x10*/ byte[] arrResponse;
                        /*0x18*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm;
                    }
                }

                class CADSerializer
                {
                    static /*0xf83680*/ System.Runtime.Remoting.Messaging.IMessage DeserializeMessage(System.IO.MemoryStream mem, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    static /*0xf830cc*/ System.IO.MemoryStream SerializeMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0xf83c8c*/ object DeserializeObjectSafe(byte[] mem);
                    static /*0xf83db4*/ System.IO.MemoryStream SerializeObject(object obj);
                    static /*0xf83d2c*/ object DeserializeObject(System.IO.MemoryStream mem);
                }

                class AsyncRequest
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink ReplySink;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMessage MsgRequest;

                    /*0xf839d0*/ AsyncRequest(System.Runtime.Remoting.Messaging.IMessage msgRequest, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IChannel
                {
                    string get_ChannelName();
                    int get_ChannelPriority();
                }

                interface IChannelDataStore
                {
                }

                interface IChannelReceiver : System.Runtime.Remoting.Channels.IChannel
                {
                    object get_ChannelData();
                    void StartListening(object data);
                }

                interface IChannelSender : System.Runtime.Remoting.Channels.IChannel
                {
                    System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, ref string objectURI);
                }

                interface IClientChannelSinkProvider
                {
                    void set_Next(System.Runtime.Remoting.Channels.IClientChannelSinkProvider value);
                }

                interface ISecurableChannel
                {
                    void set_IsSecured(bool value);
                }

                interface IServerChannelSinkProvider
                {
                    void set_Next(System.Runtime.Remoting.Channels.IServerChannelSinkProvider value);
                }

                class SinkProviderData
                {
                    /*0x10*/ string sinkName;
                    /*0x18*/ System.Collections.ArrayList children;
                    /*0x20*/ System.Collections.Hashtable properties;

                    /*0xf83ea4*/ SinkProviderData(string name);
                    /*0xf83f50*/ System.Collections.IList get_Children();
                    /*0xf83f58*/ System.Collections.IDictionary get_Properties();
                }
            }

            namespace Activation
            {
                class ActivationServices
                {
                    static /*0x0*/ System.Runtime.Remoting.Activation.IActivator _constructionActivator;

                    static /*0xf83f60*/ System.Runtime.Remoting.Activation.IActivator get_ConstructionActivator();
                    static /*0xf79e2c*/ System.Runtime.Remoting.Messaging.IMessage Activate(System.Runtime.Remoting.Proxies.RemotingProxy proxy, System.Runtime.Remoting.Messaging.ConstructionCall ctorCall);
                    static /*0xf83ffc*/ System.Runtime.Remoting.Messaging.IMessage RemoteActivate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0xf7857c*/ System.Runtime.Remoting.Messaging.ConstructionCall CreateConstructionCall(System.Type type, string activationUrl, object[] activationAttributes);
                    static /*0xf84220*/ System.Runtime.Remoting.Messaging.IMessage CreateInstanceFromMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0xf84624*/ object CreateProxyForType(System.Type type);
                    static /*0xf84620*/ object AllocateUninitializedClassInstance(System.Type type);
                    static /*0xf84764*/ void EnableProxyActivation(System.Type type, bool enable);
                }

                class AppDomainLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ string _activationUrl;
                    /*0x18*/ System.Runtime.Remoting.Activation.IActivator _next;

                    /*0xf841cc*/ AppDomainLevelActivator(string activationUrl, System.Runtime.Remoting.Activation.IActivator next);
                    /*0xf8476c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0xf84774*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                class ConstructionLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0xf83ff4*/ ConstructionLevelActivator();
                    /*0xf84c54*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0xf84c5c*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class ContextLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ System.Runtime.Remoting.Activation.IActivator m_NextActivator;

                    /*0xf841f8*/ ContextLevelActivator(System.Runtime.Remoting.Activation.IActivator next);
                    /*0xf84d4c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0xf84d54*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                interface IActivator
                {
                    System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IConstructionCallMessage : System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    System.Type get_ActivationType();
                    string get_ActivationTypeName();
                    System.Runtime.Remoting.Activation.IActivator get_Activator();
                    void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    object[] get_CallSiteActivationAttributes();
                    System.Collections.IList get_ContextProperties();
                }

                interface IConstructionReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                class RemoteActivationAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0x10*/ System.Collections.IList _contextProperties;

                    /*0xf85088*/ RemoteActivationAttribute(System.Collections.IList contextProperties);
                    /*0xf850b0*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                    /*0xf850b8*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                }

                class RemoteActivator : System.MarshalByRefObject, System.Runtime.Remoting.Activation.IActivator
                {
                    /*0xf854a0*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0xf8591c*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                }
            }

            namespace Metadata
            {
                class SoapAttribute : System.Attribute
                {
                    /*0x10*/ bool _useAttribute;
                    /*0x18*/ string ProtXmlNamespace;
                    /*0x20*/ object ReflectInfo;

                    /*0xf8595c*/ SoapAttribute();
                    /*0xf85964*/ bool get_UseAttribute();
                    /*0xf8596c*/ string get_XmlNamespace();
                    /*0xf85974*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapFieldAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _elementName;
                    /*0x30*/ bool _isElement;

                    /*0xf8597c*/ SoapFieldAttribute();
                    /*0xf85984*/ string get_XmlElementName();
                    /*0xf8598c*/ bool IsInteropXmlElement();
                    /*0xf85994*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapMethodAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _responseElement;
                    /*0x30*/ string _responseNamespace;
                    /*0x38*/ string _returnElement;
                    /*0x40*/ string _soapAction;
                    /*0x48*/ bool _useAttribute;
                    /*0x50*/ string _namespace;

                    /*0xf85a34*/ SoapMethodAttribute();
                    /*0xf85a3c*/ bool get_UseAttribute();
                    /*0xf85a44*/ string get_XmlNamespace();
                    /*0xf85a4c*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapParameterAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0xf85bf8*/ SoapParameterAttribute();
                }

                class SoapTypeAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ bool _useAttribute;
                    /*0x30*/ string _xmlElementName;
                    /*0x38*/ string _xmlNamespace;
                    /*0x40*/ string _xmlTypeName;
                    /*0x48*/ string _xmlTypeNamespace;
                    /*0x50*/ bool _isType;
                    /*0x51*/ bool _isElement;

                    /*0xf85c00*/ SoapTypeAttribute();
                    /*0xf85c08*/ bool get_UseAttribute();
                    /*0xf85c10*/ string get_XmlElementName();
                    /*0xf85c18*/ string get_XmlNamespace();
                    /*0xf85c20*/ string get_XmlTypeName();
                    /*0xf85c28*/ string get_XmlTypeNamespace();
                    /*0xf85c30*/ bool get_IsInteropXmlElement();
                    /*0xf85c38*/ bool get_IsInteropXmlType();
                    /*0xf85c40*/ void SetReflectionObject(object reflectionObject);
                }
            }

            namespace Messaging
            {
                class CallContext
                {
                    static /*0xf85e44*/ object SetCurrentCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                    static /*0xf85e4c*/ System.Runtime.Remoting.Messaging.LogicalCallContext SetLogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext callCtx);
                    static /*0xf85e90*/ object LogicalGetData(string name);
                    static /*0xf85ef0*/ void LogicalSetData(string name, object data);
                    /*0xf85e3c*/ CallContext();
                }

                class IllogicalCallContext
                {
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ object m_HostContext;

                    /*0xf86318*/ IllogicalCallContext();
                    /*0xf8601c*/ System.Collections.Hashtable get_Datastore();
                    /*0xf86088*/ object get_HostContext();
                    /*0xf86090*/ void set_HostContext(object value);
                    /*0xf86098*/ bool get_HasUserData();
                    /*0xf85f58*/ void FreeNamedDataSlot(string name);
                    /*0xf860c4*/ System.Runtime.Remoting.Messaging.IllogicalCallContext CreateCopy();
                }

                class LogicalCallContext : System.Runtime.Serialization.ISerializable, System.ICloneable
                {
                    static string s_CorrelationMgrSlotName = "System.Diagnostics.Trace.CorrelationManagerSlot";
                    static /*0x0*/ System.Type s_callContextType;
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ System.Runtime.Remoting.Messaging.CallContextRemotingData m_RemotingData;
                    /*0x20*/ System.Runtime.Remoting.Messaging.CallContextSecurityData m_SecurityData;
                    /*0x28*/ object m_HostContext;
                    /*0x30*/ bool m_IsCorrelationMgr;
                    /*0x38*/ System.Runtime.Remoting.Messaging.Header[] _sendHeaders;
                    /*0x40*/ System.Runtime.Remoting.Messaging.Header[] _recvHeaders;

                    static /*0xf87124*/ LogicalCallContext();
                    /*0xf86320*/ LogicalCallContext();
                    /*0xf86328*/ LogicalCallContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf86690*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf86a10*/ object Clone();
                    /*0xf7789c*/ void Merge(System.Runtime.Remoting.Messaging.LogicalCallContext lc);
                    /*0xf7783c*/ bool get_HasInfo();
                    /*0xf869e4*/ bool get_HasUserData();
                    /*0xf86624*/ System.Collections.Hashtable get_Datastore();
                    /*0xf870f8*/ object GetData(string name);
                    /*0xf85f84*/ void SetData(string name, object data);

                    struct Reader
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.LogicalCallContext m_ctx;

                        /*0xf871b4*/ Reader(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                        /*0xf871bc*/ bool get_IsNull();
                        /*0xf871cc*/ bool get_HasInfo();
                        /*0xf871dc*/ System.Runtime.Remoting.Messaging.LogicalCallContext Clone();
                        /*0xf85ee0*/ object GetData(string name);
                    }
                }

                class CallContextSecurityData : System.ICloneable
                {
                    /*0x10*/ System.Security.Principal.IPrincipal _principal;

                    /*0xf87244*/ CallContextSecurityData();
                    /*0xf870e8*/ bool get_HasInfo();
                    /*0xf87070*/ object Clone();
                }

                class CallContextRemotingData : System.ICloneable
                {
                    /*0x10*/ string _logicalCallID;

                    /*0xf8725c*/ CallContextRemotingData();
                    /*0xf8724c*/ string get_LogicalCallID();
                    /*0xf87254*/ void set_LogicalCallID(string value);
                    /*0xf870d8*/ bool get_HasInfo();
                    /*0xf87008*/ object Clone();
                }

                enum ArgInfoType
                {
                    In = 0,
                    Out = 1,
                }

                class ArgInfo
                {
                    /*0x10*/ int[] _paramMap;
                    /*0x18*/ int _inoutArgCount;
                    /*0x20*/ System.Reflection.MethodBase _method;

                    /*0xf87264*/ ArgInfo(System.Reflection.MethodBase method, System.Runtime.Remoting.Messaging.ArgInfoType type);
                    /*0xf87418*/ object[] GetInOutArgs(object[] args);
                }

                class AsyncResult : System.IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink, System.Threading.IThreadPoolWorkItem
                {
                    /*0x10*/ object async_state;
                    /*0x18*/ System.Threading.WaitHandle handle;
                    /*0x20*/ object async_delegate;
                    /*0x28*/ nint data;
                    /*0x30*/ object object_data;
                    /*0x38*/ bool sync_completed;
                    /*0x39*/ bool completed;
                    /*0x3a*/ bool endinvoke_called;
                    /*0x40*/ object async_callback;
                    /*0x48*/ System.Threading.ExecutionContext current;
                    /*0x50*/ System.Threading.ExecutionContext original;
                    /*0x58*/ long add_time;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MonoMethodMessage call_message;
                    /*0x68*/ System.Runtime.Remoting.Messaging.IMessageCtrl message_ctrl;
                    /*0x70*/ System.Runtime.Remoting.Messaging.IMessage reply_message;
                    /*0x78*/ System.Threading.WaitCallback orig_cb;

                    /*0xf87518*/ AsyncResult();
                    /*0xf87520*/ object get_AsyncState();
                    /*0xf87528*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                    /*0xf8764c*/ bool get_CompletedSynchronously();
                    /*0xf87654*/ bool get_IsCompleted();
                    /*0xf8765c*/ bool get_EndInvokeCalled();
                    /*0xf87664*/ void set_EndInvokeCalled(bool value);
                    /*0xf87670*/ object get_AsyncDelegate();
                    /*0xf87678*/ System.Runtime.Remoting.Messaging.IMessageSink get_NextSink();
                    /*0xf87680*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xf876c0*/ System.Runtime.Remoting.Messaging.IMessage GetReplyMessage();
                    /*0xf876c8*/ void SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl mc);
                    /*0xf876d0*/ void SetCompletedSynchronously(bool completed);
                    /*0xf77350*/ System.Runtime.Remoting.Messaging.IMessage EndInvoke();
                    /*0xf876dc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf8786c*/ System.Runtime.Remoting.Messaging.MonoMethodMessage get_CallMessage();
                    /*0xf87874*/ void set_CallMessage(System.Runtime.Remoting.Messaging.MonoMethodMessage value);
                    /*0xf8787c*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                    /*0xf87884*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                    /*0xf87880*/ object Invoke();
                }

                class CADArgHolder
                {
                    /*0x10*/ int index;

                    /*0xf87888*/ CADArgHolder(int i);
                }

                class CADObjRef
                {
                    /*0x10*/ System.Runtime.Remoting.ObjRef objref;
                    /*0x18*/ int SourceDomain;
                    /*0x20*/ byte[] TypeInfo;

                    /*0xf878b0*/ CADObjRef(System.Runtime.Remoting.ObjRef o, int sourceDomain);
                }

                class CADMethodRef
                {
                    /*0x10*/ bool ctor;
                    /*0x18*/ string typeName;
                    /*0x20*/ string methodName;
                    /*0x28*/ string[] param_names;
                    /*0x30*/ string[] generic_arg_names;

                    /*0xf87f68*/ CADMethodRef(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0xf878f8*/ System.Type[] GetTypes(string[] typeArray);
                    /*0xf87a44*/ System.Reflection.MethodBase Resolve();
                }

                class CADMessageBase
                {
                    /*0x10*/ object[] _args;
                    /*0x18*/ byte[] _serializedArgs;
                    /*0x20*/ int _propertyCount;
                    /*0x28*/ System.Runtime.Remoting.Messaging.CADArgHolder _callContext;
                    /*0x30*/ byte[] serializedMethod;

                    static /*0xf8834c*/ System.Type[] GetSignature(System.Reflection.MethodBase methodBase, bool load);
                    static /*0xf884fc*/ int MarshalProperties(System.Collections.IDictionary dict, ref System.Collections.ArrayList args);
                    static /*0xf88de4*/ void UnmarshalProperties(System.Collections.IDictionary dict, int count, System.Collections.ArrayList args);
                    static /*0xf88f20*/ bool IsPossibleToIgnoreMarshal(object obj);
                    /*0xf88238*/ CADMessageBase(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0xf882cc*/ System.Reflection.MethodBase GetMethod();
                    /*0xf890d0*/ object MarshalArgument(object arg, ref System.Collections.ArrayList args);
                    /*0xf89294*/ object UnmarshalArgument(object arg, System.Collections.ArrayList args);
                    /*0xf899c0*/ object[] MarshalArguments(object[] arguments, ref System.Collections.ArrayList args);
                    /*0xf89ac0*/ object[] UnmarshalArguments(object[] arguments, System.Collections.ArrayList args);
                    /*0xf89bc0*/ void SaveLogicalCallContext(System.Runtime.Remoting.Messaging.IMethodMessage msg, ref System.Collections.ArrayList serializeList);
                    /*0xf89dfc*/ System.Runtime.Remoting.Messaging.LogicalCallContext GetLogicalCallContext(System.Collections.ArrayList args);
                }

                class CADMethodCallMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ string _uri;

                    static /*0xf835f0*/ System.Runtime.Remoting.Messaging.CADMethodCallMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0xf89e8c*/ CADMethodCallMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage callMsg);
                    /*0xf89e84*/ string get_Uri();
                    /*0xf8a07c*/ System.Collections.ArrayList GetArguments();
                    /*0xf8a1bc*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0xf8a1cc*/ int get_PropertiesCount();
                }

                class CADMethodReturnMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ object _returnValue;
                    /*0x40*/ System.Runtime.Remoting.Messaging.CADArgHolder _exception;
                    /*0x48*/ System.Type[] _sig;

                    static /*0xf8a1d4*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0xf8a264*/ CADMethodReturnMessage(System.Runtime.Remoting.Messaging.IMethodReturnMessage retMsg);
                    /*0xf8a5e0*/ System.Collections.ArrayList GetArguments();
                    /*0xf8a720*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0xf8a730*/ object GetReturnValue(System.Collections.ArrayList args);
                    /*0xf8a740*/ System.Exception GetException(System.Collections.ArrayList args);
                    /*0xf8a7e4*/ int get_PropertiesCount();
                }

                class ClientContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0xf7da6c*/ ClientContextTerminatorSink(System.Runtime.Remoting.Contexts.Context ctx);
                    /*0xf8a7ec*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf8a9c4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ClientContextReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0xf8abec*/ ClientContextReplySink(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xf8ac18*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf8ad1c*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ConstructionCall : System.Runtime.Remoting.Messaging.MethodCall, System.Runtime.Remoting.Activation.IConstructionCallMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x68*/ System.Runtime.Remoting.Activation.IActivator _activator;
                    /*0x70*/ object[] _activationAttributes;
                    /*0x78*/ System.Collections.IList _contextProperties;
                    /*0x80*/ System.Type _activationType;
                    /*0x88*/ string _activationTypeName;
                    /*0x90*/ bool _isContextOk;
                    /*0x98*/ System.Runtime.Remoting.Proxies.RemotingProxy _sourceProxy;

                    /*0xf7753c*/ ConstructionCall(System.Type type);
                    /*0xf8ad64*/ ConstructionCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf8ae00*/ void InitDictionary();
                    /*0xf8af30*/ bool get_IsContextOk();
                    /*0xf8af38*/ void set_IsContextOk(bool value);
                    /*0xf8af44*/ System.Type get_ActivationType();
                    /*0xf8b00c*/ string get_ActivationTypeName();
                    /*0xf8b014*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0xf8b01c*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0xf8b024*/ object[] get_CallSiteActivationAttributes();
                    /*0xf8b02c*/ void SetActivationAttributes(object[] attributes);
                    /*0xf8b034*/ System.Collections.IList get_ContextProperties();
                    /*0xf8b0a0*/ void InitMethodProperty(string key, object value);
                    /*0xf8b76c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf8bd94*/ System.Collections.IDictionary get_Properties();
                    /*0xf8bdf4*/ System.Runtime.Remoting.Proxies.RemotingProxy get_SourceProxy();
                    /*0xf8bdfc*/ void set_SourceProxy(System.Runtime.Remoting.Proxies.RemotingProxy value);
                }

                class ConstructionCallDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0xf8cc64*/ ConstructionCallDictionary();
                    /*0xf8ae84*/ ConstructionCallDictionary(System.Runtime.Remoting.Activation.IConstructionCallMessage message);
                    /*0xf8be2c*/ object GetMethodProperty(string key);
                    /*0xf8c718*/ void SetMethodProperty(string key, object value);
                }

                class ConstructionResponse : System.Runtime.Remoting.Messaging.MethodResponse, System.Runtime.Remoting.Activation.IConstructionReturnMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0xf79ac4*/ ConstructionResponse(object resultObject, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xf84c50*/ ConstructionResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xf8cfa4*/ ConstructionResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf8d020*/ System.Collections.IDictionary get_Properties();
                }

                class EnvoyTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Runtime.Remoting.Messaging.EnvoyTerminatorSink Instance;

                    static /*0xf8d234*/ EnvoyTerminatorSink();
                    /*0xf8d22c*/ EnvoyTerminatorSink();
                    /*0xf8d0b8*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf8d16c*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ErrorMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x10*/ string _uri;

                    /*0xf8307c*/ ErrorMessage();
                    /*0xf8d298*/ int get_ArgCount();
                    /*0xf8d2a0*/ object[] get_Args();
                    /*0xf8d2a8*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xf8d2b0*/ string get_MethodName();
                    /*0xf8d2f0*/ object get_MethodSignature();
                    /*0xf8d2f8*/ System.Collections.IDictionary get_Properties();
                    /*0xf8d300*/ string get_TypeName();
                    /*0xf8d340*/ string get_Uri();
                    /*0xf8d348*/ object GetArg(int arg_num);
                    /*0xf8d350*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                }

                class Header
                {
                    /*0x10*/ string HeaderNamespace;
                    /*0x18*/ bool MustUnderstand;
                    /*0x20*/ string Name;
                    /*0x28*/ object Value;
                }

                class HeaderHandler : System.MulticastDelegate
                {
                    /*0xf8d358*/ HeaderHandler(object object, nint method);
                    /*0xf8d484*/ object Invoke(System.Runtime.Remoting.Messaging.Header[] headers);
                }

                interface IInternalMessage
                {
                    System.Runtime.Remoting.Identity get_TargetIdentity();
                    void set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    string get_Uri();
                    void set_Uri(string value);
                }

                interface IMessage
                {
                    System.Collections.IDictionary get_Properties();
                }

                interface IMessageCtrl
                {
                }

                interface IMessageSink
                {
                    System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
                {
                    int get_ArgCount();
                    object[] get_Args();
                    System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    System.Reflection.MethodBase get_MethodBase();
                    string get_MethodName();
                    object get_MethodSignature();
                    string get_TypeName();
                    string get_Uri();
                    object GetArg(int argNum);
                }

                interface IMethodReturnMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    System.Exception get_Exception();
                    object[] get_OutArgs();
                    object get_ReturnValue();
                }

                class MethodCall : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _uri;
                    /*0x18*/ string _typeName;
                    /*0x20*/ string _methodName;
                    /*0x28*/ object[] _args;
                    /*0x30*/ System.Type[] _methodSignature;
                    /*0x38*/ System.Reflection.MethodBase _methodBase;
                    /*0x40*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x48*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x50*/ System.Type[] _genericArguments;
                    /*0x58*/ System.Collections.IDictionary ExternalProperties;
                    /*0x60*/ System.Collections.IDictionary InternalProperties;

                    static /*0xf8e148*/ string GetTypeNameFromAssemblyQualifiedName(string aqname);
                    /*0xf8ad68*/ MethodCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf8d498*/ MethodCall(System.Runtime.Remoting.Messaging.CADMethodCallMessage msg);
                    /*0xf8ad5c*/ MethodCall();
                    /*0xf79ad0*/ void CopyFrom(System.Runtime.Remoting.Messaging.IMethodMessage call);
                    /*0xf8b350*/ void InitMethodProperty(string key, object value);
                    /*0xf8b904*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf8d5ac*/ int get_ArgCount();
                    /*0xf8d5c8*/ object[] get_Args();
                    /*0xf8d5d0*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xf8d63c*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xf8dc80*/ string get_MethodName();
                    /*0xf8dcb4*/ object get_MethodSignature();
                    /*0xf8bdc4*/ System.Collections.IDictionary get_Properties();
                    /*0xf8dde0*/ void InitDictionary();
                    /*0xf8dee0*/ string get_TypeName();
                    /*0xf8df28*/ string get_Uri();
                    /*0xf8df30*/ void set_Uri(string value);
                    /*0xf8df38*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0xf8df40*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0xf8df48*/ object GetArg(int argNum);
                    /*0xf8df78*/ void Init();
                    /*0xf8d66c*/ void ResolveMethod();
                    /*0xf8df7c*/ System.Type CastTo(string clientType, System.Type serverType);
                    /*0xf8e1f0*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xf8e1f8*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0xf8e10c*/ System.Type[] get_GenericArguments();
                }

                class MCMDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0xf8e200*/ MCMDictionary();
                    /*0xf8de64*/ MCMDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                }

                class MessageDictionary : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
                {
                    /*0x10*/ System.Collections.IDictionary _internalProperties;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMethodMessage _message;
                    /*0x20*/ string[] _methodKeys;
                    /*0x28*/ bool _ownProperties;

                    /*0xf8be04*/ MessageDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                    /*0xf88c60*/ bool HasUserData();
                    /*0xf88d5c*/ System.Collections.IDictionary get_InternalDictionary();
                    /*0xf8e400*/ void set_MethodKeys(string[] value);
                    /*0xf8e408*/ System.Collections.IDictionary AllocInternalProperties();
                    /*0xf8af00*/ System.Collections.IDictionary GetInternalProperties();
                    /*0xf8e470*/ bool IsOverridenKey(string key);
                    /*0xf8e4fc*/ bool get_IsFixedSize();
                    /*0xf8e504*/ bool get_IsReadOnly();
                    /*0xf8e50c*/ object get_Item(object key);
                    /*0xf8e658*/ void set_Item(object key, object value);
                    /*0xf8c1d8*/ object GetMethodProperty(string key);
                    /*0xf8c984*/ void SetMethodProperty(string key, object value);
                    /*0xf8e7c4*/ System.Collections.ICollection get_Keys();
                    /*0xf8ebf8*/ System.Collections.ICollection get_Values();
                    /*0xf8e65c*/ void Add(object key, object value);
                    /*0xf8f018*/ void Clear();
                    /*0xf8f0c4*/ bool Contains(object key);
                    /*0xf8f20c*/ void Remove(object key);
                    /*0xf8f394*/ int get_Count();
                    /*0xf8f45c*/ bool get_IsSynchronized();
                    /*0xf8f464*/ object get_SyncRoot();
                    /*0xf8f468*/ void CopyTo(System.Array array, int index);
                    /*0xf8f528*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0xf8f66c*/ System.Collections.IDictionaryEnumerator GetEnumerator();

                    class DictionaryEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.MessageDictionary _methodDictionary;
                        /*0x18*/ System.Collections.IDictionaryEnumerator _hashtableEnum;
                        /*0x20*/ int _posMethod;

                        /*0xf8f588*/ DictionaryEnumerator(System.Runtime.Remoting.Messaging.MessageDictionary methodDictionary);
                        /*0xf8f6cc*/ object get_Current();
                        /*0xf8f89c*/ bool MoveNext();
                        /*0xf8fa60*/ void Reset();
                        /*0xf8f730*/ System.Collections.DictionaryEntry get_Entry();
                        /*0xf8fb0c*/ object get_Key();
                        /*0xf8fb10*/ object get_Value();
                    }
                }

                class MethodResponse : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _methodName;
                    /*0x18*/ string _uri;
                    /*0x20*/ string _typeName;
                    /*0x28*/ System.Reflection.MethodBase _methodBase;
                    /*0x30*/ object _returnValue;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Type[] _methodSignature;
                    /*0x48*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;
                    /*0x50*/ object[] _args;
                    /*0x58*/ object[] _outArgs;
                    /*0x60*/ System.Runtime.Remoting.Messaging.IMethodCallMessage _callMsg;
                    /*0x68*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x70*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x78*/ System.Collections.IDictionary ExternalProperties;
                    /*0x80*/ System.Collections.IDictionary InternalProperties;

                    /*0xf81ff8*/ MethodResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xf79500*/ MethodResponse(object returnValue, object[] outArgs, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xf836c0*/ MethodResponse(System.Runtime.Remoting.Messaging.IMethodCallMessage msg, System.Runtime.Remoting.Messaging.CADMethodReturnMessage retmsg);
                    /*0xf8cfa8*/ MethodResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf8fb24*/ void InitMethodProperty(string key, object value);
                    /*0xf8ffcc*/ int get_ArgCount();
                    /*0xf8ffe4*/ object[] get_Args();
                    /*0xf8ffec*/ System.Exception get_Exception();
                    /*0xf8fff4*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xf90060*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xf9016c*/ string get_MethodName();
                    /*0xf902dc*/ object get_MethodSignature();
                    /*0xf903f0*/ object[] get_OutArgs();
                    /*0xf8d024*/ System.Collections.IDictionary get_Properties();
                    /*0xf90590*/ object get_ReturnValue();
                    /*0xf90224*/ string get_TypeName();
                    /*0xf90598*/ string get_Uri();
                    /*0xf90650*/ void set_Uri(string value);
                    /*0xf90658*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0xf9065c*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0xf90664*/ object GetArg(int argNum);
                    /*0xf90698*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xf90b48*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xf90b50*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class MethodReturnDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalReturnKeys;
                    static /*0x8*/ string[] InternalExceptionKeys;

                    static /*0xf90b58*/ MethodReturnDictionary();
                    /*0xf90494*/ MethodReturnDictionary(System.Runtime.Remoting.Messaging.IMethodReturnMessage message);
                }

                class MonoMethodMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ System.Reflection.RuntimeMethodInfo method;
                    /*0x18*/ object[] args;
                    /*0x20*/ string[] names;
                    /*0x28*/ byte[] arg_types;
                    /*0x30*/ System.Runtime.Remoting.Messaging.LogicalCallContext ctx;
                    /*0x38*/ object rval;
                    /*0x40*/ System.Exception exc;
                    /*0x48*/ System.Runtime.Remoting.Messaging.AsyncResult asyncResult;
                    /*0x50*/ System.Runtime.Remoting.Messaging.CallType call_type;
                    /*0x58*/ string uri;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MCMDictionary properties;
                    /*0x68*/ System.Runtime.Remoting.Identity identity;
                    /*0x70*/ System.Type[] methodSignature;

                    static /*0xf91144*/ System.Reflection.MethodInfo GetMethodInfo(System.Type type, string methodName);
                    /*0xf9107c*/ MonoMethodMessage(System.Reflection.MethodBase method, object[] out_args);
                    /*0xf76284*/ MonoMethodMessage(System.Reflection.MethodInfo minfo, object[] in_args, object[] out_args);
                    /*0xf911f8*/ MonoMethodMessage(System.Type type, string methodName, object[] in_args);
                    /*0xf90de8*/ void InitMessage(System.Reflection.RuntimeMethodInfo method, object[] out_args);
                    /*0xf91230*/ System.Collections.IDictionary get_Properties();
                    /*0xf9129c*/ int get_ArgCount();
                    /*0xf912d4*/ object[] get_Args();
                    /*0xf912dc*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xf912e4*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
                    /*0xf912ec*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xf912f4*/ string get_MethodName();
                    /*0xf91374*/ object get_MethodSignature();
                    /*0xf91490*/ string get_TypeName();
                    /*0xf91524*/ string get_Uri();
                    /*0xf9152c*/ void set_Uri(string value);
                    /*0xf78504*/ object GetArg(int arg_num);
                    /*0xf91534*/ System.Exception get_Exception();
                    /*0xf9153c*/ int get_OutArgCount();
                    /*0xf915a8*/ object[] get_OutArgs();
                    /*0xf916d0*/ object get_ReturnValue();
                    /*0xf916d8*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xf916e0*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0xf916e8*/ System.Runtime.Remoting.Messaging.AsyncResult get_AsyncResult();
                    /*0xf772d4*/ System.Runtime.Remoting.Messaging.CallType get_CallType();
                    /*0xf78474*/ bool NeedsOutProcessing(ref int outCount);
                }

                enum CallType
                {
                    Sync = 0,
                    BeginInvoke = 1,
                    EndInvoke = 2,
                    OneWay = 3,
                }

                class OneWayAttribute : System.Attribute
                {
                }

                class RemotingSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0xf91848*/ RemotingSurrogate();
                    /*0xf916f0*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0xf91808*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class ObjRefSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0xf919ac*/ ObjRefSurrogate();
                    /*0xf91850*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0xf9195c*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class RemotingSurrogateSelector : System.Runtime.Serialization.ISurrogateSelector
                {
                    static /*0x0*/ System.Type s_cachedTypeObjRef;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.ObjRefSurrogate _objRefSurrogate;
                    static /*0x10*/ System.Runtime.Remoting.Messaging.RemotingSurrogate _objRemotingSurrogate;
                    /*0x10*/ System.Runtime.Serialization.ISurrogateSelector _next;

                    static /*0xf91b48*/ RemotingSurrogateSelector();
                    /*0xf83c84*/ RemotingSurrogateSelector();
                    /*0xf919b4*/ System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector ssout);
                }

                class ReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ object[] _outArgs;
                    /*0x18*/ object[] _args;
                    /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callCtx;
                    /*0x28*/ object _returnValue;
                    /*0x30*/ string _uri;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Reflection.MethodBase _methodBase;
                    /*0x48*/ string _methodName;
                    /*0x50*/ System.Type[] _methodSignature;
                    /*0x58*/ string _typeName;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MethodReturnDictionary _properties;
                    /*0x68*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x70*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;

                    /*0xf776d4*/ ReturnMessage(object ret, object[] outArgs, int outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0xf7758c*/ ReturnMessage(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0xf91c4c*/ int get_ArgCount();
                    /*0xf91c68*/ object[] get_Args();
                    /*0xf91c70*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xf91cdc*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xf91ce4*/ string get_MethodName();
                    /*0xf91d34*/ object get_MethodSignature();
                    /*0xf91e60*/ System.Collections.IDictionary get_Properties();
                    /*0xf91ecc*/ string get_TypeName();
                    /*0xf91f30*/ string get_Uri();
                    /*0xf91f38*/ void set_Uri(string value);
                    /*0xf91f40*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0xf91f48*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0xf91f50*/ object GetArg(int argNum);
                    /*0xf91f80*/ System.Exception get_Exception();
                    /*0xf91f88*/ object[] get_OutArgs();
                    /*0xf92020*/ object get_ReturnValue();
                    /*0xf92028*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xf92030*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class ServerContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0xf7da64*/ ServerContextTerminatorSink();
                    /*0xf92038*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xf92168*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x106dbe8*/ ServerObjectTerminatorSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x106dc10*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x106dd84*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.ServerIdentity _identity;

                    /*0x106df50*/ ServerObjectReplySink(System.Runtime.Remoting.ServerIdentity identity, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x106df7c*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x106e044*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class StackBuilderSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.MarshalByRefObject _target;
                    /*0x18*/ System.Runtime.Remoting.Proxies.RealProxy _rp;

                    /*0x106e084*/ StackBuilderSink(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x106e128*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x106e644*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x106e764*/ void ExecuteAsyncMessage(object ob);
                    /*0x106e1f4*/ void CheckParameters(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x106e964*/ void <AsyncProcessMessage>b__4_0(object data);
                }
            }
        }

        namespace Versioning
        {
            class NonVersionableAttribute : System.Attribute
            {
                /*0x106e9e4*/ NonVersionableAttribute();
            }

            class TargetFrameworkAttribute : System.Attribute
            {
                /*0x10*/ string _frameworkName;
                /*0x18*/ string _frameworkDisplayName;

                /*0x106e9ec*/ TargetFrameworkAttribute(string frameworkName);
                /*0x106ea64*/ void set_FrameworkDisplayName(string value);
            }

            class BinaryCompatibility
            {
                static /*0x0*/ bool TargetsAtLeast_Desktop_V4_5;
                static /*0x1*/ bool TargetsAtLeast_Desktop_V4_5_1;

                static /*0x106ea6c*/ BinaryCompatibility();
            }
        }

        namespace Serialization
        {
            interface IDeserializationCallback
            {
                void OnDeserialization(object sender);
            }

            interface IFormatterConverter
            {
                object Convert(object value, System.Type type);
                bool ToBoolean(object value);
                int ToInt32(object value);
                long ToInt64(object value);
                float ToSingle(object value);
                string ToString(object value);
            }

            interface IObjectReference
            {
                object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            }

            interface ISerializable
            {
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class SerializationException : System.SystemException
            {
                static /*0x0*/ string s_nullMessage;

                static /*0x106eb7c*/ SerializationException();
                /*0x106eab8*/ SerializationException();
                /*0x106eb2c*/ SerializationException(string message);
                /*0x106eb50*/ SerializationException(string message, System.Exception innerException);
                /*0x106eb74*/ SerializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            struct SerializationEntry
            {
                /*0x10*/ string _name;
                /*0x18*/ object _value;
                /*0x20*/ System.Type _type;

                /*0x106ebdc*/ SerializationEntry(string entryName, object entryValue, System.Type entryType);
                /*0x106ebe8*/ object get_Value();
                /*0x106ebf0*/ string get_Name();
            }

            class SerializationInfoEnumerator : System.Collections.IEnumerator
            {
                /*0x10*/ string[] _members;
                /*0x18*/ object[] _data;
                /*0x20*/ System.Type[] _types;
                /*0x28*/ int _numItems;
                /*0x2c*/ int _currItem;
                /*0x30*/ bool _current;

                /*0x106ebf8*/ SerializationInfoEnumerator(string[] members, object[] info, System.Type[] types, int numItems);
                /*0x106ec48*/ bool MoveNext();
                /*0x106ec74*/ object System.Collections.IEnumerator.get_Current();
                /*0x106ece4*/ System.Runtime.Serialization.SerializationEntry get_Current();
                /*0x106edac*/ void Reset();
                /*0x106edbc*/ string get_Name();
                /*0x106ee44*/ object get_Value();
                /*0x106eecc*/ System.Type get_ObjectType();
            }

            class DeserializationEventHandler : System.MulticastDelegate
            {
                /*0x106ef54*/ DeserializationEventHandler(object object, nint method);
                /*0x106f080*/ void Invoke(object sender);
            }

            class SerializationEventHandler : System.MulticastDelegate
            {
                /*0x106f094*/ SerializationEventHandler(object object, nint method);
                /*0x106f158*/ void Invoke(System.Runtime.Serialization.StreamingContext context);
            }

            class FormatterConverter : System.Runtime.Serialization.IFormatterConverter
            {
                static /*0x106f20c*/ void ThrowValueNullException();
                /*0x106f554*/ FormatterConverter();
                /*0x106f16c*/ object Convert(object value, System.Type type);
                /*0x106f25c*/ bool ToBoolean(object value);
                /*0x106f2f4*/ int ToInt32(object value);
                /*0x106f38c*/ long ToInt64(object value);
                /*0x106f424*/ float ToSingle(object value);
                /*0x106f4bc*/ string ToString(object value);
            }

            interface ISerializationSurrogate
            {
                void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            interface ISurrogateSelector
            {
                System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class MemberHolder
            {
                /*0x10*/ System.Type _memberType;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;

                /*0x106f55c*/ MemberHolder(System.Type type, System.Runtime.Serialization.StreamingContext ctx);
                /*0x106f598*/ int GetHashCode();
                /*0x106f5b8*/ bool Equals(object obj);
            }

            class SerializationBinder
            {
                /*0x106f650*/ SerializationBinder();
                /*0x106f644*/ void BindToName(System.Type serializedType, ref string assemblyName, ref string typeName);
                System.Type BindToType(string assemblyName, string typeName);
            }

            class SerializationEvents
            {
                /*0x10*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializingMethods;
                /*0x18*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializedMethods;
                /*0x20*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializingMethods;
                /*0x28*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializedMethods;

                static /*0x106fa44*/ void InvokeOnDelegate(object obj, System.Runtime.Serialization.StreamingContext context, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                static /*0x106fb50*/ System.Runtime.Serialization.SerializationEventHandler AddOnDelegate(object obj, System.Runtime.Serialization.SerializationEventHandler handler, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                /*0x106f658*/ SerializationEvents(System.Type t);
                /*0x106f78c*/ System.Collections.Generic.List<System.Reflection.MethodInfo> GetMethodsWithAttribute(System.Type attribute, System.Type t);
                /*0x106f9d0*/ bool get_HasOnSerializingEvents();
                /*0x106f9f0*/ void InvokeOnSerializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x106fa94*/ void InvokeOnDeserializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x106fae8*/ void InvokeOnDeserialized(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x106fb3c*/ System.Runtime.Serialization.SerializationEventHandler AddOnSerialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
                /*0x106fd8c*/ System.Runtime.Serialization.SerializationEventHandler AddOnDeserialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
            }

            class SerializationEventsCache
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Type, System.Runtime.Serialization.SerializationEvents> s_cache;

                static /*0x106fed4*/ SerializationEventsCache();
                static /*0x106fda0*/ System.Runtime.Serialization.SerializationEvents GetSerializationEventsForType(System.Type t);

                class <>c
                {
                    static /*0x0*/ System.Runtime.Serialization.SerializationEventsCache.<> <>9;
                    static /*0x8*/ System.Func<System.Type, System.Runtime.Serialization.SerializationEvents> <>9__1_0;

                    static /*0x106ff60*/ <>c();
                    /*0x106ffc4*/ <>c();
                    /*0x106ffcc*/ System.Runtime.Serialization.SerializationEvents <GetSerializationEventsForType>b__1_0(System.Type type);
                }
            }

            class SerializationObjectManager
            {
                /*0x10*/ System.Collections.Generic.Dictionary<object, object> _objectSeenTable;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;
                /*0x28*/ System.Runtime.Serialization.SerializationEventHandler _onSerializedHandler;

                /*0x107002c*/ SerializationObjectManager(System.Runtime.Serialization.StreamingContext context);
                /*0x10700c0*/ void RegisterObject(object obj);
                /*0x1070260*/ void RaiseOnSerializedEvent();
                /*0x10701d0*/ void AddOnSerialized(object obj);
            }

            class ValueTypeFixupInfo
            {
                /*0x10*/ long _containerID;
                /*0x18*/ System.Reflection.FieldInfo _parentField;
                /*0x20*/ int[] _parentIndex;

                /*0x1070280*/ ValueTypeFixupInfo(long containerID, System.Reflection.FieldInfo member, int[] parentIndex);
                /*0x10703d0*/ long get_ContainerID();
                /*0x10703d8*/ System.Reflection.FieldInfo get_ParentField();
                /*0x10703e0*/ int[] get_ParentIndex();
            }

            class FormatterServices
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Runtime.Serialization.MemberHolder, System.Reflection.MemberInfo[]> m_MemberInfoTable;
                static /*0x8*/ bool unsafeTypeForwardersIsEnabled;
                static /*0x9*/ bool unsafeTypeForwardersIsEnabledInitialized;
                static /*0x10*/ System.Type[] advancedTypes;
                static /*0x18*/ System.Reflection.Binder s_binder;

                static /*0x10703e8*/ FormatterServices();
                static /*0x1070564*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.RuntimeType type);
                static /*0x10706fc*/ bool CheckSerializable(System.RuntimeType type);
                static /*0x107071c*/ System.Reflection.MemberInfo[] InternalGetSerializableMembers(System.RuntimeType type);
                static /*0x1070e1c*/ bool GetParentTypes(System.RuntimeType parentType, ref System.RuntimeType[] parentTypes, ref int parentTypeCount);
                static /*0x10712b4*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.Type type, System.Runtime.Serialization.StreamingContext context);
                static /*0x1071554*/ object GetUninitializedObject(System.Type type);
                static /*0x1071720*/ object nativeGetUninitializedObject(System.RuntimeType type);
                static /*0x1071728*/ bool GetEnableUnsafeTypeForwarders();
                static /*0x1071730*/ bool UnsafeTypeForwardersIsEnabled();
                static /*0x10717d8*/ void SerializationSetValue(System.Reflection.MemberInfo fi, object target, object value);
                static /*0x1071a6c*/ object PopulateObjectMembers(object obj, System.Reflection.MemberInfo[] members, object[] data);
                static /*0x1071d80*/ object[] GetObjectData(object obj, System.Reflection.MemberInfo[] members);
                static /*0x107216c*/ System.Type GetTypeFromAssembly(System.Reflection.Assembly assem, string name);
                static /*0x1072208*/ System.Reflection.Assembly LoadAssemblyFromString(string assemblyName);
                static /*0x1072210*/ System.Reflection.Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
                static /*0x10722e4*/ string GetClrAssemblyName(System.Type type, ref bool hasTypeForwardedFrom);
                static /*0x1072450*/ string GetClrTypeFullName(System.Type type);
                static /*0x10724d0*/ string GetClrTypeFullNameForArray(System.Type type);
                static /*0x10726f4*/ string GetClrTypeFullNameForNonArrayTypes(System.Type type);

                class <>c__DisplayClass9_0
                {
                    /*0x10*/ System.Type type;

                    /*0x107154c*/ <>c__DisplayClass9_0();
                    /*0x1072968*/ System.Reflection.MemberInfo[] <GetSerializableMembers>b__0(System.Runtime.Serialization.MemberHolder _);
                }
            }

            class SurrogateForCyclicalReference : System.Runtime.Serialization.ISerializationSurrogate
            {
                /*0x10*/ System.Runtime.Serialization.ISerializationSurrogate innerSurrogate;

                /*0x1072a14*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1072ae4*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            interface IFormatter
            {
                object Deserialize(System.IO.Stream serializationStream);
                void Serialize(System.IO.Stream serializationStream, object graph);
            }

            class ObjectIDGenerator
            {
                static /*0x0*/ int[] sizes;
                /*0x10*/ int m_currentCount;
                /*0x14*/ int m_currentSize;
                /*0x18*/ long[] m_ids;
                /*0x20*/ object[] m_objs;

                static /*0x1073268*/ ObjectIDGenerator();
                /*0x1072bc0*/ ObjectIDGenerator();
                /*0x1072c98*/ int FindElement(object obj, ref bool found);
                /*0x1072d5c*/ long GetId(object obj, ref bool firstTime);
                /*0x1073194*/ long HasId(object obj, ref bool firstTime);
                /*0x1072ee0*/ void Rehash();
            }

            class ObjectManager
            {
                /*0x10*/ System.Runtime.Serialization.DeserializationEventHandler m_onDeserializationHandler;
                /*0x18*/ System.Runtime.Serialization.SerializationEventHandler m_onDeserializedHandler;
                /*0x20*/ System.Runtime.Serialization.ObjectHolder[] m_objects;
                /*0x28*/ object m_topObject;
                /*0x30*/ System.Runtime.Serialization.ObjectHolderList m_specialFixupObjects;
                /*0x38*/ long m_fixupCount;
                /*0x40*/ System.Runtime.Serialization.ISurrogateSelector m_selector;
                /*0x48*/ System.Runtime.Serialization.StreamingContext m_context;

                static /*0x1075dd4*/ System.Reflection.RuntimeConstructorInfo GetConstructor(System.RuntimeType t);
                /*0x10732fc*/ ObjectManager(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, bool checkSecurity, bool isCrossAppDomain);
                /*0x107337c*/ bool CanCallGetType(object obj);
                /*0x1073384*/ void set_TopObject(object value);
                /*0x107338c*/ object get_TopObject();
                /*0x1073394*/ System.Runtime.Serialization.ObjectHolderList get_SpecialFixupObjects();
                /*0x1073408*/ System.Runtime.Serialization.ObjectHolder FindObjectHolder(long objectID);
                /*0x1073460*/ System.Runtime.Serialization.ObjectHolder FindOrCreateObjectHolder(long objectID);
                /*0x1073538*/ void AddObjectHolder(System.Runtime.Serialization.ObjectHolder holder);
                /*0x1073664*/ bool GetCompletionInfo(System.Runtime.Serialization.FixupHolder fixup, ref System.Runtime.Serialization.ObjectHolder holder, ref object member, bool bThrowIfMissing);
                /*0x107396c*/ void FixupSpecialObject(System.Runtime.Serialization.ObjectHolder holder);
                /*0x1074730*/ bool ResolveObjectReference(System.Runtime.Serialization.ObjectHolder holder);
                /*0x10740f8*/ bool DoValueTypeFixup(System.Reflection.FieldInfo memberToFix, System.Runtime.Serialization.ObjectHolder holder, object value);
                /*0x10749d4*/ void CompleteObject(System.Runtime.Serialization.ObjectHolder holder, bool bObjectFullyComplete);
                /*0x1074658*/ void DoNewlyRegisteredObjectFixups(System.Runtime.Serialization.ObjectHolder holder);
                /*0x10751f8*/ object GetObject(long objectID);
                /*0x10752ac*/ void RegisterString(string obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);
                /*0x1075490*/ void RegisterObject(object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);
                /*0x1073e08*/ void CompleteISerializableObject(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1075f0c*/ void DoFixups();
                /*0x1076388*/ void RegisterFixup(System.Runtime.Serialization.FixupHolder fixup, long objectToBeFixed, long objectRequired);
                /*0x1076598*/ void RecordFixup(long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);
                /*0x1076874*/ void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
                /*0x10769dc*/ void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired);
                /*0x1076b44*/ void RaiseDeserializationEvent();
                /*0x1076b90*/ void AddOnDeserialization(System.Runtime.Serialization.DeserializationEventHandler handler);
                /*0x1076c10*/ void AddOnDeserialized(object obj);
                /*0x1076ca0*/ void RaiseOnDeserializedEvent(object obj);
                /*0x1076d24*/ void RaiseOnDeserializingEvent(object obj);
            }

            class ObjectHolder
            {
                /*0x10*/ object m_object;
                /*0x18*/ long m_id;
                /*0x20*/ int m_missingElementsRemaining;
                /*0x24*/ int m_missingDecendents;
                /*0x28*/ System.Runtime.Serialization.SerializationInfo m_serInfo;
                /*0x30*/ System.Runtime.Serialization.ISerializationSurrogate m_surrogate;
                /*0x38*/ System.Runtime.Serialization.FixupHolderList m_missingElements;
                /*0x40*/ System.Runtime.Serialization.LongList m_dependentObjects;
                /*0x48*/ System.Runtime.Serialization.ObjectHolder m_next;
                /*0x50*/ int m_flags;
                /*0x54*/ bool m_markForFixupWhenAvailable;
                /*0x58*/ System.Runtime.Serialization.ValueTypeFixupInfo m_valueFixup;
                /*0x60*/ System.Runtime.Serialization.TypeLoadExceptionHolder m_typeLoad;
                /*0x68*/ bool m_reachable;

                /*0x1073504*/ ObjectHolder(long objID);
                /*0x1075a4c*/ ObjectHolder(object obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x10753ac*/ ObjectHolder(string obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x1076da8*/ void IncrementDescendentFixups(int amount);
                /*0x10750e4*/ void DecrementFixupsRemaining(System.Runtime.Serialization.ObjectManager manager);
                /*0x1075108*/ void RemoveDependency(long id);
                /*0x1076468*/ void AddFixup(System.Runtime.Serialization.FixupHolder fixup, System.Runtime.Serialization.ObjectManager manager);
                /*0x1076db8*/ void UpdateDescendentDependencyChain(int amount, System.Runtime.Serialization.ObjectManager manager);
                /*0x1076524*/ void AddDependency(long dependentObject);
                /*0x1075c38*/ void UpdateData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainer, System.Reflection.FieldInfo field, int[] arrayIndex, System.Runtime.Serialization.ObjectManager manager);
                /*0x1075184*/ void MarkForCompletionWhenAvailable();
                /*0x1073d50*/ void SetFlags();
                /*0x1073960*/ bool get_IsIncompleteObjectReference();
                /*0x10749b8*/ void set_IsIncompleteObjectReference(bool value);
                /*0x1075c28*/ bool get_RequiresDelayedFixup();
                /*0x10740b4*/ bool get_RequiresValueTypeFixup();
                /*0x10740c0*/ bool get_ValueTypeFixupPerformed();
                /*0x1075130*/ void set_ValueTypeFixupPerformed(bool value);
                /*0x1074ff4*/ bool get_HasISerializable();
                /*0x1073ba4*/ bool get_HasSurrogate();
                /*0x1073bb0*/ bool get_CanSurrogatedObjectValueChange();
                /*0x1073940*/ bool get_CanObjectValueChange();
                /*0x1076f50*/ int get_DirectlyDependentObjects();
                /*0x1075dc8*/ int get_TotalDependentObjects();
                /*0x1076f58*/ bool get_Reachable();
                /*0x1076f60*/ void set_Reachable(bool value);
                /*0x1075120*/ bool get_TypeLoadExceptionReachable();
                /*0x1076f6c*/ System.Runtime.Serialization.TypeLoadExceptionHolder get_TypeLoadException();
                /*0x1076f74*/ void set_TypeLoadException(System.Runtime.Serialization.TypeLoadExceptionHolder value);
                /*0x1076f7c*/ object get_ObjectValue();
                /*0x1073c58*/ void SetObjectValue(object obj, System.Runtime.Serialization.ObjectManager manager);
                /*0x1076f84*/ System.Runtime.Serialization.SerializationInfo get_SerializationInfo();
                /*0x1076f8c*/ void set_SerializationInfo(System.Runtime.Serialization.SerializationInfo value);
                /*0x1076f94*/ System.Runtime.Serialization.ISerializationSurrogate get_Surrogate();
                /*0x1076f9c*/ System.Runtime.Serialization.LongList get_DependentObjects();
                /*0x1076fa4*/ void set_DependentObjects(System.Runtime.Serialization.LongList value);
                /*0x10762b0*/ bool get_RequiresSerInfoFixup();
                /*0x1074098*/ void set_RequiresSerInfoFixup(bool value);
                /*0x1076fac*/ System.Runtime.Serialization.ValueTypeFixupInfo get_ValueFixup();
                /*0x107391c*/ bool get_CompletelyFixed();
                /*0x1076eb0*/ long get_ContainerID();
            }

            class FixupHolder
            {
                /*0x10*/ long m_id;
                /*0x18*/ object m_fixupInfo;
                /*0x20*/ int m_fixupType;

                /*0x1076838*/ FixupHolder(long id, object fixupInfo, int fixupType);
            }

            class FixupHolderList
            {
                /*0x10*/ System.Runtime.Serialization.FixupHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x1076ea8*/ FixupHolderList();
                /*0x1076fb4*/ FixupHolderList(int startingSize);
                /*0x1077020*/ void Add(System.Runtime.Serialization.FixupHolder fixup);
                /*0x10770c8*/ void EnlargeArray();
            }

            class LongList
            {
                /*0x10*/ long[] m_values;
                /*0x18*/ int m_count;
                /*0x1c*/ int m_totalItems;
                /*0x20*/ int m_currentItem;

                /*0x1076ec8*/ LongList();
                /*0x1077150*/ LongList(int startingSize);
                /*0x1076ed0*/ void Add(long value);
                /*0x1077244*/ int get_Count();
                /*0x1075144*/ void StartEnumeration();
                /*0x1075190*/ bool MoveNext();
                /*0x1075150*/ long get_Current();
                /*0x1076e18*/ bool RemoveElement(long value);
                /*0x10771bc*/ void EnlargeArray();
            }

            class ObjectHolderList
            {
                /*0x10*/ System.Runtime.Serialization.ObjectHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x1073400*/ ObjectHolderList();
                /*0x107724c*/ ObjectHolderList(int startingSize);
                /*0x10772b8*/ void Add(System.Runtime.Serialization.ObjectHolder value);
                /*0x1076210*/ System.Runtime.Serialization.ObjectHolderListEnumerator GetFixupEnumerator();
                /*0x1077360*/ void EnlargeArray();
                /*0x1077430*/ int get_Version();
                /*0x1077438*/ int get_Count();
            }

            class ObjectHolderListEnumerator
            {
                /*0x10*/ bool m_isFixupEnumerator;
                /*0x18*/ System.Runtime.Serialization.ObjectHolderList m_list;
                /*0x20*/ int m_startingVersion;
                /*0x24*/ int m_currPos;

                /*0x10773e8*/ ObjectHolderListEnumerator(System.Runtime.Serialization.ObjectHolderList list, bool isFixupEnumerator);
                /*0x10762cc*/ bool MoveNext();
                /*0x1076274*/ System.Runtime.Serialization.ObjectHolder get_Current();
            }

            class TypeLoadExceptionHolder
            {
                /*0x10*/ string m_typeName;

                /*0x1077440*/ TypeLoadExceptionHolder(string typeName);
                /*0x1077468*/ string get_TypeName();
            }

            class SafeSerializationEventArgs : System.EventArgs
            {
                /*0x10*/ System.Runtime.Serialization.StreamingContext m_streamingContext;
                /*0x20*/ System.Collections.Generic.List<object> m_serializedStates;

                /*0x1077470*/ SafeSerializationEventArgs(System.Runtime.Serialization.StreamingContext streamingContext);
                /*0x1077528*/ System.Collections.Generic.IList<object> get_SerializedStates();
            }

            interface ISafeSerializationData
            {
                void CompleteDeserialization(object deserialized);
            }

            class SafeSerializationManager : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                /*0x10*/ System.Collections.Generic.IList<object> m_serializedStates;
                /*0x18*/ System.Runtime.Serialization.SerializationInfo m_savedSerializationInfo;
                /*0x20*/ object m_realObject;
                /*0x28*/ System.RuntimeType m_realType;
                /*0x30*/ System.EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs> SerializeObjectState;

                /*0x1077530*/ SafeSerializationManager();
                /*0x1077538*/ SafeSerializationManager(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1077a38*/ bool get_IsActive();
                /*0x1077a48*/ void CompleteSerialization(object serializedObject, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1077d78*/ void CompleteDeserialization(object deserializedObject);
                /*0x1078118*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x10781c8*/ object System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x1078488*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
            }

            class OptionalFieldAttribute : System.Attribute
            {
                /*0x10*/ int versionAdded;

                /*0x1078524*/ OptionalFieldAttribute();
                /*0x1078534*/ void set_VersionAdded(int value);
            }

            class OnSerializingAttribute : System.Attribute
            {
                /*0x10785ac*/ OnSerializingAttribute();
            }

            class OnSerializedAttribute : System.Attribute
            {
                /*0x10785b4*/ OnSerializedAttribute();
            }

            class OnDeserializingAttribute : System.Attribute
            {
                /*0x10785bc*/ OnDeserializingAttribute();
            }

            class OnDeserializedAttribute : System.Attribute
            {
                /*0x10785c4*/ OnDeserializedAttribute();
            }

            class SerializationFieldInfo : System.Reflection.FieldInfo
            {
                /*0x10*/ System.Reflection.RuntimeFieldInfo m_field;
                /*0x18*/ string m_serializationName;

                /*0x1071224*/ SerializationFieldInfo(System.Reflection.RuntimeFieldInfo field, string namePrefix);
                /*0x10785cc*/ System.Reflection.Module get_Module();
                /*0x10785ec*/ int get_MetadataToken();
                /*0x1078610*/ string get_Name();
                /*0x1078618*/ System.Type get_DeclaringType();
                /*0x1078638*/ System.Type get_ReflectedType();
                /*0x1078658*/ object[] GetCustomAttributes(bool inherit);
                /*0x1078680*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x10786a8*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x10786cc*/ System.Type get_FieldType();
                /*0x10786f0*/ object GetValue(object obj);
                /*0x10720ec*/ object InternalGetValue(object obj);
                /*0x1078714*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x10719bc*/ void InternalSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x1078738*/ System.Reflection.RuntimeFieldInfo get_FieldInfo();
                /*0x1078740*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x1078764*/ System.Reflection.FieldAttributes get_Attributes();
            }

            class SerializationInfo
            {
                static int defaultSize = 4;
                static string s_mscorlibAssemblySimpleName = "mscorlib";
                static string s_mscorlibFileName = "mscorlib.dll";
                /*0x10*/ string[] m_members;
                /*0x18*/ object[] m_data;
                /*0x20*/ System.Type[] m_types;
                /*0x28*/ System.Collections.Generic.Dictionary<string, int> m_nameToIndex;
                /*0x30*/ int m_currMember;
                /*0x38*/ System.Runtime.Serialization.IFormatterConverter m_converter;
                /*0x40*/ string m_fullTypeName;
                /*0x48*/ string m_assemName;
                /*0x50*/ System.Type objectType;
                /*0x58*/ bool isFullTypeNameSetExplicit;
                /*0x59*/ bool isAssemblyNameSetExplicit;
                /*0x5a*/ bool requireSameTokenInPartialTrust;

                static /*0x1078984*/ bool Compare(byte[] a, byte[] b);
                static /*0x1078980*/ void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName);
                static /*0x1078a0c*/ bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName);
                /*0x1078788*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter);
                /*0x1078790*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);
                /*0x1078970*/ string get_FullTypeName();
                /*0x1078978*/ string get_AssemblyName();
                /*0x1077c40*/ void SetType(System.Type type);
                /*0x1078b40*/ int get_MemberCount();
                /*0x1078b48*/ System.Type get_ObjectType();
                /*0x1078b50*/ bool get_IsFullTypeNameSetExplicit();
                /*0x1078b58*/ bool get_IsAssemblyNameSetExplicit();
                /*0x1078b60*/ System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator();
                /*0x1078bf4*/ void ExpandArrays();
                /*0x1077bbc*/ void AddValue(string name, object value, System.Type type);
                /*0x1078edc*/ void AddValue(string name, object value);
                /*0x1078f94*/ void AddValue(string name, bool value);
                /*0x1079068*/ void AddValue(string name, byte value);
                /*0x107913c*/ void AddValue(string name, short value);
                /*0x1079210*/ void AddValue(string name, int value);
                /*0x10792e4*/ void AddValue(string name, long value);
                /*0x10793b8*/ void AddValue(string name, ulong value);
                /*0x107948c*/ void AddValue(string name, float value);
                /*0x1079568*/ void AddValue(string name, System.DateTime value);
                /*0x1078d00*/ void AddValueInternal(string name, object value, System.Type type);
                /*0x1075000*/ void UpdateValue(string name, object value, System.Type type);
                /*0x107963c*/ int FindElement(string name);
                /*0x1079704*/ object GetElement(string name, ref System.Type foundType);
                /*0x1079808*/ object GetElementNoThrow(string name, ref System.Type foundType);
                /*0x1077824*/ object GetValue(string name, System.Type type);
                /*0x107771c*/ object GetValueNoThrow(string name, System.Type type);
                /*0x1079884*/ bool GetBoolean(string name);
                /*0x1079a04*/ int GetInt32(string name);
                /*0x1079b78*/ long GetInt64(string name);
                /*0x1079cec*/ float GetSingle(string name);
                /*0x1079e60*/ string GetString(string name);
            }

            struct StreamingContext
            {
                /*0x10*/ object m_additionalContext;
                /*0x18*/ System.Runtime.Serialization.StreamingContextStates m_state;

                /*0x1079fcc*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state);
                /*0x1079fd8*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state, object additional);
                /*0x1079fe4*/ object get_Context();
                /*0x1079fec*/ bool Equals(object obj);
                /*0x107a09c*/ int GetHashCode();
                /*0x107a0a4*/ System.Runtime.Serialization.StreamingContextStates get_State();
            }

            enum StreamingContextStates
            {
                CrossProcess = 1,
                CrossMachine = 2,
                File = 4,
                Persistence = 8,
                Remoting = 16,
                Other = 32,
                Clone = 64,
                CrossAppDomain = 128,
                All = 255,
            }

            namespace Formatters
            {
                enum FormatterTypeStyle
                {
                    TypesWhenNeeded = 0,
                    TypesAlways = 1,
                    XsdString = 2,
                }

                enum FormatterAssemblyStyle
                {
                    Simple = 0,
                    Full = 1,
                }

                enum TypeFilterLevel
                {
                    Low = 2,
                    Full = 3,
                }

                namespace Binary
                {
                    enum BinaryHeaderEnum
                    {
                        SerializedStreamHeader = 0,
                        Object = 1,
                        ObjectWithMap = 2,
                        ObjectWithMapAssemId = 3,
                        ObjectWithMapTyped = 4,
                        ObjectWithMapTypedAssemId = 5,
                        ObjectString = 6,
                        Array = 7,
                        MemberPrimitiveTyped = 8,
                        MemberReference = 9,
                        ObjectNull = 10,
                        MessageEnd = 11,
                        Assembly = 12,
                        ObjectNullMultiple256 = 13,
                        ObjectNullMultiple = 14,
                        ArraySinglePrimitive = 15,
                        ArraySingleObject = 16,
                        ArraySingleString = 17,
                        CrossAppDomainMap = 18,
                        CrossAppDomainString = 19,
                        CrossAppDomainAssembly = 20,
                        MethodCall = 21,
                        MethodReturn = 22,
                    }

                    enum BinaryTypeEnum
                    {
                        Primitive = 0,
                        String = 1,
                        Object = 2,
                        ObjectUrt = 3,
                        ObjectUser = 4,
                        ObjectArray = 5,
                        StringArray = 6,
                        PrimitiveArray = 7,
                    }

                    enum BinaryArrayTypeEnum
                    {
                        Single = 0,
                        Jagged = 1,
                        Rectangular = 2,
                        SingleOffset = 3,
                        JaggedOffset = 4,
                        RectangularOffset = 5,
                    }

                    enum InternalSerializerTypeE
                    {
                        Soap = 1,
                        Binary = 2,
                    }

                    enum InternalParseTypeE
                    {
                        Empty = 0,
                        SerializedStreamHeader = 1,
                        Object = 2,
                        Member = 3,
                        ObjectEnd = 4,
                        MemberEnd = 5,
                        Headers = 6,
                        HeadersEnd = 7,
                        SerializedStreamHeaderEnd = 8,
                        Envelope = 9,
                        EnvelopeEnd = 10,
                        Body = 11,
                        BodyEnd = 12,
                    }

                    enum InternalObjectTypeE
                    {
                        Empty = 0,
                        Object = 1,
                        Array = 2,
                    }

                    enum InternalObjectPositionE
                    {
                        Empty = 0,
                        Top = 1,
                        Child = 2,
                        Headers = 3,
                    }

                    enum InternalArrayTypeE
                    {
                        Empty = 0,
                        Single = 1,
                        Jagged = 2,
                        Rectangular = 3,
                        Base64 = 4,
                    }

                    enum InternalMemberTypeE
                    {
                        Empty = 0,
                        Header = 1,
                        Field = 2,
                        Item = 3,
                    }

                    enum InternalMemberValueE
                    {
                        Empty = 0,
                        InlineValue = 1,
                        Nested = 2,
                        Reference = 3,
                        Null = 4,
                    }

                    enum InternalPrimitiveTypeE
                    {
                        Invalid = 0,
                        Boolean = 1,
                        Byte = 2,
                        Char = 3,
                        Currency = 4,
                        Decimal = 5,
                        Double = 6,
                        Int16 = 7,
                        Int32 = 8,
                        Int64 = 9,
                        SByte = 10,
                        Single = 11,
                        TimeSpan = 12,
                        DateTime = 13,
                        UInt16 = 14,
                        UInt32 = 15,
                        UInt64 = 16,
                        Null = 17,
                        String = 18,
                    }

                    enum ValueFixupEnum
                    {
                        Empty = 0,
                        Array = 1,
                        Header = 2,
                        Member = 3,
                    }

                    class BinaryConverter
                    {
                        static /*0x107a0ac*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetBinaryTypeInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, string typeName, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, ref object typeInformation, ref int assemId);
                        static /*0x107a67c*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetParserBinaryTypeInfo(System.Type type, ref object typeInformation);
                        static /*0x107a970*/ void WriteTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x107ac00*/ object ReadTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, ref int assemId);
                        static /*0x107ada8*/ void TypeFromInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, ref System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, ref string typeString, ref System.Type type, ref bool isVariant);
                    }

                    class IOUtil
                    {
                        static /*0x107b2ec*/ bool FlagTest(System.Runtime.Serialization.Formatters.Binary.MessageEnum flag, System.Runtime.Serialization.Formatters.Binary.MessageEnum target);
                        static /*0x107b2f8*/ void WriteStringWithCode(string value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x107b36c*/ void WriteWithCode(System.Type type, object value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                    }

                    class BinaryAssemblyInfo
                    {
                        /*0x10*/ string assemblyString;
                        /*0x18*/ System.Reflection.Assembly assembly;

                        /*0x107bafc*/ BinaryAssemblyInfo(string assemblyString);
                        /*0x107bb24*/ BinaryAssemblyInfo(string assemblyString, System.Reflection.Assembly assembly);
                        /*0x107bb50*/ System.Reflection.Assembly GetAssembly();
                    }

                    class SerializationHeaderRecord
                    {
                        /*0x10*/ int binaryFormatterMajorVersion;
                        /*0x14*/ int binaryFormatterMinorVersion;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x1c*/ int topId;
                        /*0x20*/ int headerId;
                        /*0x24*/ int majorVersion;
                        /*0x28*/ int minorVersion;

                        static /*0x107bd84*/ int GetInt32(byte[] buffer, int index);
                        /*0x107bc6c*/ SerializationHeaderRecord();
                        /*0x107bc7c*/ SerializationHeaderRecord(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
                        /*0x107bcd4*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107bdf8*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107bf5c*/ void Dump();
                    }

                    class BinaryAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x18*/ string assemblyString;

                        /*0x107bf60*/ BinaryAssembly();
                        /*0x107bf68*/ void Set(int assemId, string assemblyString);
                        /*0x107bf74*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107bfe4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c028*/ void Dump();
                    }

                    class BinaryCrossAppDomainAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x14*/ int assemblyIndex;

                        /*0x107c02c*/ BinaryCrossAppDomainAssembly();
                        /*0x107c034*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c078*/ void Dump();
                    }

                    class BinaryObject
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int mapId;

                        /*0x107c07c*/ BinaryObject();
                        /*0x107c084*/ void Set(int objectId, int mapId);
                        /*0x107c08c*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107c0fc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c140*/ void Dump();
                    }

                    class BinaryMethodCall
                    {
                        /*0x10*/ string methodName;
                        /*0x18*/ string typeName;
                        /*0x20*/ object[] args;
                        /*0x28*/ object callContext;
                        /*0x30*/ System.Type[] argTypes;
                        /*0x38*/ bool bArgsPrimitive;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;

                        /*0x107c290*/ BinaryMethodCall();
                        /*0x107c144*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107c28c*/ void Dump();
                    }

                    class BinaryMethodReturn
                    {
                        static /*0x0*/ object instanceOfVoid;
                        /*0x10*/ object returnValue;
                        /*0x18*/ object[] args;
                        /*0x20*/ object callContext;
                        /*0x28*/ System.Type[] argTypes;
                        /*0x30*/ bool bArgsPrimitive;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;
                        /*0x38*/ System.Type returnType;

                        static /*0x107c2a0*/ BinaryMethodReturn();
                        /*0x107c348*/ BinaryMethodReturn();
                        /*0x107c358*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107c4a0*/ void Dump();
                    }

                    class BinaryObjectString
                    {
                        /*0x10*/ int objectId;
                        /*0x18*/ string value;

                        /*0x107c4a4*/ BinaryObjectString();
                        /*0x107c4ac*/ void Set(int objectId, string value);
                        /*0x107c4b8*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107c528*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c56c*/ void Dump();
                    }

                    class BinaryCrossAppDomainString
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int value;

                        /*0x107c570*/ BinaryCrossAppDomainString();
                        /*0x107c578*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c5bc*/ void Dump();
                    }

                    class BinaryCrossAppDomainMap
                    {
                        /*0x10*/ int crossAppDomainArrayIndex;

                        /*0x107c5c0*/ BinaryCrossAppDomainMap();
                        /*0x107c5c8*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c5f0*/ void Dump();
                    }

                    class MemberPrimitiveTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum;
                        /*0x18*/ object value;

                        /*0x107c5f4*/ MemberPrimitiveTyped();
                        /*0x107c5fc*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, object value);
                        /*0x107c608*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107c668*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c6b0*/ void Dump();
                    }

                    class BinaryObjectWithMap
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ int assemId;

                        /*0x107c6b4*/ BinaryObjectWithMap();
                        /*0x107c6bc*/ BinaryObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x107c6e4*/ void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId);
                        /*0x107c708*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107c81c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107c958*/ void Dump();
                    }

                    class BinaryObjectWithMapTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x38*/ object[] typeInformationA;
                        /*0x40*/ int[] memberAssemIds;
                        /*0x48*/ int assemId;

                        /*0x107c95c*/ BinaryObjectWithMapTyped();
                        /*0x107c964*/ BinaryObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x107c98c*/ void Set(int objectId, string name, int numMembers, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId);
                        /*0x107c9b8*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107cb90*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class BinaryArray
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int rank;
                        /*0x18*/ int[] lengthA;
                        /*0x20*/ int[] lowerBoundA;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x30*/ object typeInformation;
                        /*0x38*/ int assemId;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum;

                        /*0x107ce34*/ BinaryArray();
                        /*0x107ce3c*/ BinaryArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x107ce64*/ void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId);
                        /*0x107ceb8*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107d190*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class MemberPrimitiveUnTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation;
                        /*0x18*/ object value;

                        /*0x107d490*/ MemberPrimitiveUnTyped();
                        /*0x107d498*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation, object value);
                        /*0x107d4a4*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation);
                        /*0x107d4ac*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107d4d0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107d500*/ void Dump();
                    }

                    class MemberReference
                    {
                        /*0x10*/ int idRef;

                        /*0x107d504*/ MemberReference();
                        /*0x107d50c*/ void Set(int idRef);
                        /*0x107d514*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107d568*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107d590*/ void Dump();
                    }

                    class ObjectNull
                    {
                        /*0x10*/ int nullCount;

                        /*0x107d594*/ ObjectNull();
                        /*0x107d59c*/ void SetNullCount(int nullCount);
                        /*0x107d5a4*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107d650*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x107d6b0*/ void Dump();
                    }

                    class MessageEnd
                    {
                        /*0x107d6b4*/ MessageEnd();
                        /*0x107d6bc*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x107d6e4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x107d6e8*/ void Dump();
                        /*0x107d6ec*/ void Dump(System.IO.Stream sout);
                    }

                    class ObjectMap
                    {
                        /*0x10*/ string objectName;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x28*/ object[] typeInformationA;
                        /*0x30*/ System.Type[] memberTypes;
                        /*0x38*/ string[] memberNames;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x48*/ bool isInitObjectInfo;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x58*/ int objectId;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo;

                        static /*0x107e16c*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        static /*0x107e20c*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x107d6f0*/ ObjectMap(string objectName, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        /*0x107dd70*/ ObjectMap(string objectName, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x107e054*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateObjectInfo(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                    }

                    class ObjectProgress
                    {
                        static /*0x0*/ int opRecordIdCount;
                        /*0x10*/ bool isInitial;
                        /*0x14*/ int count;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x20*/ object expectedTypeInformation;
                        /*0x28*/ string name;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE objectTypeEnum;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE memberTypeEnum;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE memberValueEnum;
                        /*0x40*/ System.Type dtType;
                        /*0x48*/ int numItems;
                        /*0x4c*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x50*/ object typeInformation;
                        /*0x58*/ int nullCount;
                        /*0x5c*/ int memberLength;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x68*/ object[] typeInformationA;
                        /*0x70*/ string[] memberNames;
                        /*0x78*/ System.Type[] memberTypes;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord pr;

                        static /*0x107e4b4*/ ObjectProgress();
                        /*0x107e2d0*/ ObjectProgress();
                        /*0x107e340*/ void Init();
                        /*0x107e390*/ void ArrayCountIncrement(int value);
                        /*0x107e3a0*/ bool GetNext(ref System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum outBinaryTypeEnum, ref object outTypeInformation);
                    }

                    class Converter
                    {
                        static /*0x0*/ int primitiveTypeEnumLength;
                        static /*0x8*/ System.Type[] typeA;
                        static /*0x10*/ System.Type[] arrayTypeA;
                        static /*0x18*/ string[] valueA;
                        static /*0x20*/ System.TypeCode[] typeCodeA;
                        static /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE[] codeA;
                        static /*0x30*/ System.Type typeofISerializable;
                        static /*0x38*/ System.Type typeofString;
                        static /*0x40*/ System.Type typeofConverter;
                        static /*0x48*/ System.Type typeofBoolean;
                        static /*0x50*/ System.Type typeofByte;
                        static /*0x58*/ System.Type typeofChar;
                        static /*0x60*/ System.Type typeofDecimal;
                        static /*0x68*/ System.Type typeofDouble;
                        static /*0x70*/ System.Type typeofInt16;
                        static /*0x78*/ System.Type typeofInt32;
                        static /*0x80*/ System.Type typeofInt64;
                        static /*0x88*/ System.Type typeofSByte;
                        static /*0x90*/ System.Type typeofSingle;
                        static /*0x98*/ System.Type typeofTimeSpan;
                        static /*0xa0*/ System.Type typeofDateTime;
                        static /*0xa8*/ System.Type typeofUInt16;
                        static /*0xb0*/ System.Type typeofUInt32;
                        static /*0xb8*/ System.Type typeofUInt64;
                        static /*0xc0*/ System.Type typeofObject;
                        static /*0xc8*/ System.Type typeofSystemVoid;
                        static /*0xd0*/ System.Reflection.Assembly urtAssembly;
                        static /*0xd8*/ string urtAssemblyString;
                        static /*0xe0*/ System.Type typeofTypeArray;
                        static /*0xe8*/ System.Type typeofObjectArray;
                        static /*0xf0*/ System.Type typeofStringArray;
                        static /*0xf8*/ System.Type typeofBooleanArray;
                        static /*0x100*/ System.Type typeofByteArray;
                        static /*0x108*/ System.Type typeofCharArray;
                        static /*0x110*/ System.Type typeofDecimalArray;
                        static /*0x118*/ System.Type typeofDoubleArray;
                        static /*0x120*/ System.Type typeofInt16Array;
                        static /*0x128*/ System.Type typeofInt32Array;
                        static /*0x130*/ System.Type typeofInt64Array;
                        static /*0x138*/ System.Type typeofSByteArray;
                        static /*0x140*/ System.Type typeofSingleArray;
                        static /*0x148*/ System.Type typeofTimeSpanArray;
                        static /*0x150*/ System.Type typeofDateTimeArray;
                        static /*0x158*/ System.Type typeofUInt16Array;
                        static /*0x160*/ System.Type typeofUInt32Array;
                        static /*0x168*/ System.Type typeofUInt64Array;
                        static /*0x170*/ System.Type typeofMarshalByRefObject;

                        static /*0x107f7dc*/ Converter();
                        static /*0x107a84c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        static /*0x107e5b8*/ bool IsWriteAsByteArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x107e5dc*/ int TypeLength(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x107b234*/ System.Type ToArrayType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x107e9b8*/ void InitTypeA();
                        static /*0x107e600*/ void InitArrayTypeA();
                        static /*0x107b17c*/ System.Type ToType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x107ed70*/ System.Array CreatePrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, int length);
                        static /*0x107a39c*/ bool IsPrimitiveArray(System.Type type, ref object typeInformation);
                        static /*0x107ee90*/ void InitValueA();
                        static /*0x107b0c4*/ string ToComType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x107f2fc*/ void InitTypeCodeA();
                        static /*0x107f490*/ System.TypeCode ToTypeCode(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x107f548*/ void InitCodeA();
                        static /*0x107e500*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToPrimitiveTypeEnum(System.TypeCode typeCode);
                        static /*0x107f6f0*/ object FromString(string value, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                    }

                    class BinaryFormatter : System.Runtime.Serialization.IFormatter
                    {
                        static /*0x0*/ System.Collections.Generic.Dictionary<System.Type, System.Runtime.Serialization.Formatters.Binary.TypeInformation> typeNameCache;
                        /*0x10*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x18*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x28*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x30*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle m_typeFormat;
                        /*0x34*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle m_assemblyFormat;
                        /*0x38*/ System.Runtime.Serialization.Formatters.TypeFilterLevel m_securityLevel;
                        /*0x40*/ object[] m_crossAppDomainArray;

                        static /*0x1080778*/ BinaryFormatter();
                        static /*0x108051c*/ System.Runtime.Serialization.Formatters.Binary.TypeInformation GetTypeInformation(System.Type type);
                        /*0x107ff78*/ BinaryFormatter();
                        /*0x107ffac*/ BinaryFormatter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);
                        /*0x107ff68*/ void set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle value);
                        /*0x107ff70*/ void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector value);
                        /*0x107fff8*/ object Deserialize(System.IO.Stream serializationStream);
                        /*0x108000c*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, bool fCheck);
                        /*0x1080004*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);
                        /*0x1080258*/ void Serialize(System.IO.Stream serializationStream, object graph);
                        /*0x1080264*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);
                        /*0x108026c*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers, bool fCheck);
                    }

                    class __BinaryWriter
                    {
                        /*0x10*/ System.IO.Stream sout;
                        /*0x18*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle;
                        /*0x20*/ System.Collections.Hashtable objectMapTable;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter;
                        /*0x30*/ System.IO.BinaryWriter dataWriter;
                        /*0x38*/ int m_nestedObjectCount;
                        /*0x3c*/ int nullCount;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodCall binaryMethodCall;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn binaryMethodReturn;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap binaryObjectWithMap;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped binaryObjectWithMapTyped;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString binaryObjectString;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.BinaryArray binaryArray;
                        /*0x78*/ byte[] byteBuffer;
                        /*0x80*/ int chunkSize;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssembly binaryAssembly;

                        /*0x1080464*/ __BinaryWriter(System.IO.Stream sout, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle);
                        /*0x1080804*/ void WriteBegin();
                        /*0x1080808*/ void WriteEnd();
                        /*0x1080828*/ void WriteBoolean(bool value);
                        /*0x107ab98*/ void WriteByte(byte value);
                        /*0x108084c*/ void WriteBytes(byte[] value);
                        /*0x108086c*/ void WriteBytes(byte[] byteA, int offset, int size);
                        /*0x1080890*/ void WriteChar(char value);
                        /*0x10808b4*/ void WriteChars(char[] value);
                        /*0x10808d8*/ void WriteDecimal(decimal value);
                        /*0x1080998*/ void WriteSingle(float value);
                        /*0x10809bc*/ void WriteDouble(double value);
                        /*0x10809e0*/ void WriteInt16(short value);
                        /*0x107abdc*/ void WriteInt32(int value);
                        /*0x1080a04*/ void WriteInt64(long value);
                        /*0x1080a28*/ void WriteSByte(sbyte value);
                        /*0x107abb8*/ void WriteString(string value);
                        /*0x1080a48*/ void WriteTimeSpan(System.TimeSpan value);
                        /*0x1080a6c*/ void WriteDateTime(System.DateTime value);
                        /*0x1080a90*/ void WriteUInt16(ushort value);
                        /*0x1080ab4*/ void WriteUInt32(uint value);
                        /*0x1080ad8*/ void WriteUInt64(ulong value);
                        /*0x1080afc*/ void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x1080b00*/ void WriteSerializationHeaderEnd();
                        /*0x1080b5c*/ void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
                        /*0x1080bf4*/ void WriteMethodCall();
                        /*0x1080c74*/ void WriteMethodReturn();
                        /*0x1080cf4*/ void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, int numMembers, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x10813a8*/ void WriteObjectString(int objectId, string value);
                        /*0x1081438*/ void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, System.Array array);
                        /*0x1081734*/ void WriteArrayAsBytes(System.Array array, int typeLength);
                        /*0x1081964*/ void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound);
                        /*0x1081af4*/ void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA);
                        /*0x1081c4c*/ void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA);
                        /*0x1081cac*/ void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x1081db4*/ void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x1081e54*/ void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, int idRef);
                        /*0x1081ee8*/ void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo);
                        /*0x1081f04*/ void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string value);
                        /*0x1081f4c*/ void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x1081f8c*/ void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x1081f9c*/ void WriteDelayedNullItem();
                        /*0x1081fac*/ void WriteItemEnd();
                        /*0x108119c*/ void InternalWriteItemNull();
                        /*0x1081fb0*/ void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, int idRef);
                        /*0x1081fe0*/ void WriteAssembly(System.Type type, string assemblyString, int assemId, bool isNew);
                        /*0x107b498*/ void WriteValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, object value);
                    }

                    class ObjectMapInfo
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int numMembers;
                        /*0x18*/ string[] memberNames;
                        /*0x20*/ System.Type[] memberTypes;

                        /*0x1081368*/ ObjectMapInfo(int objectId, int numMembers, string[] memberNames, System.Type[] memberTypes);
                        /*0x108122c*/ bool isCompatible(int numMembers, string[] memberNames, System.Type[] memberTypes);
                    }

                    class WriteObjectInfo
                    {
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ object obj;
                        /*0x20*/ System.Type objectType;
                        /*0x28*/ bool isSi;
                        /*0x29*/ bool isNamed;
                        /*0x2a*/ bool isTyped;
                        /*0x2b*/ bool isArray;
                        /*0x30*/ System.Runtime.Serialization.SerializationInfo si;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x40*/ object[] memberData;
                        /*0x48*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x50*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x68*/ long objectId;
                        /*0x70*/ long assemId;
                        /*0x78*/ string binderTypeName;
                        /*0x80*/ string binderAssemblyString;

                        static /*0x1082108*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x1082f80*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x1082b50*/ void CheckTypeForwardedFrom(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache, System.Type objectType, string binderAssemblyString);
                        static /*0x1082198*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        static /*0x10820c8*/ void PutObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x10820b4*/ WriteObjectInfo();
                        /*0x10820bc*/ void ObjectEnd();
                        /*0x10820e8*/ void InternalInit();
                        /*0x1082270*/ void InitSerialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x1083008*/ void InitSerialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x1082858*/ void InitSiWrite();
                        /*0x1082748*/ void InitNoMembers();
                        /*0x1082ca8*/ void InitMemberInfo();
                        /*0x107a654*/ string GetTypeFullName();
                        /*0x107a62c*/ string GetAssemblyString();
                        /*0x1082830*/ void InvokeSerializationBinder(System.Runtime.Serialization.SerializationBinder binder);
                        /*0x10832e4*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                        /*0x1083450*/ void GetMemberInfo(ref string[] outMemberNames, ref System.Type[] outMemberTypes, ref object[] outMemberData);
                    }

                    class ReadObjectInfo
                    {
                        static /*0x0*/ int readObjectInfoCounter;
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.ObjectManager objectManager;
                        /*0x28*/ int count;
                        /*0x2c*/ bool isSi;
                        /*0x2d*/ bool isNamed;
                        /*0x2e*/ bool isTyped;
                        /*0x2f*/ bool bSimpleAssembly;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x38*/ string[] wireMemberNames;
                        /*0x40*/ System.Type[] wireMemberTypes;
                        /*0x48*/ int lastPosition;
                        /*0x50*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x58*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x68*/ System.Collections.Generic.List<System.Type> memberTypesList;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x78*/ System.Runtime.Serialization.IFormatterConverter formatterConverter;

                        static /*0x1083500*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x10837b0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x1083588*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        /*0x10834f4*/ ReadObjectInfo();
                        /*0x10834fc*/ void ObjectEnd();
                        /*0x107e164*/ void PrepareForReuse();
                        /*0x10835f8*/ void Init(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x108384c*/ void Init(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x1083614*/ void InitReadConstructor(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context);
                        /*0x1083904*/ void InitSiRead();
                        /*0x108389c*/ void InitNoMembers();
                        /*0x1083984*/ void InitMemberInfo();
                        /*0x1083d00*/ System.Reflection.MemberInfo GetMemberInfo(string name);
                        /*0x1083fec*/ System.Type GetType(string name);
                        /*0x1084198*/ void AddValue(string name, object value, ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x107e094*/ void InitDataStore(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x108422c*/ void RecordFixup(long objectId, string name, long idRef);
                        /*0x10842d0*/ void PopulateObjectMembers(object obj, object[] memberData);
                        /*0x1083eb8*/ int Position(string name);
                        /*0x107d8a4*/ System.Type[] GetMemberTypes(string[] inMemberNames, System.Type objectType);
                        /*0x1083b94*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                    }

                    class SerObjectInfoInit
                    {
                        /*0x10*/ System.Collections.Hashtable seenBeforeTable;
                        /*0x18*/ int objectInfoIdCount;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.SerStack oiPool;

                        /*0x10da964*/ SerObjectInfoInit();
                    }

                    class SerObjectInfoCache
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;
                        /*0x28*/ System.Reflection.MemberInfo[] memberInfos;
                        /*0x30*/ string[] memberNames;
                        /*0x38*/ System.Type[] memberTypes;

                        /*0x10daa8c*/ SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
                        /*0x10daac8*/ SerObjectInfoCache(System.Type type);
                    }

                    class TypeInformation
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;

                        /*0x10dab6c*/ TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
                        /*0x10dab54*/ string get_FullTypeName();
                        /*0x10dab5c*/ string get_AssemblyString();
                        /*0x10dab64*/ bool get_HasTypeForwardedFrom();
                    }

                    class ObjectReader
                    {
                        /*0x10*/ System.IO.Stream m_stream;
                        /*0x18*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x20*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x30*/ System.Runtime.Serialization.ObjectManager m_objectManager;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x40*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x48*/ long topId;
                        /*0x50*/ bool bSimpleAssembly;
                        /*0x58*/ object handlerObject;
                        /*0x60*/ object m_topObject;
                        /*0x68*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x70*/ System.Runtime.Remoting.Messaging.HeaderHandler handler;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.SerStack valueFixupStack;
                        /*0x98*/ object[] crossAppDomainArray;
                        /*0xa0*/ bool bFullDeserialization;
                        /*0xa1*/ bool bOldFormatDetected;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.IntSizedArray valTypeObjectIdTable;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.NameCache typeCache;
                        /*0xb8*/ string previousAssemblyString;
                        /*0xc0*/ string previousName;
                        /*0xc8*/ System.Type previousType;

                        static /*0x10de8c4*/ System.Reflection.Assembly ResolveSimpleAssemblyName(System.Reflection.AssemblyName assemblyName);
                        static /*0x10de924*/ void GetSimplyNamedTypeFromAssembly(System.Reflection.Assembly assm, string typeName, ref System.Type type);
                        static /*0x10deb78*/ void CheckTypeForwardedTo(System.Reflection.Assembly sourceAssembly, System.Reflection.Assembly destAssembly, System.Type resolvedType);
                        /*0x10dac44*/ ObjectReader(System.IO.Stream stream, System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x10daba8*/ System.Runtime.Serialization.Formatters.Binary.SerStack get_ValueFixupStack();
                        /*0x10dac28*/ object get_TopObject();
                        /*0x10dac30*/ void set_TopObject(object value);
                        /*0x10dad60*/ object Deserialize(System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Serialization.Formatters.Binary.__BinaryParser serParser, bool fCheck);
                        /*0x10db644*/ bool HasSurrogate(System.Type t);
                        /*0x10db718*/ void CheckSerializable(System.Type t);
                        /*0x10db850*/ void InitFullDeserialization();
                        /*0x10db960*/ object CrossAppDomainArray(int index);
                        /*0x10db990*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType);
                        /*0x10db9c4*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType, string[] memberNames, System.Type[] memberTypes);
                        /*0x10dba08*/ void Parse(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dc654*/ void ParseError(System.Runtime.Serialization.Formatters.Binary.ParseRecord processing, System.Runtime.Serialization.Formatters.Binary.ParseRecord onStack);
                        /*0x10dbb4c*/ void ParseSerializedStreamHeader(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dbb64*/ void ParseSerializedStreamHeaderEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dbb7c*/ void ParseObject(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dbe90*/ void ParseObjectEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dca28*/ void ParseArray(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dd444*/ void NextRectangleMap(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dd508*/ void ParseArrayMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10de0d4*/ void ParseArrayMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dc0c0*/ void ParseMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10dc598*/ void ParseMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10ddcd8*/ void ParseString(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord parentPr);
                        /*0x10dd0f4*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr);
                        /*0x10de140*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr, bool bIsString);
                        /*0x10de264*/ long GetId(long objectId);
                        /*0x10de4d4*/ System.Type Bind(string assemblyString, string typeString);
                        /*0x10de52c*/ System.Type FastBindToType(string assemblyName, string typeName);
                        /*0x10ded7c*/ System.Type GetType(System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, string name);

                        class TypeNAssembly
                        {
                            /*0x10*/ System.Type type;
                            /*0x18*/ string assemblyName;

                            /*0x10decbc*/ TypeNAssembly();
                        }

                        class TopLevelAssemblyTypeResolver
                        {
                            /*0x10*/ System.Reflection.Assembly m_topLevelAssembly;

                            /*0x10ded54*/ TopLevelAssemblyTypeResolver(System.Reflection.Assembly topLevelAssembly);
                            /*0x10def30*/ System.Type ResolveType(System.Reflection.Assembly assembly, string simpleTypeName, bool ignoreCase);
                        }
                    }

                    class ObjectWriter
                    {
                        /*0x10*/ System.Collections.Queue m_objectQueue;
                        /*0x18*/ System.Runtime.Serialization.ObjectIDGenerator m_idGenerator;
                        /*0x20*/ int m_currentId;
                        /*0x28*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x30*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter;
                        /*0x48*/ System.Runtime.Serialization.SerializationObjectManager m_objectManager;
                        /*0x50*/ long topId;
                        /*0x58*/ string topName;
                        /*0x60*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x70*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ object[] crossAppDomainArray;
                        /*0x90*/ object previousObj;
                        /*0x98*/ long previousId;
                        /*0xa0*/ System.Type previousType;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE previousCode;
                        /*0xb0*/ System.Collections.Hashtable assemblyToIdTable;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.SerStack niPool;

                        /*0x10def98*/ ObjectWriter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x10df090*/ void Serialize(object graph, System.Runtime.Remoting.Messaging.Header[] inHeaders, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter, bool fCheck);
                        /*0x10dfcbc*/ System.Runtime.Serialization.SerializationObjectManager get_ObjectManager();
                        /*0x10df7b0*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x10e04b4*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string[] memberNames, System.Type[] memberTypes, object[] memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x10e0728*/ void WriteMemberSetup(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string memberName, System.Type memberType, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x10e0840*/ void WriteMembers(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberTypeNameInfo, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x10dfcc4*/ void WriteArray(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x10e0e44*/ void WriteArrayMember(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, object data);
                        /*0x10e10bc*/ void WriteRectangle(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, int rank, int[] maxA, System.Array array, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemNameTypeInfo, int[] lowerBoundA);
                        /*0x10dfb44*/ object GetNext(ref long objID);
                        /*0x10df498*/ long InternalGetId(object obj, bool assignUniqueIdToValueType, System.Type type, ref bool isNew);
                        /*0x10e1344*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type);
                        /*0x10e0ca8*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x10e0d50*/ bool WriteKnownValueClass(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x10e0d34*/ void WriteObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, long objectId);
                        /*0x10e1350*/ void WriteString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object stringObject);
                        /*0x10e0b68*/ bool CheckForNull(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x10df474*/ void WriteSerializedStreamHeader(long topId, long headerId);
                        /*0x10e1450*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x10e0804*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type);
                        /*0x10df76c*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x10e0c58*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x10e0c20*/ void TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x10e0708*/ System.Runtime.Serialization.Formatters.Binary.NameInfo MemberToNameInfo(string name);
                        /*0x10e0434*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        /*0x10df55c*/ long GetAssemblyId(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x10e041c*/ System.Type GetType(object obj);
                        /*0x10e14e4*/ System.Runtime.Serialization.Formatters.Binary.NameInfo GetNameInfo();
                        /*0x10e0410*/ bool CheckTypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle test, System.Runtime.Serialization.Formatters.FormatterTypeStyle want);
                        /*0x10dfb2c*/ void PutNameInfo(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                    }

                    class __BinaryParser
                    {
                        static /*0x0*/ System.Text.Encoding encoding;
                        static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x18*/ System.IO.Stream input;
                        /*0x20*/ long topId;
                        /*0x28*/ long headerId;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SizedArray objectMapIdTable;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x50*/ object expectedTypeInformation;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord PRS;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo systemAssemblyInfo;
                        /*0x68*/ System.IO.BinaryReader dataReader;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerStack opPool;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap bowm;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped bowmt;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString objectString;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString crossAppDomainString;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0xa8*/ byte[] byteBuffer;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xc0*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;

                        static /*0x10e5094*/ __BinaryParser();
                        /*0x10e15d4*/ __BinaryParser(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader);
                        /*0x10e16e0*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo();
                        /*0x10e178c*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable();
                        /*0x10e1860*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable();
                        /*0x10e1944*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs();
                        /*0x10db070*/ void Run();
                        /*0x10e19b8*/ void ReadBegin();
                        /*0x10e373c*/ void ReadEnd();
                        /*0x10e3ac8*/ bool ReadBoolean();
                        /*0x10e3ae8*/ byte ReadByte();
                        /*0x10e3b08*/ byte[] ReadBytes(int length);
                        /*0x10e3b2c*/ void ReadBytes(byte[] byteA, int offset, int size);
                        /*0x10e3ba8*/ char ReadChar();
                        /*0x10e3bc8*/ char[] ReadChars(int length);
                        /*0x10e3bec*/ decimal ReadDecimal();
                        /*0x10e3ca0*/ float ReadSingle();
                        /*0x10e3cc4*/ double ReadDouble();
                        /*0x10e3ce8*/ short ReadInt16();
                        /*0x10e3d0c*/ int ReadInt32();
                        /*0x10e3d30*/ long ReadInt64();
                        /*0x10e3d54*/ sbyte ReadSByte();
                        /*0x10e3d74*/ string ReadString();
                        /*0x10e3d98*/ System.TimeSpan ReadTimeSpan();
                        /*0x10e3dbc*/ System.DateTime ReadDateTime();
                        /*0x10e3e38*/ ushort ReadUInt16();
                        /*0x10e3e5c*/ uint ReadUInt32();
                        /*0x10e3e80*/ ulong ReadUInt64();
                        /*0x10e19bc*/ void ReadSerializationHeaderRecord();
                        /*0x10e1a7c*/ void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x10e1cf0*/ void ReadObject();
                        /*0x10e2048*/ void ReadCrossAppDomainMap();
                        /*0x10e2214*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x10e4104*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record);
                        /*0x10e22b4*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x10e4510*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record);
                        /*0x10e2344*/ void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x10e2e64*/ void ReadMemberPrimitiveTyped();
                        /*0x10e28c8*/ void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x10e493c*/ void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x10e3740*/ void ReadMemberPrimitiveUnTyped();
                        /*0x10e31e8*/ void ReadMemberReference();
                        /*0x10e33d0*/ void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x10e35c4*/ void ReadMessageEnd();
                        /*0x10e4c74*/ object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        /*0x10e4018*/ System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp();
                        /*0x10e3a40*/ void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op);
                    }

                    class ParseRecord
                    {
                        static /*0x0*/ int parseRecordIdCount;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE PRparseTypeEnum;
                        /*0x14*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE PRobjectTypeEnum;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE PRarrayTypeEnum;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE PRmemberTypeEnum;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE PRmemberValueEnum;
                        /*0x24*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE PRobjectPositionEnum;
                        /*0x28*/ string PRname;
                        /*0x30*/ string PRvalue;
                        /*0x38*/ object PRvarValue;
                        /*0x40*/ string PRkeyDt;
                        /*0x48*/ System.Type PRdtType;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRdtTypeCode;
                        /*0x54*/ bool PRisEnum;
                        /*0x58*/ long PRobjectId;
                        /*0x60*/ long PRidRef;
                        /*0x68*/ string PRarrayElementTypeString;
                        /*0x70*/ System.Type PRarrayElementType;
                        /*0x78*/ bool PRisArrayVariant;
                        /*0x7c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRarrayElementTypeCode;
                        /*0x80*/ int PRrank;
                        /*0x88*/ int[] PRlengthA;
                        /*0x90*/ int[] PRpositionA;
                        /*0x98*/ int[] PRlowerBoundA;
                        /*0xa0*/ int[] PRupperBoundA;
                        /*0xa8*/ int[] PRindexMap;
                        /*0xb0*/ int PRmemberIndex;
                        /*0xb4*/ int PRlinearlength;
                        /*0xb8*/ int[] PRrectangularMap;
                        /*0xc0*/ bool PRisLowerBound;
                        /*0xc8*/ long PRtopId;
                        /*0xd0*/ long PRheaderId;
                        /*0xd8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo PRobjectInfo;
                        /*0xe0*/ bool PRisValueTypeFixup;
                        /*0xe8*/ object PRnewObj;
                        /*0xf0*/ object[] PRobjectA;
                        /*0xf8*/ System.Runtime.Serialization.Formatters.Binary.PrimitiveArray PRprimitiveArray;
                        /*0x100*/ bool PRisRegistered;
                        /*0x108*/ object[] PRmemberData;
                        /*0x110*/ System.Runtime.Serialization.SerializationInfo PRsi;
                        /*0x118*/ int PRnullCount;

                        static /*0x10e5114*/ ParseRecord();
                        /*0x10e19b0*/ ParseRecord();
                        /*0x10e39e8*/ void Init();
                    }

                    class SerStack
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ string stackId;
                        /*0x20*/ int top;

                        /*0x10daa18*/ SerStack(string stackId);
                        /*0x10dc92c*/ void Push(object obj);
                        /*0x10dc9d8*/ object Pop();
                        /*0x10e5160*/ void IncreaseCapacity();
                        /*0x10dd0b4*/ object Peek();
                        /*0x10e40c0*/ object PeekPeek();
                        /*0x10e15bc*/ bool IsEmpty();
                    }

                    class SizedArray : System.ICloneable
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ object[] negObjects;

                        /*0x10e17f4*/ SizedArray();
                        /*0x10e18cc*/ SizedArray(int length);
                        /*0x10e51e8*/ SizedArray(System.Runtime.Serialization.Formatters.Binary.SizedArray sizedArray);
                        /*0x10e529c*/ object Clone();
                        /*0x10e3fa4*/ object get_Item(int index);
                        /*0x10e3ea4*/ void set_Item(int index, object value);
                        /*0x10e52fc*/ void IncreaseCapacity(int index);
                    }

                    class IntSizedArray : System.ICloneable
                    {
                        /*0x10*/ int[] objects;
                        /*0x18*/ int[] negObjects;

                        /*0x10de340*/ IntSizedArray();
                        /*0x10e551c*/ IntSizedArray(System.Runtime.Serialization.Formatters.Binary.IntSizedArray sizedArray);
                        /*0x10e55f8*/ object Clone();
                        /*0x10de3a8*/ int get_Item(int index);
                        /*0x10de420*/ void set_Item(int index, int value);
                        /*0x10e5658*/ void IncreaseCapacity(int index);
                    }

                    class NameCache
                    {
                        static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, object> ht;
                        /*0x10*/ string name;

                        static /*0x10e5878*/ NameCache();
                        /*0x10dad58*/ NameCache();
                        /*0x10de81c*/ object GetCachedValue(string name);
                        /*0x10decc4*/ void SetCachedValue(object value);
                    }

                    class ValueFixup
                    {
                        static /*0x0*/ System.Reflection.MemberInfo valueInfo;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum valueFixupEnum;
                        /*0x18*/ System.Array arrayObj;
                        /*0x20*/ int[] indexMap;
                        /*0x28*/ object header;
                        /*0x30*/ object memberObject;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x40*/ string memberName;

                        /*0x10ddca4*/ ValueFixup(System.Array arrayObj, int[] indexMap);
                        /*0x10de0fc*/ ValueFixup(object memberObject, string memberName, System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo);
                        /*0x10dd0fc*/ void Fixup(System.Runtime.Serialization.Formatters.Binary.ParseRecord record, System.Runtime.Serialization.Formatters.Binary.ParseRecord parent);
                    }

                    class InternalFE
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle FEtypeFormat;
                        /*0x14*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle FEassemblyFormat;
                        /*0x18*/ System.Runtime.Serialization.Formatters.TypeFilterLevel FEsecurityLevel;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE FEserializerTypeEnum;

                        /*0x10e5904*/ InternalFE();
                    }

                    class NameInfo
                    {
                        /*0x10*/ string NIFullName;
                        /*0x18*/ long NIobjectId;
                        /*0x20*/ long NIassemId;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE NIprimitiveTypeEnum;
                        /*0x30*/ System.Type NItype;
                        /*0x38*/ bool NIisSealed;
                        /*0x39*/ bool NIisArray;
                        /*0x3a*/ bool NIisArrayItem;
                        /*0x3b*/ bool NItransmitTypeOnObject;
                        /*0x3c*/ bool NItransmitTypeOnMember;
                        /*0x3d*/ bool NIisParentTypeOnObject;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE NIarrayEnum;
                        /*0x44*/ bool NIsealedStatusChecked;

                        /*0x10e15cc*/ NameInfo();
                        /*0x10e159c*/ void Init();
                        /*0x10e12f8*/ bool get_IsSealed();
                        /*0x10e590c*/ string get_NIname();
                        /*0x10e5944*/ void set_NIname(string value);
                    }

                    class PrimitiveArray
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code;
                        /*0x18*/ bool[] booleanA;
                        /*0x20*/ char[] charA;
                        /*0x28*/ double[] doubleA;
                        /*0x30*/ short[] int16A;
                        /*0x38*/ int[] int32A;
                        /*0x40*/ long[] int64A;
                        /*0x48*/ sbyte[] sbyteA;
                        /*0x50*/ float[] singleA;
                        /*0x58*/ ushort[] uint16A;
                        /*0x60*/ uint[] uint32A;
                        /*0x68*/ ulong[] uint64A;

                        /*0x10dd410*/ PrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x10e594c*/ void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x10ddd18*/ void SetValue(string value, int index);
                    }

                    enum MessageEnum
                    {
                        NoArgs = 1,
                        ArgsInline = 2,
                        ArgsIsArray = 4,
                        ArgsInArray = 8,
                        NoContext = 16,
                        ContextInline = 32,
                        ContextInArray = 64,
                        MethodSignatureInArray = 128,
                        PropertyInArray = 256,
                        NoReturnValue = 512,
                        ReturnValueVoid = 1024,
                        ReturnValueInline = 2048,
                        ReturnValueInArray = 4096,
                        ExceptionInArray = 8192,
                        GenericMethod = 32768,
                    }
                }
            }
        }

        namespace InteropServices
        {
            enum CharSet
            {
                None = 1,
                Ansi = 2,
                Unicode = 3,
                Auto = 4,
            }

            class ExternalException : System.SystemException
            {
                /*0x10e5c6c*/ ExternalException();
                /*0x10e5cc8*/ ExternalException(string message);
                /*0x10e5cec*/ ExternalException(string message, int errorCode);
                /*0x10e5d14*/ ExternalException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x10e5d1c*/ int get_ErrorCode();
                /*0x10e5d24*/ string ToString();
            }

            struct HandleRef
            {
                /*0x10*/ object _wrapper;
                /*0x18*/ nint _handle;

                static /*0x10e5f18*/ nint op_Explicit(System.Runtime.InteropServices.HandleRef value);
                /*0x10e5f08*/ HandleRef(object wrapper, nint handle);
                /*0x10e5f10*/ nint get_Handle();
            }

            class MarshalDirectiveException : System.SystemException
            {
                /*0x10e5f20*/ MarshalDirectiveException();
                /*0x10e5f7c*/ MarshalDirectiveException(string message);
                /*0x10e5fa0*/ MarshalDirectiveException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class MemoryMarshal
            {
                static System.Span<byte> AsBytes<T>(System.Span<T> span);
                static System.ReadOnlySpan<byte> AsBytes<T>(System.ReadOnlySpan<T> span);
                static System.Memory<T> AsMemory<T>(System.ReadOnlyMemory<T> memory);
                static ref T GetReference<T>(System.Span<T> span);
                static ref T GetReference<T>(System.ReadOnlySpan<T> span);
                static ref T GetNonNullPinnableReference<T>(System.Span<T> span);
                static ref T GetNonNullPinnableReference<T>(System.ReadOnlySpan<T> span);
                static System.ReadOnlySpan<T> CreateReadOnlySpan<T>(ref T reference, int length);
                static bool TryGetArray<T>(System.ReadOnlyMemory<T> memory, ref System.ArraySegment<T> segment);
            }

            enum GCHandleType
            {
                Weak = 0,
                WeakTrackResurrection = 1,
                Normal = 2,
                Pinned = 3,
            }

            class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                static /*0x0*/ nuint Uninitialized;
                /*0x20*/ nuint _numBytes;

                static /*0x10e62d8*/ SafeBuffer();
                static /*0x10e60b0*/ System.InvalidOperationException NotInitialized();
                /*0x10e5fa8*/ void AcquirePointer(ref byte* pointer);
                /*0x10e61f4*/ void ReleasePointer();
            }

            class COMException : System.Runtime.InteropServices.ExternalException
            {
                /*0x10e6388*/ COMException();
                /*0x10e638c*/ COMException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x10e6394*/ string ToString();
            }

            class ErrorWrapper
            {
                /*0x10*/ int m_ErrorCode;
            }

            interface ICustomMarshaler
            {
                object MarshalNativeToManaged(nint pNativeData);
                nint MarshalManagedToNative(object ManagedObj);
                void CleanUpNativeData(nint pNativeData);
                void CleanUpManagedData(object ManagedObj);
                int GetNativeDataSize();
            }

            class UnmanagedFunctionPointerAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.CallingConvention m_callingConvention;

                /*0x10e6578*/ UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention callingConvention);
            }

            enum ComInterfaceType
            {
                InterfaceIsDual = 0,
                InterfaceIsIUnknown = 1,
                InterfaceIsIDispatch = 2,
                InterfaceIsIInspectable = 3,
            }

            class InterfaceTypeAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ComInterfaceType _val;

                /*0x10e65a0*/ InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType interfaceType);
            }

            class ComDefaultInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Type _val;

                /*0x10e65c8*/ ComDefaultInterfaceAttribute(System.Type defaultInterface);
            }

            enum ClassInterfaceType
            {
                None = 0,
                AutoDispatch = 1,
                AutoDual = 2,
            }

            class ClassInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ClassInterfaceType _val;

                /*0x10e65f0*/ ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType classInterfaceType);
            }

            class ComVisibleAttribute : System.Attribute
            {
                /*0x10*/ bool _val;

                /*0x10e6618*/ ComVisibleAttribute(bool visibility);
            }

            enum VarEnum
            {
                VT_EMPTY = 0,
                VT_NULL = 1,
                VT_I2 = 2,
                VT_I4 = 3,
                VT_R4 = 4,
                VT_R8 = 5,
                VT_CY = 6,
                VT_DATE = 7,
                VT_BSTR = 8,
                VT_DISPATCH = 9,
                VT_ERROR = 10,
                VT_BOOL = 11,
                VT_VARIANT = 12,
                VT_UNKNOWN = 13,
                VT_DECIMAL = 14,
                VT_I1 = 16,
                VT_UI1 = 17,
                VT_UI2 = 18,
                VT_UI4 = 19,
                VT_I8 = 20,
                VT_UI8 = 21,
                VT_INT = 22,
                VT_UINT = 23,
                VT_VOID = 24,
                VT_HRESULT = 25,
                VT_PTR = 26,
                VT_SAFEARRAY = 27,
                VT_CARRAY = 28,
                VT_USERDEFINED = 29,
                VT_LPSTR = 30,
                VT_LPWSTR = 31,
                VT_RECORD = 36,
                VT_FILETIME = 64,
                VT_BLOB = 65,
                VT_STREAM = 66,
                VT_STORAGE = 67,
                VT_STREAMED_OBJECT = 68,
                VT_STORED_OBJECT = 69,
                VT_BLOB_OBJECT = 70,
                VT_CF = 71,
                VT_CLSID = 72,
                VT_VECTOR = 4096,
                VT_ARRAY = 8192,
                VT_BYREF = 16384,
            }

            enum UnmanagedType
            {
                Bool = 2,
                I1 = 3,
                U1 = 4,
                I2 = 5,
                U2 = 6,
                I4 = 7,
                U4 = 8,
                I8 = 9,
                U8 = 10,
                R4 = 11,
                R8 = 12,
                Currency = 15,
                BStr = 19,
                LPStr = 20,
                LPWStr = 21,
                LPTStr = 22,
                ByValTStr = 23,
                IUnknown = 25,
                IDispatch = 26,
                Struct = 27,
                Interface = 28,
                SafeArray = 29,
                ByValArray = 30,
                SysInt = 31,
                SysUInt = 32,
                VBByRefStr = 34,
                AnsiBStr = 35,
                TBStr = 36,
                VariantBool = 37,
                FunctionPtr = 38,
                AsAny = 40,
                LPArray = 42,
                LPStruct = 43,
                CustomMarshaler = 44,
                Error = 45,
                IInspectable = 46,
                HString = 47,
                LPUTF8Str = 48,
            }

            class ComImportAttribute : System.Attribute
            {
                /*0x10e6640*/ ComImportAttribute();
            }

            class GuidAttribute : System.Attribute
            {
                /*0x10*/ string _val;

                /*0x10e6648*/ GuidAttribute(string guid);
            }

            class PreserveSigAttribute : System.Attribute
            {
                /*0x10e6670*/ PreserveSigAttribute();
            }

            class InAttribute : System.Attribute
            {
                /*0x10e6678*/ InAttribute();
            }

            class OutAttribute : System.Attribute
            {
                /*0x10e6680*/ OutAttribute();
            }

            class OptionalAttribute : System.Attribute
            {
                /*0x10e6688*/ OptionalAttribute();
            }

            enum DllImportSearchPath
            {
                UseDllDirectoryForDependencies = 256,
                ApplicationDirectory = 512,
                UserDirectories = 1024,
                System32 = 2048,
                SafeDirectories = 4096,
                AssemblyDirectory = 2,
                LegacyBehavior = 0,
            }

            class DefaultDllImportSearchPathsAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.DllImportSearchPath _paths;

                /*0x10e6690*/ DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath paths);
            }

            class DllImportAttribute : System.Attribute
            {
                /*0x10*/ string _val;
                /*0x18*/ string EntryPoint;
                /*0x20*/ System.Runtime.InteropServices.CharSet CharSet;
                /*0x24*/ bool SetLastError;
                /*0x25*/ bool ExactSpelling;
                /*0x26*/ bool PreserveSig;
                /*0x28*/ System.Runtime.InteropServices.CallingConvention CallingConvention;
                /*0x2c*/ bool BestFitMapping;
                /*0x2d*/ bool ThrowOnUnmappableChar;

                static /*0x10e66b8*/ System.Attribute GetCustomAttribute(System.Reflection.RuntimeMethodInfo method);
                static /*0x10e68fc*/ bool IsDefined(System.Reflection.RuntimeMethodInfo method);
                /*0x10e6870*/ DllImportAttribute(string dllName, string entryPoint, System.Runtime.InteropServices.CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, System.Runtime.InteropServices.CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar);
                /*0x10e6924*/ DllImportAttribute(string dllName);
                /*0x10e694c*/ string get_Value();
            }

            class FieldOffsetAttribute : System.Attribute
            {
                /*0x10*/ int _val;

                /*0x10e6954*/ FieldOffsetAttribute(int offset);
            }

            class ComCompatibleVersionAttribute : System.Attribute
            {
                /*0x10*/ int _major;
                /*0x14*/ int _minor;
                /*0x18*/ int _build;
                /*0x1c*/ int _revision;

                /*0x10e697c*/ ComCompatibleVersionAttribute(int major, int minor, int build, int revision);
            }

            enum CallingConvention
            {
                Winapi = 1,
                Cdecl = 2,
                StdCall = 3,
                ThisCall = 4,
                FastCall = 5,
            }

            class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.IDisposable
            {
                static int RefCount_Mask = 2147483644;
                static int RefCount_One = 4;
                /*0x10*/ nint handle;
                /*0x18*/ int _state;
                /*0x1c*/ bool _ownsHandle;
                /*0x1d*/ bool _fullyInitialized;

                /*0x10e69bc*/ SafeHandle(nint invalidHandleValue, bool ownsHandle);
                /*0x10e6a5c*/ void Finalize();
                /*0x10e6afc*/ void SetHandle(nint handle);
                /*0x10e6b04*/ nint DangerousGetHandle();
                /*0x10e6b0c*/ bool get_IsClosed();
                bool get_IsInvalid();
                /*0x10e6b18*/ void Close();
                /*0x10e6b28*/ void Dispose();
                /*0x10e6b38*/ void Dispose(bool disposing);
                bool ReleaseHandle();
                /*0x10e6c10*/ void SetHandleAsInvalid();
                /*0x10e6124*/ void DangerousAddRef(ref bool success);
                /*0x10e62d0*/ void DangerousRelease();
                /*0x10e6b54*/ void InternalDispose();
                /*0x10e6bfc*/ void InternalFinalize();
                /*0x10e6c94*/ void DangerousReleaseInternal(bool dispose);
            }

            struct GCHandle
            {
                /*0x10*/ nint handle;

                static /*0x10e70c0*/ System.Runtime.InteropServices.GCHandle Alloc(object value);
                static /*0x10e7114*/ System.Runtime.InteropServices.GCHandle Alloc(object value, System.Runtime.InteropServices.GCHandleType type);
                static /*0x10e725c*/ nint op_Explicit(System.Runtime.InteropServices.GCHandle value);
                static /*0x10e7260*/ System.Runtime.InteropServices.GCHandle op_Explicit(nint value);
                static /*0x10e7350*/ bool CheckCurrentDomain(nint handle);
                static /*0x10e6fa8*/ object GetTarget(nint handle);
                static /*0x10e6ee8*/ nint GetTargetHandle(object obj, nint handle, System.Runtime.InteropServices.GCHandleType type);
                static /*0x10e7258*/ void FreeHandle(nint handle);
                static /*0x10e70bc*/ nint GetAddrOfPinnedObject(nint handle);
                static /*0x10e7354*/ bool op_Equality(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);
                static /*0x10e73e4*/ System.Runtime.InteropServices.GCHandle FromIntPtr(nint value);
                static /*0x10e73e8*/ nint ToIntPtr(System.Runtime.InteropServices.GCHandle value);
                /*0x10e6e04*/ GCHandle(nint h);
                /*0x10e6e0c*/ GCHandle(object obj);
                /*0x10e6e74*/ GCHandle(object value, System.Runtime.InteropServices.GCHandleType type);
                /*0x10e6eec*/ bool get_IsAllocated();
                /*0x10e6f40*/ object get_Target();
                /*0x10e6fac*/ void set_Target(object value);
                /*0x10e6fd4*/ nint AddrOfPinnedObject();
                /*0x10e717c*/ void Free();
                /*0x10e735c*/ bool Equals(object o);
                /*0x10e73dc*/ int GetHashCode();
            }

            class Marshal
            {
                static /*0x0*/ int SystemMaxDBCSCharSize;
                static /*0x4*/ int SystemDefaultCharSize;
                static /*0x8*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> MarshalerInstanceCache;
                static /*0x10*/ object MarshalerInstanceCacheLock;

                static /*0x10e8a04*/ Marshal();
                static /*0x10e73ec*/ nint AllocHGlobal(nint cb);
                static /*0x10e73f0*/ nint AllocHGlobal(int cb);
                static /*0x10e7458*/ void copy_to_unmanaged_fixed(System.Array source, int startIndex, nint destination, int length, void* fixed_source_element);
                static /*0x10e745c*/ bool skip_fixed(System.Array array, int startIndex);
                static /*0x10e7490*/ void copy_to_unmanaged(byte[] source, int startIndex, nint destination, int length);
                static /*0x10e7578*/ void Copy(byte[] source, int startIndex, nint destination, int length);
                static /*0x10e766c*/ void copy_from_unmanaged(nint source, int startIndex, System.Array destination, int length);
                static /*0x10e76ec*/ void copy_from_unmanaged_fixed(nint source, int startIndex, System.Array destination, int length, void* fixed_destination_element);
                static /*0x10e76f0*/ void Copy(nint source, byte[] destination, int startIndex, int length);
                static /*0x10e77e4*/ void Copy(nint source, char[] destination, int startIndex, int length);
                static /*0x10e78d8*/ void FreeBSTR(nint ptr);
                static /*0x10e78dc*/ void FreeHGlobal(nint hglobal);
                static /*0x10e78e0*/ void ClearAnsi(nint ptr);
                static /*0x10e79bc*/ void ClearUnicode(nint ptr);
                static /*0x10e7ae0*/ void ZeroFreeGlobalAllocAnsi(nint s);
                static /*0x10e7b3c*/ void ZeroFreeGlobalAllocUnicode(nint s);
                static /*0x10e7b98*/ int GetHRForException(System.Exception e);
                static /*0x10e7ba4*/ bool IsComObject(object o);
                static /*0x10e7bac*/ int GetLastWin32Error();
                static /*0x10e7bb0*/ string PtrToStringAnsi(nint ptr);
                static /*0x10e7bb4*/ string PtrToStringUni(nint ptr);
                static /*0x10e7bb8*/ object PtrToStructure(nint ptr, System.Type structureType);
                static T PtrToStructure<T>(nint ptr);
                static /*0x10e79a0*/ byte ReadByte(nint ptr, int ofs);
                static /*0x10e7a98*/ short ReadInt16(nint ptr, int ofs);
                static /*0x10e7bbc*/ nint StringToHGlobalAnsi(char* s, int length);
                static /*0x10e7bc0*/ nint StringToHGlobalAnsi(string s);
                static /*0x10e7c34*/ nint SecureStringGlobalAllocator(int len);
                static /*0x10e7c88*/ nint SecureStringToUnicode(System.Security.SecureString s, System.Runtime.InteropServices.Marshal.SecureStringAllocator allocator);
                static /*0x10e7f1c*/ nint SecureStringToGlobalAllocUnicode(System.Security.SecureString s);
                static /*0x10e80d0*/ void StructureToPtr(object structure, nint ptr, bool fDeleteOld);
                static void StructureToPtr<T>(T structure, nint ptr, bool fDeleteOld);
                static /*0x10e80d8*/ nint UnsafeAddrOfPinnedArrayElement(System.Array arr, int index);
                static nint UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
                static /*0x10e797c*/ void WriteByte(nint ptr, int ofs, byte val);
                static /*0x10e7a4c*/ void WriteInt16(nint ptr, int ofs, short val);
                static /*0x10e80dc*/ nint GetFunctionPointerForDelegateInternal(System.Delegate d);
                static nint GetFunctionPointerForDelegate<TDelegate>(TDelegate d);
                static /*0x10e80e0*/ System.Runtime.InteropServices.ICustomMarshaler GetCustomMarshalerInstance(System.Type type, string cookie);

                class SecureStringAllocator : System.MulticastDelegate
                {
                    /*0x10e800c*/ SecureStringAllocator(object object, nint method);
                    /*0x10e8aac*/ nint Invoke(int len);
                }

                class MarshalerInstanceKeyComparer : System.Collections.Generic.IEqualityComparer<System.ValueTuple<System.Type, string>>
                {
                    /*0x10e8b88*/ MarshalerInstanceKeyComparer();
                    /*0x10e8ac0*/ bool Equals(System.ValueTuple<System.Type, string> lhs, System.ValueTuple<System.Type, string> rhs);
                    /*0x10e8b34*/ int GetHashCode(System.ValueTuple<System.Type, string> key);
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.InteropServices.Marshal.<> <>9;
                    static /*0x8*/ System.Func<System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler>> <>9__201_0;

                    static /*0x10e8b90*/ <>c();
                    /*0x10e8bf4*/ <>c();
                    /*0x10e8bfc*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> <GetCustomMarshalerInstance>b__201_0();
                }
            }

            class MarshalAsAttribute : System.Attribute
            {
                /*0x10*/ string MarshalCookie;
                /*0x18*/ string MarshalType;
                /*0x20*/ System.Type MarshalTypeRef;
                /*0x28*/ System.Type SafeArrayUserDefinedSubType;
                /*0x30*/ System.Runtime.InteropServices.UnmanagedType utype;
                /*0x34*/ System.Runtime.InteropServices.UnmanagedType ArraySubType;
                /*0x38*/ System.Runtime.InteropServices.VarEnum SafeArraySubType;
                /*0x3c*/ int SizeConst;
                /*0x40*/ int IidParameterIndex;
                /*0x44*/ short SizeParamIndex;

                /*0x10e8c9c*/ MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType unmanagedType);
                /*0x10e8cc4*/ System.Runtime.InteropServices.UnmanagedType get_Value();
                /*0x10e8ccc*/ System.Runtime.InteropServices.MarshalAsAttribute Copy();
            }

            interface _Activator
            {
            }

            interface _Assembly
            {
            }

            interface _AssemblyName
            {
            }

            interface _Module
            {
            }

            interface _ParameterInfo
            {
            }
        }

        namespace ExceptionServices
        {
            class FirstChanceExceptionEventArgs : System.EventArgs
            {
            }

            class HandleProcessCorruptedStateExceptionsAttribute : System.Attribute
            {
                /*0x10e8d30*/ HandleProcessCorruptedStateExceptionsAttribute();
            }

            class ExceptionDispatchInfo
            {
                /*0x10*/ System.Exception m_Exception;
                /*0x18*/ object m_stackTrace;

                static /*0x10e88f4*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(System.Exception source);
                static /*0x10e8e70*/ void Throw(System.Exception source);
                /*0x10e8d38*/ ExceptionDispatchInfo(System.Exception exception);
                /*0x10e8e60*/ object get_BinaryStackTraceArray();
                /*0x10e8e68*/ System.Exception get_SourceException();
                /*0x10e89c0*/ void Throw();
            }
        }

        namespace ConstrainedExecution
        {
            enum Cer
            {
                None = 0,
                MayFail = 1,
                Success = 2,
            }

            enum Consistency
            {
                MayCorruptProcess = 0,
                MayCorruptAppDomain = 1,
                MayCorruptInstance = 2,
                WillNotCorruptState = 3,
            }

            class ReliabilityContractAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.ConstrainedExecution.Consistency <ConsistencyGuarantee>k__BackingField;
                /*0x14*/ System.Runtime.ConstrainedExecution.Cer <Cer>k__BackingField;

                /*0x10e8e88*/ ReliabilityContractAttribute(System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);
            }

            class PrePrepareMethodAttribute : System.Attribute
            {
                /*0x10e8eb4*/ PrePrepareMethodAttribute();
            }

            class CriticalFinalizerObject
            {
                /*0x10e6a54*/ CriticalFinalizerObject();
                /*0x10e8ebc*/ void Finalize();
            }
        }

        namespace CompilerServices
        {
            class AsyncMethodBuilderAttribute : System.Attribute
            {
                /*0x10*/ System.Type <BuilderType>k__BackingField;

                /*0x10e8ec4*/ AsyncMethodBuilderAttribute(System.Type builderType);
            }

            class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x10e8eec*/ AsyncStateMachineAttribute(System.Type stateMachineType);
            }

            struct AsyncValueTaskMethodBuilder
            {
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder _methodBuilder;
                /*0x28*/ bool _haveResult;
                /*0x29*/ bool _useBuilder;
            }

            struct AsyncValueTaskMethodBuilder<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> _methodBuilder;
                /*0x0*/ TResult _result;
                /*0x0*/ bool _haveResult;
                /*0x0*/ bool _useBuilder;

                static System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<TResult> Create();
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void SetResult(TResult result);
                void SetException(System.Exception exception);
                System.Threading.Tasks.ValueTask<TResult> get_Task();
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
            }

            class CallerMemberNameAttribute : System.Attribute
            {
                /*0x10e8f3c*/ CallerMemberNameAttribute();
            }

            class CompilerGeneratedAttribute : System.Attribute
            {
                /*0x10e8f44*/ CompilerGeneratedAttribute();
            }

            struct ConfiguredValueTaskAwaitable
            {
                /*0x10*/ System.Threading.Tasks.ValueTask _value;

                /*0x10e8f4c*/ ConfiguredValueTaskAwaitable(System.Threading.Tasks.ValueTask value);
                /*0x10e8f54*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter GetAwaiter();

                struct ConfiguredValueTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.ValueTask _value;

                    /*0x10e8f60*/ ConfiguredValueTaskAwaiter(System.Threading.Tasks.ValueTask value);
                    /*0x10e8f68*/ bool get_IsCompleted();
                    /*0x10e9070*/ void GetResult();
                    /*0x10e9170*/ void UnsafeOnCompleted(System.Action continuation);
                }
            }

            struct ConfiguredValueTaskAwaitable<TResult>
            {
                /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                ConfiguredValueTaskAwaitable(System.Threading.Tasks.ValueTask<TResult> value);
                System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredValueTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                    ConfiguredValueTaskAwaiter(System.Threading.Tasks.ValueTask<TResult> value);
                    bool get_IsCompleted();
                    TResult GetResult();
                    void UnsafeOnCompleted(System.Action continuation);
                }
            }

            class CustomConstantAttribute : System.Attribute
            {
                /*0x10e9330*/ CustomConstantAttribute();
                object get_Value();
            }

            class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute
            {
                /*0x10*/ System.DateTime _date;

                /*0x10e9338*/ object get_Value();
            }

            class DecimalConstantAttribute : System.Attribute
            {
                /*0x10*/ decimal _dec;

                /*0x10e9394*/ DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low);
                /*0x10e9430*/ decimal get_Value();
            }

            class ExtensionAttribute : System.Attribute
            {
                /*0x10e943c*/ ExtensionAttribute();
            }

            class FixedBufferAttribute : System.Attribute
            {
                /*0x10*/ System.Type <ElementType>k__BackingField;
                /*0x18*/ int <Length>k__BackingField;

                /*0x10e9444*/ FixedBufferAttribute(System.Type elementType, int length);
                /*0x10e9474*/ System.Type get_ElementType();
                /*0x10e947c*/ int get_Length();
            }

            class FormattableStringFactory
            {
                static /*0x10e9484*/ System.FormattableString Create(string format, object[] arguments);

                class ConcreteFormattableString : System.FormattableString
                {
                    /*0x10*/ string _format;
                    /*0x18*/ object[] _arguments;

                    /*0x10e9564*/ ConcreteFormattableString(string format, object[] arguments);
                    /*0x10e9590*/ string get_Format();
                    /*0x10e9598*/ object[] GetArguments();
                    /*0x10e95a0*/ int get_ArgumentCount();
                    /*0x10e95bc*/ object GetArgument(int index);
                    /*0x10e95ec*/ string ToString(System.IFormatProvider formatProvider);
                }
            }

            interface IAsyncStateMachine
            {
                void MoveNext();
                void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            interface INotifyCompletion
            {
            }

            interface ICriticalNotifyCompletion : System.Runtime.CompilerServices.INotifyCompletion
            {
                void UnsafeOnCompleted(System.Action continuation);
            }

            interface ITuple
            {
                int get_Length();
            }

            class IntrinsicAttribute : System.Attribute
            {
                /*0x10e9600*/ IntrinsicAttribute();
            }

            class IsByRefLikeAttribute : System.Attribute
            {
                /*0x10e9608*/ IsByRefLikeAttribute();
            }

            class IsReadOnlyAttribute : System.Attribute
            {
                /*0x10e9610*/ IsReadOnlyAttribute();
            }

            class IsVolatile
            {
            }

            class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x10e9618*/ IteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class RuntimeCompatibilityAttribute : System.Attribute
            {
                /*0x10*/ bool <WrapNonExceptionThrows>k__BackingField;

                /*0x10e9640*/ RuntimeCompatibilityAttribute();
                /*0x10e9648*/ void set_WrapNonExceptionThrows(bool value);
            }

            class RuntimeFeature
            {
                static /*0x10e9654*/ bool get_IsDynamicCodeSupported();
            }

            class RuntimeWrappedException : System.Exception
            {
                /*0x90*/ object _wrappedException;

                /*0x10e965c*/ RuntimeWrappedException(object thrownObject);
                /*0x10e96ec*/ RuntimeWrappedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x10e98d0*/ RuntimeWrappedException();
                /*0x10e97ec*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x10e98c8*/ object get_WrappedException();
            }

            class StateMachineAttribute : System.Attribute
            {
                /*0x10*/ System.Type <StateMachineType>k__BackingField;

                /*0x10e8f14*/ StateMachineAttribute(System.Type stateMachineType);
                /*0x10e9908*/ System.Type get_StateMachineType();
            }

            class StringFreezingAttribute : System.Attribute
            {
                /*0x10e9910*/ StringFreezingAttribute();
            }

            class TupleElementNamesAttribute : System.Attribute
            {
                /*0x10*/ string[] _transformNames;

                /*0x10e9918*/ TupleElementNamesAttribute(string[] transformNames);
            }

            class TypeForwardedFromAttribute : System.Attribute
            {
                /*0x10*/ string <AssemblyFullName>k__BackingField;

                /*0x10e9990*/ TypeForwardedFromAttribute(string assemblyFullName);
                /*0x10e9a14*/ string get_AssemblyFullName();
            }

            class UnsafeValueTypeAttribute : System.Attribute
            {
                /*0x10e9a1c*/ UnsafeValueTypeAttribute();
            }

            struct ValueTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                static /*0x0*/ System.Action<object> s_invokeActionDelegate;
                /*0x10*/ System.Threading.Tasks.ValueTask _value;

                static /*0x10e9dd0*/ ValueTaskAwaiter();
                /*0x10e9a24*/ ValueTaskAwaiter(System.Threading.Tasks.ValueTask value);
                /*0x10e9a2c*/ bool get_IsCompleted();
                /*0x10e9b34*/ void GetResult();
                /*0x10e9c34*/ void UnsafeOnCompleted(System.Action continuation);

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.ValueTaskAwaiter.<> <>9;

                    static /*0x10e9e94*/ <>c();
                    /*0x10e9ef8*/ <>c();
                    /*0x10e9f00*/ void <.cctor>b__9_0(object state);
                }
            }

            struct ValueTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.ValueTask<TResult> _value;

                ValueTaskAwaiter(System.Threading.Tasks.ValueTask<TResult> value);
                bool get_IsCompleted();
                TResult GetResult();
                void UnsafeOnCompleted(System.Action continuation);
            }

            struct TaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;

                static /*0x10ea054*/ void ValidateEnd(System.Threading.Tasks.Task task);
                static /*0x10ea0a0*/ void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task);
                static /*0x10ea100*/ void ThrowForNonSuccess(System.Threading.Tasks.Task task);
                static /*0x10e9f98*/ void OnCompletedInternal(System.Threading.Tasks.Task task, System.Action continuation, bool continueOnCapturedContext, bool flowExecutionContext);
                static /*0x10ea254*/ System.Action OutputWaitEtwEvents(System.Threading.Tasks.Task task, System.Action continuation);
                /*0x10e9f74*/ TaskAwaiter(System.Threading.Tasks.Task task);
                /*0x10e9f7c*/ bool get_IsCompleted();
                /*0x10e9dc0*/ void UnsafeOnCompleted(System.Action continuation);
                /*0x10ea04c*/ void GetResult();

                class <>c__DisplayClass11_0
                {
                    /*0x10*/ System.Threading.Tasks.Task task;
                    /*0x18*/ System.Action continuation;

                    /*0x10ea430*/ <>c__DisplayClass11_0();
                    /*0x10ea438*/ void <OutputWaitEtwEvents>b__0();
                }
            }

            struct TaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                TaskAwaiter(System.Threading.Tasks.Task<TResult> task);
                bool get_IsCompleted();
                void UnsafeOnCompleted(System.Action continuation);
                TResult GetResult();
            }

            struct ConfiguredTaskAwaitable
            {
                /*0x10*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter m_configuredTaskAwaiter;

                /*0x10ea5ac*/ ConfiguredTaskAwaitable(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                /*0x10ea5d4*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter();

                struct ConfiguredTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.Task m_task;
                    /*0x18*/ bool m_continueOnCapturedContext;

                    /*0x10ea5c4*/ ConfiguredTaskAwaiter(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                    /*0x10ea5e0*/ bool get_IsCompleted();
                    /*0x10ea5fc*/ void OnCompleted(System.Action continuation);
                    /*0x10e931c*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x10ea610*/ void GetResult();
                }
            }

            struct ConfiguredTaskAwaitable<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter;

                ConfiguredTaskAwaitable(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;
                    /*0x0*/ bool m_continueOnCapturedContext;

                    ConfiguredTaskAwaiter(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                    bool get_IsCompleted();
                    void UnsafeOnCompleted(System.Action continuation);
                    TResult GetResult();
                }
            }

            class ReflectionBlockedAttribute : System.Attribute
            {
                /*0x10ea618*/ ReflectionBlockedAttribute();
            }

            struct AsyncVoidMethodBuilder
            {
                /*0x10*/ System.Threading.SynchronizationContext m_synchronizationContext;
                /*0x18*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x28*/ System.Threading.Tasks.Task m_task;

                static /*0x10ea620*/ System.Runtime.CompilerServices.AsyncVoidMethodBuilder Create();
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x10ea660*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x10ea730*/ void SetResult();
                /*0x10ea89c*/ void SetException(System.Exception exception);
                /*0x10ea7f8*/ void NotifySynchronizationContextOfCompletion();
                /*0x10ea78c*/ System.Threading.Tasks.Task get_Task();
            }

            struct AsyncTaskMethodBuilder
            {
                static /*0x0*/ System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult> s_cachedCompleted;
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult> m_builder;

                static /*0x10eae38*/ AsyncTaskMethodBuilder();
                static /*0x10eacbc*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder Create();
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x10eacc8*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x10ead20*/ System.Threading.Tasks.Task get_Task();
                /*0x10ead68*/ void SetResult();
                /*0x10eade0*/ void SetException(System.Exception exception);
            }

            struct AsyncTaskMethodBuilder<TResult>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_defaultResultTask;
                /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                static AsyncTaskMethodBuilder();
                static System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> Create();
                static System.Threading.Tasks.Task<TResult> GetTaskForResult(TResult result);
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                System.Threading.Tasks.Task<TResult> get_Task();
                void SetResult(TResult result);
                void SetResult(System.Threading.Tasks.Task<TResult> completedTask);
                void SetException(System.Exception exception);
            }

            class AsyncTaskCache
            {
                static /*0x0*/ System.Threading.Tasks.Task<bool> TrueTask;
                static /*0x8*/ System.Threading.Tasks.Task<bool> FalseTask;
                static /*0x10*/ System.Threading.Tasks.Task<int> Int32Tasks;

                static /*0x10eafb8*/ AsyncTaskCache();
                static /*0x10eaeb0*/ System.Threading.Tasks.Task<int> CreateInt32Tasks();
                static System.Threading.Tasks.Task<TResult> CreateCacheableTask<TResult>(TResult result);
            }

            struct AsyncMethodBuilderCore
            {
                /*0x10*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;
                /*0x18*/ System.Action m_defaultContextAction;

                static /*0x10ea9d0*/ void ThrowAsync(System.Exception exception, System.Threading.SynchronizationContext targetContext);
                static /*0x10eb308*/ System.Action CreateContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                static /*0x10eb5b4*/ System.Threading.Tasks.Task TryGetContinuationTask(System.Action action);
                /*0x10ea668*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x10eb048*/ System.Action GetCompletionAction(System.Threading.Tasks.Task taskForTracing, ref System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize);
                /*0x10eb240*/ System.Action OutputAsyncCausalityEvents(System.Threading.Tasks.Task innerTask, System.Action continuation);
                /*0x10eb3c8*/ void PostBoxInitialization(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine, System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runner, System.Threading.Tasks.Task builtTask);

                class MoveNextRunner
                {
                    static /*0x0*/ System.Threading.ContextCallback s_invokeMoveNext;
                    /*0x10*/ System.Threading.ExecutionContext m_context;
                    /*0x18*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;

                    static /*0x10eb854*/ void InvokeMoveNext(object stateMachine);
                    /*0x10eb214*/ MoveNextRunner(System.Threading.ExecutionContext context, System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                    /*0x10eb648*/ void Run();
                }

                class ContinuationWrapper
                {
                    /*0x10*/ System.Action m_continuation;
                    /*0x18*/ System.Action m_invokeAction;
                    /*0x20*/ System.Threading.Tasks.Task m_innerTask;

                    /*0x10eb568*/ ContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                    /*0x10eb934*/ void Invoke();
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ System.Threading.Tasks.Task innerTask;
                    /*0x18*/ System.Action continuation;

                    /*0x10eb300*/ <>c__DisplayClass5_0();
                    /*0x10eb958*/ void <OutputAsyncCausalityEvents>b__0();
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore.<> <>9;
                    static /*0x8*/ System.Threading.SendOrPostCallback <>9__7_0;
                    static /*0x10*/ System.Threading.WaitCallback <>9__7_1;

                    static /*0x10eb9b4*/ <>c();
                    /*0x10eba18*/ <>c();
                    /*0x10eba20*/ void <ThrowAsync>b__7_0(object state);
                    /*0x10eba74*/ void <ThrowAsync>b__7_1(object state);
                }
            }

            enum LoadHint
            {
                Default = 0,
                Always = 1,
                Sometimes = 2,
            }

            class DefaultDependencyAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0x10ebac8*/ DefaultDependencyAttribute(System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            enum CompilationRelaxations
            {
                NoStringInterning = 8,
            }

            class CompilationRelaxationsAttribute : System.Attribute
            {
                /*0x10*/ int m_relaxations;

                /*0x10ebaf0*/ CompilationRelaxationsAttribute(int relaxations);
                /*0x10ebb18*/ CompilationRelaxationsAttribute(System.Runtime.CompilerServices.CompilationRelaxations relaxations);
                /*0x10ebb40*/ int get_CompilationRelaxations();
            }

            class InternalsVisibleToAttribute : System.Attribute
            {
                /*0x10*/ string _assemblyName;
                /*0x18*/ bool _allInternalsVisible;

                /*0x10ebb48*/ InternalsVisibleToAttribute(string assemblyName);
                /*0x10ebb78*/ void set_AllInternalsVisible(bool value);
            }

            class FriendAccessAllowedAttribute : System.Attribute
            {
                /*0x10ebb84*/ FriendAccessAllowedAttribute();
            }

            class TypeDependencyAttribute : System.Attribute
            {
                /*0x10*/ string typeName;

                /*0x10ebb8c*/ TypeDependencyAttribute(string typeName);
            }

            class JitHelpers
            {
                static T UnsafeCast<T>(object o);
                static int UnsafeEnumCast<T>(T val);
                static long UnsafeEnumCastLong<T>(T val);
            }

            struct Ephemeron
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
            }

            class ConditionalWeakTable<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                static int INITIAL_SIZE = 13;
                static float LOAD_FACTOR = 0.699999988079071;
                static float COMPACT_FACTOR = 0.5;
                static float EXPAND_FACTOR = 1.100000023841858;
                /*0x0*/ System.Runtime.CompilerServices.Ephemeron[] data;
                /*0x0*/ object _lock;
                /*0x0*/ int size;

                ConditionalWeakTable();
                void Finalize();
                void RehashWithoutResize();
                void RecomputeSize();
                void Rehash();
                void Add(TKey key, TValue value);
                bool Remove(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
                TValue GetValue(TKey key, System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<TKey, TValue> createValueCallback);
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class CreateValueCallback<TKey, TValue> : System.MulticastDelegate
                {
                    CreateValueCallback(object object, nint method);
                    TValue Invoke(TKey key);
                }

                class Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> _table;
                    /*0x0*/ int _currentIndex;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;

                    Enumerator(System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> table);
                    void Finalize();
                    void Dispose();
                    bool MoveNext();
                    System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    object System.Collections.IEnumerator.get_Current();
                    void Reset();
                }
            }

            class RuntimeHelpers
            {
                static /*0x10ebc04*/ void InitializeArray(System.Array array, nint fldHandle);
                static /*0x10ebc08*/ void InitializeArray(System.Array array, System.RuntimeFieldHandle fldHandle);
                static /*0x10e7c30*/ int get_OffsetToStringData();
                static /*0x10ebcb0*/ int GetHashCode(object o);
                static /*0x10ebcb8*/ object GetObjectValue(object obj);
                static /*0x10ebcbc*/ void RunClassConstructor(nint type);
                static /*0x10ebcc0*/ void RunClassConstructor(System.RuntimeTypeHandle type);
                static /*0x10ebd80*/ bool SufficientExecutionStack();
                static /*0x10ebd84*/ bool TryEnsureSufficientExecutionStack();
                static /*0x10ebd88*/ void PrepareConstrainedRegions();
                static bool IsReferenceOrContainsReferences<T>();
            }

            class Unsafe
            {
                static ref T Add<T>(ref T source, int elementOffset);
                static ref T Add<T>(ref T source, nint elementOffset);
                static void* Add<T>(void* source, int elementOffset);
                static ref T AddByteOffset<T>(ref T source, nint byteOffset);
                static bool AreSame<T>(ref T left, ref T right);
                static T As<T>(object o);
                static ref TTo As<TFrom, TTo>(ref TFrom source);
                static void* AsPointer<T>(ref T value);
                static ref T AsRef<T>(void* source);
                static ref T AsRef<T>(ref T source);
                static /*0x10ebd8c*/ void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount);
                static T Read<T>(void* source);
                static T ReadUnaligned<T>(ref byte source);
                static int SizeOf<T>();
                static void WriteUnaligned<T>(ref byte destination, T value);
                static bool IsAddressLessThan<T>(ref T left, ref T right);
                static ref T AddByteOffset<T>(ref T source, ulong byteOffset);
            }
        }
    }

    namespace Resources
    {
        interface IResourceReader : System.Collections.IEnumerable, System.IDisposable
        {
            void Close();
            System.Collections.IDictionaryEnumerator GetEnumerator();
        }

        class MissingManifestResourceException : System.SystemException
        {
            /*0x10ebd94*/ MissingManifestResourceException();
            /*0x10ebdf0*/ MissingManifestResourceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class NeutralResourcesLanguageAttribute : System.Attribute
        {
            /*0x10*/ string <CultureName>k__BackingField;
            /*0x18*/ System.Resources.UltimateResourceFallbackLocation <Location>k__BackingField;

            /*0x10ebdf8*/ NeutralResourcesLanguageAttribute(string cultureName);
            /*0x10ebe74*/ string get_CultureName();
            /*0x10ebe7c*/ System.Resources.UltimateResourceFallbackLocation get_Location();
        }

        enum ResourceTypeCode
        {
            Null = 0,
            String = 1,
            Boolean = 2,
            Char = 3,
            Byte = 4,
            SByte = 5,
            Int16 = 6,
            UInt16 = 7,
            Int32 = 8,
            UInt32 = 9,
            Int64 = 10,
            UInt64 = 11,
            Single = 12,
            Double = 13,
            Decimal = 14,
            DateTime = 15,
            TimeSpan = 16,
            LastPrimitive = 16,
            ByteArray = 32,
            Stream = 33,
            StartOfUserTypes = 64,
        }

        class RuntimeResourceSet : System.Resources.ResourceSet, System.Collections.IEnumerable
        {
            static int Version = 2;
            /*0x28*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x30*/ System.Resources.ResourceReader _defaultReader;
            /*0x38*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _caseInsensitiveTable;
            /*0x40*/ bool _haveReadFromReader;

            /*0x10ebe84*/ RuntimeResourceSet(string fileName);
            /*0x10ebfc4*/ RuntimeResourceSet(System.IO.Stream stream);
            /*0x10ec0c4*/ void Dispose(bool disposing);
            /*0x10ec1e8*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x10ec2ec*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x10ec1ec*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x10ec2f0*/ string GetString(string key);
            /*0x10ecc74*/ string GetString(string key, bool ignoreCase);
            /*0x10eccf0*/ object GetObject(string key);
            /*0x10eccfc*/ object GetObject(string key, bool ignoreCase);
            /*0x10ec360*/ object GetObject(string key, bool ignoreCase, bool isString);
            /*0x10ecd08*/ object ResolveResourceLocator(System.Resources.ResourceLocator resLocation, string key, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> copyOfCache, bool keyInWrongCase);
        }

        class SatelliteContractVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0x164f52c*/ SatelliteContractVersionAttribute(string version);
        }

        enum UltimateResourceFallbackLocation
        {
            MainAssembly = 0,
            Satellite = 1,
        }

        class FastResourceComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
        {
            static /*0x0*/ System.Resources.FastResourceComparer Default;

            static /*0x164fa14*/ FastResourceComparer();
            static /*0x164f630*/ int HashFunction(string key);
            static /*0x164f848*/ int CompareOrdinal(string a, byte[] bytes, int bCharLength);
            static /*0x164f904*/ int CompareOrdinal(byte[] bytes, int aCharLength, string b);
            static /*0x164f978*/ int CompareOrdinal(byte* a, int byteLen, string b);
            /*0x164fa0c*/ FastResourceComparer();
            /*0x164f5a4*/ int GetHashCode(object key);
            /*0x164f69c*/ int GetHashCode(string key);
            /*0x164f6f0*/ int Compare(object a, object b);
            /*0x164f78c*/ int Compare(string a, string b);
            /*0x164f79c*/ bool Equals(string a, string b);
            /*0x164f7ac*/ bool Equals(object a, object b);
        }

        class FileBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            /*0x164fa78*/ FileBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
        }

        interface IResourceGroveler
        {
        }

        class ManifestBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            static /*0x164fac8*/ System.Globalization.CultureInfo GetNeutralResourcesLanguage(System.Reflection.Assembly a, ref System.Resources.UltimateResourceFallbackLocation fallbackLocation);
            static /*0x164fde8*/ bool GetNeutralResourcesLanguageAttribute(System.Reflection.Assembly assembly, ref string cultureName, ref short fallbackLocation);
            /*0x164faa0*/ ManifestBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
        }

        class ResourceManager
        {
            static /*0x0*/ int MagicNumber;
            static /*0x4*/ int HeaderVersionNumber;
            static /*0x8*/ System.Type _minResourceSet;
            static /*0x10*/ string ResReaderTypeName;
            static /*0x18*/ string ResSetTypeName;
            static /*0x20*/ string MscorlibName;
            static /*0x28*/ int DEBUG;
            /*0x10*/ System.Collections.Hashtable ResourceSets;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> _resourceSets;
            /*0x20*/ System.Reflection.Assembly MainAssembly;
            /*0x28*/ System.Globalization.CultureInfo _neutralResourcesCulture;
            /*0x30*/ System.Resources.ResourceManager.CultureNameResourceSetPair _lastUsedResourceCache;
            /*0x38*/ bool UseManifest;
            /*0x39*/ bool UseSatelliteAssem;
            /*0x3c*/ System.Resources.UltimateResourceFallbackLocation _fallbackLoc;
            /*0x40*/ System.Reflection.Assembly _callingAssembly;
            /*0x48*/ System.Reflection.RuntimeAssembly m_callingAssembly;
            /*0x50*/ System.Resources.IResourceGroveler resourceGroveler;

            static /*0x165093c*/ ResourceManager();
            static /*0x1650368*/ bool CompareNames(string asmTypeName1, string typeName2, System.Reflection.AssemblyName asmName2);
            /*0x164ffc8*/ ResourceManager();
            /*0x164feac*/ void Init();
            /*0x165011c*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x165012c*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x16502f8*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);

            class CultureNameResourceSetPair
            {
                /*0x165009c*/ CultureNameResourceSetPair();
            }

            class ResourceManagerMediator
            {
                /*0x10*/ System.Resources.ResourceManager _rm;

                /*0x16500a4*/ ResourceManagerMediator(System.Resources.ResourceManager rm);
            }
        }

        struct ResourceLocator
        {
            /*0x10*/ object _value;
            /*0x18*/ int _dataPos;

            static /*0x1650ad0*/ bool CanCache(System.Resources.ResourceTypeCode value);
            /*0x1650aac*/ ResourceLocator(int dataPos, object value);
            /*0x1650ab8*/ int get_DataPosition();
            /*0x1650ac0*/ object get_Value();
            /*0x1650ac8*/ void set_Value(object value);
        }

        class ResourceReader : System.Resources.IResourceReader, System.Collections.IEnumerable, System.IDisposable
        {
            /*0x10*/ System.IO.BinaryReader _store;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x20*/ long _nameSectionOffset;
            /*0x28*/ long _dataSectionOffset;
            /*0x30*/ int[] _nameHashes;
            /*0x38*/ int* _nameHashesPtr;
            /*0x40*/ int[] _namePositions;
            /*0x48*/ int* _namePositionsPtr;
            /*0x50*/ System.RuntimeType[] _typeTable;
            /*0x58*/ int[] _typeNamePositions;
            /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _objFormatter;
            /*0x68*/ int _numResources;
            /*0x70*/ System.IO.UnmanagedMemoryStream _ums;
            /*0x78*/ int _version;

            static /*0x1650df4*/ int ReadUnalignedI4(int* p);
            /*0x1650adc*/ ResourceReader(System.IO.Stream stream, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> resCache);
            /*0x1650d3c*/ void Close();
            /*0x1650db8*/ void Dispose();
            /*0x1650d78*/ void Dispose(bool disposing);
            /*0x1650dfc*/ void SkipString();
            /*0x1650eb4*/ int GetNameHash(int index);
            /*0x1650ef8*/ int GetNamePosition(int index);
            /*0x1651018*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x165101c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x1651120*/ System.Resources.ResourceReader.ResourceEnumerator GetEnumeratorInternal();
            /*0x1651190*/ int FindPosForResource(string name);
            /*0x1651564*/ bool CompareStringEqualsName(string name);
            /*0x1651770*/ string AllocateStringForNameIndex(int index, ref int dataOffset);
            /*0x165205c*/ object GetValueForNameIndex(int index);
            /*0x1652504*/ string LoadString(int pos);
            /*0x1652b78*/ object LoadObject(int pos);
            /*0x1652ba4*/ object LoadObject(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x1652304*/ object LoadObjectV1(int pos);
            /*0x1652c3c*/ object _LoadObjectV1(int pos);
            /*0x1652404*/ object LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x165364c*/ object _LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x1653474*/ object DeserializeObject(int typeIndex);
            /*0x1650bc8*/ void ReadResources();
            /*0x1653d84*/ void _ReadResources();
            /*0x16527b4*/ System.RuntimeType FindType(int typeIndex);

            class ResourceEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Resources.ResourceReader _reader;
                /*0x18*/ bool _currentIsValid;
                /*0x1c*/ int _currentName;
                /*0x20*/ int _dataPosition;

                /*0x16510ec*/ ResourceEnumerator(System.Resources.ResourceReader reader);
                /*0x165445c*/ bool MoveNext();
                /*0x16544b8*/ object get_Key();
                /*0x1654570*/ object get_Current();
                /*0x1654918*/ int get_DataPosition();
                /*0x16545d4*/ System.Collections.DictionaryEntry get_Entry();
                /*0x1654920*/ object get_Value();
                /*0x16549d0*/ void Reset();
            }
        }

        class ResourceSet : System.IDisposable, System.Collections.IEnumerable
        {
            /*0x10*/ System.Resources.IResourceReader Reader;
            /*0x18*/ System.Collections.Hashtable Table;
            /*0x20*/ System.Collections.Hashtable _caseInsensitiveTable;

            /*0x1654a5c*/ ResourceSet();
            /*0x1654ad8*/ ResourceSet(bool junk);
            /*0x1654a78*/ void CommonInit();
            /*0x1654ae0*/ void Dispose(bool disposing);
            /*0x1654b94*/ void Dispose();
            /*0x1654ba4*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x1654c2c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x1654ba8*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x1654c30*/ string GetString(string name);
            /*0x1654e6c*/ string GetString(string name, bool ignoreCase);
            /*0x1655340*/ object GetObject(string name);
            /*0x1655344*/ object GetObject(string name, bool ignoreCase);
            /*0x1654d98*/ object GetObjectInternal(string name);
            /*0x1655070*/ object GetCaseInsensitiveObjectInternal(string name);
        }
    }

    namespace Reflection
    {
        class AmbiguousMatchException : System.SystemException
        {
            /*0x1655384*/ AmbiguousMatchException();
            /*0x16553e0*/ AmbiguousMatchException(string message);
            /*0x1655404*/ AmbiguousMatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class AssemblyCompanyAttribute : System.Attribute
        {
            /*0x10*/ string <Company>k__BackingField;

            /*0x165540c*/ AssemblyCompanyAttribute(string company);
        }

        class AssemblyConfigurationAttribute : System.Attribute
        {
            /*0x10*/ string <Configuration>k__BackingField;

            /*0x1655434*/ AssemblyConfigurationAttribute(string configuration);
        }

        enum AssemblyContentType
        {
            Default = 0,
            WindowsRuntime = 1,
        }

        class AssemblyCopyrightAttribute : System.Attribute
        {
            /*0x10*/ string <Copyright>k__BackingField;

            /*0x165545c*/ AssemblyCopyrightAttribute(string copyright);
        }

        class AssemblyDefaultAliasAttribute : System.Attribute
        {
            /*0x10*/ string <DefaultAlias>k__BackingField;

            /*0x1655484*/ AssemblyDefaultAliasAttribute(string defaultAlias);
        }

        class AssemblyDelaySignAttribute : System.Attribute
        {
            /*0x10*/ bool <DelaySign>k__BackingField;

            /*0x16554ac*/ AssemblyDelaySignAttribute(bool delaySign);
        }

        class AssemblyDescriptionAttribute : System.Attribute
        {
            /*0x10*/ string <Description>k__BackingField;

            /*0x16554d4*/ AssemblyDescriptionAttribute(string description);
        }

        class AssemblyFileVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0x16554fc*/ AssemblyFileVersionAttribute(string version);
        }

        class AssemblyInformationalVersionAttribute : System.Attribute
        {
            /*0x10*/ string <InformationalVersion>k__BackingField;

            /*0x1655574*/ AssemblyInformationalVersionAttribute(string informationalVersion);
        }

        class AssemblyKeyFileAttribute : System.Attribute
        {
            /*0x10*/ string <KeyFile>k__BackingField;

            /*0x165559c*/ AssemblyKeyFileAttribute(string keyFile);
        }

        class AssemblyMetadataAttribute : System.Attribute
        {
            /*0x10*/ string <Key>k__BackingField;
            /*0x18*/ string <Value>k__BackingField;

            /*0x16555c4*/ AssemblyMetadataAttribute(string key, string value);
        }

        enum AssemblyNameFlags
        {
            None = 0,
            PublicKey = 1,
            EnableJITcompileOptimizer = 16384,
            EnableJITcompileTracking = 32768,
            Retargetable = 256,
        }

        class AssemblyProductAttribute : System.Attribute
        {
            /*0x10*/ string <Product>k__BackingField;

            /*0x16555f0*/ AssemblyProductAttribute(string product);
        }

        class AssemblyTitleAttribute : System.Attribute
        {
            /*0x10*/ string <Title>k__BackingField;

            /*0x1655618*/ AssemblyTitleAttribute(string title);
        }

        class AssemblyTrademarkAttribute : System.Attribute
        {
            /*0x10*/ string <Trademark>k__BackingField;

            /*0x1655640*/ AssemblyTrademarkAttribute(string trademark);
        }

        class Binder
        {
            /*0x1655668*/ Binder();
            System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
            System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, ref object state);
            object ChangeType(object value, System.Type type, System.Globalization.CultureInfo culture);
            void ReorderArgumentArray(ref object[] args, object state);
            System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        }

        enum BindingFlags
        {
            Default = 0,
            IgnoreCase = 1,
            DeclaredOnly = 2,
            Instance = 4,
            Static = 8,
            Public = 16,
            NonPublic = 32,
            FlattenHierarchy = 64,
            InvokeMethod = 256,
            CreateInstance = 512,
            GetField = 1024,
            SetField = 2048,
            GetProperty = 4096,
            SetProperty = 8192,
            PutDispProperty = 16384,
            PutRefDispProperty = 32768,
            ExactBinding = 65536,
            SuppressChangeType = 131072,
            OptionalParamBinding = 262144,
            IgnoreReturn = 16777216,
            DoNotWrapExceptions = 33554432,
        }

        enum CallingConventions
        {
            Standard = 1,
            VarArgs = 2,
            Any = 3,
            HasThis = 32,
            ExplicitThis = 64,
        }

        class ConstructorInfo : System.Reflection.MethodBase
        {
            static /*0x0*/ string ConstructorName;
            static /*0x8*/ string TypeConstructorName;

            static /*0x1655788*/ ConstructorInfo();
            static /*0x16556c8*/ bool op_Equality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            static /*0x16556f4*/ bool op_Inequality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            /*0x1655670*/ ConstructorInfo();
            /*0x1655680*/ System.Reflection.MemberTypes get_MemberType();
            /*0x1655688*/ object Invoke(object[] parameters);
            object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x16556a8*/ bool Equals(object obj);
            /*0x16556b8*/ int GetHashCode();
        }

        class CustomAttributeFormatException : System.FormatException
        {
            /*0x1655814*/ CustomAttributeFormatException();
            /*0x1655874*/ CustomAttributeFormatException(string message);
            /*0x165589c*/ CustomAttributeFormatException(string message, System.Exception inner);
            /*0x16558c0*/ CustomAttributeFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class DefaultMemberAttribute : System.Attribute
        {
            /*0x10*/ string <MemberName>k__BackingField;

            /*0x16558c8*/ DefaultMemberAttribute(string memberName);
            /*0x16558f0*/ string get_MemberName();
        }

        enum EventAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            ReservedMask = 1024,
        }

        class EventInfo : System.Reflection.MemberInfo
        {
            /*0x10*/ System.Reflection.EventInfo.AddEventAdapter cached_add_event;

            static /*0x1655bf8*/ bool op_Equality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x1655c24*/ bool op_Inequality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x1655e24*/ System.Reflection.EventInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x1655e28*/ System.Reflection.EventInfo GetEventFromHandle(Mono.RuntimeEventHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x16558f8*/ EventInfo();
            /*0x1655908*/ System.Reflection.MemberTypes get_MemberType();
            /*0x1655910*/ System.Reflection.MethodInfo GetAddMethod();
            /*0x1655924*/ System.Reflection.MethodInfo GetRemoveMethod();
            System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x1655938*/ System.Type get_EventHandlerType();
            /*0x1655a60*/ void RemoveEventHandler(object target, System.Delegate handler);
            /*0x1655bd8*/ bool Equals(object obj);
            /*0x1655be8*/ int GetHashCode();
            /*0x1655c60*/ void AddEventHandler(object target, System.Delegate handler);

            class AddEventAdapter : System.MulticastDelegate
            {
                /*0x1655f10*/ AddEventAdapter(object object, nint method);
                /*0x1656040*/ void Invoke(object _this, System.Delegate dele);
            }
        }

        enum ExceptionHandlingClauseOptions
        {
            Clause = 0,
            Filter = 1,
            Finally = 2,
            Fault = 4,
        }

        enum FieldAttributes
        {
            FieldAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            InitOnly = 32,
            Literal = 64,
            NotSerialized = 128,
            SpecialName = 512,
            PinvokeImpl = 8192,
            RTSpecialName = 1024,
            HasFieldMarshal = 4096,
            HasDefault = 32768,
            HasFieldRVA = 256,
            ReservedMask = 38144,
        }

        class FieldInfo : System.Reflection.MemberInfo
        {
            static /*0x1656144*/ bool op_Equality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x1656170*/ bool op_Inequality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x16562d8*/ System.Reflection.FieldInfo internal_from_handle_type(nint field_handle, nint type_handle);
            static /*0x16562dc*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle);
            static /*0x1656394*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType);
            /*0x1656054*/ FieldInfo();
            /*0x165605c*/ System.Reflection.MemberTypes get_MemberType();
            System.Reflection.FieldAttributes get_Attributes();
            System.Type get_FieldType();
            /*0x1656064*/ bool get_IsInitOnly();
            /*0x1656084*/ bool get_IsLiteral();
            /*0x16560a4*/ bool get_IsNotSerialized();
            /*0x16560c4*/ bool get_IsStatic();
            /*0x16560e4*/ bool get_IsPrivate();
            /*0x165610c*/ bool get_IsPublic();
            System.RuntimeFieldHandle get_FieldHandle();
            /*0x1656134*/ bool Equals(object obj);
            /*0x165613c*/ int GetHashCode();
            object GetValue(object obj);
            /*0x16561ac*/ void SetValue(object obj, object value);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x1656238*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x1656288*/ object GetRawConstantValue();
            /*0x165647c*/ int GetFieldOffset();
            /*0x16564cc*/ System.Runtime.InteropServices.MarshalAsAttribute get_marshal_info();
            /*0x16564d0*/ object[] GetPseudoCustomAttributes();
            /*0x16566e4*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
        }

        enum GenericParameterAttributes
        {
            None = 0,
            VarianceMask = 3,
            Covariant = 1,
            Contravariant = 2,
            SpecialConstraintMask = 28,
            ReferenceTypeConstraint = 4,
            NotNullableValueTypeConstraint = 8,
            DefaultConstructorConstraint = 16,
        }

        interface ICustomAttributeProvider
        {
            object[] GetCustomAttributes(bool inherit);
            object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            bool IsDefined(System.Type attributeType, bool inherit);
        }

        interface IReflectableType
        {
            System.Reflection.TypeInfo GetTypeInfo();
        }

        class IntrospectionExtensions
        {
            static /*0x1657058*/ System.Reflection.TypeInfo GetTypeInfo(System.Type type);
        }

        class InvalidFilterCriteriaException : System.ApplicationException
        {
            /*0x165728c*/ InvalidFilterCriteriaException();
            /*0x16572ec*/ InvalidFilterCriteriaException(string message);
            /*0x1657314*/ InvalidFilterCriteriaException(string message, System.Exception inner);
            /*0x1657338*/ InvalidFilterCriteriaException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemberFilter : System.MulticastDelegate
        {
            /*0x1657340*/ MemberFilter(object object, nint method);
            /*0x1657470*/ bool Invoke(System.Reflection.MemberInfo m, object filterCriteria);
        }

        class MemberInfo : System.Reflection.ICustomAttributeProvider
        {
            static /*0x1657598*/ bool op_Equality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            static /*0x1657b28*/ bool op_Inequality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            /*0x1655900*/ MemberInfo();
            System.Reflection.MemberTypes get_MemberType();
            string get_Name();
            System.Type get_DeclaringType();
            System.Type get_ReflectedType();
            /*0x1657484*/ System.Reflection.Module get_Module();
            bool IsDefined(System.Type attributeType, bool inherit);
            object[] GetCustomAttributes(bool inherit);
            object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1657558*/ int get_MetadataToken();
            /*0x1655be0*/ bool Equals(object obj);
            /*0x1655bf0*/ int GetHashCode();
        }

        enum MemberTypes
        {
            Constructor = 1,
            Event = 2,
            Field = 4,
            Method = 8,
            Property = 16,
            TypeInfo = 32,
            Custom = 64,
            NestedType = 128,
            All = 191,
        }

        enum MethodAttributes
        {
            MemberAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            Final = 32,
            Virtual = 64,
            HideBySig = 128,
            CheckAccessOnOverride = 512,
            VtableLayoutMask = 256,
            ReuseSlot = 0,
            NewSlot = 256,
            Abstract = 1024,
            SpecialName = 2048,
            PinvokeImpl = 8192,
            UnmanagedExport = 8,
            RTSpecialName = 4096,
            HasSecurity = 16384,
            RequireSecObject = 32768,
            ReservedMask = 53248,
        }

        class MethodBase : System.Reflection.MemberInfo
        {
            static /*0x165790c*/ bool op_Equality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x16578f4*/ bool op_Inequality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x16581a8*/ System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle);
            static /*0x1657ea4*/ string ConstructParameters(System.Type[] parameterTypes, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0x16583b8*/ System.Reflection.MethodBase GetCurrentMethod();
            /*0x1655678*/ MethodBase();
            System.Reflection.ParameterInfo[] GetParameters();
            System.Reflection.MethodAttributes get_Attributes();
            System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x1657b40*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x1657b48*/ bool get_IsAbstract();
            /*0x1657b68*/ bool get_IsConstructor();
            /*0x1657c0c*/ bool get_IsSpecialName();
            /*0x1655ddc*/ bool get_IsStatic();
            /*0x1657c2c*/ bool get_IsVirtual();
            /*0x1657c4c*/ bool get_IsPublic();
            /*0x1657c74*/ bool get_IsGenericMethod();
            /*0x1657c7c*/ bool get_IsGenericMethodDefinition();
            /*0x1657c84*/ System.Type[] GetGenericArguments();
            /*0x1657cd4*/ bool get_ContainsGenericParameters();
            /*0x1655bb8*/ object Invoke(object obj, object[] parameters);
            object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            System.RuntimeMethodHandle get_MethodHandle();
            /*0x1657cdc*/ bool get_IsSecurityCritical();
            /*0x16556b0*/ bool Equals(object obj);
            /*0x16556c0*/ int GetHashCode();
            /*0x1657d40*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x1657d50*/ int GetParametersCount();
            /*0x1657d78*/ string FormatNameAndSig(bool serialization);
            /*0x1658090*/ System.Type[] GetParameterTypes();
            /*0x1658198*/ System.Reflection.ParameterInfo[] GetParametersNoCopy();
        }

        enum MethodImplAttributes
        {
            CodeTypeMask = 3,
            IL = 0,
            Native = 1,
            OPTIL = 2,
            Runtime = 3,
            ManagedMask = 4,
            Unmanaged = 4,
            Managed = 0,
            ForwardRef = 16,
            PreserveSig = 128,
            InternalCall = 4096,
            Synchronized = 32,
            NoInlining = 8,
            AggressiveInlining = 256,
            NoOptimization = 64,
            MaxMethodImplVal = 65535,
            SecurityMitigations = 1024,
        }

        class MethodInfo : System.Reflection.MethodBase
        {
            static /*0x1655b8c*/ bool op_Equality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            static /*0x1657d04*/ bool op_Inequality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            /*0x1658408*/ MethodInfo();
            /*0x1658410*/ System.Reflection.MemberTypes get_MemberType();
            /*0x1658418*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0x1658440*/ System.Type get_ReturnType();
            /*0x1658468*/ System.Type[] GetGenericArguments();
            /*0x16584b8*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x1658508*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] typeArguments);
            System.Reflection.MethodInfo GetBaseDefinition();
            /*0x1658558*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x16585a8*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x16585f8*/ bool Equals(object obj);
            /*0x1658600*/ int GetHashCode();
            /*0x1658608*/ int get_GenericParameterCount();
        }

        class Missing : System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Reflection.Missing Value;

            static /*0x1658678*/ Missing();
            /*0x1658630*/ Missing();
            /*0x1658638*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Module
        {
            static System.Reflection.BindingFlags DefaultLookup = 28;
            static /*0x0*/ System.Reflection.TypeFilter FilterTypeName;
            static /*0x8*/ System.Reflection.TypeFilter FilterTypeNameIgnoreCase;

            static /*0x1658b44*/ Module();
            static /*0x1658834*/ bool op_Equality(System.Reflection.Module left, System.Reflection.Module right);
            static /*0x165886c*/ bool FilterTypeNameImpl(System.Type cls, object filterCriteria);
            static /*0x16589a0*/ bool FilterTypeNameIgnoreCaseImpl(System.Type cls, object filterCriteria);
            /*0x16586dc*/ Module();
            /*0x16586e4*/ System.Reflection.Assembly get_Assembly();
            /*0x165870c*/ System.Guid get_ModuleVersionId();
            /*0x1658734*/ string get_ScopeName();
            /*0x165875c*/ bool IsResource();
            /*0x1658784*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x16587ac*/ object[] GetCustomAttributes(bool inherit);
            /*0x16587d4*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x16587fc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1658824*/ bool Equals(object o);
            /*0x165882c*/ int GetHashCode();
            /*0x1658860*/ string ToString();
            /*0x1658b04*/ System.Guid GetModuleVersionId();
        }

        enum ParameterAttributes
        {
            None = 0,
            In = 1,
            Out = 2,
            Lcid = 4,
            Retval = 8,
            Optional = 16,
            HasDefault = 4096,
            HasFieldMarshal = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 61440,
        }

        class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.IObjectReference, System.Runtime.InteropServices._ParameterInfo
        {
            static int MetadataToken_ParamDef = 134217728;
            /*0x10*/ System.Reflection.ParameterAttributes AttrsImpl;
            /*0x18*/ System.Type ClassImpl;
            /*0x20*/ object DefaultValueImpl;
            /*0x28*/ System.Reflection.MemberInfo MemberImpl;
            /*0x30*/ string NameImpl;
            /*0x38*/ int PositionImpl;

            /*0x1658d40*/ ParameterInfo();
            /*0x1658d48*/ System.Reflection.ParameterAttributes get_Attributes();
            /*0x1658d50*/ System.Reflection.MemberInfo get_Member();
            /*0x1658d58*/ string get_Name();
            /*0x1658d60*/ System.Type get_ParameterType();
            /*0x1658d68*/ int get_Position();
            /*0x1658d70*/ bool get_IsIn();
            /*0x1658d8c*/ bool get_IsOptional();
            /*0x1658da8*/ bool get_IsOut();
            /*0x1658dc4*/ object get_DefaultValue();
            /*0x1658dec*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1658ea0*/ object[] GetCustomAttributes(bool inherit);
            /*0x1658f1c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1659020*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            /*0x1659300*/ string ToString();
        }

        struct ParameterModifier
        {
            /*0x10*/ bool[] _byRef;
        }

        class Pointer : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ void* _ptr;
            /*0x18*/ System.Type _ptrType;

            static /*0x16593b0*/ object Box(void* ptr, System.Type type);
            /*0x1659384*/ Pointer(void* ptr, System.Type ptrType);
            /*0x1659538*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum ProcessorArchitecture
        {
            None = 0,
            MSIL = 1,
            X86 = 2,
            IA64 = 3,
            Amd64 = 4,
            Arm = 5,
        }

        enum PropertyAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            HasDefault = 4096,
            Reserved2 = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 62464,
        }

        class PropertyInfo : System.Reflection.MemberInfo
        {
            static /*0x1657afc*/ bool op_Equality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            static /*0x1657ac0*/ bool op_Inequality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            /*0x1659578*/ PropertyInfo();
            /*0x1659580*/ System.Reflection.MemberTypes get_MemberType();
            System.Type get_PropertyType();
            System.Reflection.ParameterInfo[] GetIndexParameters();
            bool get_CanRead();
            bool get_CanWrite();
            /*0x1659588*/ System.Reflection.MethodInfo GetGetMethod();
            System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x165959c*/ System.Reflection.MethodInfo GetSetMethod();
            System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x16595b0*/ object GetValue(object obj);
            /*0x16595c4*/ object GetValue(object obj, object[] index);
            object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x16595e4*/ void SetValue(object obj, object value);
            /*0x16595f8*/ void SetValue(object obj, object value, object[] index);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x1659618*/ bool Equals(object obj);
            /*0x1659620*/ int GetHashCode();
        }

        class ReflectionTypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
        {
            /*0x90*/ System.Type[] <Types>k__BackingField;
            /*0x98*/ System.Exception[] <LoaderExceptions>k__BackingField;

            /*0x1659628*/ ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions);
            /*0x1659664*/ ReflectionTypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x165979c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x16598c4*/ System.Exception[] get_LoaderExceptions();
            /*0x16598cc*/ string get_Message();
            /*0x1659a0c*/ string ToString();
            /*0x16598d4*/ string CreateString(bool isMessage);
        }

        class SignatureArrayType : System.Reflection.SignatureHasElementType
        {
            /*0x20*/ int _rank;
            /*0x24*/ bool _isMultiDim;

            /*0x1659a14*/ SignatureArrayType(System.Reflection.SignatureType elementType, int rank, bool isMultiDim);
            /*0x1659a74*/ bool IsArrayImpl();
            /*0x1659a7c*/ bool IsByRefImpl();
            /*0x1659a84*/ bool IsPointerImpl();
            /*0x1659a8c*/ bool get_IsSZArray();
            /*0x1659a9c*/ bool get_IsVariableBoundArray();
            /*0x1659aa4*/ int GetArrayRank();
            /*0x1659aac*/ string get_Suffix();
        }

        class SignatureByRefType : System.Reflection.SignatureHasElementType
        {
            /*0x1659b74*/ SignatureByRefType(System.Reflection.SignatureType elementType);
            /*0x1659b98*/ bool IsArrayImpl();
            /*0x1659ba0*/ bool IsByRefImpl();
            /*0x1659ba8*/ bool IsPointerImpl();
            /*0x1659bb0*/ bool get_IsSZArray();
            /*0x1659bb8*/ bool get_IsVariableBoundArray();
            /*0x1659bc0*/ int GetArrayRank();
            /*0x1659c10*/ string get_Suffix();
        }

        class SignatureConstructedGenericType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Type _genericTypeDefinition;
            /*0x20*/ System.Type[] _genericTypeArguments;

            /*0x1659c50*/ SignatureConstructedGenericType(System.Type genericTypeDefinition, System.Type[] typeArguments);
            /*0x1659e4c*/ bool get_IsGenericTypeDefinition();
            /*0x1659e54*/ bool HasElementTypeImpl();
            /*0x1659e5c*/ bool IsArrayImpl();
            /*0x1659e64*/ bool IsByRefImpl();
            /*0x1659e6c*/ bool IsPointerImpl();
            /*0x1659e74*/ bool get_IsSZArray();
            /*0x1659e7c*/ bool get_IsVariableBoundArray();
            /*0x1659e84*/ bool get_IsConstructedGenericType();
            /*0x1659e8c*/ bool get_IsGenericParameter();
            /*0x1659e94*/ bool get_IsGenericMethodParameter();
            /*0x1659e9c*/ bool get_ContainsGenericParameters();
            /*0x1659f14*/ System.Reflection.SignatureType get_ElementType();
            /*0x1659f1c*/ int GetArrayRank();
            /*0x1659f6c*/ System.Type GetGenericTypeDefinition();
            /*0x1659f74*/ System.Type[] GetGenericArguments();
            /*0x1659f84*/ System.Type[] get_GenericTypeArguments();
            /*0x1659ffc*/ int get_GenericParameterPosition();
            /*0x165a04c*/ string get_Name();
            /*0x165a06c*/ string get_Namespace();
            /*0x165a090*/ string ToString();
        }

        class SignatureHasElementType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Reflection.SignatureType _elementType;

            /*0x1659a50*/ SignatureHasElementType(System.Reflection.SignatureType elementType);
            /*0x165a1b4*/ bool get_IsGenericTypeDefinition();
            /*0x165a1bc*/ bool HasElementTypeImpl();
            bool IsArrayImpl();
            bool IsByRefImpl();
            bool IsPointerImpl();
            bool get_IsSZArray();
            bool get_IsVariableBoundArray();
            /*0x165a1c4*/ bool get_IsConstructedGenericType();
            /*0x165a1cc*/ bool get_IsGenericParameter();
            /*0x165a1d4*/ bool get_IsGenericMethodParameter();
            /*0x165a1dc*/ bool get_ContainsGenericParameters();
            /*0x165a200*/ System.Reflection.SignatureType get_ElementType();
            int GetArrayRank();
            /*0x165a208*/ System.Type GetGenericTypeDefinition();
            /*0x165a258*/ System.Type[] GetGenericArguments();
            /*0x165a2d4*/ System.Type[] get_GenericTypeArguments();
            /*0x165a350*/ int get_GenericParameterPosition();
            /*0x165a3a0*/ string get_Name();
            /*0x165a3f4*/ string get_Namespace();
            /*0x165a418*/ string ToString();
            string get_Suffix();
        }

        class SignaturePointerType : System.Reflection.SignatureHasElementType
        {
            /*0x165a46c*/ SignaturePointerType(System.Reflection.SignatureType elementType);
            /*0x165a490*/ bool IsArrayImpl();
            /*0x165a498*/ bool IsByRefImpl();
            /*0x165a4a0*/ bool IsPointerImpl();
            /*0x165a4a8*/ bool get_IsSZArray();
            /*0x165a4b0*/ bool get_IsVariableBoundArray();
            /*0x165a4b8*/ int GetArrayRank();
            /*0x165a508*/ string get_Suffix();
        }

        class SignatureType : System.Type
        {
            /*0x1659df4*/ SignatureType();
            /*0x165a548*/ bool get_IsSignatureType();
            bool HasElementTypeImpl();
            bool IsArrayImpl();
            bool get_IsSZArray();
            bool get_IsVariableBoundArray();
            bool IsByRefImpl();
            bool IsPointerImpl();
            /*0x165a550*/ bool get_IsGenericType();
            bool get_IsGenericTypeDefinition();
            bool get_IsConstructedGenericType();
            bool get_IsGenericParameter();
            bool get_IsGenericMethodParameter();
            bool get_ContainsGenericParameters();
            /*0x165a590*/ System.Reflection.MemberTypes get_MemberType();
            /*0x165a598*/ System.Type MakeArrayType();
            /*0x165a604*/ System.Type MakeArrayType(int rank);
            /*0x165a6b8*/ System.Type MakeByRefType();
            /*0x165a718*/ System.Type MakePointerType();
            /*0x165a778*/ System.Type MakeGenericType(System.Type[] typeArguments);
            /*0x165a7c8*/ System.Type GetElementType();
            int GetArrayRank();
            System.Type GetGenericTypeDefinition();
            System.Type[] get_GenericTypeArguments();
            System.Type[] GetGenericArguments();
            int get_GenericParameterPosition();
            System.Reflection.SignatureType get_ElementType();
            /*0x165a7d8*/ System.Type get_UnderlyingSystemType();
            string get_Name();
            string get_Namespace();
            /*0x165a7dc*/ string get_FullName();
            /*0x165a7e4*/ string get_AssemblyQualifiedName();
            string ToString();
            /*0x165a7ec*/ System.Reflection.Assembly get_Assembly();
            /*0x165a83c*/ System.Reflection.Module get_Module();
            /*0x165a88c*/ System.Type get_ReflectedType();
            /*0x165a8dc*/ System.Type get_BaseType();
            /*0x165a92c*/ System.Type[] GetInterfaces();
            /*0x165a97c*/ bool IsAssignableFrom(System.Type c);
            /*0x165a9cc*/ int get_MetadataToken();
            /*0x165aa1c*/ System.Type get_DeclaringType();
            /*0x165aa6c*/ System.Reflection.MethodBase get_DeclaringMethod();
            /*0x165aabc*/ System.Type[] GetGenericParameterConstraints();
            /*0x165ab0c*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
            /*0x165ab5c*/ bool IsEnumDefined(object value);
            /*0x165abac*/ string GetEnumName(object value);
            /*0x165abfc*/ string[] GetEnumNames();
            /*0x165ac4c*/ System.Type GetEnumUnderlyingType();
            /*0x165ac9c*/ System.Array GetEnumValues();
            /*0x165acec*/ System.TypeCode GetTypeCodeImpl();
            /*0x165ad3c*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0x165ad8c*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0x165addc*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165ae2c*/ System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
            /*0x165ae7c*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165aecc*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0x165af1c*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0x165af6c*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165afbc*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0x165b00c*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0x165b05c*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x165b0ac*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x165b0fc*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165b14c*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0x165b19c*/ object[] GetCustomAttributes(bool inherit);
            /*0x165b1ec*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x165b23c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x165b28c*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x165b2dc*/ bool IsCOMObjectImpl();
            /*0x165b32c*/ bool IsPrimitiveImpl();
            /*0x165b37c*/ bool IsContextfulImpl();
            /*0x165b3cc*/ bool get_IsEnum();
            /*0x165b41c*/ bool IsEquivalentTo(System.Type other);
            /*0x165b46c*/ bool IsInstanceOfType(object o);
            /*0x165b4bc*/ bool IsMarshalByRefImpl();
            /*0x165b50c*/ bool get_IsSerializable();
            /*0x165b55c*/ bool IsSubclassOf(System.Type c);
            /*0x165b5ac*/ bool IsValueTypeImpl();
            /*0x165b5fc*/ System.RuntimeTypeHandle get_TypeHandle();
        }

        class SignatureTypeExtensions
        {
            static /*0x165b64c*/ bool MatchesParameterTypeExactly(System.Type pattern, System.Reflection.ParameterInfo parameter);
            static /*0x165b700*/ bool MatchesExactly(System.Reflection.SignatureType pattern, System.Type actual);
            static /*0x165baa8*/ System.Type TryResolveAgainstGenericMethod(System.Reflection.SignatureType signatureType, System.Reflection.MethodInfo genericMethod);
            static /*0x165bae0*/ System.Type TryResolve(System.Reflection.SignatureType signatureType, System.Type[] genericMethodParameters);
            static /*0x165be9c*/ System.Type TryMakeArrayType(System.Type type);
            static /*0x165bf38*/ System.Type TryMakeArrayType(System.Type type, int rank);
            static /*0x165bfd4*/ System.Type TryMakeByRefType(System.Type type);
            static /*0x165c070*/ System.Type TryMakePointerType(System.Type type);
            static /*0x165c10c*/ System.Type TryMakeGenericType(System.Type type, System.Type[] instantiation);
        }

        class TargetException : System.ApplicationException
        {
            /*0x165c1a8*/ TargetException();
            /*0x1655dfc*/ TargetException(string message);
            /*0x165c1d4*/ TargetException(string message, System.Exception inner);
            /*0x165c1f8*/ TargetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetInvocationException : System.ApplicationException
        {
            /*0x165c200*/ TargetInvocationException(System.Exception inner);
            /*0x165c26c*/ TargetInvocationException(string message, System.Exception inner);
            /*0x165c290*/ TargetInvocationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetParameterCountException : System.ApplicationException
        {
            /*0x165c298*/ TargetParameterCountException();
            /*0x165c2f4*/ TargetParameterCountException(string message);
            /*0x165c318*/ TargetParameterCountException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum TypeAttributes
        {
            VisibilityMask = 7,
            NotPublic = 0,
            Public = 1,
            NestedPublic = 2,
            NestedPrivate = 3,
            NestedFamily = 4,
            NestedAssembly = 5,
            NestedFamANDAssem = 6,
            NestedFamORAssem = 7,
            LayoutMask = 24,
            AutoLayout = 0,
            SequentialLayout = 8,
            ExplicitLayout = 16,
            ClassSemanticsMask = 32,
            Class = 0,
            Interface = 32,
            Abstract = 128,
            Sealed = 256,
            SpecialName = 1024,
            Import = 4096,
            Serializable = 8192,
            WindowsRuntime = 16384,
            StringFormatMask = 196608,
            AnsiClass = 0,
            UnicodeClass = 65536,
            AutoClass = 131072,
            CustomFormatClass = 196608,
            CustomFormatMask = 12582912,
            BeforeFieldInit = 1048576,
            RTSpecialName = 2048,
            HasSecurity = 262144,
            ReservedMask = 264192,
        }

        class TypeDelegator : System.Reflection.TypeInfo
        {
            /*0x18*/ System.Type typeImpl;

            /*0x16571c4*/ TypeDelegator(System.Type delegatingType);
            /*0x165c378*/ int get_MetadataToken();
            /*0x165c39c*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0x165c3c8*/ System.Reflection.Module get_Module();
            /*0x165c3ec*/ System.Reflection.Assembly get_Assembly();
            /*0x165c410*/ System.RuntimeTypeHandle get_TypeHandle();
            /*0x165c434*/ string get_Name();
            /*0x165c454*/ string get_FullName();
            /*0x165c478*/ string get_Namespace();
            /*0x165c49c*/ string get_AssemblyQualifiedName();
            /*0x165c4c0*/ System.Type get_BaseType();
            /*0x165c4e4*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x165c500*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0x165c524*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x165c550*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0x165c574*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165c598*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0x165c5bc*/ System.Type[] GetInterfaces();
            /*0x165c5e0*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165c604*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0x165c6f4*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0x165c718*/ System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
            /*0x165c73c*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0x165c760*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0x165c784*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0x165c7a0*/ bool get_IsSZArray();
            /*0x165c7c4*/ bool IsArrayImpl();
            /*0x165c7e0*/ bool IsPrimitiveImpl();
            /*0x165c7fc*/ bool IsByRefImpl();
            /*0x165c818*/ bool get_IsGenericMethodParameter();
            /*0x165c83c*/ bool IsPointerImpl();
            /*0x165c858*/ bool IsValueTypeImpl();
            /*0x165c874*/ bool IsCOMObjectImpl();
            /*0x165c890*/ bool get_IsConstructedGenericType();
            /*0x165c8b4*/ bool get_IsCollectible();
            /*0x165c8d8*/ System.Type GetElementType();
            /*0x165c8fc*/ bool HasElementTypeImpl();
            /*0x165c918*/ System.Type get_UnderlyingSystemType();
            /*0x165c93c*/ object[] GetCustomAttributes(bool inherit);
            /*0x165c964*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x165c98c*/ bool IsDefined(System.Type attributeType, bool inherit);
        }

        class TypeFilter : System.MulticastDelegate
        {
            /*0x1658c10*/ TypeFilter(object object, nint method);
            /*0x165c9b0*/ bool Invoke(System.Type m, object filterCriteria);
        }

        class TypeInfo : System.Type, System.Reflection.IReflectableType
        {
            /*0x165c320*/ TypeInfo();
            /*0x165c9c4*/ System.Reflection.TypeInfo System.Reflection.IReflectableType.GetTypeInfo();
            /*0x165c9c8*/ System.Collections.Generic.IEnumerable<System.Type> get_ImplementedInterfaces();
        }

        struct CustomAttributeNamedArgument
        {
            /*0x10*/ System.Reflection.CustomAttributeTypedArgument <TypedValue>k__BackingField;
            /*0x20*/ bool <IsField>k__BackingField;
            /*0x28*/ string <MemberName>k__BackingField;
            /*0x30*/ System.Type _attributeType;
            /*0x38*/ System.Reflection.MemberInfo _lazyMemberInfo;

            static /*0x165cf68*/ bool op_Equality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            static /*0x165cfe8*/ bool op_Inequality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            /*0x165c9d8*/ CustomAttributeNamedArgument(System.Type attributeType, string memberName, bool isField, System.Reflection.CustomAttributeTypedArgument typedValue);
            /*0x165ca00*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, object value);
            /*0x165cc2c*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument);
            /*0x165cd50*/ System.Reflection.CustomAttributeTypedArgument get_TypedValue();
            /*0x165cd5c*/ bool get_IsField();
            /*0x165cd64*/ string get_MemberName();
            /*0x165cd6c*/ System.Reflection.MemberInfo get_MemberInfo();
            /*0x165ce84*/ bool Equals(object obj);
            /*0x165cefc*/ int GetHashCode();
            /*0x165d06c*/ string ToString();
        }

        struct CustomAttributeTypedArgument
        {
            /*0x10*/ System.Type <ArgumentType>k__BackingField;
            /*0x18*/ object <Value>k__BackingField;

            static /*0x165df14*/ bool op_Equality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0x165df8c*/ bool op_Inequality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0x165dd78*/ object CanonicalizeValue(object value);
            /*0x165dcf0*/ CustomAttributeTypedArgument(object value);
            /*0x1656d6c*/ CustomAttributeTypedArgument(System.Type argumentType, object value);
            /*0x165de30*/ System.Type get_ArgumentType();
            /*0x165de38*/ object get_Value();
            /*0x165de40*/ bool Equals(object obj);
            /*0x165deb0*/ int GetHashCode();
            /*0x165e008*/ string ToString();
            /*0x165d3f8*/ string ToString(bool typed);
        }

        class MissingMetadataException : System.TypeAccessException
        {
            /*0x165e010*/ MissingMetadataException();
        }

        class CustomAttributeExtensions
        {
            static /*0x165e018*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
            static /*0x165e020*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
            static T GetCustomAttribute<T>(System.Reflection.Assembly element);
            static T GetCustomAttribute<T>(System.Reflection.MemberInfo element);
            static /*0x165e028*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType);
            static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element);
            static /*0x165e030*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        }

        enum CorElementType
        {
            End = 0,
            Void = 1,
            Boolean = 2,
            Char = 3,
            I1 = 4,
            U1 = 5,
            I2 = 6,
            U2 = 7,
            I4 = 8,
            U4 = 9,
            I8 = 10,
            U8 = 11,
            R4 = 12,
            R8 = 13,
            String = 14,
            Ptr = 15,
            ByRef = 16,
            ValueType = 17,
            Class = 18,
            Var = 19,
            Array = 20,
            GenericInst = 21,
            TypedByRef = 22,
            I = 24,
            U = 25,
            FnPtr = 27,
            Object = 28,
            SzArray = 29,
            MVar = 30,
            CModReqd = 31,
            CModOpt = 32,
            Internal = 33,
            Max = 34,
            Modifier = 64,
            Sentinel = 65,
            Pinned = 69,
            ELEMENT_TYPE_END = 0,
            ELEMENT_TYPE_VOID = 1,
            ELEMENT_TYPE_BOOLEAN = 2,
            ELEMENT_TYPE_CHAR = 3,
            ELEMENT_TYPE_I1 = 4,
            ELEMENT_TYPE_U1 = 5,
            ELEMENT_TYPE_I2 = 6,
            ELEMENT_TYPE_U2 = 7,
            ELEMENT_TYPE_I4 = 8,
            ELEMENT_TYPE_U4 = 9,
            ELEMENT_TYPE_I8 = 10,
            ELEMENT_TYPE_U8 = 11,
            ELEMENT_TYPE_R4 = 12,
            ELEMENT_TYPE_R8 = 13,
            ELEMENT_TYPE_STRING = 14,
            ELEMENT_TYPE_PTR = 15,
            ELEMENT_TYPE_BYREF = 16,
            ELEMENT_TYPE_VALUETYPE = 17,
            ELEMENT_TYPE_CLASS = 18,
            ELEMENT_TYPE_VAR = 19,
            ELEMENT_TYPE_ARRAY = 20,
            ELEMENT_TYPE_GENERICINST = 21,
            ELEMENT_TYPE_TYPEDBYREF = 22,
            ELEMENT_TYPE_I = 24,
            ELEMENT_TYPE_U = 25,
            ELEMENT_TYPE_FNPTR = 27,
            ELEMENT_TYPE_OBJECT = 28,
            ELEMENT_TYPE_SZARRAY = 29,
            ELEMENT_TYPE_MVAR = 30,
            ELEMENT_TYPE_CMOD_REQD = 31,
            ELEMENT_TYPE_CMOD_OPT = 32,
            ELEMENT_TYPE_INTERNAL = 33,
            ELEMENT_TYPE_MAX = 34,
            ELEMENT_TYPE_MODIFIER = 64,
            ELEMENT_TYPE_SENTINEL = 65,
            ELEMENT_TYPE_PINNED = 69,
        }

        enum PInvokeAttributes
        {
            NoMangle = 1,
            CharSetMask = 6,
            CharSetNotSpec = 0,
            CharSetAnsi = 2,
            CharSetUnicode = 4,
            CharSetAuto = 6,
            BestFitUseAssem = 0,
            BestFitEnabled = 16,
            BestFitDisabled = 32,
            BestFitMask = 48,
            ThrowOnUnmappableCharUseAssem = 0,
            ThrowOnUnmappableCharEnabled = 4096,
            ThrowOnUnmappableCharDisabled = 8192,
            ThrowOnUnmappableCharMask = 12288,
            SupportsLastError = 64,
            CallConvMask = 1792,
            CallConvWinapi = 256,
            CallConvCdecl = 512,
            CallConvStdcall = 768,
            CallConvThiscall = 1024,
            CallConvFastcall = 1280,
            MaxValue = 65535,
        }

        class MemberInfoSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
        {
            /*0x10*/ string m_memberName;
            /*0x18*/ System.RuntimeType m_reflectedType;
            /*0x20*/ string m_signature;
            /*0x28*/ string m_signature2;
            /*0x30*/ System.Reflection.MemberTypes m_memberType;
            /*0x38*/ System.Runtime.Serialization.SerializationInfo m_info;

            static /*0x165e038*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, System.Reflection.MemberTypes type);
            static /*0x165e048*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, string signature2, System.Reflection.MemberTypes type, System.Type[] genericArguments);
            /*0x165e35c*/ MemberInfoSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x165e680*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x165e6e0*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
        }

        class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Assembly
        {
            static /*0x165f1f4*/ System.Reflection.Assembly GetAssembly(System.Type type);
            static /*0x165f2bc*/ System.Reflection.Assembly Load(string assemblyString);
            static /*0x165f2e4*/ System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString);
            static /*0x165f32c*/ System.Reflection.Assembly LoadWithPartialName(string partialName);
            static /*0x165f340*/ System.Reflection.Assembly load_with_partial_name(string name, System.Security.Policy.Evidence e);
            static /*0x165f338*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence);
            static /*0x165f344*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence, bool oldBehavior);
            static /*0x165f3fc*/ System.Reflection.Assembly GetExecutingAssembly();
            static /*0x164ffc4*/ System.Reflection.Assembly GetCallingAssembly();
            static /*0x165f44c*/ System.Exception CreateNIE();
            static /*0x164fe5c*/ bool op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            static /*0x165f534*/ bool op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            /*0x165f58c*/ Assembly();
            /*0x165ef98*/ string get_CodeBase();
            /*0x165efd8*/ string get_FullName();
            /*0x165f018*/ nint get_MonoAssembly();
            /*0x165f058*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x165f098*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x165f0d8*/ object[] GetCustomAttributes(bool inherit);
            /*0x165f118*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x165f158*/ System.Type[] GetTypes(bool exportedOnly);
            /*0x165f160*/ System.Type[] GetTypes();
            /*0x165f174*/ System.Type GetType(string name);
            /*0x165f18c*/ System.Type InternalGetType(System.Reflection.Module module, string name, bool throwOnError, bool ignoreCase);
            /*0x165f198*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x165f1d8*/ System.Reflection.AssemblyName GetName();
            /*0x165f1ec*/ string ToString();
            /*0x165f3bc*/ System.Reflection.Module[] GetModulesInternal();
            /*0x165f43c*/ int GetHashCode();
            /*0x165f444*/ bool Equals(object o);
            /*0x165f4c0*/ bool get_IsFullyTrusted();
            /*0x165f4c8*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x165f4ec*/ System.Reflection.Module GetModule(string name);
            /*0x165f510*/ System.Reflection.Module[] GetModules(bool getResourceModules);

            class ResolveEventHolder
            {
                /*0x165f594*/ ResolveEventHolder();
            }
        }

        class AssemblyName : System.ICloneable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.InteropServices._AssemblyName
        {
            /*0x10*/ string name;
            /*0x18*/ string codebase;
            /*0x20*/ int major;
            /*0x24*/ int minor;
            /*0x28*/ int build;
            /*0x2c*/ int revision;
            /*0x30*/ System.Globalization.CultureInfo cultureinfo;
            /*0x38*/ System.Reflection.AssemblyNameFlags flags;
            /*0x3c*/ System.Configuration.Assemblies.AssemblyHashAlgorithm hashalg;
            /*0x40*/ System.Reflection.StrongNameKeyPair keypair;
            /*0x48*/ byte[] publicKey;
            /*0x50*/ byte[] keyToken;
            /*0x58*/ System.Configuration.Assemblies.AssemblyVersionCompatibility versioncompat;
            /*0x60*/ System.Version version;
            /*0x68*/ System.Reflection.ProcessorArchitecture processor_architecture;
            /*0x6c*/ System.Reflection.AssemblyContentType contentType;

            static /*0x165f5bc*/ bool ParseAssemblyName(nint name, ref Mono.MonoAssemblyName aname, ref bool is_version_definited, ref bool is_token_defined);
            static /*0x1660350*/ void get_public_token(byte* token, byte* pubkey, int len);
            static /*0x166073c*/ Mono.MonoAssemblyName* GetNativeName(nint assembly_ptr);
            static /*0x1660740*/ System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, bool fillCodebase);
            /*0x165f59c*/ AssemblyName();
            /*0x16505bc*/ AssemblyName(string assemblyName);
            /*0x165f860*/ AssemblyName(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
            /*0x165fd68*/ string get_Name();
            /*0x165fd70*/ System.Globalization.CultureInfo get_CultureInfo();
            /*0x165fd78*/ System.Reflection.AssemblyNameFlags get_Flags();
            /*0x165fd80*/ string get_FullName();
            /*0x16601c4*/ System.Version get_Version();
            /*0x16601cc*/ void set_Version(System.Version value);
            /*0x1660218*/ string ToString();
            /*0x1650854*/ byte[] GetPublicKeyToken();
            /*0x1660240*/ bool get_IsPublicKeyValid();
            /*0x16600dc*/ byte[] InternalGetPublicKeyToken();
            /*0x16602c4*/ byte[] ComputePublicKeyToken();
            /*0x1660354*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1660684*/ object Clone();
            /*0x1660734*/ void OnDeserialization(object sender);
            /*0x165f5c0*/ void FillName(Mono.MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef);
        }

        class CustomAttributeData
        {
            /*0x10*/ System.Reflection.ConstructorInfo ctorInfo;
            /*0x18*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs;
            /*0x20*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs;
            /*0x28*/ System.Reflection.CustomAttributeData.LazyCAttrData lazyData;

            static /*0x16608b4*/ void ResolveArgumentsInternal(System.Reflection.ConstructorInfo ctor, System.Reflection.Assembly assembly, nint data, uint data_length, ref object[] ctorArgs, ref object[] namedArgs);
            static /*0x1660a80*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Assembly target);
            static /*0x1660adc*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.MemberInfo target);
            static /*0x1660b38*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesInternal(System.RuntimeType target);
            static /*0x1660b94*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target);
            static /*0x1660bf0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target);
            static T[] UnboxValues<T>(object[] values);
            /*0x166080c*/ CustomAttributeData();
            /*0x1660814*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Reflection.Assembly assembly, nint data, uint data_length);
            /*0x1656c70*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo);
            /*0x165701c*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs, System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs);
            /*0x16608b8*/ void ResolveArguments();
            /*0x1660a48*/ System.Reflection.ConstructorInfo get_Constructor();
            /*0x1660a50*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> get_ConstructorArguments();
            /*0x1660a68*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> get_NamedArguments();
            /*0x1660c4c*/ System.Type get_AttributeType();
            /*0x1660c6c*/ string ToString();
            /*0x16611dc*/ bool Equals(object obj);
            /*0x166185c*/ int GetHashCode();

            class LazyCAttrData
            {
                /*0x10*/ System.Reflection.Assembly assembly;
                /*0x18*/ nint data;
                /*0x20*/ uint data_length;

                /*0x16608ac*/ LazyCAttrData();
            }
        }

        class ExceptionHandlingClause
        {
            /*0x10*/ System.Type catch_type;
            /*0x18*/ int filter_offset;
            /*0x1c*/ System.Reflection.ExceptionHandlingClauseOptions flags;
            /*0x20*/ int try_offset;
            /*0x24*/ int try_length;
            /*0x28*/ int handler_offset;
            /*0x2c*/ int handler_length;

            /*0x1661b54*/ ExceptionHandlingClause();
            /*0x1661b5c*/ string ToString();
        }

        class LocalVariableInfo
        {
            /*0x10*/ System.Type type;
            /*0x18*/ bool is_pinned;
            /*0x1a*/ ushort position;

            /*0x1661e20*/ LocalVariableInfo();
            /*0x1661e28*/ string ToString();
        }

        class RuntimeAssembly : System.Reflection.Assembly
        {
            /*0x10*/ nint _mono_assembly;
            /*0x18*/ object _evidence;
            /*0x20*/ System.Reflection.Assembly.ResolveEventHolder resolve_event_holder;
            /*0x28*/ object _minimum;
            /*0x30*/ object _optional;
            /*0x38*/ object _refuse;
            /*0x40*/ object _granted;
            /*0x48*/ object _denied;
            /*0x50*/ bool fromByteArray;
            /*0x58*/ string assemblyName;

            static /*0x1661fcc*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(string partialName, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x1662054*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.Reflection.AssemblyName an, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x166240c*/ byte[] GetAotId();
            static /*0x1662468*/ string get_code_base(System.Reflection.Assembly a, bool escaped);
            static /*0x1662470*/ string get_fullname(System.Reflection.Assembly a);
            static /*0x1662464*/ bool GetAotIdInternal(byte[] aotid);
            static /*0x1662474*/ string GetCodeBase(System.Reflection.Assembly a, bool escaped);
            /*0x1661ed4*/ RuntimeAssembly();
            /*0x1661f40*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x166207c*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x1662084*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x1662148*/ System.Reflection.Module GetModule(string name);
            /*0x1662278*/ System.Reflection.Module[] GetModules(bool getResourceModules);
            /*0x166247c*/ string get_CodeBase();
            /*0x1662484*/ string get_FullName();
            /*0x1662488*/ nint get_MonoAssembly();
            /*0x1662490*/ nint GetManifestResourceInternal(string name, ref int size, ref System.Reflection.Module module);
            /*0x1662494*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1662504*/ object[] GetCustomAttributes(bool inherit);
            /*0x166256c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x16625dc*/ System.Reflection.Module[] GetModulesInternal();
            /*0x16625e0*/ int GetHashCode();
            /*0x16625e8*/ bool Equals(object o);
            /*0x1662688*/ string ToString();
        }

        struct MonoEventInfo
        {
            /*0x10*/ System.Type declaring_type;
            /*0x18*/ System.Type reflected_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo add_method;
            /*0x30*/ System.Reflection.MethodInfo remove_method;
            /*0x38*/ System.Reflection.MethodInfo raise_method;
            /*0x40*/ System.Reflection.EventAttributes attrs;
            /*0x48*/ System.Reflection.MethodInfo[] other_methods;
        }

        class RuntimeEventInfo : System.Reflection.EventInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ nint klass;
            /*0x20*/ nint handle;

            static /*0x16626b4*/ void get_event_info(System.Reflection.RuntimeEventInfo ev, ref System.Reflection.MonoEventInfo info);
            static /*0x16626b8*/ System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.RuntimeEventInfo ev);
            static /*0x1662dc4*/ int get_metadata_token(System.Reflection.RuntimeEventInfo monoEvent);
            /*0x1662dc8*/ RuntimeEventInfo();
            /*0x16626f4*/ System.Reflection.Module get_Module();
            /*0x1662714*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x1662884*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x1662908*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x16626f8*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x166298c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1662718*/ System.Reflection.BindingFlags GetBindingFlags();
            /*0x1662a2c*/ System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            /*0x1662a94*/ System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x1662afc*/ System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            /*0x1662b64*/ System.Type get_DeclaringType();
            /*0x1662b90*/ System.Type get_ReflectedType();
            /*0x1662bbc*/ string get_Name();
            /*0x1662be8*/ string ToString();
            /*0x1662c78*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1662ce8*/ object[] GetCustomAttributes(bool inherit);
            /*0x1662d50*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1662dc0*/ int get_MetadataToken();
        }

        class RtFieldInfo : System.Reflection.FieldInfo
        {
            /*0x1662dd0*/ RtFieldInfo();
            object UnsafeGetValue(object obj);
            void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            void CheckConsistency(object target);
        }

        class RuntimeFieldInfo : System.Reflection.RtFieldInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ System.RuntimeFieldHandle fhandle;
            /*0x20*/ string name;
            /*0x28*/ System.Type type;
            /*0x30*/ System.Reflection.FieldAttributes attrs;

            static /*0x1663798*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
            static /*0x1663a68*/ int get_metadata_token(System.Reflection.RuntimeFieldInfo monoField);
            /*0x1663a6c*/ RuntimeFieldInfo();
            /*0x1662dd8*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x1662de0*/ System.Reflection.Module get_Module();
            /*0x1662e00*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x1662e84*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x1662de4*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x1662f08*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1662fc4*/ object UnsafeGetValue(object obj);
            /*0x1662fc8*/ void CheckConsistency(object target);
            /*0x1663148*/ void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x16631ac*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x1663310*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x1663318*/ System.RuntimeFieldHandle get_FieldHandle();
            /*0x1663320*/ System.Type ResolveType();
            /*0x1663324*/ System.Type get_FieldType();
            /*0x16633a0*/ System.Type GetParentType(bool declaring);
            /*0x16633a8*/ System.Type get_ReflectedType();
            /*0x16633b0*/ System.Type get_DeclaringType();
            /*0x16633b8*/ string get_Name();
            /*0x16633c0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1663430*/ object[] GetCustomAttributes(bool inherit);
            /*0x1663498*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1663508*/ int GetFieldOffset();
            /*0x166350c*/ object GetValueInternal(object obj);
            /*0x1663510*/ object GetValue(object obj);
            /*0x1663730*/ string ToString();
            /*0x166379c*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x1663a60*/ object GetRawConstantValue();
            /*0x16636b0*/ void CheckGeneric();
            /*0x1663a64*/ int get_MetadataToken();
        }

        struct MonoMethodInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type ret;
            /*0x20*/ System.Reflection.MethodAttributes attrs;
            /*0x24*/ System.Reflection.MethodImplAttributes iattrs;
            /*0x28*/ System.Reflection.CallingConventions callconv;

            static /*0x1663a74*/ void get_method_info(nint handle, ref System.Reflection.MonoMethodInfo info);
            static /*0x1663a78*/ int get_method_attributes(nint handle);
            static /*0x1663a7c*/ System.Reflection.MonoMethodInfo GetMethodInfo(nint handle);
            static /*0x1663aac*/ System.Type GetDeclaringType(nint handle);
            static /*0x1663ad4*/ System.Type GetReturnType(nint handle);
            static /*0x1663afc*/ System.Reflection.MethodAttributes GetAttributes(nint handle);
            static /*0x1663b00*/ System.Reflection.CallingConventions GetCallingConvention(nint handle);
            static /*0x1663b28*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags(nint handle);
            static /*0x1663b50*/ System.Reflection.ParameterInfo[] get_parameter_info(nint handle, System.Reflection.MemberInfo member);
            static /*0x1663b54*/ System.Reflection.ParameterInfo[] GetParametersInfo(nint handle, System.Reflection.MemberInfo member);
            static /*0x1663b58*/ System.Runtime.InteropServices.MarshalAsAttribute get_retval_marshal(nint handle);
            static /*0x1663b5c*/ System.Reflection.ParameterInfo GetReturnParameterInfo(System.Reflection.RuntimeMethodInfo method);
        }

        class RuntimeMethodInfo : System.Reflection.MethodInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x166428c*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle);
            static /*0x16642e8*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle reflectedType);
            static /*0x16583b0*/ System.Reflection.MethodBase GetMethodFromHandleInternalType(nint method_handle, nint type_handle);
            static /*0x16642e0*/ System.Reflection.MethodBase GetMethodFromHandleInternalType_native(nint method_handle, nint type_handle, bool genericCheck);
            static /*0x16642f8*/ string get_name(System.Reflection.MethodBase method);
            static /*0x16642fc*/ System.Reflection.RuntimeMethodInfo get_base_method(System.Reflection.RuntimeMethodInfo method, bool definition);
            static /*0x1664304*/ int get_metadata_token(System.Reflection.RuntimeMethodInfo method);
            static /*0x1664730*/ void ConvertValues(System.Reflection.Binder binder, object[] args, System.Reflection.ParameterInfo[] pinfo, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
            static /*0x1665a84*/ int get_core_clr_security_level();
            /*0x16642f0*/ RuntimeMethodInfo();
            /*0x1663c40*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x1663c48*/ System.Reflection.Module get_Module();
            /*0x1663cd8*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x1663d5c*/ string FormatNameAndSig(bool serialization);
            /*0x16640b0*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x16640c4*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x16640dc*/ string ToString();
            /*0x1663c4c*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x166416c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x165eefc*/ string SerializationToString();
            /*0x1664308*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0x1664310*/ System.Reflection.MethodInfo GetBaseMethod();
            /*0x1664318*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0x166431c*/ System.Type get_ReturnType();
            /*0x1664348*/ int get_MetadataToken();
            /*0x166434c*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x1664378*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x1664408*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x1664414*/ int GetParametersCount();
            /*0x1664438*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x166443c*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x16649e8*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x16649f0*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x16649f8*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x1664a24*/ System.Type get_ReflectedType();
            /*0x1664a2c*/ System.Type get_DeclaringType();
            /*0x1664a58*/ string get_Name();
            /*0x1664a6c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1664adc*/ object[] GetCustomAttributes(bool inherit);
            /*0x1664b44*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1664bb4*/ void GetPInvoke(ref System.Reflection.PInvokeAttributes flags, ref string entryPoint, ref string dllName);
            /*0x1664bb8*/ object[] GetPseudoCustomAttributes();
            /*0x1664d24*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
            /*0x1664ef0*/ System.Reflection.CustomAttributeData GetDllImportAttributeData();
            /*0x166560c*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] methodInstantiation);
            /*0x1665958*/ System.Reflection.MethodInfo MakeGenericMethod_impl(System.Type[] types);
            /*0x166595c*/ System.Type[] GetGenericArguments();
            /*0x1665960*/ System.Reflection.MethodInfo GetGenericMethodDefinition_impl();
            /*0x1665964*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x16659b4*/ bool get_IsGenericMethodDefinition();
            /*0x16659b8*/ bool get_IsGenericMethod();
            /*0x16659bc*/ bool get_ContainsGenericParameters();
            /*0x1665a8c*/ bool get_IsSecurityCritical();
        }

        class RuntimeConstructorInfo : System.Reflection.ConstructorInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x16664e8*/ int get_core_clr_security_level();
            static /*0x16664fc*/ int get_metadata_token(System.Reflection.RuntimeConstructorInfo method);
            /*0x1666500*/ RuntimeConstructorInfo();
            /*0x1665a94*/ System.Reflection.Module get_Module();
            /*0x1665a98*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x1665b20*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x1665b28*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x1665bac*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x165eee8*/ string SerializationToString();
            /*0x1665c84*/ void SerializationInvoke(object target, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1665db0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x1665ddc*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x1665de8*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x1665df4*/ int GetParametersCount();
            /*0x1665e14*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x1665e18*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1665f20*/ object DoInvoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1666114*/ object InternalInvoke(object obj, object[] parameters, bool wrapExceptions);
            /*0x1666270*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1666288*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x1666290*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x1666298*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x16662c4*/ bool get_ContainsGenericParameters();
            /*0x16662f0*/ System.Type get_ReflectedType();
            /*0x16662f8*/ System.Type get_DeclaringType();
            /*0x1666324*/ string get_Name();
            /*0x1666338*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x16663a8*/ object[] GetCustomAttributes(bool inherit);
            /*0x1666410*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1666480*/ string ToString();
            /*0x16664f0*/ bool get_IsSecurityCritical();
            /*0x16664f8*/ int get_MetadataToken();
        }

        class RuntimeModule : System.Reflection.Module
        {
            /*0x10*/ nint _impl;
            /*0x18*/ System.Reflection.Assembly assembly;
            /*0x20*/ string fqname;
            /*0x28*/ string name;
            /*0x30*/ string scopename;
            /*0x38*/ bool is_resource;
            /*0x3c*/ int token;

            static /*0x1666858*/ void GetGuidInternal(nint module, byte[] guid);
            /*0x166685c*/ RuntimeModule();
            /*0x1666558*/ System.Reflection.Assembly get_Assembly();
            /*0x1666560*/ string get_ScopeName();
            /*0x1666568*/ System.Guid get_ModuleVersionId();
            /*0x1666578*/ bool IsResource();
            /*0x1666580*/ object[] GetCustomAttributes(bool inherit);
            /*0x16665e8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1666658*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x16666c8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1666760*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
            /*0x16667d8*/ System.Guid GetModuleVersionId();
        }

        class RuntimeParameterInfo : System.Reflection.ParameterInfo
        {
            /*0x40*/ System.Runtime.InteropServices.MarshalAsAttribute marshalAs;

            static /*0x1663ebc*/ void FormatParameters(System.Text.StringBuilder sb, System.Reflection.ParameterInfo[] p, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0x1667668*/ System.Reflection.ParameterInfo New(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            static /*0x1663bb4*/ System.Reflection.ParameterInfo New(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x16668b4*/ RuntimeParameterInfo(string name, System.Type type, int position, int attrs, object defaultValue, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x166691c*/ RuntimeParameterInfo(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            /*0x1666a70*/ RuntimeParameterInfo(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0x1666ac0*/ object get_DefaultValue();
            /*0x1666dd4*/ object[] GetCustomAttributes(bool inherit);
            /*0x1666e30*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x16669ac*/ object GetDefaultValueImpl(System.Reflection.ParameterInfo pinfo);
            /*0x1666e9c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1666f0c*/ object[] GetPseudoCustomAttributes();
            /*0x166716c*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
        }

        struct MonoPropertyInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type declaring_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo get_method;
            /*0x30*/ System.Reflection.MethodInfo set_method;
            /*0x38*/ System.Reflection.PropertyAttributes attrs;
        }

        enum PInfo
        {
            Attributes = 1,
            GetMethod = 2,
            SetMethod = 4,
            ReflectedType = 8,
            DeclaringType = 16,
            Name = 32,
        }

        class RuntimePropertyInfo : System.Reflection.PropertyInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ nint prop;
            /*0x20*/ System.Reflection.MonoPropertyInfo info;
            /*0x50*/ System.Reflection.PInfo cached;
            /*0x58*/ System.Reflection.RuntimePropertyInfo.GetterAdapter cached_getter;

            static /*0x15d55b4*/ void get_property_info(System.Reflection.RuntimePropertyInfo prop, ref System.Reflection.MonoPropertyInfo info, System.Reflection.PInfo req_info);
            static object GetterAdapterFrame<T, R>(System.Reflection.RuntimePropertyInfo.Getter<T, R> getter, object obj);
            static object StaticGetterAdapterFrame<R>(System.Reflection.RuntimePropertyInfo.StaticGetter<R> getter, object obj);
            static /*0x15d6384*/ int get_metadata_token(System.Reflection.RuntimePropertyInfo monoProperty);
            static /*0x15d6388*/ System.Reflection.PropertyInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x15d638c*/ System.Reflection.PropertyInfo GetPropertyFromHandle(Mono.RuntimePropertyHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x15d6488*/ RuntimePropertyInfo();
            /*0x15d55b8*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x15d55c0*/ System.Reflection.Module get_Module();
            /*0x15d55e0*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x15d5664*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x15d55c4*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x15d56e8*/ string ToString();
            /*0x15d56f0*/ string FormatNameAndSig(bool serialization);
            /*0x15d5864*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15d5934*/ string SerializationToString();
            /*0x15d593c*/ void CachePropertyInfo(System.Reflection.PInfo flags);
            /*0x15d597c*/ bool get_CanRead();
            /*0x15d59bc*/ bool get_CanWrite();
            /*0x15d59fc*/ System.Type get_PropertyType();
            /*0x15d5aac*/ System.Type get_ReflectedType();
            /*0x15d5ae4*/ System.Type get_DeclaringType();
            /*0x15d5b1c*/ string get_Name();
            /*0x15d5b54*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x15d5bd8*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x15d5da0*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x15d5e24*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x15d5e90*/ object[] GetCustomAttributes(bool inherit);
            /*0x15d5eec*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x15d5f58*/ object GetValue(object obj, object[] index);
            /*0x15d5f78*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x15d617c*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x15d6380*/ int get_MetadataToken();

            class GetterAdapter : System.MulticastDelegate
            {
                /*0x15d6490*/ GetterAdapter(object object, nint method);
                /*0x15d65bc*/ object Invoke(object _this);
            }

            class Getter<T, R> : System.MulticastDelegate
            {
                Getter(object object, nint method);
                R Invoke(T _this);
            }

            class StaticGetter<R> : System.MulticastDelegate
            {
                StaticGetter(object object, nint method);
                R Invoke();
            }
        }

        class StrongNameKeyPair : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ byte[] _publicKey;
            /*0x18*/ string _keyPairContainer;
            /*0x20*/ bool _keyPairExported;
            /*0x28*/ byte[] _keyPairArray;

            /*0x15d65d0*/ StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15d67bc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15d6904*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        }

        namespace Emit
        {
            class AssemblyBuilder : System.Reflection.Assembly
            {
            }

            class ConstructorBuilder : System.Reflection.ConstructorInfo
            {
                /*0x15d6908*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x15d6948*/ System.Type get_DeclaringType();
                /*0x15d6988*/ string get_Name();
                /*0x15d69c8*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x15d6a08*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x15d6a48*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x15d6a88*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x15d6ac8*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x15d6b08*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d6b48*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d6b88*/ System.Type get_ReflectedType();
                /*0x15d6bc8*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            }

            class DynamicMethod : System.Reflection.MethodInfo
            {
                /*0x15d6c08*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x15d6c48*/ System.Type get_DeclaringType();
                /*0x15d6c88*/ string get_Name();
                /*0x15d6cc8*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x15d6d08*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x15d6d48*/ System.Type get_ReflectedType();
                /*0x15d6d88*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d6dc8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d6e08*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x15d6e48*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x15d6e88*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x15d6ec8*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class EnumBuilder : System.Reflection.TypeInfo
            {
                /*0x15d6f08*/ System.Reflection.Assembly get_Assembly();
                /*0x15d6f48*/ string get_AssemblyQualifiedName();
                /*0x15d6f88*/ System.Type get_BaseType();
                /*0x15d6fc8*/ string get_FullName();
                /*0x15d7008*/ System.Reflection.Module get_Module();
                /*0x15d7048*/ string get_Name();
                /*0x15d7088*/ string get_Namespace();
                /*0x15d70c8*/ System.Type get_UnderlyingSystemType();
                /*0x15d7108*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x15d7148*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d7188*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x15d71c8*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d7208*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d7248*/ System.Type GetElementType();
                /*0x15d7288*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d72c8*/ System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7308*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d7348*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7388*/ System.Type[] GetInterfaces();
                /*0x15d73c8*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d7408*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7448*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d7488*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x15d74c8*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d7508*/ bool HasElementTypeImpl();
                /*0x15d7548*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x15d7588*/ bool IsArrayImpl();
                /*0x15d75c8*/ bool IsByRefImpl();
                /*0x15d7608*/ bool IsCOMObjectImpl();
                /*0x15d7648*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x15d7688*/ bool IsPointerImpl();
                /*0x15d76c8*/ bool IsPrimitiveImpl();
            }

            class EventBuilder
            {
            }

            class FieldBuilder : System.Reflection.FieldInfo
            {
                /*0x15d7708*/ System.Reflection.FieldAttributes get_Attributes();
                /*0x15d7710*/ System.Type get_DeclaringType();
                /*0x15d7718*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x15d7720*/ System.Type get_FieldType();
                /*0x15d7728*/ string get_Name();
                /*0x15d7730*/ System.Type get_ReflectedType();
                /*0x15d7738*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d7740*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d7748*/ object GetValue(object obj);
                /*0x15d7750*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x15d7758*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            }

            class GenericTypeParameterBuilder : System.Reflection.TypeInfo
            {
                /*0x15d7798*/ System.Reflection.Assembly get_Assembly();
                /*0x15d77d8*/ string get_AssemblyQualifiedName();
                /*0x15d7818*/ System.Type get_BaseType();
                /*0x15d7858*/ string get_FullName();
                /*0x15d7898*/ System.Reflection.Module get_Module();
                /*0x15d78d8*/ string get_Name();
                /*0x15d7918*/ string get_Namespace();
                /*0x15d7958*/ System.Type get_UnderlyingSystemType();
                /*0x15d7998*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x15d79d8*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d7a18*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7a58*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d7a98*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d7ad8*/ System.Type GetElementType();
                /*0x15d7b18*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d7b58*/ System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7b98*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d7bd8*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7c18*/ System.Type[] GetInterfaces();
                /*0x15d7c58*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d7c98*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7cd8*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d7d18*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x15d7d58*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d7d98*/ bool HasElementTypeImpl();
                /*0x15d7dd8*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x15d7e18*/ bool IsArrayImpl();
                /*0x15d7e58*/ bool IsByRefImpl();
                /*0x15d7e98*/ bool IsCOMObjectImpl();
                /*0x15d7ed8*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x15d7f18*/ bool IsPointerImpl();
                /*0x15d7f58*/ bool IsPrimitiveImpl();
            }

            class ILGenerator
            {
            }

            class LocalBuilder : System.Reflection.LocalVariableInfo
            {
                /*0x20*/ string name;
                /*0x28*/ System.Reflection.Emit.ILGenerator ilgen;
                /*0x30*/ int startOffset;
                /*0x34*/ int endOffset;
            }

            class MethodBuilder : System.Reflection.MethodInfo
            {
                /*0x15d7f98*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x15d7fd8*/ System.Type get_DeclaringType();
                /*0x15d8018*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x15d8058*/ string get_Name();
                /*0x15d8098*/ System.Type get_ReflectedType();
                /*0x15d80d8*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x15d8118*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d8158*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d8198*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x15d81d8*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x15d8218*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x15d8258*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class ModuleBuilder : System.Reflection.Module
            {
            }

            class ParameterBuilder
            {
            }

            class PropertyBuilder : System.Reflection.PropertyInfo
            {
                /*0x15d8298*/ bool get_CanRead();
                /*0x15d82d8*/ bool get_CanWrite();
                /*0x15d8318*/ System.Type get_DeclaringType();
                /*0x15d8358*/ string get_Name();
                /*0x15d8398*/ System.Type get_PropertyType();
                /*0x15d83d8*/ System.Type get_ReflectedType();
                /*0x15d8418*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d8458*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d8498*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
                /*0x15d84d8*/ System.Reflection.ParameterInfo[] GetIndexParameters();
                /*0x15d8518*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
                /*0x15d8558*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
                /*0x15d8598*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x15d85d8*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            }

            class SignatureHelper
            {
            }

            class TypeBuilder : System.Reflection.TypeInfo
            {
                static int UnspecifiedTypeSize = 0;

                /*0x15d8618*/ System.Reflection.Assembly get_Assembly();
                /*0x15d8658*/ string get_AssemblyQualifiedName();
                /*0x15d8698*/ System.Type get_BaseType();
                /*0x15d86d8*/ string get_FullName();
                /*0x15d8718*/ System.Reflection.Module get_Module();
                /*0x15d8758*/ string get_Name();
                /*0x15d8798*/ string get_Namespace();
                /*0x15d87d8*/ System.Type get_UnderlyingSystemType();
                /*0x15d8818*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x15d8858*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d8898*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x15d88d8*/ object[] GetCustomAttributes(bool inherit);
                /*0x15d8918*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x15d8958*/ System.Type GetElementType();
                /*0x15d8998*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d89d8*/ System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr);
                /*0x15d8a18*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d8a58*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x15d8a98*/ System.Type[] GetInterfaces();
                /*0x15d8ad8*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d8b18*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x15d8b58*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x15d8b98*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x15d8bd8*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x15d8c18*/ bool HasElementTypeImpl();
                /*0x15d8c58*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x15d8c98*/ bool IsArrayImpl();
                /*0x15d8cd8*/ bool IsByRefImpl();
                /*0x15d8d18*/ bool IsCOMObjectImpl();
                /*0x15d8d58*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x15d8d98*/ bool IsPointerImpl();
                /*0x15d8dd8*/ bool IsPrimitiveImpl();
            }

            class UnmanagedMarshal
            {
                /*0x15d8e18*/ UnmanagedMarshal();
            }
        }
    }

    namespace Numerics
    {
        class ConstantHelper
        {
            static /*0x15d8e20*/ byte GetByteWithAllBitsSet();
            static /*0x15d8e28*/ sbyte GetSByteWithAllBitsSet();
            static /*0x15d8e30*/ ushort GetUInt16WithAllBitsSet();
            static /*0x15d8e38*/ short GetInt16WithAllBitsSet();
            static /*0x15d8e40*/ uint GetUInt32WithAllBitsSet();
            static /*0x15d8e48*/ int GetInt32WithAllBitsSet();
            static /*0x15d8e50*/ ulong GetUInt64WithAllBitsSet();
            static /*0x15d8e58*/ long GetInt64WithAllBitsSet();
            static /*0x15d8e60*/ float GetSingleWithAllBitsSet();
            static /*0x15d8e6c*/ double GetDoubleWithAllBitsSet();
        }

        struct Register
        {
            /*0x10*/ byte byte_0;
            /*0x11*/ byte byte_1;
            /*0x12*/ byte byte_2;
            /*0x13*/ byte byte_3;
            /*0x14*/ byte byte_4;
            /*0x15*/ byte byte_5;
            /*0x16*/ byte byte_6;
            /*0x17*/ byte byte_7;
            /*0x18*/ byte byte_8;
            /*0x19*/ byte byte_9;
            /*0x1a*/ byte byte_10;
            /*0x1b*/ byte byte_11;
            /*0x1c*/ byte byte_12;
            /*0x1d*/ byte byte_13;
            /*0x1e*/ byte byte_14;
            /*0x1f*/ byte byte_15;
            /*0x10*/ sbyte sbyte_0;
            /*0x11*/ sbyte sbyte_1;
            /*0x12*/ sbyte sbyte_2;
            /*0x13*/ sbyte sbyte_3;
            /*0x14*/ sbyte sbyte_4;
            /*0x15*/ sbyte sbyte_5;
            /*0x16*/ sbyte sbyte_6;
            /*0x17*/ sbyte sbyte_7;
            /*0x18*/ sbyte sbyte_8;
            /*0x19*/ sbyte sbyte_9;
            /*0x1a*/ sbyte sbyte_10;
            /*0x1b*/ sbyte sbyte_11;
            /*0x1c*/ sbyte sbyte_12;
            /*0x1d*/ sbyte sbyte_13;
            /*0x1e*/ sbyte sbyte_14;
            /*0x1f*/ sbyte sbyte_15;
            /*0x10*/ ushort uint16_0;
            /*0x12*/ ushort uint16_1;
            /*0x14*/ ushort uint16_2;
            /*0x16*/ ushort uint16_3;
            /*0x18*/ ushort uint16_4;
            /*0x1a*/ ushort uint16_5;
            /*0x1c*/ ushort uint16_6;
            /*0x1e*/ ushort uint16_7;
            /*0x10*/ short int16_0;
            /*0x12*/ short int16_1;
            /*0x14*/ short int16_2;
            /*0x16*/ short int16_3;
            /*0x18*/ short int16_4;
            /*0x1a*/ short int16_5;
            /*0x1c*/ short int16_6;
            /*0x1e*/ short int16_7;
            /*0x10*/ uint uint32_0;
            /*0x14*/ uint uint32_1;
            /*0x18*/ uint uint32_2;
            /*0x1c*/ uint uint32_3;
            /*0x10*/ int int32_0;
            /*0x14*/ int int32_1;
            /*0x18*/ int int32_2;
            /*0x1c*/ int int32_3;
            /*0x10*/ ulong uint64_0;
            /*0x18*/ ulong uint64_1;
            /*0x10*/ long int64_0;
            /*0x18*/ long int64_1;
            /*0x10*/ float single_0;
            /*0x14*/ float single_1;
            /*0x18*/ float single_2;
            /*0x1c*/ float single_3;
            /*0x10*/ double double_0;
            /*0x18*/ double double_1;
        }

        struct Vector<T> : System.IEquatable<System.Numerics.Vector<T>>, System.IFormattable
        {
            static /*0x0*/ int s_count;
            static /*0x0*/ System.Numerics.Vector<T> s_zero;
            static /*0x0*/ System.Numerics.Vector<T> s_one;
            static /*0x0*/ System.Numerics.Vector<T> s_allOnes;
            /*0x0*/ System.Numerics.Register register;

            static Vector();
            static int get_Count();
            static System.Numerics.Vector<T> get_Zero();
            static int InitializeCount();
            static bool op_Equality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static bool op_Inequality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static System.Numerics.Vector<ulong> op_Explicit(System.Numerics.Vector<T> value);
            static System.Numerics.Vector<T> Equals(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static bool ScalarEquals(T left, T right);
            static T GetOneValue();
            static T GetAllBitsSetValue();
            Vector(T value);
            Vector(void* dataPointer);
            Vector(void* dataPointer, int offset);
            Vector(ref System.Numerics.Register existingRegister);
            T get_Item(int index);
            bool Equals(object obj);
            bool Equals(System.Numerics.Vector<T> other);
            int GetHashCode();
            string ToString();
            string ToString(string format, System.IFormatProvider formatProvider);

            struct VectorSizeHelper<T>
            {
                /*0x0*/ System.Numerics.Vector<T> _placeholder;
                /*0x0*/ byte _byte;
            }
        }

        class Vector
        {
            static System.Numerics.Vector<T> Equals<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x15d8e74*/ bool get_IsHardwareAccelerated();
            static System.Numerics.Vector<ulong> AsVectorUInt64<T>(System.Numerics.Vector<T> value);
        }

        namespace Hashing
        {
            class HashHelpers
            {
                static /*0x0*/ int RandomSeed;

                static /*0x15d8e8c*/ HashHelpers();
                static /*0x15d8e7c*/ int Combine(int h1, int h2);
            }
        }
    }

    namespace IO
    {
        class DirectoryNotFoundException : System.IO.IOException
        {
            /*0x15d8f1c*/ DirectoryNotFoundException();
            /*0x15d8f9c*/ DirectoryNotFoundException(string message);
            /*0x15d8fc0*/ DirectoryNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class EndOfStreamException : System.IO.IOException
        {
            /*0x15d8fd0*/ EndOfStreamException();
            /*0x15d902c*/ EndOfStreamException(string message);
            /*0x15d9050*/ EndOfStreamException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Error
        {
            static /*0x15d9058*/ System.Exception GetStreamIsClosed();
            static /*0x15d90d0*/ System.Exception GetEndOfFile();
            static /*0x15d9150*/ System.Exception GetReadNotSupported();
            static /*0x15d91c4*/ System.Exception GetWriteNotSupported();
        }

        enum FileAccess
        {
            Read = 1,
            Write = 2,
            ReadWrite = 3,
        }

        class FileLoadException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            static /*0x15d92dc*/ string FormatFileLoadExceptionMessage(string fileName, int hResult);
            /*0x15d9238*/ FileLoadException();
            /*0x15d9294*/ FileLoadException(string message);
            /*0x15d9544*/ FileLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15d92b8*/ string get_Message();
            /*0x15d9350*/ string get_FileName();
            /*0x15d9358*/ string get_FusionLog();
            /*0x15d9360*/ string ToString();
            /*0x15d95f4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileMode
        {
            CreateNew = 1,
            Create = 2,
            Open = 3,
            OpenOrCreate = 4,
            Truncate = 5,
            Append = 6,
        }

        class FileNotFoundException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            /*0x15d970c*/ FileNotFoundException();
            /*0x15d9768*/ FileNotFoundException(string message);
            /*0x15d978c*/ FileNotFoundException(string message, string fileName);
            /*0x15d9a44*/ FileNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15d97c0*/ string get_Message();
            /*0x15d97d8*/ void SetMessageField();
            /*0x15d9850*/ string get_FileName();
            /*0x15d9858*/ string get_FusionLog();
            /*0x15d9860*/ string ToString();
            /*0x15d9af4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileOptions
        {
            None = 0,
            WriteThrough = -2147483648,
            Asynchronous = 1073741824,
            RandomAccess = 268435456,
            DeleteOnClose = 67108864,
            SequentialScan = 134217728,
            Encrypted = 16384,
        }

        enum FileShare
        {
            None = 0,
            Read = 1,
            Write = 2,
            ReadWrite = 3,
            Delete = 4,
            Inheritable = 16,
        }

        class IOException : System.SystemException
        {
            /*0x15d9c0c*/ IOException();
            /*0x15d8f78*/ IOException(string message);
            /*0x15d9c68*/ IOException(string message, int hresult);
            /*0x15d9c90*/ IOException(string message, System.Exception innerException);
            /*0x15d8fc8*/ IOException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemoryStream : System.IO.Stream
        {
            /*0x28*/ byte[] _buffer;
            /*0x30*/ int _origin;
            /*0x34*/ int _position;
            /*0x38*/ int _length;
            /*0x3c*/ int _capacity;
            /*0x40*/ bool _expandable;
            /*0x41*/ bool _writable;
            /*0x42*/ bool _exposable;
            /*0x43*/ bool _isOpen;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x15d9cb4*/ MemoryStream();
            /*0x15d9cbc*/ MemoryStream(int capacity);
            /*0x15d9e24*/ MemoryStream(byte[] buffer);
            /*0x15d9e2c*/ MemoryStream(byte[] buffer, bool writable);
            /*0x15d9f1c*/ MemoryStream(byte[] buffer, int index, int count);
            /*0x15d9f28*/ MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible);
            /*0x15da100*/ bool get_CanRead();
            /*0x15da108*/ bool get_CanSeek();
            /*0x15da110*/ bool get_CanWrite();
            /*0x15da118*/ void EnsureNotClosed();
            /*0x15da14c*/ void EnsureWriteable();
            /*0x15da188*/ void Dispose(bool disposing);
            /*0x15da19c*/ bool EnsureCapacity(int value);
            /*0x15da24c*/ void Flush();
            /*0x15da250*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x15da3c4*/ byte[] GetBuffer();
            /*0x15da428*/ byte[] InternalGetBuffer();
            /*0x15da430*/ int InternalGetPosition();
            /*0x15da438*/ int InternalReadInt32();
            /*0x15da4f0*/ int InternalEmulateRead(int count);
            /*0x15da52c*/ int get_Capacity();
            /*0x15da54c*/ void set_Capacity(int value);
            /*0x15da6cc*/ long get_Length();
            /*0x15da6f0*/ long get_Position();
            /*0x15da710*/ void set_Position(long value);
            /*0x15da7e0*/ int Read(byte[] buffer, int offset, int count);
            /*0x15da9d4*/ int Read(System.Span<byte> buffer);
            /*0x15dae60*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x15db1c8*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15db4a4*/ int ReadByte();
            /*0x15db4fc*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x15db654*/ void SetLength(long value);
            /*0x15db734*/ byte[] ToArray();
            /*0x15db810*/ void Write(byte[] buffer, int offset, int count);
            /*0x15dbaa8*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x15dbec0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x15dc1c8*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15dc424*/ void WriteByte(byte value);
        }

        class PathInternal
        {
            static /*0x0*/ bool s_isCaseSensitive;

            static /*0x15dce2c*/ PathInternal();
            static /*0x15dc4e0*/ int GetRootLength(System.ReadOnlySpan<char> path);
            static /*0x15dc55c*/ bool IsDirectorySeparator(char c);
            static /*0x15dc56c*/ bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x15dc5f4*/ bool StartsWithDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x15dc670*/ string TrimEndingDirectorySeparator(string path);
            static /*0x15dc82c*/ System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0x15dc7b0*/ bool IsRoot(System.ReadOnlySpan<char> path);
            static /*0x15dc90c*/ bool get_IsCaseSensitive();
            static /*0x15dc964*/ bool GetIsCaseSensitive();
            static /*0x15dce24*/ bool IsPartiallyQualified(string path);
        }

        class PathTooLongException : System.IO.IOException
        {
            /*0x15dce7c*/ PathTooLongException();
            /*0x15dced8*/ PathTooLongException(string message);
            /*0x15dcefc*/ PathTooLongException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class PinnedBufferMemoryStream : System.IO.UnmanagedMemoryStream
        {
            /*0x68*/ byte[] _array;
            /*0x70*/ System.Runtime.InteropServices.GCHandle _pinningHandle;

            /*0x15dcf04*/ PinnedBufferMemoryStream(byte[] array);
            /*0x15dd224*/ int Read(System.Span<byte> buffer);
            /*0x15dd454*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x15dd754*/ void Finalize();
            /*0x15dd7f8*/ void Dispose(bool disposing);
        }

        enum SeekOrigin
        {
            Begin = 0,
            Current = 1,
            End = 2,
        }

        class StreamReader : System.IO.TextReader
        {
            static /*0x0*/ System.IO.StreamReader Null;
            /*0x18*/ System.IO.Stream _stream;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Decoder _decoder;
            /*0x30*/ byte[] _byteBuffer;
            /*0x38*/ char[] _charBuffer;
            /*0x40*/ int _charPos;
            /*0x44*/ int _charLen;
            /*0x48*/ int _byteLen;
            /*0x4c*/ int _bytePos;
            /*0x50*/ int _maxCharsPerBuffer;
            /*0x54*/ bool _detectEncoding;
            /*0x55*/ bool _checkPreamble;
            /*0x56*/ bool _isBlocked;
            /*0x57*/ bool _closable;
            /*0x58*/ System.Threading.Tasks.Task _asyncReadTask;

            static /*0x15dfdb0*/ StreamReader();
            static /*0x15dd8a8*/ void ThrowAsyncIOInProgress();
            /*0x15dd8f8*/ StreamReader();
            /*0x15dd9bc*/ StreamReader(System.IO.Stream stream);
            /*0x15dd9f8*/ StreamReader(System.IO.Stream stream, bool detectEncodingFromByteOrderMarks);
            /*0x15ddc60*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x15dda38*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x15ddd98*/ StreamReader(string path);
            /*0x15dddd0*/ StreamReader(string path, bool detectEncodingFromByteOrderMarks);
            /*0x15de058*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);
            /*0x15dde0c*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);
            /*0x15dd844*/ void CheckAsyncTaskInProgress();
            /*0x15ddc70*/ void Init(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x15de064*/ void Init(System.IO.Stream stream);
            /*0x15de074*/ void Close();
            /*0x15de084*/ void Dispose(bool disposing);
            /*0x15de164*/ System.Text.Encoding get_CurrentEncoding();
            /*0x15de16c*/ System.IO.Stream get_BaseStream();
            /*0x15de154*/ bool get_LeaveOpen();
            /*0x15de174*/ int Peek();
            /*0x15de23c*/ int Read();
            /*0x15de304*/ int Read(char[] buffer, int index, int count);
            /*0x15de72c*/ int Read(System.Span<char> buffer);
            /*0x15de4c4*/ int ReadSpan(System.Span<char> buffer);
            /*0x15dedac*/ string ReadToEnd();
            /*0x15deec8*/ void CompressBuffer(int n);
            /*0x15def0c*/ void DetectEncoding();
            /*0x15df1c4*/ bool IsPreamble();
            /*0x15df2f4*/ int ReadBuffer();
            /*0x15dea9c*/ int ReadBuffer(System.Span<char> userBuffer, ref bool readToUserBuffer);
            /*0x15df460*/ string ReadLine();
            /*0x15df6c0*/ System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count);
            /*0x15dfbac*/ System.Threading.Tasks.ValueTask<int> ReadAsyncInternal(System.Memory<char> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15dfca8*/ System.Threading.Tasks.Task<int> ReadBufferAsync();
            /*0x15dfda0*/ bool DataAvailable();

            class NullStreamReader : System.IO.StreamReader
            {
                /*0x15dfe24*/ NullStreamReader();
                /*0x15dfeb8*/ System.IO.Stream get_BaseStream();
                /*0x15dff10*/ System.Text.Encoding get_CurrentEncoding();
                /*0x15dff18*/ void Dispose(bool disposing);
                /*0x15dff1c*/ int Peek();
                /*0x15dff24*/ int Read();
                /*0x15dff2c*/ int Read(char[] buffer, int index, int count);
                /*0x15dff34*/ string ReadLine();
                /*0x15dff3c*/ string ReadToEnd();
                /*0x15dff84*/ int ReadBuffer();
            }

            struct <ReadAsyncInternal>d__66 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int> <>t__builder;
                /*0x38*/ System.IO.StreamReader <>4__this;
                /*0x40*/ System.Memory<char> buffer;
                /*0x50*/ System.Threading.CancellationToken cancellationToken;
                /*0x58*/ int <charsRead>5__2;
                /*0x5c*/ bool <readToUserBuffer>5__3;
                /*0x60*/ byte[] <tmpByteBuffer>5__4;
                /*0x68*/ System.IO.Stream <tmpStream>5__5;
                /*0x70*/ int <count>5__6;
                /*0x78*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int> <>u__1;
                /*0x88*/ int <n>5__7;
                /*0x90*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<int> <>u__2;

                /*0x15dff8c*/ void MoveNext();
                /*0x15e0aac*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <ReadBufferAsync>d__69 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                /*0x30*/ System.IO.StreamReader <>4__this;
                /*0x38*/ byte[] <tmpByteBuffer>5__2;
                /*0x40*/ System.IO.Stream <tmpStream>5__3;
                /*0x48*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter<int> <>u__1;

                /*0x15e0b04*/ void MoveNext();
                /*0x15e10fc*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class StreamWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.IO.StreamWriter Null;
            /*0x30*/ System.IO.Stream _stream;
            /*0x38*/ System.Text.Encoding _encoding;
            /*0x40*/ System.Text.Encoder _encoder;
            /*0x48*/ byte[] _byteBuffer;
            /*0x50*/ char[] _charBuffer;
            /*0x58*/ int _charPos;
            /*0x5c*/ int _charLen;
            /*0x60*/ bool _autoFlush;
            /*0x61*/ bool _haveWrittenPreamble;
            /*0x62*/ bool _closable;
            /*0x68*/ System.Threading.Tasks.Task _asyncWriteTask;

            static /*0x15e4428*/ StreamWriter();
            static /*0x15e11b8*/ void ThrowAsyncIOInProgress();
            static /*0x15e1208*/ System.Text.Encoding get_UTF8NoBOM();
            static /*0x15e3104*/ System.Threading.Tasks.Task WriteAsyncInternal(System.IO.StreamWriter _this, char value, char[] charBuffer, int charPos, int charLen, char[] coreNewLine, bool autoFlush, bool appendNewLine);
            static /*0x15e3668*/ System.Threading.Tasks.Task WriteAsyncInternal(System.IO.StreamWriter _this, string value, char[] charBuffer, int charPos, int charLen, char[] coreNewLine, bool autoFlush, bool appendNewLine);
            static /*0x15e3ce0*/ System.Threading.Tasks.Task WriteAsyncInternal(System.IO.StreamWriter _this, System.ReadOnlyMemory<char> source, char[] charBuffer, int charPos, int charLen, char[] coreNewLine, bool autoFlush, bool appendNewLine, System.Threading.CancellationToken cancellationToken);
            static /*0x15e42f4*/ System.Threading.Tasks.Task FlushAsyncInternal(System.IO.StreamWriter _this, bool flushStream, bool flushEncoder, char[] charBuffer, int charPos, bool haveWrittenPreamble, System.Text.Encoding encoding, System.Text.Encoder encoder, byte[] byteBuffer, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);
            /*0x15e1258*/ StreamWriter();
            /*0x15e139c*/ StreamWriter(System.IO.Stream stream);
            /*0x15e1628*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x15e1634*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize);
            /*0x15e1410*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen);
            /*0x15e1774*/ StreamWriter(string path);
            /*0x15e1a38*/ StreamWriter(string path, bool append);
            /*0x15e17e8*/ StreamWriter(string path, bool append, System.Text.Encoding encoding, int bufferSize);
            /*0x15e1154*/ void CheckAsyncTaskInProgress();
            /*0x15e163c*/ void Init(System.IO.Stream streamArg, System.Text.Encoding encodingArg, int bufferSize, bool shouldLeaveOpen);
            /*0x15e1b2c*/ void Close();
            /*0x15e1b98*/ void Dispose(bool disposing);
            /*0x15e1dac*/ void Flush();
            /*0x15e1c2c*/ void Flush(bool flushStream, bool flushEncoder);
            /*0x15e1dcc*/ void set_AutoFlush(bool value);
            /*0x15e1e10*/ System.IO.Stream get_BaseStream();
            /*0x15e1e18*/ bool get_LeaveOpen();
            /*0x15e1e28*/ System.Text.Encoding get_Encoding();
            /*0x15e1e30*/ void Write(char value);
            /*0x15e1ebc*/ void Write(char[] buffer);
            /*0x15e2124*/ void Write(char[] buffer, int index, int count);
            /*0x15e24fc*/ void WriteSpan(System.ReadOnlySpan<char> buffer, bool appendNewLine);
            /*0x15e27c4*/ void Write(string value);
            /*0x15e2a30*/ void WriteLine(string value);
            /*0x15e2d2c*/ System.Threading.Tasks.Task WriteAsync(char value);
            /*0x15e3228*/ System.Threading.Tasks.Task WriteAsync(string value);
            /*0x15e3794*/ System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count);
            /*0x15e3e40*/ System.Threading.Tasks.Task FlushAsync();
            /*0x15e42e0*/ void set_CharPos_Prop(int value);
            /*0x15e42e8*/ void set_HaveWrittenPreamble_Prop(bool value);
            /*0x15e416c*/ System.Threading.Tasks.Task FlushAsyncInternal(bool flushStream, bool flushEncoder, char[] sCharBuffer, int sCharPos, System.Threading.CancellationToken cancellationToken);

            struct <WriteAsyncInternal>d__57 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ int charPos;
                /*0x34*/ int charLen;
                /*0x38*/ System.IO.StreamWriter _this;
                /*0x40*/ char[] charBuffer;
                /*0x48*/ char value;
                /*0x4a*/ bool appendNewLine;
                /*0x50*/ char[] coreNewLine;
                /*0x58*/ bool autoFlush;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x70*/ int <i>5__2;

                /*0x15e44dc*/ void MoveNext();
                /*0x15e48e4*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <WriteAsyncInternal>d__59 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ string value;
                /*0x38*/ int charPos;
                /*0x3c*/ int charLen;
                /*0x40*/ System.IO.StreamWriter _this;
                /*0x48*/ char[] charBuffer;
                /*0x50*/ bool appendNewLine;
                /*0x58*/ char[] coreNewLine;
                /*0x60*/ bool autoFlush;
                /*0x64*/ int <count>5__2;
                /*0x68*/ int <index>5__3;
                /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x80*/ int <i>5__4;

                /*0x15e48f0*/ void MoveNext();
                /*0x15e4d50*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <WriteAsyncInternal>d__62 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ int charPos;
                /*0x34*/ int charLen;
                /*0x38*/ System.IO.StreamWriter _this;
                /*0x40*/ char[] charBuffer;
                /*0x48*/ System.Threading.CancellationToken cancellationToken;
                /*0x50*/ System.ReadOnlyMemory<char> source;
                /*0x60*/ bool appendNewLine;
                /*0x68*/ char[] coreNewLine;
                /*0x70*/ bool autoFlush;
                /*0x74*/ int <copied>5__2;
                /*0x78*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;
                /*0x88*/ int <i>5__3;

                /*0x15e4d5c*/ void MoveNext();
                /*0x15e533c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <FlushAsyncInternal>d__74 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ bool haveWrittenPreamble;
                /*0x38*/ System.IO.StreamWriter _this;
                /*0x40*/ System.Text.Encoding encoding;
                /*0x48*/ System.IO.Stream stream;
                /*0x50*/ System.Threading.CancellationToken cancellationToken;
                /*0x58*/ System.Text.Encoder encoder;
                /*0x60*/ char[] charBuffer;
                /*0x68*/ int charPos;
                /*0x70*/ byte[] byteBuffer;
                /*0x78*/ bool flushEncoder;
                /*0x79*/ bool flushStream;
                /*0x80*/ System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter <>u__1;
                /*0x90*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;

                /*0x15e5348*/ void MoveNext();
                /*0x15e5a6c*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class TextReader : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextReader Null;

            static /*0x15e6254*/ TextReader();
            static /*0x15e6128*/ System.IO.TextReader Synchronized(System.IO.TextReader reader);
            /*0x15dd9b4*/ TextReader();
            /*0x15e5a78*/ void Close();
            /*0x15e5ae4*/ void Dispose();
            /*0x15e5b50*/ void Dispose(bool disposing);
            /*0x15e5b54*/ int Peek();
            /*0x15e5b5c*/ int Read();
            /*0x15e5b64*/ int Read(char[] buffer, int index, int count);
            /*0x15de80c*/ int Read(System.Span<char> buffer);
            /*0x15e5d20*/ string ReadToEnd();
            /*0x15e5e1c*/ string ReadLine();
            /*0x15df9a4*/ System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count);
            /*0x15e5f0c*/ System.Threading.Tasks.ValueTask<int> ReadAsyncInternal(System.Memory<char> buffer, System.Threading.CancellationToken cancellationToken);

            class NullTextReader : System.IO.TextReader
            {
                /*0x15e62c8*/ NullTextReader();
                /*0x15e6320*/ int Read(char[] buffer, int index, int count);
                /*0x15e6328*/ string ReadLine();
            }

            class SyncTextReader : System.IO.TextReader
            {
                /*0x18*/ System.IO.TextReader _in;

                /*0x15e61e8*/ SyncTextReader(System.IO.TextReader t);
                /*0x15e6330*/ void Close();
                /*0x15e6350*/ void Dispose(bool disposing);
                /*0x15e6404*/ int Peek();
                /*0x15e6424*/ int Read();
                /*0x15e6444*/ int Read(char[] buffer, int index, int count);
                /*0x15e6464*/ string ReadLine();
                /*0x15e6488*/ string ReadToEnd();
                /*0x15e64ac*/ System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count);
            }

            class <>c
            {
                static /*0x0*/ System.IO.TextReader.<> <>9;
                static /*0x8*/ System.Func<object, int> <>9__17_0;

                static /*0x15e667c*/ <>c();
                /*0x15e66e0*/ <>c();
                /*0x15e66e8*/ int <ReadAsyncInternal>b__17_0(object state);
            }
        }

        class TextWriter : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextWriter Null;
            static /*0x8*/ char[] s_coreNewLine;
            /*0x18*/ char[] CoreNewLine;
            /*0x20*/ string CoreNewLineStr;
            /*0x28*/ System.IFormatProvider _internalFormatProvider;

            static /*0x15e6d30*/ TextWriter();
            static /*0x15e6bf4*/ System.IO.TextWriter Synchronized(System.IO.TextWriter writer);
            /*0x15e1ab0*/ TextWriter();
            /*0x15e1314*/ TextWriter(System.IFormatProvider formatProvider);
            /*0x15e67d8*/ System.IFormatProvider get_FormatProvider();
            /*0x15e6840*/ void Close();
            /*0x15e68ac*/ void Dispose(bool disposing);
            /*0x15e68b0*/ void Dispose();
            /*0x15e691c*/ void Flush();
            System.Text.Encoding get_Encoding();
            /*0x15e6920*/ string get_NewLine();
            /*0x15e6928*/ void Write(char value);
            /*0x15e692c*/ void Write(char[] buffer);
            /*0x15e694c*/ void Write(char[] buffer, int index, int count);
            /*0x15e6b00*/ void Write(string value);
            /*0x15e6b38*/ void Write(string format, object arg0, object arg1, object arg2);
            /*0x15e6ba4*/ void WriteLine();
            /*0x15e6bb8*/ void WriteLine(string value);
            /*0x15e2ec4*/ System.Threading.Tasks.Task WriteAsync(char value);
            /*0x15e3428*/ System.Threading.Tasks.Task WriteAsync(string value);
            /*0x15e3a90*/ System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count);
            /*0x15e3f78*/ System.Threading.Tasks.Task FlushAsync();

            class NullTextWriter : System.IO.TextWriter
            {
                /*0x15e6dc4*/ NullTextWriter();
                /*0x15e6e50*/ System.Text.Encoding get_Encoding();
                /*0x15e6e58*/ void Write(char[] buffer, int index, int count);
                /*0x15e6e5c*/ void Write(string value);
                /*0x15e6e60*/ void WriteLine();
                /*0x15e6e64*/ void WriteLine(string value);
                /*0x15e6e68*/ void Write(char value);
            }

            class SyncTextWriter : System.IO.TextWriter, System.IDisposable
            {
                /*0x30*/ System.IO.TextWriter _out;

                /*0x15e6cb4*/ SyncTextWriter(System.IO.TextWriter t);
                /*0x15e6e6c*/ System.Text.Encoding get_Encoding();
                /*0x15e6e8c*/ System.IFormatProvider get_FormatProvider();
                /*0x15e6eac*/ string get_NewLine();
                /*0x15e6ecc*/ void Close();
                /*0x15e6eec*/ void Dispose(bool disposing);
                /*0x15e6fa0*/ void Flush();
                /*0x15e6fc0*/ void Write(char value);
                /*0x15e6fe4*/ void Write(char[] buffer);
                /*0x15e7008*/ void Write(char[] buffer, int index, int count);
                /*0x15e702c*/ void Write(string value);
                /*0x15e7050*/ void Write(string format, object arg0, object arg1, object arg2);
                /*0x15e7074*/ void WriteLine();
                /*0x15e7098*/ void WriteLine(string value);
                /*0x15e70bc*/ System.Threading.Tasks.Task WriteAsync(char value);
                /*0x15e716c*/ System.Threading.Tasks.Task WriteAsync(string value);
                /*0x15e721c*/ System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count);
                /*0x15e72e4*/ System.Threading.Tasks.Task FlushAsync();
            }

            class <>c
            {
                static /*0x0*/ System.IO.TextWriter.<> <>9;
                static /*0x8*/ System.Action<object> <>9__56_0;
                static /*0x10*/ System.Action<object> <>9__57_0;
                static /*0x18*/ System.Action<object> <>9__59_0;
                static /*0x20*/ System.Action<object> <>9__67_0;

                static /*0x15e7380*/ <>c();
                /*0x15e73e4*/ <>c();
                /*0x15e73ec*/ void <WriteAsync>b__56_0(object state);
                /*0x15e7498*/ void <WriteAsync>b__57_0(object state);
                /*0x15e7544*/ void <WriteAsync>b__59_0(object state);
                /*0x15e760c*/ void <FlushAsync>b__67_0(object state);
            }
        }

        class UnmanagedMemoryStream : System.IO.Stream
        {
            /*0x28*/ System.Runtime.InteropServices.SafeBuffer _buffer;
            /*0x30*/ byte* _mem;
            /*0x38*/ long _length;
            /*0x40*/ long _capacity;
            /*0x48*/ long _position;
            /*0x50*/ long _offset;
            /*0x58*/ System.IO.FileAccess _access;
            /*0x5c*/ bool _isOpen;
            /*0x60*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x15dcfb8*/ UnmanagedMemoryStream();
            /*0x15e76b8*/ UnmanagedMemoryStream(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0x15dd01c*/ void Initialize(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0x15e7748*/ bool get_CanRead();
            /*0x15e7764*/ bool get_CanSeek();
            /*0x15e776c*/ bool get_CanWrite();
            /*0x15dd838*/ void Dispose(bool disposing);
            /*0x15e778c*/ void EnsureNotClosed();
            /*0x15e77c0*/ void EnsureReadable();
            /*0x15e77fc*/ void EnsureWriteable();
            /*0x15e7838*/ void Flush();
            /*0x15e783c*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x15e79b0*/ long get_Length();
            /*0x15e79cc*/ long get_Position();
            /*0x15e7a14*/ void set_Position(long value);
            /*0x15e7abc*/ byte* get_PositionPointer();
            /*0x15e7b7c*/ int Read(byte[] buffer, int offset, int count);
            /*0x15e7d3c*/ int Read(System.Span<byte> buffer);
            /*0x15dd228*/ int ReadCore(System.Span<byte> buffer);
            /*0x15e7e1c*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x15e812c*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15e83c0*/ int ReadByte();
            /*0x15e8520*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x15e8630*/ void SetLength(long value);
            /*0x15e87c0*/ void Write(byte[] buffer, int offset, int count);
            /*0x15e89ac*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x15dd458*/ void WriteCore(System.ReadOnlySpan<byte> buffer);
            /*0x15e8a8c*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x15e8d4c*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15e8f60*/ void WriteByte(byte value);
        }

        class DriveNotFoundException : System.IO.IOException
        {
            /*0x15e9188*/ DriveNotFoundException();
            /*0x15e91e4*/ DriveNotFoundException(string message);
            /*0x15e9208*/ DriveNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Directory
        {
            static /*0x15e9210*/ System.IO.DirectoryInfo CreateDirectory(string path);
            static /*0x15e9988*/ bool Exists(string path);
            static /*0x15e9b24*/ string[] GetFiles(string path, string searchPattern);
            static /*0x15e9bc4*/ string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x15e9c2c*/ System.Collections.Generic.IEnumerable<string> InternalEnumeratePaths(string path, string searchPattern, System.IO.SearchTarget searchTarget, System.IO.EnumerationOptions options);
            static /*0x15e9df8*/ System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);
            static /*0x15e9ea4*/ System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0x15e9eb0*/ string InternalGetDirectoryRoot(string path);
            static /*0x15e9f68*/ string GetCurrentDirectory();
            static /*0x15e9f70*/ void Delete(string path, bool recursive);
            static /*0x15ea0a0*/ string InsecureGetCurrentDirectory();
        }

        class DirectoryInfo : System.IO.FileSystemInfo
        {
            /*0x15ea13c*/ DirectoryInfo(string path);
            /*0x15e9940*/ DirectoryInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x15ea4c4*/ DirectoryInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15ea234*/ void Init(string originalPath, string fullPath, string fileName, bool isNormalized);
        }

        class EnumerationOptions
        {
            static /*0x0*/ System.IO.EnumerationOptions <Compatible>k__BackingField;
            static /*0x8*/ System.IO.EnumerationOptions <CompatibleRecursive>k__BackingField;
            static /*0x10*/ System.IO.EnumerationOptions <Default>k__BackingField;
            /*0x10*/ bool <RecurseSubdirectories>k__BackingField;
            /*0x11*/ bool <IgnoreInaccessible>k__BackingField;
            /*0x14*/ System.IO.FileAttributes <AttributesToSkip>k__BackingField;
            /*0x18*/ System.IO.MatchType <MatchType>k__BackingField;
            /*0x1c*/ System.IO.MatchCasing <MatchCasing>k__BackingField;
            /*0x20*/ bool <ReturnSpecialDirectories>k__BackingField;

            static /*0x15ea73c*/ EnumerationOptions();
            static /*0x15ea60c*/ System.IO.EnumerationOptions get_Compatible();
            static /*0x15ea664*/ System.IO.EnumerationOptions get_Default();
            /*0x15ea6bc*/ EnumerationOptions();
            /*0x15ea6e4*/ bool get_RecurseSubdirectories();
            /*0x15ea6ec*/ void set_RecurseSubdirectories(bool value);
            /*0x15ea6f8*/ bool get_IgnoreInaccessible();
            /*0x15ea700*/ void set_IgnoreInaccessible(bool value);
            /*0x15ea70c*/ System.IO.FileAttributes get_AttributesToSkip();
            /*0x15ea714*/ void set_AttributesToSkip(System.IO.FileAttributes value);
            /*0x15ea71c*/ System.IO.MatchType get_MatchType();
            /*0x15ea724*/ void set_MatchType(System.IO.MatchType value);
            /*0x15ea72c*/ System.IO.MatchCasing get_MatchCasing();
            /*0x15ea734*/ bool get_ReturnSpecialDirectories();
        }

        class File
        {
            static /*0x15ea814*/ System.IO.StreamReader OpenText(string path);
            static /*0x15ea8dc*/ System.IO.FileStream Create(string path);
            static /*0x15ea8e4*/ System.IO.FileStream Create(string path, int bufferSize);
            static /*0x15ea964*/ void Delete(string path);
            static /*0x15dcc68*/ bool Exists(string path);
            static /*0x15eac38*/ System.IO.FileStream Open(string path, System.IO.FileMode mode);
            static /*0x15eac4c*/ System.IO.FileStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            static /*0x15eacd8*/ System.IO.FileStream OpenRead(string path);
            static /*0x15ead48*/ System.IO.FileStream OpenWrite(string path);
            static /*0x15eadb8*/ string ReadAllText(string path);
            static /*0x15eae84*/ string InternalReadAllText(string path, System.Text.Encoding encoding);
            static /*0x15eb030*/ void WriteAllText(string path, string contents);
            static /*0x15eb26c*/ byte[] ReadAllBytes(string path);
            static /*0x15eb52c*/ byte[] ReadAllBytesUnknownLength(System.IO.FileStream fs);
        }

        class FileInfo : System.IO.FileSystemInfo
        {
            /*0x15eb99c*/ FileInfo();
            /*0x15eb9a0*/ FileInfo(string fileName);
            /*0x15eb9b0*/ FileInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0x15ebed0*/ FileInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15ebad8*/ long get_Length();
            /*0x15ebcb0*/ string get_DirectoryName();
            /*0x15ebd0c*/ System.IO.DirectoryInfo get_Directory();
            /*0x15ebd84*/ System.IO.StreamWriter CreateText();
            /*0x15ebdec*/ System.IO.StreamWriter AppendText();
            /*0x15ebe54*/ System.IO.FileStream OpenRead();
            /*0x15ebed4*/ string get_Name();
        }

        struct FileStatus
        {
            /*0x10*/ Interop.Sys.FileStatus _fileStatus;
            /*0x80*/ int _fileStatusInitialized;
            /*0x84*/ bool <InitiallyDirectory>k__BackingField;
            /*0x85*/ bool _isDirectory;
            /*0x86*/ bool _exists;

            static /*0x15ebef0*/ void Initialize(ref System.IO.FileStatus status, bool isDirectory);
            /*0x15ebedc*/ bool get_InitiallyDirectory();
            /*0x15ebee4*/ void set_InitiallyDirectory(bool value);
            /*0x15ebf04*/ bool IsReadOnly(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x15ec0b0*/ System.IO.FileAttributes GetAttributes(System.ReadOnlySpan<char> path, System.ReadOnlySpan<char> fileName);
            /*0x15ec198*/ bool GetExists(System.ReadOnlySpan<char> path);
            /*0x15ec370*/ long GetLength(System.ReadOnlySpan<char> path, bool continueOnError);
            /*0x15ec1dc*/ void Refresh(System.ReadOnlySpan<char> path);
            /*0x15ebff4*/ void EnsureStatInitialized(System.ReadOnlySpan<char> path, bool continueOnError);
        }

        class FileSystem
        {
            static /*0x15eaa10*/ void DeleteFile(string fullPath);
            static /*0x15e9360*/ void CreateDirectory(string fullPath);
            static /*0x15e9fdc*/ void RemoveDirectory(string fullPath, bool recursive);
            static /*0x15ec4a8*/ void RemoveDirectoryInternal(System.IO.DirectoryInfo directory, bool recursive, bool throwOnTopLevelDirectoryNotFound);
            static /*0x15e9b04*/ bool DirectoryExists(System.ReadOnlySpan<char> fullPath);
            static /*0x15ec49c*/ bool DirectoryExists(System.ReadOnlySpan<char> fullPath, ref Interop.ErrorInfo errorInfo);
            static /*0x15eabbc*/ bool FileExists(System.ReadOnlySpan<char> fullPath);
            static /*0x15ec38c*/ bool FileExists(System.ReadOnlySpan<char> fullPath, int fileType, ref Interop.ErrorInfo errorInfo);
            static /*0x15ecb38*/ bool ShouldIgnoreDirectory(string name);
        }

        class FileSystemInfo : System.MarshalByRefObject, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ System.IO.FileStatus _fileStatus;
            /*0x90*/ string FullPath;
            /*0x98*/ string OriginalPath;
            /*0xa0*/ string _name;

            /*0x15ea1c0*/ FileSystemInfo();
            /*0x15ea4c8*/ FileSystemInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15ebb60*/ System.IO.FileAttributes get_Attributes();
            /*0x15ecbbc*/ bool get_ExistsCore();
            /*0x15ebc30*/ long get_LengthCore();
            /*0x15ecc54*/ string get_NormalizedPath();
            /*0x15ecc5c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x15ecda4*/ string get_FullName();
            /*0x15ecdac*/ string get_Name();
            /*0x15ecdb4*/ bool get_Exists();
            /*0x15ece3c*/ string ToString();
        }

        enum MatchCasing
        {
            PlatformDefault = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
        }

        enum MatchType
        {
            Simple = 0,
            Win32 = 1,
        }

        enum SearchTarget
        {
            Files = 1,
            Directories = 2,
            Both = 3,
        }

        enum FileAttributes
        {
            ReadOnly = 1,
            Hidden = 2,
            System = 4,
            Directory = 16,
            Archive = 32,
            Device = 64,
            Normal = 128,
            Temporary = 256,
            SparseFile = 512,
            ReparsePoint = 1024,
            Compressed = 2048,
            Offline = 4096,
            NotContentIndexed = 8192,
            Encrypted = 16384,
            IntegrityStream = 32768,
            NoScrubData = 131072,
        }

        class Stream : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.Stream Null;
            /*0x18*/ System.IO.Stream.ReadWriteTask _activeReadWriteTask;
            /*0x20*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            static /*0x15eedcc*/ Stream();
            static /*0x15eec4c*/ int BlockingEndRead(System.IAsyncResult asyncResult);
            static /*0x15eedc4*/ void BlockingEndWrite(System.IAsyncResult asyncResult);
            static /*0x15ede80*/ System.Threading.Tasks.ValueTask<int> <ReadAsync>g__FinishReadAsync|44_0(System.Threading.Tasks.Task<int> readTask, byte[] localBuffer, System.Memory<byte> localDestination);
            /*0x15d9e1c*/ Stream();
            /*0x15ece90*/ System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized();
            bool get_CanRead();
            bool get_CanSeek();
            /*0x15ecf88*/ bool get_CanTimeout();
            bool get_CanWrite();
            long get_Length();
            long get_Position();
            void set_Position(long value);
            /*0x15ecf90*/ int get_ReadTimeout();
            /*0x15ecfe0*/ void set_ReadTimeout(int value);
            /*0x15ed030*/ int get_WriteTimeout();
            /*0x15ed080*/ void set_WriteTimeout(int value);
            /*0x15ed0d0*/ void Close();
            /*0x15ed140*/ void Dispose();
            /*0x15e7788*/ void Dispose(bool disposing);
            void Flush();
            /*0x15ed150*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x15ed314*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x15ed334*/ System.IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0x15ed74c*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x15ed918*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count);
            /*0x15ed9ac*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x15edc20*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15eda68*/ System.Threading.Tasks.Task<int> BeginEndReadAsync(byte[] buffer, int offset, int count);
            /*0x15edf88*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x15edfa8*/ System.IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0x15ed514*/ void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x15ed698*/ void RunReadWriteTask(System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x15ee188*/ void FinishTrackingAsyncOperation();
            /*0x15ee1ac*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x15ee368*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count);
            /*0x15ee3fc*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x15ee65c*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
            /*0x15ee8d4*/ System.Threading.Tasks.Task FinishWriteAsync(System.Threading.Tasks.Task writeTask, byte[] localBuffer);
            /*0x15ee4a4*/ System.Threading.Tasks.Task BeginEndWriteAsync(byte[] buffer, int offset, int count);
            long Seek(long offset, System.IO.SeekOrigin origin);
            void SetLength(long value);
            int Read(byte[] buffer, int offset, int count);
            /*0x15dabcc*/ int Read(System.Span<byte> buffer);
            /*0x15ee9b4*/ int ReadByte();
            void Write(byte[] buffer, int offset, int count);
            /*0x15dbcf8*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0x15eea48*/ void WriteByte(byte value);
            /*0x15eead4*/ System.IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x15eec54*/ System.IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x15edf80*/ bool HasOverriddenBeginEndRead();
            /*0x15ee9ac*/ bool HasOverriddenBeginEndWrite();

            struct ReadWriteParameters
            {
                /*0x10*/ byte[] Buffer;
                /*0x18*/ int Offset;
                /*0x1c*/ int Count;
            }

            class ReadWriteTask : System.Threading.Tasks.Task<int>, System.Threading.Tasks.ITaskCompletionAction
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeAsyncCallback;
                /*0x54*/ bool _isRead;
                /*0x55*/ bool _apm;
                /*0x58*/ System.IO.Stream _stream;
                /*0x60*/ byte[] _buffer;
                /*0x68*/ int _offset;
                /*0x6c*/ int _count;
                /*0x70*/ System.AsyncCallback _callback;
                /*0x78*/ System.Threading.ExecutionContext _context;

                static /*0x133b804*/ void InvokeAsyncCallback(object completedTask);
                /*0x133b6c0*/ ReadWriteTask(bool isRead, bool apm, System.Func<object, int> function, object state, System.IO.Stream stream, byte[] buffer, int offset, int count, System.AsyncCallback callback);
                /*0x133b6b8*/ void ClearBeginState();
                /*0x133b880*/ void System.Threading.Tasks.ITaskCompletionAction.Invoke(System.Threading.Tasks.Task completingTask);
                /*0x133b9a0*/ bool System.Threading.Tasks.ITaskCompletionAction.get_InvokeMayRunArbitraryCode();
            }

            class NullStream : System.IO.Stream
            {
                static /*0x0*/ System.Threading.Tasks.Task<int> s_zeroTask;

                static /*0x133bf74*/ NullStream();
                /*0x133b9a8*/ NullStream();
                /*0x133ba00*/ bool get_CanRead();
                /*0x133ba08*/ bool get_CanWrite();
                /*0x133ba10*/ bool get_CanSeek();
                /*0x133ba18*/ long get_Length();
                /*0x133ba20*/ long get_Position();
                /*0x133ba28*/ void set_Position(long value);
                /*0x133ba2c*/ void Dispose(bool disposing);
                /*0x133ba30*/ void Flush();
                /*0x133ba34*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
                /*0x133baf4*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x133bb84*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x133bc2c*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x133bcbc*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x133bd64*/ int Read(byte[] buffer, int offset, int count);
                /*0x133bd6c*/ int Read(System.Span<byte> buffer);
                /*0x133bd74*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x133bdcc*/ System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken);
                /*0x133be00*/ int ReadByte();
                /*0x133be08*/ void Write(byte[] buffer, int offset, int count);
                /*0x133be0c*/ void Write(System.ReadOnlySpan<byte> buffer);
                /*0x133be10*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x133bed0*/ System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken);
                /*0x133bf64*/ void WriteByte(byte value);
                /*0x133bf68*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x133bf70*/ void SetLength(long length);
            }

            class SynchronousAsyncResult : System.IAsyncResult
            {
                /*0x10*/ object _stateObject;
                /*0x18*/ bool _isWrite;
                /*0x20*/ System.Threading.ManualResetEvent _waitHandle;
                /*0x28*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x30*/ bool _endXxxCalled;
                /*0x34*/ int _bytesRead;

                static /*0x133c1d0*/ int EndRead(System.IAsyncResult asyncResult);
                static /*0x133c2c0*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x133c000*/ SynchronousAsyncResult(int bytesRead, object asyncStateObject);
                /*0x133c030*/ SynchronousAsyncResult(object asyncStateObject);
                /*0x133c060*/ SynchronousAsyncResult(System.Exception ex, object asyncStateObject, bool isWrite);
                /*0x133c0ac*/ bool get_IsCompleted();
                /*0x133c0b4*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                /*0x133c1ac*/ object get_AsyncState();
                /*0x133c1b4*/ bool get_CompletedSynchronously();
                /*0x133c1bc*/ void ThrowIfError();

                class <>c
                {
                    static /*0x0*/ System.IO.Stream.SynchronousAsyncResult.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.ManualResetEvent> <>9__12_0;

                    static /*0x133c3b4*/ <>c();
                    /*0x133c418*/ <>c();
                    /*0x133c420*/ System.Threading.ManualResetEvent <get_AsyncWaitHandle>b__12_0();
                }
            }

            class <>c
            {
                static /*0x0*/ System.IO.Stream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__4_0;
                static /*0x10*/ System.Action<object> <>9__37_0;
                static /*0x18*/ System.Func<object, int> <>9__40_0;
                static /*0x20*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__45_0;
                static /*0x28*/ System.Func<System.IO.Stream, System.IAsyncResult, int> <>9__45_1;
                static /*0x30*/ System.Func<object, int> <>9__48_0;
                static /*0x38*/ System.Action<System.Threading.Tasks.Task, object> <>9__49_0;
                static /*0x40*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__58_0;
                static /*0x48*/ System.Func<System.IO.Stream, System.IAsyncResult, System.Threading.Tasks.VoidTaskResult> <>9__58_1;

                static /*0x133c480*/ <>c();
                /*0x133c4e4*/ <>c();
                /*0x133c4ec*/ System.Threading.SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0();
                /*0x133c550*/ void <FlushAsync>b__37_0(object state);
                /*0x133c600*/ int <BeginReadInternal>b__40_0(object <p0>);
                /*0x133c798*/ System.IAsyncResult <BeginEndReadAsync>b__45_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x133c7cc*/ int <BeginEndReadAsync>b__45_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
                /*0x133c7f8*/ int <BeginWriteInternal>b__48_0(object <p0>);
                /*0x133c980*/ void <RunReadWriteTaskWhenReady>b__49_0(System.Threading.Tasks.Task t, object state);
                /*0x133c9f0*/ System.IAsyncResult <BeginEndWriteAsync>b__58_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x133ca24*/ System.Threading.Tasks.VoidTaskResult <BeginEndWriteAsync>b__58_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
            }

            struct <FinishWriteAsync>d__57 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                /*0x30*/ System.Threading.Tasks.Task writeTask;
                /*0x38*/ byte[] localBuffer;
                /*0x40*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__1;

                /*0x133ca58*/ void MoveNext();
                /*0x133cc64*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            struct <<ReadAsync>g__FinishReadAsync|44_0>d : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int> <>t__builder;
                /*0x38*/ System.Threading.Tasks.Task<int> readTask;
                /*0x40*/ byte[] localBuffer;
                /*0x48*/ System.Memory<byte> localDestination;
                /*0x58*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int> <>u__1;

                /*0x133cc70*/ void MoveNext();
                /*0x133d004*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        class __Error
        {
            static /*0x133d05c*/ void EndOfFile();
            static /*0x133d0bc*/ void FileNotOpen();
            static /*0x133d120*/ void ReaderClosed();
            static /*0x133d184*/ string GetDisplayablePath(string path, bool isInvalidPath);
            static /*0x133d464*/ void WinIOError(int errorCode, string maybeFullPath);
            static /*0x133da04*/ void WriterClosed();
        }

        class BinaryReader : System.IDisposable
        {
            /*0x10*/ System.IO.Stream m_stream;
            /*0x18*/ byte[] m_buffer;
            /*0x20*/ System.Text.Decoder m_decoder;
            /*0x28*/ byte[] m_charBytes;
            /*0x30*/ char[] m_singleChar;
            /*0x38*/ char[] m_charBuffer;
            /*0x40*/ int m_maxCharsSize;
            /*0x44*/ bool m_2BytesPerChar;
            /*0x45*/ bool m_isMemoryStream;
            /*0x46*/ bool m_leaveOpen;

            /*0x133da68*/ BinaryReader(System.IO.Stream input);
            /*0x133dd60*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding);
            /*0x133dae0*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);
            /*0x133dd68*/ System.IO.Stream get_BaseStream();
            /*0x133dd70*/ void Close();
            /*0x133dd80*/ void Dispose(bool disposing);
            /*0x133ddc4*/ void Dispose();
            /*0x133ddd4*/ int Read();
            /*0x133e054*/ bool ReadBoolean();
            /*0x133e09c*/ byte ReadByte();
            /*0x133e0d0*/ sbyte ReadSByte();
            /*0x133e110*/ char ReadChar();
            /*0x133e134*/ short ReadInt16();
            /*0x133e17c*/ ushort ReadUInt16();
            /*0x133e1c4*/ int ReadInt32();
            /*0x133e2b8*/ uint ReadUInt32();
            /*0x133e328*/ long ReadInt64();
            /*0x133e3d8*/ ulong ReadUInt64();
            /*0x133e488*/ float ReadSingle();
            /*0x133e4b8*/ double ReadDouble();
            /*0x133e4e8*/ decimal ReadDecimal();
            /*0x133e6fc*/ string ReadString();
            /*0x133ea3c*/ int InternalReadChars(char[] buffer, int index, int count);
            /*0x133ddec*/ int InternalReadOneChar();
            /*0x133ed34*/ char[] ReadChars(int count);
            /*0x133ee94*/ int Read(byte[] buffer, int index, int count);
            /*0x133f018*/ byte[] ReadBytes(int count);
            /*0x133f1a8*/ void FillBuffer(int numBytes);
            /*0x133e994*/ int Read7BitEncodedInt();
        }

        class BinaryWriter : System.IDisposable
        {
            static /*0x0*/ System.IO.BinaryWriter Null;
            /*0x10*/ System.IO.Stream OutStream;
            /*0x18*/ byte[] _buffer;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Encoder _encoder;
            /*0x30*/ bool _leaveOpen;
            /*0x38*/ byte[] _largeByteBuffer;
            /*0x40*/ int _maxChars;

            static /*0x1340134*/ BinaryWriter();
            /*0x133f2cc*/ BinaryWriter();
            /*0x133f3b8*/ BinaryWriter(System.IO.Stream output);
            /*0x133f5b0*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding);
            /*0x133f438*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);
            /*0x133f5b8*/ void Close();
            /*0x133f5c8*/ void Dispose(bool disposing);
            /*0x133f610*/ void Dispose();
            /*0x133f620*/ void Flush();
            /*0x133f644*/ long Seek(int offset, System.IO.SeekOrigin origin);
            /*0x133f66c*/ void Write(bool value);
            /*0x133f6bc*/ void Write(byte value);
            /*0x133f6e0*/ void Write(sbyte value);
            /*0x133f704*/ void Write(byte[] buffer);
            /*0x133f780*/ void Write(byte[] buffer, int index, int count);
            /*0x133f7a4*/ void Write(char ch);
            /*0x133f8d0*/ void Write(char[] chars);
            /*0x133f978*/ void Write(double value);
            /*0x133f9b4*/ void Write(short value);
            /*0x133fa1c*/ void Write(ushort value);
            /*0x133fa84*/ void Write(int value);
            /*0x133fb24*/ void Write(uint value);
            /*0x133fbc4*/ void Write(long value);
            /*0x133fcd4*/ void Write(ulong value);
            /*0x133fde4*/ void Write(float value);
            /*0x133fe20*/ void Write(string value);
            /*0x13400d4*/ void Write7BitEncodedInt(int value);
        }

        class StringReader : System.IO.TextReader
        {
            /*0x18*/ string _s;
            /*0x20*/ int _pos;
            /*0x24*/ int _length;

            /*0x1340194*/ StringReader(string s);
            /*0x1340260*/ void Close();
            /*0x1340270*/ void Dispose(bool disposing);
            /*0x1340280*/ int Peek();
            /*0x13402bc*/ int Read();
            /*0x1340300*/ int Read(char[] buffer, int index, int count);
            /*0x13404bc*/ string ReadToEnd();
            /*0x13404f8*/ string ReadLine();
            /*0x134060c*/ System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count);
        }

        class StringWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.Text.UnicodeEncoding m_encoding;
            /*0x30*/ System.Text.StringBuilder _sb;
            /*0x38*/ bool _isOpen;

            /*0x13407fc*/ StringWriter();
            /*0x1340978*/ StringWriter(System.IFormatProvider formatProvider);
            /*0x13409ec*/ StringWriter(System.Text.StringBuilder sb);
            /*0x1340890*/ StringWriter(System.Text.StringBuilder sb, System.IFormatProvider formatProvider);
            /*0x1340a5c*/ void Close();
            /*0x1340a6c*/ void Dispose(bool disposing);
            /*0x1340a7c*/ System.Text.Encoding get_Encoding();
            /*0x1340b28*/ void Write(char value);
            /*0x1340b50*/ void Write(char[] buffer, int index, int count);
            /*0x1340cd8*/ void Write(string value);
            /*0x1340d0c*/ System.Threading.Tasks.Task WriteAsync(char value);
            /*0x1340dbc*/ System.Threading.Tasks.Task WriteAsync(string value);
            /*0x1340e6c*/ System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count);
            /*0x1340f34*/ System.Threading.Tasks.Task FlushAsync();
            /*0x1340fbc*/ string ToString();
        }

        class FileStream : System.IO.Stream
        {
            static /*0x0*/ byte[] buf_recycle;
            static /*0x8*/ object buf_recycle_lock;
            /*0x28*/ byte[] buf;
            /*0x30*/ string name;
            /*0x38*/ Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle;
            /*0x40*/ bool isExposed;
            /*0x48*/ long append_startpos;
            /*0x50*/ System.IO.FileAccess access;
            /*0x54*/ bool owner;
            /*0x55*/ bool async;
            /*0x56*/ bool canseek;
            /*0x57*/ bool anonymous;
            /*0x58*/ bool buf_dirty;
            /*0x5c*/ int buf_size;
            /*0x60*/ int buf_length;
            /*0x64*/ int buf_offset;
            /*0x68*/ long buf_start;

            static /*0x13460c0*/ FileStream();
            /*0x1340fdc*/ FileStream(nint handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x1341470*/ FileStream(string path, System.IO.FileMode mode);
            /*0x1341bcc*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access);
            /*0x1341c10*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            /*0x1341c34*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);
            /*0x1341c54*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);
            /*0x1341c7c*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
            /*0x1341bf8*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool isAsync, bool anonymous);
            /*0x13414a4*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool anonymous, System.IO.FileOptions options);
            /*0x1341188*/ void Init(Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x13434ac*/ bool get_CanRead();
            /*0x13434c0*/ bool get_CanWrite();
            /*0x13434d4*/ bool get_CanSeek();
            /*0x13434dc*/ string get_Name();
            /*0x13434e4*/ long get_Length();
            /*0x1343780*/ long get_Position();
            /*0x13438f0*/ void set_Position(long value);
            /*0x1343980*/ Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle();
            /*0x1343344*/ void ExposeHandle();
            /*0x1343b34*/ int ReadByte();
            /*0x1343dd4*/ void WriteByte(byte value);
            /*0x1343f30*/ int Read(byte[] array, int offset, int count);
            /*0x1344198*/ int ReadInternal(byte[] dest, int offset, int count);
            /*0x13442ec*/ System.IAsyncResult BeginRead(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x13446fc*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x134488c*/ void Write(byte[] array, int offset, int count);
            /*0x1344ac8*/ void WriteInternal(byte[] src, int offset, int count);
            /*0x1344e3c*/ System.IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x134536c*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x13454e4*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x1345748*/ void SetLength(long value);
            /*0x1345a88*/ void Flush();
            /*0x1345b00*/ void Finalize();
            /*0x1345ba4*/ void Dispose(bool disposing);
            /*0x1345edc*/ System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken);
            /*0x1345f68*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x1345f70*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x1344234*/ int ReadSegment(byte[] dest, int dest_offset, int count);
            /*0x1344dc4*/ int WriteSegment(byte[] src, int src_offset, int count);
            /*0x13439bc*/ void FlushBuffer();
            /*0x1343648*/ void FlushBufferIfDirty();
            /*0x1343da4*/ void RefillBuffer();
            /*0x1343c7c*/ int ReadData(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] buf, int offset, int count);
            /*0x13430b8*/ void InitBuffer(int size, bool isZeroSize);
            /*0x13427fc*/ string GetSecureFileName(string filename);
            /*0x13422f0*/ string GetSecureFileName(string filename, bool full);

            class ReadDelegate : System.MulticastDelegate
            {
                /*0x134457c*/ ReadDelegate(object object, nint method);
                /*0x1346138*/ int Invoke(byte[] buffer, int offset, int count);
                /*0x1344654*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x1344864*/ int EndInvoke(System.IAsyncResult result);
            }

            class WriteDelegate : System.MulticastDelegate
            {
                /*0x13451ec*/ WriteDelegate(object object, nint method);
                /*0x134614c*/ void Invoke(byte[] buffer, int offset, int count);
                /*0x13452c4*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x13454d8*/ void EndInvoke(System.IAsyncResult result);
            }
        }

        class FileStreamAsyncResult : System.IAsyncResult
        {
            /*0x10*/ object state;
            /*0x18*/ bool completed;
            /*0x20*/ System.Threading.ManualResetEvent wh;
            /*0x28*/ System.AsyncCallback cb;
            /*0x30*/ bool completedSynch;
            /*0x34*/ int Count;
            /*0x38*/ int OriginalCount;
            /*0x3c*/ int BytesRead;
            /*0x40*/ System.AsyncCallback realcb;

            static /*0x1346160*/ void CBWrapper(System.IAsyncResult ares);
            /*0x1345114*/ FileStreamAsyncResult(System.AsyncCallback cb, object state);
            /*0x13461f4*/ object get_AsyncState();
            /*0x13461fc*/ bool get_CompletedSynchronously();
            /*0x1346204*/ System.Threading.WaitHandle get_AsyncWaitHandle();
            /*0x134620c*/ bool get_IsCompleted();
        }

        enum MonoFileType
        {
            Unknown = 0,
            Disk = 1,
            Char = 2,
            Pipe = 3,
            Remote = 32768,
        }

        class MonoIO
        {
            static /*0x0*/ nint InvalidHandle;
            static /*0x8*/ bool dump_handles;

            static /*0x13464b8*/ MonoIO();
            static /*0x1346214*/ System.Exception GetException(System.IO.MonoIOError error);
            static /*0x1342874*/ System.Exception GetException(string path, System.IO.MonoIOError error);
            static /*0x1346348*/ string GetCurrentDirectory(ref System.IO.MonoIOError error);
            static /*0x134634c*/ System.IO.MonoFileType GetFileType(nint handle, ref System.IO.MonoIOError error);
            static /*0x1342f90*/ System.IO.MonoFileType GetFileType(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x1346350*/ nint Open(char* filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x1342760*/ nint Open(string filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x1346354*/ bool Cancel_internal(nint handle, ref System.IO.MonoIOError error);
            static /*0x1346358*/ bool Cancel(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x1345ed8*/ bool Close(nint handle, ref System.IO.MonoIOError error);
            static /*0x1346480*/ int Read(nint handle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1345f78*/ int Read(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1346484*/ int Write(nint handle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1344c7c*/ int Write(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1346488*/ long Seek(nint handle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x134336c*/ long Seek(System.Runtime.InteropServices.SafeHandle safeHandle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x134648c*/ long GetLength(nint handle, ref System.IO.MonoIOError error);
            static /*0x1343658*/ long GetLength(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x1346490*/ bool SetLength(nint handle, long length, ref System.IO.MonoIOError error);
            static /*0x1345958*/ bool SetLength(System.Runtime.InteropServices.SafeHandle safeHandle, long length, ref System.IO.MonoIOError error);
            static /*0x1346494*/ nint get_ConsoleOutput();
            static /*0x1346498*/ nint get_ConsoleInput();
            static /*0x134649c*/ nint get_ConsoleError();
            static /*0x13464a0*/ bool DuplicateHandle(nint source_process_handle, nint source_handle, nint target_process_handle, ref nint target_handle, int access, int inherit, int options, ref System.IO.MonoIOError error);
            static /*0x13464a4*/ char get_VolumeSeparatorChar();
            static /*0x13464a8*/ char get_DirectorySeparatorChar();
            static /*0x13464ac*/ char get_AltDirectorySeparatorChar();
            static /*0x13464b0*/ char get_PathSeparator();
            static /*0x1346344*/ void DumpHandles();
            static /*0x13464b4*/ bool RemapPath(string path, ref string newPath);
        }

        enum MonoIOError
        {
            ERROR_SUCCESS = 0,
            ERROR_FILE_NOT_FOUND = 2,
            ERROR_PATH_NOT_FOUND = 3,
            ERROR_TOO_MANY_OPEN_FILES = 4,
            ERROR_ACCESS_DENIED = 5,
            ERROR_INVALID_HANDLE = 6,
            ERROR_INVALID_DRIVE = 15,
            ERROR_NOT_SAME_DEVICE = 17,
            ERROR_NO_MORE_FILES = 18,
            ERROR_NOT_READY = 21,
            ERROR_WRITE_FAULT = 29,
            ERROR_READ_FAULT = 30,
            ERROR_GEN_FAILURE = 31,
            ERROR_SHARING_VIOLATION = 32,
            ERROR_LOCK_VIOLATION = 33,
            ERROR_HANDLE_DISK_FULL = 39,
            ERROR_NOT_SUPPORTED = 50,
            ERROR_FILE_EXISTS = 80,
            ERROR_CANNOT_MAKE = 82,
            ERROR_INVALID_PARAMETER = 87,
            ERROR_BROKEN_PIPE = 109,
            ERROR_INVALID_NAME = 123,
            ERROR_DIR_NOT_EMPTY = 145,
            ERROR_ALREADY_EXISTS = 183,
            ERROR_FILENAME_EXCED_RANGE = 206,
            ERROR_DIRECTORY = 267,
            ERROR_ENCRYPTION_FAILED = 6000,
        }

        struct MonoIOStat
        {
            /*0x10*/ System.IO.FileAttributes fileAttributes;
            /*0x18*/ long Length;
            /*0x20*/ long CreationTime;
            /*0x28*/ long LastAccessTime;
            /*0x30*/ long LastWriteTime;
        }

        class Path
        {
            static /*0x0*/ char[] InvalidPathChars;
            static /*0x8*/ char AltDirectorySeparatorChar;
            static /*0xa*/ char DirectorySeparatorChar;
            static /*0xc*/ char PathSeparator;
            static /*0x10*/ string DirectorySeparatorStr;
            static /*0x18*/ char VolumeSeparatorChar;
            static /*0x20*/ char[] PathSeparatorChars;
            static /*0x28*/ bool dirEqualsVolume;
            static /*0x30*/ char[] trimEndCharsWindows;
            static /*0x38*/ char[] trimEndCharsUnix;

            static /*0x1347d24*/ Path();
            static /*0x1346540*/ string ChangeExtension(string path, string extension);
            static /*0x13467d0*/ string Combine(string path1, string path2);
            static /*0x1346b64*/ string CleanPath(string s);
            static /*0x1342398*/ string GetDirectoryName(string path);
            static /*0x13473d4*/ System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);
            static /*0x13474a4*/ string GetExtension(string path);
            static /*0x133d354*/ string GetFileName(string path);
            static /*0x13475d0*/ string GetFileNameWithoutExtension(string path);
            static /*0x13426f8*/ string GetFullPath(string path);
            static /*0x134762c*/ string GetFullPathInternal(string path);
            static /*0x1341c9c*/ string InsecureGetFullPath(string path);
            static /*0x133d2c8*/ bool IsDirectorySeparator(char c);
            static /*0x1346fa4*/ string GetPathRoot(string path);
            static /*0x1347aa0*/ string GetTempPath();
            static /*0x1347b88*/ string get_temp_path();
            static /*0x1347b8c*/ bool IsPathRooted(System.ReadOnlySpan<char> path);
            static /*0x1346a3c*/ bool IsPathRooted(string path);
            static /*0x1347c90*/ char[] GetInvalidPathChars();
            static /*0x134673c*/ int findExtension(string path);
            static /*0x1347680*/ string CanonicalizePath(string path);
            static /*0x1347ecc*/ string Combine(string[] paths);
            static /*0x13481b8*/ string Combine(string path1, string path2, string path3);
            static /*0x1348360*/ System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);
            static /*0x13484ac*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);
            static /*0x13487e0*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);
            static /*0x1348c58*/ bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, ref int charsWritten);
            static /*0x1348564*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second);
            static /*0x13488f0*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second, System.ReadOnlySpan<char> third);

            class <>c
            {
                static /*0x0*/ System.IO.Path.<> <>9;
                static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, bool>> <>9__56_0;
                static /*0x10*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>>> <>9__57_0;

                static /*0x1348e8c*/ <>c();
                /*0x1348ef0*/ <>c();
                /*0x1348ef8*/ void <JoinInternal>b__56_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, bool> state);
                /*0x1349098*/ void <JoinInternal>b__57_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>> state);
            }
        }

        class UnexceptionalStreamReader : System.IO.StreamReader
        {
            static /*0x0*/ bool[] newline;
            static /*0x8*/ char newlineChar;

            static /*0x13492fc*/ UnexceptionalStreamReader();
            /*0x134939c*/ UnexceptionalStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x134940c*/ int Peek();
            /*0x1349494*/ int Read();
            /*0x134951c*/ int Read(char[] dest_buffer, int index, int count);
            /*0x13497b4*/ bool CheckEOL(char current);
            /*0x134994c*/ string ReadLine();
            /*0x13499d4*/ string ReadToEnd();
        }

        class UnexceptionalStreamWriter : System.IO.StreamWriter
        {
            /*0x1349a5c*/ UnexceptionalStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x1349ad4*/ void Flush();
            /*0x1349b58*/ void Write(char[] buffer, int index, int count);
            /*0x1349bdc*/ void Write(char value);
            /*0x1349c60*/ void Write(char[] value);
            /*0x1349ce4*/ void Write(string value);
        }

        class CStreamReader : System.IO.StreamReader
        {
            /*0x60*/ System.TermInfoDriver driver;

            /*0x1349d68*/ CStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x1349e7c*/ int Peek();
            /*0x1349f04*/ int Read();
            /*0x1349fd4*/ int Read(char[] dest, int index, int count);
            /*0x134a184*/ string ReadLine();
            /*0x134a21c*/ string ReadToEnd();
        }

        class CStreamWriter : System.IO.StreamWriter
        {
            /*0x70*/ System.TermInfoDriver driver;

            /*0x134a2b4*/ CStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, bool leaveOpen);
            /*0x134a3dc*/ void Write(char[] buffer, int index, int count);
            /*0x134a724*/ void Write(char val);
            /*0x134a934*/ void InternalWriteString(string val);
            /*0x134a8b0*/ void InternalWriteChar(char val);
            /*0x134a9b8*/ void InternalWriteChars(char[] buffer, int n);
            /*0x134aa44*/ void Write(char[] val);
            /*0x134aa6c*/ void Write(string val);
            /*0x134ab38*/ void WriteLine(string val);
        }

        class MonoLinqHelper
        {
            static T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
        }

        namespace Enumeration
        {
            struct FileSystemEntry
            {
                /*0x10*/ Interop.Sys.DirectoryEntry _directoryEntry;
                /*0x20*/ System.IO.FileStatus _status;
                /*0x98*/ System.Span<char> _pathBuffer;
                /*0xa8*/ System.ReadOnlySpan<char> _fullPath;
                /*0xb8*/ System.ReadOnlySpan<char> _fileName;
                /*0xc8*/ System.IO.Enumeration.FileSystemEntry.<_fileNameBuffer> _fileNameBuffer;
                /*0x2c8*/ System.IO.FileAttributes _initialAttributes;
                /*0x2d0*/ System.ReadOnlySpan<char> <Directory>k__BackingField;
                /*0x2e0*/ System.ReadOnlySpan<char> <RootDirectory>k__BackingField;
                /*0x2f0*/ System.ReadOnlySpan<char> <OriginalRootDirectory>k__BackingField;

                static /*0x134ab7c*/ System.IO.FileAttributes Initialize(ref System.IO.Enumeration.FileSystemEntry entry, Interop.Sys.DirectoryEntry directoryEntry, System.ReadOnlySpan<char> directory, System.ReadOnlySpan<char> rootDirectory, System.ReadOnlySpan<char> originalRootDirectory, System.Span<char> pathBuffer);
                /*0x134adfc*/ System.ReadOnlySpan<char> get_FullPath();
                /*0x134af2c*/ System.ReadOnlySpan<char> get_FileName();
                /*0x134afc0*/ System.ReadOnlySpan<char> get_Directory();
                /*0x134afd0*/ void set_Directory(System.ReadOnlySpan<char> value);
                /*0x134afdc*/ System.ReadOnlySpan<char> get_RootDirectory();
                /*0x134afec*/ void set_RootDirectory(System.ReadOnlySpan<char> value);
                /*0x134aff8*/ System.ReadOnlySpan<char> get_OriginalRootDirectory();
                /*0x134b008*/ void set_OriginalRootDirectory(System.ReadOnlySpan<char> value);
                /*0x134b014*/ System.IO.FileAttributes get_Attributes();
                /*0x134b05c*/ bool get_IsDirectory();
                /*0x134b064*/ string ToSpecifiedFullPath();

                struct <_fileNameBuffer>e__FixedBuffer
                {
                    /*0x10*/ char FixedElementField;
                }
            }

            class FileSystemEnumerable<TResult> : System.Collections.Generic.IEnumerable<TResult>, System.Collections.IEnumerable
            {
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.DelegateEnumerator<TResult> _enumerator;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> _transform;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ string _directory;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldIncludePredicate>k__BackingField;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldRecursePredicate>k__BackingField;

                FileSystemEnumerable(string directory, System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> transform, System.IO.EnumerationOptions options);
                System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldIncludePredicate();
                void set_ShouldIncludePredicate(System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> value);
                System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldRecursePredicate();
                System.Collections.Generic.IEnumerator<TResult> GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class FindPredicate<TResult> : System.MulticastDelegate
                {
                    FindPredicate(object object, nint method);
                    bool Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class FindTransform<TResult> : System.MulticastDelegate
                {
                    FindTransform(object object, nint method);
                    TResult Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class DelegateEnumerator<TResult> : System.IO.Enumeration.FileSystemEnumerator<TResult>
                {
                    /*0x0*/ System.IO.Enumeration.FileSystemEnumerable<TResult> _enumerable;

                    DelegateEnumerator(System.IO.Enumeration.FileSystemEnumerable<TResult> enumerable);
                    TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerableFactory
            {
                static /*0x0*/ char[] s_unixEscapeChars;

                static /*0x134c278*/ FileSystemEnumerableFactory();
                static /*0x134b1e8*/ void NormalizeInputs(ref string directory, ref string expression, System.IO.EnumerationOptions options);
                static /*0x134b9e0*/ bool MatchesPattern(string expression, System.ReadOnlySpan<char> name, System.IO.EnumerationOptions options);
                static /*0x134bd14*/ System.Collections.Generic.IEnumerable<string> UserFiles(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x134bee0*/ System.Collections.Generic.IEnumerable<string> UserDirectories(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0x134c0ac*/ System.Collections.Generic.IEnumerable<string> UserEntries(string directory, string expression, System.IO.EnumerationOptions options);

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x134bed8*/ <>c__DisplayClass3_0();
                    /*0x134c30c*/ bool <UserFiles>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c
                {
                    static /*0x0*/ System.IO.Enumeration.FileSystemEnumerableFactory.<> <>9;
                    static /*0x8*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__3_0;
                    static /*0x10*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__4_0;
                    static /*0x18*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__5_0;

                    static /*0x134c3ac*/ <>c();
                    /*0x134c410*/ <>c();
                    /*0x134c418*/ string <UserFiles>b__3_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x134c420*/ string <UserDirectories>b__4_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x134c428*/ string <UserEntries>b__5_0(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass4_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x134c0a4*/ <>c__DisplayClass4_0();
                    /*0x134c430*/ bool <UserDirectories>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x134c270*/ <>c__DisplayClass5_0();
                    /*0x134c4d0*/ bool <UserEntries>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerator<TResult> : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Collections.Generic.IEnumerator<TResult>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x0*/ string _originalRootDirectory;
                /*0x0*/ string _rootDirectory;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ object _lock;
                /*0x0*/ string _currentPath;
                /*0x0*/ nint _directoryHandle;
                /*0x0*/ bool _lastEntryFound;
                /*0x0*/ System.Collections.Generic.Queue<string> _pending;
                /*0x0*/ Interop.Sys.DirectoryEntry _entry;
                /*0x0*/ TResult _current;
                /*0x0*/ char[] _pathBuffer;
                /*0x0*/ byte[] _entryBuffer;

                static bool IsDirectoryNotFound(Interop.ErrorInfo info);
                static bool IsAccessError(Interop.ErrorInfo info);
                FileSystemEnumerator(string directory, System.IO.EnumerationOptions options);
                bool InternalContinueOnError(Interop.ErrorInfo info, bool ignoreNotFound);
                nint CreateDirectoryHandle(string path, bool ignoreNotFound);
                void CloseDirectoryHandle();
                bool MoveNext();
                void FindNextEntry();
                void FindNextEntry(byte* entryBufferPtr, int bufferLength);
                bool DequeueNextDirectory();
                void InternalDispose(bool disposing);
                bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                void OnDirectoryFinished(System.ReadOnlySpan<char> directory);
                bool ContinueOnError(int error);
                TResult get_Current();
                object System.Collections.IEnumerator.get_Current();
                void DirectoryFinished();
                void Reset();
                void Dispose();
                void Dispose(bool disposing);
                void Finalize();
            }

            class FileSystemName
            {
                static /*0x0*/ char[] s_wildcardChars;
                static /*0x8*/ char[] s_simpleWildcardChars;

                static /*0x134cca8*/ FileSystemName();
                static /*0x134b644*/ string TranslateWin32Expression(string expression);
                static /*0x134bc8c*/ bool MatchesWin32Expression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0x134bc04*/ bool MatchesSimpleExpression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0x134c554*/ bool MatchPattern(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase, bool useExtendedWildcards);
            }
        }
    }

    namespace Globalization
    {
        class CharUnicodeInfo
        {
            static /*0x134cd80*/ int InternalConvertToUtf32(string s, int index);
            static /*0x134ce14*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char ch);
            static /*0x134ce48*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
            static /*0x134ce30*/ System.Globalization.UnicodeCategory GetUnicodeCategory(int codePoint);
            static /*0x134cf14*/ byte InternalGetCategoryValue(int ch, int offset);
            static /*0x134cef8*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string value, int index);
            static /*0x134d1d8*/ bool IsWhiteSpace(string s, int index);
            static /*0x134d1f4*/ bool IsWhiteSpace(char c);
            static /*0x134d008*/ System.ReadOnlySpan<byte> get_CategoryLevel1Index();
            static /*0x134d07c*/ System.ReadOnlySpan<byte> get_CategoryLevel2Index();
            static /*0x134d0f0*/ System.ReadOnlySpan<byte> get_CategoryLevel3Index();
            static /*0x134d164*/ System.ReadOnlySpan<byte> get_CategoriesValue();
        }

        class CompareInfo : System.Runtime.Serialization.IDeserializationCallback
        {
            static System.Globalization.CompareOptions ValidIndexMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidCompareMaskOffFlags = -536870944;
            static System.Globalization.CompareOptions ValidHashCodeOfStringMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidSortkeyCtorMaskOffFlags = -536870944;
            static /*0x0*/ System.Globalization.CompareInfo Invariant;
            static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Globalization.ISimpleCollator> collators;
            static /*0x10*/ bool managedCollation;
            static /*0x11*/ bool managedCollationChecked;
            /*0x10*/ string m_name;
            /*0x18*/ string _sortName;
            /*0x20*/ System.Globalization.SortVersion m_SortVersion;
            /*0x28*/ int culture;
            /*0x30*/ System.Globalization.ISimpleCollator collator;

            static /*0x13515f8*/ CompareInfo();
            static /*0x134d21c*/ int InvariantIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x134d60c*/ int InvariantLastIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x134d2e0*/ int InvariantFindString(char* source, int sourceCount, char* value, int valueCount, bool ignoreCase, bool start);
            static /*0x134d6d8*/ char InvariantToUpper(char c);
            static /*0x134d9dc*/ System.Globalization.CompareInfo GetCompareInfo(string name);
            static /*0x134ed9c*/ int CompareOrdinalIgnoreCase(string strA, int indexA, int lengthA, string strB, int indexB, int lengthB);
            static /*0x134df1c*/ int CompareOrdinalIgnoreCase(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
            static /*0x13503b4*/ int GetIgnoreCaseHash(string source);
            static /*0x1350b68*/ bool get_UseManagedCollation();
            static /*0x13515ec*/ int internal_compare_icall(char* str1, int length1, char* str2, int length2, System.Globalization.CompareOptions options);
            static /*0x1351438*/ int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            static /*0x13515f0*/ int internal_index_icall(char* source, int sindex, int count, char* value, int value_length, bool first);
            static /*0x1351258*/ int internal_index(string source, int sindex, int count, string value, bool first);
            static /*0x134ef10*/ int CompareStringOrdinalIgnoreCase(char* pString1, int length1, char* pString2, int length2);
            static /*0x134fc90*/ int IndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0x1350124*/ int LastIndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x134d98c*/ CompareInfo(System.Globalization.CultureInfo culture);
            /*0x1351680*/ CompareInfo();
            /*0x134d6f0*/ System.Globalization.SortKey InvariantCreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x134da98*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x134daa0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x134db48*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x134daa4*/ void OnDeserialized();
            /*0x134db4c*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x134dbd8*/ string get_Name();
            /*0x134dc64*/ int Compare(string string1, string string2);
            /*0x134dc74*/ int Compare(string string1, string string2, System.Globalization.CompareOptions options);
            /*0x134e20c*/ int Compare(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0x134e610*/ int CompareOptionIgnoreCase(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2);
            /*0x134e83c*/ int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x134f070*/ bool IsPrefix(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x134f408*/ bool IsSuffix(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x134f79c*/ bool IsSuffix(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0x134f800*/ int IndexOf(string source, string value, System.Globalization.CompareOptions options);
            /*0x134f870*/ int IndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x134fb34*/ int IndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x134fcb0*/ int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x135000c*/ int LastIndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0x1350144*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            /*0x13502cc*/ bool Equals(object value);
            /*0x135038c*/ int GetHashCode();
            /*0x1350830*/ int GetHashCodeOfString(string source, System.Globalization.CompareOptions options);
            /*0x1350a04*/ int GetHashCode(string source, System.Globalization.CompareOptions options);
            /*0x1350b08*/ string ToString();
            /*0x1350cac*/ System.Globalization.ISimpleCollator GetCollator();
            /*0x1350fe0*/ System.Globalization.SortKey CreateSortKeyCore(string source, System.Globalization.CompareOptions options);
            /*0x135111c*/ int internal_index_switch(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x134e110*/ int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x13514ec*/ int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x135130c*/ int internal_index_managed(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x134d9c0*/ void InitSort(System.Globalization.CultureInfo culture);
            /*0x135010c*/ int LastIndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x134fc34*/ int IndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options, int* matchLengthPtr);
            /*0x134e5ac*/ int CompareString(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0x134e74c*/ int CompareString(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2, System.Globalization.CompareOptions options);
            /*0x135020c*/ System.Globalization.SortKey CreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x134f294*/ bool StartsWith(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x134f62c*/ bool EndsWith(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x134f7a0*/ bool EndsWith(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0x13509d8*/ int GetHashCodeOfStringCore(string source, System.Globalization.CompareOptions options);
        }

        enum CompareOptions
        {
            None = 0,
            IgnoreCase = 1,
            IgnoreNonSpace = 2,
            IgnoreSymbols = 4,
            IgnoreKanaType = 8,
            IgnoreWidth = 16,
            OrdinalIgnoreCase = 268435456,
            StringSort = 536870912,
            Ordinal = 1073741824,
        }

        class CultureNotFoundException : System.ArgumentException
        {
            /*0x98*/ string _invalidCultureName;
            /*0xa0*/ System.Nullable<int> _invalidCultureId;

            static /*0x1351704*/ string get_DefaultMessage();
            /*0x13516b8*/ CultureNotFoundException();
            /*0x1351744*/ CultureNotFoundException(string paramName, string message);
            /*0x1351758*/ CultureNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1351914*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1351a78*/ System.Nullable<int> get_InvalidCultureId();
            /*0x1351a80*/ string get_InvalidCultureName();
            /*0x1351a88*/ string get_FormatedInvalidCultureId();
            /*0x1351bc4*/ string get_Message();
        }

        enum CultureTypes
        {
            NeutralCultures = 1,
            SpecificCultures = 2,
            InstalledWin32Cultures = 4,
            AllCultures = 7,
            UserCustomCulture = 8,
            ReplacementCultures = 16,
            WindowsOnlyCultures = 32,
            FrameworkCultures = 64,
        }

        enum MonthNameStyles
        {
            Regular = 0,
            Genitive = 1,
            LeapYear = 2,
        }

        enum DateTimeFormatFlags
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewRule = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
            NotInitialized = -1,
        }

        class DateTimeFormatInfo : System.IFormatProvider, System.ICloneable
        {
            static string rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            static string sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
            static string universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            static int DEFAULT_ALL_DATETIMES_SIZE = 132;
            static string RoundtripFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK";
            static string RoundtripDateTimeUnfixed = "yyyy'-'MM'-'ddTHH':'mm':'ss zzz";
            static System.Globalization.DateTimeStyles InvalidDateTimeStyles = -256;
            static int TOKEN_HASH_SIZE = 199;
            static int SECOND_PRIME = 197;
            static string dateSeparatorOrTimeZoneOffset = "-";
            static string invariantDateSeparator = "/";
            static string invariantTimeSeparator = ":";
            static string IgnorablePeriod = ".";
            static string IgnorableComma = ",";
            static string CJKYearSuff = "年";
            static string CJKMonthSuff = "月";
            static string CJKDaySuff = "日";
            static string KoreanYearSuff = "년";
            static string KoreanMonthSuff = "월";
            static string KoreanDaySuff = "일";
            static string KoreanHourSuff = "시";
            static string KoreanMinuteSuff = "분";
            static string KoreanSecondSuff = "초";
            static string CJKHourSuff = "時";
            static string ChineseHourSuff = "时";
            static string CJKMinuteSuff = "分";
            static string CJKSecondSuff = "秒";
            static string JapaneseEraStart = "元";
            static string LocalTimeMark = "T";
            static string GMTName = "GMT";
            static string ZuluName = "Z";
            static string KoreanLangName = "ko";
            static string JapaneseLangName = "ja";
            static string EnglishLangName = "en";
            static /*0x0*/ System.Globalization.DateTimeFormatInfo s_invariantInfo;
            static /*0x8*/ char[] s_monthSpaces;
            static /*0x10*/ System.Globalization.DateTimeFormatInfo s_jajpDTFI;
            static /*0x18*/ System.Globalization.DateTimeFormatInfo s_zhtwDTFI;
            /*0x10*/ System.Globalization.CultureData _cultureData;
            /*0x18*/ string _name;
            /*0x20*/ string _langName;
            /*0x28*/ System.Globalization.CompareInfo _compareInfo;
            /*0x30*/ System.Globalization.CultureInfo _cultureInfo;
            /*0x38*/ string amDesignator;
            /*0x40*/ string pmDesignator;
            /*0x48*/ string dateSeparator;
            /*0x50*/ string generalShortTimePattern;
            /*0x58*/ string generalLongTimePattern;
            /*0x60*/ string timeSeparator;
            /*0x68*/ string monthDayPattern;
            /*0x70*/ string dateTimeOffsetPattern;
            /*0x78*/ System.Globalization.Calendar calendar;
            /*0x80*/ int firstDayOfWeek;
            /*0x84*/ int calendarWeekRule;
            /*0x88*/ string fullDateTimePattern;
            /*0x90*/ string[] abbreviatedDayNames;
            /*0x98*/ string[] m_superShortDayNames;
            /*0xa0*/ string[] dayNames;
            /*0xa8*/ string[] abbreviatedMonthNames;
            /*0xb0*/ string[] monthNames;
            /*0xb8*/ string[] genitiveMonthNames;
            /*0xc0*/ string[] m_genitiveAbbreviatedMonthNames;
            /*0xc8*/ string[] leapYearMonthNames;
            /*0xd0*/ string longDatePattern;
            /*0xd8*/ string shortDatePattern;
            /*0xe0*/ string yearMonthPattern;
            /*0xe8*/ string longTimePattern;
            /*0xf0*/ string shortTimePattern;
            /*0xf8*/ string[] allYearMonthPatterns;
            /*0x100*/ string[] allShortDatePatterns;
            /*0x108*/ string[] allLongDatePatterns;
            /*0x110*/ string[] allShortTimePatterns;
            /*0x118*/ string[] allLongTimePatterns;
            /*0x120*/ string[] m_eraNames;
            /*0x128*/ string[] m_abbrevEraNames;
            /*0x130*/ string[] m_abbrevEnglishEraNames;
            /*0x138*/ System.Globalization.CalendarId[] optionalCalendars;
            /*0x140*/ bool _isReadOnly;
            /*0x144*/ System.Globalization.DateTimeFormatFlags formatFlags;
            /*0x148*/ string _fullTimeSpanPositivePattern;
            /*0x150*/ string _fullTimeSpanNegativePattern;
            /*0x158*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] _dtfiTokenHash;

            static /*0x1357070*/ DateTimeFormatInfo();
            static /*0x13523bc*/ System.Globalization.DateTimeFormatInfo get_InvariantInfo();
            static /*0x135248c*/ System.Globalization.DateTimeFormatInfo get_CurrentInfo();
            static /*0x1352598*/ System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider);
            static /*0x13539d8*/ string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString);
            static /*0x135440c*/ string[] GetMergedPatterns(string[] patterns, string defaultPattern);
            static /*0x135482c*/ void ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
            static /*0x1354bac*/ System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI();
            static /*0x1354d40*/ System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI();
            static /*0x1356454*/ bool IsJapaneseCalendar(System.Globalization.Calendar calendar);
            static /*0x1356590*/ bool TryParseHebrewNumber(ref System.__DTString str, ref bool badFormat, ref int number);
            static /*0x13566d4*/ bool IsHebrewChar(char ch);
            /*0x1351edc*/ DateTimeFormatInfo();
            /*0x13520cc*/ DateTimeFormatInfo(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal);
            /*0x1351c80*/ string get_CultureName();
            /*0x1351cac*/ System.Globalization.CultureInfo get_Culture();
            /*0x1351d30*/ string get_LanguageName();
            /*0x1351d5c*/ string[] internalGetAbbreviatedDayOfWeekNames();
            /*0x1351d70*/ string[] internalGetAbbreviatedDayOfWeekNamesCore();
            /*0x1351dbc*/ string[] internalGetDayOfWeekNames();
            /*0x1351dd0*/ string[] internalGetDayOfWeekNamesCore();
            /*0x1351e1c*/ string[] internalGetAbbreviatedMonthNames();
            /*0x1351e30*/ string[] internalGetAbbreviatedMonthNamesCore();
            /*0x1351e7c*/ string[] internalGetMonthNames();
            /*0x1351e90*/ string[] internalGetMonthNamesCore();
            /*0x1351fb0*/ void InitializeOverridableProperties(System.Globalization.CultureData cultureData, int calendarId);
            /*0x1352758*/ object GetFormat(System.Type formatType);
            /*0x13527f0*/ object Clone();
            /*0x13528f0*/ string get_AMDesignator();
            /*0x135291c*/ System.Globalization.Calendar get_Calendar();
            /*0x1352110*/ void set_Calendar(System.Globalization.Calendar value);
            /*0x13529c8*/ System.Globalization.CalendarId[] get_OptionalCalendars();
            /*0x1352a08*/ string[] get_EraNames();
            /*0x1352a5c*/ string GetEraName(int era);
            /*0x1352b38*/ string[] get_AbbreviatedEraNames();
            /*0x1352b8c*/ string GetAbbreviatedEraName(int era);
            /*0x1352c78*/ string[] get_AbbreviatedEnglishEraNames();
            /*0x1352ccc*/ string get_DateSeparator();
            /*0x1352d20*/ string get_FullDateTimePattern();
            /*0x1352d94*/ string get_LongDatePattern();
            /*0x1352dd0*/ string get_LongTimePattern();
            /*0x1352e90*/ string get_MonthDayPattern();
            /*0x1352ee4*/ string get_PMDesignator();
            /*0x1352f10*/ string get_RFC1123Pattern();
            /*0x1352f50*/ string get_ShortDatePattern();
            /*0x1352fe0*/ string get_ShortTimePattern();
            /*0x135304c*/ string get_SortableDateTimePattern();
            /*0x135308c*/ string get_GeneralShortTimePattern();
            /*0x1353100*/ string get_GeneralLongTimePattern();
            /*0x1353174*/ string get_DateTimeOffsetPattern();
            /*0x1353310*/ string get_TimeSeparator();
            /*0x135333c*/ string get_UniversalSortableDateTimePattern();
            /*0x135337c*/ string get_YearMonthPattern();
            /*0x135340c*/ string[] get_AbbreviatedDayNames();
            /*0x1353490*/ string[] get_DayNames();
            /*0x1353514*/ string[] get_AbbreviatedMonthNames();
            /*0x1353598*/ string[] get_MonthNames();
            /*0x135361c*/ bool get_HasSpacesInMonthNames();
            /*0x135365c*/ bool get_HasSpacesInDayNames();
            /*0x1353684*/ string internalGetMonthName(int month, System.Globalization.MonthNameStyles style, bool abbreviated);
            /*0x13537f0*/ string[] internalGetGenitiveMonthNames(bool abbreviated);
            /*0x1353884*/ string[] internalGetLeapYearMonthNames();
            /*0x13538d8*/ string GetAbbreviatedDayName(System.DayOfWeek dayofweek);
            /*0x1353b44*/ string[] GetAllDateTimePatterns(char format);
            /*0x1354104*/ string GetDayName(System.DayOfWeek dayofweek);
            /*0x1354204*/ string GetAbbreviatedMonthName(int month);
            /*0x1354308*/ string GetMonthName(int month);
            /*0x1354090*/ string[] get_AllYearMonthPatterns();
            /*0x1353ec0*/ string[] get_AllShortDatePatterns();
            /*0x1353fa8*/ string[] get_AllShortTimePatterns();
            /*0x1353f34*/ string[] get_AllLongDatePatterns();
            /*0x135401c*/ string[] get_AllLongTimePatterns();
            /*0x13533b8*/ string[] get_UnclonedYearMonthPatterns();
            /*0x1352f8c*/ string[] get_UnclonedShortDatePatterns();
            /*0x1352e0c*/ string[] get_UnclonedLongDatePatterns();
            /*0x135301c*/ string[] get_UnclonedShortTimePatterns();
            /*0x1352e60*/ string[] get_UnclonedLongTimePatterns();
            /*0x1352924*/ bool get_IsReadOnly();
            /*0x13545f0*/ string[] get_MonthGenitiveNames();
            /*0x1354670*/ string get_FullTimeSpanPositivePattern();
            /*0x1354744*/ string get_FullTimeSpanNegativePattern();
            /*0x13547ac*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x1353644*/ System.Globalization.DateTimeFormatFlags get_FormatFlags();
            /*0x1354904*/ System.Globalization.DateTimeFormatFlags InitializeFormatFlags();
            /*0x1354a1c*/ bool get_HasForceTwoDigitYears();
            /*0x1354a50*/ bool get_HasYearMonthAdjustment();
            /*0x1354a78*/ bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName);
            /*0x13529f8*/ void ClearTokenHashTable();
            /*0x1354ed4*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] CreateTokenHashTable();
            /*0x1355ac4*/ void PopulateSpecialTokenHashTable(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, ref bool useDateSepAsIgnorableSymbol);
            /*0x13563a8*/ void AddMonthNames(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, string monthPostfix);
            /*0x13566e8*/ bool IsAllowedJapaneseTokenFollowedByNonSpaceLetter(string tokenString, char nextCh);
            /*0x13567f0*/ bool Tokenize(System.TokenType TokenMask, ref System.TokenType tokenType, ref int tokenValue, ref System.__DTString str);
            /*0x1356db8*/ void InsertAtCurrentHashNode(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, char ch, System.TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
            /*0x13557c4*/ void InsertHash(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, System.TokenType tokenType, int tokenValue);
            /*0x1356f7c*/ bool CompareStringIgnoreCaseOptimized(string string1, int offset1, int length1, string string2, int offset2, int length2);

            class TokenHashValue
            {
                /*0x10*/ string tokenString;
                /*0x18*/ System.TokenType tokenType;
                /*0x1c*/ int tokenValue;

                /*0x13a05e8*/ TokenHashValue(string tokenString, System.TokenType tokenType, int tokenValue);
            }
        }

        enum FORMATFLAGS
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewParsing = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
        }

        enum CalendarId
        {
            UNINITIALIZED_VALUE = 0,
            GREGORIAN = 1,
            GREGORIAN_US = 2,
            JAPAN = 3,
            TAIWAN = 4,
            KOREA = 5,
            HIJRI = 6,
            THAI = 7,
            HEBREW = 8,
            GREGORIAN_ME_FRENCH = 9,
            GREGORIAN_ARABIC = 10,
            GREGORIAN_XLIT_ENGLISH = 11,
            GREGORIAN_XLIT_FRENCH = 12,
            JULIAN = 13,
            JAPANESELUNISOLAR = 14,
            CHINESELUNISOLAR = 15,
            SAKA = 16,
            LUNAR_ETO_CHN = 17,
            LUNAR_ETO_KOR = 18,
            LUNAR_ETO_ROKUYOU = 19,
            KOREANLUNISOLAR = 20,
            TAIWANLUNISOLAR = 21,
            PERSIAN = 22,
            UMALQURA = 23,
            LAST_CALENDAR = 23,
        }

        class DateTimeFormatInfoScanner
        {
            static /*0x0*/ System.Collections.Generic.Dictionary<string, string> s_knownWords;
            /*0x10*/ System.Collections.Generic.List<string> m_dateWords;
            /*0x18*/ System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern _ymdFlags;

            static /*0x13a0624*/ System.Collections.Generic.Dictionary<string, string> get_KnownWords();
            static /*0x13a0a24*/ int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex);
            static /*0x13a10f4*/ int ScanRepeatChar(string pattern, char ch, int index, ref int count);
            static /*0x13a168c*/ System.Globalization.FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x13a1774*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x13a1b68*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames);
            static /*0x13a1b98*/ System.Globalization.FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID);
            static /*0x13a16cc*/ bool EqualStringArrays(string[] array1, string[] array2);
            static /*0x13a1a74*/ bool ArrayElementsHaveSpace(string[] array);
            static /*0x13a1818*/ bool ArrayElementsBeginWithDigit(string[] array);
            /*0x13a1ba8*/ DateTimeFormatInfoScanner();
            /*0x13a0b20*/ void AddDateWordOrPostfix(string formatPostfix, string str);
            /*0x13a0f1c*/ int AddDateWords(string pattern, int index, string formatPostfix);
            /*0x13a0dd0*/ void AddIgnorableSymbols(string text);
            /*0x13a1178*/ void ScanDateWord(string pattern);
            /*0x13a13b4*/ string[] GetDateWordsOfDTFI(System.Globalization.DateTimeFormatInfo dtfi);

            enum FoundDatePattern
            {
                None = 0,
                FoundYearPatternFlag = 1,
                FoundMonthPatternFlag = 2,
                FoundDayPatternFlag = 4,
                FoundYMDPatternFlag = 7,
            }
        }

        enum DateTimeStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowInnerWhite = 4,
            AllowWhiteSpaces = 7,
            NoCurrentDateDefault = 8,
            AdjustToUniversal = 16,
            AssumeLocal = 32,
            AssumeUniversal = 64,
            RoundtripKind = 128,
        }

        struct DaylightTimeStruct
        {
            /*0x10*/ System.DateTime Start;
            /*0x18*/ System.DateTime End;
            /*0x20*/ System.TimeSpan Delta;

            /*0x13a1c24*/ DaylightTimeStruct(System.DateTime start, System.DateTime end, System.TimeSpan delta);
        }

        struct HebrewNumberParsingContext
        {
            /*0x10*/ System.Globalization.HebrewNumber.HS state;
            /*0x14*/ int result;

            /*0x13a1c30*/ HebrewNumberParsingContext(int result);
        }

        enum HebrewNumberParsingState
        {
            InvalidHebrewNumber = 0,
            NotHebrewDigit = 1,
            FoundEndOfHebrewNumber = 2,
            ContinueParsing = 3,
        }

        class HebrewNumber
        {
            static /*0x0*/ System.Globalization.HebrewNumber.HebrewValue[] s_hebrewValues;
            static /*0x8*/ char s_maxHebrewNumberCh;
            static /*0x10*/ System.Globalization.HebrewNumber.HS[] s_numberPasingState;

            static /*0x13a20f4*/ HebrewNumber();
            static /*0x13a1c3c*/ string ToString(int Number);
            static /*0x13a1e94*/ System.Globalization.HebrewNumberParsingState ParseByChar(char ch, ref System.Globalization.HebrewNumberParsingContext context);
            static /*0x13a2024*/ bool IsDigit(char ch);

            enum HebrewToken
            {
                Invalid = -1,
                Digit400 = 0,
                Digit200_300 = 1,
                Digit100 = 2,
                Digit10 = 3,
                Digit1 = 4,
                Digit6_7 = 5,
                Digit7 = 6,
                Digit9 = 7,
                SingleQuote = 8,
                DoubleQuote = 9,
            }

            struct HebrewValue
            {
                /*0x10*/ System.Globalization.HebrewNumber.HebrewToken token;
                /*0x12*/ short value;

                /*0x13a23a4*/ HebrewValue(System.Globalization.HebrewNumber.HebrewToken token, short value);
            }

            enum HS
            {
                _err = -1,
                Start = 0,
                S400 = 1,
                S400_400 = 2,
                S400_X00 = 3,
                S400_X0 = 4,
                X00_DQ = 5,
                S400_X00_X0 = 6,
                X0_DQ = 7,
                X = 8,
                X0 = 9,
                X00 = 10,
                S400_DQ = 11,
                S400_400_DQ = 12,
                S400_400_100 = 13,
                S9 = 14,
                X00_S9 = 15,
                S9_DQ = 16,
                END = 100,
            }
        }

        enum NumberStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowLeadingSign = 4,
            AllowTrailingSign = 8,
            AllowParentheses = 16,
            AllowDecimalPoint = 32,
            AllowThousands = 64,
            AllowExponent = 128,
            AllowCurrencySymbol = 256,
            AllowHexSpecifier = 512,
            Integer = 7,
            HexNumber = 515,
            Number = 111,
            Float = 167,
            Currency = 383,
            Any = 511,
        }

        class SortVersion
        {
            /*0x10*/ int m_NlsVersion;
            /*0x14*/ System.Guid m_SortId;
        }

        class TimeSpanFormat
        {
            static /*0x0*/ System.Globalization.TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals;
            static /*0x28*/ System.Globalization.TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals;

            static /*0x13a3a40*/ TimeSpanFormat();
            static /*0x13a23b0*/ void AppendNonNegativeInt32(System.Text.StringBuilder sb, int n, int digits);
            static /*0x13a24a8*/ string Format(System.TimeSpan value, string format, System.IFormatProvider formatProvider);
            static /*0x13a2814*/ bool TryFormat(System.TimeSpan value, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0x13a2560*/ System.Text.StringBuilder FormatToBuilder(System.TimeSpan value, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0x13a2930*/ System.Text.StringBuilder FormatStandard(System.TimeSpan value, bool isInvariant, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanFormat.Pattern pattern);
            static /*0x13a2dbc*/ System.Text.StringBuilder FormatCustomized(System.TimeSpan value, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Text.StringBuilder result);

            enum Pattern
            {
                None = 0,
                Minimum = 1,
                Full = 2,
            }

            struct FormatLiterals
            {
                /*0x10*/ string AppCompatLiteral;
                /*0x18*/ int dd;
                /*0x1c*/ int hh;
                /*0x20*/ int mm;
                /*0x24*/ int ss;
                /*0x28*/ int ff;
                /*0x30*/ string[] _literals;

                static /*0x13a3ad4*/ System.Globalization.TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative);
                /*0x13a393c*/ string get_Start();
                /*0x13a3964*/ string get_DayHourSep();
                /*0x13a3990*/ string get_HourMinuteSep();
                /*0x13a39bc*/ string get_MinuteSecondSep();
                /*0x13a39e8*/ string get_SecondFractionSep();
                /*0x13a3a14*/ string get_End();
                /*0x13a34b4*/ void Init(System.ReadOnlySpan<char> format, bool useInvariantFieldLengths);
            }
        }

        class TimeSpanParse
        {
            static /*0x13a38ac*/ long Pow10(int pow);
            static /*0x13a3ce4*/ bool TryTimeToTicks(bool positive, System.Globalization.TimeSpanParse.TimeSpanToken days, System.Globalization.TimeSpanParse.TimeSpanToken hours, System.Globalization.TimeSpanParse.TimeSpanToken minutes, System.Globalization.TimeSpanParse.TimeSpanToken seconds, System.Globalization.TimeSpanParse.TimeSpanToken fraction, ref long result);
            static /*0x13a3ea0*/ System.TimeSpan Parse(System.ReadOnlySpan<char> input, System.IFormatProvider formatProvider);
            static /*0x13a407c*/ bool TryParseExact(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, ref System.TimeSpan result);
            static /*0x13a3ee0*/ bool TryParseTimeSpan(System.ReadOnlySpan<char> input, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, System.IFormatProvider formatProvider, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a4728*/ bool ProcessTerminalState(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a697c*/ bool ProcessTerminal_DHMSF(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a5da4*/ bool ProcessTerminal_HMS_F_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a4f40*/ bool ProcessTerminal_HM_S_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a4bec*/ bool ProcessTerminal_HM(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a4860*/ bool ProcessTerminal_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a40bc*/ bool TryParseExactTimeSpan(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13a9f98*/ bool TryParseByFormat(System.ReadOnlySpan<char> input, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanStyles styles, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x13aa69c*/ bool ParseExactDigits(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, int minDigitLength, ref int result);
            static /*0x13aa6cc*/ bool ParseExactDigits(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, int minDigitLength, int maxDigitLength, ref int zeroes, ref int result);
            static /*0x13aa790*/ bool ParseExactLiteral(ref System.Globalization.TimeSpanParse.TimeSpanTokenizer tokenizer, System.Text.StringBuilder enquotedString);
            static /*0x13a9f64*/ bool TryParseTimeSpanConstant(System.ReadOnlySpan<char> input, ref System.Globalization.TimeSpanParse.TimeSpanResult result);

            enum ParseFailureKind
            {
                None = 0,
                ArgumentNull = 1,
                Format = 2,
                FormatWithParameter = 3,
                Overflow = 4,
            }

            enum TimeSpanStandardStyles
            {
                None = 0,
                Invariant = 1,
                Localized = 2,
                RequireFull = 4,
                Any = 3,
            }

            enum TTT
            {
                None = 0,
                End = 1,
                Num = 2,
                Sep = 3,
                NumOverflow = 4,
            }

            struct TimeSpanToken
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _ttt;
                /*0x14*/ int _num;
                /*0x18*/ int _zeroes;
                /*0x20*/ System.ReadOnlySpan<char> _sep;

                /*0x13aaadc*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type);
                /*0x13a7500*/ TimeSpanToken(int number);
                /*0x13aa8c8*/ TimeSpanToken(int number, int leadingZeroes);
                /*0x13aaaec*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type, int number, int leadingZeroes, System.ReadOnlySpan<char> separator);
                /*0x13a3e44*/ bool IsInvalidFraction();
            }

            struct TimeSpanTokenizer
            {
                /*0x10*/ System.ReadOnlySpan<char> _value;
                /*0x20*/ int _pos;

                /*0x13a4378*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input);
                /*0x13aa690*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input, int startPosition);
                /*0x13a43d8*/ System.Globalization.TimeSpanParse.TimeSpanToken GetNextToken();
                /*0x13aa87c*/ bool get_EOL();
                /*0x13aa8dc*/ void BackOne();
                /*0x13aa81c*/ char get_NextChar();
            }

            struct TimeSpanRawInfo
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _lastSeenTTT;
                /*0x14*/ int _tokenCount;
                /*0x18*/ int _sepCount;
                /*0x1c*/ int _numCount;
                /*0x20*/ System.Globalization.TimeSpanFormat.FormatLiterals _posLoc;
                /*0x48*/ System.Globalization.TimeSpanFormat.FormatLiterals _negLoc;
                /*0x70*/ bool _posLocInit;
                /*0x71*/ bool _negLocInit;
                /*0x78*/ string _fullPosPattern;
                /*0x80*/ string _fullNegPattern;
                /*0x88*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers0;
                /*0xa8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers1;
                /*0xc8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers2;
                /*0xe8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers3;
                /*0x108*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers4;
                /*0x128*/ System.ReadOnlySpan<char> _literals0;
                /*0x138*/ System.ReadOnlySpan<char> _literals1;
                /*0x148*/ System.ReadOnlySpan<char> _literals2;
                /*0x158*/ System.ReadOnlySpan<char> _literals3;
                /*0x168*/ System.ReadOnlySpan<char> _literals4;
                /*0x178*/ System.ReadOnlySpan<char> _literals5;

                /*0x13aaafc*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveInvariant();
                /*0x13aab64*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeInvariant();
                /*0x13a739c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveLocalized();
                /*0x13a744c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeLocalized();
                /*0x13a8214*/ bool FullAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a9324*/ bool PartialAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a6be8*/ bool FullMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a9c80*/ bool FullDMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a9868*/ bool FullHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a8dd8*/ bool FullDHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a888c*/ bool FullHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a7b94*/ bool FullDHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a7514*/ bool FullHMSFMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0x13a4384*/ void Init(System.Globalization.DateTimeFormatInfo dtfi);
                /*0x13a4618*/ bool ProcessToken(ref System.Globalization.TimeSpanParse.TimeSpanToken tok, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x13aabd0*/ bool AddSep(System.ReadOnlySpan<char> sep, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x13aacdc*/ bool AddNum(System.Globalization.TimeSpanParse.TimeSpanToken num, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            }

            struct TimeSpanResult
            {
                /*0x10*/ System.TimeSpan parsedTimeSpan;
                /*0x18*/ bool _throwOnFailure;

                /*0x13a3ed0*/ TimeSpanResult(bool throwOnFailure);
                /*0x13a4230*/ bool SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind kind, string resourceKey, object messageArgument, string argumentName);
            }

            struct StringParser
            {
                /*0x10*/ System.ReadOnlySpan<char> _str;
                /*0x20*/ char _ch;
                /*0x24*/ int _pos;
                /*0x28*/ int _len;

                /*0x13aadec*/ void NextChar();
                /*0x13aae38*/ char NextNonDigit();
                /*0x13aa8f0*/ bool TryParse(System.ReadOnlySpan<char> input, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x13ab084*/ bool ParseInt(int max, ref int i, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x13aaec4*/ bool ParseTime(ref long time, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0x13aae94*/ void SkipBlanks();
            }
        }

        enum TimeSpanStyles
        {
            None = 0,
            AssumeNegative = 1,
        }

        enum UnicodeCategory
        {
            UppercaseLetter = 0,
            LowercaseLetter = 1,
            TitlecaseLetter = 2,
            ModifierLetter = 3,
            OtherLetter = 4,
            NonSpacingMark = 5,
            SpacingCombiningMark = 6,
            EnclosingMark = 7,
            DecimalDigitNumber = 8,
            LetterNumber = 9,
            OtherNumber = 10,
            SpaceSeparator = 11,
            LineSeparator = 12,
            ParagraphSeparator = 13,
            Control = 14,
            Format = 15,
            Surrogate = 16,
            PrivateUse = 17,
            ConnectorPunctuation = 18,
            DashPunctuation = 19,
            OpenPunctuation = 20,
            ClosePunctuation = 21,
            InitialQuotePunctuation = 22,
            FinalQuotePunctuation = 23,
            OtherPunctuation = 24,
            MathSymbol = 25,
            CurrencySymbol = 26,
            ModifierSymbol = 27,
            OtherSymbol = 28,
            OtherNotAssigned = 29,
        }

        class GlobalizationMode
        {
            static /*0x0*/ bool <Invariant>k__BackingField;

            static /*0x13ab1fc*/ GlobalizationMode();
            static /*0x13ab19c*/ bool get_Invariant();
            static /*0x13ab1f4*/ bool GetGlobalizationInvariantMode();
        }

        class Calendar : System.ICloneable
        {
            static long TicksPerMillisecond = 10000;
            static long TicksPerSecond = 10000000;
            static long TicksPerMinute = 600000000;
            static long TicksPerHour = 36000000000;
            static long TicksPerDay = 864000000000;
            static int MillisPerSecond = 1000;
            static int MillisPerMinute = 60000;
            static int MillisPerHour = 3600000;
            static int MillisPerDay = 86400000;
            static int DaysPerYear = 365;
            static int DaysPer4Years = 1461;
            static int DaysPer100Years = 36524;
            static int DaysPer400Years = 146097;
            static int DaysTo10000 = 3652059;
            static long MaxMillis = 315537897600000;
            static int CAL_GREGORIAN = 1;
            static int CAL_GREGORIAN_US = 2;
            static int CAL_JAPAN = 3;
            static int CAL_TAIWAN = 4;
            static int CAL_KOREA = 5;
            static int CAL_HIJRI = 6;
            static int CAL_THAI = 7;
            static int CAL_HEBREW = 8;
            static int CAL_GREGORIAN_ME_FRENCH = 9;
            static int CAL_GREGORIAN_ARABIC = 10;
            static int CAL_GREGORIAN_XLIT_ENGLISH = 11;
            static int CAL_GREGORIAN_XLIT_FRENCH = 12;
            static int CAL_JULIAN = 13;
            static int CAL_JAPANESELUNISOLAR = 14;
            static int CAL_CHINESELUNISOLAR = 15;
            static int CAL_SAKA = 16;
            static int CAL_LUNAR_ETO_CHN = 17;
            static int CAL_LUNAR_ETO_KOR = 18;
            static int CAL_LUNAR_ETO_ROKUYOU = 19;
            static int CAL_KOREANLUNISOLAR = 20;
            static int CAL_TAIWANLUNISOLAR = 21;
            static int CAL_PERSIAN = 22;
            static int CAL_UMALQURA = 23;
            static int CurrentEra = 0;
            /*0x10*/ int m_currentEraValue;
            /*0x14*/ bool m_isReadOnly;
            /*0x18*/ int twoDigitYearMax;

            static /*0x13ab998*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            static /*0x13abb54*/ int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue);
            /*0x13ab2f4*/ Calendar();
            /*0x13ab244*/ System.DateTime get_MinSupportedDateTime();
            /*0x13ab29c*/ System.DateTime get_MaxSupportedDateTime();
            /*0x13ab308*/ int get_ID();
            /*0x13ab310*/ int get_BaseCalendarID();
            /*0x13ab31c*/ object Clone();
            /*0x13ab3a4*/ void VerifyWritable();
            /*0x13ab418*/ void SetReadOnlyState(bool readOnly);
            /*0x13ab424*/ int get_CurrentEraValue();
            int GetDayOfMonth(System.DateTime time);
            System.DayOfWeek GetDayOfWeek(System.DateTime time);
            int GetDaysInMonth(int year, int month, int era);
            int GetDaysInYear(int year, int era);
            int GetEra(System.DateTime time);
            int[] get_Eras();
            int GetMonth(System.DateTime time);
            int GetMonthsInYear(int year, int era);
            int GetYear(System.DateTime time);
            /*0x13ab558*/ bool IsLeapYear(int year);
            bool IsLeapYear(int year, int era);
            /*0x13ab56c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
            System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13ab594*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x13ab6f4*/ bool IsValidYear(int year, int era);
            /*0x13ab778*/ bool IsValidMonth(int year, int month, int era);
            /*0x13ab7f0*/ bool IsValidDay(int year, int month, int day, int era);
            /*0x13ab870*/ int get_TwoDigitYearMax();
            /*0x13ab878*/ void set_TwoDigitYearMax(int value);
            /*0x13ab89c*/ int ToFourDigitYear(int year);
        }

        class CalendarData
        {
            static int MAX_CALENDARS = 23;
            static /*0x0*/ System.Globalization.CalendarData Invariant;
            static /*0x8*/ string[] HEBREW_MONTH_NAMES;
            static /*0x10*/ string[] HEBREW_LEAP_MONTH_NAMES;
            /*0x10*/ string sNativeName;
            /*0x18*/ string[] saShortDates;
            /*0x20*/ string[] saYearMonths;
            /*0x28*/ string[] saLongDates;
            /*0x30*/ string sMonthDay;
            /*0x38*/ string[] saEraNames;
            /*0x40*/ string[] saAbbrevEraNames;
            /*0x48*/ string[] saAbbrevEnglishEraNames;
            /*0x50*/ string[] saDayNames;
            /*0x58*/ string[] saAbbrevDayNames;
            /*0x60*/ string[] saSuperShortDayNames;
            /*0x68*/ string[] saMonthNames;
            /*0x70*/ string[] saAbbrevMonthNames;
            /*0x78*/ string[] saMonthGenitiveNames;
            /*0x80*/ string[] saAbbrevMonthGenitiveNames;
            /*0x88*/ string[] saLeapYearMonthNames;
            /*0x90*/ int iTwoDigitYearMax;
            /*0x94*/ int iCurrentEra;
            /*0x98*/ bool bUseUserOverrides;

            static /*0x13abbc0*/ CalendarData();
            static /*0x13adeb0*/ string[] GetJapaneseEraNames();
            static /*0x13addc4*/ string[] GetJapaneseEnglishEraNames();
            static /*0x13ab4b0*/ System.Globalization.CalendarData GetCalendarData(int calendarId);
            static /*0x13ae1c4*/ string CalendarIdToCultureName(int calendarId);
            static /*0x13abba8*/ int nativeGetTwoDigitYearMax(int calID);
            static /*0x13ad650*/ bool nativeGetCalendarData(System.Globalization.CalendarData data, string localeName, int calendarId);
            /*0x13abbb0*/ CalendarData();
            /*0x13ad0ec*/ CalendarData(string localeName, int calendarId, bool bUseUserOverrides);
            /*0x13ad70c*/ void InitializeEraNames(string localeName, int calendarId);
            /*0x13adac8*/ void InitializeAbbreviatedEraNames(string localeName, int calendarId);
            /*0x13ae290*/ bool fill_calendar_data(string localeName, int datetimeIndex);
        }

        class GregorianCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x1c*/ System.Globalization.GregorianCalendarTypes m_type;

            static /*0x13af73c*/ GregorianCalendar();
            static /*0x13ae420*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x13ae874*/ long GetAbsoluteDate(int year, int month, int day);
            /*0x13ae4f0*/ GregorianCalendar();
            /*0x13ae51c*/ GregorianCalendar(System.Globalization.GregorianCalendarTypes type);
            /*0x13ae294*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13ae370*/ System.DateTime get_MinSupportedDateTime();
            /*0x13ae3c8*/ System.DateTime get_MaxSupportedDateTime();
            /*0x13ae670*/ int get_ID();
            /*0x13ae678*/ int GetDatePart(long ticks, int part);
            /*0x13aea5c*/ int GetDayOfMonth(System.DateTime time);
            /*0x13aeaa0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x13aeb08*/ int GetDaysInMonth(int year, int month, int era);
            /*0x13aedb8*/ int GetDaysInYear(int year, int era);
            /*0x13aef4c*/ int GetEra(System.DateTime time);
            /*0x13aef54*/ int[] get_Eras();
            /*0x13aefb8*/ int GetMonth(System.DateTime time);
            /*0x13aeffc*/ int GetMonthsInYear(int year, int era);
            /*0x13af14c*/ int GetYear(System.DateTime time);
            /*0x13af190*/ bool IsLeapYear(int year, int era);
            /*0x13af32c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13af3cc*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x13af4c0*/ int get_TwoDigitYearMax();
            /*0x13af504*/ void set_TwoDigitYearMax(int value);
            /*0x13af61c*/ int ToFourDigitYear(int year);
        }

        class EraInfo
        {
            /*0x10*/ int era;
            /*0x18*/ long ticks;
            /*0x20*/ int yearOffset;
            /*0x24*/ int minEraYear;
            /*0x28*/ int maxEraYear;
            /*0x30*/ string eraName;
            /*0x38*/ string abbrevEraName;
            /*0x40*/ string englishEraName;

            /*0x13af80c*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear);
            /*0x13af8a8*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName);
        }

        class GregorianCalendarHelper
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            /*0x10*/ int m_maxYear;
            /*0x14*/ int m_minYear;
            /*0x18*/ System.Globalization.Calendar m_Cal;
            /*0x20*/ System.Globalization.EraInfo[] m_EraInfo;
            /*0x28*/ int[] m_eras;
            /*0x30*/ System.DateTime m_minDate;

            static /*0x13b0d9c*/ GregorianCalendarHelper();
            static /*0x13b00ac*/ long GetAbsoluteDate(int year, int month, int day);
            static /*0x13b0294*/ long DateToTicks(int year, int month, int day);
            static /*0x13b0314*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            /*0x13af964*/ GregorianCalendarHelper(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo);
            /*0x13af95c*/ int get_MaxYear();
            /*0x13af9dc*/ int GetYearOffset(int year, int era, bool throwOnError);
            /*0x13afcd0*/ int GetGregorianYear(int year, int era);
            /*0x13afcec*/ bool IsValidYear(int year, int era);
            /*0x13afd08*/ int GetDatePart(long ticks, int part);
            /*0x13aff14*/ void CheckTicksRange(long ticks);
            /*0x13b04d0*/ int GetDayOfMonth(System.DateTime time);
            /*0x13b0510*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x13b059c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x13b0728*/ int GetDaysInYear(int year, int era);
            /*0x13b0798*/ int GetEra(System.DateTime time);
            /*0x13b0868*/ int[] get_Eras();
            /*0x13b0958*/ int GetMonth(System.DateTime time);
            /*0x13b0998*/ int GetMonthsInYear(int year, int era);
            /*0x13b09b0*/ int GetYear(System.DateTime time);
            /*0x13b0aa0*/ bool IsLeapYear(int year, int era);
            /*0x13b0b10*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13b0c14*/ int ToFourDigitYear(int year, int twoDigitYearMax);
        }

        enum GregorianCalendarTypes
        {
            Localized = 1,
            USEnglish = 2,
            MiddleEastFrench = 9,
            Arabic = 10,
            TransliteratedEnglish = 11,
            TransliteratedFrench = 12,
        }

        class HijriCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int HijriEra;
            static /*0x8*/ int[] HijriMonthDays;
            static /*0x10*/ System.DateTime calendarMinValue;
            static /*0x18*/ System.DateTime calendarMaxValue;
            /*0x1c*/ int m_HijriAdvance;

            static /*0x13b2230*/ HijriCalendar();
            static /*0x13b112c*/ int GetAdvanceHijriDate();
            static /*0x13b1134*/ void CheckTicksRange(long ticks);
            static /*0x13b12e4*/ void CheckEraRange(int era);
            static /*0x13b13b4*/ void CheckYearRange(int year, int era);
            static /*0x13b150c*/ void CheckYearMonthRange(int year, int month, int era);
            /*0x13b0f1c*/ HijriCalendar();
            /*0x13b0e6c*/ System.DateTime get_MinSupportedDateTime();
            /*0x13b0ec4*/ System.DateTime get_MaxSupportedDateTime();
            /*0x13b0f38*/ int get_ID();
            /*0x13b0f40*/ long GetAbsoluteDateHijri(int y, int m, int d);
            /*0x13b1008*/ long DaysUpToHijriYear(int HijriYear);
            /*0x13b10c4*/ int get_HijriAdjustment();
            /*0x13b1694*/ int GetDatePart(long ticks, int part);
            /*0x13b1904*/ int GetDayOfMonth(System.DateTime time);
            /*0x13b1948*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x13b19b0*/ int GetDaysInMonth(int year, int month, int era);
            /*0x13b1a7c*/ int GetDaysInYear(int year, int era);
            /*0x13b1b10*/ int GetEra(System.DateTime time);
            /*0x13b1b88*/ int[] get_Eras();
            /*0x13b1c24*/ int GetMonth(System.DateTime time);
            /*0x13b1c68*/ int GetMonthsInYear(int year, int era);
            /*0x13b1cd4*/ int GetYear(System.DateTime time);
            /*0x13b1d18*/ bool IsLeapYear(int year, int era);
            /*0x13b1db8*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13b1f98*/ int get_TwoDigitYearMax();
            /*0x13b1fdc*/ void set_TwoDigitYearMax(int value);
            /*0x13b20f4*/ int ToFourDigitYear(int year);
        }

        class JapaneseCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.DateTime calendarMinValue;
            static /*0x8*/ System.Globalization.EraInfo[] japaneseEraInfo;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x13b2f58*/ JapaneseCalendar();
            static /*0x13b23f4*/ System.Globalization.EraInfo[] GetEraInfo();
            static /*0x13b284c*/ System.Globalization.EraInfo[] GetErasFromRegistry();
            static /*0x13b2854*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x13adf9c*/ string[] EraNames();
            static /*0x13ae0b0*/ string[] EnglishEraNames();
            /*0x13b290c*/ JapaneseCalendar();
            /*0x13b2344*/ System.DateTime get_MinSupportedDateTime();
            /*0x13b239c*/ System.DateTime get_MaxSupportedDateTime();
            /*0x13b2adc*/ int get_ID();
            /*0x13b2ae4*/ int GetDaysInMonth(int year, int month, int era);
            /*0x13b2afc*/ int GetDaysInYear(int year, int era);
            /*0x13b2b14*/ int GetDayOfMonth(System.DateTime time);
            /*0x13b2b5c*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x13b2b74*/ int GetMonthsInYear(int year, int era);
            /*0x13b2b98*/ int GetEra(System.DateTime time);
            /*0x13b2bb0*/ int GetMonth(System.DateTime time);
            /*0x13b2bf8*/ int GetYear(System.DateTime time);
            /*0x13b2c10*/ bool IsLeapYear(int year, int era);
            /*0x13b2c28*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13b2c48*/ int ToFourDigitYear(int year);
            /*0x13b2d98*/ int[] get_Eras();
            /*0x13b2db0*/ bool IsValidYear(int year, int era);
            /*0x13b2dd8*/ int get_TwoDigitYearMax();
            /*0x13b2e1c*/ void set_TwoDigitYearMax(int value);
        }

        class NumberFormatInfo : System.ICloneable, System.IFormatProvider
        {
            static System.Globalization.NumberStyles InvalidNumberStyles = -1024;
            static /*0x0*/ System.Globalization.NumberFormatInfo invariantInfo;
            /*0x10*/ int[] numberGroupSizes;
            /*0x18*/ int[] currencyGroupSizes;
            /*0x20*/ int[] percentGroupSizes;
            /*0x28*/ string positiveSign;
            /*0x30*/ string negativeSign;
            /*0x38*/ string numberDecimalSeparator;
            /*0x40*/ string numberGroupSeparator;
            /*0x48*/ string currencyGroupSeparator;
            /*0x50*/ string currencyDecimalSeparator;
            /*0x58*/ string currencySymbol;
            /*0x60*/ string ansiCurrencySymbol;
            /*0x68*/ string nanSymbol;
            /*0x70*/ string positiveInfinitySymbol;
            /*0x78*/ string negativeInfinitySymbol;
            /*0x80*/ string percentDecimalSeparator;
            /*0x88*/ string percentGroupSeparator;
            /*0x90*/ string percentSymbol;
            /*0x98*/ string perMilleSymbol;
            /*0xa0*/ string[] nativeDigits;
            /*0xa8*/ int m_dataItem;
            /*0xac*/ int numberDecimalDigits;
            /*0xb0*/ int currencyDecimalDigits;
            /*0xb4*/ int currencyPositivePattern;
            /*0xb8*/ int currencyNegativePattern;
            /*0xbc*/ int numberNegativePattern;
            /*0xc0*/ int percentPositivePattern;
            /*0xc4*/ int percentNegativePattern;
            /*0xc8*/ int percentDecimalDigits;
            /*0xcc*/ int digitSubstitution;
            /*0xd0*/ bool isReadOnly;
            /*0xd1*/ bool m_useUserOverride;
            /*0xd2*/ bool m_isInvariant;
            /*0xd3*/ bool validForParseAsNumber;
            /*0xd4*/ bool validForParseAsCurrency;

            static /*0x13b3620*/ System.Globalization.NumberFormatInfo get_InvariantInfo();
            static /*0x13b3798*/ System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider);
            static /*0x13b3954*/ System.Globalization.NumberFormatInfo get_CurrentInfo();
            static /*0x13b36c4*/ System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi);
            static /*0x13b3dfc*/ void ValidateParseStyleInteger(System.Globalization.NumberStyles style);
            static /*0x13b3ed4*/ void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style);
            /*0x13b2fc0*/ NumberFormatInfo();
            /*0x13b2fc8*/ NumberFormatInfo(System.Globalization.CultureData cultureData);
            /*0x13b3520*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13b35a4*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13b35a8*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13b35ac*/ void VerifyWritable();
            /*0x13b3a48*/ object Clone();
            /*0x13b3ab4*/ int get_CurrencyDecimalDigits();
            /*0x13b3abc*/ string get_CurrencyDecimalSeparator();
            /*0x13b3ac4*/ bool get_IsReadOnly();
            /*0x13b3acc*/ int[] get_CurrencyGroupSizes();
            /*0x13b3b44*/ int[] get_NumberGroupSizes();
            /*0x13b3bbc*/ int[] get_PercentGroupSizes();
            /*0x13b3c34*/ string get_CurrencyGroupSeparator();
            /*0x13b3c3c*/ string get_CurrencySymbol();
            /*0x13b3c44*/ string get_NaNSymbol();
            /*0x13b3c4c*/ void set_NaNSymbol(string value);
            /*0x13b3cdc*/ int get_CurrencyNegativePattern();
            /*0x13b3ce4*/ int get_NumberNegativePattern();
            /*0x13b3cec*/ int get_PercentPositivePattern();
            /*0x13b3cf4*/ int get_PercentNegativePattern();
            /*0x13b3cfc*/ string get_NegativeInfinitySymbol();
            /*0x13b3d04*/ string get_NegativeSign();
            /*0x13b3d0c*/ int get_NumberDecimalDigits();
            /*0x13b3d14*/ string get_NumberDecimalSeparator();
            /*0x13b3d1c*/ string get_NumberGroupSeparator();
            /*0x13b3d24*/ int get_CurrencyPositivePattern();
            /*0x13b3d2c*/ string get_PositiveInfinitySymbol();
            /*0x13b3d34*/ string get_PositiveSign();
            /*0x13b3d3c*/ int get_PercentDecimalDigits();
            /*0x13b3d44*/ string get_PercentDecimalSeparator();
            /*0x13b3d4c*/ string get_PercentGroupSeparator();
            /*0x13b3d54*/ string get_PercentSymbol();
            /*0x13b3d5c*/ string get_PerMilleSymbol();
            /*0x13b3d64*/ object GetFormat(System.Type formatType);
        }

        class TaiwanCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] taiwanEraInfo;
            static /*0x8*/ System.Globalization.Calendar s_defaultInstance;
            static /*0x10*/ System.DateTime calendarMinValue;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x13b472c*/ TaiwanCalendar();
            static /*0x13b3fa0*/ System.Globalization.Calendar GetDefaultInstance();
            /*0x13b4058*/ TaiwanCalendar();
            /*0x13b4228*/ System.DateTime get_MinSupportedDateTime();
            /*0x13b4280*/ System.DateTime get_MaxSupportedDateTime();
            /*0x13b42d8*/ int get_ID();
            /*0x13b42e0*/ int GetDaysInMonth(int year, int month, int era);
            /*0x13b42f8*/ int GetDaysInYear(int year, int era);
            /*0x13b4310*/ int GetDayOfMonth(System.DateTime time);
            /*0x13b4358*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x13b4370*/ int GetMonthsInYear(int year, int era);
            /*0x13b4394*/ int GetEra(System.DateTime time);
            /*0x13b43ac*/ int GetMonth(System.DateTime time);
            /*0x13b43f4*/ int GetYear(System.DateTime time);
            /*0x13b440c*/ bool IsLeapYear(int year, int era);
            /*0x13b4424*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13b4444*/ int[] get_Eras();
            /*0x13b445c*/ int get_TwoDigitYearMax();
            /*0x13b44a0*/ void set_TwoDigitYearMax(int value);
            /*0x13b45dc*/ int ToFourDigitYear(int year);
        }

        class TextInfo : System.ICloneable, System.Runtime.Serialization.IDeserializationCallback
        {
            static int wordSeparatorMask = 536672256;
            static /*0x0*/ System.Globalization.TextInfo s_Invariant;
            /*0x10*/ string m_listSeparator;
            /*0x18*/ bool m_isReadOnly;
            /*0x20*/ string m_cultureName;
            /*0x28*/ System.Globalization.CultureData m_cultureData;
            /*0x30*/ string m_textInfoName;
            /*0x38*/ System.Nullable<bool> m_IsAsciiCasingSameAsInvariant;
            /*0x40*/ string customCultureName;
            /*0x48*/ int m_nDataItem;
            /*0x4c*/ bool m_useUserOverride;
            /*0x50*/ int m_win32LangID;

            static /*0x13b484c*/ System.Globalization.TextInfo get_Invariant();
            static /*0x13b4cac*/ char ToLowerAsciiInvariant(char c);
            static /*0x13b52a8*/ char ToUpperAsciiInvariant(char c);
            static /*0x13b4b98*/ bool IsAscii(char c);
            /*0x13b48ec*/ TextInfo(System.Globalization.CultureData cultureData);
            /*0x13b5b4c*/ TextInfo();
            /*0x13b4928*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13b4930*/ void OnDeserialized();
            /*0x13b4a14*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13b4a18*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x13b4a98*/ string get_CultureName();
            /*0x13b4aa0*/ object Clone();
            /*0x13b4b28*/ void SetReadOnlyState(bool readOnly);
            /*0x13b4b34*/ char ToLower(char c);
            /*0x13b5108*/ string ToLower(string str);
            /*0x13b5244*/ char ToUpper(char c);
            /*0x13b5724*/ string ToUpper(string str);
            /*0x13b4ba8*/ bool get_IsAsciiCasingSameAsInvariant();
            /*0x13b5860*/ bool Equals(object obj);
            /*0x13b5900*/ int GetHashCode();
            /*0x13b5920*/ string ToString();
            /*0x13b5978*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x13b577c*/ string ToUpperInternal(string str);
            /*0x13b5160*/ string ToLowerInternal(string str);
            /*0x13b52c4*/ char ToUpperInternal(char c);
            /*0x13b4cc8*/ char ToLowerInternal(char c);
            /*0x13b597c*/ void ToUpperAsciiInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
            /*0x13b5a0c*/ void ChangeCase(System.ReadOnlySpan<char> source, System.Span<char> destination, bool toUpper);
        }

        class ThaiBuddhistCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] thaiBuddhistEraInfo;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x13b6090*/ ThaiBuddhistCalendar();
            /*0x13b5c34*/ ThaiBuddhistCalendar();
            /*0x13b5b84*/ System.DateTime get_MinSupportedDateTime();
            /*0x13b5bdc*/ System.DateTime get_MaxSupportedDateTime();
            /*0x13b5ce0*/ int get_ID();
            /*0x13b5ce8*/ int GetDaysInMonth(int year, int month, int era);
            /*0x13b5d00*/ int GetDaysInYear(int year, int era);
            /*0x13b5d18*/ int GetDayOfMonth(System.DateTime time);
            /*0x13b5d60*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x13b5d78*/ int GetMonthsInYear(int year, int era);
            /*0x13b5d9c*/ int GetEra(System.DateTime time);
            /*0x13b5db4*/ int GetMonth(System.DateTime time);
            /*0x13b5dfc*/ int GetYear(System.DateTime time);
            /*0x13b5e14*/ bool IsLeapYear(int year, int era);
            /*0x13b5e2c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x13b5e4c*/ int[] get_Eras();
            /*0x13b5e64*/ int get_TwoDigitYearMax();
            /*0x13b5ea8*/ void set_TwoDigitYearMax(int value);
            /*0x13b5fe4*/ int ToFourDigitYear(int year);
        }

        class UmAlQuraCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.UmAlQuraCalendar.DateMapping[] HijriYearInfo;
            static /*0x8*/ System.DateTime minDate;
            static /*0x10*/ System.DateTime maxDate;

            static /*0x1494b0c*/ UmAlQuraCalendar();
            static /*0x14934f8*/ System.Globalization.UmAlQuraCalendar.DateMapping[] InitDateMapping();
            static /*0x1493764*/ void ConvertHijriToGregorian(int HijriYear, int HijriMonth, int HijriDay, ref int yg, ref int mg, ref int dg);
            static /*0x14938a4*/ long GetAbsoluteDateUmAlQura(int year, int month, int day);
            static /*0x149396c*/ void CheckTicksRange(long ticks);
            static /*0x1493b78*/ void CheckEraRange(int era);
            static /*0x1493bf4*/ void CheckYearRange(int year, int era);
            static /*0x1493d5c*/ void CheckYearMonthRange(int year, int month, int era);
            static /*0x1493e3c*/ void ConvertGregorianToHijri(System.DateTime time, ref int HijriYear, ref int HijriMonth, ref int HijriDay);
            static /*0x1494334*/ int RealGetDaysInYear(int year);
            /*0x149374c*/ UmAlQuraCalendar();
            /*0x149369c*/ System.DateTime get_MinSupportedDateTime();
            /*0x14936f4*/ System.DateTime get_MaxSupportedDateTime();
            /*0x1493754*/ int get_BaseCalendarID();
            /*0x149375c*/ int get_ID();
            /*0x1494094*/ int GetDatePart(System.DateTime time, int part);
            /*0x1494200*/ int GetDayOfMonth(System.DateTime time);
            /*0x1494214*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x149427c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x14943d4*/ int GetDaysInYear(int year, int era);
            /*0x1494440*/ int GetEra(System.DateTime time);
            /*0x14944b0*/ int[] get_Eras();
            /*0x1494514*/ int GetMonth(System.DateTime time);
            /*0x1494528*/ int GetMonthsInYear(int year, int era);
            /*0x1494594*/ int GetYear(System.DateTime time);
            /*0x14945a8*/ bool IsLeapYear(int year, int era);
            /*0x1494620*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x1494874*/ int get_TwoDigitYearMax();
            /*0x14948b0*/ void set_TwoDigitYearMax(int value);
            /*0x14949d0*/ int ToFourDigitYear(int year);

            struct DateMapping
            {
                /*0x10*/ int HijriMonthsLengthFlags;
                /*0x18*/ System.DateTime GregorianDate;

                /*0x149365c*/ DateMapping(int MonthsLengthFlags, int GYear, int GMonth, int GDay);
            }
        }

        class SortKey
        {
            /*0x10*/ string source;
            /*0x18*/ byte[] key;
            /*0x20*/ System.Globalization.CompareOptions options;
            /*0x24*/ int lcid;

            static /*0x1494bf4*/ int Compare(System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
            /*0x1494d68*/ SortKey(int lcid, string source, System.Globalization.CompareOptions opt);
            /*0x1494e3c*/ SortKey(int lcid, string source, byte[] buffer, System.Globalization.CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength);
            /*0x1494e7c*/ SortKey(string localeName, string str, System.Globalization.CompareOptions options, byte[] keyData);
            /*0x14951dc*/ SortKey();
            /*0x1494ec4*/ string get_OriginalString();
            /*0x1494ecc*/ byte[] get_KeyData();
            /*0x1494ed4*/ bool Equals(object value);
            /*0x1494f84*/ int GetHashCode();
            /*0x1494fec*/ string ToString();
        }

        interface ISimpleCollator
        {
            System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
            bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
            bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
            int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
            int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
        }

        class CultureData
        {
            static /*0x0*/ System.Globalization.CultureData s_Invariant;
            /*0x10*/ string sAM1159;
            /*0x18*/ string sPM2359;
            /*0x20*/ string sTimeSeparator;
            /*0x28*/ string[] saLongTimes;
            /*0x30*/ string[] saShortTimes;
            /*0x38*/ int iFirstDayOfWeek;
            /*0x3c*/ int iFirstWeekOfYear;
            /*0x40*/ int[] waCalendars;
            /*0x48*/ System.Globalization.CalendarData[] calendars;
            /*0x50*/ string sISO639Language;
            /*0x58*/ string sRealName;
            /*0x60*/ bool bUseOverrides;
            /*0x64*/ int calendarId;
            /*0x68*/ int numberIndex;
            /*0x6c*/ int iDefaultAnsiCodePage;
            /*0x70*/ int iDefaultOemCodePage;
            /*0x74*/ int iDefaultMacCodePage;
            /*0x78*/ int iDefaultEbcdicCodePage;
            /*0x7c*/ bool isRightToLeft;
            /*0x80*/ string sListSeparator;

            static /*0x149523c*/ System.Globalization.CultureData get_Invariant();
            static /*0x14955e0*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride);
            static /*0x14956d8*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator);
            static /*0x1495e98*/ string GetDateSeparator(string format);
            static /*0x1495ee0*/ string GetSeparator(string format, string timeParts);
            static /*0x1495fe4*/ int IndexOfTimePart(string format, int startIndex, string timeParts);
            static /*0x14960d0*/ string UnescapeNlsString(string str, int start, int end);
            static /*0x1496274*/ string[] ReescapeWin32Strings(string[] array);
            static /*0x1496278*/ string ReescapeWin32String(string str);
            static /*0x149627c*/ int strlen(byte* s);
            static /*0x1496294*/ string idx2string(byte* data, int idx);
            static /*0x1496528*/ byte* fill_number_data(int index, ref System.Globalization.CultureData.NumberFormatEntryManaged nfe);
            /*0x1495214*/ CultureData(string name);
            /*0x14957f8*/ void fill_culture_data(int datetimeIndex);
            /*0x14957fc*/ System.Globalization.CalendarData GetCalendar(int calendarId);
            /*0x1495918*/ string[] get_LongTimes();
            /*0x1495930*/ string[] get_ShortTimes();
            /*0x1495948*/ string get_SISO639LANGNAME();
            /*0x1495950*/ int get_IFIRSTDAYOFWEEK();
            /*0x1495958*/ int get_IFIRSTWEEKOFYEAR();
            /*0x1495960*/ string get_SAM1159();
            /*0x1495968*/ string get_SPM2359();
            /*0x1495970*/ string get_TimeSeparator();
            /*0x1495978*/ int[] get_CalendarIds();
            /*0x1495b28*/ System.Globalization.CalendarId[] GetCalendarIds();
            /*0x1495c00*/ bool get_IsInvariantCulture();
            /*0x1495c0c*/ string get_CultureName();
            /*0x1495c14*/ string get_SCOMPAREINFO();
            /*0x1495c54*/ string get_STEXTINFO();
            /*0x1495c5c*/ bool get_UseUserOverride();
            /*0x1495c64*/ string[] EraNames(int calendarId);
            /*0x1495c80*/ string[] AbbrevEraNames(int calendarId);
            /*0x1495c9c*/ string[] AbbreviatedEnglishEraNames(int calendarId);
            /*0x1495cb8*/ string[] ShortDates(int calendarId);
            /*0x1495cd4*/ string[] LongDates(int calendarId);
            /*0x1495cf0*/ string[] YearMonths(int calendarId);
            /*0x1495d0c*/ string[] DayNames(int calendarId);
            /*0x1495d28*/ string[] AbbreviatedDayNames(int calendarId);
            /*0x1495d44*/ string[] MonthNames(int calendarId);
            /*0x1495d60*/ string[] GenitiveMonthNames(int calendarId);
            /*0x1495d7c*/ string[] AbbreviatedMonthNames(int calendarId);
            /*0x1495d98*/ string[] AbbreviatedGenitiveMonthNames(int calendarId);
            /*0x1495db4*/ string[] LeapYearMonthNames(int calendarId);
            /*0x1495dd0*/ string MonthDay(int calendarId);
            /*0x1495dec*/ string DateSeparator(int calendarId);
            /*0x14962d8*/ int[] create_group_sizes_array(int gs0, int gs1);
            /*0x149638c*/ void GetNFIValues(System.Globalization.NumberFormatInfo nfi);

            struct NumberFormatEntryManaged
            {
                /*0x10*/ int currency_decimal_digits;
                /*0x14*/ int currency_decimal_separator;
                /*0x18*/ int currency_group_separator;
                /*0x1c*/ int currency_group_sizes0;
                /*0x20*/ int currency_group_sizes1;
                /*0x24*/ int currency_negative_pattern;
                /*0x28*/ int currency_positive_pattern;
                /*0x2c*/ int currency_symbol;
                /*0x30*/ int nan_symbol;
                /*0x34*/ int negative_infinity_symbol;
                /*0x38*/ int negative_sign;
                /*0x3c*/ int number_decimal_digits;
                /*0x40*/ int number_decimal_separator;
                /*0x44*/ int number_group_separator;
                /*0x48*/ int number_group_sizes0;
                /*0x4c*/ int number_group_sizes1;
                /*0x50*/ int number_negative_pattern;
                /*0x54*/ int per_mille_symbol;
                /*0x58*/ int percent_negative_pattern;
                /*0x5c*/ int percent_positive_pattern;
                /*0x60*/ int percent_symbol;
                /*0x64*/ int positive_infinity_symbol;
                /*0x68*/ int positive_sign;
            }
        }

        class CodePageDataItem
        {
            static /*0x0*/ char[] sep;
            /*0x10*/ int m_dataIndex;
            /*0x14*/ int m_uiFamilyCodePage;
            /*0x18*/ string m_webName;
            /*0x20*/ string m_headerName;
            /*0x28*/ uint m_flags;

            static /*0x14967fc*/ CodePageDataItem();
            static /*0x14965d0*/ string CreateString(string pStrings, uint index);
            /*0x149652c*/ CodePageDataItem(int dataIndex);
            /*0x1496684*/ string get_WebName();
            /*0x1496740*/ string get_HeaderName();
        }

        class EncodingTable
        {
            static /*0x0*/ System.Globalization.InternalEncodingDataItem[] encodingDataPtr;
            static /*0x8*/ System.Globalization.InternalCodePageDataItem[] codePageDataPtr;
            static /*0x10*/ int lastEncodingItem;
            static /*0x18*/ System.Collections.Generic.Dictionary<string, int> hashByName;
            static /*0x20*/ System.Collections.Generic.Dictionary<int, System.Globalization.CodePageDataItem> hashByCodePage;

            static /*0x1496900*/ EncodingTable();
            static /*0x1496880*/ int GetNumEncodingItems();
            static /*0x14968e4*/ System.Globalization.InternalEncodingDataItem ENC(string name, ushort cp);
            static /*0x14968ec*/ System.Globalization.InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags);
            static /*0x149bdb8*/ int internalGetCodePageFromName(string name);
            static /*0x149c00c*/ int GetCodePageFromName(string name);
            static /*0x149c290*/ System.Globalization.CodePageDataItem GetCodePageDataItem(int codepage);
        }

        struct InternalEncodingDataItem
        {
            /*0x10*/ string webName;
            /*0x18*/ ushort codePage;
        }

        struct InternalCodePageDataItem
        {
            /*0x10*/ ushort codePage;
            /*0x12*/ ushort uiFamilyCodePage;
            /*0x14*/ uint flags;
            /*0x18*/ string Names;
        }

        class TextInfoToUpperData
        {
            static /*0x0*/ char[] range_00e0_0586;
            static /*0x8*/ char[] range_1e01_1ff3;
            static /*0x10*/ char[] range_2170_2184;
            static /*0x18*/ char[] range_24d0_24e9;
            static /*0x20*/ char[] range_2c30_2ce3;
            static /*0x28*/ char[] range_2d00_2d25;
            static /*0x30*/ char[] range_a641_a697;
            static /*0x38*/ char[] range_a723_a78c;

            static /*0x149c578*/ TextInfoToUpperData();
        }

        class TextInfoToLowerData
        {
            static /*0x0*/ char[] range_00c0_0556;
            static /*0x8*/ char[] range_10a0_10c5;
            static /*0x10*/ char[] range_1e00_1ffc;
            static /*0x18*/ char[] range_2160_216f;
            static /*0x20*/ char[] range_24b6_24cf;
            static /*0x28*/ char[] range_2c00_2c2e;
            static /*0x30*/ char[] range_2c60_2ce2;
            static /*0x38*/ char[] range_a640_a696;
            static /*0x40*/ char[] range_a722_a78b;

            static /*0x149c7c8*/ TextInfoToLowerData();
        }

        class CultureInfo : System.ICloneable, System.IFormatProvider
        {
            static int InvariantCultureId = 127;
            static int CalendarTypeBits = 8;
            static int LOCALE_INVARIANT = 127;
            static string MSG_READONLY = "This instance is read only";
            static /*0x0*/ System.Globalization.CultureInfo invariant_culture_info;
            static /*0x8*/ object shared_table_lock;
            static /*0x10*/ System.Globalization.CultureInfo default_current_culture;
            static /*0x18*/ System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture;
            static /*0x20*/ System.Globalization.CultureInfo s_DefaultThreadCurrentCulture;
            static /*0x28*/ System.Collections.Generic.Dictionary<int, System.Globalization.CultureInfo> shared_by_number;
            static /*0x30*/ System.Collections.Generic.Dictionary<string, System.Globalization.CultureInfo> shared_by_name;
            static /*0x38*/ System.Globalization.CultureInfo s_UserPreferredCultureInfoInAppX;
            static /*0x40*/ bool IsTaiwanSku;
            /*0x10*/ bool m_isReadOnly;
            /*0x14*/ int cultureID;
            /*0x18*/ int parent_lcid;
            /*0x1c*/ int datetime_index;
            /*0x20*/ int number_index;
            /*0x24*/ int default_calendar_type;
            /*0x28*/ bool m_useUserOverride;
            /*0x30*/ System.Globalization.NumberFormatInfo numInfo;
            /*0x38*/ System.Globalization.DateTimeFormatInfo dateTimeInfo;
            /*0x40*/ System.Globalization.TextInfo textInfo;
            /*0x48*/ string m_name;
            /*0x50*/ string englishname;
            /*0x58*/ string nativename;
            /*0x60*/ string iso3lang;
            /*0x68*/ string iso2lang;
            /*0x70*/ string win3lang;
            /*0x78*/ string territory;
            /*0x80*/ string[] native_calendar_names;
            /*0x88*/ System.Globalization.CompareInfo compareInfo;
            /*0x90*/ void* textinfo_data;
            /*0x98*/ int m_dataItem;
            /*0xa0*/ System.Globalization.Calendar calendar;
            /*0xa8*/ System.Globalization.CultureInfo parent_culture;
            /*0xb0*/ bool constructed;
            /*0xb8*/ byte[] cached_serialized_form;
            /*0xc0*/ System.Globalization.CultureData m_cultureData;
            /*0xc8*/ bool m_isInherited;

            static /*0x14a1a98*/ CultureInfo();
            static /*0x1493b18*/ System.Globalization.CultureInfo get_InvariantCulture();
            static /*0x1493d3c*/ System.Globalization.CultureInfo get_CurrentCulture();
            static /*0x149cb04*/ System.Globalization.CultureInfo get_CurrentUICulture();
            static /*0x149cb24*/ System.Globalization.CultureInfo ConstructCurrentCulture();
            static /*0x149cf28*/ System.Globalization.CultureInfo ConstructCurrentUICulture();
            static /*0x149d8a4*/ System.Globalization.CultureInfo[] GetCultures(System.Globalization.CultureTypes types);
            static /*0x149cd08*/ string get_current_locale_name();
            static /*0x149dad4*/ System.Globalization.CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed);
            static /*0x149e968*/ void insert_into_shared_tables(System.Globalization.CultureInfo c);
            static /*0x149eaf0*/ System.Globalization.CultureInfo GetCultureInfo(int culture);
            static /*0x149ed34*/ System.Globalization.CultureInfo GetCultureInfo(string name);
            static /*0x149ef60*/ System.Globalization.CultureInfo CreateCulture(string name, bool reference);
            static /*0x149cd0c*/ System.Globalization.CultureInfo CreateSpecificCulture(string name);
            static /*0x149efd4*/ System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(string name);
            static /*0x149d038*/ System.Globalization.Calendar CreateCalendar(int calendarType);
            static /*0x149e880*/ System.Exception CreateNotFoundException(string name);
            static /*0x14a1728*/ System.Globalization.CultureInfo get_DefaultThreadCurrentCulture();
            static /*0x14a1788*/ System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture();
            static /*0x14a17f0*/ System.Globalization.CultureInfo get_UserDefaultUICulture();
            static /*0x14a183c*/ System.Globalization.CultureInfo get_UserDefaultCulture();
            static /*0x14a1888*/ void InitializeUserPreferredCultureInfoInAppX(System.Globalization.CultureInfo.OnCultureInfoChangedDelegate onCultureInfoChangedInAppX);
            static /*0x14a1898*/ void SetUserPreferredCultureInfoInAppX(string name);
            static /*0x149ca54*/ void OnCultureInfoChangedInAppX(string language);
            static /*0x14a18a8*/ System.Globalization.CultureInfo GetCultureInfoForUserPreferredLanguageInAppX();
            static /*0x14a1988*/ void SetCultureInfoForUserPreferredLanguageInAppX(System.Globalization.CultureInfo cultureInfo);
            /*0x149d4b8*/ CultureInfo(int culture);
            /*0x149e35c*/ CultureInfo(int culture, bool useUserOverride);
            /*0x149e368*/ CultureInfo(int culture, bool useUserOverride, bool read_only);
            /*0x149d4ac*/ CultureInfo(string name);
            /*0x14956cc*/ CultureInfo(string name, bool useUserOverride);
            /*0x149e5c8*/ CultureInfo(string name, bool useUserOverride, bool read_only);
            /*0x149e948*/ CultureInfo();
            /*0x149caf4*/ System.Globalization.CultureData get__cultureData();
            /*0x149cafc*/ bool get__isInherited();
            /*0x149cf74*/ string get_Territory();
            /*0x149cf7c*/ string get__name();
            /*0x149cf84*/ int get_LCID();
            /*0x149cf8c*/ string get_Name();
            /*0x149cf94*/ System.Globalization.Calendar get_Calendar();
            /*0x149d270*/ System.Globalization.CultureInfo get_Parent();
            /*0x149d4c4*/ System.Globalization.TextInfo get_TextInfo();
            /*0x149d65c*/ object Clone();
            /*0x149d7f8*/ bool Equals(object value);
            /*0x149dae4*/ System.Globalization.CultureInfo.Data GetTextInfoData();
            /*0x149db74*/ int GetHashCode();
            /*0x149db80*/ string ToString();
            /*0x149db88*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x149dce0*/ bool get_IsNeutralCulture();
            /*0x149dd28*/ void CheckNeutral();
            /*0x149dd2c*/ System.Globalization.NumberFormatInfo get_NumberFormat();
            /*0x149ddbc*/ void set_NumberFormat(System.Globalization.NumberFormatInfo value);
            /*0x149de8c*/ System.Globalization.DateTimeFormatInfo get_DateTimeFormat();
            /*0x149dfec*/ void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value);
            /*0x149e0bc*/ string get_EnglishName();
            /*0x149e0ec*/ object GetFormat(System.Type formatType);
            /*0x149d018*/ void Construct();
            /*0x149e1fc*/ bool construct_internal_locale_from_lcid(int lcid);
            /*0x149e200*/ bool construct_internal_locale_from_name(string name);
            /*0x149e204*/ void ConstructInvariant(bool read_only);
            /*0x149d5e0*/ System.Globalization.TextInfo CreateTextInfo(bool readOnly);
            /*0x149e7f4*/ bool ConstructLocaleFromName(string name);
            /*0x149dafc*/ int get_CalendarType();
            /*0x14a17e8*/ string get_SortName();

            struct Data
            {
                /*0x10*/ int ansi;
                /*0x14*/ int ebcdic;
                /*0x18*/ int mac;
                /*0x1c*/ int oem;
                /*0x20*/ bool right_to_left;
                /*0x21*/ byte list_sep;
            }

            class OnCultureInfoChangedDelegate : System.MulticastDelegate
            {
                /*0x1449ad0*/ OnCultureInfoChangedDelegate(object object, nint method);
                /*0x1449ba4*/ void Invoke(string language);
            }
        }

        class IdnMapping
        {
            /*0x10*/ bool allow_unassigned;
            /*0x11*/ bool use_std3;
            /*0x18*/ System.Globalization.Punycode puny;

            /*0x1449bb8*/ IdnMapping();
            /*0x1449c88*/ bool Equals(object obj);
            /*0x1449d14*/ int GetHashCode();
            /*0x1449d24*/ string GetAscii(string unicode);
            /*0x1449d88*/ string GetAscii(string unicode, int index, int count);
            /*0x1449e5c*/ string Convert(string input, int index, int count, bool toAscii);
            /*0x144a088*/ string ToAscii(string s, int offset);
            /*0x144aafc*/ void VerifyLength(string s, int offset);
            /*0x144a49c*/ string NamePrep(string s, int offset);
            /*0x144abc8*/ void VerifyProhibitedCharacters(string s, int offset);
            /*0x144a5e8*/ void VerifyStd3AsciiRules(string s, int offset);
            /*0x144ae08*/ string GetUnicode(string ascii);
            /*0x144ae6c*/ string GetUnicode(string ascii, int index, int count);
            /*0x144a2c4*/ string ToUnicode(string s, int offset);
        }

        class Bootstring
        {
            /*0x10*/ char delimiter;
            /*0x14*/ int base_num;
            /*0x18*/ int tmin;
            /*0x1c*/ int tmax;
            /*0x20*/ int skew;
            /*0x24*/ int damp;
            /*0x28*/ int initial_bias;
            /*0x2c*/ int initial_n;

            /*0x144b218*/ Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN);
            /*0x144a7b8*/ string Encode(string s, int offset);
            /*0x144b284*/ char EncodeDigit(int d);
            /*0x144b314*/ int DecodeDigit(char c);
            /*0x144b29c*/ int Adapt(int delta, int numPoints, bool firstTime);
            /*0x144af40*/ string Decode(string s, int offset);
        }

        class Punycode : System.Globalization.Bootstring
        {
            /*0x1449c48*/ Punycode();
        }

        class RegionInfo
        {
            static /*0x0*/ System.Globalization.RegionInfo currentRegion;
            /*0x10*/ int regionId;
            /*0x18*/ string iso2Name;
            /*0x20*/ string iso3Name;
            /*0x28*/ string win3Name;
            /*0x30*/ string englishName;
            /*0x38*/ string nativeName;
            /*0x40*/ string currencySymbol;
            /*0x48*/ string isoCurrencySymbol;
            /*0x50*/ string currencyEnglishName;
            /*0x58*/ string currencyNativeName;

            static /*0x144b34c*/ System.Globalization.RegionInfo get_CurrentRegion();
            static /*0x144baa0*/ void ClearCachedData();
            /*0x144b5b0*/ RegionInfo(int culture);
            /*0x144b768*/ RegionInfo(string name);
            /*0x144b418*/ RegionInfo(System.Globalization.CultureInfo ci);
            /*0x144b6bc*/ bool GetByTerritory(System.Globalization.CultureInfo ci);
            /*0x144b8ac*/ bool construct_internal_region_from_name(string name);
            /*0x144b8b0*/ string get_CurrencyEnglishName();
            /*0x144b8b8*/ string get_CurrencySymbol();
            /*0x144b8c0*/ string get_DisplayName();
            /*0x144b8c8*/ string get_EnglishName();
            /*0x144b8d0*/ int get_GeoId();
            /*0x144b8d8*/ bool get_IsMetric();
            /*0x144b964*/ string get_ISOCurrencySymbol();
            /*0x144b96c*/ string get_NativeName();
            /*0x144b974*/ string get_CurrencyNativeName();
            /*0x144b97c*/ string get_Name();
            /*0x144b984*/ string get_ThreeLetterISORegionName();
            /*0x144b98c*/ string get_ThreeLetterWindowsRegionName();
            /*0x144b994*/ string get_TwoLetterISORegionName();
            /*0x144b99c*/ bool Equals(object value);
            /*0x144ba64*/ int GetHashCode();
            /*0x144ba90*/ string ToString();
        }
    }

    namespace Diagnostics
    {
        class ConditionalAttribute : System.Attribute
        {
            /*0x10*/ string <ConditionString>k__BackingField;

            /*0x144bae8*/ ConditionalAttribute(string conditionString);
        }

        class StackTraceHiddenAttribute : System.Attribute
        {
            /*0x144bb10*/ StackTraceHiddenAttribute();
        }

        class DebuggerStepThroughAttribute : System.Attribute
        {
            /*0x144bb18*/ DebuggerStepThroughAttribute();
        }

        class DebuggerHiddenAttribute : System.Attribute
        {
            /*0x144bb20*/ DebuggerHiddenAttribute();
        }

        class DebuggerNonUserCodeAttribute : System.Attribute
        {
            /*0x144bb28*/ DebuggerNonUserCodeAttribute();
        }

        class DebuggableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggableAttribute.DebuggingModes m_debuggingModes;

            /*0x144bb30*/ DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes modes);

            enum DebuggingModes
            {
                None = 0,
                Default = 1,
                DisableOptimizations = 256,
                IgnoreSymbolStoreSequencePoints = 2,
                EnableEditAndContinue = 4,
            }
        }

        enum DebuggerBrowsableState
        {
            Never = 0,
            Collapsed = 2,
            RootHidden = 3,
        }

        class DebuggerBrowsableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggerBrowsableState state;

            /*0x144bb58*/ DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState state);
        }

        class DebuggerTypeProxyAttribute : System.Attribute
        {
            /*0x10*/ string typeName;

            /*0x144bbd4*/ DebuggerTypeProxyAttribute(System.Type type);
        }

        class DebuggerDisplayAttribute : System.Attribute
        {
            /*0x10*/ string name;
            /*0x18*/ string value;
            /*0x20*/ string type;

            /*0x144bcbc*/ DebuggerDisplayAttribute(string value);
            /*0x144bd2c*/ void set_Name(string value);
            /*0x144bd34*/ void set_Type(string value);
        }

        class Debugger
        {
            static /*0x0*/ string DefaultCategory;

            static /*0x144bdb4*/ Debugger();
            static /*0x144bd3c*/ bool IsLogging();
            static /*0x144bd40*/ void Log_icall(int level, ref string category, ref string message);
            static /*0x144bd44*/ void Log(int level, string category, string message);
            static /*0x144bdb0*/ void NotifyOfCrossThreadDependency();
        }

        class StackFrame
        {
            static int OFFSET_UNKNOWN = -1;
            /*0x10*/ int ilOffset;
            /*0x14*/ int nativeOffset;
            /*0x18*/ long methodAddress;
            /*0x20*/ uint methodIndex;
            /*0x28*/ System.Reflection.MethodBase methodBase;
            /*0x30*/ string fileName;
            /*0x38*/ int lineNumber;
            /*0x3c*/ int columnNumber;
            /*0x40*/ string internalMethodName;

            static /*0x144be14*/ bool get_frame_info(int skip, bool needFileInfo, ref System.Reflection.MethodBase method, ref int iloffset, ref int native_offset, ref string file, ref int line, ref int column);
            /*0x144be1c*/ StackFrame();
            /*0x144be6c*/ StackFrame(int skipFrames, bool fNeedFileInfo);
            /*0x144becc*/ int GetFileLineNumber();
            /*0x144bed4*/ string GetFileName();
            /*0x144bedc*/ string GetSecureFileName();
            /*0x144bfb0*/ int GetILOffset();
            /*0x144bfb8*/ System.Reflection.MethodBase GetMethod();
            /*0x144bfc0*/ int GetNativeOffset();
            /*0x144bfc8*/ long GetMethodAddress();
            /*0x144bfd0*/ uint GetMethodIndex();
            /*0x144bfd8*/ string GetInternalMethodName();
            /*0x144bfe0*/ string ToString();
        }

        class StackTrace
        {
            static /*0x0*/ bool isAotidSet;
            static /*0x8*/ string aotid;
            /*0x10*/ System.Diagnostics.StackFrame[] frames;
            /*0x18*/ System.Diagnostics.StackTrace[] captured_traces;
            /*0x20*/ bool debug_info;

            static /*0x144c4a0*/ System.Diagnostics.StackFrame[] get_trace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            static /*0x144c61c*/ string GetAotId();
            static /*0x144d1ec*/ void ConvertAsyncStateMachineMethod(ref System.Reflection.MethodBase method, ref System.Type declaringType);
            /*0x144c21c*/ StackTrace();
            /*0x144c43c*/ StackTrace(bool fNeedFileInfo);
            /*0x144c46c*/ StackTrace(int skipFrames, bool fNeedFileInfo);
            /*0x144c4a8*/ StackTrace(System.Exception e, bool fNeedFileInfo);
            /*0x144c4b4*/ StackTrace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            /*0x144c240*/ void init_frames(int skipFrames, bool fNeedFileInfo);
            /*0x144c5a4*/ int get_FrameCount();
            /*0x144c5bc*/ System.Diagnostics.StackFrame GetFrame(int index);
            /*0x144c6e4*/ bool AddFrames(System.Text.StringBuilder sb, bool separator, ref bool isAsync);
            /*0x144cb94*/ void GetFullNameForStackTrace(System.Text.StringBuilder sb, System.Reflection.MethodBase mi, bool needsNewLine, ref bool skipped, ref bool isAsync);
            /*0x144d64c*/ string ToString();
            /*0x144d7a8*/ string ToString(System.Diagnostics.StackTrace.TraceFormat traceFormat);

            enum TraceFormat
            {
                Normal = 0,
                TrailingNewLine = 1,
                NoResourceLookup = 2,
            }
        }

        namespace Contracts
        {
            class Contract
            {
                static bool ForAll<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate);
            }
        }

        namespace Tracing
        {
            enum EventLevel
            {
                LogAlways = 0,
                Critical = 1,
                Error = 2,
                Warning = 3,
                Informational = 4,
                Verbose = 5,
            }

            enum EventKeywords
            {
                None = 0,
                All = -1,
                MicrosoftTelemetry = 562949953421312,
                WdiContext = 562949953421312,
                WdiDiagnostic = 1125899906842624,
                Sqm = 2251799813685248,
                AuditFailure = 4503599627370496,
                AuditSuccess = 9007199254740992,
                CorrelationHint = 4503599627370496,
                EventLogClassic = 36028797018963968,
            }

            class EventAttribute : System.Attribute
            {
                /*0x10*/ int <EventId>k__BackingField;
                /*0x14*/ System.Diagnostics.Tracing.EventLevel <Level>k__BackingField;
                /*0x18*/ System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField;
                /*0x20*/ string <Message>k__BackingField;

                /*0x144d7b4*/ EventAttribute(int eventId);
                /*0x144d7dc*/ void set_EventId(int value);
                /*0x144d7e4*/ void set_Level(System.Diagnostics.Tracing.EventLevel value);
                /*0x144d7ec*/ void set_Keywords(System.Diagnostics.Tracing.EventKeywords value);
                /*0x144d7f4*/ void set_Message(string value);
            }

            class EventSource : System.IDisposable
            {
                /*0x10*/ string <Name>k__BackingField;

                /*0x144d7fc*/ EventSource();
                /*0x144d838*/ EventSource(string eventSourceName);
                /*0x144d860*/ EventSource(System.Guid eventSourceGuid, string eventSourceName);
                /*0x144d888*/ void Finalize();
                /*0x144d928*/ void set_Name(string value);
                /*0x144d930*/ bool IsEnabled();
                /*0x144d938*/ bool IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords);
                /*0x144d940*/ void Dispose();
                /*0x144d9ac*/ void Dispose(bool disposing);
                /*0x144d9b0*/ void WriteEvent(int eventId, int arg1);
                /*0x144da70*/ void WriteEvent(int eventId, string arg1);
                /*0x144dafc*/ void WriteEvent(int eventId, int arg1, int arg2);
                /*0x144dc00*/ void WriteEvent(int eventId, int arg1, int arg2, int arg3);
                /*0x144dd4c*/ void WriteEvent(int eventId, long arg1);
                /*0x144de08*/ void WriteEvent(int eventId, long arg1, string arg2);
                /*0x144da6c*/ void WriteEvent(int eventId, object[] args);
                /*0x144def8*/ void WriteEvent(int eventId, string arg1, string arg2, string arg3);
                /*0x144dfe4*/ void WriteEventCore(int eventId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data);

                struct EventData
                {
                    /*0x10*/ nint <DataPointer>k__BackingField;
                    /*0x18*/ int <Size>k__BackingField;
                    /*0x1c*/ int <Reserved>k__BackingField;

                    /*0x144dfe8*/ void set_DataPointer(nint value);
                    /*0x144dff0*/ void set_Size(int value);
                    /*0x144dff8*/ void set_Reserved(int value);
                }
            }

            class EventSourceAttribute : System.Attribute
            {
                /*0x10*/ string <Guid>k__BackingField;
                /*0x18*/ string <Name>k__BackingField;

                /*0x144e010*/ EventSourceAttribute();
                /*0x144e000*/ void set_Guid(string value);
                /*0x144e008*/ void set_Name(string value);
            }

            class NonEventAttribute : System.Attribute
            {
                /*0x144e018*/ NonEventAttribute();
            }
        }
    }

    namespace Configuration
    {
        namespace Assemblies
        {
            enum AssemblyHashAlgorithm
            {
                None = 0,
                MD5 = 32771,
                SHA1 = 32772,
                SHA256 = 32780,
                SHA384 = 32781,
                SHA512 = 32782,
            }

            enum AssemblyVersionCompatibility
            {
                SameMachine = 1,
                SameProcess = 2,
                SameDomain = 3,
            }
        }
    }

    namespace Collections
    {
        class Comparer : System.Collections.IComparer, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Collections.Comparer Default;
            static /*0x8*/ System.Collections.Comparer DefaultInvariant;
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            static /*0x144e4d0*/ Comparer();
            /*0x144e020*/ Comparer(System.Globalization.CultureInfo culture);
            /*0x144e0a8*/ Comparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x144e21c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x144e2c0*/ int Compare(object a, object b);
        }

        struct DictionaryEntry
        {
            /*0x10*/ object _key;
            /*0x18*/ object _value;

            /*0x144e59c*/ DictionaryEntry(object key, object value);
            /*0x144e5a4*/ object get_Key();
            /*0x144e5ac*/ object get_Value();
        }

        class HashHelpers
        {
            static /*0x0*/ int[] primes;
            static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;

            static /*0x144e958*/ HashHelpers();
            static /*0x144e5b4*/ bool IsPrime(int candidate);
            static /*0x144e664*/ int GetPrime(int min);
            static /*0x144e7f4*/ int ExpandPrime(int oldSize);
            static /*0x144e878*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
        }

        interface ICollection : System.Collections.IEnumerable
        {
            void CopyTo(System.Array array, int index);
            int get_Count();
            object get_SyncRoot();
            bool get_IsSynchronized();
        }

        interface IComparer
        {
            int Compare(object x, object y);
        }

        interface IDictionary : System.Collections.ICollection, System.Collections.IEnumerable
        {
            object get_Item(object key);
            void set_Item(object key, object value);
            System.Collections.ICollection get_Keys();
            System.Collections.ICollection get_Values();
            bool Contains(object key);
            void Add(object key, object value);
            void Clear();
            bool get_IsReadOnly();
            bool get_IsFixedSize();
            System.Collections.IDictionaryEnumerator GetEnumerator();
            void Remove(object key);
        }

        interface IDictionaryEnumerator : System.Collections.IEnumerator
        {
            object get_Key();
            object get_Value();
            System.Collections.DictionaryEntry get_Entry();
        }

        interface IEnumerable
        {
            System.Collections.IEnumerator GetEnumerator();
        }

        interface IEnumerator
        {
            bool MoveNext();
            object get_Current();
            void Reset();
        }

        interface IEqualityComparer
        {
            bool Equals(object x, object y);
            int GetHashCode(object obj);
        }

        interface IList : System.Collections.ICollection, System.Collections.IEnumerable
        {
            object get_Item(int index);
            void set_Item(int index, object value);
            int Add(object value);
            bool Contains(object value);
            void Clear();
            bool get_IsReadOnly();
            bool get_IsFixedSize();
            int IndexOf(object value);
            void Insert(int index, object value);
            void Remove(object value);
            void RemoveAt(int index);
        }

        interface IStructuralComparable
        {
            int CompareTo(object other, System.Collections.IComparer comparer);
        }

        interface IStructuralEquatable
        {
            bool Equals(object other, System.Collections.IEqualityComparer comparer);
            int GetHashCode(System.Collections.IEqualityComparer comparer);
        }

        class ListDictionaryInternal : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ListDictionaryInternal.DictionaryNode head;
            /*0x18*/ int version;
            /*0x1c*/ int count;
            /*0x20*/ object _syncRoot;

            /*0x144e9ec*/ ListDictionaryInternal();
            /*0x144e9f4*/ object get_Item(object key);
            /*0x144eaac*/ void set_Item(object key, object value);
            /*0x144ebfc*/ int get_Count();
            /*0x144ec04*/ System.Collections.ICollection get_Keys();
            /*0x144eca0*/ bool get_IsReadOnly();
            /*0x144eca8*/ bool get_IsFixedSize();
            /*0x144ecb0*/ bool get_IsSynchronized();
            /*0x144ecb8*/ object get_SyncRoot();
            /*0x144ed30*/ System.Collections.ICollection get_Values();
            /*0x144ed98*/ void Add(object key, object value);
            /*0x144ef3c*/ void Clear();
            /*0x144ef50*/ bool Contains(object key);
            /*0x144f008*/ void CopyTo(System.Array array, int index);
            /*0x144f1f0*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x144f294*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x144f2f4*/ void Remove(object key);

            class NodeEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                /*0x20*/ int version;
                /*0x24*/ bool start;

                /*0x144f250*/ NodeEnumerator(System.Collections.ListDictionaryInternal list);
                /*0x144f3f4*/ object get_Current();
                /*0x144f458*/ System.Collections.DictionaryEntry get_Entry();
                /*0x144f4bc*/ object get_Key();
                /*0x144f520*/ object get_Value();
                /*0x144f584*/ bool MoveNext();
                /*0x144f624*/ void Reset();
            }

            class NodeKeyValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ bool isKeys;

                /*0x144ec70*/ NodeKeyValueCollection(System.Collections.ListDictionaryInternal list, bool isKeys);
                /*0x144f6a4*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x144f870*/ int System.Collections.ICollection.get_Count();
                /*0x144f8a8*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x144f8b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x144f8c8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class NodeKeyValueEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.ListDictionaryInternal list;
                    /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                    /*0x20*/ int version;
                    /*0x24*/ bool isKeys;
                    /*0x25*/ bool start;

                    /*0x144f940*/ NodeKeyValueEnumerator(System.Collections.ListDictionaryInternal list, bool isKeys);
                    /*0x144f98c*/ object get_Current();
                    /*0x144fa04*/ bool MoveNext();
                    /*0x144faa4*/ void Reset();
                }
            }

            class DictionaryNode
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
                /*0x20*/ System.Collections.ListDictionaryInternal.DictionaryNode next;

                /*0x144ebf4*/ DictionaryNode();
            }
        }

        class CompatibleComparer : System.Collections.IEqualityComparer
        {
            /*0x10*/ System.Collections.IHashCodeProvider _hcp;
            /*0x18*/ System.Collections.IComparer _comparer;

            /*0x144fb24*/ CompatibleComparer(System.Collections.IHashCodeProvider hashCodeProvider, System.Collections.IComparer comparer);
            /*0x144fb50*/ System.Collections.IHashCodeProvider get_HashCodeProvider();
            /*0x144fb58*/ System.Collections.IComparer get_Comparer();
            /*0x144fb60*/ bool Equals(object a, object b);
            /*0x144fb78*/ int Compare(object a, object b);
            /*0x144fd3c*/ int GetHashCode(object obj);
        }

        class CaseInsensitiveComparer : System.Collections.IComparer
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            /*0x144fe48*/ CaseInsensitiveComparer();
            /*0x144fec4*/ CaseInsensitiveComparer(System.Globalization.CultureInfo culture);
            /*0x144ff4c*/ int Compare(object a, object b);
        }

        class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            /*0x1450038*/ CaseInsensitiveHashCodeProvider();
            /*0x14500b4*/ CaseInsensitiveHashCodeProvider(System.Globalization.CultureInfo culture);
            /*0x145013c*/ int GetHashCode(object obj);
        }

        class CollectionBase : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x1450214*/ CollectionBase();
            /*0x145030c*/ System.Collections.ArrayList get_InnerList();
            /*0x1450314*/ System.Collections.IList get_List();
            /*0x1450318*/ int get_Count();
            /*0x145033c*/ void Clear();
            /*0x1450388*/ void RemoveAt(int index);
            /*0x1450560*/ bool System.Collections.IList.get_IsReadOnly();
            /*0x1450584*/ bool System.Collections.IList.get_IsFixedSize();
            /*0x14505a8*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x14505cc*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x14505f0*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x1450614*/ object System.Collections.IList.get_Item(int index);
            /*0x14506d0*/ void System.Collections.IList.set_Item(int index, object value);
            /*0x14508b8*/ bool System.Collections.IList.Contains(object value);
            /*0x14508dc*/ int System.Collections.IList.Add(object value);
            /*0x1450a1c*/ void System.Collections.IList.Remove(object value);
            /*0x1450bb8*/ int System.Collections.IList.IndexOf(object value);
            /*0x1450bdc*/ void System.Collections.IList.Insert(int index, object value);
            /*0x1450d90*/ System.Collections.IEnumerator GetEnumerator();
            /*0x1450db4*/ void OnSet(int index, object oldValue, object newValue);
            /*0x1450db8*/ void OnInsert(int index, object value);
            /*0x1450dbc*/ void OnClear();
            /*0x1450dc0*/ void OnRemove(int index, object value);
            /*0x1450dc4*/ void OnValidate(object value);
            /*0x1450e1c*/ void OnSetComplete(int index, object oldValue, object newValue);
            /*0x1450e20*/ void OnInsertComplete(int index, object value);
            /*0x1450e24*/ void OnClearComplete();
            /*0x1450e28*/ void OnRemoveComplete(int index, object value);
        }

        class Queue : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _head;
            /*0x1c*/ int _tail;
            /*0x20*/ int _size;
            /*0x24*/ int _growFactor;
            /*0x28*/ int _version;
            /*0x30*/ object _syncRoot;

            /*0x1450e2c*/ Queue();
            /*0x1450ff8*/ Queue(int capacity);
            /*0x1450e38*/ Queue(int capacity, float growFactor);
            /*0x1451000*/ Queue(System.Collections.ICollection col);
            /*0x145126c*/ int get_Count();
            /*0x1451274*/ object Clone();
            /*0x1451358*/ bool get_IsSynchronized();
            /*0x1451360*/ object get_SyncRoot();
            /*0x14513dc*/ void CopyTo(System.Array array, int index);
            /*0x14515d0*/ void Enqueue(object obj);
            /*0x14517b8*/ System.Collections.IEnumerator GetEnumerator();
            /*0x1451868*/ object Dequeue();
            /*0x1451934*/ object Peek();
            /*0x14519c8*/ object GetElement(int i);
            /*0x14516cc*/ void SetCapacity(int capacity);

            class QueueEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Queue _q;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0x1451818*/ QueueEnumerator(System.Collections.Queue q);
                /*0x1451a08*/ object Clone();
                /*0x1451a10*/ bool MoveNext();
                /*0x1451ad8*/ object get_Current();
                /*0x1451b6c*/ void Reset();
            }

            class QueueDebugView
            {
            }
        }

        class ReadOnlyCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x1451d2c*/ ReadOnlyCollectionBase();
            /*0x1451bf8*/ System.Collections.ArrayList get_InnerList();
            /*0x1451c60*/ int get_Count();
            /*0x1451c84*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x1451ca8*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x1451ccc*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x1451d08*/ System.Collections.IEnumerator GetEnumerator();
        }

        class SortedList : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] values;
            /*0x20*/ int _size;
            /*0x24*/ int version;
            /*0x28*/ System.Collections.IComparer comparer;
            /*0x30*/ System.Collections.SortedList.KeyList keyList;
            /*0x38*/ System.Collections.SortedList.ValueList valueList;
            /*0x40*/ object _syncRoot;

            static /*0x14530fc*/ System.Collections.SortedList Synchronized(System.Collections.SortedList list);
            /*0x1451d34*/ SortedList();
            /*0x1451e84*/ SortedList(int initialCapacity);
            /*0x1451fc8*/ SortedList(System.Collections.IComparer comparer);
            /*0x1451d50*/ void Init();
            /*0x1451ffc*/ void Add(object key, object value);
            /*0x145225c*/ void set_Capacity(int value);
            /*0x1452444*/ int get_Count();
            /*0x145244c*/ System.Collections.ICollection get_Keys();
            /*0x145245c*/ System.Collections.ICollection get_Values();
            /*0x145246c*/ bool get_IsReadOnly();
            /*0x1452474*/ bool get_IsFixedSize();
            /*0x145247c*/ bool get_IsSynchronized();
            /*0x1452484*/ object get_SyncRoot();
            /*0x14524fc*/ void Clear();
            /*0x1452540*/ object Clone();
            /*0x14525ec*/ bool Contains(object key);
            /*0x1452610*/ bool ContainsKey(object key);
            /*0x1452634*/ bool ContainsValue(object value);
            /*0x1452658*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x14528d8*/ void EnsureCapacity(int min);
            /*0x1452924*/ object GetByIndex(int index);
            /*0x14529e0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x1452ab0*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x1452b20*/ object GetKey(int index);
            /*0x1452bdc*/ System.Collections.IList GetKeyList();
            /*0x1452c74*/ System.Collections.IList GetValueList();
            /*0x1452d0c*/ object get_Item(object key);
            /*0x1452d5c*/ void set_Item(object key, object value);
            /*0x1452e80*/ int IndexOfKey(object key);
            /*0x1452f20*/ int IndexOfValue(object value);
            /*0x145212c*/ void Insert(int index, object key, object value);
            /*0x1452f80*/ void RemoveAt(int index);
            /*0x14530bc*/ void Remove(object key);

            class SyncSortedList : System.Collections.SortedList
            {
                /*0x48*/ System.Collections.SortedList _list;
                /*0x50*/ object _root;

                /*0x14531ac*/ SyncSortedList(System.Collections.SortedList list);
                /*0x14531fc*/ int get_Count();
                /*0x14532e0*/ object get_SyncRoot();
                /*0x14532e8*/ bool get_IsReadOnly();
                /*0x145330c*/ bool get_IsFixedSize();
                /*0x1453330*/ bool get_IsSynchronized();
                /*0x1453338*/ object get_Item(object key);
                /*0x1453424*/ void set_Item(object key, object value);
                /*0x1453508*/ void Add(object key, object value);
                /*0x14535ec*/ void Clear();
                /*0x14536c0*/ object Clone();
                /*0x14537a4*/ bool Contains(object key);
                /*0x1453890*/ bool ContainsKey(object key);
                /*0x145397c*/ bool ContainsValue(object key);
                /*0x1453a68*/ void CopyTo(System.Array array, int index);
                /*0x1453b4c*/ object GetByIndex(int index);
                /*0x1453c38*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x1453d1c*/ object GetKey(int index);
                /*0x1453e08*/ System.Collections.IList GetKeyList();
                /*0x1453eec*/ System.Collections.IList GetValueList();
                /*0x1453fd0*/ int IndexOfKey(object key);
                /*0x1454124*/ int IndexOfValue(object value);
                /*0x1454210*/ void RemoveAt(int index);
                /*0x14542ec*/ void Remove(object key);
            }

            class SortedListEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.SortedList _sortedList;
                /*0x18*/ object _key;
                /*0x20*/ object _value;
                /*0x28*/ int _index;
                /*0x2c*/ int _startIndex;
                /*0x30*/ int _endIndex;
                /*0x34*/ int _version;
                /*0x38*/ bool _current;
                /*0x3c*/ int _getObjectRetType;

                /*0x1452a50*/ SortedListEnumerator(System.Collections.SortedList sortedList, int index, int count, int getObjRetType);
                /*0x14543c8*/ object Clone();
                /*0x14543d0*/ object get_Key();
                /*0x1454474*/ bool MoveNext();
                /*0x1454560*/ System.Collections.DictionaryEntry get_Entry();
                /*0x1454608*/ object get_Current();
                /*0x14546dc*/ object get_Value();
                /*0x1454780*/ void Reset();
            }

            class KeyList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x1452c4c*/ KeyList(System.Collections.SortedList sortedList);
                /*0x1454804*/ int get_Count();
                /*0x1454820*/ bool get_IsReadOnly();
                /*0x1454828*/ bool get_IsFixedSize();
                /*0x1454830*/ bool get_IsSynchronized();
                /*0x1454854*/ object get_SyncRoot();
                /*0x1454878*/ int Add(object key);
                /*0x14548c8*/ void Clear();
                /*0x1454918*/ bool Contains(object key);
                /*0x145493c*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x1454a0c*/ void Insert(int index, object value);
                /*0x1454a5c*/ object get_Item(int index);
                /*0x1454a80*/ void set_Item(int index, object value);
                /*0x1454ad0*/ System.Collections.IEnumerator GetEnumerator();
                /*0x1454b60*/ int IndexOf(object key);
                /*0x1454c2c*/ void Remove(object key);
                /*0x1454c7c*/ void RemoveAt(int index);
            }

            class ValueList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x1452ce4*/ ValueList(System.Collections.SortedList sortedList);
                /*0x1454ccc*/ int get_Count();
                /*0x1454ce8*/ bool get_IsReadOnly();
                /*0x1454cf0*/ bool get_IsFixedSize();
                /*0x1454cf8*/ bool get_IsSynchronized();
                /*0x1454d1c*/ object get_SyncRoot();
                /*0x1454d40*/ int Add(object key);
                /*0x1454d90*/ void Clear();
                /*0x1454de0*/ bool Contains(object value);
                /*0x1454e04*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x1454ed4*/ void Insert(int index, object value);
                /*0x1454f24*/ object get_Item(int index);
                /*0x1454f48*/ void set_Item(int index, object value);
                /*0x1454f98*/ System.Collections.IEnumerator GetEnumerator();
                /*0x1455028*/ int IndexOf(object value);
                /*0x14550a0*/ void Remove(object value);
                /*0x14550f0*/ void RemoveAt(int index);
            }

            class SortedListDebugView
            {
            }
        }

        class Stack : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            static int _defaultCapacity = 10;
            /*0x10*/ object[] _array;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            /*0x1455140*/ Stack();
            /*0x145519c*/ Stack(int initialCapacity);
            /*0x1455268*/ int get_Count();
            /*0x1455270*/ bool get_IsSynchronized();
            /*0x1455278*/ object get_SyncRoot();
            /*0x14552f0*/ void Clear();
            /*0x1455320*/ object Clone();
            /*0x14553b0*/ void CopyTo(System.Array array, int index);
            /*0x1455668*/ System.Collections.IEnumerator GetEnumerator();
            /*0x1455708*/ object Peek();
            /*0x1455790*/ object Pop();
            /*0x1455828*/ void Push(object obj);

            class StackEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Stack _stack;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0x14556c8*/ StackEnumerator(System.Collections.Stack stack);
                /*0x145592c*/ object Clone();
                /*0x1455934*/ bool MoveNext();
                /*0x1455a18*/ object get_Current();
                /*0x1455aac*/ void Reset();
            }

            class StackDebugView
            {
            }
        }

        class BitArray : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ int[] m_array;
            /*0x18*/ int m_length;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x1455c90*/ int GetArrayLength(int n, int div);
            /*0x1455b2c*/ BitArray(int length);
            /*0x1455b34*/ BitArray(int length, bool defaultValue);
            /*0x1455cac*/ BitArray(System.Collections.BitArray bits);
            /*0x1455da8*/ bool get_Item(int index);
            /*0x1455e90*/ void set_Item(int index, bool value);
            /*0x1455dac*/ bool Get(int index);
            /*0x1455e98*/ void Set(int index, bool value);
            /*0x1455f94*/ int get_Length();
            /*0x1455f9c*/ void set_Length(int value);
            /*0x145616c*/ void CopyTo(System.Array array, int index);
            /*0x1456690*/ int get_Count();
            /*0x1456698*/ object get_SyncRoot();
            /*0x1456710*/ bool get_IsSynchronized();
            /*0x1456718*/ object Clone();
            /*0x1456778*/ System.Collections.IEnumerator GetEnumerator();

            class BitArrayEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.BitArray bitarray;
                /*0x18*/ int index;
                /*0x1c*/ int version;
                /*0x20*/ bool currentElement;

                /*0x14567d8*/ BitArrayEnumeratorSimple(System.Collections.BitArray bitarray);
                /*0x1456818*/ object Clone();
                /*0x1456820*/ bool MoveNext();
                /*0x14569cc*/ object get_Current();
                /*0x1456b28*/ void Reset();
            }
        }

        class ArrayList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            static int _defaultCapacity = 4;
            static int MaxArrayLength = 2146435071;
            /*0x10*/ object[] _items;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x14571dc*/ System.Collections.ArrayList Adapter(System.Collections.IList list);
            static /*0x1457c40*/ System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list);
            /*0x145027c*/ ArrayList();
            /*0x1456ba4*/ ArrayList(int capacity);
            /*0x1456ce8*/ ArrayList(System.Collections.ICollection c);
            /*0x1456e98*/ void set_Capacity(int value);
            /*0x1456fb0*/ int get_Count();
            /*0x1456fb8*/ bool get_IsFixedSize();
            /*0x1456fc0*/ bool get_IsReadOnly();
            /*0x1456fc8*/ bool get_IsSynchronized();
            /*0x1456fd0*/ object get_SyncRoot();
            /*0x1457048*/ object get_Item(int index);
            /*0x14570f0*/ void set_Item(int index, object value);
            /*0x14572b8*/ int Add(object value);
            /*0x14573bc*/ void AddRange(System.Collections.ICollection c);
            /*0x14573d8*/ void Clear();
            /*0x1457414*/ object Clone();
            /*0x145749c*/ bool Contains(object item);
            /*0x145755c*/ void CopyTo(System.Array array);
            /*0x1457570*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x1457620*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
            /*0x1457360*/ void EnsureCapacity(int min);
            /*0x1457728*/ System.Collections.IEnumerator GetEnumerator();
            /*0x1457890*/ int IndexOf(object value);
            /*0x14578a8*/ void Insert(int index, object value);
            /*0x14579dc*/ void InsertRange(int index, System.Collections.ICollection c);
            /*0x1457d14*/ void Remove(object obj);
            /*0x1457d54*/ void RemoveAt(int index);
            /*0x1457e38*/ void RemoveRange(int index, int count);
            /*0x1457fa0*/ void Sort(System.Collections.IComparer comparer);
            /*0x1457fec*/ void Sort(int index, int count, System.Collections.IComparer comparer);
            /*0x14580f0*/ object[] ToArray();
            /*0x14581c0*/ System.Array ToArray(System.Type type);

            class IListWrapper : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.IList _list;

                /*0x1457290*/ IListWrapper(System.Collections.IList list);
                /*0x14582b4*/ void set_Capacity(int value);
                /*0x1458348*/ int get_Count();
                /*0x14583ec*/ bool get_IsReadOnly();
                /*0x1458490*/ bool get_IsFixedSize();
                /*0x1458534*/ bool get_IsSynchronized();
                /*0x14585d8*/ object get_Item(int index);
                /*0x1458680*/ void set_Item(int index, object value);
                /*0x145874c*/ object get_SyncRoot();
                /*0x14587f0*/ int Add(object obj);
                /*0x14588ac*/ void AddRange(System.Collections.ICollection c);
                /*0x14588f4*/ void Clear();
                /*0x1458a5c*/ object Clone();
                /*0x1458ac4*/ bool Contains(object obj);
                /*0x1458b70*/ void CopyTo(System.Array array, int index);
                /*0x1458c28*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x1458f70*/ System.Collections.IEnumerator GetEnumerator();
                /*0x1459010*/ int IndexOf(object value);
                /*0x14590bc*/ void Insert(int index, object obj);
                /*0x1459188*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x1459558*/ void Remove(object value);
                /*0x1459598*/ void RemoveAt(int index);
                /*0x1459654*/ void RemoveRange(int index, int count);
                /*0x1459874*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x1459b38*/ object[] ToArray();
                /*0x1459c94*/ System.Array ToArray(System.Type type);
            }

            class ReadOnlyArrayList : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.ArrayList _list;

                /*0x1457cf0*/ ReadOnlyArrayList(System.Collections.ArrayList l);
                /*0x1459e4c*/ int get_Count();
                /*0x1459e70*/ bool get_IsReadOnly();
                /*0x1459e78*/ bool get_IsFixedSize();
                /*0x1459e80*/ bool get_IsSynchronized();
                /*0x1459ea4*/ object get_Item(int index);
                /*0x1459ec8*/ void set_Item(int index, object value);
                /*0x1459f18*/ object get_SyncRoot();
                /*0x1459f3c*/ int Add(object obj);
                /*0x1459f8c*/ void AddRange(System.Collections.ICollection c);
                /*0x1459fdc*/ void set_Capacity(int value);
                /*0x145a02c*/ void Clear();
                /*0x145a07c*/ object Clone();
                /*0x145a168*/ bool Contains(object obj);
                /*0x145a18c*/ void CopyTo(System.Array array, int index);
                /*0x145a1b0*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x145a1d4*/ System.Collections.IEnumerator GetEnumerator();
                /*0x145a1f8*/ int IndexOf(object value);
                /*0x145a21c*/ void Insert(int index, object obj);
                /*0x145a26c*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x145a2bc*/ void Remove(object value);
                /*0x145a30c*/ void RemoveAt(int index);
                /*0x145a35c*/ void RemoveRange(int index, int count);
                /*0x145a3ac*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x145a3fc*/ object[] ToArray();
                /*0x145a420*/ System.Array ToArray(System.Type type);
            }

            class ArrayListEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                static /*0x0*/ object s_dummyObject;
                /*0x10*/ System.Collections.ArrayList _list;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;
                /*0x28*/ bool _isArrayList;

                static /*0x145a7c0*/ ArrayListEnumeratorSimple();
                /*0x1457788*/ ArrayListEnumeratorSimple(System.Collections.ArrayList list);
                /*0x145a444*/ object Clone();
                /*0x145a44c*/ bool MoveNext();
                /*0x145a61c*/ object get_Current();
                /*0x145a6f0*/ void Reset();
            }

            class ArrayListDebugView
            {
            }
        }

        class Hashtable : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ICloneable
        {
            static int HashPrime = 101;
            static int InitialSize = 3;
            static string LoadFactorName = "LoadFactor";
            static string VersionName = "Version";
            static string ComparerName = "Comparer";
            static string HashCodeProviderName = "HashCodeProvider";
            static string HashSizeName = "HashSize";
            static string KeysName = "Keys";
            static string ValuesName = "Values";
            static string KeyComparerName = "KeyComparer";
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;
            /*0x10*/ System.Collections.Hashtable.bucket[] _buckets;
            /*0x18*/ int _count;
            /*0x1c*/ int _occupancy;
            /*0x20*/ int _loadsize;
            /*0x24*/ float _loadFactor;
            /*0x28*/ int _version;
            /*0x2c*/ bool _isWriterInProgress;
            /*0x30*/ System.Collections.ICollection _keys;
            /*0x38*/ System.Collections.ICollection _values;
            /*0x40*/ System.Collections.IEqualityComparer _keycomparer;
            /*0x48*/ object _syncRoot;

            static /*0x145a838*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
            static /*0x145c294*/ System.Collections.Hashtable Synchronized(System.Collections.Hashtable table);
            /*0x145a894*/ Hashtable(bool trash);
            /*0x145a89c*/ Hashtable();
            /*0x145ab54*/ Hashtable(int capacity);
            /*0x145a8a8*/ Hashtable(int capacity, float loadFactor);
            /*0x145ab5c*/ Hashtable(int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
            /*0x145ab80*/ Hashtable(System.Collections.IEqualityComparer equalityComparer);
            /*0x145abac*/ Hashtable(int capacity, System.Collections.IEqualityComparer equalityComparer);
            /*0x145abd4*/ Hashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x145ac3c*/ uint InitHash(object key, int hashsize, ref uint seed, ref uint incr);
            /*0x145ac90*/ void Add(object key, object value);
            /*0x145b058*/ void Clear();
            /*0x145b124*/ object Clone();
            /*0x145b238*/ bool Contains(object key);
            /*0x145b248*/ bool ContainsKey(object key);
            /*0x145b3b0*/ void CopyKeys(System.Array array, int arrayIndex);
            /*0x145b454*/ void CopyEntries(System.Array array, int arrayIndex);
            /*0x145b548*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x145b6f8*/ void CopyValues(System.Array array, int arrayIndex);
            /*0x145b7a8*/ object get_Item(object key);
            /*0x145b990*/ void set_Item(object key, object value);
            /*0x145b998*/ void expand();
            /*0x145bb28*/ void rehash();
            /*0x145b0f8*/ void UpdateVersion();
            /*0x145ba04*/ void rehash(int newsize);
            /*0x145bbf4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x145bcb0*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x145bd14*/ int GetHash(object key);
            /*0x145bddc*/ bool get_IsReadOnly();
            /*0x145bde4*/ bool get_IsFixedSize();
            /*0x145bdec*/ bool get_IsSynchronized();
            /*0x145bdf4*/ bool KeyEquals(object item, object key);
            /*0x145befc*/ System.Collections.ICollection get_Keys();
            /*0x145bf94*/ System.Collections.ICollection get_Values();
            /*0x145ac98*/ void Insert(object key, object nvalue, bool add);
            /*0x145bb44*/ void putEntry(System.Collections.Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode);
            /*0x145c02c*/ void Remove(object key);
            /*0x145c214*/ object get_SyncRoot();
            /*0x145c28c*/ int get_Count();
            /*0x145c370*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x145c8ac*/ void OnDeserialization(object sender);

            struct bucket
            {
                /*0x10*/ object key;
                /*0x18*/ object val;
                /*0x20*/ int hash_coll;
            }

            class KeyCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x145bf6c*/ KeyCollection(System.Collections.Hashtable hashtable);
                /*0x145d114*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x145d2a0*/ System.Collections.IEnumerator GetEnumerator();
                /*0x145d308*/ bool get_IsSynchronized();
                /*0x145d32c*/ object get_SyncRoot();
                /*0x145d350*/ int get_Count();
            }

            class ValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x145c004*/ ValueCollection(System.Collections.Hashtable hashtable);
                /*0x145d36c*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x145d4f8*/ System.Collections.IEnumerator GetEnumerator();
                /*0x145d560*/ bool get_IsSynchronized();
                /*0x145d584*/ object get_SyncRoot();
                /*0x145d5a8*/ int get_Count();
            }

            class SyncHashtable : System.Collections.Hashtable, System.Collections.IEnumerable
            {
                /*0x50*/ System.Collections.Hashtable _table;

                /*0x145c348*/ SyncHashtable(System.Collections.Hashtable table);
                /*0x145d5c4*/ SyncHashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x145d608*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x145d648*/ int get_Count();
                /*0x145d66c*/ bool get_IsReadOnly();
                /*0x145d690*/ bool get_IsFixedSize();
                /*0x145d6b4*/ bool get_IsSynchronized();
                /*0x145d6bc*/ object get_Item(object key);
                /*0x145d6e0*/ void set_Item(object key, object value);
                /*0x145d7e0*/ object get_SyncRoot();
                /*0x145d804*/ void Add(object key, object value);
                /*0x145d904*/ void Clear();
                /*0x145d9f4*/ bool Contains(object key);
                /*0x145da18*/ bool ContainsKey(object key);
                /*0x145daa8*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x145dba8*/ object Clone();
                /*0x145dd0c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x145dd30*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x145dd54*/ System.Collections.ICollection get_Keys();
                /*0x145de54*/ System.Collections.ICollection get_Values();
                /*0x145df54*/ void Remove(object key);
                /*0x145e04c*/ void OnDeserialization(object sender);
            }

            class HashtableEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;
                /*0x18*/ int _bucket;
                /*0x1c*/ int _version;
                /*0x20*/ bool _current;
                /*0x24*/ int _getObjectRetType;
                /*0x28*/ object _currentKey;
                /*0x30*/ object _currentValue;

                /*0x145bc58*/ HashtableEnumerator(System.Collections.Hashtable hashtable, int getObjRetType);
                /*0x145e050*/ object Clone();
                /*0x145e058*/ object get_Key();
                /*0x145e0bc*/ bool MoveNext();
                /*0x145e1f0*/ System.Collections.DictionaryEntry get_Entry();
                /*0x145e258*/ object get_Current();
                /*0x145e32c*/ object get_Value();
                /*0x145e390*/ void Reset();
            }

            class HashtableDebugView
            {
            }
        }

        interface IHashCodeProvider
        {
            int GetHashCode(object obj);
        }

        namespace Concurrent
        {
            class ConcurrentQueue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ object _crossSegmentLock;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _tail;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _head;

                static int GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> s, int head, int tail);
                static long GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                ConcurrentQueue();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                T[] ToArray();
                int get_Count();
                void CopyTo(T[] array, int index);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                void SnapForObservation(ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, ref int headHead, ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, ref int tailTail);
                T GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue.Segment<T> segment, int i);
                System.Collections.Generic.IEnumerator<T> Enumerate(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                void Enqueue(T item);
                void EnqueueSlow(T item);
                bool TryDequeue(ref T result);
                bool TryDequeueSlow(ref T item);

                class Segment<T>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment.Slot<T> _slots;
                    /*0x0*/ int _slotsMask;
                    /*0x0*/ System.Collections.Concurrent.PaddedHeadAndTail _headAndTail;
                    /*0x0*/ bool _preservedForObservation;
                    /*0x0*/ bool _frozenForEnqueues;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _nextSegment;

                    Segment(int boundedLength);
                    int get_Capacity();
                    int get_FreezeOffset();
                    void EnsureFrozenForEnqueues();
                    bool TryDequeue(ref T item);
                    bool TryEnqueue(T item);

                    struct Slot<T>
                    {
                        /*0x0*/ T Item;
                        /*0x0*/ int SequenceNumber;
                    }
                }

                class <Enumerate>d__28<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail;
                    /*0x0*/ int tailTail;
                    /*0x0*/ int headHead;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<T> <>4__this;
                    /*0x0*/ int <headTail>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> <s>5__4;
                    /*0x0*/ int <i>5__5;

                    <Enumerate>d__28(int <>1__state);
                    void System.IDisposable.Dispose();
                    bool MoveNext();
                    T System.Collections.Generic.IEnumerator<T>.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    object System.Collections.IEnumerator.get_Current();
                }
            }

            struct PaddedHeadAndTail
            {
                /*0x90*/ int Head;
                /*0x110*/ int Tail;
            }

            class CDSCollectionETWBCLProvider : System.Diagnostics.Tracing.EventSource
            {
                static /*0x0*/ System.Collections.Concurrent.CDSCollectionETWBCLProvider Log;

                static /*0x145e43c*/ CDSCollectionETWBCLProvider();
                /*0x145e434*/ CDSCollectionETWBCLProvider();
                /*0x145e438*/ void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets);
            }

            class ConcurrentDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                static /*0x0*/ bool s_isValueWriteAtomic;
                /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> _tables;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ bool _growLockArray;
                /*0x0*/ int _budget;
                /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _serializationArray;
                /*0x0*/ int _serializationConcurrencyLevel;
                /*0x0*/ int _serializationCapacity;

                static ConcurrentDictionary();
                static bool IsValueWriteAtomic();
                static void ThrowKeyNotFoundException(object key);
                static void ThrowKeyNullException();
                static int GetBucket(int hashcode, int bucketCount);
                static void GetBucketAndLockNo(int hashcode, ref int bucketNo, ref int lockNo, int bucketCount, int lockCount);
                static int get_DefaultConcurrencyLevel();
                ConcurrentDictionary();
                ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                void InitializeFromCollection(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection);
                bool TryAdd(TKey key, TValue value);
                bool ContainsKey(TKey key);
                bool TryRemove(TKey key, ref TValue value);
                bool TryRemoveInternal(TKey key, ref TValue value, bool matchValue, TValue oldValue);
                bool TryGetValue(TKey key, ref TValue value);
                bool TryGetValueInternal(TKey key, int hashcode, ref TValue value);
                void Clear();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                System.Collections.Generic.KeyValuePair<TKey, TValue> ToArray();
                void CopyToPairs(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                void CopyToEntries(System.Collections.DictionaryEntry[] array, int index);
                void CopyToObjects(object[] array, int index);
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, ref TValue resultingValue);
                TValue get_Item(TKey key);
                void set_Item(TKey key, TValue value);
                int get_Count();
                int GetCountInternal();
                TValue GetOrAdd(TKey key, System.Func<TKey, TValue> valueFactory);
                TValue GetOrAdd(TKey key, TValue value);
                void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                System.Collections.Generic.ICollection<TKey> get_Keys();
                System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                System.Collections.Generic.ICollection<TValue> get_Values();
                System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                void System.Collections.IDictionary.Add(object key, object value);
                bool System.Collections.IDictionary.Contains(object key);
                System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                bool System.Collections.IDictionary.get_IsFixedSize();
                bool System.Collections.IDictionary.get_IsReadOnly();
                System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                void System.Collections.IDictionary.Remove(object key);
                System.Collections.ICollection System.Collections.IDictionary.get_Values();
                object System.Collections.IDictionary.get_Item(object key);
                void System.Collections.IDictionary.set_Item(object key, object value);
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void GrowTable(System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> tables);
                void AcquireAllLocks(ref int locksAcquired);
                void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
                void ReleaseLocks(int fromInclusive, int toExclusive);
                System.Collections.ObjectModel.ReadOnlyCollection<TKey> GetKeys();
                System.Collections.ObjectModel.ReadOnlyCollection<TValue> GetValues();
                void OnSerializing(System.Runtime.Serialization.StreamingContext context);
                void OnSerialized(System.Runtime.Serialization.StreamingContext context);
                void OnDeserialized(System.Runtime.Serialization.StreamingContext context);

                class Tables<TKey, TValue>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _buckets;
                    /*0x0*/ object[] _locks;
                    /*0x0*/ int[] _countPerLock;

                    Tables(System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> buckets, object[] locks, int[] countPerLock);
                }

                class Node<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _next;
                    /*0x0*/ int _hashcode;

                    Node(TKey key, TValue value, int hashcode, System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> next);
                }

                class DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    DictionaryEnumerator(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    object get_Key();
                    object get_Value();
                    object get_Current();
                    bool MoveNext();
                    void Reset();
                }

                class <GetEnumerator>d__35<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> <>4__this;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <buckets>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <current>5__4;

                    <GetEnumerator>d__35(int <>1__state);
                    void System.IDisposable.Dispose();
                    bool MoveNext();
                    System.Collections.Generic.KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    object System.Collections.IEnumerator.get_Current();
                }
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class IProducerConsumerCollectionDebugView<T>
            {
            }
        }

        namespace ObjectModel
        {
            class Collection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> items;

                static bool IsCompatibleObject(object value);
                Collection();
                Collection(System.Collections.Generic.IList<T> list);
                int get_Count();
                System.Collections.Generic.IList<T> get_Items();
                T get_Item(int index);
                void set_Item(int index, T value);
                void Add(T item);
                void Clear();
                void CopyTo(T[] array, int index);
                bool Contains(T item);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                int IndexOf(T item);
                void Insert(int index, T item);
                bool Remove(T item);
                void RemoveAt(int index);
                void ClearItems();
                void InsertItem(int index, T item);
                void RemoveItem(int index);
                void SetItem(int index, T item);
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                bool System.Collections.IList.get_IsReadOnly();
                bool System.Collections.IList.get_IsFixedSize();
                int System.Collections.IList.Add(object value);
                bool System.Collections.IList.Contains(object value);
                int System.Collections.IList.IndexOf(object value);
                void System.Collections.IList.Insert(int index, object value);
                void System.Collections.IList.Remove(object value);
            }

            class ReadOnlyCollection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> list;
                /*0x0*/ object _syncRoot;

                static bool IsCompatibleObject(object value);
                ReadOnlyCollection(System.Collections.Generic.IList<T> list);
                int get_Count();
                T get_Item(int index);
                bool Contains(T value);
                void CopyTo(T[] array, int index);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                int IndexOf(T value);
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                T System.Collections.Generic.IList<T>.get_Item(int index);
                void System.Collections.Generic.IList<T>.set_Item(int index, T value);
                void System.Collections.Generic.ICollection<T>.Add(T value);
                void System.Collections.Generic.ICollection<T>.Clear();
                void System.Collections.Generic.IList<T>.Insert(int index, T value);
                bool System.Collections.Generic.ICollection<T>.Remove(T value);
                void System.Collections.Generic.IList<T>.RemoveAt(int index);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.IList.get_IsFixedSize();
                bool System.Collections.IList.get_IsReadOnly();
                object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                int System.Collections.IList.Add(object value);
                void System.Collections.IList.Clear();
                bool System.Collections.IList.Contains(object value);
                int System.Collections.IList.IndexOf(object value);
                void System.Collections.IList.Insert(int index, object value);
                void System.Collections.IList.Remove(object value);
                void System.Collections.IList.RemoveAt(int index);
            }

            class KeyedCollection<TKey, TItem> : System.Collections.ObjectModel.Collection<TItem>
            {
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> comparer;
                /*0x0*/ System.Collections.Generic.Dictionary<TKey, TItem> dict;
                /*0x0*/ int keyCount;
                /*0x0*/ int threshold;

                KeyedCollection();
                KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold);
                System.Collections.Generic.List<TItem> get_Items();
                TItem get_Item(TKey key);
                bool Contains(TKey key);
                bool TryGetValue(TKey key, ref TItem item);
                System.Collections.Generic.IDictionary<TKey, TItem> get_Dictionary();
                void ClearItems();
                TKey GetKeyForItem(TItem item);
                void InsertItem(int index, TItem item);
                void RemoveItem(int index);
                void SetItem(int index, TItem item);
                void AddKey(TKey key, TItem item);
                void CreateDictionary();
                void RemoveKey(TKey key);
            }

            class ReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> m_dictionary;
                /*0x0*/ object _syncRoot;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> _values;

                static bool IsCompatibleKey(object key);
                System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> get_Keys();
                System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> get_Values();
                bool ContainsKey(TKey key);
                System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                bool TryGetValue(TKey key, ref TValue value);
                System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                TValue get_Item(TKey key);
                void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
                void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
                int get_Count();
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int arrayIndex);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                void System.Collections.IDictionary.Add(object key, object value);
                void System.Collections.IDictionary.Clear();
                bool System.Collections.IDictionary.Contains(object key);
                System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                bool System.Collections.IDictionary.get_IsFixedSize();
                bool System.Collections.IDictionary.get_IsReadOnly();
                System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                void System.Collections.IDictionary.Remove(object key);
                System.Collections.ICollection System.Collections.IDictionary.get_Values();
                object System.Collections.IDictionary.get_Item(object key);
                void System.Collections.IDictionary.set_Item(object key, object value);
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();

                struct DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> _dictionary;
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    DictionaryEnumerator(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    object get_Key();
                    object get_Value();
                    object get_Current();
                    bool MoveNext();
                    void Reset();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TKey> _collection;
                    /*0x0*/ object _syncRoot;

                    KeyCollection(System.Collections.Generic.ICollection<TKey> collection);
                    KeyCollection();
                    void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    void System.Collections.Generic.ICollection<TKey>.Clear();
                    bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    void CopyTo(TKey[] array, int arrayIndex);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    System.Collections.Generic.IEnumerator<TKey> GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TValue> _collection;
                    /*0x0*/ object _syncRoot;

                    ValueCollection(System.Collections.Generic.ICollection<TValue> collection);
                    ValueCollection();
                    void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    void System.Collections.Generic.ICollection<TValue>.Clear();
                    bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    void CopyTo(TValue[] array, int arrayIndex);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();
                }
            }

            class ReadOnlyDictionaryHelpers
            {
                static void CopyToNonGenericICollectionHelper<T>(System.Collections.Generic.ICollection<T> collection, System.Array array, int index);
            }
        }

        namespace Generic
        {
            enum InsertionBehavior
            {
                None = 0,
                OverwriteExisting = 1,
                ThrowOnExisting = 2,
            }

            class Dictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
            {
                static string VersionName = "Version";
                static string HashSizeName = "HashSize";
                static string KeyValuePairsName = "KeyValuePairs";
                static string ComparerName = "Comparer";
                /*0x0*/ int[] _buckets;
                /*0x0*/ System.Collections.Generic.Dictionary.Entry<TKey, TValue> _entries;
                /*0x0*/ int _count;
                /*0x0*/ int _freeList;
                /*0x0*/ int _freeCount;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> _values;
                /*0x0*/ object _syncRoot;

                static bool IsCompatibleKey(object key);
                Dictionary();
                Dictionary(int capacity);
                Dictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                int get_Count();
                System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> get_Keys();
                System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
                System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> get_Values();
                System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
                TValue get_Item(TKey key);
                void set_Item(TKey key, TValue value);
                void Add(TKey key, TValue value);
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                void Clear();
                bool ContainsKey(TKey key);
                bool ContainsValue(TValue value);
                void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                System.Collections.Generic.Dictionary.Enumerator<TKey, TValue> GetEnumerator();
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                int FindEntry(TKey key);
                int Initialize(int capacity);
                bool TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior);
                void OnDeserialization(object sender);
                void Resize();
                void Resize(int newSize, bool forceNewHashCodes);
                bool Remove(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
                bool TryAdd(TKey key, TValue value);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                bool System.Collections.IDictionary.get_IsFixedSize();
                bool System.Collections.IDictionary.get_IsReadOnly();
                System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                System.Collections.ICollection System.Collections.IDictionary.get_Values();
                object System.Collections.IDictionary.get_Item(object key);
                void System.Collections.IDictionary.set_Item(object key, object value);
                void System.Collections.IDictionary.Add(object key, object value);
                bool System.Collections.IDictionary.Contains(object key);
                System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                void System.Collections.IDictionary.Remove(object key);

                struct Entry<TKey, TValue>
                {
                    /*0x0*/ int hashCode;
                    /*0x0*/ int next;
                    /*0x0*/ TKey key;
                    /*0x0*/ TValue value;
                }

                struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator, System.Collections.IDictionaryEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;
                    /*0x0*/ int _getEnumeratorRetType;

                    Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
                    bool MoveNext();
                    System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    void Dispose();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry();
                    object System.Collections.IDictionaryEnumerator.get_Key();
                    object System.Collections.IDictionaryEnumerator.get_Value();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    KeyCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    System.Collections.Generic.Dictionary.KeyCollection.Enumerator<TKey, TValue> GetEnumerator();
                    void CopyTo(TKey[] array, int index);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    void System.Collections.Generic.ICollection<TKey>.Clear();
                    bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TKey>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TKey _currentKey;

                        Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        void Dispose();
                        bool MoveNext();
                        TKey get_Current();
                        object System.Collections.IEnumerator.get_Current();
                        void System.Collections.IEnumerator.Reset();
                    }
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    System.Collections.Generic.Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator();
                    void CopyTo(TValue[] array, int index);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    void System.Collections.Generic.ICollection<TValue>.Clear();
                    bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TValue>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TValue _currentValue;

                        Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        void Dispose();
                        bool MoveNext();
                        TValue get_Current();
                        object System.Collections.IEnumerator.get_Current();
                        void System.Collections.IEnumerator.Reset();
                    }
                }
            }

            interface ICollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                int get_Count();
                bool get_IsReadOnly();
                void Add(T item);
                void Clear();
                bool Contains(T item);
                void CopyTo(T[] array, int arrayIndex);
                bool Remove(T item);
            }

            class ICollectionDebugView<T>
            {
            }

            interface IComparer<T>
            {
                int Compare(T x, T y);
            }

            interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                TValue get_Item(TKey key);
                void set_Item(TKey key, TValue value);
                System.Collections.Generic.ICollection<TKey> get_Keys();
                System.Collections.Generic.ICollection<TValue> get_Values();
                bool ContainsKey(TKey key);
                void Add(TKey key, TValue value);
                bool Remove(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class DictionaryKeyCollectionDebugView<TKey, TValue>
            {
            }

            class DictionaryValueCollectionDebugView<TKey, TValue>
            {
            }

            interface IEnumerable<T> : System.Collections.IEnumerable
            {
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
            }

            interface IEnumerator<T> : System.IDisposable, System.Collections.IEnumerator
            {
                T get_Current();
            }

            interface IEqualityComparer<T>
            {
                bool Equals(T x, T y);
                int GetHashCode(T obj);
            }

            interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                T get_Item(int index);
                void set_Item(int index, T value);
                int IndexOf(T item);
                void Insert(int index, T item);
                void RemoveAt(int index);
            }

            interface IReadOnlyCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                int get_Count();
            }

            interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                bool ContainsKey(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
                TValue get_Item(TKey key);
                System.Collections.Generic.IEnumerable<TKey> get_Keys();
                System.Collections.Generic.IEnumerable<TValue> get_Values();
            }

            interface IReadOnlyList<T> : System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                T get_Item(int index);
            }

            class KeyNotFoundException : System.SystemException
            {
                /*0x145e49c*/ KeyNotFoundException();
                /*0x145e4f8*/ KeyNotFoundException(string message);
                /*0x145e51c*/ KeyNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class KeyValuePair
            {
                static /*0x145e524*/ string PairToString(object key, object value);
            }

            struct KeyValuePair<TKey, TValue>
            {
                /*0x0*/ TKey key;
                /*0x0*/ TValue value;

                KeyValuePair(TKey key, TValue value);
                TKey get_Key();
                TValue get_Value();
                string ToString();
            }

            class List<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int DefaultCapacity = 4;
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                static List();
                static bool IsCompatibleObject(object value);
                List();
                List(int capacity);
                List(System.Collections.Generic.IEnumerable<T> collection);
                int get_Capacity();
                void set_Capacity(int value);
                int get_Count();
                bool System.Collections.IList.get_IsFixedSize();
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                bool System.Collections.IList.get_IsReadOnly();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                T get_Item(int index);
                void set_Item(int index, T value);
                object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                void Add(T item);
                void AddWithResize(T item);
                int System.Collections.IList.Add(object item);
                void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly();
                int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);
                int BinarySearch(T item);
                int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer);
                void Clear();
                bool Contains(T item);
                bool System.Collections.IList.Contains(object item);
                void CopyTo(T[] array);
                void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                void CopyTo(T[] array, int arrayIndex);
                void EnsureCapacity(int min);
                bool Exists(System.Predicate<T> match);
                T Find(System.Predicate<T> match);
                int FindIndex(System.Predicate<T> match);
                int FindIndex(int startIndex, int count, System.Predicate<T> match);
                int FindLastIndex(System.Predicate<T> match);
                int FindLastIndex(int startIndex, int count, System.Predicate<T> match);
                void ForEach(System.Action<T> action);
                System.Collections.Generic.List.Enumerator<T> GetEnumerator();
                System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                int IndexOf(T item);
                int System.Collections.IList.IndexOf(object item);
                void Insert(int index, T item);
                void System.Collections.IList.Insert(int index, object item);
                void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                bool Remove(T item);
                void System.Collections.IList.Remove(object item);
                int RemoveAll(System.Predicate<T> match);
                void RemoveAt(int index);
                void RemoveRange(int index, int count);
                void Reverse();
                void Reverse(int index, int count);
                void Sort();
                void Sort(System.Collections.Generic.IComparer<T> comparer);
                void Sort(int index, int count, System.Collections.Generic.IComparer<T> comparer);
                void Sort(System.Comparison<T> comparison);
                T[] ToArray();
                void TrimExcess();
                void AddEnumerable(System.Collections.Generic.IEnumerable<T> enumerable);

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.List<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    Enumerator(System.Collections.Generic.List<T> list);
                    void Dispose();
                    bool MoveNext();
                    bool MoveNextRare();
                    T get_Current();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                }
            }

            struct ValueListBuilder<T>
            {
                /*0x0*/ System.Span<T> _span;
                /*0x0*/ T[] _arrayFromPool;
                /*0x0*/ int _pos;

                ValueListBuilder(System.Span<T> initialSpan);
                int get_Length();
                void Append(T item);
                System.ReadOnlySpan<T> AsSpan();
                void Dispose();
                void Grow();
            }

            struct ArrayBuilder<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _count;

                int get_Capacity();
                int get_Count();
                T get_Item(int index);
                void Add(T item);
                void UncheckedAdd(T item);
                void EnsureCapacity(int minimum);
            }

            class EnumerableHelpers
            {
                static T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
            }

            struct LargeArrayBuilder<T>
            {
                /*0x0*/ int _maxCapacity;
                /*0x0*/ T[] _first;
                /*0x0*/ System.Collections.Generic.ArrayBuilder<T[]> _buffers;
                /*0x0*/ T[] _current;
                /*0x0*/ int _index;
                /*0x0*/ int _count;

                LargeArrayBuilder(bool initialize);
                LargeArrayBuilder(int maxCapacity);
                void AddRange(System.Collections.Generic.IEnumerable<T> items);
                void AddWithBufferAllocation(T item, ref T[] destination, ref int index);
                void CopyTo(T[] array, int arrayIndex, int count);
                T[] GetBuffer(int index);
                T[] ToArray();
                bool TryMove(ref T[] array);
                void AllocateBuffer();
            }

            class LowLevelDictionary<TKey, TValue>
            {
                /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _buckets;
                /*0x0*/ int _numEntries;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;

                LowLevelDictionary();
                LowLevelDictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                void set_Item(TKey key, TValue value);
                void Clear(int capacity);
                bool Remove(TKey key);
                System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> Find(TKey key);
                System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
                void ExpandBuckets();
                int GetBucket(TKey key, int numBuckets);

                class Entry<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _next;

                    Entry();
                }

                class DefaultComparer`1<TKey, TValue, T> : System.Collections.Generic.IEqualityComparer<T>
                {
                    DefaultComparer`1();
                    bool Equals(T x, T y);
                    int GetHashCode(T obj);
                }
            }

            class CollectionExtensions
            {
                static TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
                static TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
            }

            class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int MinimumGrow = 4;
                static int GrowFactor = 200;
                /*0x0*/ T[] _array;
                /*0x0*/ int _head;
                /*0x0*/ int _tail;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                Queue();
                Queue(int capacity);
                int get_Count();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void Clear();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                void Enqueue(T item);
                System.Collections.Generic.Queue.Enumerator<T> GetEnumerator();
                System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                T Dequeue();
                void SetCapacity(int capacity);
                void MoveNext(ref int index);
                void ThrowForEmptyQueue();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Queue<T> _q;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    Enumerator(System.Collections.Generic.Queue<T> q);
                    void Dispose();
                    bool MoveNext();
                    T get_Current();
                    void ThrowEnumerationNotStartedOrEnded();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                }
            }

            class QueueDebugView<T>
            {
            }

            class Stack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int DefaultCapacity = 4;
                /*0x0*/ T[] _array;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                Stack();
                Stack(int capacity);
                int get_Count();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void Clear();
                bool Contains(T item);
                void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                System.Collections.Generic.Stack.Enumerator<T> GetEnumerator();
                System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                T Peek();
                T Pop();
                void Push(T item);
                void PushWithResize(T item);
                void ThrowForEmptyStack();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Stack<T> _stack;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    Enumerator(System.Collections.Generic.Stack<T> stack);
                    void Dispose();
                    bool MoveNext();
                    T get_Current();
                    void ThrowEnumerationNotStartedOrEnded();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                }
            }

            class StackDebugView<T>
            {
            }

            class CollectionDebugView<T>
            {
            }

            class DictionaryDebugView<K, V>
            {
            }

            class LowLevelList<T>
            {
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;

                static LowLevelList();
                LowLevelList();
                LowLevelList(int capacity);
                int get_Capacity();
                void set_Capacity(int value);
                int get_Count();
                T get_Item(int index);
                void set_Item(int index, T value);
                void Add(T item);
                void EnsureCapacity(int min);
                void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                void Clear();
                bool Contains(T item);
                void CopyTo(T[] array, int arrayIndex);
                int IndexOf(T item);
                void Insert(int index, T item);
                void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                bool Remove(T item);
                int RemoveAll(System.Predicate<T> match);
                void RemoveAt(int index);
            }

            class LowLevelListWithIList<T> : System.Collections.Generic.LowLevelList<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                LowLevelListWithIList();
                LowLevelListWithIList(int capacity);
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.LowLevelListWithIList<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    Enumerator(System.Collections.Generic.LowLevelListWithIList<T> list);
                    void Dispose();
                    bool MoveNext();
                    bool MoveNextRare();
                    T get_Current();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                }
            }

            class IntrospectiveSortUtilities
            {
                static /*0x145e5e4*/ int FloorLog2PlusOne(int n);
                static /*0x145e618*/ void ThrowOrIgnoreBadComparer(object comparer);
            }

            class ArraySortHelper<T>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<T> s_defaultArraySortHelper;

                static ArraySortHelper();
                static void Sort(T[] keys, int index, int length, System.Comparison<T> comparer);
                static int InternalBinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
                static void SwapIfGreater(T[] keys, System.Comparison<T> comparer, int a, int b);
                static void Swap(T[] a, int i, int j);
                static void IntrospectiveSort(T[] keys, int left, int length, System.Comparison<T> comparer);
                static void IntroSort(T[] keys, int lo, int hi, int depthLimit, System.Comparison<T> comparer);
                static int PickPivotAndPartition(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static void Heapsort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static void DownHeap(T[] keys, int i, int n, int lo, System.Comparison<T> comparer);
                static void InsertionSort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static System.Collections.Generic.ArraySortHelper<T> get_Default();
                ArraySortHelper();
                void Sort(T[] keys, int index, int length, System.Collections.Generic.IComparer<T> comparer);
                int BinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
            }

            class ArraySortHelper<TKey, TValue>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;

                static ArraySortHelper();
                static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, System.Collections.Generic.IComparer<TKey> comparer, int a, int b);
                static void Swap(TKey[] keys, TValue[] values, int i, int j);
                static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, System.Collections.Generic.IComparer<TKey> comparer);
                static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, System.Collections.Generic.IComparer<TKey> comparer);
                static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, System.Collections.Generic.IComparer<TKey> comparer);
                static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static System.Collections.Generic.ArraySortHelper<TKey, TValue> get_Default();
                ArraySortHelper();
                void Sort(TKey[] keys, TValue[] values, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
            }

            class Comparer<T> : System.Collections.IComparer, System.Collections.Generic.IComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.Comparer<T> defaultComparer;

                static System.Collections.Generic.Comparer<T> get_Default();
                static System.Collections.Generic.Comparer<T> CreateComparer();
                Comparer();
                int Compare(T x, T y);
                int System.Collections.IComparer.Compare(object x, object y);
            }

            class GenericComparer<T> : System.Collections.Generic.Comparer<T>
            {
                GenericComparer();
                int Compare(T x, T y);
                bool Equals(object obj);
                int GetHashCode();
            }

            class NullableComparer<T> : System.Collections.Generic.Comparer<System.Nullable<T>>
            {
                NullableComparer();
                int Compare(System.Nullable<T> x, System.Nullable<T> y);
                bool Equals(object obj);
                int GetHashCode();
            }

            class ObjectComparer<T> : System.Collections.Generic.Comparer<T>
            {
                ObjectComparer();
                int Compare(T x, T y);
                bool Equals(object obj);
                int GetHashCode();
            }

            class EqualityComparer<T> : System.Collections.IEqualityComparer, System.Collections.Generic.IEqualityComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.EqualityComparer<T> defaultComparer;

                static System.Collections.Generic.EqualityComparer<T> get_Default();
                static System.Collections.Generic.EqualityComparer<T> CreateComparer();
                EqualityComparer();
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                int IndexOf(T[] array, T value, int startIndex, int count);
                int LastIndexOf(T[] array, T value, int startIndex, int count);
                int System.Collections.IEqualityComparer.GetHashCode(object obj);
                bool System.Collections.IEqualityComparer.Equals(object x, object y);
            }

            class GenericEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                GenericEqualityComparer();
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                int IndexOf(T[] array, T value, int startIndex, int count);
                int LastIndexOf(T[] array, T value, int startIndex, int count);
                bool Equals(object obj);
                int GetHashCode();
            }

            class NullableEqualityComparer<T> : System.Collections.Generic.EqualityComparer<System.Nullable<T>>
            {
                NullableEqualityComparer();
                bool Equals(System.Nullable<T> x, System.Nullable<T> y);
                int GetHashCode(System.Nullable<T> obj);
                int IndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                int LastIndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                bool Equals(object obj);
                int GetHashCode();
            }

            class ObjectEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                ObjectEqualityComparer();
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                int IndexOf(T[] array, T value, int startIndex, int count);
                int LastIndexOf(T[] array, T value, int startIndex, int count);
                bool Equals(object obj);
                int GetHashCode();
            }

            class ByteEqualityComparer : System.Collections.Generic.EqualityComparer<byte>
            {
                /*0x145e944*/ ByteEqualityComparer();
                /*0x145e680*/ bool Equals(byte x, byte y);
                /*0x145e690*/ int GetHashCode(byte b);
                /*0x145e6ac*/ int IndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x145e840*/ int LastIndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x145e898*/ bool Equals(object obj);
                /*0x145e910*/ int GetHashCode();
            }

            class EnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                EnumEqualityComparer();
                EnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                bool Equals(object obj);
                int GetHashCode();
            }

            class SByteEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                SByteEnumEqualityComparer();
                SByteEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                int GetHashCode(T obj);
            }

            class ShortEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                ShortEnumEqualityComparer();
                ShortEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                int GetHashCode(T obj);
            }

            class LongEnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                LongEnumEqualityComparer();
                LongEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                bool Equals(object obj);
                int GetHashCode();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class InternalStringComparer : System.Collections.Generic.EqualityComparer<string>
            {
                /*0x145ea48*/ InternalStringComparer();
                /*0x145e98c*/ int GetHashCode(string obj);
                /*0x145e9ac*/ bool Equals(string x, string y);
                /*0x145e9dc*/ int IndexOf(string[] array, string value, int startIndex, int count);
            }
        }
    }

    namespace Buffers
    {
        class SpanAction<T, TArg> : System.MulticastDelegate
        {
            SpanAction(object object, nint method);
            void Invoke(System.Span<T> span, TArg arg);
        }

        class ArrayPool<T>
        {
            static /*0x0*/ System.Buffers.ArrayPool<T> <Shared>k__BackingField;

            static ArrayPool();
            static System.Buffers.ArrayPool<T> get_Shared();
            ArrayPool();
            T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
        }

        class ArrayPoolEventSource : System.Diagnostics.Tracing.EventSource
        {
            static /*0x0*/ System.Buffers.ArrayPoolEventSource Log;

            static /*0x145ed5c*/ ArrayPoolEventSource();
            /*0x145ea90*/ ArrayPoolEventSource();
            /*0x145eb3c*/ void BufferRented(int bufferId, int bufferSize, int poolId, int bucketId);
            /*0x145ec28*/ void BufferAllocated(int bufferId, int bufferSize, int poolId, int bucketId, System.Buffers.ArrayPoolEventSource.BufferAllocatedReason reason);
            /*0x145ed30*/ void BufferReturned(int bufferId, int bufferSize, int poolId);
            /*0x145ed40*/ void BufferTrimmed(int bufferId, int bufferSize, int poolId);
            /*0x145ed50*/ void BufferTrimPoll(int milliseconds, int pressure);

            enum BufferAllocatedReason
            {
                Pooled = 0,
                OverMaximumSize = 1,
                PoolExhausted = 2,
            }
        }

        interface IPinnable
        {
            void Unpin();
        }

        struct MemoryHandle : System.IDisposable
        {
            /*0x10*/ void* _pointer;
            /*0x18*/ System.Runtime.InteropServices.GCHandle _handle;
            /*0x20*/ System.Buffers.IPinnable _pinnable;

            /*0x145edbc*/ MemoryHandle(void* pointer, System.Runtime.InteropServices.GCHandle handle, System.Buffers.IPinnable pinnable);
            /*0x145edc8*/ void* get_Pointer();
            /*0x145edd0*/ void Dispose();
        }

        class MemoryManager<T>
        {
            System.Span<T> GetSpan();
            System.Buffers.MemoryHandle Pin(int elementIndex);
            bool TryGetArray(ref System.ArraySegment<T> segment);
        }

        class TlsOverPerCoreLockedStacksArrayPool<T> : System.Buffers.ArrayPool<T>
        {
            static /*0x0*/ bool s_trimBuffers;
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<T[][], object> s_allTlsBuckets;
            [ThreadStatic] static T[][] t_tlsBuckets;
            /*0x0*/ int[] _bucketArraySizes;
            /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> _buckets;
            /*0x0*/ int _callbackCreated;

            static TlsOverPerCoreLockedStacksArrayPool();
            static bool Gen2GcCallbackFunc(object target);
            static System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> GetMemoryPressure();
            static bool GetTrimBuffers();
            TlsOverPerCoreLockedStacksArrayPool();
            System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> CreatePerCoreLockedStacks(int bucketIndex);
            int get_Id();
            T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
            bool Trim();

            enum MemoryPressure<T>
            {
                Low = 0,
                Medium = 1,
                High = 2,
            }

            class PerCoreLockedStacks<T>
            {
                /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.LockedStack<T> _perCoreStacks;

                PerCoreLockedStacks();
                void TryPush(T[] array);
                T[] TryPop();
                bool Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int[] bucketSizes);
            }

            class LockedStack<T>
            {
                /*0x0*/ T[][] _arrays;
                /*0x0*/ int _count;
                /*0x0*/ uint _firstStackItemMS;

                LockedStack();
                bool TryPush(T[] array);
                T[] TryPop();
                void Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int bucketSize);
            }
        }

        class Utilities
        {
            static /*0x164f25c*/ int SelectBucketIndex(int bufferSize);
            static /*0x164f2d8*/ int GetMaxSizeForBucket(int binIndex);
        }

        namespace Binary
        {
            class BinaryPrimitives
            {
                static /*0x164f2e4*/ int ReverseEndianness(int value);
                static /*0x164f2ec*/ ushort ReverseEndianness(ushort value);
                static /*0x164f2f8*/ uint ReverseEndianness(uint value);
            }
        }

        namespace Text
        {
            class FormattingHelpers
            {
                static /*0x164f300*/ int CountDigits(ulong value);
                static /*0x164f3bc*/ int CountDigits(uint value);
                static /*0x164f428*/ int CountHexDigits(ulong value);
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 001D686DB504E20C792EAA07FE09224A45FF328E24A80072D04D16ABC5C2B5D2;
    static /*0x40*/ <PrivateImplementationDetails> 021022D5891F99B3B525763EB77BAEC69B107268F560721F5060FCDBD4D5AAE8;
    static /*0xea*/ <PrivateImplementationDetails> 042957A0DB5FF2D38A343AC5AE5F8635B88F10C32EB87A238B1DFB4756468476;
    static /*0xf6*/ <PrivateImplementationDetails> 07FA6E88C946B2528C09C16C2FB8E9CDA49AFFAFC601774C437FD9F2DF3ECE01;
    static /*0x12e*/ <PrivateImplementationDetails> 0C496C9AE05419BD25256D0EF4F31AFD291119F14B8BD683BF1774F91E08659D;
    static /*0x182*/ <PrivateImplementationDetails> 0E499E7743BCDFF289B85890E4DFDD635594DB16246DC094C3C19556B6C1262C;
    static /*0x1ca*/ <PrivateImplementationDetails> 0F9E3C7E66CDEF5C44FA29E65CA676C480F7A2A4A067F70107FDC292C68D38B0;
    static /*0x1d6*/ <PrivateImplementationDetails> 1199C3B39A2FA058EFF5B3829616AE81EE2B59A51D89C107A5FA4B6FEF95DD16;
    static /*0x222*/ <PrivateImplementationDetails> 125CF2084D7EEC18DC9795BE4BAA221655C0EABAB89E90A74FB0370378A60293;
    static /*0x4a2*/ <PrivateImplementationDetails> 12D518BA10F3DD1A331E65FBD4C330930C0A0BD9F50F37BE0BDF596E964B9A78;
    static /*0xcd6*/ <PrivateImplementationDetails> 195ABC1ABB69B6BD65F20ACAFA79EED2D330BF513E25C830F24B8A78D8703446;
    static /*0xd56*/ <PrivateImplementationDetails> 1A07BC77B9912D8D87E9B28E0167F53A9B09BB017B35A35F3913989C9440A60B;
    static /*0xd60*/ <PrivateImplementationDetails> 1B9CC34A0CF8DBCC350E200673FAC4124DDAD581F1FC2C16FF9A1C0154691687;
    static /*0x130a*/ <PrivateImplementationDetails> 1C4B3A80ED7AEC83916479BCE280E1258D5785D07F0EA22A5E27592ACCAE692B;
    static /*0x1472*/ <PrivateImplementationDetails> 1F38DEB3F70291588D06D3830D0D4241CE0570C9F4EE8B00F606C4753EB016E2;
    static /*0x149c*/ <PrivateImplementationDetails> 215E3E0B11A214B3198654E87B3D953AC8FB1ABC7045AF841A7C4892624BDE49;
    static /*0x14a6*/ <PrivateImplementationDetails> 2403FBEA85D0741C5727760E97EF16C9BF23294F21C0F1265A4BAF7F22202A64;
    static /*0x14b2*/ <PrivateImplementationDetails> 24CB9F17C8326D8BB8EC908716519DF7F265AE825F0DD13BB04E03A90B07D90E;
    static /*0x14c2*/ <PrivateImplementationDetails> 25308BAB47481701F1E861B1EA4F2409E73ABB14E9579C26DF4ABE440A0DCF0A;
    static /*0x150e*/ <PrivateImplementationDetails> 25E3E48132FBDBE9B7C0C6C54D7C10A5DE12A105AA3E5DE2A0DC808BF245B7A5;
    static /*0x214a*/ <PrivateImplementationDetails> 2AC9A6746ACA543AF8DFF39894CFE8173AFBA21EB01C6FAE33D52947222855EF;
    static /*0x214d*/ <PrivateImplementationDetails> 2CCF4119215BDAD102DA7AD5B57E0E6CA19CC8FF5524856FC58907E824213E1F;
    static /*0x2195*/ <PrivateImplementationDetails> 3444EB31231B2CCC1B05C7A44EBD1B2A009C1D9977A99B453F52E2F81DD6C32F;
    static /*0x21dd*/ <PrivateImplementationDetails> 3D95E4501B1964D7FCE16E3F5682A038752B462357D87343880B1E819F6163FE;
    static /*0x21ed*/ <PrivateImplementationDetails> 3F62692E2AD5078353EC4471A13421A61EE493294CF59DC66626A6EF9CCCD2C4;
    static /*0x2235*/ <PrivateImplementationDetails> 42E1421FC2A5A6A33E964D7EB9603EB101818D858DDA09B2BC9B5A888C1C351C;
    static /*0x2241*/ <PrivateImplementationDetails> 44D066BAE9848B4A4B2C31F1854666526A32D0588635569423BDA1DA303C97DF;
    static /*0x2247*/ <PrivateImplementationDetails> 4623CA5867960AA898AA1F65E720CD5ECD3552542E0C6F6FB65B21D14DD1CBC2;
    static /*0x22bf*/ <PrivateImplementationDetails> 4800FBFC4566EB02D1727A4B1C949CCBC7535C216A0766564C199308631B5DD6;
    static /*0x22ef*/ <PrivateImplementationDetails> 493402F3E4397B2945B16273E795816C0BDF80F76F42FCAA75F3DF2E215ABC1B;
    static /*0x32ef*/ <PrivateImplementationDetails> 494C32E1A18F6E8AD8ED5FAB0A5AF07F801BE7AF3C936942B020918CE2953046;
    static /*0x339d*/ <PrivateImplementationDetails> 4E0B9E024FA510B6F03C92D95BB204E78CDC6E3FD2EC8D35787B7BC76F0655A0;
    static /*0x3ceb*/ <PrivateImplementationDetails> 508085E0DDEEA9CE48BFAE98CEC779F8D06301AE973555D37680D08190CAFA70;
    static /*0x3d17*/ <PrivateImplementationDetails> 510FDFA4743E58DD45DCDD7CB4F8509BF6294CC1D1D4958CA30A9E7604973006;
    static /*0x3d5f*/ <PrivateImplementationDetails> 5292FD0A8E62FCCBE41F34EFE7575D097990A66FE23B3507971C5BF272A4362E;
    static /*0x3d89*/ <PrivateImplementationDetails> 533B8C444F951E83EFF7305E3807B66CE0005DE0A2D0A44873C130895A3BE6AA;
    static /*0x3d9d*/ <PrivateImplementationDetails> 543172FF9822CE5240DF89FF3AD8C7FD9824F97D0EED9B1432E60345FBBDE9A9;
    static /*0x3dd1*/ <PrivateImplementationDetails> 55D0BF716B334D123E0088CFB3F8E2FEA17AF5025BB527F95EEB09BA978EA329;
    static /*0x3ed1*/ <PrivateImplementationDetails> 56073E3CC3FC817690CC306D0DB7EA63EBCB0801359567CA44CA3D3B9BF63854;
    static /*0x6901*/ <PrivateImplementationDetails> 5857EE4CE98BFABBD62B385C1098507DD0052FF3951043AAD6A1DABD495F18AA;
    static /*0x6935*/ <PrivateImplementationDetails> 5DF6E0E2761359D30A8275058E299FCC0381534545F55CF43E41983F5D4C9456;
    static /*0x6955*/ <PrivateImplementationDetails> 5EC4E50DA95A113769D73E5F7F8221A876185CEE6498ABB16FBB9F0563C15BBF;
    static /*0x699d*/ <PrivateImplementationDetails> 61D639BE11384EE21CDE2B40357F4F9D80A106C97C592D18A9F4CAA442CA5D31;
    static /*0x69fb*/ <PrivateImplementationDetails> 62E6F13B53D67FDD780E20D89A6E8EE503B197AC16AC3F1D2571C147FDD324C9;
    static /*0x6afb*/ <PrivateImplementationDetails> 668BB69E184E0C32DC3BC488001C506C87EE5A95C7E7B6B87D24C3A6DC779956;
    static /*0x72fb*/ <PrivateImplementationDetails> 6708B572BDBE5D5E79701DBB9744AF74B50FED7608218F2D7BF1B5D87E5A53ED;
    static /*0x732b*/ <PrivateImplementationDetails> 67856A16DB0550FDAB4D1A9B208B0C155C4679CA116BF867B74ED2A0AA4D2955;
    static /*0x75b3*/ <PrivateImplementationDetails> 6DC92D3617F0357376502FBA4CDD465B5423818DABE8B2CA1A06E1351F2F1C85;
    static /*0x75fb*/ <PrivateImplementationDetails> 71F7F6B226CBC11C8B26D506869FAE022928427389882579DB316F36FF34A096;
    static /*0x76cf*/ <PrivateImplementationDetails> 73F5D95C401726B2C92EC96A696BA15F0E5A5C6DD9AC6BEB3736A81772A11531;
    static /*0x7ecf*/ <PrivateImplementationDetails> 74BCD6ED20AF2231F2BB1CDE814C5F4FF48E54BAC46029EEF90DDF4A208E2B20;
    static /*0x7fef*/ <PrivateImplementationDetails> 74EF7306E7452D6859B6463CE496B8DF30925F69E1B2969E1F3F34BBC9C6AF04;
    static /*0x80ef*/ <PrivateImplementationDetails> 78AD7906208AA1E531D0C1100062DE3D252210B1E4214061294A0BB7C94762B8;
    static /*0x8167*/ <PrivateImplementationDetails> 7BEC6AD454781FDCD8D475B3418629CBABB3BF9CA66FA80009D608A1A60D0696;
    static /*0x8727*/ <PrivateImplementationDetails> 7F777906B0704EB248888E491577584D5BEBE71B375BD595A06444390B471915;
    static /*0x876f*/ <PrivateImplementationDetails> 801494072CDD59E61F9AA9345A80D045378705DFDCE94902C22EAEAE049BE780;
    static /*0x8870*/ long 819B40F8CF7DC49B4275955A17C10239F1BBBB3BF96E26E25ED844B96B645D7F;
    static /*0x8878*/ <PrivateImplementationDetails> 8259E3EBA4D41CA02AE5322BBD280034A9C9860D9CD0D2038139FC9EBE6B6C77;
    static /*0x88c0*/ long 82B100804CE219CD73E155C7C6457FCF04EA539DE5B19F4736E800098714EB21;
    static /*0x88c8*/ <PrivateImplementationDetails> 861FD05B0EAD3D0AA9418B140CC37846BBC5F195214D90CEF42919D1E36EED10;
    static /*0x8910*/ <PrivateImplementationDetails> 86BDA34D2165AC08F2DE4918B302E44205CDEA674FCA7F2C7F56D4F12D8B0C73;
    static /*0x8cf8*/ long 8BFD94DEAAC0F168DC8B50A00AC120A113B550B68FEF344F807D503D1A6E5DED;
    static /*0x8d00*/ <PrivateImplementationDetails> 8CCE27079B32C13BB310169A6AD26AE419CDC98B7E2EFD3CC9997257F4BC1DEF;
    static /*0x9381*/ <PrivateImplementationDetails> 9086502742CE7F0595B57A4E5B32901FF4CF97959B92F7E91A435E4765AC1115;
    static /*0xaac1*/ <PrivateImplementationDetails> 93B42898102ACB2421875C45676880B8A07390D8DF0E1EE85C5D1AA26964B0C6;
    static /*0xac11*/ <PrivateImplementationDetails> 93F28AF88A06482BE13F8D0354B6A7676DDAED573EA3938C50F6E53E6D6BB0B6;
    static /*0xac45*/ <PrivateImplementationDetails> 95BDE712712F10D07813AE3DEEA40D1F38E3FCF1A92CC435F17A326CC22242EB;
    static /*0xacf3*/ <PrivateImplementationDetails> 964889A5283FD0A3DFC8AE256721E6F67B8212FD6841AB1C821DE3134DE79B07;
    static /*0xadf9*/ <PrivateImplementationDetails> 96E3FDE919EC36694EFBEC22FEF80F84EE640CC5E46CED07C3E65AC04607C7D6;
    static /*0xae08*/ <PrivateImplementationDetails> 9960C7FC60CDD325C8A2A00995BE7064EAC3F6295C6A5C4E797D2281846131E4;
    static /*0xae2c*/ <PrivateImplementationDetails> 99E66DACA3EFF94776AF1258E0E5B2F4DF2900E4EA32351B0DF37A87F2426B1F;
    static /*0xae58*/ <PrivateImplementationDetails> A252A93D042C5E2453990C2829A425C6DD749CCDCDF13DB58C11BBC78E8D3CE9;
    static /*0xaea0*/ <PrivateImplementationDetails> A2DFDF9C2CED8BB1C0B9B06064345ACC9C22DFE5FEC9976FF061F0994451519B;
    static /*0xaf18*/ <PrivateImplementationDetails> A2EC7CB9B0FE89F9A9BEA547D773225AFE6E4535DF28325A0D6CD7A5E2D20376;
    static /*0xaf64*/ <PrivateImplementationDetails> A30E1152CFB528AE968FAC58E83BBEB3611BFDE2E6CF60B4FA9535A7D0A9B8EA;
    static /*0xafac*/ <PrivateImplementationDetails> A516EECB41051151F0183A8B0B6F6693C43F7D9E1815F85CAAAB18E00A5269A2;
    static /*0xafd4*/ <PrivateImplementationDetails> AAF4528994DD7C464F43C131F6CD44DF41ACC18462C95877252FFC7EAC0164EF;
    static /*0xb01c*/ <PrivateImplementationDetails> B215DD70A77190680641703C6DF73729B4583E285AF8B51ACF9086655FB2D0F3;
    static /*0xc01c*/ <PrivateImplementationDetails> B21802DE889E5F4F5344C8E0D366F59B68F886F88EFE45EA5CE01534A3F5C0E5;
    static /*0xc050*/ <PrivateImplementationDetails> B55F94CD2F415D0279D7A1AF2265C4D9A90CE47F8C900D5D09AD088796210838;
    static /*0xc8d0*/ <PrivateImplementationDetails> BABD01C34E7E65E57E4C431281E782B4101CE0644A8090AD6E501F1C6CF2C9DF;
    static /*0xc8f4*/ <PrivateImplementationDetails> BB425A9B43E10C921902A25D07A4317DEFF9F606A788672E1B21633C143407F0;
    static /*0xc904*/ <PrivateImplementationDetails> C250CAD28060A4EB63B4C4A643DDA196CCD35FD2FC67FB749ADF4BAC6D62E1A0;
    static /*0xc928*/ <PrivateImplementationDetails> C2D8E5EED6CBEBD8625FC18F81486A7733C04F9B0129FFBE974C68B90308B4F2;
    static /*0xca28*/ <PrivateImplementationDetails> C5733A1245383FBF067B4A9BDB41E3FB8E3A6BDEF37B3D5418F389422875783F;
    static /*0xca70*/ <PrivateImplementationDetails> C8EC70AC5A448C3A45CF1DFCC1375BE4E80DC6793E97D5E89BD97A0DC232B2E3;
    static /*0xce70*/ <PrivateImplementationDetails> C95D810E738DB5F591EE691CE884EED2F110D9F82B1F7A8BE6ED257FDF4CDBEB;
    static /*0xce80*/ <PrivateImplementationDetails> C9830DF6956357ACE51CE1F82298578B36EB45A0CFDB8AEC5B9FDA7DB17E8063;
    static /*0xcf02*/ <PrivateImplementationDetails> CAF8A46B3A07E26F84FE849B57A877051A0D06194B1C057985446B64BCC6E016;
    static /*0xcf4a*/ <PrivateImplementationDetails> CAFFFC9D15E4037EE8FBDB1A45DFE456F0936BDC7310F1882EAF14B706A76658;
    static /*0xcf6e*/ <PrivateImplementationDetails> CE11D6DEAFFC6D6EF6030E30E7444C933E6261F32AA737064EF0446C219ECE22;
    static /*0xdf6e*/ <PrivateImplementationDetails> D1A99909A2923269BB67E72C1AED693F74961BDA58360FCC133007740CEBF5F1;
    static /*0xdfb6*/ <PrivateImplementationDetails> D3B16F8D71CB719B941527D5A1ADA7ED83F4EB967FEE117DDA2FE4021E1D283F;
    static /*0xdfbc*/ <PrivateImplementationDetails> D503954AE2C3616EA32CEB0D66F5B2E119D03CE722773E5D7E1A8BC8F1803631;
    static /*0xe004*/ <PrivateImplementationDetails> D6691EE5A533DE7E0859066942261B24D0C836D7EE016D2251377BFEE40FEA15;
    static /*0xe0b0*/ <PrivateImplementationDetails> D870074914025E855AA5985A2D6778F1E277036BF9C9F03DEC61F3C496FEC35C;
    static /*0xe8b0*/ <PrivateImplementationDetails> D896D464C3726A21162F271ACB711464AD07EA9C9CE78E0297FD0DE934471FA6;
    static /*0xe8bc*/ <PrivateImplementationDetails> D8A29F3D197FBB54CF9F4B105AFBA6B1257ADF6449F0184F843380AAAA24639C;
    static /*0xe904*/ <PrivateImplementationDetails> DCDCF594464B904F763D4CE53B1DBE08A47E551AE86FD5D61F63FD0C3313FDC3;
    static /*0xe94c*/ <PrivateImplementationDetails> DCE88EE5233B9D0FD0D7A6222C82BC3AEE83B15E9992F939B17AB40530DB555C;
    static /*0xf27a*/ <PrivateImplementationDetails> DD471F12FFA94CC557A02A91C2CBB95F551AB28C8BBF297B2F953B8886BCCF6D;
    static /*0xf312*/ <PrivateImplementationDetails> DF29A050CD2EBD9DFDC783DB1CC74D3D716DAEC1630A337EE31B9E2E03D34D2D;
    static /*0xf35a*/ <PrivateImplementationDetails> E148B2057CF0C1595155635E761FB66AAE634C40D8FABC4CE79A2DB8886525D4;
    static /*0x1035a*/ <PrivateImplementationDetails> E2C673A3A737B04369A63F1FB1A30F6E742B066E2CCCD9B1838793CBB5590598;
    static /*0x10380*/ <PrivateImplementationDetails> E32C465157D21F39B3DBF186A98FB02185C63B0260B47247A7A5FDF2B061EAA8;
    static /*0x1038c*/ <PrivateImplementationDetails> E5F4F6214036DF103321A8A0CE30C2EF935694B4199D52BC538E7EF3F045CB92;
    static /*0x103a4*/ <PrivateImplementationDetails> E768EDCAE10BAB68BB5DF102FDBB8CF4F31B9D60159B44DA3F33ABC36388308B;
    static /*0x103e4*/ <PrivateImplementationDetails> E8588351183F6F6A7DAD54DC28357628F3C4D4B358AB92A18AE7D08B0D9B0092;
    static /*0x107de*/ <PrivateImplementationDetails> EBE07C3718876777F609CD22058F4C3A6CCCC695F5BDE90998DC1E12E0CBE63D;
    static /*0x107ea*/ <PrivateImplementationDetails> EE415D5C3ECC6C8C19F71BCD4E03847F5A15931374A7F5BF88C24B722F04B8FE;
    static /*0x1080a*/ <PrivateImplementationDetails> EF39C5A882F9477B2A250BA257247825CEB07FC53C3C984385F2C2E5F8222431;
    static /*0x1090a*/ <PrivateImplementationDetails> EF82B163CA8252A793A6E73F57775D843C9A21F65586926EB11893FA8BB603E9;
    static /*0x1091a*/ <PrivateImplementationDetails> F0CF66F9B123DCEBB39C38C5D8E4821D4E94DB593889C506BCA0827036F1B7EB;
    static /*0x10a0a*/ <PrivateImplementationDetails> F1945CD6C19E56B3C1C78943EF5EC18116907A4CA1EFC40A57D48AB1DB7ADFC5;
    static /*0x10a0d*/ <PrivateImplementationDetails> F2830F044682E33B39018B5912634835B641562914E192CA66C654F5E4492FA8;
    static /*0x10b0d*/ <PrivateImplementationDetails> F4BD8144313C3B67E191C6F3CD8B00540FF1809837C5BCA5C2FDA0D518681563;
    static /*0x10b55*/ <PrivateImplementationDetails> F7D381AF73D85950E0B064CF1AA8F14938A1F38084B46CE36AAEFE81BEF739F3;
    static /*0x10c29*/ <PrivateImplementationDetails> FADB218011E7702BB9575D0C32A685DA10B5C72EB809BD9A955DB1C76E4D8315;
    static /*0x10c5d*/ <PrivateImplementationDetails> FB2089AF82E09593374B65EC2440779FDCF5DD6DA07D26E57AF6790667B937CD;
    static /*0x11115*/ <PrivateImplementationDetails> FD68700E95459C5E7A49C5830F8BD0A9BA4BD171252663D8066B09E7768C5C5D;
    static /*0x11205*/ <PrivateImplementationDetails> FEC387BA57A54BB6066E4CA8A4F9C0FF9C36B9CBD6600C3683F6FB1BDB5077EB;

    static /*0x164f470*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=3
    {
    }

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=10
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=15
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=38
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=42
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=52
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=84
    {
    }

    struct __StaticArrayInitTypeSize=94
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=130
    {
    }

    struct __StaticArrayInitTypeSize=152
    {
    }

    struct __StaticArrayInitTypeSize=170
    {
    }

    struct __StaticArrayInitTypeSize=172
    {
    }

    struct __StaticArrayInitTypeSize=174
    {
    }

    struct __StaticArrayInitTypeSize=212
    {
    }

    struct __StaticArrayInitTypeSize=240
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=262
    {
    }

    struct __StaticArrayInitTypeSize=288
    {
    }

    struct __StaticArrayInitTypeSize=336
    {
    }

    struct __StaticArrayInitTypeSize=360
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=648
    {
    }

    struct __StaticArrayInitTypeSize=998
    {
    }

    struct __StaticArrayInitTypeSize=1018
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1208
    {
    }

    struct __StaticArrayInitTypeSize=1450
    {
    }

    struct __StaticArrayInitTypeSize=1472
    {
    }

    struct __StaticArrayInitTypeSize=1665
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=2100
    {
    }

    struct __StaticArrayInitTypeSize=2176
    {
    }

    struct __StaticArrayInitTypeSize=2350
    {
    }

    struct __StaticArrayInitTypeSize=2382
    {
    }

    struct __StaticArrayInitTypeSize=3132
    {
    }

    struct __StaticArrayInitTypeSize=4096
    {
    }

    struct __StaticArrayInitTypeSize=5952
    {
    }

    struct __StaticArrayInitTypeSize=10800
    {
    }
}

namespace Unity
{
    class ThrowStub : System.ObjectDisposedException
    {
        static /*0x164f4ec*/ void ThrowNotSupportedException();
    }
}
